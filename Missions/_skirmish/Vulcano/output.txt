// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 880 0 0
// PrepareRussian ;
  23: CALL 3532 0 0
// PrepareLegion ;
  27: CALL 7063 0 0
// Action ;
  31: CALL 10742 0 0
// InitArt ;
  35: CALL 201 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// base_captured := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// russian_prepared := false ;
  51: LD_ADDR_EXP 2
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// ru_can_attack := false ;
  59: LD_ADDR_EXP 3
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_sib_bomb := false ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 5
  82: PUSH
  83: LD_INT 10
  85: PUSH
  86: LD_INT 25
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: LIST
  93: PUSH
  94: LD_OWVAR 67
  98: ARRAY
  99: ST_TO_ADDR
// player_res_art := false ;
 100: LD_ADDR_EXP 6
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// player_artifact_ready := false ;
 108: LD_ADDR_EXP 7
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// art_icon := art_use_atom ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 7
 123: ST_TO_ADDR
// time_res_art := 600 ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 600
 131: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: LD_INT 21000
 139: ST_TO_ADDR
// mine_vulc := false ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// medal_enabled := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// dead_counter := 0 ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// kill_counter := 0 ;
 164: LD_ADDR_EXP 15
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// veh_counter := 0 ;
 172: LD_ADDR_EXP 16
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// tech_counter := 0 ;
 180: LD_ADDR_EXP 17
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 188: LD_ADDR_EXP 18
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// end ;
 196: LD_VAR 0 1
 200: RET
// function InitArt ; begin
 201: LD_INT 0
 203: PPUSH
// SetArtifactRes ( your_side , true ) ;
 204: LD_OWVAR 2
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: CALL_OW 467
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 228: LD_ADDR_EXP 21
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 6
 238: PUSH
 239: LD_INT 5
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: PUSH
 247: LD_OWVAR 67
 251: ARRAY
 252: ST_TO_ADDR
// us_force := [ ] ;
 253: LD_ADDR_EXP 20
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 260: LD_INT 17
 262: PPUSH
 263: CALL_OW 355
// PrepareAllianceAI ( ) ;
 267: CALL 16079 0 0
// uc_side := 1 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// uc_nation := nation_american ;
 279: LD_ADDR_OWVAR 21
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// hc_gallery :=  ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING 
 294: ST_TO_ADDR
// hc_name :=  ;
 295: LD_ADDR_OWVAR 26
 299: PUSH
 300: LD_STRING 
 302: ST_TO_ADDR
// hc_importance := 0 ;
 303: LD_ADDR_OWVAR 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// for i = 1 to 11 do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: DOUBLE
 317: LD_INT 1
 319: DEC
 320: ST_TO_ADDR
 321: LD_INT 11
 323: PUSH
 324: FOR_TO
 325: IFFALSE 378
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 327: LD_INT 0
 329: PPUSH
 330: LD_INT 1
 332: PPUSH
 333: LD_INT 4
 335: PPUSH
 336: CALL_OW 12
 340: PPUSH
 341: LD_EXP 21
 345: PPUSH
 346: CALL_OW 380
// un := CreateHuman ;
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: CALL_OW 44
 359: ST_TO_ADDR
// us_force := us_force ^ un ;
 360: LD_ADDR_EXP 20
 364: PUSH
 365: LD_EXP 20
 369: PUSH
 370: LD_VAR 0 4
 374: ADD
 375: ST_TO_ADDR
// end ;
 376: GO 324
 378: POP
 379: POP
// hc_importance := 100 ;
 380: LD_ADDR_OWVAR 32
 384: PUSH
 385: LD_INT 100
 387: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 388: LD_INT 1
 390: PPUSH
 391: LD_INT 1
 393: PPUSH
 394: LD_EXP 21
 398: PPUSH
 399: CALL_OW 380
// us_commander := CreateHuman ;
 403: LD_ADDR_EXP 19
 407: PUSH
 408: CALL_OW 44
 412: ST_TO_ADDR
// player_commander := us_commander ;
 413: LD_ADDR_EXP 10
 417: PUSH
 418: LD_EXP 19
 422: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 423: LD_ADDR_VAR 0 5
 427: PUSH
 428: LD_STRING text
 430: PPUSH
 431: LD_INT 6
 433: PUSH
 434: LD_INT 5
 436: PUSH
 437: LD_INT 4
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: PUSH
 445: LD_OWVAR 67
 449: ARRAY
 450: PPUSH
 451: LD_INT 6
 453: PUSH
 454: LD_INT 5
 456: PUSH
 457: LD_INT 4
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: LIST
 464: PUSH
 465: LD_OWVAR 67
 469: ARRAY
 470: PPUSH
 471: LD_INT -5
 473: PUSH
 474: LD_EXP 19
 478: PUSH
 479: LD_INT -3
 481: PUSH
 482: LD_INT -2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_EXP 20
 495: ADD
 496: PPUSH
 497: LD_INT 1
 499: PUSH
 500: LD_INT 3
 502: PUSH
 503: LD_INT 2
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 4
 515: PUSH
 516: LD_INT 1
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 5
 525: PUSH
 526: LD_INT 5
 528: PUSH
 529: LD_INT 1
 531: NEG
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: PUSH
 538: LD_OWVAR 67
 542: ARRAY
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PPUSH
 551: CALL_OW 42
 555: ST_TO_ADDR
// team := team ^ us_commander ;
 556: LD_ADDR_VAR 0 5
 560: PUSH
 561: LD_VAR 0 5
 565: PUSH
 566: LD_EXP 19
 570: ADD
 571: ST_TO_ADDR
// for i = 1 to team do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_VAR 0 5
 586: PUSH
 587: FOR_TO
 588: IFFALSE 613
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 590: LD_VAR 0 5
 594: PUSH
 595: LD_VAR 0 2
 599: ARRAY
 600: PPUSH
 601: LD_INT 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 587
 613: POP
 614: POP
// end ;
 615: LD_VAR 0 1
 619: RET
// every 0 0$38 + 2 2$00 trigger tick < 73500 do
 620: LD_OWVAR 1
 624: PUSH
 625: LD_INT 73500
 627: LESS
 628: IFFALSE 655
 630: GO 632
 632: DISABLE
// begin enable ;
 633: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 634: LD_INT 1
 636: PPUSH
 637: LD_INT 5
 639: PPUSH
 640: CALL_OW 12
 644: PPUSH
 645: LD_INT 24
 647: PPUSH
 648: LD_INT 1
 650: PPUSH
 651: CALL_OW 55
// end ;
 655: END
// every 1 1$10 do var time , p , l ;
 656: GO 658
 658: DISABLE
 659: LD_INT 0
 661: PPUSH
 662: PPUSH
 663: PPUSH
// begin time := 0 0$44 ;
 664: LD_ADDR_VAR 0 1
 668: PUSH
 669: LD_INT 1540
 671: ST_TO_ADDR
// l := 0 ;
 672: LD_ADDR_VAR 0 3
 676: PUSH
 677: LD_INT 0
 679: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 680: LD_VAR 0 1
 684: PPUSH
 685: CALL_OW 67
// l := l + 1 ;
 689: LD_ADDR_VAR 0 3
 693: PUSH
 694: LD_VAR 0 3
 698: PUSH
 699: LD_INT 1
 701: PLUS
 702: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 30 then
 703: LD_INT 12
 705: PPUSH
 706: CALL_OW 435
 710: PUSH
 711: LD_INT 30
 713: LESS
 714: IFFALSE 773
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_INT 5
 721: PPUSH
 722: CALL_OW 12
 726: PPUSH
 727: LD_INT 12
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: CALL_OW 55
// Wait ( Rand ( 0 0$33 , 0 0$44 ) ) ;
 737: LD_INT 1155
 739: PPUSH
 740: LD_INT 1540
 742: PPUSH
 743: CALL_OW 12
 747: PPUSH
 748: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 5
 757: PPUSH
 758: CALL_OW 12
 762: PPUSH
 763: LD_INT 12
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 773: LD_ADDR_VAR 0 2
 777: PUSH
 778: LD_INT 0
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: CALL_OW 12
 788: ST_TO_ADDR
// if p then
 789: LD_VAR 0 2
 793: IFFALSE 828
// begin Wait ( Rand ( 0 0$03 , 0 0$10 ) ) ;
 795: LD_INT 105
 797: PPUSH
 798: LD_INT 350
 800: PPUSH
 801: CALL_OW 12
 805: PPUSH
 806: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 810: LD_INT 1
 812: PPUSH
 813: LD_INT 4
 815: PPUSH
 816: CALL_OW 12
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 828: LD_VAR 0 3
 832: PUSH
 833: LD_INT 15
 835: PUSH
 836: LD_INT 13
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_OWVAR 67
 851: ARRAY
 852: MOD
 853: PUSH
 854: LD_INT 0
 856: EQUAL
 857: IFFALSE 873
// time := time + 2 2$00 ;
 859: LD_ADDR_VAR 0 1
 863: PUSH
 864: LD_VAR 0 1
 868: PUSH
 869: LD_INT 4200
 871: PLUS
 872: ST_TO_ADDR
// end until false ;
 873: LD_INT 0
 875: IFFALSE 680
// end ; end_of_file
 877: PPOPN 3
 879: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , p , russian_in_base ; begin
 880: LD_INT 0
 882: PPUSH
 883: PPUSH
 884: PPUSH
 885: PPUSH
 886: PPUSH
 887: PPUSH
 888: PPUSH
 889: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 890: LD_ADDR_VAR 0 3
 894: PUSH
 895: LD_INT 22
 897: PUSH
 898: LD_INT 4
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PUSH
 905: LD_INT 21
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PPUSH
 919: CALL_OW 69
 923: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 924: LD_ADDR_VAR 0 4
 928: PUSH
 929: LD_INT 470
 931: PUSH
 932: LD_INT 370
 934: PUSH
 935: LD_INT 290
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_OWVAR 67
 947: ARRAY
 948: ST_TO_ADDR
// case Difficulty of 2 :
 949: LD_OWVAR 67
 953: PUSH
 954: LD_INT 2
 956: DOUBLE
 957: EQUAL
 958: IFTRUE 962
 960: GO 993
 962: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
 963: LD_VAR 0 3
 967: PPUSH
 968: LD_INT 30
 970: PUSH
 971: LD_INT 32
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PPUSH
 978: CALL_OW 72
 982: PUSH
 983: LD_INT 1
 985: ARRAY
 986: PPUSH
 987: CALL_OW 65
// end ; 3 :
 991: GO 1069
 993: LD_INT 3
 995: DOUBLE
 996: EQUAL
 997: IFTRUE 1001
 999: GO 1068
1001: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1002: LD_VAR 0 3
1006: PPUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 32
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL_OW 72
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1030: LD_VAR 0 3
1034: PPUSH
1035: LD_INT 30
1037: PUSH
1038: LD_INT 27
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 72
1049: PUSH
1050: LD_INT 1
1052: PPUSH
1053: LD_INT 3
1055: PPUSH
1056: CALL_OW 12
1060: ARRAY
1061: PPUSH
1062: CALL_OW 65
// end ; end ;
1066: GO 1069
1068: POP
// for i = 1 to filter do
1069: LD_ADDR_VAR 0 2
1073: PUSH
1074: DOUBLE
1075: LD_INT 1
1077: DEC
1078: ST_TO_ADDR
1079: LD_VAR 0 3
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1122
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1087: LD_VAR 0 3
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 4
1102: PUSH
1103: LD_INT 29
1105: NEG
1106: PPUSH
1107: LD_INT 29
1109: PPUSH
1110: CALL_OW 12
1114: PLUS
1115: PPUSH
1116: CALL_OW 234
1120: GO 1084
1122: POP
1123: POP
// SetBName ( us_depot , Vulcano1 ) ;
1124: LD_INT 50
1126: PPUSH
1127: LD_STRING Vulcano1
1129: PPUSH
1130: CALL_OW 500
// hc_importance := 0 ;
1134: LD_ADDR_OWVAR 32
1138: PUSH
1139: LD_INT 0
1141: ST_TO_ADDR
// uc_side := 3 ;
1142: LD_ADDR_OWVAR 20
1146: PUSH
1147: LD_INT 3
1149: ST_TO_ADDR
// uc_nation := nation_russian ;
1150: LD_ADDR_OWVAR 21
1154: PUSH
1155: LD_INT 3
1157: ST_TO_ADDR
// russian_in_base := [ ] ;
1158: LD_ADDR_VAR 0 8
1162: PUSH
1163: EMPTY
1164: ST_TO_ADDR
// area := RandPointsFromArea ( 82 , 137 , 106 , 152 , 10 ) ;
1165: LD_ADDR_VAR 0 6
1169: PUSH
1170: LD_INT 82
1172: PPUSH
1173: LD_INT 137
1175: PPUSH
1176: LD_INT 106
1178: PPUSH
1179: LD_INT 152
1181: PPUSH
1182: LD_INT 10
1184: PPUSH
1185: CALL 1562 0 5
1189: ST_TO_ADDR
// p := 1 ;
1190: LD_ADDR_VAR 0 7
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1198: LD_ADDR_VAR 0 2
1202: PUSH
1203: DOUBLE
1204: LD_INT 1
1206: DEC
1207: ST_TO_ADDR
1208: LD_INT 6
1210: PUSH
1211: LD_INT 6
1213: PUSH
1214: LD_INT 7
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_OWVAR 67
1226: ARRAY
1227: PUSH
1228: FOR_TO
1229: IFFALSE 1341
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1231: LD_INT 0
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 4
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: PUSH
1251: LD_OWVAR 67
1255: ARRAY
1256: PPUSH
1257: CALL_OW 380
// un := CreateHuman ;
1261: LD_ADDR_VAR 0 5
1265: PUSH
1266: CALL_OW 44
1270: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1271: LD_ADDR_VAR 0 8
1275: PUSH
1276: LD_VAR 0 8
1280: PUSH
1281: LD_VAR 0 5
1285: ADD
1286: ST_TO_ADDR
// PlaceUnitXY ( un , area [ p ] , area [ p + 1 ] , false ) ;
1287: LD_VAR 0 5
1291: PPUSH
1292: LD_VAR 0 6
1296: PUSH
1297: LD_VAR 0 7
1301: ARRAY
1302: PPUSH
1303: LD_VAR 0 6
1307: PUSH
1308: LD_VAR 0 7
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 48
// p := p + 2 ;
1325: LD_ADDR_VAR 0 7
1329: PUSH
1330: LD_VAR 0 7
1334: PUSH
1335: LD_INT 2
1337: PLUS
1338: ST_TO_ADDR
// end ;
1339: GO 1228
1341: POP
1342: POP
// end ;
1343: LD_VAR 0 1
1347: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1348: LD_INT 50
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 2052 0 2
1358: PUSH
1359: LD_INT 40
1361: LESS
1362: IFFALSE 1559
1364: GO 1366
1366: DISABLE
1367: LD_INT 0
1369: PPUSH
1370: PPUSH
// begin uc_side := 4 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 4
1378: ST_TO_ADDR
// uc_nation := nation_american ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// hc_importance := 0 ;
1387: LD_ADDR_OWVAR 32
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// for i = 1 to 7 do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: DOUBLE
1401: LD_INT 1
1403: DEC
1404: ST_TO_ADDR
1405: LD_INT 7
1407: PUSH
1408: FOR_TO
1409: IFFALSE 1473
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1411: LD_INT 0
1413: PPUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 12
1424: PPUSH
1425: LD_EXP 21
1429: PPUSH
1430: CALL_OW 380
// un := CreateHuman ;
1434: LD_ADDR_VAR 0 2
1438: PUSH
1439: CALL_OW 44
1443: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1444: LD_VAR 0 2
1448: PPUSH
1449: LD_INT 7
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: CALL_OW 49
// SetLives ( un , 10 ) ;
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_INT 10
1466: PPUSH
1467: CALL_OW 234
// end ;
1471: GO 1408
1473: POP
1474: POP
// for i = 1 to 5 do
1475: LD_ADDR_VAR 0 1
1479: PUSH
1480: DOUBLE
1481: LD_INT 1
1483: DEC
1484: ST_TO_ADDR
1485: LD_INT 5
1487: PUSH
1488: FOR_TO
1489: IFFALSE 1557
// begin PrepareHuman ( false , 4 , us_skill ) ;
1491: LD_INT 0
1493: PPUSH
1494: LD_INT 4
1496: PPUSH
1497: LD_EXP 21
1501: PPUSH
1502: CALL_OW 380
// SetDir ( un , 1 ) ;
1506: LD_VAR 0 2
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL_OW 233
// un := CreateHuman ;
1518: LD_ADDR_VAR 0 2
1522: PUSH
1523: CALL_OW 44
1527: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_INT 23
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// SetLives ( un , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_INT 10
1550: PPUSH
1551: CALL_OW 234
// end ;
1555: GO 1488
1557: POP
1558: POP
// end ; end_of_file
1559: PPOPN 2
1561: END
// export function RandPointsFromArea ( x1 , y1 , x2 , y2 , num ) ; var list , i ; begin
1562: LD_INT 0
1564: PPUSH
1565: PPUSH
1566: PPUSH
// list := [ ] ;
1567: LD_ADDR_VAR 0 7
1571: PUSH
1572: EMPTY
1573: ST_TO_ADDR
// for i = 1 to num do
1574: LD_ADDR_VAR 0 8
1578: PUSH
1579: DOUBLE
1580: LD_INT 1
1582: DEC
1583: ST_TO_ADDR
1584: LD_VAR 0 5
1588: PUSH
1589: FOR_TO
1590: IFFALSE 1646
// begin list := list ^ Rand ( x1 , x2 ) ;
1592: LD_ADDR_VAR 0 7
1596: PUSH
1597: LD_VAR 0 7
1601: PUSH
1602: LD_VAR 0 1
1606: PPUSH
1607: LD_VAR 0 3
1611: PPUSH
1612: CALL_OW 12
1616: ADD
1617: ST_TO_ADDR
// list := list ^ Rand ( y1 , y2 ) ;
1618: LD_ADDR_VAR 0 7
1622: PUSH
1623: LD_VAR 0 7
1627: PUSH
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL_OW 12
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1589
1646: POP
1647: POP
// result := list ;
1648: LD_ADDR_VAR 0 6
1652: PUSH
1653: LD_VAR 0 7
1657: ST_TO_ADDR
// end ;
1658: LD_VAR 0 6
1662: RET
// export function IntBazooka ( list , filter ) ; var ta , c , i ; begin
1663: LD_INT 0
1665: PPUSH
1666: PPUSH
1667: PPUSH
1668: PPUSH
// c := Rand ( 1 , 3 ) ;
1669: LD_ADDR_VAR 0 5
1673: PUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 3
1679: PPUSH
1680: CALL_OW 12
1684: ST_TO_ADDR
// for i = 1 to list do
1685: LD_ADDR_VAR 0 6
1689: PUSH
1690: DOUBLE
1691: LD_INT 1
1693: DEC
1694: ST_TO_ADDR
1695: LD_VAR 0 1
1699: PUSH
1700: FOR_TO
1701: IFFALSE 1883
// for ta in filter do
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: LD_VAR 0 2
1712: PUSH
1713: FOR_IN
1714: IFFALSE 1879
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
1716: LD_VAR 0 1
1720: PUSH
1721: LD_VAR 0 6
1725: ARRAY
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 296
1736: PUSH
1737: LD_INT 15
1739: LESSEQUAL
1740: IFFALSE 1877
// begin case c of 1 :
1742: LD_VAR 0 5
1746: PUSH
1747: LD_INT 1
1749: DOUBLE
1750: EQUAL
1751: IFTRUE 1755
1753: GO 1793
1755: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
1756: LD_VAR 0 1
1760: PUSH
1761: LD_VAR 0 6
1765: ARRAY
1766: PPUSH
1767: LD_VAR 0 4
1771: PPUSH
1772: CALL_OW 250
1776: PPUSH
1777: LD_VAR 0 4
1781: PPUSH
1782: CALL_OW 251
1786: PPUSH
1787: CALL_OW 154
1791: GO 1877
1793: LD_INT 2
1795: DOUBLE
1796: EQUAL
1797: IFTRUE 1801
1799: GO 1865
1801: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
1802: LD_VAR 0 1
1806: PUSH
1807: LD_VAR 0 6
1811: ARRAY
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: CALL_OW 250
1822: PUSH
1823: LD_INT 1
1825: NEG
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: CALL_OW 12
1834: PLUS
1835: PPUSH
1836: LD_VAR 0 4
1840: PPUSH
1841: CALL_OW 251
1845: PUSH
1846: LD_INT 1
1848: NEG
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: CALL_OW 12
1857: PLUS
1858: PPUSH
1859: CALL_OW 153
1863: GO 1877
1865: LD_INT 3
1867: DOUBLE
1868: EQUAL
1869: IFTRUE 1873
1871: GO 1876
1873: POP
// ; end ;
1874: GO 1877
1876: POP
// end ; end ;
1877: GO 1713
1879: POP
1880: POP
1881: GO 1700
1883: POP
1884: POP
// end ;
1885: LD_VAR 0 3
1889: RET
// export function PrepareApeman ( n ) ; var un , i ; begin
1890: LD_INT 0
1892: PPUSH
1893: PPUSH
1894: PPUSH
// for i = 1 to n do
1895: LD_ADDR_VAR 0 4
1899: PUSH
1900: DOUBLE
1901: LD_INT 1
1903: DEC
1904: ST_TO_ADDR
1905: LD_VAR 0 1
1909: PUSH
1910: FOR_TO
1911: IFFALSE 2045
// begin uc_side := 0 ;
1913: LD_ADDR_OWVAR 20
1917: PUSH
1918: LD_INT 0
1920: ST_TO_ADDR
// uc_nation := 0 ;
1921: LD_ADDR_OWVAR 21
1925: PUSH
1926: LD_INT 0
1928: ST_TO_ADDR
// hc_class := class_apeman ;
1929: LD_ADDR_OWVAR 28
1933: PUSH
1934: LD_INT 12
1936: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1937: LD_ADDR_OWVAR 31
1941: PUSH
1942: LD_INT 0
1944: PUSH
1945: LD_INT 0
1947: PUSH
1948: LD_INT 0
1950: PUSH
1951: LD_INT 0
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// hc_name :=  ;
1960: LD_ADDR_OWVAR 26
1964: PUSH
1965: LD_STRING 
1967: ST_TO_ADDR
// hc_gallery :=  ;
1968: LD_ADDR_OWVAR 33
1972: PUSH
1973: LD_STRING 
1975: ST_TO_ADDR
// hc_importance := 0 ;
1976: LD_ADDR_OWVAR 32
1980: PUSH
1981: LD_INT 0
1983: ST_TO_ADDR
// un := CreateHuman ;
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: CALL_OW 44
1993: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1994: LD_VAR 0 3
1998: PPUSH
1999: LD_INT 19
2001: PUSH
2002: LD_INT 20
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 2
2014: PPUSH
2015: CALL_OW 12
2019: ARRAY
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2028: LD_INT 1155
2030: PPUSH
2031: LD_INT 5355
2033: PPUSH
2034: CALL_OW 12
2038: PPUSH
2039: CALL_OW 67
// end ;
2043: GO 1910
2045: POP
2046: POP
// end ;
2047: LD_VAR 0 2
2051: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2052: LD_INT 0
2054: PPUSH
2055: PPUSH
2056: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2057: LD_ADDR_VAR 0 4
2061: PUSH
2062: LD_INT 22
2064: PUSH
2065: LD_VAR 0 2
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PPUSH
2074: CALL_OW 69
2078: PPUSH
2079: LD_VAR 0 1
2083: PPUSH
2084: CALL_OW 74
2088: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2089: LD_ADDR_VAR 0 5
2093: PUSH
2094: LD_VAR 0 1
2098: PPUSH
2099: LD_VAR 0 4
2103: PPUSH
2104: CALL_OW 296
2108: ST_TO_ADDR
// if dist >= 9999 then
2109: LD_VAR 0 5
2113: PUSH
2114: LD_INT 9999
2116: GREATEREQUAL
2117: IFFALSE 2130
// result := - 1 else
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: LD_INT 1
2126: NEG
2127: ST_TO_ADDR
2128: GO 2140
// result := dist ;
2130: LD_ADDR_VAR 0 3
2134: PUSH
2135: LD_VAR 0 5
2139: ST_TO_ADDR
// end ;
2140: LD_VAR 0 3
2144: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
// tmp := 9999 ;
2151: LD_ADDR_VAR 0 5
2155: PUSH
2156: LD_INT 9999
2158: ST_TO_ADDR
// for i = 1 to plist do
2159: LD_ADDR_VAR 0 4
2163: PUSH
2164: DOUBLE
2165: LD_INT 1
2167: DEC
2168: ST_TO_ADDR
2169: LD_VAR 0 1
2173: PUSH
2174: FOR_TO
2175: IFFALSE 2249
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2177: LD_VAR 0 1
2181: PUSH
2182: LD_VAR 0 4
2186: ARRAY
2187: PPUSH
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL 2052 0 2
2197: PUSH
2198: LD_VAR 0 5
2202: LESS
2203: IFFALSE 2247
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_VAR 0 1
2214: PUSH
2215: LD_VAR 0 4
2219: ARRAY
2220: PPUSH
2221: LD_VAR 0 2
2225: PPUSH
2226: CALL 2052 0 2
2230: ST_TO_ADDR
// unit := plist [ i ] ;
2231: LD_ADDR_VAR 0 6
2235: PUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_VAR 0 4
2245: ARRAY
2246: ST_TO_ADDR
// end ;
2247: GO 2174
2249: POP
2250: POP
// result := unit ;
2251: LD_ADDR_VAR 0 3
2255: PUSH
2256: LD_VAR 0 6
2260: ST_TO_ADDR
// end ;
2261: LD_VAR 0 3
2265: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2273: LD_ADDR_VAR 0 2
2277: PUSH
2278: LD_INT 1000
2280: PUSH
2281: LD_INT 2500
2283: PUSH
2284: LD_INT 5000
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: LIST
2291: PUSH
2292: LD_OWVAR 67
2296: ARRAY
2297: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2298: LD_ADDR_VAR 0 2
2302: PUSH
2303: LD_VAR 0 2
2307: PUSH
2308: LD_INT 1
2310: NEG
2311: PUSH
2312: LD_INT 22
2314: PUSH
2315: LD_OWVAR 2
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 21
2326: PUSH
2327: LD_INT 3
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: PPUSH
2338: CALL_OW 69
2342: MUL
2343: PUSH
2344: LD_INT 30
2346: MUL
2347: PLUS
2348: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 15
2363: PUSH
2364: LD_INT 10
2366: MUL
2367: PLUS
2368: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2369: LD_ADDR_VAR 0 2
2373: PUSH
2374: LD_VAR 0 2
2378: PUSH
2379: LD_INT 1
2381: NEG
2382: PUSH
2383: LD_EXP 15
2387: MUL
2388: PUSH
2389: LD_INT 20
2391: MUL
2392: PLUS
2393: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2394: LD_ADDR_VAR 0 2
2398: PUSH
2399: LD_VAR 0 2
2403: PUSH
2404: LD_INT 1
2406: NEG
2407: PUSH
2408: LD_OWVAR 1
2412: PUSH
2413: LD_INT 35
2415: DIVREAL
2416: PUSH
2417: LD_INT 60
2419: DIVREAL
2420: MUL
2421: PUSH
2422: LD_INT 25
2424: MUL
2425: PLUS
2426: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PUSH
2437: LD_EXP 17
2441: PUSH
2442: LD_INT 15
2444: MUL
2445: PLUS
2446: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2447: LD_ADDR_VAR 0 2
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_INT 1
2459: NEG
2460: PUSH
2461: LD_EXP 18
2465: MUL
2466: PUSH
2467: LD_INT 1000
2469: MUL
2470: PLUS
2471: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2472: LD_ADDR_VAR 0 2
2476: PUSH
2477: LD_VAR 0 2
2481: PUSH
2482: LD_EXP 16
2486: PUSH
2487: LD_INT 5
2489: MUL
2490: PLUS
2491: ST_TO_ADDR
// result := points ;
2492: LD_ADDR_VAR 0 1
2496: PUSH
2497: LD_VAR 0 2
2501: ST_TO_ADDR
// end ; end_of_file
2502: LD_VAR 0 1
2506: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2507: LD_VAR 0 1
2511: PPUSH
2512: CALL 31426 0 1
// if GetSide ( un ) = your_side then
2516: LD_VAR 0 1
2520: PPUSH
2521: CALL_OW 255
2525: PUSH
2526: LD_OWVAR 2
2530: EQUAL
2531: IFFALSE 2547
// dead_counter := dead_counter + 1 ;
2533: LD_ADDR_EXP 14
2537: PUSH
2538: LD_EXP 14
2542: PUSH
2543: LD_INT 1
2545: PLUS
2546: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2547: LD_VAR 0 1
2551: PPUSH
2552: CALL_OW 255
2556: PUSH
2557: LD_INT 81
2559: PUSH
2560: LD_OWVAR 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 69
2573: IN
2574: IFFALSE 2590
// kill_counter := kill_counter + 1 ;
2576: LD_ADDR_EXP 15
2580: PUSH
2581: LD_EXP 15
2585: PUSH
2586: LD_INT 1
2588: PLUS
2589: ST_TO_ADDR
// if un = player_commander then
2590: LD_VAR 0 1
2594: PUSH
2595: LD_EXP 10
2599: EQUAL
2600: IFFALSE 2609
// YouLost ( vulcano-lost ) ;
2602: LD_STRING vulcano-lost
2604: PPUSH
2605: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2609: LD_VAR 0 1
2613: PUSH
2614: LD_INT 22
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 21
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PPUSH
2638: CALL_OW 69
2642: IN
2643: IFFALSE 2759
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2645: LD_VAR 0 1
2649: PPUSH
2650: CALL_OW 266
2654: PUSH
2655: LD_INT 33
2657: EQUAL
2658: PUSH
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL_OW 266
2668: PUSH
2669: LD_INT 28
2671: EQUAL
2672: OR
2673: IFFALSE 2759
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2675: LD_ADDR_EXP 26
2679: PUSH
2680: LD_EXP 26
2684: PUSH
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL_OW 266
2694: ADD
2695: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2696: LD_ADDR_EXP 26
2700: PUSH
2701: LD_EXP 26
2705: PUSH
2706: LD_VAR 0 1
2710: PPUSH
2711: CALL_OW 250
2715: ADD
2716: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2717: LD_ADDR_EXP 26
2721: PUSH
2722: LD_EXP 26
2726: PUSH
2727: LD_VAR 0 1
2731: PPUSH
2732: CALL_OW 251
2736: ADD
2737: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2738: LD_ADDR_EXP 26
2742: PUSH
2743: LD_EXP 26
2747: PUSH
2748: LD_VAR 0 1
2752: PPUSH
2753: CALL_OW 254
2757: ADD
2758: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2759: LD_VAR 0 1
2763: PUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 8
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 21
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PPUSH
2788: CALL_OW 69
2792: IN
2793: IFFALSE 2937
// begin if GetBType ( un ) = b_barracks then
2795: LD_VAR 0 1
2799: PPUSH
2800: CALL_OW 266
2804: PUSH
2805: LD_INT 5
2807: EQUAL
2808: IFFALSE 2826
// legion_blist := legion_blist ^ b_armoury else
2810: LD_ADDR_EXP 34
2814: PUSH
2815: LD_EXP 34
2819: PUSH
2820: LD_INT 4
2822: ADD
2823: ST_TO_ADDR
2824: GO 2874
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2826: LD_VAR 0 1
2830: PPUSH
2831: CALL_OW 266
2835: PUSH
2836: LD_INT 1
2838: PUSH
2839: LD_INT 6
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: LIST
2849: IN
2850: NOT
2851: IFFALSE 2874
// legion_blist := legion_blist ^ GetBType ( un ) ;
2853: LD_ADDR_EXP 34
2857: PUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL_OW 266
2872: ADD
2873: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2874: LD_ADDR_EXP 34
2878: PUSH
2879: LD_EXP 34
2883: PUSH
2884: LD_VAR 0 1
2888: PPUSH
2889: CALL_OW 250
2893: ADD
2894: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2895: LD_ADDR_EXP 34
2899: PUSH
2900: LD_EXP 34
2904: PUSH
2905: LD_VAR 0 1
2909: PPUSH
2910: CALL_OW 251
2914: ADD
2915: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2916: LD_ADDR_EXP 34
2920: PUSH
2921: LD_EXP 34
2925: PUSH
2926: LD_VAR 0 1
2930: PPUSH
2931: CALL_OW 254
2935: ADD
2936: ST_TO_ADDR
// end ; if un in legion_force then
2937: LD_VAR 0 1
2941: PUSH
2942: LD_EXP 31
2946: IN
2947: IFFALSE 2965
// legion_force := legion_force diff un ;
2949: LD_ADDR_EXP 31
2953: PUSH
2954: LD_EXP 31
2958: PUSH
2959: LD_VAR 0 1
2963: DIFF
2964: ST_TO_ADDR
// if un in ru_force then
2965: LD_VAR 0 1
2969: PUSH
2970: LD_EXP 23
2974: IN
2975: IFFALSE 2993
// ru_force := ru_force diff un ;
2977: LD_ADDR_EXP 23
2981: PUSH
2982: LD_EXP 23
2986: PUSH
2987: LD_VAR 0 1
2991: DIFF
2992: ST_TO_ADDR
// if un in al_force then
2993: LD_VAR 0 1
2997: PUSH
2998: LD_EXP 38
3002: IN
3003: IFFALSE 3021
// al_force := al_force diff un ;
3005: LD_ADDR_EXP 38
3009: PUSH
3010: LD_EXP 38
3014: PUSH
3015: LD_VAR 0 1
3019: DIFF
3020: ST_TO_ADDR
// end ;
3021: PPOPN 1
3023: END
// on BuildingComplete ( b ) do var i ;
3024: LD_INT 0
3026: PPUSH
// begin if GetSide ( b ) = 8 then
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 255
3036: PUSH
3037: LD_INT 8
3039: EQUAL
3040: IFFALSE 3080
// for i = 1 to 4 do
3042: LD_ADDR_VAR 0 2
3046: PUSH
3047: DOUBLE
3048: LD_INT 1
3050: DEC
3051: ST_TO_ADDR
3052: LD_INT 4
3054: PUSH
3055: FOR_TO
3056: IFFALSE 3078
// legion_blist := Delete ( legion_blist , 1 ) ;
3058: LD_ADDR_EXP 34
3062: PUSH
3063: LD_EXP 34
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL_OW 3
3075: ST_TO_ADDR
3076: GO 3055
3078: POP
3079: POP
// if GetSide ( b ) = 3 then
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 255
3089: PUSH
3090: LD_INT 3
3092: EQUAL
3093: IFFALSE 3133
// for i = 1 to 4 do
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_INT 4
3107: PUSH
3108: FOR_TO
3109: IFFALSE 3131
// ru_blist := Delete ( ru_blist , 1 ) ;
3111: LD_ADDR_EXP 26
3115: PUSH
3116: LD_EXP 26
3120: PPUSH
3121: LD_INT 1
3123: PPUSH
3124: CALL_OW 3
3128: ST_TO_ADDR
3129: GO 3108
3131: POP
3132: POP
// end ;
3133: PPOPN 2
3135: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3136: LD_VAR 0 1
3140: PPUSH
3141: CALL_OW 264
3145: PUSH
3146: LD_INT 51
3148: PUSH
3149: LD_INT 48
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: IN
3156: NOT
3157: IFFALSE 3205
// begin if GetSide ( veh ) = 3 then
3159: LD_VAR 0 1
3163: PPUSH
3164: CALL_OW 255
3168: PUSH
3169: LD_INT 3
3171: EQUAL
3172: IFFALSE 3205
// begin ComMoveXY ( veh , 149 , 8 ) ;
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 149
3181: PPUSH
3182: LD_INT 8
3184: PPUSH
3185: CALL_OW 111
// ru_force := ru_force ^ veh ;
3189: LD_ADDR_EXP 23
3193: PUSH
3194: LD_EXP 23
3198: PUSH
3199: LD_VAR 0 1
3203: ADD
3204: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3205: LD_VAR 0 1
3209: PPUSH
3210: CALL_OW 264
3214: PUSH
3215: LD_INT 32
3217: PUSH
3218: LD_INT 31
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: IN
3225: NOT
3226: IFFALSE 3259
// begin if GetSide ( veh ) = 8 then
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL_OW 255
3237: PUSH
3238: LD_INT 8
3240: EQUAL
3241: IFFALSE 3259
// legion_force := legion_force ^ veh ;
3243: LD_ADDR_EXP 31
3247: PUSH
3248: LD_EXP 31
3252: PUSH
3253: LD_VAR 0 1
3257: ADD
3258: ST_TO_ADDR
// end ; if GetSide ( veh ) = 7 and your_side <> 7 then
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 255
3268: PUSH
3269: LD_INT 7
3271: EQUAL
3272: PUSH
3273: LD_OWVAR 2
3277: PUSH
3278: LD_INT 7
3280: NONEQUAL
3281: AND
3282: IFFALSE 3300
// al_force := al_force ^ veh ;
3284: LD_ADDR_EXP 38
3288: PUSH
3289: LD_EXP 38
3293: PUSH
3294: LD_VAR 0 1
3298: ADD
3299: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 255
3309: PUSH
3310: LD_OWVAR 2
3314: EQUAL
3315: IFFALSE 3331
// veh_counter := veh_counter + 1 ;
3317: LD_ADDR_EXP 16
3321: PUSH
3322: LD_EXP 16
3326: PUSH
3327: LD_INT 1
3329: PLUS
3330: ST_TO_ADDR
// end ;
3331: PPOPN 2
3333: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3334: LD_VAR 0 1
3338: PPUSH
3339: CALL_OW 255
3343: PUSH
3344: LD_OWVAR 2
3348: NONEQUAL
3349: IFFALSE 3365
// sib_contamin_counter := sib_contamin_counter + 1 ;
3351: LD_ADDR_EXP 18
3355: PUSH
3356: LD_EXP 18
3360: PUSH
3361: LD_INT 1
3363: PLUS
3364: ST_TO_ADDR
// end ;
3365: PPOPN 3
3367: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL_OW 255
3377: PUSH
3378: LD_OWVAR 2
3382: EQUAL
3383: IFFALSE 3399
// tech_counter := tech_counter + 1 ;
3385: LD_ADDR_EXP 17
3389: PUSH
3390: LD_EXP 17
3394: PUSH
3395: LD_INT 1
3397: PLUS
3398: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3399: LD_VAR 0 1
3403: PUSH
3404: LD_INT 53
3406: EQUAL
3407: PUSH
3408: LD_OWVAR 2
3412: PUSH
3413: LD_INT 1
3415: EQUAL
3416: AND
3417: IFFALSE 3432
// SetTech ( 80 , 1 , state_researched ) ;
3419: LD_INT 80
3421: PPUSH
3422: LD_INT 1
3424: PPUSH
3425: LD_INT 2
3427: PPUSH
3428: CALL_OW 322
// end ;
3432: PPOPN 2
3434: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do var i ;
3435: LD_INT 25
3437: PUSH
3438: LD_INT 12
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PUSH
3450: LD_INT 9
3452: LESS
3453: IFFALSE 3495
3455: GO 3457
3457: DISABLE
3458: LD_INT 0
3460: PPUSH
// begin enable ;
3461: ENABLE
// i := FilterAllUnits ( [ f_class , class_apeman ] ) ;
3462: LD_ADDR_VAR 0 1
3466: PUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 12
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 69
3481: ST_TO_ADDR
// PrepareApeman ( 8 - i ) ;
3482: LD_INT 8
3484: PUSH
3485: LD_VAR 0 1
3489: MINUS
3490: PPUSH
3491: CALL 1890 0 1
// end ;
3495: PPOPN 1
3497: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3498: LD_VAR 0 1
3502: PPUSH
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_VAR 0 3
3512: PPUSH
3513: CALL 31524 0 3
// end ;
3517: PPOPN 3
3519: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL 31532 0 1
// end ; end_of_file
3529: PPOPN 1
3531: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3532: LD_INT 0
3534: PPUSH
3535: PPUSH
3536: PPUSH
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
3542: PPUSH
3543: PPUSH
3544: PPUSH
// uc_side := 3 ;
3545: LD_ADDR_OWVAR 20
3549: PUSH
3550: LD_INT 3
3552: ST_TO_ADDR
// uc_nation := nation_russian ;
3553: LD_ADDR_OWVAR 21
3557: PUSH
3558: LD_INT 3
3560: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3561: LD_ADDR_VAR 0 4
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 30
3578: PUSH
3579: LD_INT 1
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 69
3594: PUSH
3595: LD_INT 1
3597: ARRAY
3598: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3599: LD_ADDR_VAR 0 5
3603: PUSH
3604: LD_INT 22
3606: PUSH
3607: LD_INT 3
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 30
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PPUSH
3628: CALL_OW 69
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3637: LD_ADDR_VAR 0 6
3641: PUSH
3642: LD_INT 22
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: LD_INT 30
3654: PUSH
3655: LD_INT 34
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PPUSH
3666: CALL_OW 69
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3675: LD_ADDR_VAR 0 8
3679: PUSH
3680: LD_INT 22
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PUSH
3690: LD_INT 30
3692: PUSH
3693: LD_INT 33
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PPUSH
3704: CALL_OW 69
3708: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3709: LD_ADDR_VAR 0 7
3713: PUSH
3714: LD_INT 22
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 30
3726: PUSH
3727: LD_INT 5
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL_OW 69
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// ru_blist := [ ] ;
3747: LD_ADDR_EXP 26
3751: PUSH
3752: EMPTY
3753: ST_TO_ADDR
// ru_vlist := [ ] ;
3754: LD_ADDR_EXP 27
3758: PUSH
3759: EMPTY
3760: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3761: LD_ADDR_EXP 30
3765: PUSH
3766: LD_INT 183
3768: PUSH
3769: LD_INT 62
3771: PUSH
3772: LD_INT 147
3774: PUSH
3775: LD_INT 44
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3784: LD_INT 30
3786: PUSH
3787: LD_INT 34
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PPUSH
3794: CALL_OW 69
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: LD_EXP 30
3807: PUSH
3808: LD_INT 1
3810: ARRAY
3811: PPUSH
3812: LD_EXP 30
3816: PUSH
3817: LD_INT 2
3819: ARRAY
3820: PPUSH
3821: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3825: LD_ADDR_EXP 28
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 5
3835: PUSH
3836: LD_INT 6
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: LD_OWVAR 67
3848: ARRAY
3849: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 1
3862: PPUSH
3863: LD_INT 3000
3865: PPUSH
3866: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 274
3879: PPUSH
3880: LD_INT 2
3882: PPUSH
3883: LD_INT 300
3885: PPUSH
3886: CALL_OW 277
// hc_gallery :=  ;
3890: LD_ADDR_OWVAR 33
3894: PUSH
3895: LD_STRING 
3897: ST_TO_ADDR
// hc_name :=  ;
3898: LD_ADDR_OWVAR 26
3902: PUSH
3903: LD_STRING 
3905: ST_TO_ADDR
// hc_importance := 0 ;
3906: LD_ADDR_OWVAR 32
3910: PUSH
3911: LD_INT 0
3913: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3914: LD_ADDR_EXP 24
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: LD_INT 6
3924: PUSH
3925: LD_INT 7
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: PUSH
3933: LD_OWVAR 67
3937: ARRAY
3938: ST_TO_ADDR
// for i = 1 to 6 do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: DOUBLE
3945: LD_INT 1
3947: DEC
3948: ST_TO_ADDR
3949: LD_INT 6
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4111
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3955: LD_INT 0
3957: PPUSH
3958: LD_INT 9
3960: PPUSH
3961: LD_EXP 24
3965: PPUSH
3966: CALL_OW 380
// un := CreateHuman ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 44
3979: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_VAR 0 7
3989: PPUSH
3990: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
3994: LD_INT 0
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: LD_EXP 24
4004: PPUSH
4005: CALL_OW 380
// un := CreateHuman ;
4009: LD_ADDR_VAR 0 3
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_INT 24
4026: PPUSH
4027: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4031: LD_INT 0
4033: PPUSH
4034: LD_INT 3
4036: PPUSH
4037: LD_EXP 24
4041: PPUSH
4042: CALL_OW 380
// un := CreateHuman ;
4046: LD_ADDR_VAR 0 3
4050: PUSH
4051: CALL_OW 44
4055: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_VAR 0 5
4065: PPUSH
4066: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4070: LD_INT 0
4072: PPUSH
4073: LD_INT 2
4075: PPUSH
4076: LD_EXP 24
4080: PPUSH
4081: CALL_OW 380
// un := CreateHuman ;
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: CALL_OW 44
4094: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4095: LD_VAR 0 3
4099: PPUSH
4100: LD_VAR 0 4
4104: PPUSH
4105: CALL_OW 52
// end ;
4109: GO 3952
4111: POP
4112: POP
// russian_prepared := true ;
4113: LD_ADDR_EXP 2
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4121: LD_VAR 0 5
4125: PPUSH
4126: LD_INT 21
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 3
4134: PPUSH
4135: LD_INT 51
4137: PPUSH
4138: CALL_OW 125
// end ;
4142: LD_VAR 0 1
4146: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , p , cr , sib_bomb ;
4147: LD_INT 22
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PPUSH
4157: CALL_OW 69
4161: PUSH
4162: LD_INT 0
4164: GREATER
4165: PUSH
4166: LD_EXP 2
4170: AND
4171: IFFALSE 6634
4173: GO 4175
4175: DISABLE
4176: LD_INT 0
4178: PPUSH
4179: PPUSH
4180: PPUSH
4181: PPUSH
4182: PPUSH
4183: PPUSH
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
4188: PPUSH
4189: PPUSH
4190: PPUSH
4191: PPUSH
4192: PPUSH
4193: PPUSH
4194: PPUSH
// begin enable ;
4195: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_INT 22
4203: PUSH
4204: LD_INT 3
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 30
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PPUSH
4225: CALL_OW 69
4229: PUSH
4230: LD_INT 1
4232: ARRAY
4233: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4234: LD_ADDR_VAR 0 2
4238: PUSH
4239: LD_INT 22
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 30
4251: PUSH
4252: LD_INT 3
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 69
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4272: LD_ADDR_VAR 0 3
4276: PUSH
4277: LD_INT 22
4279: PUSH
4280: LD_INT 3
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 30
4289: PUSH
4290: LD_INT 34
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 69
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4310: LD_ADDR_VAR 0 4
4314: PUSH
4315: LD_INT 22
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 30
4327: PUSH
4328: LD_INT 33
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PPUSH
4339: CALL_OW 69
4343: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4344: LD_ADDR_VAR 0 8
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 3
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 30
4361: PUSH
4362: LD_INT 5
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PPUSH
4373: CALL_OW 69
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4382: LD_ADDR_VAR 0 5
4386: PUSH
4387: LD_INT 22
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 21
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PPUSH
4411: CALL_OW 69
4415: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4416: LD_ADDR_VAR 0 6
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 21
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4450: LD_ADDR_VAR 0 7
4454: PUSH
4455: LD_INT 22
4457: PUSH
4458: LD_INT 3
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 21
4467: PUSH
4468: LD_INT 1
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PPUSH
4479: CALL_OW 69
4483: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4484: LD_ADDR_VAR 0 9
4488: PUSH
4489: LD_VAR 0 7
4493: PPUSH
4494: LD_INT 25
4496: PUSH
4497: LD_INT 2
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 72
4508: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4509: LD_ADDR_VAR 0 10
4513: PUSH
4514: LD_VAR 0 7
4518: PPUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 72
4533: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4534: LD_ADDR_VAR 0 11
4538: PUSH
4539: LD_VAR 0 7
4543: PPUSH
4544: LD_INT 25
4546: PUSH
4547: LD_INT 4
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 72
4558: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4559: LD_INT 22
4561: PUSH
4562: LD_INT 3
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 34
4571: PUSH
4572: LD_INT 51
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: PUSH
4588: LD_INT 0
4590: GREATER
4591: PUSH
4592: LD_EXP 25
4596: PUSH
4597: LD_INT 0
4599: EQUAL
4600: AND
4601: IFFALSE 4641
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4603: LD_ADDR_EXP 25
4607: PUSH
4608: LD_INT 22
4610: PUSH
4611: LD_INT 3
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 34
4620: PUSH
4621: LD_INT 51
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PPUSH
4632: CALL_OW 69
4636: PUSH
4637: LD_INT 1
4639: ARRAY
4640: ST_TO_ADDR
// if ru_cargo then
4641: LD_EXP 25
4645: IFFALSE 4943
// begin if IsInArea ( ru_cargo , ru_base ) then
4647: LD_EXP 25
4651: PPUSH
4652: LD_INT 9
4654: PPUSH
4655: CALL_OW 308
4659: IFFALSE 4738
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4661: LD_EXP 25
4665: PPUSH
4666: LD_INT 1
4668: PPUSH
4669: CALL_OW 289
4673: PUSH
4674: LD_INT 0
4676: EQUAL
4677: IFFALSE 4695
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4679: LD_EXP 25
4683: PPUSH
4684: LD_VAR 0 3
4688: PPUSH
4689: CALL_OW 120
4693: GO 4736
// if not HasTask ( ru_cargo ) then
4695: LD_EXP 25
4699: PPUSH
4700: CALL_OW 314
4704: NOT
4705: IFFALSE 4736
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4707: LD_EXP 25
4711: PPUSH
4712: LD_VAR 0 1
4716: PPUSH
4717: CALL_OW 250
4721: PPUSH
4722: LD_VAR 0 1
4726: PPUSH
4727: CALL_OW 251
4731: PPUSH
4732: CALL_OW 111
// end else
4736: GO 4943
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 then
4738: LD_EXP 25
4742: PPUSH
4743: CALL_OW 314
4747: NOT
4748: PUSH
4749: LD_EXP 25
4753: PPUSH
4754: LD_INT 1
4756: PPUSH
4757: CALL_OW 289
4761: PUSH
4762: LD_INT 100
4764: LESS
4765: AND
4766: IFFALSE 4832
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
4768: LD_ADDR_VAR 0 16
4772: PUSH
4773: LD_INT 11
4775: PPUSH
4776: CALL_OW 435
4780: ST_TO_ADDR
// if cr > 0 then
4781: LD_VAR 0 16
4785: PUSH
4786: LD_INT 0
4788: GREATER
4789: IFFALSE 4820
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
4791: LD_EXP 25
4795: PPUSH
4796: LD_VAR 0 16
4800: PUSH
4801: LD_INT 1
4803: ARRAY
4804: PPUSH
4805: LD_VAR 0 16
4809: PUSH
4810: LD_INT 2
4812: ARRAY
4813: PPUSH
4814: CALL_OW 117
4818: GO 4832
// ComMoveToArea ( ru_cargo , ru_crates ) ;
4820: LD_EXP 25
4824: PPUSH
4825: LD_INT 11
4827: PPUSH
4828: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and GetCargo ( ru_cargo , mat_cans ) = 100 then
4832: LD_EXP 25
4836: PPUSH
4837: CALL_OW 314
4841: NOT
4842: PUSH
4843: LD_EXP 25
4847: PPUSH
4848: LD_INT 10
4850: PPUSH
4851: CALL_OW 308
4855: NOT
4856: AND
4857: PUSH
4858: LD_EXP 25
4862: PPUSH
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 289
4870: PUSH
4871: LD_INT 100
4873: EQUAL
4874: AND
4875: IFFALSE 4889
// ComMoveToArea ( ru_cargo , cargoa ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_INT 10
4884: PPUSH
4885: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
4889: LD_EXP 25
4893: PPUSH
4894: LD_INT 10
4896: PPUSH
4897: CALL_OW 308
4901: PUSH
4902: LD_VAR 0 8
4906: AND
4907: IFFALSE 4943
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
4909: LD_VAR 0 7
4913: PPUSH
4914: LD_INT 25
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 72
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: PPUSH
4933: LD_INT 139
4935: PPUSH
4936: LD_INT 24
4938: PPUSH
4939: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
4943: LD_EXP 25
4947: PUSH
4948: LD_INT 0
4950: EQUAL
4951: PUSH
4952: LD_VAR 0 2
4956: AND
4957: PUSH
4958: LD_VAR 0 2
4962: PPUSH
4963: CALL_OW 461
4967: PUSH
4968: LD_INT 2
4970: EQUAL
4971: AND
4972: IFFALSE 4995
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4974: LD_VAR 0 2
4978: PPUSH
4979: LD_INT 21
4981: PPUSH
4982: LD_INT 3
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 51
4990: PPUSH
4991: CALL_OW 125
// if UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) then
4995: LD_VAR 0 7
4999: PPUSH
5000: LD_INT 25
5002: PUSH
5003: LD_INT 9
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 72
5014: IFFALSE 5078
// IntBazooka ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) , FilterAllUnits ( [ [ f_side , Your_Side ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
5016: LD_VAR 0 7
5020: PPUSH
5021: LD_INT 25
5023: PUSH
5024: LD_INT 9
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 72
5035: PPUSH
5036: LD_INT 22
5038: PUSH
5039: LD_OWVAR 2
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 3
5050: PUSH
5051: LD_INT 21
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PPUSH
5074: CALL 1663 0 2
// if ru_factory and ru_vlist > 0 then
5078: LD_VAR 0 2
5082: PUSH
5083: LD_EXP 27
5087: PUSH
5088: LD_INT 0
5090: GREATER
5091: AND
5092: IFFALSE 5192
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5094: LD_VAR 0 2
5098: PPUSH
5099: CALL_OW 461
5103: PUSH
5104: LD_INT 2
5106: EQUAL
5107: IFFALSE 5192
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5109: LD_VAR 0 2
5113: PPUSH
5114: LD_EXP 27
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PPUSH
5123: LD_EXP 27
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_EXP 27
5136: PUSH
5137: LD_INT 3
5139: ARRAY
5140: PPUSH
5141: LD_EXP 27
5145: PUSH
5146: LD_INT 4
5148: ARRAY
5149: PPUSH
5150: CALL_OW 125
// for i = 1 to 4 do
5154: LD_ADDR_VAR 0 12
5158: PUSH
5159: DOUBLE
5160: LD_INT 1
5162: DEC
5163: ST_TO_ADDR
5164: LD_INT 4
5166: PUSH
5167: FOR_TO
5168: IFFALSE 5190
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5170: LD_ADDR_EXP 27
5174: PUSH
5175: LD_EXP 27
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 3
5187: ST_TO_ADDR
5188: GO 5167
5190: POP
5191: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5192: LD_INT 24
5194: PPUSH
5195: CALL_OW 461
5199: PUSH
5200: LD_INT 2
5202: EQUAL
5203: PUSH
5204: LD_EXP 4
5208: AND
5209: IFFALSE 5237
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5211: LD_INT 25
5213: PPUSH
5214: LD_INT 3
5216: PPUSH
5217: CALL_OW 321
5221: PUSH
5222: LD_INT 1
5224: EQUAL
5225: IFFALSE 5237
// ComResearch ( ru_lab , tech_sibfiss ) ;
5227: LD_INT 24
5229: PPUSH
5230: LD_INT 25
5232: PPUSH
5233: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5237: LD_INT 25
5239: PPUSH
5240: LD_INT 3
5242: PPUSH
5243: CALL_OW 321
5247: PUSH
5248: LD_INT 2
5250: EQUAL
5251: PUSH
5252: LD_OWVAR 1
5256: PUSH
5257: LD_INT 10500
5259: MOD
5260: PUSH
5261: LD_INT 0
5263: EQUAL
5264: AND
5265: IFFALSE 5303
// if BuildingStatus ( ru_factory ) = bs_idle then
5267: LD_VAR 0 2
5271: PPUSH
5272: CALL_OW 461
5276: PUSH
5277: LD_INT 2
5279: EQUAL
5280: IFFALSE 5303
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5282: LD_VAR 0 2
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: LD_INT 3
5292: PPUSH
5293: LD_INT 3
5295: PPUSH
5296: LD_INT 48
5298: PPUSH
5299: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5303: LD_INT 22
5305: PUSH
5306: LD_INT 3
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 34
5315: PUSH
5316: LD_INT 48
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_INT 0
5334: GREATER
5335: IFFALSE 5709
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5337: LD_ADDR_VAR 0 17
5341: PUSH
5342: LD_INT 22
5344: PUSH
5345: LD_INT 3
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 34
5354: PUSH
5355: LD_INT 48
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PPUSH
5366: CALL_OW 69
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5375: LD_VAR 0 17
5379: PPUSH
5380: LD_INT 9
5382: PPUSH
5383: CALL_OW 308
5387: IFFALSE 5405
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5389: LD_VAR 0 17
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 120
5403: GO 5709
// if not HasTask ( sib_bomb ) then
5405: LD_VAR 0 17
5409: PPUSH
5410: CALL_OW 314
5414: NOT
5415: IFFALSE 5709
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5417: LD_INT 22
5419: PUSH
5420: LD_OWVAR 2
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 30
5431: PUSH
5432: LD_INT 1
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 69
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: CALL_OW 256
5456: PUSH
5457: LD_INT 250
5459: GREATER
5460: IFFALSE 5553
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5462: LD_VAR 0 17
5466: PPUSH
5467: LD_INT 22
5469: PUSH
5470: LD_OWVAR 2
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 30
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PPUSH
5493: CALL_OW 69
5497: PUSH
5498: LD_INT 1
5500: ARRAY
5501: PPUSH
5502: CALL_OW 250
5506: PPUSH
5507: LD_INT 22
5509: PUSH
5510: LD_OWVAR 2
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 30
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 69
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: CALL_OW 251
5546: PPUSH
5547: CALL_OW 116
5551: GO 5709
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5553: LD_INT 22
5555: PUSH
5556: LD_OWVAR 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 21
5567: PUSH
5568: LD_INT 3
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: PUSH
5584: LD_INT 0
5586: GREATER
5587: IFFALSE 5680
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5589: LD_VAR 0 17
5593: PPUSH
5594: LD_INT 22
5596: PUSH
5597: LD_OWVAR 2
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 21
5608: PUSH
5609: LD_INT 3
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PPUSH
5620: CALL_OW 69
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: CALL_OW 250
5633: PPUSH
5634: LD_INT 22
5636: PUSH
5637: LD_OWVAR 2
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 21
5648: PUSH
5649: LD_INT 3
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 69
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PPUSH
5669: CALL_OW 251
5673: PPUSH
5674: CALL_OW 116
5678: GO 5709
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5680: LD_VAR 0 17
5684: PPUSH
5685: LD_EXP 10
5689: PPUSH
5690: CALL_OW 250
5694: PPUSH
5695: LD_EXP 10
5699: PPUSH
5700: CALL_OW 251
5704: PPUSH
5705: CALL_OW 116
// end ; if ru_can_attack then
5709: LD_EXP 3
5713: IFFALSE 5861
// if ru_time > 0 0$00 then
5715: LD_EXP 29
5719: PUSH
5720: LD_INT 0
5722: GREATER
5723: IFFALSE 5741
// ru_time := ru_time - 0 0$01 else
5725: LD_ADDR_EXP 29
5729: PUSH
5730: LD_EXP 29
5734: PUSH
5735: LD_INT 35
5737: MINUS
5738: ST_TO_ADDR
5739: GO 5861
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5741: LD_ADDR_EXP 29
5745: PUSH
5746: LD_INT 20265
5748: PPUSH
5749: LD_INT 30765
5751: PPUSH
5752: CALL_OW 12
5756: ST_TO_ADDR
// for i = 1 to ru_amount do
5757: LD_ADDR_VAR 0 12
5761: PUSH
5762: DOUBLE
5763: LD_INT 1
5765: DEC
5766: ST_TO_ADDR
5767: LD_EXP 28
5771: PUSH
5772: FOR_TO
5773: IFFALSE 5859
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
5775: LD_ADDR_EXP 27
5779: PUSH
5780: LD_EXP 27
5784: PUSH
5785: LD_INT 23
5787: ADD
5788: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
5789: LD_ADDR_EXP 27
5793: PUSH
5794: LD_EXP 27
5798: PUSH
5799: LD_INT 3
5801: ADD
5802: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
5803: LD_ADDR_EXP 27
5807: PUSH
5808: LD_EXP 27
5812: PUSH
5813: LD_INT 3
5815: ADD
5816: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
5817: LD_ADDR_EXP 27
5821: PUSH
5822: LD_EXP 27
5826: PUSH
5827: LD_INT 46
5829: PUSH
5830: LD_INT 45
5832: PUSH
5833: LD_INT 47
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 1
5843: PPUSH
5844: LD_INT 2
5846: PPUSH
5847: LD_INT 3
5849: PPUSH
5850: CALL_OW 14
5854: ARRAY
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5772
5859: POP
5860: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
5861: LD_VAR 0 4
5865: PPUSH
5866: LD_INT 35
5868: PUSH
5869: LD_INT 0
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PPUSH
5876: CALL_OW 72
5880: PUSH
5881: LD_INT 0
5883: GREATER
5884: IFFALSE 5932
// if BuildingStatus ( ru_factory ) = bs_idle then
5886: LD_VAR 0 2
5890: PPUSH
5891: CALL_OW 461
5895: PUSH
5896: LD_INT 2
5898: EQUAL
5899: IFFALSE 5932
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_INT 35
5908: PUSH
5909: LD_INT 0
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 72
5920: PUSH
5921: LD_INT 1
5923: ARRAY
5924: PPUSH
5925: LD_INT 47
5927: PPUSH
5928: CALL_OW 148
// if ru_force = ru_amount then
5932: LD_EXP 23
5936: PUSH
5937: LD_EXP 28
5941: EQUAL
5942: IFFALSE 6074
// begin for i = 1 to ru_force do
5944: LD_ADDR_VAR 0 12
5948: PUSH
5949: DOUBLE
5950: LD_INT 1
5952: DEC
5953: ST_TO_ADDR
5954: LD_EXP 23
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6070
// if IsInArea ( ru_force [ i ] , ru_base ) then
5962: LD_EXP 23
5966: PUSH
5967: LD_VAR 0 12
5971: ARRAY
5972: PPUSH
5973: LD_INT 9
5975: PPUSH
5976: CALL_OW 308
5980: IFFALSE 6004
// ComEnterUnit ( ru_force [ i ] , ru_teleport ) else
5982: LD_EXP 23
5986: PUSH
5987: LD_VAR 0 12
5991: ARRAY
5992: PPUSH
5993: LD_VAR 0 3
5997: PPUSH
5998: CALL_OW 120
6002: GO 6068
// if not HasTask ( ru_force [ i ] ) then
6004: LD_EXP 23
6008: PUSH
6009: LD_VAR 0 12
6013: ARRAY
6014: PPUSH
6015: CALL_OW 314
6019: NOT
6020: IFFALSE 6068
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6022: LD_EXP 23
6026: PUSH
6027: LD_VAR 0 12
6031: ARRAY
6032: PPUSH
6033: LD_INT 81
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PPUSH
6043: CALL_OW 69
6047: PPUSH
6048: LD_EXP 23
6052: PUSH
6053: LD_VAR 0 12
6057: ARRAY
6058: PPUSH
6059: CALL_OW 74
6063: PPUSH
6064: CALL_OW 115
6068: GO 5959
6070: POP
6071: POP
// end else
6072: GO 6224
// if UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) > 0 then
6074: LD_EXP 23
6078: PPUSH
6079: LD_INT 3
6081: PUSH
6082: LD_INT 95
6084: PUSH
6085: LD_INT 18
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 72
6100: PUSH
6101: LD_INT 0
6103: GREATER
6104: IFFALSE 6224
// begin tmp := UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) ;
6106: LD_ADDR_VAR 0 13
6110: PUSH
6111: LD_EXP 23
6115: PPUSH
6116: LD_INT 3
6118: PUSH
6119: LD_INT 95
6121: PUSH
6122: LD_INT 18
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 72
6137: ST_TO_ADDR
// for i = 1 to tmp do
6138: LD_ADDR_VAR 0 12
6142: PUSH
6143: DOUBLE
6144: LD_INT 1
6146: DEC
6147: ST_TO_ADDR
6148: LD_VAR 0 13
6152: PUSH
6153: FOR_TO
6154: IFFALSE 6222
// if not HasTask ( tmp [ i ] ) then
6156: LD_VAR 0 13
6160: PUSH
6161: LD_VAR 0 12
6165: ARRAY
6166: PPUSH
6167: CALL_OW 314
6171: NOT
6172: IFFALSE 6220
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6174: LD_EXP 23
6178: PUSH
6179: LD_VAR 0 12
6183: ARRAY
6184: PPUSH
6185: LD_INT 81
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: PPUSH
6200: LD_EXP 23
6204: PUSH
6205: LD_VAR 0 12
6209: ARRAY
6210: PPUSH
6211: CALL_OW 74
6215: PPUSH
6216: CALL_OW 115
6220: GO 6153
6222: POP
6223: POP
// end ; if ru_engs > 0 then
6224: LD_VAR 0 9
6228: PUSH
6229: LD_INT 0
6231: GREATER
6232: IFFALSE 6634
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6234: LD_VAR 0 5
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: PUSH
6261: LD_INT 0
6263: GREATER
6264: IFFALSE 6419
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6266: LD_ADDR_VAR 0 14
6270: PUSH
6271: LD_VAR 0 5
6275: PPUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 24
6281: PUSH
6282: LD_INT 1000
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PPUSH
6293: CALL_OW 72
6297: ST_TO_ADDR
// for i = 1 to ru_engs do
6298: LD_ADDR_VAR 0 12
6302: PUSH
6303: DOUBLE
6304: LD_INT 1
6306: DEC
6307: ST_TO_ADDR
6308: LD_VAR 0 9
6312: PUSH
6313: FOR_TO
6314: IFFALSE 6415
// begin if IsInUnit ( ru_engs [ i ] ) then
6316: LD_VAR 0 9
6320: PUSH
6321: LD_VAR 0 12
6325: ARRAY
6326: PPUSH
6327: CALL_OW 310
6331: IFFALSE 6350
// ComExitBuilding ( ru_engs [ i ] ) else
6333: LD_VAR 0 9
6337: PUSH
6338: LD_VAR 0 12
6342: ARRAY
6343: PPUSH
6344: CALL_OW 122
6348: GO 6413
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6350: LD_VAR 0 9
6354: PUSH
6355: LD_VAR 0 12
6359: ARRAY
6360: PPUSH
6361: CALL_OW 314
6365: NOT
6366: PUSH
6367: LD_VAR 0 9
6371: PUSH
6372: LD_VAR 0 12
6376: ARRAY
6377: PPUSH
6378: CALL_OW 256
6382: PUSH
6383: LD_INT 600
6385: GREATER
6386: AND
6387: IFFALSE 6413
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6389: LD_VAR 0 9
6393: PUSH
6394: LD_VAR 0 12
6398: ARRAY
6399: PPUSH
6400: LD_VAR 0 14
6404: PUSH
6405: LD_INT 1
6407: ARRAY
6408: PPUSH
6409: CALL_OW 130
// end ;
6413: GO 6313
6415: POP
6416: POP
// end else
6417: GO 6634
// begin if ru_blist = 0 then
6419: LD_EXP 26
6423: PUSH
6424: LD_INT 0
6426: EQUAL
6427: IFFALSE 6509
// begin for i = 1 to ru_engs do
6429: LD_ADDR_VAR 0 12
6433: PUSH
6434: DOUBLE
6435: LD_INT 1
6437: DEC
6438: ST_TO_ADDR
6439: LD_VAR 0 9
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6505
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6447: LD_VAR 0 9
6451: PUSH
6452: LD_VAR 0 12
6456: ARRAY
6457: PPUSH
6458: CALL_OW 314
6462: NOT
6463: PUSH
6464: LD_VAR 0 9
6468: PUSH
6469: LD_VAR 0 12
6473: ARRAY
6474: PPUSH
6475: CALL_OW 310
6479: NOT
6480: AND
6481: IFFALSE 6503
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6483: LD_VAR 0 9
6487: PUSH
6488: LD_VAR 0 12
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 1
6498: PPUSH
6499: CALL_OW 120
6503: GO 6444
6505: POP
6506: POP
// end else
6507: GO 6634
// begin for i = 1 to ru_engs do
6509: LD_ADDR_VAR 0 12
6513: PUSH
6514: DOUBLE
6515: LD_INT 1
6517: DEC
6518: ST_TO_ADDR
6519: LD_VAR 0 9
6523: PUSH
6524: FOR_TO
6525: IFFALSE 6632
// begin if IsInUnit ( ru_engs [ i ] ) then
6527: LD_VAR 0 9
6531: PUSH
6532: LD_VAR 0 12
6536: ARRAY
6537: PPUSH
6538: CALL_OW 310
6542: IFFALSE 6561
// ComExitBuilding ( ru_engs [ i ] ) else
6544: LD_VAR 0 9
6548: PUSH
6549: LD_VAR 0 12
6553: ARRAY
6554: PPUSH
6555: CALL_OW 122
6559: GO 6630
// if not HasTask ( ru_engs [ i ] ) then
6561: LD_VAR 0 9
6565: PUSH
6566: LD_VAR 0 12
6570: ARRAY
6571: PPUSH
6572: CALL_OW 314
6576: NOT
6577: IFFALSE 6630
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6579: LD_VAR 0 9
6583: PUSH
6584: LD_VAR 0 12
6588: ARRAY
6589: PPUSH
6590: LD_EXP 26
6594: PUSH
6595: LD_INT 1
6597: ARRAY
6598: PPUSH
6599: LD_EXP 26
6603: PUSH
6604: LD_INT 2
6606: ARRAY
6607: PPUSH
6608: LD_EXP 26
6612: PUSH
6613: LD_INT 3
6615: ARRAY
6616: PPUSH
6617: LD_EXP 26
6621: PUSH
6622: LD_INT 4
6624: ARRAY
6625: PPUSH
6626: CALL_OW 145
// end ;
6630: GO 6524
6632: POP
6633: POP
// end ; end ; end ; end ;
6634: PPOPN 17
6636: END
// every 2 2$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 20 do
6637: LD_EXP 2
6641: PUSH
6642: LD_INT 11
6644: PPUSH
6645: CALL_OW 435
6649: PUSH
6650: LD_INT 20
6652: LESS
6653: AND
6654: IFFALSE 6717
6656: GO 6658
6658: DISABLE
// begin enable ;
6659: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6660: LD_INT 1
6662: PPUSH
6663: LD_INT 5
6665: PPUSH
6666: CALL_OW 12
6670: PPUSH
6671: LD_INT 11
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6681: LD_INT 1505
6683: PPUSH
6684: LD_INT 2100
6686: PPUSH
6687: CALL_OW 12
6691: PPUSH
6692: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6696: LD_INT 1
6698: PPUSH
6699: LD_INT 5
6701: PPUSH
6702: CALL_OW 12
6706: PPUSH
6707: LD_INT 11
6709: PPUSH
6710: LD_INT 1
6712: PPUSH
6713: CALL_OW 55
// end ;
6717: END
// every 15 15$00 + 25 25$00 trigger ru_sib_bomb = false do var i , tmp ;
6718: LD_EXP 4
6722: PUSH
6723: LD_INT 0
6725: EQUAL
6726: IFFALSE 6841
6728: GO 6730
6730: DISABLE
6731: LD_INT 0
6733: PPUSH
6734: PPUSH
// begin enable ;
6735: ENABLE
// i := Rand ( 0 , 100 ) ;
6736: LD_ADDR_VAR 0 1
6740: PUSH
6741: LD_INT 0
6743: PPUSH
6744: LD_INT 100
6746: PPUSH
6747: CALL_OW 12
6751: ST_TO_ADDR
// case your_side of 1 :
6752: LD_OWVAR 2
6756: PUSH
6757: LD_INT 1
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6776
6765: POP
// tmp := 10 ; 2 :
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 10
6773: ST_TO_ADDR
6774: GO 6815
6776: LD_INT 2
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6795
6784: POP
// tmp := 0 ; 7 :
6785: LD_ADDR_VAR 0 2
6789: PUSH
6790: LD_INT 0
6792: ST_TO_ADDR
6793: GO 6815
6795: LD_INT 7
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6814
6803: POP
// tmp := 15 ; end ;
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: LD_INT 15
6811: ST_TO_ADDR
6812: GO 6815
6814: POP
// if i < chance_to_bomb + tmp then
6815: LD_VAR 0 1
6819: PUSH
6820: LD_EXP 5
6824: PUSH
6825: LD_VAR 0 2
6829: PLUS
6830: LESS
6831: IFFALSE 6841
// ru_sib_bomb := true ;
6833: LD_ADDR_EXP 4
6837: PUSH
6838: LD_INT 1
6840: ST_TO_ADDR
// end ;
6841: PPOPN 2
6843: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6844: LD_INT 22
6846: PUSH
6847: LD_OWVAR 2
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 34
6858: PUSH
6859: LD_INT 8
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 69
6874: IFFALSE 6887
6876: GO 6878
6878: DISABLE
// begin ru_sib_bomb := true ;
6879: LD_ADDR_EXP 4
6883: PUSH
6884: LD_INT 1
6886: ST_TO_ADDR
// end ;
6887: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6888: LD_INT 22
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 30
6900: PUSH
6901: LD_INT 34
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 69
6916: IFFALSE 7015
6918: GO 6920
6920: DISABLE
6921: LD_INT 0
6923: PPUSH
// begin enable ;
6924: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6925: LD_ADDR_VAR 0 1
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 1
6942: PPUSH
6943: LD_INT 2
6945: PPUSH
6946: CALL_OW 12
6950: ARRAY
6951: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6952: LD_INT 22
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 30
6964: PUSH
6965: LD_INT 34
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PPUSH
6976: CALL_OW 69
6980: PUSH
6981: LD_INT 1
6983: ARRAY
6984: PPUSH
6985: LD_EXP 30
6989: PUSH
6990: LD_VAR 0 1
6994: ARRAY
6995: PPUSH
6996: LD_EXP 30
7000: PUSH
7001: LD_VAR 0 1
7005: PUSH
7006: LD_INT 1
7008: PLUS
7009: ARRAY
7010: PPUSH
7011: CALL_OW 243
// end ; end_of_file
7015: PPOPN 1
7017: END
// export function RemoveLegion ; var i ; begin
7018: LD_INT 0
7020: PPUSH
7021: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7022: LD_ADDR_VAR 0 2
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_INT 8
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PPUSH
7037: CALL_OW 69
7041: PUSH
7042: FOR_IN
7043: IFFALSE 7056
// RemoveUnit ( i ) ;
7045: LD_VAR 0 2
7049: PPUSH
7050: CALL_OW 64
7054: GO 7042
7056: POP
7057: POP
// end ;
7058: LD_VAR 0 1
7062: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , p , l_depot , l_factory , l_lab , l_towers ; begin
7063: LD_INT 0
7065: PPUSH
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
7072: PPUSH
7073: PPUSH
7074: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7075: LD_ADDR_VAR 0 7
7079: PUSH
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 30
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 69
7108: PUSH
7109: LD_INT 1
7111: ARRAY
7112: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7113: LD_ADDR_VAR 0 8
7117: PUSH
7118: LD_INT 22
7120: PUSH
7121: LD_INT 8
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 3
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PPUSH
7142: CALL_OW 69
7146: PUSH
7147: LD_INT 1
7149: ARRAY
7150: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7151: LD_ADDR_VAR 0 9
7155: PUSH
7156: LD_INT 22
7158: PUSH
7159: LD_INT 8
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 30
7171: PUSH
7172: LD_INT 6
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 30
7181: PUSH
7182: LD_INT 8
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 69
7202: PUSH
7203: LD_INT 1
7205: ARRAY
7206: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7207: LD_ADDR_VAR 0 10
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_INT 8
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 30
7224: PUSH
7225: LD_INT 32
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 69
7240: ST_TO_ADDR
// uc_side := 8 ;
7241: LD_ADDR_OWVAR 20
7245: PUSH
7246: LD_INT 8
7248: ST_TO_ADDR
// uc_nation := nation_arabian ;
7249: LD_ADDR_OWVAR 21
7253: PUSH
7254: LD_INT 2
7256: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7257: LD_ADDR_EXP 32
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: LD_INT 6
7267: PUSH
7268: LD_INT 7
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: LD_OWVAR 67
7280: ARRAY
7281: ST_TO_ADDR
// legion_blist := [ ] ;
7282: LD_ADDR_EXP 34
7286: PUSH
7287: EMPTY
7288: ST_TO_ADDR
// legion_vlist := [ ] ;
7289: LD_ADDR_EXP 35
7293: PUSH
7294: EMPTY
7295: ST_TO_ADDR
// legion_force := [ ] ;
7296: LD_ADDR_EXP 31
7300: PUSH
7301: EMPTY
7302: ST_TO_ADDR
// legion_enemy := - 1 ;
7303: LD_ADDR_EXP 36
7307: PUSH
7308: LD_INT 1
7310: NEG
7311: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7312: LD_VAR 0 7
7316: PPUSH
7317: CALL_OW 274
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: LD_INT 10000
7327: PPUSH
7328: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7332: LD_VAR 0 7
7336: PPUSH
7337: CALL_OW 274
7341: PPUSH
7342: LD_INT 3
7344: PPUSH
7345: LD_INT 1000
7347: PPUSH
7348: CALL_OW 277
// for i = 1 to l_towers do
7352: LD_ADDR_VAR 0 3
7356: PUSH
7357: DOUBLE
7358: LD_INT 1
7360: DEC
7361: ST_TO_ADDR
7362: LD_VAR 0 10
7366: PUSH
7367: FOR_TO
7368: IFFALSE 7417
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7370: LD_INT 0
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: LD_EXP 32
7380: PPUSH
7381: CALL_OW 380
// un := CreateHuman ;
7385: LD_ADDR_VAR 0 2
7389: PUSH
7390: CALL_OW 44
7394: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7395: LD_VAR 0 2
7399: PPUSH
7400: LD_VAR 0 10
7404: PUSH
7405: LD_VAR 0 3
7409: ARRAY
7410: PPUSH
7411: CALL_OW 52
// end ;
7415: GO 7367
7417: POP
7418: POP
// for i = 1 to 4 do
7419: LD_ADDR_VAR 0 3
7423: PUSH
7424: DOUBLE
7425: LD_INT 1
7427: DEC
7428: ST_TO_ADDR
7429: LD_INT 4
7431: PUSH
7432: FOR_TO
7433: IFFALSE 7526
// for p = 1 to 2 do
7435: LD_ADDR_VAR 0 6
7439: PUSH
7440: DOUBLE
7441: LD_INT 1
7443: DEC
7444: ST_TO_ADDR
7445: LD_INT 2
7447: PUSH
7448: FOR_TO
7449: IFFALSE 7522
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
7451: LD_INT 0
7453: PPUSH
7454: LD_INT 8
7456: PPUSH
7457: LD_EXP 32
7461: PPUSH
7462: CALL_OW 380
// un := CreateHuman ;
7466: LD_ADDR_VAR 0 2
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
7476: LD_VAR 0 2
7480: PPUSH
7481: LD_INT 22
7483: PUSH
7484: LD_INT 8
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 30
7493: PUSH
7494: LD_INT 5
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 69
7509: PUSH
7510: LD_VAR 0 6
7514: ARRAY
7515: PPUSH
7516: CALL_OW 52
// end ;
7520: GO 7448
7522: POP
7523: POP
7524: GO 7432
7526: POP
7527: POP
// for i = 1 to 4 do
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: DOUBLE
7534: LD_INT 1
7536: DEC
7537: ST_TO_ADDR
7538: LD_INT 4
7540: PUSH
7541: FOR_TO
7542: IFFALSE 7585
// begin PrepareHuman ( false , 4 , legion_skill ) ;
7544: LD_INT 0
7546: PPUSH
7547: LD_INT 4
7549: PPUSH
7550: LD_EXP 32
7554: PPUSH
7555: CALL_OW 380
// un := CreateHuman ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: CALL_OW 44
7568: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
7569: LD_VAR 0 2
7573: PPUSH
7574: LD_VAR 0 9
7578: PPUSH
7579: CALL_OW 52
// end ;
7583: GO 7541
7585: POP
7586: POP
// for i = 1 to 6 do
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: DOUBLE
7593: LD_INT 1
7595: DEC
7596: ST_TO_ADDR
7597: LD_INT 6
7599: PUSH
7600: FOR_TO
7601: IFFALSE 7644
// begin PrepareHuman ( false , 3 , legion_skill ) ;
7603: LD_INT 0
7605: PPUSH
7606: LD_INT 3
7608: PPUSH
7609: LD_EXP 32
7613: PPUSH
7614: CALL_OW 380
// un := CreateHuman ;
7618: LD_ADDR_VAR 0 2
7622: PUSH
7623: CALL_OW 44
7627: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
7628: LD_VAR 0 2
7632: PPUSH
7633: LD_VAR 0 8
7637: PPUSH
7638: CALL_OW 52
// end ;
7642: GO 7600
7644: POP
7645: POP
// for i = 1 to 5 do
7646: LD_ADDR_VAR 0 3
7650: PUSH
7651: DOUBLE
7652: LD_INT 1
7654: DEC
7655: ST_TO_ADDR
7656: LD_INT 5
7658: PUSH
7659: FOR_TO
7660: IFFALSE 7703
// begin PrepareHuman ( false , 2 , legion_skill ) ;
7662: LD_INT 0
7664: PPUSH
7665: LD_INT 2
7667: PPUSH
7668: LD_EXP 32
7672: PPUSH
7673: CALL_OW 380
// un := CreateHuman ;
7677: LD_ADDR_VAR 0 2
7681: PUSH
7682: CALL_OW 44
7686: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
7687: LD_VAR 0 2
7691: PPUSH
7692: LD_VAR 0 7
7696: PPUSH
7697: CALL_OW 52
// end ;
7701: GO 7659
7703: POP
7704: POP
// tmp := RandPointsFromArea ( 199 , 134 , 216 , 141 , 6 ) ;
7705: LD_ADDR_VAR 0 4
7709: PUSH
7710: LD_INT 199
7712: PPUSH
7713: LD_INT 134
7715: PPUSH
7716: LD_INT 216
7718: PPUSH
7719: LD_INT 141
7721: PPUSH
7722: LD_INT 6
7724: PPUSH
7725: CALL 1562 0 5
7729: ST_TO_ADDR
// p := 1 ;
7730: LD_ADDR_VAR 0 6
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// for i = 1 to 3 do
7738: LD_ADDR_VAR 0 3
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_INT 3
7750: PUSH
7751: FOR_TO
7752: IFFALSE 8005
// begin vc_chassis := ar_half_tracked ;
7754: LD_ADDR_OWVAR 37
7758: PUSH
7759: LD_INT 14
7761: ST_TO_ADDR
// vc_engine := engine_siberite ;
7762: LD_ADDR_OWVAR 39
7766: PUSH
7767: LD_INT 3
7769: ST_TO_ADDR
// vc_control := control_manual ;
7770: LD_ADDR_OWVAR 38
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
7778: LD_ADDR_OWVAR 40
7782: PUSH
7783: LD_INT 31
7785: ST_TO_ADDR
// veh := CreateVehicle ;
7786: LD_ADDR_VAR 0 5
7790: PUSH
7791: CALL_OW 45
7795: ST_TO_ADDR
// if HexInfo ( tmp [ p ] , tmp [ p + 1 ] ) = 0 then
7796: LD_VAR 0 4
7800: PUSH
7801: LD_VAR 0 6
7805: ARRAY
7806: PPUSH
7807: LD_VAR 0 4
7811: PUSH
7812: LD_VAR 0 6
7816: PUSH
7817: LD_INT 1
7819: PLUS
7820: ARRAY
7821: PPUSH
7822: CALL_OW 428
7826: PUSH
7827: LD_INT 0
7829: EQUAL
7830: IFFALSE 7872
// PlaceUnitXY ( veh , tmp [ p ] , tmp [ p + 1 ] , false ) else
7832: LD_VAR 0 5
7836: PPUSH
7837: LD_VAR 0 4
7841: PUSH
7842: LD_VAR 0 6
7846: ARRAY
7847: PPUSH
7848: LD_VAR 0 4
7852: PUSH
7853: LD_VAR 0 6
7857: PUSH
7858: LD_INT 1
7860: PLUS
7861: ARRAY
7862: PPUSH
7863: LD_INT 0
7865: PPUSH
7866: CALL_OW 48
7870: GO 7960
// begin repeat p := p + 2 ;
7872: LD_ADDR_VAR 0 6
7876: PUSH
7877: LD_VAR 0 6
7881: PUSH
7882: LD_INT 2
7884: PLUS
7885: ST_TO_ADDR
// until HexInfo ( tmp [ p ] , tmp [ p + 1 ] ) = 0 ;
7886: LD_VAR 0 4
7890: PUSH
7891: LD_VAR 0 6
7895: ARRAY
7896: PPUSH
7897: LD_VAR 0 4
7901: PUSH
7902: LD_VAR 0 6
7906: PUSH
7907: LD_INT 1
7909: PLUS
7910: ARRAY
7911: PPUSH
7912: CALL_OW 428
7916: PUSH
7917: LD_INT 0
7919: EQUAL
7920: IFFALSE 7872
// PlaceUnitXY ( veh , tmp [ p ] , tmp [ p + 1 ] , false ) ;
7922: LD_VAR 0 5
7926: PPUSH
7927: LD_VAR 0 4
7931: PUSH
7932: LD_VAR 0 6
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 4
7942: PUSH
7943: LD_VAR 0 6
7947: PUSH
7948: LD_INT 1
7950: PLUS
7951: ARRAY
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 48
// end ; PrepareHuman ( false , 3 , legion_skill + 1 ) ;
7960: LD_INT 0
7962: PPUSH
7963: LD_INT 3
7965: PPUSH
7966: LD_EXP 32
7970: PUSH
7971: LD_INT 1
7973: PLUS
7974: PPUSH
7975: CALL_OW 380
// un := CreateHuman ;
7979: LD_ADDR_VAR 0 2
7983: PUSH
7984: CALL_OW 44
7988: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7989: LD_VAR 0 2
7993: PPUSH
7994: LD_VAR 0 5
7998: PPUSH
7999: CALL_OW 52
// end ;
8003: GO 7751
8005: POP
8006: POP
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8007: LD_INT 198
8009: PPUSH
8010: LD_INT 94
8012: PPUSH
8013: LD_INT 8
8015: PPUSH
8016: LD_INT 10
8018: PPUSH
8019: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8023: LD_INT 167
8025: PPUSH
8026: LD_INT 130
8028: PPUSH
8029: LD_INT 8
8031: PPUSH
8032: LD_INT 10
8034: PPUSH
8035: CALL_OW 330
// legion_mines := [ ] ;
8039: LD_ADDR_EXP 33
8043: PUSH
8044: EMPTY
8045: ST_TO_ADDR
// legion_mines := RandPointsFromArea ( 176 , 122 , 188 , 126 , 6 ) ;
8046: LD_ADDR_EXP 33
8050: PUSH
8051: LD_INT 176
8053: PPUSH
8054: LD_INT 122
8056: PPUSH
8057: LD_INT 188
8059: PPUSH
8060: LD_INT 126
8062: PPUSH
8063: LD_INT 6
8065: PPUSH
8066: CALL 1562 0 5
8070: ST_TO_ADDR
// legion_mines := legion_mines ^ RandPointsFromArea ( 197 , 91 , 205 , 96 , 4 ) ;
8071: LD_ADDR_EXP 33
8075: PUSH
8076: LD_EXP 33
8080: PUSH
8081: LD_INT 197
8083: PPUSH
8084: LD_INT 91
8086: PPUSH
8087: LD_INT 205
8089: PPUSH
8090: LD_INT 96
8092: PPUSH
8093: LD_INT 4
8095: PPUSH
8096: CALL 1562 0 5
8100: ADD
8101: ST_TO_ADDR
// legion_mines := legion_mines ^ RandPointsFromArea ( 184 , 151 , 178 , 130 , 9 ) ;
8102: LD_ADDR_EXP 33
8106: PUSH
8107: LD_EXP 33
8111: PUSH
8112: LD_INT 184
8114: PPUSH
8115: LD_INT 151
8117: PPUSH
8118: LD_INT 178
8120: PPUSH
8121: LD_INT 130
8123: PPUSH
8124: LD_INT 9
8126: PPUSH
8127: CALL 1562 0 5
8131: ADD
8132: ST_TO_ADDR
// if Difficulty > 1 then
8133: LD_OWVAR 67
8137: PUSH
8138: LD_INT 1
8140: GREATER
8141: IFFALSE 8174
// legion_mines := legion_mines ^ RandPointsFromArea ( 166 , 126 , 181 , 136 , 5 ) ;
8143: LD_ADDR_EXP 33
8147: PUSH
8148: LD_EXP 33
8152: PUSH
8153: LD_INT 166
8155: PPUSH
8156: LD_INT 126
8158: PPUSH
8159: LD_INT 181
8161: PPUSH
8162: LD_INT 136
8164: PPUSH
8165: LD_INT 5
8167: PPUSH
8168: CALL 1562 0 5
8172: ADD
8173: ST_TO_ADDR
// p := 1 ;
8174: LD_ADDR_VAR 0 6
8178: PUSH
8179: LD_INT 1
8181: ST_TO_ADDR
// for i = 1 to 24 do
8182: LD_ADDR_VAR 0 3
8186: PUSH
8187: DOUBLE
8188: LD_INT 1
8190: DEC
8191: ST_TO_ADDR
8192: LD_INT 24
8194: PUSH
8195: FOR_TO
8196: IFFALSE 8250
// begin PlaceMine ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 , 0 ) ;
8198: LD_EXP 33
8202: PUSH
8203: LD_VAR 0 6
8207: ARRAY
8208: PPUSH
8209: LD_EXP 33
8213: PUSH
8214: LD_VAR 0 6
8218: PUSH
8219: LD_INT 1
8221: PLUS
8222: ARRAY
8223: PPUSH
8224: LD_INT 8
8226: PPUSH
8227: LD_INT 0
8229: PPUSH
8230: CALL_OW 454
// p := p + 2 ;
8234: LD_ADDR_VAR 0 6
8238: PUSH
8239: LD_VAR 0 6
8243: PUSH
8244: LD_INT 2
8246: PLUS
8247: ST_TO_ADDR
// end ;
8248: GO 8195
8250: POP
8251: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8252: LD_ADDR_EXP 35
8256: PUSH
8257: LD_INT 13
8259: PUSH
8260: LD_INT 3
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: ST_TO_ADDR
// end ;
8275: LD_VAR 0 1
8279: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8280: LD_INT 22
8282: PUSH
8283: LD_INT 8
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: LD_INT 0
8297: GREATER
8298: IFFALSE 10484
8300: GO 8302
8302: DISABLE
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
8307: PPUSH
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
8315: PPUSH
8316: PPUSH
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
// begin enable ;
8322: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8323: LD_ADDR_VAR 0 8
8327: PUSH
8328: LD_INT 22
8330: PUSH
8331: LD_INT 8
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 30
8340: PUSH
8341: LD_INT 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_INT 1
8359: ARRAY
8360: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8361: LD_ADDR_VAR 0 9
8365: PUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 8
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 30
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PPUSH
8390: CALL_OW 69
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8399: LD_ADDR_VAR 0 10
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 8
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 2
8416: PUSH
8417: LD_INT 30
8419: PUSH
8420: LD_INT 6
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 30
8429: PUSH
8430: LD_INT 8
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: PUSH
8451: LD_INT 1
8453: ARRAY
8454: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8455: LD_ADDR_VAR 0 11
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_INT 8
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 30
8472: PUSH
8473: LD_INT 32
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8489: LD_ADDR_VAR 0 16
8493: PUSH
8494: LD_INT 22
8496: PUSH
8497: LD_INT 8
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 25
8506: PUSH
8507: LD_INT 2
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PPUSH
8518: CALL_OW 69
8522: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
8523: LD_ADDR_VAR 0 15
8527: PUSH
8528: LD_INT 22
8530: PUSH
8531: LD_INT 8
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 25
8540: PUSH
8541: LD_INT 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PPUSH
8552: CALL_OW 69
8556: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
8557: LD_ADDR_VAR 0 14
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_INT 8
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 25
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 69
8590: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
8591: LD_ADDR_VAR 0 13
8595: PUSH
8596: LD_INT 22
8598: PUSH
8599: LD_INT 8
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 25
8608: PUSH
8609: LD_INT 4
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PPUSH
8620: CALL_OW 69
8624: ST_TO_ADDR
// if l_eng then
8625: LD_VAR 0 16
8629: IFFALSE 9044
// begin b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
8631: LD_ADDR_VAR 0 5
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_INT 8
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 21
8648: PUSH
8649: LD_INT 3
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 69
8664: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
8665: LD_VAR 0 5
8669: PPUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 24
8675: PUSH
8676: LD_INT 1000
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 72
8691: PUSH
8692: LD_INT 0
8694: GREATER
8695: IFFALSE 8829
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
8697: LD_ADDR_VAR 0 3
8701: PUSH
8702: LD_VAR 0 5
8706: PPUSH
8707: LD_INT 3
8709: PUSH
8710: LD_INT 24
8712: PUSH
8713: LD_INT 1000
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 72
8728: ST_TO_ADDR
// for i = 1 to l_eng do
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: DOUBLE
8735: LD_INT 1
8737: DEC
8738: ST_TO_ADDR
8739: LD_VAR 0 16
8743: PUSH
8744: FOR_TO
8745: IFFALSE 8825
// if IsInUnit ( l_eng [ i ] ) then
8747: LD_VAR 0 16
8751: PUSH
8752: LD_VAR 0 2
8756: ARRAY
8757: PPUSH
8758: CALL_OW 310
8762: IFFALSE 8781
// ComExitBuilding ( l_eng [ i ] ) else
8764: LD_VAR 0 16
8768: PUSH
8769: LD_VAR 0 2
8773: ARRAY
8774: PPUSH
8775: CALL_OW 122
8779: GO 8823
// if not HasTask ( l_eng [ i ] ) then
8781: LD_VAR 0 16
8785: PUSH
8786: LD_VAR 0 2
8790: ARRAY
8791: PPUSH
8792: CALL_OW 314
8796: NOT
8797: IFFALSE 8823
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
8799: LD_VAR 0 16
8803: PUSH
8804: LD_VAR 0 2
8808: ARRAY
8809: PPUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_INT 1
8817: ARRAY
8818: PPUSH
8819: CALL_OW 130
8823: GO 8744
8825: POP
8826: POP
// end else
8827: GO 9044
// begin if legion_blist > 0 then
8829: LD_EXP 34
8833: PUSH
8834: LD_INT 0
8836: GREATER
8837: IFFALSE 8966
// begin for i = 1 to l_eng do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 16
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8962
// if IsInUnit ( l_eng [ i ] ) then
8857: LD_VAR 0 16
8861: PUSH
8862: LD_VAR 0 2
8866: ARRAY
8867: PPUSH
8868: CALL_OW 310
8872: IFFALSE 8891
// ComExitBuilding ( l_eng [ i ] ) else
8874: LD_VAR 0 16
8878: PUSH
8879: LD_VAR 0 2
8883: ARRAY
8884: PPUSH
8885: CALL_OW 122
8889: GO 8960
// if not HasTask ( l_eng [ i ] ) then
8891: LD_VAR 0 16
8895: PUSH
8896: LD_VAR 0 2
8900: ARRAY
8901: PPUSH
8902: CALL_OW 314
8906: NOT
8907: IFFALSE 8960
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
8909: LD_VAR 0 16
8913: PUSH
8914: LD_VAR 0 2
8918: ARRAY
8919: PPUSH
8920: LD_EXP 34
8924: PUSH
8925: LD_INT 1
8927: ARRAY
8928: PPUSH
8929: LD_EXP 34
8933: PUSH
8934: LD_INT 2
8936: ARRAY
8937: PPUSH
8938: LD_EXP 34
8942: PUSH
8943: LD_INT 3
8945: ARRAY
8946: PPUSH
8947: LD_EXP 34
8951: PUSH
8952: LD_INT 4
8954: ARRAY
8955: PPUSH
8956: CALL_OW 145
8960: GO 8854
8962: POP
8963: POP
// end else
8964: GO 9044
// for i = 1 to l_eng do
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_VAR 0 16
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9042
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
8984: LD_VAR 0 16
8988: PUSH
8989: LD_VAR 0 2
8993: ARRAY
8994: PPUSH
8995: CALL_OW 310
8999: NOT
9000: PUSH
9001: LD_VAR 0 16
9005: PUSH
9006: LD_VAR 0 2
9010: ARRAY
9011: PPUSH
9012: CALL_OW 314
9016: NOT
9017: AND
9018: IFFALSE 9040
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9020: LD_VAR 0 16
9024: PUSH
9025: LD_VAR 0 2
9029: ARRAY
9030: PPUSH
9031: LD_VAR 0 8
9035: PPUSH
9036: CALL_OW 120
9040: GO 8981
9042: POP
9043: POP
// end ; end ; if l_factory then
9044: LD_VAR 0 9
9048: IFFALSE 9448
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9050: LD_INT 22
9052: PUSH
9053: LD_INT 8
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 33
9062: PUSH
9063: LD_INT 2
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: LD_INT 3
9072: PUSH
9073: LD_INT 61
9075: PUSH
9076: EMPTY
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 69
9092: PUSH
9093: LD_INT 0
9095: GREATER
9096: PUSH
9097: LD_INT 22
9099: PUSH
9100: LD_INT 8
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 34
9109: PUSH
9110: LD_INT 31
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 69
9125: PUSH
9126: LD_INT 0
9128: GREATER
9129: AND
9130: IFFALSE 9250
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9132: LD_INT 22
9134: PUSH
9135: LD_INT 8
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 33
9144: PUSH
9145: LD_INT 2
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 61
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: PPUSH
9170: CALL_OW 69
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PPUSH
9179: LD_INT 22
9181: PUSH
9182: LD_INT 8
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: LD_INT 34
9191: PUSH
9192: LD_INT 31
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 8
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 34
9223: PUSH
9224: LD_INT 31
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PPUSH
9240: CALL_OW 12
9244: ARRAY
9245: PPUSH
9246: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9250: LD_EXP 35
9254: PUSH
9255: LD_INT 0
9257: GREATER
9258: PUSH
9259: LD_VAR 0 9
9263: PPUSH
9264: CALL_OW 461
9268: PUSH
9269: LD_INT 2
9271: EQUAL
9272: AND
9273: IFFALSE 9358
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9275: LD_VAR 0 9
9279: PPUSH
9280: LD_EXP 35
9284: PUSH
9285: LD_INT 1
9287: ARRAY
9288: PPUSH
9289: LD_EXP 35
9293: PUSH
9294: LD_INT 2
9296: ARRAY
9297: PPUSH
9298: LD_EXP 35
9302: PUSH
9303: LD_INT 3
9305: ARRAY
9306: PPUSH
9307: LD_EXP 35
9311: PUSH
9312: LD_INT 4
9314: ARRAY
9315: PPUSH
9316: CALL_OW 125
// for i = 1 to 4 do
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: DOUBLE
9326: LD_INT 1
9328: DEC
9329: ST_TO_ADDR
9330: LD_INT 4
9332: PUSH
9333: FOR_TO
9334: IFFALSE 9356
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9336: LD_ADDR_EXP 35
9340: PUSH
9341: LD_EXP 35
9345: PPUSH
9346: LD_INT 1
9348: PPUSH
9349: CALL_OW 3
9353: ST_TO_ADDR
9354: GO 9333
9356: POP
9357: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9358: LD_VAR 0 11
9362: PPUSH
9363: LD_INT 35
9365: PUSH
9366: LD_INT 0
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 72
9377: PUSH
9378: LD_INT 0
9380: GREATER
9381: PUSH
9382: LD_VAR 0 9
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: AND
9396: IFFALSE 9448
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9398: LD_VAR 0 11
9402: PPUSH
9403: LD_INT 35
9405: PUSH
9406: LD_INT 0
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 72
9417: PUSH
9418: LD_INT 1
9420: ARRAY
9421: PPUSH
9422: LD_INT 28
9424: PUSH
9425: LD_INT 27
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 1
9434: PPUSH
9435: LD_INT 2
9437: PPUSH
9438: CALL_OW 12
9442: ARRAY
9443: PPUSH
9444: CALL_OW 148
// end ; if legion_enemy > 0 then
9448: LD_EXP 36
9452: PUSH
9453: LD_INT 0
9455: GREATER
9456: IFFALSE 10036
// begin if tick mod 11 11$00 = 0 then
9458: LD_OWVAR 1
9462: PUSH
9463: LD_INT 23100
9465: MOD
9466: PUSH
9467: LD_INT 0
9469: EQUAL
9470: IFFALSE 9720
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9472: LD_ADDR_EXP 35
9476: PUSH
9477: LD_EXP 35
9481: PUSH
9482: LD_INT 13
9484: PUSH
9485: LD_INT 1
9487: PUSH
9488: LD_INT 2
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: ADD
9496: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9497: LD_ADDR_EXP 35
9501: PUSH
9502: LD_EXP 35
9506: PUSH
9507: LD_INT 28
9509: PUSH
9510: LD_INT 27
9512: PUSH
9513: LD_INT 29
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 1
9523: PPUSH
9524: LD_INT 3
9526: PPUSH
9527: CALL_OW 12
9531: ARRAY
9532: ADD
9533: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9534: LD_ADDR_EXP 35
9538: PUSH
9539: LD_EXP 35
9543: PUSH
9544: LD_INT 13
9546: PUSH
9547: LD_INT 1
9549: PUSH
9550: LD_INT 2
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: ADD
9558: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9559: LD_ADDR_EXP 35
9563: PUSH
9564: LD_EXP 35
9568: PUSH
9569: LD_INT 28
9571: PUSH
9572: LD_INT 27
9574: PUSH
9575: LD_INT 29
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 1
9585: PPUSH
9586: LD_INT 3
9588: PPUSH
9589: CALL_OW 12
9593: ARRAY
9594: ADD
9595: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9596: LD_ADDR_EXP 35
9600: PUSH
9601: LD_EXP 35
9605: PUSH
9606: LD_INT 13
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: LD_INT 2
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: ADD
9620: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9621: LD_ADDR_EXP 35
9625: PUSH
9626: LD_EXP 35
9630: PUSH
9631: LD_INT 28
9633: PUSH
9634: LD_INT 27
9636: PUSH
9637: LD_INT 29
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: CALL_OW 12
9655: ARRAY
9656: ADD
9657: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9658: LD_ADDR_EXP 35
9662: PUSH
9663: LD_EXP 35
9667: PUSH
9668: LD_INT 13
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: ADD
9682: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9683: LD_ADDR_EXP 35
9687: PUSH
9688: LD_EXP 35
9692: PUSH
9693: LD_INT 28
9695: PUSH
9696: LD_INT 27
9698: PUSH
9699: LD_INT 29
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 1
9709: PPUSH
9710: LD_INT 3
9712: PPUSH
9713: CALL_OW 12
9717: ARRAY
9718: ADD
9719: ST_TO_ADDR
// end ; if legion_force >= 7 then
9720: LD_EXP 31
9724: PUSH
9725: LD_INT 7
9727: GREATEREQUAL
9728: IFFALSE 9911
// begin for i = 1 to legion_force do
9730: LD_ADDR_VAR 0 2
9734: PUSH
9735: DOUBLE
9736: LD_INT 1
9738: DEC
9739: ST_TO_ADDR
9740: LD_EXP 31
9744: PUSH
9745: FOR_TO
9746: IFFALSE 9909
// begin if not HasTask ( legion_force [ i ] ) and GetTag ( legion_force [ i ] ) <> 11 then
9748: LD_EXP 31
9752: PUSH
9753: LD_VAR 0 2
9757: ARRAY
9758: PPUSH
9759: CALL_OW 314
9763: NOT
9764: PUSH
9765: LD_EXP 31
9769: PUSH
9770: LD_VAR 0 2
9774: ARRAY
9775: PPUSH
9776: CALL_OW 110
9780: PUSH
9781: LD_INT 11
9783: NONEQUAL
9784: AND
9785: IFFALSE 9907
// begin case legion_enemy of 1 :
9787: LD_EXP 36
9791: PUSH
9792: LD_INT 1
9794: DOUBLE
9795: EQUAL
9796: IFTRUE 9800
9798: GO 9824
9800: POP
// ComMoveXY ( legion_force [ i ] , 142 , 144 ) ; 2 :
9801: LD_EXP 31
9805: PUSH
9806: LD_VAR 0 2
9810: ARRAY
9811: PPUSH
9812: LD_INT 142
9814: PPUSH
9815: LD_INT 144
9817: PPUSH
9818: CALL_OW 111
9822: GO 9889
9824: LD_INT 2
9826: DOUBLE
9827: EQUAL
9828: IFTRUE 9832
9830: GO 9856
9832: POP
// ComMoveXY ( legion_force [ i ] , 101 , 34 ) ; 7 :
9833: LD_EXP 31
9837: PUSH
9838: LD_VAR 0 2
9842: ARRAY
9843: PPUSH
9844: LD_INT 101
9846: PPUSH
9847: LD_INT 34
9849: PPUSH
9850: CALL_OW 111
9854: GO 9889
9856: LD_INT 7
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9888
9864: POP
// ComMoveXY ( legion_force [ i ] , 173 , 127 ) ; end ;
9865: LD_EXP 31
9869: PUSH
9870: LD_VAR 0 2
9874: ARRAY
9875: PPUSH
9876: LD_INT 173
9878: PPUSH
9879: LD_INT 127
9881: PPUSH
9882: CALL_OW 111
9886: GO 9889
9888: POP
// SetTag ( legion_force [ i ] , 11 ) ;
9889: LD_EXP 31
9893: PUSH
9894: LD_VAR 0 2
9898: ARRAY
9899: PPUSH
9900: LD_INT 11
9902: PPUSH
9903: CALL_OW 109
// end ; end ;
9907: GO 9745
9909: POP
9910: POP
// end ; if legion_force then
9911: LD_EXP 31
9915: IFFALSE 10036
// begin tmp := legion_force ;
9917: LD_ADDR_VAR 0 3
9921: PUSH
9922: LD_EXP 31
9926: ST_TO_ADDR
// for i = 1 to tmp do
9927: LD_ADDR_VAR 0 2
9931: PUSH
9932: DOUBLE
9933: LD_INT 1
9935: DEC
9936: ST_TO_ADDR
9937: LD_VAR 0 3
9941: PUSH
9942: FOR_TO
9943: IFFALSE 10034
// if not HasTask ( tmp [ i ] ) and GetTag ( legion_force [ i ] ) = 11 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_VAR 0 2
9954: ARRAY
9955: PPUSH
9956: CALL_OW 314
9960: NOT
9961: PUSH
9962: LD_EXP 31
9966: PUSH
9967: LD_VAR 0 2
9971: ARRAY
9972: PPUSH
9973: CALL_OW 110
9977: PUSH
9978: LD_INT 11
9980: EQUAL
9981: AND
9982: IFFALSE 10032
// ComAttackUnit ( tmp [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , legion_enemy ] ) , tmp [ i ] ) ) ;
9984: LD_VAR 0 3
9988: PUSH
9989: LD_VAR 0 2
9993: ARRAY
9994: PPUSH
9995: LD_INT 22
9997: PUSH
9998: LD_EXP 36
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PPUSH
10012: LD_VAR 0 3
10016: PUSH
10017: LD_VAR 0 2
10021: ARRAY
10022: PPUSH
10023: CALL_OW 74
10027: PPUSH
10028: CALL_OW 115
10032: GO 9942
10034: POP
10035: POP
// end ; end ; p := 1 ;
10036: LD_ADDR_VAR 0 6
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// for i = 1 to 24 do
10044: LD_ADDR_VAR 0 2
10048: PUSH
10049: DOUBLE
10050: LD_INT 1
10052: DEC
10053: ST_TO_ADDR
10054: LD_INT 24
10056: PUSH
10057: FOR_TO
10058: IFFALSE 10188
// begin if HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) > 0 then
10060: LD_EXP 33
10064: PUSH
10065: LD_VAR 0 6
10069: ARRAY
10070: PPUSH
10071: LD_EXP 33
10075: PUSH
10076: LD_VAR 0 6
10080: PUSH
10081: LD_INT 1
10083: PLUS
10084: ARRAY
10085: PPUSH
10086: CALL_OW 428
10090: PUSH
10091: LD_INT 0
10093: GREATER
10094: IFFALSE 10172
// if GetSide ( HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) ) = legion_enemy then
10096: LD_EXP 33
10100: PUSH
10101: LD_VAR 0 6
10105: ARRAY
10106: PPUSH
10107: LD_EXP 33
10111: PUSH
10112: LD_VAR 0 6
10116: PUSH
10117: LD_INT 1
10119: PLUS
10120: ARRAY
10121: PPUSH
10122: CALL_OW 428
10126: PPUSH
10127: CALL_OW 255
10131: PUSH
10132: LD_EXP 36
10136: EQUAL
10137: IFFALSE 10172
// LaunchMineAtPos ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 ) ;
10139: LD_EXP 33
10143: PUSH
10144: LD_VAR 0 6
10148: ARRAY
10149: PPUSH
10150: LD_EXP 33
10154: PUSH
10155: LD_VAR 0 6
10159: PUSH
10160: LD_INT 1
10162: PLUS
10163: ARRAY
10164: PPUSH
10165: LD_INT 8
10167: PPUSH
10168: CALL_OW 456
// p := p + 2 ;
10172: LD_ADDR_VAR 0 6
10176: PUSH
10177: LD_VAR 0 6
10181: PUSH
10182: LD_INT 2
10184: PLUS
10185: ST_TO_ADDR
// end ;
10186: GO 10057
10188: POP
10189: POP
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10190: LD_INT 22
10192: PUSH
10193: LD_INT 8
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 34
10202: PUSH
10203: LD_INT 32
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: IFFALSE 10332
// begin if l_cargo = false then
10220: LD_VAR 0 17
10224: PUSH
10225: LD_INT 0
10227: EQUAL
10228: IFFALSE 10264
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10230: LD_ADDR_VAR 0 17
10234: PUSH
10235: LD_INT 22
10237: PUSH
10238: LD_INT 8
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 34
10247: PUSH
10248: LD_INT 32
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL_OW 69
10263: ST_TO_ADDR
// if l_cargo then
10264: LD_VAR 0 17
10268: IFFALSE 10332
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10270: LD_ADDR_VAR 0 7
10274: PUSH
10275: LD_INT 14
10277: PPUSH
10278: CALL_OW 435
10282: ST_TO_ADDR
// if cr > 0 then
10283: LD_VAR 0 7
10287: PUSH
10288: LD_INT 0
10290: GREATER
10291: IFFALSE 10332
// if not HasTask ( l_cargo ) then
10293: LD_VAR 0 17
10297: PPUSH
10298: CALL_OW 314
10302: NOT
10303: IFFALSE 10332
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10305: LD_VAR 0 17
10309: PPUSH
10310: LD_VAR 0 7
10314: PUSH
10315: LD_INT 1
10317: ARRAY
10318: PPUSH
10319: LD_VAR 0 7
10323: PUSH
10324: LD_INT 2
10326: ARRAY
10327: PPUSH
10328: CALL_OW 117
// end ; end ; if tick = [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] and FindArtifact ( 1 ) [ 1 ] = 112 and FindArtifact ( 1 ) [ 2 ] = 67 then
10332: LD_OWVAR 1
10336: PUSH
10337: LD_INT 52500
10339: PUSH
10340: LD_INT 46200
10342: PUSH
10343: LD_INT 42000
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: PUSH
10351: LD_OWVAR 67
10355: ARRAY
10356: EQUAL
10357: PUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 469
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PUSH
10370: LD_INT 112
10372: EQUAL
10373: AND
10374: PUSH
10375: LD_INT 1
10377: PPUSH
10378: CALL_OW 469
10382: PUSH
10383: LD_INT 2
10385: ARRAY
10386: PUSH
10387: LD_INT 67
10389: EQUAL
10390: AND
10391: IFFALSE 10484
// begin un := l_eng [ 1 ] ;
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 16
10402: PUSH
10403: LD_INT 1
10405: ARRAY
10406: ST_TO_ADDR
// if IsInUnit ( un ) then
10407: LD_VAR 0 1
10411: PPUSH
10412: CALL_OW 310
10416: IFFALSE 10427
// ComExitBuilding ( un ) ;
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 122
// AddComCollect ( un , FindArtifact ( 1 ) [ 1 ] , FindArtifact ( 1 ) [ 2 ] ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_INT 1
10434: PPUSH
10435: CALL_OW 469
10439: PUSH
10440: LD_INT 1
10442: ARRAY
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 469
10451: PUSH
10452: LD_INT 2
10454: ARRAY
10455: PPUSH
10456: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
10460: LD_VAR 0 1
10464: PPUSH
10465: LD_INT 207
10467: PPUSH
10468: LD_INT 123
10470: PPUSH
10471: CALL_OW 171
// AddComUnload ( un ) ;
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 219
// end ; end ;
10484: PPOPN 17
10486: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10487: LD_OWVAR 67
10491: PUSH
10492: LD_INT 1
10494: GREATER
10495: IFFALSE 10700
10497: GO 10499
10499: DISABLE
10500: LD_INT 0
10502: PPUSH
10503: PPUSH
10504: PPUSH
10505: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10506: LD_INT 35
10508: PPUSH
10509: LD_INT 12635
10511: PPUSH
10512: CALL_OW 12
10516: PPUSH
10517: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 22
10528: PUSH
10529: LD_INT 8
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 25
10538: PUSH
10539: LD_INT 4
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: ST_TO_ADDR
// p := 1 ;
10555: LD_ADDR_VAR 0 4
10559: PUSH
10560: LD_INT 1
10562: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10563: LD_ADDR_VAR 0 3
10567: PUSH
10568: LD_INT 116
10570: PUSH
10571: LD_INT 139
10573: PUSH
10574: LD_INT 69
10576: PUSH
10577: LD_INT 13
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: ST_TO_ADDR
// for i = 1 to 2 do
10586: LD_ADDR_VAR 0 1
10590: PUSH
10591: DOUBLE
10592: LD_INT 1
10594: DEC
10595: ST_TO_ADDR
10596: LD_INT 2
10598: PUSH
10599: FOR_TO
10600: IFFALSE 10698
// begin if IsInUnit ( sci [ i ] ) then
10602: LD_VAR 0 2
10606: PUSH
10607: LD_VAR 0 1
10611: ARRAY
10612: PPUSH
10613: CALL_OW 310
10617: IFFALSE 10634
// ComExitBuilding ( sci [ i ] ) ;
10619: LD_VAR 0 2
10623: PUSH
10624: LD_VAR 0 1
10628: ARRAY
10629: PPUSH
10630: CALL_OW 122
// Wait ( 0 0$03 ) ;
10634: LD_INT 105
10636: PPUSH
10637: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10641: LD_VAR 0 2
10645: PUSH
10646: LD_VAR 0 1
10650: ARRAY
10651: PPUSH
10652: LD_VAR 0 3
10656: PUSH
10657: LD_VAR 0 4
10661: ARRAY
10662: PPUSH
10663: LD_VAR 0 3
10667: PUSH
10668: LD_VAR 0 4
10672: PUSH
10673: LD_INT 1
10675: PLUS
10676: ARRAY
10677: PPUSH
10678: CALL_OW 158
// p := p + 2 ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_VAR 0 4
10691: PUSH
10692: LD_INT 2
10694: PLUS
10695: ST_TO_ADDR
// end ;
10696: GO 10599
10698: POP
10699: POP
// end ;
10700: PPOPN 4
10702: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10703: LD_INT 14
10705: PPUSH
10706: CALL_OW 435
10710: PUSH
10711: LD_INT 20
10713: LESS
10714: IFFALSE 10741
10716: GO 10718
10718: DISABLE
// begin enable ;
10719: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10720: LD_INT 1
10722: PPUSH
10723: LD_INT 5
10725: PPUSH
10726: CALL_OW 12
10730: PPUSH
10731: LD_INT 14
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: CALL_OW 55
// end ; end_of_file
10741: END
// export function Action ; var un , gamemode , speaker ; begin
10742: LD_INT 0
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
10748: LD_ADDR_OWVAR 67
10752: PUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 426
10760: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10761: LD_ADDR_VAR 0 3
10765: PUSH
10766: LD_INT 1
10768: PPUSH
10769: CALL_OW 426
10773: ST_TO_ADDR
// if gamemode = 1 then
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 1
10781: EQUAL
10782: IFFALSE 10806
// begin your_side := 1 ;
10784: LD_ADDR_OWVAR 2
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// legion_enemy := 1 ;
10792: LD_ADDR_EXP 36
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// PrepareAmerican ;
10800: CALL 221 0 0
// end else
10804: GO 10858
// if gamemode = 2 then
10806: LD_VAR 0 3
10810: PUSH
10811: LD_INT 2
10813: EQUAL
10814: IFFALSE 10838
// begin your_side := 2 ;
10816: LD_ADDR_OWVAR 2
10820: PUSH
10821: LD_INT 2
10823: ST_TO_ADDR
// legion_enemy := 2 ;
10824: LD_ADDR_EXP 36
10828: PUSH
10829: LD_INT 2
10831: ST_TO_ADDR
// PrepareArabian ;
10832: CALL 18169 0 0
// end else
10836: GO 10858
// begin your_side := 7 ;
10838: LD_ADDR_OWVAR 2
10842: PUSH
10843: LD_INT 7
10845: ST_TO_ADDR
// legion_enemy := 7 ;
10846: LD_ADDR_EXP 36
10850: PUSH
10851: LD_INT 7
10853: ST_TO_ADDR
// PrepareAlliance ;
10854: CALL 15580 0 0
// end ; if your_side = 1 then
10858: LD_OWVAR 2
10862: PUSH
10863: LD_INT 1
10865: EQUAL
10866: IFFALSE 11344
// begin case Query ( QVul4 ) of 1 :
10868: LD_STRING QVul4
10870: PPUSH
10871: CALL_OW 97
10875: PUSH
10876: LD_INT 1
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 10887
10884: POP
// ; end ;
10885: GO 10888
10887: POP
// InGameOn ;
10888: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
10892: LD_INT 8
10894: PPUSH
10895: LD_INT 5
10897: PPUSH
10898: CALL_OW 86
// uc_side := 4 ;
10902: LD_ADDR_OWVAR 20
10906: PUSH
10907: LD_INT 4
10909: ST_TO_ADDR
// uc_nation := 1 ;
10910: LD_ADDR_OWVAR 21
10914: PUSH
10915: LD_INT 1
10917: ST_TO_ADDR
// hc_importance := 0 ;
10918: LD_ADDR_OWVAR 32
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
10926: LD_INT 1
10928: PPUSH
10929: LD_INT 3
10931: PPUSH
10932: LD_EXP 21
10936: PPUSH
10937: CALL_OW 380
// un := CreateHuman ;
10941: LD_ADDR_VAR 0 2
10945: PUSH
10946: CALL_OW 44
10950: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
10951: LD_VAR 0 2
10955: PPUSH
10956: LD_INT 12
10958: PPUSH
10959: LD_INT 9
10961: PPUSH
10962: LD_INT 0
10964: PPUSH
10965: CALL_OW 48
// hc_name := Stuart Carey ;
10969: LD_ADDR_OWVAR 26
10973: PUSH
10974: LD_STRING Stuart Carey
10976: ST_TO_ADDR
// hc_class := 1 ;
10977: LD_ADDR_OWVAR 28
10981: PUSH
10982: LD_INT 1
10984: ST_TO_ADDR
// hc_gallery := vulcano ;
10985: LD_ADDR_OWVAR 33
10989: PUSH
10990: LD_STRING vulcano
10992: ST_TO_ADDR
// hc_face_number := 1 ;
10993: LD_ADDR_OWVAR 34
10997: PUSH
10998: LD_INT 1
11000: ST_TO_ADDR
// us_guy := CreateHuman ;
11001: LD_ADDR_EXP 22
11005: PUSH
11006: CALL_OW 44
11010: ST_TO_ADDR
// InitHc ;
11011: CALL_OW 19
// if rand ( 0 , 1 ) then
11015: LD_INT 0
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 12
11025: IFFALSE 11042
// PrepareHuman ( sex_male , 3 , 6 ) else
11027: LD_INT 1
11029: PPUSH
11030: LD_INT 3
11032: PPUSH
11033: LD_INT 6
11035: PPUSH
11036: CALL_OW 380
11040: GO 11055
// PrepareHuman ( sex_female , 4 , 8 ) ;
11042: LD_INT 2
11044: PPUSH
11045: LD_INT 4
11047: PPUSH
11048: LD_INT 8
11050: PPUSH
11051: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
11055: LD_VAR 0 2
11059: PPUSH
11060: LD_EXP 19
11064: PPUSH
11065: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
11069: LD_EXP 19
11073: PPUSH
11074: LD_VAR 0 2
11078: PPUSH
11079: CALL_OW 119
// if GetSex ( un ) = sex_male then
11083: LD_VAR 0 2
11087: PPUSH
11088: CALL_OW 258
11092: PUSH
11093: LD_INT 1
11095: EQUAL
11096: IFFALSE 11179
// begin Say ( un , VD-un1 ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_STRING VD-un1
11105: PPUSH
11106: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11110: LD_EXP 19
11114: PPUSH
11115: LD_STRING VDc-1
11117: PPUSH
11118: CALL_OW 88
// Say ( un , VD-un2 ) ;
11122: LD_VAR 0 2
11126: PPUSH
11127: LD_STRING VD-un2
11129: PPUSH
11130: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11134: LD_EXP 19
11138: PPUSH
11139: LD_STRING VDc-2
11141: PPUSH
11142: CALL_OW 88
// Say ( un , VD-un3 ) ;
11146: LD_VAR 0 2
11150: PPUSH
11151: LD_STRING VD-un3
11153: PPUSH
11154: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11158: LD_INT 7
11160: PPUSH
11161: CALL_OW 67
// Say ( un , VD-un4 ) ;
11165: LD_VAR 0 2
11169: PPUSH
11170: LD_STRING VD-un4
11172: PPUSH
11173: CALL_OW 88
// end else
11177: GO 11258
// begin Say ( un , VD-unf1 ) ;
11179: LD_VAR 0 2
11183: PPUSH
11184: LD_STRING VD-unf1
11186: PPUSH
11187: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11191: LD_EXP 19
11195: PPUSH
11196: LD_STRING VDc-1
11198: PPUSH
11199: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_STRING VD-unf2
11210: PPUSH
11211: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11215: LD_EXP 19
11219: PPUSH
11220: LD_STRING VDc-2
11222: PPUSH
11223: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11227: LD_VAR 0 2
11231: PPUSH
11232: LD_STRING VD-unf3
11234: PPUSH
11235: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11239: LD_INT 7
11241: PPUSH
11242: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11246: LD_VAR 0 2
11250: PPUSH
11251: LD_STRING VD-unf4
11253: PPUSH
11254: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11258: LD_VAR 0 2
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: LD_INT 2
11268: PPUSH
11269: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11273: LD_EXP 19
11277: PPUSH
11278: LD_STRING VDc-3
11280: PPUSH
11281: CALL_OW 88
// InGameOff ;
11285: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11289: LD_STRING CVulc1
11291: PPUSH
11292: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11296: LD_INT 35
11298: PPUSH
11299: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11303: LD_VAR 0 2
11307: PPUSH
11308: CALL_OW 250
11312: PUSH
11313: LD_INT 2
11315: EQUAL
11316: PUSH
11317: LD_VAR 0 2
11321: PPUSH
11322: CALL_OW 251
11326: PUSH
11327: LD_INT 2
11329: EQUAL
11330: AND
11331: IFFALSE 11296
// RemoveUnit ( un ) ;
11333: LD_VAR 0 2
11337: PPUSH
11338: CALL_OW 64
// end else
11342: GO 11721
// if your_side = 2 then
11344: LD_OWVAR 2
11348: PUSH
11349: LD_INT 2
11351: EQUAL
11352: IFFALSE 11568
// begin CenterNowOnUnits ( player_commander ) ;
11354: LD_EXP 10
11358: PPUSH
11359: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11363: LD_ADDR_VAR 0 4
11367: PUSH
11368: LD_INT 22
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 21
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 69
11396: PUSH
11397: LD_EXP 51
11401: DIFF
11402: ST_TO_ADDR
// if speaker then
11403: LD_VAR 0 4
11407: IFFALSE 11559
// begin InGameOn ;
11409: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11413: LD_EXP 51
11417: PPUSH
11418: LD_STRING VSd-1
11420: PPUSH
11421: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11425: LD_VAR 0 4
11429: PUSH
11430: LD_INT 1
11432: ARRAY
11433: PPUSH
11434: CALL_OW 258
11438: PUSH
11439: LD_INT 1
11441: EQUAL
11442: IFFALSE 11462
// Say ( speaker [ 1 ] , VAd-1 ) else
11444: LD_VAR 0 4
11448: PUSH
11449: LD_INT 1
11451: ARRAY
11452: PPUSH
11453: LD_STRING VAd-1
11455: PPUSH
11456: CALL_OW 88
11460: GO 11478
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11462: LD_VAR 0 4
11466: PUSH
11467: LD_INT 1
11469: ARRAY
11470: PPUSH
11471: LD_STRING VAfd-1
11473: PPUSH
11474: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11478: LD_EXP 51
11482: PPUSH
11483: LD_STRING VSd-2
11485: PPUSH
11486: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11490: LD_VAR 0 4
11494: PUSH
11495: LD_INT 1
11497: ARRAY
11498: PPUSH
11499: CALL_OW 258
11503: PUSH
11504: LD_INT 1
11506: EQUAL
11507: IFFALSE 11527
// Say ( speaker [ 1 ] , VAd-2 ) else
11509: LD_VAR 0 4
11513: PUSH
11514: LD_INT 1
11516: ARRAY
11517: PPUSH
11518: LD_STRING VAd-2
11520: PPUSH
11521: CALL_OW 88
11525: GO 11543
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11527: LD_VAR 0 4
11531: PUSH
11532: LD_INT 1
11534: ARRAY
11535: PPUSH
11536: LD_STRING VAfd-2
11538: PPUSH
11539: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11543: LD_EXP 51
11547: PPUSH
11548: LD_STRING VSd-3
11550: PPUSH
11551: CALL_OW 88
// InGameOff ;
11555: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11559: LD_STRING CVulc5
11561: PPUSH
11562: CALL_OW 337
// end else
11566: GO 11721
// if your_side = 7 then
11568: LD_OWVAR 2
11572: PUSH
11573: LD_INT 7
11575: EQUAL
11576: IFFALSE 11721
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11578: LD_ADDR_VAR 0 4
11582: PUSH
11583: LD_INT 22
11585: PUSH
11586: LD_INT 7
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 21
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PPUSH
11607: CALL_OW 69
11611: PUSH
11612: LD_EXP 37
11616: DIFF
11617: ST_TO_ADDR
// if speaker then
11618: LD_VAR 0 4
11622: IFFALSE 11714
// begin CenterNowOnUnits ( al_commander ) ;
11624: LD_EXP 37
11628: PPUSH
11629: CALL_OW 87
// InGameOn ;
11633: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11637: LD_EXP 37
11641: PPUSH
11642: LD_STRING VPd-1
11644: PPUSH
11645: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11649: LD_VAR 0 4
11653: PUSH
11654: LD_INT 1
11656: ARRAY
11657: PPUSH
11658: CALL_OW 258
11662: IFFALSE 11682
// Say ( speaker [ 1 ] , VPpd-1 ) else
11664: LD_VAR 0 4
11668: PUSH
11669: LD_INT 1
11671: ARRAY
11672: PPUSH
11673: LD_STRING VPpd-1
11675: PPUSH
11676: CALL_OW 88
11680: GO 11698
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11682: LD_VAR 0 4
11686: PUSH
11687: LD_INT 1
11689: ARRAY
11690: PPUSH
11691: LD_STRING VPpdf-1
11693: PPUSH
11694: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11698: LD_EXP 37
11702: PPUSH
11703: LD_STRING VPd-2
11705: PPUSH
11706: CALL_OW 88
// InGameOff ;
11710: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11714: LD_STRING CVulc7
11716: PPUSH
11717: CALL_OW 337
// end ; SaveForQuickRestart ;
11721: CALL_OW 22
// end ;
11725: LD_VAR 0 1
11729: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11730: LD_INT 22
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 30
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 69
11758: IFFALSE 11802
11760: GO 11762
11762: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11763: LD_STRING CVulc6
11765: PPUSH
11766: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11770: LD_INT 52500
11772: PUSH
11773: LD_INT 47250
11775: PUSH
11776: LD_INT 42000
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: PUSH
11784: LD_OWVAR 67
11788: ARRAY
11789: PPUSH
11790: CALL_OW 67
// ru_can_attack := true ;
11794: LD_ADDR_EXP 3
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// end ;
11802: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11803: LD_INT 50
11805: PPUSH
11806: CALL_OW 255
11810: PUSH
11811: LD_INT 1
11813: EQUAL
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 1
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 30
11830: PUSH
11831: LD_INT 3
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 1
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PPUSH
11857: CALL_OW 69
11861: OR
11862: IFFALSE 12096
11864: GO 11866
11866: DISABLE
11867: LD_INT 0
11869: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
11870: LD_STRING CVulc2
11872: PPUSH
11873: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 25
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 69
11910: PUSH
11911: LD_EXP 19
11915: DIFF
11916: ST_TO_ADDR
// DialogueOn ;
11917: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
11921: LD_INT 10
11923: PPUSH
11924: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11928: LD_VAR 0 1
11932: PUSH
11933: LD_INT 1
11935: ARRAY
11936: PPUSH
11937: CALL_OW 258
11941: PUSH
11942: LD_INT 1
11944: EQUAL
11945: IFFALSE 11965
// Say ( speaker [ 1 ] , VDb-1 ) else
11947: LD_VAR 0 1
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: PPUSH
11956: LD_STRING VDb-1
11958: PPUSH
11959: CALL_OW 88
11963: GO 11981
// Say ( speaker [ 1 ] , VDbf-1 ) ;
11965: LD_VAR 0 1
11969: PUSH
11970: LD_INT 1
11972: ARRAY
11973: PPUSH
11974: LD_STRING VDbf-1
11976: PPUSH
11977: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11981: LD_INT 10
11983: PPUSH
11984: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11988: LD_VAR 0 1
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PPUSH
11997: CALL_OW 258
12001: PUSH
12002: LD_INT 1
12004: EQUAL
12005: IFFALSE 12025
// Say ( speaker [ 1 ] , VDb-2 ) else
12007: LD_VAR 0 1
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: LD_STRING VDb-2
12018: PPUSH
12019: CALL_OW 88
12023: GO 12041
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_STRING VDbf-2
12036: PPUSH
12037: CALL_OW 88
// DWait ( 0 0$01 ) ;
12041: LD_INT 35
12043: PPUSH
12044: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
12048: LD_EXP 19
12052: PPUSH
12053: LD_STRING VDb-com1
12055: PPUSH
12056: CALL_OW 88
// DialogueOff ;
12060: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
12064: LD_INT 44100
12066: PUSH
12067: LD_INT 36750
12069: PUSH
12070: LD_INT 31500
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_OWVAR 67
12082: ARRAY
12083: PPUSH
12084: CALL_OW 67
// ru_can_attack := true ;
12088: LD_ADDR_EXP 3
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
// end ;
12096: PPOPN 1
12098: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12099: LD_INT 22
12101: PUSH
12102: LD_INT 7
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 69
12127: IFFALSE 12164
12129: GO 12131
12131: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12132: LD_INT 42000
12134: PUSH
12135: LD_INT 34650
12137: PUSH
12138: LD_INT 29400
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: PUSH
12146: LD_OWVAR 67
12150: ARRAY
12151: PPUSH
12152: CALL_OW 67
// ru_can_attack := true ;
12156: LD_ADDR_EXP 3
12160: PUSH
12161: LD_INT 1
12163: ST_TO_ADDR
// end ;
12164: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12165: LD_INT 58
12167: PPUSH
12168: CALL_OW 255
12172: PUSH
12173: LD_INT 1
12175: EQUAL
12176: IFFALSE 12383
12178: GO 12180
12180: DISABLE
12181: LD_INT 0
12183: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12184: LD_ADDR_VAR 0 1
12188: PUSH
12189: LD_INT 22
12191: PUSH
12192: LD_INT 1
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 25
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 69
12217: ST_TO_ADDR
// DialogueOn ;
12218: CALL_OW 6
// if speaker then
12222: LD_VAR 0 1
12226: IFFALSE 12281
// if GetSex ( speaker [ 1 ] ) = sex_male then
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 1
12235: ARRAY
12236: PPUSH
12237: CALL_OW 258
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: IFFALSE 12265
// Say ( speaker [ 1 ] , VDe-1 ) else
12247: LD_VAR 0 1
12251: PUSH
12252: LD_INT 1
12254: ARRAY
12255: PPUSH
12256: LD_STRING VDe-1
12258: PPUSH
12259: CALL_OW 88
12263: GO 12281
// Say ( speaker [ 1 ] , VDef-1 ) ;
12265: LD_VAR 0 1
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: LD_STRING VDef-1
12276: PPUSH
12277: CALL_OW 88
// case Query ( SibNote ) of 1 :
12281: LD_STRING SibNote
12283: PPUSH
12284: CALL_OW 97
12288: PUSH
12289: LD_INT 1
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12300
12297: POP
// ; end ;
12298: GO 12301
12300: POP
// if speaker then
12301: LD_VAR 0 1
12305: IFFALSE 12360
// if GetSex ( speaker [ 1 ] ) = sex_male then
12307: LD_VAR 0 1
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: CALL_OW 258
12320: PUSH
12321: LD_INT 1
12323: EQUAL
12324: IFFALSE 12344
// Say ( speaker [ 1 ] , VDe-2 ) else
12326: LD_VAR 0 1
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: PPUSH
12335: LD_STRING VDe-2
12337: PPUSH
12338: CALL_OW 88
12342: GO 12360
// Say ( speaker [ 1 ] , VDef-2 ) ;
12344: LD_VAR 0 1
12348: PUSH
12349: LD_INT 1
12351: ARRAY
12352: PPUSH
12353: LD_STRING VDef-2
12355: PPUSH
12356: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12360: LD_EXP 19
12364: PPUSH
12365: LD_STRING VDc-4
12367: PPUSH
12368: CALL_OW 88
// DialogueOff ;
12372: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12376: LD_STRING CVulc3
12378: PPUSH
12379: CALL_OW 337
// end ;
12383: PPOPN 1
12385: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12386: LD_OWVAR 2
12390: PUSH
12391: LD_INT 1
12393: EQUAL
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 30
12407: PUSH
12408: LD_INT 3
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PPUSH
12419: CALL_OW 69
12423: PUSH
12424: LD_INT 0
12426: GREATER
12427: AND
12428: IFFALSE 12862
12430: GO 12432
12432: DISABLE
12433: LD_INT 0
12435: PPUSH
12436: PPUSH
12437: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12438: LD_INT 245
12440: PPUSH
12441: LD_INT 1295
12443: PPUSH
12444: CALL_OW 12
12448: PPUSH
12449: CALL_OW 67
// DialogueOn ;
12453: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12457: LD_EXP 22
12461: PPUSH
12462: LD_STRING VDG-1
12464: PPUSH
12465: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12469: LD_EXP 19
12473: PPUSH
12474: LD_STRING VDc-5
12476: PPUSH
12477: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12481: LD_EXP 22
12485: PPUSH
12486: LD_STRING VDG-2
12488: PPUSH
12489: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12493: LD_EXP 19
12497: PPUSH
12498: LD_STRING VDc-6
12500: PPUSH
12501: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12505: LD_EXP 22
12509: PPUSH
12510: LD_STRING VDG-3
12512: PPUSH
12513: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12517: LD_EXP 19
12521: PPUSH
12522: LD_STRING VDc-7
12524: PPUSH
12525: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12529: LD_EXP 22
12533: PPUSH
12534: LD_STRING VDG-4
12536: PPUSH
12537: CALL_OW 94
// DialogueOff ;
12541: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12545: LD_STRING CVulc4
12547: PPUSH
12548: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12552: LD_INT 18900
12554: PUSH
12555: LD_INT 21000
12557: PUSH
12558: LD_INT 23100
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_OWVAR 67
12570: ARRAY
12571: PPUSH
12572: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12576: LD_ADDR_VAR 0 1
12580: PUSH
12581: DOUBLE
12582: LD_INT 1
12584: DEC
12585: ST_TO_ADDR
12586: LD_INT 4
12588: PUSH
12589: LD_INT 5
12591: PUSH
12592: LD_INT 6
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: LD_OWVAR 67
12604: ARRAY
12605: PUSH
12606: FOR_TO
12607: IFFALSE 12851
// begin uc_side := 1 ;
12609: LD_ADDR_OWVAR 20
12613: PUSH
12614: LD_INT 1
12616: ST_TO_ADDR
// uc_nation := 1 ;
12617: LD_ADDR_OWVAR 21
12621: PUSH
12622: LD_INT 1
12624: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12625: LD_INT 0
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: LD_INT 4
12633: PPUSH
12634: CALL_OW 12
12638: PPUSH
12639: LD_EXP 21
12643: PPUSH
12644: CALL_OW 380
// un := CreateHuman ;
12648: LD_ADDR_VAR 0 2
12652: PUSH
12653: CALL_OW 44
12657: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 2
12665: PPUSH
12666: CALL_OW 233
// if GetClass ( un ) = 3 then
12670: LD_VAR 0 2
12674: PPUSH
12675: CALL_OW 257
12679: PUSH
12680: LD_INT 3
12682: EQUAL
12683: IFFALSE 12834
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12685: LD_ADDR_OWVAR 37
12689: PUSH
12690: LD_INT 2
12692: PUSH
12693: LD_INT 3
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_VAR 0 1
12704: PUSH
12705: LD_INT 2
12707: MOD
12708: ARRAY
12709: ST_TO_ADDR
// vc_engine := engine_combustion ;
12710: LD_ADDR_OWVAR 39
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// vc_control := control_manual ;
12718: LD_ADDR_OWVAR 38
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12726: LD_ADDR_OWVAR 40
12730: PUSH
12731: LD_INT 9
12733: PUSH
12734: LD_INT 9
12736: PUSH
12737: LD_INT 5
12739: PUSH
12740: LD_INT 11
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 1
12751: PPUSH
12752: LD_INT 4
12754: PPUSH
12755: CALL_OW 12
12759: ARRAY
12760: ST_TO_ADDR
// veh := CreateVehicle ;
12761: LD_ADDR_VAR 0 3
12765: PUSH
12766: CALL_OW 45
12770: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 2
12778: PPUSH
12779: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12783: LD_VAR 0 3
12787: PPUSH
12788: LD_INT 77
12790: PPUSH
12791: LD_INT 88
12793: PPUSH
12794: CALL_OW 12
12798: PPUSH
12799: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12803: LD_VAR 0 3
12807: PPUSH
12808: LD_INT 1
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12818: LD_VAR 0 2
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: CALL_OW 52
// end else
12832: GO 12849
// PlaceUnitArea ( un , start_north , false ) ;
12834: LD_VAR 0 2
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_INT 0
12844: PPUSH
12845: CALL_OW 49
// end ;
12849: GO 12606
12851: POP
12852: POP
// CenterNowOnUnits ( un ) ;
12853: LD_VAR 0 2
12857: PPUSH
12858: CALL_OW 87
// end ;
12862: PPOPN 3
12864: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
12865: LD_INT 21
12867: PPUSH
12868: LD_INT 22
12870: PUSH
12871: LD_OWVAR 2
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 70
12884: IFFALSE 13205
12886: GO 12888
12888: DISABLE
12889: LD_INT 0
12891: PPUSH
12892: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
12893: LD_ADDR_VAR 0 2
12897: PUSH
12898: LD_INT 22
12900: PUSH
12901: LD_OWVAR 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: LD_INT 25
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 25
12935: PUSH
12936: LD_INT 3
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 4
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: PUSH
12969: LD_EXP 10
12973: DIFF
12974: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
12975: LD_ADDR_VAR 0 1
12979: PUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: LD_INT 112
12987: PPUSH
12988: LD_INT 67
12990: PPUSH
12991: CALL_OW 73
12995: ST_TO_ADDR
// if GetSide ( un ) = 7 then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 255
13005: PUSH
13006: LD_INT 7
13008: EQUAL
13009: IFFALSE 13052
// if GetSex ( un ) = sex_male then
13011: LD_VAR 0 1
13015: PPUSH
13016: CALL_OW 258
13020: PUSH
13021: LD_INT 1
13023: EQUAL
13024: IFFALSE 13040
// Say ( un , VD-find-al ) else
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_STRING VD-find-al
13033: PPUSH
13034: CALL_OW 88
13038: GO 13052
// Say ( un , VD-find-al-f ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_STRING VD-find-al-f
13047: PPUSH
13048: CALL_OW 88
// if GetSide ( un ) = 2 then
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 255
13061: PUSH
13062: LD_INT 2
13064: EQUAL
13065: IFFALSE 13108
// if GetSex ( un ) = sex_male then
13067: LD_VAR 0 1
13071: PPUSH
13072: CALL_OW 258
13076: PUSH
13077: LD_INT 1
13079: EQUAL
13080: IFFALSE 13096
// Say ( un , VD-find-ar ) else
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_STRING VD-find-ar
13089: PPUSH
13090: CALL_OW 88
13094: GO 13108
// Say ( un , VD-find-ar-f ) ;
13096: LD_VAR 0 1
13100: PPUSH
13101: LD_STRING VD-find-ar-f
13103: PPUSH
13104: CALL_OW 88
// if GetSide ( un ) = 1 then
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 255
13117: PUSH
13118: LD_INT 1
13120: EQUAL
13121: IFFALSE 13188
// begin if GetSex ( un ) = sex_male then
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 258
13132: PUSH
13133: LD_INT 1
13135: EQUAL
13136: IFFALSE 13164
// begin Say ( un , VD-find-us ) ;
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_STRING VD-find-us
13145: PPUSH
13146: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13150: LD_VAR 0 1
13154: PPUSH
13155: LD_STRING VD-find-us2
13157: PPUSH
13158: CALL_OW 88
// end else
13162: GO 13188
// begin Say ( un , VD-find-us-f ) ;
13164: LD_VAR 0 1
13168: PPUSH
13169: LD_STRING VD-find-us-f
13171: PPUSH
13172: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13176: LD_VAR 0 1
13180: PPUSH
13181: LD_STRING VD-find-us2-f
13183: PPUSH
13184: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13188: LD_INT 10
13190: PPUSH
13191: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13195: LD_INT 112
13197: PPUSH
13198: LD_INT 67
13200: PPUSH
13201: CALL_OW 86
// end ;
13205: PPOPN 2
13207: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13208: LD_EXP 7
13212: IFFALSE 13714
13214: GO 13216
13216: DISABLE
13217: LD_INT 0
13219: PPUSH
// begin if your_side = 1 then
13220: LD_OWVAR 2
13224: PUSH
13225: LD_INT 1
13227: EQUAL
13228: IFFALSE 13409
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13230: LD_ADDR_VAR 0 1
13234: PUSH
13235: LD_INT 22
13237: PUSH
13238: LD_INT 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 4
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 69
13263: PUSH
13264: LD_EXP 19
13268: DIFF
13269: ST_TO_ADDR
// if not speaker then
13270: LD_VAR 0 1
13274: NOT
13275: IFFALSE 13279
// exit ;
13277: GO 13714
// if GetSex ( speaker [ 1 ] ) = sex_male then
13279: LD_VAR 0 1
13283: PUSH
13284: LD_INT 1
13286: ARRAY
13287: PPUSH
13288: CALL_OW 258
13292: PUSH
13293: LD_INT 1
13295: EQUAL
13296: IFFALSE 13316
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13298: LD_VAR 0 1
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: LD_STRING VD-us-sci-art-1
13309: PPUSH
13310: CALL_OW 88
13314: GO 13332
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13316: LD_VAR 0 1
13320: PUSH
13321: LD_INT 1
13323: ARRAY
13324: PPUSH
13325: LD_STRING VD-us-fsci-art-1
13327: PPUSH
13328: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13332: LD_EXP 19
13336: PPUSH
13337: LD_STRING VDc-art1
13339: PPUSH
13340: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13344: LD_VAR 0 1
13348: PUSH
13349: LD_INT 1
13351: ARRAY
13352: PPUSH
13353: CALL_OW 258
13357: PUSH
13358: LD_INT 1
13360: EQUAL
13361: IFFALSE 13381
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13363: LD_VAR 0 1
13367: PUSH
13368: LD_INT 1
13370: ARRAY
13371: PPUSH
13372: LD_STRING VD-us-sci-art-2
13374: PPUSH
13375: CALL_OW 88
13379: GO 13397
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13381: LD_VAR 0 1
13385: PUSH
13386: LD_INT 1
13388: ARRAY
13389: PPUSH
13390: LD_STRING VD-us-fsci-art-2
13392: PPUSH
13393: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13397: LD_EXP 19
13401: PPUSH
13402: LD_STRING VDc-art2
13404: PPUSH
13405: CALL_OW 88
// end ; if your_side = 2 then
13409: LD_OWVAR 2
13413: PUSH
13414: LD_INT 2
13416: EQUAL
13417: IFFALSE 13521
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: LD_INT 22
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 25
13436: PUSH
13437: LD_INT 4
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: PUSH
13453: LD_EXP 51
13457: DIFF
13458: ST_TO_ADDR
// if not speaker then
13459: LD_VAR 0 1
13463: NOT
13464: IFFALSE 13468
// exit ;
13466: GO 13714
// if GetSex ( speaker [ 1 ] ) = sex_male then
13468: LD_VAR 0 1
13472: PUSH
13473: LD_INT 1
13475: ARRAY
13476: PPUSH
13477: CALL_OW 258
13481: PUSH
13482: LD_INT 1
13484: EQUAL
13485: IFFALSE 13505
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13487: LD_VAR 0 1
13491: PUSH
13492: LD_INT 1
13494: ARRAY
13495: PPUSH
13496: LD_STRING VD-ar-sci-art-1
13498: PPUSH
13499: CALL_OW 88
13503: GO 13521
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13505: LD_VAR 0 1
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_STRING VD-ar-fsci-art-1
13516: PPUSH
13517: CALL_OW 88
// end ; if your_side = 7 then
13521: LD_OWVAR 2
13525: PUSH
13526: LD_INT 7
13528: EQUAL
13529: IFFALSE 13714
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_INT 7
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 25
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: PUSH
13565: LD_EXP 37
13569: DIFF
13570: ST_TO_ADDR
// if speaker then
13571: LD_VAR 0 1
13575: IFFALSE 13707
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13577: LD_VAR 0 1
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: CALL_OW 258
13590: PUSH
13591: LD_INT 1
13593: EQUAL
13594: IFFALSE 13614
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13596: LD_VAR 0 1
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: LD_STRING VD-al-sci-art-1
13607: PPUSH
13608: CALL_OW 88
13612: GO 13630
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13614: LD_VAR 0 1
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: LD_STRING VD-al-fsci-art-1
13625: PPUSH
13626: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13630: LD_EXP 37
13634: PPUSH
13635: LD_STRING VPd-art-1
13637: PPUSH
13638: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13642: LD_VAR 0 1
13646: PUSH
13647: LD_INT 1
13649: ARRAY
13650: PPUSH
13651: CALL_OW 258
13655: PUSH
13656: LD_INT 1
13658: EQUAL
13659: IFFALSE 13679
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13661: LD_VAR 0 1
13665: PUSH
13666: LD_INT 1
13668: ARRAY
13669: PPUSH
13670: LD_STRING VD-al-sci-art-2
13672: PPUSH
13673: CALL_OW 88
13677: GO 13695
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: LD_STRING VD-al-fsci-art-2
13690: PPUSH
13691: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13695: LD_EXP 37
13699: PPUSH
13700: LD_STRING VPd-art-2
13702: PPUSH
13703: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13707: LD_STRING CVulc7out
13709: PPUSH
13710: CALL_OW 337
// end ; end ;
13714: PPOPN 1
13716: END
// every 0 0$01 trigger See ( 8 , NearestUnitToSide ( FilterAllUnits ( [ f_side , your_side ] ) , 8 ) ) do var speaker ;
13717: LD_INT 8
13719: PPUSH
13720: LD_INT 22
13722: PUSH
13723: LD_OWVAR 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 69
13736: PPUSH
13737: LD_INT 8
13739: PPUSH
13740: CALL 2145 0 2
13744: PPUSH
13745: CALL_OW 292
13749: IFFALSE 13892
13751: GO 13753
13753: DISABLE
13754: LD_INT 0
13756: PPUSH
// begin if your_side = 1 then
13757: LD_OWVAR 2
13761: PUSH
13762: LD_INT 1
13764: EQUAL
13765: IFFALSE 13848
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13767: LD_ADDR_VAR 0 1
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 1
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: PUSH
13787: LD_EXP 19
13791: DIFF
13792: ST_TO_ADDR
// if speaker then
13793: LD_VAR 0 1
13797: IFFALSE 13848
// if GetSex ( speaker [ 1 ] ) then
13799: LD_VAR 0 1
13803: PUSH
13804: LD_INT 1
13806: ARRAY
13807: PPUSH
13808: CALL_OW 258
13812: IFFALSE 13832
// Say ( speaker [ 1 ] , VD-legion-us ) else
13814: LD_VAR 0 1
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: LD_STRING VD-legion-us
13825: PPUSH
13826: CALL_OW 88
13830: GO 13848
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13832: LD_VAR 0 1
13836: PUSH
13837: LD_INT 1
13839: ARRAY
13840: PPUSH
13841: LD_STRING VD-legion-us-f
13843: PPUSH
13844: CALL_OW 88
// end ; if your_side = 2 then
13848: LD_OWVAR 2
13852: PUSH
13853: LD_INT 2
13855: EQUAL
13856: IFFALSE 13870
// Say ( ar_commander , VD-legion-ar ) ;
13858: LD_EXP 51
13862: PPUSH
13863: LD_STRING VD-legion-ar
13865: PPUSH
13866: CALL_OW 88
// if your_side = 7 then
13870: LD_OWVAR 2
13874: PUSH
13875: LD_INT 7
13877: EQUAL
13878: IFFALSE 13892
// Say ( al_commander , VD-legion-al ) ;
13880: LD_EXP 37
13884: PPUSH
13885: LD_STRING VD-legion-al
13887: PPUSH
13888: CALL_OW 88
// end ;
13892: PPOPN 1
13894: END
// every 0 0$01 trigger mine_vulc do
13895: LD_EXP 12
13899: IFFALSE 13916
13901: GO 13903
13903: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
13904: LD_EXP 10
13908: PPUSH
13909: LD_STRING VD-vulc-mines
13911: PPUSH
13912: CALL_OW 88
// end ;
13916: END
// every 0 0$03 trigger difficulty > 1 do var mines , p , i ;
13917: LD_OWVAR 67
13921: PUSH
13922: LD_INT 1
13924: GREATER
13925: IFFALSE 14044
13927: GO 13929
13929: DISABLE
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
13934: PPUSH
// begin mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
13935: LD_ADDR_VAR 0 1
13939: PUSH
13940: LD_INT 123
13942: PUSH
13943: LD_INT 95
13945: PUSH
13946: LD_INT 119
13948: PUSH
13949: LD_INT 89
13951: PUSH
13952: LD_INT 115
13954: PUSH
13955: LD_INT 81
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: ST_TO_ADDR
// p := 1 ;
13966: LD_ADDR_VAR 0 2
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// for i = 1 to 3 do
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: DOUBLE
13980: LD_INT 1
13982: DEC
13983: ST_TO_ADDR
13984: LD_INT 3
13986: PUSH
13987: FOR_TO
13988: IFFALSE 14042
// begin PlaceMine ( mines [ p ] , mines [ p + 1 ] , 8 , 0 ) ;
13990: LD_VAR 0 1
13994: PUSH
13995: LD_VAR 0 2
13999: ARRAY
14000: PPUSH
14001: LD_VAR 0 1
14005: PUSH
14006: LD_VAR 0 2
14010: PUSH
14011: LD_INT 1
14013: PLUS
14014: ARRAY
14015: PPUSH
14016: LD_INT 8
14018: PPUSH
14019: LD_INT 0
14021: PPUSH
14022: CALL_OW 454
// p := p + 2 ;
14026: LD_ADDR_VAR 0 2
14030: PUSH
14031: LD_VAR 0 2
14035: PUSH
14036: LD_INT 2
14038: PLUS
14039: ST_TO_ADDR
// end ;
14040: GO 13987
14042: POP
14043: POP
// end ;
14044: PPOPN 3
14046: END
// every 0 0$01 trigger difficulty > 1 and FilterUnitsInArea ( vulc_mines , [ f_side , your_side ] ) do var p , i , mines ;
14047: LD_OWVAR 67
14051: PUSH
14052: LD_INT 1
14054: GREATER
14055: PUSH
14056: LD_INT 22
14058: PPUSH
14059: LD_INT 22
14061: PUSH
14062: LD_OWVAR 2
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PPUSH
14071: CALL_OW 70
14075: AND
14076: IFFALSE 14280
14078: GO 14080
14080: DISABLE
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
14085: PPUSH
// begin enable ;
14086: ENABLE
// p := 1 ;
14087: LD_ADDR_VAR 0 1
14091: PUSH
14092: LD_INT 1
14094: ST_TO_ADDR
// mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
14095: LD_ADDR_VAR 0 3
14099: PUSH
14100: LD_INT 123
14102: PUSH
14103: LD_INT 95
14105: PUSH
14106: LD_INT 119
14108: PUSH
14109: LD_INT 89
14111: PUSH
14112: LD_INT 115
14114: PUSH
14115: LD_INT 81
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: ST_TO_ADDR
// for i = 1 to 3 do
14126: LD_ADDR_VAR 0 2
14130: PUSH
14131: DOUBLE
14132: LD_INT 1
14134: DEC
14135: ST_TO_ADDR
14136: LD_INT 3
14138: PUSH
14139: FOR_TO
14140: IFFALSE 14278
// begin if HexInfo ( mines [ p ] , mines [ p + 1 ] ) > 0 then
14142: LD_VAR 0 3
14146: PUSH
14147: LD_VAR 0 1
14151: ARRAY
14152: PPUSH
14153: LD_VAR 0 3
14157: PUSH
14158: LD_VAR 0 1
14162: PUSH
14163: LD_INT 1
14165: PLUS
14166: ARRAY
14167: PPUSH
14168: CALL_OW 428
14172: PUSH
14173: LD_INT 0
14175: GREATER
14176: IFFALSE 14262
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) = your_side then
14178: LD_VAR 0 3
14182: PUSH
14183: LD_VAR 0 1
14187: ARRAY
14188: PPUSH
14189: LD_VAR 0 3
14193: PUSH
14194: LD_VAR 0 1
14198: PUSH
14199: LD_INT 1
14201: PLUS
14202: ARRAY
14203: PPUSH
14204: CALL_OW 428
14208: PPUSH
14209: CALL_OW 255
14213: PUSH
14214: LD_OWVAR 2
14218: EQUAL
14219: IFFALSE 14262
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 8 ) ;
14221: LD_VAR 0 3
14225: PUSH
14226: LD_VAR 0 1
14230: ARRAY
14231: PPUSH
14232: LD_VAR 0 3
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_INT 1
14244: PLUS
14245: ARRAY
14246: PPUSH
14247: LD_INT 8
14249: PPUSH
14250: CALL_OW 456
// mine_vulc := true ;
14254: LD_ADDR_EXP 12
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// end ; p := p + 2 ;
14262: LD_ADDR_VAR 0 1
14266: PUSH
14267: LD_VAR 0 1
14271: PUSH
14272: LD_INT 2
14274: PLUS
14275: ST_TO_ADDR
// end ;
14276: GO 14139
14278: POP
14279: POP
// end ;
14280: PPOPN 3
14282: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14283: LD_INT 22
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PPUSH
14293: CALL_OW 69
14297: PUSH
14298: LD_INT 0
14300: EQUAL
14301: PUSH
14302: LD_OWVAR 2
14306: PUSH
14307: LD_INT 2
14309: NONEQUAL
14310: AND
14311: IFFALSE 14320
14313: GO 14315
14315: DISABLE
// Win ;
14316: CALL 14377 0 0
14320: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14321: LD_INT 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_INT 8
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 22
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: PUSH
14354: LD_INT 0
14356: EQUAL
14357: PUSH
14358: LD_OWVAR 2
14362: PUSH
14363: LD_INT 2
14365: EQUAL
14366: AND
14367: IFFALSE 14376
14369: GO 14371
14371: DISABLE
// Win ;
14372: CALL 14377 0 0
14376: END
// function Win ; var points ; begin
14377: LD_INT 0
14379: PPUSH
14380: PPUSH
// case Query ( VulcWin ) of 1 :
14381: LD_STRING VulcWin
14383: PPUSH
14384: CALL_OW 97
14388: PUSH
14389: LD_INT 1
14391: DOUBLE
14392: EQUAL
14393: IFTRUE 14397
14395: GO 14400
14397: POP
// ; end ;
14398: GO 14401
14400: POP
// if medal_enabled then
14401: LD_EXP 13
14405: IFFALSE 14419
// AddMedal ( vulc_1 , 1 ) else
14407: LD_STRING vulc_1
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: CALL_OW 101
14417: GO 14430
// AddMedal ( vulc_1 , - 1 ) ;
14419: LD_STRING vulc_1
14421: PPUSH
14422: LD_INT 1
14424: NEG
14425: PPUSH
14426: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
14430: LD_INT 22
14432: PUSH
14433: LD_INT 8
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PPUSH
14440: CALL_OW 69
14444: PUSH
14445: LD_INT 0
14447: EQUAL
14448: IFFALSE 14462
// AddMedal ( vulc_2 , 1 ) else
14450: LD_STRING vulc_2
14452: PPUSH
14453: LD_INT 1
14455: PPUSH
14456: CALL_OW 101
14460: GO 14473
// AddMedal ( vulc_2 , - 1 ) ;
14462: LD_STRING vulc_2
14464: PPUSH
14465: LD_INT 1
14467: NEG
14468: PPUSH
14469: CALL_OW 101
// points := CalculateCommanderPoints ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: CALL 2266 0 0
14482: ST_TO_ADDR
// if points >= 2000 then
14483: LD_VAR 0 2
14487: PUSH
14488: LD_INT 2000
14490: GREATEREQUAL
14491: IFFALSE 14505
// AddMedal ( vulc_3 , 2 ) else
14493: LD_STRING vulc_3
14495: PPUSH
14496: LD_INT 2
14498: PPUSH
14499: CALL_OW 101
14503: GO 14538
// if points >= 0 then
14505: LD_VAR 0 2
14509: PUSH
14510: LD_INT 0
14512: GREATEREQUAL
14513: IFFALSE 14527
// AddMedal ( vulc_3 , 1 ) else
14515: LD_STRING vulc_3
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 101
14525: GO 14538
// AddMedal ( vulc_3 , - 1 ) ;
14527: LD_STRING vulc_3
14529: PPUSH
14530: LD_INT 1
14532: NEG
14533: PPUSH
14534: CALL_OW 101
// GiveMedals ( MAIN ) ;
14538: LD_STRING MAIN
14540: PPUSH
14541: CALL_OW 102
// YouWin ;
14545: CALL_OW 103
// end ; end_of_file
14549: LD_VAR 0 1
14553: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) > 0 do var i , un ;
14554: LD_INT 13
14556: PPUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 70
14571: PUSH
14572: LD_INT 0
14574: GREATER
14575: IFFALSE 14642
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
// begin enable ;
14584: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14585: LD_ADDR_VAR 0 1
14589: PUSH
14590: LD_INT 13
14592: PPUSH
14593: LD_INT 21
14595: PUSH
14596: LD_INT 1
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 70
14607: PUSH
14608: FOR_IN
14609: IFFALSE 14640
// if GetLives ( i ) > 4 then
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 256
14620: PUSH
14621: LD_INT 4
14623: GREATER
14624: IFFALSE 14638
// SetLives ( i , 4 ) ;
14626: LD_VAR 0 1
14630: PPUSH
14631: LD_INT 4
14633: PPUSH
14634: CALL_OW 234
14638: GO 14608
14640: POP
14641: POP
// end ;
14642: PPOPN 2
14644: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 255
14654: PUSH
14655: LD_OWVAR 2
14659: EQUAL
14660: IFFALSE 14670
// player_res_art := true ;
14662: LD_ADDR_EXP 6
14666: PUSH
14667: LD_INT 1
14669: ST_TO_ADDR
// end ;
14670: PPOPN 1
14672: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var x , y , lab ;
14673: LD_INT 22
14675: PUSH
14676: LD_OWVAR 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 7
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 8
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 11
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: PUSH
14733: LD_EXP 6
14737: AND
14738: IFFALSE 15093
14740: GO 14742
14742: DISABLE
14743: LD_INT 0
14745: PPUSH
14746: PPUSH
14747: PPUSH
// begin enable ;
14748: ENABLE
// x := FindArtifact ( 1 ) [ 1 ] ;
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 469
14761: PUSH
14762: LD_INT 1
14764: ARRAY
14765: ST_TO_ADDR
// y := FindArtifact ( 1 ) [ 2 ] ;
14766: LD_ADDR_VAR 0 2
14770: PUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 469
14778: PUSH
14779: LD_INT 2
14781: ARRAY
14782: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , x , y ) ;
14783: LD_ADDR_VAR 0 3
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_OWVAR 2
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: LD_INT 30
14805: PUSH
14806: LD_INT 8
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 30
14815: PUSH
14816: LD_INT 7
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 30
14825: PUSH
14826: LD_INT 11
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PPUSH
14843: CALL_OW 69
14847: PPUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_VAR 0 2
14857: PPUSH
14858: CALL_OW 73
14862: ST_TO_ADDR
// if player_artifact_ready = false then
14863: LD_EXP 7
14867: PUSH
14868: LD_INT 0
14870: EQUAL
14871: IFFALSE 14977
// if GetDistUnitXY ( lab , x , y ) < 6 then
14873: LD_VAR 0 3
14877: PPUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: CALL_OW 297
14892: PUSH
14893: LD_INT 6
14895: LESS
14896: IFFALSE 14957
// begin if BuildingStatus ( lab ) = bs_idle then
14898: LD_VAR 0 3
14902: PPUSH
14903: CALL_OW 461
14907: PUSH
14908: LD_INT 2
14910: EQUAL
14911: IFFALSE 14935
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
14913: LD_OWVAR 2
14917: PPUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_INT 2
14923: PPUSH
14924: LD_VAR 0 3
14928: PPUSH
14929: CALL_OW 468
14933: GO 14955
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14935: LD_OWVAR 2
14939: PPUSH
14940: LD_INT 1
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: CALL_OW 468
// end else
14955: GO 14977
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14957: LD_OWVAR 2
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: LD_INT 1
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: CALL_OW 468
// if player_artifact_ready then
14977: LD_EXP 7
14981: IFFALSE 15093
// if GetDistUnitXY ( lab , x , y ) < 6 then
14983: LD_VAR 0 3
14987: PPUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: CALL_OW 297
15002: PUSH
15003: LD_INT 6
15005: LESS
15006: IFFALSE 15071
// begin if BuildingStatus ( lab ) = bs_idle then
15008: LD_VAR 0 3
15012: PPUSH
15013: CALL_OW 461
15017: PUSH
15018: LD_INT 2
15020: EQUAL
15021: IFFALSE 15047
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15023: LD_OWVAR 2
15027: PPUSH
15028: LD_EXP 8
15032: PPUSH
15033: LD_INT 4
15035: PPUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: CALL_OW 468
15045: GO 15069
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15047: LD_OWVAR 2
15051: PPUSH
15052: LD_EXP 8
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: LD_VAR 0 3
15064: PPUSH
15065: CALL_OW 468
// end else
15069: GO 15093
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15071: LD_OWVAR 2
15075: PPUSH
15076: LD_EXP 8
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: CALL_OW 468
// end ;
15093: PPOPN 3
15095: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var x , y , i , lab , side ;
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
// begin x := FindArtifact ( 1 ) [ 1 ] ;
15103: LD_ADDR_VAR 0 5
15107: PUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 469
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: ST_TO_ADDR
// y := FindArtifact ( 1 ) [ 2 ] ;
15120: LD_ADDR_VAR 0 6
15124: PUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 469
15132: PUSH
15133: LD_INT 2
15135: ARRAY
15136: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , x , y ) ;
15137: LD_ADDR_VAR 0 8
15141: PUSH
15142: LD_INT 22
15144: PUSH
15145: LD_OWVAR 2
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: LD_INT 30
15159: PUSH
15160: LD_INT 8
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 30
15169: PUSH
15170: LD_INT 11
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PPUSH
15191: LD_VAR 0 5
15195: PPUSH
15196: LD_VAR 0 6
15200: PPUSH
15201: CALL_OW 73
15205: ST_TO_ADDR
// if icon = art_exp_left then
15206: LD_VAR 0 2
15210: PUSH
15211: LD_INT 1
15213: EQUAL
15214: IFFALSE 15253
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15216: LD_VAR 0 8
15220: PPUSH
15221: LD_EXP 9
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 486
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15233: LD_OWVAR 2
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_INT 0
15243: PPUSH
15244: LD_VAR 0 8
15248: PPUSH
15249: CALL_OW 468
// end ; if icon = art_icon then
15253: LD_VAR 0 2
15257: PUSH
15258: LD_EXP 8
15262: EQUAL
15263: IFFALSE 15477
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PPUSH
15280: CALL_OW 69
15284: IN
15285: IFFALSE 15477
// begin side := GetSide ( cr1 ) ;
15287: LD_ADDR_VAR 0 9
15291: PUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: CALL_OW 255
15301: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15302: LD_INT 22
15304: PUSH
15305: LD_VAR 0 9
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 30
15316: PUSH
15317: LD_INT 28
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 69
15332: PUSH
15333: LD_INT 0
15335: GREATER
15336: IFFALSE 15477
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15338: LD_ADDR_VAR 0 7
15342: PUSH
15343: LD_INT 22
15345: PUSH
15346: LD_VAR 0 9
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 2
15357: PUSH
15358: LD_INT 30
15360: PUSH
15361: LD_INT 26
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 30
15370: PUSH
15371: LD_INT 27
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 30
15380: PUSH
15381: LD_INT 28
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: PUSH
15403: FOR_IN
15404: IFFALSE 15420
// SetLives ( i , 1 ) ;
15406: LD_VAR 0 7
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 234
15418: GO 15403
15420: POP
15421: POP
// player_res_art := false ;
15422: LD_ADDR_EXP 6
15426: PUSH
15427: LD_INT 0
15429: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15430: LD_OWVAR 2
15434: PPUSH
15435: LD_EXP 8
15439: PPUSH
15440: LD_INT 1
15442: PPUSH
15443: LD_VAR 0 8
15447: PPUSH
15448: CALL_OW 468
// Wait ( time_to_reuse ) ;
15452: LD_EXP 11
15456: PPUSH
15457: CALL_OW 67
// player_res_art := true ;
15461: LD_ADDR_EXP 6
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// medal_enabled := true ;
15469: LD_ADDR_EXP 13
15473: PUSH
15474: LD_INT 1
15476: ST_TO_ADDR
// end ; end ; end ; end ;
15477: PPOPN 9
15479: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL_OW 255
15489: PUSH
15490: LD_OWVAR 2
15494: EQUAL
15495: IFFALSE 15532
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15497: LD_OWVAR 2
15501: PPUSH
15502: LD_INT 1
15504: PPUSH
15505: LD_INT 0
15507: PPUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 468
// player_artifact_ready := true ;
15517: LD_ADDR_EXP 7
15521: PUSH
15522: LD_INT 1
15524: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15525: LD_STRING ArtVulcano
15527: PPUSH
15528: CALL_OW 339
// end ; end ;
15532: PPOPN 1
15534: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15535: LD_OWVAR 2
15539: PPUSH
15540: LD_INT 1
15542: PPUSH
15543: LD_INT 2
15545: PPUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 468
// end ; end_of_file
15555: PPOPN 2
15557: END
// every 0 0$01 do
15558: GO 15560
15560: DISABLE
// begin enable ;
15561: ENABLE
// Display_Strings := [ #tick , tick ] ;
15562: LD_ADDR_OWVAR 47
15566: PUSH
15567: LD_STRING #tick
15569: PUSH
15570: LD_OWVAR 1
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
// end ; end_of_file
15579: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15580: LD_INT 0
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
15586: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15587: LD_ADDR_EXP 39
15591: PUSH
15592: LD_INT 7
15594: PUSH
15595: LD_INT 6
15597: PUSH
15598: LD_INT 5
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: LD_OWVAR 67
15610: ARRAY
15611: ST_TO_ADDR
// al_force := [ ] ;
15612: LD_ADDR_EXP 38
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// RemoveAlliance ;
15619: CALL 15997 0 0
// ResetFog ;
15623: CALL_OW 335
// your_side := 7 ;
15627: LD_ADDR_OWVAR 2
15631: PUSH
15632: LD_INT 7
15634: ST_TO_ADDR
// uc_side := 7 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 7
15642: ST_TO_ADDR
// hc_gallery :=  ;
15643: LD_ADDR_OWVAR 33
15647: PUSH
15648: LD_STRING 
15650: ST_TO_ADDR
// hc_name :=  ;
15651: LD_ADDR_OWVAR 26
15655: PUSH
15656: LD_STRING 
15658: ST_TO_ADDR
// hc_importance := 0 ;
15659: LD_ADDR_OWVAR 32
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// for i = 1 to 17 do
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: DOUBLE
15673: LD_INT 1
15675: DEC
15676: ST_TO_ADDR
15677: LD_INT 17
15679: PUSH
15680: FOR_TO
15681: IFFALSE 15761
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15683: LD_ADDR_OWVAR 21
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: LD_INT 3
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 1
15700: PPUSH
15701: LD_INT 2
15703: PPUSH
15704: CALL_OW 12
15708: ARRAY
15709: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15710: LD_INT 0
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: LD_INT 4
15718: PPUSH
15719: CALL_OW 12
15723: PPUSH
15724: LD_EXP 39
15728: PPUSH
15729: CALL_OW 380
// un := CreateHuman ;
15733: LD_ADDR_VAR 0 4
15737: PUSH
15738: CALL_OW 44
15742: ST_TO_ADDR
// al_force := al_force ^ un ;
15743: LD_ADDR_EXP 38
15747: PUSH
15748: LD_EXP 38
15752: PUSH
15753: LD_VAR 0 4
15757: ADD
15758: ST_TO_ADDR
// end ;
15759: GO 15680
15761: POP
15762: POP
// hc_importance := 100 ;
15763: LD_ADDR_OWVAR 32
15767: PUSH
15768: LD_INT 100
15770: ST_TO_ADDR
// uc_nation := 1 ;
15771: LD_ADDR_OWVAR 21
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15779: LD_INT 1
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: LD_EXP 39
15789: PPUSH
15790: CALL_OW 380
// al_commander := CreateHuman ;
15794: LD_ADDR_EXP 37
15798: PUSH
15799: CALL_OW 44
15803: ST_TO_ADDR
// player_commander := al_commander ;
15804: LD_ADDR_EXP 10
15808: PUSH
15809: LD_EXP 37
15813: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15814: LD_ADDR_VAR 0 5
15818: PUSH
15819: LD_STRING text
15821: PPUSH
15822: LD_INT 9
15824: PUSH
15825: LD_INT 9
15827: PUSH
15828: LD_INT 8
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: PUSH
15836: LD_OWVAR 67
15840: ARRAY
15841: PPUSH
15842: LD_INT 9
15844: PUSH
15845: LD_INT 9
15847: PUSH
15848: LD_INT 8
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: PUSH
15856: LD_OWVAR 67
15860: ARRAY
15861: PPUSH
15862: LD_INT -5
15864: PUSH
15865: LD_EXP 37
15869: PUSH
15870: LD_INT -3
15872: PUSH
15873: LD_INT -2
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: PUSH
15882: LD_EXP 38
15886: ADD
15887: PPUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 3
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 4
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 9
15916: PUSH
15917: LD_INT 5
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 42
15932: ST_TO_ADDR
// team := team ^ al_commander ;
15933: LD_ADDR_VAR 0 5
15937: PUSH
15938: LD_VAR 0 5
15942: PUSH
15943: LD_EXP 37
15947: ADD
15948: ST_TO_ADDR
// for i = 1 to team do
15949: LD_ADDR_VAR 0 2
15953: PUSH
15954: DOUBLE
15955: LD_INT 1
15957: DEC
15958: ST_TO_ADDR
15959: LD_VAR 0 5
15963: PUSH
15964: FOR_TO
15965: IFFALSE 15990
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
15967: LD_VAR 0 5
15971: PUSH
15972: LD_VAR 0 2
15976: ARRAY
15977: PPUSH
15978: LD_INT 15
15980: PPUSH
15981: LD_INT 0
15983: PPUSH
15984: CALL_OW 49
15988: GO 15964
15990: POP
15991: POP
// end ;
15992: LD_VAR 0 1
15996: RET
// export function RemoveAlliance ; var i ; begin
15997: LD_INT 0
15999: PPUSH
16000: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16001: LD_INT 22
16003: PUSH
16004: LD_INT 7
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 1
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PPUSH
16025: CALL_OW 69
16029: PUSH
16030: LD_INT 1
16032: ARRAY
16033: PPUSH
16034: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16038: LD_ADDR_VAR 0 2
16042: PUSH
16043: LD_INT 22
16045: PUSH
16046: LD_INT 7
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL_OW 69
16057: PUSH
16058: FOR_IN
16059: IFFALSE 16072
// RemoveUnit ( i ) ;
16061: LD_VAR 0 2
16065: PPUSH
16066: CALL_OW 64
16070: GO 16058
16072: POP
16073: POP
// end ;
16074: LD_VAR 0 1
16078: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16079: LD_INT 0
16081: PPUSH
16082: PPUSH
16083: PPUSH
16084: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16085: LD_INT 31
16087: PPUSH
16088: LD_INT 7
16090: PPUSH
16091: LD_INT 2
16093: PPUSH
16094: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16098: LD_INT 32
16100: PPUSH
16101: LD_INT 7
16103: PPUSH
16104: LD_INT 2
16106: PPUSH
16107: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16111: LD_INT 59
16113: PPUSH
16114: LD_INT 7
16116: PPUSH
16117: LD_INT 2
16119: PPUSH
16120: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16124: LD_ADDR_EXP 39
16128: PUSH
16129: LD_INT 5
16131: PUSH
16132: LD_INT 6
16134: PUSH
16135: LD_INT 7
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: PUSH
16143: LD_OWVAR 67
16147: ARRAY
16148: ST_TO_ADDR
// al_force := [ ] ;
16149: LD_ADDR_EXP 38
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// al_vehs := [ ] ;
16156: LD_ADDR_EXP 44
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// uc_side := 7 ;
16163: LD_ADDR_OWVAR 20
16167: PUSH
16168: LD_INT 7
16170: ST_TO_ADDR
// uc_nation := 1 ;
16171: LD_ADDR_OWVAR 21
16175: PUSH
16176: LD_INT 1
16178: ST_TO_ADDR
// bc_type := b_oil_mine ;
16179: LD_ADDR_OWVAR 42
16183: PUSH
16184: LD_INT 29
16186: ST_TO_ADDR
// b := CreateBuilding ;
16187: LD_ADDR_VAR 0 4
16191: PUSH
16192: CALL_OW 46
16196: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
16197: LD_VAR 0 4
16201: PPUSH
16202: LD_INT 61
16204: PPUSH
16205: LD_INT 7
16207: PPUSH
16208: LD_INT 0
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: CALL_OW 50
// bc_type := b_siberite_mine ;
16218: LD_ADDR_OWVAR 42
16222: PUSH
16223: LD_INT 30
16225: ST_TO_ADDR
// b := CreateBuilding ;
16226: LD_ADDR_VAR 0 4
16230: PUSH
16231: CALL_OW 46
16235: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
16236: LD_VAR 0 4
16240: PPUSH
16241: LD_INT 69
16243: PPUSH
16244: LD_INT 13
16246: PPUSH
16247: LD_INT 0
16249: PPUSH
16250: LD_INT 0
16252: PPUSH
16253: CALL_OW 50
// hc_gallery :=  ;
16257: LD_ADDR_OWVAR 33
16261: PUSH
16262: LD_STRING 
16264: ST_TO_ADDR
// hc_name :=  ;
16265: LD_ADDR_OWVAR 26
16269: PUSH
16270: LD_STRING 
16272: ST_TO_ADDR
// hc_importance := 0 ;
16273: LD_ADDR_OWVAR 32
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
16281: LD_ADDR_VAR 0 2
16285: PUSH
16286: LD_INT 22
16288: PUSH
16289: LD_INT 7
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 30
16298: PUSH
16299: LD_INT 32
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 69
16314: PUSH
16315: FOR_IN
16316: IFFALSE 16386
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16318: LD_ADDR_OWVAR 21
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 1
16335: PPUSH
16336: LD_INT 2
16338: PPUSH
16339: CALL_OW 12
16343: ARRAY
16344: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
16345: LD_INT 0
16347: PPUSH
16348: LD_INT 1
16350: PPUSH
16351: LD_EXP 39
16355: PPUSH
16356: CALL_OW 380
// un := CreateHuman ;
16360: LD_ADDR_VAR 0 3
16364: PUSH
16365: CALL_OW 44
16369: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_VAR 0 2
16379: PPUSH
16380: CALL_OW 52
// end ;
16384: GO 16315
16386: POP
16387: POP
// for i = 1 to 3 do
16388: LD_ADDR_VAR 0 2
16392: PUSH
16393: DOUBLE
16394: LD_INT 1
16396: DEC
16397: ST_TO_ADDR
16398: LD_INT 3
16400: PUSH
16401: FOR_TO
16402: IFFALSE 16470
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16404: LD_ADDR_OWVAR 21
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 3
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 1
16421: PPUSH
16422: LD_INT 2
16424: PPUSH
16425: CALL_OW 12
16429: ARRAY
16430: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
16431: LD_INT 0
16433: PPUSH
16434: LD_INT 4
16436: PPUSH
16437: LD_EXP 39
16441: PPUSH
16442: CALL_OW 380
// un := CreateHuman ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: CALL_OW 44
16455: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
16456: LD_VAR 0 3
16460: PPUSH
16461: LD_INT 164
16463: PPUSH
16464: CALL_OW 52
// end ;
16468: GO 16401
16470: POP
16471: POP
// for i = 1 to 6 do
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: DOUBLE
16478: LD_INT 1
16480: DEC
16481: ST_TO_ADDR
16482: LD_INT 6
16484: PUSH
16485: FOR_TO
16486: IFFALSE 16577
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16488: LD_ADDR_OWVAR 21
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_INT 2
16508: PPUSH
16509: CALL_OW 12
16513: ARRAY
16514: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16515: LD_INT 0
16517: PPUSH
16518: LD_INT 5
16520: PUSH
16521: LD_INT 9
16523: PUSH
16524: LD_INT 9
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: PPUSH
16535: LD_INT 3
16537: PPUSH
16538: CALL_OW 12
16542: ARRAY
16543: PPUSH
16544: LD_EXP 39
16548: PPUSH
16549: CALL_OW 380
// un := CreateHuman ;
16553: LD_ADDR_VAR 0 3
16557: PUSH
16558: CALL_OW 44
16562: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16563: LD_VAR 0 3
16567: PPUSH
16568: LD_INT 173
16570: PPUSH
16571: CALL_OW 52
// end ;
16575: GO 16485
16577: POP
16578: POP
// for i = 1 to 6 do
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: DOUBLE
16585: LD_INT 1
16587: DEC
16588: ST_TO_ADDR
16589: LD_INT 6
16591: PUSH
16592: FOR_TO
16593: IFFALSE 16691
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16595: LD_ADDR_OWVAR 21
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: LD_INT 3
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 1
16612: PPUSH
16613: LD_INT 2
16615: PPUSH
16616: CALL_OW 12
16620: ARRAY
16621: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16622: LD_INT 0
16624: PPUSH
16625: LD_INT 3
16627: PPUSH
16628: LD_EXP 39
16632: PPUSH
16633: CALL_OW 380
// un := CreateHuman ;
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: CALL_OW 44
16646: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16647: LD_VAR 0 3
16651: PPUSH
16652: LD_INT 22
16654: PUSH
16655: LD_INT 7
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 30
16664: PUSH
16665: LD_INT 3
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 52
// end ;
16689: GO 16592
16691: POP
16692: POP
// for i = 1 to 4 do
16693: LD_ADDR_VAR 0 2
16697: PUSH
16698: DOUBLE
16699: LD_INT 1
16701: DEC
16702: ST_TO_ADDR
16703: LD_INT 4
16705: PUSH
16706: FOR_TO
16707: IFFALSE 16775
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16709: LD_ADDR_OWVAR 21
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: LD_INT 3
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 1
16726: PPUSH
16727: LD_INT 2
16729: PPUSH
16730: CALL_OW 12
16734: ARRAY
16735: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16736: LD_INT 0
16738: PPUSH
16739: LD_INT 2
16741: PPUSH
16742: LD_EXP 39
16746: PPUSH
16747: CALL_OW 380
// un := CreateHuman ;
16751: LD_ADDR_VAR 0 3
16755: PUSH
16756: CALL_OW 44
16760: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16761: LD_VAR 0 3
16765: PPUSH
16766: LD_INT 162
16768: PPUSH
16769: CALL_OW 52
// end ;
16773: GO 16706
16775: POP
16776: POP
// uc_nation := 3 ;
16777: LD_ADDR_OWVAR 21
16781: PUSH
16782: LD_INT 3
16784: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16785: LD_ADDR_OWVAR 37
16789: PUSH
16790: LD_INT 21
16792: ST_TO_ADDR
// vc_engine := engine_siberite ;
16793: LD_ADDR_OWVAR 39
16797: PUSH
16798: LD_INT 3
16800: ST_TO_ADDR
// vc_control := control_computer ;
16801: LD_ADDR_OWVAR 38
16805: PUSH
16806: LD_INT 3
16808: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16809: LD_ADDR_OWVAR 40
16813: PUSH
16814: LD_INT 51
16816: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16817: CALL_OW 45
16821: PPUSH
16822: LD_INT 49
16824: PPUSH
16825: LD_INT 13
16827: PPUSH
16828: LD_INT 0
16830: PPUSH
16831: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
16835: LD_ADDR_EXP 46
16839: PUSH
16840: LD_INT 22
16842: PUSH
16843: LD_INT 7
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 30
16852: PUSH
16853: LD_INT 33
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: DOUBLE
16875: LD_INT 1
16877: DEC
16878: ST_TO_ADDR
16879: LD_INT 22
16881: PUSH
16882: LD_INT 7
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 30
16891: PUSH
16892: LD_INT 33
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 35
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: PUSH
16922: FOR_TO
16923: IFFALSE 16983
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
16925: LD_INT 22
16927: PUSH
16928: LD_INT 7
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 30
16937: PUSH
16938: LD_INT 33
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 35
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: PPUSH
16963: CALL_OW 69
16967: PUSH
16968: LD_VAR 0 2
16972: ARRAY
16973: PPUSH
16974: LD_INT 49
16976: PPUSH
16977: CALL_OW 208
16981: GO 16922
16983: POP
16984: POP
// end ;
16985: LD_VAR 0 1
16989: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$01 trigger your_side = 1 do var i , un , veh , cr ;
16990: LD_OWVAR 2
16994: PUSH
16995: LD_INT 1
16997: EQUAL
16998: IFFALSE 18166
17000: GO 17002
17002: DISABLE
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
17007: PPUSH
17008: PPUSH
// begin enable ;
17009: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17010: LD_ADDR_EXP 50
17014: PUSH
17015: LD_INT 22
17017: PUSH
17018: LD_INT 7
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 21
17027: PUSH
17028: LD_INT 3
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17044: LD_ADDR_EXP 48
17048: PUSH
17049: LD_INT 164
17051: PUSH
17052: LD_INT 197
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17059: LD_ADDR_EXP 47
17063: PUSH
17064: LD_INT 22
17066: PUSH
17067: LD_INT 7
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 30
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: PUSH
17093: LD_INT 1
17095: ARRAY
17096: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17097: LD_ADDR_EXP 49
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_INT 7
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 30
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PPUSH
17126: CALL_OW 69
17130: PUSH
17131: LD_INT 1
17133: ARRAY
17134: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
17135: LD_INT 22
17137: PUSH
17138: LD_INT 7
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 34
17147: PUSH
17148: LD_INT 51
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PPUSH
17159: CALL_OW 69
17163: IFFALSE 17203
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
17165: LD_ADDR_EXP 45
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_INT 7
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 34
17182: PUSH
17183: LD_INT 51
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PPUSH
17194: CALL_OW 69
17198: PUSH
17199: LD_INT 1
17201: ARRAY
17202: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
17203: LD_ADDR_EXP 41
17207: PUSH
17208: LD_INT 22
17210: PUSH
17211: LD_INT 7
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 25
17220: PUSH
17221: LD_INT 9
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
17237: LD_ADDR_EXP 40
17241: PUSH
17242: LD_INT 22
17244: PUSH
17245: LD_INT 7
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 25
17254: PUSH
17255: LD_INT 2
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
17271: LD_ADDR_EXP 42
17275: PUSH
17276: LD_INT 22
17278: PUSH
17279: LD_INT 7
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 25
17288: PUSH
17289: LD_INT 3
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
17305: LD_ADDR_EXP 43
17309: PUSH
17310: LD_INT 22
17312: PUSH
17313: LD_INT 7
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 25
17322: PUSH
17323: LD_INT 4
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PPUSH
17334: CALL_OW 69
17338: ST_TO_ADDR
// IntBazooka ( al_sold , FilterAllUnits ( [ f_enemy , 7 ] ) ) ;
17339: LD_EXP 41
17343: PPUSH
17344: LD_INT 81
17346: PUSH
17347: LD_INT 7
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PPUSH
17354: CALL_OW 69
17358: PPUSH
17359: CALL 1663 0 2
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
17363: LD_EXP 45
17367: PPUSH
17368: CALL_OW 314
17372: NOT
17373: PUSH
17374: LD_EXP 45
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: CALL_OW 289
17386: PUSH
17387: LD_INT 100
17389: LESS
17390: AND
17391: IFFALSE 17439
// begin cr := GetListOfCratesInArea ( us_crates ) ;
17393: LD_ADDR_VAR 0 4
17397: PUSH
17398: LD_INT 12
17400: PPUSH
17401: CALL_OW 435
17405: ST_TO_ADDR
// if cr then
17406: LD_VAR 0 4
17410: IFFALSE 17439
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
17412: LD_EXP 45
17416: PPUSH
17417: LD_VAR 0 4
17421: PUSH
17422: LD_INT 1
17424: ARRAY
17425: PPUSH
17426: LD_VAR 0 4
17430: PUSH
17431: LD_INT 2
17433: ARRAY
17434: PPUSH
17435: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
17439: LD_EXP 50
17443: PPUSH
17444: LD_INT 3
17446: PUSH
17447: LD_INT 24
17449: PUSH
17450: LD_INT 1000
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 72
17465: IFFALSE 17595
// begin if al_eng then
17467: LD_EXP 40
17471: IFFALSE 17593
// for i = 1 to al_eng do
17473: LD_ADDR_VAR 0 1
17477: PUSH
17478: DOUBLE
17479: LD_INT 1
17481: DEC
17482: ST_TO_ADDR
17483: LD_EXP 40
17487: PUSH
17488: FOR_TO
17489: IFFALSE 17591
// if IsInUnit ( al_eng [ i ] ) then
17491: LD_EXP 40
17495: PUSH
17496: LD_VAR 0 1
17500: ARRAY
17501: PPUSH
17502: CALL_OW 310
17506: IFFALSE 17525
// ComExitBuilding ( al_eng [ i ] ) else
17508: LD_EXP 40
17512: PUSH
17513: LD_VAR 0 1
17517: ARRAY
17518: PPUSH
17519: CALL_OW 122
17523: GO 17589
// if not HasTask ( al_eng [ i ] ) then
17525: LD_EXP 40
17529: PUSH
17530: LD_VAR 0 1
17534: ARRAY
17535: PPUSH
17536: CALL_OW 314
17540: NOT
17541: IFFALSE 17589
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17543: LD_EXP 40
17547: PUSH
17548: LD_VAR 0 1
17552: ARRAY
17553: PPUSH
17554: LD_EXP 50
17558: PPUSH
17559: LD_INT 3
17561: PUSH
17562: LD_INT 24
17564: PUSH
17565: LD_INT 1000
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 72
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 130
17589: GO 17488
17591: POP
17592: POP
// end else
17593: GO 17677
// if al_eng then
17595: LD_EXP 40
17599: IFFALSE 17677
// if not IsInUnit ( al_eng [ 1 ] ) then
17601: LD_EXP 40
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: CALL_OW 310
17614: NOT
17615: IFFALSE 17677
// for i = 1 to al_eng do
17617: LD_ADDR_VAR 0 1
17621: PUSH
17622: DOUBLE
17623: LD_INT 1
17625: DEC
17626: ST_TO_ADDR
17627: LD_EXP 40
17631: PUSH
17632: FOR_TO
17633: IFFALSE 17675
// if not IsInUnit ( al_eng [ i ] ) then
17635: LD_EXP 40
17639: PUSH
17640: LD_VAR 0 1
17644: ARRAY
17645: PPUSH
17646: CALL_OW 310
17650: NOT
17651: IFFALSE 17673
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17653: LD_EXP 40
17657: PUSH
17658: LD_VAR 0 1
17662: ARRAY
17663: PPUSH
17664: LD_EXP 47
17668: PPUSH
17669: CALL_OW 120
17673: GO 17632
17675: POP
17676: POP
// if al_vehs then
17677: LD_EXP 44
17681: IFFALSE 17781
// if BuildingStatus ( al_fac ) = bs_idle then
17683: LD_EXP 49
17687: PPUSH
17688: CALL_OW 461
17692: PUSH
17693: LD_INT 2
17695: EQUAL
17696: IFFALSE 17781
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17698: LD_EXP 49
17702: PPUSH
17703: LD_EXP 44
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PPUSH
17712: LD_EXP 44
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PPUSH
17721: LD_EXP 44
17725: PUSH
17726: LD_INT 3
17728: ARRAY
17729: PPUSH
17730: LD_EXP 44
17734: PUSH
17735: LD_INT 4
17737: ARRAY
17738: PPUSH
17739: CALL_OW 125
// for i = 1 to 4 do
17743: LD_ADDR_VAR 0 1
17747: PUSH
17748: DOUBLE
17749: LD_INT 1
17751: DEC
17752: ST_TO_ADDR
17753: LD_INT 4
17755: PUSH
17756: FOR_TO
17757: IFFALSE 17779
// al_vehs := Delete ( al_vehs , 1 ) ;
17759: LD_ADDR_EXP 44
17763: PUSH
17764: LD_EXP 44
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: CALL_OW 3
17776: ST_TO_ADDR
17777: GO 17756
17779: POP
17780: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17781: LD_EXP 38
17785: PUSH
17786: LD_INT 0
17788: EQUAL
17789: PUSH
17790: LD_OWVAR 1
17794: PUSH
17795: LD_INT 23100
17797: MOD
17798: PUSH
17799: LD_INT 0
17801: EQUAL
17802: AND
17803: IFFALSE 17917
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
17805: LD_ADDR_VAR 0 1
17809: PUSH
17810: DOUBLE
17811: LD_INT 1
17813: DEC
17814: ST_TO_ADDR
17815: LD_INT 4
17817: PUSH
17818: LD_INT 5
17820: PUSH
17821: LD_INT 6
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: PUSH
17829: LD_OWVAR 67
17833: ARRAY
17834: PUSH
17835: FOR_TO
17836: IFFALSE 17915
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
17838: LD_ADDR_EXP 44
17842: PUSH
17843: LD_EXP 44
17847: PUSH
17848: LD_INT 23
17850: ADD
17851: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
17852: LD_ADDR_EXP 44
17856: PUSH
17857: LD_EXP 44
17861: PUSH
17862: LD_INT 1
17864: ADD
17865: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
17866: LD_ADDR_EXP 44
17870: PUSH
17871: LD_EXP 44
17875: PUSH
17876: LD_INT 3
17878: ADD
17879: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
17880: LD_ADDR_EXP 44
17884: PUSH
17885: LD_EXP 44
17889: PUSH
17890: LD_INT 46
17892: PUSH
17893: LD_INT 47
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_INT 2
17905: PPUSH
17906: CALL_OW 12
17910: ARRAY
17911: ADD
17912: ST_TO_ADDR
// end ;
17913: GO 17835
17915: POP
17916: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
17917: LD_INT 22
17919: PUSH
17920: LD_INT 7
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 34
17929: PUSH
17930: LD_INT 51
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PPUSH
17941: CALL_OW 69
17945: PUSH
17946: LD_INT 0
17948: EQUAL
17949: IFFALSE 17972
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
17951: LD_EXP 49
17955: PPUSH
17956: LD_INT 21
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: LD_INT 3
17964: PPUSH
17965: LD_INT 51
17967: PPUSH
17968: CALL_OW 125
// if al_force and tick mod 25200 = 0 then
17972: LD_EXP 38
17976: PUSH
17977: LD_OWVAR 1
17981: PUSH
17982: LD_INT 25200
17984: MOD
17985: PUSH
17986: LD_INT 0
17988: EQUAL
17989: AND
17990: IFFALSE 18053
// begin for i = 1 to al_force do
17992: LD_ADDR_VAR 0 1
17996: PUSH
17997: DOUBLE
17998: LD_INT 1
18000: DEC
18001: ST_TO_ADDR
18002: LD_EXP 38
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18051
// if GetTag ( al_force [ i ] ) <> 11 then
18010: LD_EXP 38
18014: PUSH
18015: LD_VAR 0 1
18019: ARRAY
18020: PPUSH
18021: CALL_OW 110
18025: PUSH
18026: LD_INT 11
18028: NONEQUAL
18029: IFFALSE 18049
// SetTag ( al_force [ i ] , 11 ) ;
18031: LD_EXP 38
18035: PUSH
18036: LD_VAR 0 1
18040: ARRAY
18041: PPUSH
18042: LD_INT 11
18044: PPUSH
18045: CALL_OW 109
18049: GO 18007
18051: POP
18052: POP
// end ; if al_force then
18053: LD_EXP 38
18057: IFFALSE 18166
// for i = 1 to al_force do
18059: LD_ADDR_VAR 0 1
18063: PUSH
18064: DOUBLE
18065: LD_INT 1
18067: DEC
18068: ST_TO_ADDR
18069: LD_EXP 38
18073: PUSH
18074: FOR_TO
18075: IFFALSE 18164
// begin if GetTag ( al_force [ i ] ) = 11 then
18077: LD_EXP 38
18081: PUSH
18082: LD_VAR 0 1
18086: ARRAY
18087: PPUSH
18088: CALL_OW 110
18092: PUSH
18093: LD_INT 11
18095: EQUAL
18096: IFFALSE 18162
// begin if not HasTask ( al_force [ i ] ) then
18098: LD_EXP 38
18102: PUSH
18103: LD_VAR 0 1
18107: ARRAY
18108: PPUSH
18109: CALL_OW 314
18113: NOT
18114: IFFALSE 18162
// ComAttackUnit ( al_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , al_force [ i ] ) ) ;
18116: LD_EXP 38
18120: PUSH
18121: LD_VAR 0 1
18125: ARRAY
18126: PPUSH
18127: LD_INT 81
18129: PUSH
18130: LD_INT 7
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: LD_EXP 38
18146: PUSH
18147: LD_VAR 0 1
18151: ARRAY
18152: PPUSH
18153: CALL_OW 74
18157: PPUSH
18158: CALL_OW 115
// end ; end ;
18162: GO 18074
18164: POP
18165: POP
// end ; end_of_file
18166: PPOPN 4
18168: END
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18169: LD_INT 0
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
18175: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
18176: LD_ADDR_EXP 53
18180: PUSH
18181: LD_INT 9
18183: PUSH
18184: LD_INT 8
18186: PUSH
18187: LD_INT 7
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: PUSH
18195: LD_OWVAR 67
18199: ARRAY
18200: ST_TO_ADDR
// ar_force := [ ] ;
18201: LD_ADDR_EXP 52
18205: PUSH
18206: EMPTY
18207: ST_TO_ADDR
// RemoveAlliance ;
18208: CALL 15997 0 0
// RemoveEnvironmentArea ( evn ) ;
18212: LD_INT 17
18214: PPUSH
18215: CALL_OW 355
// your_side := 2 ;
18219: LD_ADDR_OWVAR 2
18223: PUSH
18224: LD_INT 2
18226: ST_TO_ADDR
// uc_side := 2 ;
18227: LD_ADDR_OWVAR 20
18231: PUSH
18232: LD_INT 2
18234: ST_TO_ADDR
// uc_nation := nation_arabian ;
18235: LD_ADDR_OWVAR 21
18239: PUSH
18240: LD_INT 2
18242: ST_TO_ADDR
// hc_gallery :=  ;
18243: LD_ADDR_OWVAR 33
18247: PUSH
18248: LD_STRING 
18250: ST_TO_ADDR
// hc_name :=  ;
18251: LD_ADDR_OWVAR 26
18255: PUSH
18256: LD_STRING 
18258: ST_TO_ADDR
// hc_importance := 0 ;
18259: LD_ADDR_OWVAR 32
18263: PUSH
18264: LD_INT 0
18266: ST_TO_ADDR
// for i = 1 to 20 do
18267: LD_ADDR_VAR 0 2
18271: PUSH
18272: DOUBLE
18273: LD_INT 1
18275: DEC
18276: ST_TO_ADDR
18277: LD_INT 20
18279: PUSH
18280: FOR_TO
18281: IFFALSE 18346
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
18283: LD_INT 0
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: LD_INT 4
18291: PPUSH
18292: CALL_OW 12
18296: PPUSH
18297: LD_EXP 53
18301: PPUSH
18302: CALL_OW 380
// un := CreateHuman ;
18306: LD_ADDR_VAR 0 4
18310: PUSH
18311: CALL_OW 44
18315: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18316: LD_VAR 0 4
18320: PPUSH
18321: LD_INT 2
18323: PPUSH
18324: CALL_OW 233
// ar_force := ar_force ^ un ;
18328: LD_ADDR_EXP 52
18332: PUSH
18333: LD_EXP 52
18337: PUSH
18338: LD_VAR 0 4
18342: ADD
18343: ST_TO_ADDR
// end ;
18344: GO 18280
18346: POP
18347: POP
// hc_importance := 100 ;
18348: LD_ADDR_OWVAR 32
18352: PUSH
18353: LD_INT 100
18355: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 11
18361: PPUSH
18362: LD_EXP 53
18366: PPUSH
18367: CALL_OW 380
// ar_commander := CreateHuman ;
18371: LD_ADDR_EXP 51
18375: PUSH
18376: CALL_OW 44
18380: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
18381: LD_EXP 51
18385: PPUSH
18386: LD_INT 2
18388: PPUSH
18389: CALL_OW 233
// player_commander := ar_commander ;
18393: LD_ADDR_EXP 10
18397: PUSH
18398: LD_EXP 51
18402: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_change_class , ar_commander , sel_changeable , sel_not_hired ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
18403: LD_ADDR_VAR 0 5
18407: PUSH
18408: LD_STRING text
18410: PPUSH
18411: LD_INT 14
18413: PUSH
18414: LD_INT 13
18416: PUSH
18417: LD_INT 12
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: LD_OWVAR 67
18429: ARRAY
18430: PPUSH
18431: LD_INT 14
18433: PUSH
18434: LD_INT 13
18436: PUSH
18437: LD_INT 12
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_OWVAR 67
18449: ARRAY
18450: PPUSH
18451: LD_INT -5
18453: PUSH
18454: LD_EXP 51
18458: PUSH
18459: LD_INT -3
18461: PUSH
18462: LD_INT -2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: LD_EXP 52
18475: ADD
18476: PPUSH
18477: LD_INT 1
18479: PUSH
18480: LD_INT 3
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 4
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 8
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: PPUSH
18513: CALL_OW 42
18517: ST_TO_ADDR
// team := team ^ ar_commander ;
18518: LD_ADDR_VAR 0 5
18522: PUSH
18523: LD_VAR 0 5
18527: PUSH
18528: LD_EXP 51
18532: ADD
18533: ST_TO_ADDR
// for i = 1 to team do
18534: LD_ADDR_VAR 0 2
18538: PUSH
18539: DOUBLE
18540: LD_INT 1
18542: DEC
18543: ST_TO_ADDR
18544: LD_VAR 0 5
18548: PUSH
18549: FOR_TO
18550: IFFALSE 18575
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18552: LD_VAR 0 5
18556: PUSH
18557: LD_VAR 0 2
18561: ARRAY
18562: PPUSH
18563: LD_INT 16
18565: PPUSH
18566: LD_INT 0
18568: PPUSH
18569: CALL_OW 49
18573: GO 18549
18575: POP
18576: POP
// uc_side := 0 ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// uc_nation := 0 ;
18585: LD_ADDR_OWVAR 21
18589: PUSH
18590: LD_INT 0
18592: ST_TO_ADDR
// vc_chassis := 31 ;
18593: LD_ADDR_OWVAR 37
18597: PUSH
18598: LD_INT 31
18600: ST_TO_ADDR
// vc_control := control_rider ;
18601: LD_ADDR_OWVAR 38
18605: PUSH
18606: LD_INT 4
18608: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18609: CALL_OW 45
18613: PPUSH
18614: LD_INT 96
18616: PPUSH
18617: LD_INT 20
18619: PPUSH
18620: LD_INT 0
18622: PPUSH
18623: CALL_OW 48
// end ; end_of_file
18627: LD_VAR 0 1
18631: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18632: LD_INT 0
18634: PPUSH
// ar_crane := 88 ;
18635: LD_ADDR_EXP 60
18639: PUSH
18640: LD_INT 88
18642: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18643: LD_ADDR_EXP 55
18647: PUSH
18648: LD_INT 89
18650: ST_TO_ADDR
// us_hack := 99 ;
18651: LD_ADDR_EXP 56
18655: PUSH
18656: LD_INT 99
18658: ST_TO_ADDR
// us_artillery := 97 ;
18659: LD_ADDR_EXP 57
18663: PUSH
18664: LD_INT 97
18666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18667: LD_ADDR_EXP 58
18671: PUSH
18672: LD_INT 91
18674: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18675: LD_ADDR_EXP 59
18679: PUSH
18680: LD_INT 92
18682: ST_TO_ADDR
// ru_radar := 98 ;
18683: LD_ADDR_EXP 54
18687: PUSH
18688: LD_INT 98
18690: ST_TO_ADDR
// tech_Artillery := 80 ;
18691: LD_ADDR_EXP 61
18695: PUSH
18696: LD_INT 80
18698: ST_TO_ADDR
// tech_RadMat := 81 ;
18699: LD_ADDR_EXP 62
18703: PUSH
18704: LD_INT 81
18706: ST_TO_ADDR
// tech_BasicTools := 82 ;
18707: LD_ADDR_EXP 63
18711: PUSH
18712: LD_INT 82
18714: ST_TO_ADDR
// tech_Cargo := 83 ;
18715: LD_ADDR_EXP 64
18719: PUSH
18720: LD_INT 83
18722: ST_TO_ADDR
// tech_Track := 84 ;
18723: LD_ADDR_EXP 65
18727: PUSH
18728: LD_INT 84
18730: ST_TO_ADDR
// tech_Crane := 85 ;
18731: LD_ADDR_EXP 66
18735: PUSH
18736: LD_INT 85
18738: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18739: LD_ADDR_EXP 67
18743: PUSH
18744: LD_INT 86
18746: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18747: LD_ADDR_EXP 68
18751: PUSH
18752: LD_INT 87
18754: ST_TO_ADDR
// end ;
18755: LD_VAR 0 1
18759: RET
// every 1 do
18760: GO 18762
18762: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18763: CALL 18632 0 0
18767: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18768: LD_VAR 0 2
18772: PUSH
18773: LD_INT 100
18775: EQUAL
18776: IFFALSE 19725
// begin if not StreamModeActive then
18778: LD_EXP 69
18782: NOT
18783: IFFALSE 18793
// StreamModeActive := true ;
18785: LD_ADDR_EXP 69
18789: PUSH
18790: LD_INT 1
18792: ST_TO_ADDR
// if p3 = 0 then
18793: LD_VAR 0 3
18797: PUSH
18798: LD_INT 0
18800: EQUAL
18801: IFFALSE 18807
// InitStreamMode ;
18803: CALL 19958 0 0
// if p3 = 1 then
18807: LD_VAR 0 3
18811: PUSH
18812: LD_INT 1
18814: EQUAL
18815: IFFALSE 18825
// sRocket := true ;
18817: LD_ADDR_EXP 74
18821: PUSH
18822: LD_INT 1
18824: ST_TO_ADDR
// if p3 = 2 then
18825: LD_VAR 0 3
18829: PUSH
18830: LD_INT 2
18832: EQUAL
18833: IFFALSE 18843
// sSpeed := true ;
18835: LD_ADDR_EXP 73
18839: PUSH
18840: LD_INT 1
18842: ST_TO_ADDR
// if p3 = 3 then
18843: LD_VAR 0 3
18847: PUSH
18848: LD_INT 3
18850: EQUAL
18851: IFFALSE 18861
// sEngine := true ;
18853: LD_ADDR_EXP 75
18857: PUSH
18858: LD_INT 1
18860: ST_TO_ADDR
// if p3 = 4 then
18861: LD_VAR 0 3
18865: PUSH
18866: LD_INT 4
18868: EQUAL
18869: IFFALSE 18879
// sSpec := true ;
18871: LD_ADDR_EXP 72
18875: PUSH
18876: LD_INT 1
18878: ST_TO_ADDR
// if p3 = 5 then
18879: LD_VAR 0 3
18883: PUSH
18884: LD_INT 5
18886: EQUAL
18887: IFFALSE 18897
// sLevel := true ;
18889: LD_ADDR_EXP 76
18893: PUSH
18894: LD_INT 1
18896: ST_TO_ADDR
// if p3 = 6 then
18897: LD_VAR 0 3
18901: PUSH
18902: LD_INT 6
18904: EQUAL
18905: IFFALSE 18915
// sArmoury := true ;
18907: LD_ADDR_EXP 77
18911: PUSH
18912: LD_INT 1
18914: ST_TO_ADDR
// if p3 = 7 then
18915: LD_VAR 0 3
18919: PUSH
18920: LD_INT 7
18922: EQUAL
18923: IFFALSE 18933
// sRadar := true ;
18925: LD_ADDR_EXP 78
18929: PUSH
18930: LD_INT 1
18932: ST_TO_ADDR
// if p3 = 8 then
18933: LD_VAR 0 3
18937: PUSH
18938: LD_INT 8
18940: EQUAL
18941: IFFALSE 18951
// sBunker := true ;
18943: LD_ADDR_EXP 79
18947: PUSH
18948: LD_INT 1
18950: ST_TO_ADDR
// if p3 = 9 then
18951: LD_VAR 0 3
18955: PUSH
18956: LD_INT 9
18958: EQUAL
18959: IFFALSE 18969
// sHack := true ;
18961: LD_ADDR_EXP 80
18965: PUSH
18966: LD_INT 1
18968: ST_TO_ADDR
// if p3 = 10 then
18969: LD_VAR 0 3
18973: PUSH
18974: LD_INT 10
18976: EQUAL
18977: IFFALSE 18987
// sFire := true ;
18979: LD_ADDR_EXP 81
18983: PUSH
18984: LD_INT 1
18986: ST_TO_ADDR
// if p3 = 11 then
18987: LD_VAR 0 3
18991: PUSH
18992: LD_INT 11
18994: EQUAL
18995: IFFALSE 19005
// sRefresh := true ;
18997: LD_ADDR_EXP 82
19001: PUSH
19002: LD_INT 1
19004: ST_TO_ADDR
// if p3 = 12 then
19005: LD_VAR 0 3
19009: PUSH
19010: LD_INT 12
19012: EQUAL
19013: IFFALSE 19023
// sExp := true ;
19015: LD_ADDR_EXP 83
19019: PUSH
19020: LD_INT 1
19022: ST_TO_ADDR
// if p3 = 13 then
19023: LD_VAR 0 3
19027: PUSH
19028: LD_INT 13
19030: EQUAL
19031: IFFALSE 19041
// sDepot := true ;
19033: LD_ADDR_EXP 84
19037: PUSH
19038: LD_INT 1
19040: ST_TO_ADDR
// if p3 = 14 then
19041: LD_VAR 0 3
19045: PUSH
19046: LD_INT 14
19048: EQUAL
19049: IFFALSE 19059
// sFlag := true ;
19051: LD_ADDR_EXP 85
19055: PUSH
19056: LD_INT 1
19058: ST_TO_ADDR
// if p3 = 15 then
19059: LD_VAR 0 3
19063: PUSH
19064: LD_INT 15
19066: EQUAL
19067: IFFALSE 19077
// sKamikadze := true ;
19069: LD_ADDR_EXP 93
19073: PUSH
19074: LD_INT 1
19076: ST_TO_ADDR
// if p3 = 16 then
19077: LD_VAR 0 3
19081: PUSH
19082: LD_INT 16
19084: EQUAL
19085: IFFALSE 19095
// sTroll := true ;
19087: LD_ADDR_EXP 94
19091: PUSH
19092: LD_INT 1
19094: ST_TO_ADDR
// if p3 = 17 then
19095: LD_VAR 0 3
19099: PUSH
19100: LD_INT 17
19102: EQUAL
19103: IFFALSE 19113
// sSlow := true ;
19105: LD_ADDR_EXP 95
19109: PUSH
19110: LD_INT 1
19112: ST_TO_ADDR
// if p3 = 18 then
19113: LD_VAR 0 3
19117: PUSH
19118: LD_INT 18
19120: EQUAL
19121: IFFALSE 19131
// sLack := true ;
19123: LD_ADDR_EXP 96
19127: PUSH
19128: LD_INT 1
19130: ST_TO_ADDR
// if p3 = 19 then
19131: LD_VAR 0 3
19135: PUSH
19136: LD_INT 19
19138: EQUAL
19139: IFFALSE 19149
// sTank := true ;
19141: LD_ADDR_EXP 98
19145: PUSH
19146: LD_INT 1
19148: ST_TO_ADDR
// if p3 = 20 then
19149: LD_VAR 0 3
19153: PUSH
19154: LD_INT 20
19156: EQUAL
19157: IFFALSE 19167
// sRemote := true ;
19159: LD_ADDR_EXP 99
19163: PUSH
19164: LD_INT 1
19166: ST_TO_ADDR
// if p3 = 21 then
19167: LD_VAR 0 3
19171: PUSH
19172: LD_INT 21
19174: EQUAL
19175: IFFALSE 19185
// sPowell := true ;
19177: LD_ADDR_EXP 100
19181: PUSH
19182: LD_INT 1
19184: ST_TO_ADDR
// if p3 = 22 then
19185: LD_VAR 0 3
19189: PUSH
19190: LD_INT 22
19192: EQUAL
19193: IFFALSE 19203
// sTeleport := true ;
19195: LD_ADDR_EXP 103
19199: PUSH
19200: LD_INT 1
19202: ST_TO_ADDR
// if p3 = 23 then
19203: LD_VAR 0 3
19207: PUSH
19208: LD_INT 23
19210: EQUAL
19211: IFFALSE 19221
// sOilTower := true ;
19213: LD_ADDR_EXP 105
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// if p3 = 24 then
19221: LD_VAR 0 3
19225: PUSH
19226: LD_INT 24
19228: EQUAL
19229: IFFALSE 19239
// sShovel := true ;
19231: LD_ADDR_EXP 106
19235: PUSH
19236: LD_INT 1
19238: ST_TO_ADDR
// if p3 = 25 then
19239: LD_VAR 0 3
19243: PUSH
19244: LD_INT 25
19246: EQUAL
19247: IFFALSE 19257
// sSheik := true ;
19249: LD_ADDR_EXP 107
19253: PUSH
19254: LD_INT 1
19256: ST_TO_ADDR
// if p3 = 26 then
19257: LD_VAR 0 3
19261: PUSH
19262: LD_INT 26
19264: EQUAL
19265: IFFALSE 19275
// sEarthquake := true ;
19267: LD_ADDR_EXP 109
19271: PUSH
19272: LD_INT 1
19274: ST_TO_ADDR
// if p3 = 27 then
19275: LD_VAR 0 3
19279: PUSH
19280: LD_INT 27
19282: EQUAL
19283: IFFALSE 19293
// sAI := true ;
19285: LD_ADDR_EXP 110
19289: PUSH
19290: LD_INT 1
19292: ST_TO_ADDR
// if p3 = 28 then
19293: LD_VAR 0 3
19297: PUSH
19298: LD_INT 28
19300: EQUAL
19301: IFFALSE 19311
// sCargo := true ;
19303: LD_ADDR_EXP 113
19307: PUSH
19308: LD_INT 1
19310: ST_TO_ADDR
// if p3 = 29 then
19311: LD_VAR 0 3
19315: PUSH
19316: LD_INT 29
19318: EQUAL
19319: IFFALSE 19329
// sDLaser := true ;
19321: LD_ADDR_EXP 114
19325: PUSH
19326: LD_INT 1
19328: ST_TO_ADDR
// if p3 = 30 then
19329: LD_VAR 0 3
19333: PUSH
19334: LD_INT 30
19336: EQUAL
19337: IFFALSE 19347
// sExchange := true ;
19339: LD_ADDR_EXP 115
19343: PUSH
19344: LD_INT 1
19346: ST_TO_ADDR
// if p3 = 31 then
19347: LD_VAR 0 3
19351: PUSH
19352: LD_INT 31
19354: EQUAL
19355: IFFALSE 19365
// sFac := true ;
19357: LD_ADDR_EXP 116
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// if p3 = 32 then
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 32
19372: EQUAL
19373: IFFALSE 19383
// sPower := true ;
19375: LD_ADDR_EXP 117
19379: PUSH
19380: LD_INT 1
19382: ST_TO_ADDR
// if p3 = 33 then
19383: LD_VAR 0 3
19387: PUSH
19388: LD_INT 33
19390: EQUAL
19391: IFFALSE 19401
// sRandom := true ;
19393: LD_ADDR_EXP 118
19397: PUSH
19398: LD_INT 1
19400: ST_TO_ADDR
// if p3 = 34 then
19401: LD_VAR 0 3
19405: PUSH
19406: LD_INT 34
19408: EQUAL
19409: IFFALSE 19419
// sShield := true ;
19411: LD_ADDR_EXP 119
19415: PUSH
19416: LD_INT 1
19418: ST_TO_ADDR
// if p3 = 35 then
19419: LD_VAR 0 3
19423: PUSH
19424: LD_INT 35
19426: EQUAL
19427: IFFALSE 19437
// sTime := true ;
19429: LD_ADDR_EXP 120
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if p3 = 36 then
19437: LD_VAR 0 3
19441: PUSH
19442: LD_INT 36
19444: EQUAL
19445: IFFALSE 19455
// sTools := true ;
19447: LD_ADDR_EXP 121
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// if p3 = 101 then
19455: LD_VAR 0 3
19459: PUSH
19460: LD_INT 101
19462: EQUAL
19463: IFFALSE 19473
// sSold := true ;
19465: LD_ADDR_EXP 86
19469: PUSH
19470: LD_INT 1
19472: ST_TO_ADDR
// if p3 = 102 then
19473: LD_VAR 0 3
19477: PUSH
19478: LD_INT 102
19480: EQUAL
19481: IFFALSE 19491
// sDiff := true ;
19483: LD_ADDR_EXP 87
19487: PUSH
19488: LD_INT 1
19490: ST_TO_ADDR
// if p3 = 103 then
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 103
19498: EQUAL
19499: IFFALSE 19509
// sFog := true ;
19501: LD_ADDR_EXP 90
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 104 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 104
19516: EQUAL
19517: IFFALSE 19527
// sReset := true ;
19519: LD_ADDR_EXP 91
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// if p3 = 105 then
19527: LD_VAR 0 3
19531: PUSH
19532: LD_INT 105
19534: EQUAL
19535: IFFALSE 19545
// sSun := true ;
19537: LD_ADDR_EXP 92
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// if p3 = 106 then
19545: LD_VAR 0 3
19549: PUSH
19550: LD_INT 106
19552: EQUAL
19553: IFFALSE 19563
// sTiger := true ;
19555: LD_ADDR_EXP 88
19559: PUSH
19560: LD_INT 1
19562: ST_TO_ADDR
// if p3 = 107 then
19563: LD_VAR 0 3
19567: PUSH
19568: LD_INT 107
19570: EQUAL
19571: IFFALSE 19581
// sBomb := true ;
19573: LD_ADDR_EXP 89
19577: PUSH
19578: LD_INT 1
19580: ST_TO_ADDR
// if p3 = 108 then
19581: LD_VAR 0 3
19585: PUSH
19586: LD_INT 108
19588: EQUAL
19589: IFFALSE 19599
// sWound := true ;
19591: LD_ADDR_EXP 97
19595: PUSH
19596: LD_INT 1
19598: ST_TO_ADDR
// if p3 = 109 then
19599: LD_VAR 0 3
19603: PUSH
19604: LD_INT 109
19606: EQUAL
19607: IFFALSE 19617
// sBetray := true ;
19609: LD_ADDR_EXP 101
19613: PUSH
19614: LD_INT 1
19616: ST_TO_ADDR
// if p3 = 110 then
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 110
19624: EQUAL
19625: IFFALSE 19635
// sContamin := true ;
19627: LD_ADDR_EXP 102
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// if p3 = 111 then
19635: LD_VAR 0 3
19639: PUSH
19640: LD_INT 111
19642: EQUAL
19643: IFFALSE 19653
// sOil := true ;
19645: LD_ADDR_EXP 104
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
// if p3 = 112 then
19653: LD_VAR 0 3
19657: PUSH
19658: LD_INT 112
19660: EQUAL
19661: IFFALSE 19671
// sStu := true ;
19663: LD_ADDR_EXP 108
19667: PUSH
19668: LD_INT 1
19670: ST_TO_ADDR
// if p3 = 113 then
19671: LD_VAR 0 3
19675: PUSH
19676: LD_INT 113
19678: EQUAL
19679: IFFALSE 19689
// sBazooka := true ;
19681: LD_ADDR_EXP 111
19685: PUSH
19686: LD_INT 1
19688: ST_TO_ADDR
// if p3 = 114 then
19689: LD_VAR 0 3
19693: PUSH
19694: LD_INT 114
19696: EQUAL
19697: IFFALSE 19707
// sMortar := true ;
19699: LD_ADDR_EXP 112
19703: PUSH
19704: LD_INT 1
19706: ST_TO_ADDR
// if p3 = 115 then
19707: LD_VAR 0 3
19711: PUSH
19712: LD_INT 115
19714: EQUAL
19715: IFFALSE 19725
// sRanger := true ;
19717: LD_ADDR_EXP 122
19721: PUSH
19722: LD_INT 1
19724: ST_TO_ADDR
// end ; if p2 = 101 then
19725: LD_VAR 0 2
19729: PUSH
19730: LD_INT 101
19732: EQUAL
19733: IFFALSE 19936
// begin case p3 of 1 :
19735: LD_VAR 0 3
19739: PUSH
19740: LD_INT 1
19742: DOUBLE
19743: EQUAL
19744: IFTRUE 19748
19746: GO 19755
19748: POP
// hHackUnlimitedResources ; 2 :
19749: CALL 30030 0 0
19753: GO 19936
19755: LD_INT 2
19757: DOUBLE
19758: EQUAL
19759: IFTRUE 19763
19761: GO 19770
19763: POP
// hHackSetLevel10 ; 3 :
19764: CALL 30163 0 0
19768: GO 19936
19770: LD_INT 3
19772: DOUBLE
19773: EQUAL
19774: IFTRUE 19778
19776: GO 19785
19778: POP
// hHackSetLevel10YourUnits ; 4 :
19779: CALL 30248 0 0
19783: GO 19936
19785: LD_INT 4
19787: DOUBLE
19788: EQUAL
19789: IFTRUE 19793
19791: GO 19815
19793: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
19794: LD_VAR 0 4
19798: PPUSH
19799: LD_VAR 0 5
19803: PPUSH
19804: LD_VAR 0 6
19808: PPUSH
19809: CALL 30338 0 3
19813: GO 19936
19815: LD_INT 5
19817: DOUBLE
19818: EQUAL
19819: IFTRUE 19823
19821: GO 19830
19823: POP
// hHackSpawnVehicle ; 6 :
19824: CALL 30399 0 0
19828: GO 19936
19830: LD_INT 6
19832: DOUBLE
19833: EQUAL
19834: IFTRUE 19838
19836: GO 19845
19838: POP
// hHackInvincible ; 7 :
19839: CALL 30945 0 0
19843: GO 19936
19845: LD_INT 7
19847: DOUBLE
19848: EQUAL
19849: IFTRUE 19853
19851: GO 19860
19853: POP
// hHackInvisible ; 8 :
19854: CALL 31056 0 0
19858: GO 19936
19860: LD_INT 8
19862: DOUBLE
19863: EQUAL
19864: IFTRUE 19868
19866: GO 19875
19868: POP
// hHackChangeYourSide ; 9 :
19869: CALL 31113 0 0
19873: GO 19936
19875: LD_INT 9
19877: DOUBLE
19878: EQUAL
19879: IFTRUE 19883
19881: GO 19890
19883: POP
// hHackChangeUnitSide ; 10 :
19884: CALL 31155 0 0
19888: GO 19936
19890: LD_INT 10
19892: DOUBLE
19893: EQUAL
19894: IFTRUE 19898
19896: GO 19905
19898: POP
// hHackFog ; 11 :
19899: CALL 31256 0 0
19903: GO 19936
19905: LD_INT 11
19907: DOUBLE
19908: EQUAL
19909: IFTRUE 19913
19911: GO 19920
19913: POP
// hHackApeman ; 12 :
19914: CALL 31271 0 0
19918: GO 19936
19920: LD_INT 12
19922: DOUBLE
19923: EQUAL
19924: IFTRUE 19928
19926: GO 19935
19928: POP
// hHackBoom ; end ;
19929: CALL 31356 0 0
19933: GO 19936
19935: POP
// end ; end ;
19936: PPOPN 6
19938: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19939: GO 19941
19941: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19942: LD_STRING initStreamRollete();
19944: PPUSH
19945: CALL_OW 559
// InitStreamMode ;
19949: CALL 19958 0 0
// DefineStreamItems ( ) ;
19953: CALL 20398 0 0
// end ;
19957: END
// function InitStreamMode ; begin
19958: LD_INT 0
19960: PPUSH
// streamModeActive := false ;
19961: LD_ADDR_EXP 69
19965: PUSH
19966: LD_INT 0
19968: ST_TO_ADDR
// normalCounter := 36 ;
19969: LD_ADDR_EXP 70
19973: PUSH
19974: LD_INT 36
19976: ST_TO_ADDR
// hardcoreCounter := 16 ;
19977: LD_ADDR_EXP 71
19981: PUSH
19982: LD_INT 16
19984: ST_TO_ADDR
// sRocket := false ;
19985: LD_ADDR_EXP 74
19989: PUSH
19990: LD_INT 0
19992: ST_TO_ADDR
// sSpeed := false ;
19993: LD_ADDR_EXP 73
19997: PUSH
19998: LD_INT 0
20000: ST_TO_ADDR
// sEngine := false ;
20001: LD_ADDR_EXP 75
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// sSpec := false ;
20009: LD_ADDR_EXP 72
20013: PUSH
20014: LD_INT 0
20016: ST_TO_ADDR
// sLevel := false ;
20017: LD_ADDR_EXP 76
20021: PUSH
20022: LD_INT 0
20024: ST_TO_ADDR
// sArmoury := false ;
20025: LD_ADDR_EXP 77
20029: PUSH
20030: LD_INT 0
20032: ST_TO_ADDR
// sRadar := false ;
20033: LD_ADDR_EXP 78
20037: PUSH
20038: LD_INT 0
20040: ST_TO_ADDR
// sBunker := false ;
20041: LD_ADDR_EXP 79
20045: PUSH
20046: LD_INT 0
20048: ST_TO_ADDR
// sHack := false ;
20049: LD_ADDR_EXP 80
20053: PUSH
20054: LD_INT 0
20056: ST_TO_ADDR
// sFire := false ;
20057: LD_ADDR_EXP 81
20061: PUSH
20062: LD_INT 0
20064: ST_TO_ADDR
// sRefresh := false ;
20065: LD_ADDR_EXP 82
20069: PUSH
20070: LD_INT 0
20072: ST_TO_ADDR
// sExp := false ;
20073: LD_ADDR_EXP 83
20077: PUSH
20078: LD_INT 0
20080: ST_TO_ADDR
// sDepot := false ;
20081: LD_ADDR_EXP 84
20085: PUSH
20086: LD_INT 0
20088: ST_TO_ADDR
// sFlag := false ;
20089: LD_ADDR_EXP 85
20093: PUSH
20094: LD_INT 0
20096: ST_TO_ADDR
// sKamikadze := false ;
20097: LD_ADDR_EXP 93
20101: PUSH
20102: LD_INT 0
20104: ST_TO_ADDR
// sTroll := false ;
20105: LD_ADDR_EXP 94
20109: PUSH
20110: LD_INT 0
20112: ST_TO_ADDR
// sSlow := false ;
20113: LD_ADDR_EXP 95
20117: PUSH
20118: LD_INT 0
20120: ST_TO_ADDR
// sLack := false ;
20121: LD_ADDR_EXP 96
20125: PUSH
20126: LD_INT 0
20128: ST_TO_ADDR
// sTank := false ;
20129: LD_ADDR_EXP 98
20133: PUSH
20134: LD_INT 0
20136: ST_TO_ADDR
// sRemote := false ;
20137: LD_ADDR_EXP 99
20141: PUSH
20142: LD_INT 0
20144: ST_TO_ADDR
// sPowell := false ;
20145: LD_ADDR_EXP 100
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// sTeleport := false ;
20153: LD_ADDR_EXP 103
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// sOilTower := false ;
20161: LD_ADDR_EXP 105
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// sShovel := false ;
20169: LD_ADDR_EXP 106
20173: PUSH
20174: LD_INT 0
20176: ST_TO_ADDR
// sSheik := false ;
20177: LD_ADDR_EXP 107
20181: PUSH
20182: LD_INT 0
20184: ST_TO_ADDR
// sEarthquake := false ;
20185: LD_ADDR_EXP 109
20189: PUSH
20190: LD_INT 0
20192: ST_TO_ADDR
// sAI := false ;
20193: LD_ADDR_EXP 110
20197: PUSH
20198: LD_INT 0
20200: ST_TO_ADDR
// sCargo := false ;
20201: LD_ADDR_EXP 113
20205: PUSH
20206: LD_INT 0
20208: ST_TO_ADDR
// sDLaser := false ;
20209: LD_ADDR_EXP 114
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// sExchange := false ;
20217: LD_ADDR_EXP 115
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// sFac := false ;
20225: LD_ADDR_EXP 116
20229: PUSH
20230: LD_INT 0
20232: ST_TO_ADDR
// sPower := false ;
20233: LD_ADDR_EXP 117
20237: PUSH
20238: LD_INT 0
20240: ST_TO_ADDR
// sRandom := false ;
20241: LD_ADDR_EXP 118
20245: PUSH
20246: LD_INT 0
20248: ST_TO_ADDR
// sShield := false ;
20249: LD_ADDR_EXP 119
20253: PUSH
20254: LD_INT 0
20256: ST_TO_ADDR
// sTime := false ;
20257: LD_ADDR_EXP 120
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
// sTools := false ;
20265: LD_ADDR_EXP 121
20269: PUSH
20270: LD_INT 0
20272: ST_TO_ADDR
// sSold := false ;
20273: LD_ADDR_EXP 86
20277: PUSH
20278: LD_INT 0
20280: ST_TO_ADDR
// sDiff := false ;
20281: LD_ADDR_EXP 87
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// sFog := false ;
20289: LD_ADDR_EXP 90
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// sReset := false ;
20297: LD_ADDR_EXP 91
20301: PUSH
20302: LD_INT 0
20304: ST_TO_ADDR
// sSun := false ;
20305: LD_ADDR_EXP 92
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// sTiger := false ;
20313: LD_ADDR_EXP 88
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sBomb := false ;
20321: LD_ADDR_EXP 89
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sWound := false ;
20329: LD_ADDR_EXP 97
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sBetray := false ;
20337: LD_ADDR_EXP 101
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sContamin := false ;
20345: LD_ADDR_EXP 102
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sOil := false ;
20353: LD_ADDR_EXP 104
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sStu := false ;
20361: LD_ADDR_EXP 108
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sBazooka := false ;
20369: LD_ADDR_EXP 111
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sMortar := false ;
20377: LD_ADDR_EXP 112
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sRanger := false ;
20385: LD_ADDR_EXP 122
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// end ;
20393: LD_VAR 0 1
20397: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20398: LD_INT 0
20400: PPUSH
20401: PPUSH
20402: PPUSH
20403: PPUSH
20404: PPUSH
// result := [ ] ;
20405: LD_ADDR_VAR 0 1
20409: PUSH
20410: EMPTY
20411: ST_TO_ADDR
// if campaign_id = 1 then
20412: LD_OWVAR 69
20416: PUSH
20417: LD_INT 1
20419: EQUAL
20420: IFFALSE 23358
// begin case mission_number of 1 :
20422: LD_OWVAR 70
20426: PUSH
20427: LD_INT 1
20429: DOUBLE
20430: EQUAL
20431: IFTRUE 20435
20433: GO 20499
20435: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20436: LD_ADDR_VAR 0 1
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: LD_INT 4
20446: PUSH
20447: LD_INT 11
20449: PUSH
20450: LD_INT 12
20452: PUSH
20453: LD_INT 15
20455: PUSH
20456: LD_INT 16
20458: PUSH
20459: LD_INT 22
20461: PUSH
20462: LD_INT 23
20464: PUSH
20465: LD_INT 26
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 101
20481: PUSH
20482: LD_INT 102
20484: PUSH
20485: LD_INT 106
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: LIST
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: ST_TO_ADDR
20497: GO 23356
20499: LD_INT 2
20501: DOUBLE
20502: EQUAL
20503: IFTRUE 20507
20505: GO 20579
20507: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20508: LD_ADDR_VAR 0 1
20512: PUSH
20513: LD_INT 2
20515: PUSH
20516: LD_INT 4
20518: PUSH
20519: LD_INT 11
20521: PUSH
20522: LD_INT 12
20524: PUSH
20525: LD_INT 15
20527: PUSH
20528: LD_INT 16
20530: PUSH
20531: LD_INT 22
20533: PUSH
20534: LD_INT 23
20536: PUSH
20537: LD_INT 26
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 101
20553: PUSH
20554: LD_INT 102
20556: PUSH
20557: LD_INT 105
20559: PUSH
20560: LD_INT 106
20562: PUSH
20563: LD_INT 108
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: ST_TO_ADDR
20577: GO 23356
20579: LD_INT 3
20581: DOUBLE
20582: EQUAL
20583: IFTRUE 20587
20585: GO 20663
20587: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20588: LD_ADDR_VAR 0 1
20592: PUSH
20593: LD_INT 2
20595: PUSH
20596: LD_INT 4
20598: PUSH
20599: LD_INT 5
20601: PUSH
20602: LD_INT 11
20604: PUSH
20605: LD_INT 12
20607: PUSH
20608: LD_INT 15
20610: PUSH
20611: LD_INT 16
20613: PUSH
20614: LD_INT 22
20616: PUSH
20617: LD_INT 26
20619: PUSH
20620: LD_INT 36
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 101
20637: PUSH
20638: LD_INT 102
20640: PUSH
20641: LD_INT 105
20643: PUSH
20644: LD_INT 106
20646: PUSH
20647: LD_INT 108
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: ST_TO_ADDR
20661: GO 23356
20663: LD_INT 4
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20755
20671: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20672: LD_ADDR_VAR 0 1
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: LD_INT 4
20682: PUSH
20683: LD_INT 5
20685: PUSH
20686: LD_INT 8
20688: PUSH
20689: LD_INT 11
20691: PUSH
20692: LD_INT 12
20694: PUSH
20695: LD_INT 15
20697: PUSH
20698: LD_INT 16
20700: PUSH
20701: LD_INT 22
20703: PUSH
20704: LD_INT 23
20706: PUSH
20707: LD_INT 26
20709: PUSH
20710: LD_INT 36
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 101
20729: PUSH
20730: LD_INT 102
20732: PUSH
20733: LD_INT 105
20735: PUSH
20736: LD_INT 106
20738: PUSH
20739: LD_INT 108
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: ST_TO_ADDR
20753: GO 23356
20755: LD_INT 5
20757: DOUBLE
20758: EQUAL
20759: IFTRUE 20763
20761: GO 20863
20763: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20764: LD_ADDR_VAR 0 1
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 4
20774: PUSH
20775: LD_INT 5
20777: PUSH
20778: LD_INT 6
20780: PUSH
20781: LD_INT 8
20783: PUSH
20784: LD_INT 11
20786: PUSH
20787: LD_INT 12
20789: PUSH
20790: LD_INT 15
20792: PUSH
20793: LD_INT 16
20795: PUSH
20796: LD_INT 22
20798: PUSH
20799: LD_INT 23
20801: PUSH
20802: LD_INT 25
20804: PUSH
20805: LD_INT 26
20807: PUSH
20808: LD_INT 36
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 101
20829: PUSH
20830: LD_INT 102
20832: PUSH
20833: LD_INT 105
20835: PUSH
20836: LD_INT 106
20838: PUSH
20839: LD_INT 108
20841: PUSH
20842: LD_INT 109
20844: PUSH
20845: LD_INT 112
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: ST_TO_ADDR
20861: GO 23356
20863: LD_INT 6
20865: DOUBLE
20866: EQUAL
20867: IFTRUE 20871
20869: GO 20991
20871: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20872: LD_ADDR_VAR 0 1
20876: PUSH
20877: LD_INT 2
20879: PUSH
20880: LD_INT 4
20882: PUSH
20883: LD_INT 5
20885: PUSH
20886: LD_INT 6
20888: PUSH
20889: LD_INT 8
20891: PUSH
20892: LD_INT 11
20894: PUSH
20895: LD_INT 12
20897: PUSH
20898: LD_INT 15
20900: PUSH
20901: LD_INT 16
20903: PUSH
20904: LD_INT 20
20906: PUSH
20907: LD_INT 21
20909: PUSH
20910: LD_INT 22
20912: PUSH
20913: LD_INT 23
20915: PUSH
20916: LD_INT 25
20918: PUSH
20919: LD_INT 26
20921: PUSH
20922: LD_INT 30
20924: PUSH
20925: LD_INT 31
20927: PUSH
20928: LD_INT 32
20930: PUSH
20931: LD_INT 36
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 101
20957: PUSH
20958: LD_INT 102
20960: PUSH
20961: LD_INT 105
20963: PUSH
20964: LD_INT 106
20966: PUSH
20967: LD_INT 108
20969: PUSH
20970: LD_INT 109
20972: PUSH
20973: LD_INT 112
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: ST_TO_ADDR
20989: GO 23356
20991: LD_INT 7
20993: DOUBLE
20994: EQUAL
20995: IFTRUE 20999
20997: GO 21099
20999: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21000: LD_ADDR_VAR 0 1
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: LD_INT 4
21010: PUSH
21011: LD_INT 5
21013: PUSH
21014: LD_INT 7
21016: PUSH
21017: LD_INT 11
21019: PUSH
21020: LD_INT 12
21022: PUSH
21023: LD_INT 15
21025: PUSH
21026: LD_INT 16
21028: PUSH
21029: LD_INT 20
21031: PUSH
21032: LD_INT 21
21034: PUSH
21035: LD_INT 22
21037: PUSH
21038: LD_INT 23
21040: PUSH
21041: LD_INT 25
21043: PUSH
21044: LD_INT 26
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 101
21065: PUSH
21066: LD_INT 102
21068: PUSH
21069: LD_INT 103
21071: PUSH
21072: LD_INT 105
21074: PUSH
21075: LD_INT 106
21077: PUSH
21078: LD_INT 108
21080: PUSH
21081: LD_INT 112
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: ST_TO_ADDR
21097: GO 23356
21099: LD_INT 8
21101: DOUBLE
21102: EQUAL
21103: IFTRUE 21107
21105: GO 21235
21107: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21108: LD_ADDR_VAR 0 1
21112: PUSH
21113: LD_INT 2
21115: PUSH
21116: LD_INT 4
21118: PUSH
21119: LD_INT 5
21121: PUSH
21122: LD_INT 6
21124: PUSH
21125: LD_INT 7
21127: PUSH
21128: LD_INT 8
21130: PUSH
21131: LD_INT 11
21133: PUSH
21134: LD_INT 12
21136: PUSH
21137: LD_INT 15
21139: PUSH
21140: LD_INT 16
21142: PUSH
21143: LD_INT 20
21145: PUSH
21146: LD_INT 21
21148: PUSH
21149: LD_INT 22
21151: PUSH
21152: LD_INT 23
21154: PUSH
21155: LD_INT 25
21157: PUSH
21158: LD_INT 26
21160: PUSH
21161: LD_INT 30
21163: PUSH
21164: LD_INT 31
21166: PUSH
21167: LD_INT 32
21169: PUSH
21170: LD_INT 36
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 101
21197: PUSH
21198: LD_INT 102
21200: PUSH
21201: LD_INT 103
21203: PUSH
21204: LD_INT 105
21206: PUSH
21207: LD_INT 106
21209: PUSH
21210: LD_INT 108
21212: PUSH
21213: LD_INT 109
21215: PUSH
21216: LD_INT 112
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: ST_TO_ADDR
21233: GO 23356
21235: LD_INT 9
21237: DOUBLE
21238: EQUAL
21239: IFTRUE 21243
21241: GO 21379
21243: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21244: LD_ADDR_VAR 0 1
21248: PUSH
21249: LD_INT 2
21251: PUSH
21252: LD_INT 4
21254: PUSH
21255: LD_INT 5
21257: PUSH
21258: LD_INT 6
21260: PUSH
21261: LD_INT 7
21263: PUSH
21264: LD_INT 8
21266: PUSH
21267: LD_INT 11
21269: PUSH
21270: LD_INT 12
21272: PUSH
21273: LD_INT 15
21275: PUSH
21276: LD_INT 16
21278: PUSH
21279: LD_INT 20
21281: PUSH
21282: LD_INT 21
21284: PUSH
21285: LD_INT 22
21287: PUSH
21288: LD_INT 23
21290: PUSH
21291: LD_INT 25
21293: PUSH
21294: LD_INT 26
21296: PUSH
21297: LD_INT 28
21299: PUSH
21300: LD_INT 30
21302: PUSH
21303: LD_INT 31
21305: PUSH
21306: LD_INT 32
21308: PUSH
21309: LD_INT 36
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 101
21337: PUSH
21338: LD_INT 102
21340: PUSH
21341: LD_INT 103
21343: PUSH
21344: LD_INT 105
21346: PUSH
21347: LD_INT 106
21349: PUSH
21350: LD_INT 108
21352: PUSH
21353: LD_INT 109
21355: PUSH
21356: LD_INT 112
21358: PUSH
21359: LD_INT 114
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: ST_TO_ADDR
21377: GO 23356
21379: LD_INT 10
21381: DOUBLE
21382: EQUAL
21383: IFTRUE 21387
21385: GO 21571
21387: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21388: LD_ADDR_VAR 0 1
21392: PUSH
21393: LD_INT 2
21395: PUSH
21396: LD_INT 4
21398: PUSH
21399: LD_INT 5
21401: PUSH
21402: LD_INT 6
21404: PUSH
21405: LD_INT 7
21407: PUSH
21408: LD_INT 8
21410: PUSH
21411: LD_INT 9
21413: PUSH
21414: LD_INT 10
21416: PUSH
21417: LD_INT 11
21419: PUSH
21420: LD_INT 12
21422: PUSH
21423: LD_INT 13
21425: PUSH
21426: LD_INT 14
21428: PUSH
21429: LD_INT 15
21431: PUSH
21432: LD_INT 16
21434: PUSH
21435: LD_INT 17
21437: PUSH
21438: LD_INT 18
21440: PUSH
21441: LD_INT 19
21443: PUSH
21444: LD_INT 20
21446: PUSH
21447: LD_INT 21
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_INT 23
21455: PUSH
21456: LD_INT 24
21458: PUSH
21459: LD_INT 25
21461: PUSH
21462: LD_INT 26
21464: PUSH
21465: LD_INT 28
21467: PUSH
21468: LD_INT 30
21470: PUSH
21471: LD_INT 31
21473: PUSH
21474: LD_INT 32
21476: PUSH
21477: LD_INT 36
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 101
21513: PUSH
21514: LD_INT 102
21516: PUSH
21517: LD_INT 103
21519: PUSH
21520: LD_INT 104
21522: PUSH
21523: LD_INT 105
21525: PUSH
21526: LD_INT 106
21528: PUSH
21529: LD_INT 107
21531: PUSH
21532: LD_INT 108
21534: PUSH
21535: LD_INT 109
21537: PUSH
21538: LD_INT 110
21540: PUSH
21541: LD_INT 111
21543: PUSH
21544: LD_INT 112
21546: PUSH
21547: LD_INT 114
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: ST_TO_ADDR
21569: GO 23356
21571: LD_INT 11
21573: DOUBLE
21574: EQUAL
21575: IFTRUE 21579
21577: GO 21771
21579: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21580: LD_ADDR_VAR 0 1
21584: PUSH
21585: LD_INT 2
21587: PUSH
21588: LD_INT 3
21590: PUSH
21591: LD_INT 4
21593: PUSH
21594: LD_INT 5
21596: PUSH
21597: LD_INT 6
21599: PUSH
21600: LD_INT 7
21602: PUSH
21603: LD_INT 8
21605: PUSH
21606: LD_INT 9
21608: PUSH
21609: LD_INT 10
21611: PUSH
21612: LD_INT 11
21614: PUSH
21615: LD_INT 12
21617: PUSH
21618: LD_INT 13
21620: PUSH
21621: LD_INT 14
21623: PUSH
21624: LD_INT 15
21626: PUSH
21627: LD_INT 16
21629: PUSH
21630: LD_INT 17
21632: PUSH
21633: LD_INT 18
21635: PUSH
21636: LD_INT 19
21638: PUSH
21639: LD_INT 20
21641: PUSH
21642: LD_INT 21
21644: PUSH
21645: LD_INT 22
21647: PUSH
21648: LD_INT 23
21650: PUSH
21651: LD_INT 24
21653: PUSH
21654: LD_INT 25
21656: PUSH
21657: LD_INT 26
21659: PUSH
21660: LD_INT 28
21662: PUSH
21663: LD_INT 30
21665: PUSH
21666: LD_INT 31
21668: PUSH
21669: LD_INT 32
21671: PUSH
21672: LD_INT 34
21674: PUSH
21675: LD_INT 36
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 101
21713: PUSH
21714: LD_INT 102
21716: PUSH
21717: LD_INT 103
21719: PUSH
21720: LD_INT 104
21722: PUSH
21723: LD_INT 105
21725: PUSH
21726: LD_INT 106
21728: PUSH
21729: LD_INT 107
21731: PUSH
21732: LD_INT 108
21734: PUSH
21735: LD_INT 109
21737: PUSH
21738: LD_INT 110
21740: PUSH
21741: LD_INT 111
21743: PUSH
21744: LD_INT 112
21746: PUSH
21747: LD_INT 114
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: ST_TO_ADDR
21769: GO 23356
21771: LD_INT 12
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21987
21779: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21780: LD_ADDR_VAR 0 1
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: LD_INT 2
21790: PUSH
21791: LD_INT 3
21793: PUSH
21794: LD_INT 4
21796: PUSH
21797: LD_INT 5
21799: PUSH
21800: LD_INT 6
21802: PUSH
21803: LD_INT 7
21805: PUSH
21806: LD_INT 8
21808: PUSH
21809: LD_INT 9
21811: PUSH
21812: LD_INT 10
21814: PUSH
21815: LD_INT 11
21817: PUSH
21818: LD_INT 12
21820: PUSH
21821: LD_INT 13
21823: PUSH
21824: LD_INT 14
21826: PUSH
21827: LD_INT 15
21829: PUSH
21830: LD_INT 16
21832: PUSH
21833: LD_INT 17
21835: PUSH
21836: LD_INT 18
21838: PUSH
21839: LD_INT 19
21841: PUSH
21842: LD_INT 20
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 22
21850: PUSH
21851: LD_INT 23
21853: PUSH
21854: LD_INT 24
21856: PUSH
21857: LD_INT 25
21859: PUSH
21860: LD_INT 26
21862: PUSH
21863: LD_INT 27
21865: PUSH
21866: LD_INT 28
21868: PUSH
21869: LD_INT 30
21871: PUSH
21872: LD_INT 31
21874: PUSH
21875: LD_INT 32
21877: PUSH
21878: LD_INT 33
21880: PUSH
21881: LD_INT 34
21883: PUSH
21884: LD_INT 36
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 101
21925: PUSH
21926: LD_INT 102
21928: PUSH
21929: LD_INT 103
21931: PUSH
21932: LD_INT 104
21934: PUSH
21935: LD_INT 105
21937: PUSH
21938: LD_INT 106
21940: PUSH
21941: LD_INT 107
21943: PUSH
21944: LD_INT 108
21946: PUSH
21947: LD_INT 109
21949: PUSH
21950: LD_INT 110
21952: PUSH
21953: LD_INT 111
21955: PUSH
21956: LD_INT 112
21958: PUSH
21959: LD_INT 113
21961: PUSH
21962: LD_INT 114
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: ST_TO_ADDR
21985: GO 23356
21987: LD_INT 13
21989: DOUBLE
21990: EQUAL
21991: IFTRUE 21995
21993: GO 22191
21995: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21996: LD_ADDR_VAR 0 1
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: LD_INT 2
22006: PUSH
22007: LD_INT 3
22009: PUSH
22010: LD_INT 4
22012: PUSH
22013: LD_INT 5
22015: PUSH
22016: LD_INT 8
22018: PUSH
22019: LD_INT 9
22021: PUSH
22022: LD_INT 10
22024: PUSH
22025: LD_INT 11
22027: PUSH
22028: LD_INT 12
22030: PUSH
22031: LD_INT 14
22033: PUSH
22034: LD_INT 15
22036: PUSH
22037: LD_INT 16
22039: PUSH
22040: LD_INT 17
22042: PUSH
22043: LD_INT 18
22045: PUSH
22046: LD_INT 19
22048: PUSH
22049: LD_INT 20
22051: PUSH
22052: LD_INT 21
22054: PUSH
22055: LD_INT 22
22057: PUSH
22058: LD_INT 23
22060: PUSH
22061: LD_INT 24
22063: PUSH
22064: LD_INT 25
22066: PUSH
22067: LD_INT 26
22069: PUSH
22070: LD_INT 27
22072: PUSH
22073: LD_INT 28
22075: PUSH
22076: LD_INT 30
22078: PUSH
22079: LD_INT 31
22081: PUSH
22082: LD_INT 32
22084: PUSH
22085: LD_INT 33
22087: PUSH
22088: LD_INT 34
22090: PUSH
22091: LD_INT 36
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 101
22129: PUSH
22130: LD_INT 102
22132: PUSH
22133: LD_INT 103
22135: PUSH
22136: LD_INT 104
22138: PUSH
22139: LD_INT 105
22141: PUSH
22142: LD_INT 106
22144: PUSH
22145: LD_INT 107
22147: PUSH
22148: LD_INT 108
22150: PUSH
22151: LD_INT 109
22153: PUSH
22154: LD_INT 110
22156: PUSH
22157: LD_INT 111
22159: PUSH
22160: LD_INT 112
22162: PUSH
22163: LD_INT 113
22165: PUSH
22166: LD_INT 114
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: ST_TO_ADDR
22189: GO 23356
22191: LD_INT 14
22193: DOUBLE
22194: EQUAL
22195: IFTRUE 22199
22197: GO 22411
22199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22200: LD_ADDR_VAR 0 1
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 3
22213: PUSH
22214: LD_INT 4
22216: PUSH
22217: LD_INT 5
22219: PUSH
22220: LD_INT 6
22222: PUSH
22223: LD_INT 7
22225: PUSH
22226: LD_INT 8
22228: PUSH
22229: LD_INT 9
22231: PUSH
22232: LD_INT 10
22234: PUSH
22235: LD_INT 11
22237: PUSH
22238: LD_INT 12
22240: PUSH
22241: LD_INT 13
22243: PUSH
22244: LD_INT 14
22246: PUSH
22247: LD_INT 15
22249: PUSH
22250: LD_INT 16
22252: PUSH
22253: LD_INT 17
22255: PUSH
22256: LD_INT 18
22258: PUSH
22259: LD_INT 19
22261: PUSH
22262: LD_INT 20
22264: PUSH
22265: LD_INT 21
22267: PUSH
22268: LD_INT 22
22270: PUSH
22271: LD_INT 23
22273: PUSH
22274: LD_INT 24
22276: PUSH
22277: LD_INT 25
22279: PUSH
22280: LD_INT 26
22282: PUSH
22283: LD_INT 27
22285: PUSH
22286: LD_INT 28
22288: PUSH
22289: LD_INT 29
22291: PUSH
22292: LD_INT 30
22294: PUSH
22295: LD_INT 31
22297: PUSH
22298: LD_INT 32
22300: PUSH
22301: LD_INT 33
22303: PUSH
22304: LD_INT 34
22306: PUSH
22307: LD_INT 36
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 101
22349: PUSH
22350: LD_INT 102
22352: PUSH
22353: LD_INT 103
22355: PUSH
22356: LD_INT 104
22358: PUSH
22359: LD_INT 105
22361: PUSH
22362: LD_INT 106
22364: PUSH
22365: LD_INT 107
22367: PUSH
22368: LD_INT 108
22370: PUSH
22371: LD_INT 109
22373: PUSH
22374: LD_INT 110
22376: PUSH
22377: LD_INT 111
22379: PUSH
22380: LD_INT 112
22382: PUSH
22383: LD_INT 113
22385: PUSH
22386: LD_INT 114
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: ST_TO_ADDR
22409: GO 23356
22411: LD_INT 15
22413: DOUBLE
22414: EQUAL
22415: IFTRUE 22419
22417: GO 22631
22419: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22420: LD_ADDR_VAR 0 1
22424: PUSH
22425: LD_INT 1
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: LD_INT 3
22433: PUSH
22434: LD_INT 4
22436: PUSH
22437: LD_INT 5
22439: PUSH
22440: LD_INT 6
22442: PUSH
22443: LD_INT 7
22445: PUSH
22446: LD_INT 8
22448: PUSH
22449: LD_INT 9
22451: PUSH
22452: LD_INT 10
22454: PUSH
22455: LD_INT 11
22457: PUSH
22458: LD_INT 12
22460: PUSH
22461: LD_INT 13
22463: PUSH
22464: LD_INT 14
22466: PUSH
22467: LD_INT 15
22469: PUSH
22470: LD_INT 16
22472: PUSH
22473: LD_INT 17
22475: PUSH
22476: LD_INT 18
22478: PUSH
22479: LD_INT 19
22481: PUSH
22482: LD_INT 20
22484: PUSH
22485: LD_INT 21
22487: PUSH
22488: LD_INT 22
22490: PUSH
22491: LD_INT 23
22493: PUSH
22494: LD_INT 24
22496: PUSH
22497: LD_INT 25
22499: PUSH
22500: LD_INT 26
22502: PUSH
22503: LD_INT 27
22505: PUSH
22506: LD_INT 28
22508: PUSH
22509: LD_INT 29
22511: PUSH
22512: LD_INT 30
22514: PUSH
22515: LD_INT 31
22517: PUSH
22518: LD_INT 32
22520: PUSH
22521: LD_INT 33
22523: PUSH
22524: LD_INT 34
22526: PUSH
22527: LD_INT 36
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 101
22569: PUSH
22570: LD_INT 102
22572: PUSH
22573: LD_INT 103
22575: PUSH
22576: LD_INT 104
22578: PUSH
22579: LD_INT 105
22581: PUSH
22582: LD_INT 106
22584: PUSH
22585: LD_INT 107
22587: PUSH
22588: LD_INT 108
22590: PUSH
22591: LD_INT 109
22593: PUSH
22594: LD_INT 110
22596: PUSH
22597: LD_INT 111
22599: PUSH
22600: LD_INT 112
22602: PUSH
22603: LD_INT 113
22605: PUSH
22606: LD_INT 114
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: ST_TO_ADDR
22629: GO 23356
22631: LD_INT 16
22633: DOUBLE
22634: EQUAL
22635: IFTRUE 22639
22637: GO 22763
22639: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22640: LD_ADDR_VAR 0 1
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: LD_INT 4
22650: PUSH
22651: LD_INT 5
22653: PUSH
22654: LD_INT 7
22656: PUSH
22657: LD_INT 11
22659: PUSH
22660: LD_INT 12
22662: PUSH
22663: LD_INT 15
22665: PUSH
22666: LD_INT 16
22668: PUSH
22669: LD_INT 20
22671: PUSH
22672: LD_INT 21
22674: PUSH
22675: LD_INT 22
22677: PUSH
22678: LD_INT 23
22680: PUSH
22681: LD_INT 25
22683: PUSH
22684: LD_INT 26
22686: PUSH
22687: LD_INT 30
22689: PUSH
22690: LD_INT 31
22692: PUSH
22693: LD_INT 32
22695: PUSH
22696: LD_INT 33
22698: PUSH
22699: LD_INT 34
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 101
22725: PUSH
22726: LD_INT 102
22728: PUSH
22729: LD_INT 103
22731: PUSH
22732: LD_INT 106
22734: PUSH
22735: LD_INT 108
22737: PUSH
22738: LD_INT 112
22740: PUSH
22741: LD_INT 113
22743: PUSH
22744: LD_INT 114
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: ST_TO_ADDR
22761: GO 23356
22763: LD_INT 17
22765: DOUBLE
22766: EQUAL
22767: IFTRUE 22771
22769: GO 22983
22771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22772: LD_ADDR_VAR 0 1
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: LD_INT 2
22782: PUSH
22783: LD_INT 3
22785: PUSH
22786: LD_INT 4
22788: PUSH
22789: LD_INT 5
22791: PUSH
22792: LD_INT 6
22794: PUSH
22795: LD_INT 7
22797: PUSH
22798: LD_INT 8
22800: PUSH
22801: LD_INT 9
22803: PUSH
22804: LD_INT 10
22806: PUSH
22807: LD_INT 11
22809: PUSH
22810: LD_INT 12
22812: PUSH
22813: LD_INT 13
22815: PUSH
22816: LD_INT 14
22818: PUSH
22819: LD_INT 15
22821: PUSH
22822: LD_INT 16
22824: PUSH
22825: LD_INT 17
22827: PUSH
22828: LD_INT 18
22830: PUSH
22831: LD_INT 19
22833: PUSH
22834: LD_INT 20
22836: PUSH
22837: LD_INT 21
22839: PUSH
22840: LD_INT 22
22842: PUSH
22843: LD_INT 23
22845: PUSH
22846: LD_INT 24
22848: PUSH
22849: LD_INT 25
22851: PUSH
22852: LD_INT 26
22854: PUSH
22855: LD_INT 27
22857: PUSH
22858: LD_INT 28
22860: PUSH
22861: LD_INT 29
22863: PUSH
22864: LD_INT 30
22866: PUSH
22867: LD_INT 31
22869: PUSH
22870: LD_INT 32
22872: PUSH
22873: LD_INT 33
22875: PUSH
22876: LD_INT 34
22878: PUSH
22879: LD_INT 36
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 101
22921: PUSH
22922: LD_INT 102
22924: PUSH
22925: LD_INT 103
22927: PUSH
22928: LD_INT 104
22930: PUSH
22931: LD_INT 105
22933: PUSH
22934: LD_INT 106
22936: PUSH
22937: LD_INT 107
22939: PUSH
22940: LD_INT 108
22942: PUSH
22943: LD_INT 109
22945: PUSH
22946: LD_INT 110
22948: PUSH
22949: LD_INT 111
22951: PUSH
22952: LD_INT 112
22954: PUSH
22955: LD_INT 113
22957: PUSH
22958: LD_INT 114
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: ST_TO_ADDR
22981: GO 23356
22983: LD_INT 18
22985: DOUBLE
22986: EQUAL
22987: IFTRUE 22991
22989: GO 23127
22991: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22992: LD_ADDR_VAR 0 1
22996: PUSH
22997: LD_INT 2
22999: PUSH
23000: LD_INT 4
23002: PUSH
23003: LD_INT 5
23005: PUSH
23006: LD_INT 7
23008: PUSH
23009: LD_INT 11
23011: PUSH
23012: LD_INT 12
23014: PUSH
23015: LD_INT 15
23017: PUSH
23018: LD_INT 16
23020: PUSH
23021: LD_INT 20
23023: PUSH
23024: LD_INT 21
23026: PUSH
23027: LD_INT 22
23029: PUSH
23030: LD_INT 23
23032: PUSH
23033: LD_INT 25
23035: PUSH
23036: LD_INT 26
23038: PUSH
23039: LD_INT 30
23041: PUSH
23042: LD_INT 31
23044: PUSH
23045: LD_INT 32
23047: PUSH
23048: LD_INT 33
23050: PUSH
23051: LD_INT 34
23053: PUSH
23054: LD_INT 35
23056: PUSH
23057: LD_INT 36
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 101
23085: PUSH
23086: LD_INT 102
23088: PUSH
23089: LD_INT 103
23091: PUSH
23092: LD_INT 106
23094: PUSH
23095: LD_INT 108
23097: PUSH
23098: LD_INT 112
23100: PUSH
23101: LD_INT 113
23103: PUSH
23104: LD_INT 114
23106: PUSH
23107: LD_INT 115
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: ST_TO_ADDR
23125: GO 23356
23127: LD_INT 19
23129: DOUBLE
23130: EQUAL
23131: IFTRUE 23135
23133: GO 23355
23135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23136: LD_ADDR_VAR 0 1
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: LD_INT 3
23149: PUSH
23150: LD_INT 4
23152: PUSH
23153: LD_INT 5
23155: PUSH
23156: LD_INT 6
23158: PUSH
23159: LD_INT 7
23161: PUSH
23162: LD_INT 8
23164: PUSH
23165: LD_INT 9
23167: PUSH
23168: LD_INT 10
23170: PUSH
23171: LD_INT 11
23173: PUSH
23174: LD_INT 12
23176: PUSH
23177: LD_INT 13
23179: PUSH
23180: LD_INT 14
23182: PUSH
23183: LD_INT 15
23185: PUSH
23186: LD_INT 16
23188: PUSH
23189: LD_INT 17
23191: PUSH
23192: LD_INT 18
23194: PUSH
23195: LD_INT 19
23197: PUSH
23198: LD_INT 20
23200: PUSH
23201: LD_INT 21
23203: PUSH
23204: LD_INT 22
23206: PUSH
23207: LD_INT 23
23209: PUSH
23210: LD_INT 24
23212: PUSH
23213: LD_INT 25
23215: PUSH
23216: LD_INT 26
23218: PUSH
23219: LD_INT 27
23221: PUSH
23222: LD_INT 28
23224: PUSH
23225: LD_INT 29
23227: PUSH
23228: LD_INT 30
23230: PUSH
23231: LD_INT 31
23233: PUSH
23234: LD_INT 32
23236: PUSH
23237: LD_INT 33
23239: PUSH
23240: LD_INT 34
23242: PUSH
23243: LD_INT 35
23245: PUSH
23246: LD_INT 36
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 101
23289: PUSH
23290: LD_INT 102
23292: PUSH
23293: LD_INT 103
23295: PUSH
23296: LD_INT 104
23298: PUSH
23299: LD_INT 105
23301: PUSH
23302: LD_INT 106
23304: PUSH
23305: LD_INT 107
23307: PUSH
23308: LD_INT 108
23310: PUSH
23311: LD_INT 109
23313: PUSH
23314: LD_INT 110
23316: PUSH
23317: LD_INT 111
23319: PUSH
23320: LD_INT 112
23322: PUSH
23323: LD_INT 113
23325: PUSH
23326: LD_INT 114
23328: PUSH
23329: LD_INT 115
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: ST_TO_ADDR
23353: GO 23356
23355: POP
// end else
23356: GO 23575
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23358: LD_ADDR_VAR 0 1
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: LD_INT 2
23368: PUSH
23369: LD_INT 3
23371: PUSH
23372: LD_INT 4
23374: PUSH
23375: LD_INT 5
23377: PUSH
23378: LD_INT 6
23380: PUSH
23381: LD_INT 7
23383: PUSH
23384: LD_INT 8
23386: PUSH
23387: LD_INT 9
23389: PUSH
23390: LD_INT 10
23392: PUSH
23393: LD_INT 11
23395: PUSH
23396: LD_INT 12
23398: PUSH
23399: LD_INT 13
23401: PUSH
23402: LD_INT 14
23404: PUSH
23405: LD_INT 15
23407: PUSH
23408: LD_INT 16
23410: PUSH
23411: LD_INT 17
23413: PUSH
23414: LD_INT 18
23416: PUSH
23417: LD_INT 19
23419: PUSH
23420: LD_INT 20
23422: PUSH
23423: LD_INT 21
23425: PUSH
23426: LD_INT 22
23428: PUSH
23429: LD_INT 23
23431: PUSH
23432: LD_INT 24
23434: PUSH
23435: LD_INT 25
23437: PUSH
23438: LD_INT 26
23440: PUSH
23441: LD_INT 27
23443: PUSH
23444: LD_INT 28
23446: PUSH
23447: LD_INT 29
23449: PUSH
23450: LD_INT 30
23452: PUSH
23453: LD_INT 31
23455: PUSH
23456: LD_INT 32
23458: PUSH
23459: LD_INT 33
23461: PUSH
23462: LD_INT 34
23464: PUSH
23465: LD_INT 35
23467: PUSH
23468: LD_INT 36
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 101
23511: PUSH
23512: LD_INT 102
23514: PUSH
23515: LD_INT 103
23517: PUSH
23518: LD_INT 104
23520: PUSH
23521: LD_INT 105
23523: PUSH
23524: LD_INT 106
23526: PUSH
23527: LD_INT 107
23529: PUSH
23530: LD_INT 108
23532: PUSH
23533: LD_INT 109
23535: PUSH
23536: LD_INT 110
23538: PUSH
23539: LD_INT 111
23541: PUSH
23542: LD_INT 112
23544: PUSH
23545: LD_INT 113
23547: PUSH
23548: LD_INT 114
23550: PUSH
23551: LD_INT 115
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: ST_TO_ADDR
// if result then
23575: LD_VAR 0 1
23579: IFFALSE 23868
// begin normal :=  ;
23581: LD_ADDR_VAR 0 3
23585: PUSH
23586: LD_STRING 
23588: ST_TO_ADDR
// hardcore :=  ;
23589: LD_ADDR_VAR 0 4
23593: PUSH
23594: LD_STRING 
23596: ST_TO_ADDR
// for i = 1 to normalCounter do
23597: LD_ADDR_VAR 0 5
23601: PUSH
23602: DOUBLE
23603: LD_INT 1
23605: DEC
23606: ST_TO_ADDR
23607: LD_EXP 70
23611: PUSH
23612: FOR_TO
23613: IFFALSE 23714
// begin tmp := 0 ;
23615: LD_ADDR_VAR 0 2
23619: PUSH
23620: LD_STRING 0
23622: ST_TO_ADDR
// if result [ 1 ] then
23623: LD_VAR 0 1
23627: PUSH
23628: LD_INT 1
23630: ARRAY
23631: IFFALSE 23696
// if result [ 1 ] [ 1 ] = i then
23633: LD_VAR 0 1
23637: PUSH
23638: LD_INT 1
23640: ARRAY
23641: PUSH
23642: LD_INT 1
23644: ARRAY
23645: PUSH
23646: LD_VAR 0 5
23650: EQUAL
23651: IFFALSE 23696
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23653: LD_ADDR_VAR 0 1
23657: PUSH
23658: LD_VAR 0 1
23662: PPUSH
23663: LD_INT 1
23665: PPUSH
23666: LD_VAR 0 1
23670: PUSH
23671: LD_INT 1
23673: ARRAY
23674: PPUSH
23675: LD_INT 1
23677: PPUSH
23678: CALL_OW 3
23682: PPUSH
23683: CALL_OW 1
23687: ST_TO_ADDR
// tmp := 1 ;
23688: LD_ADDR_VAR 0 2
23692: PUSH
23693: LD_STRING 1
23695: ST_TO_ADDR
// end ; normal := normal & tmp ;
23696: LD_ADDR_VAR 0 3
23700: PUSH
23701: LD_VAR 0 3
23705: PUSH
23706: LD_VAR 0 2
23710: STR
23711: ST_TO_ADDR
// end ;
23712: GO 23612
23714: POP
23715: POP
// for i = 1 to hardcoreCounter do
23716: LD_ADDR_VAR 0 5
23720: PUSH
23721: DOUBLE
23722: LD_INT 1
23724: DEC
23725: ST_TO_ADDR
23726: LD_EXP 71
23730: PUSH
23731: FOR_TO
23732: IFFALSE 23837
// begin tmp := 0 ;
23734: LD_ADDR_VAR 0 2
23738: PUSH
23739: LD_STRING 0
23741: ST_TO_ADDR
// if result [ 2 ] then
23742: LD_VAR 0 1
23746: PUSH
23747: LD_INT 2
23749: ARRAY
23750: IFFALSE 23819
// if result [ 2 ] [ 1 ] = 100 + i then
23752: LD_VAR 0 1
23756: PUSH
23757: LD_INT 2
23759: ARRAY
23760: PUSH
23761: LD_INT 1
23763: ARRAY
23764: PUSH
23765: LD_INT 100
23767: PUSH
23768: LD_VAR 0 5
23772: PLUS
23773: EQUAL
23774: IFFALSE 23819
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23776: LD_ADDR_VAR 0 1
23780: PUSH
23781: LD_VAR 0 1
23785: PPUSH
23786: LD_INT 2
23788: PPUSH
23789: LD_VAR 0 1
23793: PUSH
23794: LD_INT 2
23796: ARRAY
23797: PPUSH
23798: LD_INT 1
23800: PPUSH
23801: CALL_OW 3
23805: PPUSH
23806: CALL_OW 1
23810: ST_TO_ADDR
// tmp := 1 ;
23811: LD_ADDR_VAR 0 2
23815: PUSH
23816: LD_STRING 1
23818: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23819: LD_ADDR_VAR 0 4
23823: PUSH
23824: LD_VAR 0 4
23828: PUSH
23829: LD_VAR 0 2
23833: STR
23834: ST_TO_ADDR
// end ;
23835: GO 23731
23837: POP
23838: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23839: LD_STRING getStreamItemsFromMission("
23841: PUSH
23842: LD_VAR 0 3
23846: STR
23847: PUSH
23848: LD_STRING ","
23850: STR
23851: PUSH
23852: LD_VAR 0 4
23856: STR
23857: PUSH
23858: LD_STRING ")
23860: STR
23861: PPUSH
23862: CALL_OW 559
// end else
23866: GO 23875
// ToLua ( getStreamItemsFromMission("","") ) ;
23868: LD_STRING getStreamItemsFromMission("","")
23870: PPUSH
23871: CALL_OW 559
// end ;
23875: LD_VAR 0 1
23879: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23880: LD_EXP 69
23884: PUSH
23885: LD_EXP 74
23889: AND
23890: IFFALSE 24014
23892: GO 23894
23894: DISABLE
23895: LD_INT 0
23897: PPUSH
23898: PPUSH
// begin enable ;
23899: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23900: LD_ADDR_VAR 0 2
23904: PUSH
23905: LD_INT 22
23907: PUSH
23908: LD_OWVAR 2
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: LD_INT 34
23922: PUSH
23923: LD_INT 7
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 34
23932: PUSH
23933: LD_INT 45
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 34
23942: PUSH
23943: LD_INT 28
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 34
23952: PUSH
23953: LD_INT 47
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PPUSH
23971: CALL_OW 69
23975: ST_TO_ADDR
// if not tmp then
23976: LD_VAR 0 2
23980: NOT
23981: IFFALSE 23985
// exit ;
23983: GO 24014
// for i in tmp do
23985: LD_ADDR_VAR 0 1
23989: PUSH
23990: LD_VAR 0 2
23994: PUSH
23995: FOR_IN
23996: IFFALSE 24012
// begin SetLives ( i , 0 ) ;
23998: LD_VAR 0 1
24002: PPUSH
24003: LD_INT 0
24005: PPUSH
24006: CALL_OW 234
// end ;
24010: GO 23995
24012: POP
24013: POP
// end ;
24014: PPOPN 2
24016: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24017: LD_EXP 69
24021: PUSH
24022: LD_EXP 75
24026: AND
24027: IFFALSE 24111
24029: GO 24031
24031: DISABLE
24032: LD_INT 0
24034: PPUSH
24035: PPUSH
// begin enable ;
24036: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24037: LD_ADDR_VAR 0 2
24041: PUSH
24042: LD_INT 22
24044: PUSH
24045: LD_OWVAR 2
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 32
24056: PUSH
24057: LD_INT 3
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PPUSH
24068: CALL_OW 69
24072: ST_TO_ADDR
// if not tmp then
24073: LD_VAR 0 2
24077: NOT
24078: IFFALSE 24082
// exit ;
24080: GO 24111
// for i in tmp do
24082: LD_ADDR_VAR 0 1
24086: PUSH
24087: LD_VAR 0 2
24091: PUSH
24092: FOR_IN
24093: IFFALSE 24109
// begin SetLives ( i , 0 ) ;
24095: LD_VAR 0 1
24099: PPUSH
24100: LD_INT 0
24102: PPUSH
24103: CALL_OW 234
// end ;
24107: GO 24092
24109: POP
24110: POP
// end ;
24111: PPOPN 2
24113: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24114: LD_EXP 69
24118: PUSH
24119: LD_EXP 72
24123: AND
24124: IFFALSE 24217
24126: GO 24128
24128: DISABLE
24129: LD_INT 0
24131: PPUSH
// begin enable ;
24132: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24133: LD_ADDR_VAR 0 1
24137: PUSH
24138: LD_INT 22
24140: PUSH
24141: LD_OWVAR 2
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: LD_INT 25
24155: PUSH
24156: LD_INT 5
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 25
24165: PUSH
24166: LD_INT 9
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 25
24175: PUSH
24176: LD_INT 8
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PPUSH
24193: CALL_OW 69
24197: PUSH
24198: FOR_IN
24199: IFFALSE 24215
// begin SetClass ( i , 1 ) ;
24201: LD_VAR 0 1
24205: PPUSH
24206: LD_INT 1
24208: PPUSH
24209: CALL_OW 336
// end ;
24213: GO 24198
24215: POP
24216: POP
// end ;
24217: PPOPN 1
24219: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24220: LD_EXP 69
24224: PUSH
24225: LD_EXP 73
24229: AND
24230: PUSH
24231: LD_OWVAR 65
24235: PUSH
24236: LD_INT 7
24238: LESS
24239: AND
24240: IFFALSE 24254
24242: GO 24244
24244: DISABLE
// begin enable ;
24245: ENABLE
// game_speed := 7 ;
24246: LD_ADDR_OWVAR 65
24250: PUSH
24251: LD_INT 7
24253: ST_TO_ADDR
// end ;
24254: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24255: LD_EXP 69
24259: PUSH
24260: LD_EXP 76
24264: AND
24265: IFFALSE 24467
24267: GO 24269
24269: DISABLE
24270: LD_INT 0
24272: PPUSH
24273: PPUSH
24274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24275: LD_ADDR_VAR 0 3
24279: PUSH
24280: LD_INT 81
24282: PUSH
24283: LD_OWVAR 2
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 21
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PPUSH
24306: CALL_OW 69
24310: ST_TO_ADDR
// if not tmp then
24311: LD_VAR 0 3
24315: NOT
24316: IFFALSE 24320
// exit ;
24318: GO 24467
// if tmp > 5 then
24320: LD_VAR 0 3
24324: PUSH
24325: LD_INT 5
24327: GREATER
24328: IFFALSE 24340
// k := 5 else
24330: LD_ADDR_VAR 0 2
24334: PUSH
24335: LD_INT 5
24337: ST_TO_ADDR
24338: GO 24350
// k := tmp ;
24340: LD_ADDR_VAR 0 2
24344: PUSH
24345: LD_VAR 0 3
24349: ST_TO_ADDR
// for i := 1 to k do
24350: LD_ADDR_VAR 0 1
24354: PUSH
24355: DOUBLE
24356: LD_INT 1
24358: DEC
24359: ST_TO_ADDR
24360: LD_VAR 0 2
24364: PUSH
24365: FOR_TO
24366: IFFALSE 24465
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24368: LD_VAR 0 3
24372: PUSH
24373: LD_VAR 0 1
24377: ARRAY
24378: PPUSH
24379: LD_VAR 0 1
24383: PUSH
24384: LD_INT 4
24386: MOD
24387: PUSH
24388: LD_INT 1
24390: PLUS
24391: PPUSH
24392: CALL_OW 259
24396: PUSH
24397: LD_INT 10
24399: LESS
24400: IFFALSE 24463
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24402: LD_VAR 0 3
24406: PUSH
24407: LD_VAR 0 1
24411: ARRAY
24412: PPUSH
24413: LD_VAR 0 1
24417: PUSH
24418: LD_INT 4
24420: MOD
24421: PUSH
24422: LD_INT 1
24424: PLUS
24425: PPUSH
24426: LD_VAR 0 3
24430: PUSH
24431: LD_VAR 0 1
24435: ARRAY
24436: PPUSH
24437: LD_VAR 0 1
24441: PUSH
24442: LD_INT 4
24444: MOD
24445: PUSH
24446: LD_INT 1
24448: PLUS
24449: PPUSH
24450: CALL_OW 259
24454: PUSH
24455: LD_INT 1
24457: PLUS
24458: PPUSH
24459: CALL_OW 237
24463: GO 24365
24465: POP
24466: POP
// end ;
24467: PPOPN 3
24469: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24470: LD_EXP 69
24474: PUSH
24475: LD_EXP 77
24479: AND
24480: IFFALSE 24500
24482: GO 24484
24484: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24485: LD_INT 4
24487: PPUSH
24488: LD_OWVAR 2
24492: PPUSH
24493: LD_INT 0
24495: PPUSH
24496: CALL_OW 324
24500: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24501: LD_EXP 69
24505: PUSH
24506: LD_EXP 106
24510: AND
24511: IFFALSE 24531
24513: GO 24515
24515: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24516: LD_INT 19
24518: PPUSH
24519: LD_OWVAR 2
24523: PPUSH
24524: LD_INT 0
24526: PPUSH
24527: CALL_OW 324
24531: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24532: LD_EXP 69
24536: PUSH
24537: LD_EXP 78
24541: AND
24542: IFFALSE 24644
24544: GO 24546
24546: DISABLE
24547: LD_INT 0
24549: PPUSH
24550: PPUSH
// begin enable ;
24551: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24552: LD_ADDR_VAR 0 2
24556: PUSH
24557: LD_INT 22
24559: PUSH
24560: LD_OWVAR 2
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 2
24571: PUSH
24572: LD_INT 34
24574: PUSH
24575: LD_INT 11
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 34
24584: PUSH
24585: LD_INT 30
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PPUSH
24601: CALL_OW 69
24605: ST_TO_ADDR
// if not tmp then
24606: LD_VAR 0 2
24610: NOT
24611: IFFALSE 24615
// exit ;
24613: GO 24644
// for i in tmp do
24615: LD_ADDR_VAR 0 1
24619: PUSH
24620: LD_VAR 0 2
24624: PUSH
24625: FOR_IN
24626: IFFALSE 24642
// begin SetLives ( i , 0 ) ;
24628: LD_VAR 0 1
24632: PPUSH
24633: LD_INT 0
24635: PPUSH
24636: CALL_OW 234
// end ;
24640: GO 24625
24642: POP
24643: POP
// end ;
24644: PPOPN 2
24646: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24647: LD_EXP 69
24651: PUSH
24652: LD_EXP 79
24656: AND
24657: IFFALSE 24677
24659: GO 24661
24661: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24662: LD_INT 32
24664: PPUSH
24665: LD_OWVAR 2
24669: PPUSH
24670: LD_INT 0
24672: PPUSH
24673: CALL_OW 324
24677: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24678: LD_EXP 69
24682: PUSH
24683: LD_EXP 80
24687: AND
24688: IFFALSE 24869
24690: GO 24692
24692: DISABLE
24693: LD_INT 0
24695: PPUSH
24696: PPUSH
24697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24698: LD_ADDR_VAR 0 2
24702: PUSH
24703: LD_INT 22
24705: PUSH
24706: LD_OWVAR 2
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 33
24717: PUSH
24718: LD_INT 3
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PPUSH
24729: CALL_OW 69
24733: ST_TO_ADDR
// if not tmp then
24734: LD_VAR 0 2
24738: NOT
24739: IFFALSE 24743
// exit ;
24741: GO 24869
// side := 0 ;
24743: LD_ADDR_VAR 0 3
24747: PUSH
24748: LD_INT 0
24750: ST_TO_ADDR
// for i := 1 to 8 do
24751: LD_ADDR_VAR 0 1
24755: PUSH
24756: DOUBLE
24757: LD_INT 1
24759: DEC
24760: ST_TO_ADDR
24761: LD_INT 8
24763: PUSH
24764: FOR_TO
24765: IFFALSE 24813
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24767: LD_OWVAR 2
24771: PUSH
24772: LD_VAR 0 1
24776: NONEQUAL
24777: PUSH
24778: LD_OWVAR 2
24782: PPUSH
24783: LD_VAR 0 1
24787: PPUSH
24788: CALL_OW 81
24792: PUSH
24793: LD_INT 2
24795: EQUAL
24796: AND
24797: IFFALSE 24811
// begin side := i ;
24799: LD_ADDR_VAR 0 3
24803: PUSH
24804: LD_VAR 0 1
24808: ST_TO_ADDR
// break ;
24809: GO 24813
// end ;
24811: GO 24764
24813: POP
24814: POP
// if not side then
24815: LD_VAR 0 3
24819: NOT
24820: IFFALSE 24824
// exit ;
24822: GO 24869
// for i := 1 to tmp do
24824: LD_ADDR_VAR 0 1
24828: PUSH
24829: DOUBLE
24830: LD_INT 1
24832: DEC
24833: ST_TO_ADDR
24834: LD_VAR 0 2
24838: PUSH
24839: FOR_TO
24840: IFFALSE 24867
// if Prob ( 60 ) then
24842: LD_INT 60
24844: PPUSH
24845: CALL_OW 13
24849: IFFALSE 24865
// SetSide ( i , side ) ;
24851: LD_VAR 0 1
24855: PPUSH
24856: LD_VAR 0 3
24860: PPUSH
24861: CALL_OW 235
24865: GO 24839
24867: POP
24868: POP
// end ;
24869: PPOPN 3
24871: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24872: LD_EXP 69
24876: PUSH
24877: LD_EXP 82
24881: AND
24882: IFFALSE 25001
24884: GO 24886
24886: DISABLE
24887: LD_INT 0
24889: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24890: LD_ADDR_VAR 0 1
24894: PUSH
24895: LD_INT 22
24897: PUSH
24898: LD_OWVAR 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 21
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 3
24919: PUSH
24920: LD_INT 23
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: PPUSH
24939: CALL_OW 69
24943: PUSH
24944: FOR_IN
24945: IFFALSE 24999
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24947: LD_VAR 0 1
24951: PPUSH
24952: CALL_OW 257
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 3
24965: PUSH
24966: LD_INT 4
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: IN
24975: IFFALSE 24997
// SetClass ( un , rand ( 1 , 4 ) ) ;
24977: LD_VAR 0 1
24981: PPUSH
24982: LD_INT 1
24984: PPUSH
24985: LD_INT 4
24987: PPUSH
24988: CALL_OW 12
24992: PPUSH
24993: CALL_OW 336
24997: GO 24944
24999: POP
25000: POP
// end ;
25001: PPOPN 1
25003: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25004: LD_EXP 69
25008: PUSH
25009: LD_EXP 81
25013: AND
25014: IFFALSE 25093
25016: GO 25018
25018: DISABLE
25019: LD_INT 0
25021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25022: LD_ADDR_VAR 0 1
25026: PUSH
25027: LD_INT 22
25029: PUSH
25030: LD_OWVAR 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 21
25041: PUSH
25042: LD_INT 3
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PPUSH
25053: CALL_OW 69
25057: ST_TO_ADDR
// if not tmp then
25058: LD_VAR 0 1
25062: NOT
25063: IFFALSE 25067
// exit ;
25065: GO 25093
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25067: LD_VAR 0 1
25071: PUSH
25072: LD_INT 1
25074: PPUSH
25075: LD_VAR 0 1
25079: PPUSH
25080: CALL_OW 12
25084: ARRAY
25085: PPUSH
25086: LD_INT 100
25088: PPUSH
25089: CALL_OW 234
// end ;
25093: PPOPN 1
25095: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25096: LD_EXP 69
25100: PUSH
25101: LD_EXP 83
25105: AND
25106: IFFALSE 25204
25108: GO 25110
25110: DISABLE
25111: LD_INT 0
25113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25114: LD_ADDR_VAR 0 1
25118: PUSH
25119: LD_INT 22
25121: PUSH
25122: LD_OWVAR 2
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 21
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PPUSH
25145: CALL_OW 69
25149: ST_TO_ADDR
// if not tmp then
25150: LD_VAR 0 1
25154: NOT
25155: IFFALSE 25159
// exit ;
25157: GO 25204
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25159: LD_VAR 0 1
25163: PUSH
25164: LD_INT 1
25166: PPUSH
25167: LD_VAR 0 1
25171: PPUSH
25172: CALL_OW 12
25176: ARRAY
25177: PPUSH
25178: LD_INT 1
25180: PPUSH
25181: LD_INT 4
25183: PPUSH
25184: CALL_OW 12
25188: PPUSH
25189: LD_INT 3000
25191: PPUSH
25192: LD_INT 9000
25194: PPUSH
25195: CALL_OW 12
25199: PPUSH
25200: CALL_OW 492
// end ;
25204: PPOPN 1
25206: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25207: LD_EXP 69
25211: PUSH
25212: LD_EXP 84
25216: AND
25217: IFFALSE 25237
25219: GO 25221
25221: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25222: LD_INT 1
25224: PPUSH
25225: LD_OWVAR 2
25229: PPUSH
25230: LD_INT 0
25232: PPUSH
25233: CALL_OW 324
25237: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25238: LD_EXP 69
25242: PUSH
25243: LD_EXP 85
25247: AND
25248: IFFALSE 25331
25250: GO 25252
25252: DISABLE
25253: LD_INT 0
25255: PPUSH
25256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25257: LD_ADDR_VAR 0 2
25261: PUSH
25262: LD_INT 22
25264: PUSH
25265: LD_OWVAR 2
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 21
25276: PUSH
25277: LD_INT 3
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PPUSH
25288: CALL_OW 69
25292: ST_TO_ADDR
// if not tmp then
25293: LD_VAR 0 2
25297: NOT
25298: IFFALSE 25302
// exit ;
25300: GO 25331
// for i in tmp do
25302: LD_ADDR_VAR 0 1
25306: PUSH
25307: LD_VAR 0 2
25311: PUSH
25312: FOR_IN
25313: IFFALSE 25329
// SetBLevel ( i , 10 ) ;
25315: LD_VAR 0 1
25319: PPUSH
25320: LD_INT 10
25322: PPUSH
25323: CALL_OW 241
25327: GO 25312
25329: POP
25330: POP
// end ;
25331: PPOPN 2
25333: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25334: LD_EXP 69
25338: PUSH
25339: LD_EXP 86
25343: AND
25344: IFFALSE 25455
25346: GO 25348
25348: DISABLE
25349: LD_INT 0
25351: PPUSH
25352: PPUSH
25353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25354: LD_ADDR_VAR 0 3
25358: PUSH
25359: LD_INT 22
25361: PUSH
25362: LD_OWVAR 2
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 25
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PPUSH
25385: CALL_OW 69
25389: ST_TO_ADDR
// if not tmp then
25390: LD_VAR 0 3
25394: NOT
25395: IFFALSE 25399
// exit ;
25397: GO 25455
// un := tmp [ rand ( 1 , tmp ) ] ;
25399: LD_ADDR_VAR 0 2
25403: PUSH
25404: LD_VAR 0 3
25408: PUSH
25409: LD_INT 1
25411: PPUSH
25412: LD_VAR 0 3
25416: PPUSH
25417: CALL_OW 12
25421: ARRAY
25422: ST_TO_ADDR
// if Crawls ( un ) then
25423: LD_VAR 0 2
25427: PPUSH
25428: CALL_OW 318
25432: IFFALSE 25443
// ComWalk ( un ) ;
25434: LD_VAR 0 2
25438: PPUSH
25439: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25443: LD_VAR 0 2
25447: PPUSH
25448: LD_INT 5
25450: PPUSH
25451: CALL_OW 336
// end ;
25455: PPOPN 3
25457: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25458: LD_EXP 69
25462: PUSH
25463: LD_EXP 87
25467: AND
25468: PUSH
25469: LD_OWVAR 67
25473: PUSH
25474: LD_INT 3
25476: LESS
25477: AND
25478: IFFALSE 25497
25480: GO 25482
25482: DISABLE
// Difficulty := Difficulty + 1 ;
25483: LD_ADDR_OWVAR 67
25487: PUSH
25488: LD_OWVAR 67
25492: PUSH
25493: LD_INT 1
25495: PLUS
25496: ST_TO_ADDR
25497: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25498: LD_EXP 69
25502: PUSH
25503: LD_EXP 88
25507: AND
25508: IFFALSE 25611
25510: GO 25512
25512: DISABLE
25513: LD_INT 0
25515: PPUSH
// begin for i := 1 to 5 do
25516: LD_ADDR_VAR 0 1
25520: PUSH
25521: DOUBLE
25522: LD_INT 1
25524: DEC
25525: ST_TO_ADDR
25526: LD_INT 5
25528: PUSH
25529: FOR_TO
25530: IFFALSE 25609
// begin uc_nation := nation_nature ;
25532: LD_ADDR_OWVAR 21
25536: PUSH
25537: LD_INT 0
25539: ST_TO_ADDR
// uc_side := 0 ;
25540: LD_ADDR_OWVAR 20
25544: PUSH
25545: LD_INT 0
25547: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25548: LD_ADDR_OWVAR 29
25552: PUSH
25553: LD_INT 12
25555: PUSH
25556: LD_INT 12
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: ST_TO_ADDR
// hc_agressivity := 20 ;
25563: LD_ADDR_OWVAR 35
25567: PUSH
25568: LD_INT 20
25570: ST_TO_ADDR
// hc_class := class_tiger ;
25571: LD_ADDR_OWVAR 28
25575: PUSH
25576: LD_INT 14
25578: ST_TO_ADDR
// hc_gallery :=  ;
25579: LD_ADDR_OWVAR 33
25583: PUSH
25584: LD_STRING 
25586: ST_TO_ADDR
// hc_name :=  ;
25587: LD_ADDR_OWVAR 26
25591: PUSH
25592: LD_STRING 
25594: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25595: CALL_OW 44
25599: PPUSH
25600: LD_INT 0
25602: PPUSH
25603: CALL_OW 51
// end ;
25607: GO 25529
25609: POP
25610: POP
// end ;
25611: PPOPN 1
25613: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25614: LD_EXP 69
25618: PUSH
25619: LD_EXP 89
25623: AND
25624: IFFALSE 25633
25626: GO 25628
25628: DISABLE
// StreamSibBomb ;
25629: CALL 25634 0 0
25633: END
// export function StreamSibBomb ; var i , x , y ; begin
25634: LD_INT 0
25636: PPUSH
25637: PPUSH
25638: PPUSH
25639: PPUSH
// result := false ;
25640: LD_ADDR_VAR 0 1
25644: PUSH
25645: LD_INT 0
25647: ST_TO_ADDR
// for i := 1 to 16 do
25648: LD_ADDR_VAR 0 2
25652: PUSH
25653: DOUBLE
25654: LD_INT 1
25656: DEC
25657: ST_TO_ADDR
25658: LD_INT 16
25660: PUSH
25661: FOR_TO
25662: IFFALSE 25861
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_INT 10
25671: PUSH
25672: LD_INT 20
25674: PUSH
25675: LD_INT 30
25677: PUSH
25678: LD_INT 40
25680: PUSH
25681: LD_INT 50
25683: PUSH
25684: LD_INT 60
25686: PUSH
25687: LD_INT 70
25689: PUSH
25690: LD_INT 80
25692: PUSH
25693: LD_INT 90
25695: PUSH
25696: LD_INT 100
25698: PUSH
25699: LD_INT 110
25701: PUSH
25702: LD_INT 120
25704: PUSH
25705: LD_INT 130
25707: PUSH
25708: LD_INT 140
25710: PUSH
25711: LD_INT 150
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: PPUSH
25734: LD_INT 15
25736: PPUSH
25737: CALL_OW 12
25741: ARRAY
25742: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25743: LD_ADDR_VAR 0 4
25747: PUSH
25748: LD_INT 10
25750: PUSH
25751: LD_INT 20
25753: PUSH
25754: LD_INT 30
25756: PUSH
25757: LD_INT 40
25759: PUSH
25760: LD_INT 50
25762: PUSH
25763: LD_INT 60
25765: PUSH
25766: LD_INT 70
25768: PUSH
25769: LD_INT 80
25771: PUSH
25772: LD_INT 90
25774: PUSH
25775: LD_INT 100
25777: PUSH
25778: LD_INT 110
25780: PUSH
25781: LD_INT 120
25783: PUSH
25784: LD_INT 130
25786: PUSH
25787: LD_INT 140
25789: PUSH
25790: LD_INT 150
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 1
25812: PPUSH
25813: LD_INT 15
25815: PPUSH
25816: CALL_OW 12
25820: ARRAY
25821: ST_TO_ADDR
// if ValidHex ( x , y ) then
25822: LD_VAR 0 3
25826: PPUSH
25827: LD_VAR 0 4
25831: PPUSH
25832: CALL_OW 488
25836: IFFALSE 25859
// begin result := [ x , y ] ;
25838: LD_ADDR_VAR 0 1
25842: PUSH
25843: LD_VAR 0 3
25847: PUSH
25848: LD_VAR 0 4
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: ST_TO_ADDR
// break ;
25857: GO 25861
// end ; end ;
25859: GO 25661
25861: POP
25862: POP
// if result then
25863: LD_VAR 0 1
25867: IFFALSE 25927
// begin ToLua ( playSibBomb() ) ;
25869: LD_STRING playSibBomb()
25871: PPUSH
25872: CALL_OW 559
// wait ( 0 0$14 ) ;
25876: LD_INT 490
25878: PPUSH
25879: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25883: LD_VAR 0 1
25887: PUSH
25888: LD_INT 1
25890: ARRAY
25891: PPUSH
25892: LD_VAR 0 1
25896: PUSH
25897: LD_INT 2
25899: ARRAY
25900: PPUSH
25901: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25905: LD_VAR 0 1
25909: PUSH
25910: LD_INT 1
25912: ARRAY
25913: PPUSH
25914: LD_VAR 0 1
25918: PUSH
25919: LD_INT 2
25921: ARRAY
25922: PPUSH
25923: CALL_OW 429
// end ; end ;
25927: LD_VAR 0 1
25931: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25932: LD_EXP 69
25936: PUSH
25937: LD_EXP 91
25941: AND
25942: IFFALSE 25954
25944: GO 25946
25946: DISABLE
// YouLost (  ) ;
25947: LD_STRING 
25949: PPUSH
25950: CALL_OW 104
25954: END
// every 0 0$1 trigger StreamModeActive and sFog do
25955: LD_EXP 69
25959: PUSH
25960: LD_EXP 90
25964: AND
25965: IFFALSE 25979
25967: GO 25969
25969: DISABLE
// FogOff ( your_side ) ;
25970: LD_OWVAR 2
25974: PPUSH
25975: CALL_OW 344
25979: END
// every 0 0$1 trigger StreamModeActive and sSun do
25980: LD_EXP 69
25984: PUSH
25985: LD_EXP 92
25989: AND
25990: IFFALSE 26018
25992: GO 25994
25994: DISABLE
// begin solar_recharge_percent := 0 ;
25995: LD_ADDR_OWVAR 79
25999: PUSH
26000: LD_INT 0
26002: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26003: LD_INT 10500
26005: PPUSH
26006: CALL_OW 67
// solar_recharge_percent := 100 ;
26010: LD_ADDR_OWVAR 79
26014: PUSH
26015: LD_INT 100
26017: ST_TO_ADDR
// end ;
26018: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26019: LD_EXP 69
26023: PUSH
26024: LD_EXP 93
26028: AND
26029: IFFALSE 26268
26031: GO 26033
26033: DISABLE
26034: LD_INT 0
26036: PPUSH
26037: PPUSH
26038: PPUSH
// begin tmp := [ ] ;
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: EMPTY
26045: ST_TO_ADDR
// for i := 1 to 6 do
26046: LD_ADDR_VAR 0 1
26050: PUSH
26051: DOUBLE
26052: LD_INT 1
26054: DEC
26055: ST_TO_ADDR
26056: LD_INT 6
26058: PUSH
26059: FOR_TO
26060: IFFALSE 26165
// begin uc_nation := nation_nature ;
26062: LD_ADDR_OWVAR 21
26066: PUSH
26067: LD_INT 0
26069: ST_TO_ADDR
// uc_side := 0 ;
26070: LD_ADDR_OWVAR 20
26074: PUSH
26075: LD_INT 0
26077: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26078: LD_ADDR_OWVAR 29
26082: PUSH
26083: LD_INT 12
26085: PUSH
26086: LD_INT 12
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: ST_TO_ADDR
// hc_agressivity := 20 ;
26093: LD_ADDR_OWVAR 35
26097: PUSH
26098: LD_INT 20
26100: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26101: LD_ADDR_OWVAR 28
26105: PUSH
26106: LD_INT 17
26108: ST_TO_ADDR
// hc_gallery :=  ;
26109: LD_ADDR_OWVAR 33
26113: PUSH
26114: LD_STRING 
26116: ST_TO_ADDR
// hc_name :=  ;
26117: LD_ADDR_OWVAR 26
26121: PUSH
26122: LD_STRING 
26124: ST_TO_ADDR
// un := CreateHuman ;
26125: LD_ADDR_VAR 0 2
26129: PUSH
26130: CALL_OW 44
26134: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26135: LD_VAR 0 2
26139: PPUSH
26140: LD_INT 1
26142: PPUSH
26143: CALL_OW 51
// tmp := tmp ^ un ;
26147: LD_ADDR_VAR 0 3
26151: PUSH
26152: LD_VAR 0 3
26156: PUSH
26157: LD_VAR 0 2
26161: ADD
26162: ST_TO_ADDR
// end ;
26163: GO 26059
26165: POP
26166: POP
// repeat wait ( 0 0$1 ) ;
26167: LD_INT 35
26169: PPUSH
26170: CALL_OW 67
// for un in tmp do
26174: LD_ADDR_VAR 0 2
26178: PUSH
26179: LD_VAR 0 3
26183: PUSH
26184: FOR_IN
26185: IFFALSE 26259
// begin if IsDead ( un ) then
26187: LD_VAR 0 2
26191: PPUSH
26192: CALL_OW 301
26196: IFFALSE 26216
// begin tmp := tmp diff un ;
26198: LD_ADDR_VAR 0 3
26202: PUSH
26203: LD_VAR 0 3
26207: PUSH
26208: LD_VAR 0 2
26212: DIFF
26213: ST_TO_ADDR
// continue ;
26214: GO 26184
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26216: LD_VAR 0 2
26220: PPUSH
26221: LD_INT 3
26223: PUSH
26224: LD_INT 22
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PPUSH
26238: CALL_OW 69
26242: PPUSH
26243: LD_VAR 0 2
26247: PPUSH
26248: CALL_OW 74
26252: PPUSH
26253: CALL_OW 115
// end ;
26257: GO 26184
26259: POP
26260: POP
// until not tmp ;
26261: LD_VAR 0 3
26265: NOT
26266: IFFALSE 26167
// end ;
26268: PPOPN 3
26270: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26271: LD_EXP 69
26275: PUSH
26276: LD_EXP 94
26280: AND
26281: IFFALSE 26335
26283: GO 26285
26285: DISABLE
// begin ToLua ( displayTroll(); ) ;
26286: LD_STRING displayTroll();
26288: PPUSH
26289: CALL_OW 559
// wait ( 3 3$00 ) ;
26293: LD_INT 6300
26295: PPUSH
26296: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26300: LD_STRING hideTroll();
26302: PPUSH
26303: CALL_OW 559
// wait ( 1 1$00 ) ;
26307: LD_INT 2100
26309: PPUSH
26310: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26314: LD_STRING displayTroll();
26316: PPUSH
26317: CALL_OW 559
// wait ( 1 1$00 ) ;
26321: LD_INT 2100
26323: PPUSH
26324: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26328: LD_STRING hideTroll();
26330: PPUSH
26331: CALL_OW 559
// end ;
26335: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26336: LD_EXP 69
26340: PUSH
26341: LD_EXP 95
26345: AND
26346: IFFALSE 26409
26348: GO 26350
26350: DISABLE
26351: LD_INT 0
26353: PPUSH
// begin p := 0 ;
26354: LD_ADDR_VAR 0 1
26358: PUSH
26359: LD_INT 0
26361: ST_TO_ADDR
// repeat game_speed := 1 ;
26362: LD_ADDR_OWVAR 65
26366: PUSH
26367: LD_INT 1
26369: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26370: LD_INT 35
26372: PPUSH
26373: CALL_OW 67
// p := p + 1 ;
26377: LD_ADDR_VAR 0 1
26381: PUSH
26382: LD_VAR 0 1
26386: PUSH
26387: LD_INT 1
26389: PLUS
26390: ST_TO_ADDR
// until p >= 60 ;
26391: LD_VAR 0 1
26395: PUSH
26396: LD_INT 60
26398: GREATEREQUAL
26399: IFFALSE 26362
// game_speed := 4 ;
26401: LD_ADDR_OWVAR 65
26405: PUSH
26406: LD_INT 4
26408: ST_TO_ADDR
// end ;
26409: PPOPN 1
26411: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26412: LD_EXP 69
26416: PUSH
26417: LD_EXP 96
26421: AND
26422: IFFALSE 26568
26424: GO 26426
26426: DISABLE
26427: LD_INT 0
26429: PPUSH
26430: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26431: LD_ADDR_VAR 0 1
26435: PUSH
26436: LD_INT 22
26438: PUSH
26439: LD_OWVAR 2
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: LD_INT 30
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 30
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: ST_TO_ADDR
// if not depot then
26485: LD_VAR 0 1
26489: NOT
26490: IFFALSE 26494
// exit ;
26492: GO 26568
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26494: LD_ADDR_VAR 0 2
26498: PUSH
26499: LD_VAR 0 1
26503: PUSH
26504: LD_INT 1
26506: PPUSH
26507: LD_VAR 0 1
26511: PPUSH
26512: CALL_OW 12
26516: ARRAY
26517: PPUSH
26518: CALL_OW 274
26522: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26523: LD_VAR 0 2
26527: PPUSH
26528: LD_INT 1
26530: PPUSH
26531: LD_INT 0
26533: PPUSH
26534: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26538: LD_VAR 0 2
26542: PPUSH
26543: LD_INT 2
26545: PPUSH
26546: LD_INT 0
26548: PPUSH
26549: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26553: LD_VAR 0 2
26557: PPUSH
26558: LD_INT 3
26560: PPUSH
26561: LD_INT 0
26563: PPUSH
26564: CALL_OW 277
// end ;
26568: PPOPN 2
26570: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26571: LD_EXP 69
26575: PUSH
26576: LD_EXP 97
26580: AND
26581: IFFALSE 26678
26583: GO 26585
26585: DISABLE
26586: LD_INT 0
26588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26589: LD_ADDR_VAR 0 1
26593: PUSH
26594: LD_INT 22
26596: PUSH
26597: LD_OWVAR 2
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 21
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 3
26618: PUSH
26619: LD_INT 23
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: PPUSH
26638: CALL_OW 69
26642: ST_TO_ADDR
// if not tmp then
26643: LD_VAR 0 1
26647: NOT
26648: IFFALSE 26652
// exit ;
26650: GO 26678
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26652: LD_VAR 0 1
26656: PUSH
26657: LD_INT 1
26659: PPUSH
26660: LD_VAR 0 1
26664: PPUSH
26665: CALL_OW 12
26669: ARRAY
26670: PPUSH
26671: LD_INT 200
26673: PPUSH
26674: CALL_OW 234
// end ;
26678: PPOPN 1
26680: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26681: LD_EXP 69
26685: PUSH
26686: LD_EXP 98
26690: AND
26691: IFFALSE 26770
26693: GO 26695
26695: DISABLE
26696: LD_INT 0
26698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26699: LD_ADDR_VAR 0 1
26703: PUSH
26704: LD_INT 22
26706: PUSH
26707: LD_OWVAR 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 21
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PPUSH
26730: CALL_OW 69
26734: ST_TO_ADDR
// if not tmp then
26735: LD_VAR 0 1
26739: NOT
26740: IFFALSE 26744
// exit ;
26742: GO 26770
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26744: LD_VAR 0 1
26748: PUSH
26749: LD_INT 1
26751: PPUSH
26752: LD_VAR 0 1
26756: PPUSH
26757: CALL_OW 12
26761: ARRAY
26762: PPUSH
26763: LD_INT 60
26765: PPUSH
26766: CALL_OW 234
// end ;
26770: PPOPN 1
26772: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26773: LD_EXP 69
26777: PUSH
26778: LD_EXP 99
26782: AND
26783: IFFALSE 26882
26785: GO 26787
26787: DISABLE
26788: LD_INT 0
26790: PPUSH
26791: PPUSH
// begin enable ;
26792: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26793: LD_ADDR_VAR 0 1
26797: PUSH
26798: LD_INT 22
26800: PUSH
26801: LD_OWVAR 2
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 61
26812: PUSH
26813: EMPTY
26814: LIST
26815: PUSH
26816: LD_INT 33
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: LIST
26830: PPUSH
26831: CALL_OW 69
26835: ST_TO_ADDR
// if not tmp then
26836: LD_VAR 0 1
26840: NOT
26841: IFFALSE 26845
// exit ;
26843: GO 26882
// for i in tmp do
26845: LD_ADDR_VAR 0 2
26849: PUSH
26850: LD_VAR 0 1
26854: PUSH
26855: FOR_IN
26856: IFFALSE 26880
// if IsControledBy ( i ) then
26858: LD_VAR 0 2
26862: PPUSH
26863: CALL_OW 312
26867: IFFALSE 26878
// ComUnlink ( i ) ;
26869: LD_VAR 0 2
26873: PPUSH
26874: CALL_OW 136
26878: GO 26855
26880: POP
26881: POP
// end ;
26882: PPOPN 2
26884: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26885: LD_EXP 69
26889: PUSH
26890: LD_EXP 100
26894: AND
26895: IFFALSE 27035
26897: GO 26899
26899: DISABLE
26900: LD_INT 0
26902: PPUSH
26903: PPUSH
// begin ToLua ( displayPowell(); ) ;
26904: LD_STRING displayPowell();
26906: PPUSH
26907: CALL_OW 559
// uc_side := 0 ;
26911: LD_ADDR_OWVAR 20
26915: PUSH
26916: LD_INT 0
26918: ST_TO_ADDR
// uc_nation := 2 ;
26919: LD_ADDR_OWVAR 21
26923: PUSH
26924: LD_INT 2
26926: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26927: LD_ADDR_OWVAR 37
26931: PUSH
26932: LD_INT 14
26934: ST_TO_ADDR
// vc_engine := engine_siberite ;
26935: LD_ADDR_OWVAR 39
26939: PUSH
26940: LD_INT 3
26942: ST_TO_ADDR
// vc_control := control_apeman ;
26943: LD_ADDR_OWVAR 38
26947: PUSH
26948: LD_INT 5
26950: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26951: LD_ADDR_OWVAR 40
26955: PUSH
26956: LD_INT 29
26958: ST_TO_ADDR
// un := CreateVehicle ;
26959: LD_ADDR_VAR 0 2
26963: PUSH
26964: CALL_OW 45
26968: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26969: LD_VAR 0 2
26973: PPUSH
26974: LD_INT 1
26976: PPUSH
26977: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26981: LD_INT 35
26983: PPUSH
26984: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26988: LD_VAR 0 2
26992: PPUSH
26993: LD_INT 22
26995: PUSH
26996: LD_OWVAR 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PPUSH
27005: CALL_OW 69
27009: PPUSH
27010: LD_VAR 0 2
27014: PPUSH
27015: CALL_OW 74
27019: PPUSH
27020: CALL_OW 115
// until IsDead ( un ) ;
27024: LD_VAR 0 2
27028: PPUSH
27029: CALL_OW 301
27033: IFFALSE 26981
// end ;
27035: PPOPN 2
27037: END
// every 0 0$1 trigger StreamModeActive and sStu do
27038: LD_EXP 69
27042: PUSH
27043: LD_EXP 108
27047: AND
27048: IFFALSE 27064
27050: GO 27052
27052: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27053: LD_STRING displayStucuk();
27055: PPUSH
27056: CALL_OW 559
// ResetFog ;
27060: CALL_OW 335
// end ;
27064: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27065: LD_EXP 69
27069: PUSH
27070: LD_EXP 101
27074: AND
27075: IFFALSE 27216
27077: GO 27079
27079: DISABLE
27080: LD_INT 0
27082: PPUSH
27083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27084: LD_ADDR_VAR 0 2
27088: PUSH
27089: LD_INT 22
27091: PUSH
27092: LD_OWVAR 2
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 21
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PPUSH
27115: CALL_OW 69
27119: ST_TO_ADDR
// if not tmp then
27120: LD_VAR 0 2
27124: NOT
27125: IFFALSE 27129
// exit ;
27127: GO 27216
// un := tmp [ rand ( 1 , tmp ) ] ;
27129: LD_ADDR_VAR 0 1
27133: PUSH
27134: LD_VAR 0 2
27138: PUSH
27139: LD_INT 1
27141: PPUSH
27142: LD_VAR 0 2
27146: PPUSH
27147: CALL_OW 12
27151: ARRAY
27152: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27153: LD_VAR 0 1
27157: PPUSH
27158: LD_INT 0
27160: PPUSH
27161: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27165: LD_VAR 0 1
27169: PPUSH
27170: LD_OWVAR 3
27174: PUSH
27175: LD_VAR 0 1
27179: DIFF
27180: PPUSH
27181: LD_VAR 0 1
27185: PPUSH
27186: CALL_OW 74
27190: PPUSH
27191: CALL_OW 115
// wait ( 0 0$20 ) ;
27195: LD_INT 700
27197: PPUSH
27198: CALL_OW 67
// SetSide ( un , your_side ) ;
27202: LD_VAR 0 1
27206: PPUSH
27207: LD_OWVAR 2
27211: PPUSH
27212: CALL_OW 235
// end ;
27216: PPOPN 2
27218: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27219: LD_EXP 69
27223: PUSH
27224: LD_EXP 102
27228: AND
27229: IFFALSE 27335
27231: GO 27233
27233: DISABLE
27234: LD_INT 0
27236: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27237: LD_ADDR_VAR 0 1
27241: PUSH
27242: LD_INT 22
27244: PUSH
27245: LD_OWVAR 2
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: LD_INT 30
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 30
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: LIST
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PPUSH
27286: CALL_OW 69
27290: ST_TO_ADDR
// if not depot then
27291: LD_VAR 0 1
27295: NOT
27296: IFFALSE 27300
// exit ;
27298: GO 27335
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27300: LD_VAR 0 1
27304: PUSH
27305: LD_INT 1
27307: ARRAY
27308: PPUSH
27309: CALL_OW 250
27313: PPUSH
27314: LD_VAR 0 1
27318: PUSH
27319: LD_INT 1
27321: ARRAY
27322: PPUSH
27323: CALL_OW 251
27327: PPUSH
27328: LD_INT 70
27330: PPUSH
27331: CALL_OW 495
// end ;
27335: PPOPN 1
27337: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27338: LD_EXP 69
27342: PUSH
27343: LD_EXP 103
27347: AND
27348: IFFALSE 27559
27350: GO 27352
27352: DISABLE
27353: LD_INT 0
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27360: LD_ADDR_VAR 0 5
27364: PUSH
27365: LD_INT 22
27367: PUSH
27368: LD_OWVAR 2
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 21
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PPUSH
27391: CALL_OW 69
27395: ST_TO_ADDR
// if not tmp then
27396: LD_VAR 0 5
27400: NOT
27401: IFFALSE 27405
// exit ;
27403: GO 27559
// for i in tmp do
27405: LD_ADDR_VAR 0 1
27409: PUSH
27410: LD_VAR 0 5
27414: PUSH
27415: FOR_IN
27416: IFFALSE 27557
// begin d := rand ( 0 , 5 ) ;
27418: LD_ADDR_VAR 0 4
27422: PUSH
27423: LD_INT 0
27425: PPUSH
27426: LD_INT 5
27428: PPUSH
27429: CALL_OW 12
27433: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: LD_VAR 0 1
27443: PPUSH
27444: CALL_OW 250
27448: PPUSH
27449: LD_VAR 0 4
27453: PPUSH
27454: LD_INT 3
27456: PPUSH
27457: LD_INT 12
27459: PPUSH
27460: CALL_OW 12
27464: PPUSH
27465: CALL_OW 272
27469: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27470: LD_ADDR_VAR 0 3
27474: PUSH
27475: LD_VAR 0 1
27479: PPUSH
27480: CALL_OW 251
27484: PPUSH
27485: LD_VAR 0 4
27489: PPUSH
27490: LD_INT 3
27492: PPUSH
27493: LD_INT 12
27495: PPUSH
27496: CALL_OW 12
27500: PPUSH
27501: CALL_OW 273
27505: ST_TO_ADDR
// if ValidHex ( x , y ) then
27506: LD_VAR 0 2
27510: PPUSH
27511: LD_VAR 0 3
27515: PPUSH
27516: CALL_OW 488
27520: IFFALSE 27555
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27522: LD_VAR 0 1
27526: PPUSH
27527: LD_VAR 0 2
27531: PPUSH
27532: LD_VAR 0 3
27536: PPUSH
27537: LD_INT 3
27539: PPUSH
27540: LD_INT 6
27542: PPUSH
27543: CALL_OW 12
27547: PPUSH
27548: LD_INT 1
27550: PPUSH
27551: CALL_OW 483
// end ;
27555: GO 27415
27557: POP
27558: POP
// end ;
27559: PPOPN 5
27561: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27562: LD_EXP 69
27566: PUSH
27567: LD_EXP 104
27571: AND
27572: IFFALSE 27666
27574: GO 27576
27576: DISABLE
27577: LD_INT 0
27579: PPUSH
27580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27581: LD_ADDR_VAR 0 2
27585: PUSH
27586: LD_INT 22
27588: PUSH
27589: LD_OWVAR 2
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 32
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 21
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: LIST
27622: PPUSH
27623: CALL_OW 69
27627: ST_TO_ADDR
// if not tmp then
27628: LD_VAR 0 2
27632: NOT
27633: IFFALSE 27637
// exit ;
27635: GO 27666
// for i in tmp do
27637: LD_ADDR_VAR 0 1
27641: PUSH
27642: LD_VAR 0 2
27646: PUSH
27647: FOR_IN
27648: IFFALSE 27664
// SetFuel ( i , 0 ) ;
27650: LD_VAR 0 1
27654: PPUSH
27655: LD_INT 0
27657: PPUSH
27658: CALL_OW 240
27662: GO 27647
27664: POP
27665: POP
// end ;
27666: PPOPN 2
27668: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27669: LD_EXP 69
27673: PUSH
27674: LD_EXP 105
27678: AND
27679: IFFALSE 27745
27681: GO 27683
27683: DISABLE
27684: LD_INT 0
27686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27687: LD_ADDR_VAR 0 1
27691: PUSH
27692: LD_INT 22
27694: PUSH
27695: LD_OWVAR 2
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 30
27706: PUSH
27707: LD_INT 29
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PPUSH
27718: CALL_OW 69
27722: ST_TO_ADDR
// if not tmp then
27723: LD_VAR 0 1
27727: NOT
27728: IFFALSE 27732
// exit ;
27730: GO 27745
// DestroyUnit ( tmp [ 1 ] ) ;
27732: LD_VAR 0 1
27736: PUSH
27737: LD_INT 1
27739: ARRAY
27740: PPUSH
27741: CALL_OW 65
// end ;
27745: PPOPN 1
27747: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27748: LD_EXP 69
27752: PUSH
27753: LD_EXP 107
27757: AND
27758: IFFALSE 27887
27760: GO 27762
27762: DISABLE
27763: LD_INT 0
27765: PPUSH
// begin uc_side := 0 ;
27766: LD_ADDR_OWVAR 20
27770: PUSH
27771: LD_INT 0
27773: ST_TO_ADDR
// uc_nation := nation_arabian ;
27774: LD_ADDR_OWVAR 21
27778: PUSH
27779: LD_INT 2
27781: ST_TO_ADDR
// hc_gallery :=  ;
27782: LD_ADDR_OWVAR 33
27786: PUSH
27787: LD_STRING 
27789: ST_TO_ADDR
// hc_name :=  ;
27790: LD_ADDR_OWVAR 26
27794: PUSH
27795: LD_STRING 
27797: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27798: LD_INT 1
27800: PPUSH
27801: LD_INT 11
27803: PPUSH
27804: LD_INT 10
27806: PPUSH
27807: CALL_OW 380
// un := CreateHuman ;
27811: LD_ADDR_VAR 0 1
27815: PUSH
27816: CALL_OW 44
27820: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27821: LD_VAR 0 1
27825: PPUSH
27826: LD_INT 1
27828: PPUSH
27829: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27833: LD_INT 35
27835: PPUSH
27836: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27840: LD_VAR 0 1
27844: PPUSH
27845: LD_INT 22
27847: PUSH
27848: LD_OWVAR 2
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PPUSH
27857: CALL_OW 69
27861: PPUSH
27862: LD_VAR 0 1
27866: PPUSH
27867: CALL_OW 74
27871: PPUSH
27872: CALL_OW 115
// until IsDead ( un ) ;
27876: LD_VAR 0 1
27880: PPUSH
27881: CALL_OW 301
27885: IFFALSE 27833
// end ;
27887: PPOPN 1
27889: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27890: LD_EXP 69
27894: PUSH
27895: LD_EXP 109
27899: AND
27900: IFFALSE 27912
27902: GO 27904
27904: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27905: LD_STRING earthquake(getX(game), 0, 32)
27907: PPUSH
27908: CALL_OW 559
27912: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27913: LD_EXP 69
27917: PUSH
27918: LD_EXP 110
27922: AND
27923: IFFALSE 28014
27925: GO 27927
27927: DISABLE
27928: LD_INT 0
27930: PPUSH
// begin enable ;
27931: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27932: LD_ADDR_VAR 0 1
27936: PUSH
27937: LD_INT 22
27939: PUSH
27940: LD_OWVAR 2
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 21
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 33
27961: PUSH
27962: LD_INT 3
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: PPUSH
27974: CALL_OW 69
27978: ST_TO_ADDR
// if not tmp then
27979: LD_VAR 0 1
27983: NOT
27984: IFFALSE 27988
// exit ;
27986: GO 28014
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27988: LD_VAR 0 1
27992: PUSH
27993: LD_INT 1
27995: PPUSH
27996: LD_VAR 0 1
28000: PPUSH
28001: CALL_OW 12
28005: ARRAY
28006: PPUSH
28007: LD_INT 1
28009: PPUSH
28010: CALL_OW 234
// end ;
28014: PPOPN 1
28016: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28017: LD_EXP 69
28021: PUSH
28022: LD_EXP 111
28026: AND
28027: IFFALSE 28168
28029: GO 28031
28031: DISABLE
28032: LD_INT 0
28034: PPUSH
28035: PPUSH
28036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28037: LD_ADDR_VAR 0 3
28041: PUSH
28042: LD_INT 22
28044: PUSH
28045: LD_OWVAR 2
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 25
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PPUSH
28068: CALL_OW 69
28072: ST_TO_ADDR
// if not tmp then
28073: LD_VAR 0 3
28077: NOT
28078: IFFALSE 28082
// exit ;
28080: GO 28168
// un := tmp [ rand ( 1 , tmp ) ] ;
28082: LD_ADDR_VAR 0 2
28086: PUSH
28087: LD_VAR 0 3
28091: PUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_VAR 0 3
28099: PPUSH
28100: CALL_OW 12
28104: ARRAY
28105: ST_TO_ADDR
// if Crawls ( un ) then
28106: LD_VAR 0 2
28110: PPUSH
28111: CALL_OW 318
28115: IFFALSE 28126
// ComWalk ( un ) ;
28117: LD_VAR 0 2
28121: PPUSH
28122: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28126: LD_VAR 0 2
28130: PPUSH
28131: LD_INT 9
28133: PPUSH
28134: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28138: LD_INT 28
28140: PPUSH
28141: LD_OWVAR 2
28145: PPUSH
28146: LD_INT 2
28148: PPUSH
28149: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28153: LD_INT 29
28155: PPUSH
28156: LD_OWVAR 2
28160: PPUSH
28161: LD_INT 2
28163: PPUSH
28164: CALL_OW 322
// end ;
28168: PPOPN 3
28170: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28171: LD_EXP 69
28175: PUSH
28176: LD_EXP 112
28180: AND
28181: IFFALSE 28292
28183: GO 28185
28185: DISABLE
28186: LD_INT 0
28188: PPUSH
28189: PPUSH
28190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28191: LD_ADDR_VAR 0 3
28195: PUSH
28196: LD_INT 22
28198: PUSH
28199: LD_OWVAR 2
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 25
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PPUSH
28222: CALL_OW 69
28226: ST_TO_ADDR
// if not tmp then
28227: LD_VAR 0 3
28231: NOT
28232: IFFALSE 28236
// exit ;
28234: GO 28292
// un := tmp [ rand ( 1 , tmp ) ] ;
28236: LD_ADDR_VAR 0 2
28240: PUSH
28241: LD_VAR 0 3
28245: PUSH
28246: LD_INT 1
28248: PPUSH
28249: LD_VAR 0 3
28253: PPUSH
28254: CALL_OW 12
28258: ARRAY
28259: ST_TO_ADDR
// if Crawls ( un ) then
28260: LD_VAR 0 2
28264: PPUSH
28265: CALL_OW 318
28269: IFFALSE 28280
// ComWalk ( un ) ;
28271: LD_VAR 0 2
28275: PPUSH
28276: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28280: LD_VAR 0 2
28284: PPUSH
28285: LD_INT 8
28287: PPUSH
28288: CALL_OW 336
// end ;
28292: PPOPN 3
28294: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28295: LD_EXP 69
28299: PUSH
28300: LD_EXP 113
28304: AND
28305: IFFALSE 28449
28307: GO 28309
28309: DISABLE
28310: LD_INT 0
28312: PPUSH
28313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28314: LD_ADDR_VAR 0 2
28318: PUSH
28319: LD_INT 22
28321: PUSH
28322: LD_OWVAR 2
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 21
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 2
28343: PUSH
28344: LD_INT 34
28346: PUSH
28347: LD_INT 12
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 34
28356: PUSH
28357: LD_INT 51
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 34
28366: PUSH
28367: LD_INT 32
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: PPUSH
28385: CALL_OW 69
28389: ST_TO_ADDR
// if not tmp then
28390: LD_VAR 0 2
28394: NOT
28395: IFFALSE 28399
// exit ;
28397: GO 28449
// for i in tmp do
28399: LD_ADDR_VAR 0 1
28403: PUSH
28404: LD_VAR 0 2
28408: PUSH
28409: FOR_IN
28410: IFFALSE 28447
// if GetCargo ( i , mat_artifact ) = 0 then
28412: LD_VAR 0 1
28416: PPUSH
28417: LD_INT 4
28419: PPUSH
28420: CALL_OW 289
28424: PUSH
28425: LD_INT 0
28427: EQUAL
28428: IFFALSE 28445
// SetCargo ( i , mat_siberit , 100 ) ;
28430: LD_VAR 0 1
28434: PPUSH
28435: LD_INT 3
28437: PPUSH
28438: LD_INT 100
28440: PPUSH
28441: CALL_OW 290
28445: GO 28409
28447: POP
28448: POP
// end ;
28449: PPOPN 2
28451: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28452: LD_EXP 69
28456: PUSH
28457: LD_EXP 114
28461: AND
28462: IFFALSE 28645
28464: GO 28466
28466: DISABLE
28467: LD_INT 0
28469: PPUSH
28470: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28471: LD_ADDR_VAR 0 2
28475: PUSH
28476: LD_INT 22
28478: PUSH
28479: LD_OWVAR 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 69
28492: ST_TO_ADDR
// if not tmp then
28493: LD_VAR 0 2
28497: NOT
28498: IFFALSE 28502
// exit ;
28500: GO 28645
// for i := 1 to 2 do
28502: LD_ADDR_VAR 0 1
28506: PUSH
28507: DOUBLE
28508: LD_INT 1
28510: DEC
28511: ST_TO_ADDR
28512: LD_INT 2
28514: PUSH
28515: FOR_TO
28516: IFFALSE 28643
// begin uc_side := your_side ;
28518: LD_ADDR_OWVAR 20
28522: PUSH
28523: LD_OWVAR 2
28527: ST_TO_ADDR
// uc_nation := nation_american ;
28528: LD_ADDR_OWVAR 21
28532: PUSH
28533: LD_INT 1
28535: ST_TO_ADDR
// vc_chassis := us_morphling ;
28536: LD_ADDR_OWVAR 37
28540: PUSH
28541: LD_INT 5
28543: ST_TO_ADDR
// vc_engine := engine_siberite ;
28544: LD_ADDR_OWVAR 39
28548: PUSH
28549: LD_INT 3
28551: ST_TO_ADDR
// vc_control := control_computer ;
28552: LD_ADDR_OWVAR 38
28556: PUSH
28557: LD_INT 3
28559: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28560: LD_ADDR_OWVAR 40
28564: PUSH
28565: LD_INT 10
28567: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28568: LD_VAR 0 2
28572: PUSH
28573: LD_INT 1
28575: ARRAY
28576: PPUSH
28577: CALL_OW 310
28581: NOT
28582: IFFALSE 28629
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28584: CALL_OW 45
28588: PPUSH
28589: LD_VAR 0 2
28593: PUSH
28594: LD_INT 1
28596: ARRAY
28597: PPUSH
28598: CALL_OW 250
28602: PPUSH
28603: LD_VAR 0 2
28607: PUSH
28608: LD_INT 1
28610: ARRAY
28611: PPUSH
28612: CALL_OW 251
28616: PPUSH
28617: LD_INT 12
28619: PPUSH
28620: LD_INT 1
28622: PPUSH
28623: CALL_OW 50
28627: GO 28641
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28629: CALL_OW 45
28633: PPUSH
28634: LD_INT 1
28636: PPUSH
28637: CALL_OW 51
// end ;
28641: GO 28515
28643: POP
28644: POP
// end ;
28645: PPOPN 2
28647: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28648: LD_EXP 69
28652: PUSH
28653: LD_EXP 115
28657: AND
28658: IFFALSE 28880
28660: GO 28662
28662: DISABLE
28663: LD_INT 0
28665: PPUSH
28666: PPUSH
28667: PPUSH
28668: PPUSH
28669: PPUSH
28670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28671: LD_ADDR_VAR 0 6
28675: PUSH
28676: LD_INT 22
28678: PUSH
28679: LD_OWVAR 2
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 21
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 3
28700: PUSH
28701: LD_INT 23
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: LIST
28719: PPUSH
28720: CALL_OW 69
28724: ST_TO_ADDR
// if not tmp then
28725: LD_VAR 0 6
28729: NOT
28730: IFFALSE 28734
// exit ;
28732: GO 28880
// s1 := rand ( 1 , 4 ) ;
28734: LD_ADDR_VAR 0 2
28738: PUSH
28739: LD_INT 1
28741: PPUSH
28742: LD_INT 4
28744: PPUSH
28745: CALL_OW 12
28749: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28750: LD_ADDR_VAR 0 4
28754: PUSH
28755: LD_VAR 0 6
28759: PUSH
28760: LD_INT 1
28762: ARRAY
28763: PPUSH
28764: LD_VAR 0 2
28768: PPUSH
28769: CALL_OW 259
28773: ST_TO_ADDR
// if s1 = 1 then
28774: LD_VAR 0 2
28778: PUSH
28779: LD_INT 1
28781: EQUAL
28782: IFFALSE 28802
// s2 := rand ( 2 , 4 ) else
28784: LD_ADDR_VAR 0 3
28788: PUSH
28789: LD_INT 2
28791: PPUSH
28792: LD_INT 4
28794: PPUSH
28795: CALL_OW 12
28799: ST_TO_ADDR
28800: GO 28810
// s2 := 1 ;
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_INT 1
28809: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28810: LD_ADDR_VAR 0 5
28814: PUSH
28815: LD_VAR 0 6
28819: PUSH
28820: LD_INT 1
28822: ARRAY
28823: PPUSH
28824: LD_VAR 0 3
28828: PPUSH
28829: CALL_OW 259
28833: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28834: LD_VAR 0 6
28838: PUSH
28839: LD_INT 1
28841: ARRAY
28842: PPUSH
28843: LD_VAR 0 2
28847: PPUSH
28848: LD_VAR 0 5
28852: PPUSH
28853: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28857: LD_VAR 0 6
28861: PUSH
28862: LD_INT 1
28864: ARRAY
28865: PPUSH
28866: LD_VAR 0 3
28870: PPUSH
28871: LD_VAR 0 4
28875: PPUSH
28876: CALL_OW 237
// end ;
28880: PPOPN 6
28882: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28883: LD_EXP 69
28887: PUSH
28888: LD_EXP 116
28892: AND
28893: IFFALSE 28972
28895: GO 28897
28897: DISABLE
28898: LD_INT 0
28900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28901: LD_ADDR_VAR 0 1
28905: PUSH
28906: LD_INT 22
28908: PUSH
28909: LD_OWVAR 2
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 30
28920: PUSH
28921: LD_INT 3
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PPUSH
28932: CALL_OW 69
28936: ST_TO_ADDR
// if not tmp then
28937: LD_VAR 0 1
28941: NOT
28942: IFFALSE 28946
// exit ;
28944: GO 28972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28946: LD_VAR 0 1
28950: PUSH
28951: LD_INT 1
28953: PPUSH
28954: LD_VAR 0 1
28958: PPUSH
28959: CALL_OW 12
28963: ARRAY
28964: PPUSH
28965: LD_INT 1
28967: PPUSH
28968: CALL_OW 234
// end ;
28972: PPOPN 1
28974: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28975: LD_EXP 69
28979: PUSH
28980: LD_EXP 117
28984: AND
28985: IFFALSE 29097
28987: GO 28989
28989: DISABLE
28990: LD_INT 0
28992: PPUSH
28993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28994: LD_ADDR_VAR 0 2
28998: PUSH
28999: LD_INT 22
29001: PUSH
29002: LD_OWVAR 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 2
29013: PUSH
29014: LD_INT 30
29016: PUSH
29017: LD_INT 27
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 30
29026: PUSH
29027: LD_INT 26
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 30
29036: PUSH
29037: LD_INT 28
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PPUSH
29054: CALL_OW 69
29058: ST_TO_ADDR
// if not tmp then
29059: LD_VAR 0 2
29063: NOT
29064: IFFALSE 29068
// exit ;
29066: GO 29097
// for i in tmp do
29068: LD_ADDR_VAR 0 1
29072: PUSH
29073: LD_VAR 0 2
29077: PUSH
29078: FOR_IN
29079: IFFALSE 29095
// SetLives ( i , 1 ) ;
29081: LD_VAR 0 1
29085: PPUSH
29086: LD_INT 1
29088: PPUSH
29089: CALL_OW 234
29093: GO 29078
29095: POP
29096: POP
// end ;
29097: PPOPN 2
29099: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29100: LD_EXP 69
29104: PUSH
29105: LD_EXP 118
29109: AND
29110: IFFALSE 29384
29112: GO 29114
29114: DISABLE
29115: LD_INT 0
29117: PPUSH
29118: PPUSH
29119: PPUSH
// begin i := rand ( 1 , 7 ) ;
29120: LD_ADDR_VAR 0 1
29124: PUSH
29125: LD_INT 1
29127: PPUSH
29128: LD_INT 7
29130: PPUSH
29131: CALL_OW 12
29135: ST_TO_ADDR
// case i of 1 :
29136: LD_VAR 0 1
29140: PUSH
29141: LD_INT 1
29143: DOUBLE
29144: EQUAL
29145: IFTRUE 29149
29147: GO 29159
29149: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29150: LD_STRING earthquake(getX(game), 0, 32)
29152: PPUSH
29153: CALL_OW 559
29157: GO 29384
29159: LD_INT 2
29161: DOUBLE
29162: EQUAL
29163: IFTRUE 29167
29165: GO 29181
29167: POP
// begin ToLua ( displayStucuk(); ) ;
29168: LD_STRING displayStucuk();
29170: PPUSH
29171: CALL_OW 559
// ResetFog ;
29175: CALL_OW 335
// end ; 3 :
29179: GO 29384
29181: LD_INT 3
29183: DOUBLE
29184: EQUAL
29185: IFTRUE 29189
29187: GO 29293
29189: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29190: LD_ADDR_VAR 0 2
29194: PUSH
29195: LD_INT 22
29197: PUSH
29198: LD_OWVAR 2
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 25
29209: PUSH
29210: LD_INT 1
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PPUSH
29221: CALL_OW 69
29225: ST_TO_ADDR
// if not tmp then
29226: LD_VAR 0 2
29230: NOT
29231: IFFALSE 29235
// exit ;
29233: GO 29384
// un := tmp [ rand ( 1 , tmp ) ] ;
29235: LD_ADDR_VAR 0 3
29239: PUSH
29240: LD_VAR 0 2
29244: PUSH
29245: LD_INT 1
29247: PPUSH
29248: LD_VAR 0 2
29252: PPUSH
29253: CALL_OW 12
29257: ARRAY
29258: ST_TO_ADDR
// if Crawls ( un ) then
29259: LD_VAR 0 3
29263: PPUSH
29264: CALL_OW 318
29268: IFFALSE 29279
// ComWalk ( un ) ;
29270: LD_VAR 0 3
29274: PPUSH
29275: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29279: LD_VAR 0 3
29283: PPUSH
29284: LD_INT 8
29286: PPUSH
29287: CALL_OW 336
// end ; 4 :
29291: GO 29384
29293: LD_INT 4
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29362
29301: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29302: LD_ADDR_VAR 0 2
29306: PUSH
29307: LD_INT 22
29309: PUSH
29310: LD_OWVAR 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 30
29321: PUSH
29322: LD_INT 29
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PPUSH
29333: CALL_OW 69
29337: ST_TO_ADDR
// if not tmp then
29338: LD_VAR 0 2
29342: NOT
29343: IFFALSE 29347
// exit ;
29345: GO 29384
// DestroyUnit ( tmp [ 1 ] ) ;
29347: LD_VAR 0 2
29351: PUSH
29352: LD_INT 1
29354: ARRAY
29355: PPUSH
29356: CALL_OW 65
// end ; 5 .. 7 :
29360: GO 29384
29362: LD_INT 5
29364: DOUBLE
29365: GREATEREQUAL
29366: IFFALSE 29374
29368: LD_INT 7
29370: DOUBLE
29371: LESSEQUAL
29372: IFTRUE 29376
29374: GO 29383
29376: POP
// StreamSibBomb ; end ;
29377: CALL 25634 0 0
29381: GO 29384
29383: POP
// end ;
29384: PPOPN 3
29386: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29387: LD_EXP 69
29391: PUSH
29392: LD_EXP 119
29396: AND
29397: IFFALSE 29553
29399: GO 29401
29401: DISABLE
29402: LD_INT 0
29404: PPUSH
29405: PPUSH
29406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29407: LD_ADDR_VAR 0 2
29411: PUSH
29412: LD_INT 81
29414: PUSH
29415: LD_OWVAR 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: PUSH
29427: LD_INT 21
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 21
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: LIST
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PPUSH
29456: CALL_OW 69
29460: ST_TO_ADDR
// if not tmp then
29461: LD_VAR 0 2
29465: NOT
29466: IFFALSE 29470
// exit ;
29468: GO 29553
// p := 0 ;
29470: LD_ADDR_VAR 0 3
29474: PUSH
29475: LD_INT 0
29477: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29478: LD_INT 35
29480: PPUSH
29481: CALL_OW 67
// p := p + 1 ;
29485: LD_ADDR_VAR 0 3
29489: PUSH
29490: LD_VAR 0 3
29494: PUSH
29495: LD_INT 1
29497: PLUS
29498: ST_TO_ADDR
// for i in tmp do
29499: LD_ADDR_VAR 0 1
29503: PUSH
29504: LD_VAR 0 2
29508: PUSH
29509: FOR_IN
29510: IFFALSE 29541
// if GetLives ( i ) < 1000 then
29512: LD_VAR 0 1
29516: PPUSH
29517: CALL_OW 256
29521: PUSH
29522: LD_INT 1000
29524: LESS
29525: IFFALSE 29539
// SetLives ( i , 1000 ) ;
29527: LD_VAR 0 1
29531: PPUSH
29532: LD_INT 1000
29534: PPUSH
29535: CALL_OW 234
29539: GO 29509
29541: POP
29542: POP
// until p > 20 ;
29543: LD_VAR 0 3
29547: PUSH
29548: LD_INT 20
29550: GREATER
29551: IFFALSE 29478
// end ;
29553: PPOPN 3
29555: END
// every 0 0$1 trigger StreamModeActive and sTime do
29556: LD_EXP 69
29560: PUSH
29561: LD_EXP 120
29565: AND
29566: IFFALSE 29601
29568: GO 29570
29570: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29571: LD_INT 28
29573: PPUSH
29574: LD_OWVAR 2
29578: PPUSH
29579: LD_INT 2
29581: PPUSH
29582: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29586: LD_INT 30
29588: PPUSH
29589: LD_OWVAR 2
29593: PPUSH
29594: LD_INT 2
29596: PPUSH
29597: CALL_OW 322
// end ;
29601: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29602: LD_EXP 69
29606: PUSH
29607: LD_EXP 121
29611: AND
29612: IFFALSE 29733
29614: GO 29616
29616: DISABLE
29617: LD_INT 0
29619: PPUSH
29620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29621: LD_ADDR_VAR 0 2
29625: PUSH
29626: LD_INT 22
29628: PUSH
29629: LD_OWVAR 2
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 21
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 3
29650: PUSH
29651: LD_INT 23
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: PPUSH
29670: CALL_OW 69
29674: ST_TO_ADDR
// if not tmp then
29675: LD_VAR 0 2
29679: NOT
29680: IFFALSE 29684
// exit ;
29682: GO 29733
// for i in tmp do
29684: LD_ADDR_VAR 0 1
29688: PUSH
29689: LD_VAR 0 2
29693: PUSH
29694: FOR_IN
29695: IFFALSE 29731
// begin if Crawls ( i ) then
29697: LD_VAR 0 1
29701: PPUSH
29702: CALL_OW 318
29706: IFFALSE 29717
// ComWalk ( i ) ;
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 138
// SetClass ( i , 2 ) ;
29717: LD_VAR 0 1
29721: PPUSH
29722: LD_INT 2
29724: PPUSH
29725: CALL_OW 336
// end ;
29729: GO 29694
29731: POP
29732: POP
// end ;
29733: PPOPN 2
29735: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29736: LD_EXP 69
29740: PUSH
29741: LD_EXP 122
29745: AND
29746: IFFALSE 30027
29748: GO 29750
29750: DISABLE
29751: LD_INT 0
29753: PPUSH
29754: PPUSH
29755: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29756: LD_OWVAR 2
29760: PPUSH
29761: LD_INT 9
29763: PPUSH
29764: LD_INT 1
29766: PPUSH
29767: LD_INT 1
29769: PPUSH
29770: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29774: LD_INT 9
29776: PPUSH
29777: LD_OWVAR 2
29781: PPUSH
29782: CALL_OW 343
// uc_side := 9 ;
29786: LD_ADDR_OWVAR 20
29790: PUSH
29791: LD_INT 9
29793: ST_TO_ADDR
// uc_nation := 2 ;
29794: LD_ADDR_OWVAR 21
29798: PUSH
29799: LD_INT 2
29801: ST_TO_ADDR
// hc_name := Dark Warrior ;
29802: LD_ADDR_OWVAR 26
29806: PUSH
29807: LD_STRING Dark Warrior
29809: ST_TO_ADDR
// hc_gallery :=  ;
29810: LD_ADDR_OWVAR 33
29814: PUSH
29815: LD_STRING 
29817: ST_TO_ADDR
// hc_noskilllimit := true ;
29818: LD_ADDR_OWVAR 76
29822: PUSH
29823: LD_INT 1
29825: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29826: LD_ADDR_OWVAR 31
29830: PUSH
29831: LD_INT 30
29833: PUSH
29834: LD_INT 30
29836: PUSH
29837: LD_INT 30
29839: PUSH
29840: LD_INT 30
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: ST_TO_ADDR
// un := CreateHuman ;
29849: LD_ADDR_VAR 0 3
29853: PUSH
29854: CALL_OW 44
29858: ST_TO_ADDR
// hc_noskilllimit := false ;
29859: LD_ADDR_OWVAR 76
29863: PUSH
29864: LD_INT 0
29866: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29867: LD_VAR 0 3
29871: PPUSH
29872: LD_INT 1
29874: PPUSH
29875: CALL_OW 51
// p := 0 ;
29879: LD_ADDR_VAR 0 2
29883: PUSH
29884: LD_INT 0
29886: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29887: LD_INT 35
29889: PPUSH
29890: CALL_OW 67
// p := p + 1 ;
29894: LD_ADDR_VAR 0 2
29898: PUSH
29899: LD_VAR 0 2
29903: PUSH
29904: LD_INT 1
29906: PLUS
29907: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29908: LD_VAR 0 3
29912: PPUSH
29913: CALL_OW 256
29917: PUSH
29918: LD_INT 1000
29920: LESS
29921: IFFALSE 29935
// SetLives ( un , 1000 ) ;
29923: LD_VAR 0 3
29927: PPUSH
29928: LD_INT 1000
29930: PPUSH
29931: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29935: LD_VAR 0 3
29939: PPUSH
29940: LD_INT 81
29942: PUSH
29943: LD_OWVAR 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 91
29954: PUSH
29955: LD_VAR 0 3
29959: PUSH
29960: LD_INT 30
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PPUSH
29972: CALL_OW 69
29976: PPUSH
29977: LD_VAR 0 3
29981: PPUSH
29982: CALL_OW 74
29986: PPUSH
29987: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29991: LD_VAR 0 2
29995: PUSH
29996: LD_INT 60
29998: GREATER
29999: PUSH
30000: LD_VAR 0 3
30004: PPUSH
30005: CALL_OW 301
30009: OR
30010: IFFALSE 29887
// if un then
30012: LD_VAR 0 3
30016: IFFALSE 30027
// RemoveUnit ( un ) ;
30018: LD_VAR 0 3
30022: PPUSH
30023: CALL_OW 64
// end ;
30027: PPOPN 3
30029: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30030: LD_INT 0
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30036: LD_ADDR_VAR 0 4
30040: PUSH
30041: LD_INT 22
30043: PUSH
30044: LD_OWVAR 2
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 2
30055: PUSH
30056: LD_INT 30
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 30
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PPUSH
30085: CALL_OW 69
30089: ST_TO_ADDR
// if not tmp then
30090: LD_VAR 0 4
30094: NOT
30095: IFFALSE 30099
// exit ;
30097: GO 30158
// for i in tmp do
30099: LD_ADDR_VAR 0 2
30103: PUSH
30104: LD_VAR 0 4
30108: PUSH
30109: FOR_IN
30110: IFFALSE 30156
// for j = 1 to 3 do
30112: LD_ADDR_VAR 0 3
30116: PUSH
30117: DOUBLE
30118: LD_INT 1
30120: DEC
30121: ST_TO_ADDR
30122: LD_INT 3
30124: PUSH
30125: FOR_TO
30126: IFFALSE 30152
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30128: LD_VAR 0 2
30132: PPUSH
30133: CALL_OW 274
30137: PPUSH
30138: LD_VAR 0 3
30142: PPUSH
30143: LD_INT 99999
30145: PPUSH
30146: CALL_OW 277
30150: GO 30125
30152: POP
30153: POP
30154: GO 30109
30156: POP
30157: POP
// end ;
30158: LD_VAR 0 1
30162: RET
// export function hHackSetLevel10 ; var i , j ; begin
30163: LD_INT 0
30165: PPUSH
30166: PPUSH
30167: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30168: LD_ADDR_VAR 0 2
30172: PUSH
30173: LD_INT 21
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PPUSH
30183: CALL_OW 69
30187: PUSH
30188: FOR_IN
30189: IFFALSE 30241
// if IsSelected ( i ) then
30191: LD_VAR 0 2
30195: PPUSH
30196: CALL_OW 306
30200: IFFALSE 30239
// begin for j := 1 to 4 do
30202: LD_ADDR_VAR 0 3
30206: PUSH
30207: DOUBLE
30208: LD_INT 1
30210: DEC
30211: ST_TO_ADDR
30212: LD_INT 4
30214: PUSH
30215: FOR_TO
30216: IFFALSE 30237
// SetSkill ( i , j , 10 ) ;
30218: LD_VAR 0 2
30222: PPUSH
30223: LD_VAR 0 3
30227: PPUSH
30228: LD_INT 10
30230: PPUSH
30231: CALL_OW 237
30235: GO 30215
30237: POP
30238: POP
// end ;
30239: GO 30188
30241: POP
30242: POP
// end ;
30243: LD_VAR 0 1
30247: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30248: LD_INT 0
30250: PPUSH
30251: PPUSH
30252: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30253: LD_ADDR_VAR 0 2
30257: PUSH
30258: LD_INT 22
30260: PUSH
30261: LD_OWVAR 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 21
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PPUSH
30284: CALL_OW 69
30288: PUSH
30289: FOR_IN
30290: IFFALSE 30331
// begin for j := 1 to 4 do
30292: LD_ADDR_VAR 0 3
30296: PUSH
30297: DOUBLE
30298: LD_INT 1
30300: DEC
30301: ST_TO_ADDR
30302: LD_INT 4
30304: PUSH
30305: FOR_TO
30306: IFFALSE 30327
// SetSkill ( i , j , 10 ) ;
30308: LD_VAR 0 2
30312: PPUSH
30313: LD_VAR 0 3
30317: PPUSH
30318: LD_INT 10
30320: PPUSH
30321: CALL_OW 237
30325: GO 30305
30327: POP
30328: POP
// end ;
30329: GO 30289
30331: POP
30332: POP
// end ;
30333: LD_VAR 0 1
30337: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
30338: LD_INT 0
30340: PPUSH
// uc_side := your_side ;
30341: LD_ADDR_OWVAR 20
30345: PUSH
30346: LD_OWVAR 2
30350: ST_TO_ADDR
// uc_nation := nation ;
30351: LD_ADDR_OWVAR 21
30355: PUSH
30356: LD_VAR 0 1
30360: ST_TO_ADDR
// InitHc ;
30361: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30365: LD_INT 0
30367: PPUSH
30368: LD_VAR 0 2
30372: PPUSH
30373: LD_VAR 0 3
30377: PPUSH
30378: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30382: CALL_OW 44
30386: PPUSH
30387: LD_INT 1
30389: PPUSH
30390: CALL_OW 51
// end ;
30394: LD_VAR 0 4
30398: RET
// export function hHackSpawnVehicle ; begin
30399: LD_INT 0
30401: PPUSH
// uc_side := your_side ;
30402: LD_ADDR_OWVAR 20
30406: PUSH
30407: LD_OWVAR 2
30411: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
30412: LD_ADDR_OWVAR 21
30416: PUSH
30417: LD_INT 1
30419: PPUSH
30420: LD_INT 3
30422: PPUSH
30423: CALL_OW 12
30427: ST_TO_ADDR
// InitVc ;
30428: CALL_OW 20
// case uc_nation of 1 :
30432: LD_OWVAR 21
30436: PUSH
30437: LD_INT 1
30439: DOUBLE
30440: EQUAL
30441: IFTRUE 30445
30443: GO 30589
30445: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
30446: LD_ADDR_OWVAR 37
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 2
30456: PUSH
30457: LD_INT 3
30459: PUSH
30460: LD_INT 4
30462: PUSH
30463: LD_INT 5
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 1
30475: PPUSH
30476: LD_INT 5
30478: PPUSH
30479: CALL_OW 12
30483: ARRAY
30484: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30485: LD_ADDR_OWVAR 39
30489: PUSH
30490: LD_INT 1
30492: PPUSH
30493: LD_INT 3
30495: PPUSH
30496: CALL_OW 12
30500: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
30501: LD_ADDR_OWVAR 38
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 3
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PPUSH
30523: LD_INT 3
30525: PPUSH
30526: CALL_OW 12
30530: ARRAY
30531: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
30532: LD_ADDR_OWVAR 40
30536: PUSH
30537: LD_INT 2
30539: PUSH
30540: LD_INT 4
30542: PUSH
30543: LD_INT 5
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: LD_INT 7
30551: PUSH
30552: LD_INT 8
30554: PUSH
30555: LD_INT 9
30557: PUSH
30558: LD_INT 10
30560: PUSH
30561: LD_INT 6
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 1
30577: PPUSH
30578: LD_INT 9
30580: PPUSH
30581: CALL_OW 12
30585: ARRAY
30586: ST_TO_ADDR
// end ; 2 :
30587: GO 30854
30589: LD_INT 2
30591: DOUBLE
30592: EQUAL
30593: IFTRUE 30597
30595: GO 30721
30597: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
30598: LD_ADDR_OWVAR 37
30602: PUSH
30603: LD_INT 11
30605: PUSH
30606: LD_INT 12
30608: PUSH
30609: LD_INT 13
30611: PUSH
30612: LD_INT 14
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 1
30623: PPUSH
30624: LD_INT 4
30626: PPUSH
30627: CALL_OW 12
30631: ARRAY
30632: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30633: LD_ADDR_OWVAR 39
30637: PUSH
30638: LD_INT 1
30640: PPUSH
30641: LD_INT 3
30643: PPUSH
30644: CALL_OW 12
30648: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
30649: LD_ADDR_OWVAR 38
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: LD_INT 5
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 1
30670: PPUSH
30671: LD_INT 3
30673: PPUSH
30674: CALL_OW 12
30678: ARRAY
30679: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
30680: LD_ADDR_OWVAR 40
30684: PUSH
30685: LD_INT 24
30687: PUSH
30688: LD_INT 26
30690: PUSH
30691: LD_INT 27
30693: PUSH
30694: LD_INT 28
30696: PUSH
30697: LD_INT 29
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 1
30709: PPUSH
30710: LD_INT 5
30712: PPUSH
30713: CALL_OW 12
30717: ARRAY
30718: ST_TO_ADDR
// end ; 3 :
30719: GO 30854
30721: LD_INT 3
30723: DOUBLE
30724: EQUAL
30725: IFTRUE 30729
30727: GO 30853
30729: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
30730: LD_ADDR_OWVAR 37
30734: PUSH
30735: LD_INT 21
30737: PUSH
30738: LD_INT 23
30740: PUSH
30741: LD_INT 22
30743: PUSH
30744: LD_INT 24
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 1
30755: PPUSH
30756: LD_INT 4
30758: PPUSH
30759: CALL_OW 12
30763: ARRAY
30764: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30765: LD_ADDR_OWVAR 39
30769: PUSH
30770: LD_INT 1
30772: PPUSH
30773: LD_INT 3
30775: PPUSH
30776: CALL_OW 12
30780: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
30781: LD_ADDR_OWVAR 38
30785: PUSH
30786: LD_INT 1
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 1
30798: PPUSH
30799: LD_INT 2
30801: PPUSH
30802: CALL_OW 12
30806: ARRAY
30807: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
30808: LD_ADDR_OWVAR 40
30812: PUSH
30813: LD_INT 42
30815: PUSH
30816: LD_INT 43
30818: PUSH
30819: LD_INT 44
30821: PUSH
30822: LD_INT 46
30824: PUSH
30825: LD_INT 48
30827: PUSH
30828: LD_INT 47
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: PPUSH
30842: LD_INT 6
30844: PPUSH
30845: CALL_OW 12
30849: ARRAY
30850: ST_TO_ADDR
// end ; end ;
30851: GO 30854
30853: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30854: CALL_OW 45
30858: PPUSH
30859: LD_INT 1
30861: PPUSH
30862: CALL_OW 51
// end ;
30866: LD_VAR 0 1
30870: RET
// export hInvincible ; every 1 do
30871: GO 30873
30873: DISABLE
// hInvincible := [ ] ;
30874: LD_ADDR_EXP 123
30878: PUSH
30879: EMPTY
30880: ST_TO_ADDR
30881: END
// every 10 do var i ;
30882: GO 30884
30884: DISABLE
30885: LD_INT 0
30887: PPUSH
// begin enable ;
30888: ENABLE
// if not hInvincible then
30889: LD_EXP 123
30893: NOT
30894: IFFALSE 30898
// exit ;
30896: GO 30942
// for i in hInvincible do
30898: LD_ADDR_VAR 0 1
30902: PUSH
30903: LD_EXP 123
30907: PUSH
30908: FOR_IN
30909: IFFALSE 30940
// if GetLives ( i ) < 1000 then
30911: LD_VAR 0 1
30915: PPUSH
30916: CALL_OW 256
30920: PUSH
30921: LD_INT 1000
30923: LESS
30924: IFFALSE 30938
// SetLives ( i , 1000 ) ;
30926: LD_VAR 0 1
30930: PPUSH
30931: LD_INT 1000
30933: PPUSH
30934: CALL_OW 234
30938: GO 30908
30940: POP
30941: POP
// end ;
30942: PPOPN 1
30944: END
// export function hHackInvincible ; var i ; begin
30945: LD_INT 0
30947: PPUSH
30948: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30949: LD_ADDR_VAR 0 2
30953: PUSH
30954: LD_INT 2
30956: PUSH
30957: LD_INT 21
30959: PUSH
30960: LD_INT 1
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 21
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: PPUSH
30982: CALL_OW 69
30986: PUSH
30987: FOR_IN
30988: IFFALSE 31049
// if IsSelected ( i ) then
30990: LD_VAR 0 2
30994: PPUSH
30995: CALL_OW 306
30999: IFFALSE 31047
// begin if i in hInvincible then
31001: LD_VAR 0 2
31005: PUSH
31006: LD_EXP 123
31010: IN
31011: IFFALSE 31031
// hInvincible := hInvincible diff i else
31013: LD_ADDR_EXP 123
31017: PUSH
31018: LD_EXP 123
31022: PUSH
31023: LD_VAR 0 2
31027: DIFF
31028: ST_TO_ADDR
31029: GO 31047
// hInvincible := hInvincible union i ;
31031: LD_ADDR_EXP 123
31035: PUSH
31036: LD_EXP 123
31040: PUSH
31041: LD_VAR 0 2
31045: UNION
31046: ST_TO_ADDR
// end ;
31047: GO 30987
31049: POP
31050: POP
// end ;
31051: LD_VAR 0 1
31055: RET
// export function hHackInvisible ; var i , j ; begin
31056: LD_INT 0
31058: PPUSH
31059: PPUSH
31060: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31061: LD_ADDR_VAR 0 2
31065: PUSH
31066: LD_INT 21
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PPUSH
31076: CALL_OW 69
31080: PUSH
31081: FOR_IN
31082: IFFALSE 31106
// if IsSelected ( i ) then
31084: LD_VAR 0 2
31088: PPUSH
31089: CALL_OW 306
31093: IFFALSE 31104
// ComForceInvisible ( i ) ;
31095: LD_VAR 0 2
31099: PPUSH
31100: CALL_OW 496
31104: GO 31081
31106: POP
31107: POP
// end ;
31108: LD_VAR 0 1
31112: RET
// export function hHackChangeYourSide ; begin
31113: LD_INT 0
31115: PPUSH
// if your_side = 8 then
31116: LD_OWVAR 2
31120: PUSH
31121: LD_INT 8
31123: EQUAL
31124: IFFALSE 31136
// your_side := 0 else
31126: LD_ADDR_OWVAR 2
31130: PUSH
31131: LD_INT 0
31133: ST_TO_ADDR
31134: GO 31150
// your_side := your_side + 1 ;
31136: LD_ADDR_OWVAR 2
31140: PUSH
31141: LD_OWVAR 2
31145: PUSH
31146: LD_INT 1
31148: PLUS
31149: ST_TO_ADDR
// end ;
31150: LD_VAR 0 1
31154: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31155: LD_INT 0
31157: PPUSH
31158: PPUSH
31159: PPUSH
// for i in all_units do
31160: LD_ADDR_VAR 0 2
31164: PUSH
31165: LD_OWVAR 3
31169: PUSH
31170: FOR_IN
31171: IFFALSE 31249
// if IsSelected ( i ) then
31173: LD_VAR 0 2
31177: PPUSH
31178: CALL_OW 306
31182: IFFALSE 31247
// begin j := GetSide ( i ) ;
31184: LD_ADDR_VAR 0 3
31188: PUSH
31189: LD_VAR 0 2
31193: PPUSH
31194: CALL_OW 255
31198: ST_TO_ADDR
// if j = 8 then
31199: LD_VAR 0 3
31203: PUSH
31204: LD_INT 8
31206: EQUAL
31207: IFFALSE 31219
// j := 0 else
31209: LD_ADDR_VAR 0 3
31213: PUSH
31214: LD_INT 0
31216: ST_TO_ADDR
31217: GO 31233
// j := j + 1 ;
31219: LD_ADDR_VAR 0 3
31223: PUSH
31224: LD_VAR 0 3
31228: PUSH
31229: LD_INT 1
31231: PLUS
31232: ST_TO_ADDR
// SetSide ( i , j ) ;
31233: LD_VAR 0 2
31237: PPUSH
31238: LD_VAR 0 3
31242: PPUSH
31243: CALL_OW 235
// end ;
31247: GO 31170
31249: POP
31250: POP
// end ;
31251: LD_VAR 0 1
31255: RET
// export function hHackFog ; begin
31256: LD_INT 0
31258: PPUSH
// FogOff ( true ) ;
31259: LD_INT 1
31261: PPUSH
31262: CALL_OW 344
// end ;
31266: LD_VAR 0 1
31270: RET
// export function hHackApeman ; begin
31271: LD_INT 0
31273: PPUSH
// uc_side := your_side ;
31274: LD_ADDR_OWVAR 20
31278: PUSH
31279: LD_OWVAR 2
31283: ST_TO_ADDR
// uc_nation := 0 ;
31284: LD_ADDR_OWVAR 21
31288: PUSH
31289: LD_INT 0
31291: ST_TO_ADDR
// hc_name :=  ;
31292: LD_ADDR_OWVAR 26
31296: PUSH
31297: LD_STRING 
31299: ST_TO_ADDR
// hc_gallery :=  ;
31300: LD_ADDR_OWVAR 33
31304: PUSH
31305: LD_STRING 
31307: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
31308: LD_ADDR_OWVAR 31
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: ST_TO_ADDR
// hc_class := class_apeman ;
31331: LD_ADDR_OWVAR 28
31335: PUSH
31336: LD_INT 12
31338: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
31339: CALL_OW 44
31343: PPUSH
31344: LD_INT 1
31346: PPUSH
31347: CALL_OW 51
// end ;
31351: LD_VAR 0 1
31355: RET
// export function hHackBoom ; begin
31356: LD_INT 0
31358: PPUSH
// uc_side := your_side ;
31359: LD_ADDR_OWVAR 20
31363: PUSH
31364: LD_OWVAR 2
31368: ST_TO_ADDR
// uc_nation := 1 ;
31369: LD_ADDR_OWVAR 21
31373: PUSH
31374: LD_INT 1
31376: ST_TO_ADDR
// vc_chassis := us_morphling ;
31377: LD_ADDR_OWVAR 37
31381: PUSH
31382: LD_INT 5
31384: ST_TO_ADDR
// vc_engine := engine_siberite ;
31385: LD_ADDR_OWVAR 39
31389: PUSH
31390: LD_INT 3
31392: ST_TO_ADDR
// vc_control := control_computer ;
31393: LD_ADDR_OWVAR 38
31397: PUSH
31398: LD_INT 3
31400: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
31401: LD_ADDR_OWVAR 40
31405: PUSH
31406: LD_INT 8
31408: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31409: CALL_OW 45
31413: PPUSH
31414: LD_INT 1
31416: PPUSH
31417: CALL_OW 51
// end ; end_of_file
31421: LD_VAR 0 1
31425: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31426: LD_INT 0
31428: PPUSH
31429: PPUSH
31430: PPUSH
31431: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31432: LD_VAR 0 1
31436: PPUSH
31437: CALL_OW 264
31441: PUSH
31442: LD_EXP 58
31446: EQUAL
31447: IFFALSE 31519
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31449: LD_INT 68
31451: PPUSH
31452: LD_VAR 0 1
31456: PPUSH
31457: CALL_OW 255
31461: PPUSH
31462: CALL_OW 321
31466: PUSH
31467: LD_INT 2
31469: EQUAL
31470: IFFALSE 31482
// eff := 70 else
31472: LD_ADDR_VAR 0 4
31476: PUSH
31477: LD_INT 70
31479: ST_TO_ADDR
31480: GO 31490
// eff := 30 ;
31482: LD_ADDR_VAR 0 4
31486: PUSH
31487: LD_INT 30
31489: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31490: LD_VAR 0 1
31494: PPUSH
31495: CALL_OW 250
31499: PPUSH
31500: LD_VAR 0 1
31504: PPUSH
31505: CALL_OW 251
31509: PPUSH
31510: LD_VAR 0 4
31514: PPUSH
31515: CALL_OW 495
// end ; end ;
31519: LD_VAR 0 2
31523: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31524: LD_INT 0
31526: PPUSH
// end ;
31527: LD_VAR 0 4
31531: RET
// export function SOS_Command ( cmd ) ; begin
31532: LD_INT 0
31534: PPUSH
// end ;
31535: LD_VAR 0 2
31539: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31540: LD_VAR 0 1
31544: PUSH
31545: LD_INT 254
31547: EQUAL
31548: PUSH
31549: LD_VAR 0 2
31553: PPUSH
31554: CALL_OW 264
31558: PUSH
31559: LD_EXP 56
31563: EQUAL
31564: AND
31565: PUSH
31566: LD_VAR 0 3
31570: PPUSH
31571: CALL_OW 263
31575: PUSH
31576: LD_INT 3
31578: EQUAL
31579: AND
31580: IFFALSE 31596
// HackDestroyVehicle ( unit , selectedUnit ) ;
31582: LD_VAR 0 2
31586: PPUSH
31587: LD_VAR 0 3
31591: PPUSH
31592: CALL 33103 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31596: LD_VAR 0 1
31600: PUSH
31601: LD_INT 255
31603: EQUAL
31604: PUSH
31605: LD_VAR 0 2
31609: PPUSH
31610: CALL_OW 264
31614: PUSH
31615: LD_INT 14
31617: PUSH
31618: LD_INT 53
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: IN
31625: AND
31626: PUSH
31627: LD_VAR 0 4
31631: PPUSH
31632: LD_VAR 0 5
31636: PPUSH
31637: CALL_OW 488
31641: AND
31642: IFFALSE 31666
// CutTreeXYR ( unit , x , y , 12 ) ;
31644: LD_VAR 0 2
31648: PPUSH
31649: LD_VAR 0 4
31653: PPUSH
31654: LD_VAR 0 5
31658: PPUSH
31659: LD_INT 12
31661: PPUSH
31662: CALL 31669 0 4
// end ;
31666: PPOPN 5
31668: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31669: LD_INT 0
31671: PPUSH
31672: PPUSH
31673: PPUSH
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
31679: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31680: LD_VAR 0 1
31684: NOT
31685: PUSH
31686: LD_VAR 0 2
31690: PPUSH
31691: LD_VAR 0 3
31695: PPUSH
31696: CALL_OW 488
31700: NOT
31701: OR
31702: PUSH
31703: LD_VAR 0 4
31707: NOT
31708: OR
31709: IFFALSE 31713
// exit ;
31711: GO 32053
// list := [ ] ;
31713: LD_ADDR_VAR 0 13
31717: PUSH
31718: EMPTY
31719: ST_TO_ADDR
// if x - r < 0 then
31720: LD_VAR 0 2
31724: PUSH
31725: LD_VAR 0 4
31729: MINUS
31730: PUSH
31731: LD_INT 0
31733: LESS
31734: IFFALSE 31746
// min_x := 0 else
31736: LD_ADDR_VAR 0 7
31740: PUSH
31741: LD_INT 0
31743: ST_TO_ADDR
31744: GO 31762
// min_x := x - r ;
31746: LD_ADDR_VAR 0 7
31750: PUSH
31751: LD_VAR 0 2
31755: PUSH
31756: LD_VAR 0 4
31760: MINUS
31761: ST_TO_ADDR
// if y - r < 0 then
31762: LD_VAR 0 3
31766: PUSH
31767: LD_VAR 0 4
31771: MINUS
31772: PUSH
31773: LD_INT 0
31775: LESS
31776: IFFALSE 31788
// min_y := 0 else
31778: LD_ADDR_VAR 0 8
31782: PUSH
31783: LD_INT 0
31785: ST_TO_ADDR
31786: GO 31804
// min_y := y - r ;
31788: LD_ADDR_VAR 0 8
31792: PUSH
31793: LD_VAR 0 3
31797: PUSH
31798: LD_VAR 0 4
31802: MINUS
31803: ST_TO_ADDR
// max_x := x + r ;
31804: LD_ADDR_VAR 0 9
31808: PUSH
31809: LD_VAR 0 2
31813: PUSH
31814: LD_VAR 0 4
31818: PLUS
31819: ST_TO_ADDR
// max_y := y + r ;
31820: LD_ADDR_VAR 0 10
31824: PUSH
31825: LD_VAR 0 3
31829: PUSH
31830: LD_VAR 0 4
31834: PLUS
31835: ST_TO_ADDR
// for _x = min_x to max_x do
31836: LD_ADDR_VAR 0 11
31840: PUSH
31841: DOUBLE
31842: LD_VAR 0 7
31846: DEC
31847: ST_TO_ADDR
31848: LD_VAR 0 9
31852: PUSH
31853: FOR_TO
31854: IFFALSE 31971
// for _y = min_y to max_y do
31856: LD_ADDR_VAR 0 12
31860: PUSH
31861: DOUBLE
31862: LD_VAR 0 8
31866: DEC
31867: ST_TO_ADDR
31868: LD_VAR 0 10
31872: PUSH
31873: FOR_TO
31874: IFFALSE 31967
// begin if not ValidHex ( _x , _y ) then
31876: LD_VAR 0 11
31880: PPUSH
31881: LD_VAR 0 12
31885: PPUSH
31886: CALL_OW 488
31890: NOT
31891: IFFALSE 31895
// continue ;
31893: GO 31873
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31895: LD_VAR 0 11
31899: PPUSH
31900: LD_VAR 0 12
31904: PPUSH
31905: CALL_OW 351
31909: PUSH
31910: LD_VAR 0 11
31914: PPUSH
31915: LD_VAR 0 12
31919: PPUSH
31920: CALL_OW 554
31924: AND
31925: IFFALSE 31965
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31927: LD_ADDR_VAR 0 13
31931: PUSH
31932: LD_VAR 0 13
31936: PPUSH
31937: LD_VAR 0 13
31941: PUSH
31942: LD_INT 1
31944: PLUS
31945: PPUSH
31946: LD_VAR 0 11
31950: PUSH
31951: LD_VAR 0 12
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PPUSH
31960: CALL_OW 2
31964: ST_TO_ADDR
// end ;
31965: GO 31873
31967: POP
31968: POP
31969: GO 31853
31971: POP
31972: POP
// if not list then
31973: LD_VAR 0 13
31977: NOT
31978: IFFALSE 31982
// exit ;
31980: GO 32053
// for i in list do
31982: LD_ADDR_VAR 0 6
31986: PUSH
31987: LD_VAR 0 13
31991: PUSH
31992: FOR_IN
31993: IFFALSE 32051
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31995: LD_VAR 0 1
31999: PPUSH
32000: LD_STRING M
32002: PUSH
32003: LD_VAR 0 6
32007: PUSH
32008: LD_INT 1
32010: ARRAY
32011: PUSH
32012: LD_VAR 0 6
32016: PUSH
32017: LD_INT 2
32019: ARRAY
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: PUSH
32042: EMPTY
32043: LIST
32044: PPUSH
32045: CALL_OW 447
32049: GO 31992
32051: POP
32052: POP
// end ;
32053: LD_VAR 0 5
32057: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32058: LD_EXP 124
32062: NOT
32063: IFFALSE 32113
32065: GO 32067
32067: DISABLE
// begin initHack := true ;
32068: LD_ADDR_EXP 124
32072: PUSH
32073: LD_INT 1
32075: ST_TO_ADDR
// hackTanks := [ ] ;
32076: LD_ADDR_EXP 125
32080: PUSH
32081: EMPTY
32082: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32083: LD_ADDR_EXP 126
32087: PUSH
32088: EMPTY
32089: ST_TO_ADDR
// hackLimit := 3 ;
32090: LD_ADDR_EXP 127
32094: PUSH
32095: LD_INT 3
32097: ST_TO_ADDR
// hackDist := 12 ;
32098: LD_ADDR_EXP 128
32102: PUSH
32103: LD_INT 12
32105: ST_TO_ADDR
// hackCounter := [ ] ;
32106: LD_ADDR_EXP 129
32110: PUSH
32111: EMPTY
32112: ST_TO_ADDR
// end ;
32113: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32114: LD_EXP 124
32118: PUSH
32119: LD_INT 34
32121: PUSH
32122: LD_EXP 56
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PPUSH
32131: CALL_OW 69
32135: AND
32136: IFFALSE 32391
32138: GO 32140
32140: DISABLE
32141: LD_INT 0
32143: PPUSH
32144: PPUSH
// begin enable ;
32145: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32146: LD_ADDR_VAR 0 1
32150: PUSH
32151: LD_INT 34
32153: PUSH
32154: LD_EXP 56
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PPUSH
32163: CALL_OW 69
32167: PUSH
32168: FOR_IN
32169: IFFALSE 32389
// begin if not i in hackTanks then
32171: LD_VAR 0 1
32175: PUSH
32176: LD_EXP 125
32180: IN
32181: NOT
32182: IFFALSE 32265
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32184: LD_ADDR_EXP 125
32188: PUSH
32189: LD_EXP 125
32193: PPUSH
32194: LD_EXP 125
32198: PUSH
32199: LD_INT 1
32201: PLUS
32202: PPUSH
32203: LD_VAR 0 1
32207: PPUSH
32208: CALL_OW 1
32212: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32213: LD_ADDR_EXP 126
32217: PUSH
32218: LD_EXP 126
32222: PPUSH
32223: LD_EXP 126
32227: PUSH
32228: LD_INT 1
32230: PLUS
32231: PPUSH
32232: EMPTY
32233: PPUSH
32234: CALL_OW 1
32238: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32239: LD_ADDR_EXP 129
32243: PUSH
32244: LD_EXP 129
32248: PPUSH
32249: LD_EXP 129
32253: PUSH
32254: LD_INT 1
32256: PLUS
32257: PPUSH
32258: EMPTY
32259: PPUSH
32260: CALL_OW 1
32264: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32265: LD_VAR 0 1
32269: PPUSH
32270: CALL_OW 302
32274: NOT
32275: IFFALSE 32288
// begin HackUnlinkAll ( i ) ;
32277: LD_VAR 0 1
32281: PPUSH
32282: CALL 32394 0 1
// continue ;
32286: GO 32168
// end ; HackCheckCapturedStatus ( i ) ;
32288: LD_VAR 0 1
32292: PPUSH
32293: CALL 32837 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32297: LD_ADDR_VAR 0 2
32301: PUSH
32302: LD_INT 81
32304: PUSH
32305: LD_VAR 0 1
32309: PPUSH
32310: CALL_OW 255
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 33
32321: PUSH
32322: LD_INT 3
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 91
32331: PUSH
32332: LD_VAR 0 1
32336: PUSH
32337: LD_EXP 128
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 50
32349: PUSH
32350: EMPTY
32351: LIST
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: PPUSH
32359: CALL_OW 69
32363: ST_TO_ADDR
// if not tmp then
32364: LD_VAR 0 2
32368: NOT
32369: IFFALSE 32373
// continue ;
32371: GO 32168
// HackLink ( i , tmp ) ;
32373: LD_VAR 0 1
32377: PPUSH
32378: LD_VAR 0 2
32382: PPUSH
32383: CALL 32530 0 2
// end ;
32387: GO 32168
32389: POP
32390: POP
// end ;
32391: PPOPN 2
32393: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32394: LD_INT 0
32396: PPUSH
32397: PPUSH
32398: PPUSH
// if not hack in hackTanks then
32399: LD_VAR 0 1
32403: PUSH
32404: LD_EXP 125
32408: IN
32409: NOT
32410: IFFALSE 32414
// exit ;
32412: GO 32525
// index := GetElementIndex ( hackTanks , hack ) ;
32414: LD_ADDR_VAR 0 4
32418: PUSH
32419: LD_EXP 125
32423: PPUSH
32424: LD_VAR 0 1
32428: PPUSH
32429: CALL 37945 0 2
32433: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32434: LD_EXP 126
32438: PUSH
32439: LD_VAR 0 4
32443: ARRAY
32444: IFFALSE 32525
// begin for i in hackTanksCaptured [ index ] do
32446: LD_ADDR_VAR 0 3
32450: PUSH
32451: LD_EXP 126
32455: PUSH
32456: LD_VAR 0 4
32460: ARRAY
32461: PUSH
32462: FOR_IN
32463: IFFALSE 32489
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32465: LD_VAR 0 3
32469: PUSH
32470: LD_INT 1
32472: ARRAY
32473: PPUSH
32474: LD_VAR 0 3
32478: PUSH
32479: LD_INT 2
32481: ARRAY
32482: PPUSH
32483: CALL_OW 235
32487: GO 32462
32489: POP
32490: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32491: LD_ADDR_EXP 126
32495: PUSH
32496: LD_EXP 126
32500: PPUSH
32501: LD_VAR 0 4
32505: PPUSH
32506: EMPTY
32507: PPUSH
32508: CALL_OW 1
32512: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32513: LD_VAR 0 1
32517: PPUSH
32518: LD_INT 0
32520: PPUSH
32521: CALL_OW 505
// end ; end ;
32525: LD_VAR 0 2
32529: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32530: LD_INT 0
32532: PPUSH
32533: PPUSH
32534: PPUSH
// if not hack in hackTanks or not vehicles then
32535: LD_VAR 0 1
32539: PUSH
32540: LD_EXP 125
32544: IN
32545: NOT
32546: PUSH
32547: LD_VAR 0 2
32551: NOT
32552: OR
32553: IFFALSE 32557
// exit ;
32555: GO 32832
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32557: LD_ADDR_VAR 0 2
32561: PUSH
32562: LD_VAR 0 1
32566: PPUSH
32567: LD_VAR 0 2
32571: PPUSH
32572: LD_INT 1
32574: PPUSH
32575: LD_INT 1
32577: PPUSH
32578: CALL 38595 0 4
32582: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32583: LD_ADDR_VAR 0 5
32587: PUSH
32588: LD_EXP 125
32592: PPUSH
32593: LD_VAR 0 1
32597: PPUSH
32598: CALL 37945 0 2
32602: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32603: LD_EXP 126
32607: PUSH
32608: LD_VAR 0 5
32612: ARRAY
32613: PUSH
32614: LD_EXP 127
32618: LESS
32619: IFFALSE 32808
// begin for i := 1 to vehicles do
32621: LD_ADDR_VAR 0 4
32625: PUSH
32626: DOUBLE
32627: LD_INT 1
32629: DEC
32630: ST_TO_ADDR
32631: LD_VAR 0 2
32635: PUSH
32636: FOR_TO
32637: IFFALSE 32806
// begin if hackTanksCaptured [ index ] = hackLimit then
32639: LD_EXP 126
32643: PUSH
32644: LD_VAR 0 5
32648: ARRAY
32649: PUSH
32650: LD_EXP 127
32654: EQUAL
32655: IFFALSE 32659
// break ;
32657: GO 32806
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32659: LD_ADDR_EXP 129
32663: PUSH
32664: LD_EXP 129
32668: PPUSH
32669: LD_VAR 0 5
32673: PPUSH
32674: LD_EXP 129
32678: PUSH
32679: LD_VAR 0 5
32683: ARRAY
32684: PUSH
32685: LD_INT 1
32687: PLUS
32688: PPUSH
32689: CALL_OW 1
32693: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32694: LD_ADDR_EXP 126
32698: PUSH
32699: LD_EXP 126
32703: PPUSH
32704: LD_VAR 0 5
32708: PUSH
32709: LD_EXP 126
32713: PUSH
32714: LD_VAR 0 5
32718: ARRAY
32719: PUSH
32720: LD_INT 1
32722: PLUS
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PPUSH
32728: LD_VAR 0 2
32732: PUSH
32733: LD_VAR 0 4
32737: ARRAY
32738: PUSH
32739: LD_VAR 0 2
32743: PUSH
32744: LD_VAR 0 4
32748: ARRAY
32749: PPUSH
32750: CALL_OW 255
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PPUSH
32759: CALL 38160 0 3
32763: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32764: LD_VAR 0 2
32768: PUSH
32769: LD_VAR 0 4
32773: ARRAY
32774: PPUSH
32775: LD_VAR 0 1
32779: PPUSH
32780: CALL_OW 255
32784: PPUSH
32785: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32789: LD_VAR 0 2
32793: PUSH
32794: LD_VAR 0 4
32798: ARRAY
32799: PPUSH
32800: CALL_OW 141
// end ;
32804: GO 32636
32806: POP
32807: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32808: LD_VAR 0 1
32812: PPUSH
32813: LD_EXP 126
32817: PUSH
32818: LD_VAR 0 5
32822: ARRAY
32823: PUSH
32824: LD_INT 0
32826: PLUS
32827: PPUSH
32828: CALL_OW 505
// end ;
32832: LD_VAR 0 3
32836: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32837: LD_INT 0
32839: PPUSH
32840: PPUSH
32841: PPUSH
32842: PPUSH
// if not hack in hackTanks then
32843: LD_VAR 0 1
32847: PUSH
32848: LD_EXP 125
32852: IN
32853: NOT
32854: IFFALSE 32858
// exit ;
32856: GO 33098
// index := GetElementIndex ( hackTanks , hack ) ;
32858: LD_ADDR_VAR 0 4
32862: PUSH
32863: LD_EXP 125
32867: PPUSH
32868: LD_VAR 0 1
32872: PPUSH
32873: CALL 37945 0 2
32877: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32878: LD_ADDR_VAR 0 3
32882: PUSH
32883: DOUBLE
32884: LD_EXP 126
32888: PUSH
32889: LD_VAR 0 4
32893: ARRAY
32894: INC
32895: ST_TO_ADDR
32896: LD_INT 1
32898: PUSH
32899: FOR_DOWNTO
32900: IFFALSE 33072
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32902: LD_ADDR_VAR 0 5
32906: PUSH
32907: LD_EXP 126
32911: PUSH
32912: LD_VAR 0 4
32916: ARRAY
32917: PUSH
32918: LD_VAR 0 3
32922: ARRAY
32923: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32924: LD_VAR 0 5
32928: PUSH
32929: LD_INT 1
32931: ARRAY
32932: PPUSH
32933: CALL_OW 302
32937: NOT
32938: PUSH
32939: LD_VAR 0 5
32943: PUSH
32944: LD_INT 1
32946: ARRAY
32947: PPUSH
32948: CALL_OW 255
32952: PUSH
32953: LD_VAR 0 1
32957: PPUSH
32958: CALL_OW 255
32962: NONEQUAL
32963: OR
32964: IFFALSE 33070
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32966: LD_VAR 0 5
32970: PUSH
32971: LD_INT 1
32973: ARRAY
32974: PPUSH
32975: CALL_OW 305
32979: PUSH
32980: LD_VAR 0 5
32984: PUSH
32985: LD_INT 1
32987: ARRAY
32988: PPUSH
32989: CALL_OW 255
32993: PUSH
32994: LD_VAR 0 1
32998: PPUSH
32999: CALL_OW 255
33003: EQUAL
33004: AND
33005: IFFALSE 33029
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33007: LD_VAR 0 5
33011: PUSH
33012: LD_INT 1
33014: ARRAY
33015: PPUSH
33016: LD_VAR 0 5
33020: PUSH
33021: LD_INT 2
33023: ARRAY
33024: PPUSH
33025: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33029: LD_ADDR_EXP 126
33033: PUSH
33034: LD_EXP 126
33038: PPUSH
33039: LD_VAR 0 4
33043: PPUSH
33044: LD_EXP 126
33048: PUSH
33049: LD_VAR 0 4
33053: ARRAY
33054: PPUSH
33055: LD_VAR 0 3
33059: PPUSH
33060: CALL_OW 3
33064: PPUSH
33065: CALL_OW 1
33069: ST_TO_ADDR
// end ; end ;
33070: GO 32899
33072: POP
33073: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33074: LD_VAR 0 1
33078: PPUSH
33079: LD_EXP 126
33083: PUSH
33084: LD_VAR 0 4
33088: ARRAY
33089: PUSH
33090: LD_INT 0
33092: PLUS
33093: PPUSH
33094: CALL_OW 505
// end ;
33098: LD_VAR 0 2
33102: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33103: LD_INT 0
33105: PPUSH
33106: PPUSH
33107: PPUSH
33108: PPUSH
// if not hack in hackTanks then
33109: LD_VAR 0 1
33113: PUSH
33114: LD_EXP 125
33118: IN
33119: NOT
33120: IFFALSE 33124
// exit ;
33122: GO 33209
// index := GetElementIndex ( hackTanks , hack ) ;
33124: LD_ADDR_VAR 0 5
33128: PUSH
33129: LD_EXP 125
33133: PPUSH
33134: LD_VAR 0 1
33138: PPUSH
33139: CALL 37945 0 2
33143: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33144: LD_ADDR_VAR 0 4
33148: PUSH
33149: DOUBLE
33150: LD_INT 1
33152: DEC
33153: ST_TO_ADDR
33154: LD_EXP 126
33158: PUSH
33159: LD_VAR 0 5
33163: ARRAY
33164: PUSH
33165: FOR_TO
33166: IFFALSE 33207
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33168: LD_EXP 126
33172: PUSH
33173: LD_VAR 0 5
33177: ARRAY
33178: PUSH
33179: LD_VAR 0 4
33183: ARRAY
33184: PUSH
33185: LD_INT 1
33187: ARRAY
33188: PUSH
33189: LD_VAR 0 2
33193: EQUAL
33194: IFFALSE 33205
// KillUnit ( vehicle ) ;
33196: LD_VAR 0 2
33200: PPUSH
33201: CALL_OW 66
33205: GO 33165
33207: POP
33208: POP
// end ; end_of_file
33209: LD_VAR 0 3
33213: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33214: LD_INT 0
33216: PPUSH
33217: PPUSH
// if exist_mode then
33218: LD_VAR 0 2
33222: IFFALSE 33247
// unit := CreateCharacter ( prefix & ident ) else
33224: LD_ADDR_VAR 0 5
33228: PUSH
33229: LD_VAR 0 3
33233: PUSH
33234: LD_VAR 0 1
33238: STR
33239: PPUSH
33240: CALL_OW 34
33244: ST_TO_ADDR
33245: GO 33262
// unit := NewCharacter ( ident ) ;
33247: LD_ADDR_VAR 0 5
33251: PUSH
33252: LD_VAR 0 1
33256: PPUSH
33257: CALL_OW 25
33261: ST_TO_ADDR
// result := unit ;
33262: LD_ADDR_VAR 0 4
33266: PUSH
33267: LD_VAR 0 5
33271: ST_TO_ADDR
// end ;
33272: LD_VAR 0 4
33276: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33277: LD_INT 0
33279: PPUSH
33280: PPUSH
// if not side or not nation then
33281: LD_VAR 0 1
33285: NOT
33286: PUSH
33287: LD_VAR 0 2
33291: NOT
33292: OR
33293: IFFALSE 33297
// exit ;
33295: GO 34061
// case nation of nation_american :
33297: LD_VAR 0 2
33301: PUSH
33302: LD_INT 1
33304: DOUBLE
33305: EQUAL
33306: IFTRUE 33310
33308: GO 33524
33310: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33311: LD_ADDR_VAR 0 4
33315: PUSH
33316: LD_INT 35
33318: PUSH
33319: LD_INT 45
33321: PUSH
33322: LD_INT 46
33324: PUSH
33325: LD_INT 47
33327: PUSH
33328: LD_INT 82
33330: PUSH
33331: LD_INT 83
33333: PUSH
33334: LD_INT 84
33336: PUSH
33337: LD_INT 85
33339: PUSH
33340: LD_INT 86
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: LD_INT 2
33348: PUSH
33349: LD_INT 6
33351: PUSH
33352: LD_INT 15
33354: PUSH
33355: LD_INT 16
33357: PUSH
33358: LD_INT 7
33360: PUSH
33361: LD_INT 12
33363: PUSH
33364: LD_INT 13
33366: PUSH
33367: LD_INT 10
33369: PUSH
33370: LD_INT 14
33372: PUSH
33373: LD_INT 20
33375: PUSH
33376: LD_INT 21
33378: PUSH
33379: LD_INT 22
33381: PUSH
33382: LD_INT 25
33384: PUSH
33385: LD_INT 32
33387: PUSH
33388: LD_INT 27
33390: PUSH
33391: LD_INT 36
33393: PUSH
33394: LD_INT 69
33396: PUSH
33397: LD_INT 39
33399: PUSH
33400: LD_INT 34
33402: PUSH
33403: LD_INT 40
33405: PUSH
33406: LD_INT 48
33408: PUSH
33409: LD_INT 49
33411: PUSH
33412: LD_INT 50
33414: PUSH
33415: LD_INT 51
33417: PUSH
33418: LD_INT 52
33420: PUSH
33421: LD_INT 53
33423: PUSH
33424: LD_INT 54
33426: PUSH
33427: LD_INT 55
33429: PUSH
33430: LD_INT 56
33432: PUSH
33433: LD_INT 57
33435: PUSH
33436: LD_INT 58
33438: PUSH
33439: LD_INT 59
33441: PUSH
33442: LD_INT 60
33444: PUSH
33445: LD_INT 61
33447: PUSH
33448: LD_INT 62
33450: PUSH
33451: LD_INT 80
33453: PUSH
33454: LD_INT 82
33456: PUSH
33457: LD_INT 83
33459: PUSH
33460: LD_INT 84
33462: PUSH
33463: LD_INT 85
33465: PUSH
33466: LD_INT 86
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: ST_TO_ADDR
33522: GO 33985
33524: LD_INT 2
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33754
33532: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
33533: LD_ADDR_VAR 0 4
33537: PUSH
33538: LD_INT 35
33540: PUSH
33541: LD_INT 45
33543: PUSH
33544: LD_INT 46
33546: PUSH
33547: LD_INT 47
33549: PUSH
33550: LD_INT 82
33552: PUSH
33553: LD_INT 83
33555: PUSH
33556: LD_INT 84
33558: PUSH
33559: LD_INT 85
33561: PUSH
33562: LD_INT 87
33564: PUSH
33565: LD_INT 70
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 11
33573: PUSH
33574: LD_INT 3
33576: PUSH
33577: LD_INT 4
33579: PUSH
33580: LD_INT 5
33582: PUSH
33583: LD_INT 6
33585: PUSH
33586: LD_INT 15
33588: PUSH
33589: LD_INT 18
33591: PUSH
33592: LD_INT 7
33594: PUSH
33595: LD_INT 17
33597: PUSH
33598: LD_INT 8
33600: PUSH
33601: LD_INT 20
33603: PUSH
33604: LD_INT 21
33606: PUSH
33607: LD_INT 22
33609: PUSH
33610: LD_INT 72
33612: PUSH
33613: LD_INT 26
33615: PUSH
33616: LD_INT 69
33618: PUSH
33619: LD_INT 39
33621: PUSH
33622: LD_INT 40
33624: PUSH
33625: LD_INT 41
33627: PUSH
33628: LD_INT 42
33630: PUSH
33631: LD_INT 43
33633: PUSH
33634: LD_INT 48
33636: PUSH
33637: LD_INT 49
33639: PUSH
33640: LD_INT 50
33642: PUSH
33643: LD_INT 51
33645: PUSH
33646: LD_INT 52
33648: PUSH
33649: LD_INT 53
33651: PUSH
33652: LD_INT 54
33654: PUSH
33655: LD_INT 55
33657: PUSH
33658: LD_INT 56
33660: PUSH
33661: LD_INT 60
33663: PUSH
33664: LD_INT 61
33666: PUSH
33667: LD_INT 62
33669: PUSH
33670: LD_INT 66
33672: PUSH
33673: LD_INT 67
33675: PUSH
33676: LD_INT 68
33678: PUSH
33679: LD_INT 81
33681: PUSH
33682: LD_INT 82
33684: PUSH
33685: LD_INT 83
33687: PUSH
33688: LD_INT 84
33690: PUSH
33691: LD_INT 85
33693: PUSH
33694: LD_INT 87
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: ST_TO_ADDR
33752: GO 33985
33754: LD_INT 3
33756: DOUBLE
33757: EQUAL
33758: IFTRUE 33762
33760: GO 33984
33762: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33763: LD_ADDR_VAR 0 4
33767: PUSH
33768: LD_INT 46
33770: PUSH
33771: LD_INT 47
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 82
33782: PUSH
33783: LD_INT 83
33785: PUSH
33786: LD_INT 84
33788: PUSH
33789: LD_INT 85
33791: PUSH
33792: LD_INT 86
33794: PUSH
33795: LD_INT 11
33797: PUSH
33798: LD_INT 9
33800: PUSH
33801: LD_INT 20
33803: PUSH
33804: LD_INT 19
33806: PUSH
33807: LD_INT 21
33809: PUSH
33810: LD_INT 24
33812: PUSH
33813: LD_INT 22
33815: PUSH
33816: LD_INT 25
33818: PUSH
33819: LD_INT 28
33821: PUSH
33822: LD_INT 29
33824: PUSH
33825: LD_INT 30
33827: PUSH
33828: LD_INT 31
33830: PUSH
33831: LD_INT 37
33833: PUSH
33834: LD_INT 38
33836: PUSH
33837: LD_INT 32
33839: PUSH
33840: LD_INT 27
33842: PUSH
33843: LD_INT 33
33845: PUSH
33846: LD_INT 69
33848: PUSH
33849: LD_INT 39
33851: PUSH
33852: LD_INT 34
33854: PUSH
33855: LD_INT 40
33857: PUSH
33858: LD_INT 71
33860: PUSH
33861: LD_INT 23
33863: PUSH
33864: LD_INT 44
33866: PUSH
33867: LD_INT 48
33869: PUSH
33870: LD_INT 49
33872: PUSH
33873: LD_INT 50
33875: PUSH
33876: LD_INT 51
33878: PUSH
33879: LD_INT 52
33881: PUSH
33882: LD_INT 53
33884: PUSH
33885: LD_INT 54
33887: PUSH
33888: LD_INT 55
33890: PUSH
33891: LD_INT 56
33893: PUSH
33894: LD_INT 57
33896: PUSH
33897: LD_INT 58
33899: PUSH
33900: LD_INT 59
33902: PUSH
33903: LD_INT 63
33905: PUSH
33906: LD_INT 64
33908: PUSH
33909: LD_INT 65
33911: PUSH
33912: LD_INT 82
33914: PUSH
33915: LD_INT 83
33917: PUSH
33918: LD_INT 84
33920: PUSH
33921: LD_INT 85
33923: PUSH
33924: LD_INT 86
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: ST_TO_ADDR
33982: GO 33985
33984: POP
// if state > - 1 and state < 3 then
33985: LD_VAR 0 3
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: GREATER
33994: PUSH
33995: LD_VAR 0 3
33999: PUSH
34000: LD_INT 3
34002: LESS
34003: AND
34004: IFFALSE 34061
// for i in result do
34006: LD_ADDR_VAR 0 5
34010: PUSH
34011: LD_VAR 0 4
34015: PUSH
34016: FOR_IN
34017: IFFALSE 34059
// if GetTech ( i , side ) <> state then
34019: LD_VAR 0 5
34023: PPUSH
34024: LD_VAR 0 1
34028: PPUSH
34029: CALL_OW 321
34033: PUSH
34034: LD_VAR 0 3
34038: NONEQUAL
34039: IFFALSE 34057
// result := result diff i ;
34041: LD_ADDR_VAR 0 4
34045: PUSH
34046: LD_VAR 0 4
34050: PUSH
34051: LD_VAR 0 5
34055: DIFF
34056: ST_TO_ADDR
34057: GO 34016
34059: POP
34060: POP
// end ;
34061: LD_VAR 0 4
34065: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34066: LD_INT 0
34068: PPUSH
34069: PPUSH
34070: PPUSH
// result := true ;
34071: LD_ADDR_VAR 0 3
34075: PUSH
34076: LD_INT 1
34078: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34079: LD_ADDR_VAR 0 5
34083: PUSH
34084: LD_VAR 0 2
34088: PPUSH
34089: CALL_OW 480
34093: ST_TO_ADDR
// if not tmp then
34094: LD_VAR 0 5
34098: NOT
34099: IFFALSE 34103
// exit ;
34101: GO 34152
// for i in tmp do
34103: LD_ADDR_VAR 0 4
34107: PUSH
34108: LD_VAR 0 5
34112: PUSH
34113: FOR_IN
34114: IFFALSE 34150
// if GetTech ( i , side ) <> state_researched then
34116: LD_VAR 0 4
34120: PPUSH
34121: LD_VAR 0 1
34125: PPUSH
34126: CALL_OW 321
34130: PUSH
34131: LD_INT 2
34133: NONEQUAL
34134: IFFALSE 34148
// begin result := false ;
34136: LD_ADDR_VAR 0 3
34140: PUSH
34141: LD_INT 0
34143: ST_TO_ADDR
// exit ;
34144: POP
34145: POP
34146: GO 34152
// end ;
34148: GO 34113
34150: POP
34151: POP
// end ;
34152: LD_VAR 0 3
34156: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34157: LD_INT 0
34159: PPUSH
34160: PPUSH
34161: PPUSH
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
34170: PPUSH
34171: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34172: LD_VAR 0 1
34176: NOT
34177: PUSH
34178: LD_VAR 0 1
34182: PPUSH
34183: CALL_OW 257
34187: PUSH
34188: LD_INT 9
34190: NONEQUAL
34191: OR
34192: IFFALSE 34196
// exit ;
34194: GO 34769
// side := GetSide ( unit ) ;
34196: LD_ADDR_VAR 0 9
34200: PUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: CALL_OW 255
34210: ST_TO_ADDR
// tech_space := tech_spacanom ;
34211: LD_ADDR_VAR 0 12
34215: PUSH
34216: LD_INT 29
34218: ST_TO_ADDR
// tech_time := tech_taurad ;
34219: LD_ADDR_VAR 0 13
34223: PUSH
34224: LD_INT 28
34226: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34227: LD_ADDR_VAR 0 11
34231: PUSH
34232: LD_VAR 0 1
34236: PPUSH
34237: CALL_OW 310
34241: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34242: LD_VAR 0 11
34246: PPUSH
34247: CALL_OW 247
34251: PUSH
34252: LD_INT 2
34254: EQUAL
34255: IFFALSE 34259
// exit ;
34257: GO 34769
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34259: LD_ADDR_VAR 0 8
34263: PUSH
34264: LD_INT 81
34266: PUSH
34267: LD_VAR 0 9
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 3
34278: PUSH
34279: LD_INT 21
34281: PUSH
34282: LD_INT 3
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PPUSH
34297: CALL_OW 69
34301: ST_TO_ADDR
// if not tmp then
34302: LD_VAR 0 8
34306: NOT
34307: IFFALSE 34311
// exit ;
34309: GO 34769
// if in_unit then
34311: LD_VAR 0 11
34315: IFFALSE 34339
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34317: LD_ADDR_VAR 0 10
34321: PUSH
34322: LD_VAR 0 8
34326: PPUSH
34327: LD_VAR 0 11
34331: PPUSH
34332: CALL_OW 74
34336: ST_TO_ADDR
34337: GO 34359
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34339: LD_ADDR_VAR 0 10
34343: PUSH
34344: LD_VAR 0 8
34348: PPUSH
34349: LD_VAR 0 1
34353: PPUSH
34354: CALL_OW 74
34358: ST_TO_ADDR
// if not enemy then
34359: LD_VAR 0 10
34363: NOT
34364: IFFALSE 34368
// exit ;
34366: GO 34769
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34368: LD_VAR 0 11
34372: PUSH
34373: LD_VAR 0 11
34377: PPUSH
34378: LD_VAR 0 10
34382: PPUSH
34383: CALL_OW 296
34387: PUSH
34388: LD_INT 13
34390: GREATER
34391: AND
34392: PUSH
34393: LD_VAR 0 1
34397: PPUSH
34398: LD_VAR 0 10
34402: PPUSH
34403: CALL_OW 296
34407: PUSH
34408: LD_INT 12
34410: GREATER
34411: OR
34412: IFFALSE 34416
// exit ;
34414: GO 34769
// missile := [ 1 ] ;
34416: LD_ADDR_VAR 0 14
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: EMPTY
34425: LIST
34426: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34427: LD_VAR 0 9
34431: PPUSH
34432: LD_VAR 0 12
34436: PPUSH
34437: CALL_OW 325
34441: IFFALSE 34470
// missile := Insert ( missile , missile + 1 , 2 ) ;
34443: LD_ADDR_VAR 0 14
34447: PUSH
34448: LD_VAR 0 14
34452: PPUSH
34453: LD_VAR 0 14
34457: PUSH
34458: LD_INT 1
34460: PLUS
34461: PPUSH
34462: LD_INT 2
34464: PPUSH
34465: CALL_OW 2
34469: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34470: LD_VAR 0 9
34474: PPUSH
34475: LD_VAR 0 13
34479: PPUSH
34480: CALL_OW 325
34484: PUSH
34485: LD_VAR 0 10
34489: PPUSH
34490: CALL_OW 255
34494: PPUSH
34495: LD_VAR 0 13
34499: PPUSH
34500: CALL_OW 325
34504: NOT
34505: AND
34506: IFFALSE 34535
// missile := Insert ( missile , missile + 1 , 3 ) ;
34508: LD_ADDR_VAR 0 14
34512: PUSH
34513: LD_VAR 0 14
34517: PPUSH
34518: LD_VAR 0 14
34522: PUSH
34523: LD_INT 1
34525: PLUS
34526: PPUSH
34527: LD_INT 3
34529: PPUSH
34530: CALL_OW 2
34534: ST_TO_ADDR
// if missile < 2 then
34535: LD_VAR 0 14
34539: PUSH
34540: LD_INT 2
34542: LESS
34543: IFFALSE 34547
// exit ;
34545: GO 34769
// x := GetX ( enemy ) ;
34547: LD_ADDR_VAR 0 4
34551: PUSH
34552: LD_VAR 0 10
34556: PPUSH
34557: CALL_OW 250
34561: ST_TO_ADDR
// y := GetY ( enemy ) ;
34562: LD_ADDR_VAR 0 5
34566: PUSH
34567: LD_VAR 0 10
34571: PPUSH
34572: CALL_OW 251
34576: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34577: LD_ADDR_VAR 0 6
34581: PUSH
34582: LD_VAR 0 4
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PPUSH
34591: LD_INT 1
34593: PPUSH
34594: CALL_OW 12
34598: PLUS
34599: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34600: LD_ADDR_VAR 0 7
34604: PUSH
34605: LD_VAR 0 5
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PPUSH
34614: LD_INT 1
34616: PPUSH
34617: CALL_OW 12
34621: PLUS
34622: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34623: LD_VAR 0 6
34627: PPUSH
34628: LD_VAR 0 7
34632: PPUSH
34633: CALL_OW 488
34637: NOT
34638: IFFALSE 34660
// begin _x := x ;
34640: LD_ADDR_VAR 0 6
34644: PUSH
34645: LD_VAR 0 4
34649: ST_TO_ADDR
// _y := y ;
34650: LD_ADDR_VAR 0 7
34654: PUSH
34655: LD_VAR 0 5
34659: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34660: LD_ADDR_VAR 0 3
34664: PUSH
34665: LD_INT 1
34667: PPUSH
34668: LD_VAR 0 14
34672: PPUSH
34673: CALL_OW 12
34677: ST_TO_ADDR
// case i of 1 :
34678: LD_VAR 0 3
34682: PUSH
34683: LD_INT 1
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34708
34691: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34692: LD_VAR 0 1
34696: PPUSH
34697: LD_VAR 0 10
34701: PPUSH
34702: CALL_OW 115
34706: GO 34769
34708: LD_INT 2
34710: DOUBLE
34711: EQUAL
34712: IFTRUE 34716
34714: GO 34738
34716: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34717: LD_VAR 0 1
34721: PPUSH
34722: LD_VAR 0 6
34726: PPUSH
34727: LD_VAR 0 7
34731: PPUSH
34732: CALL_OW 153
34736: GO 34769
34738: LD_INT 3
34740: DOUBLE
34741: EQUAL
34742: IFTRUE 34746
34744: GO 34768
34746: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34747: LD_VAR 0 1
34751: PPUSH
34752: LD_VAR 0 6
34756: PPUSH
34757: LD_VAR 0 7
34761: PPUSH
34762: CALL_OW 154
34766: GO 34769
34768: POP
// end ;
34769: LD_VAR 0 2
34773: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34774: LD_INT 0
34776: PPUSH
34777: PPUSH
34778: PPUSH
34779: PPUSH
34780: PPUSH
34781: PPUSH
// if not unit or not building then
34782: LD_VAR 0 1
34786: NOT
34787: PUSH
34788: LD_VAR 0 2
34792: NOT
34793: OR
34794: IFFALSE 34798
// exit ;
34796: GO 34956
// x := GetX ( building ) ;
34798: LD_ADDR_VAR 0 5
34802: PUSH
34803: LD_VAR 0 2
34807: PPUSH
34808: CALL_OW 250
34812: ST_TO_ADDR
// y := GetY ( building ) ;
34813: LD_ADDR_VAR 0 6
34817: PUSH
34818: LD_VAR 0 2
34822: PPUSH
34823: CALL_OW 251
34827: ST_TO_ADDR
// for i = 0 to 5 do
34828: LD_ADDR_VAR 0 4
34832: PUSH
34833: DOUBLE
34834: LD_INT 0
34836: DEC
34837: ST_TO_ADDR
34838: LD_INT 5
34840: PUSH
34841: FOR_TO
34842: IFFALSE 34954
// begin _x := ShiftX ( x , i , 3 ) ;
34844: LD_ADDR_VAR 0 7
34848: PUSH
34849: LD_VAR 0 5
34853: PPUSH
34854: LD_VAR 0 4
34858: PPUSH
34859: LD_INT 3
34861: PPUSH
34862: CALL_OW 272
34866: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34867: LD_ADDR_VAR 0 8
34871: PUSH
34872: LD_VAR 0 6
34876: PPUSH
34877: LD_VAR 0 4
34881: PPUSH
34882: LD_INT 3
34884: PPUSH
34885: CALL_OW 273
34889: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34890: LD_VAR 0 7
34894: PPUSH
34895: LD_VAR 0 8
34899: PPUSH
34900: CALL_OW 488
34904: NOT
34905: IFFALSE 34909
// continue ;
34907: GO 34841
// if HexInfo ( _x , _y ) = 0 then
34909: LD_VAR 0 7
34913: PPUSH
34914: LD_VAR 0 8
34918: PPUSH
34919: CALL_OW 428
34923: PUSH
34924: LD_INT 0
34926: EQUAL
34927: IFFALSE 34952
// begin ComMoveXY ( unit , _x , _y ) ;
34929: LD_VAR 0 1
34933: PPUSH
34934: LD_VAR 0 7
34938: PPUSH
34939: LD_VAR 0 8
34943: PPUSH
34944: CALL_OW 111
// exit ;
34948: POP
34949: POP
34950: GO 34956
// end ; end ;
34952: GO 34841
34954: POP
34955: POP
// end ;
34956: LD_VAR 0 3
34960: RET
// export function ScanBase ( side , base_area ) ; begin
34961: LD_INT 0
34963: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34964: LD_ADDR_VAR 0 3
34968: PUSH
34969: LD_VAR 0 2
34973: PPUSH
34974: LD_INT 81
34976: PUSH
34977: LD_VAR 0 1
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PPUSH
34986: CALL_OW 70
34990: ST_TO_ADDR
// end ;
34991: LD_VAR 0 3
34995: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34996: LD_INT 0
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
// result := false ;
35002: LD_ADDR_VAR 0 2
35006: PUSH
35007: LD_INT 0
35009: ST_TO_ADDR
// side := GetSide ( unit ) ;
35010: LD_ADDR_VAR 0 3
35014: PUSH
35015: LD_VAR 0 1
35019: PPUSH
35020: CALL_OW 255
35024: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35025: LD_ADDR_VAR 0 4
35029: PUSH
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 248
35039: ST_TO_ADDR
// case nat of 1 :
35040: LD_VAR 0 4
35044: PUSH
35045: LD_INT 1
35047: DOUBLE
35048: EQUAL
35049: IFTRUE 35053
35051: GO 35064
35053: POP
// tech := tech_lassight ; 2 :
35054: LD_ADDR_VAR 0 5
35058: PUSH
35059: LD_INT 12
35061: ST_TO_ADDR
35062: GO 35103
35064: LD_INT 2
35066: DOUBLE
35067: EQUAL
35068: IFTRUE 35072
35070: GO 35083
35072: POP
// tech := tech_mortar ; 3 :
35073: LD_ADDR_VAR 0 5
35077: PUSH
35078: LD_INT 41
35080: ST_TO_ADDR
35081: GO 35103
35083: LD_INT 3
35085: DOUBLE
35086: EQUAL
35087: IFTRUE 35091
35089: GO 35102
35091: POP
// tech := tech_bazooka ; end ;
35092: LD_ADDR_VAR 0 5
35096: PUSH
35097: LD_INT 44
35099: ST_TO_ADDR
35100: GO 35103
35102: POP
// if Researched ( side , tech ) then
35103: LD_VAR 0 3
35107: PPUSH
35108: LD_VAR 0 5
35112: PPUSH
35113: CALL_OW 325
35117: IFFALSE 35144
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35119: LD_ADDR_VAR 0 2
35123: PUSH
35124: LD_INT 5
35126: PUSH
35127: LD_INT 8
35129: PUSH
35130: LD_INT 9
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: PUSH
35138: LD_VAR 0 4
35142: ARRAY
35143: ST_TO_ADDR
// end ;
35144: LD_VAR 0 2
35148: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35149: LD_INT 0
35151: PPUSH
35152: PPUSH
35153: PPUSH
// if not mines then
35154: LD_VAR 0 2
35158: NOT
35159: IFFALSE 35163
// exit ;
35161: GO 35307
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35163: LD_ADDR_VAR 0 5
35167: PUSH
35168: LD_INT 81
35170: PUSH
35171: LD_VAR 0 1
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: LD_INT 21
35185: PUSH
35186: LD_INT 3
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PPUSH
35201: CALL_OW 69
35205: ST_TO_ADDR
// for i in mines do
35206: LD_ADDR_VAR 0 4
35210: PUSH
35211: LD_VAR 0 2
35215: PUSH
35216: FOR_IN
35217: IFFALSE 35305
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35219: LD_VAR 0 4
35223: PUSH
35224: LD_INT 1
35226: ARRAY
35227: PPUSH
35228: LD_VAR 0 4
35232: PUSH
35233: LD_INT 2
35235: ARRAY
35236: PPUSH
35237: CALL_OW 458
35241: NOT
35242: IFFALSE 35246
// continue ;
35244: GO 35216
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35246: LD_VAR 0 4
35250: PUSH
35251: LD_INT 1
35253: ARRAY
35254: PPUSH
35255: LD_VAR 0 4
35259: PUSH
35260: LD_INT 2
35262: ARRAY
35263: PPUSH
35264: CALL_OW 428
35268: PUSH
35269: LD_VAR 0 5
35273: IN
35274: IFFALSE 35303
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35276: LD_VAR 0 4
35280: PUSH
35281: LD_INT 1
35283: ARRAY
35284: PPUSH
35285: LD_VAR 0 4
35289: PUSH
35290: LD_INT 2
35292: ARRAY
35293: PPUSH
35294: LD_VAR 0 1
35298: PPUSH
35299: CALL_OW 456
// end ;
35303: GO 35216
35305: POP
35306: POP
// end ;
35307: LD_VAR 0 3
35311: RET
// export function Count ( array ) ; var i ; begin
35312: LD_INT 0
35314: PPUSH
35315: PPUSH
// result := 0 ;
35316: LD_ADDR_VAR 0 2
35320: PUSH
35321: LD_INT 0
35323: ST_TO_ADDR
// for i in array do
35324: LD_ADDR_VAR 0 3
35328: PUSH
35329: LD_VAR 0 1
35333: PUSH
35334: FOR_IN
35335: IFFALSE 35359
// if i then
35337: LD_VAR 0 3
35341: IFFALSE 35357
// result := result + 1 ;
35343: LD_ADDR_VAR 0 2
35347: PUSH
35348: LD_VAR 0 2
35352: PUSH
35353: LD_INT 1
35355: PLUS
35356: ST_TO_ADDR
35357: GO 35334
35359: POP
35360: POP
// end ;
35361: LD_VAR 0 2
35365: RET
// export function IsEmpty ( building ) ; begin
35366: LD_INT 0
35368: PPUSH
// if not building then
35369: LD_VAR 0 1
35373: NOT
35374: IFFALSE 35378
// exit ;
35376: GO 35421
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35378: LD_ADDR_VAR 0 2
35382: PUSH
35383: LD_VAR 0 1
35387: PUSH
35388: LD_INT 22
35390: PUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL_OW 255
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 58
35407: PUSH
35408: EMPTY
35409: LIST
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PPUSH
35415: CALL_OW 69
35419: IN
35420: ST_TO_ADDR
// end ;
35421: LD_VAR 0 2
35425: RET
// export function IsNotFull ( building ) ; begin
35426: LD_INT 0
35428: PPUSH
// if not building then
35429: LD_VAR 0 1
35433: NOT
35434: IFFALSE 35438
// exit ;
35436: GO 35457
// result := UnitsInside ( building ) < 6 ;
35438: LD_ADDR_VAR 0 2
35442: PUSH
35443: LD_VAR 0 1
35447: PPUSH
35448: CALL_OW 313
35452: PUSH
35453: LD_INT 6
35455: LESS
35456: ST_TO_ADDR
// end ;
35457: LD_VAR 0 2
35461: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35462: LD_INT 0
35464: PPUSH
35465: PPUSH
35466: PPUSH
35467: PPUSH
// tmp := [ ] ;
35468: LD_ADDR_VAR 0 3
35472: PUSH
35473: EMPTY
35474: ST_TO_ADDR
// list := [ ] ;
35475: LD_ADDR_VAR 0 5
35479: PUSH
35480: EMPTY
35481: ST_TO_ADDR
// for i = 16 to 25 do
35482: LD_ADDR_VAR 0 4
35486: PUSH
35487: DOUBLE
35488: LD_INT 16
35490: DEC
35491: ST_TO_ADDR
35492: LD_INT 25
35494: PUSH
35495: FOR_TO
35496: IFFALSE 35569
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35498: LD_ADDR_VAR 0 3
35502: PUSH
35503: LD_VAR 0 3
35507: PUSH
35508: LD_INT 22
35510: PUSH
35511: LD_VAR 0 1
35515: PPUSH
35516: CALL_OW 255
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 91
35527: PUSH
35528: LD_VAR 0 1
35532: PUSH
35533: LD_INT 6
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 30
35543: PUSH
35544: LD_VAR 0 4
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: PUSH
35558: EMPTY
35559: LIST
35560: PPUSH
35561: CALL_OW 69
35565: ADD
35566: ST_TO_ADDR
35567: GO 35495
35569: POP
35570: POP
// for i = 1 to tmp do
35571: LD_ADDR_VAR 0 4
35575: PUSH
35576: DOUBLE
35577: LD_INT 1
35579: DEC
35580: ST_TO_ADDR
35581: LD_VAR 0 3
35585: PUSH
35586: FOR_TO
35587: IFFALSE 35675
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35589: LD_ADDR_VAR 0 5
35593: PUSH
35594: LD_VAR 0 5
35598: PUSH
35599: LD_VAR 0 3
35603: PUSH
35604: LD_VAR 0 4
35608: ARRAY
35609: PPUSH
35610: CALL_OW 266
35614: PUSH
35615: LD_VAR 0 3
35619: PUSH
35620: LD_VAR 0 4
35624: ARRAY
35625: PPUSH
35626: CALL_OW 250
35630: PUSH
35631: LD_VAR 0 3
35635: PUSH
35636: LD_VAR 0 4
35640: ARRAY
35641: PPUSH
35642: CALL_OW 251
35646: PUSH
35647: LD_VAR 0 3
35651: PUSH
35652: LD_VAR 0 4
35656: ARRAY
35657: PPUSH
35658: CALL_OW 254
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: ADD
35672: ST_TO_ADDR
35673: GO 35586
35675: POP
35676: POP
// result := list ;
35677: LD_ADDR_VAR 0 2
35681: PUSH
35682: LD_VAR 0 5
35686: ST_TO_ADDR
// end ;
35687: LD_VAR 0 2
35691: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35692: LD_INT 0
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
// if not factory then
35701: LD_VAR 0 1
35705: NOT
35706: IFFALSE 35710
// exit ;
35708: GO 36303
// if control = control_apeman then
35710: LD_VAR 0 4
35714: PUSH
35715: LD_INT 5
35717: EQUAL
35718: IFFALSE 35827
// begin tmp := UnitsInside ( factory ) ;
35720: LD_ADDR_VAR 0 8
35724: PUSH
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL_OW 313
35734: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35735: LD_VAR 0 8
35739: PPUSH
35740: LD_INT 25
35742: PUSH
35743: LD_INT 12
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PPUSH
35750: CALL_OW 72
35754: NOT
35755: IFFALSE 35765
// control := control_manual ;
35757: LD_ADDR_VAR 0 4
35761: PUSH
35762: LD_INT 1
35764: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35765: LD_ADDR_VAR 0 8
35769: PUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL 35462 0 1
35779: ST_TO_ADDR
// if tmp then
35780: LD_VAR 0 8
35784: IFFALSE 35827
// begin for i in tmp do
35786: LD_ADDR_VAR 0 7
35790: PUSH
35791: LD_VAR 0 8
35795: PUSH
35796: FOR_IN
35797: IFFALSE 35825
// if i [ 1 ] = b_ext_radio then
35799: LD_VAR 0 7
35803: PUSH
35804: LD_INT 1
35806: ARRAY
35807: PUSH
35808: LD_INT 22
35810: EQUAL
35811: IFFALSE 35823
// begin control := control_remote ;
35813: LD_ADDR_VAR 0 4
35817: PUSH
35818: LD_INT 2
35820: ST_TO_ADDR
// break ;
35821: GO 35825
// end ;
35823: GO 35796
35825: POP
35826: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35827: LD_VAR 0 1
35831: PPUSH
35832: LD_VAR 0 2
35836: PPUSH
35837: LD_VAR 0 3
35841: PPUSH
35842: LD_VAR 0 4
35846: PPUSH
35847: LD_VAR 0 5
35851: PPUSH
35852: CALL_OW 448
35856: IFFALSE 35891
// begin result := [ chassis , engine , control , weapon ] ;
35858: LD_ADDR_VAR 0 6
35862: PUSH
35863: LD_VAR 0 2
35867: PUSH
35868: LD_VAR 0 3
35872: PUSH
35873: LD_VAR 0 4
35877: PUSH
35878: LD_VAR 0 5
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: ST_TO_ADDR
// exit ;
35889: GO 36303
// end ; _chassis := AvailableChassisList ( factory ) ;
35891: LD_ADDR_VAR 0 9
35895: PUSH
35896: LD_VAR 0 1
35900: PPUSH
35901: CALL_OW 475
35905: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35906: LD_ADDR_VAR 0 11
35910: PUSH
35911: LD_VAR 0 1
35915: PPUSH
35916: CALL_OW 476
35920: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35921: LD_ADDR_VAR 0 12
35925: PUSH
35926: LD_VAR 0 1
35930: PPUSH
35931: CALL_OW 477
35935: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35936: LD_ADDR_VAR 0 10
35940: PUSH
35941: LD_VAR 0 1
35945: PPUSH
35946: CALL_OW 478
35950: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35951: LD_VAR 0 9
35955: NOT
35956: PUSH
35957: LD_VAR 0 11
35961: NOT
35962: OR
35963: PUSH
35964: LD_VAR 0 12
35968: NOT
35969: OR
35970: PUSH
35971: LD_VAR 0 10
35975: NOT
35976: OR
35977: IFFALSE 36012
// begin result := [ chassis , engine , control , weapon ] ;
35979: LD_ADDR_VAR 0 6
35983: PUSH
35984: LD_VAR 0 2
35988: PUSH
35989: LD_VAR 0 3
35993: PUSH
35994: LD_VAR 0 4
35998: PUSH
35999: LD_VAR 0 5
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: ST_TO_ADDR
// exit ;
36010: GO 36303
// end ; if not chassis in _chassis then
36012: LD_VAR 0 2
36016: PUSH
36017: LD_VAR 0 9
36021: IN
36022: NOT
36023: IFFALSE 36049
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36025: LD_ADDR_VAR 0 2
36029: PUSH
36030: LD_VAR 0 9
36034: PUSH
36035: LD_INT 1
36037: PPUSH
36038: LD_VAR 0 9
36042: PPUSH
36043: CALL_OW 12
36047: ARRAY
36048: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36049: LD_VAR 0 2
36053: PPUSH
36054: LD_VAR 0 3
36058: PPUSH
36059: CALL 36308 0 2
36063: NOT
36064: IFFALSE 36123
// repeat engine := _engine [ 1 ] ;
36066: LD_ADDR_VAR 0 3
36070: PUSH
36071: LD_VAR 0 11
36075: PUSH
36076: LD_INT 1
36078: ARRAY
36079: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36080: LD_ADDR_VAR 0 11
36084: PUSH
36085: LD_VAR 0 11
36089: PPUSH
36090: LD_INT 1
36092: PPUSH
36093: CALL_OW 3
36097: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36098: LD_VAR 0 2
36102: PPUSH
36103: LD_VAR 0 3
36107: PPUSH
36108: CALL 36308 0 2
36112: PUSH
36113: LD_VAR 0 11
36117: PUSH
36118: EMPTY
36119: EQUAL
36120: OR
36121: IFFALSE 36066
// if not control in _control then
36123: LD_VAR 0 4
36127: PUSH
36128: LD_VAR 0 12
36132: IN
36133: NOT
36134: IFFALSE 36160
// control := _control [ rand ( 1 , _control ) ] ;
36136: LD_ADDR_VAR 0 4
36140: PUSH
36141: LD_VAR 0 12
36145: PUSH
36146: LD_INT 1
36148: PPUSH
36149: LD_VAR 0 12
36153: PPUSH
36154: CALL_OW 12
36158: ARRAY
36159: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36160: LD_VAR 0 2
36164: PPUSH
36165: LD_VAR 0 5
36169: PPUSH
36170: CALL 36528 0 2
36174: NOT
36175: IFFALSE 36234
// repeat weapon := _weapon [ 1 ] ;
36177: LD_ADDR_VAR 0 5
36181: PUSH
36182: LD_VAR 0 10
36186: PUSH
36187: LD_INT 1
36189: ARRAY
36190: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36191: LD_ADDR_VAR 0 10
36195: PUSH
36196: LD_VAR 0 10
36200: PPUSH
36201: LD_INT 1
36203: PPUSH
36204: CALL_OW 3
36208: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36209: LD_VAR 0 2
36213: PPUSH
36214: LD_VAR 0 5
36218: PPUSH
36219: CALL 36528 0 2
36223: PUSH
36224: LD_VAR 0 10
36228: PUSH
36229: EMPTY
36230: EQUAL
36231: OR
36232: IFFALSE 36177
// result := [ ] ;
36234: LD_ADDR_VAR 0 6
36238: PUSH
36239: EMPTY
36240: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36241: LD_VAR 0 1
36245: PPUSH
36246: LD_VAR 0 2
36250: PPUSH
36251: LD_VAR 0 3
36255: PPUSH
36256: LD_VAR 0 4
36260: PPUSH
36261: LD_VAR 0 5
36265: PPUSH
36266: CALL_OW 448
36270: IFFALSE 36303
// result := [ chassis , engine , control , weapon ] ;
36272: LD_ADDR_VAR 0 6
36276: PUSH
36277: LD_VAR 0 2
36281: PUSH
36282: LD_VAR 0 3
36286: PUSH
36287: LD_VAR 0 4
36291: PUSH
36292: LD_VAR 0 5
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: ST_TO_ADDR
// end ;
36303: LD_VAR 0 6
36307: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36308: LD_INT 0
36310: PPUSH
// if not chassis or not engine then
36311: LD_VAR 0 1
36315: NOT
36316: PUSH
36317: LD_VAR 0 2
36321: NOT
36322: OR
36323: IFFALSE 36327
// exit ;
36325: GO 36523
// case engine of engine_solar :
36327: LD_VAR 0 2
36331: PUSH
36332: LD_INT 2
36334: DOUBLE
36335: EQUAL
36336: IFTRUE 36340
36338: GO 36378
36340: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36341: LD_ADDR_VAR 0 3
36345: PUSH
36346: LD_INT 11
36348: PUSH
36349: LD_INT 12
36351: PUSH
36352: LD_INT 13
36354: PUSH
36355: LD_INT 14
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 2
36363: PUSH
36364: LD_INT 3
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: ST_TO_ADDR
36376: GO 36507
36378: LD_INT 1
36380: DOUBLE
36381: EQUAL
36382: IFTRUE 36386
36384: GO 36448
36386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36387: LD_ADDR_VAR 0 3
36391: PUSH
36392: LD_INT 11
36394: PUSH
36395: LD_INT 12
36397: PUSH
36398: LD_INT 13
36400: PUSH
36401: LD_INT 14
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: LD_INT 3
36412: PUSH
36413: LD_INT 4
36415: PUSH
36416: LD_INT 5
36418: PUSH
36419: LD_INT 21
36421: PUSH
36422: LD_INT 23
36424: PUSH
36425: LD_INT 22
36427: PUSH
36428: LD_INT 24
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
36446: GO 36507
36448: LD_INT 3
36450: DOUBLE
36451: EQUAL
36452: IFTRUE 36456
36454: GO 36506
36456: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36457: LD_ADDR_VAR 0 3
36461: PUSH
36462: LD_INT 13
36464: PUSH
36465: LD_INT 14
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: LD_INT 4
36476: PUSH
36477: LD_INT 5
36479: PUSH
36480: LD_INT 21
36482: PUSH
36483: LD_INT 22
36485: PUSH
36486: LD_INT 23
36488: PUSH
36489: LD_INT 24
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
36504: GO 36507
36506: POP
// result := ( chassis in result ) ;
36507: LD_ADDR_VAR 0 3
36511: PUSH
36512: LD_VAR 0 1
36516: PUSH
36517: LD_VAR 0 3
36521: IN
36522: ST_TO_ADDR
// end ;
36523: LD_VAR 0 3
36527: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36528: LD_INT 0
36530: PPUSH
// if not chassis or not weapon then
36531: LD_VAR 0 1
36535: NOT
36536: PUSH
36537: LD_VAR 0 2
36541: NOT
36542: OR
36543: IFFALSE 36547
// exit ;
36545: GO 37573
// case weapon of us_machine_gun :
36547: LD_VAR 0 2
36551: PUSH
36552: LD_INT 2
36554: DOUBLE
36555: EQUAL
36556: IFTRUE 36560
36558: GO 36590
36560: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36561: LD_ADDR_VAR 0 3
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: LD_INT 4
36577: PUSH
36578: LD_INT 5
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
36588: GO 37557
36590: LD_INT 3
36592: DOUBLE
36593: EQUAL
36594: IFTRUE 36598
36596: GO 36628
36598: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36599: LD_ADDR_VAR 0 3
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 3
36612: PUSH
36613: LD_INT 4
36615: PUSH
36616: LD_INT 5
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: ST_TO_ADDR
36626: GO 37557
36628: LD_INT 11
36630: DOUBLE
36631: EQUAL
36632: IFTRUE 36636
36634: GO 36666
36636: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36637: LD_ADDR_VAR 0 3
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: LD_INT 2
36647: PUSH
36648: LD_INT 3
36650: PUSH
36651: LD_INT 4
36653: PUSH
36654: LD_INT 5
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: ST_TO_ADDR
36664: GO 37557
36666: LD_INT 4
36668: DOUBLE
36669: EQUAL
36670: IFTRUE 36674
36672: GO 36700
36674: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36675: LD_ADDR_VAR 0 3
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: LD_INT 3
36685: PUSH
36686: LD_INT 4
36688: PUSH
36689: LD_INT 5
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: ST_TO_ADDR
36698: GO 37557
36700: LD_INT 5
36702: DOUBLE
36703: EQUAL
36704: IFTRUE 36708
36706: GO 36734
36708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36709: LD_ADDR_VAR 0 3
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: LD_INT 3
36719: PUSH
36720: LD_INT 4
36722: PUSH
36723: LD_INT 5
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
36732: GO 37557
36734: LD_INT 9
36736: DOUBLE
36737: EQUAL
36738: IFTRUE 36742
36740: GO 36768
36742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36743: LD_ADDR_VAR 0 3
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: LD_INT 3
36753: PUSH
36754: LD_INT 4
36756: PUSH
36757: LD_INT 5
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: ST_TO_ADDR
36766: GO 37557
36768: LD_INT 7
36770: DOUBLE
36771: EQUAL
36772: IFTRUE 36776
36774: GO 36802
36776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36777: LD_ADDR_VAR 0 3
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: LD_INT 3
36787: PUSH
36788: LD_INT 4
36790: PUSH
36791: LD_INT 5
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: ST_TO_ADDR
36800: GO 37557
36802: LD_INT 12
36804: DOUBLE
36805: EQUAL
36806: IFTRUE 36810
36808: GO 36836
36810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36811: LD_ADDR_VAR 0 3
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: LD_INT 3
36821: PUSH
36822: LD_INT 4
36824: PUSH
36825: LD_INT 5
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
36834: GO 37557
36836: LD_INT 13
36838: DOUBLE
36839: EQUAL
36840: IFTRUE 36844
36842: GO 36870
36844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36845: LD_ADDR_VAR 0 3
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: LD_INT 3
36855: PUSH
36856: LD_INT 4
36858: PUSH
36859: LD_INT 5
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: ST_TO_ADDR
36868: GO 37557
36870: LD_INT 14
36872: DOUBLE
36873: EQUAL
36874: IFTRUE 36878
36876: GO 36896
36878: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36879: LD_ADDR_VAR 0 3
36883: PUSH
36884: LD_INT 4
36886: PUSH
36887: LD_INT 5
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: ST_TO_ADDR
36894: GO 37557
36896: LD_INT 6
36898: DOUBLE
36899: EQUAL
36900: IFTRUE 36904
36902: GO 36922
36904: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36905: LD_ADDR_VAR 0 3
36909: PUSH
36910: LD_INT 4
36912: PUSH
36913: LD_INT 5
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: ST_TO_ADDR
36920: GO 37557
36922: LD_INT 10
36924: DOUBLE
36925: EQUAL
36926: IFTRUE 36930
36928: GO 36948
36930: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36931: LD_ADDR_VAR 0 3
36935: PUSH
36936: LD_INT 4
36938: PUSH
36939: LD_INT 5
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: ST_TO_ADDR
36946: GO 37557
36948: LD_INT 22
36950: DOUBLE
36951: EQUAL
36952: IFTRUE 36956
36954: GO 36982
36956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36957: LD_ADDR_VAR 0 3
36961: PUSH
36962: LD_INT 11
36964: PUSH
36965: LD_INT 12
36967: PUSH
36968: LD_INT 13
36970: PUSH
36971: LD_INT 14
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: ST_TO_ADDR
36980: GO 37557
36982: LD_INT 23
36984: DOUBLE
36985: EQUAL
36986: IFTRUE 36990
36988: GO 37016
36990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36991: LD_ADDR_VAR 0 3
36995: PUSH
36996: LD_INT 11
36998: PUSH
36999: LD_INT 12
37001: PUSH
37002: LD_INT 13
37004: PUSH
37005: LD_INT 14
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: ST_TO_ADDR
37014: GO 37557
37016: LD_INT 24
37018: DOUBLE
37019: EQUAL
37020: IFTRUE 37024
37022: GO 37050
37024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37025: LD_ADDR_VAR 0 3
37029: PUSH
37030: LD_INT 11
37032: PUSH
37033: LD_INT 12
37035: PUSH
37036: LD_INT 13
37038: PUSH
37039: LD_INT 14
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: ST_TO_ADDR
37048: GO 37557
37050: LD_INT 30
37052: DOUBLE
37053: EQUAL
37054: IFTRUE 37058
37056: GO 37084
37058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37059: LD_ADDR_VAR 0 3
37063: PUSH
37064: LD_INT 11
37066: PUSH
37067: LD_INT 12
37069: PUSH
37070: LD_INT 13
37072: PUSH
37073: LD_INT 14
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: ST_TO_ADDR
37082: GO 37557
37084: LD_INT 25
37086: DOUBLE
37087: EQUAL
37088: IFTRUE 37092
37090: GO 37110
37092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37093: LD_ADDR_VAR 0 3
37097: PUSH
37098: LD_INT 13
37100: PUSH
37101: LD_INT 14
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: ST_TO_ADDR
37108: GO 37557
37110: LD_INT 27
37112: DOUBLE
37113: EQUAL
37114: IFTRUE 37118
37116: GO 37136
37118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37119: LD_ADDR_VAR 0 3
37123: PUSH
37124: LD_INT 13
37126: PUSH
37127: LD_INT 14
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: ST_TO_ADDR
37134: GO 37557
37136: LD_INT 28
37138: DOUBLE
37139: EQUAL
37140: IFTRUE 37144
37142: GO 37162
37144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37145: LD_ADDR_VAR 0 3
37149: PUSH
37150: LD_INT 13
37152: PUSH
37153: LD_INT 14
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: ST_TO_ADDR
37160: GO 37557
37162: LD_INT 29
37164: DOUBLE
37165: EQUAL
37166: IFTRUE 37170
37168: GO 37188
37170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37171: LD_ADDR_VAR 0 3
37175: PUSH
37176: LD_INT 13
37178: PUSH
37179: LD_INT 14
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: ST_TO_ADDR
37186: GO 37557
37188: LD_INT 31
37190: DOUBLE
37191: EQUAL
37192: IFTRUE 37196
37194: GO 37214
37196: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37197: LD_ADDR_VAR 0 3
37201: PUSH
37202: LD_INT 13
37204: PUSH
37205: LD_INT 14
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: ST_TO_ADDR
37212: GO 37557
37214: LD_INT 26
37216: DOUBLE
37217: EQUAL
37218: IFTRUE 37222
37220: GO 37240
37222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37223: LD_ADDR_VAR 0 3
37227: PUSH
37228: LD_INT 13
37230: PUSH
37231: LD_INT 14
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: ST_TO_ADDR
37238: GO 37557
37240: LD_INT 42
37242: DOUBLE
37243: EQUAL
37244: IFTRUE 37248
37246: GO 37274
37248: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37249: LD_ADDR_VAR 0 3
37253: PUSH
37254: LD_INT 21
37256: PUSH
37257: LD_INT 22
37259: PUSH
37260: LD_INT 23
37262: PUSH
37263: LD_INT 24
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: ST_TO_ADDR
37272: GO 37557
37274: LD_INT 43
37276: DOUBLE
37277: EQUAL
37278: IFTRUE 37282
37280: GO 37308
37282: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37283: LD_ADDR_VAR 0 3
37287: PUSH
37288: LD_INT 21
37290: PUSH
37291: LD_INT 22
37293: PUSH
37294: LD_INT 23
37296: PUSH
37297: LD_INT 24
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: ST_TO_ADDR
37306: GO 37557
37308: LD_INT 44
37310: DOUBLE
37311: EQUAL
37312: IFTRUE 37316
37314: GO 37342
37316: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37317: LD_ADDR_VAR 0 3
37321: PUSH
37322: LD_INT 21
37324: PUSH
37325: LD_INT 22
37327: PUSH
37328: LD_INT 23
37330: PUSH
37331: LD_INT 24
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: ST_TO_ADDR
37340: GO 37557
37342: LD_INT 45
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37350
37348: GO 37376
37350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37351: LD_ADDR_VAR 0 3
37355: PUSH
37356: LD_INT 21
37358: PUSH
37359: LD_INT 22
37361: PUSH
37362: LD_INT 23
37364: PUSH
37365: LD_INT 24
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
37374: GO 37557
37376: LD_INT 49
37378: DOUBLE
37379: EQUAL
37380: IFTRUE 37384
37382: GO 37410
37384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37385: LD_ADDR_VAR 0 3
37389: PUSH
37390: LD_INT 21
37392: PUSH
37393: LD_INT 22
37395: PUSH
37396: LD_INT 23
37398: PUSH
37399: LD_INT 24
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: ST_TO_ADDR
37408: GO 37557
37410: LD_INT 51
37412: DOUBLE
37413: EQUAL
37414: IFTRUE 37418
37416: GO 37444
37418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37419: LD_ADDR_VAR 0 3
37423: PUSH
37424: LD_INT 21
37426: PUSH
37427: LD_INT 22
37429: PUSH
37430: LD_INT 23
37432: PUSH
37433: LD_INT 24
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: ST_TO_ADDR
37442: GO 37557
37444: LD_INT 52
37446: DOUBLE
37447: EQUAL
37448: IFTRUE 37452
37450: GO 37478
37452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37453: LD_ADDR_VAR 0 3
37457: PUSH
37458: LD_INT 21
37460: PUSH
37461: LD_INT 22
37463: PUSH
37464: LD_INT 23
37466: PUSH
37467: LD_INT 24
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: ST_TO_ADDR
37476: GO 37557
37478: LD_INT 53
37480: DOUBLE
37481: EQUAL
37482: IFTRUE 37486
37484: GO 37504
37486: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37487: LD_ADDR_VAR 0 3
37491: PUSH
37492: LD_INT 23
37494: PUSH
37495: LD_INT 24
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: ST_TO_ADDR
37502: GO 37557
37504: LD_INT 46
37506: DOUBLE
37507: EQUAL
37508: IFTRUE 37512
37510: GO 37530
37512: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37513: LD_ADDR_VAR 0 3
37517: PUSH
37518: LD_INT 23
37520: PUSH
37521: LD_INT 24
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: ST_TO_ADDR
37528: GO 37557
37530: LD_INT 47
37532: DOUBLE
37533: EQUAL
37534: IFTRUE 37538
37536: GO 37556
37538: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37539: LD_ADDR_VAR 0 3
37543: PUSH
37544: LD_INT 23
37546: PUSH
37547: LD_INT 24
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: ST_TO_ADDR
37554: GO 37557
37556: POP
// result := ( chassis in result ) ;
37557: LD_ADDR_VAR 0 3
37561: PUSH
37562: LD_VAR 0 1
37566: PUSH
37567: LD_VAR 0 3
37571: IN
37572: ST_TO_ADDR
// end ;
37573: LD_VAR 0 3
37577: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37578: LD_INT 0
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
// result := array ;
37587: LD_ADDR_VAR 0 5
37591: PUSH
37592: LD_VAR 0 1
37596: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37597: LD_VAR 0 1
37601: NOT
37602: PUSH
37603: LD_VAR 0 2
37607: NOT
37608: OR
37609: PUSH
37610: LD_VAR 0 3
37614: NOT
37615: OR
37616: PUSH
37617: LD_VAR 0 2
37621: PUSH
37622: LD_VAR 0 1
37626: GREATER
37627: OR
37628: PUSH
37629: LD_VAR 0 3
37633: PUSH
37634: LD_VAR 0 1
37638: GREATER
37639: OR
37640: IFFALSE 37644
// exit ;
37642: GO 37940
// if direction then
37644: LD_VAR 0 4
37648: IFFALSE 37712
// begin d := 1 ;
37650: LD_ADDR_VAR 0 9
37654: PUSH
37655: LD_INT 1
37657: ST_TO_ADDR
// if i_from > i_to then
37658: LD_VAR 0 2
37662: PUSH
37663: LD_VAR 0 3
37667: GREATER
37668: IFFALSE 37694
// length := ( array - i_from ) + i_to else
37670: LD_ADDR_VAR 0 11
37674: PUSH
37675: LD_VAR 0 1
37679: PUSH
37680: LD_VAR 0 2
37684: MINUS
37685: PUSH
37686: LD_VAR 0 3
37690: PLUS
37691: ST_TO_ADDR
37692: GO 37710
// length := i_to - i_from ;
37694: LD_ADDR_VAR 0 11
37698: PUSH
37699: LD_VAR 0 3
37703: PUSH
37704: LD_VAR 0 2
37708: MINUS
37709: ST_TO_ADDR
// end else
37710: GO 37773
// begin d := - 1 ;
37712: LD_ADDR_VAR 0 9
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: ST_TO_ADDR
// if i_from > i_to then
37721: LD_VAR 0 2
37725: PUSH
37726: LD_VAR 0 3
37730: GREATER
37731: IFFALSE 37751
// length := i_from - i_to else
37733: LD_ADDR_VAR 0 11
37737: PUSH
37738: LD_VAR 0 2
37742: PUSH
37743: LD_VAR 0 3
37747: MINUS
37748: ST_TO_ADDR
37749: GO 37773
// length := ( array - i_to ) + i_from ;
37751: LD_ADDR_VAR 0 11
37755: PUSH
37756: LD_VAR 0 1
37760: PUSH
37761: LD_VAR 0 3
37765: MINUS
37766: PUSH
37767: LD_VAR 0 2
37771: PLUS
37772: ST_TO_ADDR
// end ; if not length then
37773: LD_VAR 0 11
37777: NOT
37778: IFFALSE 37782
// exit ;
37780: GO 37940
// tmp := array ;
37782: LD_ADDR_VAR 0 10
37786: PUSH
37787: LD_VAR 0 1
37791: ST_TO_ADDR
// for i = 1 to length do
37792: LD_ADDR_VAR 0 6
37796: PUSH
37797: DOUBLE
37798: LD_INT 1
37800: DEC
37801: ST_TO_ADDR
37802: LD_VAR 0 11
37806: PUSH
37807: FOR_TO
37808: IFFALSE 37928
// begin for j = 1 to array do
37810: LD_ADDR_VAR 0 7
37814: PUSH
37815: DOUBLE
37816: LD_INT 1
37818: DEC
37819: ST_TO_ADDR
37820: LD_VAR 0 1
37824: PUSH
37825: FOR_TO
37826: IFFALSE 37914
// begin k := j + d ;
37828: LD_ADDR_VAR 0 8
37832: PUSH
37833: LD_VAR 0 7
37837: PUSH
37838: LD_VAR 0 9
37842: PLUS
37843: ST_TO_ADDR
// if k > array then
37844: LD_VAR 0 8
37848: PUSH
37849: LD_VAR 0 1
37853: GREATER
37854: IFFALSE 37864
// k := 1 ;
37856: LD_ADDR_VAR 0 8
37860: PUSH
37861: LD_INT 1
37863: ST_TO_ADDR
// if not k then
37864: LD_VAR 0 8
37868: NOT
37869: IFFALSE 37881
// k := array ;
37871: LD_ADDR_VAR 0 8
37875: PUSH
37876: LD_VAR 0 1
37880: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37881: LD_ADDR_VAR 0 10
37885: PUSH
37886: LD_VAR 0 10
37890: PPUSH
37891: LD_VAR 0 8
37895: PPUSH
37896: LD_VAR 0 1
37900: PUSH
37901: LD_VAR 0 7
37905: ARRAY
37906: PPUSH
37907: CALL_OW 1
37911: ST_TO_ADDR
// end ;
37912: GO 37825
37914: POP
37915: POP
// array := tmp ;
37916: LD_ADDR_VAR 0 1
37920: PUSH
37921: LD_VAR 0 10
37925: ST_TO_ADDR
// end ;
37926: GO 37807
37928: POP
37929: POP
// result := array ;
37930: LD_ADDR_VAR 0 5
37934: PUSH
37935: LD_VAR 0 1
37939: ST_TO_ADDR
// end ;
37940: LD_VAR 0 5
37944: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37945: LD_INT 0
37947: PPUSH
37948: PPUSH
// result := 0 ;
37949: LD_ADDR_VAR 0 3
37953: PUSH
37954: LD_INT 0
37956: ST_TO_ADDR
// if not array or not value in array then
37957: LD_VAR 0 1
37961: NOT
37962: PUSH
37963: LD_VAR 0 2
37967: PUSH
37968: LD_VAR 0 1
37972: IN
37973: NOT
37974: OR
37975: IFFALSE 37979
// exit ;
37977: GO 38033
// for i = 1 to array do
37979: LD_ADDR_VAR 0 4
37983: PUSH
37984: DOUBLE
37985: LD_INT 1
37987: DEC
37988: ST_TO_ADDR
37989: LD_VAR 0 1
37993: PUSH
37994: FOR_TO
37995: IFFALSE 38031
// if value = array [ i ] then
37997: LD_VAR 0 2
38001: PUSH
38002: LD_VAR 0 1
38006: PUSH
38007: LD_VAR 0 4
38011: ARRAY
38012: EQUAL
38013: IFFALSE 38029
// begin result := i ;
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: LD_VAR 0 4
38024: ST_TO_ADDR
// exit ;
38025: POP
38026: POP
38027: GO 38033
// end ;
38029: GO 37994
38031: POP
38032: POP
// end ;
38033: LD_VAR 0 3
38037: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38038: LD_INT 0
38040: PPUSH
// vc_chassis := chassis ;
38041: LD_ADDR_OWVAR 37
38045: PUSH
38046: LD_VAR 0 1
38050: ST_TO_ADDR
// vc_engine := engine ;
38051: LD_ADDR_OWVAR 39
38055: PUSH
38056: LD_VAR 0 2
38060: ST_TO_ADDR
// vc_control := control ;
38061: LD_ADDR_OWVAR 38
38065: PUSH
38066: LD_VAR 0 3
38070: ST_TO_ADDR
// vc_weapon := weapon ;
38071: LD_ADDR_OWVAR 40
38075: PUSH
38076: LD_VAR 0 4
38080: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38081: LD_ADDR_OWVAR 41
38085: PUSH
38086: LD_VAR 0 5
38090: ST_TO_ADDR
// end ;
38091: LD_VAR 0 6
38095: RET
// export function WantPlant ( unit ) ; var task ; begin
38096: LD_INT 0
38098: PPUSH
38099: PPUSH
// result := false ;
38100: LD_ADDR_VAR 0 2
38104: PUSH
38105: LD_INT 0
38107: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38108: LD_ADDR_VAR 0 3
38112: PUSH
38113: LD_VAR 0 1
38117: PPUSH
38118: CALL_OW 437
38122: ST_TO_ADDR
// if task then
38123: LD_VAR 0 3
38127: IFFALSE 38155
// if task [ 1 ] [ 1 ] = p then
38129: LD_VAR 0 3
38133: PUSH
38134: LD_INT 1
38136: ARRAY
38137: PUSH
38138: LD_INT 1
38140: ARRAY
38141: PUSH
38142: LD_STRING p
38144: EQUAL
38145: IFFALSE 38155
// result := true ;
38147: LD_ADDR_VAR 0 2
38151: PUSH
38152: LD_INT 1
38154: ST_TO_ADDR
// end ;
38155: LD_VAR 0 2
38159: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38160: LD_INT 0
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
// if pos < 1 then
38166: LD_VAR 0 2
38170: PUSH
38171: LD_INT 1
38173: LESS
38174: IFFALSE 38178
// exit ;
38176: GO 38481
// if pos = 1 then
38178: LD_VAR 0 2
38182: PUSH
38183: LD_INT 1
38185: EQUAL
38186: IFFALSE 38219
// result := Replace ( arr , pos [ 1 ] , value ) else
38188: LD_ADDR_VAR 0 4
38192: PUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: LD_VAR 0 2
38202: PUSH
38203: LD_INT 1
38205: ARRAY
38206: PPUSH
38207: LD_VAR 0 3
38211: PPUSH
38212: CALL_OW 1
38216: ST_TO_ADDR
38217: GO 38481
// begin tmp := arr ;
38219: LD_ADDR_VAR 0 6
38223: PUSH
38224: LD_VAR 0 1
38228: ST_TO_ADDR
// s_arr := [ tmp ] ;
38229: LD_ADDR_VAR 0 7
38233: PUSH
38234: LD_VAR 0 6
38238: PUSH
38239: EMPTY
38240: LIST
38241: ST_TO_ADDR
// for i = 1 to pos - 1 do
38242: LD_ADDR_VAR 0 5
38246: PUSH
38247: DOUBLE
38248: LD_INT 1
38250: DEC
38251: ST_TO_ADDR
38252: LD_VAR 0 2
38256: PUSH
38257: LD_INT 1
38259: MINUS
38260: PUSH
38261: FOR_TO
38262: IFFALSE 38307
// begin tmp := tmp [ pos [ i ] ] ;
38264: LD_ADDR_VAR 0 6
38268: PUSH
38269: LD_VAR 0 6
38273: PUSH
38274: LD_VAR 0 2
38278: PUSH
38279: LD_VAR 0 5
38283: ARRAY
38284: ARRAY
38285: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38286: LD_ADDR_VAR 0 7
38290: PUSH
38291: LD_VAR 0 7
38295: PUSH
38296: LD_VAR 0 6
38300: PUSH
38301: EMPTY
38302: LIST
38303: ADD
38304: ST_TO_ADDR
// end ;
38305: GO 38261
38307: POP
38308: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38309: LD_ADDR_VAR 0 6
38313: PUSH
38314: LD_VAR 0 6
38318: PPUSH
38319: LD_VAR 0 2
38323: PUSH
38324: LD_VAR 0 2
38328: ARRAY
38329: PPUSH
38330: LD_VAR 0 3
38334: PPUSH
38335: CALL_OW 1
38339: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38340: LD_ADDR_VAR 0 7
38344: PUSH
38345: LD_VAR 0 7
38349: PPUSH
38350: LD_VAR 0 7
38354: PPUSH
38355: LD_VAR 0 6
38359: PPUSH
38360: CALL_OW 1
38364: ST_TO_ADDR
// for i = s_arr downto 2 do
38365: LD_ADDR_VAR 0 5
38369: PUSH
38370: DOUBLE
38371: LD_VAR 0 7
38375: INC
38376: ST_TO_ADDR
38377: LD_INT 2
38379: PUSH
38380: FOR_DOWNTO
38381: IFFALSE 38465
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38383: LD_ADDR_VAR 0 6
38387: PUSH
38388: LD_VAR 0 7
38392: PUSH
38393: LD_VAR 0 5
38397: PUSH
38398: LD_INT 1
38400: MINUS
38401: ARRAY
38402: PPUSH
38403: LD_VAR 0 2
38407: PUSH
38408: LD_VAR 0 5
38412: PUSH
38413: LD_INT 1
38415: MINUS
38416: ARRAY
38417: PPUSH
38418: LD_VAR 0 7
38422: PUSH
38423: LD_VAR 0 5
38427: ARRAY
38428: PPUSH
38429: CALL_OW 1
38433: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38434: LD_ADDR_VAR 0 7
38438: PUSH
38439: LD_VAR 0 7
38443: PPUSH
38444: LD_VAR 0 5
38448: PUSH
38449: LD_INT 1
38451: MINUS
38452: PPUSH
38453: LD_VAR 0 6
38457: PPUSH
38458: CALL_OW 1
38462: ST_TO_ADDR
// end ;
38463: GO 38380
38465: POP
38466: POP
// result := s_arr [ 1 ] ;
38467: LD_ADDR_VAR 0 4
38471: PUSH
38472: LD_VAR 0 7
38476: PUSH
38477: LD_INT 1
38479: ARRAY
38480: ST_TO_ADDR
// end ; end ;
38481: LD_VAR 0 4
38485: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38486: LD_INT 0
38488: PPUSH
38489: PPUSH
// if not list then
38490: LD_VAR 0 1
38494: NOT
38495: IFFALSE 38499
// exit ;
38497: GO 38590
// i := list [ pos1 ] ;
38499: LD_ADDR_VAR 0 5
38503: PUSH
38504: LD_VAR 0 1
38508: PUSH
38509: LD_VAR 0 2
38513: ARRAY
38514: ST_TO_ADDR
// if not i then
38515: LD_VAR 0 5
38519: NOT
38520: IFFALSE 38524
// exit ;
38522: GO 38590
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38524: LD_ADDR_VAR 0 1
38528: PUSH
38529: LD_VAR 0 1
38533: PPUSH
38534: LD_VAR 0 2
38538: PPUSH
38539: LD_VAR 0 1
38543: PUSH
38544: LD_VAR 0 3
38548: ARRAY
38549: PPUSH
38550: CALL_OW 1
38554: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38555: LD_ADDR_VAR 0 1
38559: PUSH
38560: LD_VAR 0 1
38564: PPUSH
38565: LD_VAR 0 3
38569: PPUSH
38570: LD_VAR 0 5
38574: PPUSH
38575: CALL_OW 1
38579: ST_TO_ADDR
// result := list ;
38580: LD_ADDR_VAR 0 4
38584: PUSH
38585: LD_VAR 0 1
38589: ST_TO_ADDR
// end ;
38590: LD_VAR 0 4
38594: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38595: LD_INT 0
38597: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38598: LD_ADDR_VAR 0 5
38602: PUSH
38603: LD_VAR 0 1
38607: PPUSH
38608: CALL_OW 250
38612: PPUSH
38613: LD_VAR 0 1
38617: PPUSH
38618: CALL_OW 251
38622: PPUSH
38623: LD_VAR 0 2
38627: PPUSH
38628: LD_VAR 0 3
38632: PPUSH
38633: LD_VAR 0 4
38637: PPUSH
38638: CALL 38648 0 5
38642: ST_TO_ADDR
// end ;
38643: LD_VAR 0 5
38647: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38648: LD_INT 0
38650: PPUSH
38651: PPUSH
38652: PPUSH
38653: PPUSH
// if not list then
38654: LD_VAR 0 3
38658: NOT
38659: IFFALSE 38663
// exit ;
38661: GO 39051
// result := [ ] ;
38663: LD_ADDR_VAR 0 6
38667: PUSH
38668: EMPTY
38669: ST_TO_ADDR
// for i in list do
38670: LD_ADDR_VAR 0 7
38674: PUSH
38675: LD_VAR 0 3
38679: PUSH
38680: FOR_IN
38681: IFFALSE 38883
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38683: LD_ADDR_VAR 0 9
38687: PUSH
38688: LD_VAR 0 7
38692: PPUSH
38693: LD_VAR 0 1
38697: PPUSH
38698: LD_VAR 0 2
38702: PPUSH
38703: CALL_OW 297
38707: ST_TO_ADDR
// if not result then
38708: LD_VAR 0 6
38712: NOT
38713: IFFALSE 38739
// result := [ [ i , tmp ] ] else
38715: LD_ADDR_VAR 0 6
38719: PUSH
38720: LD_VAR 0 7
38724: PUSH
38725: LD_VAR 0 9
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: EMPTY
38735: LIST
38736: ST_TO_ADDR
38737: GO 38881
// begin if result [ result ] [ 2 ] < tmp then
38739: LD_VAR 0 6
38743: PUSH
38744: LD_VAR 0 6
38748: ARRAY
38749: PUSH
38750: LD_INT 2
38752: ARRAY
38753: PUSH
38754: LD_VAR 0 9
38758: LESS
38759: IFFALSE 38801
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38761: LD_ADDR_VAR 0 6
38765: PUSH
38766: LD_VAR 0 6
38770: PPUSH
38771: LD_VAR 0 6
38775: PUSH
38776: LD_INT 1
38778: PLUS
38779: PPUSH
38780: LD_VAR 0 7
38784: PUSH
38785: LD_VAR 0 9
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PPUSH
38794: CALL_OW 2
38798: ST_TO_ADDR
38799: GO 38881
// for j = 1 to result do
38801: LD_ADDR_VAR 0 8
38805: PUSH
38806: DOUBLE
38807: LD_INT 1
38809: DEC
38810: ST_TO_ADDR
38811: LD_VAR 0 6
38815: PUSH
38816: FOR_TO
38817: IFFALSE 38879
// begin if tmp < result [ j ] [ 2 ] then
38819: LD_VAR 0 9
38823: PUSH
38824: LD_VAR 0 6
38828: PUSH
38829: LD_VAR 0 8
38833: ARRAY
38834: PUSH
38835: LD_INT 2
38837: ARRAY
38838: LESS
38839: IFFALSE 38877
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38841: LD_ADDR_VAR 0 6
38845: PUSH
38846: LD_VAR 0 6
38850: PPUSH
38851: LD_VAR 0 8
38855: PPUSH
38856: LD_VAR 0 7
38860: PUSH
38861: LD_VAR 0 9
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PPUSH
38870: CALL_OW 2
38874: ST_TO_ADDR
// break ;
38875: GO 38879
// end ; end ;
38877: GO 38816
38879: POP
38880: POP
// end ; end ;
38881: GO 38680
38883: POP
38884: POP
// if result and not asc then
38885: LD_VAR 0 6
38889: PUSH
38890: LD_VAR 0 4
38894: NOT
38895: AND
38896: IFFALSE 38971
// begin tmp := result ;
38898: LD_ADDR_VAR 0 9
38902: PUSH
38903: LD_VAR 0 6
38907: ST_TO_ADDR
// for i = tmp downto 1 do
38908: LD_ADDR_VAR 0 7
38912: PUSH
38913: DOUBLE
38914: LD_VAR 0 9
38918: INC
38919: ST_TO_ADDR
38920: LD_INT 1
38922: PUSH
38923: FOR_DOWNTO
38924: IFFALSE 38969
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38926: LD_ADDR_VAR 0 6
38930: PUSH
38931: LD_VAR 0 6
38935: PPUSH
38936: LD_VAR 0 9
38940: PUSH
38941: LD_VAR 0 7
38945: MINUS
38946: PUSH
38947: LD_INT 1
38949: PLUS
38950: PPUSH
38951: LD_VAR 0 9
38955: PUSH
38956: LD_VAR 0 7
38960: ARRAY
38961: PPUSH
38962: CALL_OW 1
38966: ST_TO_ADDR
38967: GO 38923
38969: POP
38970: POP
// end ; tmp := [ ] ;
38971: LD_ADDR_VAR 0 9
38975: PUSH
38976: EMPTY
38977: ST_TO_ADDR
// if mode then
38978: LD_VAR 0 5
38982: IFFALSE 39051
// begin for i = 1 to result do
38984: LD_ADDR_VAR 0 7
38988: PUSH
38989: DOUBLE
38990: LD_INT 1
38992: DEC
38993: ST_TO_ADDR
38994: LD_VAR 0 6
38998: PUSH
38999: FOR_TO
39000: IFFALSE 39039
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39002: LD_ADDR_VAR 0 9
39006: PUSH
39007: LD_VAR 0 9
39011: PPUSH
39012: LD_VAR 0 7
39016: PPUSH
39017: LD_VAR 0 6
39021: PUSH
39022: LD_VAR 0 7
39026: ARRAY
39027: PUSH
39028: LD_INT 1
39030: ARRAY
39031: PPUSH
39032: CALL_OW 1
39036: ST_TO_ADDR
39037: GO 38999
39039: POP
39040: POP
// result := tmp ;
39041: LD_ADDR_VAR 0 6
39045: PUSH
39046: LD_VAR 0 9
39050: ST_TO_ADDR
// end ; end ;
39051: LD_VAR 0 6
39055: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39056: LD_INT 0
39058: PPUSH
39059: PPUSH
39060: PPUSH
39061: PPUSH
39062: PPUSH
39063: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39064: LD_ADDR_VAR 0 5
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: ST_TO_ADDR
// if not x or not y then
39086: LD_VAR 0 2
39090: NOT
39091: PUSH
39092: LD_VAR 0 3
39096: NOT
39097: OR
39098: IFFALSE 39102
// exit ;
39100: GO 40748
// if not range then
39102: LD_VAR 0 4
39106: NOT
39107: IFFALSE 39117
// range := 10 ;
39109: LD_ADDR_VAR 0 4
39113: PUSH
39114: LD_INT 10
39116: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39117: LD_ADDR_VAR 0 8
39121: PUSH
39122: LD_INT 81
39124: PUSH
39125: LD_VAR 0 1
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 92
39136: PUSH
39137: LD_VAR 0 2
39141: PUSH
39142: LD_VAR 0 3
39146: PUSH
39147: LD_VAR 0 4
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 3
39160: PUSH
39161: LD_INT 21
39163: PUSH
39164: LD_INT 3
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: PPUSH
39180: CALL_OW 69
39184: ST_TO_ADDR
// if not tmp then
39185: LD_VAR 0 8
39189: NOT
39190: IFFALSE 39194
// exit ;
39192: GO 40748
// for i in tmp do
39194: LD_ADDR_VAR 0 6
39198: PUSH
39199: LD_VAR 0 8
39203: PUSH
39204: FOR_IN
39205: IFFALSE 40723
// begin points := [ 0 , 0 , 0 ] ;
39207: LD_ADDR_VAR 0 9
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// bpoints := 1 ;
39226: LD_ADDR_VAR 0 10
39230: PUSH
39231: LD_INT 1
39233: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39234: LD_VAR 0 6
39238: PPUSH
39239: CALL_OW 247
39243: PUSH
39244: LD_INT 1
39246: DOUBLE
39247: EQUAL
39248: IFTRUE 39252
39250: GO 39830
39252: POP
// begin if GetClass ( i ) = 1 then
39253: LD_VAR 0 6
39257: PPUSH
39258: CALL_OW 257
39262: PUSH
39263: LD_INT 1
39265: EQUAL
39266: IFFALSE 39287
// points := [ 10 , 5 , 3 ] ;
39268: LD_ADDR_VAR 0 9
39272: PUSH
39273: LD_INT 10
39275: PUSH
39276: LD_INT 5
39278: PUSH
39279: LD_INT 3
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39287: LD_VAR 0 6
39291: PPUSH
39292: CALL_OW 257
39296: PUSH
39297: LD_INT 2
39299: PUSH
39300: LD_INT 3
39302: PUSH
39303: LD_INT 4
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: IN
39311: IFFALSE 39332
// points := [ 3 , 2 , 1 ] ;
39313: LD_ADDR_VAR 0 9
39317: PUSH
39318: LD_INT 3
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: LIST
39331: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39332: LD_VAR 0 6
39336: PPUSH
39337: CALL_OW 257
39341: PUSH
39342: LD_INT 5
39344: EQUAL
39345: IFFALSE 39366
// points := [ 130 , 5 , 2 ] ;
39347: LD_ADDR_VAR 0 9
39351: PUSH
39352: LD_INT 130
39354: PUSH
39355: LD_INT 5
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39366: LD_VAR 0 6
39370: PPUSH
39371: CALL_OW 257
39375: PUSH
39376: LD_INT 8
39378: EQUAL
39379: IFFALSE 39400
// points := [ 35 , 35 , 30 ] ;
39381: LD_ADDR_VAR 0 9
39385: PUSH
39386: LD_INT 35
39388: PUSH
39389: LD_INT 35
39391: PUSH
39392: LD_INT 30
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39400: LD_VAR 0 6
39404: PPUSH
39405: CALL_OW 257
39409: PUSH
39410: LD_INT 9
39412: EQUAL
39413: IFFALSE 39434
// points := [ 20 , 55 , 40 ] ;
39415: LD_ADDR_VAR 0 9
39419: PUSH
39420: LD_INT 20
39422: PUSH
39423: LD_INT 55
39425: PUSH
39426: LD_INT 40
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39434: LD_VAR 0 6
39438: PPUSH
39439: CALL_OW 257
39443: PUSH
39444: LD_INT 12
39446: PUSH
39447: LD_INT 16
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: IN
39454: IFFALSE 39475
// points := [ 5 , 3 , 2 ] ;
39456: LD_ADDR_VAR 0 9
39460: PUSH
39461: LD_INT 5
39463: PUSH
39464: LD_INT 3
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39475: LD_VAR 0 6
39479: PPUSH
39480: CALL_OW 257
39484: PUSH
39485: LD_INT 17
39487: EQUAL
39488: IFFALSE 39509
// points := [ 100 , 50 , 75 ] ;
39490: LD_ADDR_VAR 0 9
39494: PUSH
39495: LD_INT 100
39497: PUSH
39498: LD_INT 50
39500: PUSH
39501: LD_INT 75
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39509: LD_VAR 0 6
39513: PPUSH
39514: CALL_OW 257
39518: PUSH
39519: LD_INT 15
39521: EQUAL
39522: IFFALSE 39543
// points := [ 10 , 5 , 3 ] ;
39524: LD_ADDR_VAR 0 9
39528: PUSH
39529: LD_INT 10
39531: PUSH
39532: LD_INT 5
39534: PUSH
39535: LD_INT 3
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: LIST
39542: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39543: LD_VAR 0 6
39547: PPUSH
39548: CALL_OW 257
39552: PUSH
39553: LD_INT 14
39555: EQUAL
39556: IFFALSE 39577
// points := [ 10 , 0 , 0 ] ;
39558: LD_ADDR_VAR 0 9
39562: PUSH
39563: LD_INT 10
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39577: LD_VAR 0 6
39581: PPUSH
39582: CALL_OW 257
39586: PUSH
39587: LD_INT 11
39589: EQUAL
39590: IFFALSE 39611
// points := [ 30 , 10 , 5 ] ;
39592: LD_ADDR_VAR 0 9
39596: PUSH
39597: LD_INT 30
39599: PUSH
39600: LD_INT 10
39602: PUSH
39603: LD_INT 5
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39611: LD_VAR 0 1
39615: PPUSH
39616: LD_INT 5
39618: PPUSH
39619: CALL_OW 321
39623: PUSH
39624: LD_INT 2
39626: EQUAL
39627: IFFALSE 39644
// bpoints := bpoints * 1.8 ;
39629: LD_ADDR_VAR 0 10
39633: PUSH
39634: LD_VAR 0 10
39638: PUSH
39639: LD_REAL  1.80000000000000E+0000
39642: MUL
39643: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39644: LD_VAR 0 6
39648: PPUSH
39649: CALL_OW 257
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 3
39662: PUSH
39663: LD_INT 4
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: IN
39672: PUSH
39673: LD_VAR 0 1
39677: PPUSH
39678: LD_INT 51
39680: PPUSH
39681: CALL_OW 321
39685: PUSH
39686: LD_INT 2
39688: EQUAL
39689: AND
39690: IFFALSE 39707
// bpoints := bpoints * 1.2 ;
39692: LD_ADDR_VAR 0 10
39696: PUSH
39697: LD_VAR 0 10
39701: PUSH
39702: LD_REAL  1.20000000000000E+0000
39705: MUL
39706: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39707: LD_VAR 0 6
39711: PPUSH
39712: CALL_OW 257
39716: PUSH
39717: LD_INT 5
39719: PUSH
39720: LD_INT 7
39722: PUSH
39723: LD_INT 9
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: IN
39731: PUSH
39732: LD_VAR 0 1
39736: PPUSH
39737: LD_INT 52
39739: PPUSH
39740: CALL_OW 321
39744: PUSH
39745: LD_INT 2
39747: EQUAL
39748: AND
39749: IFFALSE 39766
// bpoints := bpoints * 1.5 ;
39751: LD_ADDR_VAR 0 10
39755: PUSH
39756: LD_VAR 0 10
39760: PUSH
39761: LD_REAL  1.50000000000000E+0000
39764: MUL
39765: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39766: LD_VAR 0 1
39770: PPUSH
39771: LD_INT 66
39773: PPUSH
39774: CALL_OW 321
39778: PUSH
39779: LD_INT 2
39781: EQUAL
39782: IFFALSE 39799
// bpoints := bpoints * 1.1 ;
39784: LD_ADDR_VAR 0 10
39788: PUSH
39789: LD_VAR 0 10
39793: PUSH
39794: LD_REAL  1.10000000000000E+0000
39797: MUL
39798: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39799: LD_ADDR_VAR 0 10
39803: PUSH
39804: LD_VAR 0 10
39808: PUSH
39809: LD_VAR 0 6
39813: PPUSH
39814: LD_INT 1
39816: PPUSH
39817: CALL_OW 259
39821: PUSH
39822: LD_REAL  1.15000000000000E+0000
39825: MUL
39826: MUL
39827: ST_TO_ADDR
// end ; unit_vehicle :
39828: GO 40652
39830: LD_INT 2
39832: DOUBLE
39833: EQUAL
39834: IFTRUE 39838
39836: GO 40640
39838: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39839: LD_VAR 0 6
39843: PPUSH
39844: CALL_OW 264
39848: PUSH
39849: LD_INT 2
39851: PUSH
39852: LD_INT 42
39854: PUSH
39855: LD_INT 24
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: LIST
39862: IN
39863: IFFALSE 39884
// points := [ 25 , 5 , 3 ] ;
39865: LD_ADDR_VAR 0 9
39869: PUSH
39870: LD_INT 25
39872: PUSH
39873: LD_INT 5
39875: PUSH
39876: LD_INT 3
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: LIST
39883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39884: LD_VAR 0 6
39888: PPUSH
39889: CALL_OW 264
39893: PUSH
39894: LD_INT 4
39896: PUSH
39897: LD_INT 43
39899: PUSH
39900: LD_INT 25
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: IN
39908: IFFALSE 39929
// points := [ 40 , 15 , 5 ] ;
39910: LD_ADDR_VAR 0 9
39914: PUSH
39915: LD_INT 40
39917: PUSH
39918: LD_INT 15
39920: PUSH
39921: LD_INT 5
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: LIST
39928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39929: LD_VAR 0 6
39933: PPUSH
39934: CALL_OW 264
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: LD_INT 23
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: IN
39949: IFFALSE 39970
// points := [ 7 , 25 , 8 ] ;
39951: LD_ADDR_VAR 0 9
39955: PUSH
39956: LD_INT 7
39958: PUSH
39959: LD_INT 25
39961: PUSH
39962: LD_INT 8
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39970: LD_VAR 0 6
39974: PPUSH
39975: CALL_OW 264
39979: PUSH
39980: LD_INT 5
39982: PUSH
39983: LD_INT 27
39985: PUSH
39986: LD_INT 44
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: IN
39994: IFFALSE 40015
// points := [ 14 , 50 , 16 ] ;
39996: LD_ADDR_VAR 0 9
40000: PUSH
40001: LD_INT 14
40003: PUSH
40004: LD_INT 50
40006: PUSH
40007: LD_INT 16
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40015: LD_VAR 0 6
40019: PPUSH
40020: CALL_OW 264
40024: PUSH
40025: LD_INT 6
40027: PUSH
40028: LD_INT 46
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: IN
40035: IFFALSE 40056
// points := [ 32 , 120 , 70 ] ;
40037: LD_ADDR_VAR 0 9
40041: PUSH
40042: LD_INT 32
40044: PUSH
40045: LD_INT 120
40047: PUSH
40048: LD_INT 70
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
40056: LD_VAR 0 6
40060: PPUSH
40061: CALL_OW 264
40065: PUSH
40066: LD_INT 7
40068: PUSH
40069: LD_INT 28
40071: PUSH
40072: LD_INT 45
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: LIST
40079: IN
40080: IFFALSE 40101
// points := [ 35 , 20 , 45 ] ;
40082: LD_ADDR_VAR 0 9
40086: PUSH
40087: LD_INT 35
40089: PUSH
40090: LD_INT 20
40092: PUSH
40093: LD_INT 45
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40101: LD_VAR 0 6
40105: PPUSH
40106: CALL_OW 264
40110: PUSH
40111: LD_INT 47
40113: PUSH
40114: EMPTY
40115: LIST
40116: IN
40117: IFFALSE 40138
// points := [ 67 , 45 , 75 ] ;
40119: LD_ADDR_VAR 0 9
40123: PUSH
40124: LD_INT 67
40126: PUSH
40127: LD_INT 45
40129: PUSH
40130: LD_INT 75
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: LIST
40137: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40138: LD_VAR 0 6
40142: PPUSH
40143: CALL_OW 264
40147: PUSH
40148: LD_INT 26
40150: PUSH
40151: EMPTY
40152: LIST
40153: IN
40154: IFFALSE 40175
// points := [ 120 , 30 , 80 ] ;
40156: LD_ADDR_VAR 0 9
40160: PUSH
40161: LD_INT 120
40163: PUSH
40164: LD_INT 30
40166: PUSH
40167: LD_INT 80
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40175: LD_VAR 0 6
40179: PPUSH
40180: CALL_OW 264
40184: PUSH
40185: LD_INT 22
40187: PUSH
40188: EMPTY
40189: LIST
40190: IN
40191: IFFALSE 40212
// points := [ 40 , 1 , 1 ] ;
40193: LD_ADDR_VAR 0 9
40197: PUSH
40198: LD_INT 40
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: LIST
40211: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40212: LD_VAR 0 6
40216: PPUSH
40217: CALL_OW 264
40221: PUSH
40222: LD_INT 29
40224: PUSH
40225: EMPTY
40226: LIST
40227: IN
40228: IFFALSE 40249
// points := [ 70 , 200 , 400 ] ;
40230: LD_ADDR_VAR 0 9
40234: PUSH
40235: LD_INT 70
40237: PUSH
40238: LD_INT 200
40240: PUSH
40241: LD_INT 400
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40249: LD_VAR 0 6
40253: PPUSH
40254: CALL_OW 264
40258: PUSH
40259: LD_INT 14
40261: PUSH
40262: LD_INT 53
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: IN
40269: IFFALSE 40290
// points := [ 40 , 10 , 20 ] ;
40271: LD_ADDR_VAR 0 9
40275: PUSH
40276: LD_INT 40
40278: PUSH
40279: LD_INT 10
40281: PUSH
40282: LD_INT 20
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40290: LD_VAR 0 6
40294: PPUSH
40295: CALL_OW 264
40299: PUSH
40300: LD_INT 9
40302: PUSH
40303: EMPTY
40304: LIST
40305: IN
40306: IFFALSE 40327
// points := [ 5 , 70 , 20 ] ;
40308: LD_ADDR_VAR 0 9
40312: PUSH
40313: LD_INT 5
40315: PUSH
40316: LD_INT 70
40318: PUSH
40319: LD_INT 20
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40327: LD_VAR 0 6
40331: PPUSH
40332: CALL_OW 264
40336: PUSH
40337: LD_INT 10
40339: PUSH
40340: EMPTY
40341: LIST
40342: IN
40343: IFFALSE 40364
// points := [ 35 , 110 , 70 ] ;
40345: LD_ADDR_VAR 0 9
40349: PUSH
40350: LD_INT 35
40352: PUSH
40353: LD_INT 110
40355: PUSH
40356: LD_INT 70
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40364: LD_VAR 0 6
40368: PPUSH
40369: CALL_OW 265
40373: PUSH
40374: LD_INT 25
40376: EQUAL
40377: IFFALSE 40398
// points := [ 80 , 65 , 100 ] ;
40379: LD_ADDR_VAR 0 9
40383: PUSH
40384: LD_INT 80
40386: PUSH
40387: LD_INT 65
40389: PUSH
40390: LD_INT 100
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40398: LD_VAR 0 6
40402: PPUSH
40403: CALL_OW 263
40407: PUSH
40408: LD_INT 1
40410: EQUAL
40411: IFFALSE 40446
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40413: LD_ADDR_VAR 0 10
40417: PUSH
40418: LD_VAR 0 10
40422: PUSH
40423: LD_VAR 0 6
40427: PPUSH
40428: CALL_OW 311
40432: PPUSH
40433: LD_INT 3
40435: PPUSH
40436: CALL_OW 259
40440: PUSH
40441: LD_INT 4
40443: MUL
40444: MUL
40445: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40446: LD_VAR 0 6
40450: PPUSH
40451: CALL_OW 263
40455: PUSH
40456: LD_INT 2
40458: EQUAL
40459: IFFALSE 40510
// begin j := IsControledBy ( i ) ;
40461: LD_ADDR_VAR 0 7
40465: PUSH
40466: LD_VAR 0 6
40470: PPUSH
40471: CALL_OW 312
40475: ST_TO_ADDR
// if j then
40476: LD_VAR 0 7
40480: IFFALSE 40510
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40482: LD_ADDR_VAR 0 10
40486: PUSH
40487: LD_VAR 0 10
40491: PUSH
40492: LD_VAR 0 7
40496: PPUSH
40497: LD_INT 3
40499: PPUSH
40500: CALL_OW 259
40504: PUSH
40505: LD_INT 3
40507: MUL
40508: MUL
40509: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40510: LD_VAR 0 6
40514: PPUSH
40515: CALL_OW 264
40519: PUSH
40520: LD_INT 5
40522: PUSH
40523: LD_INT 6
40525: PUSH
40526: LD_INT 46
40528: PUSH
40529: LD_INT 44
40531: PUSH
40532: LD_INT 47
40534: PUSH
40535: LD_INT 45
40537: PUSH
40538: LD_INT 28
40540: PUSH
40541: LD_INT 7
40543: PUSH
40544: LD_INT 27
40546: PUSH
40547: LD_INT 29
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: IN
40562: PUSH
40563: LD_VAR 0 1
40567: PPUSH
40568: LD_INT 52
40570: PPUSH
40571: CALL_OW 321
40575: PUSH
40576: LD_INT 2
40578: EQUAL
40579: AND
40580: IFFALSE 40597
// bpoints := bpoints * 1.2 ;
40582: LD_ADDR_VAR 0 10
40586: PUSH
40587: LD_VAR 0 10
40591: PUSH
40592: LD_REAL  1.20000000000000E+0000
40595: MUL
40596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40597: LD_VAR 0 6
40601: PPUSH
40602: CALL_OW 264
40606: PUSH
40607: LD_INT 6
40609: PUSH
40610: LD_INT 46
40612: PUSH
40613: LD_INT 47
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: LIST
40620: IN
40621: IFFALSE 40638
// bpoints := bpoints * 1.2 ;
40623: LD_ADDR_VAR 0 10
40627: PUSH
40628: LD_VAR 0 10
40632: PUSH
40633: LD_REAL  1.20000000000000E+0000
40636: MUL
40637: ST_TO_ADDR
// end ; unit_building :
40638: GO 40652
40640: LD_INT 3
40642: DOUBLE
40643: EQUAL
40644: IFTRUE 40648
40646: GO 40651
40648: POP
// ; end ;
40649: GO 40652
40651: POP
// for j = 1 to 3 do
40652: LD_ADDR_VAR 0 7
40656: PUSH
40657: DOUBLE
40658: LD_INT 1
40660: DEC
40661: ST_TO_ADDR
40662: LD_INT 3
40664: PUSH
40665: FOR_TO
40666: IFFALSE 40719
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40668: LD_ADDR_VAR 0 5
40672: PUSH
40673: LD_VAR 0 5
40677: PPUSH
40678: LD_VAR 0 7
40682: PPUSH
40683: LD_VAR 0 5
40687: PUSH
40688: LD_VAR 0 7
40692: ARRAY
40693: PUSH
40694: LD_VAR 0 9
40698: PUSH
40699: LD_VAR 0 7
40703: ARRAY
40704: PUSH
40705: LD_VAR 0 10
40709: MUL
40710: PLUS
40711: PPUSH
40712: CALL_OW 1
40716: ST_TO_ADDR
40717: GO 40665
40719: POP
40720: POP
// end ;
40721: GO 39204
40723: POP
40724: POP
// result := Replace ( result , 4 , tmp ) ;
40725: LD_ADDR_VAR 0 5
40729: PUSH
40730: LD_VAR 0 5
40734: PPUSH
40735: LD_INT 4
40737: PPUSH
40738: LD_VAR 0 8
40742: PPUSH
40743: CALL_OW 1
40747: ST_TO_ADDR
// end ;
40748: LD_VAR 0 5
40752: RET
// export function DangerAtRange ( unit , range ) ; begin
40753: LD_INT 0
40755: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40756: LD_ADDR_VAR 0 3
40760: PUSH
40761: LD_VAR 0 1
40765: PPUSH
40766: CALL_OW 255
40770: PPUSH
40771: LD_VAR 0 1
40775: PPUSH
40776: CALL_OW 250
40780: PPUSH
40781: LD_VAR 0 1
40785: PPUSH
40786: CALL_OW 251
40790: PPUSH
40791: LD_VAR 0 2
40795: PPUSH
40796: CALL 39056 0 4
40800: ST_TO_ADDR
// end ;
40801: LD_VAR 0 3
40805: RET
// export function DangerInArea ( side , area ) ; begin
40806: LD_INT 0
40808: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40809: LD_ADDR_VAR 0 3
40813: PUSH
40814: LD_VAR 0 2
40818: PPUSH
40819: LD_INT 81
40821: PUSH
40822: LD_VAR 0 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PPUSH
40831: CALL_OW 70
40835: ST_TO_ADDR
// end ;
40836: LD_VAR 0 3
40840: RET
// export function IsExtension ( b ) ; begin
40841: LD_INT 0
40843: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40844: LD_ADDR_VAR 0 2
40848: PUSH
40849: LD_VAR 0 1
40853: PUSH
40854: LD_INT 23
40856: PUSH
40857: LD_INT 20
40859: PUSH
40860: LD_INT 22
40862: PUSH
40863: LD_INT 17
40865: PUSH
40866: LD_INT 24
40868: PUSH
40869: LD_INT 21
40871: PUSH
40872: LD_INT 19
40874: PUSH
40875: LD_INT 16
40877: PUSH
40878: LD_INT 25
40880: PUSH
40881: LD_INT 18
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: IN
40896: ST_TO_ADDR
// end ;
40897: LD_VAR 0 2
40901: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
40902: LD_INT 0
40904: PPUSH
40905: PPUSH
40906: PPUSH
// result := [ ] ;
40907: LD_ADDR_VAR 0 3
40911: PUSH
40912: EMPTY
40913: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40914: LD_ADDR_VAR 0 4
40918: PUSH
40919: LD_VAR 0 2
40923: PPUSH
40924: LD_INT 21
40926: PUSH
40927: LD_INT 3
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PPUSH
40934: CALL_OW 70
40938: ST_TO_ADDR
// if not tmp then
40939: LD_VAR 0 4
40943: NOT
40944: IFFALSE 40948
// exit ;
40946: GO 41006
// for i in tmp do
40948: LD_ADDR_VAR 0 5
40952: PUSH
40953: LD_VAR 0 4
40957: PUSH
40958: FOR_IN
40959: IFFALSE 40994
// if GetBase ( i ) <> base then
40961: LD_VAR 0 5
40965: PPUSH
40966: CALL_OW 274
40970: PUSH
40971: LD_VAR 0 1
40975: NONEQUAL
40976: IFFALSE 40992
// ComLinkToBase ( base , i ) ;
40978: LD_VAR 0 1
40982: PPUSH
40983: LD_VAR 0 5
40987: PPUSH
40988: CALL_OW 169
40992: GO 40958
40994: POP
40995: POP
// result := tmp ;
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_VAR 0 4
41005: ST_TO_ADDR
// end ;
41006: LD_VAR 0 3
41010: RET
// export function ComComplete ( unit , b ) ; var i ; begin
41011: LD_INT 0
41013: PPUSH
41014: PPUSH
// if BuildingStatus ( b ) = bs_build then
41015: LD_VAR 0 2
41019: PPUSH
41020: CALL_OW 461
41024: PUSH
41025: LD_INT 1
41027: EQUAL
41028: IFFALSE 41088
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41030: LD_VAR 0 1
41034: PPUSH
41035: LD_STRING h
41037: PUSH
41038: LD_VAR 0 2
41042: PPUSH
41043: CALL_OW 250
41047: PUSH
41048: LD_VAR 0 2
41052: PPUSH
41053: CALL_OW 251
41057: PUSH
41058: LD_VAR 0 2
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: PUSH
41081: EMPTY
41082: LIST
41083: PPUSH
41084: CALL_OW 446
// end ;
41088: LD_VAR 0 3
41092: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41093: LD_INT 0
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
41101: LD_VAR 0 1
41105: NOT
41106: PUSH
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL_OW 263
41116: PUSH
41117: LD_INT 2
41119: EQUAL
41120: NOT
41121: OR
41122: IFFALSE 41126
// exit ;
41124: GO 41442
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41126: LD_ADDR_VAR 0 6
41130: PUSH
41131: LD_INT 22
41133: PUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 255
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: LD_INT 30
41153: PUSH
41154: LD_INT 36
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 34
41163: PUSH
41164: LD_INT 31
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PPUSH
41180: CALL_OW 69
41184: ST_TO_ADDR
// if not tmp then
41185: LD_VAR 0 6
41189: NOT
41190: IFFALSE 41194
// exit ;
41192: GO 41442
// result := [ ] ;
41194: LD_ADDR_VAR 0 2
41198: PUSH
41199: EMPTY
41200: ST_TO_ADDR
// for i in tmp do
41201: LD_ADDR_VAR 0 3
41205: PUSH
41206: LD_VAR 0 6
41210: PUSH
41211: FOR_IN
41212: IFFALSE 41283
// begin t := UnitsInside ( i ) ;
41214: LD_ADDR_VAR 0 4
41218: PUSH
41219: LD_VAR 0 3
41223: PPUSH
41224: CALL_OW 313
41228: ST_TO_ADDR
// if t then
41229: LD_VAR 0 4
41233: IFFALSE 41281
// for j in t do
41235: LD_ADDR_VAR 0 7
41239: PUSH
41240: LD_VAR 0 4
41244: PUSH
41245: FOR_IN
41246: IFFALSE 41279
// result := Insert ( result , result + 1 , j ) ;
41248: LD_ADDR_VAR 0 2
41252: PUSH
41253: LD_VAR 0 2
41257: PPUSH
41258: LD_VAR 0 2
41262: PUSH
41263: LD_INT 1
41265: PLUS
41266: PPUSH
41267: LD_VAR 0 7
41271: PPUSH
41272: CALL_OW 2
41276: ST_TO_ADDR
41277: GO 41245
41279: POP
41280: POP
// end ;
41281: GO 41211
41283: POP
41284: POP
// if not result then
41285: LD_VAR 0 2
41289: NOT
41290: IFFALSE 41294
// exit ;
41292: GO 41442
// mech := result [ 1 ] ;
41294: LD_ADDR_VAR 0 5
41298: PUSH
41299: LD_VAR 0 2
41303: PUSH
41304: LD_INT 1
41306: ARRAY
41307: ST_TO_ADDR
// if result > 1 then
41308: LD_VAR 0 2
41312: PUSH
41313: LD_INT 1
41315: GREATER
41316: IFFALSE 41428
// for i = 2 to result do
41318: LD_ADDR_VAR 0 3
41322: PUSH
41323: DOUBLE
41324: LD_INT 2
41326: DEC
41327: ST_TO_ADDR
41328: LD_VAR 0 2
41332: PUSH
41333: FOR_TO
41334: IFFALSE 41426
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41336: LD_ADDR_VAR 0 4
41340: PUSH
41341: LD_VAR 0 2
41345: PUSH
41346: LD_VAR 0 3
41350: ARRAY
41351: PPUSH
41352: LD_INT 3
41354: PPUSH
41355: CALL_OW 259
41359: PUSH
41360: LD_VAR 0 2
41364: PUSH
41365: LD_VAR 0 3
41369: ARRAY
41370: PPUSH
41371: CALL_OW 432
41375: MINUS
41376: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41377: LD_VAR 0 4
41381: PUSH
41382: LD_VAR 0 5
41386: PPUSH
41387: LD_INT 3
41389: PPUSH
41390: CALL_OW 259
41394: PUSH
41395: LD_VAR 0 5
41399: PPUSH
41400: CALL_OW 432
41404: MINUS
41405: GREATEREQUAL
41406: IFFALSE 41424
// mech := result [ i ] ;
41408: LD_ADDR_VAR 0 5
41412: PUSH
41413: LD_VAR 0 2
41417: PUSH
41418: LD_VAR 0 3
41422: ARRAY
41423: ST_TO_ADDR
// end ;
41424: GO 41333
41426: POP
41427: POP
// ComLinkTo ( vehicle , mech ) ;
41428: LD_VAR 0 1
41432: PPUSH
41433: LD_VAR 0 5
41437: PPUSH
41438: CALL_OW 135
// end ;
41442: LD_VAR 0 2
41446: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41447: LD_INT 0
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
// result := [ ] ;
41462: LD_ADDR_VAR 0 7
41466: PUSH
41467: EMPTY
41468: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41469: LD_VAR 0 1
41473: PPUSH
41474: CALL_OW 266
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: IN
41489: NOT
41490: IFFALSE 41494
// exit ;
41492: GO 43125
// if name then
41494: LD_VAR 0 3
41498: IFFALSE 41514
// SetBName ( base_dep , name ) ;
41500: LD_VAR 0 1
41504: PPUSH
41505: LD_VAR 0 3
41509: PPUSH
41510: CALL_OW 500
// base := GetBase ( base_dep ) ;
41514: LD_ADDR_VAR 0 15
41518: PUSH
41519: LD_VAR 0 1
41523: PPUSH
41524: CALL_OW 274
41528: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41529: LD_ADDR_VAR 0 16
41533: PUSH
41534: LD_VAR 0 1
41538: PPUSH
41539: CALL_OW 255
41543: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41544: LD_ADDR_VAR 0 17
41548: PUSH
41549: LD_VAR 0 1
41553: PPUSH
41554: CALL_OW 248
41558: ST_TO_ADDR
// if sources then
41559: LD_VAR 0 5
41563: IFFALSE 41610
// for i = 1 to 3 do
41565: LD_ADDR_VAR 0 8
41569: PUSH
41570: DOUBLE
41571: LD_INT 1
41573: DEC
41574: ST_TO_ADDR
41575: LD_INT 3
41577: PUSH
41578: FOR_TO
41579: IFFALSE 41608
// AddResourceType ( base , i , sources [ i ] ) ;
41581: LD_VAR 0 15
41585: PPUSH
41586: LD_VAR 0 8
41590: PPUSH
41591: LD_VAR 0 5
41595: PUSH
41596: LD_VAR 0 8
41600: ARRAY
41601: PPUSH
41602: CALL_OW 276
41606: GO 41578
41608: POP
41609: POP
// buildings := GetBaseBuildings ( base , area ) ;
41610: LD_ADDR_VAR 0 18
41614: PUSH
41615: LD_VAR 0 15
41619: PPUSH
41620: LD_VAR 0 2
41624: PPUSH
41625: CALL 40902 0 2
41629: ST_TO_ADDR
// InitHc ;
41630: CALL_OW 19
// InitUc ;
41634: CALL_OW 18
// uc_side := side ;
41638: LD_ADDR_OWVAR 20
41642: PUSH
41643: LD_VAR 0 16
41647: ST_TO_ADDR
// uc_nation := nation ;
41648: LD_ADDR_OWVAR 21
41652: PUSH
41653: LD_VAR 0 17
41657: ST_TO_ADDR
// if buildings then
41658: LD_VAR 0 18
41662: IFFALSE 42984
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41664: LD_ADDR_VAR 0 19
41668: PUSH
41669: LD_VAR 0 18
41673: PPUSH
41674: LD_INT 2
41676: PUSH
41677: LD_INT 30
41679: PUSH
41680: LD_INT 29
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 30
41689: PUSH
41690: LD_INT 30
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: PPUSH
41702: CALL_OW 72
41706: ST_TO_ADDR
// if tmp then
41707: LD_VAR 0 19
41711: IFFALSE 41759
// for i in tmp do
41713: LD_ADDR_VAR 0 8
41717: PUSH
41718: LD_VAR 0 19
41722: PUSH
41723: FOR_IN
41724: IFFALSE 41757
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41726: LD_VAR 0 8
41730: PPUSH
41731: CALL_OW 250
41735: PPUSH
41736: LD_VAR 0 8
41740: PPUSH
41741: CALL_OW 251
41745: PPUSH
41746: LD_VAR 0 16
41750: PPUSH
41751: CALL_OW 441
41755: GO 41723
41757: POP
41758: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41759: LD_VAR 0 18
41763: PPUSH
41764: LD_INT 2
41766: PUSH
41767: LD_INT 30
41769: PUSH
41770: LD_INT 32
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 30
41779: PUSH
41780: LD_INT 33
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: LIST
41791: PPUSH
41792: CALL_OW 72
41796: IFFALSE 41884
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41798: LD_ADDR_VAR 0 8
41802: PUSH
41803: LD_VAR 0 18
41807: PPUSH
41808: LD_INT 2
41810: PUSH
41811: LD_INT 30
41813: PUSH
41814: LD_INT 32
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 30
41823: PUSH
41824: LD_INT 33
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: PPUSH
41836: CALL_OW 72
41840: PUSH
41841: FOR_IN
41842: IFFALSE 41882
// begin if not GetBWeapon ( i ) then
41844: LD_VAR 0 8
41848: PPUSH
41849: CALL_OW 269
41853: NOT
41854: IFFALSE 41880
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41856: LD_VAR 0 8
41860: PPUSH
41861: LD_VAR 0 8
41865: PPUSH
41866: LD_VAR 0 2
41870: PPUSH
41871: CALL 43130 0 2
41875: PPUSH
41876: CALL_OW 431
// end ;
41880: GO 41841
41882: POP
41883: POP
// end ; for i = 1 to personel do
41884: LD_ADDR_VAR 0 8
41888: PUSH
41889: DOUBLE
41890: LD_INT 1
41892: DEC
41893: ST_TO_ADDR
41894: LD_VAR 0 6
41898: PUSH
41899: FOR_TO
41900: IFFALSE 42964
// begin if i > 4 then
41902: LD_VAR 0 8
41906: PUSH
41907: LD_INT 4
41909: GREATER
41910: IFFALSE 41914
// break ;
41912: GO 42964
// case i of 1 :
41914: LD_VAR 0 8
41918: PUSH
41919: LD_INT 1
41921: DOUBLE
41922: EQUAL
41923: IFTRUE 41927
41925: GO 42007
41927: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41928: LD_ADDR_VAR 0 12
41932: PUSH
41933: LD_VAR 0 18
41937: PPUSH
41938: LD_INT 22
41940: PUSH
41941: LD_VAR 0 16
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 58
41952: PUSH
41953: EMPTY
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 30
41961: PUSH
41962: LD_INT 32
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 30
41971: PUSH
41972: LD_INT 4
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 30
41981: PUSH
41982: LD_INT 5
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: LIST
41999: PPUSH
42000: CALL_OW 72
42004: ST_TO_ADDR
42005: GO 42229
42007: LD_INT 2
42009: DOUBLE
42010: EQUAL
42011: IFTRUE 42015
42013: GO 42077
42015: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42016: LD_ADDR_VAR 0 12
42020: PUSH
42021: LD_VAR 0 18
42025: PPUSH
42026: LD_INT 22
42028: PUSH
42029: LD_VAR 0 16
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: LD_INT 30
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 30
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PPUSH
42070: CALL_OW 72
42074: ST_TO_ADDR
42075: GO 42229
42077: LD_INT 3
42079: DOUBLE
42080: EQUAL
42081: IFTRUE 42085
42083: GO 42147
42085: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42086: LD_ADDR_VAR 0 12
42090: PUSH
42091: LD_VAR 0 18
42095: PPUSH
42096: LD_INT 22
42098: PUSH
42099: LD_VAR 0 16
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: PUSH
42111: LD_INT 30
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 30
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: LIST
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PPUSH
42140: CALL_OW 72
42144: ST_TO_ADDR
42145: GO 42229
42147: LD_INT 4
42149: DOUBLE
42150: EQUAL
42151: IFTRUE 42155
42153: GO 42228
42155: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42156: LD_ADDR_VAR 0 12
42160: PUSH
42161: LD_VAR 0 18
42165: PPUSH
42166: LD_INT 22
42168: PUSH
42169: LD_VAR 0 16
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 30
42183: PUSH
42184: LD_INT 6
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 30
42193: PUSH
42194: LD_INT 7
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 30
42203: PUSH
42204: LD_INT 8
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PPUSH
42221: CALL_OW 72
42225: ST_TO_ADDR
42226: GO 42229
42228: POP
// if i = 1 then
42229: LD_VAR 0 8
42233: PUSH
42234: LD_INT 1
42236: EQUAL
42237: IFFALSE 42348
// begin tmp := [ ] ;
42239: LD_ADDR_VAR 0 19
42243: PUSH
42244: EMPTY
42245: ST_TO_ADDR
// for j in f do
42246: LD_ADDR_VAR 0 9
42250: PUSH
42251: LD_VAR 0 12
42255: PUSH
42256: FOR_IN
42257: IFFALSE 42330
// if GetBType ( j ) = b_bunker then
42259: LD_VAR 0 9
42263: PPUSH
42264: CALL_OW 266
42268: PUSH
42269: LD_INT 32
42271: EQUAL
42272: IFFALSE 42299
// tmp := Insert ( tmp , 1 , j ) else
42274: LD_ADDR_VAR 0 19
42278: PUSH
42279: LD_VAR 0 19
42283: PPUSH
42284: LD_INT 1
42286: PPUSH
42287: LD_VAR 0 9
42291: PPUSH
42292: CALL_OW 2
42296: ST_TO_ADDR
42297: GO 42328
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42299: LD_ADDR_VAR 0 19
42303: PUSH
42304: LD_VAR 0 19
42308: PPUSH
42309: LD_VAR 0 19
42313: PUSH
42314: LD_INT 1
42316: PLUS
42317: PPUSH
42318: LD_VAR 0 9
42322: PPUSH
42323: CALL_OW 2
42327: ST_TO_ADDR
42328: GO 42256
42330: POP
42331: POP
// if tmp then
42332: LD_VAR 0 19
42336: IFFALSE 42348
// f := tmp ;
42338: LD_ADDR_VAR 0 12
42342: PUSH
42343: LD_VAR 0 19
42347: ST_TO_ADDR
// end ; x := personel [ i ] ;
42348: LD_ADDR_VAR 0 13
42352: PUSH
42353: LD_VAR 0 6
42357: PUSH
42358: LD_VAR 0 8
42362: ARRAY
42363: ST_TO_ADDR
// if x = - 1 then
42364: LD_VAR 0 13
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: EQUAL
42373: IFFALSE 42582
// begin for j in f do
42375: LD_ADDR_VAR 0 9
42379: PUSH
42380: LD_VAR 0 12
42384: PUSH
42385: FOR_IN
42386: IFFALSE 42578
// repeat InitHc ;
42388: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42392: LD_VAR 0 9
42396: PPUSH
42397: CALL_OW 266
42401: PUSH
42402: LD_INT 5
42404: EQUAL
42405: IFFALSE 42475
// begin if UnitsInside ( j ) < 3 then
42407: LD_VAR 0 9
42411: PPUSH
42412: CALL_OW 313
42416: PUSH
42417: LD_INT 3
42419: LESS
42420: IFFALSE 42456
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42422: LD_INT 0
42424: PPUSH
42425: LD_INT 5
42427: PUSH
42428: LD_INT 8
42430: PUSH
42431: LD_INT 9
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: LIST
42438: PUSH
42439: LD_VAR 0 17
42443: ARRAY
42444: PPUSH
42445: LD_VAR 0 4
42449: PPUSH
42450: CALL_OW 380
42454: GO 42473
// PrepareHuman ( false , i , skill ) ;
42456: LD_INT 0
42458: PPUSH
42459: LD_VAR 0 8
42463: PPUSH
42464: LD_VAR 0 4
42468: PPUSH
42469: CALL_OW 380
// end else
42473: GO 42492
// PrepareHuman ( false , i , skill ) ;
42475: LD_INT 0
42477: PPUSH
42478: LD_VAR 0 8
42482: PPUSH
42483: LD_VAR 0 4
42487: PPUSH
42488: CALL_OW 380
// un := CreateHuman ;
42492: LD_ADDR_VAR 0 14
42496: PUSH
42497: CALL_OW 44
42501: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42502: LD_ADDR_VAR 0 7
42506: PUSH
42507: LD_VAR 0 7
42511: PPUSH
42512: LD_INT 1
42514: PPUSH
42515: LD_VAR 0 14
42519: PPUSH
42520: CALL_OW 2
42524: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42525: LD_VAR 0 14
42529: PPUSH
42530: LD_VAR 0 9
42534: PPUSH
42535: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42539: LD_VAR 0 9
42543: PPUSH
42544: CALL_OW 313
42548: PUSH
42549: LD_INT 6
42551: EQUAL
42552: PUSH
42553: LD_VAR 0 9
42557: PPUSH
42558: CALL_OW 266
42562: PUSH
42563: LD_INT 32
42565: PUSH
42566: LD_INT 31
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: IN
42573: OR
42574: IFFALSE 42388
42576: GO 42385
42578: POP
42579: POP
// end else
42580: GO 42962
// for j = 1 to x do
42582: LD_ADDR_VAR 0 9
42586: PUSH
42587: DOUBLE
42588: LD_INT 1
42590: DEC
42591: ST_TO_ADDR
42592: LD_VAR 0 13
42596: PUSH
42597: FOR_TO
42598: IFFALSE 42960
// begin InitHc ;
42600: CALL_OW 19
// if not f then
42604: LD_VAR 0 12
42608: NOT
42609: IFFALSE 42698
// begin PrepareHuman ( false , i , skill ) ;
42611: LD_INT 0
42613: PPUSH
42614: LD_VAR 0 8
42618: PPUSH
42619: LD_VAR 0 4
42623: PPUSH
42624: CALL_OW 380
// un := CreateHuman ;
42628: LD_ADDR_VAR 0 14
42632: PUSH
42633: CALL_OW 44
42637: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42638: LD_ADDR_VAR 0 7
42642: PUSH
42643: LD_VAR 0 7
42647: PPUSH
42648: LD_INT 1
42650: PPUSH
42651: LD_VAR 0 14
42655: PPUSH
42656: CALL_OW 2
42660: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42661: LD_VAR 0 14
42665: PPUSH
42666: LD_VAR 0 1
42670: PPUSH
42671: CALL_OW 250
42675: PPUSH
42676: LD_VAR 0 1
42680: PPUSH
42681: CALL_OW 251
42685: PPUSH
42686: LD_INT 10
42688: PPUSH
42689: LD_INT 0
42691: PPUSH
42692: CALL_OW 50
// continue ;
42696: GO 42597
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42698: LD_VAR 0 12
42702: PUSH
42703: LD_INT 1
42705: ARRAY
42706: PPUSH
42707: CALL_OW 313
42711: PUSH
42712: LD_VAR 0 12
42716: PUSH
42717: LD_INT 1
42719: ARRAY
42720: PPUSH
42721: CALL_OW 266
42725: PUSH
42726: LD_INT 32
42728: PUSH
42729: LD_INT 31
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: IN
42736: AND
42737: PUSH
42738: LD_VAR 0 12
42742: PUSH
42743: LD_INT 1
42745: ARRAY
42746: PPUSH
42747: CALL_OW 313
42751: PUSH
42752: LD_INT 6
42754: EQUAL
42755: OR
42756: IFFALSE 42776
// f := Delete ( f , 1 ) ;
42758: LD_ADDR_VAR 0 12
42762: PUSH
42763: LD_VAR 0 12
42767: PPUSH
42768: LD_INT 1
42770: PPUSH
42771: CALL_OW 3
42775: ST_TO_ADDR
// if not f then
42776: LD_VAR 0 12
42780: NOT
42781: IFFALSE 42799
// begin x := x + 2 ;
42783: LD_ADDR_VAR 0 13
42787: PUSH
42788: LD_VAR 0 13
42792: PUSH
42793: LD_INT 2
42795: PLUS
42796: ST_TO_ADDR
// continue ;
42797: GO 42597
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42799: LD_VAR 0 12
42803: PUSH
42804: LD_INT 1
42806: ARRAY
42807: PPUSH
42808: CALL_OW 266
42812: PUSH
42813: LD_INT 5
42815: EQUAL
42816: IFFALSE 42890
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42818: LD_VAR 0 12
42822: PUSH
42823: LD_INT 1
42825: ARRAY
42826: PPUSH
42827: CALL_OW 313
42831: PUSH
42832: LD_INT 3
42834: LESS
42835: IFFALSE 42871
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42837: LD_INT 0
42839: PPUSH
42840: LD_INT 5
42842: PUSH
42843: LD_INT 8
42845: PUSH
42846: LD_INT 9
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: PUSH
42854: LD_VAR 0 17
42858: ARRAY
42859: PPUSH
42860: LD_VAR 0 4
42864: PPUSH
42865: CALL_OW 380
42869: GO 42888
// PrepareHuman ( false , i , skill ) ;
42871: LD_INT 0
42873: PPUSH
42874: LD_VAR 0 8
42878: PPUSH
42879: LD_VAR 0 4
42883: PPUSH
42884: CALL_OW 380
// end else
42888: GO 42907
// PrepareHuman ( false , i , skill ) ;
42890: LD_INT 0
42892: PPUSH
42893: LD_VAR 0 8
42897: PPUSH
42898: LD_VAR 0 4
42902: PPUSH
42903: CALL_OW 380
// un := CreateHuman ;
42907: LD_ADDR_VAR 0 14
42911: PUSH
42912: CALL_OW 44
42916: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42917: LD_ADDR_VAR 0 7
42921: PUSH
42922: LD_VAR 0 7
42926: PPUSH
42927: LD_INT 1
42929: PPUSH
42930: LD_VAR 0 14
42934: PPUSH
42935: CALL_OW 2
42939: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42940: LD_VAR 0 14
42944: PPUSH
42945: LD_VAR 0 12
42949: PUSH
42950: LD_INT 1
42952: ARRAY
42953: PPUSH
42954: CALL_OW 52
// end ;
42958: GO 42597
42960: POP
42961: POP
// end ;
42962: GO 41899
42964: POP
42965: POP
// result := result ^ buildings ;
42966: LD_ADDR_VAR 0 7
42970: PUSH
42971: LD_VAR 0 7
42975: PUSH
42976: LD_VAR 0 18
42980: ADD
42981: ST_TO_ADDR
// end else
42982: GO 43125
// begin for i = 1 to personel do
42984: LD_ADDR_VAR 0 8
42988: PUSH
42989: DOUBLE
42990: LD_INT 1
42992: DEC
42993: ST_TO_ADDR
42994: LD_VAR 0 6
42998: PUSH
42999: FOR_TO
43000: IFFALSE 43123
// begin if i > 4 then
43002: LD_VAR 0 8
43006: PUSH
43007: LD_INT 4
43009: GREATER
43010: IFFALSE 43014
// break ;
43012: GO 43123
// x := personel [ i ] ;
43014: LD_ADDR_VAR 0 13
43018: PUSH
43019: LD_VAR 0 6
43023: PUSH
43024: LD_VAR 0 8
43028: ARRAY
43029: ST_TO_ADDR
// if x = - 1 then
43030: LD_VAR 0 13
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: EQUAL
43039: IFFALSE 43043
// continue ;
43041: GO 42999
// PrepareHuman ( false , i , skill ) ;
43043: LD_INT 0
43045: PPUSH
43046: LD_VAR 0 8
43050: PPUSH
43051: LD_VAR 0 4
43055: PPUSH
43056: CALL_OW 380
// un := CreateHuman ;
43060: LD_ADDR_VAR 0 14
43064: PUSH
43065: CALL_OW 44
43069: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43070: LD_VAR 0 14
43074: PPUSH
43075: LD_VAR 0 1
43079: PPUSH
43080: CALL_OW 250
43084: PPUSH
43085: LD_VAR 0 1
43089: PPUSH
43090: CALL_OW 251
43094: PPUSH
43095: LD_INT 10
43097: PPUSH
43098: LD_INT 0
43100: PPUSH
43101: CALL_OW 50
// result := result ^ un ;
43105: LD_ADDR_VAR 0 7
43109: PUSH
43110: LD_VAR 0 7
43114: PUSH
43115: LD_VAR 0 14
43119: ADD
43120: ST_TO_ADDR
// end ;
43121: GO 42999
43123: POP
43124: POP
// end ; end ;
43125: LD_VAR 0 7
43129: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43130: LD_INT 0
43132: PPUSH
43133: PPUSH
43134: PPUSH
43135: PPUSH
43136: PPUSH
43137: PPUSH
43138: PPUSH
43139: PPUSH
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
43147: PPUSH
// result := false ;
43148: LD_ADDR_VAR 0 3
43152: PUSH
43153: LD_INT 0
43155: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43156: LD_VAR 0 1
43160: NOT
43161: PUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 266
43171: PUSH
43172: LD_INT 32
43174: PUSH
43175: LD_INT 33
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: IN
43182: NOT
43183: OR
43184: IFFALSE 43188
// exit ;
43186: GO 44324
// nat := GetNation ( tower ) ;
43188: LD_ADDR_VAR 0 12
43192: PUSH
43193: LD_VAR 0 1
43197: PPUSH
43198: CALL_OW 248
43202: ST_TO_ADDR
// side := GetSide ( tower ) ;
43203: LD_ADDR_VAR 0 16
43207: PUSH
43208: LD_VAR 0 1
43212: PPUSH
43213: CALL_OW 255
43217: ST_TO_ADDR
// x := GetX ( tower ) ;
43218: LD_ADDR_VAR 0 10
43222: PUSH
43223: LD_VAR 0 1
43227: PPUSH
43228: CALL_OW 250
43232: ST_TO_ADDR
// y := GetY ( tower ) ;
43233: LD_ADDR_VAR 0 11
43237: PUSH
43238: LD_VAR 0 1
43242: PPUSH
43243: CALL_OW 251
43247: ST_TO_ADDR
// if not x or not y then
43248: LD_VAR 0 10
43252: NOT
43253: PUSH
43254: LD_VAR 0 11
43258: NOT
43259: OR
43260: IFFALSE 43264
// exit ;
43262: GO 44324
// weapon := 0 ;
43264: LD_ADDR_VAR 0 18
43268: PUSH
43269: LD_INT 0
43271: ST_TO_ADDR
// fac_list := [ ] ;
43272: LD_ADDR_VAR 0 17
43276: PUSH
43277: EMPTY
43278: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
43279: LD_ADDR_VAR 0 6
43283: PUSH
43284: LD_VAR 0 1
43288: PPUSH
43289: CALL_OW 274
43293: PPUSH
43294: LD_VAR 0 2
43298: PPUSH
43299: CALL 40902 0 2
43303: PPUSH
43304: LD_INT 30
43306: PUSH
43307: LD_INT 3
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PPUSH
43314: CALL_OW 72
43318: ST_TO_ADDR
// if not factories then
43319: LD_VAR 0 6
43323: NOT
43324: IFFALSE 43328
// exit ;
43326: GO 44324
// for i in factories do
43328: LD_ADDR_VAR 0 8
43332: PUSH
43333: LD_VAR 0 6
43337: PUSH
43338: FOR_IN
43339: IFFALSE 43364
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43341: LD_ADDR_VAR 0 17
43345: PUSH
43346: LD_VAR 0 17
43350: PUSH
43351: LD_VAR 0 8
43355: PPUSH
43356: CALL_OW 478
43360: UNION
43361: ST_TO_ADDR
43362: GO 43338
43364: POP
43365: POP
// if not fac_list then
43366: LD_VAR 0 17
43370: NOT
43371: IFFALSE 43375
// exit ;
43373: GO 44324
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43375: LD_ADDR_VAR 0 5
43379: PUSH
43380: LD_INT 4
43382: PUSH
43383: LD_INT 5
43385: PUSH
43386: LD_INT 9
43388: PUSH
43389: LD_INT 10
43391: PUSH
43392: LD_INT 6
43394: PUSH
43395: LD_INT 7
43397: PUSH
43398: LD_INT 11
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 27
43412: PUSH
43413: LD_INT 28
43415: PUSH
43416: LD_INT 26
43418: PUSH
43419: LD_INT 30
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 43
43430: PUSH
43431: LD_INT 44
43433: PUSH
43434: LD_INT 46
43436: PUSH
43437: LD_INT 45
43439: PUSH
43440: LD_INT 47
43442: PUSH
43443: LD_INT 49
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: PUSH
43459: LD_VAR 0 12
43463: ARRAY
43464: ST_TO_ADDR
// for i in list do
43465: LD_ADDR_VAR 0 8
43469: PUSH
43470: LD_VAR 0 5
43474: PUSH
43475: FOR_IN
43476: IFFALSE 43509
// if not i in fac_list then
43478: LD_VAR 0 8
43482: PUSH
43483: LD_VAR 0 17
43487: IN
43488: NOT
43489: IFFALSE 43507
// list := list diff i ;
43491: LD_ADDR_VAR 0 5
43495: PUSH
43496: LD_VAR 0 5
43500: PUSH
43501: LD_VAR 0 8
43505: DIFF
43506: ST_TO_ADDR
43507: GO 43475
43509: POP
43510: POP
// if not list then
43511: LD_VAR 0 5
43515: NOT
43516: IFFALSE 43520
// exit ;
43518: GO 44324
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43520: LD_VAR 0 12
43524: PUSH
43525: LD_INT 3
43527: EQUAL
43528: PUSH
43529: LD_INT 49
43531: PUSH
43532: LD_VAR 0 5
43536: IN
43537: AND
43538: PUSH
43539: LD_INT 31
43541: PPUSH
43542: LD_VAR 0 16
43546: PPUSH
43547: CALL_OW 321
43551: PUSH
43552: LD_INT 2
43554: EQUAL
43555: AND
43556: IFFALSE 43616
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43558: LD_INT 22
43560: PUSH
43561: LD_VAR 0 16
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 35
43572: PUSH
43573: LD_INT 49
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 91
43582: PUSH
43583: LD_VAR 0 1
43587: PUSH
43588: LD_INT 10
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: PPUSH
43601: CALL_OW 69
43605: NOT
43606: IFFALSE 43616
// weapon := ru_time_lapser ;
43608: LD_ADDR_VAR 0 18
43612: PUSH
43613: LD_INT 49
43615: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43616: LD_VAR 0 12
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: IN
43631: PUSH
43632: LD_INT 11
43634: PUSH
43635: LD_VAR 0 5
43639: IN
43640: PUSH
43641: LD_INT 30
43643: PUSH
43644: LD_VAR 0 5
43648: IN
43649: OR
43650: AND
43651: PUSH
43652: LD_INT 6
43654: PPUSH
43655: LD_VAR 0 16
43659: PPUSH
43660: CALL_OW 321
43664: PUSH
43665: LD_INT 2
43667: EQUAL
43668: AND
43669: IFFALSE 43834
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43671: LD_INT 22
43673: PUSH
43674: LD_VAR 0 16
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 35
43688: PUSH
43689: LD_INT 11
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 35
43698: PUSH
43699: LD_INT 30
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 91
43713: PUSH
43714: LD_VAR 0 1
43718: PUSH
43719: LD_INT 18
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: PPUSH
43732: CALL_OW 69
43736: NOT
43737: PUSH
43738: LD_INT 22
43740: PUSH
43741: LD_VAR 0 16
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: LD_INT 30
43755: PUSH
43756: LD_INT 32
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 30
43765: PUSH
43766: LD_INT 33
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 91
43780: PUSH
43781: LD_VAR 0 1
43785: PUSH
43786: LD_INT 12
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: LIST
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: PPUSH
43802: CALL_OW 69
43806: PUSH
43807: LD_INT 2
43809: GREATER
43810: AND
43811: IFFALSE 43834
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43813: LD_ADDR_VAR 0 18
43817: PUSH
43818: LD_INT 11
43820: PUSH
43821: LD_INT 30
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_VAR 0 12
43832: ARRAY
43833: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43834: LD_VAR 0 18
43838: NOT
43839: PUSH
43840: LD_INT 40
43842: PPUSH
43843: LD_VAR 0 16
43847: PPUSH
43848: CALL_OW 321
43852: PUSH
43853: LD_INT 2
43855: EQUAL
43856: AND
43857: PUSH
43858: LD_INT 7
43860: PUSH
43861: LD_VAR 0 5
43865: IN
43866: PUSH
43867: LD_INT 28
43869: PUSH
43870: LD_VAR 0 5
43874: IN
43875: OR
43876: PUSH
43877: LD_INT 45
43879: PUSH
43880: LD_VAR 0 5
43884: IN
43885: OR
43886: AND
43887: IFFALSE 44141
// begin hex := GetHexInfo ( x , y ) ;
43889: LD_ADDR_VAR 0 4
43893: PUSH
43894: LD_VAR 0 10
43898: PPUSH
43899: LD_VAR 0 11
43903: PPUSH
43904: CALL_OW 546
43908: ST_TO_ADDR
// if hex [ 1 ] then
43909: LD_VAR 0 4
43913: PUSH
43914: LD_INT 1
43916: ARRAY
43917: IFFALSE 43921
// exit ;
43919: GO 44324
// height := hex [ 2 ] ;
43921: LD_ADDR_VAR 0 15
43925: PUSH
43926: LD_VAR 0 4
43930: PUSH
43931: LD_INT 2
43933: ARRAY
43934: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43935: LD_ADDR_VAR 0 14
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: LD_INT 3
43948: PUSH
43949: LD_INT 5
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: ST_TO_ADDR
// for i in tmp do
43958: LD_ADDR_VAR 0 8
43962: PUSH
43963: LD_VAR 0 14
43967: PUSH
43968: FOR_IN
43969: IFFALSE 44139
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43971: LD_ADDR_VAR 0 9
43975: PUSH
43976: LD_VAR 0 10
43980: PPUSH
43981: LD_VAR 0 8
43985: PPUSH
43986: LD_INT 5
43988: PPUSH
43989: CALL_OW 272
43993: PUSH
43994: LD_VAR 0 11
43998: PPUSH
43999: LD_VAR 0 8
44003: PPUSH
44004: LD_INT 5
44006: PPUSH
44007: CALL_OW 273
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44016: LD_VAR 0 9
44020: PUSH
44021: LD_INT 1
44023: ARRAY
44024: PPUSH
44025: LD_VAR 0 9
44029: PUSH
44030: LD_INT 2
44032: ARRAY
44033: PPUSH
44034: CALL_OW 488
44038: IFFALSE 44137
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44040: LD_ADDR_VAR 0 4
44044: PUSH
44045: LD_VAR 0 9
44049: PUSH
44050: LD_INT 1
44052: ARRAY
44053: PPUSH
44054: LD_VAR 0 9
44058: PUSH
44059: LD_INT 2
44061: ARRAY
44062: PPUSH
44063: CALL_OW 546
44067: ST_TO_ADDR
// if hex [ 1 ] then
44068: LD_VAR 0 4
44072: PUSH
44073: LD_INT 1
44075: ARRAY
44076: IFFALSE 44080
// continue ;
44078: GO 43968
// h := hex [ 2 ] ;
44080: LD_ADDR_VAR 0 13
44084: PUSH
44085: LD_VAR 0 4
44089: PUSH
44090: LD_INT 2
44092: ARRAY
44093: ST_TO_ADDR
// if h + 7 < height then
44094: LD_VAR 0 13
44098: PUSH
44099: LD_INT 7
44101: PLUS
44102: PUSH
44103: LD_VAR 0 15
44107: LESS
44108: IFFALSE 44137
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44110: LD_ADDR_VAR 0 18
44114: PUSH
44115: LD_INT 7
44117: PUSH
44118: LD_INT 28
44120: PUSH
44121: LD_INT 45
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: PUSH
44129: LD_VAR 0 12
44133: ARRAY
44134: ST_TO_ADDR
// break ;
44135: GO 44139
// end ; end ; end ;
44137: GO 43968
44139: POP
44140: POP
// end ; if not weapon then
44141: LD_VAR 0 18
44145: NOT
44146: IFFALSE 44206
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44148: LD_ADDR_VAR 0 5
44152: PUSH
44153: LD_VAR 0 5
44157: PUSH
44158: LD_INT 11
44160: PUSH
44161: LD_INT 30
44163: PUSH
44164: LD_INT 49
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: DIFF
44172: ST_TO_ADDR
// if not list then
44173: LD_VAR 0 5
44177: NOT
44178: IFFALSE 44182
// exit ;
44180: GO 44324
// weapon := list [ rand ( 1 , list ) ] ;
44182: LD_ADDR_VAR 0 18
44186: PUSH
44187: LD_VAR 0 5
44191: PUSH
44192: LD_INT 1
44194: PPUSH
44195: LD_VAR 0 5
44199: PPUSH
44200: CALL_OW 12
44204: ARRAY
44205: ST_TO_ADDR
// end ; if weapon then
44206: LD_VAR 0 18
44210: IFFALSE 44324
// begin tmp := CostOfWeapon ( weapon ) ;
44212: LD_ADDR_VAR 0 14
44216: PUSH
44217: LD_VAR 0 18
44221: PPUSH
44222: CALL_OW 451
44226: ST_TO_ADDR
// j := GetBase ( tower ) ;
44227: LD_ADDR_VAR 0 9
44231: PUSH
44232: LD_VAR 0 1
44236: PPUSH
44237: CALL_OW 274
44241: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44242: LD_VAR 0 9
44246: PPUSH
44247: LD_INT 1
44249: PPUSH
44250: CALL_OW 275
44254: PUSH
44255: LD_VAR 0 14
44259: PUSH
44260: LD_INT 1
44262: ARRAY
44263: GREATEREQUAL
44264: PUSH
44265: LD_VAR 0 9
44269: PPUSH
44270: LD_INT 2
44272: PPUSH
44273: CALL_OW 275
44277: PUSH
44278: LD_VAR 0 14
44282: PUSH
44283: LD_INT 2
44285: ARRAY
44286: GREATEREQUAL
44287: AND
44288: PUSH
44289: LD_VAR 0 9
44293: PPUSH
44294: LD_INT 3
44296: PPUSH
44297: CALL_OW 275
44301: PUSH
44302: LD_VAR 0 14
44306: PUSH
44307: LD_INT 3
44309: ARRAY
44310: GREATEREQUAL
44311: AND
44312: IFFALSE 44324
// result := weapon ;
44314: LD_ADDR_VAR 0 3
44318: PUSH
44319: LD_VAR 0 18
44323: ST_TO_ADDR
// end ; end ;
44324: LD_VAR 0 3
44328: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44329: LD_INT 0
44331: PPUSH
44332: PPUSH
// result := true ;
44333: LD_ADDR_VAR 0 3
44337: PUSH
44338: LD_INT 1
44340: ST_TO_ADDR
// if array1 = array2 then
44341: LD_VAR 0 1
44345: PUSH
44346: LD_VAR 0 2
44350: EQUAL
44351: IFFALSE 44411
// begin for i = 1 to array1 do
44353: LD_ADDR_VAR 0 4
44357: PUSH
44358: DOUBLE
44359: LD_INT 1
44361: DEC
44362: ST_TO_ADDR
44363: LD_VAR 0 1
44367: PUSH
44368: FOR_TO
44369: IFFALSE 44407
// if array1 [ i ] <> array2 [ i ] then
44371: LD_VAR 0 1
44375: PUSH
44376: LD_VAR 0 4
44380: ARRAY
44381: PUSH
44382: LD_VAR 0 2
44386: PUSH
44387: LD_VAR 0 4
44391: ARRAY
44392: NONEQUAL
44393: IFFALSE 44405
// begin result := false ;
44395: LD_ADDR_VAR 0 3
44399: PUSH
44400: LD_INT 0
44402: ST_TO_ADDR
// break ;
44403: GO 44407
// end ;
44405: GO 44368
44407: POP
44408: POP
// end else
44409: GO 44419
// result := false ;
44411: LD_ADDR_VAR 0 3
44415: PUSH
44416: LD_INT 0
44418: ST_TO_ADDR
// end ;
44419: LD_VAR 0 3
44423: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44424: LD_INT 0
44426: PPUSH
44427: PPUSH
44428: PPUSH
// pom := GetBase ( fac ) ;
44429: LD_ADDR_VAR 0 5
44433: PUSH
44434: LD_VAR 0 1
44438: PPUSH
44439: CALL_OW 274
44443: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44444: LD_ADDR_VAR 0 4
44448: PUSH
44449: LD_VAR 0 2
44453: PUSH
44454: LD_INT 1
44456: ARRAY
44457: PPUSH
44458: LD_VAR 0 2
44462: PUSH
44463: LD_INT 2
44465: ARRAY
44466: PPUSH
44467: LD_VAR 0 2
44471: PUSH
44472: LD_INT 3
44474: ARRAY
44475: PPUSH
44476: LD_VAR 0 2
44480: PUSH
44481: LD_INT 4
44483: ARRAY
44484: PPUSH
44485: CALL_OW 449
44489: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44490: LD_ADDR_VAR 0 3
44494: PUSH
44495: LD_VAR 0 5
44499: PPUSH
44500: LD_INT 1
44502: PPUSH
44503: CALL_OW 275
44507: PUSH
44508: LD_VAR 0 4
44512: PUSH
44513: LD_INT 1
44515: ARRAY
44516: GREATEREQUAL
44517: PUSH
44518: LD_VAR 0 5
44522: PPUSH
44523: LD_INT 2
44525: PPUSH
44526: CALL_OW 275
44530: PUSH
44531: LD_VAR 0 4
44535: PUSH
44536: LD_INT 2
44538: ARRAY
44539: GREATEREQUAL
44540: AND
44541: PUSH
44542: LD_VAR 0 5
44546: PPUSH
44547: LD_INT 3
44549: PPUSH
44550: CALL_OW 275
44554: PUSH
44555: LD_VAR 0 4
44559: PUSH
44560: LD_INT 3
44562: ARRAY
44563: GREATEREQUAL
44564: AND
44565: ST_TO_ADDR
// end ;
44566: LD_VAR 0 3
44570: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44571: LD_INT 0
44573: PPUSH
44574: PPUSH
44575: PPUSH
44576: PPUSH
// pom := GetBase ( building ) ;
44577: LD_ADDR_VAR 0 3
44581: PUSH
44582: LD_VAR 0 1
44586: PPUSH
44587: CALL_OW 274
44591: ST_TO_ADDR
// if not pom then
44592: LD_VAR 0 3
44596: NOT
44597: IFFALSE 44601
// exit ;
44599: GO 44771
// btype := GetBType ( building ) ;
44601: LD_ADDR_VAR 0 5
44605: PUSH
44606: LD_VAR 0 1
44610: PPUSH
44611: CALL_OW 266
44615: ST_TO_ADDR
// if btype = b_armoury then
44616: LD_VAR 0 5
44620: PUSH
44621: LD_INT 4
44623: EQUAL
44624: IFFALSE 44634
// btype := b_barracks ;
44626: LD_ADDR_VAR 0 5
44630: PUSH
44631: LD_INT 5
44633: ST_TO_ADDR
// if btype = b_depot then
44634: LD_VAR 0 5
44638: PUSH
44639: LD_INT 0
44641: EQUAL
44642: IFFALSE 44652
// btype := b_warehouse ;
44644: LD_ADDR_VAR 0 5
44648: PUSH
44649: LD_INT 1
44651: ST_TO_ADDR
// if btype = b_workshop then
44652: LD_VAR 0 5
44656: PUSH
44657: LD_INT 2
44659: EQUAL
44660: IFFALSE 44670
// btype := b_factory ;
44662: LD_ADDR_VAR 0 5
44666: PUSH
44667: LD_INT 3
44669: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44670: LD_ADDR_VAR 0 4
44674: PUSH
44675: LD_VAR 0 5
44679: PPUSH
44680: LD_VAR 0 1
44684: PPUSH
44685: CALL_OW 248
44689: PPUSH
44690: CALL_OW 450
44694: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44695: LD_ADDR_VAR 0 2
44699: PUSH
44700: LD_VAR 0 3
44704: PPUSH
44705: LD_INT 1
44707: PPUSH
44708: CALL_OW 275
44712: PUSH
44713: LD_VAR 0 4
44717: PUSH
44718: LD_INT 1
44720: ARRAY
44721: GREATEREQUAL
44722: PUSH
44723: LD_VAR 0 3
44727: PPUSH
44728: LD_INT 2
44730: PPUSH
44731: CALL_OW 275
44735: PUSH
44736: LD_VAR 0 4
44740: PUSH
44741: LD_INT 2
44743: ARRAY
44744: GREATEREQUAL
44745: AND
44746: PUSH
44747: LD_VAR 0 3
44751: PPUSH
44752: LD_INT 3
44754: PPUSH
44755: CALL_OW 275
44759: PUSH
44760: LD_VAR 0 4
44764: PUSH
44765: LD_INT 3
44767: ARRAY
44768: GREATEREQUAL
44769: AND
44770: ST_TO_ADDR
// end ;
44771: LD_VAR 0 2
44775: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44776: LD_INT 0
44778: PPUSH
44779: PPUSH
44780: PPUSH
// pom := GetBase ( building ) ;
44781: LD_ADDR_VAR 0 4
44785: PUSH
44786: LD_VAR 0 1
44790: PPUSH
44791: CALL_OW 274
44795: ST_TO_ADDR
// if not pom then
44796: LD_VAR 0 4
44800: NOT
44801: IFFALSE 44805
// exit ;
44803: GO 44906
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44805: LD_ADDR_VAR 0 5
44809: PUSH
44810: LD_VAR 0 2
44814: PPUSH
44815: LD_VAR 0 1
44819: PPUSH
44820: CALL_OW 248
44824: PPUSH
44825: CALL_OW 450
44829: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44830: LD_ADDR_VAR 0 3
44834: PUSH
44835: LD_VAR 0 4
44839: PPUSH
44840: LD_INT 1
44842: PPUSH
44843: CALL_OW 275
44847: PUSH
44848: LD_VAR 0 5
44852: PUSH
44853: LD_INT 1
44855: ARRAY
44856: GREATEREQUAL
44857: PUSH
44858: LD_VAR 0 4
44862: PPUSH
44863: LD_INT 2
44865: PPUSH
44866: CALL_OW 275
44870: PUSH
44871: LD_VAR 0 5
44875: PUSH
44876: LD_INT 2
44878: ARRAY
44879: GREATEREQUAL
44880: AND
44881: PUSH
44882: LD_VAR 0 4
44886: PPUSH
44887: LD_INT 3
44889: PPUSH
44890: CALL_OW 275
44894: PUSH
44895: LD_VAR 0 5
44899: PUSH
44900: LD_INT 3
44902: ARRAY
44903: GREATEREQUAL
44904: AND
44905: ST_TO_ADDR
// end ;
44906: LD_VAR 0 3
44910: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
44911: LD_INT 0
44913: PPUSH
44914: PPUSH
44915: PPUSH
44916: PPUSH
44917: PPUSH
44918: PPUSH
44919: PPUSH
44920: PPUSH
44921: PPUSH
44922: PPUSH
// result := false ;
44923: LD_ADDR_VAR 0 6
44927: PUSH
44928: LD_INT 0
44930: ST_TO_ADDR
// if not base or not btype or not x or not y then
44931: LD_VAR 0 1
44935: NOT
44936: PUSH
44937: LD_VAR 0 2
44941: NOT
44942: OR
44943: PUSH
44944: LD_VAR 0 3
44948: NOT
44949: OR
44950: PUSH
44951: LD_VAR 0 4
44955: NOT
44956: OR
44957: IFFALSE 44961
// exit ;
44959: GO 45570
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
44961: LD_ADDR_VAR 0 12
44965: PUSH
44966: LD_VAR 0 2
44970: PPUSH
44971: LD_VAR 0 3
44975: PPUSH
44976: LD_VAR 0 4
44980: PPUSH
44981: LD_VAR 0 5
44985: PPUSH
44986: LD_VAR 0 1
44990: PUSH
44991: LD_INT 1
44993: ARRAY
44994: PPUSH
44995: CALL_OW 248
44999: PPUSH
45000: LD_INT 0
45002: PPUSH
45003: CALL 46407 0 6
45007: ST_TO_ADDR
// if not hexes then
45008: LD_VAR 0 12
45012: NOT
45013: IFFALSE 45017
// exit ;
45015: GO 45570
// for i = 1 to hexes do
45017: LD_ADDR_VAR 0 7
45021: PUSH
45022: DOUBLE
45023: LD_INT 1
45025: DEC
45026: ST_TO_ADDR
45027: LD_VAR 0 12
45031: PUSH
45032: FOR_TO
45033: IFFALSE 45568
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45035: LD_ADDR_VAR 0 11
45039: PUSH
45040: LD_VAR 0 12
45044: PUSH
45045: LD_VAR 0 7
45049: ARRAY
45050: PUSH
45051: LD_INT 1
45053: ARRAY
45054: PPUSH
45055: LD_VAR 0 12
45059: PUSH
45060: LD_VAR 0 7
45064: ARRAY
45065: PUSH
45066: LD_INT 2
45068: ARRAY
45069: PPUSH
45070: CALL_OW 428
45074: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45075: LD_VAR 0 12
45079: PUSH
45080: LD_VAR 0 7
45084: ARRAY
45085: PUSH
45086: LD_INT 1
45088: ARRAY
45089: PPUSH
45090: LD_VAR 0 12
45094: PUSH
45095: LD_VAR 0 7
45099: ARRAY
45100: PUSH
45101: LD_INT 2
45103: ARRAY
45104: PPUSH
45105: CALL_OW 351
45109: PUSH
45110: LD_VAR 0 12
45114: PUSH
45115: LD_VAR 0 7
45119: ARRAY
45120: PUSH
45121: LD_INT 1
45123: ARRAY
45124: PPUSH
45125: LD_VAR 0 12
45129: PUSH
45130: LD_VAR 0 7
45134: ARRAY
45135: PUSH
45136: LD_INT 2
45138: ARRAY
45139: PPUSH
45140: CALL_OW 488
45144: NOT
45145: OR
45146: PUSH
45147: LD_VAR 0 11
45151: PPUSH
45152: CALL_OW 247
45156: PUSH
45157: LD_INT 3
45159: EQUAL
45160: OR
45161: IFFALSE 45167
// exit ;
45163: POP
45164: POP
45165: GO 45570
// if not tmp or not tmp in base then
45167: LD_VAR 0 11
45171: NOT
45172: PUSH
45173: LD_VAR 0 11
45177: PUSH
45178: LD_VAR 0 1
45182: IN
45183: NOT
45184: OR
45185: IFFALSE 45189
// continue ;
45187: GO 45032
// result := true ;
45189: LD_ADDR_VAR 0 6
45193: PUSH
45194: LD_INT 1
45196: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45197: LD_ADDR_VAR 0 15
45201: PUSH
45202: LD_VAR 0 1
45206: PPUSH
45207: LD_INT 22
45209: PUSH
45210: LD_VAR 0 11
45214: PPUSH
45215: CALL_OW 255
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: LD_INT 30
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 30
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: LIST
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PPUSH
45256: CALL_OW 72
45260: ST_TO_ADDR
// if dep then
45261: LD_VAR 0 15
45265: IFFALSE 45401
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45267: LD_ADDR_VAR 0 14
45271: PUSH
45272: LD_VAR 0 15
45276: PUSH
45277: LD_INT 1
45279: ARRAY
45280: PPUSH
45281: CALL_OW 250
45285: PPUSH
45286: LD_VAR 0 15
45290: PUSH
45291: LD_INT 1
45293: ARRAY
45294: PPUSH
45295: CALL_OW 254
45299: PPUSH
45300: LD_INT 5
45302: PPUSH
45303: CALL_OW 272
45307: PUSH
45308: LD_VAR 0 15
45312: PUSH
45313: LD_INT 1
45315: ARRAY
45316: PPUSH
45317: CALL_OW 251
45321: PPUSH
45322: LD_VAR 0 15
45326: PUSH
45327: LD_INT 1
45329: ARRAY
45330: PPUSH
45331: CALL_OW 254
45335: PPUSH
45336: LD_INT 5
45338: PPUSH
45339: CALL_OW 273
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45348: LD_VAR 0 14
45352: PUSH
45353: LD_INT 1
45355: ARRAY
45356: PPUSH
45357: LD_VAR 0 14
45361: PUSH
45362: LD_INT 2
45364: ARRAY
45365: PPUSH
45366: CALL_OW 488
45370: IFFALSE 45401
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45372: LD_VAR 0 11
45376: PPUSH
45377: LD_VAR 0 14
45381: PUSH
45382: LD_INT 1
45384: ARRAY
45385: PPUSH
45386: LD_VAR 0 14
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: PPUSH
45395: CALL_OW 111
// continue ;
45399: GO 45032
// end ; end ; r := GetDir ( tmp ) ;
45401: LD_ADDR_VAR 0 13
45405: PUSH
45406: LD_VAR 0 11
45410: PPUSH
45411: CALL_OW 254
45415: ST_TO_ADDR
// if r = 5 then
45416: LD_VAR 0 13
45420: PUSH
45421: LD_INT 5
45423: EQUAL
45424: IFFALSE 45434
// r := 0 ;
45426: LD_ADDR_VAR 0 13
45430: PUSH
45431: LD_INT 0
45433: ST_TO_ADDR
// for j = r to 5 do
45434: LD_ADDR_VAR 0 8
45438: PUSH
45439: DOUBLE
45440: LD_VAR 0 13
45444: DEC
45445: ST_TO_ADDR
45446: LD_INT 5
45448: PUSH
45449: FOR_TO
45450: IFFALSE 45564
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45452: LD_ADDR_VAR 0 9
45456: PUSH
45457: LD_VAR 0 11
45461: PPUSH
45462: CALL_OW 250
45466: PPUSH
45467: LD_VAR 0 8
45471: PPUSH
45472: LD_INT 2
45474: PPUSH
45475: CALL_OW 272
45479: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45480: LD_ADDR_VAR 0 10
45484: PUSH
45485: LD_VAR 0 11
45489: PPUSH
45490: CALL_OW 251
45494: PPUSH
45495: LD_VAR 0 8
45499: PPUSH
45500: LD_INT 2
45502: PPUSH
45503: CALL_OW 273
45507: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45508: LD_VAR 0 9
45512: PPUSH
45513: LD_VAR 0 10
45517: PPUSH
45518: CALL_OW 488
45522: PUSH
45523: LD_VAR 0 9
45527: PPUSH
45528: LD_VAR 0 10
45532: PPUSH
45533: CALL_OW 428
45537: NOT
45538: AND
45539: IFFALSE 45562
// begin ComMoveXY ( tmp , _x , _y ) ;
45541: LD_VAR 0 11
45545: PPUSH
45546: LD_VAR 0 9
45550: PPUSH
45551: LD_VAR 0 10
45555: PPUSH
45556: CALL_OW 111
// break ;
45560: GO 45564
// end ; end ;
45562: GO 45449
45564: POP
45565: POP
// end ;
45566: GO 45032
45568: POP
45569: POP
// end ;
45570: LD_VAR 0 6
45574: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
45575: LD_INT 0
45577: PPUSH
45578: PPUSH
45579: PPUSH
45580: PPUSH
45581: PPUSH
45582: PPUSH
45583: PPUSH
45584: PPUSH
45585: PPUSH
45586: PPUSH
// result := false ;
45587: LD_ADDR_VAR 0 6
45591: PUSH
45592: LD_INT 0
45594: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45595: LD_VAR 0 1
45599: NOT
45600: PUSH
45601: LD_VAR 0 1
45605: PPUSH
45606: CALL_OW 266
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: IN
45621: NOT
45622: OR
45623: PUSH
45624: LD_VAR 0 2
45628: NOT
45629: OR
45630: PUSH
45631: LD_VAR 0 5
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: LD_INT 4
45650: PUSH
45651: LD_INT 5
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: IN
45662: NOT
45663: OR
45664: PUSH
45665: LD_VAR 0 3
45669: PPUSH
45670: LD_VAR 0 4
45674: PPUSH
45675: CALL_OW 488
45679: NOT
45680: OR
45681: IFFALSE 45685
// exit ;
45683: GO 46402
// pom := GetBase ( depot ) ;
45685: LD_ADDR_VAR 0 10
45689: PUSH
45690: LD_VAR 0 1
45694: PPUSH
45695: CALL_OW 274
45699: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45700: LD_ADDR_VAR 0 11
45704: PUSH
45705: LD_VAR 0 2
45709: PPUSH
45710: LD_VAR 0 1
45714: PPUSH
45715: CALL_OW 248
45719: PPUSH
45720: CALL_OW 450
45724: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45725: LD_VAR 0 10
45729: PPUSH
45730: LD_INT 1
45732: PPUSH
45733: CALL_OW 275
45737: PUSH
45738: LD_VAR 0 11
45742: PUSH
45743: LD_INT 1
45745: ARRAY
45746: GREATEREQUAL
45747: PUSH
45748: LD_VAR 0 10
45752: PPUSH
45753: LD_INT 2
45755: PPUSH
45756: CALL_OW 275
45760: PUSH
45761: LD_VAR 0 11
45765: PUSH
45766: LD_INT 2
45768: ARRAY
45769: GREATEREQUAL
45770: AND
45771: PUSH
45772: LD_VAR 0 10
45776: PPUSH
45777: LD_INT 3
45779: PPUSH
45780: CALL_OW 275
45784: PUSH
45785: LD_VAR 0 11
45789: PUSH
45790: LD_INT 3
45792: ARRAY
45793: GREATEREQUAL
45794: AND
45795: NOT
45796: IFFALSE 45800
// exit ;
45798: GO 46402
// if GetBType ( depot ) = b_depot then
45800: LD_VAR 0 1
45804: PPUSH
45805: CALL_OW 266
45809: PUSH
45810: LD_INT 0
45812: EQUAL
45813: IFFALSE 45825
// dist := 28 else
45815: LD_ADDR_VAR 0 14
45819: PUSH
45820: LD_INT 28
45822: ST_TO_ADDR
45823: GO 45833
// dist := 36 ;
45825: LD_ADDR_VAR 0 14
45829: PUSH
45830: LD_INT 36
45832: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45833: LD_VAR 0 1
45837: PPUSH
45838: LD_VAR 0 3
45842: PPUSH
45843: LD_VAR 0 4
45847: PPUSH
45848: CALL_OW 297
45852: PUSH
45853: LD_VAR 0 14
45857: GREATER
45858: IFFALSE 45862
// exit ;
45860: GO 46402
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45862: LD_ADDR_VAR 0 12
45866: PUSH
45867: LD_VAR 0 2
45871: PPUSH
45872: LD_VAR 0 3
45876: PPUSH
45877: LD_VAR 0 4
45881: PPUSH
45882: LD_VAR 0 5
45886: PPUSH
45887: LD_VAR 0 1
45891: PPUSH
45892: CALL_OW 248
45896: PPUSH
45897: LD_INT 0
45899: PPUSH
45900: CALL 46407 0 6
45904: ST_TO_ADDR
// if not hexes then
45905: LD_VAR 0 12
45909: NOT
45910: IFFALSE 45914
// exit ;
45912: GO 46402
// hex := GetHexInfo ( x , y ) ;
45914: LD_ADDR_VAR 0 15
45918: PUSH
45919: LD_VAR 0 3
45923: PPUSH
45924: LD_VAR 0 4
45928: PPUSH
45929: CALL_OW 546
45933: ST_TO_ADDR
// if hex [ 1 ] then
45934: LD_VAR 0 15
45938: PUSH
45939: LD_INT 1
45941: ARRAY
45942: IFFALSE 45946
// exit ;
45944: GO 46402
// height := hex [ 2 ] ;
45946: LD_ADDR_VAR 0 13
45950: PUSH
45951: LD_VAR 0 15
45955: PUSH
45956: LD_INT 2
45958: ARRAY
45959: ST_TO_ADDR
// for i = 1 to hexes do
45960: LD_ADDR_VAR 0 7
45964: PUSH
45965: DOUBLE
45966: LD_INT 1
45968: DEC
45969: ST_TO_ADDR
45970: LD_VAR 0 12
45974: PUSH
45975: FOR_TO
45976: IFFALSE 46306
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45978: LD_VAR 0 12
45982: PUSH
45983: LD_VAR 0 7
45987: ARRAY
45988: PUSH
45989: LD_INT 1
45991: ARRAY
45992: PPUSH
45993: LD_VAR 0 12
45997: PUSH
45998: LD_VAR 0 7
46002: ARRAY
46003: PUSH
46004: LD_INT 2
46006: ARRAY
46007: PPUSH
46008: CALL_OW 488
46012: NOT
46013: PUSH
46014: LD_VAR 0 12
46018: PUSH
46019: LD_VAR 0 7
46023: ARRAY
46024: PUSH
46025: LD_INT 1
46027: ARRAY
46028: PPUSH
46029: LD_VAR 0 12
46033: PUSH
46034: LD_VAR 0 7
46038: ARRAY
46039: PUSH
46040: LD_INT 2
46042: ARRAY
46043: PPUSH
46044: CALL_OW 428
46048: PUSH
46049: LD_INT 0
46051: GREATER
46052: OR
46053: PUSH
46054: LD_VAR 0 12
46058: PUSH
46059: LD_VAR 0 7
46063: ARRAY
46064: PUSH
46065: LD_INT 1
46067: ARRAY
46068: PPUSH
46069: LD_VAR 0 12
46073: PUSH
46074: LD_VAR 0 7
46078: ARRAY
46079: PUSH
46080: LD_INT 2
46082: ARRAY
46083: PPUSH
46084: CALL_OW 351
46088: OR
46089: IFFALSE 46095
// exit ;
46091: POP
46092: POP
46093: GO 46402
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46095: LD_ADDR_VAR 0 8
46099: PUSH
46100: LD_VAR 0 12
46104: PUSH
46105: LD_VAR 0 7
46109: ARRAY
46110: PUSH
46111: LD_INT 1
46113: ARRAY
46114: PPUSH
46115: LD_VAR 0 12
46119: PUSH
46120: LD_VAR 0 7
46124: ARRAY
46125: PUSH
46126: LD_INT 2
46128: ARRAY
46129: PPUSH
46130: CALL_OW 546
46134: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46135: LD_VAR 0 8
46139: PUSH
46140: LD_INT 1
46142: ARRAY
46143: PUSH
46144: LD_VAR 0 8
46148: PUSH
46149: LD_INT 2
46151: ARRAY
46152: PUSH
46153: LD_VAR 0 13
46157: PUSH
46158: LD_INT 2
46160: PLUS
46161: GREATER
46162: OR
46163: PUSH
46164: LD_VAR 0 8
46168: PUSH
46169: LD_INT 2
46171: ARRAY
46172: PUSH
46173: LD_VAR 0 13
46177: PUSH
46178: LD_INT 2
46180: MINUS
46181: LESS
46182: OR
46183: PUSH
46184: LD_VAR 0 8
46188: PUSH
46189: LD_INT 3
46191: ARRAY
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 8
46198: PUSH
46199: LD_INT 9
46201: PUSH
46202: LD_INT 10
46204: PUSH
46205: LD_INT 11
46207: PUSH
46208: LD_INT 12
46210: PUSH
46211: LD_INT 13
46213: PUSH
46214: LD_INT 16
46216: PUSH
46217: LD_INT 17
46219: PUSH
46220: LD_INT 18
46222: PUSH
46223: LD_INT 19
46225: PUSH
46226: LD_INT 20
46228: PUSH
46229: LD_INT 21
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: IN
46247: NOT
46248: OR
46249: PUSH
46250: LD_VAR 0 8
46254: PUSH
46255: LD_INT 5
46257: ARRAY
46258: NOT
46259: OR
46260: PUSH
46261: LD_VAR 0 8
46265: PUSH
46266: LD_INT 6
46268: ARRAY
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 7
46278: PUSH
46279: LD_INT 9
46281: PUSH
46282: LD_INT 10
46284: PUSH
46285: LD_INT 11
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: IN
46296: NOT
46297: OR
46298: IFFALSE 46304
// exit ;
46300: POP
46301: POP
46302: GO 46402
// end ;
46304: GO 45975
46306: POP
46307: POP
// side := GetSide ( depot ) ;
46308: LD_ADDR_VAR 0 9
46312: PUSH
46313: LD_VAR 0 1
46317: PPUSH
46318: CALL_OW 255
46322: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46323: LD_VAR 0 9
46327: PPUSH
46328: LD_VAR 0 3
46332: PPUSH
46333: LD_VAR 0 4
46337: PPUSH
46338: LD_INT 20
46340: PPUSH
46341: CALL 39056 0 4
46345: PUSH
46346: LD_INT 4
46348: ARRAY
46349: IFFALSE 46353
// exit ;
46351: GO 46402
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46353: LD_VAR 0 2
46357: PUSH
46358: LD_INT 29
46360: PUSH
46361: LD_INT 30
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: IN
46368: PUSH
46369: LD_VAR 0 3
46373: PPUSH
46374: LD_VAR 0 4
46378: PPUSH
46379: LD_VAR 0 9
46383: PPUSH
46384: CALL_OW 440
46388: NOT
46389: AND
46390: IFFALSE 46394
// exit ;
46392: GO 46402
// result := true ;
46394: LD_ADDR_VAR 0 6
46398: PUSH
46399: LD_INT 1
46401: ST_TO_ADDR
// end ;
46402: LD_VAR 0 6
46406: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
46407: LD_INT 0
46409: PPUSH
46410: PPUSH
46411: PPUSH
46412: PPUSH
46413: PPUSH
46414: PPUSH
46415: PPUSH
46416: PPUSH
46417: PPUSH
46418: PPUSH
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
46425: PPUSH
46426: PPUSH
46427: PPUSH
46428: PPUSH
46429: PPUSH
46430: PPUSH
46431: PPUSH
46432: PPUSH
46433: PPUSH
46434: PPUSH
46435: PPUSH
46436: PPUSH
46437: PPUSH
46438: PPUSH
46439: PPUSH
46440: PPUSH
46441: PPUSH
46442: PPUSH
46443: PPUSH
46444: PPUSH
46445: PPUSH
46446: PPUSH
46447: PPUSH
46448: PPUSH
46449: PPUSH
46450: PPUSH
46451: PPUSH
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
// result = [ ] ;
46467: LD_ADDR_VAR 0 7
46471: PUSH
46472: EMPTY
46473: ST_TO_ADDR
// temp_list = [ ] ;
46474: LD_ADDR_VAR 0 9
46478: PUSH
46479: EMPTY
46480: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46481: LD_VAR 0 4
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: LD_INT 4
46500: PUSH
46501: LD_INT 5
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: IN
46512: NOT
46513: PUSH
46514: LD_VAR 0 1
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: IN
46529: PUSH
46530: LD_VAR 0 5
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: IN
46549: NOT
46550: AND
46551: OR
46552: IFFALSE 46556
// exit ;
46554: GO 64947
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46556: LD_VAR 0 1
46560: PUSH
46561: LD_INT 6
46563: PUSH
46564: LD_INT 7
46566: PUSH
46567: LD_INT 8
46569: PUSH
46570: LD_INT 13
46572: PUSH
46573: LD_INT 12
46575: PUSH
46576: LD_INT 15
46578: PUSH
46579: LD_INT 11
46581: PUSH
46582: LD_INT 14
46584: PUSH
46585: LD_INT 10
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: IN
46599: IFFALSE 46609
// btype = b_lab ;
46601: LD_ADDR_VAR 0 1
46605: PUSH
46606: LD_INT 6
46608: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46609: LD_VAR 0 6
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: IN
46628: NOT
46629: PUSH
46630: LD_VAR 0 1
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: LD_INT 3
46646: PUSH
46647: LD_INT 6
46649: PUSH
46650: LD_INT 36
46652: PUSH
46653: LD_INT 4
46655: PUSH
46656: LD_INT 5
46658: PUSH
46659: LD_INT 31
46661: PUSH
46662: LD_INT 32
46664: PUSH
46665: LD_INT 33
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: IN
46681: NOT
46682: PUSH
46683: LD_VAR 0 6
46687: PUSH
46688: LD_INT 1
46690: EQUAL
46691: AND
46692: OR
46693: PUSH
46694: LD_VAR 0 1
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 3
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: IN
46709: NOT
46710: PUSH
46711: LD_VAR 0 6
46715: PUSH
46716: LD_INT 2
46718: EQUAL
46719: AND
46720: OR
46721: IFFALSE 46731
// mode = 0 ;
46723: LD_ADDR_VAR 0 6
46727: PUSH
46728: LD_INT 0
46730: ST_TO_ADDR
// case mode of 0 :
46731: LD_VAR 0 6
46735: PUSH
46736: LD_INT 0
46738: DOUBLE
46739: EQUAL
46740: IFTRUE 46744
46742: GO 58197
46744: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46745: LD_ADDR_VAR 0 11
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46938: LD_ADDR_VAR 0 12
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 3
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47134: LD_ADDR_VAR 0 13
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: LD_INT 3
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: NEG
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 3
47305: NEG
47306: PUSH
47307: LD_INT 3
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47333: LD_ADDR_VAR 0 14
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 2
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 3
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47529: LD_ADDR_VAR 0 15
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47722: LD_ADDR_VAR 0 16
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 3
47879: PUSH
47880: LD_INT 3
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 3
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47915: LD_ADDR_VAR 0 17
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48145: LD_ADDR_VAR 0 18
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48375: LD_ADDR_VAR 0 19
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48605: LD_ADDR_VAR 0 20
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48835: LD_ADDR_VAR 0 21
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49065: LD_ADDR_VAR 0 22
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49295: LD_ADDR_VAR 0 23
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: LD_INT 3
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: LD_INT 3
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49575: LD_ADDR_VAR 0 24
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49851: LD_ADDR_VAR 0 25
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: LD_INT 2
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 3
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 3
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50125: LD_ADDR_VAR 0 26
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 3
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 3
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50401: LD_ADDR_VAR 0 27
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 2
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 2
50588: NEG
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 3
50646: NEG
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50681: LD_ADDR_VAR 0 28
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: LD_INT 3
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50963: LD_ADDR_VAR 0 29
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 3
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 3
51207: NEG
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51242: LD_ADDR_VAR 0 30
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: LD_INT 3
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51520: LD_ADDR_VAR 0 31
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 3
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51798: LD_ADDR_VAR 0 32
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: LD_INT 3
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 3
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 3
52041: NEG
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52076: LD_ADDR_VAR 0 33
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 3
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: LD_INT 3
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52355: LD_ADDR_VAR 0 34
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 3
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52635: LD_ADDR_VAR 0 35
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52747: LD_ADDR_VAR 0 36
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52859: LD_ADDR_VAR 0 37
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52971: LD_ADDR_VAR 0 38
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53083: LD_ADDR_VAR 0 39
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: LD_INT 2
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53195: LD_ADDR_VAR 0 40
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53307: LD_ADDR_VAR 0 41
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 2
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 3
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: LD_INT 3
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 3
53581: NEG
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 3
53604: NEG
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: LD_INT 3
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53657: LD_ADDR_VAR 0 42
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 3
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 2
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 3
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: LD_INT 3
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 3
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 3
53966: NEG
53967: PUSH
53968: LD_INT 3
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54007: LD_ADDR_VAR 0 43
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 3
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 3
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 3
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 3
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 3
54303: NEG
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54355: LD_ADDR_VAR 0 44
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: LD_INT 3
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: PUSH
54599: LD_INT 3
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: LD_INT 3
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 3
54664: NEG
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54705: LD_ADDR_VAR 0 45
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: LD_INT 3
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 3
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 3
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 3
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: LD_INT 3
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 3
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 3
55014: NEG
55015: PUSH
55016: LD_INT 3
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55055: LD_ADDR_VAR 0 46
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 2
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 3
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 3
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 3
55351: NEG
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 3
55362: NEG
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55403: LD_ADDR_VAR 0 47
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55554: LD_ADDR_VAR 0 48
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55701: LD_ADDR_VAR 0 49
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55845: LD_ADDR_VAR 0 50
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55989: LD_ADDR_VAR 0 51
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56136: LD_ADDR_VAR 0 52
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56287: LD_ADDR_VAR 0 53
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56517: LD_ADDR_VAR 0 54
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56747: LD_ADDR_VAR 0 55
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56977: LD_ADDR_VAR 0 56
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57207: LD_ADDR_VAR 0 57
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57437: LD_ADDR_VAR 0 58
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57667: LD_ADDR_VAR 0 59
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57755: LD_ADDR_VAR 0 60
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57843: LD_ADDR_VAR 0 61
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57931: LD_ADDR_VAR 0 62
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58019: LD_ADDR_VAR 0 63
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58107: LD_ADDR_VAR 0 64
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: ST_TO_ADDR
// end ; 1 :
58195: GO 64092
58197: LD_INT 1
58199: DOUBLE
58200: EQUAL
58201: IFTRUE 58205
58203: GO 60828
58205: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58206: LD_ADDR_VAR 0 11
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 3
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 3
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 2
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58250: LD_ADDR_VAR 0 12
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58291: LD_ADDR_VAR 0 13
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: LIST
58330: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58331: LD_ADDR_VAR 0 14
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: LD_INT 2
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58372: LD_ADDR_VAR 0 15
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 3
58390: NEG
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 3
58401: NEG
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: LIST
58415: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58416: LD_ADDR_VAR 0 16
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: LD_INT 3
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: LD_INT 3
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58462: LD_ADDR_VAR 0 17
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 3
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 3
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58506: LD_ADDR_VAR 0 18
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: LIST
58546: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58547: LD_ADDR_VAR 0 19
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: LIST
58586: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58587: LD_ADDR_VAR 0 20
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: LD_INT 3
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: LIST
58627: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58628: LD_ADDR_VAR 0 21
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 3
58646: NEG
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: LIST
58671: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58672: LD_ADDR_VAR 0 22
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: LD_INT 3
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 3
58691: NEG
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58718: LD_ADDR_VAR 0 23
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 3
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 4
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: LD_INT 3
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58762: LD_ADDR_VAR 0 24
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 4
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: LIST
58802: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58803: LD_ADDR_VAR 0 25
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 4
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: LD_INT 4
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: LIST
58842: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58843: LD_ADDR_VAR 0 26
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: LD_INT 4
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: LIST
58883: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58884: LD_ADDR_VAR 0 27
58888: PUSH
58889: LD_INT 3
58891: NEG
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 4
58913: NEG
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: LIST
58927: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58928: LD_ADDR_VAR 0 28
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 3
58947: NEG
58948: PUSH
58949: LD_INT 4
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 4
58959: NEG
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58974: LD_ADDR_VAR 0 29
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: LD_INT 3
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 3
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 4
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 4
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 3
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 5
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 5
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: LD_INT 4
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: LD_INT 6
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 6
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: LD_INT 5
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59129: LD_ADDR_VAR 0 30
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 4
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 4
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 4
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 5
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 5
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 5
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 6
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 6
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59272: LD_ADDR_VAR 0 31
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 3
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: LD_INT 3
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 4
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 4
59319: PUSH
59320: LD_INT 4
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 3
59329: PUSH
59330: LD_INT 4
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 5
59339: PUSH
59340: LD_INT 4
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 5
59349: PUSH
59350: LD_INT 5
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 4
59359: PUSH
59360: LD_INT 5
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 6
59369: PUSH
59370: LD_INT 5
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 6
59379: PUSH
59380: LD_INT 6
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 5
59389: PUSH
59390: LD_INT 6
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59411: LD_ADDR_VAR 0 32
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 3
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: LD_INT 3
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: LD_INT 4
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 4
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: LD_INT 5
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 5
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 4
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 6
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 6
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 5
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59554: LD_ADDR_VAR 0 33
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 3
59572: NEG
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 3
59583: NEG
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 3
59595: NEG
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 4
59606: NEG
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 4
59617: NEG
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 4
59629: NEG
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 5
59640: NEG
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 5
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 5
59663: NEG
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 6
59674: NEG
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 6
59685: NEG
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59709: LD_ADDR_VAR 0 34
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 3
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 3
59728: NEG
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: NEG
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: LD_INT 4
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: NEG
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 4
59776: NEG
59777: PUSH
59778: LD_INT 4
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 4
59788: NEG
59789: PUSH
59790: LD_INT 5
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 5
59800: NEG
59801: PUSH
59802: LD_INT 4
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 5
59812: NEG
59813: PUSH
59814: LD_INT 5
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 5
59824: NEG
59825: PUSH
59826: LD_INT 6
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 6
59836: NEG
59837: PUSH
59838: LD_INT 5
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 6
59848: NEG
59849: PUSH
59850: LD_INT 6
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59872: LD_ADDR_VAR 0 41
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: LIST
59915: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59916: LD_ADDR_VAR 0 42
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59957: LD_ADDR_VAR 0 43
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: LD_INT 3
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: LIST
59996: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59997: LD_ADDR_VAR 0 44
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 2
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: LD_INT 2
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60038: LD_ADDR_VAR 0 45
60042: PUSH
60043: LD_INT 2
60045: NEG
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: NEG
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 3
60067: NEG
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60082: LD_ADDR_VAR 0 46
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: LD_INT 3
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: LD_INT 2
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60128: LD_ADDR_VAR 0 47
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: LD_INT 3
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60161: LD_ADDR_VAR 0 48
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60192: LD_ADDR_VAR 0 49
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60221: LD_ADDR_VAR 0 50
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 3
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60250: LD_ADDR_VAR 0 51
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60281: LD_ADDR_VAR 0 52
60285: PUSH
60286: LD_INT 3
60288: NEG
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 3
60300: NEG
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60314: LD_ADDR_VAR 0 53
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: LD_INT 3
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 3
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60358: LD_ADDR_VAR 0 54
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 3
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: LIST
60398: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60399: LD_ADDR_VAR 0 55
60403: PUSH
60404: LD_INT 3
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: LIST
60438: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60439: LD_ADDR_VAR 0 56
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 3
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: LIST
60479: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60480: LD_ADDR_VAR 0 57
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: LIST
60523: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60524: LD_ADDR_VAR 0 58
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: LD_INT 3
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: NEG
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: LD_INT 3
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: LIST
60569: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60570: LD_ADDR_VAR 0 59
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 2
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: LIST
60613: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60614: LD_ADDR_VAR 0 60
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 2
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: LIST
60654: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60655: LD_ADDR_VAR 0 61
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60695: LD_ADDR_VAR 0 62
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: LIST
60735: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60736: LD_ADDR_VAR 0 63
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60780: LD_ADDR_VAR 0 64
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: LIST
60825: ST_TO_ADDR
// end ; 2 :
60826: GO 64092
60828: LD_INT 2
60830: DOUBLE
60831: EQUAL
60832: IFTRUE 60836
60834: GO 64091
60836: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60837: LD_ADDR_VAR 0 29
60841: PUSH
60842: LD_INT 4
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 4
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 5
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 5
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 4
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 3
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 5
60927: PUSH
60928: LD_INT 2
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 4
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 4
60967: PUSH
60968: LD_INT 4
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 3
60977: PUSH
60978: LD_INT 4
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 4
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: LD_INT 4
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 4
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 4
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 5
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 5
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 4
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 5
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: LD_INT 3
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 3
61120: NEG
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 3
61131: NEG
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 2
61143: NEG
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 3
61165: NEG
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 4
61176: NEG
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 4
61187: NEG
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 4
61199: NEG
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: NEG
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 4
61222: NEG
61223: PUSH
61224: LD_INT 4
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 4
61234: NEG
61235: PUSH
61236: LD_INT 5
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: LD_INT 4
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 3
61258: NEG
61259: PUSH
61260: LD_INT 3
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 4
61270: NEG
61271: PUSH
61272: LD_INT 3
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 5
61282: NEG
61283: PUSH
61284: LD_INT 4
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 5
61294: NEG
61295: PUSH
61296: LD_INT 5
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: NEG
61307: PUSH
61308: LD_INT 5
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 5
61318: NEG
61319: PUSH
61320: LD_INT 3
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61375: LD_ADDR_VAR 0 30
61379: PUSH
61380: LD_INT 4
61382: PUSH
61383: LD_INT 4
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 4
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 5
61402: PUSH
61403: LD_INT 4
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 5
61412: PUSH
61413: LD_INT 5
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 4
61422: PUSH
61423: LD_INT 5
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: PUSH
61433: LD_INT 4
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 5
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 3
61462: PUSH
61463: LD_INT 5
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 3
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 4
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 4
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 4
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 4
61565: NEG
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 4
61576: NEG
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 3
61599: NEG
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 4
61610: NEG
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 5
61621: NEG
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 5
61632: NEG
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 5
61644: NEG
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 3
61656: NEG
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 3
61667: NEG
61668: PUSH
61669: LD_INT 3
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 3
61679: NEG
61680: PUSH
61681: LD_INT 4
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: LD_INT 3
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 3
61715: NEG
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 4
61727: NEG
61728: PUSH
61729: LD_INT 3
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 4
61739: NEG
61740: PUSH
61741: LD_INT 4
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: LD_INT 4
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 4
61763: NEG
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_INT 4
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: LD_INT 5
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: LD_INT 4
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: LD_INT 3
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 3
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 4
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 5
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: LD_INT 3
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: NEG
61866: PUSH
61867: LD_INT 5
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61922: LD_ADDR_VAR 0 31
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 4
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 3
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: LD_INT 4
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: LD_INT 5
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: LD_INT 5
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: LD_INT 4
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: LD_INT 3
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 5
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 3
62022: NEG
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 3
62033: NEG
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 2
62056: NEG
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 3
62067: NEG
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 4
62078: NEG
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 4
62089: NEG
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 4
62101: NEG
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 4
62124: NEG
62125: PUSH
62126: LD_INT 4
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 4
62136: NEG
62137: PUSH
62138: LD_INT 5
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 3
62148: NEG
62149: PUSH
62150: LD_INT 4
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 4
62172: NEG
62173: PUSH
62174: LD_INT 3
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 5
62184: NEG
62185: PUSH
62186: LD_INT 4
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 5
62196: NEG
62197: PUSH
62198: LD_INT 5
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 3
62208: NEG
62209: PUSH
62210: LD_INT 5
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 5
62220: NEG
62221: PUSH
62222: LD_INT 3
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: LD_INT 3
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 4
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 3
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 2
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: LD_INT 3
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: LD_INT 4
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: LD_INT 2
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 2
62322: NEG
62323: PUSH
62324: LD_INT 4
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 4
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 4
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 5
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 5
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 4
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 3
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 3
62406: PUSH
62407: LD_INT 2
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 5
62417: PUSH
62418: LD_INT 2
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62472: LD_ADDR_VAR 0 32
62476: PUSH
62477: LD_INT 4
62479: NEG
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 4
62490: NEG
62491: PUSH
62492: LD_INT 1
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 3
62513: NEG
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 4
62524: NEG
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 5
62535: NEG
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 5
62546: NEG
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 5
62558: NEG
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 3
62570: NEG
62571: PUSH
62572: LD_INT 2
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 3
62581: NEG
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 3
62593: NEG
62594: PUSH
62595: LD_INT 4
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: LD_INT 3
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: NEG
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 3
62629: NEG
62630: PUSH
62631: LD_INT 2
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 4
62641: NEG
62642: PUSH
62643: LD_INT 3
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 4
62653: NEG
62654: PUSH
62655: LD_INT 4
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: LD_INT 4
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 4
62677: NEG
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 4
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 5
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: LD_INT 4
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: LD_INT 3
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: LD_INT 3
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: LD_INT 4
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: LD_INT 5
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: LD_INT 5
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 3
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 4
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 4
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: LD_INT 2
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 4
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 4
62884: PUSH
62885: LD_INT 4
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 4
62894: PUSH
62895: LD_INT 3
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 5
62904: PUSH
62905: LD_INT 4
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 5
62914: PUSH
62915: LD_INT 5
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 4
62924: PUSH
62925: LD_INT 5
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 3
62934: PUSH
62935: LD_INT 4
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 3
62944: PUSH
62945: LD_INT 3
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 5
62954: PUSH
62955: LD_INT 3
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 3
62964: PUSH
62965: LD_INT 5
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63019: LD_ADDR_VAR 0 33
63023: PUSH
63024: LD_INT 4
63026: NEG
63027: PUSH
63028: LD_INT 4
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 4
63038: NEG
63039: PUSH
63040: LD_INT 5
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 3
63050: NEG
63051: PUSH
63052: LD_INT 4
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 3
63062: NEG
63063: PUSH
63064: LD_INT 3
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 4
63074: NEG
63075: PUSH
63076: LD_INT 3
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 5
63086: NEG
63087: PUSH
63088: LD_INT 4
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 5
63098: NEG
63099: PUSH
63100: LD_INT 5
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 3
63110: NEG
63111: PUSH
63112: LD_INT 5
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 5
63122: NEG
63123: PUSH
63124: LD_INT 3
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: LD_INT 3
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: LD_INT 4
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: LD_INT 3
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 2
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: LD_INT 2
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: LD_INT 3
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: LD_INT 4
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 2
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: LD_INT 4
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 4
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 4
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 5
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 5
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 4
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 3
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 3
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: LD_INT 2
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 5
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: LD_INT 3
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 3
63339: PUSH
63340: LD_INT 2
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 4
63349: PUSH
63350: LD_INT 3
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 4
63359: PUSH
63360: LD_INT 4
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 3
63369: PUSH
63370: LD_INT 4
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 3
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 4
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: LD_INT 4
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: LD_INT 4
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 3
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: LD_INT 4
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: LD_INT 5
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: LD_INT 5
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: NEG
63470: PUSH
63471: LD_INT 4
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: LD_INT 3
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 2
63491: PUSH
63492: LD_INT 5
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: LD_INT 3
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63557: LD_ADDR_VAR 0 34
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 4
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 5
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: LD_INT 4
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: LD_INT 3
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 3
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: LD_INT 4
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 5
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: LD_INT 3
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: LD_INT 5
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 4
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 4
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 3
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 2
63738: PUSH
63739: LD_INT 2
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 4
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 4
63759: PUSH
63760: LD_INT 4
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 4
63769: PUSH
63770: LD_INT 3
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 5
63779: PUSH
63780: LD_INT 4
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 5
63789: PUSH
63790: LD_INT 5
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 4
63799: PUSH
63800: LD_INT 5
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 3
63809: PUSH
63810: LD_INT 4
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: LD_INT 3
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 5
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 3
63839: PUSH
63840: LD_INT 5
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: LD_INT 3
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: LD_INT 4
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 4
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: LD_INT 3
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 2
63921: PUSH
63922: LD_INT 4
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 2
63931: NEG
63932: PUSH
63933: LD_INT 2
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 4
63942: NEG
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 4
63953: NEG
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 3
63976: NEG
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 4
63987: NEG
63988: PUSH
63989: LD_INT 1
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 5
63998: NEG
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 5
64009: NEG
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 5
64021: NEG
64022: PUSH
64023: LD_INT 2
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 3
64033: NEG
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: ST_TO_ADDR
// end ; end ;
64089: GO 64092
64091: POP
// case btype of b_depot , b_warehouse :
64092: LD_VAR 0 1
64096: PUSH
64097: LD_INT 0
64099: DOUBLE
64100: EQUAL
64101: IFTRUE 64111
64103: LD_INT 1
64105: DOUBLE
64106: EQUAL
64107: IFTRUE 64111
64109: GO 64312
64111: POP
// case nation of nation_american :
64112: LD_VAR 0 5
64116: PUSH
64117: LD_INT 1
64119: DOUBLE
64120: EQUAL
64121: IFTRUE 64125
64123: GO 64181
64125: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
64126: LD_ADDR_VAR 0 9
64130: PUSH
64131: LD_VAR 0 11
64135: PUSH
64136: LD_VAR 0 12
64140: PUSH
64141: LD_VAR 0 13
64145: PUSH
64146: LD_VAR 0 14
64150: PUSH
64151: LD_VAR 0 15
64155: PUSH
64156: LD_VAR 0 16
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: PUSH
64169: LD_VAR 0 4
64173: PUSH
64174: LD_INT 1
64176: PLUS
64177: ARRAY
64178: ST_TO_ADDR
64179: GO 64310
64181: LD_INT 2
64183: DOUBLE
64184: EQUAL
64185: IFTRUE 64189
64187: GO 64245
64189: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
64190: LD_ADDR_VAR 0 9
64194: PUSH
64195: LD_VAR 0 17
64199: PUSH
64200: LD_VAR 0 18
64204: PUSH
64205: LD_VAR 0 19
64209: PUSH
64210: LD_VAR 0 20
64214: PUSH
64215: LD_VAR 0 21
64219: PUSH
64220: LD_VAR 0 22
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: PUSH
64233: LD_VAR 0 4
64237: PUSH
64238: LD_INT 1
64240: PLUS
64241: ARRAY
64242: ST_TO_ADDR
64243: GO 64310
64245: LD_INT 3
64247: DOUBLE
64248: EQUAL
64249: IFTRUE 64253
64251: GO 64309
64253: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64254: LD_ADDR_VAR 0 9
64258: PUSH
64259: LD_VAR 0 23
64263: PUSH
64264: LD_VAR 0 24
64268: PUSH
64269: LD_VAR 0 25
64273: PUSH
64274: LD_VAR 0 26
64278: PUSH
64279: LD_VAR 0 27
64283: PUSH
64284: LD_VAR 0 28
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: PUSH
64297: LD_VAR 0 4
64301: PUSH
64302: LD_INT 1
64304: PLUS
64305: ARRAY
64306: ST_TO_ADDR
64307: GO 64310
64309: POP
64310: GO 64865
64312: LD_INT 2
64314: DOUBLE
64315: EQUAL
64316: IFTRUE 64326
64318: LD_INT 3
64320: DOUBLE
64321: EQUAL
64322: IFTRUE 64326
64324: GO 64382
64326: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64327: LD_ADDR_VAR 0 9
64331: PUSH
64332: LD_VAR 0 29
64336: PUSH
64337: LD_VAR 0 30
64341: PUSH
64342: LD_VAR 0 31
64346: PUSH
64347: LD_VAR 0 32
64351: PUSH
64352: LD_VAR 0 33
64356: PUSH
64357: LD_VAR 0 34
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: PUSH
64370: LD_VAR 0 4
64374: PUSH
64375: LD_INT 1
64377: PLUS
64378: ARRAY
64379: ST_TO_ADDR
64380: GO 64865
64382: LD_INT 16
64384: DOUBLE
64385: EQUAL
64386: IFTRUE 64444
64388: LD_INT 17
64390: DOUBLE
64391: EQUAL
64392: IFTRUE 64444
64394: LD_INT 18
64396: DOUBLE
64397: EQUAL
64398: IFTRUE 64444
64400: LD_INT 19
64402: DOUBLE
64403: EQUAL
64404: IFTRUE 64444
64406: LD_INT 22
64408: DOUBLE
64409: EQUAL
64410: IFTRUE 64444
64412: LD_INT 20
64414: DOUBLE
64415: EQUAL
64416: IFTRUE 64444
64418: LD_INT 21
64420: DOUBLE
64421: EQUAL
64422: IFTRUE 64444
64424: LD_INT 23
64426: DOUBLE
64427: EQUAL
64428: IFTRUE 64444
64430: LD_INT 24
64432: DOUBLE
64433: EQUAL
64434: IFTRUE 64444
64436: LD_INT 25
64438: DOUBLE
64439: EQUAL
64440: IFTRUE 64444
64442: GO 64500
64444: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64445: LD_ADDR_VAR 0 9
64449: PUSH
64450: LD_VAR 0 35
64454: PUSH
64455: LD_VAR 0 36
64459: PUSH
64460: LD_VAR 0 37
64464: PUSH
64465: LD_VAR 0 38
64469: PUSH
64470: LD_VAR 0 39
64474: PUSH
64475: LD_VAR 0 40
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: PUSH
64488: LD_VAR 0 4
64492: PUSH
64493: LD_INT 1
64495: PLUS
64496: ARRAY
64497: ST_TO_ADDR
64498: GO 64865
64500: LD_INT 6
64502: DOUBLE
64503: EQUAL
64504: IFTRUE 64556
64506: LD_INT 7
64508: DOUBLE
64509: EQUAL
64510: IFTRUE 64556
64512: LD_INT 8
64514: DOUBLE
64515: EQUAL
64516: IFTRUE 64556
64518: LD_INT 13
64520: DOUBLE
64521: EQUAL
64522: IFTRUE 64556
64524: LD_INT 12
64526: DOUBLE
64527: EQUAL
64528: IFTRUE 64556
64530: LD_INT 15
64532: DOUBLE
64533: EQUAL
64534: IFTRUE 64556
64536: LD_INT 11
64538: DOUBLE
64539: EQUAL
64540: IFTRUE 64556
64542: LD_INT 14
64544: DOUBLE
64545: EQUAL
64546: IFTRUE 64556
64548: LD_INT 10
64550: DOUBLE
64551: EQUAL
64552: IFTRUE 64556
64554: GO 64612
64556: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
64557: LD_ADDR_VAR 0 9
64561: PUSH
64562: LD_VAR 0 41
64566: PUSH
64567: LD_VAR 0 42
64571: PUSH
64572: LD_VAR 0 43
64576: PUSH
64577: LD_VAR 0 44
64581: PUSH
64582: LD_VAR 0 45
64586: PUSH
64587: LD_VAR 0 46
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: PUSH
64600: LD_VAR 0 4
64604: PUSH
64605: LD_INT 1
64607: PLUS
64608: ARRAY
64609: ST_TO_ADDR
64610: GO 64865
64612: LD_INT 36
64614: DOUBLE
64615: EQUAL
64616: IFTRUE 64620
64618: GO 64676
64620: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64621: LD_ADDR_VAR 0 9
64625: PUSH
64626: LD_VAR 0 47
64630: PUSH
64631: LD_VAR 0 48
64635: PUSH
64636: LD_VAR 0 49
64640: PUSH
64641: LD_VAR 0 50
64645: PUSH
64646: LD_VAR 0 51
64650: PUSH
64651: LD_VAR 0 52
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: PUSH
64664: LD_VAR 0 4
64668: PUSH
64669: LD_INT 1
64671: PLUS
64672: ARRAY
64673: ST_TO_ADDR
64674: GO 64865
64676: LD_INT 4
64678: DOUBLE
64679: EQUAL
64680: IFTRUE 64702
64682: LD_INT 5
64684: DOUBLE
64685: EQUAL
64686: IFTRUE 64702
64688: LD_INT 34
64690: DOUBLE
64691: EQUAL
64692: IFTRUE 64702
64694: LD_INT 37
64696: DOUBLE
64697: EQUAL
64698: IFTRUE 64702
64700: GO 64758
64702: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64703: LD_ADDR_VAR 0 9
64707: PUSH
64708: LD_VAR 0 53
64712: PUSH
64713: LD_VAR 0 54
64717: PUSH
64718: LD_VAR 0 55
64722: PUSH
64723: LD_VAR 0 56
64727: PUSH
64728: LD_VAR 0 57
64732: PUSH
64733: LD_VAR 0 58
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: PUSH
64746: LD_VAR 0 4
64750: PUSH
64751: LD_INT 1
64753: PLUS
64754: ARRAY
64755: ST_TO_ADDR
64756: GO 64865
64758: LD_INT 31
64760: DOUBLE
64761: EQUAL
64762: IFTRUE 64808
64764: LD_INT 32
64766: DOUBLE
64767: EQUAL
64768: IFTRUE 64808
64770: LD_INT 33
64772: DOUBLE
64773: EQUAL
64774: IFTRUE 64808
64776: LD_INT 27
64778: DOUBLE
64779: EQUAL
64780: IFTRUE 64808
64782: LD_INT 26
64784: DOUBLE
64785: EQUAL
64786: IFTRUE 64808
64788: LD_INT 28
64790: DOUBLE
64791: EQUAL
64792: IFTRUE 64808
64794: LD_INT 29
64796: DOUBLE
64797: EQUAL
64798: IFTRUE 64808
64800: LD_INT 30
64802: DOUBLE
64803: EQUAL
64804: IFTRUE 64808
64806: GO 64864
64808: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
64809: LD_ADDR_VAR 0 9
64813: PUSH
64814: LD_VAR 0 59
64818: PUSH
64819: LD_VAR 0 60
64823: PUSH
64824: LD_VAR 0 61
64828: PUSH
64829: LD_VAR 0 62
64833: PUSH
64834: LD_VAR 0 63
64838: PUSH
64839: LD_VAR 0 64
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: PUSH
64852: LD_VAR 0 4
64856: PUSH
64857: LD_INT 1
64859: PLUS
64860: ARRAY
64861: ST_TO_ADDR
64862: GO 64865
64864: POP
// temp_list2 = [ ] ;
64865: LD_ADDR_VAR 0 10
64869: PUSH
64870: EMPTY
64871: ST_TO_ADDR
// for i in temp_list do
64872: LD_ADDR_VAR 0 8
64876: PUSH
64877: LD_VAR 0 9
64881: PUSH
64882: FOR_IN
64883: IFFALSE 64935
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64885: LD_ADDR_VAR 0 10
64889: PUSH
64890: LD_VAR 0 10
64894: PUSH
64895: LD_VAR 0 8
64899: PUSH
64900: LD_INT 1
64902: ARRAY
64903: PUSH
64904: LD_VAR 0 2
64908: PLUS
64909: PUSH
64910: LD_VAR 0 8
64914: PUSH
64915: LD_INT 2
64917: ARRAY
64918: PUSH
64919: LD_VAR 0 3
64923: PLUS
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: EMPTY
64930: LIST
64931: ADD
64932: ST_TO_ADDR
64933: GO 64882
64935: POP
64936: POP
// result = temp_list2 ;
64937: LD_ADDR_VAR 0 7
64941: PUSH
64942: LD_VAR 0 10
64946: ST_TO_ADDR
// end ;
64947: LD_VAR 0 7
64951: RET
// export function EnemyInRange ( unit , dist ) ; begin
64952: LD_INT 0
64954: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64955: LD_ADDR_VAR 0 3
64959: PUSH
64960: LD_VAR 0 1
64964: PPUSH
64965: CALL_OW 255
64969: PPUSH
64970: LD_VAR 0 1
64974: PPUSH
64975: CALL_OW 250
64979: PPUSH
64980: LD_VAR 0 1
64984: PPUSH
64985: CALL_OW 251
64989: PPUSH
64990: LD_VAR 0 2
64994: PPUSH
64995: CALL 39056 0 4
64999: PUSH
65000: LD_INT 4
65002: ARRAY
65003: ST_TO_ADDR
// end ;
65004: LD_VAR 0 3
65008: RET
// export function PlayerSeeMe ( unit ) ; begin
65009: LD_INT 0
65011: PPUSH
// result := See ( your_side , unit ) ;
65012: LD_ADDR_VAR 0 2
65016: PUSH
65017: LD_OWVAR 2
65021: PPUSH
65022: LD_VAR 0 1
65026: PPUSH
65027: CALL_OW 292
65031: ST_TO_ADDR
// end ;
65032: LD_VAR 0 2
65036: RET
// export function ReverseDir ( unit ) ; begin
65037: LD_INT 0
65039: PPUSH
// if not unit then
65040: LD_VAR 0 1
65044: NOT
65045: IFFALSE 65049
// exit ;
65047: GO 65072
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65049: LD_ADDR_VAR 0 2
65053: PUSH
65054: LD_VAR 0 1
65058: PPUSH
65059: CALL_OW 254
65063: PUSH
65064: LD_INT 3
65066: PLUS
65067: PUSH
65068: LD_INT 6
65070: MOD
65071: ST_TO_ADDR
// end ;
65072: LD_VAR 0 2
65076: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65077: LD_INT 0
65079: PPUSH
65080: PPUSH
65081: PPUSH
65082: PPUSH
65083: PPUSH
// if not hexes then
65084: LD_VAR 0 2
65088: NOT
65089: IFFALSE 65093
// exit ;
65091: GO 65241
// dist := 9999 ;
65093: LD_ADDR_VAR 0 5
65097: PUSH
65098: LD_INT 9999
65100: ST_TO_ADDR
// for i = 1 to hexes do
65101: LD_ADDR_VAR 0 4
65105: PUSH
65106: DOUBLE
65107: LD_INT 1
65109: DEC
65110: ST_TO_ADDR
65111: LD_VAR 0 2
65115: PUSH
65116: FOR_TO
65117: IFFALSE 65229
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65119: LD_VAR 0 1
65123: PPUSH
65124: LD_VAR 0 2
65128: PUSH
65129: LD_VAR 0 4
65133: ARRAY
65134: PUSH
65135: LD_INT 1
65137: ARRAY
65138: PPUSH
65139: LD_VAR 0 2
65143: PUSH
65144: LD_VAR 0 4
65148: ARRAY
65149: PUSH
65150: LD_INT 2
65152: ARRAY
65153: PPUSH
65154: CALL_OW 297
65158: PUSH
65159: LD_VAR 0 5
65163: LESS
65164: IFFALSE 65227
// begin hex := hexes [ i ] ;
65166: LD_ADDR_VAR 0 7
65170: PUSH
65171: LD_VAR 0 2
65175: PUSH
65176: LD_VAR 0 4
65180: ARRAY
65181: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65182: LD_ADDR_VAR 0 5
65186: PUSH
65187: LD_VAR 0 1
65191: PPUSH
65192: LD_VAR 0 2
65196: PUSH
65197: LD_VAR 0 4
65201: ARRAY
65202: PUSH
65203: LD_INT 1
65205: ARRAY
65206: PPUSH
65207: LD_VAR 0 2
65211: PUSH
65212: LD_VAR 0 4
65216: ARRAY
65217: PUSH
65218: LD_INT 2
65220: ARRAY
65221: PPUSH
65222: CALL_OW 297
65226: ST_TO_ADDR
// end ; end ;
65227: GO 65116
65229: POP
65230: POP
// result := hex ;
65231: LD_ADDR_VAR 0 3
65235: PUSH
65236: LD_VAR 0 7
65240: ST_TO_ADDR
// end ;
65241: LD_VAR 0 3
65245: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65246: LD_INT 0
65248: PPUSH
65249: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65250: LD_VAR 0 1
65254: NOT
65255: PUSH
65256: LD_VAR 0 1
65260: PUSH
65261: LD_INT 21
65263: PUSH
65264: LD_INT 2
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 23
65273: PUSH
65274: LD_INT 2
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PPUSH
65285: CALL_OW 69
65289: IN
65290: NOT
65291: OR
65292: IFFALSE 65296
// exit ;
65294: GO 65343
// for i = 1 to 3 do
65296: LD_ADDR_VAR 0 3
65300: PUSH
65301: DOUBLE
65302: LD_INT 1
65304: DEC
65305: ST_TO_ADDR
65306: LD_INT 3
65308: PUSH
65309: FOR_TO
65310: IFFALSE 65341
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65312: LD_VAR 0 1
65316: PPUSH
65317: CALL_OW 250
65321: PPUSH
65322: LD_VAR 0 1
65326: PPUSH
65327: CALL_OW 251
65331: PPUSH
65332: LD_INT 1
65334: PPUSH
65335: CALL_OW 453
65339: GO 65309
65341: POP
65342: POP
// end ;
65343: LD_VAR 0 2
65347: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65348: LD_INT 0
65350: PPUSH
65351: PPUSH
65352: PPUSH
65353: PPUSH
65354: PPUSH
65355: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65356: LD_VAR 0 1
65360: NOT
65361: PUSH
65362: LD_VAR 0 2
65366: NOT
65367: OR
65368: PUSH
65369: LD_VAR 0 1
65373: PPUSH
65374: CALL_OW 314
65378: OR
65379: IFFALSE 65383
// exit ;
65381: GO 65824
// x := GetX ( enemy_unit ) ;
65383: LD_ADDR_VAR 0 7
65387: PUSH
65388: LD_VAR 0 2
65392: PPUSH
65393: CALL_OW 250
65397: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65398: LD_ADDR_VAR 0 8
65402: PUSH
65403: LD_VAR 0 2
65407: PPUSH
65408: CALL_OW 251
65412: ST_TO_ADDR
// if not x or not y then
65413: LD_VAR 0 7
65417: NOT
65418: PUSH
65419: LD_VAR 0 8
65423: NOT
65424: OR
65425: IFFALSE 65429
// exit ;
65427: GO 65824
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65429: LD_ADDR_VAR 0 6
65433: PUSH
65434: LD_VAR 0 7
65438: PPUSH
65439: LD_INT 0
65441: PPUSH
65442: LD_INT 4
65444: PPUSH
65445: CALL_OW 272
65449: PUSH
65450: LD_VAR 0 8
65454: PPUSH
65455: LD_INT 0
65457: PPUSH
65458: LD_INT 4
65460: PPUSH
65461: CALL_OW 273
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_VAR 0 7
65474: PPUSH
65475: LD_INT 1
65477: PPUSH
65478: LD_INT 4
65480: PPUSH
65481: CALL_OW 272
65485: PUSH
65486: LD_VAR 0 8
65490: PPUSH
65491: LD_INT 1
65493: PPUSH
65494: LD_INT 4
65496: PPUSH
65497: CALL_OW 273
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_VAR 0 7
65510: PPUSH
65511: LD_INT 2
65513: PPUSH
65514: LD_INT 4
65516: PPUSH
65517: CALL_OW 272
65521: PUSH
65522: LD_VAR 0 8
65526: PPUSH
65527: LD_INT 2
65529: PPUSH
65530: LD_INT 4
65532: PPUSH
65533: CALL_OW 273
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_VAR 0 7
65546: PPUSH
65547: LD_INT 3
65549: PPUSH
65550: LD_INT 4
65552: PPUSH
65553: CALL_OW 272
65557: PUSH
65558: LD_VAR 0 8
65562: PPUSH
65563: LD_INT 3
65565: PPUSH
65566: LD_INT 4
65568: PPUSH
65569: CALL_OW 273
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_VAR 0 7
65582: PPUSH
65583: LD_INT 4
65585: PPUSH
65586: LD_INT 4
65588: PPUSH
65589: CALL_OW 272
65593: PUSH
65594: LD_VAR 0 8
65598: PPUSH
65599: LD_INT 4
65601: PPUSH
65602: LD_INT 4
65604: PPUSH
65605: CALL_OW 273
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_VAR 0 7
65618: PPUSH
65619: LD_INT 5
65621: PPUSH
65622: LD_INT 4
65624: PPUSH
65625: CALL_OW 272
65629: PUSH
65630: LD_VAR 0 8
65634: PPUSH
65635: LD_INT 5
65637: PPUSH
65638: LD_INT 4
65640: PPUSH
65641: CALL_OW 273
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: ST_TO_ADDR
// for i = tmp downto 1 do
65658: LD_ADDR_VAR 0 4
65662: PUSH
65663: DOUBLE
65664: LD_VAR 0 6
65668: INC
65669: ST_TO_ADDR
65670: LD_INT 1
65672: PUSH
65673: FOR_DOWNTO
65674: IFFALSE 65775
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65676: LD_VAR 0 6
65680: PUSH
65681: LD_VAR 0 4
65685: ARRAY
65686: PUSH
65687: LD_INT 1
65689: ARRAY
65690: PPUSH
65691: LD_VAR 0 6
65695: PUSH
65696: LD_VAR 0 4
65700: ARRAY
65701: PUSH
65702: LD_INT 2
65704: ARRAY
65705: PPUSH
65706: CALL_OW 488
65710: NOT
65711: PUSH
65712: LD_VAR 0 6
65716: PUSH
65717: LD_VAR 0 4
65721: ARRAY
65722: PUSH
65723: LD_INT 1
65725: ARRAY
65726: PPUSH
65727: LD_VAR 0 6
65731: PUSH
65732: LD_VAR 0 4
65736: ARRAY
65737: PUSH
65738: LD_INT 2
65740: ARRAY
65741: PPUSH
65742: CALL_OW 428
65746: PUSH
65747: LD_INT 0
65749: NONEQUAL
65750: OR
65751: IFFALSE 65773
// tmp := Delete ( tmp , i ) ;
65753: LD_ADDR_VAR 0 6
65757: PUSH
65758: LD_VAR 0 6
65762: PPUSH
65763: LD_VAR 0 4
65767: PPUSH
65768: CALL_OW 3
65772: ST_TO_ADDR
65773: GO 65673
65775: POP
65776: POP
// j := GetClosestHex ( unit , tmp ) ;
65777: LD_ADDR_VAR 0 5
65781: PUSH
65782: LD_VAR 0 1
65786: PPUSH
65787: LD_VAR 0 6
65791: PPUSH
65792: CALL 65077 0 2
65796: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65797: LD_VAR 0 1
65801: PPUSH
65802: LD_VAR 0 5
65806: PUSH
65807: LD_INT 1
65809: ARRAY
65810: PPUSH
65811: LD_VAR 0 5
65815: PUSH
65816: LD_INT 2
65818: ARRAY
65819: PPUSH
65820: CALL_OW 111
// end ;
65824: LD_VAR 0 3
65828: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65829: LD_INT 0
65831: PPUSH
65832: PPUSH
65833: PPUSH
// uc_side = 0 ;
65834: LD_ADDR_OWVAR 20
65838: PUSH
65839: LD_INT 0
65841: ST_TO_ADDR
// uc_nation = 0 ;
65842: LD_ADDR_OWVAR 21
65846: PUSH
65847: LD_INT 0
65849: ST_TO_ADDR
// InitHc ;
65850: CALL_OW 19
// InitVc ;
65854: CALL_OW 20
// if mastodonts then
65858: LD_VAR 0 6
65862: IFFALSE 65929
// for i = 1 to mastodonts do
65864: LD_ADDR_VAR 0 11
65868: PUSH
65869: DOUBLE
65870: LD_INT 1
65872: DEC
65873: ST_TO_ADDR
65874: LD_VAR 0 6
65878: PUSH
65879: FOR_TO
65880: IFFALSE 65927
// begin vc_chassis := 31 ;
65882: LD_ADDR_OWVAR 37
65886: PUSH
65887: LD_INT 31
65889: ST_TO_ADDR
// vc_control := control_rider ;
65890: LD_ADDR_OWVAR 38
65894: PUSH
65895: LD_INT 4
65897: ST_TO_ADDR
// animal := CreateVehicle ;
65898: LD_ADDR_VAR 0 12
65902: PUSH
65903: CALL_OW 45
65907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65908: LD_VAR 0 12
65912: PPUSH
65913: LD_VAR 0 8
65917: PPUSH
65918: LD_INT 0
65920: PPUSH
65921: CALL 67998 0 3
// end ;
65925: GO 65879
65927: POP
65928: POP
// if horses then
65929: LD_VAR 0 5
65933: IFFALSE 66000
// for i = 1 to horses do
65935: LD_ADDR_VAR 0 11
65939: PUSH
65940: DOUBLE
65941: LD_INT 1
65943: DEC
65944: ST_TO_ADDR
65945: LD_VAR 0 5
65949: PUSH
65950: FOR_TO
65951: IFFALSE 65998
// begin hc_class := 21 ;
65953: LD_ADDR_OWVAR 28
65957: PUSH
65958: LD_INT 21
65960: ST_TO_ADDR
// hc_gallery :=  ;
65961: LD_ADDR_OWVAR 33
65965: PUSH
65966: LD_STRING 
65968: ST_TO_ADDR
// animal := CreateHuman ;
65969: LD_ADDR_VAR 0 12
65973: PUSH
65974: CALL_OW 44
65978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65979: LD_VAR 0 12
65983: PPUSH
65984: LD_VAR 0 8
65988: PPUSH
65989: LD_INT 0
65991: PPUSH
65992: CALL 67998 0 3
// end ;
65996: GO 65950
65998: POP
65999: POP
// if birds then
66000: LD_VAR 0 1
66004: IFFALSE 66071
// for i = 1 to birds do
66006: LD_ADDR_VAR 0 11
66010: PUSH
66011: DOUBLE
66012: LD_INT 1
66014: DEC
66015: ST_TO_ADDR
66016: LD_VAR 0 1
66020: PUSH
66021: FOR_TO
66022: IFFALSE 66069
// begin hc_class = 18 ;
66024: LD_ADDR_OWVAR 28
66028: PUSH
66029: LD_INT 18
66031: ST_TO_ADDR
// hc_gallery =  ;
66032: LD_ADDR_OWVAR 33
66036: PUSH
66037: LD_STRING 
66039: ST_TO_ADDR
// animal := CreateHuman ;
66040: LD_ADDR_VAR 0 12
66044: PUSH
66045: CALL_OW 44
66049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66050: LD_VAR 0 12
66054: PPUSH
66055: LD_VAR 0 8
66059: PPUSH
66060: LD_INT 0
66062: PPUSH
66063: CALL 67998 0 3
// end ;
66067: GO 66021
66069: POP
66070: POP
// if tigers then
66071: LD_VAR 0 2
66075: IFFALSE 66159
// for i = 1 to tigers do
66077: LD_ADDR_VAR 0 11
66081: PUSH
66082: DOUBLE
66083: LD_INT 1
66085: DEC
66086: ST_TO_ADDR
66087: LD_VAR 0 2
66091: PUSH
66092: FOR_TO
66093: IFFALSE 66157
// begin hc_class = class_tiger ;
66095: LD_ADDR_OWVAR 28
66099: PUSH
66100: LD_INT 14
66102: ST_TO_ADDR
// hc_gallery =  ;
66103: LD_ADDR_OWVAR 33
66107: PUSH
66108: LD_STRING 
66110: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66111: LD_ADDR_OWVAR 35
66115: PUSH
66116: LD_INT 7
66118: NEG
66119: PPUSH
66120: LD_INT 7
66122: PPUSH
66123: CALL_OW 12
66127: ST_TO_ADDR
// animal := CreateHuman ;
66128: LD_ADDR_VAR 0 12
66132: PUSH
66133: CALL_OW 44
66137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66138: LD_VAR 0 12
66142: PPUSH
66143: LD_VAR 0 8
66147: PPUSH
66148: LD_INT 0
66150: PPUSH
66151: CALL 67998 0 3
// end ;
66155: GO 66092
66157: POP
66158: POP
// if apemans then
66159: LD_VAR 0 3
66163: IFFALSE 66286
// for i = 1 to apemans do
66165: LD_ADDR_VAR 0 11
66169: PUSH
66170: DOUBLE
66171: LD_INT 1
66173: DEC
66174: ST_TO_ADDR
66175: LD_VAR 0 3
66179: PUSH
66180: FOR_TO
66181: IFFALSE 66284
// begin hc_class = class_apeman ;
66183: LD_ADDR_OWVAR 28
66187: PUSH
66188: LD_INT 12
66190: ST_TO_ADDR
// hc_gallery =  ;
66191: LD_ADDR_OWVAR 33
66195: PUSH
66196: LD_STRING 
66198: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
66199: LD_ADDR_OWVAR 35
66203: PUSH
66204: LD_INT 5
66206: NEG
66207: PPUSH
66208: LD_INT 5
66210: PPUSH
66211: CALL_OW 12
66215: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66216: LD_ADDR_OWVAR 31
66220: PUSH
66221: LD_INT 1
66223: PPUSH
66224: LD_INT 3
66226: PPUSH
66227: CALL_OW 12
66231: PUSH
66232: LD_INT 1
66234: PPUSH
66235: LD_INT 3
66237: PPUSH
66238: CALL_OW 12
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: ST_TO_ADDR
// animal := CreateHuman ;
66255: LD_ADDR_VAR 0 12
66259: PUSH
66260: CALL_OW 44
66264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66265: LD_VAR 0 12
66269: PPUSH
66270: LD_VAR 0 8
66274: PPUSH
66275: LD_INT 0
66277: PPUSH
66278: CALL 67998 0 3
// end ;
66282: GO 66180
66284: POP
66285: POP
// if enchidnas then
66286: LD_VAR 0 4
66290: IFFALSE 66357
// for i = 1 to enchidnas do
66292: LD_ADDR_VAR 0 11
66296: PUSH
66297: DOUBLE
66298: LD_INT 1
66300: DEC
66301: ST_TO_ADDR
66302: LD_VAR 0 4
66306: PUSH
66307: FOR_TO
66308: IFFALSE 66355
// begin hc_class = 13 ;
66310: LD_ADDR_OWVAR 28
66314: PUSH
66315: LD_INT 13
66317: ST_TO_ADDR
// hc_gallery =  ;
66318: LD_ADDR_OWVAR 33
66322: PUSH
66323: LD_STRING 
66325: ST_TO_ADDR
// animal := CreateHuman ;
66326: LD_ADDR_VAR 0 12
66330: PUSH
66331: CALL_OW 44
66335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66336: LD_VAR 0 12
66340: PPUSH
66341: LD_VAR 0 8
66345: PPUSH
66346: LD_INT 0
66348: PPUSH
66349: CALL 67998 0 3
// end ;
66353: GO 66307
66355: POP
66356: POP
// if fishes then
66357: LD_VAR 0 7
66361: IFFALSE 66428
// for i = 1 to fishes do
66363: LD_ADDR_VAR 0 11
66367: PUSH
66368: DOUBLE
66369: LD_INT 1
66371: DEC
66372: ST_TO_ADDR
66373: LD_VAR 0 7
66377: PUSH
66378: FOR_TO
66379: IFFALSE 66426
// begin hc_class = 20 ;
66381: LD_ADDR_OWVAR 28
66385: PUSH
66386: LD_INT 20
66388: ST_TO_ADDR
// hc_gallery =  ;
66389: LD_ADDR_OWVAR 33
66393: PUSH
66394: LD_STRING 
66396: ST_TO_ADDR
// animal := CreateHuman ;
66397: LD_ADDR_VAR 0 12
66401: PUSH
66402: CALL_OW 44
66406: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66407: LD_VAR 0 12
66411: PPUSH
66412: LD_VAR 0 9
66416: PPUSH
66417: LD_INT 0
66419: PPUSH
66420: CALL 67998 0 3
// end ;
66424: GO 66378
66426: POP
66427: POP
// end ;
66428: LD_VAR 0 10
66432: RET
// export function WantHeal ( sci , unit ) ; begin
66433: LD_INT 0
66435: PPUSH
// if GetTaskList ( sci ) > 0 then
66436: LD_VAR 0 1
66440: PPUSH
66441: CALL_OW 437
66445: PUSH
66446: LD_INT 0
66448: GREATER
66449: IFFALSE 66519
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66451: LD_VAR 0 1
66455: PPUSH
66456: CALL_OW 437
66460: PUSH
66461: LD_INT 1
66463: ARRAY
66464: PUSH
66465: LD_INT 1
66467: ARRAY
66468: PUSH
66469: LD_STRING l
66471: EQUAL
66472: PUSH
66473: LD_VAR 0 1
66477: PPUSH
66478: CALL_OW 437
66482: PUSH
66483: LD_INT 1
66485: ARRAY
66486: PUSH
66487: LD_INT 4
66489: ARRAY
66490: PUSH
66491: LD_VAR 0 2
66495: EQUAL
66496: AND
66497: IFFALSE 66509
// result := true else
66499: LD_ADDR_VAR 0 3
66503: PUSH
66504: LD_INT 1
66506: ST_TO_ADDR
66507: GO 66517
// result := false ;
66509: LD_ADDR_VAR 0 3
66513: PUSH
66514: LD_INT 0
66516: ST_TO_ADDR
// end else
66517: GO 66527
// result := false ;
66519: LD_ADDR_VAR 0 3
66523: PUSH
66524: LD_INT 0
66526: ST_TO_ADDR
// end ;
66527: LD_VAR 0 3
66531: RET
// export function HealTarget ( sci ) ; begin
66532: LD_INT 0
66534: PPUSH
// if not sci then
66535: LD_VAR 0 1
66539: NOT
66540: IFFALSE 66544
// exit ;
66542: GO 66609
// result := 0 ;
66544: LD_ADDR_VAR 0 2
66548: PUSH
66549: LD_INT 0
66551: ST_TO_ADDR
// if GetTaskList ( sci ) then
66552: LD_VAR 0 1
66556: PPUSH
66557: CALL_OW 437
66561: IFFALSE 66609
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66563: LD_VAR 0 1
66567: PPUSH
66568: CALL_OW 437
66572: PUSH
66573: LD_INT 1
66575: ARRAY
66576: PUSH
66577: LD_INT 1
66579: ARRAY
66580: PUSH
66581: LD_STRING l
66583: EQUAL
66584: IFFALSE 66609
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66586: LD_ADDR_VAR 0 2
66590: PUSH
66591: LD_VAR 0 1
66595: PPUSH
66596: CALL_OW 437
66600: PUSH
66601: LD_INT 1
66603: ARRAY
66604: PUSH
66605: LD_INT 4
66607: ARRAY
66608: ST_TO_ADDR
// end ;
66609: LD_VAR 0 2
66613: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66614: LD_INT 0
66616: PPUSH
66617: PPUSH
66618: PPUSH
66619: PPUSH
// if not base_units then
66620: LD_VAR 0 1
66624: NOT
66625: IFFALSE 66629
// exit ;
66627: GO 66716
// result := false ;
66629: LD_ADDR_VAR 0 2
66633: PUSH
66634: LD_INT 0
66636: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66637: LD_ADDR_VAR 0 5
66641: PUSH
66642: LD_VAR 0 1
66646: PPUSH
66647: LD_INT 21
66649: PUSH
66650: LD_INT 3
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PPUSH
66657: CALL_OW 72
66661: ST_TO_ADDR
// if not tmp then
66662: LD_VAR 0 5
66666: NOT
66667: IFFALSE 66671
// exit ;
66669: GO 66716
// for i in tmp do
66671: LD_ADDR_VAR 0 3
66675: PUSH
66676: LD_VAR 0 5
66680: PUSH
66681: FOR_IN
66682: IFFALSE 66714
// begin result := EnemyInRange ( i , 22 ) ;
66684: LD_ADDR_VAR 0 2
66688: PUSH
66689: LD_VAR 0 3
66693: PPUSH
66694: LD_INT 22
66696: PPUSH
66697: CALL 64952 0 2
66701: ST_TO_ADDR
// if result then
66702: LD_VAR 0 2
66706: IFFALSE 66712
// exit ;
66708: POP
66709: POP
66710: GO 66716
// end ;
66712: GO 66681
66714: POP
66715: POP
// end ;
66716: LD_VAR 0 2
66720: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66721: LD_INT 0
66723: PPUSH
66724: PPUSH
// if not units then
66725: LD_VAR 0 1
66729: NOT
66730: IFFALSE 66734
// exit ;
66732: GO 66804
// result := [ ] ;
66734: LD_ADDR_VAR 0 3
66738: PUSH
66739: EMPTY
66740: ST_TO_ADDR
// for i in units do
66741: LD_ADDR_VAR 0 4
66745: PUSH
66746: LD_VAR 0 1
66750: PUSH
66751: FOR_IN
66752: IFFALSE 66802
// if GetTag ( i ) = tag then
66754: LD_VAR 0 4
66758: PPUSH
66759: CALL_OW 110
66763: PUSH
66764: LD_VAR 0 2
66768: EQUAL
66769: IFFALSE 66800
// result := Insert ( result , result + 1 , i ) ;
66771: LD_ADDR_VAR 0 3
66775: PUSH
66776: LD_VAR 0 3
66780: PPUSH
66781: LD_VAR 0 3
66785: PUSH
66786: LD_INT 1
66788: PLUS
66789: PPUSH
66790: LD_VAR 0 4
66794: PPUSH
66795: CALL_OW 2
66799: ST_TO_ADDR
66800: GO 66751
66802: POP
66803: POP
// end ;
66804: LD_VAR 0 3
66808: RET
// export function IsDriver ( un ) ; begin
66809: LD_INT 0
66811: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66812: LD_ADDR_VAR 0 2
66816: PUSH
66817: LD_VAR 0 1
66821: PUSH
66822: LD_INT 55
66824: PUSH
66825: EMPTY
66826: LIST
66827: PPUSH
66828: CALL_OW 69
66832: IN
66833: ST_TO_ADDR
// end ;
66834: LD_VAR 0 2
66838: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66839: LD_INT 0
66841: PPUSH
66842: PPUSH
// list := [ ] ;
66843: LD_ADDR_VAR 0 5
66847: PUSH
66848: EMPTY
66849: ST_TO_ADDR
// case d of 0 :
66850: LD_VAR 0 3
66854: PUSH
66855: LD_INT 0
66857: DOUBLE
66858: EQUAL
66859: IFTRUE 66863
66861: GO 66996
66863: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66864: LD_ADDR_VAR 0 5
66868: PUSH
66869: LD_VAR 0 1
66873: PUSH
66874: LD_INT 4
66876: MINUS
66877: PUSH
66878: LD_VAR 0 2
66882: PUSH
66883: LD_INT 4
66885: MINUS
66886: PUSH
66887: LD_INT 2
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: LIST
66894: PUSH
66895: LD_VAR 0 1
66899: PUSH
66900: LD_INT 3
66902: MINUS
66903: PUSH
66904: LD_VAR 0 2
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: LIST
66916: PUSH
66917: LD_VAR 0 1
66921: PUSH
66922: LD_INT 4
66924: PLUS
66925: PUSH
66926: LD_VAR 0 2
66930: PUSH
66931: LD_INT 4
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: PUSH
66939: LD_VAR 0 1
66943: PUSH
66944: LD_INT 3
66946: PLUS
66947: PUSH
66948: LD_VAR 0 2
66952: PUSH
66953: LD_INT 3
66955: PLUS
66956: PUSH
66957: LD_INT 5
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: LIST
66964: PUSH
66965: LD_VAR 0 1
66969: PUSH
66970: LD_VAR 0 2
66974: PUSH
66975: LD_INT 4
66977: PLUS
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: LIST
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: ST_TO_ADDR
// end ; 1 :
66994: GO 67694
66996: LD_INT 1
66998: DOUBLE
66999: EQUAL
67000: IFTRUE 67004
67002: GO 67137
67004: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67005: LD_ADDR_VAR 0 5
67009: PUSH
67010: LD_VAR 0 1
67014: PUSH
67015: LD_VAR 0 2
67019: PUSH
67020: LD_INT 4
67022: MINUS
67023: PUSH
67024: LD_INT 3
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: LIST
67031: PUSH
67032: LD_VAR 0 1
67036: PUSH
67037: LD_INT 3
67039: MINUS
67040: PUSH
67041: LD_VAR 0 2
67045: PUSH
67046: LD_INT 3
67048: MINUS
67049: PUSH
67050: LD_INT 2
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: LIST
67057: PUSH
67058: LD_VAR 0 1
67062: PUSH
67063: LD_INT 4
67065: MINUS
67066: PUSH
67067: LD_VAR 0 2
67071: PUSH
67072: LD_INT 1
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: PUSH
67080: LD_VAR 0 1
67084: PUSH
67085: LD_VAR 0 2
67089: PUSH
67090: LD_INT 3
67092: PLUS
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: PUSH
67102: LD_VAR 0 1
67106: PUSH
67107: LD_INT 4
67109: PLUS
67110: PUSH
67111: LD_VAR 0 2
67115: PUSH
67116: LD_INT 4
67118: PLUS
67119: PUSH
67120: LD_INT 5
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: LIST
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: ST_TO_ADDR
// end ; 2 :
67135: GO 67694
67137: LD_INT 2
67139: DOUBLE
67140: EQUAL
67141: IFTRUE 67145
67143: GO 67274
67145: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67146: LD_ADDR_VAR 0 5
67150: PUSH
67151: LD_VAR 0 1
67155: PUSH
67156: LD_VAR 0 2
67160: PUSH
67161: LD_INT 3
67163: MINUS
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: PUSH
67173: LD_VAR 0 1
67177: PUSH
67178: LD_INT 4
67180: PLUS
67181: PUSH
67182: LD_VAR 0 2
67186: PUSH
67187: LD_INT 4
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: PUSH
67195: LD_VAR 0 1
67199: PUSH
67200: LD_VAR 0 2
67204: PUSH
67205: LD_INT 4
67207: PLUS
67208: PUSH
67209: LD_INT 0
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: LIST
67216: PUSH
67217: LD_VAR 0 1
67221: PUSH
67222: LD_INT 3
67224: MINUS
67225: PUSH
67226: LD_VAR 0 2
67230: PUSH
67231: LD_INT 1
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: LIST
67238: PUSH
67239: LD_VAR 0 1
67243: PUSH
67244: LD_INT 4
67246: MINUS
67247: PUSH
67248: LD_VAR 0 2
67252: PUSH
67253: LD_INT 4
67255: MINUS
67256: PUSH
67257: LD_INT 2
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: LIST
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// end ; 3 :
67272: GO 67694
67274: LD_INT 3
67276: DOUBLE
67277: EQUAL
67278: IFTRUE 67282
67280: GO 67415
67282: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67283: LD_ADDR_VAR 0 5
67287: PUSH
67288: LD_VAR 0 1
67292: PUSH
67293: LD_INT 3
67295: PLUS
67296: PUSH
67297: LD_VAR 0 2
67301: PUSH
67302: LD_INT 4
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: LIST
67309: PUSH
67310: LD_VAR 0 1
67314: PUSH
67315: LD_INT 4
67317: PLUS
67318: PUSH
67319: LD_VAR 0 2
67323: PUSH
67324: LD_INT 4
67326: PLUS
67327: PUSH
67328: LD_INT 5
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: LIST
67335: PUSH
67336: LD_VAR 0 1
67340: PUSH
67341: LD_INT 4
67343: MINUS
67344: PUSH
67345: LD_VAR 0 2
67349: PUSH
67350: LD_INT 1
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: LIST
67357: PUSH
67358: LD_VAR 0 1
67362: PUSH
67363: LD_VAR 0 2
67367: PUSH
67368: LD_INT 4
67370: MINUS
67371: PUSH
67372: LD_INT 3
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: PUSH
67380: LD_VAR 0 1
67384: PUSH
67385: LD_INT 3
67387: MINUS
67388: PUSH
67389: LD_VAR 0 2
67393: PUSH
67394: LD_INT 3
67396: MINUS
67397: PUSH
67398: LD_INT 2
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: LIST
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: ST_TO_ADDR
// end ; 4 :
67413: GO 67694
67415: LD_INT 4
67417: DOUBLE
67418: EQUAL
67419: IFTRUE 67423
67421: GO 67556
67423: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67424: LD_ADDR_VAR 0 5
67428: PUSH
67429: LD_VAR 0 1
67433: PUSH
67434: LD_VAR 0 2
67438: PUSH
67439: LD_INT 4
67441: PLUS
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: LIST
67450: PUSH
67451: LD_VAR 0 1
67455: PUSH
67456: LD_INT 3
67458: PLUS
67459: PUSH
67460: LD_VAR 0 2
67464: PUSH
67465: LD_INT 3
67467: PLUS
67468: PUSH
67469: LD_INT 5
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: PUSH
67477: LD_VAR 0 1
67481: PUSH
67482: LD_INT 4
67484: PLUS
67485: PUSH
67486: LD_VAR 0 2
67490: PUSH
67491: LD_INT 4
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: LIST
67498: PUSH
67499: LD_VAR 0 1
67503: PUSH
67504: LD_VAR 0 2
67508: PUSH
67509: LD_INT 3
67511: MINUS
67512: PUSH
67513: LD_INT 3
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: LIST
67520: PUSH
67521: LD_VAR 0 1
67525: PUSH
67526: LD_INT 4
67528: MINUS
67529: PUSH
67530: LD_VAR 0 2
67534: PUSH
67535: LD_INT 4
67537: MINUS
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: ST_TO_ADDR
// end ; 5 :
67554: GO 67694
67556: LD_INT 5
67558: DOUBLE
67559: EQUAL
67560: IFTRUE 67564
67562: GO 67693
67564: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67565: LD_ADDR_VAR 0 5
67569: PUSH
67570: LD_VAR 0 1
67574: PUSH
67575: LD_INT 4
67577: MINUS
67578: PUSH
67579: LD_VAR 0 2
67583: PUSH
67584: LD_INT 1
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: LIST
67591: PUSH
67592: LD_VAR 0 1
67596: PUSH
67597: LD_VAR 0 2
67601: PUSH
67602: LD_INT 4
67604: MINUS
67605: PUSH
67606: LD_INT 3
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: LIST
67613: PUSH
67614: LD_VAR 0 1
67618: PUSH
67619: LD_INT 4
67621: PLUS
67622: PUSH
67623: LD_VAR 0 2
67627: PUSH
67628: LD_INT 4
67630: PLUS
67631: PUSH
67632: LD_INT 5
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: LIST
67639: PUSH
67640: LD_VAR 0 1
67644: PUSH
67645: LD_INT 3
67647: PLUS
67648: PUSH
67649: LD_VAR 0 2
67653: PUSH
67654: LD_INT 4
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: LIST
67661: PUSH
67662: LD_VAR 0 1
67666: PUSH
67667: LD_VAR 0 2
67671: PUSH
67672: LD_INT 3
67674: PLUS
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: LIST
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: ST_TO_ADDR
// end ; end ;
67691: GO 67694
67693: POP
// result := list ;
67694: LD_ADDR_VAR 0 4
67698: PUSH
67699: LD_VAR 0 5
67703: ST_TO_ADDR
// end ;
67704: LD_VAR 0 4
67708: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67709: LD_INT 0
67711: PPUSH
67712: PPUSH
67713: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67714: LD_VAR 0 1
67718: NOT
67719: PUSH
67720: LD_VAR 0 2
67724: PUSH
67725: LD_INT 1
67727: PUSH
67728: LD_INT 2
67730: PUSH
67731: LD_INT 3
67733: PUSH
67734: LD_INT 4
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: IN
67743: NOT
67744: OR
67745: IFFALSE 67749
// exit ;
67747: GO 67841
// tmp := [ ] ;
67749: LD_ADDR_VAR 0 5
67753: PUSH
67754: EMPTY
67755: ST_TO_ADDR
// for i in units do
67756: LD_ADDR_VAR 0 4
67760: PUSH
67761: LD_VAR 0 1
67765: PUSH
67766: FOR_IN
67767: IFFALSE 67810
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67769: LD_ADDR_VAR 0 5
67773: PUSH
67774: LD_VAR 0 5
67778: PPUSH
67779: LD_VAR 0 5
67783: PUSH
67784: LD_INT 1
67786: PLUS
67787: PPUSH
67788: LD_VAR 0 4
67792: PPUSH
67793: LD_VAR 0 2
67797: PPUSH
67798: CALL_OW 259
67802: PPUSH
67803: CALL_OW 2
67807: ST_TO_ADDR
67808: GO 67766
67810: POP
67811: POP
// if not tmp then
67812: LD_VAR 0 5
67816: NOT
67817: IFFALSE 67821
// exit ;
67819: GO 67841
// result := SortListByListDesc ( units , tmp ) ;
67821: LD_ADDR_VAR 0 3
67825: PUSH
67826: LD_VAR 0 1
67830: PPUSH
67831: LD_VAR 0 5
67835: PPUSH
67836: CALL_OW 77
67840: ST_TO_ADDR
// end ;
67841: LD_VAR 0 3
67845: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67846: LD_INT 0
67848: PPUSH
67849: PPUSH
67850: PPUSH
// x := GetX ( building ) ;
67851: LD_ADDR_VAR 0 4
67855: PUSH
67856: LD_VAR 0 2
67860: PPUSH
67861: CALL_OW 250
67865: ST_TO_ADDR
// y := GetY ( building ) ;
67866: LD_ADDR_VAR 0 5
67870: PUSH
67871: LD_VAR 0 2
67875: PPUSH
67876: CALL_OW 251
67880: ST_TO_ADDR
// if GetTaskList ( unit ) then
67881: LD_VAR 0 1
67885: PPUSH
67886: CALL_OW 437
67890: IFFALSE 67985
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67892: LD_STRING e
67894: PUSH
67895: LD_VAR 0 1
67899: PPUSH
67900: CALL_OW 437
67904: PUSH
67905: LD_INT 1
67907: ARRAY
67908: PUSH
67909: LD_INT 1
67911: ARRAY
67912: EQUAL
67913: PUSH
67914: LD_VAR 0 4
67918: PUSH
67919: LD_VAR 0 1
67923: PPUSH
67924: CALL_OW 437
67928: PUSH
67929: LD_INT 1
67931: ARRAY
67932: PUSH
67933: LD_INT 2
67935: ARRAY
67936: EQUAL
67937: AND
67938: PUSH
67939: LD_VAR 0 5
67943: PUSH
67944: LD_VAR 0 1
67948: PPUSH
67949: CALL_OW 437
67953: PUSH
67954: LD_INT 1
67956: ARRAY
67957: PUSH
67958: LD_INT 3
67960: ARRAY
67961: EQUAL
67962: AND
67963: IFFALSE 67975
// result := true else
67965: LD_ADDR_VAR 0 3
67969: PUSH
67970: LD_INT 1
67972: ST_TO_ADDR
67973: GO 67983
// result := false ;
67975: LD_ADDR_VAR 0 3
67979: PUSH
67980: LD_INT 0
67982: ST_TO_ADDR
// end else
67983: GO 67993
// result := false ;
67985: LD_ADDR_VAR 0 3
67989: PUSH
67990: LD_INT 0
67992: ST_TO_ADDR
// end ;
67993: LD_VAR 0 3
67997: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67998: LD_INT 0
68000: PPUSH
68001: PPUSH
68002: PPUSH
68003: PPUSH
// if not unit or not area then
68004: LD_VAR 0 1
68008: NOT
68009: PUSH
68010: LD_VAR 0 2
68014: NOT
68015: OR
68016: IFFALSE 68020
// exit ;
68018: GO 68184
// tmp := AreaToList ( area , i ) ;
68020: LD_ADDR_VAR 0 6
68024: PUSH
68025: LD_VAR 0 2
68029: PPUSH
68030: LD_VAR 0 5
68034: PPUSH
68035: CALL_OW 517
68039: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68040: LD_ADDR_VAR 0 5
68044: PUSH
68045: DOUBLE
68046: LD_INT 1
68048: DEC
68049: ST_TO_ADDR
68050: LD_VAR 0 6
68054: PUSH
68055: LD_INT 1
68057: ARRAY
68058: PUSH
68059: FOR_TO
68060: IFFALSE 68182
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68062: LD_ADDR_VAR 0 7
68066: PUSH
68067: LD_VAR 0 6
68071: PUSH
68072: LD_INT 1
68074: ARRAY
68075: PUSH
68076: LD_VAR 0 5
68080: ARRAY
68081: PUSH
68082: LD_VAR 0 6
68086: PUSH
68087: LD_INT 2
68089: ARRAY
68090: PUSH
68091: LD_VAR 0 5
68095: ARRAY
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68101: LD_VAR 0 7
68105: PUSH
68106: LD_INT 1
68108: ARRAY
68109: PPUSH
68110: LD_VAR 0 7
68114: PUSH
68115: LD_INT 2
68117: ARRAY
68118: PPUSH
68119: CALL_OW 428
68123: PUSH
68124: LD_INT 0
68126: EQUAL
68127: IFFALSE 68180
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68129: LD_VAR 0 1
68133: PPUSH
68134: LD_VAR 0 7
68138: PUSH
68139: LD_INT 1
68141: ARRAY
68142: PPUSH
68143: LD_VAR 0 7
68147: PUSH
68148: LD_INT 2
68150: ARRAY
68151: PPUSH
68152: LD_VAR 0 3
68156: PPUSH
68157: CALL_OW 48
// result := IsPlaced ( unit ) ;
68161: LD_ADDR_VAR 0 4
68165: PUSH
68166: LD_VAR 0 1
68170: PPUSH
68171: CALL_OW 305
68175: ST_TO_ADDR
// exit ;
68176: POP
68177: POP
68178: GO 68184
// end ; end ;
68180: GO 68059
68182: POP
68183: POP
// end ;
68184: LD_VAR 0 4
68188: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68189: LD_INT 0
68191: PPUSH
68192: PPUSH
68193: PPUSH
// if not side or side > 8 then
68194: LD_VAR 0 1
68198: NOT
68199: PUSH
68200: LD_VAR 0 1
68204: PUSH
68205: LD_INT 8
68207: GREATER
68208: OR
68209: IFFALSE 68213
// exit ;
68211: GO 68400
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68213: LD_ADDR_VAR 0 4
68217: PUSH
68218: LD_INT 22
68220: PUSH
68221: LD_VAR 0 1
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 21
68232: PUSH
68233: LD_INT 3
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PPUSH
68244: CALL_OW 69
68248: ST_TO_ADDR
// if not tmp then
68249: LD_VAR 0 4
68253: NOT
68254: IFFALSE 68258
// exit ;
68256: GO 68400
// enable_addtolog := true ;
68258: LD_ADDR_OWVAR 81
68262: PUSH
68263: LD_INT 1
68265: ST_TO_ADDR
// AddToLog ( [ ) ;
68266: LD_STRING [
68268: PPUSH
68269: CALL_OW 561
// for i in tmp do
68273: LD_ADDR_VAR 0 3
68277: PUSH
68278: LD_VAR 0 4
68282: PUSH
68283: FOR_IN
68284: IFFALSE 68391
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68286: LD_STRING [
68288: PUSH
68289: LD_VAR 0 3
68293: PPUSH
68294: CALL_OW 266
68298: STR
68299: PUSH
68300: LD_STRING , 
68302: STR
68303: PUSH
68304: LD_VAR 0 3
68308: PPUSH
68309: CALL_OW 250
68313: STR
68314: PUSH
68315: LD_STRING , 
68317: STR
68318: PUSH
68319: LD_VAR 0 3
68323: PPUSH
68324: CALL_OW 251
68328: STR
68329: PUSH
68330: LD_STRING , 
68332: STR
68333: PUSH
68334: LD_VAR 0 3
68338: PPUSH
68339: CALL_OW 254
68343: STR
68344: PUSH
68345: LD_STRING , 
68347: STR
68348: PUSH
68349: LD_VAR 0 3
68353: PPUSH
68354: LD_INT 1
68356: PPUSH
68357: CALL_OW 268
68361: STR
68362: PUSH
68363: LD_STRING , 
68365: STR
68366: PUSH
68367: LD_VAR 0 3
68371: PPUSH
68372: LD_INT 2
68374: PPUSH
68375: CALL_OW 268
68379: STR
68380: PUSH
68381: LD_STRING ],
68383: STR
68384: PPUSH
68385: CALL_OW 561
// end ;
68389: GO 68283
68391: POP
68392: POP
// AddToLog ( ]; ) ;
68393: LD_STRING ];
68395: PPUSH
68396: CALL_OW 561
// end ;
68400: LD_VAR 0 2
68404: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68405: LD_INT 0
68407: PPUSH
68408: PPUSH
68409: PPUSH
68410: PPUSH
68411: PPUSH
// if not area or not rate or not max then
68412: LD_VAR 0 1
68416: NOT
68417: PUSH
68418: LD_VAR 0 2
68422: NOT
68423: OR
68424: PUSH
68425: LD_VAR 0 4
68429: NOT
68430: OR
68431: IFFALSE 68435
// exit ;
68433: GO 68627
// while 1 do
68435: LD_INT 1
68437: IFFALSE 68627
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68439: LD_ADDR_VAR 0 9
68443: PUSH
68444: LD_VAR 0 1
68448: PPUSH
68449: LD_INT 1
68451: PPUSH
68452: CALL_OW 287
68456: PUSH
68457: LD_INT 10
68459: MUL
68460: ST_TO_ADDR
// r := rate / 10 ;
68461: LD_ADDR_VAR 0 7
68465: PUSH
68466: LD_VAR 0 2
68470: PUSH
68471: LD_INT 10
68473: DIVREAL
68474: ST_TO_ADDR
// time := 1 1$00 ;
68475: LD_ADDR_VAR 0 8
68479: PUSH
68480: LD_INT 2100
68482: ST_TO_ADDR
// if amount < min then
68483: LD_VAR 0 9
68487: PUSH
68488: LD_VAR 0 3
68492: LESS
68493: IFFALSE 68511
// r := r * 2 else
68495: LD_ADDR_VAR 0 7
68499: PUSH
68500: LD_VAR 0 7
68504: PUSH
68505: LD_INT 2
68507: MUL
68508: ST_TO_ADDR
68509: GO 68537
// if amount > max then
68511: LD_VAR 0 9
68515: PUSH
68516: LD_VAR 0 4
68520: GREATER
68521: IFFALSE 68537
// r := r / 2 ;
68523: LD_ADDR_VAR 0 7
68527: PUSH
68528: LD_VAR 0 7
68532: PUSH
68533: LD_INT 2
68535: DIVREAL
68536: ST_TO_ADDR
// time := time / r ;
68537: LD_ADDR_VAR 0 8
68541: PUSH
68542: LD_VAR 0 8
68546: PUSH
68547: LD_VAR 0 7
68551: DIVREAL
68552: ST_TO_ADDR
// if time < 0 then
68553: LD_VAR 0 8
68557: PUSH
68558: LD_INT 0
68560: LESS
68561: IFFALSE 68578
// time := time * - 1 ;
68563: LD_ADDR_VAR 0 8
68567: PUSH
68568: LD_VAR 0 8
68572: PUSH
68573: LD_INT 1
68575: NEG
68576: MUL
68577: ST_TO_ADDR
// wait ( time ) ;
68578: LD_VAR 0 8
68582: PPUSH
68583: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68587: LD_INT 35
68589: PPUSH
68590: LD_INT 875
68592: PPUSH
68593: CALL_OW 12
68597: PPUSH
68598: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68602: LD_INT 1
68604: PPUSH
68605: LD_INT 5
68607: PPUSH
68608: CALL_OW 12
68612: PPUSH
68613: LD_VAR 0 1
68617: PPUSH
68618: LD_INT 1
68620: PPUSH
68621: CALL_OW 55
// end ;
68625: GO 68435
// end ;
68627: LD_VAR 0 5
68631: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68632: LD_INT 0
68634: PPUSH
68635: PPUSH
68636: PPUSH
68637: PPUSH
68638: PPUSH
68639: PPUSH
68640: PPUSH
68641: PPUSH
// if not turrets or not factories then
68642: LD_VAR 0 1
68646: NOT
68647: PUSH
68648: LD_VAR 0 2
68652: NOT
68653: OR
68654: IFFALSE 68658
// exit ;
68656: GO 68965
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68658: LD_ADDR_VAR 0 10
68662: PUSH
68663: LD_INT 5
68665: PUSH
68666: LD_INT 6
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 2
68675: PUSH
68676: LD_INT 4
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 3
68685: PUSH
68686: LD_INT 5
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 24
68700: PUSH
68701: LD_INT 25
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 23
68710: PUSH
68711: LD_INT 27
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 42
68724: PUSH
68725: LD_INT 43
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 44
68734: PUSH
68735: LD_INT 46
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 45
68744: PUSH
68745: LD_INT 47
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: LIST
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: LIST
68761: ST_TO_ADDR
// result := [ ] ;
68762: LD_ADDR_VAR 0 3
68766: PUSH
68767: EMPTY
68768: ST_TO_ADDR
// for i in turrets do
68769: LD_ADDR_VAR 0 4
68773: PUSH
68774: LD_VAR 0 1
68778: PUSH
68779: FOR_IN
68780: IFFALSE 68963
// begin nat := GetNation ( i ) ;
68782: LD_ADDR_VAR 0 7
68786: PUSH
68787: LD_VAR 0 4
68791: PPUSH
68792: CALL_OW 248
68796: ST_TO_ADDR
// weapon := 0 ;
68797: LD_ADDR_VAR 0 8
68801: PUSH
68802: LD_INT 0
68804: ST_TO_ADDR
// if not nat then
68805: LD_VAR 0 7
68809: NOT
68810: IFFALSE 68814
// continue ;
68812: GO 68779
// for j in list [ nat ] do
68814: LD_ADDR_VAR 0 5
68818: PUSH
68819: LD_VAR 0 10
68823: PUSH
68824: LD_VAR 0 7
68828: ARRAY
68829: PUSH
68830: FOR_IN
68831: IFFALSE 68872
// if GetBWeapon ( i ) = j [ 1 ] then
68833: LD_VAR 0 4
68837: PPUSH
68838: CALL_OW 269
68842: PUSH
68843: LD_VAR 0 5
68847: PUSH
68848: LD_INT 1
68850: ARRAY
68851: EQUAL
68852: IFFALSE 68870
// begin weapon := j [ 2 ] ;
68854: LD_ADDR_VAR 0 8
68858: PUSH
68859: LD_VAR 0 5
68863: PUSH
68864: LD_INT 2
68866: ARRAY
68867: ST_TO_ADDR
// break ;
68868: GO 68872
// end ;
68870: GO 68830
68872: POP
68873: POP
// if not weapon then
68874: LD_VAR 0 8
68878: NOT
68879: IFFALSE 68883
// continue ;
68881: GO 68779
// for k in factories do
68883: LD_ADDR_VAR 0 6
68887: PUSH
68888: LD_VAR 0 2
68892: PUSH
68893: FOR_IN
68894: IFFALSE 68959
// begin weapons := AvailableWeaponList ( k ) ;
68896: LD_ADDR_VAR 0 9
68900: PUSH
68901: LD_VAR 0 6
68905: PPUSH
68906: CALL_OW 478
68910: ST_TO_ADDR
// if not weapons then
68911: LD_VAR 0 9
68915: NOT
68916: IFFALSE 68920
// continue ;
68918: GO 68893
// if weapon in weapons then
68920: LD_VAR 0 8
68924: PUSH
68925: LD_VAR 0 9
68929: IN
68930: IFFALSE 68957
// begin result := [ i , weapon ] ;
68932: LD_ADDR_VAR 0 3
68936: PUSH
68937: LD_VAR 0 4
68941: PUSH
68942: LD_VAR 0 8
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: ST_TO_ADDR
// exit ;
68951: POP
68952: POP
68953: POP
68954: POP
68955: GO 68965
// end ; end ;
68957: GO 68893
68959: POP
68960: POP
// end ;
68961: GO 68779
68963: POP
68964: POP
// end ;
68965: LD_VAR 0 3
68969: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68970: LD_INT 0
68972: PPUSH
// if not side or side > 8 then
68973: LD_VAR 0 3
68977: NOT
68978: PUSH
68979: LD_VAR 0 3
68983: PUSH
68984: LD_INT 8
68986: GREATER
68987: OR
68988: IFFALSE 68992
// exit ;
68990: GO 69051
// if not range then
68992: LD_VAR 0 4
68996: NOT
68997: IFFALSE 69008
// range := - 12 ;
68999: LD_ADDR_VAR 0 4
69003: PUSH
69004: LD_INT 12
69006: NEG
69007: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69008: LD_VAR 0 1
69012: PPUSH
69013: LD_VAR 0 2
69017: PPUSH
69018: LD_VAR 0 3
69022: PPUSH
69023: LD_VAR 0 4
69027: PPUSH
69028: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69032: LD_VAR 0 1
69036: PPUSH
69037: LD_VAR 0 2
69041: PPUSH
69042: LD_VAR 0 3
69046: PPUSH
69047: CALL_OW 331
// end ;
69051: LD_VAR 0 5
69055: RET
// export function Video ( mode ) ; begin
69056: LD_INT 0
69058: PPUSH
// ingame_video = mode ;
69059: LD_ADDR_OWVAR 52
69063: PUSH
69064: LD_VAR 0 1
69068: ST_TO_ADDR
// interface_hidden = mode ;
69069: LD_ADDR_OWVAR 54
69073: PUSH
69074: LD_VAR 0 1
69078: ST_TO_ADDR
// end ;
69079: LD_VAR 0 2
69083: RET
// export function Join ( array , element ) ; begin
69084: LD_INT 0
69086: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69087: LD_ADDR_VAR 0 3
69091: PUSH
69092: LD_VAR 0 1
69096: PPUSH
69097: LD_VAR 0 1
69101: PUSH
69102: LD_INT 1
69104: PLUS
69105: PPUSH
69106: LD_VAR 0 2
69110: PPUSH
69111: CALL_OW 1
69115: ST_TO_ADDR
// end ;
69116: LD_VAR 0 3
69120: RET
// export function JoinUnion ( array , element ) ; begin
69121: LD_INT 0
69123: PPUSH
// result := array union element ;
69124: LD_ADDR_VAR 0 3
69128: PUSH
69129: LD_VAR 0 1
69133: PUSH
69134: LD_VAR 0 2
69138: UNION
69139: ST_TO_ADDR
// end ;
69140: LD_VAR 0 3
69144: RET
// export function GetBehemoths ( side ) ; begin
69145: LD_INT 0
69147: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69148: LD_ADDR_VAR 0 2
69152: PUSH
69153: LD_INT 22
69155: PUSH
69156: LD_VAR 0 1
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 31
69167: PUSH
69168: LD_INT 25
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PPUSH
69179: CALL_OW 69
69183: ST_TO_ADDR
// end ;
69184: LD_VAR 0 2
69188: RET
// export function Shuffle ( array ) ; var i , index ; begin
69189: LD_INT 0
69191: PPUSH
69192: PPUSH
69193: PPUSH
// result := [ ] ;
69194: LD_ADDR_VAR 0 2
69198: PUSH
69199: EMPTY
69200: ST_TO_ADDR
// if not array then
69201: LD_VAR 0 1
69205: NOT
69206: IFFALSE 69210
// exit ;
69208: GO 69309
// Randomize ;
69210: CALL_OW 10
// for i = array downto 1 do
69214: LD_ADDR_VAR 0 3
69218: PUSH
69219: DOUBLE
69220: LD_VAR 0 1
69224: INC
69225: ST_TO_ADDR
69226: LD_INT 1
69228: PUSH
69229: FOR_DOWNTO
69230: IFFALSE 69307
// begin index := rand ( 1 , array ) ;
69232: LD_ADDR_VAR 0 4
69236: PUSH
69237: LD_INT 1
69239: PPUSH
69240: LD_VAR 0 1
69244: PPUSH
69245: CALL_OW 12
69249: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69250: LD_ADDR_VAR 0 2
69254: PUSH
69255: LD_VAR 0 2
69259: PPUSH
69260: LD_VAR 0 2
69264: PUSH
69265: LD_INT 1
69267: PLUS
69268: PPUSH
69269: LD_VAR 0 1
69273: PUSH
69274: LD_VAR 0 4
69278: ARRAY
69279: PPUSH
69280: CALL_OW 2
69284: ST_TO_ADDR
// array := Delete ( array , index ) ;
69285: LD_ADDR_VAR 0 1
69289: PUSH
69290: LD_VAR 0 1
69294: PPUSH
69295: LD_VAR 0 4
69299: PPUSH
69300: CALL_OW 3
69304: ST_TO_ADDR
// end ;
69305: GO 69229
69307: POP
69308: POP
// end ;
69309: LD_VAR 0 2
69313: RET
// export function GetBaseMaterials ( base ) ; begin
69314: LD_INT 0
69316: PPUSH
// result := [ 0 , 0 , 0 ] ;
69317: LD_ADDR_VAR 0 2
69321: PUSH
69322: LD_INT 0
69324: PUSH
69325: LD_INT 0
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: LIST
69335: ST_TO_ADDR
// if not base then
69336: LD_VAR 0 1
69340: NOT
69341: IFFALSE 69345
// exit ;
69343: GO 69394
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69345: LD_ADDR_VAR 0 2
69349: PUSH
69350: LD_VAR 0 1
69354: PPUSH
69355: LD_INT 1
69357: PPUSH
69358: CALL_OW 275
69362: PUSH
69363: LD_VAR 0 1
69367: PPUSH
69368: LD_INT 2
69370: PPUSH
69371: CALL_OW 275
69375: PUSH
69376: LD_VAR 0 1
69380: PPUSH
69381: LD_INT 3
69383: PPUSH
69384: CALL_OW 275
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: LIST
69393: ST_TO_ADDR
// end ;
69394: LD_VAR 0 2
69398: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69399: LD_INT 0
69401: PPUSH
69402: PPUSH
// result := array ;
69403: LD_ADDR_VAR 0 3
69407: PUSH
69408: LD_VAR 0 1
69412: ST_TO_ADDR
// if size > 0 then
69413: LD_VAR 0 2
69417: PUSH
69418: LD_INT 0
69420: GREATER
69421: IFFALSE 69467
// for i := array downto size do
69423: LD_ADDR_VAR 0 4
69427: PUSH
69428: DOUBLE
69429: LD_VAR 0 1
69433: INC
69434: ST_TO_ADDR
69435: LD_VAR 0 2
69439: PUSH
69440: FOR_DOWNTO
69441: IFFALSE 69465
// result := Delete ( result , result ) ;
69443: LD_ADDR_VAR 0 3
69447: PUSH
69448: LD_VAR 0 3
69452: PPUSH
69453: LD_VAR 0 3
69457: PPUSH
69458: CALL_OW 3
69462: ST_TO_ADDR
69463: GO 69440
69465: POP
69466: POP
// end ;
69467: LD_VAR 0 3
69471: RET
// export function ComExit ( unit ) ; var tmp ; begin
69472: LD_INT 0
69474: PPUSH
69475: PPUSH
// if not IsInUnit ( unit ) then
69476: LD_VAR 0 1
69480: PPUSH
69481: CALL_OW 310
69485: NOT
69486: IFFALSE 69490
// exit ;
69488: GO 69550
// tmp := IsInUnit ( unit ) ;
69490: LD_ADDR_VAR 0 3
69494: PUSH
69495: LD_VAR 0 1
69499: PPUSH
69500: CALL_OW 310
69504: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69505: LD_VAR 0 3
69509: PPUSH
69510: CALL_OW 247
69514: PUSH
69515: LD_INT 2
69517: EQUAL
69518: IFFALSE 69531
// ComExitVehicle ( unit ) else
69520: LD_VAR 0 1
69524: PPUSH
69525: CALL_OW 121
69529: GO 69540
// ComExitBuilding ( unit ) ;
69531: LD_VAR 0 1
69535: PPUSH
69536: CALL_OW 122
// result := tmp ;
69540: LD_ADDR_VAR 0 2
69544: PUSH
69545: LD_VAR 0 3
69549: ST_TO_ADDR
// end ;
69550: LD_VAR 0 2
69554: RET
// export function ResetHc ; begin
69555: LD_INT 0
69557: PPUSH
// InitHc ;
69558: CALL_OW 19
// hc_importance := 0 ;
69562: LD_ADDR_OWVAR 32
69566: PUSH
69567: LD_INT 0
69569: ST_TO_ADDR
// end ;
69570: LD_VAR 0 1
69574: RET
