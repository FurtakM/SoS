// Amerykanie
Export am_comander;
Export ai_build, ai_vehs, ai_tech;
Export Function PrepareAmerican;
var i, un, filter, list, p;
begin

     // nazwa sk³adu
        SetBName(jota_base, 'jota');


     // Dostosowanie do trybu gry

     if game_type = 1 then // Gracz wybiera Amerykanów
        begin
           your_side := 1;

        // usuwamy zbêdne jednostki
           list := [west_bun1, east_bun, am_gun];

        // poziom komputerow u ruskich
           if game_diff = 1 then
              SetTech(tech_comp1, 3, state_researched);
           if game_diff = 2 then
              SetTech(tech_comp2, 3, state_researched);
           if game_diff = 3 then
              SetTech(tech_comp3, 3, state_researched);


           for i = 1 to list do
               RemoveUnit(list[i]);

               ResetFog;

        // tworzymy postacie dla gracza
           // w zale¿nosci od poziomu trudnosci

              uc_side := 1;
              uc_nation := 1;

              // ³atwy (16 postaci) | sredni (12 postaci) | trudny (8 postaci)
                 for i = 1 to 4 - (game_diff) do // ¿o³nierze
                     begin
                     uc_side := 1;
                     uc_nation := 1;

                     un := CreateHumanWithClass(1, game_skill);
                     PlaceUnitArea(un, am_base, false);
                     end;
                 for i = 1 to 5 - (game_diff) do // inzynierowie
                     begin
                     uc_side := 1;
                     uc_nation := 1;

                     un := CreateHumanWithClass(2, game_skill);
                     PlaceUnitArea(un, am_base, false);
                     end;
                 for i = 1 to 5 - (game_diff) do // mechanicy
                     begin
                     uc_side := 1;
                     uc_nation := 1;

                     un := CreateHumanWithClass(3, game_skill);
                     PlaceUnitArea(un, am_base, false);
                     end;
                 for i = 1 to 5 - (game_diff) do // naukowcy
                     begin
                     uc_side := 1;
                     uc_nation := 1;

                     un := CreateHumanWithClass(4, game_skill);
                     PlaceUnitArea(un, am_base, false);
                     end;
                 // dowodca
                    hc_importance := 100;

                    uc_side := 1;
                    uc_nation := 1;

                    am_comander := CreateHumanWithClass(1, game_skill);
                    PlaceUnitArea(am_comander, am_base, false);

                 // resetujemy warotsc dla hc_importance
                    hc_importance := 0; // wy³acza podswietlenie postaci



        end; // koniec bloku dla game_type = 1


     if game_type = 2 then // Gracz wybiera Rosjan
        begin
        uc_side := 1;
        uc_nation := 1;


        // skrzynki
        SetResourceType(GetBase(jota_base), mat_cans, 1000);

        
        // wykrywanie syberytu
        SetTech(tech_sibdet, 1, state_researched);

        for i = 1 to 4 do
            begin

            for p = 1 to 5 do
                begin
                un := CreateHumanWithClass(i, game_eskill);
                PlaceUnitArea(un, am_base, false);
                end;

            end;


        // snajperzy
           // zachód
              un := CreateHumanWithClass(class_sniper, game_eskill);
              PlaceUnitArea(un, am_sniper_1, false);
              ComEnterUnit(un, west_bun1);

           // baza
              un := CreateHumanWithClass(class_sniper, game_eskill);
              PlaceUnitArea(un, am_sniper_3, false);
              ComEnterUnit(un, base_bun);

           if game_diff > 1 then
              begin
              // prze³ecz
              un := CreateHumanWithClass(class_sniper, game_eskill);
              PlaceUnitArea(un, am_sniper_2, false);

              for i = 1 to 2 do
              begin
              un := CreateHumanWithClass(class_sniper, game_eskill);
              PlaceUnitArea(un, am_base, false);
              ComEnterUnit(un, FilterAllUnits([[[f_side, 1], [f_btype, b_armoury], [f_lives, 251]]])[1]);
              end;

              end;

           if game_diff > 1 then
              begin
              // wzgorza
              un := CreateHumanWithClass(class_sniper, game_eskill);
              PlaceUnitXY(un, 37, 44, false);
              end;

           if game_diff > 2 then
              begin
              // wschod
              un := CreateHumanWithClass(class_sniper, game_eskill);
              PlaceUnitXY(un, 106, 45, false);
              ComEnterUnit(un, east_bun);
              end;

        // wchodni bunkier tylko dla poziomu 3
           if game_diff < 3 then
              RemoveUnit(east_bun);

        // rakietki
           if game_diff > 1 then
              SetTech(tech_rocket, 1, state_researched);
           
        // definicja co ma robic komputer
           Case game_diff of
           1:begin
             ai_build := [b_oil_power, 78, 52, 3, // lista budynkow do wybudowania
                          b_oil_power, 96, 58, 0,
                          b_bunker, 72, 34, 3,
                          b_bunker, 83, 54, 0];
             end;
           2:begin
             ai_build := [b_ext_rocket, 73, 42, 2,
                          b_oil_power, 78, 52, 3, 
                          b_oil_power, 96, 58, 0,
                          b_bunker, 72, 34, 3,
                          b_bunker, 83, 54, 0,
                          b_bunker, 82, 38, 2,
                          b_oil_power, 69, 39, 3];
             end;
           3:begin
             ai_build := [b_ext_rocket, 73, 42, 2,
                          b_oil_power, 78, 52, 3,
                          b_oil_power, 96, 58, 0,
                          b_bunker, 72, 34, 3,
                          b_bunker, 83, 54, 0,
                          b_bunker, 82, 38, 2,
                          b_bunker, 103, 59, 3,
                          b_oil_power, 69, 39, 3];
             end;

        End;

        // badania
           ai_tech := [tech_tech1, tech_oileng, tech_tech2, tech_weap1, tech_gatling, tech_weap2, tech_gun, tech_tech3];

        // pojazdy
           Case game_diff of
           1:begin
             ai_vehs := [us_medium_tracked, engine_combustion, control_manual, us_cargo_bay,
                         us_heavy_tracked, engine_combustion, control_manual, us_gatling_gun,
                         us_heavy_tracked, engine_combustion, control_manual, us_double_gun,
                         us_heavy_tracked, engine_combustion, control_manual, us_gatling_gun];
             end;
           2:begin
             ai_vehs := [us_medium_tracked, engine_combustion, control_manual, us_cargo_bay,
                         us_heavy_tracked, engine_combustion, control_manual, us_rocket_launcher,
                         us_heavy_tracked, engine_combustion, control_manual, us_double_gun,
                         us_heavy_tracked, engine_combustion, control_manual, us_rocket_launcher];
             end;
           3:begin
             ai_vehs := [us_medium_tracked, engine_combustion, control_manual, us_cargo_bay,
                         us_heavy_tracked, engine_combustion, control_manual, us_rocket_launcher,
                         us_heavy_tracked, engine_combustion, control_manual, us_rocket_launcher,
                         us_heavy_tracked, engine_combustion, control_manual, us_rocket_launcher];
             end;

           End;
        end; // koniec bloku dla game_type = 2

End;

// WYDARZENIA DLA GAME_TYPE 2!!!
Export sold_ocp; // ¿o³nierze w wie¿ach
Export tower_list;
Every 0$01 do
begin
sold_ocp := [];  // zerujemy zbiór
tower_list := [];
End;

Every 0$01 trigger game_type = 2 and depot_captured = false do
var i, un, sold, filter, sold_em, engs, mechs, sci, empty_towers, towers, damage_pep, damage_build, damage_vehs;
begin
enable;

       sold  := FilterAllUnits([[[f_side, 1], [f_class, 1], [f_lives, 650]]]);
       engs  := FilterAllUnits([[[f_side, 1], [f_class, 2], [f_lives, 650]]]);
       mechs := FilterAllUnits([[[f_side, 1], [f_class, 3], [f_lives, 650]]]);
       sci   := FilterAllUnits([[[f_side, 1], [f_class, 4], [f_lives, 650]]]);

       empty_towers := FilterAllUnits([[f_side, 1], [f_btype, b_bunker], [f_empty], [f_lives, 251]]);
       towers := FilterAllUnits([[[f_side, 1], [f_btype, b_bunker], [f_or, [f_bweapon, us_rocket_launcher], [f_bweapon, us_gatling_gun]], [f_lives, 251]]]);

       damage_pep   := FilterAllUnits([[[f_side, 1], [f_type, unit_human], [f_not, [f_lives, 650]]]]);
       damage_build := FilterUnitsInArea(def_area, [[[f_side, 1], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);
       damage_vehs  := FilterAllUnits([[[f_side, 1], [f_type, unit_vehicle], [f_not, [f_lives, 650]]]]);



       // ropa
       if GetResourceType(GetBase(jota_base), mat_oil) <= 30 then
          SetResourceType(GetBase(jota_base), mat_oil, 100);


       // wchodzenie do budynkow
       // ¿o³nierze
          sold_em := (sold diff sold_ocp);

          if sold > 0 then
             for i = 1 to sold_em do
                 if empty_towers > 0 then
                    ComEnterUnit(sold_em[i], empty_towers[1])
                     else
                    ComEnterUnit(sold_em[i], FilterAllUnits([[[f_side, 1], [f_btype, b_armoury], [f_lives, 251]]])[1]);

       // mechanicy
          if mechs > 0 then
             for i = 1 to mechs do
                 if not IsInUnit(mechs[i]) and not HasTask(mechs[i]) then
                    ComEnterUnit(mechs[i], am_fac);

       // naukowcy
          if sci > 0 then
             for i = 1 to sci do
                 if damage_pep = 0 and not HasTask(sci[i]) then
                    ComEnterUnit(sci[i], am_lab);


       // naprawa budynkow
       if damage_build > 0 then
          for i = 1 to engs do
              ComRepairBuilding(engs[i], damage_build[1]);

       // budowanie
       if ai_build > 0 then
          for i = 1 to engs do
              if not HasTask(engs[i]) then
                 ComBuild(engs[i], ai_build[1], ai_build[2], ai_build[3], ai_build[4]);
                 // inzynierowie buduja budynek z listy jezeli nie maja inny zajec

       // leczenie
       if damage_pep > 0 and sci > 0 then
          begin
          // rozkaz opuszczenia laba
             for i = 1 to sci do
                 ComExitBuilding(sci[i]);

          // ranni podchodza do laba i czekaja na uleczenie
          for i = 1 to damage_pep do
              begin

              if not IsInUnit(damage_pep[i]) then
                 ComExitBuilding(damage_pep[i]);

              if not IsInArea(damage_pep[i], heal_area) then
                 ComMoveXY(damage_pep[i], 96, 52);

              end;

          // wejscie do laba
          if damage_pep = 0 then
             for i = 1 to sci do
                 ComEnterUnit(sci[i], am_lab);
             
          end; // koniec leczenia

          // badania
          if ai_tech > 0 then
             ComResearch(am_lab, ai_tech[1]);

          // produkcja wozów
          if ai_vehs > 0 then
          if CanBeConstructed(am_fac, ai_vehs[1], ai_vehs[2], ai_vehs[3], ai_vehs[4]) then
             begin
             ComConstruct(am_fac, ai_vehs[1], ai_vehs[2], ai_vehs[3], ai_vehs[4]);

             for i = 1 to 4 do
             ai_vehs := Delete(ai_vehs, 1); // usuwamy 4 elementy z listy aby fabryka nie produkowa³a kolejnego takiego samego pojazdu
             end;

          // montowanie broni na wiezach
          if tower_list > 0 then
             begin

                    if GetTech(tech_rocket, 1) = state_researched then
                       begin
                       ComPlaceWeapon(tower_list[1], us_rocket_launcher);
                       tower_list := Delete(tower_list, 1);
                       end
                        else
                         if GetTech(tech_gatling, 1) = state_researched then
                             begin
                             ComPlaceWeapon(tower_list[1], us_gatling_gun);
                             tower_list := Delete(tower_list, 1);
                             end;
                   

             end;

        // pojazdy
           if damage_vehs > 0 then
              begin

              for i = 1 to damage_vehs do
                  begin
                  un := IsDrivenBy(damage_vehs[i]);

                  if not IsInArea(damage_vehs[i], repair_area) then
                     ComMoveToArea(un, repair_area)
                      else
                       begin
                        if IsInUnit(un) then
                           ComExitVehicle(un);

                        Wait(0$01);

                        // naprawa
                           Repeat
                            begin
                            ComRepairVehicle(un, damage_vehs[i]);
                            Wait(0$01);
                            end;
                           Until GetLives(damage_vehs[i]) = 1000;

                           ComEnterUnit(un, damage_vehs[i]);
                       end;

                  end;

              end;

End;


// Pojazdy
Every 0$01 trigger game_type = 2 and depot_captured = false do
var i, un, filter, enemy;
begin
enable;

     filter := FilterAllUnits([[[f_side, 1], [f_type, unit_vehicle], [f_lives, 650], [f_not, [f_weapon, us_cargo_bay]]]]);
     enemy := FilterUnitsInArea(def_area, [f_side, 3]);

     if filter > 0 then
        for i = 1 to filter do
            if enemy > 0 then
               ComAttackUnit(filter[i], NearestUnitToUnit(enemy, filter[i]));

End;


// Zbieranie skrzynek
Every 0$03 trigger game_type = 2 and depot_captured = false do
var i, c, p, skr, filter, cargo, dep;
begin
Enable;

     filter := FilterAllUnits([[f_ok], [f_side, 1], [f_or, [f_class, class_engineer], [f_class, class_apeman_engineer]] ]);
     cargo  := FilterAllUnits([[f_side, 1], [f_weapon, us_cargo_bay], [f_lives, 650]]);
     dep    := FilterAllUnits([[f_side, 1], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]]);

     skr = GetListOfCratesInArea(crates_spawn);


     c = 1;

     
     if cargo > 0 then // zabezpieczenie
     While c < skr do
     begin

     if cargo > 0 then
        begin

        if GetFuel(cargo[1]) > 40 then
           begin
           if GetDistXYToSide(skr[c], skr[c+1], 3) > 15 and not HasTask(cargo[1]) then
              ComCollect(cargo[1], skr[c], skr[c+1]);
           end
         else
          begin

          Repeat
           begin
           ComMoveXY(cargo[1], GetX(dep[1]), GetY(dep[1]));
           Wait(0$01);
           end
          Until GetDistUnits(cargo[1], dep[1]) < 7;

          SetFuel(cargo[1], 100);
          end;

         c = c + 2;
        end;


     end;

End;


On EnterBuilding(b, un) do
var i, filter;
begin

     if game_type = 2 and depot_captured = false then
        begin

        if b in FilterAllUnits([[f_side, 1], [f_btype, b_bunker]]) then
           sold_ocp := sold_ocp ^ un;
        end;

End;

On LeaveBuilding(b, un) do
var i, filter;
begin

     if un in sold_ocp then
        sold_ocp := Delete(sold_ocp, un);

End;


On ResearchComplete(tech, lab) do
var i, filter, un;
begin

     if game_type = 2 then // !!!
        begin

        if GetSide(lab) = 1 then
           if tech in ai_tech then
              ai_tech := Delete(ai_tech, 1);

        end;


End;


On BuildingComplete(b) do
var i, side, un;
begin


     if game_type = 2 and depot_captured = false then
        begin

        if GetSide(b) = 1 then
           for i = 1 to 4 do
               ai_build := Delete(ai_build, 1);

        if b in FilterAllUnits([[f_side, 1], [f_btype, b_bunker]]) then
           tower_list := tower_list ^ b;

        end;

End;

 

// WYDARZENIA DLA GAME_TYPE 1!!!
Export enemy_count, enemy_typ;
Every 1$30 trigger game_type = 1 do
begin
enable;

     if timer <= 20$00 then
     begin
     enemy_count := [5, 6, 7][game_diff];
     enemy_typ  := 1;
     end;

     if timer > 20$00 and timer <= 40$00 then
     begin
     enemy_count := [6, 8, 9][game_diff];
     enemy_typ  := 2;
     end;

     if timer > 40$00 and timer <= 60$00 then
     begin
     enemy_count := [8, 9, 10][game_diff];
     enemy_typ  := 3;
     end;

     if timer > 60$00 then
     begin
     enemy_count := [10, 12, 14][game_diff];
     enemy_typ  := 3;
     end;


End;

Export am_com2;
Every 0$01 trigger timer >= [8$00, 8$30, 9$00][game_diff] and game_type = 1 do
var area;
begin

     // Przygotuj fejkowego dowodce amerykanow
     uc_nation := 1;
     uc_side := 4;

     hc_sex := sex_male;
     hc_class := 1;  // nie pojawi siê na mapie wiêc skill nie ma znaczenia ;d
     hc_gallery := '';
     hc_name := '';

     am_com2 := CreateHuman;

     SayRadio(am_com2, 'D-rus');

     area := [north_spawn, south_spawn];

     While(true) do // zapêtlane ataki
     begin
     Wait(Rand(6$30, 8$32));
             
     RussianAttack(3, enemy_count, enemy_typ, area);

     if (timer > [55$00, 45$00, 35$00][Difficulty]) then
        begin
        Wait(Rand(0$30, 1$30));
        RussianAttack(3, enemy_count/2, enemy_typ, area);
        end;
     end;

End;


// Posi³ki dla Amerykanów
Every 0$01 trigger GetResourceType(GetBase(jota_base), mat_siberit) = force_timer do
var i, un;
begin


     // wiadomosc
        SayRadio(am_com2, 'D-help');

     // odliczanie
        Wait(Rand(3$21, 7$39));

     // je¿eli na mapie sa wrogie jednostki to czekaj az zgina
        Repeat
         Wait(0$01);
        Until FilterAllUnits([f_side, 3]) = 0;

     // spawn jednostek
           uc_side := 1;
           uc_nation := 1;

           for i = 1 to (3+game_diff) do
               begin
               un := CreateHumanWithClass(Rand(1,4), game_skill);
               PlaceUnitArea(un, south_spawn, false);
               end;

           Case game_diff of
           1: CreateVehicleWithDriver(us_heavy_tracked, engine_combustion, us_double_gun, south_spawn, 0, game_skill);
           2: CreateVehicleWithDriver(us_medium_tracked, engine_combustion, us_double_gun, south_spawn, 0, game_skill);
           3: CreateVehicleWithDriver(us_medium_tracked, engine_combustion, us_light_gun, south_spawn, 0, game_skill);
           end;

     // kamera
     DialogueOn;
      CenterOnXY(91, 115);
       Wait(0$0.3);
     DialogueOff;

End;



Export Function AmericanAttack(side, num, typ, list);
var i, un, filter, veh, chassis, weapon, f;
begin

     uc_side := side;
     uc_nation := nation_american;

     chassis := [us_medium_tracked, us_heavy_tracked];
     weapon  := [us_machine_gun, us_gatling_gun, us_double_gun, us_heavy_gun, us_rocket_launcher, 97];


     // select type of attack
        Case typ of
        1: begin  // easy

           for i = 1 to num do
               begin
               vc_chassis := chassis[1];
               vc_engine  := engine_combustion;
               vc_control := control_manual;
               vc_weapon  := weapon[Rand(1,3)];

               veh := CreateVehicle; 

               f := Rand(1,2);

               if f = 1 then
               SetDir(veh, 3)
                else
               SetDir(veh, 1);

               PlaceUnitArea(veh, list[f], false);

               un := CreateHumanWithClass(1, game_eskill);
               PlaceHumanInUnit(un, veh);
               end;


           end;


        2: begin  // medium

           for i = 1 to num do
               begin
               vc_chassis := chassis[Rand(1,2)];
               vc_engine  := engine_combustion;
               vc_control := control_manual;
               vc_weapon  := weapon[Rand(1,3)];

               veh := CreateVehicle;

               f := Rand(1,2);

               if f = 1 then
               SetDir(veh, 3)
                else
               SetDir(veh, 1);
               
               PlaceUnitArea(veh, list[f], false);

               un := CreateHumanWithClass(1, game_eskill);
               PlaceHumanInUnit(un, veh);
               end;


           for i = 1 to 3 do
               begin
               un := CreateHumanWithClass(class_sniper, game_eskill);
               PlaceUnitArea(un, list[f], false);
               end;


           End;


        3: begin  // hard

           for i = 1 to num do
               begin
               vc_chassis := chassis[2];
               vc_engine  := engine_combustion;
               vc_control := control_manual;
               vc_weapon  := weapon[Rand(3,6)];

               veh := CreateVehicle;

               f := Rand(1,2);

               if f = 1 then
               SetDir(veh, 3)
                else
               SetDir(veh, 1);
               
               PlaceUnitArea(veh, list[f], false);

               un := CreateHumanWithClass(1, game_eskill);
               PlaceHumanInUnit(un, veh);
               end;

          end;
     end;
End;


// GAME_TYPE 2
Every 0$01 trigger game_type = 2 and depot_captured do
var filter, enemy, i;
begin
enable;


     filter := FilterAllUnits([f_side, 1]);
     enemy  := FilterAllUnits([f_or, [f_side, 3], [f_side, 6]]);

     if filter > 0 then
        for i = 1 to filter do
            if not HasTask(filter[i]) then
               ComAttackUnit(filter[i], NearestUnitToUnit(enemy, filter[i]));

End;



// Legion
// GAME_TYPE 2
Every 0$01 trigger game_type = 2 do
var filter, enemy, i;
begin
enable;


     filter := FilterAllUnits([f_side, 8]);
     enemy  := FilterAllUnits([f_or, [f_side, 3], [f_side, 6]]);

     if filter > 0 then
        for i = 1 to filter do
            if not HasTask(filter[i]) then
               ComAttackUnit(filter[i], NearestUnitToUnit(enemy, filter[i]));

End;
