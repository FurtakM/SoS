// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10637: LD_EXP 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: PUSH
10646: LD_INT 22
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: PUSH
10675: LD_INT 0
10677: EQUAL
10678: AND
10679: IFFALSE 10691
10681: GO 10683
10683: DISABLE
// YouLost ( peo-lose ) ;
10684: LD_STRING peo-lose
10686: PPUSH
10687: CALL_OW 104
10691: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10692: LD_EXP 1
10696: PUSH
10697: LD_INT 2
10699: EQUAL
10700: PUSH
10701: LD_INT 22
10703: PUSH
10704: LD_INT 3
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 21
10713: PUSH
10714: LD_INT 1
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PPUSH
10725: CALL_OW 69
10729: PUSH
10730: LD_INT 0
10732: EQUAL
10733: AND
10734: IFFALSE 10746
10736: GO 10738
10738: DISABLE
// YouLost ( peo-lose ) ;
10739: LD_STRING peo-lose
10741: PPUSH
10742: CALL_OW 104
10746: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
10747: LD_OWVAR 2
10751: PPUSH
10752: CALL 10510 0 1
10756: PUSH
10757: LD_EXP 5
10761: GREATEREQUAL
10762: IFFALSE 10848
10764: GO 10766
10766: DISABLE
10767: LD_INT 0
10769: PPUSH
// begin if GetSide ( jota_base ) = your_side then
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 255
10777: PUSH
10778: LD_OWVAR 2
10782: EQUAL
10783: IFFALSE 10826
// begin for i = 1 to 3 do
10785: LD_ADDR_VAR 0 1
10789: PUSH
10790: DOUBLE
10791: LD_INT 1
10793: DEC
10794: ST_TO_ADDR
10795: LD_INT 3
10797: PUSH
10798: FOR_TO
10799: IFFALSE 10813
// AddMedal ( med , 1 ) ;
10801: LD_STRING med
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 101
10811: GO 10798
10813: POP
10814: POP
// GiveMedals ( MAIN ) ;
10815: LD_STRING MAIN
10817: PPUSH
10818: CALL_OW 102
// YouWin ;
10822: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 255
10833: PUSH
10834: LD_OWVAR 2
10838: NONEQUAL
10839: IFFALSE 10848
// YouLost ( source ) ;
10841: LD_STRING source
10843: PPUSH
10844: CALL_OW 104
// end ; end_of_file
10848: PPOPN 1
10850: END
// every 2 2$05 + 0 0$11 do
10851: GO 10853
10853: DISABLE
// begin enable ;
10854: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10855: LD_INT 1
10857: PPUSH
10858: LD_INT 5
10860: PPUSH
10861: CALL_OW 12
10865: PPUSH
10866: LD_INT 7
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
10876: LD_INT 350
10878: PPUSH
10879: LD_INT 1295
10881: PPUSH
10882: CALL_OW 12
10886: PPUSH
10887: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
10891: LD_INT 1
10893: PPUSH
10894: LD_INT 5
10896: PPUSH
10897: CALL_OW 12
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 57
// end ;
10909: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
10910: LD_EXP 1
10914: PUSH
10915: LD_INT 2
10917: EQUAL
10918: PUSH
10919: LD_EXP 8
10923: PUSH
10924: LD_INT 0
10926: EQUAL
10927: AND
10928: IFFALSE 11018
10930: GO 10932
10932: DISABLE
// begin enable ;
10933: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10934: LD_INT 1
10936: PPUSH
10937: LD_INT 5
10939: PPUSH
10940: CALL_OW 12
10944: PPUSH
10945: LD_INT 7
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
10955: LD_INT 350
10957: PPUSH
10958: LD_INT 1750
10960: PPUSH
10961: CALL_OW 12
10965: PPUSH
10966: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
10970: LD_EXP 6
10974: PUSH
10975: LD_INT 73500
10977: PUSH
10978: LD_INT 63000
10980: PUSH
10981: LD_INT 52500
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_EXP 2
10993: ARRAY
10994: LESSEQUAL
10995: IFFALSE 11018
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
10997: LD_INT 1
10999: PPUSH
11000: LD_INT 5
11002: PPUSH
11003: CALL_OW 12
11007: PPUSH
11008: LD_INT 12
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 55
// end ; end_of_file
11018: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11019: LD_VAR 0 1
11023: PPUSH
11024: LD_VAR 0 2
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: CALL 26032 0 3
// end ;
11038: PPOPN 3
11040: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: CALL 25934 0 1
// if un = jota_base then
11050: LD_VAR 0 1
11054: PUSH
11055: LD_INT 1
11057: EQUAL
11058: IFFALSE 11067
// YouLost ( jota-lose ) ;
11060: LD_STRING jota-lose
11062: PPUSH
11063: CALL_OW 104
// if game_type = 2 and depot_captured = false then
11067: LD_EXP 1
11071: PUSH
11072: LD_INT 2
11074: EQUAL
11075: PUSH
11076: LD_EXP 8
11080: PUSH
11081: LD_INT 0
11083: EQUAL
11084: AND
11085: IFFALSE 11400
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL_OW 255
11096: PUSH
11097: LD_INT 1
11099: EQUAL
11100: PUSH
11101: LD_VAR 0 1
11105: PUSH
11106: LD_INT 11
11108: PPUSH
11109: LD_INT 21
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PPUSH
11119: CALL_OW 70
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 30
11129: PUSH
11130: LD_INT 6
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 30
11139: PUSH
11140: LD_INT 10
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 30
11149: PUSH
11150: LD_INT 7
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 30
11159: PUSH
11160: LD_INT 8
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: PPUSH
11186: CALL_OW 69
11190: DIFF
11191: IN
11192: AND
11193: IFFALSE 11279
// begin ai_build := ai_build ^ GetBType ( un ) ;
11195: LD_ADDR_EXP 10
11199: PUSH
11200: LD_EXP 10
11204: PUSH
11205: LD_VAR 0 1
11209: PPUSH
11210: CALL_OW 266
11214: ADD
11215: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
11216: LD_ADDR_EXP 10
11220: PUSH
11221: LD_EXP 10
11225: PUSH
11226: LD_VAR 0 1
11230: PPUSH
11231: CALL_OW 250
11235: ADD
11236: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
11237: LD_ADDR_EXP 10
11241: PUSH
11242: LD_EXP 10
11246: PUSH
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 251
11256: ADD
11257: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
11258: LD_ADDR_EXP 10
11262: PUSH
11263: LD_EXP 10
11267: PUSH
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL_OW 254
11277: ADD
11278: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL_OW 255
11288: PUSH
11289: LD_INT 1
11291: EQUAL
11292: PUSH
11293: LD_VAR 0 1
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PPUSH
11308: CALL_OW 69
11312: IN
11313: AND
11314: IFFALSE 11400
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
11316: LD_ADDR_EXP 11
11320: PUSH
11321: LD_EXP 11
11325: PUSH
11326: LD_VAR 0 1
11330: PPUSH
11331: CALL_OW 265
11335: ADD
11336: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
11337: LD_ADDR_EXP 11
11341: PUSH
11342: LD_EXP 11
11346: PUSH
11347: LD_VAR 0 1
11351: PPUSH
11352: CALL_OW 262
11356: ADD
11357: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
11358: LD_ADDR_EXP 11
11362: PUSH
11363: LD_EXP 11
11367: PUSH
11368: LD_VAR 0 1
11372: PPUSH
11373: CALL_OW 263
11377: ADD
11378: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
11379: LD_ADDR_EXP 11
11383: PUSH
11384: LD_EXP 11
11388: PUSH
11389: LD_VAR 0 1
11393: PPUSH
11394: CALL_OW 264
11398: ADD
11399: ST_TO_ADDR
// end ; end ; end ;
11400: PPOPN 1
11402: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11403: LD_VAR 0 1
11407: PPUSH
11408: LD_VAR 0 2
11412: PPUSH
11413: CALL 26056 0 2
// end ;
11417: PPOPN 2
11419: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL 26040 0 1
// end ; end_of_file
11429: PPOPN 1
11431: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11432: LD_INT 0
11434: PPUSH
// ar_miner := 81 ;
11435: LD_ADDR_EXP 28
11439: PUSH
11440: LD_INT 81
11442: ST_TO_ADDR
// ar_crane := 88 ;
11443: LD_ADDR_EXP 27
11447: PUSH
11448: LD_INT 88
11450: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11451: LD_ADDR_EXP 22
11455: PUSH
11456: LD_INT 89
11458: ST_TO_ADDR
// us_hack := 99 ;
11459: LD_ADDR_EXP 23
11463: PUSH
11464: LD_INT 99
11466: ST_TO_ADDR
// us_artillery := 97 ;
11467: LD_ADDR_EXP 24
11471: PUSH
11472: LD_INT 97
11474: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11475: LD_ADDR_EXP 25
11479: PUSH
11480: LD_INT 91
11482: ST_TO_ADDR
// ar_mortar := 92 ;
11483: LD_ADDR_EXP 26
11487: PUSH
11488: LD_INT 92
11490: ST_TO_ADDR
// ru_radar := 98 ;
11491: LD_ADDR_EXP 21
11495: PUSH
11496: LD_INT 98
11498: ST_TO_ADDR
// tech_Artillery := 80 ;
11499: LD_ADDR_EXP 29
11503: PUSH
11504: LD_INT 80
11506: ST_TO_ADDR
// tech_RadMat := 81 ;
11507: LD_ADDR_EXP 30
11511: PUSH
11512: LD_INT 81
11514: ST_TO_ADDR
// tech_BasicTools := 82 ;
11515: LD_ADDR_EXP 31
11519: PUSH
11520: LD_INT 82
11522: ST_TO_ADDR
// tech_Cargo := 83 ;
11523: LD_ADDR_EXP 32
11527: PUSH
11528: LD_INT 83
11530: ST_TO_ADDR
// tech_Track := 84 ;
11531: LD_ADDR_EXP 33
11535: PUSH
11536: LD_INT 84
11538: ST_TO_ADDR
// tech_Crane := 85 ;
11539: LD_ADDR_EXP 34
11543: PUSH
11544: LD_INT 85
11546: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11547: LD_ADDR_EXP 35
11551: PUSH
11552: LD_INT 86
11554: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11555: LD_ADDR_EXP 36
11559: PUSH
11560: LD_INT 87
11562: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11563: LD_ADDR_EXP 37
11567: PUSH
11568: LD_INT 88
11570: ST_TO_ADDR
// class_mastodont := 31 ;
11571: LD_ADDR_EXP 38
11575: PUSH
11576: LD_INT 31
11578: ST_TO_ADDR
// class_horse := 21 ;
11579: LD_ADDR_EXP 39
11583: PUSH
11584: LD_INT 21
11586: ST_TO_ADDR
// end ;
11587: LD_VAR 0 1
11591: RET
// every 1 do
11592: GO 11594
11594: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11595: CALL 11432 0 0
11599: END
// every 0 0$1 do
11600: GO 11602
11602: DISABLE
// begin enable ;
11603: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11604: LD_STRING updateTimer(
11606: PUSH
11607: LD_OWVAR 1
11611: STR
11612: PUSH
11613: LD_STRING );
11615: STR
11616: PPUSH
11617: CALL_OW 559
// end ;
11621: END
// export function SOS_MapStart ( ) ; begin
11622: LD_INT 0
11624: PPUSH
// if streamModeActive then
11625: LD_EXP 40
11629: IFFALSE 11638
// DefineStreamItems ( true ) ;
11631: LD_INT 1
11633: PPUSH
11634: CALL 13288 0 1
// UpdateFactoryWaypoints ( ) ;
11638: CALL 26872 0 0
// end ;
11642: LD_VAR 0 1
11646: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11647: LD_INT 0
11649: PPUSH
// if p2 = 100 then
11650: LD_VAR 0 2
11654: PUSH
11655: LD_INT 100
11657: EQUAL
11658: IFFALSE 12661
// begin if not StreamModeActive then
11660: LD_EXP 40
11664: NOT
11665: IFFALSE 11675
// StreamModeActive := true ;
11667: LD_ADDR_EXP 40
11671: PUSH
11672: LD_INT 1
11674: ST_TO_ADDR
// if p3 = 0 then
11675: LD_VAR 0 3
11679: PUSH
11680: LD_INT 0
11682: EQUAL
11683: IFFALSE 11689
// InitStreamMode ;
11685: CALL 12824 0 0
// if p3 = 1 then
11689: LD_VAR 0 3
11693: PUSH
11694: LD_INT 1
11696: EQUAL
11697: IFFALSE 11707
// sRocket := true ;
11699: LD_ADDR_EXP 45
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// if p3 = 2 then
11707: LD_VAR 0 3
11711: PUSH
11712: LD_INT 2
11714: EQUAL
11715: IFFALSE 11725
// sSpeed := true ;
11717: LD_ADDR_EXP 44
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if p3 = 3 then
11725: LD_VAR 0 3
11729: PUSH
11730: LD_INT 3
11732: EQUAL
11733: IFFALSE 11743
// sEngine := true ;
11735: LD_ADDR_EXP 46
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// if p3 = 4 then
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 4
11750: EQUAL
11751: IFFALSE 11761
// sSpec := true ;
11753: LD_ADDR_EXP 43
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// if p3 = 5 then
11761: LD_VAR 0 3
11765: PUSH
11766: LD_INT 5
11768: EQUAL
11769: IFFALSE 11779
// sLevel := true ;
11771: LD_ADDR_EXP 47
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if p3 = 6 then
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 6
11786: EQUAL
11787: IFFALSE 11797
// sArmoury := true ;
11789: LD_ADDR_EXP 48
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// if p3 = 7 then
11797: LD_VAR 0 3
11801: PUSH
11802: LD_INT 7
11804: EQUAL
11805: IFFALSE 11815
// sRadar := true ;
11807: LD_ADDR_EXP 49
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// if p3 = 8 then
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 8
11822: EQUAL
11823: IFFALSE 11833
// sBunker := true ;
11825: LD_ADDR_EXP 50
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// if p3 = 9 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 9
11840: EQUAL
11841: IFFALSE 11851
// sHack := true ;
11843: LD_ADDR_EXP 51
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// if p3 = 10 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 10
11858: EQUAL
11859: IFFALSE 11869
// sFire := true ;
11861: LD_ADDR_EXP 52
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// if p3 = 11 then
11869: LD_VAR 0 3
11873: PUSH
11874: LD_INT 11
11876: EQUAL
11877: IFFALSE 11887
// sRefresh := true ;
11879: LD_ADDR_EXP 53
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// if p3 = 12 then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_INT 12
11894: EQUAL
11895: IFFALSE 11905
// sExp := true ;
11897: LD_ADDR_EXP 54
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// if p3 = 13 then
11905: LD_VAR 0 3
11909: PUSH
11910: LD_INT 13
11912: EQUAL
11913: IFFALSE 11923
// sDepot := true ;
11915: LD_ADDR_EXP 55
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// if p3 = 14 then
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 14
11930: EQUAL
11931: IFFALSE 11941
// sFlag := true ;
11933: LD_ADDR_EXP 56
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if p3 = 15 then
11941: LD_VAR 0 3
11945: PUSH
11946: LD_INT 15
11948: EQUAL
11949: IFFALSE 11959
// sKamikadze := true ;
11951: LD_ADDR_EXP 64
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// if p3 = 16 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 16
11966: EQUAL
11967: IFFALSE 11977
// sTroll := true ;
11969: LD_ADDR_EXP 65
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// if p3 = 17 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_INT 17
11984: EQUAL
11985: IFFALSE 11995
// sSlow := true ;
11987: LD_ADDR_EXP 66
11991: PUSH
11992: LD_INT 1
11994: ST_TO_ADDR
// if p3 = 18 then
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 18
12002: EQUAL
12003: IFFALSE 12013
// sLack := true ;
12005: LD_ADDR_EXP 67
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// if p3 = 19 then
12013: LD_VAR 0 3
12017: PUSH
12018: LD_INT 19
12020: EQUAL
12021: IFFALSE 12031
// sTank := true ;
12023: LD_ADDR_EXP 69
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// if p3 = 20 then
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 20
12038: EQUAL
12039: IFFALSE 12049
// sRemote := true ;
12041: LD_ADDR_EXP 70
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// if p3 = 21 then
12049: LD_VAR 0 3
12053: PUSH
12054: LD_INT 21
12056: EQUAL
12057: IFFALSE 12067
// sPowell := true ;
12059: LD_ADDR_EXP 71
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// if p3 = 22 then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_INT 22
12074: EQUAL
12075: IFFALSE 12085
// sTeleport := true ;
12077: LD_ADDR_EXP 74
12081: PUSH
12082: LD_INT 1
12084: ST_TO_ADDR
// if p3 = 23 then
12085: LD_VAR 0 3
12089: PUSH
12090: LD_INT 23
12092: EQUAL
12093: IFFALSE 12103
// sOilTower := true ;
12095: LD_ADDR_EXP 76
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// if p3 = 24 then
12103: LD_VAR 0 3
12107: PUSH
12108: LD_INT 24
12110: EQUAL
12111: IFFALSE 12121
// sShovel := true ;
12113: LD_ADDR_EXP 77
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// if p3 = 25 then
12121: LD_VAR 0 3
12125: PUSH
12126: LD_INT 25
12128: EQUAL
12129: IFFALSE 12139
// sSheik := true ;
12131: LD_ADDR_EXP 78
12135: PUSH
12136: LD_INT 1
12138: ST_TO_ADDR
// if p3 = 26 then
12139: LD_VAR 0 3
12143: PUSH
12144: LD_INT 26
12146: EQUAL
12147: IFFALSE 12157
// sEarthquake := true ;
12149: LD_ADDR_EXP 80
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// if p3 = 27 then
12157: LD_VAR 0 3
12161: PUSH
12162: LD_INT 27
12164: EQUAL
12165: IFFALSE 12175
// sAI := true ;
12167: LD_ADDR_EXP 81
12171: PUSH
12172: LD_INT 1
12174: ST_TO_ADDR
// if p3 = 28 then
12175: LD_VAR 0 3
12179: PUSH
12180: LD_INT 28
12182: EQUAL
12183: IFFALSE 12193
// sCargo := true ;
12185: LD_ADDR_EXP 84
12189: PUSH
12190: LD_INT 1
12192: ST_TO_ADDR
// if p3 = 29 then
12193: LD_VAR 0 3
12197: PUSH
12198: LD_INT 29
12200: EQUAL
12201: IFFALSE 12211
// sDLaser := true ;
12203: LD_ADDR_EXP 85
12207: PUSH
12208: LD_INT 1
12210: ST_TO_ADDR
// if p3 = 30 then
12211: LD_VAR 0 3
12215: PUSH
12216: LD_INT 30
12218: EQUAL
12219: IFFALSE 12229
// sExchange := true ;
12221: LD_ADDR_EXP 86
12225: PUSH
12226: LD_INT 1
12228: ST_TO_ADDR
// if p3 = 31 then
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 31
12236: EQUAL
12237: IFFALSE 12247
// sFac := true ;
12239: LD_ADDR_EXP 87
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// if p3 = 32 then
12247: LD_VAR 0 3
12251: PUSH
12252: LD_INT 32
12254: EQUAL
12255: IFFALSE 12265
// sPower := true ;
12257: LD_ADDR_EXP 88
12261: PUSH
12262: LD_INT 1
12264: ST_TO_ADDR
// if p3 = 33 then
12265: LD_VAR 0 3
12269: PUSH
12270: LD_INT 33
12272: EQUAL
12273: IFFALSE 12283
// sRandom := true ;
12275: LD_ADDR_EXP 89
12279: PUSH
12280: LD_INT 1
12282: ST_TO_ADDR
// if p3 = 34 then
12283: LD_VAR 0 3
12287: PUSH
12288: LD_INT 34
12290: EQUAL
12291: IFFALSE 12301
// sShield := true ;
12293: LD_ADDR_EXP 90
12297: PUSH
12298: LD_INT 1
12300: ST_TO_ADDR
// if p3 = 35 then
12301: LD_VAR 0 3
12305: PUSH
12306: LD_INT 35
12308: EQUAL
12309: IFFALSE 12319
// sTime := true ;
12311: LD_ADDR_EXP 91
12315: PUSH
12316: LD_INT 1
12318: ST_TO_ADDR
// if p3 = 36 then
12319: LD_VAR 0 3
12323: PUSH
12324: LD_INT 36
12326: EQUAL
12327: IFFALSE 12337
// sTools := true ;
12329: LD_ADDR_EXP 92
12333: PUSH
12334: LD_INT 1
12336: ST_TO_ADDR
// if p3 = 101 then
12337: LD_VAR 0 3
12341: PUSH
12342: LD_INT 101
12344: EQUAL
12345: IFFALSE 12355
// sSold := true ;
12347: LD_ADDR_EXP 57
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// if p3 = 102 then
12355: LD_VAR 0 3
12359: PUSH
12360: LD_INT 102
12362: EQUAL
12363: IFFALSE 12373
// sDiff := true ;
12365: LD_ADDR_EXP 58
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// if p3 = 103 then
12373: LD_VAR 0 3
12377: PUSH
12378: LD_INT 103
12380: EQUAL
12381: IFFALSE 12391
// sFog := true ;
12383: LD_ADDR_EXP 61
12387: PUSH
12388: LD_INT 1
12390: ST_TO_ADDR
// if p3 = 104 then
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 104
12398: EQUAL
12399: IFFALSE 12409
// sReset := true ;
12401: LD_ADDR_EXP 62
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// if p3 = 105 then
12409: LD_VAR 0 3
12413: PUSH
12414: LD_INT 105
12416: EQUAL
12417: IFFALSE 12427
// sSun := true ;
12419: LD_ADDR_EXP 63
12423: PUSH
12424: LD_INT 1
12426: ST_TO_ADDR
// if p3 = 106 then
12427: LD_VAR 0 3
12431: PUSH
12432: LD_INT 106
12434: EQUAL
12435: IFFALSE 12445
// sTiger := true ;
12437: LD_ADDR_EXP 59
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// if p3 = 107 then
12445: LD_VAR 0 3
12449: PUSH
12450: LD_INT 107
12452: EQUAL
12453: IFFALSE 12463
// sBomb := true ;
12455: LD_ADDR_EXP 60
12459: PUSH
12460: LD_INT 1
12462: ST_TO_ADDR
// if p3 = 108 then
12463: LD_VAR 0 3
12467: PUSH
12468: LD_INT 108
12470: EQUAL
12471: IFFALSE 12481
// sWound := true ;
12473: LD_ADDR_EXP 68
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// if p3 = 109 then
12481: LD_VAR 0 3
12485: PUSH
12486: LD_INT 109
12488: EQUAL
12489: IFFALSE 12499
// sBetray := true ;
12491: LD_ADDR_EXP 72
12495: PUSH
12496: LD_INT 1
12498: ST_TO_ADDR
// if p3 = 110 then
12499: LD_VAR 0 3
12503: PUSH
12504: LD_INT 110
12506: EQUAL
12507: IFFALSE 12517
// sContamin := true ;
12509: LD_ADDR_EXP 73
12513: PUSH
12514: LD_INT 1
12516: ST_TO_ADDR
// if p3 = 111 then
12517: LD_VAR 0 3
12521: PUSH
12522: LD_INT 111
12524: EQUAL
12525: IFFALSE 12535
// sOil := true ;
12527: LD_ADDR_EXP 75
12531: PUSH
12532: LD_INT 1
12534: ST_TO_ADDR
// if p3 = 112 then
12535: LD_VAR 0 3
12539: PUSH
12540: LD_INT 112
12542: EQUAL
12543: IFFALSE 12553
// sStu := true ;
12545: LD_ADDR_EXP 79
12549: PUSH
12550: LD_INT 1
12552: ST_TO_ADDR
// if p3 = 113 then
12553: LD_VAR 0 3
12557: PUSH
12558: LD_INT 113
12560: EQUAL
12561: IFFALSE 12571
// sBazooka := true ;
12563: LD_ADDR_EXP 82
12567: PUSH
12568: LD_INT 1
12570: ST_TO_ADDR
// if p3 = 114 then
12571: LD_VAR 0 3
12575: PUSH
12576: LD_INT 114
12578: EQUAL
12579: IFFALSE 12589
// sMortar := true ;
12581: LD_ADDR_EXP 83
12585: PUSH
12586: LD_INT 1
12588: ST_TO_ADDR
// if p3 = 115 then
12589: LD_VAR 0 3
12593: PUSH
12594: LD_INT 115
12596: EQUAL
12597: IFFALSE 12607
// sRanger := true ;
12599: LD_ADDR_EXP 93
12603: PUSH
12604: LD_INT 1
12606: ST_TO_ADDR
// if p3 = 116 then
12607: LD_VAR 0 3
12611: PUSH
12612: LD_INT 116
12614: EQUAL
12615: IFFALSE 12625
// sComputer := true ;
12617: LD_ADDR_EXP 94
12621: PUSH
12622: LD_INT 1
12624: ST_TO_ADDR
// if p3 = 117 then
12625: LD_VAR 0 3
12629: PUSH
12630: LD_INT 117
12632: EQUAL
12633: IFFALSE 12643
// s30 := true ;
12635: LD_ADDR_EXP 95
12639: PUSH
12640: LD_INT 1
12642: ST_TO_ADDR
// if p3 = 118 then
12643: LD_VAR 0 3
12647: PUSH
12648: LD_INT 118
12650: EQUAL
12651: IFFALSE 12661
// s60 := true ;
12653: LD_ADDR_EXP 96
12657: PUSH
12658: LD_INT 1
12660: ST_TO_ADDR
// end ; if p2 = 101 then
12661: LD_VAR 0 2
12665: PUSH
12666: LD_INT 101
12668: EQUAL
12669: IFFALSE 12797
// begin case p3 of 1 :
12671: LD_VAR 0 3
12675: PUSH
12676: LD_INT 1
12678: DOUBLE
12679: EQUAL
12680: IFTRUE 12684
12682: GO 12691
12684: POP
// hHackUnlimitedResources ; 2 :
12685: CALL 24895 0 0
12689: GO 12797
12691: LD_INT 2
12693: DOUBLE
12694: EQUAL
12695: IFTRUE 12699
12697: GO 12706
12699: POP
// hHackSetLevel10 ; 3 :
12700: CALL 25028 0 0
12704: GO 12797
12706: LD_INT 3
12708: DOUBLE
12709: EQUAL
12710: IFTRUE 12714
12712: GO 12721
12714: POP
// hHackSetLevel10YourUnits ; 4 :
12715: CALL 25113 0 0
12719: GO 12797
12721: LD_INT 4
12723: DOUBLE
12724: EQUAL
12725: IFTRUE 12729
12727: GO 12736
12729: POP
// hHackInvincible ; 5 :
12730: CALL 25561 0 0
12734: GO 12797
12736: LD_INT 5
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12751
12744: POP
// hHackInvisible ; 6 :
12745: CALL 25672 0 0
12749: GO 12797
12751: LD_INT 6
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12766
12759: POP
// hHackChangeYourSide ; 7 :
12760: CALL 25729 0 0
12764: GO 12797
12766: LD_INT 7
12768: DOUBLE
12769: EQUAL
12770: IFTRUE 12774
12772: GO 12781
12774: POP
// hHackChangeUnitSide ; 8 :
12775: CALL 25771 0 0
12779: GO 12797
12781: LD_INT 8
12783: DOUBLE
12784: EQUAL
12785: IFTRUE 12789
12787: GO 12796
12789: POP
// hHackFog ; end ;
12790: CALL 25872 0 0
12794: GO 12797
12796: POP
// end ; end ;
12797: LD_VAR 0 7
12801: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12802: GO 12804
12804: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12805: LD_STRING initStreamRollete();
12807: PPUSH
12808: CALL_OW 559
// InitStreamMode ;
12812: CALL 12824 0 0
// DefineStreamItems ( false ) ;
12816: LD_INT 0
12818: PPUSH
12819: CALL 13288 0 1
// end ;
12823: END
// function InitStreamMode ; begin
12824: LD_INT 0
12826: PPUSH
// streamModeActive := false ;
12827: LD_ADDR_EXP 40
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// normalCounter := 36 ;
12835: LD_ADDR_EXP 41
12839: PUSH
12840: LD_INT 36
12842: ST_TO_ADDR
// hardcoreCounter := 18 ;
12843: LD_ADDR_EXP 42
12847: PUSH
12848: LD_INT 18
12850: ST_TO_ADDR
// sRocket := false ;
12851: LD_ADDR_EXP 45
12855: PUSH
12856: LD_INT 0
12858: ST_TO_ADDR
// sSpeed := false ;
12859: LD_ADDR_EXP 44
12863: PUSH
12864: LD_INT 0
12866: ST_TO_ADDR
// sEngine := false ;
12867: LD_ADDR_EXP 46
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// sSpec := false ;
12875: LD_ADDR_EXP 43
12879: PUSH
12880: LD_INT 0
12882: ST_TO_ADDR
// sLevel := false ;
12883: LD_ADDR_EXP 47
12887: PUSH
12888: LD_INT 0
12890: ST_TO_ADDR
// sArmoury := false ;
12891: LD_ADDR_EXP 48
12895: PUSH
12896: LD_INT 0
12898: ST_TO_ADDR
// sRadar := false ;
12899: LD_ADDR_EXP 49
12903: PUSH
12904: LD_INT 0
12906: ST_TO_ADDR
// sBunker := false ;
12907: LD_ADDR_EXP 50
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
// sHack := false ;
12915: LD_ADDR_EXP 51
12919: PUSH
12920: LD_INT 0
12922: ST_TO_ADDR
// sFire := false ;
12923: LD_ADDR_EXP 52
12927: PUSH
12928: LD_INT 0
12930: ST_TO_ADDR
// sRefresh := false ;
12931: LD_ADDR_EXP 53
12935: PUSH
12936: LD_INT 0
12938: ST_TO_ADDR
// sExp := false ;
12939: LD_ADDR_EXP 54
12943: PUSH
12944: LD_INT 0
12946: ST_TO_ADDR
// sDepot := false ;
12947: LD_ADDR_EXP 55
12951: PUSH
12952: LD_INT 0
12954: ST_TO_ADDR
// sFlag := false ;
12955: LD_ADDR_EXP 56
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// sKamikadze := false ;
12963: LD_ADDR_EXP 64
12967: PUSH
12968: LD_INT 0
12970: ST_TO_ADDR
// sTroll := false ;
12971: LD_ADDR_EXP 65
12975: PUSH
12976: LD_INT 0
12978: ST_TO_ADDR
// sSlow := false ;
12979: LD_ADDR_EXP 66
12983: PUSH
12984: LD_INT 0
12986: ST_TO_ADDR
// sLack := false ;
12987: LD_ADDR_EXP 67
12991: PUSH
12992: LD_INT 0
12994: ST_TO_ADDR
// sTank := false ;
12995: LD_ADDR_EXP 69
12999: PUSH
13000: LD_INT 0
13002: ST_TO_ADDR
// sRemote := false ;
13003: LD_ADDR_EXP 70
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// sPowell := false ;
13011: LD_ADDR_EXP 71
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// sTeleport := false ;
13019: LD_ADDR_EXP 74
13023: PUSH
13024: LD_INT 0
13026: ST_TO_ADDR
// sOilTower := false ;
13027: LD_ADDR_EXP 76
13031: PUSH
13032: LD_INT 0
13034: ST_TO_ADDR
// sShovel := false ;
13035: LD_ADDR_EXP 77
13039: PUSH
13040: LD_INT 0
13042: ST_TO_ADDR
// sSheik := false ;
13043: LD_ADDR_EXP 78
13047: PUSH
13048: LD_INT 0
13050: ST_TO_ADDR
// sEarthquake := false ;
13051: LD_ADDR_EXP 80
13055: PUSH
13056: LD_INT 0
13058: ST_TO_ADDR
// sAI := false ;
13059: LD_ADDR_EXP 81
13063: PUSH
13064: LD_INT 0
13066: ST_TO_ADDR
// sCargo := false ;
13067: LD_ADDR_EXP 84
13071: PUSH
13072: LD_INT 0
13074: ST_TO_ADDR
// sDLaser := false ;
13075: LD_ADDR_EXP 85
13079: PUSH
13080: LD_INT 0
13082: ST_TO_ADDR
// sExchange := false ;
13083: LD_ADDR_EXP 86
13087: PUSH
13088: LD_INT 0
13090: ST_TO_ADDR
// sFac := false ;
13091: LD_ADDR_EXP 87
13095: PUSH
13096: LD_INT 0
13098: ST_TO_ADDR
// sPower := false ;
13099: LD_ADDR_EXP 88
13103: PUSH
13104: LD_INT 0
13106: ST_TO_ADDR
// sRandom := false ;
13107: LD_ADDR_EXP 89
13111: PUSH
13112: LD_INT 0
13114: ST_TO_ADDR
// sShield := false ;
13115: LD_ADDR_EXP 90
13119: PUSH
13120: LD_INT 0
13122: ST_TO_ADDR
// sTime := false ;
13123: LD_ADDR_EXP 91
13127: PUSH
13128: LD_INT 0
13130: ST_TO_ADDR
// sTools := false ;
13131: LD_ADDR_EXP 92
13135: PUSH
13136: LD_INT 0
13138: ST_TO_ADDR
// sSold := false ;
13139: LD_ADDR_EXP 57
13143: PUSH
13144: LD_INT 0
13146: ST_TO_ADDR
// sDiff := false ;
13147: LD_ADDR_EXP 58
13151: PUSH
13152: LD_INT 0
13154: ST_TO_ADDR
// sFog := false ;
13155: LD_ADDR_EXP 61
13159: PUSH
13160: LD_INT 0
13162: ST_TO_ADDR
// sReset := false ;
13163: LD_ADDR_EXP 62
13167: PUSH
13168: LD_INT 0
13170: ST_TO_ADDR
// sSun := false ;
13171: LD_ADDR_EXP 63
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// sTiger := false ;
13179: LD_ADDR_EXP 59
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// sBomb := false ;
13187: LD_ADDR_EXP 60
13191: PUSH
13192: LD_INT 0
13194: ST_TO_ADDR
// sWound := false ;
13195: LD_ADDR_EXP 68
13199: PUSH
13200: LD_INT 0
13202: ST_TO_ADDR
// sBetray := false ;
13203: LD_ADDR_EXP 72
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// sContamin := false ;
13211: LD_ADDR_EXP 73
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// sOil := false ;
13219: LD_ADDR_EXP 75
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// sStu := false ;
13227: LD_ADDR_EXP 79
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// sBazooka := false ;
13235: LD_ADDR_EXP 82
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// sMortar := false ;
13243: LD_ADDR_EXP 83
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// sRanger := false ;
13251: LD_ADDR_EXP 93
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// sComputer := false ;
13259: LD_ADDR_EXP 94
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// s30 := false ;
13267: LD_ADDR_EXP 95
13271: PUSH
13272: LD_INT 0
13274: ST_TO_ADDR
// s60 := false ;
13275: LD_ADDR_EXP 96
13279: PUSH
13280: LD_INT 0
13282: ST_TO_ADDR
// end ;
13283: LD_VAR 0 1
13287: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13288: LD_INT 0
13290: PPUSH
13291: PPUSH
13292: PPUSH
13293: PPUSH
13294: PPUSH
13295: PPUSH
13296: PPUSH
// result := [ ] ;
13297: LD_ADDR_VAR 0 2
13301: PUSH
13302: EMPTY
13303: ST_TO_ADDR
// if campaign_id = 1 then
13304: LD_OWVAR 69
13308: PUSH
13309: LD_INT 1
13311: EQUAL
13312: IFFALSE 16478
// begin case mission_number of 1 :
13314: LD_OWVAR 70
13318: PUSH
13319: LD_INT 1
13321: DOUBLE
13322: EQUAL
13323: IFTRUE 13327
13325: GO 13403
13327: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13328: LD_ADDR_VAR 0 2
13332: PUSH
13333: LD_INT 2
13335: PUSH
13336: LD_INT 4
13338: PUSH
13339: LD_INT 11
13341: PUSH
13342: LD_INT 12
13344: PUSH
13345: LD_INT 15
13347: PUSH
13348: LD_INT 16
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_INT 23
13356: PUSH
13357: LD_INT 26
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 101
13373: PUSH
13374: LD_INT 102
13376: PUSH
13377: LD_INT 106
13379: PUSH
13380: LD_INT 116
13382: PUSH
13383: LD_INT 117
13385: PUSH
13386: LD_INT 118
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: ST_TO_ADDR
13401: GO 16476
13403: LD_INT 2
13405: DOUBLE
13406: EQUAL
13407: IFTRUE 13411
13409: GO 13495
13411: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13412: LD_ADDR_VAR 0 2
13416: PUSH
13417: LD_INT 2
13419: PUSH
13420: LD_INT 4
13422: PUSH
13423: LD_INT 11
13425: PUSH
13426: LD_INT 12
13428: PUSH
13429: LD_INT 15
13431: PUSH
13432: LD_INT 16
13434: PUSH
13435: LD_INT 22
13437: PUSH
13438: LD_INT 23
13440: PUSH
13441: LD_INT 26
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 101
13457: PUSH
13458: LD_INT 102
13460: PUSH
13461: LD_INT 105
13463: PUSH
13464: LD_INT 106
13466: PUSH
13467: LD_INT 108
13469: PUSH
13470: LD_INT 116
13472: PUSH
13473: LD_INT 117
13475: PUSH
13476: LD_INT 118
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: ST_TO_ADDR
13493: GO 16476
13495: LD_INT 3
13497: DOUBLE
13498: EQUAL
13499: IFTRUE 13503
13501: GO 13591
13503: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13504: LD_ADDR_VAR 0 2
13508: PUSH
13509: LD_INT 2
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: LD_INT 5
13517: PUSH
13518: LD_INT 11
13520: PUSH
13521: LD_INT 12
13523: PUSH
13524: LD_INT 15
13526: PUSH
13527: LD_INT 16
13529: PUSH
13530: LD_INT 22
13532: PUSH
13533: LD_INT 26
13535: PUSH
13536: LD_INT 36
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 101
13553: PUSH
13554: LD_INT 102
13556: PUSH
13557: LD_INT 105
13559: PUSH
13560: LD_INT 106
13562: PUSH
13563: LD_INT 108
13565: PUSH
13566: LD_INT 116
13568: PUSH
13569: LD_INT 117
13571: PUSH
13572: LD_INT 118
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: ST_TO_ADDR
13589: GO 16476
13591: LD_INT 4
13593: DOUBLE
13594: EQUAL
13595: IFTRUE 13599
13597: GO 13695
13599: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13600: LD_ADDR_VAR 0 2
13604: PUSH
13605: LD_INT 2
13607: PUSH
13608: LD_INT 4
13610: PUSH
13611: LD_INT 5
13613: PUSH
13614: LD_INT 8
13616: PUSH
13617: LD_INT 11
13619: PUSH
13620: LD_INT 12
13622: PUSH
13623: LD_INT 15
13625: PUSH
13626: LD_INT 16
13628: PUSH
13629: LD_INT 22
13631: PUSH
13632: LD_INT 23
13634: PUSH
13635: LD_INT 26
13637: PUSH
13638: LD_INT 36
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 101
13657: PUSH
13658: LD_INT 102
13660: PUSH
13661: LD_INT 105
13663: PUSH
13664: LD_INT 106
13666: PUSH
13667: LD_INT 108
13669: PUSH
13670: LD_INT 116
13672: PUSH
13673: LD_INT 117
13675: PUSH
13676: LD_INT 118
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: ST_TO_ADDR
13693: GO 16476
13695: LD_INT 5
13697: DOUBLE
13698: EQUAL
13699: IFTRUE 13703
13701: GO 13815
13703: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13704: LD_ADDR_VAR 0 2
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: LD_INT 4
13714: PUSH
13715: LD_INT 5
13717: PUSH
13718: LD_INT 6
13720: PUSH
13721: LD_INT 8
13723: PUSH
13724: LD_INT 11
13726: PUSH
13727: LD_INT 12
13729: PUSH
13730: LD_INT 15
13732: PUSH
13733: LD_INT 16
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_INT 23
13741: PUSH
13742: LD_INT 25
13744: PUSH
13745: LD_INT 26
13747: PUSH
13748: LD_INT 36
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 101
13769: PUSH
13770: LD_INT 102
13772: PUSH
13773: LD_INT 105
13775: PUSH
13776: LD_INT 106
13778: PUSH
13779: LD_INT 108
13781: PUSH
13782: LD_INT 109
13784: PUSH
13785: LD_INT 112
13787: PUSH
13788: LD_INT 116
13790: PUSH
13791: LD_INT 117
13793: PUSH
13794: LD_INT 118
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: ST_TO_ADDR
13813: GO 16476
13815: LD_INT 6
13817: DOUBLE
13818: EQUAL
13819: IFTRUE 13823
13821: GO 13955
13823: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13824: LD_ADDR_VAR 0 2
13828: PUSH
13829: LD_INT 2
13831: PUSH
13832: LD_INT 4
13834: PUSH
13835: LD_INT 5
13837: PUSH
13838: LD_INT 6
13840: PUSH
13841: LD_INT 8
13843: PUSH
13844: LD_INT 11
13846: PUSH
13847: LD_INT 12
13849: PUSH
13850: LD_INT 15
13852: PUSH
13853: LD_INT 16
13855: PUSH
13856: LD_INT 20
13858: PUSH
13859: LD_INT 21
13861: PUSH
13862: LD_INT 22
13864: PUSH
13865: LD_INT 23
13867: PUSH
13868: LD_INT 25
13870: PUSH
13871: LD_INT 26
13873: PUSH
13874: LD_INT 30
13876: PUSH
13877: LD_INT 31
13879: PUSH
13880: LD_INT 32
13882: PUSH
13883: LD_INT 36
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 101
13909: PUSH
13910: LD_INT 102
13912: PUSH
13913: LD_INT 105
13915: PUSH
13916: LD_INT 106
13918: PUSH
13919: LD_INT 108
13921: PUSH
13922: LD_INT 109
13924: PUSH
13925: LD_INT 112
13927: PUSH
13928: LD_INT 116
13930: PUSH
13931: LD_INT 117
13933: PUSH
13934: LD_INT 118
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: ST_TO_ADDR
13953: GO 16476
13955: LD_INT 7
13957: DOUBLE
13958: EQUAL
13959: IFTRUE 13963
13961: GO 14075
13963: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13964: LD_ADDR_VAR 0 2
13968: PUSH
13969: LD_INT 2
13971: PUSH
13972: LD_INT 4
13974: PUSH
13975: LD_INT 5
13977: PUSH
13978: LD_INT 7
13980: PUSH
13981: LD_INT 11
13983: PUSH
13984: LD_INT 12
13986: PUSH
13987: LD_INT 15
13989: PUSH
13990: LD_INT 16
13992: PUSH
13993: LD_INT 20
13995: PUSH
13996: LD_INT 21
13998: PUSH
13999: LD_INT 22
14001: PUSH
14002: LD_INT 23
14004: PUSH
14005: LD_INT 25
14007: PUSH
14008: LD_INT 26
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 101
14029: PUSH
14030: LD_INT 102
14032: PUSH
14033: LD_INT 103
14035: PUSH
14036: LD_INT 105
14038: PUSH
14039: LD_INT 106
14041: PUSH
14042: LD_INT 108
14044: PUSH
14045: LD_INT 112
14047: PUSH
14048: LD_INT 116
14050: PUSH
14051: LD_INT 117
14053: PUSH
14054: LD_INT 118
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: ST_TO_ADDR
14073: GO 16476
14075: LD_INT 8
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14083
14081: GO 14223
14083: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_INT 2
14091: PUSH
14092: LD_INT 4
14094: PUSH
14095: LD_INT 5
14097: PUSH
14098: LD_INT 6
14100: PUSH
14101: LD_INT 7
14103: PUSH
14104: LD_INT 8
14106: PUSH
14107: LD_INT 11
14109: PUSH
14110: LD_INT 12
14112: PUSH
14113: LD_INT 15
14115: PUSH
14116: LD_INT 16
14118: PUSH
14119: LD_INT 20
14121: PUSH
14122: LD_INT 21
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_INT 23
14130: PUSH
14131: LD_INT 25
14133: PUSH
14134: LD_INT 26
14136: PUSH
14137: LD_INT 30
14139: PUSH
14140: LD_INT 31
14142: PUSH
14143: LD_INT 32
14145: PUSH
14146: LD_INT 36
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: PUSH
14171: LD_INT 101
14173: PUSH
14174: LD_INT 102
14176: PUSH
14177: LD_INT 103
14179: PUSH
14180: LD_INT 105
14182: PUSH
14183: LD_INT 106
14185: PUSH
14186: LD_INT 108
14188: PUSH
14189: LD_INT 109
14191: PUSH
14192: LD_INT 112
14194: PUSH
14195: LD_INT 116
14197: PUSH
14198: LD_INT 117
14200: PUSH
14201: LD_INT 118
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: ST_TO_ADDR
14221: GO 16476
14223: LD_INT 9
14225: DOUBLE
14226: EQUAL
14227: IFTRUE 14231
14229: GO 14379
14231: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14232: LD_ADDR_VAR 0 2
14236: PUSH
14237: LD_INT 2
14239: PUSH
14240: LD_INT 4
14242: PUSH
14243: LD_INT 5
14245: PUSH
14246: LD_INT 6
14248: PUSH
14249: LD_INT 7
14251: PUSH
14252: LD_INT 8
14254: PUSH
14255: LD_INT 11
14257: PUSH
14258: LD_INT 12
14260: PUSH
14261: LD_INT 15
14263: PUSH
14264: LD_INT 16
14266: PUSH
14267: LD_INT 20
14269: PUSH
14270: LD_INT 21
14272: PUSH
14273: LD_INT 22
14275: PUSH
14276: LD_INT 23
14278: PUSH
14279: LD_INT 25
14281: PUSH
14282: LD_INT 26
14284: PUSH
14285: LD_INT 28
14287: PUSH
14288: LD_INT 30
14290: PUSH
14291: LD_INT 31
14293: PUSH
14294: LD_INT 32
14296: PUSH
14297: LD_INT 36
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 101
14325: PUSH
14326: LD_INT 102
14328: PUSH
14329: LD_INT 103
14331: PUSH
14332: LD_INT 105
14334: PUSH
14335: LD_INT 106
14337: PUSH
14338: LD_INT 108
14340: PUSH
14341: LD_INT 109
14343: PUSH
14344: LD_INT 112
14346: PUSH
14347: LD_INT 114
14349: PUSH
14350: LD_INT 116
14352: PUSH
14353: LD_INT 117
14355: PUSH
14356: LD_INT 118
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: ST_TO_ADDR
14377: GO 16476
14379: LD_INT 10
14381: DOUBLE
14382: EQUAL
14383: IFTRUE 14387
14385: GO 14583
14387: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14388: LD_ADDR_VAR 0 2
14392: PUSH
14393: LD_INT 2
14395: PUSH
14396: LD_INT 4
14398: PUSH
14399: LD_INT 5
14401: PUSH
14402: LD_INT 6
14404: PUSH
14405: LD_INT 7
14407: PUSH
14408: LD_INT 8
14410: PUSH
14411: LD_INT 9
14413: PUSH
14414: LD_INT 10
14416: PUSH
14417: LD_INT 11
14419: PUSH
14420: LD_INT 12
14422: PUSH
14423: LD_INT 13
14425: PUSH
14426: LD_INT 14
14428: PUSH
14429: LD_INT 15
14431: PUSH
14432: LD_INT 16
14434: PUSH
14435: LD_INT 17
14437: PUSH
14438: LD_INT 18
14440: PUSH
14441: LD_INT 19
14443: PUSH
14444: LD_INT 20
14446: PUSH
14447: LD_INT 21
14449: PUSH
14450: LD_INT 22
14452: PUSH
14453: LD_INT 23
14455: PUSH
14456: LD_INT 24
14458: PUSH
14459: LD_INT 25
14461: PUSH
14462: LD_INT 26
14464: PUSH
14465: LD_INT 28
14467: PUSH
14468: LD_INT 30
14470: PUSH
14471: LD_INT 31
14473: PUSH
14474: LD_INT 32
14476: PUSH
14477: LD_INT 36
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 101
14513: PUSH
14514: LD_INT 102
14516: PUSH
14517: LD_INT 103
14519: PUSH
14520: LD_INT 104
14522: PUSH
14523: LD_INT 105
14525: PUSH
14526: LD_INT 106
14528: PUSH
14529: LD_INT 107
14531: PUSH
14532: LD_INT 108
14534: PUSH
14535: LD_INT 109
14537: PUSH
14538: LD_INT 110
14540: PUSH
14541: LD_INT 111
14543: PUSH
14544: LD_INT 112
14546: PUSH
14547: LD_INT 114
14549: PUSH
14550: LD_INT 116
14552: PUSH
14553: LD_INT 117
14555: PUSH
14556: LD_INT 118
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: ST_TO_ADDR
14581: GO 16476
14583: LD_INT 11
14585: DOUBLE
14586: EQUAL
14587: IFTRUE 14591
14589: GO 14795
14591: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14592: LD_ADDR_VAR 0 2
14596: PUSH
14597: LD_INT 2
14599: PUSH
14600: LD_INT 3
14602: PUSH
14603: LD_INT 4
14605: PUSH
14606: LD_INT 5
14608: PUSH
14609: LD_INT 6
14611: PUSH
14612: LD_INT 7
14614: PUSH
14615: LD_INT 8
14617: PUSH
14618: LD_INT 9
14620: PUSH
14621: LD_INT 10
14623: PUSH
14624: LD_INT 11
14626: PUSH
14627: LD_INT 12
14629: PUSH
14630: LD_INT 13
14632: PUSH
14633: LD_INT 14
14635: PUSH
14636: LD_INT 15
14638: PUSH
14639: LD_INT 16
14641: PUSH
14642: LD_INT 17
14644: PUSH
14645: LD_INT 18
14647: PUSH
14648: LD_INT 19
14650: PUSH
14651: LD_INT 20
14653: PUSH
14654: LD_INT 21
14656: PUSH
14657: LD_INT 22
14659: PUSH
14660: LD_INT 23
14662: PUSH
14663: LD_INT 24
14665: PUSH
14666: LD_INT 25
14668: PUSH
14669: LD_INT 26
14671: PUSH
14672: LD_INT 28
14674: PUSH
14675: LD_INT 30
14677: PUSH
14678: LD_INT 31
14680: PUSH
14681: LD_INT 32
14683: PUSH
14684: LD_INT 34
14686: PUSH
14687: LD_INT 36
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 101
14725: PUSH
14726: LD_INT 102
14728: PUSH
14729: LD_INT 103
14731: PUSH
14732: LD_INT 104
14734: PUSH
14735: LD_INT 105
14737: PUSH
14738: LD_INT 106
14740: PUSH
14741: LD_INT 107
14743: PUSH
14744: LD_INT 108
14746: PUSH
14747: LD_INT 109
14749: PUSH
14750: LD_INT 110
14752: PUSH
14753: LD_INT 111
14755: PUSH
14756: LD_INT 112
14758: PUSH
14759: LD_INT 114
14761: PUSH
14762: LD_INT 116
14764: PUSH
14765: LD_INT 117
14767: PUSH
14768: LD_INT 118
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: ST_TO_ADDR
14793: GO 16476
14795: LD_INT 12
14797: DOUBLE
14798: EQUAL
14799: IFTRUE 14803
14801: GO 15023
14803: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14804: LD_ADDR_VAR 0 2
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: LD_INT 2
14814: PUSH
14815: LD_INT 3
14817: PUSH
14818: LD_INT 4
14820: PUSH
14821: LD_INT 5
14823: PUSH
14824: LD_INT 6
14826: PUSH
14827: LD_INT 7
14829: PUSH
14830: LD_INT 8
14832: PUSH
14833: LD_INT 9
14835: PUSH
14836: LD_INT 10
14838: PUSH
14839: LD_INT 11
14841: PUSH
14842: LD_INT 12
14844: PUSH
14845: LD_INT 13
14847: PUSH
14848: LD_INT 14
14850: PUSH
14851: LD_INT 15
14853: PUSH
14854: LD_INT 16
14856: PUSH
14857: LD_INT 17
14859: PUSH
14860: LD_INT 18
14862: PUSH
14863: LD_INT 19
14865: PUSH
14866: LD_INT 20
14868: PUSH
14869: LD_INT 21
14871: PUSH
14872: LD_INT 22
14874: PUSH
14875: LD_INT 23
14877: PUSH
14878: LD_INT 24
14880: PUSH
14881: LD_INT 25
14883: PUSH
14884: LD_INT 26
14886: PUSH
14887: LD_INT 27
14889: PUSH
14890: LD_INT 28
14892: PUSH
14893: LD_INT 30
14895: PUSH
14896: LD_INT 31
14898: PUSH
14899: LD_INT 32
14901: PUSH
14902: LD_INT 33
14904: PUSH
14905: LD_INT 34
14907: PUSH
14908: LD_INT 36
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 101
14949: PUSH
14950: LD_INT 102
14952: PUSH
14953: LD_INT 103
14955: PUSH
14956: LD_INT 104
14958: PUSH
14959: LD_INT 105
14961: PUSH
14962: LD_INT 106
14964: PUSH
14965: LD_INT 107
14967: PUSH
14968: LD_INT 108
14970: PUSH
14971: LD_INT 109
14973: PUSH
14974: LD_INT 110
14976: PUSH
14977: LD_INT 111
14979: PUSH
14980: LD_INT 112
14982: PUSH
14983: LD_INT 113
14985: PUSH
14986: LD_INT 114
14988: PUSH
14989: LD_INT 116
14991: PUSH
14992: LD_INT 117
14994: PUSH
14995: LD_INT 118
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: ST_TO_ADDR
15021: GO 16476
15023: LD_INT 13
15025: DOUBLE
15026: EQUAL
15027: IFTRUE 15031
15029: GO 15239
15031: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15032: LD_ADDR_VAR 0 2
15036: PUSH
15037: LD_INT 1
15039: PUSH
15040: LD_INT 2
15042: PUSH
15043: LD_INT 3
15045: PUSH
15046: LD_INT 4
15048: PUSH
15049: LD_INT 5
15051: PUSH
15052: LD_INT 8
15054: PUSH
15055: LD_INT 9
15057: PUSH
15058: LD_INT 10
15060: PUSH
15061: LD_INT 11
15063: PUSH
15064: LD_INT 12
15066: PUSH
15067: LD_INT 14
15069: PUSH
15070: LD_INT 15
15072: PUSH
15073: LD_INT 16
15075: PUSH
15076: LD_INT 17
15078: PUSH
15079: LD_INT 18
15081: PUSH
15082: LD_INT 19
15084: PUSH
15085: LD_INT 20
15087: PUSH
15088: LD_INT 21
15090: PUSH
15091: LD_INT 22
15093: PUSH
15094: LD_INT 23
15096: PUSH
15097: LD_INT 24
15099: PUSH
15100: LD_INT 25
15102: PUSH
15103: LD_INT 26
15105: PUSH
15106: LD_INT 27
15108: PUSH
15109: LD_INT 28
15111: PUSH
15112: LD_INT 30
15114: PUSH
15115: LD_INT 31
15117: PUSH
15118: LD_INT 32
15120: PUSH
15121: LD_INT 33
15123: PUSH
15124: LD_INT 34
15126: PUSH
15127: LD_INT 36
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 101
15165: PUSH
15166: LD_INT 102
15168: PUSH
15169: LD_INT 103
15171: PUSH
15172: LD_INT 104
15174: PUSH
15175: LD_INT 105
15177: PUSH
15178: LD_INT 106
15180: PUSH
15181: LD_INT 107
15183: PUSH
15184: LD_INT 108
15186: PUSH
15187: LD_INT 109
15189: PUSH
15190: LD_INT 110
15192: PUSH
15193: LD_INT 111
15195: PUSH
15196: LD_INT 112
15198: PUSH
15199: LD_INT 113
15201: PUSH
15202: LD_INT 114
15204: PUSH
15205: LD_INT 116
15207: PUSH
15208: LD_INT 117
15210: PUSH
15211: LD_INT 118
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: ST_TO_ADDR
15237: GO 16476
15239: LD_INT 14
15241: DOUBLE
15242: EQUAL
15243: IFTRUE 15247
15245: GO 15471
15247: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15248: LD_ADDR_VAR 0 2
15252: PUSH
15253: LD_INT 1
15255: PUSH
15256: LD_INT 2
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: LD_INT 4
15264: PUSH
15265: LD_INT 5
15267: PUSH
15268: LD_INT 6
15270: PUSH
15271: LD_INT 7
15273: PUSH
15274: LD_INT 8
15276: PUSH
15277: LD_INT 9
15279: PUSH
15280: LD_INT 10
15282: PUSH
15283: LD_INT 11
15285: PUSH
15286: LD_INT 12
15288: PUSH
15289: LD_INT 13
15291: PUSH
15292: LD_INT 14
15294: PUSH
15295: LD_INT 15
15297: PUSH
15298: LD_INT 16
15300: PUSH
15301: LD_INT 17
15303: PUSH
15304: LD_INT 18
15306: PUSH
15307: LD_INT 19
15309: PUSH
15310: LD_INT 20
15312: PUSH
15313: LD_INT 21
15315: PUSH
15316: LD_INT 22
15318: PUSH
15319: LD_INT 23
15321: PUSH
15322: LD_INT 24
15324: PUSH
15325: LD_INT 25
15327: PUSH
15328: LD_INT 26
15330: PUSH
15331: LD_INT 27
15333: PUSH
15334: LD_INT 28
15336: PUSH
15337: LD_INT 29
15339: PUSH
15340: LD_INT 30
15342: PUSH
15343: LD_INT 31
15345: PUSH
15346: LD_INT 32
15348: PUSH
15349: LD_INT 33
15351: PUSH
15352: LD_INT 34
15354: PUSH
15355: LD_INT 36
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 101
15397: PUSH
15398: LD_INT 102
15400: PUSH
15401: LD_INT 103
15403: PUSH
15404: LD_INT 104
15406: PUSH
15407: LD_INT 105
15409: PUSH
15410: LD_INT 106
15412: PUSH
15413: LD_INT 107
15415: PUSH
15416: LD_INT 108
15418: PUSH
15419: LD_INT 109
15421: PUSH
15422: LD_INT 110
15424: PUSH
15425: LD_INT 111
15427: PUSH
15428: LD_INT 112
15430: PUSH
15431: LD_INT 113
15433: PUSH
15434: LD_INT 114
15436: PUSH
15437: LD_INT 116
15439: PUSH
15440: LD_INT 117
15442: PUSH
15443: LD_INT 118
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: ST_TO_ADDR
15469: GO 16476
15471: LD_INT 15
15473: DOUBLE
15474: EQUAL
15475: IFTRUE 15479
15477: GO 15703
15479: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15480: LD_ADDR_VAR 0 2
15484: PUSH
15485: LD_INT 1
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: LD_INT 3
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: LD_INT 5
15499: PUSH
15500: LD_INT 6
15502: PUSH
15503: LD_INT 7
15505: PUSH
15506: LD_INT 8
15508: PUSH
15509: LD_INT 9
15511: PUSH
15512: LD_INT 10
15514: PUSH
15515: LD_INT 11
15517: PUSH
15518: LD_INT 12
15520: PUSH
15521: LD_INT 13
15523: PUSH
15524: LD_INT 14
15526: PUSH
15527: LD_INT 15
15529: PUSH
15530: LD_INT 16
15532: PUSH
15533: LD_INT 17
15535: PUSH
15536: LD_INT 18
15538: PUSH
15539: LD_INT 19
15541: PUSH
15542: LD_INT 20
15544: PUSH
15545: LD_INT 21
15547: PUSH
15548: LD_INT 22
15550: PUSH
15551: LD_INT 23
15553: PUSH
15554: LD_INT 24
15556: PUSH
15557: LD_INT 25
15559: PUSH
15560: LD_INT 26
15562: PUSH
15563: LD_INT 27
15565: PUSH
15566: LD_INT 28
15568: PUSH
15569: LD_INT 29
15571: PUSH
15572: LD_INT 30
15574: PUSH
15575: LD_INT 31
15577: PUSH
15578: LD_INT 32
15580: PUSH
15581: LD_INT 33
15583: PUSH
15584: LD_INT 34
15586: PUSH
15587: LD_INT 36
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 101
15629: PUSH
15630: LD_INT 102
15632: PUSH
15633: LD_INT 103
15635: PUSH
15636: LD_INT 104
15638: PUSH
15639: LD_INT 105
15641: PUSH
15642: LD_INT 106
15644: PUSH
15645: LD_INT 107
15647: PUSH
15648: LD_INT 108
15650: PUSH
15651: LD_INT 109
15653: PUSH
15654: LD_INT 110
15656: PUSH
15657: LD_INT 111
15659: PUSH
15660: LD_INT 112
15662: PUSH
15663: LD_INT 113
15665: PUSH
15666: LD_INT 114
15668: PUSH
15669: LD_INT 116
15671: PUSH
15672: LD_INT 117
15674: PUSH
15675: LD_INT 118
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: ST_TO_ADDR
15701: GO 16476
15703: LD_INT 16
15705: DOUBLE
15706: EQUAL
15707: IFTRUE 15711
15709: GO 15847
15711: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15712: LD_ADDR_VAR 0 2
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: LD_INT 4
15722: PUSH
15723: LD_INT 5
15725: PUSH
15726: LD_INT 7
15728: PUSH
15729: LD_INT 11
15731: PUSH
15732: LD_INT 12
15734: PUSH
15735: LD_INT 15
15737: PUSH
15738: LD_INT 16
15740: PUSH
15741: LD_INT 20
15743: PUSH
15744: LD_INT 21
15746: PUSH
15747: LD_INT 22
15749: PUSH
15750: LD_INT 23
15752: PUSH
15753: LD_INT 25
15755: PUSH
15756: LD_INT 26
15758: PUSH
15759: LD_INT 30
15761: PUSH
15762: LD_INT 31
15764: PUSH
15765: LD_INT 32
15767: PUSH
15768: LD_INT 33
15770: PUSH
15771: LD_INT 34
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 101
15797: PUSH
15798: LD_INT 102
15800: PUSH
15801: LD_INT 103
15803: PUSH
15804: LD_INT 106
15806: PUSH
15807: LD_INT 108
15809: PUSH
15810: LD_INT 112
15812: PUSH
15813: LD_INT 113
15815: PUSH
15816: LD_INT 114
15818: PUSH
15819: LD_INT 116
15821: PUSH
15822: LD_INT 117
15824: PUSH
15825: LD_INT 118
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: ST_TO_ADDR
15845: GO 16476
15847: LD_INT 17
15849: DOUBLE
15850: EQUAL
15851: IFTRUE 15855
15853: GO 16079
15855: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: LD_INT 1
15863: PUSH
15864: LD_INT 2
15866: PUSH
15867: LD_INT 3
15869: PUSH
15870: LD_INT 4
15872: PUSH
15873: LD_INT 5
15875: PUSH
15876: LD_INT 6
15878: PUSH
15879: LD_INT 7
15881: PUSH
15882: LD_INT 8
15884: PUSH
15885: LD_INT 9
15887: PUSH
15888: LD_INT 10
15890: PUSH
15891: LD_INT 11
15893: PUSH
15894: LD_INT 12
15896: PUSH
15897: LD_INT 13
15899: PUSH
15900: LD_INT 14
15902: PUSH
15903: LD_INT 15
15905: PUSH
15906: LD_INT 16
15908: PUSH
15909: LD_INT 17
15911: PUSH
15912: LD_INT 18
15914: PUSH
15915: LD_INT 19
15917: PUSH
15918: LD_INT 20
15920: PUSH
15921: LD_INT 21
15923: PUSH
15924: LD_INT 22
15926: PUSH
15927: LD_INT 23
15929: PUSH
15930: LD_INT 24
15932: PUSH
15933: LD_INT 25
15935: PUSH
15936: LD_INT 26
15938: PUSH
15939: LD_INT 27
15941: PUSH
15942: LD_INT 28
15944: PUSH
15945: LD_INT 29
15947: PUSH
15948: LD_INT 30
15950: PUSH
15951: LD_INT 31
15953: PUSH
15954: LD_INT 32
15956: PUSH
15957: LD_INT 33
15959: PUSH
15960: LD_INT 34
15962: PUSH
15963: LD_INT 36
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 101
16005: PUSH
16006: LD_INT 102
16008: PUSH
16009: LD_INT 103
16011: PUSH
16012: LD_INT 104
16014: PUSH
16015: LD_INT 105
16017: PUSH
16018: LD_INT 106
16020: PUSH
16021: LD_INT 107
16023: PUSH
16024: LD_INT 108
16026: PUSH
16027: LD_INT 109
16029: PUSH
16030: LD_INT 110
16032: PUSH
16033: LD_INT 111
16035: PUSH
16036: LD_INT 112
16038: PUSH
16039: LD_INT 113
16041: PUSH
16042: LD_INT 114
16044: PUSH
16045: LD_INT 116
16047: PUSH
16048: LD_INT 117
16050: PUSH
16051: LD_INT 118
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: ST_TO_ADDR
16077: GO 16476
16079: LD_INT 18
16081: DOUBLE
16082: EQUAL
16083: IFTRUE 16087
16085: GO 16235
16087: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16088: LD_ADDR_VAR 0 2
16092: PUSH
16093: LD_INT 2
16095: PUSH
16096: LD_INT 4
16098: PUSH
16099: LD_INT 5
16101: PUSH
16102: LD_INT 7
16104: PUSH
16105: LD_INT 11
16107: PUSH
16108: LD_INT 12
16110: PUSH
16111: LD_INT 15
16113: PUSH
16114: LD_INT 16
16116: PUSH
16117: LD_INT 20
16119: PUSH
16120: LD_INT 21
16122: PUSH
16123: LD_INT 22
16125: PUSH
16126: LD_INT 23
16128: PUSH
16129: LD_INT 25
16131: PUSH
16132: LD_INT 26
16134: PUSH
16135: LD_INT 30
16137: PUSH
16138: LD_INT 31
16140: PUSH
16141: LD_INT 32
16143: PUSH
16144: LD_INT 33
16146: PUSH
16147: LD_INT 34
16149: PUSH
16150: LD_INT 35
16152: PUSH
16153: LD_INT 36
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 101
16181: PUSH
16182: LD_INT 102
16184: PUSH
16185: LD_INT 103
16187: PUSH
16188: LD_INT 106
16190: PUSH
16191: LD_INT 108
16193: PUSH
16194: LD_INT 112
16196: PUSH
16197: LD_INT 113
16199: PUSH
16200: LD_INT 114
16202: PUSH
16203: LD_INT 115
16205: PUSH
16206: LD_INT 116
16208: PUSH
16209: LD_INT 117
16211: PUSH
16212: LD_INT 118
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: ST_TO_ADDR
16233: GO 16476
16235: LD_INT 19
16237: DOUBLE
16238: EQUAL
16239: IFTRUE 16243
16241: GO 16475
16243: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16244: LD_ADDR_VAR 0 2
16248: PUSH
16249: LD_INT 1
16251: PUSH
16252: LD_INT 2
16254: PUSH
16255: LD_INT 3
16257: PUSH
16258: LD_INT 4
16260: PUSH
16261: LD_INT 5
16263: PUSH
16264: LD_INT 6
16266: PUSH
16267: LD_INT 7
16269: PUSH
16270: LD_INT 8
16272: PUSH
16273: LD_INT 9
16275: PUSH
16276: LD_INT 10
16278: PUSH
16279: LD_INT 11
16281: PUSH
16282: LD_INT 12
16284: PUSH
16285: LD_INT 13
16287: PUSH
16288: LD_INT 14
16290: PUSH
16291: LD_INT 15
16293: PUSH
16294: LD_INT 16
16296: PUSH
16297: LD_INT 17
16299: PUSH
16300: LD_INT 18
16302: PUSH
16303: LD_INT 19
16305: PUSH
16306: LD_INT 20
16308: PUSH
16309: LD_INT 21
16311: PUSH
16312: LD_INT 22
16314: PUSH
16315: LD_INT 23
16317: PUSH
16318: LD_INT 24
16320: PUSH
16321: LD_INT 25
16323: PUSH
16324: LD_INT 26
16326: PUSH
16327: LD_INT 27
16329: PUSH
16330: LD_INT 28
16332: PUSH
16333: LD_INT 29
16335: PUSH
16336: LD_INT 30
16338: PUSH
16339: LD_INT 31
16341: PUSH
16342: LD_INT 32
16344: PUSH
16345: LD_INT 33
16347: PUSH
16348: LD_INT 34
16350: PUSH
16351: LD_INT 35
16353: PUSH
16354: LD_INT 36
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 101
16397: PUSH
16398: LD_INT 102
16400: PUSH
16401: LD_INT 103
16403: PUSH
16404: LD_INT 104
16406: PUSH
16407: LD_INT 105
16409: PUSH
16410: LD_INT 106
16412: PUSH
16413: LD_INT 107
16415: PUSH
16416: LD_INT 108
16418: PUSH
16419: LD_INT 109
16421: PUSH
16422: LD_INT 110
16424: PUSH
16425: LD_INT 111
16427: PUSH
16428: LD_INT 112
16430: PUSH
16431: LD_INT 113
16433: PUSH
16434: LD_INT 114
16436: PUSH
16437: LD_INT 115
16439: PUSH
16440: LD_INT 116
16442: PUSH
16443: LD_INT 117
16445: PUSH
16446: LD_INT 118
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: ST_TO_ADDR
16473: GO 16476
16475: POP
// end else
16476: GO 16707
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16478: LD_ADDR_VAR 0 2
16482: PUSH
16483: LD_INT 1
16485: PUSH
16486: LD_INT 2
16488: PUSH
16489: LD_INT 3
16491: PUSH
16492: LD_INT 4
16494: PUSH
16495: LD_INT 5
16497: PUSH
16498: LD_INT 6
16500: PUSH
16501: LD_INT 7
16503: PUSH
16504: LD_INT 8
16506: PUSH
16507: LD_INT 9
16509: PUSH
16510: LD_INT 10
16512: PUSH
16513: LD_INT 11
16515: PUSH
16516: LD_INT 12
16518: PUSH
16519: LD_INT 13
16521: PUSH
16522: LD_INT 14
16524: PUSH
16525: LD_INT 15
16527: PUSH
16528: LD_INT 16
16530: PUSH
16531: LD_INT 17
16533: PUSH
16534: LD_INT 18
16536: PUSH
16537: LD_INT 19
16539: PUSH
16540: LD_INT 20
16542: PUSH
16543: LD_INT 21
16545: PUSH
16546: LD_INT 22
16548: PUSH
16549: LD_INT 23
16551: PUSH
16552: LD_INT 24
16554: PUSH
16555: LD_INT 25
16557: PUSH
16558: LD_INT 26
16560: PUSH
16561: LD_INT 27
16563: PUSH
16564: LD_INT 28
16566: PUSH
16567: LD_INT 29
16569: PUSH
16570: LD_INT 30
16572: PUSH
16573: LD_INT 31
16575: PUSH
16576: LD_INT 32
16578: PUSH
16579: LD_INT 33
16581: PUSH
16582: LD_INT 34
16584: PUSH
16585: LD_INT 35
16587: PUSH
16588: LD_INT 36
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 101
16631: PUSH
16632: LD_INT 102
16634: PUSH
16635: LD_INT 103
16637: PUSH
16638: LD_INT 104
16640: PUSH
16641: LD_INT 105
16643: PUSH
16644: LD_INT 106
16646: PUSH
16647: LD_INT 107
16649: PUSH
16650: LD_INT 108
16652: PUSH
16653: LD_INT 109
16655: PUSH
16656: LD_INT 110
16658: PUSH
16659: LD_INT 111
16661: PUSH
16662: LD_INT 112
16664: PUSH
16665: LD_INT 113
16667: PUSH
16668: LD_INT 114
16670: PUSH
16671: LD_INT 115
16673: PUSH
16674: LD_INT 116
16676: PUSH
16677: LD_INT 117
16679: PUSH
16680: LD_INT 118
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: ST_TO_ADDR
// if result then
16707: LD_VAR 0 2
16711: IFFALSE 17497
// begin normal :=  ;
16713: LD_ADDR_VAR 0 5
16717: PUSH
16718: LD_STRING 
16720: ST_TO_ADDR
// hardcore :=  ;
16721: LD_ADDR_VAR 0 6
16725: PUSH
16726: LD_STRING 
16728: ST_TO_ADDR
// active :=  ;
16729: LD_ADDR_VAR 0 7
16733: PUSH
16734: LD_STRING 
16736: ST_TO_ADDR
// for i = 1 to normalCounter do
16737: LD_ADDR_VAR 0 8
16741: PUSH
16742: DOUBLE
16743: LD_INT 1
16745: DEC
16746: ST_TO_ADDR
16747: LD_EXP 41
16751: PUSH
16752: FOR_TO
16753: IFFALSE 16854
// begin tmp := 0 ;
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_STRING 0
16762: ST_TO_ADDR
// if result [ 1 ] then
16763: LD_VAR 0 2
16767: PUSH
16768: LD_INT 1
16770: ARRAY
16771: IFFALSE 16836
// if result [ 1 ] [ 1 ] = i then
16773: LD_VAR 0 2
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PUSH
16782: LD_INT 1
16784: ARRAY
16785: PUSH
16786: LD_VAR 0 8
16790: EQUAL
16791: IFFALSE 16836
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16793: LD_ADDR_VAR 0 2
16797: PUSH
16798: LD_VAR 0 2
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: LD_VAR 0 2
16810: PUSH
16811: LD_INT 1
16813: ARRAY
16814: PPUSH
16815: LD_INT 1
16817: PPUSH
16818: CALL_OW 3
16822: PPUSH
16823: CALL_OW 1
16827: ST_TO_ADDR
// tmp := 1 ;
16828: LD_ADDR_VAR 0 3
16832: PUSH
16833: LD_STRING 1
16835: ST_TO_ADDR
// end ; normal := normal & tmp ;
16836: LD_ADDR_VAR 0 5
16840: PUSH
16841: LD_VAR 0 5
16845: PUSH
16846: LD_VAR 0 3
16850: STR
16851: ST_TO_ADDR
// end ;
16852: GO 16752
16854: POP
16855: POP
// for i = 1 to hardcoreCounter do
16856: LD_ADDR_VAR 0 8
16860: PUSH
16861: DOUBLE
16862: LD_INT 1
16864: DEC
16865: ST_TO_ADDR
16866: LD_EXP 42
16870: PUSH
16871: FOR_TO
16872: IFFALSE 16977
// begin tmp := 0 ;
16874: LD_ADDR_VAR 0 3
16878: PUSH
16879: LD_STRING 0
16881: ST_TO_ADDR
// if result [ 2 ] then
16882: LD_VAR 0 2
16886: PUSH
16887: LD_INT 2
16889: ARRAY
16890: IFFALSE 16959
// if result [ 2 ] [ 1 ] = 100 + i then
16892: LD_VAR 0 2
16896: PUSH
16897: LD_INT 2
16899: ARRAY
16900: PUSH
16901: LD_INT 1
16903: ARRAY
16904: PUSH
16905: LD_INT 100
16907: PUSH
16908: LD_VAR 0 8
16912: PLUS
16913: EQUAL
16914: IFFALSE 16959
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16916: LD_ADDR_VAR 0 2
16920: PUSH
16921: LD_VAR 0 2
16925: PPUSH
16926: LD_INT 2
16928: PPUSH
16929: LD_VAR 0 2
16933: PUSH
16934: LD_INT 2
16936: ARRAY
16937: PPUSH
16938: LD_INT 1
16940: PPUSH
16941: CALL_OW 3
16945: PPUSH
16946: CALL_OW 1
16950: ST_TO_ADDR
// tmp := 1 ;
16951: LD_ADDR_VAR 0 3
16955: PUSH
16956: LD_STRING 1
16958: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16959: LD_ADDR_VAR 0 6
16963: PUSH
16964: LD_VAR 0 6
16968: PUSH
16969: LD_VAR 0 3
16973: STR
16974: ST_TO_ADDR
// end ;
16975: GO 16871
16977: POP
16978: POP
// if isGameLoad then
16979: LD_VAR 0 1
16983: IFFALSE 17458
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16985: LD_ADDR_VAR 0 4
16989: PUSH
16990: LD_EXP 45
16994: PUSH
16995: LD_EXP 44
16999: PUSH
17000: LD_EXP 46
17004: PUSH
17005: LD_EXP 43
17009: PUSH
17010: LD_EXP 47
17014: PUSH
17015: LD_EXP 48
17019: PUSH
17020: LD_EXP 49
17024: PUSH
17025: LD_EXP 50
17029: PUSH
17030: LD_EXP 51
17034: PUSH
17035: LD_EXP 52
17039: PUSH
17040: LD_EXP 53
17044: PUSH
17045: LD_EXP 54
17049: PUSH
17050: LD_EXP 55
17054: PUSH
17055: LD_EXP 56
17059: PUSH
17060: LD_EXP 64
17064: PUSH
17065: LD_EXP 65
17069: PUSH
17070: LD_EXP 66
17074: PUSH
17075: LD_EXP 67
17079: PUSH
17080: LD_EXP 69
17084: PUSH
17085: LD_EXP 70
17089: PUSH
17090: LD_EXP 71
17094: PUSH
17095: LD_EXP 74
17099: PUSH
17100: LD_EXP 76
17104: PUSH
17105: LD_EXP 77
17109: PUSH
17110: LD_EXP 78
17114: PUSH
17115: LD_EXP 80
17119: PUSH
17120: LD_EXP 81
17124: PUSH
17125: LD_EXP 84
17129: PUSH
17130: LD_EXP 85
17134: PUSH
17135: LD_EXP 86
17139: PUSH
17140: LD_EXP 87
17144: PUSH
17145: LD_EXP 88
17149: PUSH
17150: LD_EXP 89
17154: PUSH
17155: LD_EXP 90
17159: PUSH
17160: LD_EXP 91
17164: PUSH
17165: LD_EXP 92
17169: PUSH
17170: LD_EXP 57
17174: PUSH
17175: LD_EXP 58
17179: PUSH
17180: LD_EXP 61
17184: PUSH
17185: LD_EXP 62
17189: PUSH
17190: LD_EXP 63
17194: PUSH
17195: LD_EXP 59
17199: PUSH
17200: LD_EXP 60
17204: PUSH
17205: LD_EXP 68
17209: PUSH
17210: LD_EXP 72
17214: PUSH
17215: LD_EXP 73
17219: PUSH
17220: LD_EXP 75
17224: PUSH
17225: LD_EXP 79
17229: PUSH
17230: LD_EXP 82
17234: PUSH
17235: LD_EXP 83
17239: PUSH
17240: LD_EXP 93
17244: PUSH
17245: LD_EXP 94
17249: PUSH
17250: LD_EXP 95
17254: PUSH
17255: LD_EXP 96
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: ST_TO_ADDR
// tmp :=  ;
17316: LD_ADDR_VAR 0 3
17320: PUSH
17321: LD_STRING 
17323: ST_TO_ADDR
// for i = 1 to normalCounter do
17324: LD_ADDR_VAR 0 8
17328: PUSH
17329: DOUBLE
17330: LD_INT 1
17332: DEC
17333: ST_TO_ADDR
17334: LD_EXP 41
17338: PUSH
17339: FOR_TO
17340: IFFALSE 17376
// begin if flags [ i ] then
17342: LD_VAR 0 4
17346: PUSH
17347: LD_VAR 0 8
17351: ARRAY
17352: IFFALSE 17374
// tmp := tmp & i & ; ;
17354: LD_ADDR_VAR 0 3
17358: PUSH
17359: LD_VAR 0 3
17363: PUSH
17364: LD_VAR 0 8
17368: STR
17369: PUSH
17370: LD_STRING ;
17372: STR
17373: ST_TO_ADDR
// end ;
17374: GO 17339
17376: POP
17377: POP
// for i = 1 to hardcoreCounter do
17378: LD_ADDR_VAR 0 8
17382: PUSH
17383: DOUBLE
17384: LD_INT 1
17386: DEC
17387: ST_TO_ADDR
17388: LD_EXP 42
17392: PUSH
17393: FOR_TO
17394: IFFALSE 17440
// begin if flags [ normalCounter + i ] then
17396: LD_VAR 0 4
17400: PUSH
17401: LD_EXP 41
17405: PUSH
17406: LD_VAR 0 8
17410: PLUS
17411: ARRAY
17412: IFFALSE 17438
// tmp := tmp & ( 100 + i ) & ; ;
17414: LD_ADDR_VAR 0 3
17418: PUSH
17419: LD_VAR 0 3
17423: PUSH
17424: LD_INT 100
17426: PUSH
17427: LD_VAR 0 8
17431: PLUS
17432: STR
17433: PUSH
17434: LD_STRING ;
17436: STR
17437: ST_TO_ADDR
// end ;
17438: GO 17393
17440: POP
17441: POP
// if tmp then
17442: LD_VAR 0 3
17446: IFFALSE 17458
// active := tmp ;
17448: LD_ADDR_VAR 0 7
17452: PUSH
17453: LD_VAR 0 3
17457: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17458: LD_STRING getStreamItemsFromMission("
17460: PUSH
17461: LD_VAR 0 5
17465: STR
17466: PUSH
17467: LD_STRING ","
17469: STR
17470: PUSH
17471: LD_VAR 0 6
17475: STR
17476: PUSH
17477: LD_STRING ","
17479: STR
17480: PUSH
17481: LD_VAR 0 7
17485: STR
17486: PUSH
17487: LD_STRING ")
17489: STR
17490: PPUSH
17491: CALL_OW 559
// end else
17495: GO 17504
// ToLua ( getStreamItemsFromMission("","","") ) ;
17497: LD_STRING getStreamItemsFromMission("","","")
17499: PPUSH
17500: CALL_OW 559
// end ;
17504: LD_VAR 0 2
17508: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17509: LD_EXP 40
17513: PUSH
17514: LD_EXP 45
17518: AND
17519: IFFALSE 17643
17521: GO 17523
17523: DISABLE
17524: LD_INT 0
17526: PPUSH
17527: PPUSH
// begin enable ;
17528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17529: LD_ADDR_VAR 0 2
17533: PUSH
17534: LD_INT 22
17536: PUSH
17537: LD_OWVAR 2
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 2
17548: PUSH
17549: LD_INT 34
17551: PUSH
17552: LD_INT 7
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 34
17561: PUSH
17562: LD_INT 45
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 34
17571: PUSH
17572: LD_INT 28
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 34
17581: PUSH
17582: LD_INT 47
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PPUSH
17600: CALL_OW 69
17604: ST_TO_ADDR
// if not tmp then
17605: LD_VAR 0 2
17609: NOT
17610: IFFALSE 17614
// exit ;
17612: GO 17643
// for i in tmp do
17614: LD_ADDR_VAR 0 1
17618: PUSH
17619: LD_VAR 0 2
17623: PUSH
17624: FOR_IN
17625: IFFALSE 17641
// begin SetLives ( i , 0 ) ;
17627: LD_VAR 0 1
17631: PPUSH
17632: LD_INT 0
17634: PPUSH
17635: CALL_OW 234
// end ;
17639: GO 17624
17641: POP
17642: POP
// end ;
17643: PPOPN 2
17645: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17646: LD_EXP 40
17650: PUSH
17651: LD_EXP 46
17655: AND
17656: IFFALSE 17740
17658: GO 17660
17660: DISABLE
17661: LD_INT 0
17663: PPUSH
17664: PPUSH
// begin enable ;
17665: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17666: LD_ADDR_VAR 0 2
17670: PUSH
17671: LD_INT 22
17673: PUSH
17674: LD_OWVAR 2
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 32
17685: PUSH
17686: LD_INT 3
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PPUSH
17697: CALL_OW 69
17701: ST_TO_ADDR
// if not tmp then
17702: LD_VAR 0 2
17706: NOT
17707: IFFALSE 17711
// exit ;
17709: GO 17740
// for i in tmp do
17711: LD_ADDR_VAR 0 1
17715: PUSH
17716: LD_VAR 0 2
17720: PUSH
17721: FOR_IN
17722: IFFALSE 17738
// begin SetLives ( i , 0 ) ;
17724: LD_VAR 0 1
17728: PPUSH
17729: LD_INT 0
17731: PPUSH
17732: CALL_OW 234
// end ;
17736: GO 17721
17738: POP
17739: POP
// end ;
17740: PPOPN 2
17742: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17743: LD_EXP 40
17747: PUSH
17748: LD_EXP 43
17752: AND
17753: IFFALSE 17846
17755: GO 17757
17757: DISABLE
17758: LD_INT 0
17760: PPUSH
// begin enable ;
17761: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17762: LD_ADDR_VAR 0 1
17766: PUSH
17767: LD_INT 22
17769: PUSH
17770: LD_OWVAR 2
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 2
17781: PUSH
17782: LD_INT 25
17784: PUSH
17785: LD_INT 5
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 25
17794: PUSH
17795: LD_INT 9
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 25
17804: PUSH
17805: LD_INT 8
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PPUSH
17822: CALL_OW 69
17826: PUSH
17827: FOR_IN
17828: IFFALSE 17844
// begin SetClass ( i , 1 ) ;
17830: LD_VAR 0 1
17834: PPUSH
17835: LD_INT 1
17837: PPUSH
17838: CALL_OW 336
// end ;
17842: GO 17827
17844: POP
17845: POP
// end ;
17846: PPOPN 1
17848: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17849: LD_EXP 40
17853: PUSH
17854: LD_EXP 44
17858: AND
17859: PUSH
17860: LD_OWVAR 65
17864: PUSH
17865: LD_INT 7
17867: LESS
17868: AND
17869: IFFALSE 17883
17871: GO 17873
17873: DISABLE
// begin enable ;
17874: ENABLE
// game_speed := 7 ;
17875: LD_ADDR_OWVAR 65
17879: PUSH
17880: LD_INT 7
17882: ST_TO_ADDR
// end ;
17883: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17884: LD_EXP 40
17888: PUSH
17889: LD_EXP 47
17893: AND
17894: IFFALSE 18096
17896: GO 17898
17898: DISABLE
17899: LD_INT 0
17901: PPUSH
17902: PPUSH
17903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17904: LD_ADDR_VAR 0 3
17908: PUSH
17909: LD_INT 81
17911: PUSH
17912: LD_OWVAR 2
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 21
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PPUSH
17935: CALL_OW 69
17939: ST_TO_ADDR
// if not tmp then
17940: LD_VAR 0 3
17944: NOT
17945: IFFALSE 17949
// exit ;
17947: GO 18096
// if tmp > 5 then
17949: LD_VAR 0 3
17953: PUSH
17954: LD_INT 5
17956: GREATER
17957: IFFALSE 17969
// k := 5 else
17959: LD_ADDR_VAR 0 2
17963: PUSH
17964: LD_INT 5
17966: ST_TO_ADDR
17967: GO 17979
// k := tmp ;
17969: LD_ADDR_VAR 0 2
17973: PUSH
17974: LD_VAR 0 3
17978: ST_TO_ADDR
// for i := 1 to k do
17979: LD_ADDR_VAR 0 1
17983: PUSH
17984: DOUBLE
17985: LD_INT 1
17987: DEC
17988: ST_TO_ADDR
17989: LD_VAR 0 2
17993: PUSH
17994: FOR_TO
17995: IFFALSE 18094
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17997: LD_VAR 0 3
18001: PUSH
18002: LD_VAR 0 1
18006: ARRAY
18007: PPUSH
18008: LD_VAR 0 1
18012: PUSH
18013: LD_INT 4
18015: MOD
18016: PUSH
18017: LD_INT 1
18019: PLUS
18020: PPUSH
18021: CALL_OW 259
18025: PUSH
18026: LD_INT 10
18028: LESS
18029: IFFALSE 18092
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18031: LD_VAR 0 3
18035: PUSH
18036: LD_VAR 0 1
18040: ARRAY
18041: PPUSH
18042: LD_VAR 0 1
18046: PUSH
18047: LD_INT 4
18049: MOD
18050: PUSH
18051: LD_INT 1
18053: PLUS
18054: PPUSH
18055: LD_VAR 0 3
18059: PUSH
18060: LD_VAR 0 1
18064: ARRAY
18065: PPUSH
18066: LD_VAR 0 1
18070: PUSH
18071: LD_INT 4
18073: MOD
18074: PUSH
18075: LD_INT 1
18077: PLUS
18078: PPUSH
18079: CALL_OW 259
18083: PUSH
18084: LD_INT 1
18086: PLUS
18087: PPUSH
18088: CALL_OW 237
18092: GO 17994
18094: POP
18095: POP
// end ;
18096: PPOPN 3
18098: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18099: LD_EXP 40
18103: PUSH
18104: LD_EXP 48
18108: AND
18109: IFFALSE 18129
18111: GO 18113
18113: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18114: LD_INT 4
18116: PPUSH
18117: LD_OWVAR 2
18121: PPUSH
18122: LD_INT 0
18124: PPUSH
18125: CALL_OW 324
18129: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18130: LD_EXP 40
18134: PUSH
18135: LD_EXP 77
18139: AND
18140: IFFALSE 18160
18142: GO 18144
18144: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18145: LD_INT 19
18147: PPUSH
18148: LD_OWVAR 2
18152: PPUSH
18153: LD_INT 0
18155: PPUSH
18156: CALL_OW 324
18160: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18161: LD_EXP 40
18165: PUSH
18166: LD_EXP 49
18170: AND
18171: IFFALSE 18273
18173: GO 18175
18175: DISABLE
18176: LD_INT 0
18178: PPUSH
18179: PPUSH
// begin enable ;
18180: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18181: LD_ADDR_VAR 0 2
18185: PUSH
18186: LD_INT 22
18188: PUSH
18189: LD_OWVAR 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: LD_INT 34
18203: PUSH
18204: LD_INT 11
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 34
18213: PUSH
18214: LD_INT 30
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PPUSH
18230: CALL_OW 69
18234: ST_TO_ADDR
// if not tmp then
18235: LD_VAR 0 2
18239: NOT
18240: IFFALSE 18244
// exit ;
18242: GO 18273
// for i in tmp do
18244: LD_ADDR_VAR 0 1
18248: PUSH
18249: LD_VAR 0 2
18253: PUSH
18254: FOR_IN
18255: IFFALSE 18271
// begin SetLives ( i , 0 ) ;
18257: LD_VAR 0 1
18261: PPUSH
18262: LD_INT 0
18264: PPUSH
18265: CALL_OW 234
// end ;
18269: GO 18254
18271: POP
18272: POP
// end ;
18273: PPOPN 2
18275: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18276: LD_EXP 40
18280: PUSH
18281: LD_EXP 50
18285: AND
18286: IFFALSE 18306
18288: GO 18290
18290: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18291: LD_INT 32
18293: PPUSH
18294: LD_OWVAR 2
18298: PPUSH
18299: LD_INT 0
18301: PPUSH
18302: CALL_OW 324
18306: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18307: LD_EXP 40
18311: PUSH
18312: LD_EXP 51
18316: AND
18317: IFFALSE 18498
18319: GO 18321
18321: DISABLE
18322: LD_INT 0
18324: PPUSH
18325: PPUSH
18326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18327: LD_ADDR_VAR 0 2
18331: PUSH
18332: LD_INT 22
18334: PUSH
18335: LD_OWVAR 2
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 33
18346: PUSH
18347: LD_INT 3
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PPUSH
18358: CALL_OW 69
18362: ST_TO_ADDR
// if not tmp then
18363: LD_VAR 0 2
18367: NOT
18368: IFFALSE 18372
// exit ;
18370: GO 18498
// side := 0 ;
18372: LD_ADDR_VAR 0 3
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// for i := 1 to 8 do
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: DOUBLE
18386: LD_INT 1
18388: DEC
18389: ST_TO_ADDR
18390: LD_INT 8
18392: PUSH
18393: FOR_TO
18394: IFFALSE 18442
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18396: LD_OWVAR 2
18400: PUSH
18401: LD_VAR 0 1
18405: NONEQUAL
18406: PUSH
18407: LD_OWVAR 2
18411: PPUSH
18412: LD_VAR 0 1
18416: PPUSH
18417: CALL_OW 81
18421: PUSH
18422: LD_INT 2
18424: EQUAL
18425: AND
18426: IFFALSE 18440
// begin side := i ;
18428: LD_ADDR_VAR 0 3
18432: PUSH
18433: LD_VAR 0 1
18437: ST_TO_ADDR
// break ;
18438: GO 18442
// end ;
18440: GO 18393
18442: POP
18443: POP
// if not side then
18444: LD_VAR 0 3
18448: NOT
18449: IFFALSE 18453
// exit ;
18451: GO 18498
// for i := 1 to tmp do
18453: LD_ADDR_VAR 0 1
18457: PUSH
18458: DOUBLE
18459: LD_INT 1
18461: DEC
18462: ST_TO_ADDR
18463: LD_VAR 0 2
18467: PUSH
18468: FOR_TO
18469: IFFALSE 18496
// if Prob ( 60 ) then
18471: LD_INT 60
18473: PPUSH
18474: CALL_OW 13
18478: IFFALSE 18494
// SetSide ( i , side ) ;
18480: LD_VAR 0 1
18484: PPUSH
18485: LD_VAR 0 3
18489: PPUSH
18490: CALL_OW 235
18494: GO 18468
18496: POP
18497: POP
// end ;
18498: PPOPN 3
18500: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18501: LD_EXP 40
18505: PUSH
18506: LD_EXP 53
18510: AND
18511: IFFALSE 18630
18513: GO 18515
18515: DISABLE
18516: LD_INT 0
18518: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18519: LD_ADDR_VAR 0 1
18523: PUSH
18524: LD_INT 22
18526: PUSH
18527: LD_OWVAR 2
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 21
18538: PUSH
18539: LD_INT 1
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 3
18548: PUSH
18549: LD_INT 23
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: PPUSH
18568: CALL_OW 69
18572: PUSH
18573: FOR_IN
18574: IFFALSE 18628
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 257
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 3
18594: PUSH
18595: LD_INT 4
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: IN
18604: IFFALSE 18626
// SetClass ( un , rand ( 1 , 4 ) ) ;
18606: LD_VAR 0 1
18610: PPUSH
18611: LD_INT 1
18613: PPUSH
18614: LD_INT 4
18616: PPUSH
18617: CALL_OW 12
18621: PPUSH
18622: CALL_OW 336
18626: GO 18573
18628: POP
18629: POP
// end ;
18630: PPOPN 1
18632: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18633: LD_EXP 40
18637: PUSH
18638: LD_EXP 52
18642: AND
18643: IFFALSE 18722
18645: GO 18647
18647: DISABLE
18648: LD_INT 0
18650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18651: LD_ADDR_VAR 0 1
18655: PUSH
18656: LD_INT 22
18658: PUSH
18659: LD_OWVAR 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 21
18670: PUSH
18671: LD_INT 3
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PPUSH
18682: CALL_OW 69
18686: ST_TO_ADDR
// if not tmp then
18687: LD_VAR 0 1
18691: NOT
18692: IFFALSE 18696
// exit ;
18694: GO 18722
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18696: LD_VAR 0 1
18700: PUSH
18701: LD_INT 1
18703: PPUSH
18704: LD_VAR 0 1
18708: PPUSH
18709: CALL_OW 12
18713: ARRAY
18714: PPUSH
18715: LD_INT 100
18717: PPUSH
18718: CALL_OW 234
// end ;
18722: PPOPN 1
18724: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18725: LD_EXP 40
18729: PUSH
18730: LD_EXP 54
18734: AND
18735: IFFALSE 18833
18737: GO 18739
18739: DISABLE
18740: LD_INT 0
18742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18743: LD_ADDR_VAR 0 1
18747: PUSH
18748: LD_INT 22
18750: PUSH
18751: LD_OWVAR 2
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 21
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PPUSH
18774: CALL_OW 69
18778: ST_TO_ADDR
// if not tmp then
18779: LD_VAR 0 1
18783: NOT
18784: IFFALSE 18788
// exit ;
18786: GO 18833
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18788: LD_VAR 0 1
18792: PUSH
18793: LD_INT 1
18795: PPUSH
18796: LD_VAR 0 1
18800: PPUSH
18801: CALL_OW 12
18805: ARRAY
18806: PPUSH
18807: LD_INT 1
18809: PPUSH
18810: LD_INT 4
18812: PPUSH
18813: CALL_OW 12
18817: PPUSH
18818: LD_INT 3000
18820: PPUSH
18821: LD_INT 9000
18823: PPUSH
18824: CALL_OW 12
18828: PPUSH
18829: CALL_OW 492
// end ;
18833: PPOPN 1
18835: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18836: LD_EXP 40
18840: PUSH
18841: LD_EXP 55
18845: AND
18846: IFFALSE 18866
18848: GO 18850
18850: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18851: LD_INT 1
18853: PPUSH
18854: LD_OWVAR 2
18858: PPUSH
18859: LD_INT 0
18861: PPUSH
18862: CALL_OW 324
18866: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18867: LD_EXP 40
18871: PUSH
18872: LD_EXP 56
18876: AND
18877: IFFALSE 18960
18879: GO 18881
18881: DISABLE
18882: LD_INT 0
18884: PPUSH
18885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18886: LD_ADDR_VAR 0 2
18890: PUSH
18891: LD_INT 22
18893: PUSH
18894: LD_OWVAR 2
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 21
18905: PUSH
18906: LD_INT 3
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PPUSH
18917: CALL_OW 69
18921: ST_TO_ADDR
// if not tmp then
18922: LD_VAR 0 2
18926: NOT
18927: IFFALSE 18931
// exit ;
18929: GO 18960
// for i in tmp do
18931: LD_ADDR_VAR 0 1
18935: PUSH
18936: LD_VAR 0 2
18940: PUSH
18941: FOR_IN
18942: IFFALSE 18958
// SetBLevel ( i , 10 ) ;
18944: LD_VAR 0 1
18948: PPUSH
18949: LD_INT 10
18951: PPUSH
18952: CALL_OW 241
18956: GO 18941
18958: POP
18959: POP
// end ;
18960: PPOPN 2
18962: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18963: LD_EXP 40
18967: PUSH
18968: LD_EXP 57
18972: AND
18973: IFFALSE 19084
18975: GO 18977
18977: DISABLE
18978: LD_INT 0
18980: PPUSH
18981: PPUSH
18982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18983: LD_ADDR_VAR 0 3
18987: PUSH
18988: LD_INT 22
18990: PUSH
18991: LD_OWVAR 2
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 25
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PPUSH
19014: CALL_OW 69
19018: ST_TO_ADDR
// if not tmp then
19019: LD_VAR 0 3
19023: NOT
19024: IFFALSE 19028
// exit ;
19026: GO 19084
// un := tmp [ rand ( 1 , tmp ) ] ;
19028: LD_ADDR_VAR 0 2
19032: PUSH
19033: LD_VAR 0 3
19037: PUSH
19038: LD_INT 1
19040: PPUSH
19041: LD_VAR 0 3
19045: PPUSH
19046: CALL_OW 12
19050: ARRAY
19051: ST_TO_ADDR
// if Crawls ( un ) then
19052: LD_VAR 0 2
19056: PPUSH
19057: CALL_OW 318
19061: IFFALSE 19072
// ComWalk ( un ) ;
19063: LD_VAR 0 2
19067: PPUSH
19068: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19072: LD_VAR 0 2
19076: PPUSH
19077: LD_INT 5
19079: PPUSH
19080: CALL_OW 336
// end ;
19084: PPOPN 3
19086: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19087: LD_EXP 40
19091: PUSH
19092: LD_EXP 58
19096: AND
19097: PUSH
19098: LD_OWVAR 67
19102: PUSH
19103: LD_INT 4
19105: LESS
19106: AND
19107: IFFALSE 19126
19109: GO 19111
19111: DISABLE
// begin Difficulty := Difficulty + 1 ;
19112: LD_ADDR_OWVAR 67
19116: PUSH
19117: LD_OWVAR 67
19121: PUSH
19122: LD_INT 1
19124: PLUS
19125: ST_TO_ADDR
// end ;
19126: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19127: LD_EXP 40
19131: PUSH
19132: LD_EXP 59
19136: AND
19137: IFFALSE 19240
19139: GO 19141
19141: DISABLE
19142: LD_INT 0
19144: PPUSH
// begin for i := 1 to 5 do
19145: LD_ADDR_VAR 0 1
19149: PUSH
19150: DOUBLE
19151: LD_INT 1
19153: DEC
19154: ST_TO_ADDR
19155: LD_INT 5
19157: PUSH
19158: FOR_TO
19159: IFFALSE 19238
// begin uc_nation := nation_nature ;
19161: LD_ADDR_OWVAR 21
19165: PUSH
19166: LD_INT 0
19168: ST_TO_ADDR
// uc_side := 0 ;
19169: LD_ADDR_OWVAR 20
19173: PUSH
19174: LD_INT 0
19176: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19177: LD_ADDR_OWVAR 29
19181: PUSH
19182: LD_INT 12
19184: PUSH
19185: LD_INT 12
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: ST_TO_ADDR
// hc_agressivity := 20 ;
19192: LD_ADDR_OWVAR 35
19196: PUSH
19197: LD_INT 20
19199: ST_TO_ADDR
// hc_class := class_tiger ;
19200: LD_ADDR_OWVAR 28
19204: PUSH
19205: LD_INT 14
19207: ST_TO_ADDR
// hc_gallery :=  ;
19208: LD_ADDR_OWVAR 33
19212: PUSH
19213: LD_STRING 
19215: ST_TO_ADDR
// hc_name :=  ;
19216: LD_ADDR_OWVAR 26
19220: PUSH
19221: LD_STRING 
19223: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19224: CALL_OW 44
19228: PPUSH
19229: LD_INT 0
19231: PPUSH
19232: CALL_OW 51
// end ;
19236: GO 19158
19238: POP
19239: POP
// end ;
19240: PPOPN 1
19242: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19243: LD_EXP 40
19247: PUSH
19248: LD_EXP 60
19252: AND
19253: IFFALSE 19262
19255: GO 19257
19257: DISABLE
// StreamSibBomb ;
19258: CALL 19263 0 0
19262: END
// export function StreamSibBomb ; var i , x , y ; begin
19263: LD_INT 0
19265: PPUSH
19266: PPUSH
19267: PPUSH
19268: PPUSH
// result := false ;
19269: LD_ADDR_VAR 0 1
19273: PUSH
19274: LD_INT 0
19276: ST_TO_ADDR
// for i := 1 to 16 do
19277: LD_ADDR_VAR 0 2
19281: PUSH
19282: DOUBLE
19283: LD_INT 1
19285: DEC
19286: ST_TO_ADDR
19287: LD_INT 16
19289: PUSH
19290: FOR_TO
19291: IFFALSE 19490
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19293: LD_ADDR_VAR 0 3
19297: PUSH
19298: LD_INT 10
19300: PUSH
19301: LD_INT 20
19303: PUSH
19304: LD_INT 30
19306: PUSH
19307: LD_INT 40
19309: PUSH
19310: LD_INT 50
19312: PUSH
19313: LD_INT 60
19315: PUSH
19316: LD_INT 70
19318: PUSH
19319: LD_INT 80
19321: PUSH
19322: LD_INT 90
19324: PUSH
19325: LD_INT 100
19327: PUSH
19328: LD_INT 110
19330: PUSH
19331: LD_INT 120
19333: PUSH
19334: LD_INT 130
19336: PUSH
19337: LD_INT 140
19339: PUSH
19340: LD_INT 150
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 1
19362: PPUSH
19363: LD_INT 15
19365: PPUSH
19366: CALL_OW 12
19370: ARRAY
19371: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19372: LD_ADDR_VAR 0 4
19376: PUSH
19377: LD_INT 10
19379: PUSH
19380: LD_INT 20
19382: PUSH
19383: LD_INT 30
19385: PUSH
19386: LD_INT 40
19388: PUSH
19389: LD_INT 50
19391: PUSH
19392: LD_INT 60
19394: PUSH
19395: LD_INT 70
19397: PUSH
19398: LD_INT 80
19400: PUSH
19401: LD_INT 90
19403: PUSH
19404: LD_INT 100
19406: PUSH
19407: LD_INT 110
19409: PUSH
19410: LD_INT 120
19412: PUSH
19413: LD_INT 130
19415: PUSH
19416: LD_INT 140
19418: PUSH
19419: LD_INT 150
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 1
19441: PPUSH
19442: LD_INT 15
19444: PPUSH
19445: CALL_OW 12
19449: ARRAY
19450: ST_TO_ADDR
// if ValidHex ( x , y ) then
19451: LD_VAR 0 3
19455: PPUSH
19456: LD_VAR 0 4
19460: PPUSH
19461: CALL_OW 488
19465: IFFALSE 19488
// begin result := [ x , y ] ;
19467: LD_ADDR_VAR 0 1
19471: PUSH
19472: LD_VAR 0 3
19476: PUSH
19477: LD_VAR 0 4
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: ST_TO_ADDR
// break ;
19486: GO 19490
// end ; end ;
19488: GO 19290
19490: POP
19491: POP
// if result then
19492: LD_VAR 0 1
19496: IFFALSE 19556
// begin ToLua ( playSibBomb() ) ;
19498: LD_STRING playSibBomb()
19500: PPUSH
19501: CALL_OW 559
// wait ( 0 0$14 ) ;
19505: LD_INT 490
19507: PPUSH
19508: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19512: LD_VAR 0 1
19516: PUSH
19517: LD_INT 1
19519: ARRAY
19520: PPUSH
19521: LD_VAR 0 1
19525: PUSH
19526: LD_INT 2
19528: ARRAY
19529: PPUSH
19530: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19534: LD_VAR 0 1
19538: PUSH
19539: LD_INT 1
19541: ARRAY
19542: PPUSH
19543: LD_VAR 0 1
19547: PUSH
19548: LD_INT 2
19550: ARRAY
19551: PPUSH
19552: CALL_OW 429
// end ; end ;
19556: LD_VAR 0 1
19560: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19561: LD_EXP 40
19565: PUSH
19566: LD_EXP 62
19570: AND
19571: IFFALSE 19583
19573: GO 19575
19575: DISABLE
// YouLost (  ) ;
19576: LD_STRING 
19578: PPUSH
19579: CALL_OW 104
19583: END
// every 0 0$1 trigger StreamModeActive and sFog do
19584: LD_EXP 40
19588: PUSH
19589: LD_EXP 61
19593: AND
19594: IFFALSE 19608
19596: GO 19598
19598: DISABLE
// FogOff ( your_side ) ;
19599: LD_OWVAR 2
19603: PPUSH
19604: CALL_OW 344
19608: END
// every 0 0$1 trigger StreamModeActive and sSun do
19609: LD_EXP 40
19613: PUSH
19614: LD_EXP 63
19618: AND
19619: IFFALSE 19647
19621: GO 19623
19623: DISABLE
// begin solar_recharge_percent := 0 ;
19624: LD_ADDR_OWVAR 79
19628: PUSH
19629: LD_INT 0
19631: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19632: LD_INT 10500
19634: PPUSH
19635: CALL_OW 67
// solar_recharge_percent := 100 ;
19639: LD_ADDR_OWVAR 79
19643: PUSH
19644: LD_INT 100
19646: ST_TO_ADDR
// end ;
19647: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19648: LD_EXP 40
19652: PUSH
19653: LD_EXP 64
19657: AND
19658: IFFALSE 19897
19660: GO 19662
19662: DISABLE
19663: LD_INT 0
19665: PPUSH
19666: PPUSH
19667: PPUSH
// begin tmp := [ ] ;
19668: LD_ADDR_VAR 0 3
19672: PUSH
19673: EMPTY
19674: ST_TO_ADDR
// for i := 1 to 6 do
19675: LD_ADDR_VAR 0 1
19679: PUSH
19680: DOUBLE
19681: LD_INT 1
19683: DEC
19684: ST_TO_ADDR
19685: LD_INT 6
19687: PUSH
19688: FOR_TO
19689: IFFALSE 19794
// begin uc_nation := nation_nature ;
19691: LD_ADDR_OWVAR 21
19695: PUSH
19696: LD_INT 0
19698: ST_TO_ADDR
// uc_side := 0 ;
19699: LD_ADDR_OWVAR 20
19703: PUSH
19704: LD_INT 0
19706: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19707: LD_ADDR_OWVAR 29
19711: PUSH
19712: LD_INT 12
19714: PUSH
19715: LD_INT 12
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: ST_TO_ADDR
// hc_agressivity := 20 ;
19722: LD_ADDR_OWVAR 35
19726: PUSH
19727: LD_INT 20
19729: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19730: LD_ADDR_OWVAR 28
19734: PUSH
19735: LD_INT 17
19737: ST_TO_ADDR
// hc_gallery :=  ;
19738: LD_ADDR_OWVAR 33
19742: PUSH
19743: LD_STRING 
19745: ST_TO_ADDR
// hc_name :=  ;
19746: LD_ADDR_OWVAR 26
19750: PUSH
19751: LD_STRING 
19753: ST_TO_ADDR
// un := CreateHuman ;
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: CALL_OW 44
19763: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19764: LD_VAR 0 2
19768: PPUSH
19769: LD_INT 1
19771: PPUSH
19772: CALL_OW 51
// tmp := tmp ^ un ;
19776: LD_ADDR_VAR 0 3
19780: PUSH
19781: LD_VAR 0 3
19785: PUSH
19786: LD_VAR 0 2
19790: ADD
19791: ST_TO_ADDR
// end ;
19792: GO 19688
19794: POP
19795: POP
// repeat wait ( 0 0$1 ) ;
19796: LD_INT 35
19798: PPUSH
19799: CALL_OW 67
// for un in tmp do
19803: LD_ADDR_VAR 0 2
19807: PUSH
19808: LD_VAR 0 3
19812: PUSH
19813: FOR_IN
19814: IFFALSE 19888
// begin if IsDead ( un ) then
19816: LD_VAR 0 2
19820: PPUSH
19821: CALL_OW 301
19825: IFFALSE 19845
// begin tmp := tmp diff un ;
19827: LD_ADDR_VAR 0 3
19831: PUSH
19832: LD_VAR 0 3
19836: PUSH
19837: LD_VAR 0 2
19841: DIFF
19842: ST_TO_ADDR
// continue ;
19843: GO 19813
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19845: LD_VAR 0 2
19849: PPUSH
19850: LD_INT 3
19852: PUSH
19853: LD_INT 22
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PPUSH
19867: CALL_OW 69
19871: PPUSH
19872: LD_VAR 0 2
19876: PPUSH
19877: CALL_OW 74
19881: PPUSH
19882: CALL_OW 115
// end ;
19886: GO 19813
19888: POP
19889: POP
// until not tmp ;
19890: LD_VAR 0 3
19894: NOT
19895: IFFALSE 19796
// end ;
19897: PPOPN 3
19899: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19900: LD_EXP 40
19904: PUSH
19905: LD_EXP 65
19909: AND
19910: IFFALSE 19964
19912: GO 19914
19914: DISABLE
// begin ToLua ( displayTroll(); ) ;
19915: LD_STRING displayTroll();
19917: PPUSH
19918: CALL_OW 559
// wait ( 3 3$00 ) ;
19922: LD_INT 6300
19924: PPUSH
19925: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19929: LD_STRING hideTroll();
19931: PPUSH
19932: CALL_OW 559
// wait ( 1 1$00 ) ;
19936: LD_INT 2100
19938: PPUSH
19939: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19943: LD_STRING displayTroll();
19945: PPUSH
19946: CALL_OW 559
// wait ( 1 1$00 ) ;
19950: LD_INT 2100
19952: PPUSH
19953: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19957: LD_STRING hideTroll();
19959: PPUSH
19960: CALL_OW 559
// end ;
19964: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19965: LD_EXP 40
19969: PUSH
19970: LD_EXP 66
19974: AND
19975: IFFALSE 20038
19977: GO 19979
19979: DISABLE
19980: LD_INT 0
19982: PPUSH
// begin p := 0 ;
19983: LD_ADDR_VAR 0 1
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
// repeat game_speed := 1 ;
19991: LD_ADDR_OWVAR 65
19995: PUSH
19996: LD_INT 1
19998: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19999: LD_INT 35
20001: PPUSH
20002: CALL_OW 67
// p := p + 1 ;
20006: LD_ADDR_VAR 0 1
20010: PUSH
20011: LD_VAR 0 1
20015: PUSH
20016: LD_INT 1
20018: PLUS
20019: ST_TO_ADDR
// until p >= 60 ;
20020: LD_VAR 0 1
20024: PUSH
20025: LD_INT 60
20027: GREATEREQUAL
20028: IFFALSE 19991
// game_speed := 4 ;
20030: LD_ADDR_OWVAR 65
20034: PUSH
20035: LD_INT 4
20037: ST_TO_ADDR
// end ;
20038: PPOPN 1
20040: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20041: LD_EXP 40
20045: PUSH
20046: LD_EXP 67
20050: AND
20051: IFFALSE 20197
20053: GO 20055
20055: DISABLE
20056: LD_INT 0
20058: PPUSH
20059: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20060: LD_ADDR_VAR 0 1
20064: PUSH
20065: LD_INT 22
20067: PUSH
20068: LD_OWVAR 2
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 30
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 30
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: LIST
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PPUSH
20109: CALL_OW 69
20113: ST_TO_ADDR
// if not depot then
20114: LD_VAR 0 1
20118: NOT
20119: IFFALSE 20123
// exit ;
20121: GO 20197
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20123: LD_ADDR_VAR 0 2
20127: PUSH
20128: LD_VAR 0 1
20132: PUSH
20133: LD_INT 1
20135: PPUSH
20136: LD_VAR 0 1
20140: PPUSH
20141: CALL_OW 12
20145: ARRAY
20146: PPUSH
20147: CALL_OW 274
20151: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20152: LD_VAR 0 2
20156: PPUSH
20157: LD_INT 1
20159: PPUSH
20160: LD_INT 0
20162: PPUSH
20163: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_INT 2
20174: PPUSH
20175: LD_INT 0
20177: PPUSH
20178: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20182: LD_VAR 0 2
20186: PPUSH
20187: LD_INT 3
20189: PPUSH
20190: LD_INT 0
20192: PPUSH
20193: CALL_OW 277
// end ;
20197: PPOPN 2
20199: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20200: LD_EXP 40
20204: PUSH
20205: LD_EXP 68
20209: AND
20210: IFFALSE 20307
20212: GO 20214
20214: DISABLE
20215: LD_INT 0
20217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20218: LD_ADDR_VAR 0 1
20222: PUSH
20223: LD_INT 22
20225: PUSH
20226: LD_OWVAR 2
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 21
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 3
20247: PUSH
20248: LD_INT 23
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: LIST
20266: PPUSH
20267: CALL_OW 69
20271: ST_TO_ADDR
// if not tmp then
20272: LD_VAR 0 1
20276: NOT
20277: IFFALSE 20281
// exit ;
20279: GO 20307
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20281: LD_VAR 0 1
20285: PUSH
20286: LD_INT 1
20288: PPUSH
20289: LD_VAR 0 1
20293: PPUSH
20294: CALL_OW 12
20298: ARRAY
20299: PPUSH
20300: LD_INT 200
20302: PPUSH
20303: CALL_OW 234
// end ;
20307: PPOPN 1
20309: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20310: LD_EXP 40
20314: PUSH
20315: LD_EXP 69
20319: AND
20320: IFFALSE 20399
20322: GO 20324
20324: DISABLE
20325: LD_INT 0
20327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20328: LD_ADDR_VAR 0 1
20332: PUSH
20333: LD_INT 22
20335: PUSH
20336: LD_OWVAR 2
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 21
20347: PUSH
20348: LD_INT 2
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PPUSH
20359: CALL_OW 69
20363: ST_TO_ADDR
// if not tmp then
20364: LD_VAR 0 1
20368: NOT
20369: IFFALSE 20373
// exit ;
20371: GO 20399
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20373: LD_VAR 0 1
20377: PUSH
20378: LD_INT 1
20380: PPUSH
20381: LD_VAR 0 1
20385: PPUSH
20386: CALL_OW 12
20390: ARRAY
20391: PPUSH
20392: LD_INT 60
20394: PPUSH
20395: CALL_OW 234
// end ;
20399: PPOPN 1
20401: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20402: LD_EXP 40
20406: PUSH
20407: LD_EXP 70
20411: AND
20412: IFFALSE 20511
20414: GO 20416
20416: DISABLE
20417: LD_INT 0
20419: PPUSH
20420: PPUSH
// begin enable ;
20421: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20422: LD_ADDR_VAR 0 1
20426: PUSH
20427: LD_INT 22
20429: PUSH
20430: LD_OWVAR 2
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 61
20441: PUSH
20442: EMPTY
20443: LIST
20444: PUSH
20445: LD_INT 33
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: PPUSH
20460: CALL_OW 69
20464: ST_TO_ADDR
// if not tmp then
20465: LD_VAR 0 1
20469: NOT
20470: IFFALSE 20474
// exit ;
20472: GO 20511
// for i in tmp do
20474: LD_ADDR_VAR 0 2
20478: PUSH
20479: LD_VAR 0 1
20483: PUSH
20484: FOR_IN
20485: IFFALSE 20509
// if IsControledBy ( i ) then
20487: LD_VAR 0 2
20491: PPUSH
20492: CALL_OW 312
20496: IFFALSE 20507
// ComUnlink ( i ) ;
20498: LD_VAR 0 2
20502: PPUSH
20503: CALL_OW 136
20507: GO 20484
20509: POP
20510: POP
// end ;
20511: PPOPN 2
20513: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20514: LD_EXP 40
20518: PUSH
20519: LD_EXP 71
20523: AND
20524: IFFALSE 20664
20526: GO 20528
20528: DISABLE
20529: LD_INT 0
20531: PPUSH
20532: PPUSH
// begin ToLua ( displayPowell(); ) ;
20533: LD_STRING displayPowell();
20535: PPUSH
20536: CALL_OW 559
// uc_side := 0 ;
20540: LD_ADDR_OWVAR 20
20544: PUSH
20545: LD_INT 0
20547: ST_TO_ADDR
// uc_nation := 2 ;
20548: LD_ADDR_OWVAR 21
20552: PUSH
20553: LD_INT 2
20555: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20556: LD_ADDR_OWVAR 37
20560: PUSH
20561: LD_INT 14
20563: ST_TO_ADDR
// vc_engine := engine_siberite ;
20564: LD_ADDR_OWVAR 39
20568: PUSH
20569: LD_INT 3
20571: ST_TO_ADDR
// vc_control := control_apeman ;
20572: LD_ADDR_OWVAR 38
20576: PUSH
20577: LD_INT 5
20579: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20580: LD_ADDR_OWVAR 40
20584: PUSH
20585: LD_INT 29
20587: ST_TO_ADDR
// un := CreateVehicle ;
20588: LD_ADDR_VAR 0 2
20592: PUSH
20593: CALL_OW 45
20597: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: LD_INT 1
20605: PPUSH
20606: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20610: LD_INT 35
20612: PPUSH
20613: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20617: LD_VAR 0 2
20621: PPUSH
20622: LD_INT 22
20624: PUSH
20625: LD_OWVAR 2
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PPUSH
20634: CALL_OW 69
20638: PPUSH
20639: LD_VAR 0 2
20643: PPUSH
20644: CALL_OW 74
20648: PPUSH
20649: CALL_OW 115
// until IsDead ( un ) ;
20653: LD_VAR 0 2
20657: PPUSH
20658: CALL_OW 301
20662: IFFALSE 20610
// end ;
20664: PPOPN 2
20666: END
// every 0 0$1 trigger StreamModeActive and sStu do
20667: LD_EXP 40
20671: PUSH
20672: LD_EXP 79
20676: AND
20677: IFFALSE 20693
20679: GO 20681
20681: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20682: LD_STRING displayStucuk();
20684: PPUSH
20685: CALL_OW 559
// ResetFog ;
20689: CALL_OW 335
// end ;
20693: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20694: LD_EXP 40
20698: PUSH
20699: LD_EXP 72
20703: AND
20704: IFFALSE 20845
20706: GO 20708
20708: DISABLE
20709: LD_INT 0
20711: PPUSH
20712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: LD_INT 22
20720: PUSH
20721: LD_OWVAR 2
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 21
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PPUSH
20744: CALL_OW 69
20748: ST_TO_ADDR
// if not tmp then
20749: LD_VAR 0 2
20753: NOT
20754: IFFALSE 20758
// exit ;
20756: GO 20845
// un := tmp [ rand ( 1 , tmp ) ] ;
20758: LD_ADDR_VAR 0 1
20762: PUSH
20763: LD_VAR 0 2
20767: PUSH
20768: LD_INT 1
20770: PPUSH
20771: LD_VAR 0 2
20775: PPUSH
20776: CALL_OW 12
20780: ARRAY
20781: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20782: LD_VAR 0 1
20786: PPUSH
20787: LD_INT 0
20789: PPUSH
20790: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20794: LD_VAR 0 1
20798: PPUSH
20799: LD_OWVAR 3
20803: PUSH
20804: LD_VAR 0 1
20808: DIFF
20809: PPUSH
20810: LD_VAR 0 1
20814: PPUSH
20815: CALL_OW 74
20819: PPUSH
20820: CALL_OW 115
// wait ( 0 0$20 ) ;
20824: LD_INT 700
20826: PPUSH
20827: CALL_OW 67
// SetSide ( un , your_side ) ;
20831: LD_VAR 0 1
20835: PPUSH
20836: LD_OWVAR 2
20840: PPUSH
20841: CALL_OW 235
// end ;
20845: PPOPN 2
20847: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20848: LD_EXP 40
20852: PUSH
20853: LD_EXP 73
20857: AND
20858: IFFALSE 20964
20860: GO 20862
20862: DISABLE
20863: LD_INT 0
20865: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20866: LD_ADDR_VAR 0 1
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_OWVAR 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: LD_INT 30
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 30
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PPUSH
20915: CALL_OW 69
20919: ST_TO_ADDR
// if not depot then
20920: LD_VAR 0 1
20924: NOT
20925: IFFALSE 20929
// exit ;
20927: GO 20964
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20929: LD_VAR 0 1
20933: PUSH
20934: LD_INT 1
20936: ARRAY
20937: PPUSH
20938: CALL_OW 250
20942: PPUSH
20943: LD_VAR 0 1
20947: PUSH
20948: LD_INT 1
20950: ARRAY
20951: PPUSH
20952: CALL_OW 251
20956: PPUSH
20957: LD_INT 70
20959: PPUSH
20960: CALL_OW 495
// end ;
20964: PPOPN 1
20966: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20967: LD_EXP 40
20971: PUSH
20972: LD_EXP 74
20976: AND
20977: IFFALSE 21188
20979: GO 20981
20981: DISABLE
20982: LD_INT 0
20984: PPUSH
20985: PPUSH
20986: PPUSH
20987: PPUSH
20988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20989: LD_ADDR_VAR 0 5
20993: PUSH
20994: LD_INT 22
20996: PUSH
20997: LD_OWVAR 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 21
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PPUSH
21020: CALL_OW 69
21024: ST_TO_ADDR
// if not tmp then
21025: LD_VAR 0 5
21029: NOT
21030: IFFALSE 21034
// exit ;
21032: GO 21188
// for i in tmp do
21034: LD_ADDR_VAR 0 1
21038: PUSH
21039: LD_VAR 0 5
21043: PUSH
21044: FOR_IN
21045: IFFALSE 21186
// begin d := rand ( 0 , 5 ) ;
21047: LD_ADDR_VAR 0 4
21051: PUSH
21052: LD_INT 0
21054: PPUSH
21055: LD_INT 5
21057: PPUSH
21058: CALL_OW 12
21062: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21063: LD_ADDR_VAR 0 2
21067: PUSH
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL_OW 250
21077: PPUSH
21078: LD_VAR 0 4
21082: PPUSH
21083: LD_INT 3
21085: PPUSH
21086: LD_INT 12
21088: PPUSH
21089: CALL_OW 12
21093: PPUSH
21094: CALL_OW 272
21098: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21099: LD_ADDR_VAR 0 3
21103: PUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 251
21113: PPUSH
21114: LD_VAR 0 4
21118: PPUSH
21119: LD_INT 3
21121: PPUSH
21122: LD_INT 12
21124: PPUSH
21125: CALL_OW 12
21129: PPUSH
21130: CALL_OW 273
21134: ST_TO_ADDR
// if ValidHex ( x , y ) then
21135: LD_VAR 0 2
21139: PPUSH
21140: LD_VAR 0 3
21144: PPUSH
21145: CALL_OW 488
21149: IFFALSE 21184
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21151: LD_VAR 0 1
21155: PPUSH
21156: LD_VAR 0 2
21160: PPUSH
21161: LD_VAR 0 3
21165: PPUSH
21166: LD_INT 3
21168: PPUSH
21169: LD_INT 6
21171: PPUSH
21172: CALL_OW 12
21176: PPUSH
21177: LD_INT 1
21179: PPUSH
21180: CALL_OW 483
// end ;
21184: GO 21044
21186: POP
21187: POP
// end ;
21188: PPOPN 5
21190: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21191: LD_EXP 40
21195: PUSH
21196: LD_EXP 75
21200: AND
21201: IFFALSE 21295
21203: GO 21205
21205: DISABLE
21206: LD_INT 0
21208: PPUSH
21209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21210: LD_ADDR_VAR 0 2
21214: PUSH
21215: LD_INT 22
21217: PUSH
21218: LD_OWVAR 2
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 32
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 21
21239: PUSH
21240: LD_INT 2
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 69
21256: ST_TO_ADDR
// if not tmp then
21257: LD_VAR 0 2
21261: NOT
21262: IFFALSE 21266
// exit ;
21264: GO 21295
// for i in tmp do
21266: LD_ADDR_VAR 0 1
21270: PUSH
21271: LD_VAR 0 2
21275: PUSH
21276: FOR_IN
21277: IFFALSE 21293
// SetFuel ( i , 0 ) ;
21279: LD_VAR 0 1
21283: PPUSH
21284: LD_INT 0
21286: PPUSH
21287: CALL_OW 240
21291: GO 21276
21293: POP
21294: POP
// end ;
21295: PPOPN 2
21297: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21298: LD_EXP 40
21302: PUSH
21303: LD_EXP 76
21307: AND
21308: IFFALSE 21374
21310: GO 21312
21312: DISABLE
21313: LD_INT 0
21315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21316: LD_ADDR_VAR 0 1
21320: PUSH
21321: LD_INT 22
21323: PUSH
21324: LD_OWVAR 2
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 30
21335: PUSH
21336: LD_INT 29
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PPUSH
21347: CALL_OW 69
21351: ST_TO_ADDR
// if not tmp then
21352: LD_VAR 0 1
21356: NOT
21357: IFFALSE 21361
// exit ;
21359: GO 21374
// DestroyUnit ( tmp [ 1 ] ) ;
21361: LD_VAR 0 1
21365: PUSH
21366: LD_INT 1
21368: ARRAY
21369: PPUSH
21370: CALL_OW 65
// end ;
21374: PPOPN 1
21376: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21377: LD_EXP 40
21381: PUSH
21382: LD_EXP 78
21386: AND
21387: IFFALSE 21516
21389: GO 21391
21391: DISABLE
21392: LD_INT 0
21394: PPUSH
// begin uc_side := 0 ;
21395: LD_ADDR_OWVAR 20
21399: PUSH
21400: LD_INT 0
21402: ST_TO_ADDR
// uc_nation := nation_arabian ;
21403: LD_ADDR_OWVAR 21
21407: PUSH
21408: LD_INT 2
21410: ST_TO_ADDR
// hc_gallery :=  ;
21411: LD_ADDR_OWVAR 33
21415: PUSH
21416: LD_STRING 
21418: ST_TO_ADDR
// hc_name :=  ;
21419: LD_ADDR_OWVAR 26
21423: PUSH
21424: LD_STRING 
21426: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21427: LD_INT 1
21429: PPUSH
21430: LD_INT 11
21432: PPUSH
21433: LD_INT 10
21435: PPUSH
21436: CALL_OW 380
// un := CreateHuman ;
21440: LD_ADDR_VAR 0 1
21444: PUSH
21445: CALL_OW 44
21449: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21450: LD_VAR 0 1
21454: PPUSH
21455: LD_INT 1
21457: PPUSH
21458: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21462: LD_INT 35
21464: PPUSH
21465: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21469: LD_VAR 0 1
21473: PPUSH
21474: LD_INT 22
21476: PUSH
21477: LD_OWVAR 2
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PPUSH
21486: CALL_OW 69
21490: PPUSH
21491: LD_VAR 0 1
21495: PPUSH
21496: CALL_OW 74
21500: PPUSH
21501: CALL_OW 115
// until IsDead ( un ) ;
21505: LD_VAR 0 1
21509: PPUSH
21510: CALL_OW 301
21514: IFFALSE 21462
// end ;
21516: PPOPN 1
21518: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21519: LD_EXP 40
21523: PUSH
21524: LD_EXP 80
21528: AND
21529: IFFALSE 21541
21531: GO 21533
21533: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21534: LD_STRING earthquake(getX(game), 0, 32)
21536: PPUSH
21537: CALL_OW 559
21541: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21542: LD_EXP 40
21546: PUSH
21547: LD_EXP 81
21551: AND
21552: IFFALSE 21643
21554: GO 21556
21556: DISABLE
21557: LD_INT 0
21559: PPUSH
// begin enable ;
21560: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21561: LD_ADDR_VAR 0 1
21565: PUSH
21566: LD_INT 22
21568: PUSH
21569: LD_OWVAR 2
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 21
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 33
21590: PUSH
21591: LD_INT 3
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: PPUSH
21603: CALL_OW 69
21607: ST_TO_ADDR
// if not tmp then
21608: LD_VAR 0 1
21612: NOT
21613: IFFALSE 21617
// exit ;
21615: GO 21643
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21617: LD_VAR 0 1
21621: PUSH
21622: LD_INT 1
21624: PPUSH
21625: LD_VAR 0 1
21629: PPUSH
21630: CALL_OW 12
21634: ARRAY
21635: PPUSH
21636: LD_INT 1
21638: PPUSH
21639: CALL_OW 234
// end ;
21643: PPOPN 1
21645: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21646: LD_EXP 40
21650: PUSH
21651: LD_EXP 82
21655: AND
21656: IFFALSE 21797
21658: GO 21660
21660: DISABLE
21661: LD_INT 0
21663: PPUSH
21664: PPUSH
21665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21666: LD_ADDR_VAR 0 3
21670: PUSH
21671: LD_INT 22
21673: PUSH
21674: LD_OWVAR 2
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 25
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PPUSH
21697: CALL_OW 69
21701: ST_TO_ADDR
// if not tmp then
21702: LD_VAR 0 3
21706: NOT
21707: IFFALSE 21711
// exit ;
21709: GO 21797
// un := tmp [ rand ( 1 , tmp ) ] ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_VAR 0 3
21720: PUSH
21721: LD_INT 1
21723: PPUSH
21724: LD_VAR 0 3
21728: PPUSH
21729: CALL_OW 12
21733: ARRAY
21734: ST_TO_ADDR
// if Crawls ( un ) then
21735: LD_VAR 0 2
21739: PPUSH
21740: CALL_OW 318
21744: IFFALSE 21755
// ComWalk ( un ) ;
21746: LD_VAR 0 2
21750: PPUSH
21751: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21755: LD_VAR 0 2
21759: PPUSH
21760: LD_INT 9
21762: PPUSH
21763: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21767: LD_INT 28
21769: PPUSH
21770: LD_OWVAR 2
21774: PPUSH
21775: LD_INT 2
21777: PPUSH
21778: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21782: LD_INT 29
21784: PPUSH
21785: LD_OWVAR 2
21789: PPUSH
21790: LD_INT 2
21792: PPUSH
21793: CALL_OW 322
// end ;
21797: PPOPN 3
21799: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21800: LD_EXP 40
21804: PUSH
21805: LD_EXP 83
21809: AND
21810: IFFALSE 21921
21812: GO 21814
21814: DISABLE
21815: LD_INT 0
21817: PPUSH
21818: PPUSH
21819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21820: LD_ADDR_VAR 0 3
21824: PUSH
21825: LD_INT 22
21827: PUSH
21828: LD_OWVAR 2
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 25
21839: PUSH
21840: LD_INT 1
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PPUSH
21851: CALL_OW 69
21855: ST_TO_ADDR
// if not tmp then
21856: LD_VAR 0 3
21860: NOT
21861: IFFALSE 21865
// exit ;
21863: GO 21921
// un := tmp [ rand ( 1 , tmp ) ] ;
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: LD_VAR 0 3
21874: PUSH
21875: LD_INT 1
21877: PPUSH
21878: LD_VAR 0 3
21882: PPUSH
21883: CALL_OW 12
21887: ARRAY
21888: ST_TO_ADDR
// if Crawls ( un ) then
21889: LD_VAR 0 2
21893: PPUSH
21894: CALL_OW 318
21898: IFFALSE 21909
// ComWalk ( un ) ;
21900: LD_VAR 0 2
21904: PPUSH
21905: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21909: LD_VAR 0 2
21913: PPUSH
21914: LD_INT 8
21916: PPUSH
21917: CALL_OW 336
// end ;
21921: PPOPN 3
21923: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21924: LD_EXP 40
21928: PUSH
21929: LD_EXP 84
21933: AND
21934: IFFALSE 22078
21936: GO 21938
21938: DISABLE
21939: LD_INT 0
21941: PPUSH
21942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21943: LD_ADDR_VAR 0 2
21947: PUSH
21948: LD_INT 22
21950: PUSH
21951: LD_OWVAR 2
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 21
21962: PUSH
21963: LD_INT 2
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 2
21972: PUSH
21973: LD_INT 34
21975: PUSH
21976: LD_INT 12
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 34
21985: PUSH
21986: LD_INT 51
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 34
21995: PUSH
21996: LD_INT 32
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: PPUSH
22014: CALL_OW 69
22018: ST_TO_ADDR
// if not tmp then
22019: LD_VAR 0 2
22023: NOT
22024: IFFALSE 22028
// exit ;
22026: GO 22078
// for i in tmp do
22028: LD_ADDR_VAR 0 1
22032: PUSH
22033: LD_VAR 0 2
22037: PUSH
22038: FOR_IN
22039: IFFALSE 22076
// if GetCargo ( i , mat_artifact ) = 0 then
22041: LD_VAR 0 1
22045: PPUSH
22046: LD_INT 4
22048: PPUSH
22049: CALL_OW 289
22053: PUSH
22054: LD_INT 0
22056: EQUAL
22057: IFFALSE 22074
// SetCargo ( i , mat_siberit , 100 ) ;
22059: LD_VAR 0 1
22063: PPUSH
22064: LD_INT 3
22066: PPUSH
22067: LD_INT 100
22069: PPUSH
22070: CALL_OW 290
22074: GO 22038
22076: POP
22077: POP
// end ;
22078: PPOPN 2
22080: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22081: LD_EXP 40
22085: PUSH
22086: LD_EXP 85
22090: AND
22091: IFFALSE 22274
22093: GO 22095
22095: DISABLE
22096: LD_INT 0
22098: PPUSH
22099: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22100: LD_ADDR_VAR 0 2
22104: PUSH
22105: LD_INT 22
22107: PUSH
22108: LD_OWVAR 2
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PPUSH
22117: CALL_OW 69
22121: ST_TO_ADDR
// if not tmp then
22122: LD_VAR 0 2
22126: NOT
22127: IFFALSE 22131
// exit ;
22129: GO 22274
// for i := 1 to 2 do
22131: LD_ADDR_VAR 0 1
22135: PUSH
22136: DOUBLE
22137: LD_INT 1
22139: DEC
22140: ST_TO_ADDR
22141: LD_INT 2
22143: PUSH
22144: FOR_TO
22145: IFFALSE 22272
// begin uc_side := your_side ;
22147: LD_ADDR_OWVAR 20
22151: PUSH
22152: LD_OWVAR 2
22156: ST_TO_ADDR
// uc_nation := nation_american ;
22157: LD_ADDR_OWVAR 21
22161: PUSH
22162: LD_INT 1
22164: ST_TO_ADDR
// vc_chassis := us_morphling ;
22165: LD_ADDR_OWVAR 37
22169: PUSH
22170: LD_INT 5
22172: ST_TO_ADDR
// vc_engine := engine_siberite ;
22173: LD_ADDR_OWVAR 39
22177: PUSH
22178: LD_INT 3
22180: ST_TO_ADDR
// vc_control := control_computer ;
22181: LD_ADDR_OWVAR 38
22185: PUSH
22186: LD_INT 3
22188: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22189: LD_ADDR_OWVAR 40
22193: PUSH
22194: LD_INT 10
22196: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22197: LD_VAR 0 2
22201: PUSH
22202: LD_INT 1
22204: ARRAY
22205: PPUSH
22206: CALL_OW 310
22210: NOT
22211: IFFALSE 22258
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22213: CALL_OW 45
22217: PPUSH
22218: LD_VAR 0 2
22222: PUSH
22223: LD_INT 1
22225: ARRAY
22226: PPUSH
22227: CALL_OW 250
22231: PPUSH
22232: LD_VAR 0 2
22236: PUSH
22237: LD_INT 1
22239: ARRAY
22240: PPUSH
22241: CALL_OW 251
22245: PPUSH
22246: LD_INT 12
22248: PPUSH
22249: LD_INT 1
22251: PPUSH
22252: CALL_OW 50
22256: GO 22270
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22258: CALL_OW 45
22262: PPUSH
22263: LD_INT 1
22265: PPUSH
22266: CALL_OW 51
// end ;
22270: GO 22144
22272: POP
22273: POP
// end ;
22274: PPOPN 2
22276: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22277: LD_EXP 40
22281: PUSH
22282: LD_EXP 86
22286: AND
22287: IFFALSE 22509
22289: GO 22291
22291: DISABLE
22292: LD_INT 0
22294: PPUSH
22295: PPUSH
22296: PPUSH
22297: PPUSH
22298: PPUSH
22299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22300: LD_ADDR_VAR 0 6
22304: PUSH
22305: LD_INT 22
22307: PUSH
22308: LD_OWVAR 2
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 21
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 3
22329: PUSH
22330: LD_INT 23
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: PPUSH
22349: CALL_OW 69
22353: ST_TO_ADDR
// if not tmp then
22354: LD_VAR 0 6
22358: NOT
22359: IFFALSE 22363
// exit ;
22361: GO 22509
// s1 := rand ( 1 , 4 ) ;
22363: LD_ADDR_VAR 0 2
22367: PUSH
22368: LD_INT 1
22370: PPUSH
22371: LD_INT 4
22373: PPUSH
22374: CALL_OW 12
22378: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22379: LD_ADDR_VAR 0 4
22383: PUSH
22384: LD_VAR 0 6
22388: PUSH
22389: LD_INT 1
22391: ARRAY
22392: PPUSH
22393: LD_VAR 0 2
22397: PPUSH
22398: CALL_OW 259
22402: ST_TO_ADDR
// if s1 = 1 then
22403: LD_VAR 0 2
22407: PUSH
22408: LD_INT 1
22410: EQUAL
22411: IFFALSE 22431
// s2 := rand ( 2 , 4 ) else
22413: LD_ADDR_VAR 0 3
22417: PUSH
22418: LD_INT 2
22420: PPUSH
22421: LD_INT 4
22423: PPUSH
22424: CALL_OW 12
22428: ST_TO_ADDR
22429: GO 22439
// s2 := 1 ;
22431: LD_ADDR_VAR 0 3
22435: PUSH
22436: LD_INT 1
22438: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22439: LD_ADDR_VAR 0 5
22443: PUSH
22444: LD_VAR 0 6
22448: PUSH
22449: LD_INT 1
22451: ARRAY
22452: PPUSH
22453: LD_VAR 0 3
22457: PPUSH
22458: CALL_OW 259
22462: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22463: LD_VAR 0 6
22467: PUSH
22468: LD_INT 1
22470: ARRAY
22471: PPUSH
22472: LD_VAR 0 2
22476: PPUSH
22477: LD_VAR 0 5
22481: PPUSH
22482: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22486: LD_VAR 0 6
22490: PUSH
22491: LD_INT 1
22493: ARRAY
22494: PPUSH
22495: LD_VAR 0 3
22499: PPUSH
22500: LD_VAR 0 4
22504: PPUSH
22505: CALL_OW 237
// end ;
22509: PPOPN 6
22511: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22512: LD_EXP 40
22516: PUSH
22517: LD_EXP 87
22521: AND
22522: IFFALSE 22601
22524: GO 22526
22526: DISABLE
22527: LD_INT 0
22529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22530: LD_ADDR_VAR 0 1
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_OWVAR 2
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 30
22549: PUSH
22550: LD_INT 3
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PPUSH
22561: CALL_OW 69
22565: ST_TO_ADDR
// if not tmp then
22566: LD_VAR 0 1
22570: NOT
22571: IFFALSE 22575
// exit ;
22573: GO 22601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22575: LD_VAR 0 1
22579: PUSH
22580: LD_INT 1
22582: PPUSH
22583: LD_VAR 0 1
22587: PPUSH
22588: CALL_OW 12
22592: ARRAY
22593: PPUSH
22594: LD_INT 1
22596: PPUSH
22597: CALL_OW 234
// end ;
22601: PPOPN 1
22603: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22604: LD_EXP 40
22608: PUSH
22609: LD_EXP 88
22613: AND
22614: IFFALSE 22726
22616: GO 22618
22618: DISABLE
22619: LD_INT 0
22621: PPUSH
22622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22623: LD_ADDR_VAR 0 2
22627: PUSH
22628: LD_INT 22
22630: PUSH
22631: LD_OWVAR 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 2
22642: PUSH
22643: LD_INT 30
22645: PUSH
22646: LD_INT 27
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 30
22655: PUSH
22656: LD_INT 26
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 30
22665: PUSH
22666: LD_INT 28
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PPUSH
22683: CALL_OW 69
22687: ST_TO_ADDR
// if not tmp then
22688: LD_VAR 0 2
22692: NOT
22693: IFFALSE 22697
// exit ;
22695: GO 22726
// for i in tmp do
22697: LD_ADDR_VAR 0 1
22701: PUSH
22702: LD_VAR 0 2
22706: PUSH
22707: FOR_IN
22708: IFFALSE 22724
// SetLives ( i , 1 ) ;
22710: LD_VAR 0 1
22714: PPUSH
22715: LD_INT 1
22717: PPUSH
22718: CALL_OW 234
22722: GO 22707
22724: POP
22725: POP
// end ;
22726: PPOPN 2
22728: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22729: LD_EXP 40
22733: PUSH
22734: LD_EXP 89
22738: AND
22739: IFFALSE 23026
22741: GO 22743
22743: DISABLE
22744: LD_INT 0
22746: PPUSH
22747: PPUSH
22748: PPUSH
// begin i := rand ( 1 , 7 ) ;
22749: LD_ADDR_VAR 0 1
22753: PUSH
22754: LD_INT 1
22756: PPUSH
22757: LD_INT 7
22759: PPUSH
22760: CALL_OW 12
22764: ST_TO_ADDR
// case i of 1 :
22765: LD_VAR 0 1
22769: PUSH
22770: LD_INT 1
22772: DOUBLE
22773: EQUAL
22774: IFTRUE 22778
22776: GO 22788
22778: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22779: LD_STRING earthquake(getX(game), 0, 32)
22781: PPUSH
22782: CALL_OW 559
22786: GO 23026
22788: LD_INT 2
22790: DOUBLE
22791: EQUAL
22792: IFTRUE 22796
22794: GO 22810
22796: POP
// begin ToLua ( displayStucuk(); ) ;
22797: LD_STRING displayStucuk();
22799: PPUSH
22800: CALL_OW 559
// ResetFog ;
22804: CALL_OW 335
// end ; 3 :
22808: GO 23026
22810: LD_INT 3
22812: DOUBLE
22813: EQUAL
22814: IFTRUE 22818
22816: GO 22922
22818: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22819: LD_ADDR_VAR 0 2
22823: PUSH
22824: LD_INT 22
22826: PUSH
22827: LD_OWVAR 2
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 25
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PPUSH
22850: CALL_OW 69
22854: ST_TO_ADDR
// if not tmp then
22855: LD_VAR 0 2
22859: NOT
22860: IFFALSE 22864
// exit ;
22862: GO 23026
// un := tmp [ rand ( 1 , tmp ) ] ;
22864: LD_ADDR_VAR 0 3
22868: PUSH
22869: LD_VAR 0 2
22873: PUSH
22874: LD_INT 1
22876: PPUSH
22877: LD_VAR 0 2
22881: PPUSH
22882: CALL_OW 12
22886: ARRAY
22887: ST_TO_ADDR
// if Crawls ( un ) then
22888: LD_VAR 0 3
22892: PPUSH
22893: CALL_OW 318
22897: IFFALSE 22908
// ComWalk ( un ) ;
22899: LD_VAR 0 3
22903: PPUSH
22904: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22908: LD_VAR 0 3
22912: PPUSH
22913: LD_INT 8
22915: PPUSH
22916: CALL_OW 336
// end ; 4 :
22920: GO 23026
22922: LD_INT 4
22924: DOUBLE
22925: EQUAL
22926: IFTRUE 22930
22928: GO 23004
22930: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22931: LD_ADDR_VAR 0 2
22935: PUSH
22936: LD_INT 22
22938: PUSH
22939: LD_OWVAR 2
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 30
22950: PUSH
22951: LD_INT 29
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PPUSH
22962: CALL_OW 69
22966: ST_TO_ADDR
// if not tmp then
22967: LD_VAR 0 2
22971: NOT
22972: IFFALSE 22976
// exit ;
22974: GO 23026
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22976: LD_VAR 0 2
22980: PUSH
22981: LD_INT 1
22983: ARRAY
22984: PPUSH
22985: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22989: LD_VAR 0 2
22993: PUSH
22994: LD_INT 1
22996: ARRAY
22997: PPUSH
22998: CALL_OW 65
// end ; 5 .. 7 :
23002: GO 23026
23004: LD_INT 5
23006: DOUBLE
23007: GREATEREQUAL
23008: IFFALSE 23016
23010: LD_INT 7
23012: DOUBLE
23013: LESSEQUAL
23014: IFTRUE 23018
23016: GO 23025
23018: POP
// StreamSibBomb ; end ;
23019: CALL 19263 0 0
23023: GO 23026
23025: POP
// end ;
23026: PPOPN 3
23028: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23029: LD_EXP 40
23033: PUSH
23034: LD_EXP 90
23038: AND
23039: IFFALSE 23195
23041: GO 23043
23043: DISABLE
23044: LD_INT 0
23046: PPUSH
23047: PPUSH
23048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23049: LD_ADDR_VAR 0 2
23053: PUSH
23054: LD_INT 81
23056: PUSH
23057: LD_OWVAR 2
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 2
23068: PUSH
23069: LD_INT 21
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 21
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PPUSH
23098: CALL_OW 69
23102: ST_TO_ADDR
// if not tmp then
23103: LD_VAR 0 2
23107: NOT
23108: IFFALSE 23112
// exit ;
23110: GO 23195
// p := 0 ;
23112: LD_ADDR_VAR 0 3
23116: PUSH
23117: LD_INT 0
23119: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23120: LD_INT 35
23122: PPUSH
23123: CALL_OW 67
// p := p + 1 ;
23127: LD_ADDR_VAR 0 3
23131: PUSH
23132: LD_VAR 0 3
23136: PUSH
23137: LD_INT 1
23139: PLUS
23140: ST_TO_ADDR
// for i in tmp do
23141: LD_ADDR_VAR 0 1
23145: PUSH
23146: LD_VAR 0 2
23150: PUSH
23151: FOR_IN
23152: IFFALSE 23183
// if GetLives ( i ) < 1000 then
23154: LD_VAR 0 1
23158: PPUSH
23159: CALL_OW 256
23163: PUSH
23164: LD_INT 1000
23166: LESS
23167: IFFALSE 23181
// SetLives ( i , 1000 ) ;
23169: LD_VAR 0 1
23173: PPUSH
23174: LD_INT 1000
23176: PPUSH
23177: CALL_OW 234
23181: GO 23151
23183: POP
23184: POP
// until p > 20 ;
23185: LD_VAR 0 3
23189: PUSH
23190: LD_INT 20
23192: GREATER
23193: IFFALSE 23120
// end ;
23195: PPOPN 3
23197: END
// every 0 0$1 trigger StreamModeActive and sTime do
23198: LD_EXP 40
23202: PUSH
23203: LD_EXP 91
23207: AND
23208: IFFALSE 23243
23210: GO 23212
23212: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23213: LD_INT 28
23215: PPUSH
23216: LD_OWVAR 2
23220: PPUSH
23221: LD_INT 2
23223: PPUSH
23224: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23228: LD_INT 30
23230: PPUSH
23231: LD_OWVAR 2
23235: PPUSH
23236: LD_INT 2
23238: PPUSH
23239: CALL_OW 322
// end ;
23243: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23244: LD_EXP 40
23248: PUSH
23249: LD_EXP 92
23253: AND
23254: IFFALSE 23375
23256: GO 23258
23258: DISABLE
23259: LD_INT 0
23261: PPUSH
23262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23263: LD_ADDR_VAR 0 2
23267: PUSH
23268: LD_INT 22
23270: PUSH
23271: LD_OWVAR 2
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 21
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 3
23292: PUSH
23293: LD_INT 23
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: PPUSH
23312: CALL_OW 69
23316: ST_TO_ADDR
// if not tmp then
23317: LD_VAR 0 2
23321: NOT
23322: IFFALSE 23326
// exit ;
23324: GO 23375
// for i in tmp do
23326: LD_ADDR_VAR 0 1
23330: PUSH
23331: LD_VAR 0 2
23335: PUSH
23336: FOR_IN
23337: IFFALSE 23373
// begin if Crawls ( i ) then
23339: LD_VAR 0 1
23343: PPUSH
23344: CALL_OW 318
23348: IFFALSE 23359
// ComWalk ( i ) ;
23350: LD_VAR 0 1
23354: PPUSH
23355: CALL_OW 138
// SetClass ( i , 2 ) ;
23359: LD_VAR 0 1
23363: PPUSH
23364: LD_INT 2
23366: PPUSH
23367: CALL_OW 336
// end ;
23371: GO 23336
23373: POP
23374: POP
// end ;
23375: PPOPN 2
23377: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23378: LD_EXP 40
23382: PUSH
23383: LD_EXP 93
23387: AND
23388: IFFALSE 23676
23390: GO 23392
23392: DISABLE
23393: LD_INT 0
23395: PPUSH
23396: PPUSH
23397: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23398: LD_OWVAR 2
23402: PPUSH
23403: LD_INT 9
23405: PPUSH
23406: LD_INT 1
23408: PPUSH
23409: LD_INT 1
23411: PPUSH
23412: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23416: LD_INT 9
23418: PPUSH
23419: LD_OWVAR 2
23423: PPUSH
23424: CALL_OW 343
// uc_side := 9 ;
23428: LD_ADDR_OWVAR 20
23432: PUSH
23433: LD_INT 9
23435: ST_TO_ADDR
// uc_nation := 2 ;
23436: LD_ADDR_OWVAR 21
23440: PUSH
23441: LD_INT 2
23443: ST_TO_ADDR
// hc_name := Dark Warrior ;
23444: LD_ADDR_OWVAR 26
23448: PUSH
23449: LD_STRING Dark Warrior
23451: ST_TO_ADDR
// hc_gallery :=  ;
23452: LD_ADDR_OWVAR 33
23456: PUSH
23457: LD_STRING 
23459: ST_TO_ADDR
// hc_noskilllimit := true ;
23460: LD_ADDR_OWVAR 76
23464: PUSH
23465: LD_INT 1
23467: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23468: LD_ADDR_OWVAR 31
23472: PUSH
23473: LD_INT 30
23475: PUSH
23476: LD_INT 30
23478: PUSH
23479: LD_INT 30
23481: PUSH
23482: LD_INT 30
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: ST_TO_ADDR
// un := CreateHuman ;
23491: LD_ADDR_VAR 0 3
23495: PUSH
23496: CALL_OW 44
23500: ST_TO_ADDR
// hc_noskilllimit := false ;
23501: LD_ADDR_OWVAR 76
23505: PUSH
23506: LD_INT 0
23508: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23509: LD_VAR 0 3
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 51
// ToLua ( playRanger() ) ;
23521: LD_STRING playRanger()
23523: PPUSH
23524: CALL_OW 559
// p := 0 ;
23528: LD_ADDR_VAR 0 2
23532: PUSH
23533: LD_INT 0
23535: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23536: LD_INT 35
23538: PPUSH
23539: CALL_OW 67
// p := p + 1 ;
23543: LD_ADDR_VAR 0 2
23547: PUSH
23548: LD_VAR 0 2
23552: PUSH
23553: LD_INT 1
23555: PLUS
23556: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23557: LD_VAR 0 3
23561: PPUSH
23562: CALL_OW 256
23566: PUSH
23567: LD_INT 1000
23569: LESS
23570: IFFALSE 23584
// SetLives ( un , 1000 ) ;
23572: LD_VAR 0 3
23576: PPUSH
23577: LD_INT 1000
23579: PPUSH
23580: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23584: LD_VAR 0 3
23588: PPUSH
23589: LD_INT 81
23591: PUSH
23592: LD_OWVAR 2
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 91
23603: PUSH
23604: LD_VAR 0 3
23608: PUSH
23609: LD_INT 30
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: LIST
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PPUSH
23621: CALL_OW 69
23625: PPUSH
23626: LD_VAR 0 3
23630: PPUSH
23631: CALL_OW 74
23635: PPUSH
23636: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23640: LD_VAR 0 2
23644: PUSH
23645: LD_INT 80
23647: GREATER
23648: PUSH
23649: LD_VAR 0 3
23653: PPUSH
23654: CALL_OW 301
23658: OR
23659: IFFALSE 23536
// if un then
23661: LD_VAR 0 3
23665: IFFALSE 23676
// RemoveUnit ( un ) ;
23667: LD_VAR 0 3
23671: PPUSH
23672: CALL_OW 64
// end ;
23676: PPOPN 3
23678: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23679: LD_EXP 94
23683: IFFALSE 23799
23685: GO 23687
23687: DISABLE
23688: LD_INT 0
23690: PPUSH
23691: PPUSH
23692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23693: LD_ADDR_VAR 0 2
23697: PUSH
23698: LD_INT 81
23700: PUSH
23701: LD_OWVAR 2
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 21
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PPUSH
23724: CALL_OW 69
23728: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23729: LD_STRING playComputer()
23731: PPUSH
23732: CALL_OW 559
// if not tmp then
23736: LD_VAR 0 2
23740: NOT
23741: IFFALSE 23745
// exit ;
23743: GO 23799
// for i in tmp do
23745: LD_ADDR_VAR 0 1
23749: PUSH
23750: LD_VAR 0 2
23754: PUSH
23755: FOR_IN
23756: IFFALSE 23797
// for j := 1 to 4 do
23758: LD_ADDR_VAR 0 3
23762: PUSH
23763: DOUBLE
23764: LD_INT 1
23766: DEC
23767: ST_TO_ADDR
23768: LD_INT 4
23770: PUSH
23771: FOR_TO
23772: IFFALSE 23793
// SetSkill ( i , j , 10 ) ;
23774: LD_VAR 0 1
23778: PPUSH
23779: LD_VAR 0 3
23783: PPUSH
23784: LD_INT 10
23786: PPUSH
23787: CALL_OW 237
23791: GO 23771
23793: POP
23794: POP
23795: GO 23755
23797: POP
23798: POP
// end ;
23799: PPOPN 3
23801: END
// every 0 0$1 trigger s30 do var i , tmp ;
23802: LD_EXP 95
23806: IFFALSE 23875
23808: GO 23810
23810: DISABLE
23811: LD_INT 0
23813: PPUSH
23814: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23815: LD_ADDR_VAR 0 2
23819: PUSH
23820: LD_INT 22
23822: PUSH
23823: LD_OWVAR 2
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PPUSH
23832: CALL_OW 69
23836: ST_TO_ADDR
// if not tmp then
23837: LD_VAR 0 2
23841: NOT
23842: IFFALSE 23846
// exit ;
23844: GO 23875
// for i in tmp do
23846: LD_ADDR_VAR 0 1
23850: PUSH
23851: LD_VAR 0 2
23855: PUSH
23856: FOR_IN
23857: IFFALSE 23873
// SetLives ( i , 300 ) ;
23859: LD_VAR 0 1
23863: PPUSH
23864: LD_INT 300
23866: PPUSH
23867: CALL_OW 234
23871: GO 23856
23873: POP
23874: POP
// end ;
23875: PPOPN 2
23877: END
// every 0 0$1 trigger s60 do var i , tmp ;
23878: LD_EXP 96
23882: IFFALSE 23951
23884: GO 23886
23886: DISABLE
23887: LD_INT 0
23889: PPUSH
23890: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23891: LD_ADDR_VAR 0 2
23895: PUSH
23896: LD_INT 22
23898: PUSH
23899: LD_OWVAR 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PPUSH
23908: CALL_OW 69
23912: ST_TO_ADDR
// if not tmp then
23913: LD_VAR 0 2
23917: NOT
23918: IFFALSE 23922
// exit ;
23920: GO 23951
// for i in tmp do
23922: LD_ADDR_VAR 0 1
23926: PUSH
23927: LD_VAR 0 2
23931: PUSH
23932: FOR_IN
23933: IFFALSE 23949
// SetLives ( i , 600 ) ;
23935: LD_VAR 0 1
23939: PPUSH
23940: LD_INT 600
23942: PPUSH
23943: CALL_OW 234
23947: GO 23932
23949: POP
23950: POP
// end ;
23951: PPOPN 2
23953: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23954: LD_INT 0
23956: PPUSH
// case cmd of 301 :
23957: LD_VAR 0 1
23961: PUSH
23962: LD_INT 301
23964: DOUBLE
23965: EQUAL
23966: IFTRUE 23970
23968: GO 24002
23970: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23971: LD_VAR 0 6
23975: PPUSH
23976: LD_VAR 0 7
23980: PPUSH
23981: LD_VAR 0 8
23985: PPUSH
23986: LD_VAR 0 4
23990: PPUSH
23991: LD_VAR 0 5
23995: PPUSH
23996: CALL 25203 0 5
24000: GO 24123
24002: LD_INT 302
24004: DOUBLE
24005: EQUAL
24006: IFTRUE 24010
24008: GO 24047
24010: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24011: LD_VAR 0 6
24015: PPUSH
24016: LD_VAR 0 7
24020: PPUSH
24021: LD_VAR 0 8
24025: PPUSH
24026: LD_VAR 0 9
24030: PPUSH
24031: LD_VAR 0 4
24035: PPUSH
24036: LD_VAR 0 5
24040: PPUSH
24041: CALL 25294 0 6
24045: GO 24123
24047: LD_INT 303
24049: DOUBLE
24050: EQUAL
24051: IFTRUE 24055
24053: GO 24092
24055: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24056: LD_VAR 0 6
24060: PPUSH
24061: LD_VAR 0 7
24065: PPUSH
24066: LD_VAR 0 8
24070: PPUSH
24071: LD_VAR 0 9
24075: PPUSH
24076: LD_VAR 0 4
24080: PPUSH
24081: LD_VAR 0 5
24085: PPUSH
24086: CALL 24128 0 6
24090: GO 24123
24092: LD_INT 304
24094: DOUBLE
24095: EQUAL
24096: IFTRUE 24100
24098: GO 24122
24100: POP
// hHackTeleport ( unit , x , y ) ; end ;
24101: LD_VAR 0 2
24105: PPUSH
24106: LD_VAR 0 4
24110: PPUSH
24111: LD_VAR 0 5
24115: PPUSH
24116: CALL 25887 0 3
24120: GO 24123
24122: POP
// end ;
24123: LD_VAR 0 12
24127: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24128: LD_INT 0
24130: PPUSH
24131: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24132: LD_VAR 0 1
24136: PUSH
24137: LD_INT 1
24139: LESS
24140: PUSH
24141: LD_VAR 0 1
24145: PUSH
24146: LD_INT 3
24148: GREATER
24149: OR
24150: PUSH
24151: LD_VAR 0 5
24155: PPUSH
24156: LD_VAR 0 6
24160: PPUSH
24161: CALL_OW 428
24165: OR
24166: IFFALSE 24170
// exit ;
24168: GO 24890
// uc_side := your_side ;
24170: LD_ADDR_OWVAR 20
24174: PUSH
24175: LD_OWVAR 2
24179: ST_TO_ADDR
// uc_nation := nation ;
24180: LD_ADDR_OWVAR 21
24184: PUSH
24185: LD_VAR 0 1
24189: ST_TO_ADDR
// bc_level = 1 ;
24190: LD_ADDR_OWVAR 43
24194: PUSH
24195: LD_INT 1
24197: ST_TO_ADDR
// case btype of 1 :
24198: LD_VAR 0 2
24202: PUSH
24203: LD_INT 1
24205: DOUBLE
24206: EQUAL
24207: IFTRUE 24211
24209: GO 24222
24211: POP
// bc_type := b_depot ; 2 :
24212: LD_ADDR_OWVAR 42
24216: PUSH
24217: LD_INT 0
24219: ST_TO_ADDR
24220: GO 24834
24222: LD_INT 2
24224: DOUBLE
24225: EQUAL
24226: IFTRUE 24230
24228: GO 24241
24230: POP
// bc_type := b_warehouse ; 3 :
24231: LD_ADDR_OWVAR 42
24235: PUSH
24236: LD_INT 1
24238: ST_TO_ADDR
24239: GO 24834
24241: LD_INT 3
24243: DOUBLE
24244: EQUAL
24245: IFTRUE 24249
24247: GO 24260
24249: POP
// bc_type := b_lab ; 4 .. 9 :
24250: LD_ADDR_OWVAR 42
24254: PUSH
24255: LD_INT 6
24257: ST_TO_ADDR
24258: GO 24834
24260: LD_INT 4
24262: DOUBLE
24263: GREATEREQUAL
24264: IFFALSE 24272
24266: LD_INT 9
24268: DOUBLE
24269: LESSEQUAL
24270: IFTRUE 24274
24272: GO 24326
24274: POP
// begin bc_type := b_lab_half ;
24275: LD_ADDR_OWVAR 42
24279: PUSH
24280: LD_INT 7
24282: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24283: LD_ADDR_OWVAR 44
24287: PUSH
24288: LD_INT 10
24290: PUSH
24291: LD_INT 11
24293: PUSH
24294: LD_INT 12
24296: PUSH
24297: LD_INT 15
24299: PUSH
24300: LD_INT 14
24302: PUSH
24303: LD_INT 13
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: PUSH
24314: LD_VAR 0 2
24318: PUSH
24319: LD_INT 3
24321: MINUS
24322: ARRAY
24323: ST_TO_ADDR
// end ; 10 .. 13 :
24324: GO 24834
24326: LD_INT 10
24328: DOUBLE
24329: GREATEREQUAL
24330: IFFALSE 24338
24332: LD_INT 13
24334: DOUBLE
24335: LESSEQUAL
24336: IFTRUE 24340
24338: GO 24417
24340: POP
// begin bc_type := b_lab_full ;
24341: LD_ADDR_OWVAR 42
24345: PUSH
24346: LD_INT 8
24348: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24349: LD_ADDR_OWVAR 44
24353: PUSH
24354: LD_INT 10
24356: PUSH
24357: LD_INT 12
24359: PUSH
24360: LD_INT 14
24362: PUSH
24363: LD_INT 13
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: LD_VAR 0 2
24376: PUSH
24377: LD_INT 9
24379: MINUS
24380: ARRAY
24381: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24382: LD_ADDR_OWVAR 45
24386: PUSH
24387: LD_INT 11
24389: PUSH
24390: LD_INT 15
24392: PUSH
24393: LD_INT 12
24395: PUSH
24396: LD_INT 15
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: PUSH
24405: LD_VAR 0 2
24409: PUSH
24410: LD_INT 9
24412: MINUS
24413: ARRAY
24414: ST_TO_ADDR
// end ; 14 :
24415: GO 24834
24417: LD_INT 14
24419: DOUBLE
24420: EQUAL
24421: IFTRUE 24425
24423: GO 24436
24425: POP
// bc_type := b_workshop ; 15 :
24426: LD_ADDR_OWVAR 42
24430: PUSH
24431: LD_INT 2
24433: ST_TO_ADDR
24434: GO 24834
24436: LD_INT 15
24438: DOUBLE
24439: EQUAL
24440: IFTRUE 24444
24442: GO 24455
24444: POP
// bc_type := b_factory ; 16 :
24445: LD_ADDR_OWVAR 42
24449: PUSH
24450: LD_INT 3
24452: ST_TO_ADDR
24453: GO 24834
24455: LD_INT 16
24457: DOUBLE
24458: EQUAL
24459: IFTRUE 24463
24461: GO 24474
24463: POP
// bc_type := b_ext_gun ; 17 :
24464: LD_ADDR_OWVAR 42
24468: PUSH
24469: LD_INT 17
24471: ST_TO_ADDR
24472: GO 24834
24474: LD_INT 17
24476: DOUBLE
24477: EQUAL
24478: IFTRUE 24482
24480: GO 24510
24482: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24483: LD_ADDR_OWVAR 42
24487: PUSH
24488: LD_INT 19
24490: PUSH
24491: LD_INT 23
24493: PUSH
24494: LD_INT 19
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: LIST
24501: PUSH
24502: LD_VAR 0 1
24506: ARRAY
24507: ST_TO_ADDR
24508: GO 24834
24510: LD_INT 18
24512: DOUBLE
24513: EQUAL
24514: IFTRUE 24518
24516: GO 24529
24518: POP
// bc_type := b_ext_radar ; 19 :
24519: LD_ADDR_OWVAR 42
24523: PUSH
24524: LD_INT 20
24526: ST_TO_ADDR
24527: GO 24834
24529: LD_INT 19
24531: DOUBLE
24532: EQUAL
24533: IFTRUE 24537
24535: GO 24548
24537: POP
// bc_type := b_ext_radio ; 20 :
24538: LD_ADDR_OWVAR 42
24542: PUSH
24543: LD_INT 22
24545: ST_TO_ADDR
24546: GO 24834
24548: LD_INT 20
24550: DOUBLE
24551: EQUAL
24552: IFTRUE 24556
24554: GO 24567
24556: POP
// bc_type := b_ext_siberium ; 21 :
24557: LD_ADDR_OWVAR 42
24561: PUSH
24562: LD_INT 21
24564: ST_TO_ADDR
24565: GO 24834
24567: LD_INT 21
24569: DOUBLE
24570: EQUAL
24571: IFTRUE 24575
24573: GO 24586
24575: POP
// bc_type := b_ext_computer ; 22 :
24576: LD_ADDR_OWVAR 42
24580: PUSH
24581: LD_INT 24
24583: ST_TO_ADDR
24584: GO 24834
24586: LD_INT 22
24588: DOUBLE
24589: EQUAL
24590: IFTRUE 24594
24592: GO 24605
24594: POP
// bc_type := b_ext_track ; 23 :
24595: LD_ADDR_OWVAR 42
24599: PUSH
24600: LD_INT 16
24602: ST_TO_ADDR
24603: GO 24834
24605: LD_INT 23
24607: DOUBLE
24608: EQUAL
24609: IFTRUE 24613
24611: GO 24624
24613: POP
// bc_type := b_ext_laser ; 24 :
24614: LD_ADDR_OWVAR 42
24618: PUSH
24619: LD_INT 25
24621: ST_TO_ADDR
24622: GO 24834
24624: LD_INT 24
24626: DOUBLE
24627: EQUAL
24628: IFTRUE 24632
24630: GO 24643
24632: POP
// bc_type := b_control_tower ; 25 :
24633: LD_ADDR_OWVAR 42
24637: PUSH
24638: LD_INT 36
24640: ST_TO_ADDR
24641: GO 24834
24643: LD_INT 25
24645: DOUBLE
24646: EQUAL
24647: IFTRUE 24651
24649: GO 24662
24651: POP
// bc_type := b_breastwork ; 26 :
24652: LD_ADDR_OWVAR 42
24656: PUSH
24657: LD_INT 31
24659: ST_TO_ADDR
24660: GO 24834
24662: LD_INT 26
24664: DOUBLE
24665: EQUAL
24666: IFTRUE 24670
24668: GO 24681
24670: POP
// bc_type := b_bunker ; 27 :
24671: LD_ADDR_OWVAR 42
24675: PUSH
24676: LD_INT 32
24678: ST_TO_ADDR
24679: GO 24834
24681: LD_INT 27
24683: DOUBLE
24684: EQUAL
24685: IFTRUE 24689
24687: GO 24700
24689: POP
// bc_type := b_turret ; 28 :
24690: LD_ADDR_OWVAR 42
24694: PUSH
24695: LD_INT 33
24697: ST_TO_ADDR
24698: GO 24834
24700: LD_INT 28
24702: DOUBLE
24703: EQUAL
24704: IFTRUE 24708
24706: GO 24719
24708: POP
// bc_type := b_armoury ; 29 :
24709: LD_ADDR_OWVAR 42
24713: PUSH
24714: LD_INT 4
24716: ST_TO_ADDR
24717: GO 24834
24719: LD_INT 29
24721: DOUBLE
24722: EQUAL
24723: IFTRUE 24727
24725: GO 24738
24727: POP
// bc_type := b_barracks ; 30 :
24728: LD_ADDR_OWVAR 42
24732: PUSH
24733: LD_INT 5
24735: ST_TO_ADDR
24736: GO 24834
24738: LD_INT 30
24740: DOUBLE
24741: EQUAL
24742: IFTRUE 24746
24744: GO 24757
24746: POP
// bc_type := b_solar_power ; 31 :
24747: LD_ADDR_OWVAR 42
24751: PUSH
24752: LD_INT 27
24754: ST_TO_ADDR
24755: GO 24834
24757: LD_INT 31
24759: DOUBLE
24760: EQUAL
24761: IFTRUE 24765
24763: GO 24776
24765: POP
// bc_type := b_oil_power ; 32 :
24766: LD_ADDR_OWVAR 42
24770: PUSH
24771: LD_INT 26
24773: ST_TO_ADDR
24774: GO 24834
24776: LD_INT 32
24778: DOUBLE
24779: EQUAL
24780: IFTRUE 24784
24782: GO 24795
24784: POP
// bc_type := b_siberite_power ; 33 :
24785: LD_ADDR_OWVAR 42
24789: PUSH
24790: LD_INT 28
24792: ST_TO_ADDR
24793: GO 24834
24795: LD_INT 33
24797: DOUBLE
24798: EQUAL
24799: IFTRUE 24803
24801: GO 24814
24803: POP
// bc_type := b_oil_mine ; 34 :
24804: LD_ADDR_OWVAR 42
24808: PUSH
24809: LD_INT 29
24811: ST_TO_ADDR
24812: GO 24834
24814: LD_INT 34
24816: DOUBLE
24817: EQUAL
24818: IFTRUE 24822
24820: GO 24833
24822: POP
// bc_type := b_siberite_mine ; end ;
24823: LD_ADDR_OWVAR 42
24827: PUSH
24828: LD_INT 30
24830: ST_TO_ADDR
24831: GO 24834
24833: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24834: LD_ADDR_VAR 0 8
24838: PUSH
24839: LD_VAR 0 5
24843: PPUSH
24844: LD_VAR 0 6
24848: PPUSH
24849: LD_VAR 0 3
24853: PPUSH
24854: CALL_OW 47
24858: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24859: LD_OWVAR 42
24863: PUSH
24864: LD_INT 32
24866: PUSH
24867: LD_INT 33
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: IN
24874: IFFALSE 24890
// PlaceWeaponTurret ( b , weapon ) ;
24876: LD_VAR 0 8
24880: PPUSH
24881: LD_VAR 0 4
24885: PPUSH
24886: CALL_OW 431
// end ;
24890: LD_VAR 0 7
24894: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24895: LD_INT 0
24897: PPUSH
24898: PPUSH
24899: PPUSH
24900: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24901: LD_ADDR_VAR 0 4
24905: PUSH
24906: LD_INT 22
24908: PUSH
24909: LD_OWVAR 2
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: LD_INT 30
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 30
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PPUSH
24950: CALL_OW 69
24954: ST_TO_ADDR
// if not tmp then
24955: LD_VAR 0 4
24959: NOT
24960: IFFALSE 24964
// exit ;
24962: GO 25023
// for i in tmp do
24964: LD_ADDR_VAR 0 2
24968: PUSH
24969: LD_VAR 0 4
24973: PUSH
24974: FOR_IN
24975: IFFALSE 25021
// for j = 1 to 3 do
24977: LD_ADDR_VAR 0 3
24981: PUSH
24982: DOUBLE
24983: LD_INT 1
24985: DEC
24986: ST_TO_ADDR
24987: LD_INT 3
24989: PUSH
24990: FOR_TO
24991: IFFALSE 25017
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24993: LD_VAR 0 2
24997: PPUSH
24998: CALL_OW 274
25002: PPUSH
25003: LD_VAR 0 3
25007: PPUSH
25008: LD_INT 99999
25010: PPUSH
25011: CALL_OW 277
25015: GO 24990
25017: POP
25018: POP
25019: GO 24974
25021: POP
25022: POP
// end ;
25023: LD_VAR 0 1
25027: RET
// export function hHackSetLevel10 ; var i , j ; begin
25028: LD_INT 0
25030: PPUSH
25031: PPUSH
25032: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25033: LD_ADDR_VAR 0 2
25037: PUSH
25038: LD_INT 21
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PPUSH
25048: CALL_OW 69
25052: PUSH
25053: FOR_IN
25054: IFFALSE 25106
// if IsSelected ( i ) then
25056: LD_VAR 0 2
25060: PPUSH
25061: CALL_OW 306
25065: IFFALSE 25104
// begin for j := 1 to 4 do
25067: LD_ADDR_VAR 0 3
25071: PUSH
25072: DOUBLE
25073: LD_INT 1
25075: DEC
25076: ST_TO_ADDR
25077: LD_INT 4
25079: PUSH
25080: FOR_TO
25081: IFFALSE 25102
// SetSkill ( i , j , 10 ) ;
25083: LD_VAR 0 2
25087: PPUSH
25088: LD_VAR 0 3
25092: PPUSH
25093: LD_INT 10
25095: PPUSH
25096: CALL_OW 237
25100: GO 25080
25102: POP
25103: POP
// end ;
25104: GO 25053
25106: POP
25107: POP
// end ;
25108: LD_VAR 0 1
25112: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25113: LD_INT 0
25115: PPUSH
25116: PPUSH
25117: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25118: LD_ADDR_VAR 0 2
25122: PUSH
25123: LD_INT 22
25125: PUSH
25126: LD_OWVAR 2
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 21
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PPUSH
25149: CALL_OW 69
25153: PUSH
25154: FOR_IN
25155: IFFALSE 25196
// begin for j := 1 to 4 do
25157: LD_ADDR_VAR 0 3
25161: PUSH
25162: DOUBLE
25163: LD_INT 1
25165: DEC
25166: ST_TO_ADDR
25167: LD_INT 4
25169: PUSH
25170: FOR_TO
25171: IFFALSE 25192
// SetSkill ( i , j , 10 ) ;
25173: LD_VAR 0 2
25177: PPUSH
25178: LD_VAR 0 3
25182: PPUSH
25183: LD_INT 10
25185: PPUSH
25186: CALL_OW 237
25190: GO 25170
25192: POP
25193: POP
// end ;
25194: GO 25154
25196: POP
25197: POP
// end ;
25198: LD_VAR 0 1
25202: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25203: LD_INT 0
25205: PPUSH
// uc_side := your_side ;
25206: LD_ADDR_OWVAR 20
25210: PUSH
25211: LD_OWVAR 2
25215: ST_TO_ADDR
// uc_nation := nation ;
25216: LD_ADDR_OWVAR 21
25220: PUSH
25221: LD_VAR 0 1
25225: ST_TO_ADDR
// InitHc ;
25226: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25230: LD_INT 0
25232: PPUSH
25233: LD_VAR 0 2
25237: PPUSH
25238: LD_VAR 0 3
25242: PPUSH
25243: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25247: LD_VAR 0 4
25251: PPUSH
25252: LD_VAR 0 5
25256: PPUSH
25257: CALL_OW 428
25261: PUSH
25262: LD_INT 0
25264: EQUAL
25265: IFFALSE 25289
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25267: CALL_OW 44
25271: PPUSH
25272: LD_VAR 0 4
25276: PPUSH
25277: LD_VAR 0 5
25281: PPUSH
25282: LD_INT 1
25284: PPUSH
25285: CALL_OW 48
// end ;
25289: LD_VAR 0 6
25293: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25294: LD_INT 0
25296: PPUSH
25297: PPUSH
// uc_side := your_side ;
25298: LD_ADDR_OWVAR 20
25302: PUSH
25303: LD_OWVAR 2
25307: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25308: LD_VAR 0 1
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: LD_INT 2
25318: PUSH
25319: LD_INT 3
25321: PUSH
25322: LD_INT 4
25324: PUSH
25325: LD_INT 5
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: IN
25335: IFFALSE 25347
// uc_nation := nation_american else
25337: LD_ADDR_OWVAR 21
25341: PUSH
25342: LD_INT 1
25344: ST_TO_ADDR
25345: GO 25390
// if chassis in [ 11 , 12 , 13 , 14 ] then
25347: LD_VAR 0 1
25351: PUSH
25352: LD_INT 11
25354: PUSH
25355: LD_INT 12
25357: PUSH
25358: LD_INT 13
25360: PUSH
25361: LD_INT 14
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: IN
25370: IFFALSE 25382
// uc_nation := nation_arabian else
25372: LD_ADDR_OWVAR 21
25376: PUSH
25377: LD_INT 2
25379: ST_TO_ADDR
25380: GO 25390
// uc_nation := nation_russian ;
25382: LD_ADDR_OWVAR 21
25386: PUSH
25387: LD_INT 3
25389: ST_TO_ADDR
// vc_chassis := chassis ;
25390: LD_ADDR_OWVAR 37
25394: PUSH
25395: LD_VAR 0 1
25399: ST_TO_ADDR
// vc_engine := engine ;
25400: LD_ADDR_OWVAR 39
25404: PUSH
25405: LD_VAR 0 2
25409: ST_TO_ADDR
// vc_control := control ;
25410: LD_ADDR_OWVAR 38
25414: PUSH
25415: LD_VAR 0 3
25419: ST_TO_ADDR
// vc_weapon := weapon ;
25420: LD_ADDR_OWVAR 40
25424: PUSH
25425: LD_VAR 0 4
25429: ST_TO_ADDR
// un := CreateVehicle ;
25430: LD_ADDR_VAR 0 8
25434: PUSH
25435: CALL_OW 45
25439: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25440: LD_VAR 0 8
25444: PPUSH
25445: LD_INT 0
25447: PPUSH
25448: LD_INT 5
25450: PPUSH
25451: CALL_OW 12
25455: PPUSH
25456: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25460: LD_VAR 0 8
25464: PPUSH
25465: LD_VAR 0 5
25469: PPUSH
25470: LD_VAR 0 6
25474: PPUSH
25475: LD_INT 1
25477: PPUSH
25478: CALL_OW 48
// end ;
25482: LD_VAR 0 7
25486: RET
// export hInvincible ; every 1 do
25487: GO 25489
25489: DISABLE
// hInvincible := [ ] ;
25490: LD_ADDR_EXP 97
25494: PUSH
25495: EMPTY
25496: ST_TO_ADDR
25497: END
// every 10 do var i ;
25498: GO 25500
25500: DISABLE
25501: LD_INT 0
25503: PPUSH
// begin enable ;
25504: ENABLE
// if not hInvincible then
25505: LD_EXP 97
25509: NOT
25510: IFFALSE 25514
// exit ;
25512: GO 25558
// for i in hInvincible do
25514: LD_ADDR_VAR 0 1
25518: PUSH
25519: LD_EXP 97
25523: PUSH
25524: FOR_IN
25525: IFFALSE 25556
// if GetLives ( i ) < 1000 then
25527: LD_VAR 0 1
25531: PPUSH
25532: CALL_OW 256
25536: PUSH
25537: LD_INT 1000
25539: LESS
25540: IFFALSE 25554
// SetLives ( i , 1000 ) ;
25542: LD_VAR 0 1
25546: PPUSH
25547: LD_INT 1000
25549: PPUSH
25550: CALL_OW 234
25554: GO 25524
25556: POP
25557: POP
// end ;
25558: PPOPN 1
25560: END
// export function hHackInvincible ; var i ; begin
25561: LD_INT 0
25563: PPUSH
25564: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25565: LD_ADDR_VAR 0 2
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: LD_INT 21
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 21
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 69
25602: PUSH
25603: FOR_IN
25604: IFFALSE 25665
// if IsSelected ( i ) then
25606: LD_VAR 0 2
25610: PPUSH
25611: CALL_OW 306
25615: IFFALSE 25663
// begin if i in hInvincible then
25617: LD_VAR 0 2
25621: PUSH
25622: LD_EXP 97
25626: IN
25627: IFFALSE 25647
// hInvincible := hInvincible diff i else
25629: LD_ADDR_EXP 97
25633: PUSH
25634: LD_EXP 97
25638: PUSH
25639: LD_VAR 0 2
25643: DIFF
25644: ST_TO_ADDR
25645: GO 25663
// hInvincible := hInvincible union i ;
25647: LD_ADDR_EXP 97
25651: PUSH
25652: LD_EXP 97
25656: PUSH
25657: LD_VAR 0 2
25661: UNION
25662: ST_TO_ADDR
// end ;
25663: GO 25603
25665: POP
25666: POP
// end ;
25667: LD_VAR 0 1
25671: RET
// export function hHackInvisible ; var i , j ; begin
25672: LD_INT 0
25674: PPUSH
25675: PPUSH
25676: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25677: LD_ADDR_VAR 0 2
25681: PUSH
25682: LD_INT 21
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PPUSH
25692: CALL_OW 69
25696: PUSH
25697: FOR_IN
25698: IFFALSE 25722
// if IsSelected ( i ) then
25700: LD_VAR 0 2
25704: PPUSH
25705: CALL_OW 306
25709: IFFALSE 25720
// ComForceInvisible ( i ) ;
25711: LD_VAR 0 2
25715: PPUSH
25716: CALL_OW 496
25720: GO 25697
25722: POP
25723: POP
// end ;
25724: LD_VAR 0 1
25728: RET
// export function hHackChangeYourSide ; begin
25729: LD_INT 0
25731: PPUSH
// if your_side = 8 then
25732: LD_OWVAR 2
25736: PUSH
25737: LD_INT 8
25739: EQUAL
25740: IFFALSE 25752
// your_side := 0 else
25742: LD_ADDR_OWVAR 2
25746: PUSH
25747: LD_INT 0
25749: ST_TO_ADDR
25750: GO 25766
// your_side := your_side + 1 ;
25752: LD_ADDR_OWVAR 2
25756: PUSH
25757: LD_OWVAR 2
25761: PUSH
25762: LD_INT 1
25764: PLUS
25765: ST_TO_ADDR
// end ;
25766: LD_VAR 0 1
25770: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25771: LD_INT 0
25773: PPUSH
25774: PPUSH
25775: PPUSH
// for i in all_units do
25776: LD_ADDR_VAR 0 2
25780: PUSH
25781: LD_OWVAR 3
25785: PUSH
25786: FOR_IN
25787: IFFALSE 25865
// if IsSelected ( i ) then
25789: LD_VAR 0 2
25793: PPUSH
25794: CALL_OW 306
25798: IFFALSE 25863
// begin j := GetSide ( i ) ;
25800: LD_ADDR_VAR 0 3
25804: PUSH
25805: LD_VAR 0 2
25809: PPUSH
25810: CALL_OW 255
25814: ST_TO_ADDR
// if j = 8 then
25815: LD_VAR 0 3
25819: PUSH
25820: LD_INT 8
25822: EQUAL
25823: IFFALSE 25835
// j := 0 else
25825: LD_ADDR_VAR 0 3
25829: PUSH
25830: LD_INT 0
25832: ST_TO_ADDR
25833: GO 25849
// j := j + 1 ;
25835: LD_ADDR_VAR 0 3
25839: PUSH
25840: LD_VAR 0 3
25844: PUSH
25845: LD_INT 1
25847: PLUS
25848: ST_TO_ADDR
// SetSide ( i , j ) ;
25849: LD_VAR 0 2
25853: PPUSH
25854: LD_VAR 0 3
25858: PPUSH
25859: CALL_OW 235
// end ;
25863: GO 25786
25865: POP
25866: POP
// end ;
25867: LD_VAR 0 1
25871: RET
// export function hHackFog ; begin
25872: LD_INT 0
25874: PPUSH
// FogOff ( true ) ;
25875: LD_INT 1
25877: PPUSH
25878: CALL_OW 344
// end ;
25882: LD_VAR 0 1
25886: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25887: LD_INT 0
25889: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25890: LD_VAR 0 1
25894: PPUSH
25895: LD_VAR 0 2
25899: PPUSH
25900: LD_VAR 0 3
25904: PPUSH
25905: LD_INT 1
25907: PPUSH
25908: LD_INT 1
25910: PPUSH
25911: CALL_OW 483
// CenterOnXY ( x , y ) ;
25915: LD_VAR 0 2
25919: PPUSH
25920: LD_VAR 0 3
25924: PPUSH
25925: CALL_OW 84
// end ; end_of_file
25929: LD_VAR 0 4
25933: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25934: LD_INT 0
25936: PPUSH
25937: PPUSH
25938: PPUSH
25939: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25940: LD_VAR 0 1
25944: PPUSH
25945: CALL_OW 264
25949: PUSH
25950: LD_EXP 25
25954: EQUAL
25955: IFFALSE 26027
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25957: LD_INT 68
25959: PPUSH
25960: LD_VAR 0 1
25964: PPUSH
25965: CALL_OW 255
25969: PPUSH
25970: CALL_OW 321
25974: PUSH
25975: LD_INT 2
25977: EQUAL
25978: IFFALSE 25990
// eff := 70 else
25980: LD_ADDR_VAR 0 4
25984: PUSH
25985: LD_INT 70
25987: ST_TO_ADDR
25988: GO 25998
// eff := 30 ;
25990: LD_ADDR_VAR 0 4
25994: PUSH
25995: LD_INT 30
25997: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 250
26007: PPUSH
26008: LD_VAR 0 1
26012: PPUSH
26013: CALL_OW 251
26017: PPUSH
26018: LD_VAR 0 4
26022: PPUSH
26023: CALL_OW 495
// end ; end ;
26027: LD_VAR 0 2
26031: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26032: LD_INT 0
26034: PPUSH
// end ;
26035: LD_VAR 0 4
26039: RET
// export function SOS_Command ( cmd ) ; begin
26040: LD_INT 0
26042: PPUSH
// end ;
26043: LD_VAR 0 2
26047: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26048: LD_INT 0
26050: PPUSH
// end ;
26051: LD_VAR 0 6
26055: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26056: LD_INT 0
26058: PPUSH
26059: PPUSH
// if not vehicle or not factory then
26060: LD_VAR 0 1
26064: NOT
26065: PUSH
26066: LD_VAR 0 2
26070: NOT
26071: OR
26072: IFFALSE 26076
// exit ;
26074: GO 26307
// if factoryWaypoints >= factory then
26076: LD_EXP 98
26080: PUSH
26081: LD_VAR 0 2
26085: GREATEREQUAL
26086: IFFALSE 26307
// if factoryWaypoints [ factory ] then
26088: LD_EXP 98
26092: PUSH
26093: LD_VAR 0 2
26097: ARRAY
26098: IFFALSE 26307
// begin if GetControl ( vehicle ) = control_manual then
26100: LD_VAR 0 1
26104: PPUSH
26105: CALL_OW 263
26109: PUSH
26110: LD_INT 1
26112: EQUAL
26113: IFFALSE 26194
// begin driver := IsDrivenBy ( vehicle ) ;
26115: LD_ADDR_VAR 0 4
26119: PUSH
26120: LD_VAR 0 1
26124: PPUSH
26125: CALL_OW 311
26129: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26130: LD_VAR 0 4
26134: PPUSH
26135: LD_EXP 98
26139: PUSH
26140: LD_VAR 0 2
26144: ARRAY
26145: PUSH
26146: LD_INT 3
26148: ARRAY
26149: PPUSH
26150: LD_EXP 98
26154: PUSH
26155: LD_VAR 0 2
26159: ARRAY
26160: PUSH
26161: LD_INT 4
26163: ARRAY
26164: PPUSH
26165: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26169: LD_VAR 0 4
26173: PPUSH
26174: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26178: LD_VAR 0 4
26182: PPUSH
26183: LD_VAR 0 2
26187: PPUSH
26188: CALL_OW 180
// end else
26192: GO 26307
// if GetControl ( vehicle ) = control_remote then
26194: LD_VAR 0 1
26198: PPUSH
26199: CALL_OW 263
26203: PUSH
26204: LD_INT 2
26206: EQUAL
26207: IFFALSE 26268
// begin wait ( 0 0$2 ) ;
26209: LD_INT 70
26211: PPUSH
26212: CALL_OW 67
// if Connect ( vehicle ) then
26216: LD_VAR 0 1
26220: PPUSH
26221: CALL 38531 0 1
26225: IFFALSE 26266
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26227: LD_VAR 0 1
26231: PPUSH
26232: LD_EXP 98
26236: PUSH
26237: LD_VAR 0 2
26241: ARRAY
26242: PUSH
26243: LD_INT 3
26245: ARRAY
26246: PPUSH
26247: LD_EXP 98
26251: PUSH
26252: LD_VAR 0 2
26256: ARRAY
26257: PUSH
26258: LD_INT 4
26260: ARRAY
26261: PPUSH
26262: CALL_OW 171
// end else
26266: GO 26307
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26268: LD_VAR 0 1
26272: PPUSH
26273: LD_EXP 98
26277: PUSH
26278: LD_VAR 0 2
26282: ARRAY
26283: PUSH
26284: LD_INT 3
26286: ARRAY
26287: PPUSH
26288: LD_EXP 98
26292: PUSH
26293: LD_VAR 0 2
26297: ARRAY
26298: PUSH
26299: LD_INT 4
26301: ARRAY
26302: PPUSH
26303: CALL_OW 171
// end ; end ;
26307: LD_VAR 0 3
26311: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26312: LD_INT 0
26314: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26315: LD_VAR 0 1
26319: PUSH
26320: LD_INT 250
26322: EQUAL
26323: PUSH
26324: LD_VAR 0 2
26328: PPUSH
26329: CALL_OW 264
26333: PUSH
26334: LD_EXP 28
26338: EQUAL
26339: AND
26340: IFFALSE 26361
// MinerPlaceMine ( unit , x , y ) ;
26342: LD_VAR 0 2
26346: PPUSH
26347: LD_VAR 0 4
26351: PPUSH
26352: LD_VAR 0 5
26356: PPUSH
26357: CALL 29089 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26361: LD_VAR 0 1
26365: PUSH
26366: LD_INT 251
26368: EQUAL
26369: PUSH
26370: LD_VAR 0 2
26374: PPUSH
26375: CALL_OW 264
26379: PUSH
26380: LD_EXP 28
26384: EQUAL
26385: AND
26386: IFFALSE 26407
// MinerDetonateMine ( unit , x , y ) ;
26388: LD_VAR 0 2
26392: PPUSH
26393: LD_VAR 0 4
26397: PPUSH
26398: LD_VAR 0 5
26402: PPUSH
26403: CALL 29366 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26407: LD_VAR 0 1
26411: PUSH
26412: LD_INT 252
26414: EQUAL
26415: PUSH
26416: LD_VAR 0 2
26420: PPUSH
26421: CALL_OW 264
26425: PUSH
26426: LD_EXP 28
26430: EQUAL
26431: AND
26432: IFFALSE 26453
// MinerCreateMinefield ( unit , x , y ) ;
26434: LD_VAR 0 2
26438: PPUSH
26439: LD_VAR 0 4
26443: PPUSH
26444: LD_VAR 0 5
26448: PPUSH
26449: CALL 29783 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26453: LD_VAR 0 1
26457: PUSH
26458: LD_INT 253
26460: EQUAL
26461: PUSH
26462: LD_VAR 0 2
26466: PPUSH
26467: CALL_OW 257
26471: PUSH
26472: LD_INT 5
26474: EQUAL
26475: AND
26476: IFFALSE 26497
// ComBinocular ( unit , x , y ) ;
26478: LD_VAR 0 2
26482: PPUSH
26483: LD_VAR 0 4
26487: PPUSH
26488: LD_VAR 0 5
26492: PPUSH
26493: CALL 30154 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26497: LD_VAR 0 1
26501: PUSH
26502: LD_INT 254
26504: EQUAL
26505: PUSH
26506: LD_VAR 0 2
26510: PPUSH
26511: CALL_OW 264
26515: PUSH
26516: LD_EXP 23
26520: EQUAL
26521: AND
26522: PUSH
26523: LD_VAR 0 3
26527: PPUSH
26528: CALL_OW 263
26532: PUSH
26533: LD_INT 3
26535: EQUAL
26536: AND
26537: IFFALSE 26553
// HackDestroyVehicle ( unit , selectedUnit ) ;
26539: LD_VAR 0 2
26543: PPUSH
26544: LD_VAR 0 3
26548: PPUSH
26549: CALL 28449 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26553: LD_VAR 0 1
26557: PUSH
26558: LD_INT 255
26560: EQUAL
26561: PUSH
26562: LD_VAR 0 2
26566: PPUSH
26567: CALL_OW 264
26571: PUSH
26572: LD_INT 14
26574: PUSH
26575: LD_INT 53
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: IN
26582: AND
26583: PUSH
26584: LD_VAR 0 4
26588: PPUSH
26589: LD_VAR 0 5
26593: PPUSH
26594: CALL_OW 488
26598: AND
26599: IFFALSE 26623
// CutTreeXYR ( unit , x , y , 12 ) ;
26601: LD_VAR 0 2
26605: PPUSH
26606: LD_VAR 0 4
26610: PPUSH
26611: LD_VAR 0 5
26615: PPUSH
26616: LD_INT 12
26618: PPUSH
26619: CALL 27015 0 4
// if cmd = 256 then
26623: LD_VAR 0 1
26627: PUSH
26628: LD_INT 256
26630: EQUAL
26631: IFFALSE 26652
// SetFactoryWaypoint ( unit , x , y ) ;
26633: LD_VAR 0 2
26637: PPUSH
26638: LD_VAR 0 4
26642: PPUSH
26643: LD_VAR 0 5
26647: PPUSH
26648: CALL 26657 0 3
// end ;
26652: LD_VAR 0 6
26656: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26657: LD_INT 0
26659: PPUSH
26660: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26661: LD_VAR 0 1
26665: NOT
26666: PUSH
26667: LD_VAR 0 2
26671: PPUSH
26672: LD_VAR 0 3
26676: PPUSH
26677: CALL_OW 488
26681: NOT
26682: OR
26683: PUSH
26684: LD_VAR 0 1
26688: PPUSH
26689: CALL_OW 266
26693: PUSH
26694: LD_INT 3
26696: NONEQUAL
26697: PUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 247
26707: PUSH
26708: LD_INT 1
26710: EQUAL
26711: NOT
26712: AND
26713: OR
26714: IFFALSE 26718
// exit ;
26716: GO 26867
// if GetType ( factory ) = unit_human then
26718: LD_VAR 0 1
26722: PPUSH
26723: CALL_OW 247
26727: PUSH
26728: LD_INT 1
26730: EQUAL
26731: IFFALSE 26748
// factory := IsInUnit ( factory ) ;
26733: LD_ADDR_VAR 0 1
26737: PUSH
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 310
26747: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26748: LD_VAR 0 1
26752: PPUSH
26753: CALL_OW 266
26757: PUSH
26758: LD_INT 3
26760: NONEQUAL
26761: IFFALSE 26765
// exit ;
26763: GO 26867
// if HexInfo ( x , y ) = factory then
26765: LD_VAR 0 2
26769: PPUSH
26770: LD_VAR 0 3
26774: PPUSH
26775: CALL_OW 428
26779: PUSH
26780: LD_VAR 0 1
26784: EQUAL
26785: IFFALSE 26812
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26787: LD_ADDR_EXP 98
26791: PUSH
26792: LD_EXP 98
26796: PPUSH
26797: LD_VAR 0 1
26801: PPUSH
26802: LD_INT 0
26804: PPUSH
26805: CALL_OW 1
26809: ST_TO_ADDR
26810: GO 26863
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26812: LD_ADDR_EXP 98
26816: PUSH
26817: LD_EXP 98
26821: PPUSH
26822: LD_VAR 0 1
26826: PPUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 255
26836: PUSH
26837: LD_VAR 0 1
26841: PUSH
26842: LD_VAR 0 2
26846: PUSH
26847: LD_VAR 0 3
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: PPUSH
26858: CALL_OW 1
26862: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26863: CALL 26872 0 0
// end ;
26867: LD_VAR 0 4
26871: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26872: LD_INT 0
26874: PPUSH
26875: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26876: LD_STRING resetFactoryWaypoint();
26878: PPUSH
26879: CALL_OW 559
// if factoryWaypoints then
26883: LD_EXP 98
26887: IFFALSE 27010
// begin for i := 1 to factoryWaypoints do
26889: LD_ADDR_VAR 0 2
26893: PUSH
26894: DOUBLE
26895: LD_INT 1
26897: DEC
26898: ST_TO_ADDR
26899: LD_EXP 98
26903: PUSH
26904: FOR_TO
26905: IFFALSE 27008
// if factoryWaypoints [ i ] then
26907: LD_EXP 98
26911: PUSH
26912: LD_VAR 0 2
26916: ARRAY
26917: IFFALSE 27006
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26919: LD_STRING setFactoryWaypointXY(
26921: PUSH
26922: LD_EXP 98
26926: PUSH
26927: LD_VAR 0 2
26931: ARRAY
26932: PUSH
26933: LD_INT 1
26935: ARRAY
26936: STR
26937: PUSH
26938: LD_STRING ,
26940: STR
26941: PUSH
26942: LD_EXP 98
26946: PUSH
26947: LD_VAR 0 2
26951: ARRAY
26952: PUSH
26953: LD_INT 2
26955: ARRAY
26956: STR
26957: PUSH
26958: LD_STRING ,
26960: STR
26961: PUSH
26962: LD_EXP 98
26966: PUSH
26967: LD_VAR 0 2
26971: ARRAY
26972: PUSH
26973: LD_INT 3
26975: ARRAY
26976: STR
26977: PUSH
26978: LD_STRING ,
26980: STR
26981: PUSH
26982: LD_EXP 98
26986: PUSH
26987: LD_VAR 0 2
26991: ARRAY
26992: PUSH
26993: LD_INT 4
26995: ARRAY
26996: STR
26997: PUSH
26998: LD_STRING )
27000: STR
27001: PPUSH
27002: CALL_OW 559
27006: GO 26904
27008: POP
27009: POP
// end ; end ;
27010: LD_VAR 0 1
27014: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27015: LD_INT 0
27017: PPUSH
27018: PPUSH
27019: PPUSH
27020: PPUSH
27021: PPUSH
27022: PPUSH
27023: PPUSH
27024: PPUSH
27025: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27026: LD_VAR 0 1
27030: NOT
27031: PUSH
27032: LD_VAR 0 2
27036: PPUSH
27037: LD_VAR 0 3
27041: PPUSH
27042: CALL_OW 488
27046: NOT
27047: OR
27048: PUSH
27049: LD_VAR 0 4
27053: NOT
27054: OR
27055: IFFALSE 27059
// exit ;
27057: GO 27399
// list := [ ] ;
27059: LD_ADDR_VAR 0 13
27063: PUSH
27064: EMPTY
27065: ST_TO_ADDR
// if x - r < 0 then
27066: LD_VAR 0 2
27070: PUSH
27071: LD_VAR 0 4
27075: MINUS
27076: PUSH
27077: LD_INT 0
27079: LESS
27080: IFFALSE 27092
// min_x := 0 else
27082: LD_ADDR_VAR 0 7
27086: PUSH
27087: LD_INT 0
27089: ST_TO_ADDR
27090: GO 27108
// min_x := x - r ;
27092: LD_ADDR_VAR 0 7
27096: PUSH
27097: LD_VAR 0 2
27101: PUSH
27102: LD_VAR 0 4
27106: MINUS
27107: ST_TO_ADDR
// if y - r < 0 then
27108: LD_VAR 0 3
27112: PUSH
27113: LD_VAR 0 4
27117: MINUS
27118: PUSH
27119: LD_INT 0
27121: LESS
27122: IFFALSE 27134
// min_y := 0 else
27124: LD_ADDR_VAR 0 8
27128: PUSH
27129: LD_INT 0
27131: ST_TO_ADDR
27132: GO 27150
// min_y := y - r ;
27134: LD_ADDR_VAR 0 8
27138: PUSH
27139: LD_VAR 0 3
27143: PUSH
27144: LD_VAR 0 4
27148: MINUS
27149: ST_TO_ADDR
// max_x := x + r ;
27150: LD_ADDR_VAR 0 9
27154: PUSH
27155: LD_VAR 0 2
27159: PUSH
27160: LD_VAR 0 4
27164: PLUS
27165: ST_TO_ADDR
// max_y := y + r ;
27166: LD_ADDR_VAR 0 10
27170: PUSH
27171: LD_VAR 0 3
27175: PUSH
27176: LD_VAR 0 4
27180: PLUS
27181: ST_TO_ADDR
// for _x = min_x to max_x do
27182: LD_ADDR_VAR 0 11
27186: PUSH
27187: DOUBLE
27188: LD_VAR 0 7
27192: DEC
27193: ST_TO_ADDR
27194: LD_VAR 0 9
27198: PUSH
27199: FOR_TO
27200: IFFALSE 27317
// for _y = min_y to max_y do
27202: LD_ADDR_VAR 0 12
27206: PUSH
27207: DOUBLE
27208: LD_VAR 0 8
27212: DEC
27213: ST_TO_ADDR
27214: LD_VAR 0 10
27218: PUSH
27219: FOR_TO
27220: IFFALSE 27313
// begin if not ValidHex ( _x , _y ) then
27222: LD_VAR 0 11
27226: PPUSH
27227: LD_VAR 0 12
27231: PPUSH
27232: CALL_OW 488
27236: NOT
27237: IFFALSE 27241
// continue ;
27239: GO 27219
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27241: LD_VAR 0 11
27245: PPUSH
27246: LD_VAR 0 12
27250: PPUSH
27251: CALL_OW 351
27255: PUSH
27256: LD_VAR 0 11
27260: PPUSH
27261: LD_VAR 0 12
27265: PPUSH
27266: CALL_OW 554
27270: AND
27271: IFFALSE 27311
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27273: LD_ADDR_VAR 0 13
27277: PUSH
27278: LD_VAR 0 13
27282: PPUSH
27283: LD_VAR 0 13
27287: PUSH
27288: LD_INT 1
27290: PLUS
27291: PPUSH
27292: LD_VAR 0 11
27296: PUSH
27297: LD_VAR 0 12
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PPUSH
27306: CALL_OW 2
27310: ST_TO_ADDR
// end ;
27311: GO 27219
27313: POP
27314: POP
27315: GO 27199
27317: POP
27318: POP
// if not list then
27319: LD_VAR 0 13
27323: NOT
27324: IFFALSE 27328
// exit ;
27326: GO 27399
// for i in list do
27328: LD_ADDR_VAR 0 6
27332: PUSH
27333: LD_VAR 0 13
27337: PUSH
27338: FOR_IN
27339: IFFALSE 27397
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27341: LD_VAR 0 1
27345: PPUSH
27346: LD_STRING M
27348: PUSH
27349: LD_VAR 0 6
27353: PUSH
27354: LD_INT 1
27356: ARRAY
27357: PUSH
27358: LD_VAR 0 6
27362: PUSH
27363: LD_INT 2
27365: ARRAY
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: PUSH
27388: EMPTY
27389: LIST
27390: PPUSH
27391: CALL_OW 447
27395: GO 27338
27397: POP
27398: POP
// end ;
27399: LD_VAR 0 5
27403: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27404: LD_EXP 99
27408: NOT
27409: IFFALSE 27459
27411: GO 27413
27413: DISABLE
// begin initHack := true ;
27414: LD_ADDR_EXP 99
27418: PUSH
27419: LD_INT 1
27421: ST_TO_ADDR
// hackTanks := [ ] ;
27422: LD_ADDR_EXP 100
27426: PUSH
27427: EMPTY
27428: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27429: LD_ADDR_EXP 101
27433: PUSH
27434: EMPTY
27435: ST_TO_ADDR
// hackLimit := 3 ;
27436: LD_ADDR_EXP 102
27440: PUSH
27441: LD_INT 3
27443: ST_TO_ADDR
// hackDist := 12 ;
27444: LD_ADDR_EXP 103
27448: PUSH
27449: LD_INT 12
27451: ST_TO_ADDR
// hackCounter := [ ] ;
27452: LD_ADDR_EXP 104
27456: PUSH
27457: EMPTY
27458: ST_TO_ADDR
// end ;
27459: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27460: LD_EXP 99
27464: PUSH
27465: LD_INT 34
27467: PUSH
27468: LD_EXP 23
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PPUSH
27477: CALL_OW 69
27481: AND
27482: IFFALSE 27737
27484: GO 27486
27486: DISABLE
27487: LD_INT 0
27489: PPUSH
27490: PPUSH
// begin enable ;
27491: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27492: LD_ADDR_VAR 0 1
27496: PUSH
27497: LD_INT 34
27499: PUSH
27500: LD_EXP 23
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PPUSH
27509: CALL_OW 69
27513: PUSH
27514: FOR_IN
27515: IFFALSE 27735
// begin if not i in hackTanks then
27517: LD_VAR 0 1
27521: PUSH
27522: LD_EXP 100
27526: IN
27527: NOT
27528: IFFALSE 27611
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27530: LD_ADDR_EXP 100
27534: PUSH
27535: LD_EXP 100
27539: PPUSH
27540: LD_EXP 100
27544: PUSH
27545: LD_INT 1
27547: PLUS
27548: PPUSH
27549: LD_VAR 0 1
27553: PPUSH
27554: CALL_OW 1
27558: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27559: LD_ADDR_EXP 101
27563: PUSH
27564: LD_EXP 101
27568: PPUSH
27569: LD_EXP 101
27573: PUSH
27574: LD_INT 1
27576: PLUS
27577: PPUSH
27578: EMPTY
27579: PPUSH
27580: CALL_OW 1
27584: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27585: LD_ADDR_EXP 104
27589: PUSH
27590: LD_EXP 104
27594: PPUSH
27595: LD_EXP 104
27599: PUSH
27600: LD_INT 1
27602: PLUS
27603: PPUSH
27604: EMPTY
27605: PPUSH
27606: CALL_OW 1
27610: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27611: LD_VAR 0 1
27615: PPUSH
27616: CALL_OW 302
27620: NOT
27621: IFFALSE 27634
// begin HackUnlinkAll ( i ) ;
27623: LD_VAR 0 1
27627: PPUSH
27628: CALL 27740 0 1
// continue ;
27632: GO 27514
// end ; HackCheckCapturedStatus ( i ) ;
27634: LD_VAR 0 1
27638: PPUSH
27639: CALL 28183 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27643: LD_ADDR_VAR 0 2
27647: PUSH
27648: LD_INT 81
27650: PUSH
27651: LD_VAR 0 1
27655: PPUSH
27656: CALL_OW 255
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 33
27667: PUSH
27668: LD_INT 3
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 91
27677: PUSH
27678: LD_VAR 0 1
27682: PUSH
27683: LD_EXP 103
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 50
27695: PUSH
27696: EMPTY
27697: LIST
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: PPUSH
27705: CALL_OW 69
27709: ST_TO_ADDR
// if not tmp then
27710: LD_VAR 0 2
27714: NOT
27715: IFFALSE 27719
// continue ;
27717: GO 27514
// HackLink ( i , tmp ) ;
27719: LD_VAR 0 1
27723: PPUSH
27724: LD_VAR 0 2
27728: PPUSH
27729: CALL 27876 0 2
// end ;
27733: GO 27514
27735: POP
27736: POP
// end ;
27737: PPOPN 2
27739: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27740: LD_INT 0
27742: PPUSH
27743: PPUSH
27744: PPUSH
// if not hack in hackTanks then
27745: LD_VAR 0 1
27749: PUSH
27750: LD_EXP 100
27754: IN
27755: NOT
27756: IFFALSE 27760
// exit ;
27758: GO 27871
// index := GetElementIndex ( hackTanks , hack ) ;
27760: LD_ADDR_VAR 0 4
27764: PUSH
27765: LD_EXP 100
27769: PPUSH
27770: LD_VAR 0 1
27774: PPUSH
27775: CALL 35345 0 2
27779: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27780: LD_EXP 101
27784: PUSH
27785: LD_VAR 0 4
27789: ARRAY
27790: IFFALSE 27871
// begin for i in hackTanksCaptured [ index ] do
27792: LD_ADDR_VAR 0 3
27796: PUSH
27797: LD_EXP 101
27801: PUSH
27802: LD_VAR 0 4
27806: ARRAY
27807: PUSH
27808: FOR_IN
27809: IFFALSE 27835
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27811: LD_VAR 0 3
27815: PUSH
27816: LD_INT 1
27818: ARRAY
27819: PPUSH
27820: LD_VAR 0 3
27824: PUSH
27825: LD_INT 2
27827: ARRAY
27828: PPUSH
27829: CALL_OW 235
27833: GO 27808
27835: POP
27836: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27837: LD_ADDR_EXP 101
27841: PUSH
27842: LD_EXP 101
27846: PPUSH
27847: LD_VAR 0 4
27851: PPUSH
27852: EMPTY
27853: PPUSH
27854: CALL_OW 1
27858: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27859: LD_VAR 0 1
27863: PPUSH
27864: LD_INT 0
27866: PPUSH
27867: CALL_OW 505
// end ; end ;
27871: LD_VAR 0 2
27875: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27876: LD_INT 0
27878: PPUSH
27879: PPUSH
27880: PPUSH
// if not hack in hackTanks or not vehicles then
27881: LD_VAR 0 1
27885: PUSH
27886: LD_EXP 100
27890: IN
27891: NOT
27892: PUSH
27893: LD_VAR 0 2
27897: NOT
27898: OR
27899: IFFALSE 27903
// exit ;
27901: GO 28178
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27903: LD_ADDR_VAR 0 2
27907: PUSH
27908: LD_VAR 0 1
27912: PPUSH
27913: LD_VAR 0 2
27917: PPUSH
27918: LD_INT 1
27920: PPUSH
27921: LD_INT 1
27923: PPUSH
27924: CALL 35995 0 4
27928: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27929: LD_ADDR_VAR 0 5
27933: PUSH
27934: LD_EXP 100
27938: PPUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: CALL 35345 0 2
27948: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27949: LD_EXP 101
27953: PUSH
27954: LD_VAR 0 5
27958: ARRAY
27959: PUSH
27960: LD_EXP 102
27964: LESS
27965: IFFALSE 28154
// begin for i := 1 to vehicles do
27967: LD_ADDR_VAR 0 4
27971: PUSH
27972: DOUBLE
27973: LD_INT 1
27975: DEC
27976: ST_TO_ADDR
27977: LD_VAR 0 2
27981: PUSH
27982: FOR_TO
27983: IFFALSE 28152
// begin if hackTanksCaptured [ index ] = hackLimit then
27985: LD_EXP 101
27989: PUSH
27990: LD_VAR 0 5
27994: ARRAY
27995: PUSH
27996: LD_EXP 102
28000: EQUAL
28001: IFFALSE 28005
// break ;
28003: GO 28152
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28005: LD_ADDR_EXP 104
28009: PUSH
28010: LD_EXP 104
28014: PPUSH
28015: LD_VAR 0 5
28019: PPUSH
28020: LD_EXP 104
28024: PUSH
28025: LD_VAR 0 5
28029: ARRAY
28030: PUSH
28031: LD_INT 1
28033: PLUS
28034: PPUSH
28035: CALL_OW 1
28039: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28040: LD_ADDR_EXP 101
28044: PUSH
28045: LD_EXP 101
28049: PPUSH
28050: LD_VAR 0 5
28054: PUSH
28055: LD_EXP 101
28059: PUSH
28060: LD_VAR 0 5
28064: ARRAY
28065: PUSH
28066: LD_INT 1
28068: PLUS
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PPUSH
28074: LD_VAR 0 2
28078: PUSH
28079: LD_VAR 0 4
28083: ARRAY
28084: PUSH
28085: LD_VAR 0 2
28089: PUSH
28090: LD_VAR 0 4
28094: ARRAY
28095: PPUSH
28096: CALL_OW 255
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PPUSH
28105: CALL 35560 0 3
28109: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28110: LD_VAR 0 2
28114: PUSH
28115: LD_VAR 0 4
28119: ARRAY
28120: PPUSH
28121: LD_VAR 0 1
28125: PPUSH
28126: CALL_OW 255
28130: PPUSH
28131: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28135: LD_VAR 0 2
28139: PUSH
28140: LD_VAR 0 4
28144: ARRAY
28145: PPUSH
28146: CALL_OW 141
// end ;
28150: GO 27982
28152: POP
28153: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28154: LD_VAR 0 1
28158: PPUSH
28159: LD_EXP 101
28163: PUSH
28164: LD_VAR 0 5
28168: ARRAY
28169: PUSH
28170: LD_INT 0
28172: PLUS
28173: PPUSH
28174: CALL_OW 505
// end ;
28178: LD_VAR 0 3
28182: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28183: LD_INT 0
28185: PPUSH
28186: PPUSH
28187: PPUSH
28188: PPUSH
// if not hack in hackTanks then
28189: LD_VAR 0 1
28193: PUSH
28194: LD_EXP 100
28198: IN
28199: NOT
28200: IFFALSE 28204
// exit ;
28202: GO 28444
// index := GetElementIndex ( hackTanks , hack ) ;
28204: LD_ADDR_VAR 0 4
28208: PUSH
28209: LD_EXP 100
28213: PPUSH
28214: LD_VAR 0 1
28218: PPUSH
28219: CALL 35345 0 2
28223: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28224: LD_ADDR_VAR 0 3
28228: PUSH
28229: DOUBLE
28230: LD_EXP 101
28234: PUSH
28235: LD_VAR 0 4
28239: ARRAY
28240: INC
28241: ST_TO_ADDR
28242: LD_INT 1
28244: PUSH
28245: FOR_DOWNTO
28246: IFFALSE 28418
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28248: LD_ADDR_VAR 0 5
28252: PUSH
28253: LD_EXP 101
28257: PUSH
28258: LD_VAR 0 4
28262: ARRAY
28263: PUSH
28264: LD_VAR 0 3
28268: ARRAY
28269: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28270: LD_VAR 0 5
28274: PUSH
28275: LD_INT 1
28277: ARRAY
28278: PPUSH
28279: CALL_OW 302
28283: NOT
28284: PUSH
28285: LD_VAR 0 5
28289: PUSH
28290: LD_INT 1
28292: ARRAY
28293: PPUSH
28294: CALL_OW 255
28298: PUSH
28299: LD_VAR 0 1
28303: PPUSH
28304: CALL_OW 255
28308: NONEQUAL
28309: OR
28310: IFFALSE 28416
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28312: LD_VAR 0 5
28316: PUSH
28317: LD_INT 1
28319: ARRAY
28320: PPUSH
28321: CALL_OW 305
28325: PUSH
28326: LD_VAR 0 5
28330: PUSH
28331: LD_INT 1
28333: ARRAY
28334: PPUSH
28335: CALL_OW 255
28339: PUSH
28340: LD_VAR 0 1
28344: PPUSH
28345: CALL_OW 255
28349: EQUAL
28350: AND
28351: IFFALSE 28375
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28353: LD_VAR 0 5
28357: PUSH
28358: LD_INT 1
28360: ARRAY
28361: PPUSH
28362: LD_VAR 0 5
28366: PUSH
28367: LD_INT 2
28369: ARRAY
28370: PPUSH
28371: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28375: LD_ADDR_EXP 101
28379: PUSH
28380: LD_EXP 101
28384: PPUSH
28385: LD_VAR 0 4
28389: PPUSH
28390: LD_EXP 101
28394: PUSH
28395: LD_VAR 0 4
28399: ARRAY
28400: PPUSH
28401: LD_VAR 0 3
28405: PPUSH
28406: CALL_OW 3
28410: PPUSH
28411: CALL_OW 1
28415: ST_TO_ADDR
// end ; end ;
28416: GO 28245
28418: POP
28419: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28420: LD_VAR 0 1
28424: PPUSH
28425: LD_EXP 101
28429: PUSH
28430: LD_VAR 0 4
28434: ARRAY
28435: PUSH
28436: LD_INT 0
28438: PLUS
28439: PPUSH
28440: CALL_OW 505
// end ;
28444: LD_VAR 0 2
28448: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28449: LD_INT 0
28451: PPUSH
28452: PPUSH
28453: PPUSH
28454: PPUSH
// if not hack in hackTanks then
28455: LD_VAR 0 1
28459: PUSH
28460: LD_EXP 100
28464: IN
28465: NOT
28466: IFFALSE 28470
// exit ;
28468: GO 28555
// index := GetElementIndex ( hackTanks , hack ) ;
28470: LD_ADDR_VAR 0 5
28474: PUSH
28475: LD_EXP 100
28479: PPUSH
28480: LD_VAR 0 1
28484: PPUSH
28485: CALL 35345 0 2
28489: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28490: LD_ADDR_VAR 0 4
28494: PUSH
28495: DOUBLE
28496: LD_INT 1
28498: DEC
28499: ST_TO_ADDR
28500: LD_EXP 101
28504: PUSH
28505: LD_VAR 0 5
28509: ARRAY
28510: PUSH
28511: FOR_TO
28512: IFFALSE 28553
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28514: LD_EXP 101
28518: PUSH
28519: LD_VAR 0 5
28523: ARRAY
28524: PUSH
28525: LD_VAR 0 4
28529: ARRAY
28530: PUSH
28531: LD_INT 1
28533: ARRAY
28534: PUSH
28535: LD_VAR 0 2
28539: EQUAL
28540: IFFALSE 28551
// KillUnit ( vehicle ) ;
28542: LD_VAR 0 2
28546: PPUSH
28547: CALL_OW 66
28551: GO 28511
28553: POP
28554: POP
// end ;
28555: LD_VAR 0 3
28559: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28560: LD_EXP 105
28564: NOT
28565: IFFALSE 28600
28567: GO 28569
28569: DISABLE
// begin initMiner := true ;
28570: LD_ADDR_EXP 105
28574: PUSH
28575: LD_INT 1
28577: ST_TO_ADDR
// minersList := [ ] ;
28578: LD_ADDR_EXP 106
28582: PUSH
28583: EMPTY
28584: ST_TO_ADDR
// minerMinesList := [ ] ;
28585: LD_ADDR_EXP 107
28589: PUSH
28590: EMPTY
28591: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28592: LD_ADDR_EXP 108
28596: PUSH
28597: LD_INT 5
28599: ST_TO_ADDR
// end ;
28600: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28601: LD_EXP 105
28605: PUSH
28606: LD_INT 34
28608: PUSH
28609: LD_EXP 28
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PPUSH
28618: CALL_OW 69
28622: AND
28623: IFFALSE 29086
28625: GO 28627
28627: DISABLE
28628: LD_INT 0
28630: PPUSH
28631: PPUSH
28632: PPUSH
28633: PPUSH
// begin enable ;
28634: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28635: LD_ADDR_VAR 0 1
28639: PUSH
28640: LD_INT 34
28642: PUSH
28643: LD_EXP 28
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: PUSH
28657: FOR_IN
28658: IFFALSE 28730
// begin if not i in minersList then
28660: LD_VAR 0 1
28664: PUSH
28665: LD_EXP 106
28669: IN
28670: NOT
28671: IFFALSE 28728
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28673: LD_ADDR_EXP 106
28677: PUSH
28678: LD_EXP 106
28682: PPUSH
28683: LD_EXP 106
28687: PUSH
28688: LD_INT 1
28690: PLUS
28691: PPUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 1
28701: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28702: LD_ADDR_EXP 107
28706: PUSH
28707: LD_EXP 107
28711: PPUSH
28712: LD_EXP 107
28716: PUSH
28717: LD_INT 1
28719: PLUS
28720: PPUSH
28721: EMPTY
28722: PPUSH
28723: CALL_OW 1
28727: ST_TO_ADDR
// end end ;
28728: GO 28657
28730: POP
28731: POP
// for i := minerMinesList downto 1 do
28732: LD_ADDR_VAR 0 1
28736: PUSH
28737: DOUBLE
28738: LD_EXP 107
28742: INC
28743: ST_TO_ADDR
28744: LD_INT 1
28746: PUSH
28747: FOR_DOWNTO
28748: IFFALSE 29084
// begin if IsLive ( minersList [ i ] ) then
28750: LD_EXP 106
28754: PUSH
28755: LD_VAR 0 1
28759: ARRAY
28760: PPUSH
28761: CALL_OW 300
28765: IFFALSE 28793
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28767: LD_EXP 106
28771: PUSH
28772: LD_VAR 0 1
28776: ARRAY
28777: PPUSH
28778: LD_EXP 107
28782: PUSH
28783: LD_VAR 0 1
28787: ARRAY
28788: PPUSH
28789: CALL_OW 505
// if not minerMinesList [ i ] then
28793: LD_EXP 107
28797: PUSH
28798: LD_VAR 0 1
28802: ARRAY
28803: NOT
28804: IFFALSE 28808
// continue ;
28806: GO 28747
// for j := minerMinesList [ i ] downto 1 do
28808: LD_ADDR_VAR 0 2
28812: PUSH
28813: DOUBLE
28814: LD_EXP 107
28818: PUSH
28819: LD_VAR 0 1
28823: ARRAY
28824: INC
28825: ST_TO_ADDR
28826: LD_INT 1
28828: PUSH
28829: FOR_DOWNTO
28830: IFFALSE 29080
// begin side := GetSide ( minersList [ i ] ) ;
28832: LD_ADDR_VAR 0 3
28836: PUSH
28837: LD_EXP 106
28841: PUSH
28842: LD_VAR 0 1
28846: ARRAY
28847: PPUSH
28848: CALL_OW 255
28852: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28853: LD_ADDR_VAR 0 4
28857: PUSH
28858: LD_EXP 107
28862: PUSH
28863: LD_VAR 0 1
28867: ARRAY
28868: PUSH
28869: LD_VAR 0 2
28873: ARRAY
28874: PUSH
28875: LD_INT 1
28877: ARRAY
28878: PPUSH
28879: LD_EXP 107
28883: PUSH
28884: LD_VAR 0 1
28888: ARRAY
28889: PUSH
28890: LD_VAR 0 2
28894: ARRAY
28895: PUSH
28896: LD_INT 2
28898: ARRAY
28899: PPUSH
28900: CALL_OW 428
28904: ST_TO_ADDR
// if not tmp then
28905: LD_VAR 0 4
28909: NOT
28910: IFFALSE 28914
// continue ;
28912: GO 28829
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28914: LD_VAR 0 4
28918: PUSH
28919: LD_INT 81
28921: PUSH
28922: LD_VAR 0 3
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PPUSH
28931: CALL_OW 69
28935: IN
28936: PUSH
28937: LD_EXP 107
28941: PUSH
28942: LD_VAR 0 1
28946: ARRAY
28947: PUSH
28948: LD_VAR 0 2
28952: ARRAY
28953: PUSH
28954: LD_INT 1
28956: ARRAY
28957: PPUSH
28958: LD_EXP 107
28962: PUSH
28963: LD_VAR 0 1
28967: ARRAY
28968: PUSH
28969: LD_VAR 0 2
28973: ARRAY
28974: PUSH
28975: LD_INT 2
28977: ARRAY
28978: PPUSH
28979: CALL_OW 458
28983: AND
28984: IFFALSE 29078
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28986: LD_EXP 107
28990: PUSH
28991: LD_VAR 0 1
28995: ARRAY
28996: PUSH
28997: LD_VAR 0 2
29001: ARRAY
29002: PUSH
29003: LD_INT 1
29005: ARRAY
29006: PPUSH
29007: LD_EXP 107
29011: PUSH
29012: LD_VAR 0 1
29016: ARRAY
29017: PUSH
29018: LD_VAR 0 2
29022: ARRAY
29023: PUSH
29024: LD_INT 2
29026: ARRAY
29027: PPUSH
29028: LD_VAR 0 3
29032: PPUSH
29033: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29037: LD_ADDR_EXP 107
29041: PUSH
29042: LD_EXP 107
29046: PPUSH
29047: LD_VAR 0 1
29051: PPUSH
29052: LD_EXP 107
29056: PUSH
29057: LD_VAR 0 1
29061: ARRAY
29062: PPUSH
29063: LD_VAR 0 2
29067: PPUSH
29068: CALL_OW 3
29072: PPUSH
29073: CALL_OW 1
29077: ST_TO_ADDR
// end ; end ;
29078: GO 28829
29080: POP
29081: POP
// end ;
29082: GO 28747
29084: POP
29085: POP
// end ;
29086: PPOPN 4
29088: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29089: LD_INT 0
29091: PPUSH
29092: PPUSH
// result := false ;
29093: LD_ADDR_VAR 0 4
29097: PUSH
29098: LD_INT 0
29100: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29101: LD_VAR 0 1
29105: PPUSH
29106: CALL_OW 264
29110: PUSH
29111: LD_EXP 28
29115: EQUAL
29116: NOT
29117: IFFALSE 29121
// exit ;
29119: GO 29361
// index := GetElementIndex ( minersList , unit ) ;
29121: LD_ADDR_VAR 0 5
29125: PUSH
29126: LD_EXP 106
29130: PPUSH
29131: LD_VAR 0 1
29135: PPUSH
29136: CALL 35345 0 2
29140: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29141: LD_EXP 107
29145: PUSH
29146: LD_VAR 0 5
29150: ARRAY
29151: PUSH
29152: LD_EXP 108
29156: GREATEREQUAL
29157: IFFALSE 29161
// exit ;
29159: GO 29361
// ComMoveXY ( unit , x , y ) ;
29161: LD_VAR 0 1
29165: PPUSH
29166: LD_VAR 0 2
29170: PPUSH
29171: LD_VAR 0 3
29175: PPUSH
29176: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29180: LD_INT 35
29182: PPUSH
29183: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29187: LD_VAR 0 1
29191: PPUSH
29192: LD_VAR 0 2
29196: PPUSH
29197: LD_VAR 0 3
29201: PPUSH
29202: CALL 66064 0 3
29206: NOT
29207: PUSH
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 314
29217: AND
29218: IFFALSE 29222
// exit ;
29220: GO 29361
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29222: LD_VAR 0 2
29226: PPUSH
29227: LD_VAR 0 3
29231: PPUSH
29232: CALL_OW 428
29236: PUSH
29237: LD_VAR 0 1
29241: EQUAL
29242: PUSH
29243: LD_VAR 0 1
29247: PPUSH
29248: CALL_OW 314
29252: NOT
29253: AND
29254: IFFALSE 29180
// PlaySoundXY ( x , y , PlantMine ) ;
29256: LD_VAR 0 2
29260: PPUSH
29261: LD_VAR 0 3
29265: PPUSH
29266: LD_STRING PlantMine
29268: PPUSH
29269: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29273: LD_VAR 0 2
29277: PPUSH
29278: LD_VAR 0 3
29282: PPUSH
29283: LD_VAR 0 1
29287: PPUSH
29288: CALL_OW 255
29292: PPUSH
29293: LD_INT 0
29295: PPUSH
29296: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29300: LD_ADDR_EXP 107
29304: PUSH
29305: LD_EXP 107
29309: PPUSH
29310: LD_VAR 0 5
29314: PUSH
29315: LD_EXP 107
29319: PUSH
29320: LD_VAR 0 5
29324: ARRAY
29325: PUSH
29326: LD_INT 1
29328: PLUS
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PPUSH
29334: LD_VAR 0 2
29338: PUSH
29339: LD_VAR 0 3
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PPUSH
29348: CALL 35560 0 3
29352: ST_TO_ADDR
// result := true ;
29353: LD_ADDR_VAR 0 4
29357: PUSH
29358: LD_INT 1
29360: ST_TO_ADDR
// end ;
29361: LD_VAR 0 4
29365: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29366: LD_INT 0
29368: PPUSH
29369: PPUSH
29370: PPUSH
// if not unit in minersList then
29371: LD_VAR 0 1
29375: PUSH
29376: LD_EXP 106
29380: IN
29381: NOT
29382: IFFALSE 29386
// exit ;
29384: GO 29778
// index := GetElementIndex ( minersList , unit ) ;
29386: LD_ADDR_VAR 0 6
29390: PUSH
29391: LD_EXP 106
29395: PPUSH
29396: LD_VAR 0 1
29400: PPUSH
29401: CALL 35345 0 2
29405: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29406: LD_ADDR_VAR 0 5
29410: PUSH
29411: DOUBLE
29412: LD_EXP 107
29416: PUSH
29417: LD_VAR 0 6
29421: ARRAY
29422: INC
29423: ST_TO_ADDR
29424: LD_INT 1
29426: PUSH
29427: FOR_DOWNTO
29428: IFFALSE 29589
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29430: LD_EXP 107
29434: PUSH
29435: LD_VAR 0 6
29439: ARRAY
29440: PUSH
29441: LD_VAR 0 5
29445: ARRAY
29446: PUSH
29447: LD_INT 1
29449: ARRAY
29450: PUSH
29451: LD_VAR 0 2
29455: EQUAL
29456: PUSH
29457: LD_EXP 107
29461: PUSH
29462: LD_VAR 0 6
29466: ARRAY
29467: PUSH
29468: LD_VAR 0 5
29472: ARRAY
29473: PUSH
29474: LD_INT 2
29476: ARRAY
29477: PUSH
29478: LD_VAR 0 3
29482: EQUAL
29483: AND
29484: IFFALSE 29587
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29486: LD_EXP 107
29490: PUSH
29491: LD_VAR 0 6
29495: ARRAY
29496: PUSH
29497: LD_VAR 0 5
29501: ARRAY
29502: PUSH
29503: LD_INT 1
29505: ARRAY
29506: PPUSH
29507: LD_EXP 107
29511: PUSH
29512: LD_VAR 0 6
29516: ARRAY
29517: PUSH
29518: LD_VAR 0 5
29522: ARRAY
29523: PUSH
29524: LD_INT 2
29526: ARRAY
29527: PPUSH
29528: LD_VAR 0 1
29532: PPUSH
29533: CALL_OW 255
29537: PPUSH
29538: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29542: LD_ADDR_EXP 107
29546: PUSH
29547: LD_EXP 107
29551: PPUSH
29552: LD_VAR 0 6
29556: PPUSH
29557: LD_EXP 107
29561: PUSH
29562: LD_VAR 0 6
29566: ARRAY
29567: PPUSH
29568: LD_VAR 0 5
29572: PPUSH
29573: CALL_OW 3
29577: PPUSH
29578: CALL_OW 1
29582: ST_TO_ADDR
// exit ;
29583: POP
29584: POP
29585: GO 29778
// end ; end ;
29587: GO 29427
29589: POP
29590: POP
// for i := minerMinesList [ index ] downto 1 do
29591: LD_ADDR_VAR 0 5
29595: PUSH
29596: DOUBLE
29597: LD_EXP 107
29601: PUSH
29602: LD_VAR 0 6
29606: ARRAY
29607: INC
29608: ST_TO_ADDR
29609: LD_INT 1
29611: PUSH
29612: FOR_DOWNTO
29613: IFFALSE 29776
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29615: LD_EXP 107
29619: PUSH
29620: LD_VAR 0 6
29624: ARRAY
29625: PUSH
29626: LD_VAR 0 5
29630: ARRAY
29631: PUSH
29632: LD_INT 1
29634: ARRAY
29635: PPUSH
29636: LD_EXP 107
29640: PUSH
29641: LD_VAR 0 6
29645: ARRAY
29646: PUSH
29647: LD_VAR 0 5
29651: ARRAY
29652: PUSH
29653: LD_INT 2
29655: ARRAY
29656: PPUSH
29657: LD_VAR 0 2
29661: PPUSH
29662: LD_VAR 0 3
29666: PPUSH
29667: CALL_OW 298
29671: PUSH
29672: LD_INT 6
29674: LESS
29675: IFFALSE 29774
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29677: LD_EXP 107
29681: PUSH
29682: LD_VAR 0 6
29686: ARRAY
29687: PUSH
29688: LD_VAR 0 5
29692: ARRAY
29693: PUSH
29694: LD_INT 1
29696: ARRAY
29697: PPUSH
29698: LD_EXP 107
29702: PUSH
29703: LD_VAR 0 6
29707: ARRAY
29708: PUSH
29709: LD_VAR 0 5
29713: ARRAY
29714: PUSH
29715: LD_INT 2
29717: ARRAY
29718: PPUSH
29719: LD_VAR 0 1
29723: PPUSH
29724: CALL_OW 255
29728: PPUSH
29729: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29733: LD_ADDR_EXP 107
29737: PUSH
29738: LD_EXP 107
29742: PPUSH
29743: LD_VAR 0 6
29747: PPUSH
29748: LD_EXP 107
29752: PUSH
29753: LD_VAR 0 6
29757: ARRAY
29758: PPUSH
29759: LD_VAR 0 5
29763: PPUSH
29764: CALL_OW 3
29768: PPUSH
29769: CALL_OW 1
29773: ST_TO_ADDR
// end ; end ;
29774: GO 29612
29776: POP
29777: POP
// end ;
29778: LD_VAR 0 4
29782: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29783: LD_INT 0
29785: PPUSH
29786: PPUSH
29787: PPUSH
29788: PPUSH
29789: PPUSH
29790: PPUSH
29791: PPUSH
29792: PPUSH
29793: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29794: LD_VAR 0 1
29798: PPUSH
29799: CALL_OW 264
29803: PUSH
29804: LD_EXP 28
29808: EQUAL
29809: NOT
29810: PUSH
29811: LD_VAR 0 1
29815: PUSH
29816: LD_EXP 106
29820: IN
29821: NOT
29822: OR
29823: IFFALSE 29827
// exit ;
29825: GO 30149
// index := GetElementIndex ( minersList , unit ) ;
29827: LD_ADDR_VAR 0 6
29831: PUSH
29832: LD_EXP 106
29836: PPUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL 35345 0 2
29846: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29847: LD_ADDR_VAR 0 8
29851: PUSH
29852: LD_EXP 108
29856: PUSH
29857: LD_EXP 107
29861: PUSH
29862: LD_VAR 0 6
29866: ARRAY
29867: MINUS
29868: ST_TO_ADDR
// if not minesFreeAmount then
29869: LD_VAR 0 8
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 30149
// tmp := [ ] ;
29878: LD_ADDR_VAR 0 7
29882: PUSH
29883: EMPTY
29884: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29885: LD_ADDR_VAR 0 5
29889: PUSH
29890: DOUBLE
29891: LD_INT 1
29893: DEC
29894: ST_TO_ADDR
29895: LD_VAR 0 8
29899: PUSH
29900: FOR_TO
29901: IFFALSE 30096
// begin _d := rand ( 0 , 5 ) ;
29903: LD_ADDR_VAR 0 11
29907: PUSH
29908: LD_INT 0
29910: PPUSH
29911: LD_INT 5
29913: PPUSH
29914: CALL_OW 12
29918: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29919: LD_ADDR_VAR 0 12
29923: PUSH
29924: LD_INT 2
29926: PPUSH
29927: LD_INT 6
29929: PPUSH
29930: CALL_OW 12
29934: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29935: LD_ADDR_VAR 0 9
29939: PUSH
29940: LD_VAR 0 2
29944: PPUSH
29945: LD_VAR 0 11
29949: PPUSH
29950: LD_VAR 0 12
29954: PPUSH
29955: CALL_OW 272
29959: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29960: LD_ADDR_VAR 0 10
29964: PUSH
29965: LD_VAR 0 3
29969: PPUSH
29970: LD_VAR 0 11
29974: PPUSH
29975: LD_VAR 0 12
29979: PPUSH
29980: CALL_OW 273
29984: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29985: LD_VAR 0 9
29989: PPUSH
29990: LD_VAR 0 10
29994: PPUSH
29995: CALL_OW 488
29999: PUSH
30000: LD_VAR 0 9
30004: PUSH
30005: LD_VAR 0 10
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_VAR 0 7
30018: IN
30019: NOT
30020: AND
30021: PUSH
30022: LD_VAR 0 9
30026: PPUSH
30027: LD_VAR 0 10
30031: PPUSH
30032: CALL_OW 458
30036: NOT
30037: AND
30038: IFFALSE 30080
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30040: LD_ADDR_VAR 0 7
30044: PUSH
30045: LD_VAR 0 7
30049: PPUSH
30050: LD_VAR 0 7
30054: PUSH
30055: LD_INT 1
30057: PLUS
30058: PPUSH
30059: LD_VAR 0 9
30063: PUSH
30064: LD_VAR 0 10
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PPUSH
30073: CALL_OW 1
30077: ST_TO_ADDR
30078: GO 30094
// i := i - 1 ;
30080: LD_ADDR_VAR 0 5
30084: PUSH
30085: LD_VAR 0 5
30089: PUSH
30090: LD_INT 1
30092: MINUS
30093: ST_TO_ADDR
// end ;
30094: GO 29900
30096: POP
30097: POP
// for i in tmp do
30098: LD_ADDR_VAR 0 5
30102: PUSH
30103: LD_VAR 0 7
30107: PUSH
30108: FOR_IN
30109: IFFALSE 30147
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30111: LD_VAR 0 1
30115: PPUSH
30116: LD_VAR 0 5
30120: PUSH
30121: LD_INT 1
30123: ARRAY
30124: PPUSH
30125: LD_VAR 0 5
30129: PUSH
30130: LD_INT 2
30132: ARRAY
30133: PPUSH
30134: CALL 29089 0 3
30138: NOT
30139: IFFALSE 30145
// exit ;
30141: POP
30142: POP
30143: GO 30149
30145: GO 30108
30147: POP
30148: POP
// end ;
30149: LD_VAR 0 4
30153: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30154: LD_INT 0
30156: PPUSH
30157: PPUSH
30158: PPUSH
30159: PPUSH
30160: PPUSH
30161: PPUSH
30162: PPUSH
// if not GetClass ( unit ) = class_sniper then
30163: LD_VAR 0 1
30167: PPUSH
30168: CALL_OW 257
30172: PUSH
30173: LD_INT 5
30175: EQUAL
30176: NOT
30177: IFFALSE 30181
// exit ;
30179: GO 30569
// dist := 8 ;
30181: LD_ADDR_VAR 0 5
30185: PUSH
30186: LD_INT 8
30188: ST_TO_ADDR
// viewRange := 12 ;
30189: LD_ADDR_VAR 0 7
30193: PUSH
30194: LD_INT 12
30196: ST_TO_ADDR
// side := GetSide ( unit ) ;
30197: LD_ADDR_VAR 0 6
30201: PUSH
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 255
30211: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30212: LD_INT 61
30214: PPUSH
30215: LD_VAR 0 6
30219: PPUSH
30220: CALL_OW 321
30224: PUSH
30225: LD_INT 2
30227: EQUAL
30228: IFFALSE 30238
// viewRange := 16 ;
30230: LD_ADDR_VAR 0 7
30234: PUSH
30235: LD_INT 16
30237: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30238: LD_VAR 0 1
30242: PPUSH
30243: LD_VAR 0 2
30247: PPUSH
30248: LD_VAR 0 3
30252: PPUSH
30253: CALL_OW 297
30257: PUSH
30258: LD_VAR 0 5
30262: GREATER
30263: IFFALSE 30342
// begin ComMoveXY ( unit , x , y ) ;
30265: LD_VAR 0 1
30269: PPUSH
30270: LD_VAR 0 2
30274: PPUSH
30275: LD_VAR 0 3
30279: PPUSH
30280: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30284: LD_INT 35
30286: PPUSH
30287: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30291: LD_VAR 0 1
30295: PPUSH
30296: LD_VAR 0 2
30300: PPUSH
30301: LD_VAR 0 3
30305: PPUSH
30306: CALL 66064 0 3
30310: NOT
30311: IFFALSE 30315
// exit ;
30313: GO 30569
// until GetDistUnitXY ( unit , x , y ) < dist ;
30315: LD_VAR 0 1
30319: PPUSH
30320: LD_VAR 0 2
30324: PPUSH
30325: LD_VAR 0 3
30329: PPUSH
30330: CALL_OW 297
30334: PUSH
30335: LD_VAR 0 5
30339: LESS
30340: IFFALSE 30284
// end ; ComTurnXY ( unit , x , y ) ;
30342: LD_VAR 0 1
30346: PPUSH
30347: LD_VAR 0 2
30351: PPUSH
30352: LD_VAR 0 3
30356: PPUSH
30357: CALL_OW 118
// wait ( 5 ) ;
30361: LD_INT 5
30363: PPUSH
30364: CALL_OW 67
// _d := GetDir ( unit ) ;
30368: LD_ADDR_VAR 0 10
30372: PUSH
30373: LD_VAR 0 1
30377: PPUSH
30378: CALL_OW 254
30382: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30383: LD_ADDR_VAR 0 8
30387: PUSH
30388: LD_VAR 0 1
30392: PPUSH
30393: CALL_OW 250
30397: PPUSH
30398: LD_VAR 0 10
30402: PPUSH
30403: LD_VAR 0 5
30407: PPUSH
30408: CALL_OW 272
30412: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30413: LD_ADDR_VAR 0 9
30417: PUSH
30418: LD_VAR 0 1
30422: PPUSH
30423: CALL_OW 251
30427: PPUSH
30428: LD_VAR 0 10
30432: PPUSH
30433: LD_VAR 0 5
30437: PPUSH
30438: CALL_OW 273
30442: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30443: LD_VAR 0 8
30447: PPUSH
30448: LD_VAR 0 9
30452: PPUSH
30453: CALL_OW 488
30457: NOT
30458: IFFALSE 30462
// exit ;
30460: GO 30569
// ComAnimCustom ( unit , 1 ) ;
30462: LD_VAR 0 1
30466: PPUSH
30467: LD_INT 1
30469: PPUSH
30470: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30474: LD_VAR 0 8
30478: PPUSH
30479: LD_VAR 0 9
30483: PPUSH
30484: LD_VAR 0 6
30488: PPUSH
30489: LD_VAR 0 7
30493: PPUSH
30494: CALL_OW 330
// repeat wait ( 1 ) ;
30498: LD_INT 1
30500: PPUSH
30501: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30505: LD_VAR 0 1
30509: PPUSH
30510: CALL_OW 316
30514: PUSH
30515: LD_VAR 0 1
30519: PPUSH
30520: CALL_OW 314
30524: OR
30525: PUSH
30526: LD_VAR 0 1
30530: PPUSH
30531: CALL_OW 302
30535: NOT
30536: OR
30537: PUSH
30538: LD_VAR 0 1
30542: PPUSH
30543: CALL_OW 301
30547: OR
30548: IFFALSE 30498
// RemoveSeeing ( _x , _y , side ) ;
30550: LD_VAR 0 8
30554: PPUSH
30555: LD_VAR 0 9
30559: PPUSH
30560: LD_VAR 0 6
30564: PPUSH
30565: CALL_OW 331
// end ; end_of_file
30569: LD_VAR 0 4
30573: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30574: LD_INT 0
30576: PPUSH
30577: PPUSH
// if exist_mode then
30578: LD_VAR 0 2
30582: IFFALSE 30607
// unit := CreateCharacter ( prefix & ident ) else
30584: LD_ADDR_VAR 0 5
30588: PUSH
30589: LD_VAR 0 3
30593: PUSH
30594: LD_VAR 0 1
30598: STR
30599: PPUSH
30600: CALL_OW 34
30604: ST_TO_ADDR
30605: GO 30622
// unit := NewCharacter ( ident ) ;
30607: LD_ADDR_VAR 0 5
30611: PUSH
30612: LD_VAR 0 1
30616: PPUSH
30617: CALL_OW 25
30621: ST_TO_ADDR
// result := unit ;
30622: LD_ADDR_VAR 0 4
30626: PUSH
30627: LD_VAR 0 5
30631: ST_TO_ADDR
// end ;
30632: LD_VAR 0 4
30636: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30637: LD_INT 0
30639: PPUSH
30640: PPUSH
// if not side or not nation then
30641: LD_VAR 0 1
30645: NOT
30646: PUSH
30647: LD_VAR 0 2
30651: NOT
30652: OR
30653: IFFALSE 30657
// exit ;
30655: GO 31425
// case nation of nation_american :
30657: LD_VAR 0 2
30661: PUSH
30662: LD_INT 1
30664: DOUBLE
30665: EQUAL
30666: IFTRUE 30670
30668: GO 30884
30670: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30671: LD_ADDR_VAR 0 4
30675: PUSH
30676: LD_INT 35
30678: PUSH
30679: LD_INT 45
30681: PUSH
30682: LD_INT 46
30684: PUSH
30685: LD_INT 47
30687: PUSH
30688: LD_INT 82
30690: PUSH
30691: LD_INT 83
30693: PUSH
30694: LD_INT 84
30696: PUSH
30697: LD_INT 85
30699: PUSH
30700: LD_INT 86
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: LD_INT 2
30708: PUSH
30709: LD_INT 6
30711: PUSH
30712: LD_INT 15
30714: PUSH
30715: LD_INT 16
30717: PUSH
30718: LD_INT 7
30720: PUSH
30721: LD_INT 12
30723: PUSH
30724: LD_INT 13
30726: PUSH
30727: LD_INT 10
30729: PUSH
30730: LD_INT 14
30732: PUSH
30733: LD_INT 20
30735: PUSH
30736: LD_INT 21
30738: PUSH
30739: LD_INT 22
30741: PUSH
30742: LD_INT 25
30744: PUSH
30745: LD_INT 32
30747: PUSH
30748: LD_INT 27
30750: PUSH
30751: LD_INT 36
30753: PUSH
30754: LD_INT 69
30756: PUSH
30757: LD_INT 39
30759: PUSH
30760: LD_INT 34
30762: PUSH
30763: LD_INT 40
30765: PUSH
30766: LD_INT 48
30768: PUSH
30769: LD_INT 49
30771: PUSH
30772: LD_INT 50
30774: PUSH
30775: LD_INT 51
30777: PUSH
30778: LD_INT 52
30780: PUSH
30781: LD_INT 53
30783: PUSH
30784: LD_INT 54
30786: PUSH
30787: LD_INT 55
30789: PUSH
30790: LD_INT 56
30792: PUSH
30793: LD_INT 57
30795: PUSH
30796: LD_INT 58
30798: PUSH
30799: LD_INT 59
30801: PUSH
30802: LD_INT 60
30804: PUSH
30805: LD_INT 61
30807: PUSH
30808: LD_INT 62
30810: PUSH
30811: LD_INT 80
30813: PUSH
30814: LD_INT 82
30816: PUSH
30817: LD_INT 83
30819: PUSH
30820: LD_INT 84
30822: PUSH
30823: LD_INT 85
30825: PUSH
30826: LD_INT 86
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: ST_TO_ADDR
30882: GO 31349
30884: LD_INT 2
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 31118
30892: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30893: LD_ADDR_VAR 0 4
30897: PUSH
30898: LD_INT 35
30900: PUSH
30901: LD_INT 45
30903: PUSH
30904: LD_INT 46
30906: PUSH
30907: LD_INT 47
30909: PUSH
30910: LD_INT 82
30912: PUSH
30913: LD_INT 83
30915: PUSH
30916: LD_INT 84
30918: PUSH
30919: LD_INT 85
30921: PUSH
30922: LD_INT 87
30924: PUSH
30925: LD_INT 70
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: LD_INT 11
30933: PUSH
30934: LD_INT 3
30936: PUSH
30937: LD_INT 4
30939: PUSH
30940: LD_INT 5
30942: PUSH
30943: LD_INT 6
30945: PUSH
30946: LD_INT 15
30948: PUSH
30949: LD_INT 18
30951: PUSH
30952: LD_INT 7
30954: PUSH
30955: LD_INT 17
30957: PUSH
30958: LD_INT 8
30960: PUSH
30961: LD_INT 20
30963: PUSH
30964: LD_INT 21
30966: PUSH
30967: LD_INT 22
30969: PUSH
30970: LD_INT 72
30972: PUSH
30973: LD_INT 26
30975: PUSH
30976: LD_INT 69
30978: PUSH
30979: LD_INT 39
30981: PUSH
30982: LD_INT 40
30984: PUSH
30985: LD_INT 41
30987: PUSH
30988: LD_INT 42
30990: PUSH
30991: LD_INT 43
30993: PUSH
30994: LD_INT 48
30996: PUSH
30997: LD_INT 49
30999: PUSH
31000: LD_INT 50
31002: PUSH
31003: LD_INT 51
31005: PUSH
31006: LD_INT 52
31008: PUSH
31009: LD_INT 53
31011: PUSH
31012: LD_INT 54
31014: PUSH
31015: LD_INT 55
31017: PUSH
31018: LD_INT 56
31020: PUSH
31021: LD_INT 60
31023: PUSH
31024: LD_INT 61
31026: PUSH
31027: LD_INT 62
31029: PUSH
31030: LD_INT 66
31032: PUSH
31033: LD_INT 67
31035: PUSH
31036: LD_INT 68
31038: PUSH
31039: LD_INT 81
31041: PUSH
31042: LD_INT 82
31044: PUSH
31045: LD_INT 83
31047: PUSH
31048: LD_INT 84
31050: PUSH
31051: LD_INT 85
31053: PUSH
31054: LD_INT 87
31056: PUSH
31057: LD_INT 88
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: ST_TO_ADDR
31116: GO 31349
31118: LD_INT 3
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31126
31124: GO 31348
31126: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31127: LD_ADDR_VAR 0 4
31131: PUSH
31132: LD_INT 46
31134: PUSH
31135: LD_INT 47
31137: PUSH
31138: LD_INT 1
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 82
31146: PUSH
31147: LD_INT 83
31149: PUSH
31150: LD_INT 84
31152: PUSH
31153: LD_INT 85
31155: PUSH
31156: LD_INT 86
31158: PUSH
31159: LD_INT 11
31161: PUSH
31162: LD_INT 9
31164: PUSH
31165: LD_INT 20
31167: PUSH
31168: LD_INT 19
31170: PUSH
31171: LD_INT 21
31173: PUSH
31174: LD_INT 24
31176: PUSH
31177: LD_INT 22
31179: PUSH
31180: LD_INT 25
31182: PUSH
31183: LD_INT 28
31185: PUSH
31186: LD_INT 29
31188: PUSH
31189: LD_INT 30
31191: PUSH
31192: LD_INT 31
31194: PUSH
31195: LD_INT 37
31197: PUSH
31198: LD_INT 38
31200: PUSH
31201: LD_INT 32
31203: PUSH
31204: LD_INT 27
31206: PUSH
31207: LD_INT 33
31209: PUSH
31210: LD_INT 69
31212: PUSH
31213: LD_INT 39
31215: PUSH
31216: LD_INT 34
31218: PUSH
31219: LD_INT 40
31221: PUSH
31222: LD_INT 71
31224: PUSH
31225: LD_INT 23
31227: PUSH
31228: LD_INT 44
31230: PUSH
31231: LD_INT 48
31233: PUSH
31234: LD_INT 49
31236: PUSH
31237: LD_INT 50
31239: PUSH
31240: LD_INT 51
31242: PUSH
31243: LD_INT 52
31245: PUSH
31246: LD_INT 53
31248: PUSH
31249: LD_INT 54
31251: PUSH
31252: LD_INT 55
31254: PUSH
31255: LD_INT 56
31257: PUSH
31258: LD_INT 57
31260: PUSH
31261: LD_INT 58
31263: PUSH
31264: LD_INT 59
31266: PUSH
31267: LD_INT 63
31269: PUSH
31270: LD_INT 64
31272: PUSH
31273: LD_INT 65
31275: PUSH
31276: LD_INT 82
31278: PUSH
31279: LD_INT 83
31281: PUSH
31282: LD_INT 84
31284: PUSH
31285: LD_INT 85
31287: PUSH
31288: LD_INT 86
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: ST_TO_ADDR
31346: GO 31349
31348: POP
// if state > - 1 and state < 3 then
31349: LD_VAR 0 3
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: GREATER
31358: PUSH
31359: LD_VAR 0 3
31363: PUSH
31364: LD_INT 3
31366: LESS
31367: AND
31368: IFFALSE 31425
// for i in result do
31370: LD_ADDR_VAR 0 5
31374: PUSH
31375: LD_VAR 0 4
31379: PUSH
31380: FOR_IN
31381: IFFALSE 31423
// if GetTech ( i , side ) <> state then
31383: LD_VAR 0 5
31387: PPUSH
31388: LD_VAR 0 1
31392: PPUSH
31393: CALL_OW 321
31397: PUSH
31398: LD_VAR 0 3
31402: NONEQUAL
31403: IFFALSE 31421
// result := result diff i ;
31405: LD_ADDR_VAR 0 4
31409: PUSH
31410: LD_VAR 0 4
31414: PUSH
31415: LD_VAR 0 5
31419: DIFF
31420: ST_TO_ADDR
31421: GO 31380
31423: POP
31424: POP
// end ;
31425: LD_VAR 0 4
31429: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31430: LD_INT 0
31432: PPUSH
31433: PPUSH
31434: PPUSH
// result := true ;
31435: LD_ADDR_VAR 0 3
31439: PUSH
31440: LD_INT 1
31442: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31443: LD_ADDR_VAR 0 5
31447: PUSH
31448: LD_VAR 0 2
31452: PPUSH
31453: CALL_OW 480
31457: ST_TO_ADDR
// if not tmp then
31458: LD_VAR 0 5
31462: NOT
31463: IFFALSE 31467
// exit ;
31465: GO 31516
// for i in tmp do
31467: LD_ADDR_VAR 0 4
31471: PUSH
31472: LD_VAR 0 5
31476: PUSH
31477: FOR_IN
31478: IFFALSE 31514
// if GetTech ( i , side ) <> state_researched then
31480: LD_VAR 0 4
31484: PPUSH
31485: LD_VAR 0 1
31489: PPUSH
31490: CALL_OW 321
31494: PUSH
31495: LD_INT 2
31497: NONEQUAL
31498: IFFALSE 31512
// begin result := false ;
31500: LD_ADDR_VAR 0 3
31504: PUSH
31505: LD_INT 0
31507: ST_TO_ADDR
// exit ;
31508: POP
31509: POP
31510: GO 31516
// end ;
31512: GO 31477
31514: POP
31515: POP
// end ;
31516: LD_VAR 0 3
31520: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
31525: PPUSH
31526: PPUSH
31527: PPUSH
31528: PPUSH
31529: PPUSH
31530: PPUSH
31531: PPUSH
31532: PPUSH
31533: PPUSH
31534: PPUSH
31535: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31536: LD_VAR 0 1
31540: NOT
31541: PUSH
31542: LD_VAR 0 1
31546: PPUSH
31547: CALL_OW 257
31551: PUSH
31552: LD_INT 9
31554: NONEQUAL
31555: OR
31556: IFFALSE 31560
// exit ;
31558: GO 32133
// side := GetSide ( unit ) ;
31560: LD_ADDR_VAR 0 9
31564: PUSH
31565: LD_VAR 0 1
31569: PPUSH
31570: CALL_OW 255
31574: ST_TO_ADDR
// tech_space := tech_spacanom ;
31575: LD_ADDR_VAR 0 12
31579: PUSH
31580: LD_INT 29
31582: ST_TO_ADDR
// tech_time := tech_taurad ;
31583: LD_ADDR_VAR 0 13
31587: PUSH
31588: LD_INT 28
31590: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31591: LD_ADDR_VAR 0 11
31595: PUSH
31596: LD_VAR 0 1
31600: PPUSH
31601: CALL_OW 310
31605: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31606: LD_VAR 0 11
31610: PPUSH
31611: CALL_OW 247
31615: PUSH
31616: LD_INT 2
31618: EQUAL
31619: IFFALSE 31623
// exit ;
31621: GO 32133
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31623: LD_ADDR_VAR 0 8
31627: PUSH
31628: LD_INT 81
31630: PUSH
31631: LD_VAR 0 9
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 21
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PPUSH
31661: CALL_OW 69
31665: ST_TO_ADDR
// if not tmp then
31666: LD_VAR 0 8
31670: NOT
31671: IFFALSE 31675
// exit ;
31673: GO 32133
// if in_unit then
31675: LD_VAR 0 11
31679: IFFALSE 31703
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31681: LD_ADDR_VAR 0 10
31685: PUSH
31686: LD_VAR 0 8
31690: PPUSH
31691: LD_VAR 0 11
31695: PPUSH
31696: CALL_OW 74
31700: ST_TO_ADDR
31701: GO 31723
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31703: LD_ADDR_VAR 0 10
31707: PUSH
31708: LD_VAR 0 8
31712: PPUSH
31713: LD_VAR 0 1
31717: PPUSH
31718: CALL_OW 74
31722: ST_TO_ADDR
// if not enemy then
31723: LD_VAR 0 10
31727: NOT
31728: IFFALSE 31732
// exit ;
31730: GO 32133
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31732: LD_VAR 0 11
31736: PUSH
31737: LD_VAR 0 11
31741: PPUSH
31742: LD_VAR 0 10
31746: PPUSH
31747: CALL_OW 296
31751: PUSH
31752: LD_INT 13
31754: GREATER
31755: AND
31756: PUSH
31757: LD_VAR 0 1
31761: PPUSH
31762: LD_VAR 0 10
31766: PPUSH
31767: CALL_OW 296
31771: PUSH
31772: LD_INT 12
31774: GREATER
31775: OR
31776: IFFALSE 31780
// exit ;
31778: GO 32133
// missile := [ 1 ] ;
31780: LD_ADDR_VAR 0 14
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: EMPTY
31789: LIST
31790: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31791: LD_VAR 0 9
31795: PPUSH
31796: LD_VAR 0 12
31800: PPUSH
31801: CALL_OW 325
31805: IFFALSE 31834
// missile := Replace ( missile , missile + 1 , 2 ) ;
31807: LD_ADDR_VAR 0 14
31811: PUSH
31812: LD_VAR 0 14
31816: PPUSH
31817: LD_VAR 0 14
31821: PUSH
31822: LD_INT 1
31824: PLUS
31825: PPUSH
31826: LD_INT 2
31828: PPUSH
31829: CALL_OW 1
31833: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31834: LD_VAR 0 9
31838: PPUSH
31839: LD_VAR 0 13
31843: PPUSH
31844: CALL_OW 325
31848: PUSH
31849: LD_VAR 0 10
31853: PPUSH
31854: CALL_OW 255
31858: PPUSH
31859: LD_VAR 0 13
31863: PPUSH
31864: CALL_OW 325
31868: NOT
31869: AND
31870: IFFALSE 31899
// missile := Replace ( missile , missile + 1 , 3 ) ;
31872: LD_ADDR_VAR 0 14
31876: PUSH
31877: LD_VAR 0 14
31881: PPUSH
31882: LD_VAR 0 14
31886: PUSH
31887: LD_INT 1
31889: PLUS
31890: PPUSH
31891: LD_INT 3
31893: PPUSH
31894: CALL_OW 1
31898: ST_TO_ADDR
// if missile < 2 then
31899: LD_VAR 0 14
31903: PUSH
31904: LD_INT 2
31906: LESS
31907: IFFALSE 31911
// exit ;
31909: GO 32133
// x := GetX ( enemy ) ;
31911: LD_ADDR_VAR 0 4
31915: PUSH
31916: LD_VAR 0 10
31920: PPUSH
31921: CALL_OW 250
31925: ST_TO_ADDR
// y := GetY ( enemy ) ;
31926: LD_ADDR_VAR 0 5
31930: PUSH
31931: LD_VAR 0 10
31935: PPUSH
31936: CALL_OW 251
31940: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31941: LD_ADDR_VAR 0 6
31945: PUSH
31946: LD_VAR 0 4
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PPUSH
31955: LD_INT 1
31957: PPUSH
31958: CALL_OW 12
31962: PLUS
31963: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31964: LD_ADDR_VAR 0 7
31968: PUSH
31969: LD_VAR 0 5
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PPUSH
31978: LD_INT 1
31980: PPUSH
31981: CALL_OW 12
31985: PLUS
31986: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31987: LD_VAR 0 6
31991: PPUSH
31992: LD_VAR 0 7
31996: PPUSH
31997: CALL_OW 488
32001: NOT
32002: IFFALSE 32024
// begin _x := x ;
32004: LD_ADDR_VAR 0 6
32008: PUSH
32009: LD_VAR 0 4
32013: ST_TO_ADDR
// _y := y ;
32014: LD_ADDR_VAR 0 7
32018: PUSH
32019: LD_VAR 0 5
32023: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32024: LD_ADDR_VAR 0 3
32028: PUSH
32029: LD_INT 1
32031: PPUSH
32032: LD_VAR 0 14
32036: PPUSH
32037: CALL_OW 12
32041: ST_TO_ADDR
// case i of 1 :
32042: LD_VAR 0 3
32046: PUSH
32047: LD_INT 1
32049: DOUBLE
32050: EQUAL
32051: IFTRUE 32055
32053: GO 32072
32055: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32056: LD_VAR 0 1
32060: PPUSH
32061: LD_VAR 0 10
32065: PPUSH
32066: CALL_OW 115
32070: GO 32133
32072: LD_INT 2
32074: DOUBLE
32075: EQUAL
32076: IFTRUE 32080
32078: GO 32102
32080: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32081: LD_VAR 0 1
32085: PPUSH
32086: LD_VAR 0 6
32090: PPUSH
32091: LD_VAR 0 7
32095: PPUSH
32096: CALL_OW 153
32100: GO 32133
32102: LD_INT 3
32104: DOUBLE
32105: EQUAL
32106: IFTRUE 32110
32108: GO 32132
32110: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32111: LD_VAR 0 1
32115: PPUSH
32116: LD_VAR 0 6
32120: PPUSH
32121: LD_VAR 0 7
32125: PPUSH
32126: CALL_OW 154
32130: GO 32133
32132: POP
// end ;
32133: LD_VAR 0 2
32137: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32138: LD_INT 0
32140: PPUSH
32141: PPUSH
32142: PPUSH
32143: PPUSH
32144: PPUSH
32145: PPUSH
// if not unit or not building then
32146: LD_VAR 0 1
32150: NOT
32151: PUSH
32152: LD_VAR 0 2
32156: NOT
32157: OR
32158: IFFALSE 32162
// exit ;
32160: GO 32320
// x := GetX ( building ) ;
32162: LD_ADDR_VAR 0 5
32166: PUSH
32167: LD_VAR 0 2
32171: PPUSH
32172: CALL_OW 250
32176: ST_TO_ADDR
// y := GetY ( building ) ;
32177: LD_ADDR_VAR 0 6
32181: PUSH
32182: LD_VAR 0 2
32186: PPUSH
32187: CALL_OW 251
32191: ST_TO_ADDR
// for i = 0 to 5 do
32192: LD_ADDR_VAR 0 4
32196: PUSH
32197: DOUBLE
32198: LD_INT 0
32200: DEC
32201: ST_TO_ADDR
32202: LD_INT 5
32204: PUSH
32205: FOR_TO
32206: IFFALSE 32318
// begin _x := ShiftX ( x , i , 3 ) ;
32208: LD_ADDR_VAR 0 7
32212: PUSH
32213: LD_VAR 0 5
32217: PPUSH
32218: LD_VAR 0 4
32222: PPUSH
32223: LD_INT 3
32225: PPUSH
32226: CALL_OW 272
32230: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32231: LD_ADDR_VAR 0 8
32235: PUSH
32236: LD_VAR 0 6
32240: PPUSH
32241: LD_VAR 0 4
32245: PPUSH
32246: LD_INT 3
32248: PPUSH
32249: CALL_OW 273
32253: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32254: LD_VAR 0 7
32258: PPUSH
32259: LD_VAR 0 8
32263: PPUSH
32264: CALL_OW 488
32268: NOT
32269: IFFALSE 32273
// continue ;
32271: GO 32205
// if HexInfo ( _x , _y ) = 0 then
32273: LD_VAR 0 7
32277: PPUSH
32278: LD_VAR 0 8
32282: PPUSH
32283: CALL_OW 428
32287: PUSH
32288: LD_INT 0
32290: EQUAL
32291: IFFALSE 32316
// begin ComMoveXY ( unit , _x , _y ) ;
32293: LD_VAR 0 1
32297: PPUSH
32298: LD_VAR 0 7
32302: PPUSH
32303: LD_VAR 0 8
32307: PPUSH
32308: CALL_OW 111
// exit ;
32312: POP
32313: POP
32314: GO 32320
// end ; end ;
32316: GO 32205
32318: POP
32319: POP
// end ;
32320: LD_VAR 0 3
32324: RET
// export function ScanBase ( side , base_area ) ; begin
32325: LD_INT 0
32327: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32328: LD_ADDR_VAR 0 3
32332: PUSH
32333: LD_VAR 0 2
32337: PPUSH
32338: LD_INT 81
32340: PUSH
32341: LD_VAR 0 1
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PPUSH
32350: CALL_OW 70
32354: ST_TO_ADDR
// end ;
32355: LD_VAR 0 3
32359: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32360: LD_INT 0
32362: PPUSH
32363: PPUSH
32364: PPUSH
32365: PPUSH
// result := false ;
32366: LD_ADDR_VAR 0 2
32370: PUSH
32371: LD_INT 0
32373: ST_TO_ADDR
// side := GetSide ( unit ) ;
32374: LD_ADDR_VAR 0 3
32378: PUSH
32379: LD_VAR 0 1
32383: PPUSH
32384: CALL_OW 255
32388: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32389: LD_ADDR_VAR 0 4
32393: PUSH
32394: LD_VAR 0 1
32398: PPUSH
32399: CALL_OW 248
32403: ST_TO_ADDR
// case nat of 1 :
32404: LD_VAR 0 4
32408: PUSH
32409: LD_INT 1
32411: DOUBLE
32412: EQUAL
32413: IFTRUE 32417
32415: GO 32428
32417: POP
// tech := tech_lassight ; 2 :
32418: LD_ADDR_VAR 0 5
32422: PUSH
32423: LD_INT 12
32425: ST_TO_ADDR
32426: GO 32467
32428: LD_INT 2
32430: DOUBLE
32431: EQUAL
32432: IFTRUE 32436
32434: GO 32447
32436: POP
// tech := tech_mortar ; 3 :
32437: LD_ADDR_VAR 0 5
32441: PUSH
32442: LD_INT 41
32444: ST_TO_ADDR
32445: GO 32467
32447: LD_INT 3
32449: DOUBLE
32450: EQUAL
32451: IFTRUE 32455
32453: GO 32466
32455: POP
// tech := tech_bazooka ; end ;
32456: LD_ADDR_VAR 0 5
32460: PUSH
32461: LD_INT 44
32463: ST_TO_ADDR
32464: GO 32467
32466: POP
// if Researched ( side , tech ) then
32467: LD_VAR 0 3
32471: PPUSH
32472: LD_VAR 0 5
32476: PPUSH
32477: CALL_OW 325
32481: IFFALSE 32508
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32483: LD_ADDR_VAR 0 2
32487: PUSH
32488: LD_INT 5
32490: PUSH
32491: LD_INT 8
32493: PUSH
32494: LD_INT 9
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: LIST
32501: PUSH
32502: LD_VAR 0 4
32506: ARRAY
32507: ST_TO_ADDR
// end ;
32508: LD_VAR 0 2
32512: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32513: LD_INT 0
32515: PPUSH
32516: PPUSH
32517: PPUSH
// if not mines then
32518: LD_VAR 0 2
32522: NOT
32523: IFFALSE 32527
// exit ;
32525: GO 32671
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32527: LD_ADDR_VAR 0 5
32531: PUSH
32532: LD_INT 81
32534: PUSH
32535: LD_VAR 0 1
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: LD_INT 21
32549: PUSH
32550: LD_INT 3
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PPUSH
32565: CALL_OW 69
32569: ST_TO_ADDR
// for i in mines do
32570: LD_ADDR_VAR 0 4
32574: PUSH
32575: LD_VAR 0 2
32579: PUSH
32580: FOR_IN
32581: IFFALSE 32669
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32583: LD_VAR 0 4
32587: PUSH
32588: LD_INT 1
32590: ARRAY
32591: PPUSH
32592: LD_VAR 0 4
32596: PUSH
32597: LD_INT 2
32599: ARRAY
32600: PPUSH
32601: CALL_OW 458
32605: NOT
32606: IFFALSE 32610
// continue ;
32608: GO 32580
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32610: LD_VAR 0 4
32614: PUSH
32615: LD_INT 1
32617: ARRAY
32618: PPUSH
32619: LD_VAR 0 4
32623: PUSH
32624: LD_INT 2
32626: ARRAY
32627: PPUSH
32628: CALL_OW 428
32632: PUSH
32633: LD_VAR 0 5
32637: IN
32638: IFFALSE 32667
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32640: LD_VAR 0 4
32644: PUSH
32645: LD_INT 1
32647: ARRAY
32648: PPUSH
32649: LD_VAR 0 4
32653: PUSH
32654: LD_INT 2
32656: ARRAY
32657: PPUSH
32658: LD_VAR 0 1
32662: PPUSH
32663: CALL_OW 456
// end ;
32667: GO 32580
32669: POP
32670: POP
// end ;
32671: LD_VAR 0 3
32675: RET
// export function Count ( array ) ; var i ; begin
32676: LD_INT 0
32678: PPUSH
32679: PPUSH
// result := 0 ;
32680: LD_ADDR_VAR 0 2
32684: PUSH
32685: LD_INT 0
32687: ST_TO_ADDR
// for i in array do
32688: LD_ADDR_VAR 0 3
32692: PUSH
32693: LD_VAR 0 1
32697: PUSH
32698: FOR_IN
32699: IFFALSE 32723
// if i then
32701: LD_VAR 0 3
32705: IFFALSE 32721
// result := result + 1 ;
32707: LD_ADDR_VAR 0 2
32711: PUSH
32712: LD_VAR 0 2
32716: PUSH
32717: LD_INT 1
32719: PLUS
32720: ST_TO_ADDR
32721: GO 32698
32723: POP
32724: POP
// end ;
32725: LD_VAR 0 2
32729: RET
// export function IsEmpty ( building ) ; begin
32730: LD_INT 0
32732: PPUSH
// if not building then
32733: LD_VAR 0 1
32737: NOT
32738: IFFALSE 32742
// exit ;
32740: GO 32785
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32742: LD_ADDR_VAR 0 2
32746: PUSH
32747: LD_VAR 0 1
32751: PUSH
32752: LD_INT 22
32754: PUSH
32755: LD_VAR 0 1
32759: PPUSH
32760: CALL_OW 255
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 58
32771: PUSH
32772: EMPTY
32773: LIST
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PPUSH
32779: CALL_OW 69
32783: IN
32784: ST_TO_ADDR
// end ;
32785: LD_VAR 0 2
32789: RET
// export function IsNotFull ( building ) ; begin
32790: LD_INT 0
32792: PPUSH
// if not building then
32793: LD_VAR 0 1
32797: NOT
32798: IFFALSE 32802
// exit ;
32800: GO 32821
// result := UnitsInside ( building ) < 6 ;
32802: LD_ADDR_VAR 0 2
32806: PUSH
32807: LD_VAR 0 1
32811: PPUSH
32812: CALL_OW 313
32816: PUSH
32817: LD_INT 6
32819: LESS
32820: ST_TO_ADDR
// end ;
32821: LD_VAR 0 2
32825: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32826: LD_INT 0
32828: PPUSH
32829: PPUSH
32830: PPUSH
32831: PPUSH
// tmp := [ ] ;
32832: LD_ADDR_VAR 0 3
32836: PUSH
32837: EMPTY
32838: ST_TO_ADDR
// list := [ ] ;
32839: LD_ADDR_VAR 0 5
32843: PUSH
32844: EMPTY
32845: ST_TO_ADDR
// for i = 16 to 25 do
32846: LD_ADDR_VAR 0 4
32850: PUSH
32851: DOUBLE
32852: LD_INT 16
32854: DEC
32855: ST_TO_ADDR
32856: LD_INT 25
32858: PUSH
32859: FOR_TO
32860: IFFALSE 32933
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32862: LD_ADDR_VAR 0 3
32866: PUSH
32867: LD_VAR 0 3
32871: PUSH
32872: LD_INT 22
32874: PUSH
32875: LD_VAR 0 1
32879: PPUSH
32880: CALL_OW 255
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 91
32891: PUSH
32892: LD_VAR 0 1
32896: PUSH
32897: LD_INT 6
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 30
32907: PUSH
32908: LD_VAR 0 4
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: LIST
32921: PUSH
32922: EMPTY
32923: LIST
32924: PPUSH
32925: CALL_OW 69
32929: ADD
32930: ST_TO_ADDR
32931: GO 32859
32933: POP
32934: POP
// for i = 1 to tmp do
32935: LD_ADDR_VAR 0 4
32939: PUSH
32940: DOUBLE
32941: LD_INT 1
32943: DEC
32944: ST_TO_ADDR
32945: LD_VAR 0 3
32949: PUSH
32950: FOR_TO
32951: IFFALSE 33039
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32953: LD_ADDR_VAR 0 5
32957: PUSH
32958: LD_VAR 0 5
32962: PUSH
32963: LD_VAR 0 3
32967: PUSH
32968: LD_VAR 0 4
32972: ARRAY
32973: PPUSH
32974: CALL_OW 266
32978: PUSH
32979: LD_VAR 0 3
32983: PUSH
32984: LD_VAR 0 4
32988: ARRAY
32989: PPUSH
32990: CALL_OW 250
32994: PUSH
32995: LD_VAR 0 3
32999: PUSH
33000: LD_VAR 0 4
33004: ARRAY
33005: PPUSH
33006: CALL_OW 251
33010: PUSH
33011: LD_VAR 0 3
33015: PUSH
33016: LD_VAR 0 4
33020: ARRAY
33021: PPUSH
33022: CALL_OW 254
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: PUSH
33033: EMPTY
33034: LIST
33035: ADD
33036: ST_TO_ADDR
33037: GO 32950
33039: POP
33040: POP
// result := list ;
33041: LD_ADDR_VAR 0 2
33045: PUSH
33046: LD_VAR 0 5
33050: ST_TO_ADDR
// end ;
33051: LD_VAR 0 2
33055: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33056: LD_INT 0
33058: PPUSH
33059: PPUSH
33060: PPUSH
33061: PPUSH
33062: PPUSH
33063: PPUSH
33064: PPUSH
// if not factory then
33065: LD_VAR 0 1
33069: NOT
33070: IFFALSE 33074
// exit ;
33072: GO 33667
// if control = control_apeman then
33074: LD_VAR 0 4
33078: PUSH
33079: LD_INT 5
33081: EQUAL
33082: IFFALSE 33191
// begin tmp := UnitsInside ( factory ) ;
33084: LD_ADDR_VAR 0 8
33088: PUSH
33089: LD_VAR 0 1
33093: PPUSH
33094: CALL_OW 313
33098: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33099: LD_VAR 0 8
33103: PPUSH
33104: LD_INT 25
33106: PUSH
33107: LD_INT 12
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PPUSH
33114: CALL_OW 72
33118: NOT
33119: IFFALSE 33129
// control := control_manual ;
33121: LD_ADDR_VAR 0 4
33125: PUSH
33126: LD_INT 1
33128: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33129: LD_ADDR_VAR 0 8
33133: PUSH
33134: LD_VAR 0 1
33138: PPUSH
33139: CALL 32826 0 1
33143: ST_TO_ADDR
// if tmp then
33144: LD_VAR 0 8
33148: IFFALSE 33191
// begin for i in tmp do
33150: LD_ADDR_VAR 0 7
33154: PUSH
33155: LD_VAR 0 8
33159: PUSH
33160: FOR_IN
33161: IFFALSE 33189
// if i [ 1 ] = b_ext_radio then
33163: LD_VAR 0 7
33167: PUSH
33168: LD_INT 1
33170: ARRAY
33171: PUSH
33172: LD_INT 22
33174: EQUAL
33175: IFFALSE 33187
// begin control := control_remote ;
33177: LD_ADDR_VAR 0 4
33181: PUSH
33182: LD_INT 2
33184: ST_TO_ADDR
// break ;
33185: GO 33189
// end ;
33187: GO 33160
33189: POP
33190: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33191: LD_VAR 0 1
33195: PPUSH
33196: LD_VAR 0 2
33200: PPUSH
33201: LD_VAR 0 3
33205: PPUSH
33206: LD_VAR 0 4
33210: PPUSH
33211: LD_VAR 0 5
33215: PPUSH
33216: CALL_OW 448
33220: IFFALSE 33255
// begin result := [ chassis , engine , control , weapon ] ;
33222: LD_ADDR_VAR 0 6
33226: PUSH
33227: LD_VAR 0 2
33231: PUSH
33232: LD_VAR 0 3
33236: PUSH
33237: LD_VAR 0 4
33241: PUSH
33242: LD_VAR 0 5
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: ST_TO_ADDR
// exit ;
33253: GO 33667
// end ; _chassis := AvailableChassisList ( factory ) ;
33255: LD_ADDR_VAR 0 9
33259: PUSH
33260: LD_VAR 0 1
33264: PPUSH
33265: CALL_OW 475
33269: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33270: LD_ADDR_VAR 0 11
33274: PUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: CALL_OW 476
33284: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33285: LD_ADDR_VAR 0 12
33289: PUSH
33290: LD_VAR 0 1
33294: PPUSH
33295: CALL_OW 477
33299: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33300: LD_ADDR_VAR 0 10
33304: PUSH
33305: LD_VAR 0 1
33309: PPUSH
33310: CALL_OW 478
33314: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33315: LD_VAR 0 9
33319: NOT
33320: PUSH
33321: LD_VAR 0 11
33325: NOT
33326: OR
33327: PUSH
33328: LD_VAR 0 12
33332: NOT
33333: OR
33334: PUSH
33335: LD_VAR 0 10
33339: NOT
33340: OR
33341: IFFALSE 33376
// begin result := [ chassis , engine , control , weapon ] ;
33343: LD_ADDR_VAR 0 6
33347: PUSH
33348: LD_VAR 0 2
33352: PUSH
33353: LD_VAR 0 3
33357: PUSH
33358: LD_VAR 0 4
33362: PUSH
33363: LD_VAR 0 5
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: ST_TO_ADDR
// exit ;
33374: GO 33667
// end ; if not chassis in _chassis then
33376: LD_VAR 0 2
33380: PUSH
33381: LD_VAR 0 9
33385: IN
33386: NOT
33387: IFFALSE 33413
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33389: LD_ADDR_VAR 0 2
33393: PUSH
33394: LD_VAR 0 9
33398: PUSH
33399: LD_INT 1
33401: PPUSH
33402: LD_VAR 0 9
33406: PPUSH
33407: CALL_OW 12
33411: ARRAY
33412: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33413: LD_VAR 0 2
33417: PPUSH
33418: LD_VAR 0 3
33422: PPUSH
33423: CALL 33672 0 2
33427: NOT
33428: IFFALSE 33487
// repeat engine := _engine [ 1 ] ;
33430: LD_ADDR_VAR 0 3
33434: PUSH
33435: LD_VAR 0 11
33439: PUSH
33440: LD_INT 1
33442: ARRAY
33443: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33444: LD_ADDR_VAR 0 11
33448: PUSH
33449: LD_VAR 0 11
33453: PPUSH
33454: LD_INT 1
33456: PPUSH
33457: CALL_OW 3
33461: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33462: LD_VAR 0 2
33466: PPUSH
33467: LD_VAR 0 3
33471: PPUSH
33472: CALL 33672 0 2
33476: PUSH
33477: LD_VAR 0 11
33481: PUSH
33482: EMPTY
33483: EQUAL
33484: OR
33485: IFFALSE 33430
// if not control in _control then
33487: LD_VAR 0 4
33491: PUSH
33492: LD_VAR 0 12
33496: IN
33497: NOT
33498: IFFALSE 33524
// control := _control [ rand ( 1 , _control ) ] ;
33500: LD_ADDR_VAR 0 4
33504: PUSH
33505: LD_VAR 0 12
33509: PUSH
33510: LD_INT 1
33512: PPUSH
33513: LD_VAR 0 12
33517: PPUSH
33518: CALL_OW 12
33522: ARRAY
33523: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33524: LD_VAR 0 2
33528: PPUSH
33529: LD_VAR 0 5
33533: PPUSH
33534: CALL 33892 0 2
33538: NOT
33539: IFFALSE 33598
// repeat weapon := _weapon [ 1 ] ;
33541: LD_ADDR_VAR 0 5
33545: PUSH
33546: LD_VAR 0 10
33550: PUSH
33551: LD_INT 1
33553: ARRAY
33554: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33555: LD_ADDR_VAR 0 10
33559: PUSH
33560: LD_VAR 0 10
33564: PPUSH
33565: LD_INT 1
33567: PPUSH
33568: CALL_OW 3
33572: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33573: LD_VAR 0 2
33577: PPUSH
33578: LD_VAR 0 5
33582: PPUSH
33583: CALL 33892 0 2
33587: PUSH
33588: LD_VAR 0 10
33592: PUSH
33593: EMPTY
33594: EQUAL
33595: OR
33596: IFFALSE 33541
// result := [ ] ;
33598: LD_ADDR_VAR 0 6
33602: PUSH
33603: EMPTY
33604: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33605: LD_VAR 0 1
33609: PPUSH
33610: LD_VAR 0 2
33614: PPUSH
33615: LD_VAR 0 3
33619: PPUSH
33620: LD_VAR 0 4
33624: PPUSH
33625: LD_VAR 0 5
33629: PPUSH
33630: CALL_OW 448
33634: IFFALSE 33667
// result := [ chassis , engine , control , weapon ] ;
33636: LD_ADDR_VAR 0 6
33640: PUSH
33641: LD_VAR 0 2
33645: PUSH
33646: LD_VAR 0 3
33650: PUSH
33651: LD_VAR 0 4
33655: PUSH
33656: LD_VAR 0 5
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: ST_TO_ADDR
// end ;
33667: LD_VAR 0 6
33671: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33672: LD_INT 0
33674: PPUSH
// if not chassis or not engine then
33675: LD_VAR 0 1
33679: NOT
33680: PUSH
33681: LD_VAR 0 2
33685: NOT
33686: OR
33687: IFFALSE 33691
// exit ;
33689: GO 33887
// case engine of engine_solar :
33691: LD_VAR 0 2
33695: PUSH
33696: LD_INT 2
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33704
33702: GO 33742
33704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33705: LD_ADDR_VAR 0 3
33709: PUSH
33710: LD_INT 11
33712: PUSH
33713: LD_INT 12
33715: PUSH
33716: LD_INT 13
33718: PUSH
33719: LD_INT 14
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: ST_TO_ADDR
33740: GO 33871
33742: LD_INT 1
33744: DOUBLE
33745: EQUAL
33746: IFTRUE 33750
33748: GO 33812
33750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33751: LD_ADDR_VAR 0 3
33755: PUSH
33756: LD_INT 11
33758: PUSH
33759: LD_INT 12
33761: PUSH
33762: LD_INT 13
33764: PUSH
33765: LD_INT 14
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: LD_INT 2
33773: PUSH
33774: LD_INT 3
33776: PUSH
33777: LD_INT 4
33779: PUSH
33780: LD_INT 5
33782: PUSH
33783: LD_INT 21
33785: PUSH
33786: LD_INT 23
33788: PUSH
33789: LD_INT 22
33791: PUSH
33792: LD_INT 24
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
33810: GO 33871
33812: LD_INT 3
33814: DOUBLE
33815: EQUAL
33816: IFTRUE 33820
33818: GO 33870
33820: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33821: LD_ADDR_VAR 0 3
33825: PUSH
33826: LD_INT 13
33828: PUSH
33829: LD_INT 14
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: LD_INT 3
33837: PUSH
33838: LD_INT 4
33840: PUSH
33841: LD_INT 5
33843: PUSH
33844: LD_INT 21
33846: PUSH
33847: LD_INT 22
33849: PUSH
33850: LD_INT 23
33852: PUSH
33853: LD_INT 24
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: ST_TO_ADDR
33868: GO 33871
33870: POP
// result := ( chassis in result ) ;
33871: LD_ADDR_VAR 0 3
33875: PUSH
33876: LD_VAR 0 1
33880: PUSH
33881: LD_VAR 0 3
33885: IN
33886: ST_TO_ADDR
// end ;
33887: LD_VAR 0 3
33891: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33892: LD_INT 0
33894: PPUSH
// if not chassis or not weapon then
33895: LD_VAR 0 1
33899: NOT
33900: PUSH
33901: LD_VAR 0 2
33905: NOT
33906: OR
33907: IFFALSE 33911
// exit ;
33909: GO 34973
// case weapon of us_machine_gun :
33911: LD_VAR 0 2
33915: PUSH
33916: LD_INT 2
33918: DOUBLE
33919: EQUAL
33920: IFTRUE 33924
33922: GO 33954
33924: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33925: LD_ADDR_VAR 0 3
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 2
33935: PUSH
33936: LD_INT 3
33938: PUSH
33939: LD_INT 4
33941: PUSH
33942: LD_INT 5
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: ST_TO_ADDR
33952: GO 34957
33954: LD_INT 3
33956: DOUBLE
33957: EQUAL
33958: IFTRUE 33962
33960: GO 33992
33962: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33963: LD_ADDR_VAR 0 3
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: LD_INT 2
33973: PUSH
33974: LD_INT 3
33976: PUSH
33977: LD_INT 4
33979: PUSH
33980: LD_INT 5
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: ST_TO_ADDR
33990: GO 34957
33992: LD_INT 11
33994: DOUBLE
33995: EQUAL
33996: IFTRUE 34000
33998: GO 34030
34000: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34001: LD_ADDR_VAR 0 3
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: LD_INT 2
34011: PUSH
34012: LD_INT 3
34014: PUSH
34015: LD_INT 4
34017: PUSH
34018: LD_INT 5
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: ST_TO_ADDR
34028: GO 34957
34030: LD_INT 4
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34038
34036: GO 34064
34038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34039: LD_ADDR_VAR 0 3
34043: PUSH
34044: LD_INT 2
34046: PUSH
34047: LD_INT 3
34049: PUSH
34050: LD_INT 4
34052: PUSH
34053: LD_INT 5
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: ST_TO_ADDR
34062: GO 34957
34064: LD_INT 5
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34098
34072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 3
34083: PUSH
34084: LD_INT 4
34086: PUSH
34087: LD_INT 5
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: ST_TO_ADDR
34096: GO 34957
34098: LD_INT 9
34100: DOUBLE
34101: EQUAL
34102: IFTRUE 34106
34104: GO 34132
34106: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34107: LD_ADDR_VAR 0 3
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: LD_INT 3
34117: PUSH
34118: LD_INT 4
34120: PUSH
34121: LD_INT 5
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: ST_TO_ADDR
34130: GO 34957
34132: LD_INT 7
34134: DOUBLE
34135: EQUAL
34136: IFTRUE 34140
34138: GO 34166
34140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34141: LD_ADDR_VAR 0 3
34145: PUSH
34146: LD_INT 2
34148: PUSH
34149: LD_INT 3
34151: PUSH
34152: LD_INT 4
34154: PUSH
34155: LD_INT 5
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: ST_TO_ADDR
34164: GO 34957
34166: LD_INT 12
34168: DOUBLE
34169: EQUAL
34170: IFTRUE 34174
34172: GO 34200
34174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34175: LD_ADDR_VAR 0 3
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: LD_INT 3
34185: PUSH
34186: LD_INT 4
34188: PUSH
34189: LD_INT 5
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: ST_TO_ADDR
34198: GO 34957
34200: LD_INT 13
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34208
34206: GO 34234
34208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: LD_INT 4
34222: PUSH
34223: LD_INT 5
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: ST_TO_ADDR
34232: GO 34957
34234: LD_INT 14
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34242
34240: GO 34260
34242: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34243: LD_ADDR_VAR 0 3
34247: PUSH
34248: LD_INT 4
34250: PUSH
34251: LD_INT 5
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: ST_TO_ADDR
34258: GO 34957
34260: LD_INT 6
34262: DOUBLE
34263: EQUAL
34264: IFTRUE 34268
34266: GO 34286
34268: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34269: LD_ADDR_VAR 0 3
34273: PUSH
34274: LD_INT 4
34276: PUSH
34277: LD_INT 5
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: ST_TO_ADDR
34284: GO 34957
34286: LD_INT 10
34288: DOUBLE
34289: EQUAL
34290: IFTRUE 34294
34292: GO 34312
34294: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34295: LD_ADDR_VAR 0 3
34299: PUSH
34300: LD_INT 4
34302: PUSH
34303: LD_INT 5
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: ST_TO_ADDR
34310: GO 34957
34312: LD_INT 22
34314: DOUBLE
34315: EQUAL
34316: IFTRUE 34320
34318: GO 34346
34320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34321: LD_ADDR_VAR 0 3
34325: PUSH
34326: LD_INT 11
34328: PUSH
34329: LD_INT 12
34331: PUSH
34332: LD_INT 13
34334: PUSH
34335: LD_INT 14
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: ST_TO_ADDR
34344: GO 34957
34346: LD_INT 23
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34354
34352: GO 34380
34354: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34355: LD_ADDR_VAR 0 3
34359: PUSH
34360: LD_INT 11
34362: PUSH
34363: LD_INT 12
34365: PUSH
34366: LD_INT 13
34368: PUSH
34369: LD_INT 14
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: ST_TO_ADDR
34378: GO 34957
34380: LD_INT 24
34382: DOUBLE
34383: EQUAL
34384: IFTRUE 34388
34386: GO 34414
34388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34389: LD_ADDR_VAR 0 3
34393: PUSH
34394: LD_INT 11
34396: PUSH
34397: LD_INT 12
34399: PUSH
34400: LD_INT 13
34402: PUSH
34403: LD_INT 14
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: ST_TO_ADDR
34412: GO 34957
34414: LD_INT 30
34416: DOUBLE
34417: EQUAL
34418: IFTRUE 34422
34420: GO 34448
34422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34423: LD_ADDR_VAR 0 3
34427: PUSH
34428: LD_INT 11
34430: PUSH
34431: LD_INT 12
34433: PUSH
34434: LD_INT 13
34436: PUSH
34437: LD_INT 14
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: ST_TO_ADDR
34446: GO 34957
34448: LD_INT 25
34450: DOUBLE
34451: EQUAL
34452: IFTRUE 34456
34454: GO 34474
34456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34457: LD_ADDR_VAR 0 3
34461: PUSH
34462: LD_INT 13
34464: PUSH
34465: LD_INT 14
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: ST_TO_ADDR
34472: GO 34957
34474: LD_INT 27
34476: DOUBLE
34477: EQUAL
34478: IFTRUE 34482
34480: GO 34500
34482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34483: LD_ADDR_VAR 0 3
34487: PUSH
34488: LD_INT 13
34490: PUSH
34491: LD_INT 14
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: ST_TO_ADDR
34498: GO 34957
34500: LD_EXP 26
34504: DOUBLE
34505: EQUAL
34506: IFTRUE 34510
34508: GO 34536
34510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34511: LD_ADDR_VAR 0 3
34515: PUSH
34516: LD_INT 11
34518: PUSH
34519: LD_INT 12
34521: PUSH
34522: LD_INT 13
34524: PUSH
34525: LD_INT 14
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
34534: GO 34957
34536: LD_INT 28
34538: DOUBLE
34539: EQUAL
34540: IFTRUE 34544
34542: GO 34562
34544: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34545: LD_ADDR_VAR 0 3
34549: PUSH
34550: LD_INT 13
34552: PUSH
34553: LD_INT 14
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: ST_TO_ADDR
34560: GO 34957
34562: LD_INT 29
34564: DOUBLE
34565: EQUAL
34566: IFTRUE 34570
34568: GO 34588
34570: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34571: LD_ADDR_VAR 0 3
34575: PUSH
34576: LD_INT 13
34578: PUSH
34579: LD_INT 14
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: ST_TO_ADDR
34586: GO 34957
34588: LD_INT 31
34590: DOUBLE
34591: EQUAL
34592: IFTRUE 34596
34594: GO 34614
34596: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34597: LD_ADDR_VAR 0 3
34601: PUSH
34602: LD_INT 13
34604: PUSH
34605: LD_INT 14
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: ST_TO_ADDR
34612: GO 34957
34614: LD_INT 26
34616: DOUBLE
34617: EQUAL
34618: IFTRUE 34622
34620: GO 34640
34622: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34623: LD_ADDR_VAR 0 3
34627: PUSH
34628: LD_INT 13
34630: PUSH
34631: LD_INT 14
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: ST_TO_ADDR
34638: GO 34957
34640: LD_INT 42
34642: DOUBLE
34643: EQUAL
34644: IFTRUE 34648
34646: GO 34674
34648: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34649: LD_ADDR_VAR 0 3
34653: PUSH
34654: LD_INT 21
34656: PUSH
34657: LD_INT 22
34659: PUSH
34660: LD_INT 23
34662: PUSH
34663: LD_INT 24
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: ST_TO_ADDR
34672: GO 34957
34674: LD_INT 43
34676: DOUBLE
34677: EQUAL
34678: IFTRUE 34682
34680: GO 34708
34682: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34683: LD_ADDR_VAR 0 3
34687: PUSH
34688: LD_INT 21
34690: PUSH
34691: LD_INT 22
34693: PUSH
34694: LD_INT 23
34696: PUSH
34697: LD_INT 24
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: ST_TO_ADDR
34706: GO 34957
34708: LD_INT 44
34710: DOUBLE
34711: EQUAL
34712: IFTRUE 34716
34714: GO 34742
34716: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34717: LD_ADDR_VAR 0 3
34721: PUSH
34722: LD_INT 21
34724: PUSH
34725: LD_INT 22
34727: PUSH
34728: LD_INT 23
34730: PUSH
34731: LD_INT 24
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: ST_TO_ADDR
34740: GO 34957
34742: LD_INT 45
34744: DOUBLE
34745: EQUAL
34746: IFTRUE 34750
34748: GO 34776
34750: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34751: LD_ADDR_VAR 0 3
34755: PUSH
34756: LD_INT 21
34758: PUSH
34759: LD_INT 22
34761: PUSH
34762: LD_INT 23
34764: PUSH
34765: LD_INT 24
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: ST_TO_ADDR
34774: GO 34957
34776: LD_INT 49
34778: DOUBLE
34779: EQUAL
34780: IFTRUE 34784
34782: GO 34810
34784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34785: LD_ADDR_VAR 0 3
34789: PUSH
34790: LD_INT 21
34792: PUSH
34793: LD_INT 22
34795: PUSH
34796: LD_INT 23
34798: PUSH
34799: LD_INT 24
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: ST_TO_ADDR
34808: GO 34957
34810: LD_INT 51
34812: DOUBLE
34813: EQUAL
34814: IFTRUE 34818
34816: GO 34844
34818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34819: LD_ADDR_VAR 0 3
34823: PUSH
34824: LD_INT 21
34826: PUSH
34827: LD_INT 22
34829: PUSH
34830: LD_INT 23
34832: PUSH
34833: LD_INT 24
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: ST_TO_ADDR
34842: GO 34957
34844: LD_INT 52
34846: DOUBLE
34847: EQUAL
34848: IFTRUE 34852
34850: GO 34878
34852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34853: LD_ADDR_VAR 0 3
34857: PUSH
34858: LD_INT 21
34860: PUSH
34861: LD_INT 22
34863: PUSH
34864: LD_INT 23
34866: PUSH
34867: LD_INT 24
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: ST_TO_ADDR
34876: GO 34957
34878: LD_INT 53
34880: DOUBLE
34881: EQUAL
34882: IFTRUE 34886
34884: GO 34904
34886: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_INT 23
34894: PUSH
34895: LD_INT 24
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: ST_TO_ADDR
34902: GO 34957
34904: LD_INT 46
34906: DOUBLE
34907: EQUAL
34908: IFTRUE 34912
34910: GO 34930
34912: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34913: LD_ADDR_VAR 0 3
34917: PUSH
34918: LD_INT 23
34920: PUSH
34921: LD_INT 24
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: ST_TO_ADDR
34928: GO 34957
34930: LD_INT 47
34932: DOUBLE
34933: EQUAL
34934: IFTRUE 34938
34936: GO 34956
34938: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34939: LD_ADDR_VAR 0 3
34943: PUSH
34944: LD_INT 23
34946: PUSH
34947: LD_INT 24
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: ST_TO_ADDR
34954: GO 34957
34956: POP
// result := ( chassis in result ) ;
34957: LD_ADDR_VAR 0 3
34961: PUSH
34962: LD_VAR 0 1
34966: PUSH
34967: LD_VAR 0 3
34971: IN
34972: ST_TO_ADDR
// end ;
34973: LD_VAR 0 3
34977: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34978: LD_INT 0
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
// result := array ;
34987: LD_ADDR_VAR 0 5
34991: PUSH
34992: LD_VAR 0 1
34996: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34997: LD_VAR 0 1
35001: NOT
35002: PUSH
35003: LD_VAR 0 2
35007: NOT
35008: OR
35009: PUSH
35010: LD_VAR 0 3
35014: NOT
35015: OR
35016: PUSH
35017: LD_VAR 0 2
35021: PUSH
35022: LD_VAR 0 1
35026: GREATER
35027: OR
35028: PUSH
35029: LD_VAR 0 3
35033: PUSH
35034: LD_VAR 0 1
35038: GREATER
35039: OR
35040: IFFALSE 35044
// exit ;
35042: GO 35340
// if direction then
35044: LD_VAR 0 4
35048: IFFALSE 35112
// begin d := 1 ;
35050: LD_ADDR_VAR 0 9
35054: PUSH
35055: LD_INT 1
35057: ST_TO_ADDR
// if i_from > i_to then
35058: LD_VAR 0 2
35062: PUSH
35063: LD_VAR 0 3
35067: GREATER
35068: IFFALSE 35094
// length := ( array - i_from ) + i_to else
35070: LD_ADDR_VAR 0 11
35074: PUSH
35075: LD_VAR 0 1
35079: PUSH
35080: LD_VAR 0 2
35084: MINUS
35085: PUSH
35086: LD_VAR 0 3
35090: PLUS
35091: ST_TO_ADDR
35092: GO 35110
// length := i_to - i_from ;
35094: LD_ADDR_VAR 0 11
35098: PUSH
35099: LD_VAR 0 3
35103: PUSH
35104: LD_VAR 0 2
35108: MINUS
35109: ST_TO_ADDR
// end else
35110: GO 35173
// begin d := - 1 ;
35112: LD_ADDR_VAR 0 9
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: ST_TO_ADDR
// if i_from > i_to then
35121: LD_VAR 0 2
35125: PUSH
35126: LD_VAR 0 3
35130: GREATER
35131: IFFALSE 35151
// length := i_from - i_to else
35133: LD_ADDR_VAR 0 11
35137: PUSH
35138: LD_VAR 0 2
35142: PUSH
35143: LD_VAR 0 3
35147: MINUS
35148: ST_TO_ADDR
35149: GO 35173
// length := ( array - i_to ) + i_from ;
35151: LD_ADDR_VAR 0 11
35155: PUSH
35156: LD_VAR 0 1
35160: PUSH
35161: LD_VAR 0 3
35165: MINUS
35166: PUSH
35167: LD_VAR 0 2
35171: PLUS
35172: ST_TO_ADDR
// end ; if not length then
35173: LD_VAR 0 11
35177: NOT
35178: IFFALSE 35182
// exit ;
35180: GO 35340
// tmp := array ;
35182: LD_ADDR_VAR 0 10
35186: PUSH
35187: LD_VAR 0 1
35191: ST_TO_ADDR
// for i = 1 to length do
35192: LD_ADDR_VAR 0 6
35196: PUSH
35197: DOUBLE
35198: LD_INT 1
35200: DEC
35201: ST_TO_ADDR
35202: LD_VAR 0 11
35206: PUSH
35207: FOR_TO
35208: IFFALSE 35328
// begin for j = 1 to array do
35210: LD_ADDR_VAR 0 7
35214: PUSH
35215: DOUBLE
35216: LD_INT 1
35218: DEC
35219: ST_TO_ADDR
35220: LD_VAR 0 1
35224: PUSH
35225: FOR_TO
35226: IFFALSE 35314
// begin k := j + d ;
35228: LD_ADDR_VAR 0 8
35232: PUSH
35233: LD_VAR 0 7
35237: PUSH
35238: LD_VAR 0 9
35242: PLUS
35243: ST_TO_ADDR
// if k > array then
35244: LD_VAR 0 8
35248: PUSH
35249: LD_VAR 0 1
35253: GREATER
35254: IFFALSE 35264
// k := 1 ;
35256: LD_ADDR_VAR 0 8
35260: PUSH
35261: LD_INT 1
35263: ST_TO_ADDR
// if not k then
35264: LD_VAR 0 8
35268: NOT
35269: IFFALSE 35281
// k := array ;
35271: LD_ADDR_VAR 0 8
35275: PUSH
35276: LD_VAR 0 1
35280: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35281: LD_ADDR_VAR 0 10
35285: PUSH
35286: LD_VAR 0 10
35290: PPUSH
35291: LD_VAR 0 8
35295: PPUSH
35296: LD_VAR 0 1
35300: PUSH
35301: LD_VAR 0 7
35305: ARRAY
35306: PPUSH
35307: CALL_OW 1
35311: ST_TO_ADDR
// end ;
35312: GO 35225
35314: POP
35315: POP
// array := tmp ;
35316: LD_ADDR_VAR 0 1
35320: PUSH
35321: LD_VAR 0 10
35325: ST_TO_ADDR
// end ;
35326: GO 35207
35328: POP
35329: POP
// result := array ;
35330: LD_ADDR_VAR 0 5
35334: PUSH
35335: LD_VAR 0 1
35339: ST_TO_ADDR
// end ;
35340: LD_VAR 0 5
35344: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35345: LD_INT 0
35347: PPUSH
35348: PPUSH
// result := 0 ;
35349: LD_ADDR_VAR 0 3
35353: PUSH
35354: LD_INT 0
35356: ST_TO_ADDR
// if not array or not value in array then
35357: LD_VAR 0 1
35361: NOT
35362: PUSH
35363: LD_VAR 0 2
35367: PUSH
35368: LD_VAR 0 1
35372: IN
35373: NOT
35374: OR
35375: IFFALSE 35379
// exit ;
35377: GO 35433
// for i = 1 to array do
35379: LD_ADDR_VAR 0 4
35383: PUSH
35384: DOUBLE
35385: LD_INT 1
35387: DEC
35388: ST_TO_ADDR
35389: LD_VAR 0 1
35393: PUSH
35394: FOR_TO
35395: IFFALSE 35431
// if value = array [ i ] then
35397: LD_VAR 0 2
35401: PUSH
35402: LD_VAR 0 1
35406: PUSH
35407: LD_VAR 0 4
35411: ARRAY
35412: EQUAL
35413: IFFALSE 35429
// begin result := i ;
35415: LD_ADDR_VAR 0 3
35419: PUSH
35420: LD_VAR 0 4
35424: ST_TO_ADDR
// exit ;
35425: POP
35426: POP
35427: GO 35433
// end ;
35429: GO 35394
35431: POP
35432: POP
// end ;
35433: LD_VAR 0 3
35437: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35438: LD_INT 0
35440: PPUSH
// vc_chassis := chassis ;
35441: LD_ADDR_OWVAR 37
35445: PUSH
35446: LD_VAR 0 1
35450: ST_TO_ADDR
// vc_engine := engine ;
35451: LD_ADDR_OWVAR 39
35455: PUSH
35456: LD_VAR 0 2
35460: ST_TO_ADDR
// vc_control := control ;
35461: LD_ADDR_OWVAR 38
35465: PUSH
35466: LD_VAR 0 3
35470: ST_TO_ADDR
// vc_weapon := weapon ;
35471: LD_ADDR_OWVAR 40
35475: PUSH
35476: LD_VAR 0 4
35480: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35481: LD_ADDR_OWVAR 41
35485: PUSH
35486: LD_VAR 0 5
35490: ST_TO_ADDR
// end ;
35491: LD_VAR 0 6
35495: RET
// export function WantPlant ( unit ) ; var task ; begin
35496: LD_INT 0
35498: PPUSH
35499: PPUSH
// result := false ;
35500: LD_ADDR_VAR 0 2
35504: PUSH
35505: LD_INT 0
35507: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35508: LD_ADDR_VAR 0 3
35512: PUSH
35513: LD_VAR 0 1
35517: PPUSH
35518: CALL_OW 437
35522: ST_TO_ADDR
// if task then
35523: LD_VAR 0 3
35527: IFFALSE 35555
// if task [ 1 ] [ 1 ] = p then
35529: LD_VAR 0 3
35533: PUSH
35534: LD_INT 1
35536: ARRAY
35537: PUSH
35538: LD_INT 1
35540: ARRAY
35541: PUSH
35542: LD_STRING p
35544: EQUAL
35545: IFFALSE 35555
// result := true ;
35547: LD_ADDR_VAR 0 2
35551: PUSH
35552: LD_INT 1
35554: ST_TO_ADDR
// end ;
35555: LD_VAR 0 2
35559: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35560: LD_INT 0
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
// if pos < 1 then
35566: LD_VAR 0 2
35570: PUSH
35571: LD_INT 1
35573: LESS
35574: IFFALSE 35578
// exit ;
35576: GO 35881
// if pos = 1 then
35578: LD_VAR 0 2
35582: PUSH
35583: LD_INT 1
35585: EQUAL
35586: IFFALSE 35619
// result := Replace ( arr , pos [ 1 ] , value ) else
35588: LD_ADDR_VAR 0 4
35592: PUSH
35593: LD_VAR 0 1
35597: PPUSH
35598: LD_VAR 0 2
35602: PUSH
35603: LD_INT 1
35605: ARRAY
35606: PPUSH
35607: LD_VAR 0 3
35611: PPUSH
35612: CALL_OW 1
35616: ST_TO_ADDR
35617: GO 35881
// begin tmp := arr ;
35619: LD_ADDR_VAR 0 6
35623: PUSH
35624: LD_VAR 0 1
35628: ST_TO_ADDR
// s_arr := [ tmp ] ;
35629: LD_ADDR_VAR 0 7
35633: PUSH
35634: LD_VAR 0 6
35638: PUSH
35639: EMPTY
35640: LIST
35641: ST_TO_ADDR
// for i = 1 to pos - 1 do
35642: LD_ADDR_VAR 0 5
35646: PUSH
35647: DOUBLE
35648: LD_INT 1
35650: DEC
35651: ST_TO_ADDR
35652: LD_VAR 0 2
35656: PUSH
35657: LD_INT 1
35659: MINUS
35660: PUSH
35661: FOR_TO
35662: IFFALSE 35707
// begin tmp := tmp [ pos [ i ] ] ;
35664: LD_ADDR_VAR 0 6
35668: PUSH
35669: LD_VAR 0 6
35673: PUSH
35674: LD_VAR 0 2
35678: PUSH
35679: LD_VAR 0 5
35683: ARRAY
35684: ARRAY
35685: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35686: LD_ADDR_VAR 0 7
35690: PUSH
35691: LD_VAR 0 7
35695: PUSH
35696: LD_VAR 0 6
35700: PUSH
35701: EMPTY
35702: LIST
35703: ADD
35704: ST_TO_ADDR
// end ;
35705: GO 35661
35707: POP
35708: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35709: LD_ADDR_VAR 0 6
35713: PUSH
35714: LD_VAR 0 6
35718: PPUSH
35719: LD_VAR 0 2
35723: PUSH
35724: LD_VAR 0 2
35728: ARRAY
35729: PPUSH
35730: LD_VAR 0 3
35734: PPUSH
35735: CALL_OW 1
35739: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35740: LD_ADDR_VAR 0 7
35744: PUSH
35745: LD_VAR 0 7
35749: PPUSH
35750: LD_VAR 0 7
35754: PPUSH
35755: LD_VAR 0 6
35759: PPUSH
35760: CALL_OW 1
35764: ST_TO_ADDR
// for i = s_arr downto 2 do
35765: LD_ADDR_VAR 0 5
35769: PUSH
35770: DOUBLE
35771: LD_VAR 0 7
35775: INC
35776: ST_TO_ADDR
35777: LD_INT 2
35779: PUSH
35780: FOR_DOWNTO
35781: IFFALSE 35865
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35783: LD_ADDR_VAR 0 6
35787: PUSH
35788: LD_VAR 0 7
35792: PUSH
35793: LD_VAR 0 5
35797: PUSH
35798: LD_INT 1
35800: MINUS
35801: ARRAY
35802: PPUSH
35803: LD_VAR 0 2
35807: PUSH
35808: LD_VAR 0 5
35812: PUSH
35813: LD_INT 1
35815: MINUS
35816: ARRAY
35817: PPUSH
35818: LD_VAR 0 7
35822: PUSH
35823: LD_VAR 0 5
35827: ARRAY
35828: PPUSH
35829: CALL_OW 1
35833: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35834: LD_ADDR_VAR 0 7
35838: PUSH
35839: LD_VAR 0 7
35843: PPUSH
35844: LD_VAR 0 5
35848: PUSH
35849: LD_INT 1
35851: MINUS
35852: PPUSH
35853: LD_VAR 0 6
35857: PPUSH
35858: CALL_OW 1
35862: ST_TO_ADDR
// end ;
35863: GO 35780
35865: POP
35866: POP
// result := s_arr [ 1 ] ;
35867: LD_ADDR_VAR 0 4
35871: PUSH
35872: LD_VAR 0 7
35876: PUSH
35877: LD_INT 1
35879: ARRAY
35880: ST_TO_ADDR
// end ; end ;
35881: LD_VAR 0 4
35885: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35886: LD_INT 0
35888: PPUSH
35889: PPUSH
// if not list then
35890: LD_VAR 0 1
35894: NOT
35895: IFFALSE 35899
// exit ;
35897: GO 35990
// i := list [ pos1 ] ;
35899: LD_ADDR_VAR 0 5
35903: PUSH
35904: LD_VAR 0 1
35908: PUSH
35909: LD_VAR 0 2
35913: ARRAY
35914: ST_TO_ADDR
// if not i then
35915: LD_VAR 0 5
35919: NOT
35920: IFFALSE 35924
// exit ;
35922: GO 35990
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35924: LD_ADDR_VAR 0 1
35928: PUSH
35929: LD_VAR 0 1
35933: PPUSH
35934: LD_VAR 0 2
35938: PPUSH
35939: LD_VAR 0 1
35943: PUSH
35944: LD_VAR 0 3
35948: ARRAY
35949: PPUSH
35950: CALL_OW 1
35954: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35955: LD_ADDR_VAR 0 1
35959: PUSH
35960: LD_VAR 0 1
35964: PPUSH
35965: LD_VAR 0 3
35969: PPUSH
35970: LD_VAR 0 5
35974: PPUSH
35975: CALL_OW 1
35979: ST_TO_ADDR
// result := list ;
35980: LD_ADDR_VAR 0 4
35984: PUSH
35985: LD_VAR 0 1
35989: ST_TO_ADDR
// end ;
35990: LD_VAR 0 4
35994: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35995: LD_INT 0
35997: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35998: LD_ADDR_VAR 0 5
36002: PUSH
36003: LD_VAR 0 1
36007: PPUSH
36008: CALL_OW 250
36012: PPUSH
36013: LD_VAR 0 1
36017: PPUSH
36018: CALL_OW 251
36022: PPUSH
36023: LD_VAR 0 2
36027: PPUSH
36028: LD_VAR 0 3
36032: PPUSH
36033: LD_VAR 0 4
36037: PPUSH
36038: CALL 36048 0 5
36042: ST_TO_ADDR
// end ;
36043: LD_VAR 0 5
36047: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36048: LD_INT 0
36050: PPUSH
36051: PPUSH
36052: PPUSH
36053: PPUSH
// if not list then
36054: LD_VAR 0 3
36058: NOT
36059: IFFALSE 36063
// exit ;
36061: GO 36451
// result := [ ] ;
36063: LD_ADDR_VAR 0 6
36067: PUSH
36068: EMPTY
36069: ST_TO_ADDR
// for i in list do
36070: LD_ADDR_VAR 0 7
36074: PUSH
36075: LD_VAR 0 3
36079: PUSH
36080: FOR_IN
36081: IFFALSE 36283
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36083: LD_ADDR_VAR 0 9
36087: PUSH
36088: LD_VAR 0 7
36092: PPUSH
36093: LD_VAR 0 1
36097: PPUSH
36098: LD_VAR 0 2
36102: PPUSH
36103: CALL_OW 297
36107: ST_TO_ADDR
// if not result then
36108: LD_VAR 0 6
36112: NOT
36113: IFFALSE 36139
// result := [ [ i , tmp ] ] else
36115: LD_ADDR_VAR 0 6
36119: PUSH
36120: LD_VAR 0 7
36124: PUSH
36125: LD_VAR 0 9
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: EMPTY
36135: LIST
36136: ST_TO_ADDR
36137: GO 36281
// begin if result [ result ] [ 2 ] < tmp then
36139: LD_VAR 0 6
36143: PUSH
36144: LD_VAR 0 6
36148: ARRAY
36149: PUSH
36150: LD_INT 2
36152: ARRAY
36153: PUSH
36154: LD_VAR 0 9
36158: LESS
36159: IFFALSE 36201
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36161: LD_ADDR_VAR 0 6
36165: PUSH
36166: LD_VAR 0 6
36170: PPUSH
36171: LD_VAR 0 6
36175: PUSH
36176: LD_INT 1
36178: PLUS
36179: PPUSH
36180: LD_VAR 0 7
36184: PUSH
36185: LD_VAR 0 9
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PPUSH
36194: CALL_OW 2
36198: ST_TO_ADDR
36199: GO 36281
// for j = 1 to result do
36201: LD_ADDR_VAR 0 8
36205: PUSH
36206: DOUBLE
36207: LD_INT 1
36209: DEC
36210: ST_TO_ADDR
36211: LD_VAR 0 6
36215: PUSH
36216: FOR_TO
36217: IFFALSE 36279
// begin if tmp < result [ j ] [ 2 ] then
36219: LD_VAR 0 9
36223: PUSH
36224: LD_VAR 0 6
36228: PUSH
36229: LD_VAR 0 8
36233: ARRAY
36234: PUSH
36235: LD_INT 2
36237: ARRAY
36238: LESS
36239: IFFALSE 36277
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36241: LD_ADDR_VAR 0 6
36245: PUSH
36246: LD_VAR 0 6
36250: PPUSH
36251: LD_VAR 0 8
36255: PPUSH
36256: LD_VAR 0 7
36260: PUSH
36261: LD_VAR 0 9
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PPUSH
36270: CALL_OW 2
36274: ST_TO_ADDR
// break ;
36275: GO 36279
// end ; end ;
36277: GO 36216
36279: POP
36280: POP
// end ; end ;
36281: GO 36080
36283: POP
36284: POP
// if result and not asc then
36285: LD_VAR 0 6
36289: PUSH
36290: LD_VAR 0 4
36294: NOT
36295: AND
36296: IFFALSE 36371
// begin tmp := result ;
36298: LD_ADDR_VAR 0 9
36302: PUSH
36303: LD_VAR 0 6
36307: ST_TO_ADDR
// for i = tmp downto 1 do
36308: LD_ADDR_VAR 0 7
36312: PUSH
36313: DOUBLE
36314: LD_VAR 0 9
36318: INC
36319: ST_TO_ADDR
36320: LD_INT 1
36322: PUSH
36323: FOR_DOWNTO
36324: IFFALSE 36369
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36326: LD_ADDR_VAR 0 6
36330: PUSH
36331: LD_VAR 0 6
36335: PPUSH
36336: LD_VAR 0 9
36340: PUSH
36341: LD_VAR 0 7
36345: MINUS
36346: PUSH
36347: LD_INT 1
36349: PLUS
36350: PPUSH
36351: LD_VAR 0 9
36355: PUSH
36356: LD_VAR 0 7
36360: ARRAY
36361: PPUSH
36362: CALL_OW 1
36366: ST_TO_ADDR
36367: GO 36323
36369: POP
36370: POP
// end ; tmp := [ ] ;
36371: LD_ADDR_VAR 0 9
36375: PUSH
36376: EMPTY
36377: ST_TO_ADDR
// if mode then
36378: LD_VAR 0 5
36382: IFFALSE 36451
// begin for i = 1 to result do
36384: LD_ADDR_VAR 0 7
36388: PUSH
36389: DOUBLE
36390: LD_INT 1
36392: DEC
36393: ST_TO_ADDR
36394: LD_VAR 0 6
36398: PUSH
36399: FOR_TO
36400: IFFALSE 36439
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36402: LD_ADDR_VAR 0 9
36406: PUSH
36407: LD_VAR 0 9
36411: PPUSH
36412: LD_VAR 0 7
36416: PPUSH
36417: LD_VAR 0 6
36421: PUSH
36422: LD_VAR 0 7
36426: ARRAY
36427: PUSH
36428: LD_INT 1
36430: ARRAY
36431: PPUSH
36432: CALL_OW 1
36436: ST_TO_ADDR
36437: GO 36399
36439: POP
36440: POP
// result := tmp ;
36441: LD_ADDR_VAR 0 6
36445: PUSH
36446: LD_VAR 0 9
36450: ST_TO_ADDR
// end ; end ;
36451: LD_VAR 0 6
36455: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36456: LD_INT 0
36458: PPUSH
36459: PPUSH
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36464: LD_ADDR_VAR 0 5
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: EMPTY
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// if not x or not y then
36486: LD_VAR 0 2
36490: NOT
36491: PUSH
36492: LD_VAR 0 3
36496: NOT
36497: OR
36498: IFFALSE 36502
// exit ;
36500: GO 38154
// if not range then
36502: LD_VAR 0 4
36506: NOT
36507: IFFALSE 36517
// range := 10 ;
36509: LD_ADDR_VAR 0 4
36513: PUSH
36514: LD_INT 10
36516: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36517: LD_ADDR_VAR 0 8
36521: PUSH
36522: LD_INT 81
36524: PUSH
36525: LD_VAR 0 1
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 92
36536: PUSH
36537: LD_VAR 0 2
36541: PUSH
36542: LD_VAR 0 3
36546: PUSH
36547: LD_VAR 0 4
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 3
36560: PUSH
36561: LD_INT 21
36563: PUSH
36564: LD_INT 3
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: PPUSH
36580: CALL_OW 69
36584: ST_TO_ADDR
// if not tmp then
36585: LD_VAR 0 8
36589: NOT
36590: IFFALSE 36594
// exit ;
36592: GO 38154
// for i in tmp do
36594: LD_ADDR_VAR 0 6
36598: PUSH
36599: LD_VAR 0 8
36603: PUSH
36604: FOR_IN
36605: IFFALSE 38129
// begin points := [ 0 , 0 , 0 ] ;
36607: LD_ADDR_VAR 0 9
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: ST_TO_ADDR
// bpoints := 1 ;
36626: LD_ADDR_VAR 0 10
36630: PUSH
36631: LD_INT 1
36633: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36634: LD_VAR 0 6
36638: PPUSH
36639: CALL_OW 247
36643: PUSH
36644: LD_INT 1
36646: DOUBLE
36647: EQUAL
36648: IFTRUE 36652
36650: GO 37230
36652: POP
// begin if GetClass ( i ) = 1 then
36653: LD_VAR 0 6
36657: PPUSH
36658: CALL_OW 257
36662: PUSH
36663: LD_INT 1
36665: EQUAL
36666: IFFALSE 36687
// points := [ 10 , 5 , 3 ] ;
36668: LD_ADDR_VAR 0 9
36672: PUSH
36673: LD_INT 10
36675: PUSH
36676: LD_INT 5
36678: PUSH
36679: LD_INT 3
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36687: LD_VAR 0 6
36691: PPUSH
36692: CALL_OW 257
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: LD_INT 3
36702: PUSH
36703: LD_INT 4
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: LIST
36710: IN
36711: IFFALSE 36732
// points := [ 3 , 2 , 1 ] ;
36713: LD_ADDR_VAR 0 9
36717: PUSH
36718: LD_INT 3
36720: PUSH
36721: LD_INT 2
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36732: LD_VAR 0 6
36736: PPUSH
36737: CALL_OW 257
36741: PUSH
36742: LD_INT 5
36744: EQUAL
36745: IFFALSE 36766
// points := [ 130 , 5 , 2 ] ;
36747: LD_ADDR_VAR 0 9
36751: PUSH
36752: LD_INT 130
36754: PUSH
36755: LD_INT 5
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36766: LD_VAR 0 6
36770: PPUSH
36771: CALL_OW 257
36775: PUSH
36776: LD_INT 8
36778: EQUAL
36779: IFFALSE 36800
// points := [ 35 , 35 , 30 ] ;
36781: LD_ADDR_VAR 0 9
36785: PUSH
36786: LD_INT 35
36788: PUSH
36789: LD_INT 35
36791: PUSH
36792: LD_INT 30
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36800: LD_VAR 0 6
36804: PPUSH
36805: CALL_OW 257
36809: PUSH
36810: LD_INT 9
36812: EQUAL
36813: IFFALSE 36834
// points := [ 20 , 55 , 40 ] ;
36815: LD_ADDR_VAR 0 9
36819: PUSH
36820: LD_INT 20
36822: PUSH
36823: LD_INT 55
36825: PUSH
36826: LD_INT 40
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36834: LD_VAR 0 6
36838: PPUSH
36839: CALL_OW 257
36843: PUSH
36844: LD_INT 12
36846: PUSH
36847: LD_INT 16
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: IN
36854: IFFALSE 36875
// points := [ 5 , 3 , 2 ] ;
36856: LD_ADDR_VAR 0 9
36860: PUSH
36861: LD_INT 5
36863: PUSH
36864: LD_INT 3
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36875: LD_VAR 0 6
36879: PPUSH
36880: CALL_OW 257
36884: PUSH
36885: LD_INT 17
36887: EQUAL
36888: IFFALSE 36909
// points := [ 100 , 50 , 75 ] ;
36890: LD_ADDR_VAR 0 9
36894: PUSH
36895: LD_INT 100
36897: PUSH
36898: LD_INT 50
36900: PUSH
36901: LD_INT 75
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36909: LD_VAR 0 6
36913: PPUSH
36914: CALL_OW 257
36918: PUSH
36919: LD_INT 15
36921: EQUAL
36922: IFFALSE 36943
// points := [ 10 , 5 , 3 ] ;
36924: LD_ADDR_VAR 0 9
36928: PUSH
36929: LD_INT 10
36931: PUSH
36932: LD_INT 5
36934: PUSH
36935: LD_INT 3
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36943: LD_VAR 0 6
36947: PPUSH
36948: CALL_OW 257
36952: PUSH
36953: LD_INT 14
36955: EQUAL
36956: IFFALSE 36977
// points := [ 10 , 0 , 0 ] ;
36958: LD_ADDR_VAR 0 9
36962: PUSH
36963: LD_INT 10
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36977: LD_VAR 0 6
36981: PPUSH
36982: CALL_OW 257
36986: PUSH
36987: LD_INT 11
36989: EQUAL
36990: IFFALSE 37011
// points := [ 30 , 10 , 5 ] ;
36992: LD_ADDR_VAR 0 9
36996: PUSH
36997: LD_INT 30
36999: PUSH
37000: LD_INT 10
37002: PUSH
37003: LD_INT 5
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37011: LD_VAR 0 1
37015: PPUSH
37016: LD_INT 5
37018: PPUSH
37019: CALL_OW 321
37023: PUSH
37024: LD_INT 2
37026: EQUAL
37027: IFFALSE 37044
// bpoints := bpoints * 1.8 ;
37029: LD_ADDR_VAR 0 10
37033: PUSH
37034: LD_VAR 0 10
37038: PUSH
37039: LD_REAL  1.80000000000000E+0000
37042: MUL
37043: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37044: LD_VAR 0 6
37048: PPUSH
37049: CALL_OW 257
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: LD_INT 3
37062: PUSH
37063: LD_INT 4
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: IN
37072: PUSH
37073: LD_VAR 0 1
37077: PPUSH
37078: LD_INT 51
37080: PPUSH
37081: CALL_OW 321
37085: PUSH
37086: LD_INT 2
37088: EQUAL
37089: AND
37090: IFFALSE 37107
// bpoints := bpoints * 1.2 ;
37092: LD_ADDR_VAR 0 10
37096: PUSH
37097: LD_VAR 0 10
37101: PUSH
37102: LD_REAL  1.20000000000000E+0000
37105: MUL
37106: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37107: LD_VAR 0 6
37111: PPUSH
37112: CALL_OW 257
37116: PUSH
37117: LD_INT 5
37119: PUSH
37120: LD_INT 7
37122: PUSH
37123: LD_INT 9
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: IN
37131: PUSH
37132: LD_VAR 0 1
37136: PPUSH
37137: LD_INT 52
37139: PPUSH
37140: CALL_OW 321
37144: PUSH
37145: LD_INT 2
37147: EQUAL
37148: AND
37149: IFFALSE 37166
// bpoints := bpoints * 1.5 ;
37151: LD_ADDR_VAR 0 10
37155: PUSH
37156: LD_VAR 0 10
37160: PUSH
37161: LD_REAL  1.50000000000000E+0000
37164: MUL
37165: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37166: LD_VAR 0 1
37170: PPUSH
37171: LD_INT 66
37173: PPUSH
37174: CALL_OW 321
37178: PUSH
37179: LD_INT 2
37181: EQUAL
37182: IFFALSE 37199
// bpoints := bpoints * 1.1 ;
37184: LD_ADDR_VAR 0 10
37188: PUSH
37189: LD_VAR 0 10
37193: PUSH
37194: LD_REAL  1.10000000000000E+0000
37197: MUL
37198: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37199: LD_ADDR_VAR 0 10
37203: PUSH
37204: LD_VAR 0 10
37208: PUSH
37209: LD_VAR 0 6
37213: PPUSH
37214: LD_INT 1
37216: PPUSH
37217: CALL_OW 259
37221: PUSH
37222: LD_REAL  1.15000000000000E+0000
37225: MUL
37226: MUL
37227: ST_TO_ADDR
// end ; unit_vehicle :
37228: GO 38058
37230: LD_INT 2
37232: DOUBLE
37233: EQUAL
37234: IFTRUE 37238
37236: GO 38046
37238: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37239: LD_VAR 0 6
37243: PPUSH
37244: CALL_OW 264
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: LD_INT 42
37254: PUSH
37255: LD_INT 24
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: LIST
37262: IN
37263: IFFALSE 37284
// points := [ 25 , 5 , 3 ] ;
37265: LD_ADDR_VAR 0 9
37269: PUSH
37270: LD_INT 25
37272: PUSH
37273: LD_INT 5
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: LIST
37283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37284: LD_VAR 0 6
37288: PPUSH
37289: CALL_OW 264
37293: PUSH
37294: LD_INT 4
37296: PUSH
37297: LD_INT 43
37299: PUSH
37300: LD_INT 25
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: IN
37308: IFFALSE 37329
// points := [ 40 , 15 , 5 ] ;
37310: LD_ADDR_VAR 0 9
37314: PUSH
37315: LD_INT 40
37317: PUSH
37318: LD_INT 15
37320: PUSH
37321: LD_INT 5
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37329: LD_VAR 0 6
37333: PPUSH
37334: CALL_OW 264
37338: PUSH
37339: LD_INT 3
37341: PUSH
37342: LD_INT 23
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: IN
37349: IFFALSE 37370
// points := [ 7 , 25 , 8 ] ;
37351: LD_ADDR_VAR 0 9
37355: PUSH
37356: LD_INT 7
37358: PUSH
37359: LD_INT 25
37361: PUSH
37362: LD_INT 8
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37370: LD_VAR 0 6
37374: PPUSH
37375: CALL_OW 264
37379: PUSH
37380: LD_INT 5
37382: PUSH
37383: LD_INT 27
37385: PUSH
37386: LD_INT 44
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: IN
37394: IFFALSE 37415
// points := [ 14 , 50 , 16 ] ;
37396: LD_ADDR_VAR 0 9
37400: PUSH
37401: LD_INT 14
37403: PUSH
37404: LD_INT 50
37406: PUSH
37407: LD_INT 16
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37415: LD_VAR 0 6
37419: PPUSH
37420: CALL_OW 264
37424: PUSH
37425: LD_INT 6
37427: PUSH
37428: LD_INT 46
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: IN
37435: IFFALSE 37456
// points := [ 32 , 120 , 70 ] ;
37437: LD_ADDR_VAR 0 9
37441: PUSH
37442: LD_INT 32
37444: PUSH
37445: LD_INT 120
37447: PUSH
37448: LD_INT 70
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37456: LD_VAR 0 6
37460: PPUSH
37461: CALL_OW 264
37465: PUSH
37466: LD_INT 7
37468: PUSH
37469: LD_INT 28
37471: PUSH
37472: LD_INT 45
37474: PUSH
37475: LD_EXP 26
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: IN
37486: IFFALSE 37507
// points := [ 35 , 20 , 45 ] ;
37488: LD_ADDR_VAR 0 9
37492: PUSH
37493: LD_INT 35
37495: PUSH
37496: LD_INT 20
37498: PUSH
37499: LD_INT 45
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37507: LD_VAR 0 6
37511: PPUSH
37512: CALL_OW 264
37516: PUSH
37517: LD_INT 47
37519: PUSH
37520: EMPTY
37521: LIST
37522: IN
37523: IFFALSE 37544
// points := [ 67 , 45 , 75 ] ;
37525: LD_ADDR_VAR 0 9
37529: PUSH
37530: LD_INT 67
37532: PUSH
37533: LD_INT 45
37535: PUSH
37536: LD_INT 75
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37544: LD_VAR 0 6
37548: PPUSH
37549: CALL_OW 264
37553: PUSH
37554: LD_INT 26
37556: PUSH
37557: EMPTY
37558: LIST
37559: IN
37560: IFFALSE 37581
// points := [ 120 , 30 , 80 ] ;
37562: LD_ADDR_VAR 0 9
37566: PUSH
37567: LD_INT 120
37569: PUSH
37570: LD_INT 30
37572: PUSH
37573: LD_INT 80
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: LIST
37580: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37581: LD_VAR 0 6
37585: PPUSH
37586: CALL_OW 264
37590: PUSH
37591: LD_INT 22
37593: PUSH
37594: EMPTY
37595: LIST
37596: IN
37597: IFFALSE 37618
// points := [ 40 , 1 , 1 ] ;
37599: LD_ADDR_VAR 0 9
37603: PUSH
37604: LD_INT 40
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37618: LD_VAR 0 6
37622: PPUSH
37623: CALL_OW 264
37627: PUSH
37628: LD_INT 29
37630: PUSH
37631: EMPTY
37632: LIST
37633: IN
37634: IFFALSE 37655
// points := [ 70 , 200 , 400 ] ;
37636: LD_ADDR_VAR 0 9
37640: PUSH
37641: LD_INT 70
37643: PUSH
37644: LD_INT 200
37646: PUSH
37647: LD_INT 400
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37655: LD_VAR 0 6
37659: PPUSH
37660: CALL_OW 264
37664: PUSH
37665: LD_INT 14
37667: PUSH
37668: LD_INT 53
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: IN
37675: IFFALSE 37696
// points := [ 40 , 10 , 20 ] ;
37677: LD_ADDR_VAR 0 9
37681: PUSH
37682: LD_INT 40
37684: PUSH
37685: LD_INT 10
37687: PUSH
37688: LD_INT 20
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37696: LD_VAR 0 6
37700: PPUSH
37701: CALL_OW 264
37705: PUSH
37706: LD_INT 9
37708: PUSH
37709: EMPTY
37710: LIST
37711: IN
37712: IFFALSE 37733
// points := [ 5 , 70 , 20 ] ;
37714: LD_ADDR_VAR 0 9
37718: PUSH
37719: LD_INT 5
37721: PUSH
37722: LD_INT 70
37724: PUSH
37725: LD_INT 20
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37733: LD_VAR 0 6
37737: PPUSH
37738: CALL_OW 264
37742: PUSH
37743: LD_INT 10
37745: PUSH
37746: EMPTY
37747: LIST
37748: IN
37749: IFFALSE 37770
// points := [ 35 , 110 , 70 ] ;
37751: LD_ADDR_VAR 0 9
37755: PUSH
37756: LD_INT 35
37758: PUSH
37759: LD_INT 110
37761: PUSH
37762: LD_INT 70
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37770: LD_VAR 0 6
37774: PPUSH
37775: CALL_OW 265
37779: PUSH
37780: LD_INT 25
37782: EQUAL
37783: IFFALSE 37804
// points := [ 80 , 65 , 100 ] ;
37785: LD_ADDR_VAR 0 9
37789: PUSH
37790: LD_INT 80
37792: PUSH
37793: LD_INT 65
37795: PUSH
37796: LD_INT 100
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: LIST
37803: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37804: LD_VAR 0 6
37808: PPUSH
37809: CALL_OW 263
37813: PUSH
37814: LD_INT 1
37816: EQUAL
37817: IFFALSE 37852
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37819: LD_ADDR_VAR 0 10
37823: PUSH
37824: LD_VAR 0 10
37828: PUSH
37829: LD_VAR 0 6
37833: PPUSH
37834: CALL_OW 311
37838: PPUSH
37839: LD_INT 3
37841: PPUSH
37842: CALL_OW 259
37846: PUSH
37847: LD_INT 4
37849: MUL
37850: MUL
37851: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37852: LD_VAR 0 6
37856: PPUSH
37857: CALL_OW 263
37861: PUSH
37862: LD_INT 2
37864: EQUAL
37865: IFFALSE 37916
// begin j := IsControledBy ( i ) ;
37867: LD_ADDR_VAR 0 7
37871: PUSH
37872: LD_VAR 0 6
37876: PPUSH
37877: CALL_OW 312
37881: ST_TO_ADDR
// if j then
37882: LD_VAR 0 7
37886: IFFALSE 37916
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37888: LD_ADDR_VAR 0 10
37892: PUSH
37893: LD_VAR 0 10
37897: PUSH
37898: LD_VAR 0 7
37902: PPUSH
37903: LD_INT 3
37905: PPUSH
37906: CALL_OW 259
37910: PUSH
37911: LD_INT 3
37913: MUL
37914: MUL
37915: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37916: LD_VAR 0 6
37920: PPUSH
37921: CALL_OW 264
37925: PUSH
37926: LD_INT 5
37928: PUSH
37929: LD_INT 6
37931: PUSH
37932: LD_INT 46
37934: PUSH
37935: LD_INT 44
37937: PUSH
37938: LD_INT 47
37940: PUSH
37941: LD_INT 45
37943: PUSH
37944: LD_INT 28
37946: PUSH
37947: LD_INT 7
37949: PUSH
37950: LD_INT 27
37952: PUSH
37953: LD_INT 29
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: IN
37968: PUSH
37969: LD_VAR 0 1
37973: PPUSH
37974: LD_INT 52
37976: PPUSH
37977: CALL_OW 321
37981: PUSH
37982: LD_INT 2
37984: EQUAL
37985: AND
37986: IFFALSE 38003
// bpoints := bpoints * 1.2 ;
37988: LD_ADDR_VAR 0 10
37992: PUSH
37993: LD_VAR 0 10
37997: PUSH
37998: LD_REAL  1.20000000000000E+0000
38001: MUL
38002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38003: LD_VAR 0 6
38007: PPUSH
38008: CALL_OW 264
38012: PUSH
38013: LD_INT 6
38015: PUSH
38016: LD_INT 46
38018: PUSH
38019: LD_INT 47
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: IN
38027: IFFALSE 38044
// bpoints := bpoints * 1.2 ;
38029: LD_ADDR_VAR 0 10
38033: PUSH
38034: LD_VAR 0 10
38038: PUSH
38039: LD_REAL  1.20000000000000E+0000
38042: MUL
38043: ST_TO_ADDR
// end ; unit_building :
38044: GO 38058
38046: LD_INT 3
38048: DOUBLE
38049: EQUAL
38050: IFTRUE 38054
38052: GO 38057
38054: POP
// ; end ;
38055: GO 38058
38057: POP
// for j = 1 to 3 do
38058: LD_ADDR_VAR 0 7
38062: PUSH
38063: DOUBLE
38064: LD_INT 1
38066: DEC
38067: ST_TO_ADDR
38068: LD_INT 3
38070: PUSH
38071: FOR_TO
38072: IFFALSE 38125
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38074: LD_ADDR_VAR 0 5
38078: PUSH
38079: LD_VAR 0 5
38083: PPUSH
38084: LD_VAR 0 7
38088: PPUSH
38089: LD_VAR 0 5
38093: PUSH
38094: LD_VAR 0 7
38098: ARRAY
38099: PUSH
38100: LD_VAR 0 9
38104: PUSH
38105: LD_VAR 0 7
38109: ARRAY
38110: PUSH
38111: LD_VAR 0 10
38115: MUL
38116: PLUS
38117: PPUSH
38118: CALL_OW 1
38122: ST_TO_ADDR
38123: GO 38071
38125: POP
38126: POP
// end ;
38127: GO 36604
38129: POP
38130: POP
// result := Replace ( result , 4 , tmp ) ;
38131: LD_ADDR_VAR 0 5
38135: PUSH
38136: LD_VAR 0 5
38140: PPUSH
38141: LD_INT 4
38143: PPUSH
38144: LD_VAR 0 8
38148: PPUSH
38149: CALL_OW 1
38153: ST_TO_ADDR
// end ;
38154: LD_VAR 0 5
38158: RET
// export function DangerAtRange ( unit , range ) ; begin
38159: LD_INT 0
38161: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38162: LD_ADDR_VAR 0 3
38166: PUSH
38167: LD_VAR 0 1
38171: PPUSH
38172: CALL_OW 255
38176: PPUSH
38177: LD_VAR 0 1
38181: PPUSH
38182: CALL_OW 250
38186: PPUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 251
38196: PPUSH
38197: LD_VAR 0 2
38201: PPUSH
38202: CALL 36456 0 4
38206: ST_TO_ADDR
// end ;
38207: LD_VAR 0 3
38211: RET
// export function DangerInArea ( side , area ) ; begin
38212: LD_INT 0
38214: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38215: LD_ADDR_VAR 0 3
38219: PUSH
38220: LD_VAR 0 2
38224: PPUSH
38225: LD_INT 81
38227: PUSH
38228: LD_VAR 0 1
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PPUSH
38237: CALL_OW 70
38241: ST_TO_ADDR
// end ;
38242: LD_VAR 0 3
38246: RET
// export function IsExtension ( b ) ; begin
38247: LD_INT 0
38249: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38250: LD_ADDR_VAR 0 2
38254: PUSH
38255: LD_VAR 0 1
38259: PUSH
38260: LD_INT 23
38262: PUSH
38263: LD_INT 20
38265: PUSH
38266: LD_INT 22
38268: PUSH
38269: LD_INT 17
38271: PUSH
38272: LD_INT 24
38274: PUSH
38275: LD_INT 21
38277: PUSH
38278: LD_INT 19
38280: PUSH
38281: LD_INT 16
38283: PUSH
38284: LD_INT 25
38286: PUSH
38287: LD_INT 18
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: IN
38302: ST_TO_ADDR
// end ;
38303: LD_VAR 0 2
38307: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38308: LD_INT 0
38310: PPUSH
38311: PPUSH
38312: PPUSH
// result := [ ] ;
38313: LD_ADDR_VAR 0 4
38317: PUSH
38318: EMPTY
38319: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38320: LD_ADDR_VAR 0 5
38324: PUSH
38325: LD_VAR 0 2
38329: PPUSH
38330: LD_INT 21
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PPUSH
38340: CALL_OW 70
38344: ST_TO_ADDR
// if not tmp then
38345: LD_VAR 0 5
38349: NOT
38350: IFFALSE 38354
// exit ;
38352: GO 38418
// if checkLink then
38354: LD_VAR 0 3
38358: IFFALSE 38408
// begin for i in tmp do
38360: LD_ADDR_VAR 0 6
38364: PUSH
38365: LD_VAR 0 5
38369: PUSH
38370: FOR_IN
38371: IFFALSE 38406
// if GetBase ( i ) <> base then
38373: LD_VAR 0 6
38377: PPUSH
38378: CALL_OW 274
38382: PUSH
38383: LD_VAR 0 1
38387: NONEQUAL
38388: IFFALSE 38404
// ComLinkToBase ( base , i ) ;
38390: LD_VAR 0 1
38394: PPUSH
38395: LD_VAR 0 6
38399: PPUSH
38400: CALL_OW 169
38404: GO 38370
38406: POP
38407: POP
// end ; result := tmp ;
38408: LD_ADDR_VAR 0 4
38412: PUSH
38413: LD_VAR 0 5
38417: ST_TO_ADDR
// end ;
38418: LD_VAR 0 4
38422: RET
// export function ComComplete ( units , b ) ; var i ; begin
38423: LD_INT 0
38425: PPUSH
38426: PPUSH
// if not units then
38427: LD_VAR 0 1
38431: NOT
38432: IFFALSE 38436
// exit ;
38434: GO 38526
// for i in units do
38436: LD_ADDR_VAR 0 4
38440: PUSH
38441: LD_VAR 0 1
38445: PUSH
38446: FOR_IN
38447: IFFALSE 38524
// if BuildingStatus ( b ) = bs_build then
38449: LD_VAR 0 2
38453: PPUSH
38454: CALL_OW 461
38458: PUSH
38459: LD_INT 1
38461: EQUAL
38462: IFFALSE 38522
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38464: LD_VAR 0 4
38468: PPUSH
38469: LD_STRING h
38471: PUSH
38472: LD_VAR 0 2
38476: PPUSH
38477: CALL_OW 250
38481: PUSH
38482: LD_VAR 0 2
38486: PPUSH
38487: CALL_OW 251
38491: PUSH
38492: LD_VAR 0 2
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: PUSH
38515: EMPTY
38516: LIST
38517: PPUSH
38518: CALL_OW 446
38522: GO 38446
38524: POP
38525: POP
// end ;
38526: LD_VAR 0 3
38530: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38531: LD_INT 0
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38539: LD_VAR 0 1
38543: NOT
38544: PUSH
38545: LD_VAR 0 1
38549: PPUSH
38550: CALL_OW 263
38554: PUSH
38555: LD_INT 2
38557: NONEQUAL
38558: OR
38559: IFFALSE 38563
// exit ;
38561: GO 38879
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38563: LD_ADDR_VAR 0 6
38567: PUSH
38568: LD_INT 22
38570: PUSH
38571: LD_VAR 0 1
38575: PPUSH
38576: CALL_OW 255
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: LD_INT 30
38590: PUSH
38591: LD_INT 36
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 34
38600: PUSH
38601: LD_INT 31
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PPUSH
38617: CALL_OW 69
38621: ST_TO_ADDR
// if not tmp then
38622: LD_VAR 0 6
38626: NOT
38627: IFFALSE 38631
// exit ;
38629: GO 38879
// result := [ ] ;
38631: LD_ADDR_VAR 0 2
38635: PUSH
38636: EMPTY
38637: ST_TO_ADDR
// for i in tmp do
38638: LD_ADDR_VAR 0 3
38642: PUSH
38643: LD_VAR 0 6
38647: PUSH
38648: FOR_IN
38649: IFFALSE 38720
// begin t := UnitsInside ( i ) ;
38651: LD_ADDR_VAR 0 4
38655: PUSH
38656: LD_VAR 0 3
38660: PPUSH
38661: CALL_OW 313
38665: ST_TO_ADDR
// if t then
38666: LD_VAR 0 4
38670: IFFALSE 38718
// for j in t do
38672: LD_ADDR_VAR 0 7
38676: PUSH
38677: LD_VAR 0 4
38681: PUSH
38682: FOR_IN
38683: IFFALSE 38716
// result := Replace ( result , result + 1 , j ) ;
38685: LD_ADDR_VAR 0 2
38689: PUSH
38690: LD_VAR 0 2
38694: PPUSH
38695: LD_VAR 0 2
38699: PUSH
38700: LD_INT 1
38702: PLUS
38703: PPUSH
38704: LD_VAR 0 7
38708: PPUSH
38709: CALL_OW 1
38713: ST_TO_ADDR
38714: GO 38682
38716: POP
38717: POP
// end ;
38718: GO 38648
38720: POP
38721: POP
// if not result then
38722: LD_VAR 0 2
38726: NOT
38727: IFFALSE 38731
// exit ;
38729: GO 38879
// mech := result [ 1 ] ;
38731: LD_ADDR_VAR 0 5
38735: PUSH
38736: LD_VAR 0 2
38740: PUSH
38741: LD_INT 1
38743: ARRAY
38744: ST_TO_ADDR
// if result > 1 then
38745: LD_VAR 0 2
38749: PUSH
38750: LD_INT 1
38752: GREATER
38753: IFFALSE 38865
// begin for i = 2 to result do
38755: LD_ADDR_VAR 0 3
38759: PUSH
38760: DOUBLE
38761: LD_INT 2
38763: DEC
38764: ST_TO_ADDR
38765: LD_VAR 0 2
38769: PUSH
38770: FOR_TO
38771: IFFALSE 38863
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38773: LD_ADDR_VAR 0 4
38777: PUSH
38778: LD_VAR 0 2
38782: PUSH
38783: LD_VAR 0 3
38787: ARRAY
38788: PPUSH
38789: LD_INT 3
38791: PPUSH
38792: CALL_OW 259
38796: PUSH
38797: LD_VAR 0 2
38801: PUSH
38802: LD_VAR 0 3
38806: ARRAY
38807: PPUSH
38808: CALL_OW 432
38812: MINUS
38813: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38814: LD_VAR 0 4
38818: PUSH
38819: LD_VAR 0 5
38823: PPUSH
38824: LD_INT 3
38826: PPUSH
38827: CALL_OW 259
38831: PUSH
38832: LD_VAR 0 5
38836: PPUSH
38837: CALL_OW 432
38841: MINUS
38842: GREATEREQUAL
38843: IFFALSE 38861
// mech := result [ i ] ;
38845: LD_ADDR_VAR 0 5
38849: PUSH
38850: LD_VAR 0 2
38854: PUSH
38855: LD_VAR 0 3
38859: ARRAY
38860: ST_TO_ADDR
// end ;
38861: GO 38770
38863: POP
38864: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38865: LD_VAR 0 1
38869: PPUSH
38870: LD_VAR 0 5
38874: PPUSH
38875: CALL_OW 135
// end ;
38879: LD_VAR 0 2
38883: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38884: LD_INT 0
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
38893: PPUSH
38894: PPUSH
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
// result := [ ] ;
38899: LD_ADDR_VAR 0 7
38903: PUSH
38904: EMPTY
38905: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38906: LD_VAR 0 1
38910: PPUSH
38911: CALL_OW 266
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: IN
38926: NOT
38927: IFFALSE 38931
// exit ;
38929: GO 40565
// if name then
38931: LD_VAR 0 3
38935: IFFALSE 38951
// SetBName ( base_dep , name ) ;
38937: LD_VAR 0 1
38941: PPUSH
38942: LD_VAR 0 3
38946: PPUSH
38947: CALL_OW 500
// base := GetBase ( base_dep ) ;
38951: LD_ADDR_VAR 0 15
38955: PUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 274
38965: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38966: LD_ADDR_VAR 0 16
38970: PUSH
38971: LD_VAR 0 1
38975: PPUSH
38976: CALL_OW 255
38980: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38981: LD_ADDR_VAR 0 17
38985: PUSH
38986: LD_VAR 0 1
38990: PPUSH
38991: CALL_OW 248
38995: ST_TO_ADDR
// if sources then
38996: LD_VAR 0 5
39000: IFFALSE 39047
// for i = 1 to 3 do
39002: LD_ADDR_VAR 0 8
39006: PUSH
39007: DOUBLE
39008: LD_INT 1
39010: DEC
39011: ST_TO_ADDR
39012: LD_INT 3
39014: PUSH
39015: FOR_TO
39016: IFFALSE 39045
// AddResourceType ( base , i , sources [ i ] ) ;
39018: LD_VAR 0 15
39022: PPUSH
39023: LD_VAR 0 8
39027: PPUSH
39028: LD_VAR 0 5
39032: PUSH
39033: LD_VAR 0 8
39037: ARRAY
39038: PPUSH
39039: CALL_OW 276
39043: GO 39015
39045: POP
39046: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39047: LD_ADDR_VAR 0 18
39051: PUSH
39052: LD_VAR 0 15
39056: PPUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: LD_INT 1
39064: PPUSH
39065: CALL 38308 0 3
39069: ST_TO_ADDR
// InitHc ;
39070: CALL_OW 19
// InitUc ;
39074: CALL_OW 18
// uc_side := side ;
39078: LD_ADDR_OWVAR 20
39082: PUSH
39083: LD_VAR 0 16
39087: ST_TO_ADDR
// uc_nation := nation ;
39088: LD_ADDR_OWVAR 21
39092: PUSH
39093: LD_VAR 0 17
39097: ST_TO_ADDR
// if buildings then
39098: LD_VAR 0 18
39102: IFFALSE 40424
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39104: LD_ADDR_VAR 0 19
39108: PUSH
39109: LD_VAR 0 18
39113: PPUSH
39114: LD_INT 2
39116: PUSH
39117: LD_INT 30
39119: PUSH
39120: LD_INT 29
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 30
39129: PUSH
39130: LD_INT 30
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: PPUSH
39142: CALL_OW 72
39146: ST_TO_ADDR
// if tmp then
39147: LD_VAR 0 19
39151: IFFALSE 39199
// for i in tmp do
39153: LD_ADDR_VAR 0 8
39157: PUSH
39158: LD_VAR 0 19
39162: PUSH
39163: FOR_IN
39164: IFFALSE 39197
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39166: LD_VAR 0 8
39170: PPUSH
39171: CALL_OW 250
39175: PPUSH
39176: LD_VAR 0 8
39180: PPUSH
39181: CALL_OW 251
39185: PPUSH
39186: LD_VAR 0 16
39190: PPUSH
39191: CALL_OW 441
39195: GO 39163
39197: POP
39198: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39199: LD_VAR 0 18
39203: PPUSH
39204: LD_INT 2
39206: PUSH
39207: LD_INT 30
39209: PUSH
39210: LD_INT 32
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 30
39219: PUSH
39220: LD_INT 33
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: PPUSH
39232: CALL_OW 72
39236: IFFALSE 39324
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39238: LD_ADDR_VAR 0 8
39242: PUSH
39243: LD_VAR 0 18
39247: PPUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 30
39253: PUSH
39254: LD_INT 32
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 30
39263: PUSH
39264: LD_INT 33
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: LIST
39275: PPUSH
39276: CALL_OW 72
39280: PUSH
39281: FOR_IN
39282: IFFALSE 39322
// begin if not GetBWeapon ( i ) then
39284: LD_VAR 0 8
39288: PPUSH
39289: CALL_OW 269
39293: NOT
39294: IFFALSE 39320
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39296: LD_VAR 0 8
39300: PPUSH
39301: LD_VAR 0 8
39305: PPUSH
39306: LD_VAR 0 2
39310: PPUSH
39311: CALL 40570 0 2
39315: PPUSH
39316: CALL_OW 431
// end ;
39320: GO 39281
39322: POP
39323: POP
// end ; for i = 1 to personel do
39324: LD_ADDR_VAR 0 8
39328: PUSH
39329: DOUBLE
39330: LD_INT 1
39332: DEC
39333: ST_TO_ADDR
39334: LD_VAR 0 6
39338: PUSH
39339: FOR_TO
39340: IFFALSE 40404
// begin if i > 4 then
39342: LD_VAR 0 8
39346: PUSH
39347: LD_INT 4
39349: GREATER
39350: IFFALSE 39354
// break ;
39352: GO 40404
// case i of 1 :
39354: LD_VAR 0 8
39358: PUSH
39359: LD_INT 1
39361: DOUBLE
39362: EQUAL
39363: IFTRUE 39367
39365: GO 39447
39367: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39368: LD_ADDR_VAR 0 12
39372: PUSH
39373: LD_VAR 0 18
39377: PPUSH
39378: LD_INT 22
39380: PUSH
39381: LD_VAR 0 16
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 58
39392: PUSH
39393: EMPTY
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 30
39401: PUSH
39402: LD_INT 32
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 30
39411: PUSH
39412: LD_INT 4
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 30
39421: PUSH
39422: LD_INT 5
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: LIST
39439: PPUSH
39440: CALL_OW 72
39444: ST_TO_ADDR
39445: GO 39669
39447: LD_INT 2
39449: DOUBLE
39450: EQUAL
39451: IFTRUE 39455
39453: GO 39517
39455: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39456: LD_ADDR_VAR 0 12
39460: PUSH
39461: LD_VAR 0 18
39465: PPUSH
39466: LD_INT 22
39468: PUSH
39469: LD_VAR 0 16
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: LD_INT 30
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 30
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: LIST
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PPUSH
39510: CALL_OW 72
39514: ST_TO_ADDR
39515: GO 39669
39517: LD_INT 3
39519: DOUBLE
39520: EQUAL
39521: IFTRUE 39525
39523: GO 39587
39525: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39526: LD_ADDR_VAR 0 12
39530: PUSH
39531: LD_VAR 0 18
39535: PPUSH
39536: LD_INT 22
39538: PUSH
39539: LD_VAR 0 16
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: LD_INT 30
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 30
39563: PUSH
39564: LD_INT 3
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PPUSH
39580: CALL_OW 72
39584: ST_TO_ADDR
39585: GO 39669
39587: LD_INT 4
39589: DOUBLE
39590: EQUAL
39591: IFTRUE 39595
39593: GO 39668
39595: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39596: LD_ADDR_VAR 0 12
39600: PUSH
39601: LD_VAR 0 18
39605: PPUSH
39606: LD_INT 22
39608: PUSH
39609: LD_VAR 0 16
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: LD_INT 30
39623: PUSH
39624: LD_INT 6
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 30
39633: PUSH
39634: LD_INT 7
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 30
39643: PUSH
39644: LD_INT 8
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PPUSH
39661: CALL_OW 72
39665: ST_TO_ADDR
39666: GO 39669
39668: POP
// if i = 1 then
39669: LD_VAR 0 8
39673: PUSH
39674: LD_INT 1
39676: EQUAL
39677: IFFALSE 39788
// begin tmp := [ ] ;
39679: LD_ADDR_VAR 0 19
39683: PUSH
39684: EMPTY
39685: ST_TO_ADDR
// for j in f do
39686: LD_ADDR_VAR 0 9
39690: PUSH
39691: LD_VAR 0 12
39695: PUSH
39696: FOR_IN
39697: IFFALSE 39770
// if GetBType ( j ) = b_bunker then
39699: LD_VAR 0 9
39703: PPUSH
39704: CALL_OW 266
39708: PUSH
39709: LD_INT 32
39711: EQUAL
39712: IFFALSE 39739
// tmp := Insert ( tmp , 1 , j ) else
39714: LD_ADDR_VAR 0 19
39718: PUSH
39719: LD_VAR 0 19
39723: PPUSH
39724: LD_INT 1
39726: PPUSH
39727: LD_VAR 0 9
39731: PPUSH
39732: CALL_OW 2
39736: ST_TO_ADDR
39737: GO 39768
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39739: LD_ADDR_VAR 0 19
39743: PUSH
39744: LD_VAR 0 19
39748: PPUSH
39749: LD_VAR 0 19
39753: PUSH
39754: LD_INT 1
39756: PLUS
39757: PPUSH
39758: LD_VAR 0 9
39762: PPUSH
39763: CALL_OW 2
39767: ST_TO_ADDR
39768: GO 39696
39770: POP
39771: POP
// if tmp then
39772: LD_VAR 0 19
39776: IFFALSE 39788
// f := tmp ;
39778: LD_ADDR_VAR 0 12
39782: PUSH
39783: LD_VAR 0 19
39787: ST_TO_ADDR
// end ; x := personel [ i ] ;
39788: LD_ADDR_VAR 0 13
39792: PUSH
39793: LD_VAR 0 6
39797: PUSH
39798: LD_VAR 0 8
39802: ARRAY
39803: ST_TO_ADDR
// if x = - 1 then
39804: LD_VAR 0 13
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: EQUAL
39813: IFFALSE 40022
// begin for j in f do
39815: LD_ADDR_VAR 0 9
39819: PUSH
39820: LD_VAR 0 12
39824: PUSH
39825: FOR_IN
39826: IFFALSE 40018
// repeat InitHc ;
39828: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39832: LD_VAR 0 9
39836: PPUSH
39837: CALL_OW 266
39841: PUSH
39842: LD_INT 5
39844: EQUAL
39845: IFFALSE 39915
// begin if UnitsInside ( j ) < 3 then
39847: LD_VAR 0 9
39851: PPUSH
39852: CALL_OW 313
39856: PUSH
39857: LD_INT 3
39859: LESS
39860: IFFALSE 39896
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39862: LD_INT 0
39864: PPUSH
39865: LD_INT 5
39867: PUSH
39868: LD_INT 8
39870: PUSH
39871: LD_INT 9
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: LIST
39878: PUSH
39879: LD_VAR 0 17
39883: ARRAY
39884: PPUSH
39885: LD_VAR 0 4
39889: PPUSH
39890: CALL_OW 380
39894: GO 39913
// PrepareHuman ( false , i , skill ) ;
39896: LD_INT 0
39898: PPUSH
39899: LD_VAR 0 8
39903: PPUSH
39904: LD_VAR 0 4
39908: PPUSH
39909: CALL_OW 380
// end else
39913: GO 39932
// PrepareHuman ( false , i , skill ) ;
39915: LD_INT 0
39917: PPUSH
39918: LD_VAR 0 8
39922: PPUSH
39923: LD_VAR 0 4
39927: PPUSH
39928: CALL_OW 380
// un := CreateHuman ;
39932: LD_ADDR_VAR 0 14
39936: PUSH
39937: CALL_OW 44
39941: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39942: LD_ADDR_VAR 0 7
39946: PUSH
39947: LD_VAR 0 7
39951: PPUSH
39952: LD_INT 1
39954: PPUSH
39955: LD_VAR 0 14
39959: PPUSH
39960: CALL_OW 2
39964: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39965: LD_VAR 0 14
39969: PPUSH
39970: LD_VAR 0 9
39974: PPUSH
39975: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39979: LD_VAR 0 9
39983: PPUSH
39984: CALL_OW 313
39988: PUSH
39989: LD_INT 6
39991: EQUAL
39992: PUSH
39993: LD_VAR 0 9
39997: PPUSH
39998: CALL_OW 266
40002: PUSH
40003: LD_INT 32
40005: PUSH
40006: LD_INT 31
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: IN
40013: OR
40014: IFFALSE 39828
40016: GO 39825
40018: POP
40019: POP
// end else
40020: GO 40402
// for j = 1 to x do
40022: LD_ADDR_VAR 0 9
40026: PUSH
40027: DOUBLE
40028: LD_INT 1
40030: DEC
40031: ST_TO_ADDR
40032: LD_VAR 0 13
40036: PUSH
40037: FOR_TO
40038: IFFALSE 40400
// begin InitHc ;
40040: CALL_OW 19
// if not f then
40044: LD_VAR 0 12
40048: NOT
40049: IFFALSE 40138
// begin PrepareHuman ( false , i , skill ) ;
40051: LD_INT 0
40053: PPUSH
40054: LD_VAR 0 8
40058: PPUSH
40059: LD_VAR 0 4
40063: PPUSH
40064: CALL_OW 380
// un := CreateHuman ;
40068: LD_ADDR_VAR 0 14
40072: PUSH
40073: CALL_OW 44
40077: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40078: LD_ADDR_VAR 0 7
40082: PUSH
40083: LD_VAR 0 7
40087: PPUSH
40088: LD_INT 1
40090: PPUSH
40091: LD_VAR 0 14
40095: PPUSH
40096: CALL_OW 2
40100: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40101: LD_VAR 0 14
40105: PPUSH
40106: LD_VAR 0 1
40110: PPUSH
40111: CALL_OW 250
40115: PPUSH
40116: LD_VAR 0 1
40120: PPUSH
40121: CALL_OW 251
40125: PPUSH
40126: LD_INT 10
40128: PPUSH
40129: LD_INT 0
40131: PPUSH
40132: CALL_OW 50
// continue ;
40136: GO 40037
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40138: LD_VAR 0 12
40142: PUSH
40143: LD_INT 1
40145: ARRAY
40146: PPUSH
40147: CALL_OW 313
40151: PUSH
40152: LD_VAR 0 12
40156: PUSH
40157: LD_INT 1
40159: ARRAY
40160: PPUSH
40161: CALL_OW 266
40165: PUSH
40166: LD_INT 32
40168: PUSH
40169: LD_INT 31
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: IN
40176: AND
40177: PUSH
40178: LD_VAR 0 12
40182: PUSH
40183: LD_INT 1
40185: ARRAY
40186: PPUSH
40187: CALL_OW 313
40191: PUSH
40192: LD_INT 6
40194: EQUAL
40195: OR
40196: IFFALSE 40216
// f := Delete ( f , 1 ) ;
40198: LD_ADDR_VAR 0 12
40202: PUSH
40203: LD_VAR 0 12
40207: PPUSH
40208: LD_INT 1
40210: PPUSH
40211: CALL_OW 3
40215: ST_TO_ADDR
// if not f then
40216: LD_VAR 0 12
40220: NOT
40221: IFFALSE 40239
// begin x := x + 2 ;
40223: LD_ADDR_VAR 0 13
40227: PUSH
40228: LD_VAR 0 13
40232: PUSH
40233: LD_INT 2
40235: PLUS
40236: ST_TO_ADDR
// continue ;
40237: GO 40037
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40239: LD_VAR 0 12
40243: PUSH
40244: LD_INT 1
40246: ARRAY
40247: PPUSH
40248: CALL_OW 266
40252: PUSH
40253: LD_INT 5
40255: EQUAL
40256: IFFALSE 40330
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40258: LD_VAR 0 12
40262: PUSH
40263: LD_INT 1
40265: ARRAY
40266: PPUSH
40267: CALL_OW 313
40271: PUSH
40272: LD_INT 3
40274: LESS
40275: IFFALSE 40311
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40277: LD_INT 0
40279: PPUSH
40280: LD_INT 5
40282: PUSH
40283: LD_INT 8
40285: PUSH
40286: LD_INT 9
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: PUSH
40294: LD_VAR 0 17
40298: ARRAY
40299: PPUSH
40300: LD_VAR 0 4
40304: PPUSH
40305: CALL_OW 380
40309: GO 40328
// PrepareHuman ( false , i , skill ) ;
40311: LD_INT 0
40313: PPUSH
40314: LD_VAR 0 8
40318: PPUSH
40319: LD_VAR 0 4
40323: PPUSH
40324: CALL_OW 380
// end else
40328: GO 40347
// PrepareHuman ( false , i , skill ) ;
40330: LD_INT 0
40332: PPUSH
40333: LD_VAR 0 8
40337: PPUSH
40338: LD_VAR 0 4
40342: PPUSH
40343: CALL_OW 380
// un := CreateHuman ;
40347: LD_ADDR_VAR 0 14
40351: PUSH
40352: CALL_OW 44
40356: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40357: LD_ADDR_VAR 0 7
40361: PUSH
40362: LD_VAR 0 7
40366: PPUSH
40367: LD_INT 1
40369: PPUSH
40370: LD_VAR 0 14
40374: PPUSH
40375: CALL_OW 2
40379: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40380: LD_VAR 0 14
40384: PPUSH
40385: LD_VAR 0 12
40389: PUSH
40390: LD_INT 1
40392: ARRAY
40393: PPUSH
40394: CALL_OW 52
// end ;
40398: GO 40037
40400: POP
40401: POP
// end ;
40402: GO 39339
40404: POP
40405: POP
// result := result ^ buildings ;
40406: LD_ADDR_VAR 0 7
40410: PUSH
40411: LD_VAR 0 7
40415: PUSH
40416: LD_VAR 0 18
40420: ADD
40421: ST_TO_ADDR
// end else
40422: GO 40565
// begin for i = 1 to personel do
40424: LD_ADDR_VAR 0 8
40428: PUSH
40429: DOUBLE
40430: LD_INT 1
40432: DEC
40433: ST_TO_ADDR
40434: LD_VAR 0 6
40438: PUSH
40439: FOR_TO
40440: IFFALSE 40563
// begin if i > 4 then
40442: LD_VAR 0 8
40446: PUSH
40447: LD_INT 4
40449: GREATER
40450: IFFALSE 40454
// break ;
40452: GO 40563
// x := personel [ i ] ;
40454: LD_ADDR_VAR 0 13
40458: PUSH
40459: LD_VAR 0 6
40463: PUSH
40464: LD_VAR 0 8
40468: ARRAY
40469: ST_TO_ADDR
// if x = - 1 then
40470: LD_VAR 0 13
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: EQUAL
40479: IFFALSE 40483
// continue ;
40481: GO 40439
// PrepareHuman ( false , i , skill ) ;
40483: LD_INT 0
40485: PPUSH
40486: LD_VAR 0 8
40490: PPUSH
40491: LD_VAR 0 4
40495: PPUSH
40496: CALL_OW 380
// un := CreateHuman ;
40500: LD_ADDR_VAR 0 14
40504: PUSH
40505: CALL_OW 44
40509: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40510: LD_VAR 0 14
40514: PPUSH
40515: LD_VAR 0 1
40519: PPUSH
40520: CALL_OW 250
40524: PPUSH
40525: LD_VAR 0 1
40529: PPUSH
40530: CALL_OW 251
40534: PPUSH
40535: LD_INT 10
40537: PPUSH
40538: LD_INT 0
40540: PPUSH
40541: CALL_OW 50
// result := result ^ un ;
40545: LD_ADDR_VAR 0 7
40549: PUSH
40550: LD_VAR 0 7
40554: PUSH
40555: LD_VAR 0 14
40559: ADD
40560: ST_TO_ADDR
// end ;
40561: GO 40439
40563: POP
40564: POP
// end ; end ;
40565: LD_VAR 0 7
40569: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40570: LD_INT 0
40572: PPUSH
40573: PPUSH
40574: PPUSH
40575: PPUSH
40576: PPUSH
40577: PPUSH
40578: PPUSH
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
// result := false ;
40588: LD_ADDR_VAR 0 3
40592: PUSH
40593: LD_INT 0
40595: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40596: LD_VAR 0 1
40600: NOT
40601: PUSH
40602: LD_VAR 0 1
40606: PPUSH
40607: CALL_OW 266
40611: PUSH
40612: LD_INT 32
40614: PUSH
40615: LD_INT 33
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: IN
40622: NOT
40623: OR
40624: IFFALSE 40628
// exit ;
40626: GO 41737
// nat := GetNation ( tower ) ;
40628: LD_ADDR_VAR 0 12
40632: PUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 248
40642: ST_TO_ADDR
// side := GetSide ( tower ) ;
40643: LD_ADDR_VAR 0 16
40647: PUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 255
40657: ST_TO_ADDR
// x := GetX ( tower ) ;
40658: LD_ADDR_VAR 0 10
40662: PUSH
40663: LD_VAR 0 1
40667: PPUSH
40668: CALL_OW 250
40672: ST_TO_ADDR
// y := GetY ( tower ) ;
40673: LD_ADDR_VAR 0 11
40677: PUSH
40678: LD_VAR 0 1
40682: PPUSH
40683: CALL_OW 251
40687: ST_TO_ADDR
// if not x or not y then
40688: LD_VAR 0 10
40692: NOT
40693: PUSH
40694: LD_VAR 0 11
40698: NOT
40699: OR
40700: IFFALSE 40704
// exit ;
40702: GO 41737
// weapon := 0 ;
40704: LD_ADDR_VAR 0 18
40708: PUSH
40709: LD_INT 0
40711: ST_TO_ADDR
// fac_list := [ ] ;
40712: LD_ADDR_VAR 0 17
40716: PUSH
40717: EMPTY
40718: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40719: LD_ADDR_VAR 0 6
40723: PUSH
40724: LD_VAR 0 1
40728: PPUSH
40729: CALL_OW 274
40733: PPUSH
40734: LD_VAR 0 2
40738: PPUSH
40739: LD_INT 0
40741: PPUSH
40742: CALL 38308 0 3
40746: PPUSH
40747: LD_INT 30
40749: PUSH
40750: LD_INT 3
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PPUSH
40757: CALL_OW 72
40761: ST_TO_ADDR
// if not factories then
40762: LD_VAR 0 6
40766: NOT
40767: IFFALSE 40771
// exit ;
40769: GO 41737
// for i in factories do
40771: LD_ADDR_VAR 0 8
40775: PUSH
40776: LD_VAR 0 6
40780: PUSH
40781: FOR_IN
40782: IFFALSE 40807
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40784: LD_ADDR_VAR 0 17
40788: PUSH
40789: LD_VAR 0 17
40793: PUSH
40794: LD_VAR 0 8
40798: PPUSH
40799: CALL_OW 478
40803: UNION
40804: ST_TO_ADDR
40805: GO 40781
40807: POP
40808: POP
// if not fac_list then
40809: LD_VAR 0 17
40813: NOT
40814: IFFALSE 40818
// exit ;
40816: GO 41737
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40818: LD_ADDR_VAR 0 5
40822: PUSH
40823: LD_INT 4
40825: PUSH
40826: LD_INT 5
40828: PUSH
40829: LD_INT 9
40831: PUSH
40832: LD_INT 10
40834: PUSH
40835: LD_INT 6
40837: PUSH
40838: LD_INT 7
40840: PUSH
40841: LD_INT 11
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 27
40855: PUSH
40856: LD_INT 28
40858: PUSH
40859: LD_INT 26
40861: PUSH
40862: LD_INT 30
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 43
40873: PUSH
40874: LD_INT 44
40876: PUSH
40877: LD_INT 46
40879: PUSH
40880: LD_INT 45
40882: PUSH
40883: LD_INT 47
40885: PUSH
40886: LD_INT 49
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: PUSH
40902: LD_VAR 0 12
40906: ARRAY
40907: ST_TO_ADDR
// list := list isect fac_list ;
40908: LD_ADDR_VAR 0 5
40912: PUSH
40913: LD_VAR 0 5
40917: PUSH
40918: LD_VAR 0 17
40922: ISECT
40923: ST_TO_ADDR
// if not list then
40924: LD_VAR 0 5
40928: NOT
40929: IFFALSE 40933
// exit ;
40931: GO 41737
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40933: LD_VAR 0 12
40937: PUSH
40938: LD_INT 3
40940: EQUAL
40941: PUSH
40942: LD_INT 49
40944: PUSH
40945: LD_VAR 0 5
40949: IN
40950: AND
40951: PUSH
40952: LD_INT 31
40954: PPUSH
40955: LD_VAR 0 16
40959: PPUSH
40960: CALL_OW 321
40964: PUSH
40965: LD_INT 2
40967: EQUAL
40968: AND
40969: IFFALSE 41029
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40971: LD_INT 22
40973: PUSH
40974: LD_VAR 0 16
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 35
40985: PUSH
40986: LD_INT 49
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 91
40995: PUSH
40996: LD_VAR 0 1
41000: PUSH
41001: LD_INT 10
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: PPUSH
41014: CALL_OW 69
41018: NOT
41019: IFFALSE 41029
// weapon := ru_time_lapser ;
41021: LD_ADDR_VAR 0 18
41025: PUSH
41026: LD_INT 49
41028: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41029: LD_VAR 0 12
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: IN
41044: PUSH
41045: LD_INT 11
41047: PUSH
41048: LD_VAR 0 5
41052: IN
41053: PUSH
41054: LD_INT 30
41056: PUSH
41057: LD_VAR 0 5
41061: IN
41062: OR
41063: AND
41064: PUSH
41065: LD_INT 6
41067: PPUSH
41068: LD_VAR 0 16
41072: PPUSH
41073: CALL_OW 321
41077: PUSH
41078: LD_INT 2
41080: EQUAL
41081: AND
41082: IFFALSE 41247
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41084: LD_INT 22
41086: PUSH
41087: LD_VAR 0 16
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 35
41101: PUSH
41102: LD_INT 11
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 35
41111: PUSH
41112: LD_INT 30
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 91
41126: PUSH
41127: LD_VAR 0 1
41131: PUSH
41132: LD_INT 18
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: LIST
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: PPUSH
41145: CALL_OW 69
41149: NOT
41150: PUSH
41151: LD_INT 22
41153: PUSH
41154: LD_VAR 0 16
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: LD_INT 30
41168: PUSH
41169: LD_INT 32
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 30
41178: PUSH
41179: LD_INT 33
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 91
41193: PUSH
41194: LD_VAR 0 1
41198: PUSH
41199: LD_INT 12
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: LIST
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: PPUSH
41215: CALL_OW 69
41219: PUSH
41220: LD_INT 2
41222: GREATER
41223: AND
41224: IFFALSE 41247
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41226: LD_ADDR_VAR 0 18
41230: PUSH
41231: LD_INT 11
41233: PUSH
41234: LD_INT 30
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_VAR 0 12
41245: ARRAY
41246: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41247: LD_VAR 0 18
41251: NOT
41252: PUSH
41253: LD_INT 40
41255: PPUSH
41256: LD_VAR 0 16
41260: PPUSH
41261: CALL_OW 321
41265: PUSH
41266: LD_INT 2
41268: EQUAL
41269: AND
41270: PUSH
41271: LD_INT 7
41273: PUSH
41274: LD_VAR 0 5
41278: IN
41279: PUSH
41280: LD_INT 28
41282: PUSH
41283: LD_VAR 0 5
41287: IN
41288: OR
41289: PUSH
41290: LD_INT 45
41292: PUSH
41293: LD_VAR 0 5
41297: IN
41298: OR
41299: AND
41300: IFFALSE 41554
// begin hex := GetHexInfo ( x , y ) ;
41302: LD_ADDR_VAR 0 4
41306: PUSH
41307: LD_VAR 0 10
41311: PPUSH
41312: LD_VAR 0 11
41316: PPUSH
41317: CALL_OW 546
41321: ST_TO_ADDR
// if hex [ 1 ] then
41322: LD_VAR 0 4
41326: PUSH
41327: LD_INT 1
41329: ARRAY
41330: IFFALSE 41334
// exit ;
41332: GO 41737
// height := hex [ 2 ] ;
41334: LD_ADDR_VAR 0 15
41338: PUSH
41339: LD_VAR 0 4
41343: PUSH
41344: LD_INT 2
41346: ARRAY
41347: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41348: LD_ADDR_VAR 0 14
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: LD_INT 3
41361: PUSH
41362: LD_INT 5
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: ST_TO_ADDR
// for i in tmp do
41371: LD_ADDR_VAR 0 8
41375: PUSH
41376: LD_VAR 0 14
41380: PUSH
41381: FOR_IN
41382: IFFALSE 41552
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41384: LD_ADDR_VAR 0 9
41388: PUSH
41389: LD_VAR 0 10
41393: PPUSH
41394: LD_VAR 0 8
41398: PPUSH
41399: LD_INT 5
41401: PPUSH
41402: CALL_OW 272
41406: PUSH
41407: LD_VAR 0 11
41411: PPUSH
41412: LD_VAR 0 8
41416: PPUSH
41417: LD_INT 5
41419: PPUSH
41420: CALL_OW 273
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41429: LD_VAR 0 9
41433: PUSH
41434: LD_INT 1
41436: ARRAY
41437: PPUSH
41438: LD_VAR 0 9
41442: PUSH
41443: LD_INT 2
41445: ARRAY
41446: PPUSH
41447: CALL_OW 488
41451: IFFALSE 41550
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41453: LD_ADDR_VAR 0 4
41457: PUSH
41458: LD_VAR 0 9
41462: PUSH
41463: LD_INT 1
41465: ARRAY
41466: PPUSH
41467: LD_VAR 0 9
41471: PUSH
41472: LD_INT 2
41474: ARRAY
41475: PPUSH
41476: CALL_OW 546
41480: ST_TO_ADDR
// if hex [ 1 ] then
41481: LD_VAR 0 4
41485: PUSH
41486: LD_INT 1
41488: ARRAY
41489: IFFALSE 41493
// continue ;
41491: GO 41381
// h := hex [ 2 ] ;
41493: LD_ADDR_VAR 0 13
41497: PUSH
41498: LD_VAR 0 4
41502: PUSH
41503: LD_INT 2
41505: ARRAY
41506: ST_TO_ADDR
// if h + 7 < height then
41507: LD_VAR 0 13
41511: PUSH
41512: LD_INT 7
41514: PLUS
41515: PUSH
41516: LD_VAR 0 15
41520: LESS
41521: IFFALSE 41550
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41523: LD_ADDR_VAR 0 18
41527: PUSH
41528: LD_INT 7
41530: PUSH
41531: LD_INT 28
41533: PUSH
41534: LD_INT 45
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: PUSH
41542: LD_VAR 0 12
41546: ARRAY
41547: ST_TO_ADDR
// break ;
41548: GO 41552
// end ; end ; end ;
41550: GO 41381
41552: POP
41553: POP
// end ; if not weapon then
41554: LD_VAR 0 18
41558: NOT
41559: IFFALSE 41619
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41561: LD_ADDR_VAR 0 5
41565: PUSH
41566: LD_VAR 0 5
41570: PUSH
41571: LD_INT 11
41573: PUSH
41574: LD_INT 30
41576: PUSH
41577: LD_INT 49
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: DIFF
41585: ST_TO_ADDR
// if not list then
41586: LD_VAR 0 5
41590: NOT
41591: IFFALSE 41595
// exit ;
41593: GO 41737
// weapon := list [ rand ( 1 , list ) ] ;
41595: LD_ADDR_VAR 0 18
41599: PUSH
41600: LD_VAR 0 5
41604: PUSH
41605: LD_INT 1
41607: PPUSH
41608: LD_VAR 0 5
41612: PPUSH
41613: CALL_OW 12
41617: ARRAY
41618: ST_TO_ADDR
// end ; if weapon then
41619: LD_VAR 0 18
41623: IFFALSE 41737
// begin tmp := CostOfWeapon ( weapon ) ;
41625: LD_ADDR_VAR 0 14
41629: PUSH
41630: LD_VAR 0 18
41634: PPUSH
41635: CALL_OW 451
41639: ST_TO_ADDR
// j := GetBase ( tower ) ;
41640: LD_ADDR_VAR 0 9
41644: PUSH
41645: LD_VAR 0 1
41649: PPUSH
41650: CALL_OW 274
41654: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41655: LD_VAR 0 9
41659: PPUSH
41660: LD_INT 1
41662: PPUSH
41663: CALL_OW 275
41667: PUSH
41668: LD_VAR 0 14
41672: PUSH
41673: LD_INT 1
41675: ARRAY
41676: GREATEREQUAL
41677: PUSH
41678: LD_VAR 0 9
41682: PPUSH
41683: LD_INT 2
41685: PPUSH
41686: CALL_OW 275
41690: PUSH
41691: LD_VAR 0 14
41695: PUSH
41696: LD_INT 2
41698: ARRAY
41699: GREATEREQUAL
41700: AND
41701: PUSH
41702: LD_VAR 0 9
41706: PPUSH
41707: LD_INT 3
41709: PPUSH
41710: CALL_OW 275
41714: PUSH
41715: LD_VAR 0 14
41719: PUSH
41720: LD_INT 3
41722: ARRAY
41723: GREATEREQUAL
41724: AND
41725: IFFALSE 41737
// result := weapon ;
41727: LD_ADDR_VAR 0 3
41731: PUSH
41732: LD_VAR 0 18
41736: ST_TO_ADDR
// end ; end ;
41737: LD_VAR 0 3
41741: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41742: LD_INT 0
41744: PPUSH
41745: PPUSH
// result := true ;
41746: LD_ADDR_VAR 0 3
41750: PUSH
41751: LD_INT 1
41753: ST_TO_ADDR
// if array1 = array2 then
41754: LD_VAR 0 1
41758: PUSH
41759: LD_VAR 0 2
41763: EQUAL
41764: IFFALSE 41824
// begin for i = 1 to array1 do
41766: LD_ADDR_VAR 0 4
41770: PUSH
41771: DOUBLE
41772: LD_INT 1
41774: DEC
41775: ST_TO_ADDR
41776: LD_VAR 0 1
41780: PUSH
41781: FOR_TO
41782: IFFALSE 41820
// if array1 [ i ] <> array2 [ i ] then
41784: LD_VAR 0 1
41788: PUSH
41789: LD_VAR 0 4
41793: ARRAY
41794: PUSH
41795: LD_VAR 0 2
41799: PUSH
41800: LD_VAR 0 4
41804: ARRAY
41805: NONEQUAL
41806: IFFALSE 41818
// begin result := false ;
41808: LD_ADDR_VAR 0 3
41812: PUSH
41813: LD_INT 0
41815: ST_TO_ADDR
// break ;
41816: GO 41820
// end ;
41818: GO 41781
41820: POP
41821: POP
// end else
41822: GO 41832
// result := false ;
41824: LD_ADDR_VAR 0 3
41828: PUSH
41829: LD_INT 0
41831: ST_TO_ADDR
// end ;
41832: LD_VAR 0 3
41836: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41837: LD_INT 0
41839: PPUSH
41840: PPUSH
// if not array1 or not array2 then
41841: LD_VAR 0 1
41845: NOT
41846: PUSH
41847: LD_VAR 0 2
41851: NOT
41852: OR
41853: IFFALSE 41857
// exit ;
41855: GO 41921
// result := true ;
41857: LD_ADDR_VAR 0 3
41861: PUSH
41862: LD_INT 1
41864: ST_TO_ADDR
// for i = 1 to array1 do
41865: LD_ADDR_VAR 0 4
41869: PUSH
41870: DOUBLE
41871: LD_INT 1
41873: DEC
41874: ST_TO_ADDR
41875: LD_VAR 0 1
41879: PUSH
41880: FOR_TO
41881: IFFALSE 41919
// if array1 [ i ] <> array2 [ i ] then
41883: LD_VAR 0 1
41887: PUSH
41888: LD_VAR 0 4
41892: ARRAY
41893: PUSH
41894: LD_VAR 0 2
41898: PUSH
41899: LD_VAR 0 4
41903: ARRAY
41904: NONEQUAL
41905: IFFALSE 41917
// begin result := false ;
41907: LD_ADDR_VAR 0 3
41911: PUSH
41912: LD_INT 0
41914: ST_TO_ADDR
// break ;
41915: GO 41919
// end ;
41917: GO 41880
41919: POP
41920: POP
// end ;
41921: LD_VAR 0 3
41925: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41926: LD_INT 0
41928: PPUSH
41929: PPUSH
41930: PPUSH
// pom := GetBase ( fac ) ;
41931: LD_ADDR_VAR 0 5
41935: PUSH
41936: LD_VAR 0 1
41940: PPUSH
41941: CALL_OW 274
41945: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41946: LD_ADDR_VAR 0 4
41950: PUSH
41951: LD_VAR 0 2
41955: PUSH
41956: LD_INT 1
41958: ARRAY
41959: PPUSH
41960: LD_VAR 0 2
41964: PUSH
41965: LD_INT 2
41967: ARRAY
41968: PPUSH
41969: LD_VAR 0 2
41973: PUSH
41974: LD_INT 3
41976: ARRAY
41977: PPUSH
41978: LD_VAR 0 2
41982: PUSH
41983: LD_INT 4
41985: ARRAY
41986: PPUSH
41987: CALL_OW 449
41991: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41992: LD_ADDR_VAR 0 3
41996: PUSH
41997: LD_VAR 0 5
42001: PPUSH
42002: LD_INT 1
42004: PPUSH
42005: CALL_OW 275
42009: PUSH
42010: LD_VAR 0 4
42014: PUSH
42015: LD_INT 1
42017: ARRAY
42018: GREATEREQUAL
42019: PUSH
42020: LD_VAR 0 5
42024: PPUSH
42025: LD_INT 2
42027: PPUSH
42028: CALL_OW 275
42032: PUSH
42033: LD_VAR 0 4
42037: PUSH
42038: LD_INT 2
42040: ARRAY
42041: GREATEREQUAL
42042: AND
42043: PUSH
42044: LD_VAR 0 5
42048: PPUSH
42049: LD_INT 3
42051: PPUSH
42052: CALL_OW 275
42056: PUSH
42057: LD_VAR 0 4
42061: PUSH
42062: LD_INT 3
42064: ARRAY
42065: GREATEREQUAL
42066: AND
42067: ST_TO_ADDR
// end ;
42068: LD_VAR 0 3
42072: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42073: LD_INT 0
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
// pom := GetBase ( building ) ;
42079: LD_ADDR_VAR 0 3
42083: PUSH
42084: LD_VAR 0 1
42088: PPUSH
42089: CALL_OW 274
42093: ST_TO_ADDR
// if not pom then
42094: LD_VAR 0 3
42098: NOT
42099: IFFALSE 42103
// exit ;
42101: GO 42273
// btype := GetBType ( building ) ;
42103: LD_ADDR_VAR 0 5
42107: PUSH
42108: LD_VAR 0 1
42112: PPUSH
42113: CALL_OW 266
42117: ST_TO_ADDR
// if btype = b_armoury then
42118: LD_VAR 0 5
42122: PUSH
42123: LD_INT 4
42125: EQUAL
42126: IFFALSE 42136
// btype := b_barracks ;
42128: LD_ADDR_VAR 0 5
42132: PUSH
42133: LD_INT 5
42135: ST_TO_ADDR
// if btype = b_depot then
42136: LD_VAR 0 5
42140: PUSH
42141: LD_INT 0
42143: EQUAL
42144: IFFALSE 42154
// btype := b_warehouse ;
42146: LD_ADDR_VAR 0 5
42150: PUSH
42151: LD_INT 1
42153: ST_TO_ADDR
// if btype = b_workshop then
42154: LD_VAR 0 5
42158: PUSH
42159: LD_INT 2
42161: EQUAL
42162: IFFALSE 42172
// btype := b_factory ;
42164: LD_ADDR_VAR 0 5
42168: PUSH
42169: LD_INT 3
42171: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42172: LD_ADDR_VAR 0 4
42176: PUSH
42177: LD_VAR 0 5
42181: PPUSH
42182: LD_VAR 0 1
42186: PPUSH
42187: CALL_OW 248
42191: PPUSH
42192: CALL_OW 450
42196: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42197: LD_ADDR_VAR 0 2
42201: PUSH
42202: LD_VAR 0 3
42206: PPUSH
42207: LD_INT 1
42209: PPUSH
42210: CALL_OW 275
42214: PUSH
42215: LD_VAR 0 4
42219: PUSH
42220: LD_INT 1
42222: ARRAY
42223: GREATEREQUAL
42224: PUSH
42225: LD_VAR 0 3
42229: PPUSH
42230: LD_INT 2
42232: PPUSH
42233: CALL_OW 275
42237: PUSH
42238: LD_VAR 0 4
42242: PUSH
42243: LD_INT 2
42245: ARRAY
42246: GREATEREQUAL
42247: AND
42248: PUSH
42249: LD_VAR 0 3
42253: PPUSH
42254: LD_INT 3
42256: PPUSH
42257: CALL_OW 275
42261: PUSH
42262: LD_VAR 0 4
42266: PUSH
42267: LD_INT 3
42269: ARRAY
42270: GREATEREQUAL
42271: AND
42272: ST_TO_ADDR
// end ;
42273: LD_VAR 0 2
42277: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42278: LD_INT 0
42280: PPUSH
42281: PPUSH
42282: PPUSH
// pom := GetBase ( building ) ;
42283: LD_ADDR_VAR 0 4
42287: PUSH
42288: LD_VAR 0 1
42292: PPUSH
42293: CALL_OW 274
42297: ST_TO_ADDR
// if not pom then
42298: LD_VAR 0 4
42302: NOT
42303: IFFALSE 42307
// exit ;
42305: GO 42408
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42307: LD_ADDR_VAR 0 5
42311: PUSH
42312: LD_VAR 0 2
42316: PPUSH
42317: LD_VAR 0 1
42321: PPUSH
42322: CALL_OW 248
42326: PPUSH
42327: CALL_OW 450
42331: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42332: LD_ADDR_VAR 0 3
42336: PUSH
42337: LD_VAR 0 4
42341: PPUSH
42342: LD_INT 1
42344: PPUSH
42345: CALL_OW 275
42349: PUSH
42350: LD_VAR 0 5
42354: PUSH
42355: LD_INT 1
42357: ARRAY
42358: GREATEREQUAL
42359: PUSH
42360: LD_VAR 0 4
42364: PPUSH
42365: LD_INT 2
42367: PPUSH
42368: CALL_OW 275
42372: PUSH
42373: LD_VAR 0 5
42377: PUSH
42378: LD_INT 2
42380: ARRAY
42381: GREATEREQUAL
42382: AND
42383: PUSH
42384: LD_VAR 0 4
42388: PPUSH
42389: LD_INT 3
42391: PPUSH
42392: CALL_OW 275
42396: PUSH
42397: LD_VAR 0 5
42401: PUSH
42402: LD_INT 3
42404: ARRAY
42405: GREATEREQUAL
42406: AND
42407: ST_TO_ADDR
// end ;
42408: LD_VAR 0 3
42412: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42413: LD_INT 0
42415: PPUSH
42416: PPUSH
42417: PPUSH
42418: PPUSH
42419: PPUSH
42420: PPUSH
42421: PPUSH
42422: PPUSH
42423: PPUSH
42424: PPUSH
42425: PPUSH
// result := false ;
42426: LD_ADDR_VAR 0 8
42430: PUSH
42431: LD_INT 0
42433: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42434: LD_VAR 0 5
42438: NOT
42439: PUSH
42440: LD_VAR 0 1
42444: NOT
42445: OR
42446: PUSH
42447: LD_VAR 0 2
42451: NOT
42452: OR
42453: PUSH
42454: LD_VAR 0 3
42458: NOT
42459: OR
42460: IFFALSE 42464
// exit ;
42462: GO 43278
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42464: LD_ADDR_VAR 0 14
42468: PUSH
42469: LD_VAR 0 1
42473: PPUSH
42474: LD_VAR 0 2
42478: PPUSH
42479: LD_VAR 0 3
42483: PPUSH
42484: LD_VAR 0 4
42488: PPUSH
42489: LD_VAR 0 5
42493: PUSH
42494: LD_INT 1
42496: ARRAY
42497: PPUSH
42498: CALL_OW 248
42502: PPUSH
42503: LD_INT 0
42505: PPUSH
42506: CALL 44515 0 6
42510: ST_TO_ADDR
// if not hexes then
42511: LD_VAR 0 14
42515: NOT
42516: IFFALSE 42520
// exit ;
42518: GO 43278
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42520: LD_ADDR_VAR 0 17
42524: PUSH
42525: LD_VAR 0 5
42529: PPUSH
42530: LD_INT 22
42532: PUSH
42533: LD_VAR 0 13
42537: PPUSH
42538: CALL_OW 255
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: LD_INT 30
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 30
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PPUSH
42579: CALL_OW 72
42583: ST_TO_ADDR
// for i = 1 to hexes do
42584: LD_ADDR_VAR 0 9
42588: PUSH
42589: DOUBLE
42590: LD_INT 1
42592: DEC
42593: ST_TO_ADDR
42594: LD_VAR 0 14
42598: PUSH
42599: FOR_TO
42600: IFFALSE 43276
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42602: LD_ADDR_VAR 0 13
42606: PUSH
42607: LD_VAR 0 14
42611: PUSH
42612: LD_VAR 0 9
42616: ARRAY
42617: PUSH
42618: LD_INT 1
42620: ARRAY
42621: PPUSH
42622: LD_VAR 0 14
42626: PUSH
42627: LD_VAR 0 9
42631: ARRAY
42632: PUSH
42633: LD_INT 2
42635: ARRAY
42636: PPUSH
42637: CALL_OW 428
42641: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42642: LD_VAR 0 14
42646: PUSH
42647: LD_VAR 0 9
42651: ARRAY
42652: PUSH
42653: LD_INT 1
42655: ARRAY
42656: PPUSH
42657: LD_VAR 0 14
42661: PUSH
42662: LD_VAR 0 9
42666: ARRAY
42667: PUSH
42668: LD_INT 2
42670: ARRAY
42671: PPUSH
42672: CALL_OW 351
42676: PUSH
42677: LD_VAR 0 14
42681: PUSH
42682: LD_VAR 0 9
42686: ARRAY
42687: PUSH
42688: LD_INT 1
42690: ARRAY
42691: PPUSH
42692: LD_VAR 0 14
42696: PUSH
42697: LD_VAR 0 9
42701: ARRAY
42702: PUSH
42703: LD_INT 2
42705: ARRAY
42706: PPUSH
42707: CALL_OW 488
42711: NOT
42712: OR
42713: PUSH
42714: LD_VAR 0 13
42718: PPUSH
42719: CALL_OW 247
42723: PUSH
42724: LD_INT 3
42726: EQUAL
42727: OR
42728: IFFALSE 42734
// exit ;
42730: POP
42731: POP
42732: GO 43278
// if not tmp then
42734: LD_VAR 0 13
42738: NOT
42739: IFFALSE 42743
// continue ;
42741: GO 42599
// result := true ;
42743: LD_ADDR_VAR 0 8
42747: PUSH
42748: LD_INT 1
42750: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42751: LD_VAR 0 6
42755: PUSH
42756: LD_VAR 0 13
42760: PPUSH
42761: CALL_OW 247
42765: PUSH
42766: LD_INT 2
42768: EQUAL
42769: AND
42770: PUSH
42771: LD_VAR 0 13
42775: PPUSH
42776: CALL_OW 263
42780: PUSH
42781: LD_INT 1
42783: EQUAL
42784: AND
42785: IFFALSE 42949
// begin if IsDrivenBy ( tmp ) then
42787: LD_VAR 0 13
42791: PPUSH
42792: CALL_OW 311
42796: IFFALSE 42800
// continue ;
42798: GO 42599
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42800: LD_VAR 0 6
42804: PPUSH
42805: LD_INT 3
42807: PUSH
42808: LD_INT 60
42810: PUSH
42811: EMPTY
42812: LIST
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 3
42820: PUSH
42821: LD_INT 55
42823: PUSH
42824: EMPTY
42825: LIST
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PPUSH
42835: CALL_OW 72
42839: IFFALSE 42947
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42841: LD_ADDR_VAR 0 18
42845: PUSH
42846: LD_VAR 0 6
42850: PPUSH
42851: LD_INT 3
42853: PUSH
42854: LD_INT 60
42856: PUSH
42857: EMPTY
42858: LIST
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: PUSH
42867: LD_INT 55
42869: PUSH
42870: EMPTY
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PPUSH
42881: CALL_OW 72
42885: PUSH
42886: LD_INT 1
42888: ARRAY
42889: ST_TO_ADDR
// if IsInUnit ( driver ) then
42890: LD_VAR 0 18
42894: PPUSH
42895: CALL_OW 310
42899: IFFALSE 42910
// ComExit ( driver ) ;
42901: LD_VAR 0 18
42905: PPUSH
42906: CALL 67643 0 1
// AddComEnterUnit ( driver , tmp ) ;
42910: LD_VAR 0 18
42914: PPUSH
42915: LD_VAR 0 13
42919: PPUSH
42920: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42924: LD_VAR 0 18
42928: PPUSH
42929: LD_VAR 0 7
42933: PPUSH
42934: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42938: LD_VAR 0 18
42942: PPUSH
42943: CALL_OW 181
// end ; continue ;
42947: GO 42599
// end ; if not cleaners or not tmp in cleaners then
42949: LD_VAR 0 6
42953: NOT
42954: PUSH
42955: LD_VAR 0 13
42959: PUSH
42960: LD_VAR 0 6
42964: IN
42965: NOT
42966: OR
42967: IFFALSE 43274
// begin if dep then
42969: LD_VAR 0 17
42973: IFFALSE 43109
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42975: LD_ADDR_VAR 0 16
42979: PUSH
42980: LD_VAR 0 17
42984: PUSH
42985: LD_INT 1
42987: ARRAY
42988: PPUSH
42989: CALL_OW 250
42993: PPUSH
42994: LD_VAR 0 17
42998: PUSH
42999: LD_INT 1
43001: ARRAY
43002: PPUSH
43003: CALL_OW 254
43007: PPUSH
43008: LD_INT 5
43010: PPUSH
43011: CALL_OW 272
43015: PUSH
43016: LD_VAR 0 17
43020: PUSH
43021: LD_INT 1
43023: ARRAY
43024: PPUSH
43025: CALL_OW 251
43029: PPUSH
43030: LD_VAR 0 17
43034: PUSH
43035: LD_INT 1
43037: ARRAY
43038: PPUSH
43039: CALL_OW 254
43043: PPUSH
43044: LD_INT 5
43046: PPUSH
43047: CALL_OW 273
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43056: LD_VAR 0 16
43060: PUSH
43061: LD_INT 1
43063: ARRAY
43064: PPUSH
43065: LD_VAR 0 16
43069: PUSH
43070: LD_INT 2
43072: ARRAY
43073: PPUSH
43074: CALL_OW 488
43078: IFFALSE 43109
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43080: LD_VAR 0 13
43084: PPUSH
43085: LD_VAR 0 16
43089: PUSH
43090: LD_INT 1
43092: ARRAY
43093: PPUSH
43094: LD_VAR 0 16
43098: PUSH
43099: LD_INT 2
43101: ARRAY
43102: PPUSH
43103: CALL_OW 111
// continue ;
43107: GO 42599
// end ; end ; r := GetDir ( tmp ) ;
43109: LD_ADDR_VAR 0 15
43113: PUSH
43114: LD_VAR 0 13
43118: PPUSH
43119: CALL_OW 254
43123: ST_TO_ADDR
// if r = 5 then
43124: LD_VAR 0 15
43128: PUSH
43129: LD_INT 5
43131: EQUAL
43132: IFFALSE 43142
// r := 0 ;
43134: LD_ADDR_VAR 0 15
43138: PUSH
43139: LD_INT 0
43141: ST_TO_ADDR
// for j = r to 5 do
43142: LD_ADDR_VAR 0 10
43146: PUSH
43147: DOUBLE
43148: LD_VAR 0 15
43152: DEC
43153: ST_TO_ADDR
43154: LD_INT 5
43156: PUSH
43157: FOR_TO
43158: IFFALSE 43272
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43160: LD_ADDR_VAR 0 11
43164: PUSH
43165: LD_VAR 0 13
43169: PPUSH
43170: CALL_OW 250
43174: PPUSH
43175: LD_VAR 0 10
43179: PPUSH
43180: LD_INT 2
43182: PPUSH
43183: CALL_OW 272
43187: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43188: LD_ADDR_VAR 0 12
43192: PUSH
43193: LD_VAR 0 13
43197: PPUSH
43198: CALL_OW 251
43202: PPUSH
43203: LD_VAR 0 10
43207: PPUSH
43208: LD_INT 2
43210: PPUSH
43211: CALL_OW 273
43215: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43216: LD_VAR 0 11
43220: PPUSH
43221: LD_VAR 0 12
43225: PPUSH
43226: CALL_OW 488
43230: PUSH
43231: LD_VAR 0 11
43235: PPUSH
43236: LD_VAR 0 12
43240: PPUSH
43241: CALL_OW 428
43245: NOT
43246: AND
43247: IFFALSE 43270
// begin ComMoveXY ( tmp , _x , _y ) ;
43249: LD_VAR 0 13
43253: PPUSH
43254: LD_VAR 0 11
43258: PPUSH
43259: LD_VAR 0 12
43263: PPUSH
43264: CALL_OW 111
// break ;
43268: GO 43272
// end ; end ;
43270: GO 43157
43272: POP
43273: POP
// end ; end ;
43274: GO 42599
43276: POP
43277: POP
// end ;
43278: LD_VAR 0 8
43282: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43283: LD_INT 0
43285: PPUSH
// result := true ;
43286: LD_ADDR_VAR 0 3
43290: PUSH
43291: LD_INT 1
43293: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43294: LD_VAR 0 2
43298: PUSH
43299: LD_INT 24
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43313
43305: LD_INT 33
43307: DOUBLE
43308: EQUAL
43309: IFTRUE 43313
43311: GO 43338
43313: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43314: LD_ADDR_VAR 0 3
43318: PUSH
43319: LD_INT 32
43321: PPUSH
43322: LD_VAR 0 1
43326: PPUSH
43327: CALL_OW 321
43331: PUSH
43332: LD_INT 2
43334: EQUAL
43335: ST_TO_ADDR
43336: GO 43658
43338: LD_INT 20
43340: DOUBLE
43341: EQUAL
43342: IFTRUE 43346
43344: GO 43371
43346: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43347: LD_ADDR_VAR 0 3
43351: PUSH
43352: LD_INT 6
43354: PPUSH
43355: LD_VAR 0 1
43359: PPUSH
43360: CALL_OW 321
43364: PUSH
43365: LD_INT 2
43367: EQUAL
43368: ST_TO_ADDR
43369: GO 43658
43371: LD_INT 22
43373: DOUBLE
43374: EQUAL
43375: IFTRUE 43385
43377: LD_INT 36
43379: DOUBLE
43380: EQUAL
43381: IFTRUE 43385
43383: GO 43410
43385: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43386: LD_ADDR_VAR 0 3
43390: PUSH
43391: LD_INT 15
43393: PPUSH
43394: LD_VAR 0 1
43398: PPUSH
43399: CALL_OW 321
43403: PUSH
43404: LD_INT 2
43406: EQUAL
43407: ST_TO_ADDR
43408: GO 43658
43410: LD_INT 30
43412: DOUBLE
43413: EQUAL
43414: IFTRUE 43418
43416: GO 43443
43418: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43419: LD_ADDR_VAR 0 3
43423: PUSH
43424: LD_INT 20
43426: PPUSH
43427: LD_VAR 0 1
43431: PPUSH
43432: CALL_OW 321
43436: PUSH
43437: LD_INT 2
43439: EQUAL
43440: ST_TO_ADDR
43441: GO 43658
43443: LD_INT 28
43445: DOUBLE
43446: EQUAL
43447: IFTRUE 43457
43449: LD_INT 21
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43457
43455: GO 43482
43457: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43458: LD_ADDR_VAR 0 3
43462: PUSH
43463: LD_INT 21
43465: PPUSH
43466: LD_VAR 0 1
43470: PPUSH
43471: CALL_OW 321
43475: PUSH
43476: LD_INT 2
43478: EQUAL
43479: ST_TO_ADDR
43480: GO 43658
43482: LD_INT 16
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43490
43488: GO 43517
43490: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_EXP 33
43500: PPUSH
43501: LD_VAR 0 1
43505: PPUSH
43506: CALL_OW 321
43510: PUSH
43511: LD_INT 2
43513: EQUAL
43514: ST_TO_ADDR
43515: GO 43658
43517: LD_INT 19
43519: DOUBLE
43520: EQUAL
43521: IFTRUE 43531
43523: LD_INT 23
43525: DOUBLE
43526: EQUAL
43527: IFTRUE 43531
43529: GO 43558
43531: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43532: LD_ADDR_VAR 0 3
43536: PUSH
43537: LD_EXP 32
43541: PPUSH
43542: LD_VAR 0 1
43546: PPUSH
43547: CALL_OW 321
43551: PUSH
43552: LD_INT 2
43554: EQUAL
43555: ST_TO_ADDR
43556: GO 43658
43558: LD_INT 17
43560: DOUBLE
43561: EQUAL
43562: IFTRUE 43566
43564: GO 43591
43566: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_INT 39
43574: PPUSH
43575: LD_VAR 0 1
43579: PPUSH
43580: CALL_OW 321
43584: PUSH
43585: LD_INT 2
43587: EQUAL
43588: ST_TO_ADDR
43589: GO 43658
43591: LD_INT 18
43593: DOUBLE
43594: EQUAL
43595: IFTRUE 43599
43597: GO 43624
43599: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43600: LD_ADDR_VAR 0 3
43604: PUSH
43605: LD_INT 40
43607: PPUSH
43608: LD_VAR 0 1
43612: PPUSH
43613: CALL_OW 321
43617: PUSH
43618: LD_INT 2
43620: EQUAL
43621: ST_TO_ADDR
43622: GO 43658
43624: LD_INT 27
43626: DOUBLE
43627: EQUAL
43628: IFTRUE 43632
43630: GO 43657
43632: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43633: LD_ADDR_VAR 0 3
43637: PUSH
43638: LD_INT 35
43640: PPUSH
43641: LD_VAR 0 1
43645: PPUSH
43646: CALL_OW 321
43650: PUSH
43651: LD_INT 2
43653: EQUAL
43654: ST_TO_ADDR
43655: GO 43658
43657: POP
// end ;
43658: LD_VAR 0 3
43662: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43663: LD_INT 0
43665: PPUSH
43666: PPUSH
43667: PPUSH
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
43674: PPUSH
43675: PPUSH
// result := false ;
43676: LD_ADDR_VAR 0 6
43680: PUSH
43681: LD_INT 0
43683: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43684: LD_VAR 0 1
43688: NOT
43689: PUSH
43690: LD_VAR 0 1
43694: PPUSH
43695: CALL_OW 266
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: IN
43710: NOT
43711: OR
43712: PUSH
43713: LD_VAR 0 2
43717: NOT
43718: OR
43719: PUSH
43720: LD_VAR 0 5
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: LD_INT 4
43739: PUSH
43740: LD_INT 5
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: IN
43751: NOT
43752: OR
43753: PUSH
43754: LD_VAR 0 3
43758: PPUSH
43759: LD_VAR 0 4
43763: PPUSH
43764: CALL_OW 488
43768: NOT
43769: OR
43770: IFFALSE 43774
// exit ;
43772: GO 44510
// side := GetSide ( depot ) ;
43774: LD_ADDR_VAR 0 9
43778: PUSH
43779: LD_VAR 0 1
43783: PPUSH
43784: CALL_OW 255
43788: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43789: LD_VAR 0 9
43793: PPUSH
43794: LD_VAR 0 2
43798: PPUSH
43799: CALL 43283 0 2
43803: NOT
43804: IFFALSE 43808
// exit ;
43806: GO 44510
// pom := GetBase ( depot ) ;
43808: LD_ADDR_VAR 0 10
43812: PUSH
43813: LD_VAR 0 1
43817: PPUSH
43818: CALL_OW 274
43822: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43823: LD_ADDR_VAR 0 11
43827: PUSH
43828: LD_VAR 0 2
43832: PPUSH
43833: LD_VAR 0 1
43837: PPUSH
43838: CALL_OW 248
43842: PPUSH
43843: CALL_OW 450
43847: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43848: LD_VAR 0 10
43852: PPUSH
43853: LD_INT 1
43855: PPUSH
43856: CALL_OW 275
43860: PUSH
43861: LD_VAR 0 11
43865: PUSH
43866: LD_INT 1
43868: ARRAY
43869: GREATEREQUAL
43870: PUSH
43871: LD_VAR 0 10
43875: PPUSH
43876: LD_INT 2
43878: PPUSH
43879: CALL_OW 275
43883: PUSH
43884: LD_VAR 0 11
43888: PUSH
43889: LD_INT 2
43891: ARRAY
43892: GREATEREQUAL
43893: AND
43894: PUSH
43895: LD_VAR 0 10
43899: PPUSH
43900: LD_INT 3
43902: PPUSH
43903: CALL_OW 275
43907: PUSH
43908: LD_VAR 0 11
43912: PUSH
43913: LD_INT 3
43915: ARRAY
43916: GREATEREQUAL
43917: AND
43918: NOT
43919: IFFALSE 43923
// exit ;
43921: GO 44510
// if GetBType ( depot ) = b_depot then
43923: LD_VAR 0 1
43927: PPUSH
43928: CALL_OW 266
43932: PUSH
43933: LD_INT 0
43935: EQUAL
43936: IFFALSE 43948
// dist := 28 else
43938: LD_ADDR_VAR 0 14
43942: PUSH
43943: LD_INT 28
43945: ST_TO_ADDR
43946: GO 43956
// dist := 36 ;
43948: LD_ADDR_VAR 0 14
43952: PUSH
43953: LD_INT 36
43955: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43956: LD_VAR 0 1
43960: PPUSH
43961: LD_VAR 0 3
43965: PPUSH
43966: LD_VAR 0 4
43970: PPUSH
43971: CALL_OW 297
43975: PUSH
43976: LD_VAR 0 14
43980: GREATER
43981: IFFALSE 43985
// exit ;
43983: GO 44510
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43985: LD_ADDR_VAR 0 12
43989: PUSH
43990: LD_VAR 0 2
43994: PPUSH
43995: LD_VAR 0 3
43999: PPUSH
44000: LD_VAR 0 4
44004: PPUSH
44005: LD_VAR 0 5
44009: PPUSH
44010: LD_VAR 0 1
44014: PPUSH
44015: CALL_OW 248
44019: PPUSH
44020: LD_INT 0
44022: PPUSH
44023: CALL 44515 0 6
44027: ST_TO_ADDR
// if not hexes then
44028: LD_VAR 0 12
44032: NOT
44033: IFFALSE 44037
// exit ;
44035: GO 44510
// hex := GetHexInfo ( x , y ) ;
44037: LD_ADDR_VAR 0 15
44041: PUSH
44042: LD_VAR 0 3
44046: PPUSH
44047: LD_VAR 0 4
44051: PPUSH
44052: CALL_OW 546
44056: ST_TO_ADDR
// if hex [ 1 ] then
44057: LD_VAR 0 15
44061: PUSH
44062: LD_INT 1
44064: ARRAY
44065: IFFALSE 44069
// exit ;
44067: GO 44510
// height := hex [ 2 ] ;
44069: LD_ADDR_VAR 0 13
44073: PUSH
44074: LD_VAR 0 15
44078: PUSH
44079: LD_INT 2
44081: ARRAY
44082: ST_TO_ADDR
// for i = 1 to hexes do
44083: LD_ADDR_VAR 0 7
44087: PUSH
44088: DOUBLE
44089: LD_INT 1
44091: DEC
44092: ST_TO_ADDR
44093: LD_VAR 0 12
44097: PUSH
44098: FOR_TO
44099: IFFALSE 44429
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44101: LD_VAR 0 12
44105: PUSH
44106: LD_VAR 0 7
44110: ARRAY
44111: PUSH
44112: LD_INT 1
44114: ARRAY
44115: PPUSH
44116: LD_VAR 0 12
44120: PUSH
44121: LD_VAR 0 7
44125: ARRAY
44126: PUSH
44127: LD_INT 2
44129: ARRAY
44130: PPUSH
44131: CALL_OW 488
44135: NOT
44136: PUSH
44137: LD_VAR 0 12
44141: PUSH
44142: LD_VAR 0 7
44146: ARRAY
44147: PUSH
44148: LD_INT 1
44150: ARRAY
44151: PPUSH
44152: LD_VAR 0 12
44156: PUSH
44157: LD_VAR 0 7
44161: ARRAY
44162: PUSH
44163: LD_INT 2
44165: ARRAY
44166: PPUSH
44167: CALL_OW 428
44171: PUSH
44172: LD_INT 0
44174: GREATER
44175: OR
44176: PUSH
44177: LD_VAR 0 12
44181: PUSH
44182: LD_VAR 0 7
44186: ARRAY
44187: PUSH
44188: LD_INT 1
44190: ARRAY
44191: PPUSH
44192: LD_VAR 0 12
44196: PUSH
44197: LD_VAR 0 7
44201: ARRAY
44202: PUSH
44203: LD_INT 2
44205: ARRAY
44206: PPUSH
44207: CALL_OW 351
44211: OR
44212: IFFALSE 44218
// exit ;
44214: POP
44215: POP
44216: GO 44510
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44218: LD_ADDR_VAR 0 8
44222: PUSH
44223: LD_VAR 0 12
44227: PUSH
44228: LD_VAR 0 7
44232: ARRAY
44233: PUSH
44234: LD_INT 1
44236: ARRAY
44237: PPUSH
44238: LD_VAR 0 12
44242: PUSH
44243: LD_VAR 0 7
44247: ARRAY
44248: PUSH
44249: LD_INT 2
44251: ARRAY
44252: PPUSH
44253: CALL_OW 546
44257: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44258: LD_VAR 0 8
44262: PUSH
44263: LD_INT 1
44265: ARRAY
44266: PUSH
44267: LD_VAR 0 8
44271: PUSH
44272: LD_INT 2
44274: ARRAY
44275: PUSH
44276: LD_VAR 0 13
44280: PUSH
44281: LD_INT 2
44283: PLUS
44284: GREATER
44285: OR
44286: PUSH
44287: LD_VAR 0 8
44291: PUSH
44292: LD_INT 2
44294: ARRAY
44295: PUSH
44296: LD_VAR 0 13
44300: PUSH
44301: LD_INT 2
44303: MINUS
44304: LESS
44305: OR
44306: PUSH
44307: LD_VAR 0 8
44311: PUSH
44312: LD_INT 3
44314: ARRAY
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: LD_INT 8
44321: PUSH
44322: LD_INT 9
44324: PUSH
44325: LD_INT 10
44327: PUSH
44328: LD_INT 11
44330: PUSH
44331: LD_INT 12
44333: PUSH
44334: LD_INT 13
44336: PUSH
44337: LD_INT 16
44339: PUSH
44340: LD_INT 17
44342: PUSH
44343: LD_INT 18
44345: PUSH
44346: LD_INT 19
44348: PUSH
44349: LD_INT 20
44351: PUSH
44352: LD_INT 21
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: IN
44370: NOT
44371: OR
44372: PUSH
44373: LD_VAR 0 8
44377: PUSH
44378: LD_INT 5
44380: ARRAY
44381: NOT
44382: OR
44383: PUSH
44384: LD_VAR 0 8
44388: PUSH
44389: LD_INT 6
44391: ARRAY
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 7
44401: PUSH
44402: LD_INT 9
44404: PUSH
44405: LD_INT 10
44407: PUSH
44408: LD_INT 11
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: IN
44419: NOT
44420: OR
44421: IFFALSE 44427
// exit ;
44423: POP
44424: POP
44425: GO 44510
// end ;
44427: GO 44098
44429: POP
44430: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44431: LD_VAR 0 9
44435: PPUSH
44436: LD_VAR 0 3
44440: PPUSH
44441: LD_VAR 0 4
44445: PPUSH
44446: LD_INT 20
44448: PPUSH
44449: CALL 36456 0 4
44453: PUSH
44454: LD_INT 4
44456: ARRAY
44457: IFFALSE 44461
// exit ;
44459: GO 44510
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44461: LD_VAR 0 2
44465: PUSH
44466: LD_INT 29
44468: PUSH
44469: LD_INT 30
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: IN
44476: PUSH
44477: LD_VAR 0 3
44481: PPUSH
44482: LD_VAR 0 4
44486: PPUSH
44487: LD_VAR 0 9
44491: PPUSH
44492: CALL_OW 440
44496: NOT
44497: AND
44498: IFFALSE 44502
// exit ;
44500: GO 44510
// result := true ;
44502: LD_ADDR_VAR 0 6
44506: PUSH
44507: LD_INT 1
44509: ST_TO_ADDR
// end ;
44510: LD_VAR 0 6
44514: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44515: LD_INT 0
44517: PPUSH
44518: PPUSH
44519: PPUSH
44520: PPUSH
44521: PPUSH
44522: PPUSH
44523: PPUSH
44524: PPUSH
44525: PPUSH
44526: PPUSH
44527: PPUSH
44528: PPUSH
44529: PPUSH
44530: PPUSH
44531: PPUSH
44532: PPUSH
44533: PPUSH
44534: PPUSH
44535: PPUSH
44536: PPUSH
44537: PPUSH
44538: PPUSH
44539: PPUSH
44540: PPUSH
44541: PPUSH
44542: PPUSH
44543: PPUSH
44544: PPUSH
44545: PPUSH
44546: PPUSH
44547: PPUSH
44548: PPUSH
44549: PPUSH
44550: PPUSH
44551: PPUSH
44552: PPUSH
44553: PPUSH
44554: PPUSH
44555: PPUSH
44556: PPUSH
44557: PPUSH
44558: PPUSH
44559: PPUSH
44560: PPUSH
44561: PPUSH
44562: PPUSH
44563: PPUSH
44564: PPUSH
44565: PPUSH
44566: PPUSH
44567: PPUSH
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
44572: PPUSH
44573: PPUSH
44574: PPUSH
// result = [ ] ;
44575: LD_ADDR_VAR 0 7
44579: PUSH
44580: EMPTY
44581: ST_TO_ADDR
// temp_list = [ ] ;
44582: LD_ADDR_VAR 0 9
44586: PUSH
44587: EMPTY
44588: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44589: LD_VAR 0 4
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 3
44605: PUSH
44606: LD_INT 4
44608: PUSH
44609: LD_INT 5
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: IN
44620: NOT
44621: PUSH
44622: LD_VAR 0 1
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: IN
44637: PUSH
44638: LD_VAR 0 5
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 3
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: LIST
44656: IN
44657: NOT
44658: AND
44659: OR
44660: IFFALSE 44664
// exit ;
44662: GO 63055
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44664: LD_VAR 0 1
44668: PUSH
44669: LD_INT 6
44671: PUSH
44672: LD_INT 7
44674: PUSH
44675: LD_INT 8
44677: PUSH
44678: LD_INT 13
44680: PUSH
44681: LD_INT 12
44683: PUSH
44684: LD_INT 15
44686: PUSH
44687: LD_INT 11
44689: PUSH
44690: LD_INT 14
44692: PUSH
44693: LD_INT 10
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: IN
44707: IFFALSE 44717
// btype = b_lab ;
44709: LD_ADDR_VAR 0 1
44713: PUSH
44714: LD_INT 6
44716: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44717: LD_VAR 0 6
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: IN
44736: NOT
44737: PUSH
44738: LD_VAR 0 1
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 3
44754: PUSH
44755: LD_INT 6
44757: PUSH
44758: LD_INT 36
44760: PUSH
44761: LD_INT 4
44763: PUSH
44764: LD_INT 5
44766: PUSH
44767: LD_INT 31
44769: PUSH
44770: LD_INT 32
44772: PUSH
44773: LD_INT 33
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: IN
44789: NOT
44790: PUSH
44791: LD_VAR 0 6
44795: PUSH
44796: LD_INT 1
44798: EQUAL
44799: AND
44800: OR
44801: PUSH
44802: LD_VAR 0 1
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 3
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: IN
44817: NOT
44818: PUSH
44819: LD_VAR 0 6
44823: PUSH
44824: LD_INT 2
44826: EQUAL
44827: AND
44828: OR
44829: IFFALSE 44839
// mode = 0 ;
44831: LD_ADDR_VAR 0 6
44835: PUSH
44836: LD_INT 0
44838: ST_TO_ADDR
// case mode of 0 :
44839: LD_VAR 0 6
44843: PUSH
44844: LD_INT 0
44846: DOUBLE
44847: EQUAL
44848: IFTRUE 44852
44850: GO 56305
44852: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44853: LD_ADDR_VAR 0 11
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 3
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 3
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45046: LD_ADDR_VAR 0 12
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 3
45203: NEG
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 3
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45242: LD_ADDR_VAR 0 13
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: NEG
45378: PUSH
45379: LD_INT 2
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: LD_INT 3
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 3
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 3
45413: NEG
45414: PUSH
45415: LD_INT 3
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45441: LD_ADDR_VAR 0 14
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 3
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 3
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45637: LD_ADDR_VAR 0 15
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 3
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45830: LD_ADDR_VAR 0 16
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 3
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 3
45987: PUSH
45988: LD_INT 3
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46023: LD_ADDR_VAR 0 17
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 2
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46253: LD_ADDR_VAR 0 18
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: NEG
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46483: LD_ADDR_VAR 0 19
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46713: LD_ADDR_VAR 0 20
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46943: LD_ADDR_VAR 0 21
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47173: LD_ADDR_VAR 0 22
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47403: LD_ADDR_VAR 0 23
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: LD_INT 3
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 3
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47683: LD_ADDR_VAR 0 24
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 3
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47959: LD_ADDR_VAR 0 25
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 3
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: LD_INT 3
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 3
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48233: LD_ADDR_VAR 0 26
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: LD_INT 3
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48509: LD_ADDR_VAR 0 27
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 3
48754: NEG
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48789: LD_ADDR_VAR 0 28
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 3
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 3
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 3
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 3
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49071: LD_ADDR_VAR 0 29
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: LD_INT 3
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 3
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 3
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 3
49315: NEG
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49350: LD_ADDR_VAR 0 30
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: LD_INT 2
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 3
49593: NEG
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49628: LD_ADDR_VAR 0 31
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 3
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 3
49871: NEG
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49906: LD_ADDR_VAR 0 32
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 3
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 3
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 3
50149: NEG
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50184: LD_ADDR_VAR 0 33
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: LD_INT 3
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 3
50428: NEG
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50463: LD_ADDR_VAR 0 34
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 2
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: LD_INT 3
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 3
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50743: LD_ADDR_VAR 0 35
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50855: LD_ADDR_VAR 0 36
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50967: LD_ADDR_VAR 0 37
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51079: LD_ADDR_VAR 0 38
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51191: LD_ADDR_VAR 0 39
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51303: LD_ADDR_VAR 0 40
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51415: LD_ADDR_VAR 0 41
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: LD_INT 3
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 3
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: NEG
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 3
51700: NEG
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 3
51712: NEG
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 3
51724: NEG
51725: PUSH
51726: LD_INT 3
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51765: LD_ADDR_VAR 0 42
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 3
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 3
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 3
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 3
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 3
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 3
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: NEG
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: NEG
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52115: LD_ADDR_VAR 0 43
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 3
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 3
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 3
52411: NEG
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 3
52422: NEG
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52463: LD_ADDR_VAR 0 44
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 3
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 3
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 3
52737: NEG
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 3
52748: NEG
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 3
52760: NEG
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 3
52772: NEG
52773: PUSH
52774: LD_INT 3
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52813: LD_ADDR_VAR 0 45
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 3
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 3
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 3
53059: PUSH
53060: LD_INT 3
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 3
53110: NEG
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 3
53122: NEG
53123: PUSH
53124: LD_INT 3
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53163: LD_ADDR_VAR 0 46
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 2
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 3
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 3
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: NEG
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53511: LD_ADDR_VAR 0 47
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53662: LD_ADDR_VAR 0 48
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53809: LD_ADDR_VAR 0 49
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: LD_INT 2
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53953: LD_ADDR_VAR 0 50
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 2
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54097: LD_ADDR_VAR 0 51
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54244: LD_ADDR_VAR 0 52
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54395: LD_ADDR_VAR 0 53
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54625: LD_ADDR_VAR 0 54
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54855: LD_ADDR_VAR 0 55
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55085: LD_ADDR_VAR 0 56
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55315: LD_ADDR_VAR 0 57
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55545: LD_ADDR_VAR 0 58
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55775: LD_ADDR_VAR 0 59
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55863: LD_ADDR_VAR 0 60
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55951: LD_ADDR_VAR 0 61
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56039: LD_ADDR_VAR 0 62
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56127: LD_ADDR_VAR 0 63
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56215: LD_ADDR_VAR 0 64
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: ST_TO_ADDR
// end ; 1 :
56303: GO 62200
56305: LD_INT 1
56307: DOUBLE
56308: EQUAL
56309: IFTRUE 56313
56311: GO 58936
56313: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56314: LD_ADDR_VAR 0 11
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56358: LD_ADDR_VAR 0 12
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56399: LD_ADDR_VAR 0 13
56403: PUSH
56404: LD_INT 3
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56439: LD_ADDR_VAR 0 14
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56480: LD_ADDR_VAR 0 15
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56524: LD_ADDR_VAR 0 16
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: LD_INT 3
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 3
56555: NEG
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56570: LD_ADDR_VAR 0 17
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 3
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: LIST
56613: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56614: LD_ADDR_VAR 0 18
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 3
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: LIST
56654: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56655: LD_ADDR_VAR 0 19
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56695: LD_ADDR_VAR 0 20
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: LIST
56735: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56736: LD_ADDR_VAR 0 21
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: LIST
56779: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56780: LD_ADDR_VAR 0 22
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 3
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: LIST
56825: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56826: LD_ADDR_VAR 0 23
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 3
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 4
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56870: LD_ADDR_VAR 0 24
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 4
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56911: LD_ADDR_VAR 0 25
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: LD_INT 3
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 4
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: LD_INT 4
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56951: LD_ADDR_VAR 0 26
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 4
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 3
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56992: LD_ADDR_VAR 0 27
56996: PUSH
56997: LD_INT 3
56999: NEG
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 3
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 4
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: LIST
57035: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57036: LD_ADDR_VAR 0 28
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: LD_INT 3
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 3
57055: NEG
57056: PUSH
57057: LD_INT 4
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 4
57067: NEG
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57082: LD_ADDR_VAR 0 29
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 3
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 4
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: LD_INT 4
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 3
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 5
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 5
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 4
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 6
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 6
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 5
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57237: LD_ADDR_VAR 0 30
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 4
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 4
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 5
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 5
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 5
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 6
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 6
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57380: LD_ADDR_VAR 0 31
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 4
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 4
57427: PUSH
57428: LD_INT 4
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 3
57437: PUSH
57438: LD_INT 4
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 5
57447: PUSH
57448: LD_INT 4
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 5
57457: PUSH
57458: LD_INT 5
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 4
57467: PUSH
57468: LD_INT 5
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 6
57477: PUSH
57478: LD_INT 5
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 6
57487: PUSH
57488: LD_INT 6
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 5
57497: PUSH
57498: LD_INT 6
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57519: LD_ADDR_VAR 0 32
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 3
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 4
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: LD_INT 4
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 5
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 5
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 4
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 6
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 6
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 5
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57662: LD_ADDR_VAR 0 33
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 3
57680: NEG
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 3
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 4
57714: NEG
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 4
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 4
57737: NEG
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 5
57748: NEG
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 5
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 5
57771: NEG
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 6
57782: NEG
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 6
57793: NEG
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57817: LD_ADDR_VAR 0 34
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: LD_INT 3
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 3
57848: NEG
57849: PUSH
57850: LD_INT 3
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: LD_INT 4
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 4
57872: NEG
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 4
57884: NEG
57885: PUSH
57886: LD_INT 4
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 4
57896: NEG
57897: PUSH
57898: LD_INT 5
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 5
57908: NEG
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 5
57920: NEG
57921: PUSH
57922: LD_INT 5
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 5
57932: NEG
57933: PUSH
57934: LD_INT 6
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 6
57944: NEG
57945: PUSH
57946: LD_INT 5
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 6
57956: NEG
57957: PUSH
57958: LD_INT 6
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57980: LD_ADDR_VAR 0 41
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: LIST
58023: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58024: LD_ADDR_VAR 0 42
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58065: LD_ADDR_VAR 0 43
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 3
58082: PUSH
58083: LD_INT 2
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: LD_INT 3
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: LIST
58104: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58105: LD_ADDR_VAR 0 44
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: LIST
58145: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58146: LD_ADDR_VAR 0 45
58150: PUSH
58151: LD_INT 2
58153: NEG
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58190: LD_ADDR_VAR 0 46
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: LD_INT 2
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 3
58221: NEG
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: LIST
58235: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58236: LD_ADDR_VAR 0 47
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 3
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: LD_INT 3
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58269: LD_ADDR_VAR 0 48
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58300: LD_ADDR_VAR 0 49
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58329: LD_ADDR_VAR 0 50
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: LD_INT 3
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58358: LD_ADDR_VAR 0 51
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58389: LD_ADDR_VAR 0 52
58393: PUSH
58394: LD_INT 3
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 3
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58422: LD_ADDR_VAR 0 53
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 3
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58466: LD_ADDR_VAR 0 54
58470: PUSH
58471: LD_INT 2
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58507: LD_ADDR_VAR 0 55
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 3
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: LIST
58546: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58547: LD_ADDR_VAR 0 56
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58588: LD_ADDR_VAR 0 57
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 3
58617: NEG
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: LIST
58631: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58632: LD_ADDR_VAR 0 58
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: LD_INT 3
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 3
58663: NEG
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58678: LD_ADDR_VAR 0 59
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58722: LD_ADDR_VAR 0 60
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: LIST
58762: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58763: LD_ADDR_VAR 0 61
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: LIST
58802: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58803: LD_ADDR_VAR 0 62
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58844: LD_ADDR_VAR 0 63
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58888: LD_ADDR_VAR 0 64
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: LIST
58933: ST_TO_ADDR
// end ; 2 :
58934: GO 62200
58936: LD_INT 2
58938: DOUBLE
58939: EQUAL
58940: IFTRUE 58944
58942: GO 62199
58944: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58945: LD_ADDR_VAR 0 29
58949: PUSH
58950: LD_INT 4
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 4
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 5
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 5
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 4
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 3
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 3
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 3
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 5
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 4
59065: PUSH
59066: LD_INT 3
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 4
59075: PUSH
59076: LD_INT 4
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: LD_INT 4
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 4
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: LD_INT 4
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 4
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 4
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: LD_INT 5
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 5
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: LD_INT 4
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: LD_INT 5
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: NEG
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 3
59273: NEG
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 4
59284: NEG
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 4
59295: NEG
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 4
59307: NEG
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 4
59330: NEG
59331: PUSH
59332: LD_INT 4
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: NEG
59343: PUSH
59344: LD_INT 5
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: LD_INT 4
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: LD_INT 3
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 4
59378: NEG
59379: PUSH
59380: LD_INT 3
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 5
59390: NEG
59391: PUSH
59392: LD_INT 4
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 5
59402: NEG
59403: PUSH
59404: LD_INT 5
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 3
59414: NEG
59415: PUSH
59416: LD_INT 5
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 5
59426: NEG
59427: PUSH
59428: LD_INT 3
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59483: LD_ADDR_VAR 0 30
59487: PUSH
59488: LD_INT 4
59490: PUSH
59491: LD_INT 4
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 4
59500: PUSH
59501: LD_INT 3
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 5
59510: PUSH
59511: LD_INT 4
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 5
59520: PUSH
59521: LD_INT 5
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 4
59530: PUSH
59531: LD_INT 5
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 3
59540: PUSH
59541: LD_INT 4
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: PUSH
59551: LD_INT 3
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 5
59560: PUSH
59561: LD_INT 3
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 3
59570: PUSH
59571: LD_INT 5
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 3
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 2
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: LD_INT 3
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: LD_INT 4
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 4
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: LD_INT 3
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: LD_INT 4
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 4
59673: NEG
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 4
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: NEG
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 3
59707: NEG
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 4
59718: NEG
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 5
59729: NEG
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 5
59740: NEG
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 5
59752: NEG
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 3
59764: NEG
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 3
59775: NEG
59776: PUSH
59777: LD_INT 3
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: LD_INT 4
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: LD_INT 3
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 2
59811: NEG
59812: PUSH
59813: LD_INT 2
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: NEG
59824: PUSH
59825: LD_INT 2
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 4
59835: NEG
59836: PUSH
59837: LD_INT 3
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 4
59847: NEG
59848: PUSH
59849: LD_INT 4
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: LD_INT 4
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 4
59871: NEG
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 5
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 4
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 4
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 5
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: LD_INT 5
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60030: LD_ADDR_VAR 0 31
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 4
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 4
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 5
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 5
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 4
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: LD_INT 3
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: PUSH
60110: LD_INT 5
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 2
60119: NEG
60120: PUSH
60121: LD_INT 3
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 3
60130: NEG
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: NEG
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 2
60153: NEG
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 3
60175: NEG
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 4
60186: NEG
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 4
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 4
60209: NEG
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 4
60232: NEG
60233: PUSH
60234: LD_INT 4
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 4
60244: NEG
60245: PUSH
60246: LD_INT 5
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: NEG
60257: PUSH
60258: LD_INT 4
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 4
60280: NEG
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 5
60292: NEG
60293: PUSH
60294: LD_INT 4
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 5
60304: NEG
60305: PUSH
60306: LD_INT 5
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: LD_INT 5
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 5
60328: NEG
60329: PUSH
60330: LD_INT 3
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: LD_INT 3
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: LD_INT 4
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 2
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 2
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 4
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: LD_INT 4
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 4
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 5
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 5
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 4
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 5
60525: PUSH
60526: LD_INT 2
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60580: LD_ADDR_VAR 0 32
60584: PUSH
60585: LD_INT 4
60587: NEG
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 4
60598: NEG
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 3
60610: NEG
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 4
60632: NEG
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 5
60643: NEG
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 5
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 5
60666: NEG
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 3
60678: NEG
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 3
60689: NEG
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 3
60701: NEG
60702: PUSH
60703: LD_INT 4
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 2
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 4
60749: NEG
60750: PUSH
60751: LD_INT 3
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 4
60761: NEG
60762: PUSH
60763: LD_INT 4
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: LD_INT 4
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 4
60785: NEG
60786: PUSH
60787: LD_INT 2
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 4
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 5
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 4
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: LD_INT 3
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 3
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 4
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: LD_INT 5
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: LD_INT 5
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 4
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 4
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: LD_INT 2
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: LD_INT 4
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 4
61002: PUSH
61003: LD_INT 3
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 5
61012: PUSH
61013: LD_INT 4
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 5
61022: PUSH
61023: LD_INT 5
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 4
61032: PUSH
61033: LD_INT 5
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: LD_INT 4
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: LD_INT 3
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 5
61062: PUSH
61063: LD_INT 3
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: LD_INT 5
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61127: LD_ADDR_VAR 0 33
61131: PUSH
61132: LD_INT 4
61134: NEG
61135: PUSH
61136: LD_INT 4
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 4
61146: NEG
61147: PUSH
61148: LD_INT 5
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 3
61158: NEG
61159: PUSH
61160: LD_INT 4
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 3
61170: NEG
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 4
61182: NEG
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 5
61194: NEG
61195: PUSH
61196: LD_INT 4
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 5
61206: NEG
61207: PUSH
61208: LD_INT 5
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 3
61218: NEG
61219: PUSH
61220: LD_INT 5
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 5
61230: NEG
61231: PUSH
61232: LD_INT 3
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 4
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: LD_INT 2
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: LD_INT 4
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: LD_INT 4
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 4
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 4
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 5
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 5
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 4
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: PUSH
61417: LD_INT 2
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 5
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: LD_INT 2
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 4
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 4
61467: PUSH
61468: LD_INT 4
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 3
61477: PUSH
61478: LD_INT 4
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: LD_INT 3
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 4
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: LD_INT 4
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: LD_INT 4
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: LD_INT 3
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: LD_INT 4
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: LD_INT 5
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 5
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: LD_INT 4
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: LD_INT 5
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61665: LD_ADDR_VAR 0 34
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 4
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 5
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: LD_INT 4
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 3
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 3
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 4
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: LD_INT 5
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 2
61751: PUSH
61752: LD_INT 3
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: LD_INT 5
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 4
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 4
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 4
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 4
61867: PUSH
61868: LD_INT 4
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 4
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 5
61887: PUSH
61888: LD_INT 4
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 5
61897: PUSH
61898: LD_INT 5
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 4
61907: PUSH
61908: LD_INT 5
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 3
61917: PUSH
61918: LD_INT 4
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: LD_INT 3
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 5
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: LD_INT 5
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 3
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: LD_INT 4
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: LD_INT 4
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: LD_INT 2
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: LD_INT 4
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: LD_INT 2
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 4
62050: NEG
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 4
62061: NEG
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: NEG
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 4
62095: NEG
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 5
62106: NEG
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 5
62117: NEG
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 5
62129: NEG
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 3
62141: NEG
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: ST_TO_ADDR
// end ; end ;
62197: GO 62200
62199: POP
// case btype of b_depot , b_warehouse :
62200: LD_VAR 0 1
62204: PUSH
62205: LD_INT 0
62207: DOUBLE
62208: EQUAL
62209: IFTRUE 62219
62211: LD_INT 1
62213: DOUBLE
62214: EQUAL
62215: IFTRUE 62219
62217: GO 62420
62219: POP
// case nation of nation_american :
62220: LD_VAR 0 5
62224: PUSH
62225: LD_INT 1
62227: DOUBLE
62228: EQUAL
62229: IFTRUE 62233
62231: GO 62289
62233: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62234: LD_ADDR_VAR 0 9
62238: PUSH
62239: LD_VAR 0 11
62243: PUSH
62244: LD_VAR 0 12
62248: PUSH
62249: LD_VAR 0 13
62253: PUSH
62254: LD_VAR 0 14
62258: PUSH
62259: LD_VAR 0 15
62263: PUSH
62264: LD_VAR 0 16
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: PUSH
62277: LD_VAR 0 4
62281: PUSH
62282: LD_INT 1
62284: PLUS
62285: ARRAY
62286: ST_TO_ADDR
62287: GO 62418
62289: LD_INT 2
62291: DOUBLE
62292: EQUAL
62293: IFTRUE 62297
62295: GO 62353
62297: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62298: LD_ADDR_VAR 0 9
62302: PUSH
62303: LD_VAR 0 17
62307: PUSH
62308: LD_VAR 0 18
62312: PUSH
62313: LD_VAR 0 19
62317: PUSH
62318: LD_VAR 0 20
62322: PUSH
62323: LD_VAR 0 21
62327: PUSH
62328: LD_VAR 0 22
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: PUSH
62341: LD_VAR 0 4
62345: PUSH
62346: LD_INT 1
62348: PLUS
62349: ARRAY
62350: ST_TO_ADDR
62351: GO 62418
62353: LD_INT 3
62355: DOUBLE
62356: EQUAL
62357: IFTRUE 62361
62359: GO 62417
62361: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62362: LD_ADDR_VAR 0 9
62366: PUSH
62367: LD_VAR 0 23
62371: PUSH
62372: LD_VAR 0 24
62376: PUSH
62377: LD_VAR 0 25
62381: PUSH
62382: LD_VAR 0 26
62386: PUSH
62387: LD_VAR 0 27
62391: PUSH
62392: LD_VAR 0 28
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: PUSH
62405: LD_VAR 0 4
62409: PUSH
62410: LD_INT 1
62412: PLUS
62413: ARRAY
62414: ST_TO_ADDR
62415: GO 62418
62417: POP
62418: GO 62973
62420: LD_INT 2
62422: DOUBLE
62423: EQUAL
62424: IFTRUE 62434
62426: LD_INT 3
62428: DOUBLE
62429: EQUAL
62430: IFTRUE 62434
62432: GO 62490
62434: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62435: LD_ADDR_VAR 0 9
62439: PUSH
62440: LD_VAR 0 29
62444: PUSH
62445: LD_VAR 0 30
62449: PUSH
62450: LD_VAR 0 31
62454: PUSH
62455: LD_VAR 0 32
62459: PUSH
62460: LD_VAR 0 33
62464: PUSH
62465: LD_VAR 0 34
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: PUSH
62478: LD_VAR 0 4
62482: PUSH
62483: LD_INT 1
62485: PLUS
62486: ARRAY
62487: ST_TO_ADDR
62488: GO 62973
62490: LD_INT 16
62492: DOUBLE
62493: EQUAL
62494: IFTRUE 62552
62496: LD_INT 17
62498: DOUBLE
62499: EQUAL
62500: IFTRUE 62552
62502: LD_INT 18
62504: DOUBLE
62505: EQUAL
62506: IFTRUE 62552
62508: LD_INT 19
62510: DOUBLE
62511: EQUAL
62512: IFTRUE 62552
62514: LD_INT 22
62516: DOUBLE
62517: EQUAL
62518: IFTRUE 62552
62520: LD_INT 20
62522: DOUBLE
62523: EQUAL
62524: IFTRUE 62552
62526: LD_INT 21
62528: DOUBLE
62529: EQUAL
62530: IFTRUE 62552
62532: LD_INT 23
62534: DOUBLE
62535: EQUAL
62536: IFTRUE 62552
62538: LD_INT 24
62540: DOUBLE
62541: EQUAL
62542: IFTRUE 62552
62544: LD_INT 25
62546: DOUBLE
62547: EQUAL
62548: IFTRUE 62552
62550: GO 62608
62552: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62553: LD_ADDR_VAR 0 9
62557: PUSH
62558: LD_VAR 0 35
62562: PUSH
62563: LD_VAR 0 36
62567: PUSH
62568: LD_VAR 0 37
62572: PUSH
62573: LD_VAR 0 38
62577: PUSH
62578: LD_VAR 0 39
62582: PUSH
62583: LD_VAR 0 40
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: PUSH
62596: LD_VAR 0 4
62600: PUSH
62601: LD_INT 1
62603: PLUS
62604: ARRAY
62605: ST_TO_ADDR
62606: GO 62973
62608: LD_INT 6
62610: DOUBLE
62611: EQUAL
62612: IFTRUE 62664
62614: LD_INT 7
62616: DOUBLE
62617: EQUAL
62618: IFTRUE 62664
62620: LD_INT 8
62622: DOUBLE
62623: EQUAL
62624: IFTRUE 62664
62626: LD_INT 13
62628: DOUBLE
62629: EQUAL
62630: IFTRUE 62664
62632: LD_INT 12
62634: DOUBLE
62635: EQUAL
62636: IFTRUE 62664
62638: LD_INT 15
62640: DOUBLE
62641: EQUAL
62642: IFTRUE 62664
62644: LD_INT 11
62646: DOUBLE
62647: EQUAL
62648: IFTRUE 62664
62650: LD_INT 14
62652: DOUBLE
62653: EQUAL
62654: IFTRUE 62664
62656: LD_INT 10
62658: DOUBLE
62659: EQUAL
62660: IFTRUE 62664
62662: GO 62720
62664: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62665: LD_ADDR_VAR 0 9
62669: PUSH
62670: LD_VAR 0 41
62674: PUSH
62675: LD_VAR 0 42
62679: PUSH
62680: LD_VAR 0 43
62684: PUSH
62685: LD_VAR 0 44
62689: PUSH
62690: LD_VAR 0 45
62694: PUSH
62695: LD_VAR 0 46
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: PUSH
62708: LD_VAR 0 4
62712: PUSH
62713: LD_INT 1
62715: PLUS
62716: ARRAY
62717: ST_TO_ADDR
62718: GO 62973
62720: LD_INT 36
62722: DOUBLE
62723: EQUAL
62724: IFTRUE 62728
62726: GO 62784
62728: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62729: LD_ADDR_VAR 0 9
62733: PUSH
62734: LD_VAR 0 47
62738: PUSH
62739: LD_VAR 0 48
62743: PUSH
62744: LD_VAR 0 49
62748: PUSH
62749: LD_VAR 0 50
62753: PUSH
62754: LD_VAR 0 51
62758: PUSH
62759: LD_VAR 0 52
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: PUSH
62772: LD_VAR 0 4
62776: PUSH
62777: LD_INT 1
62779: PLUS
62780: ARRAY
62781: ST_TO_ADDR
62782: GO 62973
62784: LD_INT 4
62786: DOUBLE
62787: EQUAL
62788: IFTRUE 62810
62790: LD_INT 5
62792: DOUBLE
62793: EQUAL
62794: IFTRUE 62810
62796: LD_INT 34
62798: DOUBLE
62799: EQUAL
62800: IFTRUE 62810
62802: LD_INT 37
62804: DOUBLE
62805: EQUAL
62806: IFTRUE 62810
62808: GO 62866
62810: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62811: LD_ADDR_VAR 0 9
62815: PUSH
62816: LD_VAR 0 53
62820: PUSH
62821: LD_VAR 0 54
62825: PUSH
62826: LD_VAR 0 55
62830: PUSH
62831: LD_VAR 0 56
62835: PUSH
62836: LD_VAR 0 57
62840: PUSH
62841: LD_VAR 0 58
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: PUSH
62854: LD_VAR 0 4
62858: PUSH
62859: LD_INT 1
62861: PLUS
62862: ARRAY
62863: ST_TO_ADDR
62864: GO 62973
62866: LD_INT 31
62868: DOUBLE
62869: EQUAL
62870: IFTRUE 62916
62872: LD_INT 32
62874: DOUBLE
62875: EQUAL
62876: IFTRUE 62916
62878: LD_INT 33
62880: DOUBLE
62881: EQUAL
62882: IFTRUE 62916
62884: LD_INT 27
62886: DOUBLE
62887: EQUAL
62888: IFTRUE 62916
62890: LD_INT 26
62892: DOUBLE
62893: EQUAL
62894: IFTRUE 62916
62896: LD_INT 28
62898: DOUBLE
62899: EQUAL
62900: IFTRUE 62916
62902: LD_INT 29
62904: DOUBLE
62905: EQUAL
62906: IFTRUE 62916
62908: LD_INT 30
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62916
62914: GO 62972
62916: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62917: LD_ADDR_VAR 0 9
62921: PUSH
62922: LD_VAR 0 59
62926: PUSH
62927: LD_VAR 0 60
62931: PUSH
62932: LD_VAR 0 61
62936: PUSH
62937: LD_VAR 0 62
62941: PUSH
62942: LD_VAR 0 63
62946: PUSH
62947: LD_VAR 0 64
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: PUSH
62960: LD_VAR 0 4
62964: PUSH
62965: LD_INT 1
62967: PLUS
62968: ARRAY
62969: ST_TO_ADDR
62970: GO 62973
62972: POP
// temp_list2 = [ ] ;
62973: LD_ADDR_VAR 0 10
62977: PUSH
62978: EMPTY
62979: ST_TO_ADDR
// for i in temp_list do
62980: LD_ADDR_VAR 0 8
62984: PUSH
62985: LD_VAR 0 9
62989: PUSH
62990: FOR_IN
62991: IFFALSE 63043
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62993: LD_ADDR_VAR 0 10
62997: PUSH
62998: LD_VAR 0 10
63002: PUSH
63003: LD_VAR 0 8
63007: PUSH
63008: LD_INT 1
63010: ARRAY
63011: PUSH
63012: LD_VAR 0 2
63016: PLUS
63017: PUSH
63018: LD_VAR 0 8
63022: PUSH
63023: LD_INT 2
63025: ARRAY
63026: PUSH
63027: LD_VAR 0 3
63031: PLUS
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: EMPTY
63038: LIST
63039: ADD
63040: ST_TO_ADDR
63041: GO 62990
63043: POP
63044: POP
// result = temp_list2 ;
63045: LD_ADDR_VAR 0 7
63049: PUSH
63050: LD_VAR 0 10
63054: ST_TO_ADDR
// end ;
63055: LD_VAR 0 7
63059: RET
// export function EnemyInRange ( unit , dist ) ; begin
63060: LD_INT 0
63062: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63063: LD_ADDR_VAR 0 3
63067: PUSH
63068: LD_VAR 0 1
63072: PPUSH
63073: CALL_OW 255
63077: PPUSH
63078: LD_VAR 0 1
63082: PPUSH
63083: CALL_OW 250
63087: PPUSH
63088: LD_VAR 0 1
63092: PPUSH
63093: CALL_OW 251
63097: PPUSH
63098: LD_VAR 0 2
63102: PPUSH
63103: CALL 36456 0 4
63107: PUSH
63108: LD_INT 4
63110: ARRAY
63111: ST_TO_ADDR
// end ;
63112: LD_VAR 0 3
63116: RET
// export function PlayerSeeMe ( unit ) ; begin
63117: LD_INT 0
63119: PPUSH
// result := See ( your_side , unit ) ;
63120: LD_ADDR_VAR 0 2
63124: PUSH
63125: LD_OWVAR 2
63129: PPUSH
63130: LD_VAR 0 1
63134: PPUSH
63135: CALL_OW 292
63139: ST_TO_ADDR
// end ;
63140: LD_VAR 0 2
63144: RET
// export function ReverseDir ( unit ) ; begin
63145: LD_INT 0
63147: PPUSH
// if not unit then
63148: LD_VAR 0 1
63152: NOT
63153: IFFALSE 63157
// exit ;
63155: GO 63180
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63157: LD_ADDR_VAR 0 2
63161: PUSH
63162: LD_VAR 0 1
63166: PPUSH
63167: CALL_OW 254
63171: PUSH
63172: LD_INT 3
63174: PLUS
63175: PUSH
63176: LD_INT 6
63178: MOD
63179: ST_TO_ADDR
// end ;
63180: LD_VAR 0 2
63184: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63185: LD_INT 0
63187: PPUSH
63188: PPUSH
63189: PPUSH
63190: PPUSH
63191: PPUSH
// if not hexes then
63192: LD_VAR 0 2
63196: NOT
63197: IFFALSE 63201
// exit ;
63199: GO 63349
// dist := 9999 ;
63201: LD_ADDR_VAR 0 5
63205: PUSH
63206: LD_INT 9999
63208: ST_TO_ADDR
// for i = 1 to hexes do
63209: LD_ADDR_VAR 0 4
63213: PUSH
63214: DOUBLE
63215: LD_INT 1
63217: DEC
63218: ST_TO_ADDR
63219: LD_VAR 0 2
63223: PUSH
63224: FOR_TO
63225: IFFALSE 63337
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63227: LD_VAR 0 1
63231: PPUSH
63232: LD_VAR 0 2
63236: PUSH
63237: LD_VAR 0 4
63241: ARRAY
63242: PUSH
63243: LD_INT 1
63245: ARRAY
63246: PPUSH
63247: LD_VAR 0 2
63251: PUSH
63252: LD_VAR 0 4
63256: ARRAY
63257: PUSH
63258: LD_INT 2
63260: ARRAY
63261: PPUSH
63262: CALL_OW 297
63266: PUSH
63267: LD_VAR 0 5
63271: LESS
63272: IFFALSE 63335
// begin hex := hexes [ i ] ;
63274: LD_ADDR_VAR 0 7
63278: PUSH
63279: LD_VAR 0 2
63283: PUSH
63284: LD_VAR 0 4
63288: ARRAY
63289: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63290: LD_ADDR_VAR 0 5
63294: PUSH
63295: LD_VAR 0 1
63299: PPUSH
63300: LD_VAR 0 2
63304: PUSH
63305: LD_VAR 0 4
63309: ARRAY
63310: PUSH
63311: LD_INT 1
63313: ARRAY
63314: PPUSH
63315: LD_VAR 0 2
63319: PUSH
63320: LD_VAR 0 4
63324: ARRAY
63325: PUSH
63326: LD_INT 2
63328: ARRAY
63329: PPUSH
63330: CALL_OW 297
63334: ST_TO_ADDR
// end ; end ;
63335: GO 63224
63337: POP
63338: POP
// result := hex ;
63339: LD_ADDR_VAR 0 3
63343: PUSH
63344: LD_VAR 0 7
63348: ST_TO_ADDR
// end ;
63349: LD_VAR 0 3
63353: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63354: LD_INT 0
63356: PPUSH
63357: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63358: LD_VAR 0 1
63362: NOT
63363: PUSH
63364: LD_VAR 0 1
63368: PUSH
63369: LD_INT 21
63371: PUSH
63372: LD_INT 2
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 23
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PPUSH
63393: CALL_OW 69
63397: IN
63398: NOT
63399: OR
63400: IFFALSE 63404
// exit ;
63402: GO 63451
// for i = 1 to 3 do
63404: LD_ADDR_VAR 0 3
63408: PUSH
63409: DOUBLE
63410: LD_INT 1
63412: DEC
63413: ST_TO_ADDR
63414: LD_INT 3
63416: PUSH
63417: FOR_TO
63418: IFFALSE 63449
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63420: LD_VAR 0 1
63424: PPUSH
63425: CALL_OW 250
63429: PPUSH
63430: LD_VAR 0 1
63434: PPUSH
63435: CALL_OW 251
63439: PPUSH
63440: LD_INT 1
63442: PPUSH
63443: CALL_OW 453
63447: GO 63417
63449: POP
63450: POP
// end ;
63451: LD_VAR 0 2
63455: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63456: LD_INT 0
63458: PPUSH
63459: PPUSH
63460: PPUSH
63461: PPUSH
63462: PPUSH
63463: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63464: LD_VAR 0 1
63468: NOT
63469: PUSH
63470: LD_VAR 0 2
63474: NOT
63475: OR
63476: PUSH
63477: LD_VAR 0 1
63481: PPUSH
63482: CALL_OW 314
63486: OR
63487: IFFALSE 63491
// exit ;
63489: GO 63932
// x := GetX ( enemy_unit ) ;
63491: LD_ADDR_VAR 0 7
63495: PUSH
63496: LD_VAR 0 2
63500: PPUSH
63501: CALL_OW 250
63505: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63506: LD_ADDR_VAR 0 8
63510: PUSH
63511: LD_VAR 0 2
63515: PPUSH
63516: CALL_OW 251
63520: ST_TO_ADDR
// if not x or not y then
63521: LD_VAR 0 7
63525: NOT
63526: PUSH
63527: LD_VAR 0 8
63531: NOT
63532: OR
63533: IFFALSE 63537
// exit ;
63535: GO 63932
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63537: LD_ADDR_VAR 0 6
63541: PUSH
63542: LD_VAR 0 7
63546: PPUSH
63547: LD_INT 0
63549: PPUSH
63550: LD_INT 4
63552: PPUSH
63553: CALL_OW 272
63557: PUSH
63558: LD_VAR 0 8
63562: PPUSH
63563: LD_INT 0
63565: PPUSH
63566: LD_INT 4
63568: PPUSH
63569: CALL_OW 273
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_VAR 0 7
63582: PPUSH
63583: LD_INT 1
63585: PPUSH
63586: LD_INT 4
63588: PPUSH
63589: CALL_OW 272
63593: PUSH
63594: LD_VAR 0 8
63598: PPUSH
63599: LD_INT 1
63601: PPUSH
63602: LD_INT 4
63604: PPUSH
63605: CALL_OW 273
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_VAR 0 7
63618: PPUSH
63619: LD_INT 2
63621: PPUSH
63622: LD_INT 4
63624: PPUSH
63625: CALL_OW 272
63629: PUSH
63630: LD_VAR 0 8
63634: PPUSH
63635: LD_INT 2
63637: PPUSH
63638: LD_INT 4
63640: PPUSH
63641: CALL_OW 273
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_VAR 0 7
63654: PPUSH
63655: LD_INT 3
63657: PPUSH
63658: LD_INT 4
63660: PPUSH
63661: CALL_OW 272
63665: PUSH
63666: LD_VAR 0 8
63670: PPUSH
63671: LD_INT 3
63673: PPUSH
63674: LD_INT 4
63676: PPUSH
63677: CALL_OW 273
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_VAR 0 7
63690: PPUSH
63691: LD_INT 4
63693: PPUSH
63694: LD_INT 4
63696: PPUSH
63697: CALL_OW 272
63701: PUSH
63702: LD_VAR 0 8
63706: PPUSH
63707: LD_INT 4
63709: PPUSH
63710: LD_INT 4
63712: PPUSH
63713: CALL_OW 273
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_VAR 0 7
63726: PPUSH
63727: LD_INT 5
63729: PPUSH
63730: LD_INT 4
63732: PPUSH
63733: CALL_OW 272
63737: PUSH
63738: LD_VAR 0 8
63742: PPUSH
63743: LD_INT 5
63745: PPUSH
63746: LD_INT 4
63748: PPUSH
63749: CALL_OW 273
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: ST_TO_ADDR
// for i = tmp downto 1 do
63766: LD_ADDR_VAR 0 4
63770: PUSH
63771: DOUBLE
63772: LD_VAR 0 6
63776: INC
63777: ST_TO_ADDR
63778: LD_INT 1
63780: PUSH
63781: FOR_DOWNTO
63782: IFFALSE 63883
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63784: LD_VAR 0 6
63788: PUSH
63789: LD_VAR 0 4
63793: ARRAY
63794: PUSH
63795: LD_INT 1
63797: ARRAY
63798: PPUSH
63799: LD_VAR 0 6
63803: PUSH
63804: LD_VAR 0 4
63808: ARRAY
63809: PUSH
63810: LD_INT 2
63812: ARRAY
63813: PPUSH
63814: CALL_OW 488
63818: NOT
63819: PUSH
63820: LD_VAR 0 6
63824: PUSH
63825: LD_VAR 0 4
63829: ARRAY
63830: PUSH
63831: LD_INT 1
63833: ARRAY
63834: PPUSH
63835: LD_VAR 0 6
63839: PUSH
63840: LD_VAR 0 4
63844: ARRAY
63845: PUSH
63846: LD_INT 2
63848: ARRAY
63849: PPUSH
63850: CALL_OW 428
63854: PUSH
63855: LD_INT 0
63857: NONEQUAL
63858: OR
63859: IFFALSE 63881
// tmp := Delete ( tmp , i ) ;
63861: LD_ADDR_VAR 0 6
63865: PUSH
63866: LD_VAR 0 6
63870: PPUSH
63871: LD_VAR 0 4
63875: PPUSH
63876: CALL_OW 3
63880: ST_TO_ADDR
63881: GO 63781
63883: POP
63884: POP
// j := GetClosestHex ( unit , tmp ) ;
63885: LD_ADDR_VAR 0 5
63889: PUSH
63890: LD_VAR 0 1
63894: PPUSH
63895: LD_VAR 0 6
63899: PPUSH
63900: CALL 63185 0 2
63904: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63905: LD_VAR 0 1
63909: PPUSH
63910: LD_VAR 0 5
63914: PUSH
63915: LD_INT 1
63917: ARRAY
63918: PPUSH
63919: LD_VAR 0 5
63923: PUSH
63924: LD_INT 2
63926: ARRAY
63927: PPUSH
63928: CALL_OW 111
// end ;
63932: LD_VAR 0 3
63936: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63937: LD_INT 0
63939: PPUSH
63940: PPUSH
63941: PPUSH
// uc_side = 0 ;
63942: LD_ADDR_OWVAR 20
63946: PUSH
63947: LD_INT 0
63949: ST_TO_ADDR
// uc_nation = 0 ;
63950: LD_ADDR_OWVAR 21
63954: PUSH
63955: LD_INT 0
63957: ST_TO_ADDR
// InitHc_All ( ) ;
63958: CALL_OW 584
// InitVc ;
63962: CALL_OW 20
// if mastodonts then
63966: LD_VAR 0 6
63970: IFFALSE 64037
// for i = 1 to mastodonts do
63972: LD_ADDR_VAR 0 11
63976: PUSH
63977: DOUBLE
63978: LD_INT 1
63980: DEC
63981: ST_TO_ADDR
63982: LD_VAR 0 6
63986: PUSH
63987: FOR_TO
63988: IFFALSE 64035
// begin vc_chassis := 31 ;
63990: LD_ADDR_OWVAR 37
63994: PUSH
63995: LD_INT 31
63997: ST_TO_ADDR
// vc_control := control_rider ;
63998: LD_ADDR_OWVAR 38
64002: PUSH
64003: LD_INT 4
64005: ST_TO_ADDR
// animal := CreateVehicle ;
64006: LD_ADDR_VAR 0 12
64010: PUSH
64011: CALL_OW 45
64015: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64016: LD_VAR 0 12
64020: PPUSH
64021: LD_VAR 0 8
64025: PPUSH
64026: LD_INT 0
64028: PPUSH
64029: CALL 66172 0 3
// end ;
64033: GO 63987
64035: POP
64036: POP
// if horses then
64037: LD_VAR 0 5
64041: IFFALSE 64108
// for i = 1 to horses do
64043: LD_ADDR_VAR 0 11
64047: PUSH
64048: DOUBLE
64049: LD_INT 1
64051: DEC
64052: ST_TO_ADDR
64053: LD_VAR 0 5
64057: PUSH
64058: FOR_TO
64059: IFFALSE 64106
// begin hc_class := 21 ;
64061: LD_ADDR_OWVAR 28
64065: PUSH
64066: LD_INT 21
64068: ST_TO_ADDR
// hc_gallery :=  ;
64069: LD_ADDR_OWVAR 33
64073: PUSH
64074: LD_STRING 
64076: ST_TO_ADDR
// animal := CreateHuman ;
64077: LD_ADDR_VAR 0 12
64081: PUSH
64082: CALL_OW 44
64086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64087: LD_VAR 0 12
64091: PPUSH
64092: LD_VAR 0 8
64096: PPUSH
64097: LD_INT 0
64099: PPUSH
64100: CALL 66172 0 3
// end ;
64104: GO 64058
64106: POP
64107: POP
// if birds then
64108: LD_VAR 0 1
64112: IFFALSE 64179
// for i = 1 to birds do
64114: LD_ADDR_VAR 0 11
64118: PUSH
64119: DOUBLE
64120: LD_INT 1
64122: DEC
64123: ST_TO_ADDR
64124: LD_VAR 0 1
64128: PUSH
64129: FOR_TO
64130: IFFALSE 64177
// begin hc_class = 18 ;
64132: LD_ADDR_OWVAR 28
64136: PUSH
64137: LD_INT 18
64139: ST_TO_ADDR
// hc_gallery =  ;
64140: LD_ADDR_OWVAR 33
64144: PUSH
64145: LD_STRING 
64147: ST_TO_ADDR
// animal := CreateHuman ;
64148: LD_ADDR_VAR 0 12
64152: PUSH
64153: CALL_OW 44
64157: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64158: LD_VAR 0 12
64162: PPUSH
64163: LD_VAR 0 8
64167: PPUSH
64168: LD_INT 0
64170: PPUSH
64171: CALL 66172 0 3
// end ;
64175: GO 64129
64177: POP
64178: POP
// if tigers then
64179: LD_VAR 0 2
64183: IFFALSE 64267
// for i = 1 to tigers do
64185: LD_ADDR_VAR 0 11
64189: PUSH
64190: DOUBLE
64191: LD_INT 1
64193: DEC
64194: ST_TO_ADDR
64195: LD_VAR 0 2
64199: PUSH
64200: FOR_TO
64201: IFFALSE 64265
// begin hc_class = class_tiger ;
64203: LD_ADDR_OWVAR 28
64207: PUSH
64208: LD_INT 14
64210: ST_TO_ADDR
// hc_gallery =  ;
64211: LD_ADDR_OWVAR 33
64215: PUSH
64216: LD_STRING 
64218: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64219: LD_ADDR_OWVAR 35
64223: PUSH
64224: LD_INT 7
64226: NEG
64227: PPUSH
64228: LD_INT 7
64230: PPUSH
64231: CALL_OW 12
64235: ST_TO_ADDR
// animal := CreateHuman ;
64236: LD_ADDR_VAR 0 12
64240: PUSH
64241: CALL_OW 44
64245: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64246: LD_VAR 0 12
64250: PPUSH
64251: LD_VAR 0 8
64255: PPUSH
64256: LD_INT 0
64258: PPUSH
64259: CALL 66172 0 3
// end ;
64263: GO 64200
64265: POP
64266: POP
// if apemans then
64267: LD_VAR 0 3
64271: IFFALSE 64394
// for i = 1 to apemans do
64273: LD_ADDR_VAR 0 11
64277: PUSH
64278: DOUBLE
64279: LD_INT 1
64281: DEC
64282: ST_TO_ADDR
64283: LD_VAR 0 3
64287: PUSH
64288: FOR_TO
64289: IFFALSE 64392
// begin hc_class = class_apeman ;
64291: LD_ADDR_OWVAR 28
64295: PUSH
64296: LD_INT 12
64298: ST_TO_ADDR
// hc_gallery =  ;
64299: LD_ADDR_OWVAR 33
64303: PUSH
64304: LD_STRING 
64306: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64307: LD_ADDR_OWVAR 35
64311: PUSH
64312: LD_INT 2
64314: NEG
64315: PPUSH
64316: LD_INT 2
64318: PPUSH
64319: CALL_OW 12
64323: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64324: LD_ADDR_OWVAR 31
64328: PUSH
64329: LD_INT 1
64331: PPUSH
64332: LD_INT 3
64334: PPUSH
64335: CALL_OW 12
64339: PUSH
64340: LD_INT 1
64342: PPUSH
64343: LD_INT 3
64345: PPUSH
64346: CALL_OW 12
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: ST_TO_ADDR
// animal := CreateHuman ;
64363: LD_ADDR_VAR 0 12
64367: PUSH
64368: CALL_OW 44
64372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64373: LD_VAR 0 12
64377: PPUSH
64378: LD_VAR 0 8
64382: PPUSH
64383: LD_INT 0
64385: PPUSH
64386: CALL 66172 0 3
// end ;
64390: GO 64288
64392: POP
64393: POP
// if enchidnas then
64394: LD_VAR 0 4
64398: IFFALSE 64465
// for i = 1 to enchidnas do
64400: LD_ADDR_VAR 0 11
64404: PUSH
64405: DOUBLE
64406: LD_INT 1
64408: DEC
64409: ST_TO_ADDR
64410: LD_VAR 0 4
64414: PUSH
64415: FOR_TO
64416: IFFALSE 64463
// begin hc_class = 13 ;
64418: LD_ADDR_OWVAR 28
64422: PUSH
64423: LD_INT 13
64425: ST_TO_ADDR
// hc_gallery =  ;
64426: LD_ADDR_OWVAR 33
64430: PUSH
64431: LD_STRING 
64433: ST_TO_ADDR
// animal := CreateHuman ;
64434: LD_ADDR_VAR 0 12
64438: PUSH
64439: CALL_OW 44
64443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64444: LD_VAR 0 12
64448: PPUSH
64449: LD_VAR 0 8
64453: PPUSH
64454: LD_INT 0
64456: PPUSH
64457: CALL 66172 0 3
// end ;
64461: GO 64415
64463: POP
64464: POP
// if fishes then
64465: LD_VAR 0 7
64469: IFFALSE 64536
// for i = 1 to fishes do
64471: LD_ADDR_VAR 0 11
64475: PUSH
64476: DOUBLE
64477: LD_INT 1
64479: DEC
64480: ST_TO_ADDR
64481: LD_VAR 0 7
64485: PUSH
64486: FOR_TO
64487: IFFALSE 64534
// begin hc_class = 20 ;
64489: LD_ADDR_OWVAR 28
64493: PUSH
64494: LD_INT 20
64496: ST_TO_ADDR
// hc_gallery =  ;
64497: LD_ADDR_OWVAR 33
64501: PUSH
64502: LD_STRING 
64504: ST_TO_ADDR
// animal := CreateHuman ;
64505: LD_ADDR_VAR 0 12
64509: PUSH
64510: CALL_OW 44
64514: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64515: LD_VAR 0 12
64519: PPUSH
64520: LD_VAR 0 9
64524: PPUSH
64525: LD_INT 0
64527: PPUSH
64528: CALL 66172 0 3
// end ;
64532: GO 64486
64534: POP
64535: POP
// end ;
64536: LD_VAR 0 10
64540: RET
// export function WantHeal ( sci , unit ) ; begin
64541: LD_INT 0
64543: PPUSH
// if GetTaskList ( sci ) > 0 then
64544: LD_VAR 0 1
64548: PPUSH
64549: CALL_OW 437
64553: PUSH
64554: LD_INT 0
64556: GREATER
64557: IFFALSE 64627
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64559: LD_VAR 0 1
64563: PPUSH
64564: CALL_OW 437
64568: PUSH
64569: LD_INT 1
64571: ARRAY
64572: PUSH
64573: LD_INT 1
64575: ARRAY
64576: PUSH
64577: LD_STRING l
64579: EQUAL
64580: PUSH
64581: LD_VAR 0 1
64585: PPUSH
64586: CALL_OW 437
64590: PUSH
64591: LD_INT 1
64593: ARRAY
64594: PUSH
64595: LD_INT 4
64597: ARRAY
64598: PUSH
64599: LD_VAR 0 2
64603: EQUAL
64604: AND
64605: IFFALSE 64617
// result := true else
64607: LD_ADDR_VAR 0 3
64611: PUSH
64612: LD_INT 1
64614: ST_TO_ADDR
64615: GO 64625
// result := false ;
64617: LD_ADDR_VAR 0 3
64621: PUSH
64622: LD_INT 0
64624: ST_TO_ADDR
// end else
64625: GO 64635
// result := false ;
64627: LD_ADDR_VAR 0 3
64631: PUSH
64632: LD_INT 0
64634: ST_TO_ADDR
// end ;
64635: LD_VAR 0 3
64639: RET
// export function HealTarget ( sci ) ; begin
64640: LD_INT 0
64642: PPUSH
// if not sci then
64643: LD_VAR 0 1
64647: NOT
64648: IFFALSE 64652
// exit ;
64650: GO 64717
// result := 0 ;
64652: LD_ADDR_VAR 0 2
64656: PUSH
64657: LD_INT 0
64659: ST_TO_ADDR
// if GetTaskList ( sci ) then
64660: LD_VAR 0 1
64664: PPUSH
64665: CALL_OW 437
64669: IFFALSE 64717
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64671: LD_VAR 0 1
64675: PPUSH
64676: CALL_OW 437
64680: PUSH
64681: LD_INT 1
64683: ARRAY
64684: PUSH
64685: LD_INT 1
64687: ARRAY
64688: PUSH
64689: LD_STRING l
64691: EQUAL
64692: IFFALSE 64717
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64694: LD_ADDR_VAR 0 2
64698: PUSH
64699: LD_VAR 0 1
64703: PPUSH
64704: CALL_OW 437
64708: PUSH
64709: LD_INT 1
64711: ARRAY
64712: PUSH
64713: LD_INT 4
64715: ARRAY
64716: ST_TO_ADDR
// end ;
64717: LD_VAR 0 2
64721: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64722: LD_INT 0
64724: PPUSH
64725: PPUSH
64726: PPUSH
64727: PPUSH
// if not base_units then
64728: LD_VAR 0 1
64732: NOT
64733: IFFALSE 64737
// exit ;
64735: GO 64824
// result := false ;
64737: LD_ADDR_VAR 0 2
64741: PUSH
64742: LD_INT 0
64744: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64745: LD_ADDR_VAR 0 5
64749: PUSH
64750: LD_VAR 0 1
64754: PPUSH
64755: LD_INT 21
64757: PUSH
64758: LD_INT 3
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PPUSH
64765: CALL_OW 72
64769: ST_TO_ADDR
// if not tmp then
64770: LD_VAR 0 5
64774: NOT
64775: IFFALSE 64779
// exit ;
64777: GO 64824
// for i in tmp do
64779: LD_ADDR_VAR 0 3
64783: PUSH
64784: LD_VAR 0 5
64788: PUSH
64789: FOR_IN
64790: IFFALSE 64822
// begin result := EnemyInRange ( i , 22 ) ;
64792: LD_ADDR_VAR 0 2
64796: PUSH
64797: LD_VAR 0 3
64801: PPUSH
64802: LD_INT 22
64804: PPUSH
64805: CALL 63060 0 2
64809: ST_TO_ADDR
// if result then
64810: LD_VAR 0 2
64814: IFFALSE 64820
// exit ;
64816: POP
64817: POP
64818: GO 64824
// end ;
64820: GO 64789
64822: POP
64823: POP
// end ;
64824: LD_VAR 0 2
64828: RET
// export function FilterByTag ( units , tag ) ; begin
64829: LD_INT 0
64831: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64832: LD_ADDR_VAR 0 3
64836: PUSH
64837: LD_VAR 0 1
64841: PPUSH
64842: LD_INT 120
64844: PUSH
64845: LD_VAR 0 2
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PPUSH
64854: CALL_OW 72
64858: ST_TO_ADDR
// end ;
64859: LD_VAR 0 3
64863: RET
// export function IsDriver ( un ) ; begin
64864: LD_INT 0
64866: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64867: LD_ADDR_VAR 0 2
64871: PUSH
64872: LD_VAR 0 1
64876: PUSH
64877: LD_INT 55
64879: PUSH
64880: EMPTY
64881: LIST
64882: PPUSH
64883: CALL_OW 69
64887: IN
64888: ST_TO_ADDR
// end ;
64889: LD_VAR 0 2
64893: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64894: LD_INT 0
64896: PPUSH
64897: PPUSH
// list := [ ] ;
64898: LD_ADDR_VAR 0 5
64902: PUSH
64903: EMPTY
64904: ST_TO_ADDR
// case d of 0 :
64905: LD_VAR 0 3
64909: PUSH
64910: LD_INT 0
64912: DOUBLE
64913: EQUAL
64914: IFTRUE 64918
64916: GO 65051
64918: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64919: LD_ADDR_VAR 0 5
64923: PUSH
64924: LD_VAR 0 1
64928: PUSH
64929: LD_INT 4
64931: MINUS
64932: PUSH
64933: LD_VAR 0 2
64937: PUSH
64938: LD_INT 4
64940: MINUS
64941: PUSH
64942: LD_INT 2
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: LIST
64949: PUSH
64950: LD_VAR 0 1
64954: PUSH
64955: LD_INT 3
64957: MINUS
64958: PUSH
64959: LD_VAR 0 2
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: LIST
64971: PUSH
64972: LD_VAR 0 1
64976: PUSH
64977: LD_INT 4
64979: PLUS
64980: PUSH
64981: LD_VAR 0 2
64985: PUSH
64986: LD_INT 4
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: LIST
64993: PUSH
64994: LD_VAR 0 1
64998: PUSH
64999: LD_INT 3
65001: PLUS
65002: PUSH
65003: LD_VAR 0 2
65007: PUSH
65008: LD_INT 3
65010: PLUS
65011: PUSH
65012: LD_INT 5
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: LIST
65019: PUSH
65020: LD_VAR 0 1
65024: PUSH
65025: LD_VAR 0 2
65029: PUSH
65030: LD_INT 4
65032: PLUS
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: ST_TO_ADDR
// end ; 1 :
65049: GO 65749
65051: LD_INT 1
65053: DOUBLE
65054: EQUAL
65055: IFTRUE 65059
65057: GO 65192
65059: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65060: LD_ADDR_VAR 0 5
65064: PUSH
65065: LD_VAR 0 1
65069: PUSH
65070: LD_VAR 0 2
65074: PUSH
65075: LD_INT 4
65077: MINUS
65078: PUSH
65079: LD_INT 3
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: PUSH
65087: LD_VAR 0 1
65091: PUSH
65092: LD_INT 3
65094: MINUS
65095: PUSH
65096: LD_VAR 0 2
65100: PUSH
65101: LD_INT 3
65103: MINUS
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: PUSH
65113: LD_VAR 0 1
65117: PUSH
65118: LD_INT 4
65120: MINUS
65121: PUSH
65122: LD_VAR 0 2
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: LIST
65134: PUSH
65135: LD_VAR 0 1
65139: PUSH
65140: LD_VAR 0 2
65144: PUSH
65145: LD_INT 3
65147: PLUS
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: PUSH
65157: LD_VAR 0 1
65161: PUSH
65162: LD_INT 4
65164: PLUS
65165: PUSH
65166: LD_VAR 0 2
65170: PUSH
65171: LD_INT 4
65173: PLUS
65174: PUSH
65175: LD_INT 5
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: LIST
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: ST_TO_ADDR
// end ; 2 :
65190: GO 65749
65192: LD_INT 2
65194: DOUBLE
65195: EQUAL
65196: IFTRUE 65200
65198: GO 65329
65200: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65201: LD_ADDR_VAR 0 5
65205: PUSH
65206: LD_VAR 0 1
65210: PUSH
65211: LD_VAR 0 2
65215: PUSH
65216: LD_INT 3
65218: MINUS
65219: PUSH
65220: LD_INT 3
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: PUSH
65228: LD_VAR 0 1
65232: PUSH
65233: LD_INT 4
65235: PLUS
65236: PUSH
65237: LD_VAR 0 2
65241: PUSH
65242: LD_INT 4
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: PUSH
65250: LD_VAR 0 1
65254: PUSH
65255: LD_VAR 0 2
65259: PUSH
65260: LD_INT 4
65262: PLUS
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_INT 3
65279: MINUS
65280: PUSH
65281: LD_VAR 0 2
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: PUSH
65294: LD_VAR 0 1
65298: PUSH
65299: LD_INT 4
65301: MINUS
65302: PUSH
65303: LD_VAR 0 2
65307: PUSH
65308: LD_INT 4
65310: MINUS
65311: PUSH
65312: LD_INT 2
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: ST_TO_ADDR
// end ; 3 :
65327: GO 65749
65329: LD_INT 3
65331: DOUBLE
65332: EQUAL
65333: IFTRUE 65337
65335: GO 65470
65337: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65338: LD_ADDR_VAR 0 5
65342: PUSH
65343: LD_VAR 0 1
65347: PUSH
65348: LD_INT 3
65350: PLUS
65351: PUSH
65352: LD_VAR 0 2
65356: PUSH
65357: LD_INT 4
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: LIST
65364: PUSH
65365: LD_VAR 0 1
65369: PUSH
65370: LD_INT 4
65372: PLUS
65373: PUSH
65374: LD_VAR 0 2
65378: PUSH
65379: LD_INT 4
65381: PLUS
65382: PUSH
65383: LD_INT 5
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: LIST
65390: PUSH
65391: LD_VAR 0 1
65395: PUSH
65396: LD_INT 4
65398: MINUS
65399: PUSH
65400: LD_VAR 0 2
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: LIST
65412: PUSH
65413: LD_VAR 0 1
65417: PUSH
65418: LD_VAR 0 2
65422: PUSH
65423: LD_INT 4
65425: MINUS
65426: PUSH
65427: LD_INT 3
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: PUSH
65435: LD_VAR 0 1
65439: PUSH
65440: LD_INT 3
65442: MINUS
65443: PUSH
65444: LD_VAR 0 2
65448: PUSH
65449: LD_INT 3
65451: MINUS
65452: PUSH
65453: LD_INT 2
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: ST_TO_ADDR
// end ; 4 :
65468: GO 65749
65470: LD_INT 4
65472: DOUBLE
65473: EQUAL
65474: IFTRUE 65478
65476: GO 65611
65478: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65479: LD_ADDR_VAR 0 5
65483: PUSH
65484: LD_VAR 0 1
65488: PUSH
65489: LD_VAR 0 2
65493: PUSH
65494: LD_INT 4
65496: PLUS
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: LIST
65505: PUSH
65506: LD_VAR 0 1
65510: PUSH
65511: LD_INT 3
65513: PLUS
65514: PUSH
65515: LD_VAR 0 2
65519: PUSH
65520: LD_INT 3
65522: PLUS
65523: PUSH
65524: LD_INT 5
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: LIST
65531: PUSH
65532: LD_VAR 0 1
65536: PUSH
65537: LD_INT 4
65539: PLUS
65540: PUSH
65541: LD_VAR 0 2
65545: PUSH
65546: LD_INT 4
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: PUSH
65554: LD_VAR 0 1
65558: PUSH
65559: LD_VAR 0 2
65563: PUSH
65564: LD_INT 3
65566: MINUS
65567: PUSH
65568: LD_INT 3
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: LIST
65575: PUSH
65576: LD_VAR 0 1
65580: PUSH
65581: LD_INT 4
65583: MINUS
65584: PUSH
65585: LD_VAR 0 2
65589: PUSH
65590: LD_INT 4
65592: MINUS
65593: PUSH
65594: LD_INT 2
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: LIST
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: ST_TO_ADDR
// end ; 5 :
65609: GO 65749
65611: LD_INT 5
65613: DOUBLE
65614: EQUAL
65615: IFTRUE 65619
65617: GO 65748
65619: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65620: LD_ADDR_VAR 0 5
65624: PUSH
65625: LD_VAR 0 1
65629: PUSH
65630: LD_INT 4
65632: MINUS
65633: PUSH
65634: LD_VAR 0 2
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: LIST
65646: PUSH
65647: LD_VAR 0 1
65651: PUSH
65652: LD_VAR 0 2
65656: PUSH
65657: LD_INT 4
65659: MINUS
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: LIST
65668: PUSH
65669: LD_VAR 0 1
65673: PUSH
65674: LD_INT 4
65676: PLUS
65677: PUSH
65678: LD_VAR 0 2
65682: PUSH
65683: LD_INT 4
65685: PLUS
65686: PUSH
65687: LD_INT 5
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: LIST
65694: PUSH
65695: LD_VAR 0 1
65699: PUSH
65700: LD_INT 3
65702: PLUS
65703: PUSH
65704: LD_VAR 0 2
65708: PUSH
65709: LD_INT 4
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: PUSH
65717: LD_VAR 0 1
65721: PUSH
65722: LD_VAR 0 2
65726: PUSH
65727: LD_INT 3
65729: PLUS
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: LIST
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: ST_TO_ADDR
// end ; end ;
65746: GO 65749
65748: POP
// result := list ;
65749: LD_ADDR_VAR 0 4
65753: PUSH
65754: LD_VAR 0 5
65758: ST_TO_ADDR
// end ;
65759: LD_VAR 0 4
65763: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65764: LD_INT 0
65766: PPUSH
65767: PPUSH
65768: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65769: LD_VAR 0 1
65773: NOT
65774: PUSH
65775: LD_VAR 0 2
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: LD_INT 3
65788: PUSH
65789: LD_INT 4
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: IN
65798: NOT
65799: OR
65800: IFFALSE 65804
// exit ;
65802: GO 65896
// tmp := [ ] ;
65804: LD_ADDR_VAR 0 5
65808: PUSH
65809: EMPTY
65810: ST_TO_ADDR
// for i in units do
65811: LD_ADDR_VAR 0 4
65815: PUSH
65816: LD_VAR 0 1
65820: PUSH
65821: FOR_IN
65822: IFFALSE 65865
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65824: LD_ADDR_VAR 0 5
65828: PUSH
65829: LD_VAR 0 5
65833: PPUSH
65834: LD_VAR 0 5
65838: PUSH
65839: LD_INT 1
65841: PLUS
65842: PPUSH
65843: LD_VAR 0 4
65847: PPUSH
65848: LD_VAR 0 2
65852: PPUSH
65853: CALL_OW 259
65857: PPUSH
65858: CALL_OW 2
65862: ST_TO_ADDR
65863: GO 65821
65865: POP
65866: POP
// if not tmp then
65867: LD_VAR 0 5
65871: NOT
65872: IFFALSE 65876
// exit ;
65874: GO 65896
// result := SortListByListDesc ( units , tmp ) ;
65876: LD_ADDR_VAR 0 3
65880: PUSH
65881: LD_VAR 0 1
65885: PPUSH
65886: LD_VAR 0 5
65890: PPUSH
65891: CALL_OW 77
65895: ST_TO_ADDR
// end ;
65896: LD_VAR 0 3
65900: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65901: LD_INT 0
65903: PPUSH
65904: PPUSH
65905: PPUSH
// result := false ;
65906: LD_ADDR_VAR 0 3
65910: PUSH
65911: LD_INT 0
65913: ST_TO_ADDR
// x := GetX ( building ) ;
65914: LD_ADDR_VAR 0 4
65918: PUSH
65919: LD_VAR 0 2
65923: PPUSH
65924: CALL_OW 250
65928: ST_TO_ADDR
// y := GetY ( building ) ;
65929: LD_ADDR_VAR 0 5
65933: PUSH
65934: LD_VAR 0 2
65938: PPUSH
65939: CALL_OW 251
65943: ST_TO_ADDR
// if not building or not x or not y then
65944: LD_VAR 0 2
65948: NOT
65949: PUSH
65950: LD_VAR 0 4
65954: NOT
65955: OR
65956: PUSH
65957: LD_VAR 0 5
65961: NOT
65962: OR
65963: IFFALSE 65967
// exit ;
65965: GO 66059
// if GetTaskList ( unit ) then
65967: LD_VAR 0 1
65971: PPUSH
65972: CALL_OW 437
65976: IFFALSE 66059
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65978: LD_STRING e
65980: PUSH
65981: LD_VAR 0 1
65985: PPUSH
65986: CALL_OW 437
65990: PUSH
65991: LD_INT 1
65993: ARRAY
65994: PUSH
65995: LD_INT 1
65997: ARRAY
65998: EQUAL
65999: PUSH
66000: LD_VAR 0 4
66004: PUSH
66005: LD_VAR 0 1
66009: PPUSH
66010: CALL_OW 437
66014: PUSH
66015: LD_INT 1
66017: ARRAY
66018: PUSH
66019: LD_INT 2
66021: ARRAY
66022: EQUAL
66023: AND
66024: PUSH
66025: LD_VAR 0 5
66029: PUSH
66030: LD_VAR 0 1
66034: PPUSH
66035: CALL_OW 437
66039: PUSH
66040: LD_INT 1
66042: ARRAY
66043: PUSH
66044: LD_INT 3
66046: ARRAY
66047: EQUAL
66048: AND
66049: IFFALSE 66059
// result := true end ;
66051: LD_ADDR_VAR 0 3
66055: PUSH
66056: LD_INT 1
66058: ST_TO_ADDR
// end ;
66059: LD_VAR 0 3
66063: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66064: LD_INT 0
66066: PPUSH
// result := false ;
66067: LD_ADDR_VAR 0 4
66071: PUSH
66072: LD_INT 0
66074: ST_TO_ADDR
// if GetTaskList ( unit ) then
66075: LD_VAR 0 1
66079: PPUSH
66080: CALL_OW 437
66084: IFFALSE 66167
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66086: LD_STRING M
66088: PUSH
66089: LD_VAR 0 1
66093: PPUSH
66094: CALL_OW 437
66098: PUSH
66099: LD_INT 1
66101: ARRAY
66102: PUSH
66103: LD_INT 1
66105: ARRAY
66106: EQUAL
66107: PUSH
66108: LD_VAR 0 2
66112: PUSH
66113: LD_VAR 0 1
66117: PPUSH
66118: CALL_OW 437
66122: PUSH
66123: LD_INT 1
66125: ARRAY
66126: PUSH
66127: LD_INT 2
66129: ARRAY
66130: EQUAL
66131: AND
66132: PUSH
66133: LD_VAR 0 3
66137: PUSH
66138: LD_VAR 0 1
66142: PPUSH
66143: CALL_OW 437
66147: PUSH
66148: LD_INT 1
66150: ARRAY
66151: PUSH
66152: LD_INT 3
66154: ARRAY
66155: EQUAL
66156: AND
66157: IFFALSE 66167
// result := true ;
66159: LD_ADDR_VAR 0 4
66163: PUSH
66164: LD_INT 1
66166: ST_TO_ADDR
// end ; end ;
66167: LD_VAR 0 4
66171: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66172: LD_INT 0
66174: PPUSH
66175: PPUSH
66176: PPUSH
66177: PPUSH
// if not unit or not area then
66178: LD_VAR 0 1
66182: NOT
66183: PUSH
66184: LD_VAR 0 2
66188: NOT
66189: OR
66190: IFFALSE 66194
// exit ;
66192: GO 66358
// tmp := AreaToList ( area , i ) ;
66194: LD_ADDR_VAR 0 6
66198: PUSH
66199: LD_VAR 0 2
66203: PPUSH
66204: LD_VAR 0 5
66208: PPUSH
66209: CALL_OW 517
66213: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66214: LD_ADDR_VAR 0 5
66218: PUSH
66219: DOUBLE
66220: LD_INT 1
66222: DEC
66223: ST_TO_ADDR
66224: LD_VAR 0 6
66228: PUSH
66229: LD_INT 1
66231: ARRAY
66232: PUSH
66233: FOR_TO
66234: IFFALSE 66356
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66236: LD_ADDR_VAR 0 7
66240: PUSH
66241: LD_VAR 0 6
66245: PUSH
66246: LD_INT 1
66248: ARRAY
66249: PUSH
66250: LD_VAR 0 5
66254: ARRAY
66255: PUSH
66256: LD_VAR 0 6
66260: PUSH
66261: LD_INT 2
66263: ARRAY
66264: PUSH
66265: LD_VAR 0 5
66269: ARRAY
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66275: LD_VAR 0 7
66279: PUSH
66280: LD_INT 1
66282: ARRAY
66283: PPUSH
66284: LD_VAR 0 7
66288: PUSH
66289: LD_INT 2
66291: ARRAY
66292: PPUSH
66293: CALL_OW 428
66297: PUSH
66298: LD_INT 0
66300: EQUAL
66301: IFFALSE 66354
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66303: LD_VAR 0 1
66307: PPUSH
66308: LD_VAR 0 7
66312: PUSH
66313: LD_INT 1
66315: ARRAY
66316: PPUSH
66317: LD_VAR 0 7
66321: PUSH
66322: LD_INT 2
66324: ARRAY
66325: PPUSH
66326: LD_VAR 0 3
66330: PPUSH
66331: CALL_OW 48
// result := IsPlaced ( unit ) ;
66335: LD_ADDR_VAR 0 4
66339: PUSH
66340: LD_VAR 0 1
66344: PPUSH
66345: CALL_OW 305
66349: ST_TO_ADDR
// exit ;
66350: POP
66351: POP
66352: GO 66358
// end ; end ;
66354: GO 66233
66356: POP
66357: POP
// end ;
66358: LD_VAR 0 4
66362: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66363: LD_INT 0
66365: PPUSH
66366: PPUSH
66367: PPUSH
// if not side or side > 8 then
66368: LD_VAR 0 1
66372: NOT
66373: PUSH
66374: LD_VAR 0 1
66378: PUSH
66379: LD_INT 8
66381: GREATER
66382: OR
66383: IFFALSE 66387
// exit ;
66385: GO 66574
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66387: LD_ADDR_VAR 0 4
66391: PUSH
66392: LD_INT 22
66394: PUSH
66395: LD_VAR 0 1
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 21
66406: PUSH
66407: LD_INT 3
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PPUSH
66418: CALL_OW 69
66422: ST_TO_ADDR
// if not tmp then
66423: LD_VAR 0 4
66427: NOT
66428: IFFALSE 66432
// exit ;
66430: GO 66574
// enable_addtolog := true ;
66432: LD_ADDR_OWVAR 81
66436: PUSH
66437: LD_INT 1
66439: ST_TO_ADDR
// AddToLog ( [ ) ;
66440: LD_STRING [
66442: PPUSH
66443: CALL_OW 561
// for i in tmp do
66447: LD_ADDR_VAR 0 3
66451: PUSH
66452: LD_VAR 0 4
66456: PUSH
66457: FOR_IN
66458: IFFALSE 66565
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66460: LD_STRING [
66462: PUSH
66463: LD_VAR 0 3
66467: PPUSH
66468: CALL_OW 266
66472: STR
66473: PUSH
66474: LD_STRING , 
66476: STR
66477: PUSH
66478: LD_VAR 0 3
66482: PPUSH
66483: CALL_OW 250
66487: STR
66488: PUSH
66489: LD_STRING , 
66491: STR
66492: PUSH
66493: LD_VAR 0 3
66497: PPUSH
66498: CALL_OW 251
66502: STR
66503: PUSH
66504: LD_STRING , 
66506: STR
66507: PUSH
66508: LD_VAR 0 3
66512: PPUSH
66513: CALL_OW 254
66517: STR
66518: PUSH
66519: LD_STRING , 
66521: STR
66522: PUSH
66523: LD_VAR 0 3
66527: PPUSH
66528: LD_INT 1
66530: PPUSH
66531: CALL_OW 268
66535: STR
66536: PUSH
66537: LD_STRING , 
66539: STR
66540: PUSH
66541: LD_VAR 0 3
66545: PPUSH
66546: LD_INT 2
66548: PPUSH
66549: CALL_OW 268
66553: STR
66554: PUSH
66555: LD_STRING ],
66557: STR
66558: PPUSH
66559: CALL_OW 561
// end ;
66563: GO 66457
66565: POP
66566: POP
// AddToLog ( ]; ) ;
66567: LD_STRING ];
66569: PPUSH
66570: CALL_OW 561
// end ;
66574: LD_VAR 0 2
66578: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66579: LD_INT 0
66581: PPUSH
66582: PPUSH
66583: PPUSH
66584: PPUSH
66585: PPUSH
// if not area or not rate or not max then
66586: LD_VAR 0 1
66590: NOT
66591: PUSH
66592: LD_VAR 0 2
66596: NOT
66597: OR
66598: PUSH
66599: LD_VAR 0 4
66603: NOT
66604: OR
66605: IFFALSE 66609
// exit ;
66607: GO 66798
// while 1 do
66609: LD_INT 1
66611: IFFALSE 66798
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66613: LD_ADDR_VAR 0 9
66617: PUSH
66618: LD_VAR 0 1
66622: PPUSH
66623: LD_INT 1
66625: PPUSH
66626: CALL_OW 287
66630: PUSH
66631: LD_INT 10
66633: MUL
66634: ST_TO_ADDR
// r := rate / 10 ;
66635: LD_ADDR_VAR 0 7
66639: PUSH
66640: LD_VAR 0 2
66644: PUSH
66645: LD_INT 10
66647: DIVREAL
66648: ST_TO_ADDR
// time := 1 1$00 ;
66649: LD_ADDR_VAR 0 8
66653: PUSH
66654: LD_INT 2100
66656: ST_TO_ADDR
// if amount < min then
66657: LD_VAR 0 9
66661: PUSH
66662: LD_VAR 0 3
66666: LESS
66667: IFFALSE 66685
// r := r * 2 else
66669: LD_ADDR_VAR 0 7
66673: PUSH
66674: LD_VAR 0 7
66678: PUSH
66679: LD_INT 2
66681: MUL
66682: ST_TO_ADDR
66683: GO 66711
// if amount > max then
66685: LD_VAR 0 9
66689: PUSH
66690: LD_VAR 0 4
66694: GREATER
66695: IFFALSE 66711
// r := r / 2 ;
66697: LD_ADDR_VAR 0 7
66701: PUSH
66702: LD_VAR 0 7
66706: PUSH
66707: LD_INT 2
66709: DIVREAL
66710: ST_TO_ADDR
// time := time / r ;
66711: LD_ADDR_VAR 0 8
66715: PUSH
66716: LD_VAR 0 8
66720: PUSH
66721: LD_VAR 0 7
66725: DIVREAL
66726: ST_TO_ADDR
// if time < 0 then
66727: LD_VAR 0 8
66731: PUSH
66732: LD_INT 0
66734: LESS
66735: IFFALSE 66752
// time := time * - 1 ;
66737: LD_ADDR_VAR 0 8
66741: PUSH
66742: LD_VAR 0 8
66746: PUSH
66747: LD_INT 1
66749: NEG
66750: MUL
66751: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66752: LD_VAR 0 8
66756: PUSH
66757: LD_INT 35
66759: PPUSH
66760: LD_INT 875
66762: PPUSH
66763: CALL_OW 12
66767: PLUS
66768: PPUSH
66769: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66773: LD_INT 1
66775: PPUSH
66776: LD_INT 5
66778: PPUSH
66779: CALL_OW 12
66783: PPUSH
66784: LD_VAR 0 1
66788: PPUSH
66789: LD_INT 1
66791: PPUSH
66792: CALL_OW 55
// end ;
66796: GO 66609
// end ;
66798: LD_VAR 0 5
66802: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66803: LD_INT 0
66805: PPUSH
66806: PPUSH
66807: PPUSH
66808: PPUSH
66809: PPUSH
66810: PPUSH
66811: PPUSH
66812: PPUSH
// if not turrets or not factories then
66813: LD_VAR 0 1
66817: NOT
66818: PUSH
66819: LD_VAR 0 2
66823: NOT
66824: OR
66825: IFFALSE 66829
// exit ;
66827: GO 67136
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66829: LD_ADDR_VAR 0 10
66833: PUSH
66834: LD_INT 5
66836: PUSH
66837: LD_INT 6
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 2
66846: PUSH
66847: LD_INT 4
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 3
66856: PUSH
66857: LD_INT 5
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 24
66871: PUSH
66872: LD_INT 25
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 23
66881: PUSH
66882: LD_INT 27
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 42
66895: PUSH
66896: LD_INT 43
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 44
66905: PUSH
66906: LD_INT 46
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 45
66915: PUSH
66916: LD_INT 47
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: LIST
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: LIST
66932: ST_TO_ADDR
// result := [ ] ;
66933: LD_ADDR_VAR 0 3
66937: PUSH
66938: EMPTY
66939: ST_TO_ADDR
// for i in turrets do
66940: LD_ADDR_VAR 0 4
66944: PUSH
66945: LD_VAR 0 1
66949: PUSH
66950: FOR_IN
66951: IFFALSE 67134
// begin nat := GetNation ( i ) ;
66953: LD_ADDR_VAR 0 7
66957: PUSH
66958: LD_VAR 0 4
66962: PPUSH
66963: CALL_OW 248
66967: ST_TO_ADDR
// weapon := 0 ;
66968: LD_ADDR_VAR 0 8
66972: PUSH
66973: LD_INT 0
66975: ST_TO_ADDR
// if not nat then
66976: LD_VAR 0 7
66980: NOT
66981: IFFALSE 66985
// continue ;
66983: GO 66950
// for j in list [ nat ] do
66985: LD_ADDR_VAR 0 5
66989: PUSH
66990: LD_VAR 0 10
66994: PUSH
66995: LD_VAR 0 7
66999: ARRAY
67000: PUSH
67001: FOR_IN
67002: IFFALSE 67043
// if GetBWeapon ( i ) = j [ 1 ] then
67004: LD_VAR 0 4
67008: PPUSH
67009: CALL_OW 269
67013: PUSH
67014: LD_VAR 0 5
67018: PUSH
67019: LD_INT 1
67021: ARRAY
67022: EQUAL
67023: IFFALSE 67041
// begin weapon := j [ 2 ] ;
67025: LD_ADDR_VAR 0 8
67029: PUSH
67030: LD_VAR 0 5
67034: PUSH
67035: LD_INT 2
67037: ARRAY
67038: ST_TO_ADDR
// break ;
67039: GO 67043
// end ;
67041: GO 67001
67043: POP
67044: POP
// if not weapon then
67045: LD_VAR 0 8
67049: NOT
67050: IFFALSE 67054
// continue ;
67052: GO 66950
// for k in factories do
67054: LD_ADDR_VAR 0 6
67058: PUSH
67059: LD_VAR 0 2
67063: PUSH
67064: FOR_IN
67065: IFFALSE 67130
// begin weapons := AvailableWeaponList ( k ) ;
67067: LD_ADDR_VAR 0 9
67071: PUSH
67072: LD_VAR 0 6
67076: PPUSH
67077: CALL_OW 478
67081: ST_TO_ADDR
// if not weapons then
67082: LD_VAR 0 9
67086: NOT
67087: IFFALSE 67091
// continue ;
67089: GO 67064
// if weapon in weapons then
67091: LD_VAR 0 8
67095: PUSH
67096: LD_VAR 0 9
67100: IN
67101: IFFALSE 67128
// begin result := [ i , weapon ] ;
67103: LD_ADDR_VAR 0 3
67107: PUSH
67108: LD_VAR 0 4
67112: PUSH
67113: LD_VAR 0 8
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: ST_TO_ADDR
// exit ;
67122: POP
67123: POP
67124: POP
67125: POP
67126: GO 67136
// end ; end ;
67128: GO 67064
67130: POP
67131: POP
// end ;
67132: GO 66950
67134: POP
67135: POP
// end ;
67136: LD_VAR 0 3
67140: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67141: LD_INT 0
67143: PPUSH
// if not side or side > 8 then
67144: LD_VAR 0 3
67148: NOT
67149: PUSH
67150: LD_VAR 0 3
67154: PUSH
67155: LD_INT 8
67157: GREATER
67158: OR
67159: IFFALSE 67163
// exit ;
67161: GO 67222
// if not range then
67163: LD_VAR 0 4
67167: NOT
67168: IFFALSE 67179
// range := - 12 ;
67170: LD_ADDR_VAR 0 4
67174: PUSH
67175: LD_INT 12
67177: NEG
67178: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67179: LD_VAR 0 1
67183: PPUSH
67184: LD_VAR 0 2
67188: PPUSH
67189: LD_VAR 0 3
67193: PPUSH
67194: LD_VAR 0 4
67198: PPUSH
67199: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67203: LD_VAR 0 1
67207: PPUSH
67208: LD_VAR 0 2
67212: PPUSH
67213: LD_VAR 0 3
67217: PPUSH
67218: CALL_OW 331
// end ;
67222: LD_VAR 0 5
67226: RET
// export function Video ( mode ) ; begin
67227: LD_INT 0
67229: PPUSH
// ingame_video = mode ;
67230: LD_ADDR_OWVAR 52
67234: PUSH
67235: LD_VAR 0 1
67239: ST_TO_ADDR
// interface_hidden = mode ;
67240: LD_ADDR_OWVAR 54
67244: PUSH
67245: LD_VAR 0 1
67249: ST_TO_ADDR
// end ;
67250: LD_VAR 0 2
67254: RET
// export function Join ( array , element ) ; begin
67255: LD_INT 0
67257: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67258: LD_ADDR_VAR 0 3
67262: PUSH
67263: LD_VAR 0 1
67267: PPUSH
67268: LD_VAR 0 1
67272: PUSH
67273: LD_INT 1
67275: PLUS
67276: PPUSH
67277: LD_VAR 0 2
67281: PPUSH
67282: CALL_OW 1
67286: ST_TO_ADDR
// end ;
67287: LD_VAR 0 3
67291: RET
// export function JoinUnion ( array , element ) ; begin
67292: LD_INT 0
67294: PPUSH
// result := array union element ;
67295: LD_ADDR_VAR 0 3
67299: PUSH
67300: LD_VAR 0 1
67304: PUSH
67305: LD_VAR 0 2
67309: UNION
67310: ST_TO_ADDR
// end ;
67311: LD_VAR 0 3
67315: RET
// export function GetBehemoths ( side ) ; begin
67316: LD_INT 0
67318: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67319: LD_ADDR_VAR 0 2
67323: PUSH
67324: LD_INT 22
67326: PUSH
67327: LD_VAR 0 1
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 31
67338: PUSH
67339: LD_INT 25
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PPUSH
67350: CALL_OW 69
67354: ST_TO_ADDR
// end ;
67355: LD_VAR 0 2
67359: RET
// export function Shuffle ( array ) ; var i , index ; begin
67360: LD_INT 0
67362: PPUSH
67363: PPUSH
67364: PPUSH
// result := [ ] ;
67365: LD_ADDR_VAR 0 2
67369: PUSH
67370: EMPTY
67371: ST_TO_ADDR
// if not array then
67372: LD_VAR 0 1
67376: NOT
67377: IFFALSE 67381
// exit ;
67379: GO 67480
// Randomize ;
67381: CALL_OW 10
// for i = array downto 1 do
67385: LD_ADDR_VAR 0 3
67389: PUSH
67390: DOUBLE
67391: LD_VAR 0 1
67395: INC
67396: ST_TO_ADDR
67397: LD_INT 1
67399: PUSH
67400: FOR_DOWNTO
67401: IFFALSE 67478
// begin index := rand ( 1 , array ) ;
67403: LD_ADDR_VAR 0 4
67407: PUSH
67408: LD_INT 1
67410: PPUSH
67411: LD_VAR 0 1
67415: PPUSH
67416: CALL_OW 12
67420: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67421: LD_ADDR_VAR 0 2
67425: PUSH
67426: LD_VAR 0 2
67430: PPUSH
67431: LD_VAR 0 2
67435: PUSH
67436: LD_INT 1
67438: PLUS
67439: PPUSH
67440: LD_VAR 0 1
67444: PUSH
67445: LD_VAR 0 4
67449: ARRAY
67450: PPUSH
67451: CALL_OW 2
67455: ST_TO_ADDR
// array := Delete ( array , index ) ;
67456: LD_ADDR_VAR 0 1
67460: PUSH
67461: LD_VAR 0 1
67465: PPUSH
67466: LD_VAR 0 4
67470: PPUSH
67471: CALL_OW 3
67475: ST_TO_ADDR
// end ;
67476: GO 67400
67478: POP
67479: POP
// end ;
67480: LD_VAR 0 2
67484: RET
// export function GetBaseMaterials ( base ) ; begin
67485: LD_INT 0
67487: PPUSH
// result := [ 0 , 0 , 0 ] ;
67488: LD_ADDR_VAR 0 2
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: ST_TO_ADDR
// if not base then
67507: LD_VAR 0 1
67511: NOT
67512: IFFALSE 67516
// exit ;
67514: GO 67565
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67516: LD_ADDR_VAR 0 2
67520: PUSH
67521: LD_VAR 0 1
67525: PPUSH
67526: LD_INT 1
67528: PPUSH
67529: CALL_OW 275
67533: PUSH
67534: LD_VAR 0 1
67538: PPUSH
67539: LD_INT 2
67541: PPUSH
67542: CALL_OW 275
67546: PUSH
67547: LD_VAR 0 1
67551: PPUSH
67552: LD_INT 3
67554: PPUSH
67555: CALL_OW 275
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: LIST
67564: ST_TO_ADDR
// end ;
67565: LD_VAR 0 2
67569: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67570: LD_INT 0
67572: PPUSH
67573: PPUSH
// result := array ;
67574: LD_ADDR_VAR 0 3
67578: PUSH
67579: LD_VAR 0 1
67583: ST_TO_ADDR
// if size > 0 then
67584: LD_VAR 0 2
67588: PUSH
67589: LD_INT 0
67591: GREATER
67592: IFFALSE 67638
// for i := array downto size do
67594: LD_ADDR_VAR 0 4
67598: PUSH
67599: DOUBLE
67600: LD_VAR 0 1
67604: INC
67605: ST_TO_ADDR
67606: LD_VAR 0 2
67610: PUSH
67611: FOR_DOWNTO
67612: IFFALSE 67636
// result := Delete ( result , result ) ;
67614: LD_ADDR_VAR 0 3
67618: PUSH
67619: LD_VAR 0 3
67623: PPUSH
67624: LD_VAR 0 3
67628: PPUSH
67629: CALL_OW 3
67633: ST_TO_ADDR
67634: GO 67611
67636: POP
67637: POP
// end ;
67638: LD_VAR 0 3
67642: RET
// export function ComExit ( unit ) ; var tmp ; begin
67643: LD_INT 0
67645: PPUSH
67646: PPUSH
// if not IsInUnit ( unit ) then
67647: LD_VAR 0 1
67651: PPUSH
67652: CALL_OW 310
67656: NOT
67657: IFFALSE 67661
// exit ;
67659: GO 67721
// tmp := IsInUnit ( unit ) ;
67661: LD_ADDR_VAR 0 3
67665: PUSH
67666: LD_VAR 0 1
67670: PPUSH
67671: CALL_OW 310
67675: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67676: LD_VAR 0 3
67680: PPUSH
67681: CALL_OW 247
67685: PUSH
67686: LD_INT 2
67688: EQUAL
67689: IFFALSE 67702
// ComExitVehicle ( unit ) else
67691: LD_VAR 0 1
67695: PPUSH
67696: CALL_OW 121
67700: GO 67711
// ComExitBuilding ( unit ) ;
67702: LD_VAR 0 1
67706: PPUSH
67707: CALL_OW 122
// result := tmp ;
67711: LD_ADDR_VAR 0 2
67715: PUSH
67716: LD_VAR 0 3
67720: ST_TO_ADDR
// end ;
67721: LD_VAR 0 2
67725: RET
// export function ComExitAll ( units ) ; var i ; begin
67726: LD_INT 0
67728: PPUSH
67729: PPUSH
// if not units then
67730: LD_VAR 0 1
67734: NOT
67735: IFFALSE 67739
// exit ;
67737: GO 67765
// for i in units do
67739: LD_ADDR_VAR 0 3
67743: PUSH
67744: LD_VAR 0 1
67748: PUSH
67749: FOR_IN
67750: IFFALSE 67763
// ComExit ( i ) ;
67752: LD_VAR 0 3
67756: PPUSH
67757: CALL 67643 0 1
67761: GO 67749
67763: POP
67764: POP
// end ;
67765: LD_VAR 0 2
67769: RET
// export function ResetHc ; begin
67770: LD_INT 0
67772: PPUSH
// InitHc ;
67773: CALL_OW 19
// hc_importance := 0 ;
67777: LD_ADDR_OWVAR 32
67781: PUSH
67782: LD_INT 0
67784: ST_TO_ADDR
// end ;
67785: LD_VAR 0 1
67789: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67790: LD_INT 0
67792: PPUSH
67793: PPUSH
67794: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67795: LD_ADDR_VAR 0 6
67799: PUSH
67800: LD_VAR 0 1
67804: PUSH
67805: LD_VAR 0 3
67809: PLUS
67810: PUSH
67811: LD_INT 2
67813: DIV
67814: ST_TO_ADDR
// if _x < 0 then
67815: LD_VAR 0 6
67819: PUSH
67820: LD_INT 0
67822: LESS
67823: IFFALSE 67840
// _x := _x * - 1 ;
67825: LD_ADDR_VAR 0 6
67829: PUSH
67830: LD_VAR 0 6
67834: PUSH
67835: LD_INT 1
67837: NEG
67838: MUL
67839: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67840: LD_ADDR_VAR 0 7
67844: PUSH
67845: LD_VAR 0 2
67849: PUSH
67850: LD_VAR 0 4
67854: PLUS
67855: PUSH
67856: LD_INT 2
67858: DIV
67859: ST_TO_ADDR
// if _y < 0 then
67860: LD_VAR 0 7
67864: PUSH
67865: LD_INT 0
67867: LESS
67868: IFFALSE 67885
// _y := _y * - 1 ;
67870: LD_ADDR_VAR 0 7
67874: PUSH
67875: LD_VAR 0 7
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: MUL
67884: ST_TO_ADDR
// result := [ _x , _y ] ;
67885: LD_ADDR_VAR 0 5
67889: PUSH
67890: LD_VAR 0 6
67894: PUSH
67895: LD_VAR 0 7
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: ST_TO_ADDR
// end ;
67904: LD_VAR 0 5
67908: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67909: LD_INT 0
67911: PPUSH
67912: PPUSH
67913: PPUSH
67914: PPUSH
// task := GetTaskList ( unit ) ;
67915: LD_ADDR_VAR 0 7
67919: PUSH
67920: LD_VAR 0 1
67924: PPUSH
67925: CALL_OW 437
67929: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67930: LD_VAR 0 7
67934: NOT
67935: PUSH
67936: LD_VAR 0 1
67940: PPUSH
67941: LD_VAR 0 2
67945: PPUSH
67946: CALL_OW 308
67950: NOT
67951: AND
67952: IFFALSE 67956
// exit ;
67954: GO 68074
// if IsInArea ( unit , area ) then
67956: LD_VAR 0 1
67960: PPUSH
67961: LD_VAR 0 2
67965: PPUSH
67966: CALL_OW 308
67970: IFFALSE 67988
// begin ComMoveToArea ( unit , goAway ) ;
67972: LD_VAR 0 1
67976: PPUSH
67977: LD_VAR 0 3
67981: PPUSH
67982: CALL_OW 113
// exit ;
67986: GO 68074
// end ; if task [ 1 ] [ 1 ] <> M then
67988: LD_VAR 0 7
67992: PUSH
67993: LD_INT 1
67995: ARRAY
67996: PUSH
67997: LD_INT 1
67999: ARRAY
68000: PUSH
68001: LD_STRING M
68003: NONEQUAL
68004: IFFALSE 68008
// exit ;
68006: GO 68074
// x := task [ 1 ] [ 2 ] ;
68008: LD_ADDR_VAR 0 5
68012: PUSH
68013: LD_VAR 0 7
68017: PUSH
68018: LD_INT 1
68020: ARRAY
68021: PUSH
68022: LD_INT 2
68024: ARRAY
68025: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68026: LD_ADDR_VAR 0 6
68030: PUSH
68031: LD_VAR 0 7
68035: PUSH
68036: LD_INT 1
68038: ARRAY
68039: PUSH
68040: LD_INT 3
68042: ARRAY
68043: ST_TO_ADDR
// if InArea ( x , y , area ) then
68044: LD_VAR 0 5
68048: PPUSH
68049: LD_VAR 0 6
68053: PPUSH
68054: LD_VAR 0 2
68058: PPUSH
68059: CALL_OW 309
68063: IFFALSE 68074
// ComStop ( unit ) ;
68065: LD_VAR 0 1
68069: PPUSH
68070: CALL_OW 141
// end ;
68074: LD_VAR 0 4
68078: RET
// export function Abs ( value ) ; begin
68079: LD_INT 0
68081: PPUSH
// result := value ;
68082: LD_ADDR_VAR 0 2
68086: PUSH
68087: LD_VAR 0 1
68091: ST_TO_ADDR
// if value < 0 then
68092: LD_VAR 0 1
68096: PUSH
68097: LD_INT 0
68099: LESS
68100: IFFALSE 68117
// result := value * - 1 ;
68102: LD_ADDR_VAR 0 2
68106: PUSH
68107: LD_VAR 0 1
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: MUL
68116: ST_TO_ADDR
// end ;
68117: LD_VAR 0 2
68121: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68122: LD_INT 0
68124: PPUSH
68125: PPUSH
68126: PPUSH
68127: PPUSH
68128: PPUSH
68129: PPUSH
68130: PPUSH
68131: PPUSH
// if not unit or not building then
68132: LD_VAR 0 1
68136: NOT
68137: PUSH
68138: LD_VAR 0 2
68142: NOT
68143: OR
68144: IFFALSE 68148
// exit ;
68146: GO 68374
// x := GetX ( building ) ;
68148: LD_ADDR_VAR 0 4
68152: PUSH
68153: LD_VAR 0 2
68157: PPUSH
68158: CALL_OW 250
68162: ST_TO_ADDR
// y := GetY ( building ) ;
68163: LD_ADDR_VAR 0 6
68167: PUSH
68168: LD_VAR 0 2
68172: PPUSH
68173: CALL_OW 251
68177: ST_TO_ADDR
// d := GetDir ( building ) ;
68178: LD_ADDR_VAR 0 8
68182: PUSH
68183: LD_VAR 0 2
68187: PPUSH
68188: CALL_OW 254
68192: ST_TO_ADDR
// r := 4 ;
68193: LD_ADDR_VAR 0 9
68197: PUSH
68198: LD_INT 4
68200: ST_TO_ADDR
// for i := 1 to 5 do
68201: LD_ADDR_VAR 0 10
68205: PUSH
68206: DOUBLE
68207: LD_INT 1
68209: DEC
68210: ST_TO_ADDR
68211: LD_INT 5
68213: PUSH
68214: FOR_TO
68215: IFFALSE 68372
// begin _x := ShiftX ( x , d , r + i ) ;
68217: LD_ADDR_VAR 0 5
68221: PUSH
68222: LD_VAR 0 4
68226: PPUSH
68227: LD_VAR 0 8
68231: PPUSH
68232: LD_VAR 0 9
68236: PUSH
68237: LD_VAR 0 10
68241: PLUS
68242: PPUSH
68243: CALL_OW 272
68247: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68248: LD_ADDR_VAR 0 7
68252: PUSH
68253: LD_VAR 0 6
68257: PPUSH
68258: LD_VAR 0 8
68262: PPUSH
68263: LD_VAR 0 9
68267: PUSH
68268: LD_VAR 0 10
68272: PLUS
68273: PPUSH
68274: CALL_OW 273
68278: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68279: LD_VAR 0 5
68283: PPUSH
68284: LD_VAR 0 7
68288: PPUSH
68289: CALL_OW 488
68293: PUSH
68294: LD_VAR 0 5
68298: PPUSH
68299: LD_VAR 0 7
68303: PPUSH
68304: CALL_OW 428
68308: PPUSH
68309: CALL_OW 247
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: LD_INT 2
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: IN
68324: NOT
68325: AND
68326: IFFALSE 68370
// begin ComMoveXY ( unit , _x , _y ) ;
68328: LD_VAR 0 1
68332: PPUSH
68333: LD_VAR 0 5
68337: PPUSH
68338: LD_VAR 0 7
68342: PPUSH
68343: CALL_OW 111
// result := [ _x , _y ] ;
68347: LD_ADDR_VAR 0 3
68351: PUSH
68352: LD_VAR 0 5
68356: PUSH
68357: LD_VAR 0 7
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: ST_TO_ADDR
// exit ;
68366: POP
68367: POP
68368: GO 68374
// end ; end ;
68370: GO 68214
68372: POP
68373: POP
// end ;
68374: LD_VAR 0 3
68378: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68379: LD_INT 0
68381: PPUSH
68382: PPUSH
68383: PPUSH
// result := 0 ;
68384: LD_ADDR_VAR 0 3
68388: PUSH
68389: LD_INT 0
68391: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68392: LD_VAR 0 1
68396: PUSH
68397: LD_INT 0
68399: LESS
68400: PUSH
68401: LD_VAR 0 1
68405: PUSH
68406: LD_INT 8
68408: GREATER
68409: OR
68410: PUSH
68411: LD_VAR 0 2
68415: PUSH
68416: LD_INT 0
68418: LESS
68419: OR
68420: PUSH
68421: LD_VAR 0 2
68425: PUSH
68426: LD_INT 8
68428: GREATER
68429: OR
68430: IFFALSE 68434
// exit ;
68432: GO 68509
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68434: LD_ADDR_VAR 0 4
68438: PUSH
68439: LD_INT 22
68441: PUSH
68442: LD_VAR 0 2
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PPUSH
68451: CALL_OW 69
68455: PUSH
68456: FOR_IN
68457: IFFALSE 68507
// begin un := UnitShoot ( i ) ;
68459: LD_ADDR_VAR 0 5
68463: PUSH
68464: LD_VAR 0 4
68468: PPUSH
68469: CALL_OW 504
68473: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68474: LD_VAR 0 5
68478: PPUSH
68479: CALL_OW 255
68483: PUSH
68484: LD_VAR 0 1
68488: EQUAL
68489: IFFALSE 68505
// begin result := un ;
68491: LD_ADDR_VAR 0 3
68495: PUSH
68496: LD_VAR 0 5
68500: ST_TO_ADDR
// exit ;
68501: POP
68502: POP
68503: GO 68509
// end ; end ;
68505: GO 68456
68507: POP
68508: POP
// end ;
68509: LD_VAR 0 3
68513: RET
// export function GetCargoBay ( units ) ; begin
68514: LD_INT 0
68516: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68517: LD_ADDR_VAR 0 2
68521: PUSH
68522: LD_VAR 0 1
68526: PPUSH
68527: LD_INT 2
68529: PUSH
68530: LD_INT 34
68532: PUSH
68533: LD_INT 12
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 34
68542: PUSH
68543: LD_INT 51
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 34
68552: PUSH
68553: LD_INT 32
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 34
68562: PUSH
68563: LD_EXP 22
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: PPUSH
68579: CALL_OW 72
68583: ST_TO_ADDR
// end ;
68584: LD_VAR 0 2
68588: RET
// export function Negate ( value ) ; begin
68589: LD_INT 0
68591: PPUSH
// result := not value ;
68592: LD_ADDR_VAR 0 2
68596: PUSH
68597: LD_VAR 0 1
68601: NOT
68602: ST_TO_ADDR
// end ;
68603: LD_VAR 0 2
68607: RET
// export function Inc ( value ) ; begin
68608: LD_INT 0
68610: PPUSH
// result := value + 1 ;
68611: LD_ADDR_VAR 0 2
68615: PUSH
68616: LD_VAR 0 1
68620: PUSH
68621: LD_INT 1
68623: PLUS
68624: ST_TO_ADDR
// end ;
68625: LD_VAR 0 2
68629: RET
// export function Dec ( value ) ; begin
68630: LD_INT 0
68632: PPUSH
// result := value - 1 ;
68633: LD_ADDR_VAR 0 2
68637: PUSH
68638: LD_VAR 0 1
68642: PUSH
68643: LD_INT 1
68645: MINUS
68646: ST_TO_ADDR
// end ;
68647: LD_VAR 0 2
68651: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68652: LD_INT 0
68654: PPUSH
68655: PPUSH
68656: PPUSH
68657: PPUSH
68658: PPUSH
68659: PPUSH
68660: PPUSH
68661: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68662: LD_VAR 0 1
68666: PPUSH
68667: LD_VAR 0 2
68671: PPUSH
68672: CALL_OW 488
68676: NOT
68677: PUSH
68678: LD_VAR 0 3
68682: PPUSH
68683: LD_VAR 0 4
68687: PPUSH
68688: CALL_OW 488
68692: NOT
68693: OR
68694: IFFALSE 68707
// begin result := - 1 ;
68696: LD_ADDR_VAR 0 5
68700: PUSH
68701: LD_INT 1
68703: NEG
68704: ST_TO_ADDR
// exit ;
68705: GO 68942
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68707: LD_ADDR_VAR 0 12
68711: PUSH
68712: LD_VAR 0 1
68716: PPUSH
68717: LD_VAR 0 2
68721: PPUSH
68722: LD_VAR 0 3
68726: PPUSH
68727: LD_VAR 0 4
68731: PPUSH
68732: CALL 67790 0 4
68736: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68737: LD_ADDR_VAR 0 11
68741: PUSH
68742: LD_VAR 0 1
68746: PPUSH
68747: LD_VAR 0 2
68751: PPUSH
68752: LD_VAR 0 12
68756: PUSH
68757: LD_INT 1
68759: ARRAY
68760: PPUSH
68761: LD_VAR 0 12
68765: PUSH
68766: LD_INT 2
68768: ARRAY
68769: PPUSH
68770: CALL_OW 298
68774: ST_TO_ADDR
// distance := 9999 ;
68775: LD_ADDR_VAR 0 10
68779: PUSH
68780: LD_INT 9999
68782: ST_TO_ADDR
// for i := 0 to 5 do
68783: LD_ADDR_VAR 0 6
68787: PUSH
68788: DOUBLE
68789: LD_INT 0
68791: DEC
68792: ST_TO_ADDR
68793: LD_INT 5
68795: PUSH
68796: FOR_TO
68797: IFFALSE 68940
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68799: LD_ADDR_VAR 0 7
68803: PUSH
68804: LD_VAR 0 1
68808: PPUSH
68809: LD_VAR 0 6
68813: PPUSH
68814: LD_VAR 0 11
68818: PPUSH
68819: CALL_OW 272
68823: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68824: LD_ADDR_VAR 0 8
68828: PUSH
68829: LD_VAR 0 2
68833: PPUSH
68834: LD_VAR 0 6
68838: PPUSH
68839: LD_VAR 0 11
68843: PPUSH
68844: CALL_OW 273
68848: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68849: LD_VAR 0 7
68853: PPUSH
68854: LD_VAR 0 8
68858: PPUSH
68859: CALL_OW 488
68863: NOT
68864: IFFALSE 68868
// continue ;
68866: GO 68796
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68868: LD_ADDR_VAR 0 9
68872: PUSH
68873: LD_VAR 0 12
68877: PUSH
68878: LD_INT 1
68880: ARRAY
68881: PPUSH
68882: LD_VAR 0 12
68886: PUSH
68887: LD_INT 2
68889: ARRAY
68890: PPUSH
68891: LD_VAR 0 7
68895: PPUSH
68896: LD_VAR 0 8
68900: PPUSH
68901: CALL_OW 298
68905: ST_TO_ADDR
// if tmp < distance then
68906: LD_VAR 0 9
68910: PUSH
68911: LD_VAR 0 10
68915: LESS
68916: IFFALSE 68938
// begin result := i ;
68918: LD_ADDR_VAR 0 5
68922: PUSH
68923: LD_VAR 0 6
68927: ST_TO_ADDR
// distance := tmp ;
68928: LD_ADDR_VAR 0 10
68932: PUSH
68933: LD_VAR 0 9
68937: ST_TO_ADDR
// end ; end ;
68938: GO 68796
68940: POP
68941: POP
// end ;
68942: LD_VAR 0 5
68946: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68947: LD_INT 0
68949: PPUSH
68950: PPUSH
// if not driver or not IsInUnit ( driver ) then
68951: LD_VAR 0 1
68955: NOT
68956: PUSH
68957: LD_VAR 0 1
68961: PPUSH
68962: CALL_OW 310
68966: NOT
68967: OR
68968: IFFALSE 68972
// exit ;
68970: GO 69062
// vehicle := IsInUnit ( driver ) ;
68972: LD_ADDR_VAR 0 3
68976: PUSH
68977: LD_VAR 0 1
68981: PPUSH
68982: CALL_OW 310
68986: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68987: LD_VAR 0 1
68991: PPUSH
68992: LD_STRING \
68994: PUSH
68995: LD_INT 0
68997: PUSH
68998: LD_INT 0
69000: PUSH
69001: LD_INT 0
69003: PUSH
69004: LD_INT 0
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: PUSH
69022: LD_STRING E
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: LD_VAR 0 3
69035: PUSH
69036: LD_INT 0
69038: PUSH
69039: LD_INT 0
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PPUSH
69058: CALL_OW 446
// end ;
69062: LD_VAR 0 2
69066: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69067: LD_INT 0
69069: PPUSH
69070: PPUSH
// if not driver or not IsInUnit ( driver ) then
69071: LD_VAR 0 1
69075: NOT
69076: PUSH
69077: LD_VAR 0 1
69081: PPUSH
69082: CALL_OW 310
69086: NOT
69087: OR
69088: IFFALSE 69092
// exit ;
69090: GO 69182
// vehicle := IsInUnit ( driver ) ;
69092: LD_ADDR_VAR 0 3
69096: PUSH
69097: LD_VAR 0 1
69101: PPUSH
69102: CALL_OW 310
69106: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69107: LD_VAR 0 1
69111: PPUSH
69112: LD_STRING \
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: LD_INT 0
69120: PUSH
69121: LD_INT 0
69123: PUSH
69124: LD_INT 0
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: LD_INT 0
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: PUSH
69142: LD_STRING E
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: LD_VAR 0 3
69155: PUSH
69156: LD_INT 0
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PPUSH
69178: CALL_OW 447
// end ;
69182: LD_VAR 0 2
69186: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69187: LD_INT 0
69189: PPUSH
69190: PPUSH
69191: PPUSH
// tmp := [ ] ;
69192: LD_ADDR_VAR 0 5
69196: PUSH
69197: EMPTY
69198: ST_TO_ADDR
// for i in units do
69199: LD_ADDR_VAR 0 4
69203: PUSH
69204: LD_VAR 0 1
69208: PUSH
69209: FOR_IN
69210: IFFALSE 69248
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69212: LD_ADDR_VAR 0 5
69216: PUSH
69217: LD_VAR 0 5
69221: PPUSH
69222: LD_VAR 0 5
69226: PUSH
69227: LD_INT 1
69229: PLUS
69230: PPUSH
69231: LD_VAR 0 4
69235: PPUSH
69236: CALL_OW 256
69240: PPUSH
69241: CALL_OW 2
69245: ST_TO_ADDR
69246: GO 69209
69248: POP
69249: POP
// if not tmp then
69250: LD_VAR 0 5
69254: NOT
69255: IFFALSE 69259
// exit ;
69257: GO 69307
// if asc then
69259: LD_VAR 0 2
69263: IFFALSE 69287
// result := SortListByListAsc ( units , tmp ) else
69265: LD_ADDR_VAR 0 3
69269: PUSH
69270: LD_VAR 0 1
69274: PPUSH
69275: LD_VAR 0 5
69279: PPUSH
69280: CALL_OW 76
69284: ST_TO_ADDR
69285: GO 69307
// result := SortListByListDesc ( units , tmp ) ;
69287: LD_ADDR_VAR 0 3
69291: PUSH
69292: LD_VAR 0 1
69296: PPUSH
69297: LD_VAR 0 5
69301: PPUSH
69302: CALL_OW 77
69306: ST_TO_ADDR
// end ;
69307: LD_VAR 0 3
69311: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69312: LD_INT 0
69314: PPUSH
69315: PPUSH
// task := GetTaskList ( mech ) ;
69316: LD_ADDR_VAR 0 4
69320: PUSH
69321: LD_VAR 0 1
69325: PPUSH
69326: CALL_OW 437
69330: ST_TO_ADDR
// if not task then
69331: LD_VAR 0 4
69335: NOT
69336: IFFALSE 69340
// exit ;
69338: GO 69382
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69340: LD_ADDR_VAR 0 3
69344: PUSH
69345: LD_VAR 0 4
69349: PUSH
69350: LD_INT 1
69352: ARRAY
69353: PUSH
69354: LD_INT 1
69356: ARRAY
69357: PUSH
69358: LD_STRING r
69360: EQUAL
69361: PUSH
69362: LD_VAR 0 4
69366: PUSH
69367: LD_INT 1
69369: ARRAY
69370: PUSH
69371: LD_INT 4
69373: ARRAY
69374: PUSH
69375: LD_VAR 0 2
69379: EQUAL
69380: AND
69381: ST_TO_ADDR
// end ;
69382: LD_VAR 0 3
69386: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69387: LD_INT 0
69389: PPUSH
// SetDir ( unit , d ) ;
69390: LD_VAR 0 1
69394: PPUSH
69395: LD_VAR 0 4
69399: PPUSH
69400: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69404: LD_VAR 0 1
69408: PPUSH
69409: LD_VAR 0 2
69413: PPUSH
69414: LD_VAR 0 3
69418: PPUSH
69419: LD_VAR 0 5
69423: PPUSH
69424: CALL_OW 48
// end ;
69428: LD_VAR 0 6
69432: RET
// export function ToNaturalNumber ( number ) ; begin
69433: LD_INT 0
69435: PPUSH
// result := number div 1 ;
69436: LD_ADDR_VAR 0 2
69440: PUSH
69441: LD_VAR 0 1
69445: PUSH
69446: LD_INT 1
69448: DIV
69449: ST_TO_ADDR
// if number < 0 then
69450: LD_VAR 0 1
69454: PUSH
69455: LD_INT 0
69457: LESS
69458: IFFALSE 69468
// result := 0 ;
69460: LD_ADDR_VAR 0 2
69464: PUSH
69465: LD_INT 0
69467: ST_TO_ADDR
// end ;
69468: LD_VAR 0 2
69472: RET
// export function SortByClass ( units , class ) ; var un ; begin
69473: LD_INT 0
69475: PPUSH
69476: PPUSH
// if not units or not class then
69477: LD_VAR 0 1
69481: NOT
69482: PUSH
69483: LD_VAR 0 2
69487: NOT
69488: OR
69489: IFFALSE 69493
// exit ;
69491: GO 69588
// result := [ ] ;
69493: LD_ADDR_VAR 0 3
69497: PUSH
69498: EMPTY
69499: ST_TO_ADDR
// for un in units do
69500: LD_ADDR_VAR 0 4
69504: PUSH
69505: LD_VAR 0 1
69509: PUSH
69510: FOR_IN
69511: IFFALSE 69586
// if GetClass ( un ) = class then
69513: LD_VAR 0 4
69517: PPUSH
69518: CALL_OW 257
69522: PUSH
69523: LD_VAR 0 2
69527: EQUAL
69528: IFFALSE 69555
// result := Insert ( result , 1 , un ) else
69530: LD_ADDR_VAR 0 3
69534: PUSH
69535: LD_VAR 0 3
69539: PPUSH
69540: LD_INT 1
69542: PPUSH
69543: LD_VAR 0 4
69547: PPUSH
69548: CALL_OW 2
69552: ST_TO_ADDR
69553: GO 69584
// result := Replace ( result , result + 1 , un ) ;
69555: LD_ADDR_VAR 0 3
69559: PUSH
69560: LD_VAR 0 3
69564: PPUSH
69565: LD_VAR 0 3
69569: PUSH
69570: LD_INT 1
69572: PLUS
69573: PPUSH
69574: LD_VAR 0 4
69578: PPUSH
69579: CALL_OW 1
69583: ST_TO_ADDR
69584: GO 69510
69586: POP
69587: POP
// end ;
69588: LD_VAR 0 3
69592: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69593: LD_INT 0
69595: PPUSH
69596: PPUSH
69597: PPUSH
69598: PPUSH
69599: PPUSH
69600: PPUSH
69601: PPUSH
// result := [ ] ;
69602: LD_ADDR_VAR 0 4
69606: PUSH
69607: EMPTY
69608: ST_TO_ADDR
// if x - r < 0 then
69609: LD_VAR 0 1
69613: PUSH
69614: LD_VAR 0 3
69618: MINUS
69619: PUSH
69620: LD_INT 0
69622: LESS
69623: IFFALSE 69635
// min_x := 0 else
69625: LD_ADDR_VAR 0 8
69629: PUSH
69630: LD_INT 0
69632: ST_TO_ADDR
69633: GO 69651
// min_x := x - r ;
69635: LD_ADDR_VAR 0 8
69639: PUSH
69640: LD_VAR 0 1
69644: PUSH
69645: LD_VAR 0 3
69649: MINUS
69650: ST_TO_ADDR
// if y - r < 0 then
69651: LD_VAR 0 2
69655: PUSH
69656: LD_VAR 0 3
69660: MINUS
69661: PUSH
69662: LD_INT 0
69664: LESS
69665: IFFALSE 69677
// min_y := 0 else
69667: LD_ADDR_VAR 0 7
69671: PUSH
69672: LD_INT 0
69674: ST_TO_ADDR
69675: GO 69693
// min_y := y - r ;
69677: LD_ADDR_VAR 0 7
69681: PUSH
69682: LD_VAR 0 2
69686: PUSH
69687: LD_VAR 0 3
69691: MINUS
69692: ST_TO_ADDR
// max_x := x + r ;
69693: LD_ADDR_VAR 0 9
69697: PUSH
69698: LD_VAR 0 1
69702: PUSH
69703: LD_VAR 0 3
69707: PLUS
69708: ST_TO_ADDR
// max_y := y + r ;
69709: LD_ADDR_VAR 0 10
69713: PUSH
69714: LD_VAR 0 2
69718: PUSH
69719: LD_VAR 0 3
69723: PLUS
69724: ST_TO_ADDR
// for _x = min_x to max_x do
69725: LD_ADDR_VAR 0 5
69729: PUSH
69730: DOUBLE
69731: LD_VAR 0 8
69735: DEC
69736: ST_TO_ADDR
69737: LD_VAR 0 9
69741: PUSH
69742: FOR_TO
69743: IFFALSE 69844
// for _y = min_y to max_y do
69745: LD_ADDR_VAR 0 6
69749: PUSH
69750: DOUBLE
69751: LD_VAR 0 7
69755: DEC
69756: ST_TO_ADDR
69757: LD_VAR 0 10
69761: PUSH
69762: FOR_TO
69763: IFFALSE 69840
// begin if not ValidHex ( _x , _y ) then
69765: LD_VAR 0 5
69769: PPUSH
69770: LD_VAR 0 6
69774: PPUSH
69775: CALL_OW 488
69779: NOT
69780: IFFALSE 69784
// continue ;
69782: GO 69762
// if GetResourceTypeXY ( _x , _y ) then
69784: LD_VAR 0 5
69788: PPUSH
69789: LD_VAR 0 6
69793: PPUSH
69794: CALL_OW 283
69798: IFFALSE 69838
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69800: LD_ADDR_VAR 0 4
69804: PUSH
69805: LD_VAR 0 4
69809: PPUSH
69810: LD_VAR 0 4
69814: PUSH
69815: LD_INT 1
69817: PLUS
69818: PPUSH
69819: LD_VAR 0 5
69823: PUSH
69824: LD_VAR 0 6
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PPUSH
69833: CALL_OW 1
69837: ST_TO_ADDR
// end ;
69838: GO 69762
69840: POP
69841: POP
69842: GO 69742
69844: POP
69845: POP
// end ;
69846: LD_VAR 0 4
69850: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69851: LD_INT 0
69853: PPUSH
69854: PPUSH
69855: PPUSH
69856: PPUSH
69857: PPUSH
69858: PPUSH
69859: PPUSH
69860: PPUSH
// if not units then
69861: LD_VAR 0 1
69865: NOT
69866: IFFALSE 69870
// exit ;
69868: GO 70295
// result := UnitFilter ( units , [ f_ok ] ) ;
69870: LD_ADDR_VAR 0 3
69874: PUSH
69875: LD_VAR 0 1
69879: PPUSH
69880: LD_INT 50
69882: PUSH
69883: EMPTY
69884: LIST
69885: PPUSH
69886: CALL_OW 72
69890: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69891: LD_ADDR_VAR 0 8
69895: PUSH
69896: LD_VAR 0 1
69900: PUSH
69901: LD_INT 1
69903: ARRAY
69904: PPUSH
69905: CALL_OW 255
69909: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69910: LD_ADDR_VAR 0 10
69914: PUSH
69915: LD_INT 29
69917: PUSH
69918: LD_EXP 25
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: ST_TO_ADDR
// if not result then
69927: LD_VAR 0 3
69931: NOT
69932: IFFALSE 69936
// exit ;
69934: GO 70295
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69936: LD_ADDR_VAR 0 5
69940: PUSH
69941: LD_INT 81
69943: PUSH
69944: LD_VAR 0 8
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PPUSH
69953: CALL_OW 69
69957: ST_TO_ADDR
// for i in result do
69958: LD_ADDR_VAR 0 4
69962: PUSH
69963: LD_VAR 0 3
69967: PUSH
69968: FOR_IN
69969: IFFALSE 70293
// begin tag := GetTag ( i ) + 1 ;
69971: LD_ADDR_VAR 0 9
69975: PUSH
69976: LD_VAR 0 4
69980: PPUSH
69981: CALL_OW 110
69985: PUSH
69986: LD_INT 1
69988: PLUS
69989: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69990: LD_ADDR_VAR 0 7
69994: PUSH
69995: LD_VAR 0 4
69999: PPUSH
70000: CALL_OW 250
70004: PPUSH
70005: LD_VAR 0 4
70009: PPUSH
70010: CALL_OW 251
70014: PPUSH
70015: LD_INT 6
70017: PPUSH
70018: CALL 69593 0 3
70022: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70023: LD_VAR 0 7
70027: PUSH
70028: LD_VAR 0 4
70032: PPUSH
70033: CALL_OW 264
70037: PUSH
70038: LD_VAR 0 10
70042: IN
70043: NOT
70044: AND
70045: IFFALSE 70084
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70047: LD_VAR 0 4
70051: PPUSH
70052: LD_VAR 0 7
70056: PUSH
70057: LD_INT 1
70059: ARRAY
70060: PUSH
70061: LD_INT 1
70063: ARRAY
70064: PPUSH
70065: LD_VAR 0 7
70069: PUSH
70070: LD_INT 1
70072: ARRAY
70073: PUSH
70074: LD_INT 2
70076: ARRAY
70077: PPUSH
70078: CALL_OW 116
70082: GO 70291
// if path > tag then
70084: LD_VAR 0 2
70088: PUSH
70089: LD_VAR 0 9
70093: GREATER
70094: IFFALSE 70261
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
70096: LD_ADDR_VAR 0 6
70100: PUSH
70101: LD_VAR 0 5
70105: PPUSH
70106: LD_INT 91
70108: PUSH
70109: LD_VAR 0 4
70113: PUSH
70114: LD_INT 12
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: LIST
70121: PPUSH
70122: CALL_OW 72
70126: ST_TO_ADDR
// if nearEnemy then
70127: LD_VAR 0 6
70131: IFFALSE 70159
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70133: LD_VAR 0 4
70137: PPUSH
70138: LD_VAR 0 6
70142: PPUSH
70143: LD_VAR 0 4
70147: PPUSH
70148: CALL_OW 74
70152: PPUSH
70153: CALL_OW 115
70157: GO 70259
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70159: LD_VAR 0 4
70163: PPUSH
70164: LD_VAR 0 2
70168: PUSH
70169: LD_VAR 0 9
70173: ARRAY
70174: PUSH
70175: LD_INT 1
70177: ARRAY
70178: PPUSH
70179: LD_VAR 0 2
70183: PUSH
70184: LD_VAR 0 9
70188: ARRAY
70189: PUSH
70190: LD_INT 2
70192: ARRAY
70193: PPUSH
70194: CALL_OW 297
70198: PUSH
70199: LD_INT 6
70201: GREATER
70202: IFFALSE 70245
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70204: LD_VAR 0 4
70208: PPUSH
70209: LD_VAR 0 2
70213: PUSH
70214: LD_VAR 0 9
70218: ARRAY
70219: PUSH
70220: LD_INT 1
70222: ARRAY
70223: PPUSH
70224: LD_VAR 0 2
70228: PUSH
70229: LD_VAR 0 9
70233: ARRAY
70234: PUSH
70235: LD_INT 2
70237: ARRAY
70238: PPUSH
70239: CALL_OW 114
70243: GO 70259
// SetTag ( i , tag ) ;
70245: LD_VAR 0 4
70249: PPUSH
70250: LD_VAR 0 9
70254: PPUSH
70255: CALL_OW 109
// end else
70259: GO 70291
// if enemy then
70261: LD_VAR 0 5
70265: IFFALSE 70291
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70267: LD_VAR 0 4
70271: PPUSH
70272: LD_VAR 0 5
70276: PPUSH
70277: LD_VAR 0 4
70281: PPUSH
70282: CALL_OW 74
70286: PPUSH
70287: CALL_OW 115
// end ;
70291: GO 69968
70293: POP
70294: POP
// end ;
70295: LD_VAR 0 3
70299: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70300: LD_INT 0
70302: PPUSH
70303: PPUSH
70304: PPUSH
// if not unit or IsInUnit ( unit ) then
70305: LD_VAR 0 1
70309: NOT
70310: PUSH
70311: LD_VAR 0 1
70315: PPUSH
70316: CALL_OW 310
70320: OR
70321: IFFALSE 70325
// exit ;
70323: GO 70416
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70325: LD_ADDR_VAR 0 4
70329: PUSH
70330: LD_VAR 0 1
70334: PPUSH
70335: CALL_OW 250
70339: PPUSH
70340: LD_VAR 0 2
70344: PPUSH
70345: LD_INT 1
70347: PPUSH
70348: CALL_OW 272
70352: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70353: LD_ADDR_VAR 0 5
70357: PUSH
70358: LD_VAR 0 1
70362: PPUSH
70363: CALL_OW 251
70367: PPUSH
70368: LD_VAR 0 2
70372: PPUSH
70373: LD_INT 1
70375: PPUSH
70376: CALL_OW 273
70380: ST_TO_ADDR
// if ValidHex ( x , y ) then
70381: LD_VAR 0 4
70385: PPUSH
70386: LD_VAR 0 5
70390: PPUSH
70391: CALL_OW 488
70395: IFFALSE 70416
// ComTurnXY ( unit , x , y ) ;
70397: LD_VAR 0 1
70401: PPUSH
70402: LD_VAR 0 4
70406: PPUSH
70407: LD_VAR 0 5
70411: PPUSH
70412: CALL_OW 118
// end ;
70416: LD_VAR 0 3
70420: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70421: LD_INT 0
70423: PPUSH
70424: PPUSH
// result := false ;
70425: LD_ADDR_VAR 0 3
70429: PUSH
70430: LD_INT 0
70432: ST_TO_ADDR
// if not units then
70433: LD_VAR 0 2
70437: NOT
70438: IFFALSE 70442
// exit ;
70440: GO 70487
// for i in units do
70442: LD_ADDR_VAR 0 4
70446: PUSH
70447: LD_VAR 0 2
70451: PUSH
70452: FOR_IN
70453: IFFALSE 70485
// if See ( side , i ) then
70455: LD_VAR 0 1
70459: PPUSH
70460: LD_VAR 0 4
70464: PPUSH
70465: CALL_OW 292
70469: IFFALSE 70483
// begin result := true ;
70471: LD_ADDR_VAR 0 3
70475: PUSH
70476: LD_INT 1
70478: ST_TO_ADDR
// exit ;
70479: POP
70480: POP
70481: GO 70487
// end ;
70483: GO 70452
70485: POP
70486: POP
// end ;
70487: LD_VAR 0 3
70491: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70492: LD_INT 0
70494: PPUSH
70495: PPUSH
70496: PPUSH
70497: PPUSH
// if not unit or not points then
70498: LD_VAR 0 1
70502: NOT
70503: PUSH
70504: LD_VAR 0 2
70508: NOT
70509: OR
70510: IFFALSE 70514
// exit ;
70512: GO 70604
// dist := 99999 ;
70514: LD_ADDR_VAR 0 5
70518: PUSH
70519: LD_INT 99999
70521: ST_TO_ADDR
// for i in points do
70522: LD_ADDR_VAR 0 4
70526: PUSH
70527: LD_VAR 0 2
70531: PUSH
70532: FOR_IN
70533: IFFALSE 70602
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70535: LD_ADDR_VAR 0 6
70539: PUSH
70540: LD_VAR 0 1
70544: PPUSH
70545: LD_VAR 0 4
70549: PUSH
70550: LD_INT 1
70552: ARRAY
70553: PPUSH
70554: LD_VAR 0 4
70558: PUSH
70559: LD_INT 2
70561: ARRAY
70562: PPUSH
70563: CALL_OW 297
70567: ST_TO_ADDR
// if tmpDist < dist then
70568: LD_VAR 0 6
70572: PUSH
70573: LD_VAR 0 5
70577: LESS
70578: IFFALSE 70600
// begin result := i ;
70580: LD_ADDR_VAR 0 3
70584: PUSH
70585: LD_VAR 0 4
70589: ST_TO_ADDR
// dist := tmpDist ;
70590: LD_ADDR_VAR 0 5
70594: PUSH
70595: LD_VAR 0 6
70599: ST_TO_ADDR
// end ; end ;
70600: GO 70532
70602: POP
70603: POP
// end ; end_of_file
70604: LD_VAR 0 3
70608: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70609: LD_VAR 0 1
70613: PUSH
70614: LD_INT 200
70616: DOUBLE
70617: GREATEREQUAL
70618: IFFALSE 70626
70620: LD_INT 299
70622: DOUBLE
70623: LESSEQUAL
70624: IFTRUE 70628
70626: GO 70660
70628: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70629: LD_VAR 0 1
70633: PPUSH
70634: LD_VAR 0 2
70638: PPUSH
70639: LD_VAR 0 3
70643: PPUSH
70644: LD_VAR 0 4
70648: PPUSH
70649: LD_VAR 0 5
70653: PPUSH
70654: CALL 26312 0 5
70658: GO 70737
70660: LD_INT 300
70662: DOUBLE
70663: GREATEREQUAL
70664: IFFALSE 70672
70666: LD_INT 399
70668: DOUBLE
70669: LESSEQUAL
70670: IFTRUE 70674
70672: GO 70736
70674: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70675: LD_VAR 0 1
70679: PPUSH
70680: LD_VAR 0 2
70684: PPUSH
70685: LD_VAR 0 3
70689: PPUSH
70690: LD_VAR 0 4
70694: PPUSH
70695: LD_VAR 0 5
70699: PPUSH
70700: LD_VAR 0 6
70704: PPUSH
70705: LD_VAR 0 7
70709: PPUSH
70710: LD_VAR 0 8
70714: PPUSH
70715: LD_VAR 0 9
70719: PPUSH
70720: LD_VAR 0 10
70724: PPUSH
70725: LD_VAR 0 11
70729: PPUSH
70730: CALL 23954 0 11
70734: GO 70737
70736: POP
// end ;
70737: PPOPN 11
70739: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70740: LD_VAR 0 1
70744: PPUSH
70745: LD_VAR 0 2
70749: PPUSH
70750: LD_VAR 0 3
70754: PPUSH
70755: LD_VAR 0 4
70759: PPUSH
70760: LD_VAR 0 5
70764: PPUSH
70765: CALL 26048 0 5
// end ; end_of_file
70769: PPOPN 5
70771: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70772: LD_VAR 0 1
70776: PPUSH
70777: LD_VAR 0 2
70781: PPUSH
70782: LD_VAR 0 3
70786: PPUSH
70787: LD_VAR 0 4
70791: PPUSH
70792: LD_VAR 0 5
70796: PPUSH
70797: LD_VAR 0 6
70801: PPUSH
70802: CALL 11647 0 6
// end ;
70806: PPOPN 6
70808: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70809: CALL 11622 0 0
// end ;
70813: PPOPN 1
70815: END
