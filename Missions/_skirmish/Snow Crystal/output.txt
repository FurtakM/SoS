// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: IFFALSE 10654
// YouLost ( jota-lose ) ;
10647: LD_STRING jota-lose
10649: PPUSH
10650: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10654: LD_EXP 1
10658: PUSH
10659: LD_INT 2
10661: EQUAL
10662: PUSH
10663: LD_EXP 8
10667: PUSH
10668: LD_INT 0
10670: EQUAL
10671: AND
10672: IFFALSE 10987
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 255
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: LD_INT 11
10695: PPUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 70
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 10
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 30
10746: PUSH
10747: LD_INT 8
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: DIFF
10778: IN
10779: AND
10780: IFFALSE 10866
// begin ai_build := ai_build ^ GetBType ( un ) ;
10782: LD_ADDR_EXP 10
10786: PUSH
10787: LD_EXP 10
10791: PUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 266
10801: ADD
10802: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10803: LD_ADDR_EXP 10
10807: PUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 250
10822: ADD
10823: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10824: LD_ADDR_EXP 10
10828: PUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 251
10843: ADD
10844: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10845: LD_ADDR_EXP 10
10849: PUSH
10850: LD_EXP 10
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 254
10864: ADD
10865: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 255
10875: PUSH
10876: LD_INT 1
10878: EQUAL
10879: PUSH
10880: LD_VAR 0 1
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: IN
10900: AND
10901: IFFALSE 10987
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10903: LD_ADDR_EXP 11
10907: PUSH
10908: LD_EXP 11
10912: PUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 265
10922: ADD
10923: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10924: LD_ADDR_EXP 11
10928: PUSH
10929: LD_EXP 11
10933: PUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 262
10943: ADD
10944: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10945: LD_ADDR_EXP 11
10949: PUSH
10950: LD_EXP 11
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: CALL_OW 263
10964: ADD
10965: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10966: LD_ADDR_EXP 11
10970: PUSH
10971: LD_EXP 11
10975: PUSH
10976: LD_VAR 0 1
10980: PPUSH
10981: CALL_OW 264
10985: ADD
10986: ST_TO_ADDR
// end ; end ; end ;
10987: PPOPN 1
10989: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10990: LD_EXP 1
10994: PUSH
10995: LD_INT 1
10997: EQUAL
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PUSH
11028: LD_INT 0
11030: EQUAL
11031: AND
11032: IFFALSE 11044
11034: GO 11036
11036: DISABLE
// YouLost ( peo-lose ) ;
11037: LD_STRING peo-lose
11039: PPUSH
11040: CALL_OW 104
11044: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11045: LD_EXP 1
11049: PUSH
11050: LD_INT 2
11052: EQUAL
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: PUSH
11083: LD_INT 0
11085: EQUAL
11086: AND
11087: IFFALSE 11099
11089: GO 11091
11091: DISABLE
// YouLost ( peo-lose ) ;
11092: LD_STRING peo-lose
11094: PPUSH
11095: CALL_OW 104
11099: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
11100: LD_OWVAR 2
11104: PPUSH
11105: CALL 10510 0 1
11109: PUSH
11110: LD_EXP 5
11114: GREATEREQUAL
11115: IFFALSE 11201
11117: GO 11119
11119: DISABLE
11120: LD_INT 0
11122: PPUSH
// begin if GetSide ( jota_base ) = your_side then
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 255
11130: PUSH
11131: LD_OWVAR 2
11135: EQUAL
11136: IFFALSE 11179
// begin for i = 1 to 3 do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: DOUBLE
11144: LD_INT 1
11146: DEC
11147: ST_TO_ADDR
11148: LD_INT 3
11150: PUSH
11151: FOR_TO
11152: IFFALSE 11166
// AddMedal ( med , 1 ) ;
11154: LD_STRING med
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 101
11164: GO 11151
11166: POP
11167: POP
// GiveMedals ( MAIN ) ;
11168: LD_STRING MAIN
11170: PPUSH
11171: CALL_OW 102
// YouWin ;
11175: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: LD_OWVAR 2
11191: NONEQUAL
11192: IFFALSE 11201
// YouLost ( source ) ;
11194: LD_STRING source
11196: PPUSH
11197: CALL_OW 104
// end ; end_of_file
11201: PPOPN 1
11203: END
// every 2 2$05 + 0 0$11 do
11204: GO 11206
11206: DISABLE
// begin enable ;
11207: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11208: LD_INT 1
11210: PPUSH
11211: LD_INT 5
11213: PPUSH
11214: CALL_OW 12
11218: PPUSH
11219: LD_INT 7
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11229: LD_INT 350
11231: PPUSH
11232: LD_INT 1295
11234: PPUSH
11235: CALL_OW 12
11239: PPUSH
11240: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 5
11249: PPUSH
11250: CALL_OW 12
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 57
// end ;
11262: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11263: LD_EXP 1
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: PUSH
11272: LD_EXP 8
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: AND
11281: IFFALSE 11371
11283: GO 11285
11285: DISABLE
// begin enable ;
11286: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 7
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11308: LD_INT 350
11310: PPUSH
11311: LD_INT 1750
11313: PPUSH
11314: CALL_OW 12
11318: PPUSH
11319: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11323: LD_EXP 6
11327: PUSH
11328: LD_INT 73500
11330: PUSH
11331: LD_INT 63000
11333: PUSH
11334: LD_INT 52500
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_EXP 2
11346: ARRAY
11347: LESSEQUAL
11348: IFFALSE 11371
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 5
11355: PPUSH
11356: CALL_OW 12
11360: PPUSH
11361: LD_INT 12
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 55
// end ; end_of_file
11371: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: CALL 24815 0 3
// end ;
11391: PPOPN 3
11393: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL 24823 0 1
// end ; end_of_file
11403: PPOPN 1
11405: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11406: LD_INT 0
11408: PPUSH
// ar_miner := 81 ;
11409: LD_ADDR_EXP 28
11413: PUSH
11414: LD_INT 81
11416: ST_TO_ADDR
// ar_crane := 88 ;
11417: LD_ADDR_EXP 27
11421: PUSH
11422: LD_INT 88
11424: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11425: LD_ADDR_EXP 22
11429: PUSH
11430: LD_INT 89
11432: ST_TO_ADDR
// us_hack := 99 ;
11433: LD_ADDR_EXP 23
11437: PUSH
11438: LD_INT 99
11440: ST_TO_ADDR
// us_artillery := 97 ;
11441: LD_ADDR_EXP 24
11445: PUSH
11446: LD_INT 97
11448: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11449: LD_ADDR_EXP 25
11453: PUSH
11454: LD_INT 91
11456: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11457: LD_ADDR_EXP 26
11461: PUSH
11462: LD_INT 92
11464: ST_TO_ADDR
// ru_radar := 98 ;
11465: LD_ADDR_EXP 21
11469: PUSH
11470: LD_INT 98
11472: ST_TO_ADDR
// tech_Artillery := 80 ;
11473: LD_ADDR_EXP 29
11477: PUSH
11478: LD_INT 80
11480: ST_TO_ADDR
// tech_RadMat := 81 ;
11481: LD_ADDR_EXP 30
11485: PUSH
11486: LD_INT 81
11488: ST_TO_ADDR
// tech_BasicTools := 82 ;
11489: LD_ADDR_EXP 31
11493: PUSH
11494: LD_INT 82
11496: ST_TO_ADDR
// tech_Cargo := 83 ;
11497: LD_ADDR_EXP 32
11501: PUSH
11502: LD_INT 83
11504: ST_TO_ADDR
// tech_Track := 84 ;
11505: LD_ADDR_EXP 33
11509: PUSH
11510: LD_INT 84
11512: ST_TO_ADDR
// tech_Crane := 85 ;
11513: LD_ADDR_EXP 34
11517: PUSH
11518: LD_INT 85
11520: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11521: LD_ADDR_EXP 35
11525: PUSH
11526: LD_INT 86
11528: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11529: LD_ADDR_EXP 36
11533: PUSH
11534: LD_INT 87
11536: ST_TO_ADDR
// end ;
11537: LD_VAR 0 1
11541: RET
// every 1 do
11542: GO 11544
11544: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11545: CALL 11406 0 0
11549: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11550: LD_VAR 0 2
11554: PUSH
11555: LD_INT 100
11557: EQUAL
11558: IFFALSE 12507
// begin if not StreamModeActive then
11560: LD_EXP 37
11564: NOT
11565: IFFALSE 11575
// StreamModeActive := true ;
11567: LD_ADDR_EXP 37
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
// if p3 = 0 then
11575: LD_VAR 0 3
11579: PUSH
11580: LD_INT 0
11582: EQUAL
11583: IFFALSE 11589
// InitStreamMode ;
11585: CALL 12665 0 0
// if p3 = 1 then
11589: LD_VAR 0 3
11593: PUSH
11594: LD_INT 1
11596: EQUAL
11597: IFFALSE 11607
// sRocket := true ;
11599: LD_ADDR_EXP 42
11603: PUSH
11604: LD_INT 1
11606: ST_TO_ADDR
// if p3 = 2 then
11607: LD_VAR 0 3
11611: PUSH
11612: LD_INT 2
11614: EQUAL
11615: IFFALSE 11625
// sSpeed := true ;
11617: LD_ADDR_EXP 41
11621: PUSH
11622: LD_INT 1
11624: ST_TO_ADDR
// if p3 = 3 then
11625: LD_VAR 0 3
11629: PUSH
11630: LD_INT 3
11632: EQUAL
11633: IFFALSE 11643
// sEngine := true ;
11635: LD_ADDR_EXP 43
11639: PUSH
11640: LD_INT 1
11642: ST_TO_ADDR
// if p3 = 4 then
11643: LD_VAR 0 3
11647: PUSH
11648: LD_INT 4
11650: EQUAL
11651: IFFALSE 11661
// sSpec := true ;
11653: LD_ADDR_EXP 40
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// if p3 = 5 then
11661: LD_VAR 0 3
11665: PUSH
11666: LD_INT 5
11668: EQUAL
11669: IFFALSE 11679
// sLevel := true ;
11671: LD_ADDR_EXP 44
11675: PUSH
11676: LD_INT 1
11678: ST_TO_ADDR
// if p3 = 6 then
11679: LD_VAR 0 3
11683: PUSH
11684: LD_INT 6
11686: EQUAL
11687: IFFALSE 11697
// sArmoury := true ;
11689: LD_ADDR_EXP 45
11693: PUSH
11694: LD_INT 1
11696: ST_TO_ADDR
// if p3 = 7 then
11697: LD_VAR 0 3
11701: PUSH
11702: LD_INT 7
11704: EQUAL
11705: IFFALSE 11715
// sRadar := true ;
11707: LD_ADDR_EXP 46
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// if p3 = 8 then
11715: LD_VAR 0 3
11719: PUSH
11720: LD_INT 8
11722: EQUAL
11723: IFFALSE 11733
// sBunker := true ;
11725: LD_ADDR_EXP 47
11729: PUSH
11730: LD_INT 1
11732: ST_TO_ADDR
// if p3 = 9 then
11733: LD_VAR 0 3
11737: PUSH
11738: LD_INT 9
11740: EQUAL
11741: IFFALSE 11751
// sHack := true ;
11743: LD_ADDR_EXP 48
11747: PUSH
11748: LD_INT 1
11750: ST_TO_ADDR
// if p3 = 10 then
11751: LD_VAR 0 3
11755: PUSH
11756: LD_INT 10
11758: EQUAL
11759: IFFALSE 11769
// sFire := true ;
11761: LD_ADDR_EXP 49
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// if p3 = 11 then
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 11
11776: EQUAL
11777: IFFALSE 11787
// sRefresh := true ;
11779: LD_ADDR_EXP 50
11783: PUSH
11784: LD_INT 1
11786: ST_TO_ADDR
// if p3 = 12 then
11787: LD_VAR 0 3
11791: PUSH
11792: LD_INT 12
11794: EQUAL
11795: IFFALSE 11805
// sExp := true ;
11797: LD_ADDR_EXP 51
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// if p3 = 13 then
11805: LD_VAR 0 3
11809: PUSH
11810: LD_INT 13
11812: EQUAL
11813: IFFALSE 11823
// sDepot := true ;
11815: LD_ADDR_EXP 52
11819: PUSH
11820: LD_INT 1
11822: ST_TO_ADDR
// if p3 = 14 then
11823: LD_VAR 0 3
11827: PUSH
11828: LD_INT 14
11830: EQUAL
11831: IFFALSE 11841
// sFlag := true ;
11833: LD_ADDR_EXP 53
11837: PUSH
11838: LD_INT 1
11840: ST_TO_ADDR
// if p3 = 15 then
11841: LD_VAR 0 3
11845: PUSH
11846: LD_INT 15
11848: EQUAL
11849: IFFALSE 11859
// sKamikadze := true ;
11851: LD_ADDR_EXP 61
11855: PUSH
11856: LD_INT 1
11858: ST_TO_ADDR
// if p3 = 16 then
11859: LD_VAR 0 3
11863: PUSH
11864: LD_INT 16
11866: EQUAL
11867: IFFALSE 11877
// sTroll := true ;
11869: LD_ADDR_EXP 62
11873: PUSH
11874: LD_INT 1
11876: ST_TO_ADDR
// if p3 = 17 then
11877: LD_VAR 0 3
11881: PUSH
11882: LD_INT 17
11884: EQUAL
11885: IFFALSE 11895
// sSlow := true ;
11887: LD_ADDR_EXP 63
11891: PUSH
11892: LD_INT 1
11894: ST_TO_ADDR
// if p3 = 18 then
11895: LD_VAR 0 3
11899: PUSH
11900: LD_INT 18
11902: EQUAL
11903: IFFALSE 11913
// sLack := true ;
11905: LD_ADDR_EXP 64
11909: PUSH
11910: LD_INT 1
11912: ST_TO_ADDR
// if p3 = 19 then
11913: LD_VAR 0 3
11917: PUSH
11918: LD_INT 19
11920: EQUAL
11921: IFFALSE 11931
// sTank := true ;
11923: LD_ADDR_EXP 66
11927: PUSH
11928: LD_INT 1
11930: ST_TO_ADDR
// if p3 = 20 then
11931: LD_VAR 0 3
11935: PUSH
11936: LD_INT 20
11938: EQUAL
11939: IFFALSE 11949
// sRemote := true ;
11941: LD_ADDR_EXP 67
11945: PUSH
11946: LD_INT 1
11948: ST_TO_ADDR
// if p3 = 21 then
11949: LD_VAR 0 3
11953: PUSH
11954: LD_INT 21
11956: EQUAL
11957: IFFALSE 11967
// sPowell := true ;
11959: LD_ADDR_EXP 68
11963: PUSH
11964: LD_INT 1
11966: ST_TO_ADDR
// if p3 = 22 then
11967: LD_VAR 0 3
11971: PUSH
11972: LD_INT 22
11974: EQUAL
11975: IFFALSE 11985
// sTeleport := true ;
11977: LD_ADDR_EXP 71
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// if p3 = 23 then
11985: LD_VAR 0 3
11989: PUSH
11990: LD_INT 23
11992: EQUAL
11993: IFFALSE 12003
// sOilTower := true ;
11995: LD_ADDR_EXP 73
11999: PUSH
12000: LD_INT 1
12002: ST_TO_ADDR
// if p3 = 24 then
12003: LD_VAR 0 3
12007: PUSH
12008: LD_INT 24
12010: EQUAL
12011: IFFALSE 12021
// sShovel := true ;
12013: LD_ADDR_EXP 74
12017: PUSH
12018: LD_INT 1
12020: ST_TO_ADDR
// if p3 = 25 then
12021: LD_VAR 0 3
12025: PUSH
12026: LD_INT 25
12028: EQUAL
12029: IFFALSE 12039
// sSheik := true ;
12031: LD_ADDR_EXP 75
12035: PUSH
12036: LD_INT 1
12038: ST_TO_ADDR
// if p3 = 26 then
12039: LD_VAR 0 3
12043: PUSH
12044: LD_INT 26
12046: EQUAL
12047: IFFALSE 12057
// sEarthquake := true ;
12049: LD_ADDR_EXP 77
12053: PUSH
12054: LD_INT 1
12056: ST_TO_ADDR
// if p3 = 27 then
12057: LD_VAR 0 3
12061: PUSH
12062: LD_INT 27
12064: EQUAL
12065: IFFALSE 12075
// sAI := true ;
12067: LD_ADDR_EXP 78
12071: PUSH
12072: LD_INT 1
12074: ST_TO_ADDR
// if p3 = 28 then
12075: LD_VAR 0 3
12079: PUSH
12080: LD_INT 28
12082: EQUAL
12083: IFFALSE 12093
// sCargo := true ;
12085: LD_ADDR_EXP 81
12089: PUSH
12090: LD_INT 1
12092: ST_TO_ADDR
// if p3 = 29 then
12093: LD_VAR 0 3
12097: PUSH
12098: LD_INT 29
12100: EQUAL
12101: IFFALSE 12111
// sDLaser := true ;
12103: LD_ADDR_EXP 82
12107: PUSH
12108: LD_INT 1
12110: ST_TO_ADDR
// if p3 = 30 then
12111: LD_VAR 0 3
12115: PUSH
12116: LD_INT 30
12118: EQUAL
12119: IFFALSE 12129
// sExchange := true ;
12121: LD_ADDR_EXP 83
12125: PUSH
12126: LD_INT 1
12128: ST_TO_ADDR
// if p3 = 31 then
12129: LD_VAR 0 3
12133: PUSH
12134: LD_INT 31
12136: EQUAL
12137: IFFALSE 12147
// sFac := true ;
12139: LD_ADDR_EXP 84
12143: PUSH
12144: LD_INT 1
12146: ST_TO_ADDR
// if p3 = 32 then
12147: LD_VAR 0 3
12151: PUSH
12152: LD_INT 32
12154: EQUAL
12155: IFFALSE 12165
// sPower := true ;
12157: LD_ADDR_EXP 85
12161: PUSH
12162: LD_INT 1
12164: ST_TO_ADDR
// if p3 = 33 then
12165: LD_VAR 0 3
12169: PUSH
12170: LD_INT 33
12172: EQUAL
12173: IFFALSE 12183
// sRandom := true ;
12175: LD_ADDR_EXP 86
12179: PUSH
12180: LD_INT 1
12182: ST_TO_ADDR
// if p3 = 34 then
12183: LD_VAR 0 3
12187: PUSH
12188: LD_INT 34
12190: EQUAL
12191: IFFALSE 12201
// sShield := true ;
12193: LD_ADDR_EXP 87
12197: PUSH
12198: LD_INT 1
12200: ST_TO_ADDR
// if p3 = 35 then
12201: LD_VAR 0 3
12205: PUSH
12206: LD_INT 35
12208: EQUAL
12209: IFFALSE 12219
// sTime := true ;
12211: LD_ADDR_EXP 88
12215: PUSH
12216: LD_INT 1
12218: ST_TO_ADDR
// if p3 = 36 then
12219: LD_VAR 0 3
12223: PUSH
12224: LD_INT 36
12226: EQUAL
12227: IFFALSE 12237
// sTools := true ;
12229: LD_ADDR_EXP 89
12233: PUSH
12234: LD_INT 1
12236: ST_TO_ADDR
// if p3 = 101 then
12237: LD_VAR 0 3
12241: PUSH
12242: LD_INT 101
12244: EQUAL
12245: IFFALSE 12255
// sSold := true ;
12247: LD_ADDR_EXP 54
12251: PUSH
12252: LD_INT 1
12254: ST_TO_ADDR
// if p3 = 102 then
12255: LD_VAR 0 3
12259: PUSH
12260: LD_INT 102
12262: EQUAL
12263: IFFALSE 12273
// sDiff := true ;
12265: LD_ADDR_EXP 55
12269: PUSH
12270: LD_INT 1
12272: ST_TO_ADDR
// if p3 = 103 then
12273: LD_VAR 0 3
12277: PUSH
12278: LD_INT 103
12280: EQUAL
12281: IFFALSE 12291
// sFog := true ;
12283: LD_ADDR_EXP 58
12287: PUSH
12288: LD_INT 1
12290: ST_TO_ADDR
// if p3 = 104 then
12291: LD_VAR 0 3
12295: PUSH
12296: LD_INT 104
12298: EQUAL
12299: IFFALSE 12309
// sReset := true ;
12301: LD_ADDR_EXP 59
12305: PUSH
12306: LD_INT 1
12308: ST_TO_ADDR
// if p3 = 105 then
12309: LD_VAR 0 3
12313: PUSH
12314: LD_INT 105
12316: EQUAL
12317: IFFALSE 12327
// sSun := true ;
12319: LD_ADDR_EXP 60
12323: PUSH
12324: LD_INT 1
12326: ST_TO_ADDR
// if p3 = 106 then
12327: LD_VAR 0 3
12331: PUSH
12332: LD_INT 106
12334: EQUAL
12335: IFFALSE 12345
// sTiger := true ;
12337: LD_ADDR_EXP 56
12341: PUSH
12342: LD_INT 1
12344: ST_TO_ADDR
// if p3 = 107 then
12345: LD_VAR 0 3
12349: PUSH
12350: LD_INT 107
12352: EQUAL
12353: IFFALSE 12363
// sBomb := true ;
12355: LD_ADDR_EXP 57
12359: PUSH
12360: LD_INT 1
12362: ST_TO_ADDR
// if p3 = 108 then
12363: LD_VAR 0 3
12367: PUSH
12368: LD_INT 108
12370: EQUAL
12371: IFFALSE 12381
// sWound := true ;
12373: LD_ADDR_EXP 65
12377: PUSH
12378: LD_INT 1
12380: ST_TO_ADDR
// if p3 = 109 then
12381: LD_VAR 0 3
12385: PUSH
12386: LD_INT 109
12388: EQUAL
12389: IFFALSE 12399
// sBetray := true ;
12391: LD_ADDR_EXP 69
12395: PUSH
12396: LD_INT 1
12398: ST_TO_ADDR
// if p3 = 110 then
12399: LD_VAR 0 3
12403: PUSH
12404: LD_INT 110
12406: EQUAL
12407: IFFALSE 12417
// sContamin := true ;
12409: LD_ADDR_EXP 70
12413: PUSH
12414: LD_INT 1
12416: ST_TO_ADDR
// if p3 = 111 then
12417: LD_VAR 0 3
12421: PUSH
12422: LD_INT 111
12424: EQUAL
12425: IFFALSE 12435
// sOil := true ;
12427: LD_ADDR_EXP 72
12431: PUSH
12432: LD_INT 1
12434: ST_TO_ADDR
// if p3 = 112 then
12435: LD_VAR 0 3
12439: PUSH
12440: LD_INT 112
12442: EQUAL
12443: IFFALSE 12453
// sStu := true ;
12445: LD_ADDR_EXP 76
12449: PUSH
12450: LD_INT 1
12452: ST_TO_ADDR
// if p3 = 113 then
12453: LD_VAR 0 3
12457: PUSH
12458: LD_INT 113
12460: EQUAL
12461: IFFALSE 12471
// sBazooka := true ;
12463: LD_ADDR_EXP 79
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
// if p3 = 114 then
12471: LD_VAR 0 3
12475: PUSH
12476: LD_INT 114
12478: EQUAL
12479: IFFALSE 12489
// sMortar := true ;
12481: LD_ADDR_EXP 80
12485: PUSH
12486: LD_INT 1
12488: ST_TO_ADDR
// if p3 = 115 then
12489: LD_VAR 0 3
12493: PUSH
12494: LD_INT 115
12496: EQUAL
12497: IFFALSE 12507
// sRanger := true ;
12499: LD_ADDR_EXP 90
12503: PUSH
12504: LD_INT 1
12506: ST_TO_ADDR
// end ; if p2 = 101 then
12507: LD_VAR 0 2
12511: PUSH
12512: LD_INT 101
12514: EQUAL
12515: IFFALSE 12643
// begin case p3 of 1 :
12517: LD_VAR 0 3
12521: PUSH
12522: LD_INT 1
12524: DOUBLE
12525: EQUAL
12526: IFTRUE 12530
12528: GO 12537
12530: POP
// hHackUnlimitedResources ; 2 :
12531: CALL 23678 0 0
12535: GO 12643
12537: LD_INT 2
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 12552
12545: POP
// hHackSetLevel10 ; 3 :
12546: CALL 23811 0 0
12550: GO 12643
12552: LD_INT 3
12554: DOUBLE
12555: EQUAL
12556: IFTRUE 12560
12558: GO 12567
12560: POP
// hHackSetLevel10YourUnits ; 4 :
12561: CALL 23896 0 0
12565: GO 12643
12567: LD_INT 4
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12582
12575: POP
// hHackInvincible ; 5 :
12576: CALL 24344 0 0
12580: GO 12643
12582: LD_INT 5
12584: DOUBLE
12585: EQUAL
12586: IFTRUE 12590
12588: GO 12597
12590: POP
// hHackInvisible ; 6 :
12591: CALL 24455 0 0
12595: GO 12643
12597: LD_INT 6
12599: DOUBLE
12600: EQUAL
12601: IFTRUE 12605
12603: GO 12612
12605: POP
// hHackChangeYourSide ; 7 :
12606: CALL 24512 0 0
12610: GO 12643
12612: LD_INT 7
12614: DOUBLE
12615: EQUAL
12616: IFTRUE 12620
12618: GO 12627
12620: POP
// hHackChangeUnitSide ; 8 :
12621: CALL 24554 0 0
12625: GO 12643
12627: LD_INT 8
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12642
12635: POP
// hHackFog ; end ;
12636: CALL 24655 0 0
12640: GO 12643
12642: POP
// end ; end ;
12643: PPOPN 6
12645: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12646: GO 12648
12648: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12649: LD_STRING initStreamRollete();
12651: PPUSH
12652: CALL_OW 559
// InitStreamMode ;
12656: CALL 12665 0 0
// DefineStreamItems ( ) ;
12660: CALL 13105 0 0
// end ;
12664: END
// function InitStreamMode ; begin
12665: LD_INT 0
12667: PPUSH
// streamModeActive := false ;
12668: LD_ADDR_EXP 37
12672: PUSH
12673: LD_INT 0
12675: ST_TO_ADDR
// normalCounter := 36 ;
12676: LD_ADDR_EXP 38
12680: PUSH
12681: LD_INT 36
12683: ST_TO_ADDR
// hardcoreCounter := 16 ;
12684: LD_ADDR_EXP 39
12688: PUSH
12689: LD_INT 16
12691: ST_TO_ADDR
// sRocket := false ;
12692: LD_ADDR_EXP 42
12696: PUSH
12697: LD_INT 0
12699: ST_TO_ADDR
// sSpeed := false ;
12700: LD_ADDR_EXP 41
12704: PUSH
12705: LD_INT 0
12707: ST_TO_ADDR
// sEngine := false ;
12708: LD_ADDR_EXP 43
12712: PUSH
12713: LD_INT 0
12715: ST_TO_ADDR
// sSpec := false ;
12716: LD_ADDR_EXP 40
12720: PUSH
12721: LD_INT 0
12723: ST_TO_ADDR
// sLevel := false ;
12724: LD_ADDR_EXP 44
12728: PUSH
12729: LD_INT 0
12731: ST_TO_ADDR
// sArmoury := false ;
12732: LD_ADDR_EXP 45
12736: PUSH
12737: LD_INT 0
12739: ST_TO_ADDR
// sRadar := false ;
12740: LD_ADDR_EXP 46
12744: PUSH
12745: LD_INT 0
12747: ST_TO_ADDR
// sBunker := false ;
12748: LD_ADDR_EXP 47
12752: PUSH
12753: LD_INT 0
12755: ST_TO_ADDR
// sHack := false ;
12756: LD_ADDR_EXP 48
12760: PUSH
12761: LD_INT 0
12763: ST_TO_ADDR
// sFire := false ;
12764: LD_ADDR_EXP 49
12768: PUSH
12769: LD_INT 0
12771: ST_TO_ADDR
// sRefresh := false ;
12772: LD_ADDR_EXP 50
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// sExp := false ;
12780: LD_ADDR_EXP 51
12784: PUSH
12785: LD_INT 0
12787: ST_TO_ADDR
// sDepot := false ;
12788: LD_ADDR_EXP 52
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// sFlag := false ;
12796: LD_ADDR_EXP 53
12800: PUSH
12801: LD_INT 0
12803: ST_TO_ADDR
// sKamikadze := false ;
12804: LD_ADDR_EXP 61
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// sTroll := false ;
12812: LD_ADDR_EXP 62
12816: PUSH
12817: LD_INT 0
12819: ST_TO_ADDR
// sSlow := false ;
12820: LD_ADDR_EXP 63
12824: PUSH
12825: LD_INT 0
12827: ST_TO_ADDR
// sLack := false ;
12828: LD_ADDR_EXP 64
12832: PUSH
12833: LD_INT 0
12835: ST_TO_ADDR
// sTank := false ;
12836: LD_ADDR_EXP 66
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// sRemote := false ;
12844: LD_ADDR_EXP 67
12848: PUSH
12849: LD_INT 0
12851: ST_TO_ADDR
// sPowell := false ;
12852: LD_ADDR_EXP 68
12856: PUSH
12857: LD_INT 0
12859: ST_TO_ADDR
// sTeleport := false ;
12860: LD_ADDR_EXP 71
12864: PUSH
12865: LD_INT 0
12867: ST_TO_ADDR
// sOilTower := false ;
12868: LD_ADDR_EXP 73
12872: PUSH
12873: LD_INT 0
12875: ST_TO_ADDR
// sShovel := false ;
12876: LD_ADDR_EXP 74
12880: PUSH
12881: LD_INT 0
12883: ST_TO_ADDR
// sSheik := false ;
12884: LD_ADDR_EXP 75
12888: PUSH
12889: LD_INT 0
12891: ST_TO_ADDR
// sEarthquake := false ;
12892: LD_ADDR_EXP 77
12896: PUSH
12897: LD_INT 0
12899: ST_TO_ADDR
// sAI := false ;
12900: LD_ADDR_EXP 78
12904: PUSH
12905: LD_INT 0
12907: ST_TO_ADDR
// sCargo := false ;
12908: LD_ADDR_EXP 81
12912: PUSH
12913: LD_INT 0
12915: ST_TO_ADDR
// sDLaser := false ;
12916: LD_ADDR_EXP 82
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
// sExchange := false ;
12924: LD_ADDR_EXP 83
12928: PUSH
12929: LD_INT 0
12931: ST_TO_ADDR
// sFac := false ;
12932: LD_ADDR_EXP 84
12936: PUSH
12937: LD_INT 0
12939: ST_TO_ADDR
// sPower := false ;
12940: LD_ADDR_EXP 85
12944: PUSH
12945: LD_INT 0
12947: ST_TO_ADDR
// sRandom := false ;
12948: LD_ADDR_EXP 86
12952: PUSH
12953: LD_INT 0
12955: ST_TO_ADDR
// sShield := false ;
12956: LD_ADDR_EXP 87
12960: PUSH
12961: LD_INT 0
12963: ST_TO_ADDR
// sTime := false ;
12964: LD_ADDR_EXP 88
12968: PUSH
12969: LD_INT 0
12971: ST_TO_ADDR
// sTools := false ;
12972: LD_ADDR_EXP 89
12976: PUSH
12977: LD_INT 0
12979: ST_TO_ADDR
// sSold := false ;
12980: LD_ADDR_EXP 54
12984: PUSH
12985: LD_INT 0
12987: ST_TO_ADDR
// sDiff := false ;
12988: LD_ADDR_EXP 55
12992: PUSH
12993: LD_INT 0
12995: ST_TO_ADDR
// sFog := false ;
12996: LD_ADDR_EXP 58
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// sReset := false ;
13004: LD_ADDR_EXP 59
13008: PUSH
13009: LD_INT 0
13011: ST_TO_ADDR
// sSun := false ;
13012: LD_ADDR_EXP 60
13016: PUSH
13017: LD_INT 0
13019: ST_TO_ADDR
// sTiger := false ;
13020: LD_ADDR_EXP 56
13024: PUSH
13025: LD_INT 0
13027: ST_TO_ADDR
// sBomb := false ;
13028: LD_ADDR_EXP 57
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// sWound := false ;
13036: LD_ADDR_EXP 65
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// sBetray := false ;
13044: LD_ADDR_EXP 69
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// sContamin := false ;
13052: LD_ADDR_EXP 70
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// sOil := false ;
13060: LD_ADDR_EXP 72
13064: PUSH
13065: LD_INT 0
13067: ST_TO_ADDR
// sStu := false ;
13068: LD_ADDR_EXP 76
13072: PUSH
13073: LD_INT 0
13075: ST_TO_ADDR
// sBazooka := false ;
13076: LD_ADDR_EXP 79
13080: PUSH
13081: LD_INT 0
13083: ST_TO_ADDR
// sMortar := false ;
13084: LD_ADDR_EXP 80
13088: PUSH
13089: LD_INT 0
13091: ST_TO_ADDR
// sRanger := false ;
13092: LD_ADDR_EXP 90
13096: PUSH
13097: LD_INT 0
13099: ST_TO_ADDR
// end ;
13100: LD_VAR 0 1
13104: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13105: LD_INT 0
13107: PPUSH
13108: PPUSH
13109: PPUSH
13110: PPUSH
13111: PPUSH
// result := [ ] ;
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: EMPTY
13118: ST_TO_ADDR
// if campaign_id = 1 then
13119: LD_OWVAR 69
13123: PUSH
13124: LD_INT 1
13126: EQUAL
13127: IFFALSE 16065
// begin case mission_number of 1 :
13129: LD_OWVAR 70
13133: PUSH
13134: LD_INT 1
13136: DOUBLE
13137: EQUAL
13138: IFTRUE 13142
13140: GO 13206
13142: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13143: LD_ADDR_VAR 0 1
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 4
13153: PUSH
13154: LD_INT 11
13156: PUSH
13157: LD_INT 12
13159: PUSH
13160: LD_INT 15
13162: PUSH
13163: LD_INT 16
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: LD_INT 26
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 101
13188: PUSH
13189: LD_INT 102
13191: PUSH
13192: LD_INT 106
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: ST_TO_ADDR
13204: GO 16063
13206: LD_INT 2
13208: DOUBLE
13209: EQUAL
13210: IFTRUE 13214
13212: GO 13286
13214: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13215: LD_ADDR_VAR 0 1
13219: PUSH
13220: LD_INT 2
13222: PUSH
13223: LD_INT 4
13225: PUSH
13226: LD_INT 11
13228: PUSH
13229: LD_INT 12
13231: PUSH
13232: LD_INT 15
13234: PUSH
13235: LD_INT 16
13237: PUSH
13238: LD_INT 22
13240: PUSH
13241: LD_INT 23
13243: PUSH
13244: LD_INT 26
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 101
13260: PUSH
13261: LD_INT 102
13263: PUSH
13264: LD_INT 105
13266: PUSH
13267: LD_INT 106
13269: PUSH
13270: LD_INT 108
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: ST_TO_ADDR
13284: GO 16063
13286: LD_INT 3
13288: DOUBLE
13289: EQUAL
13290: IFTRUE 13294
13292: GO 13370
13294: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 4
13305: PUSH
13306: LD_INT 5
13308: PUSH
13309: LD_INT 11
13311: PUSH
13312: LD_INT 12
13314: PUSH
13315: LD_INT 15
13317: PUSH
13318: LD_INT 16
13320: PUSH
13321: LD_INT 22
13323: PUSH
13324: LD_INT 26
13326: PUSH
13327: LD_INT 36
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 101
13344: PUSH
13345: LD_INT 102
13347: PUSH
13348: LD_INT 105
13350: PUSH
13351: LD_INT 106
13353: PUSH
13354: LD_INT 108
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: ST_TO_ADDR
13368: GO 16063
13370: LD_INT 4
13372: DOUBLE
13373: EQUAL
13374: IFTRUE 13378
13376: GO 13462
13378: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13379: LD_ADDR_VAR 0 1
13383: PUSH
13384: LD_INT 2
13386: PUSH
13387: LD_INT 4
13389: PUSH
13390: LD_INT 5
13392: PUSH
13393: LD_INT 8
13395: PUSH
13396: LD_INT 11
13398: PUSH
13399: LD_INT 12
13401: PUSH
13402: LD_INT 15
13404: PUSH
13405: LD_INT 16
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_INT 23
13413: PUSH
13414: LD_INT 26
13416: PUSH
13417: LD_INT 36
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 101
13436: PUSH
13437: LD_INT 102
13439: PUSH
13440: LD_INT 105
13442: PUSH
13443: LD_INT 106
13445: PUSH
13446: LD_INT 108
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: ST_TO_ADDR
13460: GO 16063
13462: LD_INT 5
13464: DOUBLE
13465: EQUAL
13466: IFTRUE 13470
13468: GO 13570
13470: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13471: LD_ADDR_VAR 0 1
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: LD_INT 4
13481: PUSH
13482: LD_INT 5
13484: PUSH
13485: LD_INT 6
13487: PUSH
13488: LD_INT 8
13490: PUSH
13491: LD_INT 11
13493: PUSH
13494: LD_INT 12
13496: PUSH
13497: LD_INT 15
13499: PUSH
13500: LD_INT 16
13502: PUSH
13503: LD_INT 22
13505: PUSH
13506: LD_INT 23
13508: PUSH
13509: LD_INT 25
13511: PUSH
13512: LD_INT 26
13514: PUSH
13515: LD_INT 36
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 101
13536: PUSH
13537: LD_INT 102
13539: PUSH
13540: LD_INT 105
13542: PUSH
13543: LD_INT 106
13545: PUSH
13546: LD_INT 108
13548: PUSH
13549: LD_INT 109
13551: PUSH
13552: LD_INT 112
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: ST_TO_ADDR
13568: GO 16063
13570: LD_INT 6
13572: DOUBLE
13573: EQUAL
13574: IFTRUE 13578
13576: GO 13698
13578: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13579: LD_ADDR_VAR 0 1
13583: PUSH
13584: LD_INT 2
13586: PUSH
13587: LD_INT 4
13589: PUSH
13590: LD_INT 5
13592: PUSH
13593: LD_INT 6
13595: PUSH
13596: LD_INT 8
13598: PUSH
13599: LD_INT 11
13601: PUSH
13602: LD_INT 12
13604: PUSH
13605: LD_INT 15
13607: PUSH
13608: LD_INT 16
13610: PUSH
13611: LD_INT 20
13613: PUSH
13614: LD_INT 21
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_INT 23
13622: PUSH
13623: LD_INT 25
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 30
13631: PUSH
13632: LD_INT 31
13634: PUSH
13635: LD_INT 32
13637: PUSH
13638: LD_INT 36
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 101
13664: PUSH
13665: LD_INT 102
13667: PUSH
13668: LD_INT 105
13670: PUSH
13671: LD_INT 106
13673: PUSH
13674: LD_INT 108
13676: PUSH
13677: LD_INT 109
13679: PUSH
13680: LD_INT 112
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: ST_TO_ADDR
13696: GO 16063
13698: LD_INT 7
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13806
13706: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13707: LD_ADDR_VAR 0 1
13711: PUSH
13712: LD_INT 2
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: LD_INT 5
13720: PUSH
13721: LD_INT 7
13723: PUSH
13724: LD_INT 11
13726: PUSH
13727: LD_INT 12
13729: PUSH
13730: LD_INT 15
13732: PUSH
13733: LD_INT 16
13735: PUSH
13736: LD_INT 20
13738: PUSH
13739: LD_INT 21
13741: PUSH
13742: LD_INT 22
13744: PUSH
13745: LD_INT 23
13747: PUSH
13748: LD_INT 25
13750: PUSH
13751: LD_INT 26
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 101
13772: PUSH
13773: LD_INT 102
13775: PUSH
13776: LD_INT 103
13778: PUSH
13779: LD_INT 105
13781: PUSH
13782: LD_INT 106
13784: PUSH
13785: LD_INT 108
13787: PUSH
13788: LD_INT 112
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: ST_TO_ADDR
13804: GO 16063
13806: LD_INT 8
13808: DOUBLE
13809: EQUAL
13810: IFTRUE 13814
13812: GO 13942
13814: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13815: LD_ADDR_VAR 0 1
13819: PUSH
13820: LD_INT 2
13822: PUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 5
13828: PUSH
13829: LD_INT 6
13831: PUSH
13832: LD_INT 7
13834: PUSH
13835: LD_INT 8
13837: PUSH
13838: LD_INT 11
13840: PUSH
13841: LD_INT 12
13843: PUSH
13844: LD_INT 15
13846: PUSH
13847: LD_INT 16
13849: PUSH
13850: LD_INT 20
13852: PUSH
13853: LD_INT 21
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_INT 23
13861: PUSH
13862: LD_INT 25
13864: PUSH
13865: LD_INT 26
13867: PUSH
13868: LD_INT 30
13870: PUSH
13871: LD_INT 31
13873: PUSH
13874: LD_INT 32
13876: PUSH
13877: LD_INT 36
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 101
13904: PUSH
13905: LD_INT 102
13907: PUSH
13908: LD_INT 103
13910: PUSH
13911: LD_INT 105
13913: PUSH
13914: LD_INT 106
13916: PUSH
13917: LD_INT 108
13919: PUSH
13920: LD_INT 109
13922: PUSH
13923: LD_INT 112
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: ST_TO_ADDR
13940: GO 16063
13942: LD_INT 9
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13950
13948: GO 14086
13950: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13951: LD_ADDR_VAR 0 1
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: LD_INT 4
13961: PUSH
13962: LD_INT 5
13964: PUSH
13965: LD_INT 6
13967: PUSH
13968: LD_INT 7
13970: PUSH
13971: LD_INT 8
13973: PUSH
13974: LD_INT 11
13976: PUSH
13977: LD_INT 12
13979: PUSH
13980: LD_INT 15
13982: PUSH
13983: LD_INT 16
13985: PUSH
13986: LD_INT 20
13988: PUSH
13989: LD_INT 21
13991: PUSH
13992: LD_INT 22
13994: PUSH
13995: LD_INT 23
13997: PUSH
13998: LD_INT 25
14000: PUSH
14001: LD_INT 26
14003: PUSH
14004: LD_INT 28
14006: PUSH
14007: LD_INT 30
14009: PUSH
14010: LD_INT 31
14012: PUSH
14013: LD_INT 32
14015: PUSH
14016: LD_INT 36
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 101
14044: PUSH
14045: LD_INT 102
14047: PUSH
14048: LD_INT 103
14050: PUSH
14051: LD_INT 105
14053: PUSH
14054: LD_INT 106
14056: PUSH
14057: LD_INT 108
14059: PUSH
14060: LD_INT 109
14062: PUSH
14063: LD_INT 112
14065: PUSH
14066: LD_INT 114
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: ST_TO_ADDR
14084: GO 16063
14086: LD_INT 10
14088: DOUBLE
14089: EQUAL
14090: IFTRUE 14094
14092: GO 14278
14094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14095: LD_ADDR_VAR 0 1
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: LD_INT 4
14105: PUSH
14106: LD_INT 5
14108: PUSH
14109: LD_INT 6
14111: PUSH
14112: LD_INT 7
14114: PUSH
14115: LD_INT 8
14117: PUSH
14118: LD_INT 9
14120: PUSH
14121: LD_INT 10
14123: PUSH
14124: LD_INT 11
14126: PUSH
14127: LD_INT 12
14129: PUSH
14130: LD_INT 13
14132: PUSH
14133: LD_INT 14
14135: PUSH
14136: LD_INT 15
14138: PUSH
14139: LD_INT 16
14141: PUSH
14142: LD_INT 17
14144: PUSH
14145: LD_INT 18
14147: PUSH
14148: LD_INT 19
14150: PUSH
14151: LD_INT 20
14153: PUSH
14154: LD_INT 21
14156: PUSH
14157: LD_INT 22
14159: PUSH
14160: LD_INT 23
14162: PUSH
14163: LD_INT 24
14165: PUSH
14166: LD_INT 25
14168: PUSH
14169: LD_INT 26
14171: PUSH
14172: LD_INT 28
14174: PUSH
14175: LD_INT 30
14177: PUSH
14178: LD_INT 31
14180: PUSH
14181: LD_INT 32
14183: PUSH
14184: LD_INT 36
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 101
14220: PUSH
14221: LD_INT 102
14223: PUSH
14224: LD_INT 103
14226: PUSH
14227: LD_INT 104
14229: PUSH
14230: LD_INT 105
14232: PUSH
14233: LD_INT 106
14235: PUSH
14236: LD_INT 107
14238: PUSH
14239: LD_INT 108
14241: PUSH
14242: LD_INT 109
14244: PUSH
14245: LD_INT 110
14247: PUSH
14248: LD_INT 111
14250: PUSH
14251: LD_INT 112
14253: PUSH
14254: LD_INT 114
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: ST_TO_ADDR
14276: GO 16063
14278: LD_INT 11
14280: DOUBLE
14281: EQUAL
14282: IFTRUE 14286
14284: GO 14478
14286: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14287: LD_ADDR_VAR 0 1
14291: PUSH
14292: LD_INT 2
14294: PUSH
14295: LD_INT 3
14297: PUSH
14298: LD_INT 4
14300: PUSH
14301: LD_INT 5
14303: PUSH
14304: LD_INT 6
14306: PUSH
14307: LD_INT 7
14309: PUSH
14310: LD_INT 8
14312: PUSH
14313: LD_INT 9
14315: PUSH
14316: LD_INT 10
14318: PUSH
14319: LD_INT 11
14321: PUSH
14322: LD_INT 12
14324: PUSH
14325: LD_INT 13
14327: PUSH
14328: LD_INT 14
14330: PUSH
14331: LD_INT 15
14333: PUSH
14334: LD_INT 16
14336: PUSH
14337: LD_INT 17
14339: PUSH
14340: LD_INT 18
14342: PUSH
14343: LD_INT 19
14345: PUSH
14346: LD_INT 20
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_INT 23
14357: PUSH
14358: LD_INT 24
14360: PUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 26
14366: PUSH
14367: LD_INT 28
14369: PUSH
14370: LD_INT 30
14372: PUSH
14373: LD_INT 31
14375: PUSH
14376: LD_INT 32
14378: PUSH
14379: LD_INT 34
14381: PUSH
14382: LD_INT 36
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 101
14420: PUSH
14421: LD_INT 102
14423: PUSH
14424: LD_INT 103
14426: PUSH
14427: LD_INT 104
14429: PUSH
14430: LD_INT 105
14432: PUSH
14433: LD_INT 106
14435: PUSH
14436: LD_INT 107
14438: PUSH
14439: LD_INT 108
14441: PUSH
14442: LD_INT 109
14444: PUSH
14445: LD_INT 110
14447: PUSH
14448: LD_INT 111
14450: PUSH
14451: LD_INT 112
14453: PUSH
14454: LD_INT 114
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: ST_TO_ADDR
14476: GO 16063
14478: LD_INT 12
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14694
14486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14487: LD_ADDR_VAR 0 1
14491: PUSH
14492: LD_INT 1
14494: PUSH
14495: LD_INT 2
14497: PUSH
14498: LD_INT 3
14500: PUSH
14501: LD_INT 4
14503: PUSH
14504: LD_INT 5
14506: PUSH
14507: LD_INT 6
14509: PUSH
14510: LD_INT 7
14512: PUSH
14513: LD_INT 8
14515: PUSH
14516: LD_INT 9
14518: PUSH
14519: LD_INT 10
14521: PUSH
14522: LD_INT 11
14524: PUSH
14525: LD_INT 12
14527: PUSH
14528: LD_INT 13
14530: PUSH
14531: LD_INT 14
14533: PUSH
14534: LD_INT 15
14536: PUSH
14537: LD_INT 16
14539: PUSH
14540: LD_INT 17
14542: PUSH
14543: LD_INT 18
14545: PUSH
14546: LD_INT 19
14548: PUSH
14549: LD_INT 20
14551: PUSH
14552: LD_INT 21
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_INT 23
14560: PUSH
14561: LD_INT 24
14563: PUSH
14564: LD_INT 25
14566: PUSH
14567: LD_INT 26
14569: PUSH
14570: LD_INT 27
14572: PUSH
14573: LD_INT 28
14575: PUSH
14576: LD_INT 30
14578: PUSH
14579: LD_INT 31
14581: PUSH
14582: LD_INT 32
14584: PUSH
14585: LD_INT 33
14587: PUSH
14588: LD_INT 34
14590: PUSH
14591: LD_INT 36
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 101
14632: PUSH
14633: LD_INT 102
14635: PUSH
14636: LD_INT 103
14638: PUSH
14639: LD_INT 104
14641: PUSH
14642: LD_INT 105
14644: PUSH
14645: LD_INT 106
14647: PUSH
14648: LD_INT 107
14650: PUSH
14651: LD_INT 108
14653: PUSH
14654: LD_INT 109
14656: PUSH
14657: LD_INT 110
14659: PUSH
14660: LD_INT 111
14662: PUSH
14663: LD_INT 112
14665: PUSH
14666: LD_INT 113
14668: PUSH
14669: LD_INT 114
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: ST_TO_ADDR
14692: GO 16063
14694: LD_INT 13
14696: DOUBLE
14697: EQUAL
14698: IFTRUE 14702
14700: GO 14898
14702: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14703: LD_ADDR_VAR 0 1
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: LD_INT 3
14716: PUSH
14717: LD_INT 4
14719: PUSH
14720: LD_INT 5
14722: PUSH
14723: LD_INT 8
14725: PUSH
14726: LD_INT 9
14728: PUSH
14729: LD_INT 10
14731: PUSH
14732: LD_INT 11
14734: PUSH
14735: LD_INT 12
14737: PUSH
14738: LD_INT 14
14740: PUSH
14741: LD_INT 15
14743: PUSH
14744: LD_INT 16
14746: PUSH
14747: LD_INT 17
14749: PUSH
14750: LD_INT 18
14752: PUSH
14753: LD_INT 19
14755: PUSH
14756: LD_INT 20
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: LD_INT 23
14767: PUSH
14768: LD_INT 24
14770: PUSH
14771: LD_INT 25
14773: PUSH
14774: LD_INT 26
14776: PUSH
14777: LD_INT 27
14779: PUSH
14780: LD_INT 28
14782: PUSH
14783: LD_INT 30
14785: PUSH
14786: LD_INT 31
14788: PUSH
14789: LD_INT 32
14791: PUSH
14792: LD_INT 33
14794: PUSH
14795: LD_INT 34
14797: PUSH
14798: LD_INT 36
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 101
14836: PUSH
14837: LD_INT 102
14839: PUSH
14840: LD_INT 103
14842: PUSH
14843: LD_INT 104
14845: PUSH
14846: LD_INT 105
14848: PUSH
14849: LD_INT 106
14851: PUSH
14852: LD_INT 107
14854: PUSH
14855: LD_INT 108
14857: PUSH
14858: LD_INT 109
14860: PUSH
14861: LD_INT 110
14863: PUSH
14864: LD_INT 111
14866: PUSH
14867: LD_INT 112
14869: PUSH
14870: LD_INT 113
14872: PUSH
14873: LD_INT 114
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: ST_TO_ADDR
14896: GO 16063
14898: LD_INT 14
14900: DOUBLE
14901: EQUAL
14902: IFTRUE 14906
14904: GO 15118
14906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14907: LD_ADDR_VAR 0 1
14911: PUSH
14912: LD_INT 1
14914: PUSH
14915: LD_INT 2
14917: PUSH
14918: LD_INT 3
14920: PUSH
14921: LD_INT 4
14923: PUSH
14924: LD_INT 5
14926: PUSH
14927: LD_INT 6
14929: PUSH
14930: LD_INT 7
14932: PUSH
14933: LD_INT 8
14935: PUSH
14936: LD_INT 9
14938: PUSH
14939: LD_INT 10
14941: PUSH
14942: LD_INT 11
14944: PUSH
14945: LD_INT 12
14947: PUSH
14948: LD_INT 13
14950: PUSH
14951: LD_INT 14
14953: PUSH
14954: LD_INT 15
14956: PUSH
14957: LD_INT 16
14959: PUSH
14960: LD_INT 17
14962: PUSH
14963: LD_INT 18
14965: PUSH
14966: LD_INT 19
14968: PUSH
14969: LD_INT 20
14971: PUSH
14972: LD_INT 21
14974: PUSH
14975: LD_INT 22
14977: PUSH
14978: LD_INT 23
14980: PUSH
14981: LD_INT 24
14983: PUSH
14984: LD_INT 25
14986: PUSH
14987: LD_INT 26
14989: PUSH
14990: LD_INT 27
14992: PUSH
14993: LD_INT 28
14995: PUSH
14996: LD_INT 29
14998: PUSH
14999: LD_INT 30
15001: PUSH
15002: LD_INT 31
15004: PUSH
15005: LD_INT 32
15007: PUSH
15008: LD_INT 33
15010: PUSH
15011: LD_INT 34
15013: PUSH
15014: LD_INT 36
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 101
15056: PUSH
15057: LD_INT 102
15059: PUSH
15060: LD_INT 103
15062: PUSH
15063: LD_INT 104
15065: PUSH
15066: LD_INT 105
15068: PUSH
15069: LD_INT 106
15071: PUSH
15072: LD_INT 107
15074: PUSH
15075: LD_INT 108
15077: PUSH
15078: LD_INT 109
15080: PUSH
15081: LD_INT 110
15083: PUSH
15084: LD_INT 111
15086: PUSH
15087: LD_INT 112
15089: PUSH
15090: LD_INT 113
15092: PUSH
15093: LD_INT 114
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: ST_TO_ADDR
15116: GO 16063
15118: LD_INT 15
15120: DOUBLE
15121: EQUAL
15122: IFTRUE 15126
15124: GO 15338
15126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15127: LD_ADDR_VAR 0 1
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: LD_INT 2
15137: PUSH
15138: LD_INT 3
15140: PUSH
15141: LD_INT 4
15143: PUSH
15144: LD_INT 5
15146: PUSH
15147: LD_INT 6
15149: PUSH
15150: LD_INT 7
15152: PUSH
15153: LD_INT 8
15155: PUSH
15156: LD_INT 9
15158: PUSH
15159: LD_INT 10
15161: PUSH
15162: LD_INT 11
15164: PUSH
15165: LD_INT 12
15167: PUSH
15168: LD_INT 13
15170: PUSH
15171: LD_INT 14
15173: PUSH
15174: LD_INT 15
15176: PUSH
15177: LD_INT 16
15179: PUSH
15180: LD_INT 17
15182: PUSH
15183: LD_INT 18
15185: PUSH
15186: LD_INT 19
15188: PUSH
15189: LD_INT 20
15191: PUSH
15192: LD_INT 21
15194: PUSH
15195: LD_INT 22
15197: PUSH
15198: LD_INT 23
15200: PUSH
15201: LD_INT 24
15203: PUSH
15204: LD_INT 25
15206: PUSH
15207: LD_INT 26
15209: PUSH
15210: LD_INT 27
15212: PUSH
15213: LD_INT 28
15215: PUSH
15216: LD_INT 29
15218: PUSH
15219: LD_INT 30
15221: PUSH
15222: LD_INT 31
15224: PUSH
15225: LD_INT 32
15227: PUSH
15228: LD_INT 33
15230: PUSH
15231: LD_INT 34
15233: PUSH
15234: LD_INT 36
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 101
15276: PUSH
15277: LD_INT 102
15279: PUSH
15280: LD_INT 103
15282: PUSH
15283: LD_INT 104
15285: PUSH
15286: LD_INT 105
15288: PUSH
15289: LD_INT 106
15291: PUSH
15292: LD_INT 107
15294: PUSH
15295: LD_INT 108
15297: PUSH
15298: LD_INT 109
15300: PUSH
15301: LD_INT 110
15303: PUSH
15304: LD_INT 111
15306: PUSH
15307: LD_INT 112
15309: PUSH
15310: LD_INT 113
15312: PUSH
15313: LD_INT 114
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: ST_TO_ADDR
15336: GO 16063
15338: LD_INT 16
15340: DOUBLE
15341: EQUAL
15342: IFTRUE 15346
15344: GO 15470
15346: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: LD_INT 2
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: LD_INT 5
15360: PUSH
15361: LD_INT 7
15363: PUSH
15364: LD_INT 11
15366: PUSH
15367: LD_INT 12
15369: PUSH
15370: LD_INT 15
15372: PUSH
15373: LD_INT 16
15375: PUSH
15376: LD_INT 20
15378: PUSH
15379: LD_INT 21
15381: PUSH
15382: LD_INT 22
15384: PUSH
15385: LD_INT 23
15387: PUSH
15388: LD_INT 25
15390: PUSH
15391: LD_INT 26
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 31
15399: PUSH
15400: LD_INT 32
15402: PUSH
15403: LD_INT 33
15405: PUSH
15406: LD_INT 34
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 101
15432: PUSH
15433: LD_INT 102
15435: PUSH
15436: LD_INT 103
15438: PUSH
15439: LD_INT 106
15441: PUSH
15442: LD_INT 108
15444: PUSH
15445: LD_INT 112
15447: PUSH
15448: LD_INT 113
15450: PUSH
15451: LD_INT 114
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: ST_TO_ADDR
15468: GO 16063
15470: LD_INT 17
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15690
15478: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15479: LD_ADDR_VAR 0 1
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: LD_INT 4
15495: PUSH
15496: LD_INT 5
15498: PUSH
15499: LD_INT 6
15501: PUSH
15502: LD_INT 7
15504: PUSH
15505: LD_INT 8
15507: PUSH
15508: LD_INT 9
15510: PUSH
15511: LD_INT 10
15513: PUSH
15514: LD_INT 11
15516: PUSH
15517: LD_INT 12
15519: PUSH
15520: LD_INT 13
15522: PUSH
15523: LD_INT 14
15525: PUSH
15526: LD_INT 15
15528: PUSH
15529: LD_INT 16
15531: PUSH
15532: LD_INT 17
15534: PUSH
15535: LD_INT 18
15537: PUSH
15538: LD_INT 19
15540: PUSH
15541: LD_INT 20
15543: PUSH
15544: LD_INT 21
15546: PUSH
15547: LD_INT 22
15549: PUSH
15550: LD_INT 23
15552: PUSH
15553: LD_INT 24
15555: PUSH
15556: LD_INT 25
15558: PUSH
15559: LD_INT 26
15561: PUSH
15562: LD_INT 27
15564: PUSH
15565: LD_INT 28
15567: PUSH
15568: LD_INT 29
15570: PUSH
15571: LD_INT 30
15573: PUSH
15574: LD_INT 31
15576: PUSH
15577: LD_INT 32
15579: PUSH
15580: LD_INT 33
15582: PUSH
15583: LD_INT 34
15585: PUSH
15586: LD_INT 36
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 101
15628: PUSH
15629: LD_INT 102
15631: PUSH
15632: LD_INT 103
15634: PUSH
15635: LD_INT 104
15637: PUSH
15638: LD_INT 105
15640: PUSH
15641: LD_INT 106
15643: PUSH
15644: LD_INT 107
15646: PUSH
15647: LD_INT 108
15649: PUSH
15650: LD_INT 109
15652: PUSH
15653: LD_INT 110
15655: PUSH
15656: LD_INT 111
15658: PUSH
15659: LD_INT 112
15661: PUSH
15662: LD_INT 113
15664: PUSH
15665: LD_INT 114
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: ST_TO_ADDR
15688: GO 16063
15690: LD_INT 18
15692: DOUBLE
15693: EQUAL
15694: IFTRUE 15698
15696: GO 15834
15698: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15699: LD_ADDR_VAR 0 1
15703: PUSH
15704: LD_INT 2
15706: PUSH
15707: LD_INT 4
15709: PUSH
15710: LD_INT 5
15712: PUSH
15713: LD_INT 7
15715: PUSH
15716: LD_INT 11
15718: PUSH
15719: LD_INT 12
15721: PUSH
15722: LD_INT 15
15724: PUSH
15725: LD_INT 16
15727: PUSH
15728: LD_INT 20
15730: PUSH
15731: LD_INT 21
15733: PUSH
15734: LD_INT 22
15736: PUSH
15737: LD_INT 23
15739: PUSH
15740: LD_INT 25
15742: PUSH
15743: LD_INT 26
15745: PUSH
15746: LD_INT 30
15748: PUSH
15749: LD_INT 31
15751: PUSH
15752: LD_INT 32
15754: PUSH
15755: LD_INT 33
15757: PUSH
15758: LD_INT 34
15760: PUSH
15761: LD_INT 35
15763: PUSH
15764: LD_INT 36
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 101
15792: PUSH
15793: LD_INT 102
15795: PUSH
15796: LD_INT 103
15798: PUSH
15799: LD_INT 106
15801: PUSH
15802: LD_INT 108
15804: PUSH
15805: LD_INT 112
15807: PUSH
15808: LD_INT 113
15810: PUSH
15811: LD_INT 114
15813: PUSH
15814: LD_INT 115
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: ST_TO_ADDR
15832: GO 16063
15834: LD_INT 19
15836: DOUBLE
15837: EQUAL
15838: IFTRUE 15842
15840: GO 16062
15842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_INT 1
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: LD_INT 5
15862: PUSH
15863: LD_INT 6
15865: PUSH
15866: LD_INT 7
15868: PUSH
15869: LD_INT 8
15871: PUSH
15872: LD_INT 9
15874: PUSH
15875: LD_INT 10
15877: PUSH
15878: LD_INT 11
15880: PUSH
15881: LD_INT 12
15883: PUSH
15884: LD_INT 13
15886: PUSH
15887: LD_INT 14
15889: PUSH
15890: LD_INT 15
15892: PUSH
15893: LD_INT 16
15895: PUSH
15896: LD_INT 17
15898: PUSH
15899: LD_INT 18
15901: PUSH
15902: LD_INT 19
15904: PUSH
15905: LD_INT 20
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 22
15913: PUSH
15914: LD_INT 23
15916: PUSH
15917: LD_INT 24
15919: PUSH
15920: LD_INT 25
15922: PUSH
15923: LD_INT 26
15925: PUSH
15926: LD_INT 27
15928: PUSH
15929: LD_INT 28
15931: PUSH
15932: LD_INT 29
15934: PUSH
15935: LD_INT 30
15937: PUSH
15938: LD_INT 31
15940: PUSH
15941: LD_INT 32
15943: PUSH
15944: LD_INT 33
15946: PUSH
15947: LD_INT 34
15949: PUSH
15950: LD_INT 35
15952: PUSH
15953: LD_INT 36
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 101
15996: PUSH
15997: LD_INT 102
15999: PUSH
16000: LD_INT 103
16002: PUSH
16003: LD_INT 104
16005: PUSH
16006: LD_INT 105
16008: PUSH
16009: LD_INT 106
16011: PUSH
16012: LD_INT 107
16014: PUSH
16015: LD_INT 108
16017: PUSH
16018: LD_INT 109
16020: PUSH
16021: LD_INT 110
16023: PUSH
16024: LD_INT 111
16026: PUSH
16027: LD_INT 112
16029: PUSH
16030: LD_INT 113
16032: PUSH
16033: LD_INT 114
16035: PUSH
16036: LD_INT 115
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: ST_TO_ADDR
16060: GO 16063
16062: POP
// end else
16063: GO 16282
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16065: LD_ADDR_VAR 0 1
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: LD_INT 2
16075: PUSH
16076: LD_INT 3
16078: PUSH
16079: LD_INT 4
16081: PUSH
16082: LD_INT 5
16084: PUSH
16085: LD_INT 6
16087: PUSH
16088: LD_INT 7
16090: PUSH
16091: LD_INT 8
16093: PUSH
16094: LD_INT 9
16096: PUSH
16097: LD_INT 10
16099: PUSH
16100: LD_INT 11
16102: PUSH
16103: LD_INT 12
16105: PUSH
16106: LD_INT 13
16108: PUSH
16109: LD_INT 14
16111: PUSH
16112: LD_INT 15
16114: PUSH
16115: LD_INT 16
16117: PUSH
16118: LD_INT 17
16120: PUSH
16121: LD_INT 18
16123: PUSH
16124: LD_INT 19
16126: PUSH
16127: LD_INT 20
16129: PUSH
16130: LD_INT 21
16132: PUSH
16133: LD_INT 22
16135: PUSH
16136: LD_INT 23
16138: PUSH
16139: LD_INT 24
16141: PUSH
16142: LD_INT 25
16144: PUSH
16145: LD_INT 26
16147: PUSH
16148: LD_INT 27
16150: PUSH
16151: LD_INT 28
16153: PUSH
16154: LD_INT 29
16156: PUSH
16157: LD_INT 30
16159: PUSH
16160: LD_INT 31
16162: PUSH
16163: LD_INT 32
16165: PUSH
16166: LD_INT 33
16168: PUSH
16169: LD_INT 34
16171: PUSH
16172: LD_INT 35
16174: PUSH
16175: LD_INT 36
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 101
16218: PUSH
16219: LD_INT 102
16221: PUSH
16222: LD_INT 103
16224: PUSH
16225: LD_INT 104
16227: PUSH
16228: LD_INT 105
16230: PUSH
16231: LD_INT 106
16233: PUSH
16234: LD_INT 107
16236: PUSH
16237: LD_INT 108
16239: PUSH
16240: LD_INT 109
16242: PUSH
16243: LD_INT 110
16245: PUSH
16246: LD_INT 111
16248: PUSH
16249: LD_INT 112
16251: PUSH
16252: LD_INT 113
16254: PUSH
16255: LD_INT 114
16257: PUSH
16258: LD_INT 115
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: ST_TO_ADDR
// if result then
16282: LD_VAR 0 1
16286: IFFALSE 16575
// begin normal :=  ;
16288: LD_ADDR_VAR 0 3
16292: PUSH
16293: LD_STRING 
16295: ST_TO_ADDR
// hardcore :=  ;
16296: LD_ADDR_VAR 0 4
16300: PUSH
16301: LD_STRING 
16303: ST_TO_ADDR
// for i = 1 to normalCounter do
16304: LD_ADDR_VAR 0 5
16308: PUSH
16309: DOUBLE
16310: LD_INT 1
16312: DEC
16313: ST_TO_ADDR
16314: LD_EXP 38
16318: PUSH
16319: FOR_TO
16320: IFFALSE 16421
// begin tmp := 0 ;
16322: LD_ADDR_VAR 0 2
16326: PUSH
16327: LD_STRING 0
16329: ST_TO_ADDR
// if result [ 1 ] then
16330: LD_VAR 0 1
16334: PUSH
16335: LD_INT 1
16337: ARRAY
16338: IFFALSE 16403
// if result [ 1 ] [ 1 ] = i then
16340: LD_VAR 0 1
16344: PUSH
16345: LD_INT 1
16347: ARRAY
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PUSH
16353: LD_VAR 0 5
16357: EQUAL
16358: IFFALSE 16403
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16360: LD_ADDR_VAR 0 1
16364: PUSH
16365: LD_VAR 0 1
16369: PPUSH
16370: LD_INT 1
16372: PPUSH
16373: LD_VAR 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_INT 1
16384: PPUSH
16385: CALL_OW 3
16389: PPUSH
16390: CALL_OW 1
16394: ST_TO_ADDR
// tmp := 1 ;
16395: LD_ADDR_VAR 0 2
16399: PUSH
16400: LD_STRING 1
16402: ST_TO_ADDR
// end ; normal := normal & tmp ;
16403: LD_ADDR_VAR 0 3
16407: PUSH
16408: LD_VAR 0 3
16412: PUSH
16413: LD_VAR 0 2
16417: STR
16418: ST_TO_ADDR
// end ;
16419: GO 16319
16421: POP
16422: POP
// for i = 1 to hardcoreCounter do
16423: LD_ADDR_VAR 0 5
16427: PUSH
16428: DOUBLE
16429: LD_INT 1
16431: DEC
16432: ST_TO_ADDR
16433: LD_EXP 39
16437: PUSH
16438: FOR_TO
16439: IFFALSE 16544
// begin tmp := 0 ;
16441: LD_ADDR_VAR 0 2
16445: PUSH
16446: LD_STRING 0
16448: ST_TO_ADDR
// if result [ 2 ] then
16449: LD_VAR 0 1
16453: PUSH
16454: LD_INT 2
16456: ARRAY
16457: IFFALSE 16526
// if result [ 2 ] [ 1 ] = 100 + i then
16459: LD_VAR 0 1
16463: PUSH
16464: LD_INT 2
16466: ARRAY
16467: PUSH
16468: LD_INT 1
16470: ARRAY
16471: PUSH
16472: LD_INT 100
16474: PUSH
16475: LD_VAR 0 5
16479: PLUS
16480: EQUAL
16481: IFFALSE 16526
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16483: LD_ADDR_VAR 0 1
16487: PUSH
16488: LD_VAR 0 1
16492: PPUSH
16493: LD_INT 2
16495: PPUSH
16496: LD_VAR 0 1
16500: PUSH
16501: LD_INT 2
16503: ARRAY
16504: PPUSH
16505: LD_INT 1
16507: PPUSH
16508: CALL_OW 3
16512: PPUSH
16513: CALL_OW 1
16517: ST_TO_ADDR
// tmp := 1 ;
16518: LD_ADDR_VAR 0 2
16522: PUSH
16523: LD_STRING 1
16525: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16526: LD_ADDR_VAR 0 4
16530: PUSH
16531: LD_VAR 0 4
16535: PUSH
16536: LD_VAR 0 2
16540: STR
16541: ST_TO_ADDR
// end ;
16542: GO 16438
16544: POP
16545: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16546: LD_STRING getStreamItemsFromMission("
16548: PUSH
16549: LD_VAR 0 3
16553: STR
16554: PUSH
16555: LD_STRING ","
16557: STR
16558: PUSH
16559: LD_VAR 0 4
16563: STR
16564: PUSH
16565: LD_STRING ")
16567: STR
16568: PPUSH
16569: CALL_OW 559
// end else
16573: GO 16582
// ToLua ( getStreamItemsFromMission("","") ) ;
16575: LD_STRING getStreamItemsFromMission("","")
16577: PPUSH
16578: CALL_OW 559
// end ;
16582: LD_VAR 0 1
16586: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16587: LD_EXP 37
16591: PUSH
16592: LD_EXP 42
16596: AND
16597: IFFALSE 16721
16599: GO 16601
16601: DISABLE
16602: LD_INT 0
16604: PPUSH
16605: PPUSH
// begin enable ;
16606: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16607: LD_ADDR_VAR 0 2
16611: PUSH
16612: LD_INT 22
16614: PUSH
16615: LD_OWVAR 2
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 2
16626: PUSH
16627: LD_INT 34
16629: PUSH
16630: LD_INT 7
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 34
16639: PUSH
16640: LD_INT 45
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 34
16649: PUSH
16650: LD_INT 28
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 34
16659: PUSH
16660: LD_INT 47
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PPUSH
16678: CALL_OW 69
16682: ST_TO_ADDR
// if not tmp then
16683: LD_VAR 0 2
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16721
// for i in tmp do
16692: LD_ADDR_VAR 0 1
16696: PUSH
16697: LD_VAR 0 2
16701: PUSH
16702: FOR_IN
16703: IFFALSE 16719
// begin SetLives ( i , 0 ) ;
16705: LD_VAR 0 1
16709: PPUSH
16710: LD_INT 0
16712: PPUSH
16713: CALL_OW 234
// end ;
16717: GO 16702
16719: POP
16720: POP
// end ;
16721: PPOPN 2
16723: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16724: LD_EXP 37
16728: PUSH
16729: LD_EXP 43
16733: AND
16734: IFFALSE 16818
16736: GO 16738
16738: DISABLE
16739: LD_INT 0
16741: PPUSH
16742: PPUSH
// begin enable ;
16743: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16744: LD_ADDR_VAR 0 2
16748: PUSH
16749: LD_INT 22
16751: PUSH
16752: LD_OWVAR 2
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 32
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PPUSH
16775: CALL_OW 69
16779: ST_TO_ADDR
// if not tmp then
16780: LD_VAR 0 2
16784: NOT
16785: IFFALSE 16789
// exit ;
16787: GO 16818
// for i in tmp do
16789: LD_ADDR_VAR 0 1
16793: PUSH
16794: LD_VAR 0 2
16798: PUSH
16799: FOR_IN
16800: IFFALSE 16816
// begin SetLives ( i , 0 ) ;
16802: LD_VAR 0 1
16806: PPUSH
16807: LD_INT 0
16809: PPUSH
16810: CALL_OW 234
// end ;
16814: GO 16799
16816: POP
16817: POP
// end ;
16818: PPOPN 2
16820: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16821: LD_EXP 37
16825: PUSH
16826: LD_EXP 40
16830: AND
16831: IFFALSE 16924
16833: GO 16835
16835: DISABLE
16836: LD_INT 0
16838: PPUSH
// begin enable ;
16839: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: LD_INT 22
16847: PUSH
16848: LD_OWVAR 2
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 25
16862: PUSH
16863: LD_INT 5
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 25
16872: PUSH
16873: LD_INT 9
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 25
16882: PUSH
16883: LD_INT 8
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PPUSH
16900: CALL_OW 69
16904: PUSH
16905: FOR_IN
16906: IFFALSE 16922
// begin SetClass ( i , 1 ) ;
16908: LD_VAR 0 1
16912: PPUSH
16913: LD_INT 1
16915: PPUSH
16916: CALL_OW 336
// end ;
16920: GO 16905
16922: POP
16923: POP
// end ;
16924: PPOPN 1
16926: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16927: LD_EXP 37
16931: PUSH
16932: LD_EXP 41
16936: AND
16937: PUSH
16938: LD_OWVAR 65
16942: PUSH
16943: LD_INT 7
16945: LESS
16946: AND
16947: IFFALSE 16961
16949: GO 16951
16951: DISABLE
// begin enable ;
16952: ENABLE
// game_speed := 7 ;
16953: LD_ADDR_OWVAR 65
16957: PUSH
16958: LD_INT 7
16960: ST_TO_ADDR
// end ;
16961: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16962: LD_EXP 37
16966: PUSH
16967: LD_EXP 44
16971: AND
16972: IFFALSE 17174
16974: GO 16976
16976: DISABLE
16977: LD_INT 0
16979: PPUSH
16980: PPUSH
16981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16982: LD_ADDR_VAR 0 3
16986: PUSH
16987: LD_INT 81
16989: PUSH
16990: LD_OWVAR 2
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 21
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PPUSH
17013: CALL_OW 69
17017: ST_TO_ADDR
// if not tmp then
17018: LD_VAR 0 3
17022: NOT
17023: IFFALSE 17027
// exit ;
17025: GO 17174
// if tmp > 5 then
17027: LD_VAR 0 3
17031: PUSH
17032: LD_INT 5
17034: GREATER
17035: IFFALSE 17047
// k := 5 else
17037: LD_ADDR_VAR 0 2
17041: PUSH
17042: LD_INT 5
17044: ST_TO_ADDR
17045: GO 17057
// k := tmp ;
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_VAR 0 3
17056: ST_TO_ADDR
// for i := 1 to k do
17057: LD_ADDR_VAR 0 1
17061: PUSH
17062: DOUBLE
17063: LD_INT 1
17065: DEC
17066: ST_TO_ADDR
17067: LD_VAR 0 2
17071: PUSH
17072: FOR_TO
17073: IFFALSE 17172
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17075: LD_VAR 0 3
17079: PUSH
17080: LD_VAR 0 1
17084: ARRAY
17085: PPUSH
17086: LD_VAR 0 1
17090: PUSH
17091: LD_INT 4
17093: MOD
17094: PUSH
17095: LD_INT 1
17097: PLUS
17098: PPUSH
17099: CALL_OW 259
17103: PUSH
17104: LD_INT 10
17106: LESS
17107: IFFALSE 17170
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17109: LD_VAR 0 3
17113: PUSH
17114: LD_VAR 0 1
17118: ARRAY
17119: PPUSH
17120: LD_VAR 0 1
17124: PUSH
17125: LD_INT 4
17127: MOD
17128: PUSH
17129: LD_INT 1
17131: PLUS
17132: PPUSH
17133: LD_VAR 0 3
17137: PUSH
17138: LD_VAR 0 1
17142: ARRAY
17143: PPUSH
17144: LD_VAR 0 1
17148: PUSH
17149: LD_INT 4
17151: MOD
17152: PUSH
17153: LD_INT 1
17155: PLUS
17156: PPUSH
17157: CALL_OW 259
17161: PUSH
17162: LD_INT 1
17164: PLUS
17165: PPUSH
17166: CALL_OW 237
17170: GO 17072
17172: POP
17173: POP
// end ;
17174: PPOPN 3
17176: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17177: LD_EXP 37
17181: PUSH
17182: LD_EXP 45
17186: AND
17187: IFFALSE 17207
17189: GO 17191
17191: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17192: LD_INT 4
17194: PPUSH
17195: LD_OWVAR 2
17199: PPUSH
17200: LD_INT 0
17202: PPUSH
17203: CALL_OW 324
17207: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17208: LD_EXP 37
17212: PUSH
17213: LD_EXP 74
17217: AND
17218: IFFALSE 17238
17220: GO 17222
17222: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17223: LD_INT 19
17225: PPUSH
17226: LD_OWVAR 2
17230: PPUSH
17231: LD_INT 0
17233: PPUSH
17234: CALL_OW 324
17238: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17239: LD_EXP 37
17243: PUSH
17244: LD_EXP 46
17248: AND
17249: IFFALSE 17351
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
// begin enable ;
17258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17259: LD_ADDR_VAR 0 2
17263: PUSH
17264: LD_INT 22
17266: PUSH
17267: LD_OWVAR 2
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 34
17281: PUSH
17282: LD_INT 11
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 34
17291: PUSH
17292: LD_INT 30
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PPUSH
17308: CALL_OW 69
17312: ST_TO_ADDR
// if not tmp then
17313: LD_VAR 0 2
17317: NOT
17318: IFFALSE 17322
// exit ;
17320: GO 17351
// for i in tmp do
17322: LD_ADDR_VAR 0 1
17326: PUSH
17327: LD_VAR 0 2
17331: PUSH
17332: FOR_IN
17333: IFFALSE 17349
// begin SetLives ( i , 0 ) ;
17335: LD_VAR 0 1
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: CALL_OW 234
// end ;
17347: GO 17332
17349: POP
17350: POP
// end ;
17351: PPOPN 2
17353: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17354: LD_EXP 37
17358: PUSH
17359: LD_EXP 47
17363: AND
17364: IFFALSE 17384
17366: GO 17368
17368: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17369: LD_INT 32
17371: PPUSH
17372: LD_OWVAR 2
17376: PPUSH
17377: LD_INT 0
17379: PPUSH
17380: CALL_OW 324
17384: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17385: LD_EXP 37
17389: PUSH
17390: LD_EXP 48
17394: AND
17395: IFFALSE 17576
17397: GO 17399
17399: DISABLE
17400: LD_INT 0
17402: PPUSH
17403: PPUSH
17404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_INT 22
17412: PUSH
17413: LD_OWVAR 2
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 33
17424: PUSH
17425: LD_INT 3
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PPUSH
17436: CALL_OW 69
17440: ST_TO_ADDR
// if not tmp then
17441: LD_VAR 0 2
17445: NOT
17446: IFFALSE 17450
// exit ;
17448: GO 17576
// side := 0 ;
17450: LD_ADDR_VAR 0 3
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
// for i := 1 to 8 do
17458: LD_ADDR_VAR 0 1
17462: PUSH
17463: DOUBLE
17464: LD_INT 1
17466: DEC
17467: ST_TO_ADDR
17468: LD_INT 8
17470: PUSH
17471: FOR_TO
17472: IFFALSE 17520
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17474: LD_OWVAR 2
17478: PUSH
17479: LD_VAR 0 1
17483: NONEQUAL
17484: PUSH
17485: LD_OWVAR 2
17489: PPUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 81
17499: PUSH
17500: LD_INT 2
17502: EQUAL
17503: AND
17504: IFFALSE 17518
// begin side := i ;
17506: LD_ADDR_VAR 0 3
17510: PUSH
17511: LD_VAR 0 1
17515: ST_TO_ADDR
// break ;
17516: GO 17520
// end ;
17518: GO 17471
17520: POP
17521: POP
// if not side then
17522: LD_VAR 0 3
17526: NOT
17527: IFFALSE 17531
// exit ;
17529: GO 17576
// for i := 1 to tmp do
17531: LD_ADDR_VAR 0 1
17535: PUSH
17536: DOUBLE
17537: LD_INT 1
17539: DEC
17540: ST_TO_ADDR
17541: LD_VAR 0 2
17545: PUSH
17546: FOR_TO
17547: IFFALSE 17574
// if Prob ( 60 ) then
17549: LD_INT 60
17551: PPUSH
17552: CALL_OW 13
17556: IFFALSE 17572
// SetSide ( i , side ) ;
17558: LD_VAR 0 1
17562: PPUSH
17563: LD_VAR 0 3
17567: PPUSH
17568: CALL_OW 235
17572: GO 17546
17574: POP
17575: POP
// end ;
17576: PPOPN 3
17578: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17579: LD_EXP 37
17583: PUSH
17584: LD_EXP 50
17588: AND
17589: IFFALSE 17708
17591: GO 17593
17593: DISABLE
17594: LD_INT 0
17596: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17597: LD_ADDR_VAR 0 1
17601: PUSH
17602: LD_INT 22
17604: PUSH
17605: LD_OWVAR 2
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 21
17616: PUSH
17617: LD_INT 1
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 3
17626: PUSH
17627: LD_INT 23
17629: PUSH
17630: LD_INT 0
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: LIST
17645: PPUSH
17646: CALL_OW 69
17650: PUSH
17651: FOR_IN
17652: IFFALSE 17706
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17654: LD_VAR 0 1
17658: PPUSH
17659: CALL_OW 257
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: LD_INT 3
17672: PUSH
17673: LD_INT 4
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: IN
17682: IFFALSE 17704
// SetClass ( un , rand ( 1 , 4 ) ) ;
17684: LD_VAR 0 1
17688: PPUSH
17689: LD_INT 1
17691: PPUSH
17692: LD_INT 4
17694: PPUSH
17695: CALL_OW 12
17699: PPUSH
17700: CALL_OW 336
17704: GO 17651
17706: POP
17707: POP
// end ;
17708: PPOPN 1
17710: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17711: LD_EXP 37
17715: PUSH
17716: LD_EXP 49
17720: AND
17721: IFFALSE 17800
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17729: LD_ADDR_VAR 0 1
17733: PUSH
17734: LD_INT 22
17736: PUSH
17737: LD_OWVAR 2
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 21
17748: PUSH
17749: LD_INT 3
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PPUSH
17760: CALL_OW 69
17764: ST_TO_ADDR
// if not tmp then
17765: LD_VAR 0 1
17769: NOT
17770: IFFALSE 17774
// exit ;
17772: GO 17800
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17774: LD_VAR 0 1
17778: PUSH
17779: LD_INT 1
17781: PPUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 12
17791: ARRAY
17792: PPUSH
17793: LD_INT 100
17795: PPUSH
17796: CALL_OW 234
// end ;
17800: PPOPN 1
17802: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17803: LD_EXP 37
17807: PUSH
17808: LD_EXP 51
17812: AND
17813: IFFALSE 17911
17815: GO 17817
17817: DISABLE
17818: LD_INT 0
17820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17821: LD_ADDR_VAR 0 1
17825: PUSH
17826: LD_INT 22
17828: PUSH
17829: LD_OWVAR 2
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 21
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PPUSH
17852: CALL_OW 69
17856: ST_TO_ADDR
// if not tmp then
17857: LD_VAR 0 1
17861: NOT
17862: IFFALSE 17866
// exit ;
17864: GO 17911
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 1
17873: PPUSH
17874: LD_VAR 0 1
17878: PPUSH
17879: CALL_OW 12
17883: ARRAY
17884: PPUSH
17885: LD_INT 1
17887: PPUSH
17888: LD_INT 4
17890: PPUSH
17891: CALL_OW 12
17895: PPUSH
17896: LD_INT 3000
17898: PPUSH
17899: LD_INT 9000
17901: PPUSH
17902: CALL_OW 12
17906: PPUSH
17907: CALL_OW 492
// end ;
17911: PPOPN 1
17913: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17914: LD_EXP 37
17918: PUSH
17919: LD_EXP 52
17923: AND
17924: IFFALSE 17944
17926: GO 17928
17928: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17929: LD_INT 1
17931: PPUSH
17932: LD_OWVAR 2
17936: PPUSH
17937: LD_INT 0
17939: PPUSH
17940: CALL_OW 324
17944: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17945: LD_EXP 37
17949: PUSH
17950: LD_EXP 53
17954: AND
17955: IFFALSE 18038
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
17963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17964: LD_ADDR_VAR 0 2
17968: PUSH
17969: LD_INT 22
17971: PUSH
17972: LD_OWVAR 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 21
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PPUSH
17995: CALL_OW 69
17999: ST_TO_ADDR
// if not tmp then
18000: LD_VAR 0 2
18004: NOT
18005: IFFALSE 18009
// exit ;
18007: GO 18038
// for i in tmp do
18009: LD_ADDR_VAR 0 1
18013: PUSH
18014: LD_VAR 0 2
18018: PUSH
18019: FOR_IN
18020: IFFALSE 18036
// SetBLevel ( i , 10 ) ;
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_INT 10
18029: PPUSH
18030: CALL_OW 241
18034: GO 18019
18036: POP
18037: POP
// end ;
18038: PPOPN 2
18040: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18041: LD_EXP 37
18045: PUSH
18046: LD_EXP 54
18050: AND
18051: IFFALSE 18162
18053: GO 18055
18055: DISABLE
18056: LD_INT 0
18058: PPUSH
18059: PPUSH
18060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18061: LD_ADDR_VAR 0 3
18065: PUSH
18066: LD_INT 22
18068: PUSH
18069: LD_OWVAR 2
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 25
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: ST_TO_ADDR
// if not tmp then
18097: LD_VAR 0 3
18101: NOT
18102: IFFALSE 18106
// exit ;
18104: GO 18162
// un := tmp [ rand ( 1 , tmp ) ] ;
18106: LD_ADDR_VAR 0 2
18110: PUSH
18111: LD_VAR 0 3
18115: PUSH
18116: LD_INT 1
18118: PPUSH
18119: LD_VAR 0 3
18123: PPUSH
18124: CALL_OW 12
18128: ARRAY
18129: ST_TO_ADDR
// if Crawls ( un ) then
18130: LD_VAR 0 2
18134: PPUSH
18135: CALL_OW 318
18139: IFFALSE 18150
// ComWalk ( un ) ;
18141: LD_VAR 0 2
18145: PPUSH
18146: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18150: LD_VAR 0 2
18154: PPUSH
18155: LD_INT 5
18157: PPUSH
18158: CALL_OW 336
// end ;
18162: PPOPN 3
18164: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18165: LD_EXP 37
18169: PUSH
18170: LD_EXP 55
18174: AND
18175: PUSH
18176: LD_OWVAR 67
18180: PUSH
18181: LD_INT 3
18183: LESS
18184: AND
18185: IFFALSE 18204
18187: GO 18189
18189: DISABLE
// Difficulty := Difficulty + 1 ;
18190: LD_ADDR_OWVAR 67
18194: PUSH
18195: LD_OWVAR 67
18199: PUSH
18200: LD_INT 1
18202: PLUS
18203: ST_TO_ADDR
18204: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18205: LD_EXP 37
18209: PUSH
18210: LD_EXP 56
18214: AND
18215: IFFALSE 18318
18217: GO 18219
18219: DISABLE
18220: LD_INT 0
18222: PPUSH
// begin for i := 1 to 5 do
18223: LD_ADDR_VAR 0 1
18227: PUSH
18228: DOUBLE
18229: LD_INT 1
18231: DEC
18232: ST_TO_ADDR
18233: LD_INT 5
18235: PUSH
18236: FOR_TO
18237: IFFALSE 18316
// begin uc_nation := nation_nature ;
18239: LD_ADDR_OWVAR 21
18243: PUSH
18244: LD_INT 0
18246: ST_TO_ADDR
// uc_side := 0 ;
18247: LD_ADDR_OWVAR 20
18251: PUSH
18252: LD_INT 0
18254: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18255: LD_ADDR_OWVAR 29
18259: PUSH
18260: LD_INT 12
18262: PUSH
18263: LD_INT 12
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: ST_TO_ADDR
// hc_agressivity := 20 ;
18270: LD_ADDR_OWVAR 35
18274: PUSH
18275: LD_INT 20
18277: ST_TO_ADDR
// hc_class := class_tiger ;
18278: LD_ADDR_OWVAR 28
18282: PUSH
18283: LD_INT 14
18285: ST_TO_ADDR
// hc_gallery :=  ;
18286: LD_ADDR_OWVAR 33
18290: PUSH
18291: LD_STRING 
18293: ST_TO_ADDR
// hc_name :=  ;
18294: LD_ADDR_OWVAR 26
18298: PUSH
18299: LD_STRING 
18301: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18302: CALL_OW 44
18306: PPUSH
18307: LD_INT 0
18309: PPUSH
18310: CALL_OW 51
// end ;
18314: GO 18236
18316: POP
18317: POP
// end ;
18318: PPOPN 1
18320: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18321: LD_EXP 37
18325: PUSH
18326: LD_EXP 57
18330: AND
18331: IFFALSE 18340
18333: GO 18335
18335: DISABLE
// StreamSibBomb ;
18336: CALL 18341 0 0
18340: END
// export function StreamSibBomb ; var i , x , y ; begin
18341: LD_INT 0
18343: PPUSH
18344: PPUSH
18345: PPUSH
18346: PPUSH
// result := false ;
18347: LD_ADDR_VAR 0 1
18351: PUSH
18352: LD_INT 0
18354: ST_TO_ADDR
// for i := 1 to 16 do
18355: LD_ADDR_VAR 0 2
18359: PUSH
18360: DOUBLE
18361: LD_INT 1
18363: DEC
18364: ST_TO_ADDR
18365: LD_INT 16
18367: PUSH
18368: FOR_TO
18369: IFFALSE 18568
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18371: LD_ADDR_VAR 0 3
18375: PUSH
18376: LD_INT 10
18378: PUSH
18379: LD_INT 20
18381: PUSH
18382: LD_INT 30
18384: PUSH
18385: LD_INT 40
18387: PUSH
18388: LD_INT 50
18390: PUSH
18391: LD_INT 60
18393: PUSH
18394: LD_INT 70
18396: PUSH
18397: LD_INT 80
18399: PUSH
18400: LD_INT 90
18402: PUSH
18403: LD_INT 100
18405: PUSH
18406: LD_INT 110
18408: PUSH
18409: LD_INT 120
18411: PUSH
18412: LD_INT 130
18414: PUSH
18415: LD_INT 140
18417: PUSH
18418: LD_INT 150
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: PPUSH
18441: LD_INT 15
18443: PPUSH
18444: CALL_OW 12
18448: ARRAY
18449: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18450: LD_ADDR_VAR 0 4
18454: PUSH
18455: LD_INT 10
18457: PUSH
18458: LD_INT 20
18460: PUSH
18461: LD_INT 30
18463: PUSH
18464: LD_INT 40
18466: PUSH
18467: LD_INT 50
18469: PUSH
18470: LD_INT 60
18472: PUSH
18473: LD_INT 70
18475: PUSH
18476: LD_INT 80
18478: PUSH
18479: LD_INT 90
18481: PUSH
18482: LD_INT 100
18484: PUSH
18485: LD_INT 110
18487: PUSH
18488: LD_INT 120
18490: PUSH
18491: LD_INT 130
18493: PUSH
18494: LD_INT 140
18496: PUSH
18497: LD_INT 150
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 1
18519: PPUSH
18520: LD_INT 15
18522: PPUSH
18523: CALL_OW 12
18527: ARRAY
18528: ST_TO_ADDR
// if ValidHex ( x , y ) then
18529: LD_VAR 0 3
18533: PPUSH
18534: LD_VAR 0 4
18538: PPUSH
18539: CALL_OW 488
18543: IFFALSE 18566
// begin result := [ x , y ] ;
18545: LD_ADDR_VAR 0 1
18549: PUSH
18550: LD_VAR 0 3
18554: PUSH
18555: LD_VAR 0 4
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: ST_TO_ADDR
// break ;
18564: GO 18568
// end ; end ;
18566: GO 18368
18568: POP
18569: POP
// if result then
18570: LD_VAR 0 1
18574: IFFALSE 18634
// begin ToLua ( playSibBomb() ) ;
18576: LD_STRING playSibBomb()
18578: PPUSH
18579: CALL_OW 559
// wait ( 0 0$14 ) ;
18583: LD_INT 490
18585: PPUSH
18586: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18590: LD_VAR 0 1
18594: PUSH
18595: LD_INT 1
18597: ARRAY
18598: PPUSH
18599: LD_VAR 0 1
18603: PUSH
18604: LD_INT 2
18606: ARRAY
18607: PPUSH
18608: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18612: LD_VAR 0 1
18616: PUSH
18617: LD_INT 1
18619: ARRAY
18620: PPUSH
18621: LD_VAR 0 1
18625: PUSH
18626: LD_INT 2
18628: ARRAY
18629: PPUSH
18630: CALL_OW 429
// end ; end ;
18634: LD_VAR 0 1
18638: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18639: LD_EXP 37
18643: PUSH
18644: LD_EXP 59
18648: AND
18649: IFFALSE 18661
18651: GO 18653
18653: DISABLE
// YouLost (  ) ;
18654: LD_STRING 
18656: PPUSH
18657: CALL_OW 104
18661: END
// every 0 0$1 trigger StreamModeActive and sFog do
18662: LD_EXP 37
18666: PUSH
18667: LD_EXP 58
18671: AND
18672: IFFALSE 18686
18674: GO 18676
18676: DISABLE
// FogOff ( your_side ) ;
18677: LD_OWVAR 2
18681: PPUSH
18682: CALL_OW 344
18686: END
// every 0 0$1 trigger StreamModeActive and sSun do
18687: LD_EXP 37
18691: PUSH
18692: LD_EXP 60
18696: AND
18697: IFFALSE 18725
18699: GO 18701
18701: DISABLE
// begin solar_recharge_percent := 0 ;
18702: LD_ADDR_OWVAR 79
18706: PUSH
18707: LD_INT 0
18709: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18710: LD_INT 10500
18712: PPUSH
18713: CALL_OW 67
// solar_recharge_percent := 100 ;
18717: LD_ADDR_OWVAR 79
18721: PUSH
18722: LD_INT 100
18724: ST_TO_ADDR
// end ;
18725: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18726: LD_EXP 37
18730: PUSH
18731: LD_EXP 61
18735: AND
18736: IFFALSE 18975
18738: GO 18740
18740: DISABLE
18741: LD_INT 0
18743: PPUSH
18744: PPUSH
18745: PPUSH
// begin tmp := [ ] ;
18746: LD_ADDR_VAR 0 3
18750: PUSH
18751: EMPTY
18752: ST_TO_ADDR
// for i := 1 to 6 do
18753: LD_ADDR_VAR 0 1
18757: PUSH
18758: DOUBLE
18759: LD_INT 1
18761: DEC
18762: ST_TO_ADDR
18763: LD_INT 6
18765: PUSH
18766: FOR_TO
18767: IFFALSE 18872
// begin uc_nation := nation_nature ;
18769: LD_ADDR_OWVAR 21
18773: PUSH
18774: LD_INT 0
18776: ST_TO_ADDR
// uc_side := 0 ;
18777: LD_ADDR_OWVAR 20
18781: PUSH
18782: LD_INT 0
18784: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18785: LD_ADDR_OWVAR 29
18789: PUSH
18790: LD_INT 12
18792: PUSH
18793: LD_INT 12
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: ST_TO_ADDR
// hc_agressivity := 20 ;
18800: LD_ADDR_OWVAR 35
18804: PUSH
18805: LD_INT 20
18807: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18808: LD_ADDR_OWVAR 28
18812: PUSH
18813: LD_INT 17
18815: ST_TO_ADDR
// hc_gallery :=  ;
18816: LD_ADDR_OWVAR 33
18820: PUSH
18821: LD_STRING 
18823: ST_TO_ADDR
// hc_name :=  ;
18824: LD_ADDR_OWVAR 26
18828: PUSH
18829: LD_STRING 
18831: ST_TO_ADDR
// un := CreateHuman ;
18832: LD_ADDR_VAR 0 2
18836: PUSH
18837: CALL_OW 44
18841: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18842: LD_VAR 0 2
18846: PPUSH
18847: LD_INT 1
18849: PPUSH
18850: CALL_OW 51
// tmp := tmp ^ un ;
18854: LD_ADDR_VAR 0 3
18858: PUSH
18859: LD_VAR 0 3
18863: PUSH
18864: LD_VAR 0 2
18868: ADD
18869: ST_TO_ADDR
// end ;
18870: GO 18766
18872: POP
18873: POP
// repeat wait ( 0 0$1 ) ;
18874: LD_INT 35
18876: PPUSH
18877: CALL_OW 67
// for un in tmp do
18881: LD_ADDR_VAR 0 2
18885: PUSH
18886: LD_VAR 0 3
18890: PUSH
18891: FOR_IN
18892: IFFALSE 18966
// begin if IsDead ( un ) then
18894: LD_VAR 0 2
18898: PPUSH
18899: CALL_OW 301
18903: IFFALSE 18923
// begin tmp := tmp diff un ;
18905: LD_ADDR_VAR 0 3
18909: PUSH
18910: LD_VAR 0 3
18914: PUSH
18915: LD_VAR 0 2
18919: DIFF
18920: ST_TO_ADDR
// continue ;
18921: GO 18891
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18923: LD_VAR 0 2
18927: PPUSH
18928: LD_INT 3
18930: PUSH
18931: LD_INT 22
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PPUSH
18945: CALL_OW 69
18949: PPUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 74
18959: PPUSH
18960: CALL_OW 115
// end ;
18964: GO 18891
18966: POP
18967: POP
// until not tmp ;
18968: LD_VAR 0 3
18972: NOT
18973: IFFALSE 18874
// end ;
18975: PPOPN 3
18977: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18978: LD_EXP 37
18982: PUSH
18983: LD_EXP 62
18987: AND
18988: IFFALSE 19042
18990: GO 18992
18992: DISABLE
// begin ToLua ( displayTroll(); ) ;
18993: LD_STRING displayTroll();
18995: PPUSH
18996: CALL_OW 559
// wait ( 3 3$00 ) ;
19000: LD_INT 6300
19002: PPUSH
19003: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19007: LD_STRING hideTroll();
19009: PPUSH
19010: CALL_OW 559
// wait ( 1 1$00 ) ;
19014: LD_INT 2100
19016: PPUSH
19017: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19021: LD_STRING displayTroll();
19023: PPUSH
19024: CALL_OW 559
// wait ( 1 1$00 ) ;
19028: LD_INT 2100
19030: PPUSH
19031: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19035: LD_STRING hideTroll();
19037: PPUSH
19038: CALL_OW 559
// end ;
19042: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19043: LD_EXP 37
19047: PUSH
19048: LD_EXP 63
19052: AND
19053: IFFALSE 19116
19055: GO 19057
19057: DISABLE
19058: LD_INT 0
19060: PPUSH
// begin p := 0 ;
19061: LD_ADDR_VAR 0 1
19065: PUSH
19066: LD_INT 0
19068: ST_TO_ADDR
// repeat game_speed := 1 ;
19069: LD_ADDR_OWVAR 65
19073: PUSH
19074: LD_INT 1
19076: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19077: LD_INT 35
19079: PPUSH
19080: CALL_OW 67
// p := p + 1 ;
19084: LD_ADDR_VAR 0 1
19088: PUSH
19089: LD_VAR 0 1
19093: PUSH
19094: LD_INT 1
19096: PLUS
19097: ST_TO_ADDR
// until p >= 60 ;
19098: LD_VAR 0 1
19102: PUSH
19103: LD_INT 60
19105: GREATEREQUAL
19106: IFFALSE 19069
// game_speed := 4 ;
19108: LD_ADDR_OWVAR 65
19112: PUSH
19113: LD_INT 4
19115: ST_TO_ADDR
// end ;
19116: PPOPN 1
19118: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19119: LD_EXP 37
19123: PUSH
19124: LD_EXP 64
19128: AND
19129: IFFALSE 19275
19131: GO 19133
19133: DISABLE
19134: LD_INT 0
19136: PPUSH
19137: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19138: LD_ADDR_VAR 0 1
19142: PUSH
19143: LD_INT 22
19145: PUSH
19146: LD_OWVAR 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 2
19157: PUSH
19158: LD_INT 30
19160: PUSH
19161: LD_INT 0
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 30
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PPUSH
19187: CALL_OW 69
19191: ST_TO_ADDR
// if not depot then
19192: LD_VAR 0 1
19196: NOT
19197: IFFALSE 19201
// exit ;
19199: GO 19275
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: LD_VAR 0 1
19210: PUSH
19211: LD_INT 1
19213: PPUSH
19214: LD_VAR 0 1
19218: PPUSH
19219: CALL_OW 12
19223: ARRAY
19224: PPUSH
19225: CALL_OW 274
19229: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19230: LD_VAR 0 2
19234: PPUSH
19235: LD_INT 1
19237: PPUSH
19238: LD_INT 0
19240: PPUSH
19241: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19245: LD_VAR 0 2
19249: PPUSH
19250: LD_INT 2
19252: PPUSH
19253: LD_INT 0
19255: PPUSH
19256: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19260: LD_VAR 0 2
19264: PPUSH
19265: LD_INT 3
19267: PPUSH
19268: LD_INT 0
19270: PPUSH
19271: CALL_OW 277
// end ;
19275: PPOPN 2
19277: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19278: LD_EXP 37
19282: PUSH
19283: LD_EXP 65
19287: AND
19288: IFFALSE 19385
19290: GO 19292
19292: DISABLE
19293: LD_INT 0
19295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19296: LD_ADDR_VAR 0 1
19300: PUSH
19301: LD_INT 22
19303: PUSH
19304: LD_OWVAR 2
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 21
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 3
19325: PUSH
19326: LD_INT 23
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 69
19349: ST_TO_ADDR
// if not tmp then
19350: LD_VAR 0 1
19354: NOT
19355: IFFALSE 19359
// exit ;
19357: GO 19385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19359: LD_VAR 0 1
19363: PUSH
19364: LD_INT 1
19366: PPUSH
19367: LD_VAR 0 1
19371: PPUSH
19372: CALL_OW 12
19376: ARRAY
19377: PPUSH
19378: LD_INT 200
19380: PPUSH
19381: CALL_OW 234
// end ;
19385: PPOPN 1
19387: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19388: LD_EXP 37
19392: PUSH
19393: LD_EXP 66
19397: AND
19398: IFFALSE 19477
19400: GO 19402
19402: DISABLE
19403: LD_INT 0
19405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19406: LD_ADDR_VAR 0 1
19410: PUSH
19411: LD_INT 22
19413: PUSH
19414: LD_OWVAR 2
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 21
19425: PUSH
19426: LD_INT 2
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PPUSH
19437: CALL_OW 69
19441: ST_TO_ADDR
// if not tmp then
19442: LD_VAR 0 1
19446: NOT
19447: IFFALSE 19451
// exit ;
19449: GO 19477
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19451: LD_VAR 0 1
19455: PUSH
19456: LD_INT 1
19458: PPUSH
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 12
19468: ARRAY
19469: PPUSH
19470: LD_INT 60
19472: PPUSH
19473: CALL_OW 234
// end ;
19477: PPOPN 1
19479: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19480: LD_EXP 37
19484: PUSH
19485: LD_EXP 67
19489: AND
19490: IFFALSE 19589
19492: GO 19494
19494: DISABLE
19495: LD_INT 0
19497: PPUSH
19498: PPUSH
// begin enable ;
19499: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19500: LD_ADDR_VAR 0 1
19504: PUSH
19505: LD_INT 22
19507: PUSH
19508: LD_OWVAR 2
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 61
19519: PUSH
19520: EMPTY
19521: LIST
19522: PUSH
19523: LD_INT 33
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 69
19542: ST_TO_ADDR
// if not tmp then
19543: LD_VAR 0 1
19547: NOT
19548: IFFALSE 19552
// exit ;
19550: GO 19589
// for i in tmp do
19552: LD_ADDR_VAR 0 2
19556: PUSH
19557: LD_VAR 0 1
19561: PUSH
19562: FOR_IN
19563: IFFALSE 19587
// if IsControledBy ( i ) then
19565: LD_VAR 0 2
19569: PPUSH
19570: CALL_OW 312
19574: IFFALSE 19585
// ComUnlink ( i ) ;
19576: LD_VAR 0 2
19580: PPUSH
19581: CALL_OW 136
19585: GO 19562
19587: POP
19588: POP
// end ;
19589: PPOPN 2
19591: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19592: LD_EXP 37
19596: PUSH
19597: LD_EXP 68
19601: AND
19602: IFFALSE 19742
19604: GO 19606
19606: DISABLE
19607: LD_INT 0
19609: PPUSH
19610: PPUSH
// begin ToLua ( displayPowell(); ) ;
19611: LD_STRING displayPowell();
19613: PPUSH
19614: CALL_OW 559
// uc_side := 0 ;
19618: LD_ADDR_OWVAR 20
19622: PUSH
19623: LD_INT 0
19625: ST_TO_ADDR
// uc_nation := 2 ;
19626: LD_ADDR_OWVAR 21
19630: PUSH
19631: LD_INT 2
19633: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19634: LD_ADDR_OWVAR 37
19638: PUSH
19639: LD_INT 14
19641: ST_TO_ADDR
// vc_engine := engine_siberite ;
19642: LD_ADDR_OWVAR 39
19646: PUSH
19647: LD_INT 3
19649: ST_TO_ADDR
// vc_control := control_apeman ;
19650: LD_ADDR_OWVAR 38
19654: PUSH
19655: LD_INT 5
19657: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19658: LD_ADDR_OWVAR 40
19662: PUSH
19663: LD_INT 29
19665: ST_TO_ADDR
// un := CreateVehicle ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: CALL_OW 45
19675: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19676: LD_VAR 0 2
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19688: LD_INT 35
19690: PPUSH
19691: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19695: LD_VAR 0 2
19699: PPUSH
19700: LD_INT 22
19702: PUSH
19703: LD_OWVAR 2
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PPUSH
19712: CALL_OW 69
19716: PPUSH
19717: LD_VAR 0 2
19721: PPUSH
19722: CALL_OW 74
19726: PPUSH
19727: CALL_OW 115
// until IsDead ( un ) ;
19731: LD_VAR 0 2
19735: PPUSH
19736: CALL_OW 301
19740: IFFALSE 19688
// end ;
19742: PPOPN 2
19744: END
// every 0 0$1 trigger StreamModeActive and sStu do
19745: LD_EXP 37
19749: PUSH
19750: LD_EXP 76
19754: AND
19755: IFFALSE 19771
19757: GO 19759
19759: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19760: LD_STRING displayStucuk();
19762: PPUSH
19763: CALL_OW 559
// ResetFog ;
19767: CALL_OW 335
// end ;
19771: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19772: LD_EXP 37
19776: PUSH
19777: LD_EXP 69
19781: AND
19782: IFFALSE 19923
19784: GO 19786
19786: DISABLE
19787: LD_INT 0
19789: PPUSH
19790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19791: LD_ADDR_VAR 0 2
19795: PUSH
19796: LD_INT 22
19798: PUSH
19799: LD_OWVAR 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 21
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PPUSH
19822: CALL_OW 69
19826: ST_TO_ADDR
// if not tmp then
19827: LD_VAR 0 2
19831: NOT
19832: IFFALSE 19836
// exit ;
19834: GO 19923
// un := tmp [ rand ( 1 , tmp ) ] ;
19836: LD_ADDR_VAR 0 1
19840: PUSH
19841: LD_VAR 0 2
19845: PUSH
19846: LD_INT 1
19848: PPUSH
19849: LD_VAR 0 2
19853: PPUSH
19854: CALL_OW 12
19858: ARRAY
19859: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19872: LD_VAR 0 1
19876: PPUSH
19877: LD_OWVAR 3
19881: PUSH
19882: LD_VAR 0 1
19886: DIFF
19887: PPUSH
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 74
19897: PPUSH
19898: CALL_OW 115
// wait ( 0 0$20 ) ;
19902: LD_INT 700
19904: PPUSH
19905: CALL_OW 67
// SetSide ( un , your_side ) ;
19909: LD_VAR 0 1
19913: PPUSH
19914: LD_OWVAR 2
19918: PPUSH
19919: CALL_OW 235
// end ;
19923: PPOPN 2
19925: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19926: LD_EXP 37
19930: PUSH
19931: LD_EXP 70
19935: AND
19936: IFFALSE 20042
19938: GO 19940
19940: DISABLE
19941: LD_INT 0
19943: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19944: LD_ADDR_VAR 0 1
19948: PUSH
19949: LD_INT 22
19951: PUSH
19952: LD_OWVAR 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: LD_INT 30
19966: PUSH
19967: LD_INT 0
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 30
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PPUSH
19993: CALL_OW 69
19997: ST_TO_ADDR
// if not depot then
19998: LD_VAR 0 1
20002: NOT
20003: IFFALSE 20007
// exit ;
20005: GO 20042
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20007: LD_VAR 0 1
20011: PUSH
20012: LD_INT 1
20014: ARRAY
20015: PPUSH
20016: CALL_OW 250
20020: PPUSH
20021: LD_VAR 0 1
20025: PUSH
20026: LD_INT 1
20028: ARRAY
20029: PPUSH
20030: CALL_OW 251
20034: PPUSH
20035: LD_INT 70
20037: PPUSH
20038: CALL_OW 495
// end ;
20042: PPOPN 1
20044: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20045: LD_EXP 37
20049: PUSH
20050: LD_EXP 71
20054: AND
20055: IFFALSE 20266
20057: GO 20059
20059: DISABLE
20060: LD_INT 0
20062: PPUSH
20063: PPUSH
20064: PPUSH
20065: PPUSH
20066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20067: LD_ADDR_VAR 0 5
20071: PUSH
20072: LD_INT 22
20074: PUSH
20075: LD_OWVAR 2
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 21
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PPUSH
20098: CALL_OW 69
20102: ST_TO_ADDR
// if not tmp then
20103: LD_VAR 0 5
20107: NOT
20108: IFFALSE 20112
// exit ;
20110: GO 20266
// for i in tmp do
20112: LD_ADDR_VAR 0 1
20116: PUSH
20117: LD_VAR 0 5
20121: PUSH
20122: FOR_IN
20123: IFFALSE 20264
// begin d := rand ( 0 , 5 ) ;
20125: LD_ADDR_VAR 0 4
20129: PUSH
20130: LD_INT 0
20132: PPUSH
20133: LD_INT 5
20135: PPUSH
20136: CALL_OW 12
20140: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20141: LD_ADDR_VAR 0 2
20145: PUSH
20146: LD_VAR 0 1
20150: PPUSH
20151: CALL_OW 250
20155: PPUSH
20156: LD_VAR 0 4
20160: PPUSH
20161: LD_INT 3
20163: PPUSH
20164: LD_INT 12
20166: PPUSH
20167: CALL_OW 12
20171: PPUSH
20172: CALL_OW 272
20176: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20177: LD_ADDR_VAR 0 3
20181: PUSH
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 251
20191: PPUSH
20192: LD_VAR 0 4
20196: PPUSH
20197: LD_INT 3
20199: PPUSH
20200: LD_INT 12
20202: PPUSH
20203: CALL_OW 12
20207: PPUSH
20208: CALL_OW 273
20212: ST_TO_ADDR
// if ValidHex ( x , y ) then
20213: LD_VAR 0 2
20217: PPUSH
20218: LD_VAR 0 3
20222: PPUSH
20223: CALL_OW 488
20227: IFFALSE 20262
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20229: LD_VAR 0 1
20233: PPUSH
20234: LD_VAR 0 2
20238: PPUSH
20239: LD_VAR 0 3
20243: PPUSH
20244: LD_INT 3
20246: PPUSH
20247: LD_INT 6
20249: PPUSH
20250: CALL_OW 12
20254: PPUSH
20255: LD_INT 1
20257: PPUSH
20258: CALL_OW 483
// end ;
20262: GO 20122
20264: POP
20265: POP
// end ;
20266: PPOPN 5
20268: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20269: LD_EXP 37
20273: PUSH
20274: LD_EXP 72
20278: AND
20279: IFFALSE 20373
20281: GO 20283
20283: DISABLE
20284: LD_INT 0
20286: PPUSH
20287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20288: LD_ADDR_VAR 0 2
20292: PUSH
20293: LD_INT 22
20295: PUSH
20296: LD_OWVAR 2
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 32
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 21
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: PPUSH
20330: CALL_OW 69
20334: ST_TO_ADDR
// if not tmp then
20335: LD_VAR 0 2
20339: NOT
20340: IFFALSE 20344
// exit ;
20342: GO 20373
// for i in tmp do
20344: LD_ADDR_VAR 0 1
20348: PUSH
20349: LD_VAR 0 2
20353: PUSH
20354: FOR_IN
20355: IFFALSE 20371
// SetFuel ( i , 0 ) ;
20357: LD_VAR 0 1
20361: PPUSH
20362: LD_INT 0
20364: PPUSH
20365: CALL_OW 240
20369: GO 20354
20371: POP
20372: POP
// end ;
20373: PPOPN 2
20375: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20376: LD_EXP 37
20380: PUSH
20381: LD_EXP 73
20385: AND
20386: IFFALSE 20452
20388: GO 20390
20390: DISABLE
20391: LD_INT 0
20393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20394: LD_ADDR_VAR 0 1
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_OWVAR 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 30
20413: PUSH
20414: LD_INT 29
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PPUSH
20425: CALL_OW 69
20429: ST_TO_ADDR
// if not tmp then
20430: LD_VAR 0 1
20434: NOT
20435: IFFALSE 20439
// exit ;
20437: GO 20452
// DestroyUnit ( tmp [ 1 ] ) ;
20439: LD_VAR 0 1
20443: PUSH
20444: LD_INT 1
20446: ARRAY
20447: PPUSH
20448: CALL_OW 65
// end ;
20452: PPOPN 1
20454: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20455: LD_EXP 37
20459: PUSH
20460: LD_EXP 75
20464: AND
20465: IFFALSE 20594
20467: GO 20469
20469: DISABLE
20470: LD_INT 0
20472: PPUSH
// begin uc_side := 0 ;
20473: LD_ADDR_OWVAR 20
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// uc_nation := nation_arabian ;
20481: LD_ADDR_OWVAR 21
20485: PUSH
20486: LD_INT 2
20488: ST_TO_ADDR
// hc_gallery :=  ;
20489: LD_ADDR_OWVAR 33
20493: PUSH
20494: LD_STRING 
20496: ST_TO_ADDR
// hc_name :=  ;
20497: LD_ADDR_OWVAR 26
20501: PUSH
20502: LD_STRING 
20504: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20505: LD_INT 1
20507: PPUSH
20508: LD_INT 11
20510: PPUSH
20511: LD_INT 10
20513: PPUSH
20514: CALL_OW 380
// un := CreateHuman ;
20518: LD_ADDR_VAR 0 1
20522: PUSH
20523: CALL_OW 44
20527: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20528: LD_VAR 0 1
20532: PPUSH
20533: LD_INT 1
20535: PPUSH
20536: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20540: LD_INT 35
20542: PPUSH
20543: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20547: LD_VAR 0 1
20551: PPUSH
20552: LD_INT 22
20554: PUSH
20555: LD_OWVAR 2
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PPUSH
20564: CALL_OW 69
20568: PPUSH
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 74
20578: PPUSH
20579: CALL_OW 115
// until IsDead ( un ) ;
20583: LD_VAR 0 1
20587: PPUSH
20588: CALL_OW 301
20592: IFFALSE 20540
// end ;
20594: PPOPN 1
20596: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20597: LD_EXP 37
20601: PUSH
20602: LD_EXP 77
20606: AND
20607: IFFALSE 20619
20609: GO 20611
20611: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20612: LD_STRING earthquake(getX(game), 0, 32)
20614: PPUSH
20615: CALL_OW 559
20619: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20620: LD_EXP 37
20624: PUSH
20625: LD_EXP 78
20629: AND
20630: IFFALSE 20721
20632: GO 20634
20634: DISABLE
20635: LD_INT 0
20637: PPUSH
// begin enable ;
20638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20639: LD_ADDR_VAR 0 1
20643: PUSH
20644: LD_INT 22
20646: PUSH
20647: LD_OWVAR 2
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 21
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 33
20668: PUSH
20669: LD_INT 3
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 69
20685: ST_TO_ADDR
// if not tmp then
20686: LD_VAR 0 1
20690: NOT
20691: IFFALSE 20695
// exit ;
20693: GO 20721
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20695: LD_VAR 0 1
20699: PUSH
20700: LD_INT 1
20702: PPUSH
20703: LD_VAR 0 1
20707: PPUSH
20708: CALL_OW 12
20712: ARRAY
20713: PPUSH
20714: LD_INT 1
20716: PPUSH
20717: CALL_OW 234
// end ;
20721: PPOPN 1
20723: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20724: LD_EXP 37
20728: PUSH
20729: LD_EXP 79
20733: AND
20734: IFFALSE 20875
20736: GO 20738
20738: DISABLE
20739: LD_INT 0
20741: PPUSH
20742: PPUSH
20743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: LD_INT 22
20751: PUSH
20752: LD_OWVAR 2
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 25
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PPUSH
20775: CALL_OW 69
20779: ST_TO_ADDR
// if not tmp then
20780: LD_VAR 0 3
20784: NOT
20785: IFFALSE 20789
// exit ;
20787: GO 20875
// un := tmp [ rand ( 1 , tmp ) ] ;
20789: LD_ADDR_VAR 0 2
20793: PUSH
20794: LD_VAR 0 3
20798: PUSH
20799: LD_INT 1
20801: PPUSH
20802: LD_VAR 0 3
20806: PPUSH
20807: CALL_OW 12
20811: ARRAY
20812: ST_TO_ADDR
// if Crawls ( un ) then
20813: LD_VAR 0 2
20817: PPUSH
20818: CALL_OW 318
20822: IFFALSE 20833
// ComWalk ( un ) ;
20824: LD_VAR 0 2
20828: PPUSH
20829: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20833: LD_VAR 0 2
20837: PPUSH
20838: LD_INT 9
20840: PPUSH
20841: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20845: LD_INT 28
20847: PPUSH
20848: LD_OWVAR 2
20852: PPUSH
20853: LD_INT 2
20855: PPUSH
20856: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20860: LD_INT 29
20862: PPUSH
20863: LD_OWVAR 2
20867: PPUSH
20868: LD_INT 2
20870: PPUSH
20871: CALL_OW 322
// end ;
20875: PPOPN 3
20877: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20878: LD_EXP 37
20882: PUSH
20883: LD_EXP 80
20887: AND
20888: IFFALSE 20999
20890: GO 20892
20892: DISABLE
20893: LD_INT 0
20895: PPUSH
20896: PPUSH
20897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20898: LD_ADDR_VAR 0 3
20902: PUSH
20903: LD_INT 22
20905: PUSH
20906: LD_OWVAR 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 25
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PPUSH
20929: CALL_OW 69
20933: ST_TO_ADDR
// if not tmp then
20934: LD_VAR 0 3
20938: NOT
20939: IFFALSE 20943
// exit ;
20941: GO 20999
// un := tmp [ rand ( 1 , tmp ) ] ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_VAR 0 3
20952: PUSH
20953: LD_INT 1
20955: PPUSH
20956: LD_VAR 0 3
20960: PPUSH
20961: CALL_OW 12
20965: ARRAY
20966: ST_TO_ADDR
// if Crawls ( un ) then
20967: LD_VAR 0 2
20971: PPUSH
20972: CALL_OW 318
20976: IFFALSE 20987
// ComWalk ( un ) ;
20978: LD_VAR 0 2
20982: PPUSH
20983: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20987: LD_VAR 0 2
20991: PPUSH
20992: LD_INT 8
20994: PPUSH
20995: CALL_OW 336
// end ;
20999: PPOPN 3
21001: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21002: LD_EXP 37
21006: PUSH
21007: LD_EXP 81
21011: AND
21012: IFFALSE 21156
21014: GO 21016
21016: DISABLE
21017: LD_INT 0
21019: PPUSH
21020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21021: LD_ADDR_VAR 0 2
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_OWVAR 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 21
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 34
21053: PUSH
21054: LD_INT 12
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 34
21063: PUSH
21064: LD_INT 51
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 34
21073: PUSH
21074: LD_INT 32
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: PPUSH
21092: CALL_OW 69
21096: ST_TO_ADDR
// if not tmp then
21097: LD_VAR 0 2
21101: NOT
21102: IFFALSE 21106
// exit ;
21104: GO 21156
// for i in tmp do
21106: LD_ADDR_VAR 0 1
21110: PUSH
21111: LD_VAR 0 2
21115: PUSH
21116: FOR_IN
21117: IFFALSE 21154
// if GetCargo ( i , mat_artifact ) = 0 then
21119: LD_VAR 0 1
21123: PPUSH
21124: LD_INT 4
21126: PPUSH
21127: CALL_OW 289
21131: PUSH
21132: LD_INT 0
21134: EQUAL
21135: IFFALSE 21152
// SetCargo ( i , mat_siberit , 100 ) ;
21137: LD_VAR 0 1
21141: PPUSH
21142: LD_INT 3
21144: PPUSH
21145: LD_INT 100
21147: PPUSH
21148: CALL_OW 290
21152: GO 21116
21154: POP
21155: POP
// end ;
21156: PPOPN 2
21158: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21159: LD_EXP 37
21163: PUSH
21164: LD_EXP 82
21168: AND
21169: IFFALSE 21352
21171: GO 21173
21173: DISABLE
21174: LD_INT 0
21176: PPUSH
21177: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21178: LD_ADDR_VAR 0 2
21182: PUSH
21183: LD_INT 22
21185: PUSH
21186: LD_OWVAR 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PPUSH
21195: CALL_OW 69
21199: ST_TO_ADDR
// if not tmp then
21200: LD_VAR 0 2
21204: NOT
21205: IFFALSE 21209
// exit ;
21207: GO 21352
// for i := 1 to 2 do
21209: LD_ADDR_VAR 0 1
21213: PUSH
21214: DOUBLE
21215: LD_INT 1
21217: DEC
21218: ST_TO_ADDR
21219: LD_INT 2
21221: PUSH
21222: FOR_TO
21223: IFFALSE 21350
// begin uc_side := your_side ;
21225: LD_ADDR_OWVAR 20
21229: PUSH
21230: LD_OWVAR 2
21234: ST_TO_ADDR
// uc_nation := nation_american ;
21235: LD_ADDR_OWVAR 21
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
// vc_chassis := us_morphling ;
21243: LD_ADDR_OWVAR 37
21247: PUSH
21248: LD_INT 5
21250: ST_TO_ADDR
// vc_engine := engine_siberite ;
21251: LD_ADDR_OWVAR 39
21255: PUSH
21256: LD_INT 3
21258: ST_TO_ADDR
// vc_control := control_computer ;
21259: LD_ADDR_OWVAR 38
21263: PUSH
21264: LD_INT 3
21266: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21267: LD_ADDR_OWVAR 40
21271: PUSH
21272: LD_INT 10
21274: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21275: LD_VAR 0 2
21279: PUSH
21280: LD_INT 1
21282: ARRAY
21283: PPUSH
21284: CALL_OW 310
21288: NOT
21289: IFFALSE 21336
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21291: CALL_OW 45
21295: PPUSH
21296: LD_VAR 0 2
21300: PUSH
21301: LD_INT 1
21303: ARRAY
21304: PPUSH
21305: CALL_OW 250
21309: PPUSH
21310: LD_VAR 0 2
21314: PUSH
21315: LD_INT 1
21317: ARRAY
21318: PPUSH
21319: CALL_OW 251
21323: PPUSH
21324: LD_INT 12
21326: PPUSH
21327: LD_INT 1
21329: PPUSH
21330: CALL_OW 50
21334: GO 21348
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21336: CALL_OW 45
21340: PPUSH
21341: LD_INT 1
21343: PPUSH
21344: CALL_OW 51
// end ;
21348: GO 21222
21350: POP
21351: POP
// end ;
21352: PPOPN 2
21354: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21355: LD_EXP 37
21359: PUSH
21360: LD_EXP 83
21364: AND
21365: IFFALSE 21587
21367: GO 21369
21369: DISABLE
21370: LD_INT 0
21372: PPUSH
21373: PPUSH
21374: PPUSH
21375: PPUSH
21376: PPUSH
21377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21378: LD_ADDR_VAR 0 6
21382: PUSH
21383: LD_INT 22
21385: PUSH
21386: LD_OWVAR 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 21
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 3
21407: PUSH
21408: LD_INT 23
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: PPUSH
21427: CALL_OW 69
21431: ST_TO_ADDR
// if not tmp then
21432: LD_VAR 0 6
21436: NOT
21437: IFFALSE 21441
// exit ;
21439: GO 21587
// s1 := rand ( 1 , 4 ) ;
21441: LD_ADDR_VAR 0 2
21445: PUSH
21446: LD_INT 1
21448: PPUSH
21449: LD_INT 4
21451: PPUSH
21452: CALL_OW 12
21456: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21457: LD_ADDR_VAR 0 4
21461: PUSH
21462: LD_VAR 0 6
21466: PUSH
21467: LD_INT 1
21469: ARRAY
21470: PPUSH
21471: LD_VAR 0 2
21475: PPUSH
21476: CALL_OW 259
21480: ST_TO_ADDR
// if s1 = 1 then
21481: LD_VAR 0 2
21485: PUSH
21486: LD_INT 1
21488: EQUAL
21489: IFFALSE 21509
// s2 := rand ( 2 , 4 ) else
21491: LD_ADDR_VAR 0 3
21495: PUSH
21496: LD_INT 2
21498: PPUSH
21499: LD_INT 4
21501: PPUSH
21502: CALL_OW 12
21506: ST_TO_ADDR
21507: GO 21517
// s2 := 1 ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: LD_INT 1
21516: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21517: LD_ADDR_VAR 0 5
21521: PUSH
21522: LD_VAR 0 6
21526: PUSH
21527: LD_INT 1
21529: ARRAY
21530: PPUSH
21531: LD_VAR 0 3
21535: PPUSH
21536: CALL_OW 259
21540: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21541: LD_VAR 0 6
21545: PUSH
21546: LD_INT 1
21548: ARRAY
21549: PPUSH
21550: LD_VAR 0 2
21554: PPUSH
21555: LD_VAR 0 5
21559: PPUSH
21560: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21564: LD_VAR 0 6
21568: PUSH
21569: LD_INT 1
21571: ARRAY
21572: PPUSH
21573: LD_VAR 0 3
21577: PPUSH
21578: LD_VAR 0 4
21582: PPUSH
21583: CALL_OW 237
// end ;
21587: PPOPN 6
21589: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21590: LD_EXP 37
21594: PUSH
21595: LD_EXP 84
21599: AND
21600: IFFALSE 21679
21602: GO 21604
21604: DISABLE
21605: LD_INT 0
21607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21608: LD_ADDR_VAR 0 1
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_OWVAR 2
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 30
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PPUSH
21639: CALL_OW 69
21643: ST_TO_ADDR
// if not tmp then
21644: LD_VAR 0 1
21648: NOT
21649: IFFALSE 21653
// exit ;
21651: GO 21679
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21653: LD_VAR 0 1
21657: PUSH
21658: LD_INT 1
21660: PPUSH
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL_OW 12
21670: ARRAY
21671: PPUSH
21672: LD_INT 1
21674: PPUSH
21675: CALL_OW 234
// end ;
21679: PPOPN 1
21681: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21682: LD_EXP 37
21686: PUSH
21687: LD_EXP 85
21691: AND
21692: IFFALSE 21804
21694: GO 21696
21696: DISABLE
21697: LD_INT 0
21699: PPUSH
21700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21701: LD_ADDR_VAR 0 2
21705: PUSH
21706: LD_INT 22
21708: PUSH
21709: LD_OWVAR 2
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: LD_INT 30
21723: PUSH
21724: LD_INT 27
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 30
21733: PUSH
21734: LD_INT 26
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 30
21743: PUSH
21744: LD_INT 28
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PPUSH
21761: CALL_OW 69
21765: ST_TO_ADDR
// if not tmp then
21766: LD_VAR 0 2
21770: NOT
21771: IFFALSE 21775
// exit ;
21773: GO 21804
// for i in tmp do
21775: LD_ADDR_VAR 0 1
21779: PUSH
21780: LD_VAR 0 2
21784: PUSH
21785: FOR_IN
21786: IFFALSE 21802
// SetLives ( i , 1 ) ;
21788: LD_VAR 0 1
21792: PPUSH
21793: LD_INT 1
21795: PPUSH
21796: CALL_OW 234
21800: GO 21785
21802: POP
21803: POP
// end ;
21804: PPOPN 2
21806: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21807: LD_EXP 37
21811: PUSH
21812: LD_EXP 86
21816: AND
21817: IFFALSE 22091
21819: GO 21821
21821: DISABLE
21822: LD_INT 0
21824: PPUSH
21825: PPUSH
21826: PPUSH
// begin i := rand ( 1 , 7 ) ;
21827: LD_ADDR_VAR 0 1
21831: PUSH
21832: LD_INT 1
21834: PPUSH
21835: LD_INT 7
21837: PPUSH
21838: CALL_OW 12
21842: ST_TO_ADDR
// case i of 1 :
21843: LD_VAR 0 1
21847: PUSH
21848: LD_INT 1
21850: DOUBLE
21851: EQUAL
21852: IFTRUE 21856
21854: GO 21866
21856: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21857: LD_STRING earthquake(getX(game), 0, 32)
21859: PPUSH
21860: CALL_OW 559
21864: GO 22091
21866: LD_INT 2
21868: DOUBLE
21869: EQUAL
21870: IFTRUE 21874
21872: GO 21888
21874: POP
// begin ToLua ( displayStucuk(); ) ;
21875: LD_STRING displayStucuk();
21877: PPUSH
21878: CALL_OW 559
// ResetFog ;
21882: CALL_OW 335
// end ; 3 :
21886: GO 22091
21888: LD_INT 3
21890: DOUBLE
21891: EQUAL
21892: IFTRUE 21896
21894: GO 22000
21896: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21897: LD_ADDR_VAR 0 2
21901: PUSH
21902: LD_INT 22
21904: PUSH
21905: LD_OWVAR 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 25
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PPUSH
21928: CALL_OW 69
21932: ST_TO_ADDR
// if not tmp then
21933: LD_VAR 0 2
21937: NOT
21938: IFFALSE 21942
// exit ;
21940: GO 22091
// un := tmp [ rand ( 1 , tmp ) ] ;
21942: LD_ADDR_VAR 0 3
21946: PUSH
21947: LD_VAR 0 2
21951: PUSH
21952: LD_INT 1
21954: PPUSH
21955: LD_VAR 0 2
21959: PPUSH
21960: CALL_OW 12
21964: ARRAY
21965: ST_TO_ADDR
// if Crawls ( un ) then
21966: LD_VAR 0 3
21970: PPUSH
21971: CALL_OW 318
21975: IFFALSE 21986
// ComWalk ( un ) ;
21977: LD_VAR 0 3
21981: PPUSH
21982: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21986: LD_VAR 0 3
21990: PPUSH
21991: LD_INT 8
21993: PPUSH
21994: CALL_OW 336
// end ; 4 :
21998: GO 22091
22000: LD_INT 4
22002: DOUBLE
22003: EQUAL
22004: IFTRUE 22008
22006: GO 22069
22008: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22009: LD_ADDR_VAR 0 2
22013: PUSH
22014: LD_INT 22
22016: PUSH
22017: LD_OWVAR 2
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 30
22028: PUSH
22029: LD_INT 29
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PPUSH
22040: CALL_OW 69
22044: ST_TO_ADDR
// if not tmp then
22045: LD_VAR 0 2
22049: NOT
22050: IFFALSE 22054
// exit ;
22052: GO 22091
// DestroyUnit ( tmp [ 1 ] ) ;
22054: LD_VAR 0 2
22058: PUSH
22059: LD_INT 1
22061: ARRAY
22062: PPUSH
22063: CALL_OW 65
// end ; 5 .. 7 :
22067: GO 22091
22069: LD_INT 5
22071: DOUBLE
22072: GREATEREQUAL
22073: IFFALSE 22081
22075: LD_INT 7
22077: DOUBLE
22078: LESSEQUAL
22079: IFTRUE 22083
22081: GO 22090
22083: POP
// StreamSibBomb ; end ;
22084: CALL 18341 0 0
22088: GO 22091
22090: POP
// end ;
22091: PPOPN 3
22093: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22094: LD_EXP 37
22098: PUSH
22099: LD_EXP 87
22103: AND
22104: IFFALSE 22260
22106: GO 22108
22108: DISABLE
22109: LD_INT 0
22111: PPUSH
22112: PPUSH
22113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22114: LD_ADDR_VAR 0 2
22118: PUSH
22119: LD_INT 81
22121: PUSH
22122: LD_OWVAR 2
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: LD_INT 21
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 21
22146: PUSH
22147: LD_INT 2
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: LIST
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PPUSH
22163: CALL_OW 69
22167: ST_TO_ADDR
// if not tmp then
22168: LD_VAR 0 2
22172: NOT
22173: IFFALSE 22177
// exit ;
22175: GO 22260
// p := 0 ;
22177: LD_ADDR_VAR 0 3
22181: PUSH
22182: LD_INT 0
22184: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22185: LD_INT 35
22187: PPUSH
22188: CALL_OW 67
// p := p + 1 ;
22192: LD_ADDR_VAR 0 3
22196: PUSH
22197: LD_VAR 0 3
22201: PUSH
22202: LD_INT 1
22204: PLUS
22205: ST_TO_ADDR
// for i in tmp do
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: LD_VAR 0 2
22215: PUSH
22216: FOR_IN
22217: IFFALSE 22248
// if GetLives ( i ) < 1000 then
22219: LD_VAR 0 1
22223: PPUSH
22224: CALL_OW 256
22228: PUSH
22229: LD_INT 1000
22231: LESS
22232: IFFALSE 22246
// SetLives ( i , 1000 ) ;
22234: LD_VAR 0 1
22238: PPUSH
22239: LD_INT 1000
22241: PPUSH
22242: CALL_OW 234
22246: GO 22216
22248: POP
22249: POP
// until p > 20 ;
22250: LD_VAR 0 3
22254: PUSH
22255: LD_INT 20
22257: GREATER
22258: IFFALSE 22185
// end ;
22260: PPOPN 3
22262: END
// every 0 0$1 trigger StreamModeActive and sTime do
22263: LD_EXP 37
22267: PUSH
22268: LD_EXP 88
22272: AND
22273: IFFALSE 22308
22275: GO 22277
22277: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22278: LD_INT 28
22280: PPUSH
22281: LD_OWVAR 2
22285: PPUSH
22286: LD_INT 2
22288: PPUSH
22289: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22293: LD_INT 30
22295: PPUSH
22296: LD_OWVAR 2
22300: PPUSH
22301: LD_INT 2
22303: PPUSH
22304: CALL_OW 322
// end ;
22308: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22309: LD_EXP 37
22313: PUSH
22314: LD_EXP 89
22318: AND
22319: IFFALSE 22440
22321: GO 22323
22323: DISABLE
22324: LD_INT 0
22326: PPUSH
22327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22328: LD_ADDR_VAR 0 2
22332: PUSH
22333: LD_INT 22
22335: PUSH
22336: LD_OWVAR 2
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 21
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 3
22357: PUSH
22358: LD_INT 23
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: LIST
22376: PPUSH
22377: CALL_OW 69
22381: ST_TO_ADDR
// if not tmp then
22382: LD_VAR 0 2
22386: NOT
22387: IFFALSE 22391
// exit ;
22389: GO 22440
// for i in tmp do
22391: LD_ADDR_VAR 0 1
22395: PUSH
22396: LD_VAR 0 2
22400: PUSH
22401: FOR_IN
22402: IFFALSE 22438
// begin if Crawls ( i ) then
22404: LD_VAR 0 1
22408: PPUSH
22409: CALL_OW 318
22413: IFFALSE 22424
// ComWalk ( i ) ;
22415: LD_VAR 0 1
22419: PPUSH
22420: CALL_OW 138
// SetClass ( i , 2 ) ;
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_INT 2
22431: PPUSH
22432: CALL_OW 336
// end ;
22436: GO 22401
22438: POP
22439: POP
// end ;
22440: PPOPN 2
22442: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22443: LD_EXP 37
22447: PUSH
22448: LD_EXP 90
22452: AND
22453: IFFALSE 22734
22455: GO 22457
22457: DISABLE
22458: LD_INT 0
22460: PPUSH
22461: PPUSH
22462: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22463: LD_OWVAR 2
22467: PPUSH
22468: LD_INT 9
22470: PPUSH
22471: LD_INT 1
22473: PPUSH
22474: LD_INT 1
22476: PPUSH
22477: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22481: LD_INT 9
22483: PPUSH
22484: LD_OWVAR 2
22488: PPUSH
22489: CALL_OW 343
// uc_side := 9 ;
22493: LD_ADDR_OWVAR 20
22497: PUSH
22498: LD_INT 9
22500: ST_TO_ADDR
// uc_nation := 2 ;
22501: LD_ADDR_OWVAR 21
22505: PUSH
22506: LD_INT 2
22508: ST_TO_ADDR
// hc_name := Dark Warrior ;
22509: LD_ADDR_OWVAR 26
22513: PUSH
22514: LD_STRING Dark Warrior
22516: ST_TO_ADDR
// hc_gallery :=  ;
22517: LD_ADDR_OWVAR 33
22521: PUSH
22522: LD_STRING 
22524: ST_TO_ADDR
// hc_noskilllimit := true ;
22525: LD_ADDR_OWVAR 76
22529: PUSH
22530: LD_INT 1
22532: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22533: LD_ADDR_OWVAR 31
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 30
22543: PUSH
22544: LD_INT 30
22546: PUSH
22547: LD_INT 30
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: ST_TO_ADDR
// un := CreateHuman ;
22556: LD_ADDR_VAR 0 3
22560: PUSH
22561: CALL_OW 44
22565: ST_TO_ADDR
// hc_noskilllimit := false ;
22566: LD_ADDR_OWVAR 76
22570: PUSH
22571: LD_INT 0
22573: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22574: LD_VAR 0 3
22578: PPUSH
22579: LD_INT 1
22581: PPUSH
22582: CALL_OW 51
// p := 0 ;
22586: LD_ADDR_VAR 0 2
22590: PUSH
22591: LD_INT 0
22593: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22594: LD_INT 35
22596: PPUSH
22597: CALL_OW 67
// p := p + 1 ;
22601: LD_ADDR_VAR 0 2
22605: PUSH
22606: LD_VAR 0 2
22610: PUSH
22611: LD_INT 1
22613: PLUS
22614: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22615: LD_VAR 0 3
22619: PPUSH
22620: CALL_OW 256
22624: PUSH
22625: LD_INT 1000
22627: LESS
22628: IFFALSE 22642
// SetLives ( un , 1000 ) ;
22630: LD_VAR 0 3
22634: PPUSH
22635: LD_INT 1000
22637: PPUSH
22638: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22642: LD_VAR 0 3
22646: PPUSH
22647: LD_INT 81
22649: PUSH
22650: LD_OWVAR 2
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 91
22661: PUSH
22662: LD_VAR 0 3
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: PPUSH
22684: LD_VAR 0 3
22688: PPUSH
22689: CALL_OW 74
22693: PPUSH
22694: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22698: LD_VAR 0 2
22702: PUSH
22703: LD_INT 60
22705: GREATER
22706: PUSH
22707: LD_VAR 0 3
22711: PPUSH
22712: CALL_OW 301
22716: OR
22717: IFFALSE 22594
// if un then
22719: LD_VAR 0 3
22723: IFFALSE 22734
// RemoveUnit ( un ) ;
22725: LD_VAR 0 3
22729: PPUSH
22730: CALL_OW 64
// end ;
22734: PPOPN 3
22736: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22737: LD_INT 0
22739: PPUSH
// case cmd of 301 :
22740: LD_VAR 0 1
22744: PUSH
22745: LD_INT 301
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22785
22753: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22754: LD_VAR 0 6
22758: PPUSH
22759: LD_VAR 0 7
22763: PPUSH
22764: LD_VAR 0 8
22768: PPUSH
22769: LD_VAR 0 4
22773: PPUSH
22774: LD_VAR 0 5
22778: PPUSH
22779: CALL 23986 0 5
22783: GO 22906
22785: LD_INT 302
22787: DOUBLE
22788: EQUAL
22789: IFTRUE 22793
22791: GO 22830
22793: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22794: LD_VAR 0 6
22798: PPUSH
22799: LD_VAR 0 7
22803: PPUSH
22804: LD_VAR 0 8
22808: PPUSH
22809: LD_VAR 0 9
22813: PPUSH
22814: LD_VAR 0 4
22818: PPUSH
22819: LD_VAR 0 5
22823: PPUSH
22824: CALL 24077 0 6
22828: GO 22906
22830: LD_INT 303
22832: DOUBLE
22833: EQUAL
22834: IFTRUE 22838
22836: GO 22875
22838: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22839: LD_VAR 0 6
22843: PPUSH
22844: LD_VAR 0 7
22848: PPUSH
22849: LD_VAR 0 8
22853: PPUSH
22854: LD_VAR 0 9
22858: PPUSH
22859: LD_VAR 0 4
22863: PPUSH
22864: LD_VAR 0 5
22868: PPUSH
22869: CALL 22911 0 6
22873: GO 22906
22875: LD_INT 304
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22905
22883: POP
// hHackTeleport ( unit , x , y ) ; end ;
22884: LD_VAR 0 2
22888: PPUSH
22889: LD_VAR 0 4
22893: PPUSH
22894: LD_VAR 0 5
22898: PPUSH
22899: CALL 24670 0 3
22903: GO 22906
22905: POP
// end ;
22906: LD_VAR 0 12
22910: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22911: LD_INT 0
22913: PPUSH
22914: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22915: LD_VAR 0 1
22919: PUSH
22920: LD_INT 1
22922: LESS
22923: PUSH
22924: LD_VAR 0 1
22928: PUSH
22929: LD_INT 3
22931: GREATER
22932: OR
22933: PUSH
22934: LD_VAR 0 5
22938: PPUSH
22939: LD_VAR 0 6
22943: PPUSH
22944: CALL_OW 428
22948: OR
22949: IFFALSE 22953
// exit ;
22951: GO 23673
// uc_side := your_side ;
22953: LD_ADDR_OWVAR 20
22957: PUSH
22958: LD_OWVAR 2
22962: ST_TO_ADDR
// uc_nation := nation ;
22963: LD_ADDR_OWVAR 21
22967: PUSH
22968: LD_VAR 0 1
22972: ST_TO_ADDR
// bc_level = 1 ;
22973: LD_ADDR_OWVAR 43
22977: PUSH
22978: LD_INT 1
22980: ST_TO_ADDR
// case btype of 1 :
22981: LD_VAR 0 2
22985: PUSH
22986: LD_INT 1
22988: DOUBLE
22989: EQUAL
22990: IFTRUE 22994
22992: GO 23005
22994: POP
// bc_type := b_depot ; 2 :
22995: LD_ADDR_OWVAR 42
22999: PUSH
23000: LD_INT 0
23002: ST_TO_ADDR
23003: GO 23617
23005: LD_INT 2
23007: DOUBLE
23008: EQUAL
23009: IFTRUE 23013
23011: GO 23024
23013: POP
// bc_type := b_warehouse ; 3 :
23014: LD_ADDR_OWVAR 42
23018: PUSH
23019: LD_INT 1
23021: ST_TO_ADDR
23022: GO 23617
23024: LD_INT 3
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23043
23032: POP
// bc_type := b_lab ; 4 .. 9 :
23033: LD_ADDR_OWVAR 42
23037: PUSH
23038: LD_INT 6
23040: ST_TO_ADDR
23041: GO 23617
23043: LD_INT 4
23045: DOUBLE
23046: GREATEREQUAL
23047: IFFALSE 23055
23049: LD_INT 9
23051: DOUBLE
23052: LESSEQUAL
23053: IFTRUE 23057
23055: GO 23109
23057: POP
// begin bc_type := b_lab_half ;
23058: LD_ADDR_OWVAR 42
23062: PUSH
23063: LD_INT 7
23065: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23066: LD_ADDR_OWVAR 44
23070: PUSH
23071: LD_INT 10
23073: PUSH
23074: LD_INT 11
23076: PUSH
23077: LD_INT 12
23079: PUSH
23080: LD_INT 15
23082: PUSH
23083: LD_INT 14
23085: PUSH
23086: LD_INT 13
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: LD_VAR 0 2
23101: PUSH
23102: LD_INT 3
23104: MINUS
23105: ARRAY
23106: ST_TO_ADDR
// end ; 10 .. 13 :
23107: GO 23617
23109: LD_INT 10
23111: DOUBLE
23112: GREATEREQUAL
23113: IFFALSE 23121
23115: LD_INT 13
23117: DOUBLE
23118: LESSEQUAL
23119: IFTRUE 23123
23121: GO 23200
23123: POP
// begin bc_type := b_lab_full ;
23124: LD_ADDR_OWVAR 42
23128: PUSH
23129: LD_INT 8
23131: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23132: LD_ADDR_OWVAR 44
23136: PUSH
23137: LD_INT 10
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: LD_INT 14
23145: PUSH
23146: LD_INT 13
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: LD_VAR 0 2
23159: PUSH
23160: LD_INT 9
23162: MINUS
23163: ARRAY
23164: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23165: LD_ADDR_OWVAR 45
23169: PUSH
23170: LD_INT 11
23172: PUSH
23173: LD_INT 15
23175: PUSH
23176: LD_INT 12
23178: PUSH
23179: LD_INT 15
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: PUSH
23188: LD_VAR 0 2
23192: PUSH
23193: LD_INT 9
23195: MINUS
23196: ARRAY
23197: ST_TO_ADDR
// end ; 14 :
23198: GO 23617
23200: LD_INT 14
23202: DOUBLE
23203: EQUAL
23204: IFTRUE 23208
23206: GO 23219
23208: POP
// bc_type := b_workshop ; 15 :
23209: LD_ADDR_OWVAR 42
23213: PUSH
23214: LD_INT 2
23216: ST_TO_ADDR
23217: GO 23617
23219: LD_INT 15
23221: DOUBLE
23222: EQUAL
23223: IFTRUE 23227
23225: GO 23238
23227: POP
// bc_type := b_factory ; 16 :
23228: LD_ADDR_OWVAR 42
23232: PUSH
23233: LD_INT 3
23235: ST_TO_ADDR
23236: GO 23617
23238: LD_INT 16
23240: DOUBLE
23241: EQUAL
23242: IFTRUE 23246
23244: GO 23257
23246: POP
// bc_type := b_ext_gun ; 17 :
23247: LD_ADDR_OWVAR 42
23251: PUSH
23252: LD_INT 17
23254: ST_TO_ADDR
23255: GO 23617
23257: LD_INT 17
23259: DOUBLE
23260: EQUAL
23261: IFTRUE 23265
23263: GO 23293
23265: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23266: LD_ADDR_OWVAR 42
23270: PUSH
23271: LD_INT 19
23273: PUSH
23274: LD_INT 23
23276: PUSH
23277: LD_INT 19
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: PUSH
23285: LD_VAR 0 1
23289: ARRAY
23290: ST_TO_ADDR
23291: GO 23617
23293: LD_INT 18
23295: DOUBLE
23296: EQUAL
23297: IFTRUE 23301
23299: GO 23312
23301: POP
// bc_type := b_ext_radar ; 19 :
23302: LD_ADDR_OWVAR 42
23306: PUSH
23307: LD_INT 20
23309: ST_TO_ADDR
23310: GO 23617
23312: LD_INT 19
23314: DOUBLE
23315: EQUAL
23316: IFTRUE 23320
23318: GO 23331
23320: POP
// bc_type := b_ext_radio ; 20 :
23321: LD_ADDR_OWVAR 42
23325: PUSH
23326: LD_INT 22
23328: ST_TO_ADDR
23329: GO 23617
23331: LD_INT 20
23333: DOUBLE
23334: EQUAL
23335: IFTRUE 23339
23337: GO 23350
23339: POP
// bc_type := b_ext_siberium ; 21 :
23340: LD_ADDR_OWVAR 42
23344: PUSH
23345: LD_INT 21
23347: ST_TO_ADDR
23348: GO 23617
23350: LD_INT 21
23352: DOUBLE
23353: EQUAL
23354: IFTRUE 23358
23356: GO 23369
23358: POP
// bc_type := b_ext_computer ; 22 :
23359: LD_ADDR_OWVAR 42
23363: PUSH
23364: LD_INT 24
23366: ST_TO_ADDR
23367: GO 23617
23369: LD_INT 22
23371: DOUBLE
23372: EQUAL
23373: IFTRUE 23377
23375: GO 23388
23377: POP
// bc_type := b_ext_track ; 23 :
23378: LD_ADDR_OWVAR 42
23382: PUSH
23383: LD_INT 16
23385: ST_TO_ADDR
23386: GO 23617
23388: LD_INT 23
23390: DOUBLE
23391: EQUAL
23392: IFTRUE 23396
23394: GO 23407
23396: POP
// bc_type := b_ext_laser ; 24 :
23397: LD_ADDR_OWVAR 42
23401: PUSH
23402: LD_INT 25
23404: ST_TO_ADDR
23405: GO 23617
23407: LD_INT 24
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23426
23415: POP
// bc_type := b_control_tower ; 25 :
23416: LD_ADDR_OWVAR 42
23420: PUSH
23421: LD_INT 36
23423: ST_TO_ADDR
23424: GO 23617
23426: LD_INT 25
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23445
23434: POP
// bc_type := b_breastwork ; 26 :
23435: LD_ADDR_OWVAR 42
23439: PUSH
23440: LD_INT 31
23442: ST_TO_ADDR
23443: GO 23617
23445: LD_INT 26
23447: DOUBLE
23448: EQUAL
23449: IFTRUE 23453
23451: GO 23464
23453: POP
// bc_type := b_bunker ; 27 :
23454: LD_ADDR_OWVAR 42
23458: PUSH
23459: LD_INT 32
23461: ST_TO_ADDR
23462: GO 23617
23464: LD_INT 27
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23483
23472: POP
// bc_type := b_turret ; 28 :
23473: LD_ADDR_OWVAR 42
23477: PUSH
23478: LD_INT 33
23480: ST_TO_ADDR
23481: GO 23617
23483: LD_INT 28
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23502
23491: POP
// bc_type := b_armoury ; 29 :
23492: LD_ADDR_OWVAR 42
23496: PUSH
23497: LD_INT 4
23499: ST_TO_ADDR
23500: GO 23617
23502: LD_INT 29
23504: DOUBLE
23505: EQUAL
23506: IFTRUE 23510
23508: GO 23521
23510: POP
// bc_type := b_barracks ; 30 :
23511: LD_ADDR_OWVAR 42
23515: PUSH
23516: LD_INT 5
23518: ST_TO_ADDR
23519: GO 23617
23521: LD_INT 30
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23540
23529: POP
// bc_type := b_solar_power ; 31 :
23530: LD_ADDR_OWVAR 42
23534: PUSH
23535: LD_INT 27
23537: ST_TO_ADDR
23538: GO 23617
23540: LD_INT 31
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23559
23548: POP
// bc_type := b_oil_power ; 32 :
23549: LD_ADDR_OWVAR 42
23553: PUSH
23554: LD_INT 26
23556: ST_TO_ADDR
23557: GO 23617
23559: LD_INT 32
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23578
23567: POP
// bc_type := b_siberite_power ; 33 :
23568: LD_ADDR_OWVAR 42
23572: PUSH
23573: LD_INT 28
23575: ST_TO_ADDR
23576: GO 23617
23578: LD_INT 33
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23597
23586: POP
// bc_type := b_oil_mine ; 34 :
23587: LD_ADDR_OWVAR 42
23591: PUSH
23592: LD_INT 29
23594: ST_TO_ADDR
23595: GO 23617
23597: LD_INT 34
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23616
23605: POP
// bc_type := b_siberite_mine ; end ;
23606: LD_ADDR_OWVAR 42
23610: PUSH
23611: LD_INT 30
23613: ST_TO_ADDR
23614: GO 23617
23616: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23617: LD_ADDR_VAR 0 8
23621: PUSH
23622: LD_VAR 0 5
23626: PPUSH
23627: LD_VAR 0 6
23631: PPUSH
23632: LD_VAR 0 3
23636: PPUSH
23637: CALL_OW 47
23641: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23642: LD_OWVAR 42
23646: PUSH
23647: LD_INT 32
23649: PUSH
23650: LD_INT 33
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: IN
23657: IFFALSE 23673
// PlaceWeaponTurret ( b , weapon ) ;
23659: LD_VAR 0 8
23663: PPUSH
23664: LD_VAR 0 4
23668: PPUSH
23669: CALL_OW 431
// end ;
23673: LD_VAR 0 7
23677: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23678: LD_INT 0
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23684: LD_ADDR_VAR 0 4
23688: PUSH
23689: LD_INT 22
23691: PUSH
23692: LD_OWVAR 2
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: LD_INT 30
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 30
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PPUSH
23733: CALL_OW 69
23737: ST_TO_ADDR
// if not tmp then
23738: LD_VAR 0 4
23742: NOT
23743: IFFALSE 23747
// exit ;
23745: GO 23806
// for i in tmp do
23747: LD_ADDR_VAR 0 2
23751: PUSH
23752: LD_VAR 0 4
23756: PUSH
23757: FOR_IN
23758: IFFALSE 23804
// for j = 1 to 3 do
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: DOUBLE
23766: LD_INT 1
23768: DEC
23769: ST_TO_ADDR
23770: LD_INT 3
23772: PUSH
23773: FOR_TO
23774: IFFALSE 23800
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23776: LD_VAR 0 2
23780: PPUSH
23781: CALL_OW 274
23785: PPUSH
23786: LD_VAR 0 3
23790: PPUSH
23791: LD_INT 99999
23793: PPUSH
23794: CALL_OW 277
23798: GO 23773
23800: POP
23801: POP
23802: GO 23757
23804: POP
23805: POP
// end ;
23806: LD_VAR 0 1
23810: RET
// export function hHackSetLevel10 ; var i , j ; begin
23811: LD_INT 0
23813: PPUSH
23814: PPUSH
23815: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23816: LD_ADDR_VAR 0 2
23820: PUSH
23821: LD_INT 21
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PPUSH
23831: CALL_OW 69
23835: PUSH
23836: FOR_IN
23837: IFFALSE 23889
// if IsSelected ( i ) then
23839: LD_VAR 0 2
23843: PPUSH
23844: CALL_OW 306
23848: IFFALSE 23887
// begin for j := 1 to 4 do
23850: LD_ADDR_VAR 0 3
23854: PUSH
23855: DOUBLE
23856: LD_INT 1
23858: DEC
23859: ST_TO_ADDR
23860: LD_INT 4
23862: PUSH
23863: FOR_TO
23864: IFFALSE 23885
// SetSkill ( i , j , 10 ) ;
23866: LD_VAR 0 2
23870: PPUSH
23871: LD_VAR 0 3
23875: PPUSH
23876: LD_INT 10
23878: PPUSH
23879: CALL_OW 237
23883: GO 23863
23885: POP
23886: POP
// end ;
23887: GO 23836
23889: POP
23890: POP
// end ;
23891: LD_VAR 0 1
23895: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23896: LD_INT 0
23898: PPUSH
23899: PPUSH
23900: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 22
23908: PUSH
23909: LD_OWVAR 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 69
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23979
// begin for j := 1 to 4 do
23940: LD_ADDR_VAR 0 3
23944: PUSH
23945: DOUBLE
23946: LD_INT 1
23948: DEC
23949: ST_TO_ADDR
23950: LD_INT 4
23952: PUSH
23953: FOR_TO
23954: IFFALSE 23975
// SetSkill ( i , j , 10 ) ;
23956: LD_VAR 0 2
23960: PPUSH
23961: LD_VAR 0 3
23965: PPUSH
23966: LD_INT 10
23968: PPUSH
23969: CALL_OW 237
23973: GO 23953
23975: POP
23976: POP
// end ;
23977: GO 23937
23979: POP
23980: POP
// end ;
23981: LD_VAR 0 1
23985: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23986: LD_INT 0
23988: PPUSH
// uc_side := your_side ;
23989: LD_ADDR_OWVAR 20
23993: PUSH
23994: LD_OWVAR 2
23998: ST_TO_ADDR
// uc_nation := nation ;
23999: LD_ADDR_OWVAR 21
24003: PUSH
24004: LD_VAR 0 1
24008: ST_TO_ADDR
// InitHc ;
24009: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24013: LD_INT 0
24015: PPUSH
24016: LD_VAR 0 2
24020: PPUSH
24021: LD_VAR 0 3
24025: PPUSH
24026: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24030: LD_VAR 0 4
24034: PPUSH
24035: LD_VAR 0 5
24039: PPUSH
24040: CALL_OW 428
24044: PUSH
24045: LD_INT 0
24047: EQUAL
24048: IFFALSE 24072
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24050: CALL_OW 44
24054: PPUSH
24055: LD_VAR 0 4
24059: PPUSH
24060: LD_VAR 0 5
24064: PPUSH
24065: LD_INT 1
24067: PPUSH
24068: CALL_OW 48
// end ;
24072: LD_VAR 0 6
24076: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
// uc_side := your_side ;
24081: LD_ADDR_OWVAR 20
24085: PUSH
24086: LD_OWVAR 2
24090: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24091: LD_VAR 0 1
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: LD_INT 2
24101: PUSH
24102: LD_INT 3
24104: PUSH
24105: LD_INT 4
24107: PUSH
24108: LD_INT 5
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: IN
24118: IFFALSE 24130
// uc_nation := nation_american else
24120: LD_ADDR_OWVAR 21
24124: PUSH
24125: LD_INT 1
24127: ST_TO_ADDR
24128: GO 24173
// if chassis in [ 11 , 12 , 13 , 14 ] then
24130: LD_VAR 0 1
24134: PUSH
24135: LD_INT 11
24137: PUSH
24138: LD_INT 12
24140: PUSH
24141: LD_INT 13
24143: PUSH
24144: LD_INT 14
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: IN
24153: IFFALSE 24165
// uc_nation := nation_arabian else
24155: LD_ADDR_OWVAR 21
24159: PUSH
24160: LD_INT 2
24162: ST_TO_ADDR
24163: GO 24173
// uc_nation := nation_russian ;
24165: LD_ADDR_OWVAR 21
24169: PUSH
24170: LD_INT 3
24172: ST_TO_ADDR
// vc_chassis := chassis ;
24173: LD_ADDR_OWVAR 37
24177: PUSH
24178: LD_VAR 0 1
24182: ST_TO_ADDR
// vc_engine := engine ;
24183: LD_ADDR_OWVAR 39
24187: PUSH
24188: LD_VAR 0 2
24192: ST_TO_ADDR
// vc_control := control ;
24193: LD_ADDR_OWVAR 38
24197: PUSH
24198: LD_VAR 0 3
24202: ST_TO_ADDR
// vc_weapon := weapon ;
24203: LD_ADDR_OWVAR 40
24207: PUSH
24208: LD_VAR 0 4
24212: ST_TO_ADDR
// un := CreateVehicle ;
24213: LD_ADDR_VAR 0 8
24217: PUSH
24218: CALL_OW 45
24222: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24223: LD_VAR 0 8
24227: PPUSH
24228: LD_INT 0
24230: PPUSH
24231: LD_INT 5
24233: PPUSH
24234: CALL_OW 12
24238: PPUSH
24239: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24243: LD_VAR 0 8
24247: PPUSH
24248: LD_VAR 0 5
24252: PPUSH
24253: LD_VAR 0 6
24257: PPUSH
24258: LD_INT 1
24260: PPUSH
24261: CALL_OW 48
// end ;
24265: LD_VAR 0 7
24269: RET
// export hInvincible ; every 1 do
24270: GO 24272
24272: DISABLE
// hInvincible := [ ] ;
24273: LD_ADDR_EXP 91
24277: PUSH
24278: EMPTY
24279: ST_TO_ADDR
24280: END
// every 10 do var i ;
24281: GO 24283
24283: DISABLE
24284: LD_INT 0
24286: PPUSH
// begin enable ;
24287: ENABLE
// if not hInvincible then
24288: LD_EXP 91
24292: NOT
24293: IFFALSE 24297
// exit ;
24295: GO 24341
// for i in hInvincible do
24297: LD_ADDR_VAR 0 1
24301: PUSH
24302: LD_EXP 91
24306: PUSH
24307: FOR_IN
24308: IFFALSE 24339
// if GetLives ( i ) < 1000 then
24310: LD_VAR 0 1
24314: PPUSH
24315: CALL_OW 256
24319: PUSH
24320: LD_INT 1000
24322: LESS
24323: IFFALSE 24337
// SetLives ( i , 1000 ) ;
24325: LD_VAR 0 1
24329: PPUSH
24330: LD_INT 1000
24332: PPUSH
24333: CALL_OW 234
24337: GO 24307
24339: POP
24340: POP
// end ;
24341: PPOPN 1
24343: END
// export function hHackInvincible ; var i ; begin
24344: LD_INT 0
24346: PPUSH
24347: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24348: LD_ADDR_VAR 0 2
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: PPUSH
24381: CALL_OW 69
24385: PUSH
24386: FOR_IN
24387: IFFALSE 24448
// if IsSelected ( i ) then
24389: LD_VAR 0 2
24393: PPUSH
24394: CALL_OW 306
24398: IFFALSE 24446
// begin if i in hInvincible then
24400: LD_VAR 0 2
24404: PUSH
24405: LD_EXP 91
24409: IN
24410: IFFALSE 24430
// hInvincible := hInvincible diff i else
24412: LD_ADDR_EXP 91
24416: PUSH
24417: LD_EXP 91
24421: PUSH
24422: LD_VAR 0 2
24426: DIFF
24427: ST_TO_ADDR
24428: GO 24446
// hInvincible := hInvincible union i ;
24430: LD_ADDR_EXP 91
24434: PUSH
24435: LD_EXP 91
24439: PUSH
24440: LD_VAR 0 2
24444: UNION
24445: ST_TO_ADDR
// end ;
24446: GO 24386
24448: POP
24449: POP
// end ;
24450: LD_VAR 0 1
24454: RET
// export function hHackInvisible ; var i , j ; begin
24455: LD_INT 0
24457: PPUSH
24458: PPUSH
24459: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24460: LD_ADDR_VAR 0 2
24464: PUSH
24465: LD_INT 21
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: PUSH
24480: FOR_IN
24481: IFFALSE 24505
// if IsSelected ( i ) then
24483: LD_VAR 0 2
24487: PPUSH
24488: CALL_OW 306
24492: IFFALSE 24503
// ComForceInvisible ( i ) ;
24494: LD_VAR 0 2
24498: PPUSH
24499: CALL_OW 496
24503: GO 24480
24505: POP
24506: POP
// end ;
24507: LD_VAR 0 1
24511: RET
// export function hHackChangeYourSide ; begin
24512: LD_INT 0
24514: PPUSH
// if your_side = 8 then
24515: LD_OWVAR 2
24519: PUSH
24520: LD_INT 8
24522: EQUAL
24523: IFFALSE 24535
// your_side := 0 else
24525: LD_ADDR_OWVAR 2
24529: PUSH
24530: LD_INT 0
24532: ST_TO_ADDR
24533: GO 24549
// your_side := your_side + 1 ;
24535: LD_ADDR_OWVAR 2
24539: PUSH
24540: LD_OWVAR 2
24544: PUSH
24545: LD_INT 1
24547: PLUS
24548: ST_TO_ADDR
// end ;
24549: LD_VAR 0 1
24553: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24554: LD_INT 0
24556: PPUSH
24557: PPUSH
24558: PPUSH
// for i in all_units do
24559: LD_ADDR_VAR 0 2
24563: PUSH
24564: LD_OWVAR 3
24568: PUSH
24569: FOR_IN
24570: IFFALSE 24648
// if IsSelected ( i ) then
24572: LD_VAR 0 2
24576: PPUSH
24577: CALL_OW 306
24581: IFFALSE 24646
// begin j := GetSide ( i ) ;
24583: LD_ADDR_VAR 0 3
24587: PUSH
24588: LD_VAR 0 2
24592: PPUSH
24593: CALL_OW 255
24597: ST_TO_ADDR
// if j = 8 then
24598: LD_VAR 0 3
24602: PUSH
24603: LD_INT 8
24605: EQUAL
24606: IFFALSE 24618
// j := 0 else
24608: LD_ADDR_VAR 0 3
24612: PUSH
24613: LD_INT 0
24615: ST_TO_ADDR
24616: GO 24632
// j := j + 1 ;
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: LD_VAR 0 3
24627: PUSH
24628: LD_INT 1
24630: PLUS
24631: ST_TO_ADDR
// SetSide ( i , j ) ;
24632: LD_VAR 0 2
24636: PPUSH
24637: LD_VAR 0 3
24641: PPUSH
24642: CALL_OW 235
// end ;
24646: GO 24569
24648: POP
24649: POP
// end ;
24650: LD_VAR 0 1
24654: RET
// export function hHackFog ; begin
24655: LD_INT 0
24657: PPUSH
// FogOff ( true ) ;
24658: LD_INT 1
24660: PPUSH
24661: CALL_OW 344
// end ;
24665: LD_VAR 0 1
24669: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24670: LD_INT 0
24672: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24673: LD_VAR 0 1
24677: PPUSH
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_VAR 0 3
24687: PPUSH
24688: LD_INT 1
24690: PPUSH
24691: LD_INT 1
24693: PPUSH
24694: CALL_OW 483
// CenterOnXY ( x , y ) ;
24698: LD_VAR 0 2
24702: PPUSH
24703: LD_VAR 0 3
24707: PPUSH
24708: CALL_OW 84
// end ; end_of_file
24712: LD_VAR 0 4
24716: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24717: LD_INT 0
24719: PPUSH
24720: PPUSH
24721: PPUSH
24722: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24723: LD_VAR 0 1
24727: PPUSH
24728: CALL_OW 264
24732: PUSH
24733: LD_EXP 25
24737: EQUAL
24738: IFFALSE 24810
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24740: LD_INT 68
24742: PPUSH
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 255
24752: PPUSH
24753: CALL_OW 321
24757: PUSH
24758: LD_INT 2
24760: EQUAL
24761: IFFALSE 24773
// eff := 70 else
24763: LD_ADDR_VAR 0 4
24767: PUSH
24768: LD_INT 70
24770: ST_TO_ADDR
24771: GO 24781
// eff := 30 ;
24773: LD_ADDR_VAR 0 4
24777: PUSH
24778: LD_INT 30
24780: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24781: LD_VAR 0 1
24785: PPUSH
24786: CALL_OW 250
24790: PPUSH
24791: LD_VAR 0 1
24795: PPUSH
24796: CALL_OW 251
24800: PPUSH
24801: LD_VAR 0 4
24805: PPUSH
24806: CALL_OW 495
// end ; end ;
24810: LD_VAR 0 2
24814: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24815: LD_INT 0
24817: PPUSH
// end ;
24818: LD_VAR 0 4
24822: RET
// export function SOS_Command ( cmd ) ; begin
24823: LD_INT 0
24825: PPUSH
// end ;
24826: LD_VAR 0 2
24830: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24831: LD_INT 0
24833: PPUSH
// if cmd = 121 then
24834: LD_VAR 0 1
24838: PUSH
24839: LD_INT 121
24841: EQUAL
24842: IFFALSE 24844
// end ;
24844: LD_VAR 0 6
24848: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24849: LD_INT 0
24851: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24852: LD_VAR 0 1
24856: PUSH
24857: LD_INT 250
24859: EQUAL
24860: PUSH
24861: LD_VAR 0 2
24865: PPUSH
24866: CALL_OW 264
24870: PUSH
24871: LD_EXP 28
24875: EQUAL
24876: AND
24877: IFFALSE 24898
// MinerPlaceMine ( unit , x , y ) ;
24879: LD_VAR 0 2
24883: PPUSH
24884: LD_VAR 0 4
24888: PPUSH
24889: LD_VAR 0 5
24893: PPUSH
24894: CALL 27247 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24898: LD_VAR 0 1
24902: PUSH
24903: LD_INT 251
24905: EQUAL
24906: PUSH
24907: LD_VAR 0 2
24911: PPUSH
24912: CALL_OW 264
24916: PUSH
24917: LD_EXP 28
24921: EQUAL
24922: AND
24923: IFFALSE 24944
// MinerDetonateMine ( unit , x , y ) ;
24925: LD_VAR 0 2
24929: PPUSH
24930: LD_VAR 0 4
24934: PPUSH
24935: LD_VAR 0 5
24939: PPUSH
24940: CALL 27524 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 252
24951: EQUAL
24952: PUSH
24953: LD_VAR 0 2
24957: PPUSH
24958: CALL_OW 264
24962: PUSH
24963: LD_EXP 28
24967: EQUAL
24968: AND
24969: IFFALSE 24990
// MinerCreateMinefield ( unit , x , y ) ;
24971: LD_VAR 0 2
24975: PPUSH
24976: LD_VAR 0 4
24980: PPUSH
24981: LD_VAR 0 5
24985: PPUSH
24986: CALL 27941 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24990: LD_VAR 0 1
24994: PUSH
24995: LD_INT 253
24997: EQUAL
24998: PUSH
24999: LD_VAR 0 2
25003: PPUSH
25004: CALL_OW 257
25008: PUSH
25009: LD_INT 5
25011: EQUAL
25012: AND
25013: IFFALSE 25034
// ComBinocular ( unit , x , y ) ;
25015: LD_VAR 0 2
25019: PPUSH
25020: LD_VAR 0 4
25024: PPUSH
25025: LD_VAR 0 5
25029: PPUSH
25030: CALL 28312 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25034: LD_VAR 0 1
25038: PUSH
25039: LD_INT 254
25041: EQUAL
25042: PUSH
25043: LD_VAR 0 2
25047: PPUSH
25048: CALL_OW 264
25052: PUSH
25053: LD_EXP 23
25057: EQUAL
25058: AND
25059: PUSH
25060: LD_VAR 0 3
25064: PPUSH
25065: CALL_OW 263
25069: PUSH
25070: LD_INT 3
25072: EQUAL
25073: AND
25074: IFFALSE 25090
// HackDestroyVehicle ( unit , selectedUnit ) ;
25076: LD_VAR 0 2
25080: PPUSH
25081: LD_VAR 0 3
25085: PPUSH
25086: CALL 26607 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25090: LD_VAR 0 1
25094: PUSH
25095: LD_INT 255
25097: EQUAL
25098: PUSH
25099: LD_VAR 0 2
25103: PPUSH
25104: CALL_OW 264
25108: PUSH
25109: LD_INT 14
25111: PUSH
25112: LD_INT 53
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: IN
25119: AND
25120: PUSH
25121: LD_VAR 0 4
25125: PPUSH
25126: LD_VAR 0 5
25130: PPUSH
25131: CALL_OW 488
25135: AND
25136: IFFALSE 25160
// CutTreeXYR ( unit , x , y , 12 ) ;
25138: LD_VAR 0 2
25142: PPUSH
25143: LD_VAR 0 4
25147: PPUSH
25148: LD_VAR 0 5
25152: PPUSH
25153: LD_INT 12
25155: PPUSH
25156: CALL 25173 0 4
// end ;
25160: LD_VAR 0 6
25164: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25165: LD_INT 0
25167: PPUSH
// end ;
25168: LD_VAR 0 4
25172: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25173: LD_INT 0
25175: PPUSH
25176: PPUSH
25177: PPUSH
25178: PPUSH
25179: PPUSH
25180: PPUSH
25181: PPUSH
25182: PPUSH
25183: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25184: LD_VAR 0 1
25188: NOT
25189: PUSH
25190: LD_VAR 0 2
25194: PPUSH
25195: LD_VAR 0 3
25199: PPUSH
25200: CALL_OW 488
25204: NOT
25205: OR
25206: PUSH
25207: LD_VAR 0 4
25211: NOT
25212: OR
25213: IFFALSE 25217
// exit ;
25215: GO 25557
// list := [ ] ;
25217: LD_ADDR_VAR 0 13
25221: PUSH
25222: EMPTY
25223: ST_TO_ADDR
// if x - r < 0 then
25224: LD_VAR 0 2
25228: PUSH
25229: LD_VAR 0 4
25233: MINUS
25234: PUSH
25235: LD_INT 0
25237: LESS
25238: IFFALSE 25250
// min_x := 0 else
25240: LD_ADDR_VAR 0 7
25244: PUSH
25245: LD_INT 0
25247: ST_TO_ADDR
25248: GO 25266
// min_x := x - r ;
25250: LD_ADDR_VAR 0 7
25254: PUSH
25255: LD_VAR 0 2
25259: PUSH
25260: LD_VAR 0 4
25264: MINUS
25265: ST_TO_ADDR
// if y - r < 0 then
25266: LD_VAR 0 3
25270: PUSH
25271: LD_VAR 0 4
25275: MINUS
25276: PUSH
25277: LD_INT 0
25279: LESS
25280: IFFALSE 25292
// min_y := 0 else
25282: LD_ADDR_VAR 0 8
25286: PUSH
25287: LD_INT 0
25289: ST_TO_ADDR
25290: GO 25308
// min_y := y - r ;
25292: LD_ADDR_VAR 0 8
25296: PUSH
25297: LD_VAR 0 3
25301: PUSH
25302: LD_VAR 0 4
25306: MINUS
25307: ST_TO_ADDR
// max_x := x + r ;
25308: LD_ADDR_VAR 0 9
25312: PUSH
25313: LD_VAR 0 2
25317: PUSH
25318: LD_VAR 0 4
25322: PLUS
25323: ST_TO_ADDR
// max_y := y + r ;
25324: LD_ADDR_VAR 0 10
25328: PUSH
25329: LD_VAR 0 3
25333: PUSH
25334: LD_VAR 0 4
25338: PLUS
25339: ST_TO_ADDR
// for _x = min_x to max_x do
25340: LD_ADDR_VAR 0 11
25344: PUSH
25345: DOUBLE
25346: LD_VAR 0 7
25350: DEC
25351: ST_TO_ADDR
25352: LD_VAR 0 9
25356: PUSH
25357: FOR_TO
25358: IFFALSE 25475
// for _y = min_y to max_y do
25360: LD_ADDR_VAR 0 12
25364: PUSH
25365: DOUBLE
25366: LD_VAR 0 8
25370: DEC
25371: ST_TO_ADDR
25372: LD_VAR 0 10
25376: PUSH
25377: FOR_TO
25378: IFFALSE 25471
// begin if not ValidHex ( _x , _y ) then
25380: LD_VAR 0 11
25384: PPUSH
25385: LD_VAR 0 12
25389: PPUSH
25390: CALL_OW 488
25394: NOT
25395: IFFALSE 25399
// continue ;
25397: GO 25377
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25399: LD_VAR 0 11
25403: PPUSH
25404: LD_VAR 0 12
25408: PPUSH
25409: CALL_OW 351
25413: PUSH
25414: LD_VAR 0 11
25418: PPUSH
25419: LD_VAR 0 12
25423: PPUSH
25424: CALL_OW 554
25428: AND
25429: IFFALSE 25469
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25431: LD_ADDR_VAR 0 13
25435: PUSH
25436: LD_VAR 0 13
25440: PPUSH
25441: LD_VAR 0 13
25445: PUSH
25446: LD_INT 1
25448: PLUS
25449: PPUSH
25450: LD_VAR 0 11
25454: PUSH
25455: LD_VAR 0 12
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PPUSH
25464: CALL_OW 2
25468: ST_TO_ADDR
// end ;
25469: GO 25377
25471: POP
25472: POP
25473: GO 25357
25475: POP
25476: POP
// if not list then
25477: LD_VAR 0 13
25481: NOT
25482: IFFALSE 25486
// exit ;
25484: GO 25557
// for i in list do
25486: LD_ADDR_VAR 0 6
25490: PUSH
25491: LD_VAR 0 13
25495: PUSH
25496: FOR_IN
25497: IFFALSE 25555
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25499: LD_VAR 0 1
25503: PPUSH
25504: LD_STRING M
25506: PUSH
25507: LD_VAR 0 6
25511: PUSH
25512: LD_INT 1
25514: ARRAY
25515: PUSH
25516: LD_VAR 0 6
25520: PUSH
25521: LD_INT 2
25523: ARRAY
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: PUSH
25546: EMPTY
25547: LIST
25548: PPUSH
25549: CALL_OW 447
25553: GO 25496
25555: POP
25556: POP
// end ;
25557: LD_VAR 0 5
25561: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25562: LD_EXP 94
25566: NOT
25567: IFFALSE 25617
25569: GO 25571
25571: DISABLE
// begin initHack := true ;
25572: LD_ADDR_EXP 94
25576: PUSH
25577: LD_INT 1
25579: ST_TO_ADDR
// hackTanks := [ ] ;
25580: LD_ADDR_EXP 95
25584: PUSH
25585: EMPTY
25586: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25587: LD_ADDR_EXP 96
25591: PUSH
25592: EMPTY
25593: ST_TO_ADDR
// hackLimit := 3 ;
25594: LD_ADDR_EXP 97
25598: PUSH
25599: LD_INT 3
25601: ST_TO_ADDR
// hackDist := 12 ;
25602: LD_ADDR_EXP 98
25606: PUSH
25607: LD_INT 12
25609: ST_TO_ADDR
// hackCounter := [ ] ;
25610: LD_ADDR_EXP 99
25614: PUSH
25615: EMPTY
25616: ST_TO_ADDR
// end ;
25617: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25618: LD_EXP 94
25622: PUSH
25623: LD_INT 34
25625: PUSH
25626: LD_EXP 23
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PPUSH
25635: CALL_OW 69
25639: AND
25640: IFFALSE 25895
25642: GO 25644
25644: DISABLE
25645: LD_INT 0
25647: PPUSH
25648: PPUSH
// begin enable ;
25649: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25650: LD_ADDR_VAR 0 1
25654: PUSH
25655: LD_INT 34
25657: PUSH
25658: LD_EXP 23
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PPUSH
25667: CALL_OW 69
25671: PUSH
25672: FOR_IN
25673: IFFALSE 25893
// begin if not i in hackTanks then
25675: LD_VAR 0 1
25679: PUSH
25680: LD_EXP 95
25684: IN
25685: NOT
25686: IFFALSE 25769
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25688: LD_ADDR_EXP 95
25692: PUSH
25693: LD_EXP 95
25697: PPUSH
25698: LD_EXP 95
25702: PUSH
25703: LD_INT 1
25705: PLUS
25706: PPUSH
25707: LD_VAR 0 1
25711: PPUSH
25712: CALL_OW 1
25716: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25717: LD_ADDR_EXP 96
25721: PUSH
25722: LD_EXP 96
25726: PPUSH
25727: LD_EXP 96
25731: PUSH
25732: LD_INT 1
25734: PLUS
25735: PPUSH
25736: EMPTY
25737: PPUSH
25738: CALL_OW 1
25742: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25743: LD_ADDR_EXP 99
25747: PUSH
25748: LD_EXP 99
25752: PPUSH
25753: LD_EXP 99
25757: PUSH
25758: LD_INT 1
25760: PLUS
25761: PPUSH
25762: EMPTY
25763: PPUSH
25764: CALL_OW 1
25768: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25769: LD_VAR 0 1
25773: PPUSH
25774: CALL_OW 302
25778: NOT
25779: IFFALSE 25792
// begin HackUnlinkAll ( i ) ;
25781: LD_VAR 0 1
25785: PPUSH
25786: CALL 25898 0 1
// continue ;
25790: GO 25672
// end ; HackCheckCapturedStatus ( i ) ;
25792: LD_VAR 0 1
25796: PPUSH
25797: CALL 26341 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25801: LD_ADDR_VAR 0 2
25805: PUSH
25806: LD_INT 81
25808: PUSH
25809: LD_VAR 0 1
25813: PPUSH
25814: CALL_OW 255
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 33
25825: PUSH
25826: LD_INT 3
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 91
25835: PUSH
25836: LD_VAR 0 1
25840: PUSH
25841: LD_EXP 98
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 50
25853: PUSH
25854: EMPTY
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: PPUSH
25863: CALL_OW 69
25867: ST_TO_ADDR
// if not tmp then
25868: LD_VAR 0 2
25872: NOT
25873: IFFALSE 25877
// continue ;
25875: GO 25672
// HackLink ( i , tmp ) ;
25877: LD_VAR 0 1
25881: PPUSH
25882: LD_VAR 0 2
25886: PPUSH
25887: CALL 26034 0 2
// end ;
25891: GO 25672
25893: POP
25894: POP
// end ;
25895: PPOPN 2
25897: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25898: LD_INT 0
25900: PPUSH
25901: PPUSH
25902: PPUSH
// if not hack in hackTanks then
25903: LD_VAR 0 1
25907: PUSH
25908: LD_EXP 95
25912: IN
25913: NOT
25914: IFFALSE 25918
// exit ;
25916: GO 26029
// index := GetElementIndex ( hackTanks , hack ) ;
25918: LD_ADDR_VAR 0 4
25922: PUSH
25923: LD_EXP 95
25927: PPUSH
25928: LD_VAR 0 1
25932: PPUSH
25933: CALL 33463 0 2
25937: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25938: LD_EXP 96
25942: PUSH
25943: LD_VAR 0 4
25947: ARRAY
25948: IFFALSE 26029
// begin for i in hackTanksCaptured [ index ] do
25950: LD_ADDR_VAR 0 3
25954: PUSH
25955: LD_EXP 96
25959: PUSH
25960: LD_VAR 0 4
25964: ARRAY
25965: PUSH
25966: FOR_IN
25967: IFFALSE 25993
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25969: LD_VAR 0 3
25973: PUSH
25974: LD_INT 1
25976: ARRAY
25977: PPUSH
25978: LD_VAR 0 3
25982: PUSH
25983: LD_INT 2
25985: ARRAY
25986: PPUSH
25987: CALL_OW 235
25991: GO 25966
25993: POP
25994: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25995: LD_ADDR_EXP 96
25999: PUSH
26000: LD_EXP 96
26004: PPUSH
26005: LD_VAR 0 4
26009: PPUSH
26010: EMPTY
26011: PPUSH
26012: CALL_OW 1
26016: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26017: LD_VAR 0 1
26021: PPUSH
26022: LD_INT 0
26024: PPUSH
26025: CALL_OW 505
// end ; end ;
26029: LD_VAR 0 2
26033: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26034: LD_INT 0
26036: PPUSH
26037: PPUSH
26038: PPUSH
// if not hack in hackTanks or not vehicles then
26039: LD_VAR 0 1
26043: PUSH
26044: LD_EXP 95
26048: IN
26049: NOT
26050: PUSH
26051: LD_VAR 0 2
26055: NOT
26056: OR
26057: IFFALSE 26061
// exit ;
26059: GO 26336
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26061: LD_ADDR_VAR 0 2
26065: PUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: LD_VAR 0 2
26075: PPUSH
26076: LD_INT 1
26078: PPUSH
26079: LD_INT 1
26081: PPUSH
26082: CALL 34113 0 4
26086: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26087: LD_ADDR_VAR 0 5
26091: PUSH
26092: LD_EXP 95
26096: PPUSH
26097: LD_VAR 0 1
26101: PPUSH
26102: CALL 33463 0 2
26106: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26107: LD_EXP 96
26111: PUSH
26112: LD_VAR 0 5
26116: ARRAY
26117: PUSH
26118: LD_EXP 97
26122: LESS
26123: IFFALSE 26312
// begin for i := 1 to vehicles do
26125: LD_ADDR_VAR 0 4
26129: PUSH
26130: DOUBLE
26131: LD_INT 1
26133: DEC
26134: ST_TO_ADDR
26135: LD_VAR 0 2
26139: PUSH
26140: FOR_TO
26141: IFFALSE 26310
// begin if hackTanksCaptured [ index ] = hackLimit then
26143: LD_EXP 96
26147: PUSH
26148: LD_VAR 0 5
26152: ARRAY
26153: PUSH
26154: LD_EXP 97
26158: EQUAL
26159: IFFALSE 26163
// break ;
26161: GO 26310
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26163: LD_ADDR_EXP 99
26167: PUSH
26168: LD_EXP 99
26172: PPUSH
26173: LD_VAR 0 5
26177: PPUSH
26178: LD_EXP 99
26182: PUSH
26183: LD_VAR 0 5
26187: ARRAY
26188: PUSH
26189: LD_INT 1
26191: PLUS
26192: PPUSH
26193: CALL_OW 1
26197: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26198: LD_ADDR_EXP 96
26202: PUSH
26203: LD_EXP 96
26207: PPUSH
26208: LD_VAR 0 5
26212: PUSH
26213: LD_EXP 96
26217: PUSH
26218: LD_VAR 0 5
26222: ARRAY
26223: PUSH
26224: LD_INT 1
26226: PLUS
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PPUSH
26232: LD_VAR 0 2
26236: PUSH
26237: LD_VAR 0 4
26241: ARRAY
26242: PUSH
26243: LD_VAR 0 2
26247: PUSH
26248: LD_VAR 0 4
26252: ARRAY
26253: PPUSH
26254: CALL_OW 255
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL 33678 0 3
26267: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26268: LD_VAR 0 2
26272: PUSH
26273: LD_VAR 0 4
26277: ARRAY
26278: PPUSH
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL_OW 255
26288: PPUSH
26289: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26293: LD_VAR 0 2
26297: PUSH
26298: LD_VAR 0 4
26302: ARRAY
26303: PPUSH
26304: CALL_OW 141
// end ;
26308: GO 26140
26310: POP
26311: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26312: LD_VAR 0 1
26316: PPUSH
26317: LD_EXP 96
26321: PUSH
26322: LD_VAR 0 5
26326: ARRAY
26327: PUSH
26328: LD_INT 0
26330: PLUS
26331: PPUSH
26332: CALL_OW 505
// end ;
26336: LD_VAR 0 3
26340: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26341: LD_INT 0
26343: PPUSH
26344: PPUSH
26345: PPUSH
26346: PPUSH
// if not hack in hackTanks then
26347: LD_VAR 0 1
26351: PUSH
26352: LD_EXP 95
26356: IN
26357: NOT
26358: IFFALSE 26362
// exit ;
26360: GO 26602
// index := GetElementIndex ( hackTanks , hack ) ;
26362: LD_ADDR_VAR 0 4
26366: PUSH
26367: LD_EXP 95
26371: PPUSH
26372: LD_VAR 0 1
26376: PPUSH
26377: CALL 33463 0 2
26381: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26382: LD_ADDR_VAR 0 3
26386: PUSH
26387: DOUBLE
26388: LD_EXP 96
26392: PUSH
26393: LD_VAR 0 4
26397: ARRAY
26398: INC
26399: ST_TO_ADDR
26400: LD_INT 1
26402: PUSH
26403: FOR_DOWNTO
26404: IFFALSE 26576
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26406: LD_ADDR_VAR 0 5
26410: PUSH
26411: LD_EXP 96
26415: PUSH
26416: LD_VAR 0 4
26420: ARRAY
26421: PUSH
26422: LD_VAR 0 3
26426: ARRAY
26427: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26428: LD_VAR 0 5
26432: PUSH
26433: LD_INT 1
26435: ARRAY
26436: PPUSH
26437: CALL_OW 302
26441: NOT
26442: PUSH
26443: LD_VAR 0 5
26447: PUSH
26448: LD_INT 1
26450: ARRAY
26451: PPUSH
26452: CALL_OW 255
26456: PUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: CALL_OW 255
26466: NONEQUAL
26467: OR
26468: IFFALSE 26574
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26470: LD_VAR 0 5
26474: PUSH
26475: LD_INT 1
26477: ARRAY
26478: PPUSH
26479: CALL_OW 305
26483: PUSH
26484: LD_VAR 0 5
26488: PUSH
26489: LD_INT 1
26491: ARRAY
26492: PPUSH
26493: CALL_OW 255
26497: PUSH
26498: LD_VAR 0 1
26502: PPUSH
26503: CALL_OW 255
26507: EQUAL
26508: AND
26509: IFFALSE 26533
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26511: LD_VAR 0 5
26515: PUSH
26516: LD_INT 1
26518: ARRAY
26519: PPUSH
26520: LD_VAR 0 5
26524: PUSH
26525: LD_INT 2
26527: ARRAY
26528: PPUSH
26529: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26533: LD_ADDR_EXP 96
26537: PUSH
26538: LD_EXP 96
26542: PPUSH
26543: LD_VAR 0 4
26547: PPUSH
26548: LD_EXP 96
26552: PUSH
26553: LD_VAR 0 4
26557: ARRAY
26558: PPUSH
26559: LD_VAR 0 3
26563: PPUSH
26564: CALL_OW 3
26568: PPUSH
26569: CALL_OW 1
26573: ST_TO_ADDR
// end ; end ;
26574: GO 26403
26576: POP
26577: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26578: LD_VAR 0 1
26582: PPUSH
26583: LD_EXP 96
26587: PUSH
26588: LD_VAR 0 4
26592: ARRAY
26593: PUSH
26594: LD_INT 0
26596: PLUS
26597: PPUSH
26598: CALL_OW 505
// end ;
26602: LD_VAR 0 2
26606: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26607: LD_INT 0
26609: PPUSH
26610: PPUSH
26611: PPUSH
26612: PPUSH
// if not hack in hackTanks then
26613: LD_VAR 0 1
26617: PUSH
26618: LD_EXP 95
26622: IN
26623: NOT
26624: IFFALSE 26628
// exit ;
26626: GO 26713
// index := GetElementIndex ( hackTanks , hack ) ;
26628: LD_ADDR_VAR 0 5
26632: PUSH
26633: LD_EXP 95
26637: PPUSH
26638: LD_VAR 0 1
26642: PPUSH
26643: CALL 33463 0 2
26647: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26648: LD_ADDR_VAR 0 4
26652: PUSH
26653: DOUBLE
26654: LD_INT 1
26656: DEC
26657: ST_TO_ADDR
26658: LD_EXP 96
26662: PUSH
26663: LD_VAR 0 5
26667: ARRAY
26668: PUSH
26669: FOR_TO
26670: IFFALSE 26711
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26672: LD_EXP 96
26676: PUSH
26677: LD_VAR 0 5
26681: ARRAY
26682: PUSH
26683: LD_VAR 0 4
26687: ARRAY
26688: PUSH
26689: LD_INT 1
26691: ARRAY
26692: PUSH
26693: LD_VAR 0 2
26697: EQUAL
26698: IFFALSE 26709
// KillUnit ( vehicle ) ;
26700: LD_VAR 0 2
26704: PPUSH
26705: CALL_OW 66
26709: GO 26669
26711: POP
26712: POP
// end ;
26713: LD_VAR 0 3
26717: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26718: LD_EXP 100
26722: NOT
26723: IFFALSE 26758
26725: GO 26727
26727: DISABLE
// begin initMiner := true ;
26728: LD_ADDR_EXP 100
26732: PUSH
26733: LD_INT 1
26735: ST_TO_ADDR
// minersList := [ ] ;
26736: LD_ADDR_EXP 101
26740: PUSH
26741: EMPTY
26742: ST_TO_ADDR
// minerMinesList := [ ] ;
26743: LD_ADDR_EXP 102
26747: PUSH
26748: EMPTY
26749: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26750: LD_ADDR_EXP 103
26754: PUSH
26755: LD_INT 5
26757: ST_TO_ADDR
// end ;
26758: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26759: LD_EXP 100
26763: PUSH
26764: LD_INT 34
26766: PUSH
26767: LD_EXP 28
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PPUSH
26776: CALL_OW 69
26780: AND
26781: IFFALSE 27244
26783: GO 26785
26785: DISABLE
26786: LD_INT 0
26788: PPUSH
26789: PPUSH
26790: PPUSH
26791: PPUSH
// begin enable ;
26792: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26793: LD_ADDR_VAR 0 1
26797: PUSH
26798: LD_INT 34
26800: PUSH
26801: LD_EXP 28
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PPUSH
26810: CALL_OW 69
26814: PUSH
26815: FOR_IN
26816: IFFALSE 26888
// begin if not i in minersList then
26818: LD_VAR 0 1
26822: PUSH
26823: LD_EXP 101
26827: IN
26828: NOT
26829: IFFALSE 26886
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26831: LD_ADDR_EXP 101
26835: PUSH
26836: LD_EXP 101
26840: PPUSH
26841: LD_EXP 101
26845: PUSH
26846: LD_INT 1
26848: PLUS
26849: PPUSH
26850: LD_VAR 0 1
26854: PPUSH
26855: CALL_OW 1
26859: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26860: LD_ADDR_EXP 102
26864: PUSH
26865: LD_EXP 102
26869: PPUSH
26870: LD_EXP 102
26874: PUSH
26875: LD_INT 1
26877: PLUS
26878: PPUSH
26879: EMPTY
26880: PPUSH
26881: CALL_OW 1
26885: ST_TO_ADDR
// end end ;
26886: GO 26815
26888: POP
26889: POP
// for i := minerMinesList downto 1 do
26890: LD_ADDR_VAR 0 1
26894: PUSH
26895: DOUBLE
26896: LD_EXP 102
26900: INC
26901: ST_TO_ADDR
26902: LD_INT 1
26904: PUSH
26905: FOR_DOWNTO
26906: IFFALSE 27242
// begin if IsLive ( minersList [ i ] ) then
26908: LD_EXP 101
26912: PUSH
26913: LD_VAR 0 1
26917: ARRAY
26918: PPUSH
26919: CALL_OW 300
26923: IFFALSE 26951
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26925: LD_EXP 101
26929: PUSH
26930: LD_VAR 0 1
26934: ARRAY
26935: PPUSH
26936: LD_EXP 102
26940: PUSH
26941: LD_VAR 0 1
26945: ARRAY
26946: PPUSH
26947: CALL_OW 505
// if not minerMinesList [ i ] then
26951: LD_EXP 102
26955: PUSH
26956: LD_VAR 0 1
26960: ARRAY
26961: NOT
26962: IFFALSE 26966
// continue ;
26964: GO 26905
// for j := minerMinesList [ i ] downto 1 do
26966: LD_ADDR_VAR 0 2
26970: PUSH
26971: DOUBLE
26972: LD_EXP 102
26976: PUSH
26977: LD_VAR 0 1
26981: ARRAY
26982: INC
26983: ST_TO_ADDR
26984: LD_INT 1
26986: PUSH
26987: FOR_DOWNTO
26988: IFFALSE 27238
// begin side := GetSide ( minersList [ i ] ) ;
26990: LD_ADDR_VAR 0 3
26994: PUSH
26995: LD_EXP 101
26999: PUSH
27000: LD_VAR 0 1
27004: ARRAY
27005: PPUSH
27006: CALL_OW 255
27010: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27011: LD_ADDR_VAR 0 4
27015: PUSH
27016: LD_EXP 102
27020: PUSH
27021: LD_VAR 0 1
27025: ARRAY
27026: PUSH
27027: LD_VAR 0 2
27031: ARRAY
27032: PUSH
27033: LD_INT 1
27035: ARRAY
27036: PPUSH
27037: LD_EXP 102
27041: PUSH
27042: LD_VAR 0 1
27046: ARRAY
27047: PUSH
27048: LD_VAR 0 2
27052: ARRAY
27053: PUSH
27054: LD_INT 2
27056: ARRAY
27057: PPUSH
27058: CALL_OW 428
27062: ST_TO_ADDR
// if not tmp then
27063: LD_VAR 0 4
27067: NOT
27068: IFFALSE 27072
// continue ;
27070: GO 26987
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27072: LD_VAR 0 4
27076: PUSH
27077: LD_INT 81
27079: PUSH
27080: LD_VAR 0 3
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PPUSH
27089: CALL_OW 69
27093: IN
27094: PUSH
27095: LD_EXP 102
27099: PUSH
27100: LD_VAR 0 1
27104: ARRAY
27105: PUSH
27106: LD_VAR 0 2
27110: ARRAY
27111: PUSH
27112: LD_INT 1
27114: ARRAY
27115: PPUSH
27116: LD_EXP 102
27120: PUSH
27121: LD_VAR 0 1
27125: ARRAY
27126: PUSH
27127: LD_VAR 0 2
27131: ARRAY
27132: PUSH
27133: LD_INT 2
27135: ARRAY
27136: PPUSH
27137: CALL_OW 458
27141: AND
27142: IFFALSE 27236
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27144: LD_EXP 102
27148: PUSH
27149: LD_VAR 0 1
27153: ARRAY
27154: PUSH
27155: LD_VAR 0 2
27159: ARRAY
27160: PUSH
27161: LD_INT 1
27163: ARRAY
27164: PPUSH
27165: LD_EXP 102
27169: PUSH
27170: LD_VAR 0 1
27174: ARRAY
27175: PUSH
27176: LD_VAR 0 2
27180: ARRAY
27181: PUSH
27182: LD_INT 2
27184: ARRAY
27185: PPUSH
27186: LD_VAR 0 3
27190: PPUSH
27191: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27195: LD_ADDR_EXP 102
27199: PUSH
27200: LD_EXP 102
27204: PPUSH
27205: LD_VAR 0 1
27209: PPUSH
27210: LD_EXP 102
27214: PUSH
27215: LD_VAR 0 1
27219: ARRAY
27220: PPUSH
27221: LD_VAR 0 2
27225: PPUSH
27226: CALL_OW 3
27230: PPUSH
27231: CALL_OW 1
27235: ST_TO_ADDR
// end ; end ;
27236: GO 26987
27238: POP
27239: POP
// end ;
27240: GO 26905
27242: POP
27243: POP
// end ;
27244: PPOPN 4
27246: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27247: LD_INT 0
27249: PPUSH
27250: PPUSH
// result := false ;
27251: LD_ADDR_VAR 0 4
27255: PUSH
27256: LD_INT 0
27258: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL_OW 264
27268: PUSH
27269: LD_EXP 28
27273: EQUAL
27274: NOT
27275: IFFALSE 27279
// exit ;
27277: GO 27519
// index := GetElementIndex ( minersList , unit ) ;
27279: LD_ADDR_VAR 0 5
27283: PUSH
27284: LD_EXP 101
27288: PPUSH
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL 33463 0 2
27298: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27299: LD_EXP 102
27303: PUSH
27304: LD_VAR 0 5
27308: ARRAY
27309: PUSH
27310: LD_EXP 103
27314: GREATEREQUAL
27315: IFFALSE 27319
// exit ;
27317: GO 27519
// ComMoveXY ( unit , x , y ) ;
27319: LD_VAR 0 1
27323: PPUSH
27324: LD_VAR 0 2
27328: PPUSH
27329: LD_VAR 0 3
27333: PPUSH
27334: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27338: LD_INT 35
27340: PPUSH
27341: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27345: LD_VAR 0 1
27349: PPUSH
27350: LD_VAR 0 2
27354: PPUSH
27355: LD_VAR 0 3
27359: PPUSH
27360: CALL 63847 0 3
27364: NOT
27365: PUSH
27366: LD_VAR 0 1
27370: PPUSH
27371: CALL_OW 314
27375: AND
27376: IFFALSE 27380
// exit ;
27378: GO 27519
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27380: LD_VAR 0 2
27384: PPUSH
27385: LD_VAR 0 3
27389: PPUSH
27390: CALL_OW 428
27394: PUSH
27395: LD_VAR 0 1
27399: EQUAL
27400: PUSH
27401: LD_VAR 0 1
27405: PPUSH
27406: CALL_OW 314
27410: NOT
27411: AND
27412: IFFALSE 27338
// PlaySoundXY ( x , y , PlantMine ) ;
27414: LD_VAR 0 2
27418: PPUSH
27419: LD_VAR 0 3
27423: PPUSH
27424: LD_STRING PlantMine
27426: PPUSH
27427: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27431: LD_VAR 0 2
27435: PPUSH
27436: LD_VAR 0 3
27440: PPUSH
27441: LD_VAR 0 1
27445: PPUSH
27446: CALL_OW 255
27450: PPUSH
27451: LD_INT 0
27453: PPUSH
27454: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27458: LD_ADDR_EXP 102
27462: PUSH
27463: LD_EXP 102
27467: PPUSH
27468: LD_VAR 0 5
27472: PUSH
27473: LD_EXP 102
27477: PUSH
27478: LD_VAR 0 5
27482: ARRAY
27483: PUSH
27484: LD_INT 1
27486: PLUS
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PPUSH
27492: LD_VAR 0 2
27496: PUSH
27497: LD_VAR 0 3
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PPUSH
27506: CALL 33678 0 3
27510: ST_TO_ADDR
// result := true ;
27511: LD_ADDR_VAR 0 4
27515: PUSH
27516: LD_INT 1
27518: ST_TO_ADDR
// end ;
27519: LD_VAR 0 4
27523: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27524: LD_INT 0
27526: PPUSH
27527: PPUSH
27528: PPUSH
// if not unit in minersList then
27529: LD_VAR 0 1
27533: PUSH
27534: LD_EXP 101
27538: IN
27539: NOT
27540: IFFALSE 27544
// exit ;
27542: GO 27936
// index := GetElementIndex ( minersList , unit ) ;
27544: LD_ADDR_VAR 0 6
27548: PUSH
27549: LD_EXP 101
27553: PPUSH
27554: LD_VAR 0 1
27558: PPUSH
27559: CALL 33463 0 2
27563: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27564: LD_ADDR_VAR 0 5
27568: PUSH
27569: DOUBLE
27570: LD_EXP 102
27574: PUSH
27575: LD_VAR 0 6
27579: ARRAY
27580: INC
27581: ST_TO_ADDR
27582: LD_INT 1
27584: PUSH
27585: FOR_DOWNTO
27586: IFFALSE 27747
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27588: LD_EXP 102
27592: PUSH
27593: LD_VAR 0 6
27597: ARRAY
27598: PUSH
27599: LD_VAR 0 5
27603: ARRAY
27604: PUSH
27605: LD_INT 1
27607: ARRAY
27608: PUSH
27609: LD_VAR 0 2
27613: EQUAL
27614: PUSH
27615: LD_EXP 102
27619: PUSH
27620: LD_VAR 0 6
27624: ARRAY
27625: PUSH
27626: LD_VAR 0 5
27630: ARRAY
27631: PUSH
27632: LD_INT 2
27634: ARRAY
27635: PUSH
27636: LD_VAR 0 3
27640: EQUAL
27641: AND
27642: IFFALSE 27745
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27644: LD_EXP 102
27648: PUSH
27649: LD_VAR 0 6
27653: ARRAY
27654: PUSH
27655: LD_VAR 0 5
27659: ARRAY
27660: PUSH
27661: LD_INT 1
27663: ARRAY
27664: PPUSH
27665: LD_EXP 102
27669: PUSH
27670: LD_VAR 0 6
27674: ARRAY
27675: PUSH
27676: LD_VAR 0 5
27680: ARRAY
27681: PUSH
27682: LD_INT 2
27684: ARRAY
27685: PPUSH
27686: LD_VAR 0 1
27690: PPUSH
27691: CALL_OW 255
27695: PPUSH
27696: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27700: LD_ADDR_EXP 102
27704: PUSH
27705: LD_EXP 102
27709: PPUSH
27710: LD_VAR 0 6
27714: PPUSH
27715: LD_EXP 102
27719: PUSH
27720: LD_VAR 0 6
27724: ARRAY
27725: PPUSH
27726: LD_VAR 0 5
27730: PPUSH
27731: CALL_OW 3
27735: PPUSH
27736: CALL_OW 1
27740: ST_TO_ADDR
// exit ;
27741: POP
27742: POP
27743: GO 27936
// end ; end ;
27745: GO 27585
27747: POP
27748: POP
// for i := minerMinesList [ index ] downto 1 do
27749: LD_ADDR_VAR 0 5
27753: PUSH
27754: DOUBLE
27755: LD_EXP 102
27759: PUSH
27760: LD_VAR 0 6
27764: ARRAY
27765: INC
27766: ST_TO_ADDR
27767: LD_INT 1
27769: PUSH
27770: FOR_DOWNTO
27771: IFFALSE 27934
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27773: LD_EXP 102
27777: PUSH
27778: LD_VAR 0 6
27782: ARRAY
27783: PUSH
27784: LD_VAR 0 5
27788: ARRAY
27789: PUSH
27790: LD_INT 1
27792: ARRAY
27793: PPUSH
27794: LD_EXP 102
27798: PUSH
27799: LD_VAR 0 6
27803: ARRAY
27804: PUSH
27805: LD_VAR 0 5
27809: ARRAY
27810: PUSH
27811: LD_INT 2
27813: ARRAY
27814: PPUSH
27815: LD_VAR 0 2
27819: PPUSH
27820: LD_VAR 0 3
27824: PPUSH
27825: CALL_OW 298
27829: PUSH
27830: LD_INT 6
27832: LESS
27833: IFFALSE 27932
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27835: LD_EXP 102
27839: PUSH
27840: LD_VAR 0 6
27844: ARRAY
27845: PUSH
27846: LD_VAR 0 5
27850: ARRAY
27851: PUSH
27852: LD_INT 1
27854: ARRAY
27855: PPUSH
27856: LD_EXP 102
27860: PUSH
27861: LD_VAR 0 6
27865: ARRAY
27866: PUSH
27867: LD_VAR 0 5
27871: ARRAY
27872: PUSH
27873: LD_INT 2
27875: ARRAY
27876: PPUSH
27877: LD_VAR 0 1
27881: PPUSH
27882: CALL_OW 255
27886: PPUSH
27887: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27891: LD_ADDR_EXP 102
27895: PUSH
27896: LD_EXP 102
27900: PPUSH
27901: LD_VAR 0 6
27905: PPUSH
27906: LD_EXP 102
27910: PUSH
27911: LD_VAR 0 6
27915: ARRAY
27916: PPUSH
27917: LD_VAR 0 5
27921: PPUSH
27922: CALL_OW 3
27926: PPUSH
27927: CALL_OW 1
27931: ST_TO_ADDR
// end ; end ;
27932: GO 27770
27934: POP
27935: POP
// end ;
27936: LD_VAR 0 4
27940: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27941: LD_INT 0
27943: PPUSH
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27952: LD_VAR 0 1
27956: PPUSH
27957: CALL_OW 264
27961: PUSH
27962: LD_EXP 28
27966: EQUAL
27967: NOT
27968: PUSH
27969: LD_VAR 0 1
27973: PUSH
27974: LD_EXP 101
27978: IN
27979: NOT
27980: OR
27981: IFFALSE 27985
// exit ;
27983: GO 28307
// index := GetElementIndex ( minersList , unit ) ;
27985: LD_ADDR_VAR 0 6
27989: PUSH
27990: LD_EXP 101
27994: PPUSH
27995: LD_VAR 0 1
27999: PPUSH
28000: CALL 33463 0 2
28004: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28005: LD_ADDR_VAR 0 8
28009: PUSH
28010: LD_EXP 103
28014: PUSH
28015: LD_EXP 102
28019: PUSH
28020: LD_VAR 0 6
28024: ARRAY
28025: MINUS
28026: ST_TO_ADDR
// if not minesFreeAmount then
28027: LD_VAR 0 8
28031: NOT
28032: IFFALSE 28036
// exit ;
28034: GO 28307
// tmp := [ ] ;
28036: LD_ADDR_VAR 0 7
28040: PUSH
28041: EMPTY
28042: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28043: LD_ADDR_VAR 0 5
28047: PUSH
28048: DOUBLE
28049: LD_INT 1
28051: DEC
28052: ST_TO_ADDR
28053: LD_VAR 0 8
28057: PUSH
28058: FOR_TO
28059: IFFALSE 28254
// begin _d := rand ( 0 , 5 ) ;
28061: LD_ADDR_VAR 0 11
28065: PUSH
28066: LD_INT 0
28068: PPUSH
28069: LD_INT 5
28071: PPUSH
28072: CALL_OW 12
28076: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28077: LD_ADDR_VAR 0 12
28081: PUSH
28082: LD_INT 2
28084: PPUSH
28085: LD_INT 6
28087: PPUSH
28088: CALL_OW 12
28092: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28093: LD_ADDR_VAR 0 9
28097: PUSH
28098: LD_VAR 0 2
28102: PPUSH
28103: LD_VAR 0 11
28107: PPUSH
28108: LD_VAR 0 12
28112: PPUSH
28113: CALL_OW 272
28117: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28118: LD_ADDR_VAR 0 10
28122: PUSH
28123: LD_VAR 0 3
28127: PPUSH
28128: LD_VAR 0 11
28132: PPUSH
28133: LD_VAR 0 12
28137: PPUSH
28138: CALL_OW 273
28142: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28143: LD_VAR 0 9
28147: PPUSH
28148: LD_VAR 0 10
28152: PPUSH
28153: CALL_OW 488
28157: PUSH
28158: LD_VAR 0 9
28162: PUSH
28163: LD_VAR 0 10
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_VAR 0 7
28176: IN
28177: NOT
28178: AND
28179: PUSH
28180: LD_VAR 0 9
28184: PPUSH
28185: LD_VAR 0 10
28189: PPUSH
28190: CALL_OW 458
28194: NOT
28195: AND
28196: IFFALSE 28238
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28198: LD_ADDR_VAR 0 7
28202: PUSH
28203: LD_VAR 0 7
28207: PPUSH
28208: LD_VAR 0 7
28212: PUSH
28213: LD_INT 1
28215: PLUS
28216: PPUSH
28217: LD_VAR 0 9
28221: PUSH
28222: LD_VAR 0 10
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PPUSH
28231: CALL_OW 1
28235: ST_TO_ADDR
28236: GO 28252
// i := i - 1 ;
28238: LD_ADDR_VAR 0 5
28242: PUSH
28243: LD_VAR 0 5
28247: PUSH
28248: LD_INT 1
28250: MINUS
28251: ST_TO_ADDR
// end ;
28252: GO 28058
28254: POP
28255: POP
// for i in tmp do
28256: LD_ADDR_VAR 0 5
28260: PUSH
28261: LD_VAR 0 7
28265: PUSH
28266: FOR_IN
28267: IFFALSE 28305
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28269: LD_VAR 0 1
28273: PPUSH
28274: LD_VAR 0 5
28278: PUSH
28279: LD_INT 1
28281: ARRAY
28282: PPUSH
28283: LD_VAR 0 5
28287: PUSH
28288: LD_INT 2
28290: ARRAY
28291: PPUSH
28292: CALL 27247 0 3
28296: NOT
28297: IFFALSE 28303
// exit ;
28299: POP
28300: POP
28301: GO 28307
28303: GO 28266
28305: POP
28306: POP
// end ;
28307: LD_VAR 0 4
28311: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28312: LD_INT 0
28314: PPUSH
28315: PPUSH
28316: PPUSH
28317: PPUSH
28318: PPUSH
28319: PPUSH
28320: PPUSH
// if not GetClass ( unit ) = class_sniper then
28321: LD_VAR 0 1
28325: PPUSH
28326: CALL_OW 257
28330: PUSH
28331: LD_INT 5
28333: EQUAL
28334: NOT
28335: IFFALSE 28339
// exit ;
28337: GO 28727
// dist := 8 ;
28339: LD_ADDR_VAR 0 5
28343: PUSH
28344: LD_INT 8
28346: ST_TO_ADDR
// viewRange := 12 ;
28347: LD_ADDR_VAR 0 7
28351: PUSH
28352: LD_INT 12
28354: ST_TO_ADDR
// side := GetSide ( unit ) ;
28355: LD_ADDR_VAR 0 6
28359: PUSH
28360: LD_VAR 0 1
28364: PPUSH
28365: CALL_OW 255
28369: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28370: LD_INT 61
28372: PPUSH
28373: LD_VAR 0 6
28377: PPUSH
28378: CALL_OW 321
28382: PUSH
28383: LD_INT 2
28385: EQUAL
28386: IFFALSE 28396
// viewRange := 16 ;
28388: LD_ADDR_VAR 0 7
28392: PUSH
28393: LD_INT 16
28395: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28396: LD_VAR 0 1
28400: PPUSH
28401: LD_VAR 0 2
28405: PPUSH
28406: LD_VAR 0 3
28410: PPUSH
28411: CALL_OW 297
28415: PUSH
28416: LD_VAR 0 5
28420: GREATER
28421: IFFALSE 28500
// begin ComMoveXY ( unit , x , y ) ;
28423: LD_VAR 0 1
28427: PPUSH
28428: LD_VAR 0 2
28432: PPUSH
28433: LD_VAR 0 3
28437: PPUSH
28438: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28442: LD_INT 35
28444: PPUSH
28445: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28449: LD_VAR 0 1
28453: PPUSH
28454: LD_VAR 0 2
28458: PPUSH
28459: LD_VAR 0 3
28463: PPUSH
28464: CALL 63847 0 3
28468: NOT
28469: IFFALSE 28473
// exit ;
28471: GO 28727
// until GetDistUnitXY ( unit , x , y ) < dist ;
28473: LD_VAR 0 1
28477: PPUSH
28478: LD_VAR 0 2
28482: PPUSH
28483: LD_VAR 0 3
28487: PPUSH
28488: CALL_OW 297
28492: PUSH
28493: LD_VAR 0 5
28497: LESS
28498: IFFALSE 28442
// end ; ComTurnXY ( unit , x , y ) ;
28500: LD_VAR 0 1
28504: PPUSH
28505: LD_VAR 0 2
28509: PPUSH
28510: LD_VAR 0 3
28514: PPUSH
28515: CALL_OW 118
// wait ( 5 ) ;
28519: LD_INT 5
28521: PPUSH
28522: CALL_OW 67
// _d := GetDir ( unit ) ;
28526: LD_ADDR_VAR 0 10
28530: PUSH
28531: LD_VAR 0 1
28535: PPUSH
28536: CALL_OW 254
28540: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28541: LD_ADDR_VAR 0 8
28545: PUSH
28546: LD_VAR 0 1
28550: PPUSH
28551: CALL_OW 250
28555: PPUSH
28556: LD_VAR 0 10
28560: PPUSH
28561: LD_VAR 0 5
28565: PPUSH
28566: CALL_OW 272
28570: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28571: LD_ADDR_VAR 0 9
28575: PUSH
28576: LD_VAR 0 1
28580: PPUSH
28581: CALL_OW 251
28585: PPUSH
28586: LD_VAR 0 10
28590: PPUSH
28591: LD_VAR 0 5
28595: PPUSH
28596: CALL_OW 273
28600: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28601: LD_VAR 0 8
28605: PPUSH
28606: LD_VAR 0 9
28610: PPUSH
28611: CALL_OW 488
28615: NOT
28616: IFFALSE 28620
// exit ;
28618: GO 28727
// ComAnimCustom ( unit , 1 ) ;
28620: LD_VAR 0 1
28624: PPUSH
28625: LD_INT 1
28627: PPUSH
28628: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28632: LD_VAR 0 8
28636: PPUSH
28637: LD_VAR 0 9
28641: PPUSH
28642: LD_VAR 0 6
28646: PPUSH
28647: LD_VAR 0 7
28651: PPUSH
28652: CALL_OW 330
// repeat wait ( 1 ) ;
28656: LD_INT 1
28658: PPUSH
28659: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 316
28672: PUSH
28673: LD_VAR 0 1
28677: PPUSH
28678: CALL_OW 314
28682: OR
28683: PUSH
28684: LD_VAR 0 1
28688: PPUSH
28689: CALL_OW 302
28693: NOT
28694: OR
28695: PUSH
28696: LD_VAR 0 1
28700: PPUSH
28701: CALL_OW 301
28705: OR
28706: IFFALSE 28656
// RemoveSeeing ( _x , _y , side ) ;
28708: LD_VAR 0 8
28712: PPUSH
28713: LD_VAR 0 9
28717: PPUSH
28718: LD_VAR 0 6
28722: PPUSH
28723: CALL_OW 331
// end ; end_of_file
28727: LD_VAR 0 4
28731: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28732: LD_INT 0
28734: PPUSH
28735: PPUSH
// if exist_mode then
28736: LD_VAR 0 2
28740: IFFALSE 28765
// unit := CreateCharacter ( prefix & ident ) else
28742: LD_ADDR_VAR 0 5
28746: PUSH
28747: LD_VAR 0 3
28751: PUSH
28752: LD_VAR 0 1
28756: STR
28757: PPUSH
28758: CALL_OW 34
28762: ST_TO_ADDR
28763: GO 28780
// unit := NewCharacter ( ident ) ;
28765: LD_ADDR_VAR 0 5
28769: PUSH
28770: LD_VAR 0 1
28774: PPUSH
28775: CALL_OW 25
28779: ST_TO_ADDR
// result := unit ;
28780: LD_ADDR_VAR 0 4
28784: PUSH
28785: LD_VAR 0 5
28789: ST_TO_ADDR
// end ;
28790: LD_VAR 0 4
28794: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28795: LD_INT 0
28797: PPUSH
28798: PPUSH
// if not side or not nation then
28799: LD_VAR 0 1
28803: NOT
28804: PUSH
28805: LD_VAR 0 2
28809: NOT
28810: OR
28811: IFFALSE 28815
// exit ;
28813: GO 29579
// case nation of nation_american :
28815: LD_VAR 0 2
28819: PUSH
28820: LD_INT 1
28822: DOUBLE
28823: EQUAL
28824: IFTRUE 28828
28826: GO 29042
28828: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28829: LD_ADDR_VAR 0 4
28833: PUSH
28834: LD_INT 35
28836: PUSH
28837: LD_INT 45
28839: PUSH
28840: LD_INT 46
28842: PUSH
28843: LD_INT 47
28845: PUSH
28846: LD_INT 82
28848: PUSH
28849: LD_INT 83
28851: PUSH
28852: LD_INT 84
28854: PUSH
28855: LD_INT 85
28857: PUSH
28858: LD_INT 86
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: LD_INT 2
28866: PUSH
28867: LD_INT 6
28869: PUSH
28870: LD_INT 15
28872: PUSH
28873: LD_INT 16
28875: PUSH
28876: LD_INT 7
28878: PUSH
28879: LD_INT 12
28881: PUSH
28882: LD_INT 13
28884: PUSH
28885: LD_INT 10
28887: PUSH
28888: LD_INT 14
28890: PUSH
28891: LD_INT 20
28893: PUSH
28894: LD_INT 21
28896: PUSH
28897: LD_INT 22
28899: PUSH
28900: LD_INT 25
28902: PUSH
28903: LD_INT 32
28905: PUSH
28906: LD_INT 27
28908: PUSH
28909: LD_INT 36
28911: PUSH
28912: LD_INT 69
28914: PUSH
28915: LD_INT 39
28917: PUSH
28918: LD_INT 34
28920: PUSH
28921: LD_INT 40
28923: PUSH
28924: LD_INT 48
28926: PUSH
28927: LD_INT 49
28929: PUSH
28930: LD_INT 50
28932: PUSH
28933: LD_INT 51
28935: PUSH
28936: LD_INT 52
28938: PUSH
28939: LD_INT 53
28941: PUSH
28942: LD_INT 54
28944: PUSH
28945: LD_INT 55
28947: PUSH
28948: LD_INT 56
28950: PUSH
28951: LD_INT 57
28953: PUSH
28954: LD_INT 58
28956: PUSH
28957: LD_INT 59
28959: PUSH
28960: LD_INT 60
28962: PUSH
28963: LD_INT 61
28965: PUSH
28966: LD_INT 62
28968: PUSH
28969: LD_INT 80
28971: PUSH
28972: LD_INT 82
28974: PUSH
28975: LD_INT 83
28977: PUSH
28978: LD_INT 84
28980: PUSH
28981: LD_INT 85
28983: PUSH
28984: LD_INT 86
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: ST_TO_ADDR
29040: GO 29503
29042: LD_INT 2
29044: DOUBLE
29045: EQUAL
29046: IFTRUE 29050
29048: GO 29272
29050: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29051: LD_ADDR_VAR 0 4
29055: PUSH
29056: LD_INT 35
29058: PUSH
29059: LD_INT 45
29061: PUSH
29062: LD_INT 46
29064: PUSH
29065: LD_INT 47
29067: PUSH
29068: LD_INT 82
29070: PUSH
29071: LD_INT 83
29073: PUSH
29074: LD_INT 84
29076: PUSH
29077: LD_INT 85
29079: PUSH
29080: LD_INT 87
29082: PUSH
29083: LD_INT 70
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 11
29091: PUSH
29092: LD_INT 3
29094: PUSH
29095: LD_INT 4
29097: PUSH
29098: LD_INT 5
29100: PUSH
29101: LD_INT 6
29103: PUSH
29104: LD_INT 15
29106: PUSH
29107: LD_INT 18
29109: PUSH
29110: LD_INT 7
29112: PUSH
29113: LD_INT 17
29115: PUSH
29116: LD_INT 8
29118: PUSH
29119: LD_INT 20
29121: PUSH
29122: LD_INT 21
29124: PUSH
29125: LD_INT 22
29127: PUSH
29128: LD_INT 72
29130: PUSH
29131: LD_INT 26
29133: PUSH
29134: LD_INT 69
29136: PUSH
29137: LD_INT 39
29139: PUSH
29140: LD_INT 40
29142: PUSH
29143: LD_INT 41
29145: PUSH
29146: LD_INT 42
29148: PUSH
29149: LD_INT 43
29151: PUSH
29152: LD_INT 48
29154: PUSH
29155: LD_INT 49
29157: PUSH
29158: LD_INT 50
29160: PUSH
29161: LD_INT 51
29163: PUSH
29164: LD_INT 52
29166: PUSH
29167: LD_INT 53
29169: PUSH
29170: LD_INT 54
29172: PUSH
29173: LD_INT 55
29175: PUSH
29176: LD_INT 56
29178: PUSH
29179: LD_INT 60
29181: PUSH
29182: LD_INT 61
29184: PUSH
29185: LD_INT 62
29187: PUSH
29188: LD_INT 66
29190: PUSH
29191: LD_INT 67
29193: PUSH
29194: LD_INT 68
29196: PUSH
29197: LD_INT 81
29199: PUSH
29200: LD_INT 82
29202: PUSH
29203: LD_INT 83
29205: PUSH
29206: LD_INT 84
29208: PUSH
29209: LD_INT 85
29211: PUSH
29212: LD_INT 87
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
29270: GO 29503
29272: LD_INT 3
29274: DOUBLE
29275: EQUAL
29276: IFTRUE 29280
29278: GO 29502
29280: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29281: LD_ADDR_VAR 0 4
29285: PUSH
29286: LD_INT 46
29288: PUSH
29289: LD_INT 47
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: LD_INT 2
29297: PUSH
29298: LD_INT 82
29300: PUSH
29301: LD_INT 83
29303: PUSH
29304: LD_INT 84
29306: PUSH
29307: LD_INT 85
29309: PUSH
29310: LD_INT 86
29312: PUSH
29313: LD_INT 11
29315: PUSH
29316: LD_INT 9
29318: PUSH
29319: LD_INT 20
29321: PUSH
29322: LD_INT 19
29324: PUSH
29325: LD_INT 21
29327: PUSH
29328: LD_INT 24
29330: PUSH
29331: LD_INT 22
29333: PUSH
29334: LD_INT 25
29336: PUSH
29337: LD_INT 28
29339: PUSH
29340: LD_INT 29
29342: PUSH
29343: LD_INT 30
29345: PUSH
29346: LD_INT 31
29348: PUSH
29349: LD_INT 37
29351: PUSH
29352: LD_INT 38
29354: PUSH
29355: LD_INT 32
29357: PUSH
29358: LD_INT 27
29360: PUSH
29361: LD_INT 33
29363: PUSH
29364: LD_INT 69
29366: PUSH
29367: LD_INT 39
29369: PUSH
29370: LD_INT 34
29372: PUSH
29373: LD_INT 40
29375: PUSH
29376: LD_INT 71
29378: PUSH
29379: LD_INT 23
29381: PUSH
29382: LD_INT 44
29384: PUSH
29385: LD_INT 48
29387: PUSH
29388: LD_INT 49
29390: PUSH
29391: LD_INT 50
29393: PUSH
29394: LD_INT 51
29396: PUSH
29397: LD_INT 52
29399: PUSH
29400: LD_INT 53
29402: PUSH
29403: LD_INT 54
29405: PUSH
29406: LD_INT 55
29408: PUSH
29409: LD_INT 56
29411: PUSH
29412: LD_INT 57
29414: PUSH
29415: LD_INT 58
29417: PUSH
29418: LD_INT 59
29420: PUSH
29421: LD_INT 63
29423: PUSH
29424: LD_INT 64
29426: PUSH
29427: LD_INT 65
29429: PUSH
29430: LD_INT 82
29432: PUSH
29433: LD_INT 83
29435: PUSH
29436: LD_INT 84
29438: PUSH
29439: LD_INT 85
29441: PUSH
29442: LD_INT 86
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: ST_TO_ADDR
29500: GO 29503
29502: POP
// if state > - 1 and state < 3 then
29503: LD_VAR 0 3
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: GREATER
29512: PUSH
29513: LD_VAR 0 3
29517: PUSH
29518: LD_INT 3
29520: LESS
29521: AND
29522: IFFALSE 29579
// for i in result do
29524: LD_ADDR_VAR 0 5
29528: PUSH
29529: LD_VAR 0 4
29533: PUSH
29534: FOR_IN
29535: IFFALSE 29577
// if GetTech ( i , side ) <> state then
29537: LD_VAR 0 5
29541: PPUSH
29542: LD_VAR 0 1
29546: PPUSH
29547: CALL_OW 321
29551: PUSH
29552: LD_VAR 0 3
29556: NONEQUAL
29557: IFFALSE 29575
// result := result diff i ;
29559: LD_ADDR_VAR 0 4
29563: PUSH
29564: LD_VAR 0 4
29568: PUSH
29569: LD_VAR 0 5
29573: DIFF
29574: ST_TO_ADDR
29575: GO 29534
29577: POP
29578: POP
// end ;
29579: LD_VAR 0 4
29583: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29584: LD_INT 0
29586: PPUSH
29587: PPUSH
29588: PPUSH
// result := true ;
29589: LD_ADDR_VAR 0 3
29593: PUSH
29594: LD_INT 1
29596: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29597: LD_ADDR_VAR 0 5
29601: PUSH
29602: LD_VAR 0 2
29606: PPUSH
29607: CALL_OW 480
29611: ST_TO_ADDR
// if not tmp then
29612: LD_VAR 0 5
29616: NOT
29617: IFFALSE 29621
// exit ;
29619: GO 29670
// for i in tmp do
29621: LD_ADDR_VAR 0 4
29625: PUSH
29626: LD_VAR 0 5
29630: PUSH
29631: FOR_IN
29632: IFFALSE 29668
// if GetTech ( i , side ) <> state_researched then
29634: LD_VAR 0 4
29638: PPUSH
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL_OW 321
29648: PUSH
29649: LD_INT 2
29651: NONEQUAL
29652: IFFALSE 29666
// begin result := false ;
29654: LD_ADDR_VAR 0 3
29658: PUSH
29659: LD_INT 0
29661: ST_TO_ADDR
// exit ;
29662: POP
29663: POP
29664: GO 29670
// end ;
29666: GO 29631
29668: POP
29669: POP
// end ;
29670: LD_VAR 0 3
29674: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29675: LD_INT 0
29677: PPUSH
29678: PPUSH
29679: PPUSH
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29690: LD_VAR 0 1
29694: NOT
29695: PUSH
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 257
29705: PUSH
29706: LD_INT 9
29708: NONEQUAL
29709: OR
29710: IFFALSE 29714
// exit ;
29712: GO 30287
// side := GetSide ( unit ) ;
29714: LD_ADDR_VAR 0 9
29718: PUSH
29719: LD_VAR 0 1
29723: PPUSH
29724: CALL_OW 255
29728: ST_TO_ADDR
// tech_space := tech_spacanom ;
29729: LD_ADDR_VAR 0 12
29733: PUSH
29734: LD_INT 29
29736: ST_TO_ADDR
// tech_time := tech_taurad ;
29737: LD_ADDR_VAR 0 13
29741: PUSH
29742: LD_INT 28
29744: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29745: LD_ADDR_VAR 0 11
29749: PUSH
29750: LD_VAR 0 1
29754: PPUSH
29755: CALL_OW 310
29759: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29760: LD_VAR 0 11
29764: PPUSH
29765: CALL_OW 247
29769: PUSH
29770: LD_INT 2
29772: EQUAL
29773: IFFALSE 29777
// exit ;
29775: GO 30287
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29777: LD_ADDR_VAR 0 8
29781: PUSH
29782: LD_INT 81
29784: PUSH
29785: LD_VAR 0 9
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 21
29799: PUSH
29800: LD_INT 3
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PPUSH
29815: CALL_OW 69
29819: ST_TO_ADDR
// if not tmp then
29820: LD_VAR 0 8
29824: NOT
29825: IFFALSE 29829
// exit ;
29827: GO 30287
// if in_unit then
29829: LD_VAR 0 11
29833: IFFALSE 29857
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29835: LD_ADDR_VAR 0 10
29839: PUSH
29840: LD_VAR 0 8
29844: PPUSH
29845: LD_VAR 0 11
29849: PPUSH
29850: CALL_OW 74
29854: ST_TO_ADDR
29855: GO 29877
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29857: LD_ADDR_VAR 0 10
29861: PUSH
29862: LD_VAR 0 8
29866: PPUSH
29867: LD_VAR 0 1
29871: PPUSH
29872: CALL_OW 74
29876: ST_TO_ADDR
// if not enemy then
29877: LD_VAR 0 10
29881: NOT
29882: IFFALSE 29886
// exit ;
29884: GO 30287
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29886: LD_VAR 0 11
29890: PUSH
29891: LD_VAR 0 11
29895: PPUSH
29896: LD_VAR 0 10
29900: PPUSH
29901: CALL_OW 296
29905: PUSH
29906: LD_INT 13
29908: GREATER
29909: AND
29910: PUSH
29911: LD_VAR 0 1
29915: PPUSH
29916: LD_VAR 0 10
29920: PPUSH
29921: CALL_OW 296
29925: PUSH
29926: LD_INT 12
29928: GREATER
29929: OR
29930: IFFALSE 29934
// exit ;
29932: GO 30287
// missile := [ 1 ] ;
29934: LD_ADDR_VAR 0 14
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: EMPTY
29943: LIST
29944: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29945: LD_VAR 0 9
29949: PPUSH
29950: LD_VAR 0 12
29954: PPUSH
29955: CALL_OW 325
29959: IFFALSE 29988
// missile := Insert ( missile , missile + 1 , 2 ) ;
29961: LD_ADDR_VAR 0 14
29965: PUSH
29966: LD_VAR 0 14
29970: PPUSH
29971: LD_VAR 0 14
29975: PUSH
29976: LD_INT 1
29978: PLUS
29979: PPUSH
29980: LD_INT 2
29982: PPUSH
29983: CALL_OW 2
29987: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29988: LD_VAR 0 9
29992: PPUSH
29993: LD_VAR 0 13
29997: PPUSH
29998: CALL_OW 325
30002: PUSH
30003: LD_VAR 0 10
30007: PPUSH
30008: CALL_OW 255
30012: PPUSH
30013: LD_VAR 0 13
30017: PPUSH
30018: CALL_OW 325
30022: NOT
30023: AND
30024: IFFALSE 30053
// missile := Insert ( missile , missile + 1 , 3 ) ;
30026: LD_ADDR_VAR 0 14
30030: PUSH
30031: LD_VAR 0 14
30035: PPUSH
30036: LD_VAR 0 14
30040: PUSH
30041: LD_INT 1
30043: PLUS
30044: PPUSH
30045: LD_INT 3
30047: PPUSH
30048: CALL_OW 2
30052: ST_TO_ADDR
// if missile < 2 then
30053: LD_VAR 0 14
30057: PUSH
30058: LD_INT 2
30060: LESS
30061: IFFALSE 30065
// exit ;
30063: GO 30287
// x := GetX ( enemy ) ;
30065: LD_ADDR_VAR 0 4
30069: PUSH
30070: LD_VAR 0 10
30074: PPUSH
30075: CALL_OW 250
30079: ST_TO_ADDR
// y := GetY ( enemy ) ;
30080: LD_ADDR_VAR 0 5
30084: PUSH
30085: LD_VAR 0 10
30089: PPUSH
30090: CALL_OW 251
30094: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30095: LD_ADDR_VAR 0 6
30099: PUSH
30100: LD_VAR 0 4
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PPUSH
30109: LD_INT 1
30111: PPUSH
30112: CALL_OW 12
30116: PLUS
30117: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30118: LD_ADDR_VAR 0 7
30122: PUSH
30123: LD_VAR 0 5
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PPUSH
30132: LD_INT 1
30134: PPUSH
30135: CALL_OW 12
30139: PLUS
30140: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30141: LD_VAR 0 6
30145: PPUSH
30146: LD_VAR 0 7
30150: PPUSH
30151: CALL_OW 488
30155: NOT
30156: IFFALSE 30178
// begin _x := x ;
30158: LD_ADDR_VAR 0 6
30162: PUSH
30163: LD_VAR 0 4
30167: ST_TO_ADDR
// _y := y ;
30168: LD_ADDR_VAR 0 7
30172: PUSH
30173: LD_VAR 0 5
30177: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30178: LD_ADDR_VAR 0 3
30182: PUSH
30183: LD_INT 1
30185: PPUSH
30186: LD_VAR 0 14
30190: PPUSH
30191: CALL_OW 12
30195: ST_TO_ADDR
// case i of 1 :
30196: LD_VAR 0 3
30200: PUSH
30201: LD_INT 1
30203: DOUBLE
30204: EQUAL
30205: IFTRUE 30209
30207: GO 30226
30209: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30210: LD_VAR 0 1
30214: PPUSH
30215: LD_VAR 0 10
30219: PPUSH
30220: CALL_OW 115
30224: GO 30287
30226: LD_INT 2
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 30256
30234: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30235: LD_VAR 0 1
30239: PPUSH
30240: LD_VAR 0 6
30244: PPUSH
30245: LD_VAR 0 7
30249: PPUSH
30250: CALL_OW 153
30254: GO 30287
30256: LD_INT 3
30258: DOUBLE
30259: EQUAL
30260: IFTRUE 30264
30262: GO 30286
30264: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30265: LD_VAR 0 1
30269: PPUSH
30270: LD_VAR 0 6
30274: PPUSH
30275: LD_VAR 0 7
30279: PPUSH
30280: CALL_OW 154
30284: GO 30287
30286: POP
// end ;
30287: LD_VAR 0 2
30291: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30292: LD_INT 0
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
30299: PPUSH
// if not unit or not building then
30300: LD_VAR 0 1
30304: NOT
30305: PUSH
30306: LD_VAR 0 2
30310: NOT
30311: OR
30312: IFFALSE 30316
// exit ;
30314: GO 30474
// x := GetX ( building ) ;
30316: LD_ADDR_VAR 0 5
30320: PUSH
30321: LD_VAR 0 2
30325: PPUSH
30326: CALL_OW 250
30330: ST_TO_ADDR
// y := GetY ( building ) ;
30331: LD_ADDR_VAR 0 6
30335: PUSH
30336: LD_VAR 0 2
30340: PPUSH
30341: CALL_OW 251
30345: ST_TO_ADDR
// for i = 0 to 5 do
30346: LD_ADDR_VAR 0 4
30350: PUSH
30351: DOUBLE
30352: LD_INT 0
30354: DEC
30355: ST_TO_ADDR
30356: LD_INT 5
30358: PUSH
30359: FOR_TO
30360: IFFALSE 30472
// begin _x := ShiftX ( x , i , 3 ) ;
30362: LD_ADDR_VAR 0 7
30366: PUSH
30367: LD_VAR 0 5
30371: PPUSH
30372: LD_VAR 0 4
30376: PPUSH
30377: LD_INT 3
30379: PPUSH
30380: CALL_OW 272
30384: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30385: LD_ADDR_VAR 0 8
30389: PUSH
30390: LD_VAR 0 6
30394: PPUSH
30395: LD_VAR 0 4
30399: PPUSH
30400: LD_INT 3
30402: PPUSH
30403: CALL_OW 273
30407: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30408: LD_VAR 0 7
30412: PPUSH
30413: LD_VAR 0 8
30417: PPUSH
30418: CALL_OW 488
30422: NOT
30423: IFFALSE 30427
// continue ;
30425: GO 30359
// if HexInfo ( _x , _y ) = 0 then
30427: LD_VAR 0 7
30431: PPUSH
30432: LD_VAR 0 8
30436: PPUSH
30437: CALL_OW 428
30441: PUSH
30442: LD_INT 0
30444: EQUAL
30445: IFFALSE 30470
// begin ComMoveXY ( unit , _x , _y ) ;
30447: LD_VAR 0 1
30451: PPUSH
30452: LD_VAR 0 7
30456: PPUSH
30457: LD_VAR 0 8
30461: PPUSH
30462: CALL_OW 111
// exit ;
30466: POP
30467: POP
30468: GO 30474
// end ; end ;
30470: GO 30359
30472: POP
30473: POP
// end ;
30474: LD_VAR 0 3
30478: RET
// export function ScanBase ( side , base_area ) ; begin
30479: LD_INT 0
30481: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30482: LD_ADDR_VAR 0 3
30486: PUSH
30487: LD_VAR 0 2
30491: PPUSH
30492: LD_INT 81
30494: PUSH
30495: LD_VAR 0 1
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PPUSH
30504: CALL_OW 70
30508: ST_TO_ADDR
// end ;
30509: LD_VAR 0 3
30513: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30514: LD_INT 0
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
// result := false ;
30520: LD_ADDR_VAR 0 2
30524: PUSH
30525: LD_INT 0
30527: ST_TO_ADDR
// side := GetSide ( unit ) ;
30528: LD_ADDR_VAR 0 3
30532: PUSH
30533: LD_VAR 0 1
30537: PPUSH
30538: CALL_OW 255
30542: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30543: LD_ADDR_VAR 0 4
30547: PUSH
30548: LD_VAR 0 1
30552: PPUSH
30553: CALL_OW 248
30557: ST_TO_ADDR
// case nat of 1 :
30558: LD_VAR 0 4
30562: PUSH
30563: LD_INT 1
30565: DOUBLE
30566: EQUAL
30567: IFTRUE 30571
30569: GO 30582
30571: POP
// tech := tech_lassight ; 2 :
30572: LD_ADDR_VAR 0 5
30576: PUSH
30577: LD_INT 12
30579: ST_TO_ADDR
30580: GO 30621
30582: LD_INT 2
30584: DOUBLE
30585: EQUAL
30586: IFTRUE 30590
30588: GO 30601
30590: POP
// tech := tech_mortar ; 3 :
30591: LD_ADDR_VAR 0 5
30595: PUSH
30596: LD_INT 41
30598: ST_TO_ADDR
30599: GO 30621
30601: LD_INT 3
30603: DOUBLE
30604: EQUAL
30605: IFTRUE 30609
30607: GO 30620
30609: POP
// tech := tech_bazooka ; end ;
30610: LD_ADDR_VAR 0 5
30614: PUSH
30615: LD_INT 44
30617: ST_TO_ADDR
30618: GO 30621
30620: POP
// if Researched ( side , tech ) then
30621: LD_VAR 0 3
30625: PPUSH
30626: LD_VAR 0 5
30630: PPUSH
30631: CALL_OW 325
30635: IFFALSE 30662
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30637: LD_ADDR_VAR 0 2
30641: PUSH
30642: LD_INT 5
30644: PUSH
30645: LD_INT 8
30647: PUSH
30648: LD_INT 9
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: PUSH
30656: LD_VAR 0 4
30660: ARRAY
30661: ST_TO_ADDR
// end ;
30662: LD_VAR 0 2
30666: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30667: LD_INT 0
30669: PPUSH
30670: PPUSH
30671: PPUSH
// if not mines then
30672: LD_VAR 0 2
30676: NOT
30677: IFFALSE 30681
// exit ;
30679: GO 30825
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30681: LD_ADDR_VAR 0 5
30685: PUSH
30686: LD_INT 81
30688: PUSH
30689: LD_VAR 0 1
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: LD_INT 21
30703: PUSH
30704: LD_INT 3
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PPUSH
30719: CALL_OW 69
30723: ST_TO_ADDR
// for i in mines do
30724: LD_ADDR_VAR 0 4
30728: PUSH
30729: LD_VAR 0 2
30733: PUSH
30734: FOR_IN
30735: IFFALSE 30823
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30737: LD_VAR 0 4
30741: PUSH
30742: LD_INT 1
30744: ARRAY
30745: PPUSH
30746: LD_VAR 0 4
30750: PUSH
30751: LD_INT 2
30753: ARRAY
30754: PPUSH
30755: CALL_OW 458
30759: NOT
30760: IFFALSE 30764
// continue ;
30762: GO 30734
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30764: LD_VAR 0 4
30768: PUSH
30769: LD_INT 1
30771: ARRAY
30772: PPUSH
30773: LD_VAR 0 4
30777: PUSH
30778: LD_INT 2
30780: ARRAY
30781: PPUSH
30782: CALL_OW 428
30786: PUSH
30787: LD_VAR 0 5
30791: IN
30792: IFFALSE 30821
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30794: LD_VAR 0 4
30798: PUSH
30799: LD_INT 1
30801: ARRAY
30802: PPUSH
30803: LD_VAR 0 4
30807: PUSH
30808: LD_INT 2
30810: ARRAY
30811: PPUSH
30812: LD_VAR 0 1
30816: PPUSH
30817: CALL_OW 456
// end ;
30821: GO 30734
30823: POP
30824: POP
// end ;
30825: LD_VAR 0 3
30829: RET
// export function Count ( array ) ; var i ; begin
30830: LD_INT 0
30832: PPUSH
30833: PPUSH
// result := 0 ;
30834: LD_ADDR_VAR 0 2
30838: PUSH
30839: LD_INT 0
30841: ST_TO_ADDR
// for i in array do
30842: LD_ADDR_VAR 0 3
30846: PUSH
30847: LD_VAR 0 1
30851: PUSH
30852: FOR_IN
30853: IFFALSE 30877
// if i then
30855: LD_VAR 0 3
30859: IFFALSE 30875
// result := result + 1 ;
30861: LD_ADDR_VAR 0 2
30865: PUSH
30866: LD_VAR 0 2
30870: PUSH
30871: LD_INT 1
30873: PLUS
30874: ST_TO_ADDR
30875: GO 30852
30877: POP
30878: POP
// end ;
30879: LD_VAR 0 2
30883: RET
// export function IsEmpty ( building ) ; begin
30884: LD_INT 0
30886: PPUSH
// if not building then
30887: LD_VAR 0 1
30891: NOT
30892: IFFALSE 30896
// exit ;
30894: GO 30939
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30896: LD_ADDR_VAR 0 2
30900: PUSH
30901: LD_VAR 0 1
30905: PUSH
30906: LD_INT 22
30908: PUSH
30909: LD_VAR 0 1
30913: PPUSH
30914: CALL_OW 255
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 58
30925: PUSH
30926: EMPTY
30927: LIST
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PPUSH
30933: CALL_OW 69
30937: IN
30938: ST_TO_ADDR
// end ;
30939: LD_VAR 0 2
30943: RET
// export function IsNotFull ( building ) ; begin
30944: LD_INT 0
30946: PPUSH
// if not building then
30947: LD_VAR 0 1
30951: NOT
30952: IFFALSE 30956
// exit ;
30954: GO 30975
// result := UnitsInside ( building ) < 6 ;
30956: LD_ADDR_VAR 0 2
30960: PUSH
30961: LD_VAR 0 1
30965: PPUSH
30966: CALL_OW 313
30970: PUSH
30971: LD_INT 6
30973: LESS
30974: ST_TO_ADDR
// end ;
30975: LD_VAR 0 2
30979: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30980: LD_INT 0
30982: PPUSH
30983: PPUSH
30984: PPUSH
30985: PPUSH
// tmp := [ ] ;
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: EMPTY
30992: ST_TO_ADDR
// list := [ ] ;
30993: LD_ADDR_VAR 0 5
30997: PUSH
30998: EMPTY
30999: ST_TO_ADDR
// for i = 16 to 25 do
31000: LD_ADDR_VAR 0 4
31004: PUSH
31005: DOUBLE
31006: LD_INT 16
31008: DEC
31009: ST_TO_ADDR
31010: LD_INT 25
31012: PUSH
31013: FOR_TO
31014: IFFALSE 31087
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31016: LD_ADDR_VAR 0 3
31020: PUSH
31021: LD_VAR 0 3
31025: PUSH
31026: LD_INT 22
31028: PUSH
31029: LD_VAR 0 1
31033: PPUSH
31034: CALL_OW 255
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 91
31045: PUSH
31046: LD_VAR 0 1
31050: PUSH
31051: LD_INT 6
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 30
31061: PUSH
31062: LD_VAR 0 4
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: LIST
31075: PUSH
31076: EMPTY
31077: LIST
31078: PPUSH
31079: CALL_OW 69
31083: ADD
31084: ST_TO_ADDR
31085: GO 31013
31087: POP
31088: POP
// for i = 1 to tmp do
31089: LD_ADDR_VAR 0 4
31093: PUSH
31094: DOUBLE
31095: LD_INT 1
31097: DEC
31098: ST_TO_ADDR
31099: LD_VAR 0 3
31103: PUSH
31104: FOR_TO
31105: IFFALSE 31193
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31107: LD_ADDR_VAR 0 5
31111: PUSH
31112: LD_VAR 0 5
31116: PUSH
31117: LD_VAR 0 3
31121: PUSH
31122: LD_VAR 0 4
31126: ARRAY
31127: PPUSH
31128: CALL_OW 266
31132: PUSH
31133: LD_VAR 0 3
31137: PUSH
31138: LD_VAR 0 4
31142: ARRAY
31143: PPUSH
31144: CALL_OW 250
31148: PUSH
31149: LD_VAR 0 3
31153: PUSH
31154: LD_VAR 0 4
31158: ARRAY
31159: PPUSH
31160: CALL_OW 251
31164: PUSH
31165: LD_VAR 0 3
31169: PUSH
31170: LD_VAR 0 4
31174: ARRAY
31175: PPUSH
31176: CALL_OW 254
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: PUSH
31187: EMPTY
31188: LIST
31189: ADD
31190: ST_TO_ADDR
31191: GO 31104
31193: POP
31194: POP
// result := list ;
31195: LD_ADDR_VAR 0 2
31199: PUSH
31200: LD_VAR 0 5
31204: ST_TO_ADDR
// end ;
31205: LD_VAR 0 2
31209: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31210: LD_INT 0
31212: PPUSH
31213: PPUSH
31214: PPUSH
31215: PPUSH
31216: PPUSH
31217: PPUSH
31218: PPUSH
// if not factory then
31219: LD_VAR 0 1
31223: NOT
31224: IFFALSE 31228
// exit ;
31226: GO 31821
// if control = control_apeman then
31228: LD_VAR 0 4
31232: PUSH
31233: LD_INT 5
31235: EQUAL
31236: IFFALSE 31345
// begin tmp := UnitsInside ( factory ) ;
31238: LD_ADDR_VAR 0 8
31242: PUSH
31243: LD_VAR 0 1
31247: PPUSH
31248: CALL_OW 313
31252: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31253: LD_VAR 0 8
31257: PPUSH
31258: LD_INT 25
31260: PUSH
31261: LD_INT 12
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 72
31272: NOT
31273: IFFALSE 31283
// control := control_manual ;
31275: LD_ADDR_VAR 0 4
31279: PUSH
31280: LD_INT 1
31282: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31283: LD_ADDR_VAR 0 8
31287: PUSH
31288: LD_VAR 0 1
31292: PPUSH
31293: CALL 30980 0 1
31297: ST_TO_ADDR
// if tmp then
31298: LD_VAR 0 8
31302: IFFALSE 31345
// begin for i in tmp do
31304: LD_ADDR_VAR 0 7
31308: PUSH
31309: LD_VAR 0 8
31313: PUSH
31314: FOR_IN
31315: IFFALSE 31343
// if i [ 1 ] = b_ext_radio then
31317: LD_VAR 0 7
31321: PUSH
31322: LD_INT 1
31324: ARRAY
31325: PUSH
31326: LD_INT 22
31328: EQUAL
31329: IFFALSE 31341
// begin control := control_remote ;
31331: LD_ADDR_VAR 0 4
31335: PUSH
31336: LD_INT 2
31338: ST_TO_ADDR
// break ;
31339: GO 31343
// end ;
31341: GO 31314
31343: POP
31344: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31345: LD_VAR 0 1
31349: PPUSH
31350: LD_VAR 0 2
31354: PPUSH
31355: LD_VAR 0 3
31359: PPUSH
31360: LD_VAR 0 4
31364: PPUSH
31365: LD_VAR 0 5
31369: PPUSH
31370: CALL_OW 448
31374: IFFALSE 31409
// begin result := [ chassis , engine , control , weapon ] ;
31376: LD_ADDR_VAR 0 6
31380: PUSH
31381: LD_VAR 0 2
31385: PUSH
31386: LD_VAR 0 3
31390: PUSH
31391: LD_VAR 0 4
31395: PUSH
31396: LD_VAR 0 5
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// exit ;
31407: GO 31821
// end ; _chassis := AvailableChassisList ( factory ) ;
31409: LD_ADDR_VAR 0 9
31413: PUSH
31414: LD_VAR 0 1
31418: PPUSH
31419: CALL_OW 475
31423: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31424: LD_ADDR_VAR 0 11
31428: PUSH
31429: LD_VAR 0 1
31433: PPUSH
31434: CALL_OW 476
31438: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31439: LD_ADDR_VAR 0 12
31443: PUSH
31444: LD_VAR 0 1
31448: PPUSH
31449: CALL_OW 477
31453: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31454: LD_ADDR_VAR 0 10
31458: PUSH
31459: LD_VAR 0 1
31463: PPUSH
31464: CALL_OW 478
31468: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31469: LD_VAR 0 9
31473: NOT
31474: PUSH
31475: LD_VAR 0 11
31479: NOT
31480: OR
31481: PUSH
31482: LD_VAR 0 12
31486: NOT
31487: OR
31488: PUSH
31489: LD_VAR 0 10
31493: NOT
31494: OR
31495: IFFALSE 31530
// begin result := [ chassis , engine , control , weapon ] ;
31497: LD_ADDR_VAR 0 6
31501: PUSH
31502: LD_VAR 0 2
31506: PUSH
31507: LD_VAR 0 3
31511: PUSH
31512: LD_VAR 0 4
31516: PUSH
31517: LD_VAR 0 5
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
// exit ;
31528: GO 31821
// end ; if not chassis in _chassis then
31530: LD_VAR 0 2
31534: PUSH
31535: LD_VAR 0 9
31539: IN
31540: NOT
31541: IFFALSE 31567
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31543: LD_ADDR_VAR 0 2
31547: PUSH
31548: LD_VAR 0 9
31552: PUSH
31553: LD_INT 1
31555: PPUSH
31556: LD_VAR 0 9
31560: PPUSH
31561: CALL_OW 12
31565: ARRAY
31566: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31567: LD_VAR 0 2
31571: PPUSH
31572: LD_VAR 0 3
31576: PPUSH
31577: CALL 31826 0 2
31581: NOT
31582: IFFALSE 31641
// repeat engine := _engine [ 1 ] ;
31584: LD_ADDR_VAR 0 3
31588: PUSH
31589: LD_VAR 0 11
31593: PUSH
31594: LD_INT 1
31596: ARRAY
31597: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31598: LD_ADDR_VAR 0 11
31602: PUSH
31603: LD_VAR 0 11
31607: PPUSH
31608: LD_INT 1
31610: PPUSH
31611: CALL_OW 3
31615: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31616: LD_VAR 0 2
31620: PPUSH
31621: LD_VAR 0 3
31625: PPUSH
31626: CALL 31826 0 2
31630: PUSH
31631: LD_VAR 0 11
31635: PUSH
31636: EMPTY
31637: EQUAL
31638: OR
31639: IFFALSE 31584
// if not control in _control then
31641: LD_VAR 0 4
31645: PUSH
31646: LD_VAR 0 12
31650: IN
31651: NOT
31652: IFFALSE 31678
// control := _control [ rand ( 1 , _control ) ] ;
31654: LD_ADDR_VAR 0 4
31658: PUSH
31659: LD_VAR 0 12
31663: PUSH
31664: LD_INT 1
31666: PPUSH
31667: LD_VAR 0 12
31671: PPUSH
31672: CALL_OW 12
31676: ARRAY
31677: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31678: LD_VAR 0 2
31682: PPUSH
31683: LD_VAR 0 5
31687: PPUSH
31688: CALL 32046 0 2
31692: NOT
31693: IFFALSE 31752
// repeat weapon := _weapon [ 1 ] ;
31695: LD_ADDR_VAR 0 5
31699: PUSH
31700: LD_VAR 0 10
31704: PUSH
31705: LD_INT 1
31707: ARRAY
31708: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31709: LD_ADDR_VAR 0 10
31713: PUSH
31714: LD_VAR 0 10
31718: PPUSH
31719: LD_INT 1
31721: PPUSH
31722: CALL_OW 3
31726: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31727: LD_VAR 0 2
31731: PPUSH
31732: LD_VAR 0 5
31736: PPUSH
31737: CALL 32046 0 2
31741: PUSH
31742: LD_VAR 0 10
31746: PUSH
31747: EMPTY
31748: EQUAL
31749: OR
31750: IFFALSE 31695
// result := [ ] ;
31752: LD_ADDR_VAR 0 6
31756: PUSH
31757: EMPTY
31758: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31759: LD_VAR 0 1
31763: PPUSH
31764: LD_VAR 0 2
31768: PPUSH
31769: LD_VAR 0 3
31773: PPUSH
31774: LD_VAR 0 4
31778: PPUSH
31779: LD_VAR 0 5
31783: PPUSH
31784: CALL_OW 448
31788: IFFALSE 31821
// result := [ chassis , engine , control , weapon ] ;
31790: LD_ADDR_VAR 0 6
31794: PUSH
31795: LD_VAR 0 2
31799: PUSH
31800: LD_VAR 0 3
31804: PUSH
31805: LD_VAR 0 4
31809: PUSH
31810: LD_VAR 0 5
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: ST_TO_ADDR
// end ;
31821: LD_VAR 0 6
31825: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31826: LD_INT 0
31828: PPUSH
// if not chassis or not engine then
31829: LD_VAR 0 1
31833: NOT
31834: PUSH
31835: LD_VAR 0 2
31839: NOT
31840: OR
31841: IFFALSE 31845
// exit ;
31843: GO 32041
// case engine of engine_solar :
31845: LD_VAR 0 2
31849: PUSH
31850: LD_INT 2
31852: DOUBLE
31853: EQUAL
31854: IFTRUE 31858
31856: GO 31896
31858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31859: LD_ADDR_VAR 0 3
31863: PUSH
31864: LD_INT 11
31866: PUSH
31867: LD_INT 12
31869: PUSH
31870: LD_INT 13
31872: PUSH
31873: LD_INT 14
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: ST_TO_ADDR
31894: GO 32025
31896: LD_INT 1
31898: DOUBLE
31899: EQUAL
31900: IFTRUE 31904
31902: GO 31966
31904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31905: LD_ADDR_VAR 0 3
31909: PUSH
31910: LD_INT 11
31912: PUSH
31913: LD_INT 12
31915: PUSH
31916: LD_INT 13
31918: PUSH
31919: LD_INT 14
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 3
31930: PUSH
31931: LD_INT 4
31933: PUSH
31934: LD_INT 5
31936: PUSH
31937: LD_INT 21
31939: PUSH
31940: LD_INT 23
31942: PUSH
31943: LD_INT 22
31945: PUSH
31946: LD_INT 24
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
31964: GO 32025
31966: LD_INT 3
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 31974
31972: GO 32024
31974: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31975: LD_ADDR_VAR 0 3
31979: PUSH
31980: LD_INT 13
31982: PUSH
31983: LD_INT 14
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: LD_INT 21
32000: PUSH
32001: LD_INT 22
32003: PUSH
32004: LD_INT 23
32006: PUSH
32007: LD_INT 24
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: ST_TO_ADDR
32022: GO 32025
32024: POP
// result := ( chassis in result ) ;
32025: LD_ADDR_VAR 0 3
32029: PUSH
32030: LD_VAR 0 1
32034: PUSH
32035: LD_VAR 0 3
32039: IN
32040: ST_TO_ADDR
// end ;
32041: LD_VAR 0 3
32045: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32046: LD_INT 0
32048: PPUSH
// if not chassis or not weapon then
32049: LD_VAR 0 1
32053: NOT
32054: PUSH
32055: LD_VAR 0 2
32059: NOT
32060: OR
32061: IFFALSE 32065
// exit ;
32063: GO 33091
// case weapon of us_machine_gun :
32065: LD_VAR 0 2
32069: PUSH
32070: LD_INT 2
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32108
32078: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32079: LD_ADDR_VAR 0 3
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: LD_INT 4
32095: PUSH
32096: LD_INT 5
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
32106: GO 33075
32108: LD_INT 3
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32146
32116: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32117: LD_ADDR_VAR 0 3
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: LD_INT 4
32133: PUSH
32134: LD_INT 5
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
32144: GO 33075
32146: LD_INT 11
32148: DOUBLE
32149: EQUAL
32150: IFTRUE 32154
32152: GO 32184
32154: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32155: LD_ADDR_VAR 0 3
32159: PUSH
32160: LD_INT 1
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: LD_INT 4
32171: PUSH
32172: LD_INT 5
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: ST_TO_ADDR
32182: GO 33075
32184: LD_INT 4
32186: DOUBLE
32187: EQUAL
32188: IFTRUE 32192
32190: GO 32218
32192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32193: LD_ADDR_VAR 0 3
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 3
32203: PUSH
32204: LD_INT 4
32206: PUSH
32207: LD_INT 5
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: ST_TO_ADDR
32216: GO 33075
32218: LD_INT 5
32220: DOUBLE
32221: EQUAL
32222: IFTRUE 32226
32224: GO 32252
32226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32227: LD_ADDR_VAR 0 3
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: LD_INT 3
32237: PUSH
32238: LD_INT 4
32240: PUSH
32241: LD_INT 5
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: ST_TO_ADDR
32250: GO 33075
32252: LD_INT 9
32254: DOUBLE
32255: EQUAL
32256: IFTRUE 32260
32258: GO 32286
32260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32261: LD_ADDR_VAR 0 3
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: LD_INT 3
32271: PUSH
32272: LD_INT 4
32274: PUSH
32275: LD_INT 5
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: ST_TO_ADDR
32284: GO 33075
32286: LD_INT 7
32288: DOUBLE
32289: EQUAL
32290: IFTRUE 32294
32292: GO 32320
32294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32295: LD_ADDR_VAR 0 3
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: LD_INT 3
32305: PUSH
32306: LD_INT 4
32308: PUSH
32309: LD_INT 5
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: ST_TO_ADDR
32318: GO 33075
32320: LD_INT 12
32322: DOUBLE
32323: EQUAL
32324: IFTRUE 32328
32326: GO 32354
32328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32329: LD_ADDR_VAR 0 3
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: LD_INT 4
32342: PUSH
32343: LD_INT 5
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: ST_TO_ADDR
32352: GO 33075
32354: LD_INT 13
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32388
32362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32363: LD_ADDR_VAR 0 3
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: LD_INT 4
32376: PUSH
32377: LD_INT 5
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: ST_TO_ADDR
32386: GO 33075
32388: LD_INT 14
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32396
32394: GO 32414
32396: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32397: LD_ADDR_VAR 0 3
32401: PUSH
32402: LD_INT 4
32404: PUSH
32405: LD_INT 5
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: ST_TO_ADDR
32412: GO 33075
32414: LD_INT 6
32416: DOUBLE
32417: EQUAL
32418: IFTRUE 32422
32420: GO 32440
32422: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32423: LD_ADDR_VAR 0 3
32427: PUSH
32428: LD_INT 4
32430: PUSH
32431: LD_INT 5
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: ST_TO_ADDR
32438: GO 33075
32440: LD_INT 10
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32448
32446: GO 32466
32448: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_INT 4
32456: PUSH
32457: LD_INT 5
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: ST_TO_ADDR
32464: GO 33075
32466: LD_INT 22
32468: DOUBLE
32469: EQUAL
32470: IFTRUE 32474
32472: GO 32500
32474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32475: LD_ADDR_VAR 0 3
32479: PUSH
32480: LD_INT 11
32482: PUSH
32483: LD_INT 12
32485: PUSH
32486: LD_INT 13
32488: PUSH
32489: LD_INT 14
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
32498: GO 33075
32500: LD_INT 23
32502: DOUBLE
32503: EQUAL
32504: IFTRUE 32508
32506: GO 32534
32508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: LD_INT 11
32516: PUSH
32517: LD_INT 12
32519: PUSH
32520: LD_INT 13
32522: PUSH
32523: LD_INT 14
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: ST_TO_ADDR
32532: GO 33075
32534: LD_INT 24
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32568
32542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_INT 11
32550: PUSH
32551: LD_INT 12
32553: PUSH
32554: LD_INT 13
32556: PUSH
32557: LD_INT 14
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: ST_TO_ADDR
32566: GO 33075
32568: LD_INT 30
32570: DOUBLE
32571: EQUAL
32572: IFTRUE 32576
32574: GO 32602
32576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32577: LD_ADDR_VAR 0 3
32581: PUSH
32582: LD_INT 11
32584: PUSH
32585: LD_INT 12
32587: PUSH
32588: LD_INT 13
32590: PUSH
32591: LD_INT 14
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: ST_TO_ADDR
32600: GO 33075
32602: LD_INT 25
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32610
32608: GO 32628
32610: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32611: LD_ADDR_VAR 0 3
32615: PUSH
32616: LD_INT 13
32618: PUSH
32619: LD_INT 14
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: ST_TO_ADDR
32626: GO 33075
32628: LD_INT 27
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32654
32636: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32637: LD_ADDR_VAR 0 3
32641: PUSH
32642: LD_INT 13
32644: PUSH
32645: LD_INT 14
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: ST_TO_ADDR
32652: GO 33075
32654: LD_INT 28
32656: DOUBLE
32657: EQUAL
32658: IFTRUE 32662
32660: GO 32680
32662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32663: LD_ADDR_VAR 0 3
32667: PUSH
32668: LD_INT 13
32670: PUSH
32671: LD_INT 14
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: ST_TO_ADDR
32678: GO 33075
32680: LD_INT 29
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32706
32688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: LD_INT 13
32696: PUSH
32697: LD_INT 14
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: ST_TO_ADDR
32704: GO 33075
32706: LD_INT 31
32708: DOUBLE
32709: EQUAL
32710: IFTRUE 32714
32712: GO 32732
32714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_INT 13
32722: PUSH
32723: LD_INT 14
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: ST_TO_ADDR
32730: GO 33075
32732: LD_INT 26
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32740
32738: GO 32758
32740: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32741: LD_ADDR_VAR 0 3
32745: PUSH
32746: LD_INT 13
32748: PUSH
32749: LD_INT 14
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: ST_TO_ADDR
32756: GO 33075
32758: LD_INT 42
32760: DOUBLE
32761: EQUAL
32762: IFTRUE 32766
32764: GO 32792
32766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32767: LD_ADDR_VAR 0 3
32771: PUSH
32772: LD_INT 21
32774: PUSH
32775: LD_INT 22
32777: PUSH
32778: LD_INT 23
32780: PUSH
32781: LD_INT 24
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: ST_TO_ADDR
32790: GO 33075
32792: LD_INT 43
32794: DOUBLE
32795: EQUAL
32796: IFTRUE 32800
32798: GO 32826
32800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32801: LD_ADDR_VAR 0 3
32805: PUSH
32806: LD_INT 21
32808: PUSH
32809: LD_INT 22
32811: PUSH
32812: LD_INT 23
32814: PUSH
32815: LD_INT 24
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: ST_TO_ADDR
32824: GO 33075
32826: LD_INT 44
32828: DOUBLE
32829: EQUAL
32830: IFTRUE 32834
32832: GO 32860
32834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32835: LD_ADDR_VAR 0 3
32839: PUSH
32840: LD_INT 21
32842: PUSH
32843: LD_INT 22
32845: PUSH
32846: LD_INT 23
32848: PUSH
32849: LD_INT 24
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
32858: GO 33075
32860: LD_INT 45
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32894
32868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32869: LD_ADDR_VAR 0 3
32873: PUSH
32874: LD_INT 21
32876: PUSH
32877: LD_INT 22
32879: PUSH
32880: LD_INT 23
32882: PUSH
32883: LD_INT 24
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: ST_TO_ADDR
32892: GO 33075
32894: LD_INT 49
32896: DOUBLE
32897: EQUAL
32898: IFTRUE 32902
32900: GO 32928
32902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32903: LD_ADDR_VAR 0 3
32907: PUSH
32908: LD_INT 21
32910: PUSH
32911: LD_INT 22
32913: PUSH
32914: LD_INT 23
32916: PUSH
32917: LD_INT 24
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: ST_TO_ADDR
32926: GO 33075
32928: LD_INT 51
32930: DOUBLE
32931: EQUAL
32932: IFTRUE 32936
32934: GO 32962
32936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32937: LD_ADDR_VAR 0 3
32941: PUSH
32942: LD_INT 21
32944: PUSH
32945: LD_INT 22
32947: PUSH
32948: LD_INT 23
32950: PUSH
32951: LD_INT 24
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: ST_TO_ADDR
32960: GO 33075
32962: LD_INT 52
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32970
32968: GO 32996
32970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32971: LD_ADDR_VAR 0 3
32975: PUSH
32976: LD_INT 21
32978: PUSH
32979: LD_INT 22
32981: PUSH
32982: LD_INT 23
32984: PUSH
32985: LD_INT 24
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: ST_TO_ADDR
32994: GO 33075
32996: LD_INT 53
32998: DOUBLE
32999: EQUAL
33000: IFTRUE 33004
33002: GO 33022
33004: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33005: LD_ADDR_VAR 0 3
33009: PUSH
33010: LD_INT 23
33012: PUSH
33013: LD_INT 24
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: ST_TO_ADDR
33020: GO 33075
33022: LD_INT 46
33024: DOUBLE
33025: EQUAL
33026: IFTRUE 33030
33028: GO 33048
33030: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33031: LD_ADDR_VAR 0 3
33035: PUSH
33036: LD_INT 23
33038: PUSH
33039: LD_INT 24
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: ST_TO_ADDR
33046: GO 33075
33048: LD_INT 47
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33074
33056: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33057: LD_ADDR_VAR 0 3
33061: PUSH
33062: LD_INT 23
33064: PUSH
33065: LD_INT 24
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: ST_TO_ADDR
33072: GO 33075
33074: POP
// result := ( chassis in result ) ;
33075: LD_ADDR_VAR 0 3
33079: PUSH
33080: LD_VAR 0 1
33084: PUSH
33085: LD_VAR 0 3
33089: IN
33090: ST_TO_ADDR
// end ;
33091: LD_VAR 0 3
33095: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33096: LD_INT 0
33098: PPUSH
33099: PPUSH
33100: PPUSH
33101: PPUSH
33102: PPUSH
33103: PPUSH
33104: PPUSH
// result := array ;
33105: LD_ADDR_VAR 0 5
33109: PUSH
33110: LD_VAR 0 1
33114: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33115: LD_VAR 0 1
33119: NOT
33120: PUSH
33121: LD_VAR 0 2
33125: NOT
33126: OR
33127: PUSH
33128: LD_VAR 0 3
33132: NOT
33133: OR
33134: PUSH
33135: LD_VAR 0 2
33139: PUSH
33140: LD_VAR 0 1
33144: GREATER
33145: OR
33146: PUSH
33147: LD_VAR 0 3
33151: PUSH
33152: LD_VAR 0 1
33156: GREATER
33157: OR
33158: IFFALSE 33162
// exit ;
33160: GO 33458
// if direction then
33162: LD_VAR 0 4
33166: IFFALSE 33230
// begin d := 1 ;
33168: LD_ADDR_VAR 0 9
33172: PUSH
33173: LD_INT 1
33175: ST_TO_ADDR
// if i_from > i_to then
33176: LD_VAR 0 2
33180: PUSH
33181: LD_VAR 0 3
33185: GREATER
33186: IFFALSE 33212
// length := ( array - i_from ) + i_to else
33188: LD_ADDR_VAR 0 11
33192: PUSH
33193: LD_VAR 0 1
33197: PUSH
33198: LD_VAR 0 2
33202: MINUS
33203: PUSH
33204: LD_VAR 0 3
33208: PLUS
33209: ST_TO_ADDR
33210: GO 33228
// length := i_to - i_from ;
33212: LD_ADDR_VAR 0 11
33216: PUSH
33217: LD_VAR 0 3
33221: PUSH
33222: LD_VAR 0 2
33226: MINUS
33227: ST_TO_ADDR
// end else
33228: GO 33291
// begin d := - 1 ;
33230: LD_ADDR_VAR 0 9
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: ST_TO_ADDR
// if i_from > i_to then
33239: LD_VAR 0 2
33243: PUSH
33244: LD_VAR 0 3
33248: GREATER
33249: IFFALSE 33269
// length := i_from - i_to else
33251: LD_ADDR_VAR 0 11
33255: PUSH
33256: LD_VAR 0 2
33260: PUSH
33261: LD_VAR 0 3
33265: MINUS
33266: ST_TO_ADDR
33267: GO 33291
// length := ( array - i_to ) + i_from ;
33269: LD_ADDR_VAR 0 11
33273: PUSH
33274: LD_VAR 0 1
33278: PUSH
33279: LD_VAR 0 3
33283: MINUS
33284: PUSH
33285: LD_VAR 0 2
33289: PLUS
33290: ST_TO_ADDR
// end ; if not length then
33291: LD_VAR 0 11
33295: NOT
33296: IFFALSE 33300
// exit ;
33298: GO 33458
// tmp := array ;
33300: LD_ADDR_VAR 0 10
33304: PUSH
33305: LD_VAR 0 1
33309: ST_TO_ADDR
// for i = 1 to length do
33310: LD_ADDR_VAR 0 6
33314: PUSH
33315: DOUBLE
33316: LD_INT 1
33318: DEC
33319: ST_TO_ADDR
33320: LD_VAR 0 11
33324: PUSH
33325: FOR_TO
33326: IFFALSE 33446
// begin for j = 1 to array do
33328: LD_ADDR_VAR 0 7
33332: PUSH
33333: DOUBLE
33334: LD_INT 1
33336: DEC
33337: ST_TO_ADDR
33338: LD_VAR 0 1
33342: PUSH
33343: FOR_TO
33344: IFFALSE 33432
// begin k := j + d ;
33346: LD_ADDR_VAR 0 8
33350: PUSH
33351: LD_VAR 0 7
33355: PUSH
33356: LD_VAR 0 9
33360: PLUS
33361: ST_TO_ADDR
// if k > array then
33362: LD_VAR 0 8
33366: PUSH
33367: LD_VAR 0 1
33371: GREATER
33372: IFFALSE 33382
// k := 1 ;
33374: LD_ADDR_VAR 0 8
33378: PUSH
33379: LD_INT 1
33381: ST_TO_ADDR
// if not k then
33382: LD_VAR 0 8
33386: NOT
33387: IFFALSE 33399
// k := array ;
33389: LD_ADDR_VAR 0 8
33393: PUSH
33394: LD_VAR 0 1
33398: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33399: LD_ADDR_VAR 0 10
33403: PUSH
33404: LD_VAR 0 10
33408: PPUSH
33409: LD_VAR 0 8
33413: PPUSH
33414: LD_VAR 0 1
33418: PUSH
33419: LD_VAR 0 7
33423: ARRAY
33424: PPUSH
33425: CALL_OW 1
33429: ST_TO_ADDR
// end ;
33430: GO 33343
33432: POP
33433: POP
// array := tmp ;
33434: LD_ADDR_VAR 0 1
33438: PUSH
33439: LD_VAR 0 10
33443: ST_TO_ADDR
// end ;
33444: GO 33325
33446: POP
33447: POP
// result := array ;
33448: LD_ADDR_VAR 0 5
33452: PUSH
33453: LD_VAR 0 1
33457: ST_TO_ADDR
// end ;
33458: LD_VAR 0 5
33462: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33463: LD_INT 0
33465: PPUSH
33466: PPUSH
// result := 0 ;
33467: LD_ADDR_VAR 0 3
33471: PUSH
33472: LD_INT 0
33474: ST_TO_ADDR
// if not array or not value in array then
33475: LD_VAR 0 1
33479: NOT
33480: PUSH
33481: LD_VAR 0 2
33485: PUSH
33486: LD_VAR 0 1
33490: IN
33491: NOT
33492: OR
33493: IFFALSE 33497
// exit ;
33495: GO 33551
// for i = 1 to array do
33497: LD_ADDR_VAR 0 4
33501: PUSH
33502: DOUBLE
33503: LD_INT 1
33505: DEC
33506: ST_TO_ADDR
33507: LD_VAR 0 1
33511: PUSH
33512: FOR_TO
33513: IFFALSE 33549
// if value = array [ i ] then
33515: LD_VAR 0 2
33519: PUSH
33520: LD_VAR 0 1
33524: PUSH
33525: LD_VAR 0 4
33529: ARRAY
33530: EQUAL
33531: IFFALSE 33547
// begin result := i ;
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_VAR 0 4
33542: ST_TO_ADDR
// exit ;
33543: POP
33544: POP
33545: GO 33551
// end ;
33547: GO 33512
33549: POP
33550: POP
// end ;
33551: LD_VAR 0 3
33555: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33556: LD_INT 0
33558: PPUSH
// vc_chassis := chassis ;
33559: LD_ADDR_OWVAR 37
33563: PUSH
33564: LD_VAR 0 1
33568: ST_TO_ADDR
// vc_engine := engine ;
33569: LD_ADDR_OWVAR 39
33573: PUSH
33574: LD_VAR 0 2
33578: ST_TO_ADDR
// vc_control := control ;
33579: LD_ADDR_OWVAR 38
33583: PUSH
33584: LD_VAR 0 3
33588: ST_TO_ADDR
// vc_weapon := weapon ;
33589: LD_ADDR_OWVAR 40
33593: PUSH
33594: LD_VAR 0 4
33598: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33599: LD_ADDR_OWVAR 41
33603: PUSH
33604: LD_VAR 0 5
33608: ST_TO_ADDR
// end ;
33609: LD_VAR 0 6
33613: RET
// export function WantPlant ( unit ) ; var task ; begin
33614: LD_INT 0
33616: PPUSH
33617: PPUSH
// result := false ;
33618: LD_ADDR_VAR 0 2
33622: PUSH
33623: LD_INT 0
33625: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33626: LD_ADDR_VAR 0 3
33630: PUSH
33631: LD_VAR 0 1
33635: PPUSH
33636: CALL_OW 437
33640: ST_TO_ADDR
// if task then
33641: LD_VAR 0 3
33645: IFFALSE 33673
// if task [ 1 ] [ 1 ] = p then
33647: LD_VAR 0 3
33651: PUSH
33652: LD_INT 1
33654: ARRAY
33655: PUSH
33656: LD_INT 1
33658: ARRAY
33659: PUSH
33660: LD_STRING p
33662: EQUAL
33663: IFFALSE 33673
// result := true ;
33665: LD_ADDR_VAR 0 2
33669: PUSH
33670: LD_INT 1
33672: ST_TO_ADDR
// end ;
33673: LD_VAR 0 2
33677: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33678: LD_INT 0
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
// if pos < 1 then
33684: LD_VAR 0 2
33688: PUSH
33689: LD_INT 1
33691: LESS
33692: IFFALSE 33696
// exit ;
33694: GO 33999
// if pos = 1 then
33696: LD_VAR 0 2
33700: PUSH
33701: LD_INT 1
33703: EQUAL
33704: IFFALSE 33737
// result := Replace ( arr , pos [ 1 ] , value ) else
33706: LD_ADDR_VAR 0 4
33710: PUSH
33711: LD_VAR 0 1
33715: PPUSH
33716: LD_VAR 0 2
33720: PUSH
33721: LD_INT 1
33723: ARRAY
33724: PPUSH
33725: LD_VAR 0 3
33729: PPUSH
33730: CALL_OW 1
33734: ST_TO_ADDR
33735: GO 33999
// begin tmp := arr ;
33737: LD_ADDR_VAR 0 6
33741: PUSH
33742: LD_VAR 0 1
33746: ST_TO_ADDR
// s_arr := [ tmp ] ;
33747: LD_ADDR_VAR 0 7
33751: PUSH
33752: LD_VAR 0 6
33756: PUSH
33757: EMPTY
33758: LIST
33759: ST_TO_ADDR
// for i = 1 to pos - 1 do
33760: LD_ADDR_VAR 0 5
33764: PUSH
33765: DOUBLE
33766: LD_INT 1
33768: DEC
33769: ST_TO_ADDR
33770: LD_VAR 0 2
33774: PUSH
33775: LD_INT 1
33777: MINUS
33778: PUSH
33779: FOR_TO
33780: IFFALSE 33825
// begin tmp := tmp [ pos [ i ] ] ;
33782: LD_ADDR_VAR 0 6
33786: PUSH
33787: LD_VAR 0 6
33791: PUSH
33792: LD_VAR 0 2
33796: PUSH
33797: LD_VAR 0 5
33801: ARRAY
33802: ARRAY
33803: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33804: LD_ADDR_VAR 0 7
33808: PUSH
33809: LD_VAR 0 7
33813: PUSH
33814: LD_VAR 0 6
33818: PUSH
33819: EMPTY
33820: LIST
33821: ADD
33822: ST_TO_ADDR
// end ;
33823: GO 33779
33825: POP
33826: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33827: LD_ADDR_VAR 0 6
33831: PUSH
33832: LD_VAR 0 6
33836: PPUSH
33837: LD_VAR 0 2
33841: PUSH
33842: LD_VAR 0 2
33846: ARRAY
33847: PPUSH
33848: LD_VAR 0 3
33852: PPUSH
33853: CALL_OW 1
33857: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33858: LD_ADDR_VAR 0 7
33862: PUSH
33863: LD_VAR 0 7
33867: PPUSH
33868: LD_VAR 0 7
33872: PPUSH
33873: LD_VAR 0 6
33877: PPUSH
33878: CALL_OW 1
33882: ST_TO_ADDR
// for i = s_arr downto 2 do
33883: LD_ADDR_VAR 0 5
33887: PUSH
33888: DOUBLE
33889: LD_VAR 0 7
33893: INC
33894: ST_TO_ADDR
33895: LD_INT 2
33897: PUSH
33898: FOR_DOWNTO
33899: IFFALSE 33983
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33901: LD_ADDR_VAR 0 6
33905: PUSH
33906: LD_VAR 0 7
33910: PUSH
33911: LD_VAR 0 5
33915: PUSH
33916: LD_INT 1
33918: MINUS
33919: ARRAY
33920: PPUSH
33921: LD_VAR 0 2
33925: PUSH
33926: LD_VAR 0 5
33930: PUSH
33931: LD_INT 1
33933: MINUS
33934: ARRAY
33935: PPUSH
33936: LD_VAR 0 7
33940: PUSH
33941: LD_VAR 0 5
33945: ARRAY
33946: PPUSH
33947: CALL_OW 1
33951: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33952: LD_ADDR_VAR 0 7
33956: PUSH
33957: LD_VAR 0 7
33961: PPUSH
33962: LD_VAR 0 5
33966: PUSH
33967: LD_INT 1
33969: MINUS
33970: PPUSH
33971: LD_VAR 0 6
33975: PPUSH
33976: CALL_OW 1
33980: ST_TO_ADDR
// end ;
33981: GO 33898
33983: POP
33984: POP
// result := s_arr [ 1 ] ;
33985: LD_ADDR_VAR 0 4
33989: PUSH
33990: LD_VAR 0 7
33994: PUSH
33995: LD_INT 1
33997: ARRAY
33998: ST_TO_ADDR
// end ; end ;
33999: LD_VAR 0 4
34003: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34004: LD_INT 0
34006: PPUSH
34007: PPUSH
// if not list then
34008: LD_VAR 0 1
34012: NOT
34013: IFFALSE 34017
// exit ;
34015: GO 34108
// i := list [ pos1 ] ;
34017: LD_ADDR_VAR 0 5
34021: PUSH
34022: LD_VAR 0 1
34026: PUSH
34027: LD_VAR 0 2
34031: ARRAY
34032: ST_TO_ADDR
// if not i then
34033: LD_VAR 0 5
34037: NOT
34038: IFFALSE 34042
// exit ;
34040: GO 34108
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34042: LD_ADDR_VAR 0 1
34046: PUSH
34047: LD_VAR 0 1
34051: PPUSH
34052: LD_VAR 0 2
34056: PPUSH
34057: LD_VAR 0 1
34061: PUSH
34062: LD_VAR 0 3
34066: ARRAY
34067: PPUSH
34068: CALL_OW 1
34072: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34073: LD_ADDR_VAR 0 1
34077: PUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: LD_VAR 0 3
34087: PPUSH
34088: LD_VAR 0 5
34092: PPUSH
34093: CALL_OW 1
34097: ST_TO_ADDR
// result := list ;
34098: LD_ADDR_VAR 0 4
34102: PUSH
34103: LD_VAR 0 1
34107: ST_TO_ADDR
// end ;
34108: LD_VAR 0 4
34112: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34113: LD_INT 0
34115: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34116: LD_ADDR_VAR 0 5
34120: PUSH
34121: LD_VAR 0 1
34125: PPUSH
34126: CALL_OW 250
34130: PPUSH
34131: LD_VAR 0 1
34135: PPUSH
34136: CALL_OW 251
34140: PPUSH
34141: LD_VAR 0 2
34145: PPUSH
34146: LD_VAR 0 3
34150: PPUSH
34151: LD_VAR 0 4
34155: PPUSH
34156: CALL 34166 0 5
34160: ST_TO_ADDR
// end ;
34161: LD_VAR 0 5
34165: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34166: LD_INT 0
34168: PPUSH
34169: PPUSH
34170: PPUSH
34171: PPUSH
// if not list then
34172: LD_VAR 0 3
34176: NOT
34177: IFFALSE 34181
// exit ;
34179: GO 34569
// result := [ ] ;
34181: LD_ADDR_VAR 0 6
34185: PUSH
34186: EMPTY
34187: ST_TO_ADDR
// for i in list do
34188: LD_ADDR_VAR 0 7
34192: PUSH
34193: LD_VAR 0 3
34197: PUSH
34198: FOR_IN
34199: IFFALSE 34401
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34201: LD_ADDR_VAR 0 9
34205: PUSH
34206: LD_VAR 0 7
34210: PPUSH
34211: LD_VAR 0 1
34215: PPUSH
34216: LD_VAR 0 2
34220: PPUSH
34221: CALL_OW 297
34225: ST_TO_ADDR
// if not result then
34226: LD_VAR 0 6
34230: NOT
34231: IFFALSE 34257
// result := [ [ i , tmp ] ] else
34233: LD_ADDR_VAR 0 6
34237: PUSH
34238: LD_VAR 0 7
34242: PUSH
34243: LD_VAR 0 9
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: EMPTY
34253: LIST
34254: ST_TO_ADDR
34255: GO 34399
// begin if result [ result ] [ 2 ] < tmp then
34257: LD_VAR 0 6
34261: PUSH
34262: LD_VAR 0 6
34266: ARRAY
34267: PUSH
34268: LD_INT 2
34270: ARRAY
34271: PUSH
34272: LD_VAR 0 9
34276: LESS
34277: IFFALSE 34319
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34279: LD_ADDR_VAR 0 6
34283: PUSH
34284: LD_VAR 0 6
34288: PPUSH
34289: LD_VAR 0 6
34293: PUSH
34294: LD_INT 1
34296: PLUS
34297: PPUSH
34298: LD_VAR 0 7
34302: PUSH
34303: LD_VAR 0 9
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PPUSH
34312: CALL_OW 2
34316: ST_TO_ADDR
34317: GO 34399
// for j = 1 to result do
34319: LD_ADDR_VAR 0 8
34323: PUSH
34324: DOUBLE
34325: LD_INT 1
34327: DEC
34328: ST_TO_ADDR
34329: LD_VAR 0 6
34333: PUSH
34334: FOR_TO
34335: IFFALSE 34397
// begin if tmp < result [ j ] [ 2 ] then
34337: LD_VAR 0 9
34341: PUSH
34342: LD_VAR 0 6
34346: PUSH
34347: LD_VAR 0 8
34351: ARRAY
34352: PUSH
34353: LD_INT 2
34355: ARRAY
34356: LESS
34357: IFFALSE 34395
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34359: LD_ADDR_VAR 0 6
34363: PUSH
34364: LD_VAR 0 6
34368: PPUSH
34369: LD_VAR 0 8
34373: PPUSH
34374: LD_VAR 0 7
34378: PUSH
34379: LD_VAR 0 9
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PPUSH
34388: CALL_OW 2
34392: ST_TO_ADDR
// break ;
34393: GO 34397
// end ; end ;
34395: GO 34334
34397: POP
34398: POP
// end ; end ;
34399: GO 34198
34401: POP
34402: POP
// if result and not asc then
34403: LD_VAR 0 6
34407: PUSH
34408: LD_VAR 0 4
34412: NOT
34413: AND
34414: IFFALSE 34489
// begin tmp := result ;
34416: LD_ADDR_VAR 0 9
34420: PUSH
34421: LD_VAR 0 6
34425: ST_TO_ADDR
// for i = tmp downto 1 do
34426: LD_ADDR_VAR 0 7
34430: PUSH
34431: DOUBLE
34432: LD_VAR 0 9
34436: INC
34437: ST_TO_ADDR
34438: LD_INT 1
34440: PUSH
34441: FOR_DOWNTO
34442: IFFALSE 34487
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34444: LD_ADDR_VAR 0 6
34448: PUSH
34449: LD_VAR 0 6
34453: PPUSH
34454: LD_VAR 0 9
34458: PUSH
34459: LD_VAR 0 7
34463: MINUS
34464: PUSH
34465: LD_INT 1
34467: PLUS
34468: PPUSH
34469: LD_VAR 0 9
34473: PUSH
34474: LD_VAR 0 7
34478: ARRAY
34479: PPUSH
34480: CALL_OW 1
34484: ST_TO_ADDR
34485: GO 34441
34487: POP
34488: POP
// end ; tmp := [ ] ;
34489: LD_ADDR_VAR 0 9
34493: PUSH
34494: EMPTY
34495: ST_TO_ADDR
// if mode then
34496: LD_VAR 0 5
34500: IFFALSE 34569
// begin for i = 1 to result do
34502: LD_ADDR_VAR 0 7
34506: PUSH
34507: DOUBLE
34508: LD_INT 1
34510: DEC
34511: ST_TO_ADDR
34512: LD_VAR 0 6
34516: PUSH
34517: FOR_TO
34518: IFFALSE 34557
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34520: LD_ADDR_VAR 0 9
34524: PUSH
34525: LD_VAR 0 9
34529: PPUSH
34530: LD_VAR 0 7
34534: PPUSH
34535: LD_VAR 0 6
34539: PUSH
34540: LD_VAR 0 7
34544: ARRAY
34545: PUSH
34546: LD_INT 1
34548: ARRAY
34549: PPUSH
34550: CALL_OW 1
34554: ST_TO_ADDR
34555: GO 34517
34557: POP
34558: POP
// result := tmp ;
34559: LD_ADDR_VAR 0 6
34563: PUSH
34564: LD_VAR 0 9
34568: ST_TO_ADDR
// end ; end ;
34569: LD_VAR 0 6
34573: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34574: LD_INT 0
34576: PPUSH
34577: PPUSH
34578: PPUSH
34579: PPUSH
34580: PPUSH
34581: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34582: LD_ADDR_VAR 0 5
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: EMPTY
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: ST_TO_ADDR
// if not x or not y then
34604: LD_VAR 0 2
34608: NOT
34609: PUSH
34610: LD_VAR 0 3
34614: NOT
34615: OR
34616: IFFALSE 34620
// exit ;
34618: GO 36266
// if not range then
34620: LD_VAR 0 4
34624: NOT
34625: IFFALSE 34635
// range := 10 ;
34627: LD_ADDR_VAR 0 4
34631: PUSH
34632: LD_INT 10
34634: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34635: LD_ADDR_VAR 0 8
34639: PUSH
34640: LD_INT 81
34642: PUSH
34643: LD_VAR 0 1
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 92
34654: PUSH
34655: LD_VAR 0 2
34659: PUSH
34660: LD_VAR 0 3
34664: PUSH
34665: LD_VAR 0 4
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 3
34678: PUSH
34679: LD_INT 21
34681: PUSH
34682: LD_INT 3
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: PPUSH
34698: CALL_OW 69
34702: ST_TO_ADDR
// if not tmp then
34703: LD_VAR 0 8
34707: NOT
34708: IFFALSE 34712
// exit ;
34710: GO 36266
// for i in tmp do
34712: LD_ADDR_VAR 0 6
34716: PUSH
34717: LD_VAR 0 8
34721: PUSH
34722: FOR_IN
34723: IFFALSE 36241
// begin points := [ 0 , 0 , 0 ] ;
34725: LD_ADDR_VAR 0 9
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: ST_TO_ADDR
// bpoints := 1 ;
34744: LD_ADDR_VAR 0 10
34748: PUSH
34749: LD_INT 1
34751: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34752: LD_VAR 0 6
34756: PPUSH
34757: CALL_OW 247
34761: PUSH
34762: LD_INT 1
34764: DOUBLE
34765: EQUAL
34766: IFTRUE 34770
34768: GO 35348
34770: POP
// begin if GetClass ( i ) = 1 then
34771: LD_VAR 0 6
34775: PPUSH
34776: CALL_OW 257
34780: PUSH
34781: LD_INT 1
34783: EQUAL
34784: IFFALSE 34805
// points := [ 10 , 5 , 3 ] ;
34786: LD_ADDR_VAR 0 9
34790: PUSH
34791: LD_INT 10
34793: PUSH
34794: LD_INT 5
34796: PUSH
34797: LD_INT 3
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: LIST
34804: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34805: LD_VAR 0 6
34809: PPUSH
34810: CALL_OW 257
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: LD_INT 4
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: IN
34829: IFFALSE 34850
// points := [ 3 , 2 , 1 ] ;
34831: LD_ADDR_VAR 0 9
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34850: LD_VAR 0 6
34854: PPUSH
34855: CALL_OW 257
34859: PUSH
34860: LD_INT 5
34862: EQUAL
34863: IFFALSE 34884
// points := [ 130 , 5 , 2 ] ;
34865: LD_ADDR_VAR 0 9
34869: PUSH
34870: LD_INT 130
34872: PUSH
34873: LD_INT 5
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: LIST
34883: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34884: LD_VAR 0 6
34888: PPUSH
34889: CALL_OW 257
34893: PUSH
34894: LD_INT 8
34896: EQUAL
34897: IFFALSE 34918
// points := [ 35 , 35 , 30 ] ;
34899: LD_ADDR_VAR 0 9
34903: PUSH
34904: LD_INT 35
34906: PUSH
34907: LD_INT 35
34909: PUSH
34910: LD_INT 30
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34918: LD_VAR 0 6
34922: PPUSH
34923: CALL_OW 257
34927: PUSH
34928: LD_INT 9
34930: EQUAL
34931: IFFALSE 34952
// points := [ 20 , 55 , 40 ] ;
34933: LD_ADDR_VAR 0 9
34937: PUSH
34938: LD_INT 20
34940: PUSH
34941: LD_INT 55
34943: PUSH
34944: LD_INT 40
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34952: LD_VAR 0 6
34956: PPUSH
34957: CALL_OW 257
34961: PUSH
34962: LD_INT 12
34964: PUSH
34965: LD_INT 16
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: IN
34972: IFFALSE 34993
// points := [ 5 , 3 , 2 ] ;
34974: LD_ADDR_VAR 0 9
34978: PUSH
34979: LD_INT 5
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34993: LD_VAR 0 6
34997: PPUSH
34998: CALL_OW 257
35002: PUSH
35003: LD_INT 17
35005: EQUAL
35006: IFFALSE 35027
// points := [ 100 , 50 , 75 ] ;
35008: LD_ADDR_VAR 0 9
35012: PUSH
35013: LD_INT 100
35015: PUSH
35016: LD_INT 50
35018: PUSH
35019: LD_INT 75
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35027: LD_VAR 0 6
35031: PPUSH
35032: CALL_OW 257
35036: PUSH
35037: LD_INT 15
35039: EQUAL
35040: IFFALSE 35061
// points := [ 10 , 5 , 3 ] ;
35042: LD_ADDR_VAR 0 9
35046: PUSH
35047: LD_INT 10
35049: PUSH
35050: LD_INT 5
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35061: LD_VAR 0 6
35065: PPUSH
35066: CALL_OW 257
35070: PUSH
35071: LD_INT 14
35073: EQUAL
35074: IFFALSE 35095
// points := [ 10 , 0 , 0 ] ;
35076: LD_ADDR_VAR 0 9
35080: PUSH
35081: LD_INT 10
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: LIST
35094: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35095: LD_VAR 0 6
35099: PPUSH
35100: CALL_OW 257
35104: PUSH
35105: LD_INT 11
35107: EQUAL
35108: IFFALSE 35129
// points := [ 30 , 10 , 5 ] ;
35110: LD_ADDR_VAR 0 9
35114: PUSH
35115: LD_INT 30
35117: PUSH
35118: LD_INT 10
35120: PUSH
35121: LD_INT 5
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35129: LD_VAR 0 1
35133: PPUSH
35134: LD_INT 5
35136: PPUSH
35137: CALL_OW 321
35141: PUSH
35142: LD_INT 2
35144: EQUAL
35145: IFFALSE 35162
// bpoints := bpoints * 1.8 ;
35147: LD_ADDR_VAR 0 10
35151: PUSH
35152: LD_VAR 0 10
35156: PUSH
35157: LD_REAL  1.80000000000000E+0000
35160: MUL
35161: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35162: LD_VAR 0 6
35166: PPUSH
35167: CALL_OW 257
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: LD_INT 3
35180: PUSH
35181: LD_INT 4
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: IN
35190: PUSH
35191: LD_VAR 0 1
35195: PPUSH
35196: LD_INT 51
35198: PPUSH
35199: CALL_OW 321
35203: PUSH
35204: LD_INT 2
35206: EQUAL
35207: AND
35208: IFFALSE 35225
// bpoints := bpoints * 1.2 ;
35210: LD_ADDR_VAR 0 10
35214: PUSH
35215: LD_VAR 0 10
35219: PUSH
35220: LD_REAL  1.20000000000000E+0000
35223: MUL
35224: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35225: LD_VAR 0 6
35229: PPUSH
35230: CALL_OW 257
35234: PUSH
35235: LD_INT 5
35237: PUSH
35238: LD_INT 7
35240: PUSH
35241: LD_INT 9
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: IN
35249: PUSH
35250: LD_VAR 0 1
35254: PPUSH
35255: LD_INT 52
35257: PPUSH
35258: CALL_OW 321
35262: PUSH
35263: LD_INT 2
35265: EQUAL
35266: AND
35267: IFFALSE 35284
// bpoints := bpoints * 1.5 ;
35269: LD_ADDR_VAR 0 10
35273: PUSH
35274: LD_VAR 0 10
35278: PUSH
35279: LD_REAL  1.50000000000000E+0000
35282: MUL
35283: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35284: LD_VAR 0 1
35288: PPUSH
35289: LD_INT 66
35291: PPUSH
35292: CALL_OW 321
35296: PUSH
35297: LD_INT 2
35299: EQUAL
35300: IFFALSE 35317
// bpoints := bpoints * 1.1 ;
35302: LD_ADDR_VAR 0 10
35306: PUSH
35307: LD_VAR 0 10
35311: PUSH
35312: LD_REAL  1.10000000000000E+0000
35315: MUL
35316: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35317: LD_ADDR_VAR 0 10
35321: PUSH
35322: LD_VAR 0 10
35326: PUSH
35327: LD_VAR 0 6
35331: PPUSH
35332: LD_INT 1
35334: PPUSH
35335: CALL_OW 259
35339: PUSH
35340: LD_REAL  1.15000000000000E+0000
35343: MUL
35344: MUL
35345: ST_TO_ADDR
// end ; unit_vehicle :
35346: GO 36170
35348: LD_INT 2
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35356
35354: GO 36158
35356: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35357: LD_VAR 0 6
35361: PPUSH
35362: CALL_OW 264
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: LD_INT 42
35372: PUSH
35373: LD_INT 24
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: LIST
35380: IN
35381: IFFALSE 35402
// points := [ 25 , 5 , 3 ] ;
35383: LD_ADDR_VAR 0 9
35387: PUSH
35388: LD_INT 25
35390: PUSH
35391: LD_INT 5
35393: PUSH
35394: LD_INT 3
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35402: LD_VAR 0 6
35406: PPUSH
35407: CALL_OW 264
35411: PUSH
35412: LD_INT 4
35414: PUSH
35415: LD_INT 43
35417: PUSH
35418: LD_INT 25
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: LIST
35425: IN
35426: IFFALSE 35447
// points := [ 40 , 15 , 5 ] ;
35428: LD_ADDR_VAR 0 9
35432: PUSH
35433: LD_INT 40
35435: PUSH
35436: LD_INT 15
35438: PUSH
35439: LD_INT 5
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35447: LD_VAR 0 6
35451: PPUSH
35452: CALL_OW 264
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: LD_INT 23
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: IN
35467: IFFALSE 35488
// points := [ 7 , 25 , 8 ] ;
35469: LD_ADDR_VAR 0 9
35473: PUSH
35474: LD_INT 7
35476: PUSH
35477: LD_INT 25
35479: PUSH
35480: LD_INT 8
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35488: LD_VAR 0 6
35492: PPUSH
35493: CALL_OW 264
35497: PUSH
35498: LD_INT 5
35500: PUSH
35501: LD_INT 27
35503: PUSH
35504: LD_INT 44
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: IN
35512: IFFALSE 35533
// points := [ 14 , 50 , 16 ] ;
35514: LD_ADDR_VAR 0 9
35518: PUSH
35519: LD_INT 14
35521: PUSH
35522: LD_INT 50
35524: PUSH
35525: LD_INT 16
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35533: LD_VAR 0 6
35537: PPUSH
35538: CALL_OW 264
35542: PUSH
35543: LD_INT 6
35545: PUSH
35546: LD_INT 46
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: IN
35553: IFFALSE 35574
// points := [ 32 , 120 , 70 ] ;
35555: LD_ADDR_VAR 0 9
35559: PUSH
35560: LD_INT 32
35562: PUSH
35563: LD_INT 120
35565: PUSH
35566: LD_INT 70
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: LIST
35573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35574: LD_VAR 0 6
35578: PPUSH
35579: CALL_OW 264
35583: PUSH
35584: LD_INT 7
35586: PUSH
35587: LD_INT 28
35589: PUSH
35590: LD_INT 45
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: IN
35598: IFFALSE 35619
// points := [ 35 , 20 , 45 ] ;
35600: LD_ADDR_VAR 0 9
35604: PUSH
35605: LD_INT 35
35607: PUSH
35608: LD_INT 20
35610: PUSH
35611: LD_INT 45
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35619: LD_VAR 0 6
35623: PPUSH
35624: CALL_OW 264
35628: PUSH
35629: LD_INT 47
35631: PUSH
35632: EMPTY
35633: LIST
35634: IN
35635: IFFALSE 35656
// points := [ 67 , 45 , 75 ] ;
35637: LD_ADDR_VAR 0 9
35641: PUSH
35642: LD_INT 67
35644: PUSH
35645: LD_INT 45
35647: PUSH
35648: LD_INT 75
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35656: LD_VAR 0 6
35660: PPUSH
35661: CALL_OW 264
35665: PUSH
35666: LD_INT 26
35668: PUSH
35669: EMPTY
35670: LIST
35671: IN
35672: IFFALSE 35693
// points := [ 120 , 30 , 80 ] ;
35674: LD_ADDR_VAR 0 9
35678: PUSH
35679: LD_INT 120
35681: PUSH
35682: LD_INT 30
35684: PUSH
35685: LD_INT 80
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: LIST
35692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35693: LD_VAR 0 6
35697: PPUSH
35698: CALL_OW 264
35702: PUSH
35703: LD_INT 22
35705: PUSH
35706: EMPTY
35707: LIST
35708: IN
35709: IFFALSE 35730
// points := [ 40 , 1 , 1 ] ;
35711: LD_ADDR_VAR 0 9
35715: PUSH
35716: LD_INT 40
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35730: LD_VAR 0 6
35734: PPUSH
35735: CALL_OW 264
35739: PUSH
35740: LD_INT 29
35742: PUSH
35743: EMPTY
35744: LIST
35745: IN
35746: IFFALSE 35767
// points := [ 70 , 200 , 400 ] ;
35748: LD_ADDR_VAR 0 9
35752: PUSH
35753: LD_INT 70
35755: PUSH
35756: LD_INT 200
35758: PUSH
35759: LD_INT 400
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35767: LD_VAR 0 6
35771: PPUSH
35772: CALL_OW 264
35776: PUSH
35777: LD_INT 14
35779: PUSH
35780: LD_INT 53
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: IN
35787: IFFALSE 35808
// points := [ 40 , 10 , 20 ] ;
35789: LD_ADDR_VAR 0 9
35793: PUSH
35794: LD_INT 40
35796: PUSH
35797: LD_INT 10
35799: PUSH
35800: LD_INT 20
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35808: LD_VAR 0 6
35812: PPUSH
35813: CALL_OW 264
35817: PUSH
35818: LD_INT 9
35820: PUSH
35821: EMPTY
35822: LIST
35823: IN
35824: IFFALSE 35845
// points := [ 5 , 70 , 20 ] ;
35826: LD_ADDR_VAR 0 9
35830: PUSH
35831: LD_INT 5
35833: PUSH
35834: LD_INT 70
35836: PUSH
35837: LD_INT 20
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35845: LD_VAR 0 6
35849: PPUSH
35850: CALL_OW 264
35854: PUSH
35855: LD_INT 10
35857: PUSH
35858: EMPTY
35859: LIST
35860: IN
35861: IFFALSE 35882
// points := [ 35 , 110 , 70 ] ;
35863: LD_ADDR_VAR 0 9
35867: PUSH
35868: LD_INT 35
35870: PUSH
35871: LD_INT 110
35873: PUSH
35874: LD_INT 70
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35882: LD_VAR 0 6
35886: PPUSH
35887: CALL_OW 265
35891: PUSH
35892: LD_INT 25
35894: EQUAL
35895: IFFALSE 35916
// points := [ 80 , 65 , 100 ] ;
35897: LD_ADDR_VAR 0 9
35901: PUSH
35902: LD_INT 80
35904: PUSH
35905: LD_INT 65
35907: PUSH
35908: LD_INT 100
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35916: LD_VAR 0 6
35920: PPUSH
35921: CALL_OW 263
35925: PUSH
35926: LD_INT 1
35928: EQUAL
35929: IFFALSE 35964
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35931: LD_ADDR_VAR 0 10
35935: PUSH
35936: LD_VAR 0 10
35940: PUSH
35941: LD_VAR 0 6
35945: PPUSH
35946: CALL_OW 311
35950: PPUSH
35951: LD_INT 3
35953: PPUSH
35954: CALL_OW 259
35958: PUSH
35959: LD_INT 4
35961: MUL
35962: MUL
35963: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35964: LD_VAR 0 6
35968: PPUSH
35969: CALL_OW 263
35973: PUSH
35974: LD_INT 2
35976: EQUAL
35977: IFFALSE 36028
// begin j := IsControledBy ( i ) ;
35979: LD_ADDR_VAR 0 7
35983: PUSH
35984: LD_VAR 0 6
35988: PPUSH
35989: CALL_OW 312
35993: ST_TO_ADDR
// if j then
35994: LD_VAR 0 7
35998: IFFALSE 36028
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36000: LD_ADDR_VAR 0 10
36004: PUSH
36005: LD_VAR 0 10
36009: PUSH
36010: LD_VAR 0 7
36014: PPUSH
36015: LD_INT 3
36017: PPUSH
36018: CALL_OW 259
36022: PUSH
36023: LD_INT 3
36025: MUL
36026: MUL
36027: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36028: LD_VAR 0 6
36032: PPUSH
36033: CALL_OW 264
36037: PUSH
36038: LD_INT 5
36040: PUSH
36041: LD_INT 6
36043: PUSH
36044: LD_INT 46
36046: PUSH
36047: LD_INT 44
36049: PUSH
36050: LD_INT 47
36052: PUSH
36053: LD_INT 45
36055: PUSH
36056: LD_INT 28
36058: PUSH
36059: LD_INT 7
36061: PUSH
36062: LD_INT 27
36064: PUSH
36065: LD_INT 29
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: IN
36080: PUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: LD_INT 52
36088: PPUSH
36089: CALL_OW 321
36093: PUSH
36094: LD_INT 2
36096: EQUAL
36097: AND
36098: IFFALSE 36115
// bpoints := bpoints * 1.2 ;
36100: LD_ADDR_VAR 0 10
36104: PUSH
36105: LD_VAR 0 10
36109: PUSH
36110: LD_REAL  1.20000000000000E+0000
36113: MUL
36114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36115: LD_VAR 0 6
36119: PPUSH
36120: CALL_OW 264
36124: PUSH
36125: LD_INT 6
36127: PUSH
36128: LD_INT 46
36130: PUSH
36131: LD_INT 47
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: IN
36139: IFFALSE 36156
// bpoints := bpoints * 1.2 ;
36141: LD_ADDR_VAR 0 10
36145: PUSH
36146: LD_VAR 0 10
36150: PUSH
36151: LD_REAL  1.20000000000000E+0000
36154: MUL
36155: ST_TO_ADDR
// end ; unit_building :
36156: GO 36170
36158: LD_INT 3
36160: DOUBLE
36161: EQUAL
36162: IFTRUE 36166
36164: GO 36169
36166: POP
// ; end ;
36167: GO 36170
36169: POP
// for j = 1 to 3 do
36170: LD_ADDR_VAR 0 7
36174: PUSH
36175: DOUBLE
36176: LD_INT 1
36178: DEC
36179: ST_TO_ADDR
36180: LD_INT 3
36182: PUSH
36183: FOR_TO
36184: IFFALSE 36237
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36186: LD_ADDR_VAR 0 5
36190: PUSH
36191: LD_VAR 0 5
36195: PPUSH
36196: LD_VAR 0 7
36200: PPUSH
36201: LD_VAR 0 5
36205: PUSH
36206: LD_VAR 0 7
36210: ARRAY
36211: PUSH
36212: LD_VAR 0 9
36216: PUSH
36217: LD_VAR 0 7
36221: ARRAY
36222: PUSH
36223: LD_VAR 0 10
36227: MUL
36228: PLUS
36229: PPUSH
36230: CALL_OW 1
36234: ST_TO_ADDR
36235: GO 36183
36237: POP
36238: POP
// end ;
36239: GO 34722
36241: POP
36242: POP
// result := Replace ( result , 4 , tmp ) ;
36243: LD_ADDR_VAR 0 5
36247: PUSH
36248: LD_VAR 0 5
36252: PPUSH
36253: LD_INT 4
36255: PPUSH
36256: LD_VAR 0 8
36260: PPUSH
36261: CALL_OW 1
36265: ST_TO_ADDR
// end ;
36266: LD_VAR 0 5
36270: RET
// export function DangerAtRange ( unit , range ) ; begin
36271: LD_INT 0
36273: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36274: LD_ADDR_VAR 0 3
36278: PUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: CALL_OW 255
36288: PPUSH
36289: LD_VAR 0 1
36293: PPUSH
36294: CALL_OW 250
36298: PPUSH
36299: LD_VAR 0 1
36303: PPUSH
36304: CALL_OW 251
36308: PPUSH
36309: LD_VAR 0 2
36313: PPUSH
36314: CALL 34574 0 4
36318: ST_TO_ADDR
// end ;
36319: LD_VAR 0 3
36323: RET
// export function DangerInArea ( side , area ) ; begin
36324: LD_INT 0
36326: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36327: LD_ADDR_VAR 0 3
36331: PUSH
36332: LD_VAR 0 2
36336: PPUSH
36337: LD_INT 81
36339: PUSH
36340: LD_VAR 0 1
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PPUSH
36349: CALL_OW 70
36353: ST_TO_ADDR
// end ;
36354: LD_VAR 0 3
36358: RET
// export function IsExtension ( b ) ; begin
36359: LD_INT 0
36361: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36362: LD_ADDR_VAR 0 2
36366: PUSH
36367: LD_VAR 0 1
36371: PUSH
36372: LD_INT 23
36374: PUSH
36375: LD_INT 20
36377: PUSH
36378: LD_INT 22
36380: PUSH
36381: LD_INT 17
36383: PUSH
36384: LD_INT 24
36386: PUSH
36387: LD_INT 21
36389: PUSH
36390: LD_INT 19
36392: PUSH
36393: LD_INT 16
36395: PUSH
36396: LD_INT 25
36398: PUSH
36399: LD_INT 18
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: IN
36414: ST_TO_ADDR
// end ;
36415: LD_VAR 0 2
36419: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36420: LD_INT 0
36422: PPUSH
36423: PPUSH
36424: PPUSH
// result := [ ] ;
36425: LD_ADDR_VAR 0 4
36429: PUSH
36430: EMPTY
36431: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36432: LD_ADDR_VAR 0 5
36436: PUSH
36437: LD_VAR 0 2
36441: PPUSH
36442: LD_INT 21
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PPUSH
36452: CALL_OW 70
36456: ST_TO_ADDR
// if not tmp then
36457: LD_VAR 0 5
36461: NOT
36462: IFFALSE 36466
// exit ;
36464: GO 36530
// if checkLink then
36466: LD_VAR 0 3
36470: IFFALSE 36520
// begin for i in tmp do
36472: LD_ADDR_VAR 0 6
36476: PUSH
36477: LD_VAR 0 5
36481: PUSH
36482: FOR_IN
36483: IFFALSE 36518
// if GetBase ( i ) <> base then
36485: LD_VAR 0 6
36489: PPUSH
36490: CALL_OW 274
36494: PUSH
36495: LD_VAR 0 1
36499: NONEQUAL
36500: IFFALSE 36516
// ComLinkToBase ( base , i ) ;
36502: LD_VAR 0 1
36506: PPUSH
36507: LD_VAR 0 6
36511: PPUSH
36512: CALL_OW 169
36516: GO 36482
36518: POP
36519: POP
// end ; result := tmp ;
36520: LD_ADDR_VAR 0 4
36524: PUSH
36525: LD_VAR 0 5
36529: ST_TO_ADDR
// end ;
36530: LD_VAR 0 4
36534: RET
// export function ComComplete ( units , b ) ; var i ; begin
36535: LD_INT 0
36537: PPUSH
36538: PPUSH
// if not units then
36539: LD_VAR 0 1
36543: NOT
36544: IFFALSE 36548
// exit ;
36546: GO 36638
// for i in units do
36548: LD_ADDR_VAR 0 4
36552: PUSH
36553: LD_VAR 0 1
36557: PUSH
36558: FOR_IN
36559: IFFALSE 36636
// if BuildingStatus ( b ) = bs_build then
36561: LD_VAR 0 2
36565: PPUSH
36566: CALL_OW 461
36570: PUSH
36571: LD_INT 1
36573: EQUAL
36574: IFFALSE 36634
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36576: LD_VAR 0 4
36580: PPUSH
36581: LD_STRING h
36583: PUSH
36584: LD_VAR 0 2
36588: PPUSH
36589: CALL_OW 250
36593: PUSH
36594: LD_VAR 0 2
36598: PPUSH
36599: CALL_OW 251
36603: PUSH
36604: LD_VAR 0 2
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: PUSH
36627: EMPTY
36628: LIST
36629: PPUSH
36630: CALL_OW 446
36634: GO 36558
36636: POP
36637: POP
// end ;
36638: LD_VAR 0 3
36642: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36643: LD_INT 0
36645: PPUSH
36646: PPUSH
36647: PPUSH
36648: PPUSH
36649: PPUSH
36650: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36651: LD_VAR 0 1
36655: NOT
36656: PUSH
36657: LD_VAR 0 1
36661: PPUSH
36662: CALL_OW 263
36666: PUSH
36667: LD_INT 2
36669: EQUAL
36670: NOT
36671: OR
36672: IFFALSE 36676
// exit ;
36674: GO 36992
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36676: LD_ADDR_VAR 0 6
36680: PUSH
36681: LD_INT 22
36683: PUSH
36684: LD_VAR 0 1
36688: PPUSH
36689: CALL_OW 255
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: LD_INT 30
36703: PUSH
36704: LD_INT 36
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 34
36713: PUSH
36714: LD_INT 31
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PPUSH
36730: CALL_OW 69
36734: ST_TO_ADDR
// if not tmp then
36735: LD_VAR 0 6
36739: NOT
36740: IFFALSE 36744
// exit ;
36742: GO 36992
// result := [ ] ;
36744: LD_ADDR_VAR 0 2
36748: PUSH
36749: EMPTY
36750: ST_TO_ADDR
// for i in tmp do
36751: LD_ADDR_VAR 0 3
36755: PUSH
36756: LD_VAR 0 6
36760: PUSH
36761: FOR_IN
36762: IFFALSE 36833
// begin t := UnitsInside ( i ) ;
36764: LD_ADDR_VAR 0 4
36768: PUSH
36769: LD_VAR 0 3
36773: PPUSH
36774: CALL_OW 313
36778: ST_TO_ADDR
// if t then
36779: LD_VAR 0 4
36783: IFFALSE 36831
// for j in t do
36785: LD_ADDR_VAR 0 7
36789: PUSH
36790: LD_VAR 0 4
36794: PUSH
36795: FOR_IN
36796: IFFALSE 36829
// result := Insert ( result , result + 1 , j ) ;
36798: LD_ADDR_VAR 0 2
36802: PUSH
36803: LD_VAR 0 2
36807: PPUSH
36808: LD_VAR 0 2
36812: PUSH
36813: LD_INT 1
36815: PLUS
36816: PPUSH
36817: LD_VAR 0 7
36821: PPUSH
36822: CALL_OW 2
36826: ST_TO_ADDR
36827: GO 36795
36829: POP
36830: POP
// end ;
36831: GO 36761
36833: POP
36834: POP
// if not result then
36835: LD_VAR 0 2
36839: NOT
36840: IFFALSE 36844
// exit ;
36842: GO 36992
// mech := result [ 1 ] ;
36844: LD_ADDR_VAR 0 5
36848: PUSH
36849: LD_VAR 0 2
36853: PUSH
36854: LD_INT 1
36856: ARRAY
36857: ST_TO_ADDR
// if result > 1 then
36858: LD_VAR 0 2
36862: PUSH
36863: LD_INT 1
36865: GREATER
36866: IFFALSE 36978
// for i = 2 to result do
36868: LD_ADDR_VAR 0 3
36872: PUSH
36873: DOUBLE
36874: LD_INT 2
36876: DEC
36877: ST_TO_ADDR
36878: LD_VAR 0 2
36882: PUSH
36883: FOR_TO
36884: IFFALSE 36976
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36886: LD_ADDR_VAR 0 4
36890: PUSH
36891: LD_VAR 0 2
36895: PUSH
36896: LD_VAR 0 3
36900: ARRAY
36901: PPUSH
36902: LD_INT 3
36904: PPUSH
36905: CALL_OW 259
36909: PUSH
36910: LD_VAR 0 2
36914: PUSH
36915: LD_VAR 0 3
36919: ARRAY
36920: PPUSH
36921: CALL_OW 432
36925: MINUS
36926: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36927: LD_VAR 0 4
36931: PUSH
36932: LD_VAR 0 5
36936: PPUSH
36937: LD_INT 3
36939: PPUSH
36940: CALL_OW 259
36944: PUSH
36945: LD_VAR 0 5
36949: PPUSH
36950: CALL_OW 432
36954: MINUS
36955: GREATEREQUAL
36956: IFFALSE 36974
// mech := result [ i ] ;
36958: LD_ADDR_VAR 0 5
36962: PUSH
36963: LD_VAR 0 2
36967: PUSH
36968: LD_VAR 0 3
36972: ARRAY
36973: ST_TO_ADDR
// end ;
36974: GO 36883
36976: POP
36977: POP
// ComLinkTo ( vehicle , mech ) ;
36978: LD_VAR 0 1
36982: PPUSH
36983: LD_VAR 0 5
36987: PPUSH
36988: CALL_OW 135
// end ;
36992: LD_VAR 0 2
36996: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36997: LD_INT 0
36999: PPUSH
37000: PPUSH
37001: PPUSH
37002: PPUSH
37003: PPUSH
37004: PPUSH
37005: PPUSH
37006: PPUSH
37007: PPUSH
37008: PPUSH
37009: PPUSH
37010: PPUSH
37011: PPUSH
// result := [ ] ;
37012: LD_ADDR_VAR 0 7
37016: PUSH
37017: EMPTY
37018: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37019: LD_VAR 0 1
37023: PPUSH
37024: CALL_OW 266
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: IN
37039: NOT
37040: IFFALSE 37044
// exit ;
37042: GO 38678
// if name then
37044: LD_VAR 0 3
37048: IFFALSE 37064
// SetBName ( base_dep , name ) ;
37050: LD_VAR 0 1
37054: PPUSH
37055: LD_VAR 0 3
37059: PPUSH
37060: CALL_OW 500
// base := GetBase ( base_dep ) ;
37064: LD_ADDR_VAR 0 15
37068: PUSH
37069: LD_VAR 0 1
37073: PPUSH
37074: CALL_OW 274
37078: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37079: LD_ADDR_VAR 0 16
37083: PUSH
37084: LD_VAR 0 1
37088: PPUSH
37089: CALL_OW 255
37093: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37094: LD_ADDR_VAR 0 17
37098: PUSH
37099: LD_VAR 0 1
37103: PPUSH
37104: CALL_OW 248
37108: ST_TO_ADDR
// if sources then
37109: LD_VAR 0 5
37113: IFFALSE 37160
// for i = 1 to 3 do
37115: LD_ADDR_VAR 0 8
37119: PUSH
37120: DOUBLE
37121: LD_INT 1
37123: DEC
37124: ST_TO_ADDR
37125: LD_INT 3
37127: PUSH
37128: FOR_TO
37129: IFFALSE 37158
// AddResourceType ( base , i , sources [ i ] ) ;
37131: LD_VAR 0 15
37135: PPUSH
37136: LD_VAR 0 8
37140: PPUSH
37141: LD_VAR 0 5
37145: PUSH
37146: LD_VAR 0 8
37150: ARRAY
37151: PPUSH
37152: CALL_OW 276
37156: GO 37128
37158: POP
37159: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37160: LD_ADDR_VAR 0 18
37164: PUSH
37165: LD_VAR 0 15
37169: PPUSH
37170: LD_VAR 0 2
37174: PPUSH
37175: LD_INT 1
37177: PPUSH
37178: CALL 36420 0 3
37182: ST_TO_ADDR
// InitHc ;
37183: CALL_OW 19
// InitUc ;
37187: CALL_OW 18
// uc_side := side ;
37191: LD_ADDR_OWVAR 20
37195: PUSH
37196: LD_VAR 0 16
37200: ST_TO_ADDR
// uc_nation := nation ;
37201: LD_ADDR_OWVAR 21
37205: PUSH
37206: LD_VAR 0 17
37210: ST_TO_ADDR
// if buildings then
37211: LD_VAR 0 18
37215: IFFALSE 38537
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37217: LD_ADDR_VAR 0 19
37221: PUSH
37222: LD_VAR 0 18
37226: PPUSH
37227: LD_INT 2
37229: PUSH
37230: LD_INT 30
37232: PUSH
37233: LD_INT 29
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 30
37242: PUSH
37243: LD_INT 30
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: PPUSH
37255: CALL_OW 72
37259: ST_TO_ADDR
// if tmp then
37260: LD_VAR 0 19
37264: IFFALSE 37312
// for i in tmp do
37266: LD_ADDR_VAR 0 8
37270: PUSH
37271: LD_VAR 0 19
37275: PUSH
37276: FOR_IN
37277: IFFALSE 37310
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37279: LD_VAR 0 8
37283: PPUSH
37284: CALL_OW 250
37288: PPUSH
37289: LD_VAR 0 8
37293: PPUSH
37294: CALL_OW 251
37298: PPUSH
37299: LD_VAR 0 16
37303: PPUSH
37304: CALL_OW 441
37308: GO 37276
37310: POP
37311: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37312: LD_VAR 0 18
37316: PPUSH
37317: LD_INT 2
37319: PUSH
37320: LD_INT 30
37322: PUSH
37323: LD_INT 32
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 30
37332: PUSH
37333: LD_INT 33
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: PPUSH
37345: CALL_OW 72
37349: IFFALSE 37437
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37351: LD_ADDR_VAR 0 8
37355: PUSH
37356: LD_VAR 0 18
37360: PPUSH
37361: LD_INT 2
37363: PUSH
37364: LD_INT 30
37366: PUSH
37367: LD_INT 32
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 30
37376: PUSH
37377: LD_INT 33
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: LIST
37388: PPUSH
37389: CALL_OW 72
37393: PUSH
37394: FOR_IN
37395: IFFALSE 37435
// begin if not GetBWeapon ( i ) then
37397: LD_VAR 0 8
37401: PPUSH
37402: CALL_OW 269
37406: NOT
37407: IFFALSE 37433
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37409: LD_VAR 0 8
37413: PPUSH
37414: LD_VAR 0 8
37418: PPUSH
37419: LD_VAR 0 2
37423: PPUSH
37424: CALL 38683 0 2
37428: PPUSH
37429: CALL_OW 431
// end ;
37433: GO 37394
37435: POP
37436: POP
// end ; for i = 1 to personel do
37437: LD_ADDR_VAR 0 8
37441: PUSH
37442: DOUBLE
37443: LD_INT 1
37445: DEC
37446: ST_TO_ADDR
37447: LD_VAR 0 6
37451: PUSH
37452: FOR_TO
37453: IFFALSE 38517
// begin if i > 4 then
37455: LD_VAR 0 8
37459: PUSH
37460: LD_INT 4
37462: GREATER
37463: IFFALSE 37467
// break ;
37465: GO 38517
// case i of 1 :
37467: LD_VAR 0 8
37471: PUSH
37472: LD_INT 1
37474: DOUBLE
37475: EQUAL
37476: IFTRUE 37480
37478: GO 37560
37480: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37481: LD_ADDR_VAR 0 12
37485: PUSH
37486: LD_VAR 0 18
37490: PPUSH
37491: LD_INT 22
37493: PUSH
37494: LD_VAR 0 16
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 58
37505: PUSH
37506: EMPTY
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 30
37514: PUSH
37515: LD_INT 32
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 30
37524: PUSH
37525: LD_INT 4
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 30
37534: PUSH
37535: LD_INT 5
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: PPUSH
37553: CALL_OW 72
37557: ST_TO_ADDR
37558: GO 37782
37560: LD_INT 2
37562: DOUBLE
37563: EQUAL
37564: IFTRUE 37568
37566: GO 37630
37568: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37569: LD_ADDR_VAR 0 12
37573: PUSH
37574: LD_VAR 0 18
37578: PPUSH
37579: LD_INT 22
37581: PUSH
37582: LD_VAR 0 16
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 30
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 30
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PPUSH
37623: CALL_OW 72
37627: ST_TO_ADDR
37628: GO 37782
37630: LD_INT 3
37632: DOUBLE
37633: EQUAL
37634: IFTRUE 37638
37636: GO 37700
37638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37639: LD_ADDR_VAR 0 12
37643: PUSH
37644: LD_VAR 0 18
37648: PPUSH
37649: LD_INT 22
37651: PUSH
37652: LD_VAR 0 16
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 2
37663: PUSH
37664: LD_INT 30
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 30
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PPUSH
37693: CALL_OW 72
37697: ST_TO_ADDR
37698: GO 37782
37700: LD_INT 4
37702: DOUBLE
37703: EQUAL
37704: IFTRUE 37708
37706: GO 37781
37708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37709: LD_ADDR_VAR 0 12
37713: PUSH
37714: LD_VAR 0 18
37718: PPUSH
37719: LD_INT 22
37721: PUSH
37722: LD_VAR 0 16
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: LD_INT 30
37736: PUSH
37737: LD_INT 6
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 30
37746: PUSH
37747: LD_INT 7
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 30
37756: PUSH
37757: LD_INT 8
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PPUSH
37774: CALL_OW 72
37778: ST_TO_ADDR
37779: GO 37782
37781: POP
// if i = 1 then
37782: LD_VAR 0 8
37786: PUSH
37787: LD_INT 1
37789: EQUAL
37790: IFFALSE 37901
// begin tmp := [ ] ;
37792: LD_ADDR_VAR 0 19
37796: PUSH
37797: EMPTY
37798: ST_TO_ADDR
// for j in f do
37799: LD_ADDR_VAR 0 9
37803: PUSH
37804: LD_VAR 0 12
37808: PUSH
37809: FOR_IN
37810: IFFALSE 37883
// if GetBType ( j ) = b_bunker then
37812: LD_VAR 0 9
37816: PPUSH
37817: CALL_OW 266
37821: PUSH
37822: LD_INT 32
37824: EQUAL
37825: IFFALSE 37852
// tmp := Insert ( tmp , 1 , j ) else
37827: LD_ADDR_VAR 0 19
37831: PUSH
37832: LD_VAR 0 19
37836: PPUSH
37837: LD_INT 1
37839: PPUSH
37840: LD_VAR 0 9
37844: PPUSH
37845: CALL_OW 2
37849: ST_TO_ADDR
37850: GO 37881
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37852: LD_ADDR_VAR 0 19
37856: PUSH
37857: LD_VAR 0 19
37861: PPUSH
37862: LD_VAR 0 19
37866: PUSH
37867: LD_INT 1
37869: PLUS
37870: PPUSH
37871: LD_VAR 0 9
37875: PPUSH
37876: CALL_OW 2
37880: ST_TO_ADDR
37881: GO 37809
37883: POP
37884: POP
// if tmp then
37885: LD_VAR 0 19
37889: IFFALSE 37901
// f := tmp ;
37891: LD_ADDR_VAR 0 12
37895: PUSH
37896: LD_VAR 0 19
37900: ST_TO_ADDR
// end ; x := personel [ i ] ;
37901: LD_ADDR_VAR 0 13
37905: PUSH
37906: LD_VAR 0 6
37910: PUSH
37911: LD_VAR 0 8
37915: ARRAY
37916: ST_TO_ADDR
// if x = - 1 then
37917: LD_VAR 0 13
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: EQUAL
37926: IFFALSE 38135
// begin for j in f do
37928: LD_ADDR_VAR 0 9
37932: PUSH
37933: LD_VAR 0 12
37937: PUSH
37938: FOR_IN
37939: IFFALSE 38131
// repeat InitHc ;
37941: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37945: LD_VAR 0 9
37949: PPUSH
37950: CALL_OW 266
37954: PUSH
37955: LD_INT 5
37957: EQUAL
37958: IFFALSE 38028
// begin if UnitsInside ( j ) < 3 then
37960: LD_VAR 0 9
37964: PPUSH
37965: CALL_OW 313
37969: PUSH
37970: LD_INT 3
37972: LESS
37973: IFFALSE 38009
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37975: LD_INT 0
37977: PPUSH
37978: LD_INT 5
37980: PUSH
37981: LD_INT 8
37983: PUSH
37984: LD_INT 9
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: PUSH
37992: LD_VAR 0 17
37996: ARRAY
37997: PPUSH
37998: LD_VAR 0 4
38002: PPUSH
38003: CALL_OW 380
38007: GO 38026
// PrepareHuman ( false , i , skill ) ;
38009: LD_INT 0
38011: PPUSH
38012: LD_VAR 0 8
38016: PPUSH
38017: LD_VAR 0 4
38021: PPUSH
38022: CALL_OW 380
// end else
38026: GO 38045
// PrepareHuman ( false , i , skill ) ;
38028: LD_INT 0
38030: PPUSH
38031: LD_VAR 0 8
38035: PPUSH
38036: LD_VAR 0 4
38040: PPUSH
38041: CALL_OW 380
// un := CreateHuman ;
38045: LD_ADDR_VAR 0 14
38049: PUSH
38050: CALL_OW 44
38054: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38055: LD_ADDR_VAR 0 7
38059: PUSH
38060: LD_VAR 0 7
38064: PPUSH
38065: LD_INT 1
38067: PPUSH
38068: LD_VAR 0 14
38072: PPUSH
38073: CALL_OW 2
38077: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38078: LD_VAR 0 14
38082: PPUSH
38083: LD_VAR 0 9
38087: PPUSH
38088: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38092: LD_VAR 0 9
38096: PPUSH
38097: CALL_OW 313
38101: PUSH
38102: LD_INT 6
38104: EQUAL
38105: PUSH
38106: LD_VAR 0 9
38110: PPUSH
38111: CALL_OW 266
38115: PUSH
38116: LD_INT 32
38118: PUSH
38119: LD_INT 31
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: IN
38126: OR
38127: IFFALSE 37941
38129: GO 37938
38131: POP
38132: POP
// end else
38133: GO 38515
// for j = 1 to x do
38135: LD_ADDR_VAR 0 9
38139: PUSH
38140: DOUBLE
38141: LD_INT 1
38143: DEC
38144: ST_TO_ADDR
38145: LD_VAR 0 13
38149: PUSH
38150: FOR_TO
38151: IFFALSE 38513
// begin InitHc ;
38153: CALL_OW 19
// if not f then
38157: LD_VAR 0 12
38161: NOT
38162: IFFALSE 38251
// begin PrepareHuman ( false , i , skill ) ;
38164: LD_INT 0
38166: PPUSH
38167: LD_VAR 0 8
38171: PPUSH
38172: LD_VAR 0 4
38176: PPUSH
38177: CALL_OW 380
// un := CreateHuman ;
38181: LD_ADDR_VAR 0 14
38185: PUSH
38186: CALL_OW 44
38190: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38191: LD_ADDR_VAR 0 7
38195: PUSH
38196: LD_VAR 0 7
38200: PPUSH
38201: LD_INT 1
38203: PPUSH
38204: LD_VAR 0 14
38208: PPUSH
38209: CALL_OW 2
38213: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38214: LD_VAR 0 14
38218: PPUSH
38219: LD_VAR 0 1
38223: PPUSH
38224: CALL_OW 250
38228: PPUSH
38229: LD_VAR 0 1
38233: PPUSH
38234: CALL_OW 251
38238: PPUSH
38239: LD_INT 10
38241: PPUSH
38242: LD_INT 0
38244: PPUSH
38245: CALL_OW 50
// continue ;
38249: GO 38150
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38251: LD_VAR 0 12
38255: PUSH
38256: LD_INT 1
38258: ARRAY
38259: PPUSH
38260: CALL_OW 313
38264: PUSH
38265: LD_VAR 0 12
38269: PUSH
38270: LD_INT 1
38272: ARRAY
38273: PPUSH
38274: CALL_OW 266
38278: PUSH
38279: LD_INT 32
38281: PUSH
38282: LD_INT 31
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: IN
38289: AND
38290: PUSH
38291: LD_VAR 0 12
38295: PUSH
38296: LD_INT 1
38298: ARRAY
38299: PPUSH
38300: CALL_OW 313
38304: PUSH
38305: LD_INT 6
38307: EQUAL
38308: OR
38309: IFFALSE 38329
// f := Delete ( f , 1 ) ;
38311: LD_ADDR_VAR 0 12
38315: PUSH
38316: LD_VAR 0 12
38320: PPUSH
38321: LD_INT 1
38323: PPUSH
38324: CALL_OW 3
38328: ST_TO_ADDR
// if not f then
38329: LD_VAR 0 12
38333: NOT
38334: IFFALSE 38352
// begin x := x + 2 ;
38336: LD_ADDR_VAR 0 13
38340: PUSH
38341: LD_VAR 0 13
38345: PUSH
38346: LD_INT 2
38348: PLUS
38349: ST_TO_ADDR
// continue ;
38350: GO 38150
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38352: LD_VAR 0 12
38356: PUSH
38357: LD_INT 1
38359: ARRAY
38360: PPUSH
38361: CALL_OW 266
38365: PUSH
38366: LD_INT 5
38368: EQUAL
38369: IFFALSE 38443
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38371: LD_VAR 0 12
38375: PUSH
38376: LD_INT 1
38378: ARRAY
38379: PPUSH
38380: CALL_OW 313
38384: PUSH
38385: LD_INT 3
38387: LESS
38388: IFFALSE 38424
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38390: LD_INT 0
38392: PPUSH
38393: LD_INT 5
38395: PUSH
38396: LD_INT 8
38398: PUSH
38399: LD_INT 9
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: PUSH
38407: LD_VAR 0 17
38411: ARRAY
38412: PPUSH
38413: LD_VAR 0 4
38417: PPUSH
38418: CALL_OW 380
38422: GO 38441
// PrepareHuman ( false , i , skill ) ;
38424: LD_INT 0
38426: PPUSH
38427: LD_VAR 0 8
38431: PPUSH
38432: LD_VAR 0 4
38436: PPUSH
38437: CALL_OW 380
// end else
38441: GO 38460
// PrepareHuman ( false , i , skill ) ;
38443: LD_INT 0
38445: PPUSH
38446: LD_VAR 0 8
38450: PPUSH
38451: LD_VAR 0 4
38455: PPUSH
38456: CALL_OW 380
// un := CreateHuman ;
38460: LD_ADDR_VAR 0 14
38464: PUSH
38465: CALL_OW 44
38469: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38470: LD_ADDR_VAR 0 7
38474: PUSH
38475: LD_VAR 0 7
38479: PPUSH
38480: LD_INT 1
38482: PPUSH
38483: LD_VAR 0 14
38487: PPUSH
38488: CALL_OW 2
38492: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38493: LD_VAR 0 14
38497: PPUSH
38498: LD_VAR 0 12
38502: PUSH
38503: LD_INT 1
38505: ARRAY
38506: PPUSH
38507: CALL_OW 52
// end ;
38511: GO 38150
38513: POP
38514: POP
// end ;
38515: GO 37452
38517: POP
38518: POP
// result := result ^ buildings ;
38519: LD_ADDR_VAR 0 7
38523: PUSH
38524: LD_VAR 0 7
38528: PUSH
38529: LD_VAR 0 18
38533: ADD
38534: ST_TO_ADDR
// end else
38535: GO 38678
// begin for i = 1 to personel do
38537: LD_ADDR_VAR 0 8
38541: PUSH
38542: DOUBLE
38543: LD_INT 1
38545: DEC
38546: ST_TO_ADDR
38547: LD_VAR 0 6
38551: PUSH
38552: FOR_TO
38553: IFFALSE 38676
// begin if i > 4 then
38555: LD_VAR 0 8
38559: PUSH
38560: LD_INT 4
38562: GREATER
38563: IFFALSE 38567
// break ;
38565: GO 38676
// x := personel [ i ] ;
38567: LD_ADDR_VAR 0 13
38571: PUSH
38572: LD_VAR 0 6
38576: PUSH
38577: LD_VAR 0 8
38581: ARRAY
38582: ST_TO_ADDR
// if x = - 1 then
38583: LD_VAR 0 13
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: EQUAL
38592: IFFALSE 38596
// continue ;
38594: GO 38552
// PrepareHuman ( false , i , skill ) ;
38596: LD_INT 0
38598: PPUSH
38599: LD_VAR 0 8
38603: PPUSH
38604: LD_VAR 0 4
38608: PPUSH
38609: CALL_OW 380
// un := CreateHuman ;
38613: LD_ADDR_VAR 0 14
38617: PUSH
38618: CALL_OW 44
38622: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38623: LD_VAR 0 14
38627: PPUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 250
38637: PPUSH
38638: LD_VAR 0 1
38642: PPUSH
38643: CALL_OW 251
38647: PPUSH
38648: LD_INT 10
38650: PPUSH
38651: LD_INT 0
38653: PPUSH
38654: CALL_OW 50
// result := result ^ un ;
38658: LD_ADDR_VAR 0 7
38662: PUSH
38663: LD_VAR 0 7
38667: PUSH
38668: LD_VAR 0 14
38672: ADD
38673: ST_TO_ADDR
// end ;
38674: GO 38552
38676: POP
38677: POP
// end ; end ;
38678: LD_VAR 0 7
38682: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38683: LD_INT 0
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
// result := false ;
38701: LD_ADDR_VAR 0 3
38705: PUSH
38706: LD_INT 0
38708: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38709: LD_VAR 0 1
38713: NOT
38714: PUSH
38715: LD_VAR 0 1
38719: PPUSH
38720: CALL_OW 266
38724: PUSH
38725: LD_INT 32
38727: PUSH
38728: LD_INT 33
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: IN
38735: NOT
38736: OR
38737: IFFALSE 38741
// exit ;
38739: GO 39880
// nat := GetNation ( tower ) ;
38741: LD_ADDR_VAR 0 12
38745: PUSH
38746: LD_VAR 0 1
38750: PPUSH
38751: CALL_OW 248
38755: ST_TO_ADDR
// side := GetSide ( tower ) ;
38756: LD_ADDR_VAR 0 16
38760: PUSH
38761: LD_VAR 0 1
38765: PPUSH
38766: CALL_OW 255
38770: ST_TO_ADDR
// x := GetX ( tower ) ;
38771: LD_ADDR_VAR 0 10
38775: PUSH
38776: LD_VAR 0 1
38780: PPUSH
38781: CALL_OW 250
38785: ST_TO_ADDR
// y := GetY ( tower ) ;
38786: LD_ADDR_VAR 0 11
38790: PUSH
38791: LD_VAR 0 1
38795: PPUSH
38796: CALL_OW 251
38800: ST_TO_ADDR
// if not x or not y then
38801: LD_VAR 0 10
38805: NOT
38806: PUSH
38807: LD_VAR 0 11
38811: NOT
38812: OR
38813: IFFALSE 38817
// exit ;
38815: GO 39880
// weapon := 0 ;
38817: LD_ADDR_VAR 0 18
38821: PUSH
38822: LD_INT 0
38824: ST_TO_ADDR
// fac_list := [ ] ;
38825: LD_ADDR_VAR 0 17
38829: PUSH
38830: EMPTY
38831: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38832: LD_ADDR_VAR 0 6
38836: PUSH
38837: LD_VAR 0 1
38841: PPUSH
38842: CALL_OW 274
38846: PPUSH
38847: LD_VAR 0 2
38851: PPUSH
38852: LD_INT 0
38854: PPUSH
38855: CALL 36420 0 3
38859: PPUSH
38860: LD_INT 30
38862: PUSH
38863: LD_INT 3
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PPUSH
38870: CALL_OW 72
38874: ST_TO_ADDR
// if not factories then
38875: LD_VAR 0 6
38879: NOT
38880: IFFALSE 38884
// exit ;
38882: GO 39880
// for i in factories do
38884: LD_ADDR_VAR 0 8
38888: PUSH
38889: LD_VAR 0 6
38893: PUSH
38894: FOR_IN
38895: IFFALSE 38920
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38897: LD_ADDR_VAR 0 17
38901: PUSH
38902: LD_VAR 0 17
38906: PUSH
38907: LD_VAR 0 8
38911: PPUSH
38912: CALL_OW 478
38916: UNION
38917: ST_TO_ADDR
38918: GO 38894
38920: POP
38921: POP
// if not fac_list then
38922: LD_VAR 0 17
38926: NOT
38927: IFFALSE 38931
// exit ;
38929: GO 39880
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38931: LD_ADDR_VAR 0 5
38935: PUSH
38936: LD_INT 4
38938: PUSH
38939: LD_INT 5
38941: PUSH
38942: LD_INT 9
38944: PUSH
38945: LD_INT 10
38947: PUSH
38948: LD_INT 6
38950: PUSH
38951: LD_INT 7
38953: PUSH
38954: LD_INT 11
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 27
38968: PUSH
38969: LD_INT 28
38971: PUSH
38972: LD_INT 26
38974: PUSH
38975: LD_INT 30
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 43
38986: PUSH
38987: LD_INT 44
38989: PUSH
38990: LD_INT 46
38992: PUSH
38993: LD_INT 45
38995: PUSH
38996: LD_INT 47
38998: PUSH
38999: LD_INT 49
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: PUSH
39015: LD_VAR 0 12
39019: ARRAY
39020: ST_TO_ADDR
// for i in list do
39021: LD_ADDR_VAR 0 8
39025: PUSH
39026: LD_VAR 0 5
39030: PUSH
39031: FOR_IN
39032: IFFALSE 39065
// if not i in fac_list then
39034: LD_VAR 0 8
39038: PUSH
39039: LD_VAR 0 17
39043: IN
39044: NOT
39045: IFFALSE 39063
// list := list diff i ;
39047: LD_ADDR_VAR 0 5
39051: PUSH
39052: LD_VAR 0 5
39056: PUSH
39057: LD_VAR 0 8
39061: DIFF
39062: ST_TO_ADDR
39063: GO 39031
39065: POP
39066: POP
// if not list then
39067: LD_VAR 0 5
39071: NOT
39072: IFFALSE 39076
// exit ;
39074: GO 39880
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39076: LD_VAR 0 12
39080: PUSH
39081: LD_INT 3
39083: EQUAL
39084: PUSH
39085: LD_INT 49
39087: PUSH
39088: LD_VAR 0 5
39092: IN
39093: AND
39094: PUSH
39095: LD_INT 31
39097: PPUSH
39098: LD_VAR 0 16
39102: PPUSH
39103: CALL_OW 321
39107: PUSH
39108: LD_INT 2
39110: EQUAL
39111: AND
39112: IFFALSE 39172
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39114: LD_INT 22
39116: PUSH
39117: LD_VAR 0 16
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 35
39128: PUSH
39129: LD_INT 49
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 91
39138: PUSH
39139: LD_VAR 0 1
39143: PUSH
39144: LD_INT 10
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: PPUSH
39157: CALL_OW 69
39161: NOT
39162: IFFALSE 39172
// weapon := ru_time_lapser ;
39164: LD_ADDR_VAR 0 18
39168: PUSH
39169: LD_INT 49
39171: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39172: LD_VAR 0 12
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: IN
39187: PUSH
39188: LD_INT 11
39190: PUSH
39191: LD_VAR 0 5
39195: IN
39196: PUSH
39197: LD_INT 30
39199: PUSH
39200: LD_VAR 0 5
39204: IN
39205: OR
39206: AND
39207: PUSH
39208: LD_INT 6
39210: PPUSH
39211: LD_VAR 0 16
39215: PPUSH
39216: CALL_OW 321
39220: PUSH
39221: LD_INT 2
39223: EQUAL
39224: AND
39225: IFFALSE 39390
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39227: LD_INT 22
39229: PUSH
39230: LD_VAR 0 16
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: LD_INT 35
39244: PUSH
39245: LD_INT 11
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 35
39254: PUSH
39255: LD_INT 30
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 91
39269: PUSH
39270: LD_VAR 0 1
39274: PUSH
39275: LD_INT 18
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: PPUSH
39288: CALL_OW 69
39292: NOT
39293: PUSH
39294: LD_INT 22
39296: PUSH
39297: LD_VAR 0 16
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 30
39311: PUSH
39312: LD_INT 32
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 30
39321: PUSH
39322: LD_INT 33
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 91
39336: PUSH
39337: LD_VAR 0 1
39341: PUSH
39342: LD_INT 12
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: PUSH
39355: EMPTY
39356: LIST
39357: PPUSH
39358: CALL_OW 69
39362: PUSH
39363: LD_INT 2
39365: GREATER
39366: AND
39367: IFFALSE 39390
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39369: LD_ADDR_VAR 0 18
39373: PUSH
39374: LD_INT 11
39376: PUSH
39377: LD_INT 30
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_VAR 0 12
39388: ARRAY
39389: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39390: LD_VAR 0 18
39394: NOT
39395: PUSH
39396: LD_INT 40
39398: PPUSH
39399: LD_VAR 0 16
39403: PPUSH
39404: CALL_OW 321
39408: PUSH
39409: LD_INT 2
39411: EQUAL
39412: AND
39413: PUSH
39414: LD_INT 7
39416: PUSH
39417: LD_VAR 0 5
39421: IN
39422: PUSH
39423: LD_INT 28
39425: PUSH
39426: LD_VAR 0 5
39430: IN
39431: OR
39432: PUSH
39433: LD_INT 45
39435: PUSH
39436: LD_VAR 0 5
39440: IN
39441: OR
39442: AND
39443: IFFALSE 39697
// begin hex := GetHexInfo ( x , y ) ;
39445: LD_ADDR_VAR 0 4
39449: PUSH
39450: LD_VAR 0 10
39454: PPUSH
39455: LD_VAR 0 11
39459: PPUSH
39460: CALL_OW 546
39464: ST_TO_ADDR
// if hex [ 1 ] then
39465: LD_VAR 0 4
39469: PUSH
39470: LD_INT 1
39472: ARRAY
39473: IFFALSE 39477
// exit ;
39475: GO 39880
// height := hex [ 2 ] ;
39477: LD_ADDR_VAR 0 15
39481: PUSH
39482: LD_VAR 0 4
39486: PUSH
39487: LD_INT 2
39489: ARRAY
39490: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39491: LD_ADDR_VAR 0 14
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: LD_INT 3
39504: PUSH
39505: LD_INT 5
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: ST_TO_ADDR
// for i in tmp do
39514: LD_ADDR_VAR 0 8
39518: PUSH
39519: LD_VAR 0 14
39523: PUSH
39524: FOR_IN
39525: IFFALSE 39695
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39527: LD_ADDR_VAR 0 9
39531: PUSH
39532: LD_VAR 0 10
39536: PPUSH
39537: LD_VAR 0 8
39541: PPUSH
39542: LD_INT 5
39544: PPUSH
39545: CALL_OW 272
39549: PUSH
39550: LD_VAR 0 11
39554: PPUSH
39555: LD_VAR 0 8
39559: PPUSH
39560: LD_INT 5
39562: PPUSH
39563: CALL_OW 273
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39572: LD_VAR 0 9
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: PPUSH
39581: LD_VAR 0 9
39585: PUSH
39586: LD_INT 2
39588: ARRAY
39589: PPUSH
39590: CALL_OW 488
39594: IFFALSE 39693
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39596: LD_ADDR_VAR 0 4
39600: PUSH
39601: LD_VAR 0 9
39605: PUSH
39606: LD_INT 1
39608: ARRAY
39609: PPUSH
39610: LD_VAR 0 9
39614: PUSH
39615: LD_INT 2
39617: ARRAY
39618: PPUSH
39619: CALL_OW 546
39623: ST_TO_ADDR
// if hex [ 1 ] then
39624: LD_VAR 0 4
39628: PUSH
39629: LD_INT 1
39631: ARRAY
39632: IFFALSE 39636
// continue ;
39634: GO 39524
// h := hex [ 2 ] ;
39636: LD_ADDR_VAR 0 13
39640: PUSH
39641: LD_VAR 0 4
39645: PUSH
39646: LD_INT 2
39648: ARRAY
39649: ST_TO_ADDR
// if h + 7 < height then
39650: LD_VAR 0 13
39654: PUSH
39655: LD_INT 7
39657: PLUS
39658: PUSH
39659: LD_VAR 0 15
39663: LESS
39664: IFFALSE 39693
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39666: LD_ADDR_VAR 0 18
39670: PUSH
39671: LD_INT 7
39673: PUSH
39674: LD_INT 28
39676: PUSH
39677: LD_INT 45
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: PUSH
39685: LD_VAR 0 12
39689: ARRAY
39690: ST_TO_ADDR
// break ;
39691: GO 39695
// end ; end ; end ;
39693: GO 39524
39695: POP
39696: POP
// end ; if not weapon then
39697: LD_VAR 0 18
39701: NOT
39702: IFFALSE 39762
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39704: LD_ADDR_VAR 0 5
39708: PUSH
39709: LD_VAR 0 5
39713: PUSH
39714: LD_INT 11
39716: PUSH
39717: LD_INT 30
39719: PUSH
39720: LD_INT 49
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: LIST
39727: DIFF
39728: ST_TO_ADDR
// if not list then
39729: LD_VAR 0 5
39733: NOT
39734: IFFALSE 39738
// exit ;
39736: GO 39880
// weapon := list [ rand ( 1 , list ) ] ;
39738: LD_ADDR_VAR 0 18
39742: PUSH
39743: LD_VAR 0 5
39747: PUSH
39748: LD_INT 1
39750: PPUSH
39751: LD_VAR 0 5
39755: PPUSH
39756: CALL_OW 12
39760: ARRAY
39761: ST_TO_ADDR
// end ; if weapon then
39762: LD_VAR 0 18
39766: IFFALSE 39880
// begin tmp := CostOfWeapon ( weapon ) ;
39768: LD_ADDR_VAR 0 14
39772: PUSH
39773: LD_VAR 0 18
39777: PPUSH
39778: CALL_OW 451
39782: ST_TO_ADDR
// j := GetBase ( tower ) ;
39783: LD_ADDR_VAR 0 9
39787: PUSH
39788: LD_VAR 0 1
39792: PPUSH
39793: CALL_OW 274
39797: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39798: LD_VAR 0 9
39802: PPUSH
39803: LD_INT 1
39805: PPUSH
39806: CALL_OW 275
39810: PUSH
39811: LD_VAR 0 14
39815: PUSH
39816: LD_INT 1
39818: ARRAY
39819: GREATEREQUAL
39820: PUSH
39821: LD_VAR 0 9
39825: PPUSH
39826: LD_INT 2
39828: PPUSH
39829: CALL_OW 275
39833: PUSH
39834: LD_VAR 0 14
39838: PUSH
39839: LD_INT 2
39841: ARRAY
39842: GREATEREQUAL
39843: AND
39844: PUSH
39845: LD_VAR 0 9
39849: PPUSH
39850: LD_INT 3
39852: PPUSH
39853: CALL_OW 275
39857: PUSH
39858: LD_VAR 0 14
39862: PUSH
39863: LD_INT 3
39865: ARRAY
39866: GREATEREQUAL
39867: AND
39868: IFFALSE 39880
// result := weapon ;
39870: LD_ADDR_VAR 0 3
39874: PUSH
39875: LD_VAR 0 18
39879: ST_TO_ADDR
// end ; end ;
39880: LD_VAR 0 3
39884: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39885: LD_INT 0
39887: PPUSH
39888: PPUSH
// result := true ;
39889: LD_ADDR_VAR 0 3
39893: PUSH
39894: LD_INT 1
39896: ST_TO_ADDR
// if array1 = array2 then
39897: LD_VAR 0 1
39901: PUSH
39902: LD_VAR 0 2
39906: EQUAL
39907: IFFALSE 39967
// begin for i = 1 to array1 do
39909: LD_ADDR_VAR 0 4
39913: PUSH
39914: DOUBLE
39915: LD_INT 1
39917: DEC
39918: ST_TO_ADDR
39919: LD_VAR 0 1
39923: PUSH
39924: FOR_TO
39925: IFFALSE 39963
// if array1 [ i ] <> array2 [ i ] then
39927: LD_VAR 0 1
39931: PUSH
39932: LD_VAR 0 4
39936: ARRAY
39937: PUSH
39938: LD_VAR 0 2
39942: PUSH
39943: LD_VAR 0 4
39947: ARRAY
39948: NONEQUAL
39949: IFFALSE 39961
// begin result := false ;
39951: LD_ADDR_VAR 0 3
39955: PUSH
39956: LD_INT 0
39958: ST_TO_ADDR
// break ;
39959: GO 39963
// end ;
39961: GO 39924
39963: POP
39964: POP
// end else
39965: GO 39975
// result := false ;
39967: LD_ADDR_VAR 0 3
39971: PUSH
39972: LD_INT 0
39974: ST_TO_ADDR
// end ;
39975: LD_VAR 0 3
39979: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39980: LD_INT 0
39982: PPUSH
39983: PPUSH
// if not array1 or not array2 then
39984: LD_VAR 0 1
39988: NOT
39989: PUSH
39990: LD_VAR 0 2
39994: NOT
39995: OR
39996: IFFALSE 40000
// exit ;
39998: GO 40064
// result := true ;
40000: LD_ADDR_VAR 0 3
40004: PUSH
40005: LD_INT 1
40007: ST_TO_ADDR
// for i = 1 to array1 do
40008: LD_ADDR_VAR 0 4
40012: PUSH
40013: DOUBLE
40014: LD_INT 1
40016: DEC
40017: ST_TO_ADDR
40018: LD_VAR 0 1
40022: PUSH
40023: FOR_TO
40024: IFFALSE 40062
// if array1 [ i ] <> array2 [ i ] then
40026: LD_VAR 0 1
40030: PUSH
40031: LD_VAR 0 4
40035: ARRAY
40036: PUSH
40037: LD_VAR 0 2
40041: PUSH
40042: LD_VAR 0 4
40046: ARRAY
40047: NONEQUAL
40048: IFFALSE 40060
// begin result := false ;
40050: LD_ADDR_VAR 0 3
40054: PUSH
40055: LD_INT 0
40057: ST_TO_ADDR
// break ;
40058: GO 40062
// end ;
40060: GO 40023
40062: POP
40063: POP
// end ;
40064: LD_VAR 0 3
40068: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40069: LD_INT 0
40071: PPUSH
40072: PPUSH
40073: PPUSH
// pom := GetBase ( fac ) ;
40074: LD_ADDR_VAR 0 5
40078: PUSH
40079: LD_VAR 0 1
40083: PPUSH
40084: CALL_OW 274
40088: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40089: LD_ADDR_VAR 0 4
40093: PUSH
40094: LD_VAR 0 2
40098: PUSH
40099: LD_INT 1
40101: ARRAY
40102: PPUSH
40103: LD_VAR 0 2
40107: PUSH
40108: LD_INT 2
40110: ARRAY
40111: PPUSH
40112: LD_VAR 0 2
40116: PUSH
40117: LD_INT 3
40119: ARRAY
40120: PPUSH
40121: LD_VAR 0 2
40125: PUSH
40126: LD_INT 4
40128: ARRAY
40129: PPUSH
40130: CALL_OW 449
40134: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40135: LD_ADDR_VAR 0 3
40139: PUSH
40140: LD_VAR 0 5
40144: PPUSH
40145: LD_INT 1
40147: PPUSH
40148: CALL_OW 275
40152: PUSH
40153: LD_VAR 0 4
40157: PUSH
40158: LD_INT 1
40160: ARRAY
40161: GREATEREQUAL
40162: PUSH
40163: LD_VAR 0 5
40167: PPUSH
40168: LD_INT 2
40170: PPUSH
40171: CALL_OW 275
40175: PUSH
40176: LD_VAR 0 4
40180: PUSH
40181: LD_INT 2
40183: ARRAY
40184: GREATEREQUAL
40185: AND
40186: PUSH
40187: LD_VAR 0 5
40191: PPUSH
40192: LD_INT 3
40194: PPUSH
40195: CALL_OW 275
40199: PUSH
40200: LD_VAR 0 4
40204: PUSH
40205: LD_INT 3
40207: ARRAY
40208: GREATEREQUAL
40209: AND
40210: ST_TO_ADDR
// end ;
40211: LD_VAR 0 3
40215: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40216: LD_INT 0
40218: PPUSH
40219: PPUSH
40220: PPUSH
40221: PPUSH
// pom := GetBase ( building ) ;
40222: LD_ADDR_VAR 0 3
40226: PUSH
40227: LD_VAR 0 1
40231: PPUSH
40232: CALL_OW 274
40236: ST_TO_ADDR
// if not pom then
40237: LD_VAR 0 3
40241: NOT
40242: IFFALSE 40246
// exit ;
40244: GO 40416
// btype := GetBType ( building ) ;
40246: LD_ADDR_VAR 0 5
40250: PUSH
40251: LD_VAR 0 1
40255: PPUSH
40256: CALL_OW 266
40260: ST_TO_ADDR
// if btype = b_armoury then
40261: LD_VAR 0 5
40265: PUSH
40266: LD_INT 4
40268: EQUAL
40269: IFFALSE 40279
// btype := b_barracks ;
40271: LD_ADDR_VAR 0 5
40275: PUSH
40276: LD_INT 5
40278: ST_TO_ADDR
// if btype = b_depot then
40279: LD_VAR 0 5
40283: PUSH
40284: LD_INT 0
40286: EQUAL
40287: IFFALSE 40297
// btype := b_warehouse ;
40289: LD_ADDR_VAR 0 5
40293: PUSH
40294: LD_INT 1
40296: ST_TO_ADDR
// if btype = b_workshop then
40297: LD_VAR 0 5
40301: PUSH
40302: LD_INT 2
40304: EQUAL
40305: IFFALSE 40315
// btype := b_factory ;
40307: LD_ADDR_VAR 0 5
40311: PUSH
40312: LD_INT 3
40314: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40315: LD_ADDR_VAR 0 4
40319: PUSH
40320: LD_VAR 0 5
40324: PPUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: CALL_OW 248
40334: PPUSH
40335: CALL_OW 450
40339: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40340: LD_ADDR_VAR 0 2
40344: PUSH
40345: LD_VAR 0 3
40349: PPUSH
40350: LD_INT 1
40352: PPUSH
40353: CALL_OW 275
40357: PUSH
40358: LD_VAR 0 4
40362: PUSH
40363: LD_INT 1
40365: ARRAY
40366: GREATEREQUAL
40367: PUSH
40368: LD_VAR 0 3
40372: PPUSH
40373: LD_INT 2
40375: PPUSH
40376: CALL_OW 275
40380: PUSH
40381: LD_VAR 0 4
40385: PUSH
40386: LD_INT 2
40388: ARRAY
40389: GREATEREQUAL
40390: AND
40391: PUSH
40392: LD_VAR 0 3
40396: PPUSH
40397: LD_INT 3
40399: PPUSH
40400: CALL_OW 275
40404: PUSH
40405: LD_VAR 0 4
40409: PUSH
40410: LD_INT 3
40412: ARRAY
40413: GREATEREQUAL
40414: AND
40415: ST_TO_ADDR
// end ;
40416: LD_VAR 0 2
40420: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40421: LD_INT 0
40423: PPUSH
40424: PPUSH
40425: PPUSH
// pom := GetBase ( building ) ;
40426: LD_ADDR_VAR 0 4
40430: PUSH
40431: LD_VAR 0 1
40435: PPUSH
40436: CALL_OW 274
40440: ST_TO_ADDR
// if not pom then
40441: LD_VAR 0 4
40445: NOT
40446: IFFALSE 40450
// exit ;
40448: GO 40551
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40450: LD_ADDR_VAR 0 5
40454: PUSH
40455: LD_VAR 0 2
40459: PPUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 248
40469: PPUSH
40470: CALL_OW 450
40474: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40475: LD_ADDR_VAR 0 3
40479: PUSH
40480: LD_VAR 0 4
40484: PPUSH
40485: LD_INT 1
40487: PPUSH
40488: CALL_OW 275
40492: PUSH
40493: LD_VAR 0 5
40497: PUSH
40498: LD_INT 1
40500: ARRAY
40501: GREATEREQUAL
40502: PUSH
40503: LD_VAR 0 4
40507: PPUSH
40508: LD_INT 2
40510: PPUSH
40511: CALL_OW 275
40515: PUSH
40516: LD_VAR 0 5
40520: PUSH
40521: LD_INT 2
40523: ARRAY
40524: GREATEREQUAL
40525: AND
40526: PUSH
40527: LD_VAR 0 4
40531: PPUSH
40532: LD_INT 3
40534: PPUSH
40535: CALL_OW 275
40539: PUSH
40540: LD_VAR 0 5
40544: PUSH
40545: LD_INT 3
40547: ARRAY
40548: GREATEREQUAL
40549: AND
40550: ST_TO_ADDR
// end ;
40551: LD_VAR 0 3
40555: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40556: LD_INT 0
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
// result := false ;
40569: LD_ADDR_VAR 0 8
40573: PUSH
40574: LD_INT 0
40576: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40577: LD_VAR 0 5
40581: NOT
40582: PUSH
40583: LD_VAR 0 1
40587: NOT
40588: OR
40589: PUSH
40590: LD_VAR 0 2
40594: NOT
40595: OR
40596: PUSH
40597: LD_VAR 0 3
40601: NOT
40602: OR
40603: IFFALSE 40607
// exit ;
40605: GO 41408
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40607: LD_ADDR_VAR 0 14
40611: PUSH
40612: LD_VAR 0 1
40616: PPUSH
40617: LD_VAR 0 2
40621: PPUSH
40622: LD_VAR 0 3
40626: PPUSH
40627: LD_VAR 0 4
40631: PPUSH
40632: LD_VAR 0 5
40636: PUSH
40637: LD_INT 1
40639: ARRAY
40640: PPUSH
40641: CALL_OW 248
40645: PPUSH
40646: LD_INT 0
40648: PPUSH
40649: CALL 42245 0 6
40653: ST_TO_ADDR
// if not hexes then
40654: LD_VAR 0 14
40658: NOT
40659: IFFALSE 40663
// exit ;
40661: GO 41408
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40663: LD_ADDR_VAR 0 17
40667: PUSH
40668: LD_VAR 0 5
40672: PPUSH
40673: LD_INT 22
40675: PUSH
40676: LD_VAR 0 13
40680: PPUSH
40681: CALL_OW 255
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: LD_INT 30
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 30
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PPUSH
40722: CALL_OW 72
40726: ST_TO_ADDR
// for i = 1 to hexes do
40727: LD_ADDR_VAR 0 9
40731: PUSH
40732: DOUBLE
40733: LD_INT 1
40735: DEC
40736: ST_TO_ADDR
40737: LD_VAR 0 14
40741: PUSH
40742: FOR_TO
40743: IFFALSE 41406
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40745: LD_ADDR_VAR 0 13
40749: PUSH
40750: LD_VAR 0 14
40754: PUSH
40755: LD_VAR 0 9
40759: ARRAY
40760: PUSH
40761: LD_INT 1
40763: ARRAY
40764: PPUSH
40765: LD_VAR 0 14
40769: PUSH
40770: LD_VAR 0 9
40774: ARRAY
40775: PUSH
40776: LD_INT 2
40778: ARRAY
40779: PPUSH
40780: CALL_OW 428
40784: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40785: LD_VAR 0 14
40789: PUSH
40790: LD_VAR 0 9
40794: ARRAY
40795: PUSH
40796: LD_INT 1
40798: ARRAY
40799: PPUSH
40800: LD_VAR 0 14
40804: PUSH
40805: LD_VAR 0 9
40809: ARRAY
40810: PUSH
40811: LD_INT 2
40813: ARRAY
40814: PPUSH
40815: CALL_OW 351
40819: PUSH
40820: LD_VAR 0 14
40824: PUSH
40825: LD_VAR 0 9
40829: ARRAY
40830: PUSH
40831: LD_INT 1
40833: ARRAY
40834: PPUSH
40835: LD_VAR 0 14
40839: PUSH
40840: LD_VAR 0 9
40844: ARRAY
40845: PUSH
40846: LD_INT 2
40848: ARRAY
40849: PPUSH
40850: CALL_OW 488
40854: NOT
40855: OR
40856: PUSH
40857: LD_VAR 0 13
40861: PPUSH
40862: CALL_OW 247
40866: PUSH
40867: LD_INT 3
40869: EQUAL
40870: OR
40871: IFFALSE 40877
// exit ;
40873: POP
40874: POP
40875: GO 41408
// if not tmp then
40877: LD_VAR 0 13
40881: NOT
40882: IFFALSE 40886
// continue ;
40884: GO 40742
// result := true ;
40886: LD_ADDR_VAR 0 8
40890: PUSH
40891: LD_INT 1
40893: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40894: LD_VAR 0 13
40898: PPUSH
40899: CALL_OW 247
40903: PUSH
40904: LD_INT 2
40906: EQUAL
40907: PUSH
40908: LD_VAR 0 13
40912: PPUSH
40913: CALL_OW 263
40917: PUSH
40918: LD_INT 1
40920: EQUAL
40921: AND
40922: IFFALSE 41086
// begin if IsDrivenBy ( tmp ) then
40924: LD_VAR 0 13
40928: PPUSH
40929: CALL_OW 311
40933: IFFALSE 40937
// continue ;
40935: GO 40742
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40937: LD_VAR 0 6
40941: PPUSH
40942: LD_INT 3
40944: PUSH
40945: LD_INT 60
40947: PUSH
40948: EMPTY
40949: LIST
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 3
40957: PUSH
40958: LD_INT 55
40960: PUSH
40961: EMPTY
40962: LIST
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PPUSH
40972: CALL_OW 72
40976: IFFALSE 41084
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40978: LD_ADDR_VAR 0 18
40982: PUSH
40983: LD_VAR 0 6
40987: PPUSH
40988: LD_INT 3
40990: PUSH
40991: LD_INT 60
40993: PUSH
40994: EMPTY
40995: LIST
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 3
41003: PUSH
41004: LD_INT 55
41006: PUSH
41007: EMPTY
41008: LIST
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PPUSH
41018: CALL_OW 72
41022: PUSH
41023: LD_INT 1
41025: ARRAY
41026: ST_TO_ADDR
// if IsInUnit ( driver ) then
41027: LD_VAR 0 18
41031: PPUSH
41032: CALL_OW 310
41036: IFFALSE 41047
// ComExit ( driver ) ;
41038: LD_VAR 0 18
41042: PPUSH
41043: CALL 65429 0 1
// AddComEnterUnit ( driver , tmp ) ;
41047: LD_VAR 0 18
41051: PPUSH
41052: LD_VAR 0 13
41056: PPUSH
41057: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41061: LD_VAR 0 18
41065: PPUSH
41066: LD_VAR 0 7
41070: PPUSH
41071: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41075: LD_VAR 0 18
41079: PPUSH
41080: CALL_OW 181
// end ; continue ;
41084: GO 40742
// end ; if not tmp in cleaners then
41086: LD_VAR 0 13
41090: PUSH
41091: LD_VAR 0 6
41095: IN
41096: NOT
41097: IFFALSE 41404
// begin if dep then
41099: LD_VAR 0 17
41103: IFFALSE 41239
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41105: LD_ADDR_VAR 0 16
41109: PUSH
41110: LD_VAR 0 17
41114: PUSH
41115: LD_INT 1
41117: ARRAY
41118: PPUSH
41119: CALL_OW 250
41123: PPUSH
41124: LD_VAR 0 17
41128: PUSH
41129: LD_INT 1
41131: ARRAY
41132: PPUSH
41133: CALL_OW 254
41137: PPUSH
41138: LD_INT 5
41140: PPUSH
41141: CALL_OW 272
41145: PUSH
41146: LD_VAR 0 17
41150: PUSH
41151: LD_INT 1
41153: ARRAY
41154: PPUSH
41155: CALL_OW 251
41159: PPUSH
41160: LD_VAR 0 17
41164: PUSH
41165: LD_INT 1
41167: ARRAY
41168: PPUSH
41169: CALL_OW 254
41173: PPUSH
41174: LD_INT 5
41176: PPUSH
41177: CALL_OW 273
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41186: LD_VAR 0 16
41190: PUSH
41191: LD_INT 1
41193: ARRAY
41194: PPUSH
41195: LD_VAR 0 16
41199: PUSH
41200: LD_INT 2
41202: ARRAY
41203: PPUSH
41204: CALL_OW 488
41208: IFFALSE 41239
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41210: LD_VAR 0 13
41214: PPUSH
41215: LD_VAR 0 16
41219: PUSH
41220: LD_INT 1
41222: ARRAY
41223: PPUSH
41224: LD_VAR 0 16
41228: PUSH
41229: LD_INT 2
41231: ARRAY
41232: PPUSH
41233: CALL_OW 111
// continue ;
41237: GO 40742
// end ; end ; r := GetDir ( tmp ) ;
41239: LD_ADDR_VAR 0 15
41243: PUSH
41244: LD_VAR 0 13
41248: PPUSH
41249: CALL_OW 254
41253: ST_TO_ADDR
// if r = 5 then
41254: LD_VAR 0 15
41258: PUSH
41259: LD_INT 5
41261: EQUAL
41262: IFFALSE 41272
// r := 0 ;
41264: LD_ADDR_VAR 0 15
41268: PUSH
41269: LD_INT 0
41271: ST_TO_ADDR
// for j = r to 5 do
41272: LD_ADDR_VAR 0 10
41276: PUSH
41277: DOUBLE
41278: LD_VAR 0 15
41282: DEC
41283: ST_TO_ADDR
41284: LD_INT 5
41286: PUSH
41287: FOR_TO
41288: IFFALSE 41402
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41290: LD_ADDR_VAR 0 11
41294: PUSH
41295: LD_VAR 0 13
41299: PPUSH
41300: CALL_OW 250
41304: PPUSH
41305: LD_VAR 0 10
41309: PPUSH
41310: LD_INT 2
41312: PPUSH
41313: CALL_OW 272
41317: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41318: LD_ADDR_VAR 0 12
41322: PUSH
41323: LD_VAR 0 13
41327: PPUSH
41328: CALL_OW 251
41332: PPUSH
41333: LD_VAR 0 10
41337: PPUSH
41338: LD_INT 2
41340: PPUSH
41341: CALL_OW 273
41345: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41346: LD_VAR 0 11
41350: PPUSH
41351: LD_VAR 0 12
41355: PPUSH
41356: CALL_OW 488
41360: PUSH
41361: LD_VAR 0 11
41365: PPUSH
41366: LD_VAR 0 12
41370: PPUSH
41371: CALL_OW 428
41375: NOT
41376: AND
41377: IFFALSE 41400
// begin ComMoveXY ( tmp , _x , _y ) ;
41379: LD_VAR 0 13
41383: PPUSH
41384: LD_VAR 0 11
41388: PPUSH
41389: LD_VAR 0 12
41393: PPUSH
41394: CALL_OW 111
// break ;
41398: GO 41402
// end ; end ;
41400: GO 41287
41402: POP
41403: POP
// end ; end ;
41404: GO 40742
41406: POP
41407: POP
// end ;
41408: LD_VAR 0 8
41412: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41413: LD_INT 0
41415: PPUSH
41416: PPUSH
41417: PPUSH
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
41422: PPUSH
41423: PPUSH
41424: PPUSH
// result := false ;
41425: LD_ADDR_VAR 0 6
41429: PUSH
41430: LD_INT 0
41432: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41433: LD_VAR 0 1
41437: NOT
41438: PUSH
41439: LD_VAR 0 1
41443: PPUSH
41444: CALL_OW 266
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: IN
41459: NOT
41460: OR
41461: PUSH
41462: LD_VAR 0 2
41466: NOT
41467: OR
41468: PUSH
41469: LD_VAR 0 5
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: LD_INT 3
41485: PUSH
41486: LD_INT 4
41488: PUSH
41489: LD_INT 5
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: IN
41500: NOT
41501: OR
41502: PUSH
41503: LD_VAR 0 3
41507: PPUSH
41508: LD_VAR 0 4
41512: PPUSH
41513: CALL_OW 488
41517: NOT
41518: OR
41519: IFFALSE 41523
// exit ;
41521: GO 42240
// pom := GetBase ( depot ) ;
41523: LD_ADDR_VAR 0 10
41527: PUSH
41528: LD_VAR 0 1
41532: PPUSH
41533: CALL_OW 274
41537: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41538: LD_ADDR_VAR 0 11
41542: PUSH
41543: LD_VAR 0 2
41547: PPUSH
41548: LD_VAR 0 1
41552: PPUSH
41553: CALL_OW 248
41557: PPUSH
41558: CALL_OW 450
41562: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41563: LD_VAR 0 10
41567: PPUSH
41568: LD_INT 1
41570: PPUSH
41571: CALL_OW 275
41575: PUSH
41576: LD_VAR 0 11
41580: PUSH
41581: LD_INT 1
41583: ARRAY
41584: GREATEREQUAL
41585: PUSH
41586: LD_VAR 0 10
41590: PPUSH
41591: LD_INT 2
41593: PPUSH
41594: CALL_OW 275
41598: PUSH
41599: LD_VAR 0 11
41603: PUSH
41604: LD_INT 2
41606: ARRAY
41607: GREATEREQUAL
41608: AND
41609: PUSH
41610: LD_VAR 0 10
41614: PPUSH
41615: LD_INT 3
41617: PPUSH
41618: CALL_OW 275
41622: PUSH
41623: LD_VAR 0 11
41627: PUSH
41628: LD_INT 3
41630: ARRAY
41631: GREATEREQUAL
41632: AND
41633: NOT
41634: IFFALSE 41638
// exit ;
41636: GO 42240
// if GetBType ( depot ) = b_depot then
41638: LD_VAR 0 1
41642: PPUSH
41643: CALL_OW 266
41647: PUSH
41648: LD_INT 0
41650: EQUAL
41651: IFFALSE 41663
// dist := 28 else
41653: LD_ADDR_VAR 0 14
41657: PUSH
41658: LD_INT 28
41660: ST_TO_ADDR
41661: GO 41671
// dist := 36 ;
41663: LD_ADDR_VAR 0 14
41667: PUSH
41668: LD_INT 36
41670: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41671: LD_VAR 0 1
41675: PPUSH
41676: LD_VAR 0 3
41680: PPUSH
41681: LD_VAR 0 4
41685: PPUSH
41686: CALL_OW 297
41690: PUSH
41691: LD_VAR 0 14
41695: GREATER
41696: IFFALSE 41700
// exit ;
41698: GO 42240
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41700: LD_ADDR_VAR 0 12
41704: PUSH
41705: LD_VAR 0 2
41709: PPUSH
41710: LD_VAR 0 3
41714: PPUSH
41715: LD_VAR 0 4
41719: PPUSH
41720: LD_VAR 0 5
41724: PPUSH
41725: LD_VAR 0 1
41729: PPUSH
41730: CALL_OW 248
41734: PPUSH
41735: LD_INT 0
41737: PPUSH
41738: CALL 42245 0 6
41742: ST_TO_ADDR
// if not hexes then
41743: LD_VAR 0 12
41747: NOT
41748: IFFALSE 41752
// exit ;
41750: GO 42240
// hex := GetHexInfo ( x , y ) ;
41752: LD_ADDR_VAR 0 15
41756: PUSH
41757: LD_VAR 0 3
41761: PPUSH
41762: LD_VAR 0 4
41766: PPUSH
41767: CALL_OW 546
41771: ST_TO_ADDR
// if hex [ 1 ] then
41772: LD_VAR 0 15
41776: PUSH
41777: LD_INT 1
41779: ARRAY
41780: IFFALSE 41784
// exit ;
41782: GO 42240
// height := hex [ 2 ] ;
41784: LD_ADDR_VAR 0 13
41788: PUSH
41789: LD_VAR 0 15
41793: PUSH
41794: LD_INT 2
41796: ARRAY
41797: ST_TO_ADDR
// for i = 1 to hexes do
41798: LD_ADDR_VAR 0 7
41802: PUSH
41803: DOUBLE
41804: LD_INT 1
41806: DEC
41807: ST_TO_ADDR
41808: LD_VAR 0 12
41812: PUSH
41813: FOR_TO
41814: IFFALSE 42144
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41816: LD_VAR 0 12
41820: PUSH
41821: LD_VAR 0 7
41825: ARRAY
41826: PUSH
41827: LD_INT 1
41829: ARRAY
41830: PPUSH
41831: LD_VAR 0 12
41835: PUSH
41836: LD_VAR 0 7
41840: ARRAY
41841: PUSH
41842: LD_INT 2
41844: ARRAY
41845: PPUSH
41846: CALL_OW 488
41850: NOT
41851: PUSH
41852: LD_VAR 0 12
41856: PUSH
41857: LD_VAR 0 7
41861: ARRAY
41862: PUSH
41863: LD_INT 1
41865: ARRAY
41866: PPUSH
41867: LD_VAR 0 12
41871: PUSH
41872: LD_VAR 0 7
41876: ARRAY
41877: PUSH
41878: LD_INT 2
41880: ARRAY
41881: PPUSH
41882: CALL_OW 428
41886: PUSH
41887: LD_INT 0
41889: GREATER
41890: OR
41891: PUSH
41892: LD_VAR 0 12
41896: PUSH
41897: LD_VAR 0 7
41901: ARRAY
41902: PUSH
41903: LD_INT 1
41905: ARRAY
41906: PPUSH
41907: LD_VAR 0 12
41911: PUSH
41912: LD_VAR 0 7
41916: ARRAY
41917: PUSH
41918: LD_INT 2
41920: ARRAY
41921: PPUSH
41922: CALL_OW 351
41926: OR
41927: IFFALSE 41933
// exit ;
41929: POP
41930: POP
41931: GO 42240
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41933: LD_ADDR_VAR 0 8
41937: PUSH
41938: LD_VAR 0 12
41942: PUSH
41943: LD_VAR 0 7
41947: ARRAY
41948: PUSH
41949: LD_INT 1
41951: ARRAY
41952: PPUSH
41953: LD_VAR 0 12
41957: PUSH
41958: LD_VAR 0 7
41962: ARRAY
41963: PUSH
41964: LD_INT 2
41966: ARRAY
41967: PPUSH
41968: CALL_OW 546
41972: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41973: LD_VAR 0 8
41977: PUSH
41978: LD_INT 1
41980: ARRAY
41981: PUSH
41982: LD_VAR 0 8
41986: PUSH
41987: LD_INT 2
41989: ARRAY
41990: PUSH
41991: LD_VAR 0 13
41995: PUSH
41996: LD_INT 2
41998: PLUS
41999: GREATER
42000: OR
42001: PUSH
42002: LD_VAR 0 8
42006: PUSH
42007: LD_INT 2
42009: ARRAY
42010: PUSH
42011: LD_VAR 0 13
42015: PUSH
42016: LD_INT 2
42018: MINUS
42019: LESS
42020: OR
42021: PUSH
42022: LD_VAR 0 8
42026: PUSH
42027: LD_INT 3
42029: ARRAY
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 8
42036: PUSH
42037: LD_INT 9
42039: PUSH
42040: LD_INT 10
42042: PUSH
42043: LD_INT 11
42045: PUSH
42046: LD_INT 12
42048: PUSH
42049: LD_INT 13
42051: PUSH
42052: LD_INT 16
42054: PUSH
42055: LD_INT 17
42057: PUSH
42058: LD_INT 18
42060: PUSH
42061: LD_INT 19
42063: PUSH
42064: LD_INT 20
42066: PUSH
42067: LD_INT 21
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: IN
42085: NOT
42086: OR
42087: PUSH
42088: LD_VAR 0 8
42092: PUSH
42093: LD_INT 5
42095: ARRAY
42096: NOT
42097: OR
42098: PUSH
42099: LD_VAR 0 8
42103: PUSH
42104: LD_INT 6
42106: ARRAY
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: LD_INT 7
42116: PUSH
42117: LD_INT 9
42119: PUSH
42120: LD_INT 10
42122: PUSH
42123: LD_INT 11
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: IN
42134: NOT
42135: OR
42136: IFFALSE 42142
// exit ;
42138: POP
42139: POP
42140: GO 42240
// end ;
42142: GO 41813
42144: POP
42145: POP
// side := GetSide ( depot ) ;
42146: LD_ADDR_VAR 0 9
42150: PUSH
42151: LD_VAR 0 1
42155: PPUSH
42156: CALL_OW 255
42160: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42161: LD_VAR 0 9
42165: PPUSH
42166: LD_VAR 0 3
42170: PPUSH
42171: LD_VAR 0 4
42175: PPUSH
42176: LD_INT 20
42178: PPUSH
42179: CALL 34574 0 4
42183: PUSH
42184: LD_INT 4
42186: ARRAY
42187: IFFALSE 42191
// exit ;
42189: GO 42240
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42191: LD_VAR 0 2
42195: PUSH
42196: LD_INT 29
42198: PUSH
42199: LD_INT 30
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: IN
42206: PUSH
42207: LD_VAR 0 3
42211: PPUSH
42212: LD_VAR 0 4
42216: PPUSH
42217: LD_VAR 0 9
42221: PPUSH
42222: CALL_OW 440
42226: NOT
42227: AND
42228: IFFALSE 42232
// exit ;
42230: GO 42240
// result := true ;
42232: LD_ADDR_VAR 0 6
42236: PUSH
42237: LD_INT 1
42239: ST_TO_ADDR
// end ;
42240: LD_VAR 0 6
42244: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42245: LD_INT 0
42247: PPUSH
42248: PPUSH
42249: PPUSH
42250: PPUSH
42251: PPUSH
42252: PPUSH
42253: PPUSH
42254: PPUSH
42255: PPUSH
42256: PPUSH
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
42261: PPUSH
42262: PPUSH
42263: PPUSH
42264: PPUSH
42265: PPUSH
42266: PPUSH
42267: PPUSH
42268: PPUSH
42269: PPUSH
42270: PPUSH
42271: PPUSH
42272: PPUSH
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
42277: PPUSH
42278: PPUSH
42279: PPUSH
42280: PPUSH
42281: PPUSH
42282: PPUSH
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
42291: PPUSH
42292: PPUSH
42293: PPUSH
42294: PPUSH
42295: PPUSH
42296: PPUSH
42297: PPUSH
42298: PPUSH
42299: PPUSH
42300: PPUSH
42301: PPUSH
42302: PPUSH
42303: PPUSH
42304: PPUSH
// result = [ ] ;
42305: LD_ADDR_VAR 0 7
42309: PUSH
42310: EMPTY
42311: ST_TO_ADDR
// temp_list = [ ] ;
42312: LD_ADDR_VAR 0 9
42316: PUSH
42317: EMPTY
42318: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42319: LD_VAR 0 4
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: LD_INT 3
42335: PUSH
42336: LD_INT 4
42338: PUSH
42339: LD_INT 5
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: IN
42350: NOT
42351: PUSH
42352: LD_VAR 0 1
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: IN
42367: PUSH
42368: LD_VAR 0 5
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: IN
42387: NOT
42388: AND
42389: OR
42390: IFFALSE 42394
// exit ;
42392: GO 60785
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42394: LD_VAR 0 1
42398: PUSH
42399: LD_INT 6
42401: PUSH
42402: LD_INT 7
42404: PUSH
42405: LD_INT 8
42407: PUSH
42408: LD_INT 13
42410: PUSH
42411: LD_INT 12
42413: PUSH
42414: LD_INT 15
42416: PUSH
42417: LD_INT 11
42419: PUSH
42420: LD_INT 14
42422: PUSH
42423: LD_INT 10
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: IN
42437: IFFALSE 42447
// btype = b_lab ;
42439: LD_ADDR_VAR 0 1
42443: PUSH
42444: LD_INT 6
42446: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42447: LD_VAR 0 6
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: IN
42466: NOT
42467: PUSH
42468: LD_VAR 0 1
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: LD_INT 6
42487: PUSH
42488: LD_INT 36
42490: PUSH
42491: LD_INT 4
42493: PUSH
42494: LD_INT 5
42496: PUSH
42497: LD_INT 31
42499: PUSH
42500: LD_INT 32
42502: PUSH
42503: LD_INT 33
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: IN
42519: NOT
42520: PUSH
42521: LD_VAR 0 6
42525: PUSH
42526: LD_INT 1
42528: EQUAL
42529: AND
42530: OR
42531: PUSH
42532: LD_VAR 0 1
42536: PUSH
42537: LD_INT 2
42539: PUSH
42540: LD_INT 3
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: IN
42547: NOT
42548: PUSH
42549: LD_VAR 0 6
42553: PUSH
42554: LD_INT 2
42556: EQUAL
42557: AND
42558: OR
42559: IFFALSE 42569
// mode = 0 ;
42561: LD_ADDR_VAR 0 6
42565: PUSH
42566: LD_INT 0
42568: ST_TO_ADDR
// case mode of 0 :
42569: LD_VAR 0 6
42573: PUSH
42574: LD_INT 0
42576: DOUBLE
42577: EQUAL
42578: IFTRUE 42582
42580: GO 54035
42582: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42583: LD_ADDR_VAR 0 11
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: LD_INT 2
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42776: LD_ADDR_VAR 0 12
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 3
42933: NEG
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 3
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42972: LD_ADDR_VAR 0 13
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: LD_INT 3
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 3
43131: NEG
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: LD_INT 3
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43171: LD_ADDR_VAR 0 14
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 2
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 3
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43367: LD_ADDR_VAR 0 15
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 3
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43560: LD_ADDR_VAR 0 16
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 3
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 3
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43753: LD_ADDR_VAR 0 17
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 2
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: NEG
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: LD_INT 2
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43983: LD_ADDR_VAR 0 18
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 2
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 2
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44213: LD_ADDR_VAR 0 19
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: NEG
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44443: LD_ADDR_VAR 0 20
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: NEG
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44673: LD_ADDR_VAR 0 21
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44903: LD_ADDR_VAR 0 22
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45133: LD_ADDR_VAR 0 23
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 2
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: LD_INT 3
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 3
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45413: LD_ADDR_VAR 0 24
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 2
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 3
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45689: LD_ADDR_VAR 0 25
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 3
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 3
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 3
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: LD_INT 3
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45963: LD_ADDR_VAR 0 26
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 3
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 3
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46239: LD_ADDR_VAR 0 27
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: NEG
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 3
46484: NEG
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46519: LD_ADDR_VAR 0 28
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 3
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 3
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 3
46754: NEG
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 3
46766: NEG
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46801: LD_ADDR_VAR 0 29
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: LD_INT 3
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 3
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47080: LD_ADDR_VAR 0 30
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 3
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 3
47323: NEG
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47358: LD_ADDR_VAR 0 31
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: LD_INT 3
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 3
47601: NEG
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47636: LD_ADDR_VAR 0 32
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: LD_INT 3
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47914: LD_ADDR_VAR 0 33
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: LD_INT 3
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 3
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: NEG
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48193: LD_ADDR_VAR 0 34
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 3
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 3
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: NEG
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48473: LD_ADDR_VAR 0 35
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48585: LD_ADDR_VAR 0 36
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48697: LD_ADDR_VAR 0 37
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48809: LD_ADDR_VAR 0 38
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48921: LD_ADDR_VAR 0 39
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49033: LD_ADDR_VAR 0 40
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49145: LD_ADDR_VAR 0 41
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: LD_INT 2
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 3
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 3
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 3
49388: PUSH
49389: LD_INT 3
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 3
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 3
49419: NEG
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 3
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 3
49454: NEG
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49495: LD_ADDR_VAR 0 42
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 3
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 3
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 3
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 3
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 3
49792: NEG
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 3
49804: NEG
49805: PUSH
49806: LD_INT 3
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49845: LD_ADDR_VAR 0 43
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 3
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 3
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 3
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 3
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 3
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 3
50141: NEG
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: NEG
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50193: LD_ADDR_VAR 0 44
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: LD_INT 3
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 3
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: LD_INT 3
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 3
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 3
50467: NEG
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: NEG
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 3
50502: NEG
50503: PUSH
50504: LD_INT 3
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50543: LD_ADDR_VAR 0 45
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 2
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: PUSH
50790: LD_INT 3
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 3
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 3
50840: NEG
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 3
50852: NEG
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50893: LD_ADDR_VAR 0 46
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 3
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 3
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 3
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 3
51189: NEG
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51241: LD_ADDR_VAR 0 47
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51392: LD_ADDR_VAR 0 48
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51539: LD_ADDR_VAR 0 49
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51683: LD_ADDR_VAR 0 50
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 2
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51827: LD_ADDR_VAR 0 51
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51974: LD_ADDR_VAR 0 52
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52125: LD_ADDR_VAR 0 53
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52355: LD_ADDR_VAR 0 54
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: LD_INT 2
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52585: LD_ADDR_VAR 0 55
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: LD_INT 2
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52815: LD_ADDR_VAR 0 56
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: NEG
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53045: LD_ADDR_VAR 0 57
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 2
53221: NEG
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: LD_INT 2
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53275: LD_ADDR_VAR 0 58
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53505: LD_ADDR_VAR 0 59
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53593: LD_ADDR_VAR 0 60
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53681: LD_ADDR_VAR 0 61
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53769: LD_ADDR_VAR 0 62
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53857: LD_ADDR_VAR 0 63
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53945: LD_ADDR_VAR 0 64
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: ST_TO_ADDR
// end ; 1 :
54033: GO 59930
54035: LD_INT 1
54037: DOUBLE
54038: EQUAL
54039: IFTRUE 54043
54041: GO 56666
54043: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54044: LD_ADDR_VAR 0 11
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: LIST
54087: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54088: LD_ADDR_VAR 0 12
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 3
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: LIST
54128: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54129: LD_ADDR_VAR 0 13
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 3
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: LIST
54168: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54169: LD_ADDR_VAR 0 14
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 3
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 3
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54210: LD_ADDR_VAR 0 15
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 3
54228: NEG
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 3
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54254: LD_ADDR_VAR 0 16
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 3
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 3
54273: NEG
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 3
54285: NEG
54286: PUSH
54287: LD_INT 3
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: LIST
54299: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54300: LD_ADDR_VAR 0 17
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 3
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 3
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: LIST
54343: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54344: LD_ADDR_VAR 0 18
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 3
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 3
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: LIST
54384: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54385: LD_ADDR_VAR 0 19
54389: PUSH
54390: LD_INT 3
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: LD_INT 3
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: LD_INT 3
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54425: LD_ADDR_VAR 0 20
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54466: LD_ADDR_VAR 0 21
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 3
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54510: LD_ADDR_VAR 0 22
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 3
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: NEG
54542: PUSH
54543: LD_INT 3
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54556: LD_ADDR_VAR 0 23
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 3
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 4
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: LD_INT 3
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: LIST
54599: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54600: LD_ADDR_VAR 0 24
54604: PUSH
54605: LD_INT 3
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 4
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54641: LD_ADDR_VAR 0 25
54645: PUSH
54646: LD_INT 3
54648: PUSH
54649: LD_INT 3
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 4
54658: PUSH
54659: LD_INT 3
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 3
54668: PUSH
54669: LD_INT 4
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54681: LD_ADDR_VAR 0 26
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 3
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 4
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 3
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54722: LD_ADDR_VAR 0 27
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 4
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: LIST
54765: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54766: LD_ADDR_VAR 0 28
54770: PUSH
54771: LD_INT 3
54773: NEG
54774: PUSH
54775: LD_INT 3
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 3
54785: NEG
54786: PUSH
54787: LD_INT 4
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 4
54797: NEG
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: LIST
54811: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54812: LD_ADDR_VAR 0 29
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 3
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 4
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 4
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 5
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 5
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 4
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 6
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 6
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 5
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54967: LD_ADDR_VAR 0 30
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 3
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 4
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 4
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 4
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 5
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 5
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 5
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 6
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 6
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55110: LD_ADDR_VAR 0 31
55114: PUSH
55115: LD_INT 3
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 3
55127: PUSH
55128: LD_INT 3
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 4
55147: PUSH
55148: LD_INT 3
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 4
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: LD_INT 4
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 5
55177: PUSH
55178: LD_INT 4
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 5
55187: PUSH
55188: LD_INT 5
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 4
55197: PUSH
55198: LD_INT 5
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 6
55207: PUSH
55208: LD_INT 5
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 6
55217: PUSH
55218: LD_INT 6
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 5
55227: PUSH
55228: LD_INT 6
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55249: LD_ADDR_VAR 0 32
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 3
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 4
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 4
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 3
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 5
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 5
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 4
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 6
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 6
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 5
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55392: LD_ADDR_VAR 0 33
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: NEG
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: NEG
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 4
55444: NEG
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 4
55455: NEG
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 4
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 5
55478: NEG
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 5
55489: NEG
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 5
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 6
55512: NEG
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 6
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55547: LD_ADDR_VAR 0 34
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: LD_INT 3
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 3
55578: NEG
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 3
55590: NEG
55591: PUSH
55592: LD_INT 4
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 4
55602: NEG
55603: PUSH
55604: LD_INT 3
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 4
55614: NEG
55615: PUSH
55616: LD_INT 4
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 4
55626: NEG
55627: PUSH
55628: LD_INT 5
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 5
55638: NEG
55639: PUSH
55640: LD_INT 4
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 5
55650: NEG
55651: PUSH
55652: LD_INT 5
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 5
55662: NEG
55663: PUSH
55664: LD_INT 6
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 6
55674: NEG
55675: PUSH
55676: LD_INT 5
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 6
55686: NEG
55687: PUSH
55688: LD_INT 6
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55710: LD_ADDR_VAR 0 41
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 3
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: LIST
55753: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55754: LD_ADDR_VAR 0 42
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55795: LD_ADDR_VAR 0 43
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 3
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: LIST
55834: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55835: LD_ADDR_VAR 0 44
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: LIST
55875: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55876: LD_ADDR_VAR 0 45
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55920: LD_ADDR_VAR 0 46
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 2
55939: NEG
55940: PUSH
55941: LD_INT 3
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: LIST
55965: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55966: LD_ADDR_VAR 0 47
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: LD_INT 3
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 3
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55999: LD_ADDR_VAR 0 48
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56030: LD_ADDR_VAR 0 49
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: LD_INT 2
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56059: LD_ADDR_VAR 0 50
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 3
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56088: LD_ADDR_VAR 0 51
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56119: LD_ADDR_VAR 0 52
56123: PUSH
56124: LD_INT 3
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56152: LD_ADDR_VAR 0 53
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 3
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 3
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56196: LD_ADDR_VAR 0 54
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 3
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56237: LD_ADDR_VAR 0 55
56241: PUSH
56242: LD_INT 3
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56277: LD_ADDR_VAR 0 56
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56318: LD_ADDR_VAR 0 57
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56362: LD_ADDR_VAR 0 58
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: LD_INT 3
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 3
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 3
56393: NEG
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: LIST
56407: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56408: LD_ADDR_VAR 0 59
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56452: LD_ADDR_VAR 0 60
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56493: LD_ADDR_VAR 0 61
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56533: LD_ADDR_VAR 0 62
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56574: LD_ADDR_VAR 0 63
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56618: LD_ADDR_VAR 0 64
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// end ; 2 :
56664: GO 59930
56666: LD_INT 2
56668: DOUBLE
56669: EQUAL
56670: IFTRUE 56674
56672: GO 59929
56674: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56675: LD_ADDR_VAR 0 29
56679: PUSH
56680: LD_INT 4
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 5
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 5
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 4
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 3
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 5
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 3
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 3
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 4
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 4
56805: PUSH
56806: LD_INT 4
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 3
56815: PUSH
56816: LD_INT 4
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 4
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: LD_INT 4
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 4
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 4
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 5
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 5
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 4
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 3
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: LD_INT 5
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: NEG
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 4
57014: NEG
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 4
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 4
57037: NEG
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 4
57060: NEG
57061: PUSH
57062: LD_INT 4
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 4
57072: NEG
57073: PUSH
57074: LD_INT 5
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 3
57084: NEG
57085: PUSH
57086: LD_INT 4
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 3
57096: NEG
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 4
57108: NEG
57109: PUSH
57110: LD_INT 3
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 5
57120: NEG
57121: PUSH
57122: LD_INT 4
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 5
57132: NEG
57133: PUSH
57134: LD_INT 5
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 3
57144: NEG
57145: PUSH
57146: LD_INT 5
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 5
57156: NEG
57157: PUSH
57158: LD_INT 3
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57213: LD_ADDR_VAR 0 30
57217: PUSH
57218: LD_INT 4
57220: PUSH
57221: LD_INT 4
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 4
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 5
57240: PUSH
57241: LD_INT 4
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 5
57250: PUSH
57251: LD_INT 5
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 4
57260: PUSH
57261: LD_INT 5
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: LD_INT 4
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 5
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 3
57300: PUSH
57301: LD_INT 5
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 4
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 4
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: LD_INT 4
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 4
57403: NEG
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 4
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 3
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 5
57459: NEG
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 5
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 5
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 3
57494: NEG
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 3
57505: NEG
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: LD_INT 4
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 4
57565: NEG
57566: PUSH
57567: LD_INT 3
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 4
57577: NEG
57578: PUSH
57579: LD_INT 4
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: LD_INT 4
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: LD_INT 5
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 4
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: LD_INT 4
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 5
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 5
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57760: LD_ADDR_VAR 0 31
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 4
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 4
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 5
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 5
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 4
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: LD_INT 5
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 3
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 4
57916: NEG
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 4
57927: NEG
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 4
57939: NEG
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 4
57962: NEG
57963: PUSH
57964: LD_INT 4
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 4
57974: NEG
57975: PUSH
57976: LD_INT 5
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: LD_INT 4
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 4
58010: NEG
58011: PUSH
58012: LD_INT 3
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 5
58022: NEG
58023: PUSH
58024: LD_INT 4
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 5
58034: NEG
58035: PUSH
58036: LD_INT 5
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: LD_INT 5
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 5
58058: NEG
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 4
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 4
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: LD_INT 4
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 4
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 4
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 5
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 5
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 4
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 5
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58310: LD_ADDR_VAR 0 32
58314: PUSH
58315: LD_INT 4
58317: NEG
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 4
58328: NEG
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 4
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 5
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 5
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 5
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 3
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 3
58419: NEG
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: NEG
58432: PUSH
58433: LD_INT 4
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 4
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: NEG
58492: PUSH
58493: LD_INT 4
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: LD_INT 4
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 4
58515: NEG
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 4
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 5
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 4
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 3
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 4
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 5
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: LD_INT 3
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 5
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 4
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 4
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 3
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 4
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 4
58722: PUSH
58723: LD_INT 4
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 4
58732: PUSH
58733: LD_INT 3
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 5
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 5
58752: PUSH
58753: LD_INT 5
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 4
58762: PUSH
58763: LD_INT 5
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 3
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: LD_INT 3
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 5
58792: PUSH
58793: LD_INT 3
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 3
58802: PUSH
58803: LD_INT 5
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58857: LD_ADDR_VAR 0 33
58861: PUSH
58862: LD_INT 4
58864: NEG
58865: PUSH
58866: LD_INT 4
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 4
58876: NEG
58877: PUSH
58878: LD_INT 5
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: LD_INT 4
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 4
58912: NEG
58913: PUSH
58914: LD_INT 3
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 5
58924: NEG
58925: PUSH
58926: LD_INT 4
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 5
58936: NEG
58937: PUSH
58938: LD_INT 5
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: LD_INT 5
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 5
58960: NEG
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 4
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 3
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: LD_INT 4
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: LD_INT 2
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 4
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 4
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 4
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 5
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 5
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 4
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 5
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 4
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 4
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: LD_INT 4
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: LD_INT 4
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: LD_INT 3
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: LD_INT 4
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 5
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 5
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: LD_INT 4
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: LD_INT 5
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: LD_INT 3
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59395: LD_ADDR_VAR 0 34
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 4
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: LD_INT 5
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 4
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 3
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: LD_INT 5
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 3
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: LD_INT 5
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 3
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 3
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 4
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 4
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 4
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 4
59597: PUSH
59598: LD_INT 4
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 4
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 5
59617: PUSH
59618: LD_INT 4
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 5
59627: PUSH
59628: LD_INT 5
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 4
59637: PUSH
59638: LD_INT 5
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: LD_INT 4
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 3
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 5
59667: PUSH
59668: LD_INT 3
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: LD_INT 5
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 3
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 4
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 4
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: LD_INT 3
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: LD_INT 4
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 4
59780: NEG
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 4
59791: NEG
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 3
59803: NEG
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 3
59814: NEG
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 4
59825: NEG
59826: PUSH
59827: LD_INT 1
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 5
59836: NEG
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 5
59847: NEG
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 5
59859: NEG
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: ST_TO_ADDR
// end ; end ;
59927: GO 59930
59929: POP
// case btype of b_depot , b_warehouse :
59930: LD_VAR 0 1
59934: PUSH
59935: LD_INT 0
59937: DOUBLE
59938: EQUAL
59939: IFTRUE 59949
59941: LD_INT 1
59943: DOUBLE
59944: EQUAL
59945: IFTRUE 59949
59947: GO 60150
59949: POP
// case nation of nation_american :
59950: LD_VAR 0 5
59954: PUSH
59955: LD_INT 1
59957: DOUBLE
59958: EQUAL
59959: IFTRUE 59963
59961: GO 60019
59963: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59964: LD_ADDR_VAR 0 9
59968: PUSH
59969: LD_VAR 0 11
59973: PUSH
59974: LD_VAR 0 12
59978: PUSH
59979: LD_VAR 0 13
59983: PUSH
59984: LD_VAR 0 14
59988: PUSH
59989: LD_VAR 0 15
59993: PUSH
59994: LD_VAR 0 16
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: PUSH
60007: LD_VAR 0 4
60011: PUSH
60012: LD_INT 1
60014: PLUS
60015: ARRAY
60016: ST_TO_ADDR
60017: GO 60148
60019: LD_INT 2
60021: DOUBLE
60022: EQUAL
60023: IFTRUE 60027
60025: GO 60083
60027: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60028: LD_ADDR_VAR 0 9
60032: PUSH
60033: LD_VAR 0 17
60037: PUSH
60038: LD_VAR 0 18
60042: PUSH
60043: LD_VAR 0 19
60047: PUSH
60048: LD_VAR 0 20
60052: PUSH
60053: LD_VAR 0 21
60057: PUSH
60058: LD_VAR 0 22
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: PUSH
60071: LD_VAR 0 4
60075: PUSH
60076: LD_INT 1
60078: PLUS
60079: ARRAY
60080: ST_TO_ADDR
60081: GO 60148
60083: LD_INT 3
60085: DOUBLE
60086: EQUAL
60087: IFTRUE 60091
60089: GO 60147
60091: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60092: LD_ADDR_VAR 0 9
60096: PUSH
60097: LD_VAR 0 23
60101: PUSH
60102: LD_VAR 0 24
60106: PUSH
60107: LD_VAR 0 25
60111: PUSH
60112: LD_VAR 0 26
60116: PUSH
60117: LD_VAR 0 27
60121: PUSH
60122: LD_VAR 0 28
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: PUSH
60135: LD_VAR 0 4
60139: PUSH
60140: LD_INT 1
60142: PLUS
60143: ARRAY
60144: ST_TO_ADDR
60145: GO 60148
60147: POP
60148: GO 60703
60150: LD_INT 2
60152: DOUBLE
60153: EQUAL
60154: IFTRUE 60164
60156: LD_INT 3
60158: DOUBLE
60159: EQUAL
60160: IFTRUE 60164
60162: GO 60220
60164: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60165: LD_ADDR_VAR 0 9
60169: PUSH
60170: LD_VAR 0 29
60174: PUSH
60175: LD_VAR 0 30
60179: PUSH
60180: LD_VAR 0 31
60184: PUSH
60185: LD_VAR 0 32
60189: PUSH
60190: LD_VAR 0 33
60194: PUSH
60195: LD_VAR 0 34
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: PUSH
60208: LD_VAR 0 4
60212: PUSH
60213: LD_INT 1
60215: PLUS
60216: ARRAY
60217: ST_TO_ADDR
60218: GO 60703
60220: LD_INT 16
60222: DOUBLE
60223: EQUAL
60224: IFTRUE 60282
60226: LD_INT 17
60228: DOUBLE
60229: EQUAL
60230: IFTRUE 60282
60232: LD_INT 18
60234: DOUBLE
60235: EQUAL
60236: IFTRUE 60282
60238: LD_INT 19
60240: DOUBLE
60241: EQUAL
60242: IFTRUE 60282
60244: LD_INT 22
60246: DOUBLE
60247: EQUAL
60248: IFTRUE 60282
60250: LD_INT 20
60252: DOUBLE
60253: EQUAL
60254: IFTRUE 60282
60256: LD_INT 21
60258: DOUBLE
60259: EQUAL
60260: IFTRUE 60282
60262: LD_INT 23
60264: DOUBLE
60265: EQUAL
60266: IFTRUE 60282
60268: LD_INT 24
60270: DOUBLE
60271: EQUAL
60272: IFTRUE 60282
60274: LD_INT 25
60276: DOUBLE
60277: EQUAL
60278: IFTRUE 60282
60280: GO 60338
60282: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60283: LD_ADDR_VAR 0 9
60287: PUSH
60288: LD_VAR 0 35
60292: PUSH
60293: LD_VAR 0 36
60297: PUSH
60298: LD_VAR 0 37
60302: PUSH
60303: LD_VAR 0 38
60307: PUSH
60308: LD_VAR 0 39
60312: PUSH
60313: LD_VAR 0 40
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: PUSH
60326: LD_VAR 0 4
60330: PUSH
60331: LD_INT 1
60333: PLUS
60334: ARRAY
60335: ST_TO_ADDR
60336: GO 60703
60338: LD_INT 6
60340: DOUBLE
60341: EQUAL
60342: IFTRUE 60394
60344: LD_INT 7
60346: DOUBLE
60347: EQUAL
60348: IFTRUE 60394
60350: LD_INT 8
60352: DOUBLE
60353: EQUAL
60354: IFTRUE 60394
60356: LD_INT 13
60358: DOUBLE
60359: EQUAL
60360: IFTRUE 60394
60362: LD_INT 12
60364: DOUBLE
60365: EQUAL
60366: IFTRUE 60394
60368: LD_INT 15
60370: DOUBLE
60371: EQUAL
60372: IFTRUE 60394
60374: LD_INT 11
60376: DOUBLE
60377: EQUAL
60378: IFTRUE 60394
60380: LD_INT 14
60382: DOUBLE
60383: EQUAL
60384: IFTRUE 60394
60386: LD_INT 10
60388: DOUBLE
60389: EQUAL
60390: IFTRUE 60394
60392: GO 60450
60394: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60395: LD_ADDR_VAR 0 9
60399: PUSH
60400: LD_VAR 0 41
60404: PUSH
60405: LD_VAR 0 42
60409: PUSH
60410: LD_VAR 0 43
60414: PUSH
60415: LD_VAR 0 44
60419: PUSH
60420: LD_VAR 0 45
60424: PUSH
60425: LD_VAR 0 46
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: PUSH
60438: LD_VAR 0 4
60442: PUSH
60443: LD_INT 1
60445: PLUS
60446: ARRAY
60447: ST_TO_ADDR
60448: GO 60703
60450: LD_INT 36
60452: DOUBLE
60453: EQUAL
60454: IFTRUE 60458
60456: GO 60514
60458: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60459: LD_ADDR_VAR 0 9
60463: PUSH
60464: LD_VAR 0 47
60468: PUSH
60469: LD_VAR 0 48
60473: PUSH
60474: LD_VAR 0 49
60478: PUSH
60479: LD_VAR 0 50
60483: PUSH
60484: LD_VAR 0 51
60488: PUSH
60489: LD_VAR 0 52
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: PUSH
60502: LD_VAR 0 4
60506: PUSH
60507: LD_INT 1
60509: PLUS
60510: ARRAY
60511: ST_TO_ADDR
60512: GO 60703
60514: LD_INT 4
60516: DOUBLE
60517: EQUAL
60518: IFTRUE 60540
60520: LD_INT 5
60522: DOUBLE
60523: EQUAL
60524: IFTRUE 60540
60526: LD_INT 34
60528: DOUBLE
60529: EQUAL
60530: IFTRUE 60540
60532: LD_INT 37
60534: DOUBLE
60535: EQUAL
60536: IFTRUE 60540
60538: GO 60596
60540: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60541: LD_ADDR_VAR 0 9
60545: PUSH
60546: LD_VAR 0 53
60550: PUSH
60551: LD_VAR 0 54
60555: PUSH
60556: LD_VAR 0 55
60560: PUSH
60561: LD_VAR 0 56
60565: PUSH
60566: LD_VAR 0 57
60570: PUSH
60571: LD_VAR 0 58
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: PUSH
60584: LD_VAR 0 4
60588: PUSH
60589: LD_INT 1
60591: PLUS
60592: ARRAY
60593: ST_TO_ADDR
60594: GO 60703
60596: LD_INT 31
60598: DOUBLE
60599: EQUAL
60600: IFTRUE 60646
60602: LD_INT 32
60604: DOUBLE
60605: EQUAL
60606: IFTRUE 60646
60608: LD_INT 33
60610: DOUBLE
60611: EQUAL
60612: IFTRUE 60646
60614: LD_INT 27
60616: DOUBLE
60617: EQUAL
60618: IFTRUE 60646
60620: LD_INT 26
60622: DOUBLE
60623: EQUAL
60624: IFTRUE 60646
60626: LD_INT 28
60628: DOUBLE
60629: EQUAL
60630: IFTRUE 60646
60632: LD_INT 29
60634: DOUBLE
60635: EQUAL
60636: IFTRUE 60646
60638: LD_INT 30
60640: DOUBLE
60641: EQUAL
60642: IFTRUE 60646
60644: GO 60702
60646: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60647: LD_ADDR_VAR 0 9
60651: PUSH
60652: LD_VAR 0 59
60656: PUSH
60657: LD_VAR 0 60
60661: PUSH
60662: LD_VAR 0 61
60666: PUSH
60667: LD_VAR 0 62
60671: PUSH
60672: LD_VAR 0 63
60676: PUSH
60677: LD_VAR 0 64
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: PUSH
60690: LD_VAR 0 4
60694: PUSH
60695: LD_INT 1
60697: PLUS
60698: ARRAY
60699: ST_TO_ADDR
60700: GO 60703
60702: POP
// temp_list2 = [ ] ;
60703: LD_ADDR_VAR 0 10
60707: PUSH
60708: EMPTY
60709: ST_TO_ADDR
// for i in temp_list do
60710: LD_ADDR_VAR 0 8
60714: PUSH
60715: LD_VAR 0 9
60719: PUSH
60720: FOR_IN
60721: IFFALSE 60773
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60723: LD_ADDR_VAR 0 10
60727: PUSH
60728: LD_VAR 0 10
60732: PUSH
60733: LD_VAR 0 8
60737: PUSH
60738: LD_INT 1
60740: ARRAY
60741: PUSH
60742: LD_VAR 0 2
60746: PLUS
60747: PUSH
60748: LD_VAR 0 8
60752: PUSH
60753: LD_INT 2
60755: ARRAY
60756: PUSH
60757: LD_VAR 0 3
60761: PLUS
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: ADD
60770: ST_TO_ADDR
60771: GO 60720
60773: POP
60774: POP
// result = temp_list2 ;
60775: LD_ADDR_VAR 0 7
60779: PUSH
60780: LD_VAR 0 10
60784: ST_TO_ADDR
// end ;
60785: LD_VAR 0 7
60789: RET
// export function EnemyInRange ( unit , dist ) ; begin
60790: LD_INT 0
60792: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60793: LD_ADDR_VAR 0 3
60797: PUSH
60798: LD_VAR 0 1
60802: PPUSH
60803: CALL_OW 255
60807: PPUSH
60808: LD_VAR 0 1
60812: PPUSH
60813: CALL_OW 250
60817: PPUSH
60818: LD_VAR 0 1
60822: PPUSH
60823: CALL_OW 251
60827: PPUSH
60828: LD_VAR 0 2
60832: PPUSH
60833: CALL 34574 0 4
60837: PUSH
60838: LD_INT 4
60840: ARRAY
60841: ST_TO_ADDR
// end ;
60842: LD_VAR 0 3
60846: RET
// export function PlayerSeeMe ( unit ) ; begin
60847: LD_INT 0
60849: PPUSH
// result := See ( your_side , unit ) ;
60850: LD_ADDR_VAR 0 2
60854: PUSH
60855: LD_OWVAR 2
60859: PPUSH
60860: LD_VAR 0 1
60864: PPUSH
60865: CALL_OW 292
60869: ST_TO_ADDR
// end ;
60870: LD_VAR 0 2
60874: RET
// export function ReverseDir ( unit ) ; begin
60875: LD_INT 0
60877: PPUSH
// if not unit then
60878: LD_VAR 0 1
60882: NOT
60883: IFFALSE 60887
// exit ;
60885: GO 60910
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60887: LD_ADDR_VAR 0 2
60891: PUSH
60892: LD_VAR 0 1
60896: PPUSH
60897: CALL_OW 254
60901: PUSH
60902: LD_INT 3
60904: PLUS
60905: PUSH
60906: LD_INT 6
60908: MOD
60909: ST_TO_ADDR
// end ;
60910: LD_VAR 0 2
60914: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60915: LD_INT 0
60917: PPUSH
60918: PPUSH
60919: PPUSH
60920: PPUSH
60921: PPUSH
// if not hexes then
60922: LD_VAR 0 2
60926: NOT
60927: IFFALSE 60931
// exit ;
60929: GO 61079
// dist := 9999 ;
60931: LD_ADDR_VAR 0 5
60935: PUSH
60936: LD_INT 9999
60938: ST_TO_ADDR
// for i = 1 to hexes do
60939: LD_ADDR_VAR 0 4
60943: PUSH
60944: DOUBLE
60945: LD_INT 1
60947: DEC
60948: ST_TO_ADDR
60949: LD_VAR 0 2
60953: PUSH
60954: FOR_TO
60955: IFFALSE 61067
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60957: LD_VAR 0 1
60961: PPUSH
60962: LD_VAR 0 2
60966: PUSH
60967: LD_VAR 0 4
60971: ARRAY
60972: PUSH
60973: LD_INT 1
60975: ARRAY
60976: PPUSH
60977: LD_VAR 0 2
60981: PUSH
60982: LD_VAR 0 4
60986: ARRAY
60987: PUSH
60988: LD_INT 2
60990: ARRAY
60991: PPUSH
60992: CALL_OW 297
60996: PUSH
60997: LD_VAR 0 5
61001: LESS
61002: IFFALSE 61065
// begin hex := hexes [ i ] ;
61004: LD_ADDR_VAR 0 7
61008: PUSH
61009: LD_VAR 0 2
61013: PUSH
61014: LD_VAR 0 4
61018: ARRAY
61019: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61020: LD_ADDR_VAR 0 5
61024: PUSH
61025: LD_VAR 0 1
61029: PPUSH
61030: LD_VAR 0 2
61034: PUSH
61035: LD_VAR 0 4
61039: ARRAY
61040: PUSH
61041: LD_INT 1
61043: ARRAY
61044: PPUSH
61045: LD_VAR 0 2
61049: PUSH
61050: LD_VAR 0 4
61054: ARRAY
61055: PUSH
61056: LD_INT 2
61058: ARRAY
61059: PPUSH
61060: CALL_OW 297
61064: ST_TO_ADDR
// end ; end ;
61065: GO 60954
61067: POP
61068: POP
// result := hex ;
61069: LD_ADDR_VAR 0 3
61073: PUSH
61074: LD_VAR 0 7
61078: ST_TO_ADDR
// end ;
61079: LD_VAR 0 3
61083: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61084: LD_INT 0
61086: PPUSH
61087: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61088: LD_VAR 0 1
61092: NOT
61093: PUSH
61094: LD_VAR 0 1
61098: PUSH
61099: LD_INT 21
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 23
61111: PUSH
61112: LD_INT 2
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PPUSH
61123: CALL_OW 69
61127: IN
61128: NOT
61129: OR
61130: IFFALSE 61134
// exit ;
61132: GO 61181
// for i = 1 to 3 do
61134: LD_ADDR_VAR 0 3
61138: PUSH
61139: DOUBLE
61140: LD_INT 1
61142: DEC
61143: ST_TO_ADDR
61144: LD_INT 3
61146: PUSH
61147: FOR_TO
61148: IFFALSE 61179
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61150: LD_VAR 0 1
61154: PPUSH
61155: CALL_OW 250
61159: PPUSH
61160: LD_VAR 0 1
61164: PPUSH
61165: CALL_OW 251
61169: PPUSH
61170: LD_INT 1
61172: PPUSH
61173: CALL_OW 453
61177: GO 61147
61179: POP
61180: POP
// end ;
61181: LD_VAR 0 2
61185: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61186: LD_INT 0
61188: PPUSH
61189: PPUSH
61190: PPUSH
61191: PPUSH
61192: PPUSH
61193: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61194: LD_VAR 0 1
61198: NOT
61199: PUSH
61200: LD_VAR 0 2
61204: NOT
61205: OR
61206: PUSH
61207: LD_VAR 0 1
61211: PPUSH
61212: CALL_OW 314
61216: OR
61217: IFFALSE 61221
// exit ;
61219: GO 61662
// x := GetX ( enemy_unit ) ;
61221: LD_ADDR_VAR 0 7
61225: PUSH
61226: LD_VAR 0 2
61230: PPUSH
61231: CALL_OW 250
61235: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61236: LD_ADDR_VAR 0 8
61240: PUSH
61241: LD_VAR 0 2
61245: PPUSH
61246: CALL_OW 251
61250: ST_TO_ADDR
// if not x or not y then
61251: LD_VAR 0 7
61255: NOT
61256: PUSH
61257: LD_VAR 0 8
61261: NOT
61262: OR
61263: IFFALSE 61267
// exit ;
61265: GO 61662
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61267: LD_ADDR_VAR 0 6
61271: PUSH
61272: LD_VAR 0 7
61276: PPUSH
61277: LD_INT 0
61279: PPUSH
61280: LD_INT 4
61282: PPUSH
61283: CALL_OW 272
61287: PUSH
61288: LD_VAR 0 8
61292: PPUSH
61293: LD_INT 0
61295: PPUSH
61296: LD_INT 4
61298: PPUSH
61299: CALL_OW 273
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_VAR 0 7
61312: PPUSH
61313: LD_INT 1
61315: PPUSH
61316: LD_INT 4
61318: PPUSH
61319: CALL_OW 272
61323: PUSH
61324: LD_VAR 0 8
61328: PPUSH
61329: LD_INT 1
61331: PPUSH
61332: LD_INT 4
61334: PPUSH
61335: CALL_OW 273
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_VAR 0 7
61348: PPUSH
61349: LD_INT 2
61351: PPUSH
61352: LD_INT 4
61354: PPUSH
61355: CALL_OW 272
61359: PUSH
61360: LD_VAR 0 8
61364: PPUSH
61365: LD_INT 2
61367: PPUSH
61368: LD_INT 4
61370: PPUSH
61371: CALL_OW 273
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_VAR 0 7
61384: PPUSH
61385: LD_INT 3
61387: PPUSH
61388: LD_INT 4
61390: PPUSH
61391: CALL_OW 272
61395: PUSH
61396: LD_VAR 0 8
61400: PPUSH
61401: LD_INT 3
61403: PPUSH
61404: LD_INT 4
61406: PPUSH
61407: CALL_OW 273
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_VAR 0 7
61420: PPUSH
61421: LD_INT 4
61423: PPUSH
61424: LD_INT 4
61426: PPUSH
61427: CALL_OW 272
61431: PUSH
61432: LD_VAR 0 8
61436: PPUSH
61437: LD_INT 4
61439: PPUSH
61440: LD_INT 4
61442: PPUSH
61443: CALL_OW 273
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_VAR 0 7
61456: PPUSH
61457: LD_INT 5
61459: PPUSH
61460: LD_INT 4
61462: PPUSH
61463: CALL_OW 272
61467: PUSH
61468: LD_VAR 0 8
61472: PPUSH
61473: LD_INT 5
61475: PPUSH
61476: LD_INT 4
61478: PPUSH
61479: CALL_OW 273
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: ST_TO_ADDR
// for i = tmp downto 1 do
61496: LD_ADDR_VAR 0 4
61500: PUSH
61501: DOUBLE
61502: LD_VAR 0 6
61506: INC
61507: ST_TO_ADDR
61508: LD_INT 1
61510: PUSH
61511: FOR_DOWNTO
61512: IFFALSE 61613
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61514: LD_VAR 0 6
61518: PUSH
61519: LD_VAR 0 4
61523: ARRAY
61524: PUSH
61525: LD_INT 1
61527: ARRAY
61528: PPUSH
61529: LD_VAR 0 6
61533: PUSH
61534: LD_VAR 0 4
61538: ARRAY
61539: PUSH
61540: LD_INT 2
61542: ARRAY
61543: PPUSH
61544: CALL_OW 488
61548: NOT
61549: PUSH
61550: LD_VAR 0 6
61554: PUSH
61555: LD_VAR 0 4
61559: ARRAY
61560: PUSH
61561: LD_INT 1
61563: ARRAY
61564: PPUSH
61565: LD_VAR 0 6
61569: PUSH
61570: LD_VAR 0 4
61574: ARRAY
61575: PUSH
61576: LD_INT 2
61578: ARRAY
61579: PPUSH
61580: CALL_OW 428
61584: PUSH
61585: LD_INT 0
61587: NONEQUAL
61588: OR
61589: IFFALSE 61611
// tmp := Delete ( tmp , i ) ;
61591: LD_ADDR_VAR 0 6
61595: PUSH
61596: LD_VAR 0 6
61600: PPUSH
61601: LD_VAR 0 4
61605: PPUSH
61606: CALL_OW 3
61610: ST_TO_ADDR
61611: GO 61511
61613: POP
61614: POP
// j := GetClosestHex ( unit , tmp ) ;
61615: LD_ADDR_VAR 0 5
61619: PUSH
61620: LD_VAR 0 1
61624: PPUSH
61625: LD_VAR 0 6
61629: PPUSH
61630: CALL 60915 0 2
61634: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61635: LD_VAR 0 1
61639: PPUSH
61640: LD_VAR 0 5
61644: PUSH
61645: LD_INT 1
61647: ARRAY
61648: PPUSH
61649: LD_VAR 0 5
61653: PUSH
61654: LD_INT 2
61656: ARRAY
61657: PPUSH
61658: CALL_OW 111
// end ;
61662: LD_VAR 0 3
61666: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61667: LD_INT 0
61669: PPUSH
61670: PPUSH
61671: PPUSH
// uc_side = 0 ;
61672: LD_ADDR_OWVAR 20
61676: PUSH
61677: LD_INT 0
61679: ST_TO_ADDR
// uc_nation = 0 ;
61680: LD_ADDR_OWVAR 21
61684: PUSH
61685: LD_INT 0
61687: ST_TO_ADDR
// InitHc_All ( ) ;
61688: CALL_OW 584
// InitVc ;
61692: CALL_OW 20
// if mastodonts then
61696: LD_VAR 0 6
61700: IFFALSE 61767
// for i = 1 to mastodonts do
61702: LD_ADDR_VAR 0 11
61706: PUSH
61707: DOUBLE
61708: LD_INT 1
61710: DEC
61711: ST_TO_ADDR
61712: LD_VAR 0 6
61716: PUSH
61717: FOR_TO
61718: IFFALSE 61765
// begin vc_chassis := 31 ;
61720: LD_ADDR_OWVAR 37
61724: PUSH
61725: LD_INT 31
61727: ST_TO_ADDR
// vc_control := control_rider ;
61728: LD_ADDR_OWVAR 38
61732: PUSH
61733: LD_INT 4
61735: ST_TO_ADDR
// animal := CreateVehicle ;
61736: LD_ADDR_VAR 0 12
61740: PUSH
61741: CALL_OW 45
61745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61746: LD_VAR 0 12
61750: PPUSH
61751: LD_VAR 0 8
61755: PPUSH
61756: LD_INT 0
61758: PPUSH
61759: CALL 63955 0 3
// end ;
61763: GO 61717
61765: POP
61766: POP
// if horses then
61767: LD_VAR 0 5
61771: IFFALSE 61838
// for i = 1 to horses do
61773: LD_ADDR_VAR 0 11
61777: PUSH
61778: DOUBLE
61779: LD_INT 1
61781: DEC
61782: ST_TO_ADDR
61783: LD_VAR 0 5
61787: PUSH
61788: FOR_TO
61789: IFFALSE 61836
// begin hc_class := 21 ;
61791: LD_ADDR_OWVAR 28
61795: PUSH
61796: LD_INT 21
61798: ST_TO_ADDR
// hc_gallery :=  ;
61799: LD_ADDR_OWVAR 33
61803: PUSH
61804: LD_STRING 
61806: ST_TO_ADDR
// animal := CreateHuman ;
61807: LD_ADDR_VAR 0 12
61811: PUSH
61812: CALL_OW 44
61816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61817: LD_VAR 0 12
61821: PPUSH
61822: LD_VAR 0 8
61826: PPUSH
61827: LD_INT 0
61829: PPUSH
61830: CALL 63955 0 3
// end ;
61834: GO 61788
61836: POP
61837: POP
// if birds then
61838: LD_VAR 0 1
61842: IFFALSE 61909
// for i = 1 to birds do
61844: LD_ADDR_VAR 0 11
61848: PUSH
61849: DOUBLE
61850: LD_INT 1
61852: DEC
61853: ST_TO_ADDR
61854: LD_VAR 0 1
61858: PUSH
61859: FOR_TO
61860: IFFALSE 61907
// begin hc_class = 18 ;
61862: LD_ADDR_OWVAR 28
61866: PUSH
61867: LD_INT 18
61869: ST_TO_ADDR
// hc_gallery =  ;
61870: LD_ADDR_OWVAR 33
61874: PUSH
61875: LD_STRING 
61877: ST_TO_ADDR
// animal := CreateHuman ;
61878: LD_ADDR_VAR 0 12
61882: PUSH
61883: CALL_OW 44
61887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61888: LD_VAR 0 12
61892: PPUSH
61893: LD_VAR 0 8
61897: PPUSH
61898: LD_INT 0
61900: PPUSH
61901: CALL 63955 0 3
// end ;
61905: GO 61859
61907: POP
61908: POP
// if tigers then
61909: LD_VAR 0 2
61913: IFFALSE 61997
// for i = 1 to tigers do
61915: LD_ADDR_VAR 0 11
61919: PUSH
61920: DOUBLE
61921: LD_INT 1
61923: DEC
61924: ST_TO_ADDR
61925: LD_VAR 0 2
61929: PUSH
61930: FOR_TO
61931: IFFALSE 61995
// begin hc_class = class_tiger ;
61933: LD_ADDR_OWVAR 28
61937: PUSH
61938: LD_INT 14
61940: ST_TO_ADDR
// hc_gallery =  ;
61941: LD_ADDR_OWVAR 33
61945: PUSH
61946: LD_STRING 
61948: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61949: LD_ADDR_OWVAR 35
61953: PUSH
61954: LD_INT 7
61956: NEG
61957: PPUSH
61958: LD_INT 7
61960: PPUSH
61961: CALL_OW 12
61965: ST_TO_ADDR
// animal := CreateHuman ;
61966: LD_ADDR_VAR 0 12
61970: PUSH
61971: CALL_OW 44
61975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61976: LD_VAR 0 12
61980: PPUSH
61981: LD_VAR 0 8
61985: PPUSH
61986: LD_INT 0
61988: PPUSH
61989: CALL 63955 0 3
// end ;
61993: GO 61930
61995: POP
61996: POP
// if apemans then
61997: LD_VAR 0 3
62001: IFFALSE 62124
// for i = 1 to apemans do
62003: LD_ADDR_VAR 0 11
62007: PUSH
62008: DOUBLE
62009: LD_INT 1
62011: DEC
62012: ST_TO_ADDR
62013: LD_VAR 0 3
62017: PUSH
62018: FOR_TO
62019: IFFALSE 62122
// begin hc_class = class_apeman ;
62021: LD_ADDR_OWVAR 28
62025: PUSH
62026: LD_INT 12
62028: ST_TO_ADDR
// hc_gallery =  ;
62029: LD_ADDR_OWVAR 33
62033: PUSH
62034: LD_STRING 
62036: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62037: LD_ADDR_OWVAR 35
62041: PUSH
62042: LD_INT 5
62044: NEG
62045: PPUSH
62046: LD_INT 5
62048: PPUSH
62049: CALL_OW 12
62053: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62054: LD_ADDR_OWVAR 31
62058: PUSH
62059: LD_INT 1
62061: PPUSH
62062: LD_INT 3
62064: PPUSH
62065: CALL_OW 12
62069: PUSH
62070: LD_INT 1
62072: PPUSH
62073: LD_INT 3
62075: PPUSH
62076: CALL_OW 12
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: ST_TO_ADDR
// animal := CreateHuman ;
62093: LD_ADDR_VAR 0 12
62097: PUSH
62098: CALL_OW 44
62102: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62103: LD_VAR 0 12
62107: PPUSH
62108: LD_VAR 0 8
62112: PPUSH
62113: LD_INT 0
62115: PPUSH
62116: CALL 63955 0 3
// end ;
62120: GO 62018
62122: POP
62123: POP
// if enchidnas then
62124: LD_VAR 0 4
62128: IFFALSE 62195
// for i = 1 to enchidnas do
62130: LD_ADDR_VAR 0 11
62134: PUSH
62135: DOUBLE
62136: LD_INT 1
62138: DEC
62139: ST_TO_ADDR
62140: LD_VAR 0 4
62144: PUSH
62145: FOR_TO
62146: IFFALSE 62193
// begin hc_class = 13 ;
62148: LD_ADDR_OWVAR 28
62152: PUSH
62153: LD_INT 13
62155: ST_TO_ADDR
// hc_gallery =  ;
62156: LD_ADDR_OWVAR 33
62160: PUSH
62161: LD_STRING 
62163: ST_TO_ADDR
// animal := CreateHuman ;
62164: LD_ADDR_VAR 0 12
62168: PUSH
62169: CALL_OW 44
62173: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62174: LD_VAR 0 12
62178: PPUSH
62179: LD_VAR 0 8
62183: PPUSH
62184: LD_INT 0
62186: PPUSH
62187: CALL 63955 0 3
// end ;
62191: GO 62145
62193: POP
62194: POP
// if fishes then
62195: LD_VAR 0 7
62199: IFFALSE 62266
// for i = 1 to fishes do
62201: LD_ADDR_VAR 0 11
62205: PUSH
62206: DOUBLE
62207: LD_INT 1
62209: DEC
62210: ST_TO_ADDR
62211: LD_VAR 0 7
62215: PUSH
62216: FOR_TO
62217: IFFALSE 62264
// begin hc_class = 20 ;
62219: LD_ADDR_OWVAR 28
62223: PUSH
62224: LD_INT 20
62226: ST_TO_ADDR
// hc_gallery =  ;
62227: LD_ADDR_OWVAR 33
62231: PUSH
62232: LD_STRING 
62234: ST_TO_ADDR
// animal := CreateHuman ;
62235: LD_ADDR_VAR 0 12
62239: PUSH
62240: CALL_OW 44
62244: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62245: LD_VAR 0 12
62249: PPUSH
62250: LD_VAR 0 9
62254: PPUSH
62255: LD_INT 0
62257: PPUSH
62258: CALL 63955 0 3
// end ;
62262: GO 62216
62264: POP
62265: POP
// end ;
62266: LD_VAR 0 10
62270: RET
// export function WantHeal ( sci , unit ) ; begin
62271: LD_INT 0
62273: PPUSH
// if GetTaskList ( sci ) > 0 then
62274: LD_VAR 0 1
62278: PPUSH
62279: CALL_OW 437
62283: PUSH
62284: LD_INT 0
62286: GREATER
62287: IFFALSE 62357
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62289: LD_VAR 0 1
62293: PPUSH
62294: CALL_OW 437
62298: PUSH
62299: LD_INT 1
62301: ARRAY
62302: PUSH
62303: LD_INT 1
62305: ARRAY
62306: PUSH
62307: LD_STRING l
62309: EQUAL
62310: PUSH
62311: LD_VAR 0 1
62315: PPUSH
62316: CALL_OW 437
62320: PUSH
62321: LD_INT 1
62323: ARRAY
62324: PUSH
62325: LD_INT 4
62327: ARRAY
62328: PUSH
62329: LD_VAR 0 2
62333: EQUAL
62334: AND
62335: IFFALSE 62347
// result := true else
62337: LD_ADDR_VAR 0 3
62341: PUSH
62342: LD_INT 1
62344: ST_TO_ADDR
62345: GO 62355
// result := false ;
62347: LD_ADDR_VAR 0 3
62351: PUSH
62352: LD_INT 0
62354: ST_TO_ADDR
// end else
62355: GO 62365
// result := false ;
62357: LD_ADDR_VAR 0 3
62361: PUSH
62362: LD_INT 0
62364: ST_TO_ADDR
// end ;
62365: LD_VAR 0 3
62369: RET
// export function HealTarget ( sci ) ; begin
62370: LD_INT 0
62372: PPUSH
// if not sci then
62373: LD_VAR 0 1
62377: NOT
62378: IFFALSE 62382
// exit ;
62380: GO 62447
// result := 0 ;
62382: LD_ADDR_VAR 0 2
62386: PUSH
62387: LD_INT 0
62389: ST_TO_ADDR
// if GetTaskList ( sci ) then
62390: LD_VAR 0 1
62394: PPUSH
62395: CALL_OW 437
62399: IFFALSE 62447
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62401: LD_VAR 0 1
62405: PPUSH
62406: CALL_OW 437
62410: PUSH
62411: LD_INT 1
62413: ARRAY
62414: PUSH
62415: LD_INT 1
62417: ARRAY
62418: PUSH
62419: LD_STRING l
62421: EQUAL
62422: IFFALSE 62447
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62424: LD_ADDR_VAR 0 2
62428: PUSH
62429: LD_VAR 0 1
62433: PPUSH
62434: CALL_OW 437
62438: PUSH
62439: LD_INT 1
62441: ARRAY
62442: PUSH
62443: LD_INT 4
62445: ARRAY
62446: ST_TO_ADDR
// end ;
62447: LD_VAR 0 2
62451: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62452: LD_INT 0
62454: PPUSH
62455: PPUSH
62456: PPUSH
62457: PPUSH
// if not base_units then
62458: LD_VAR 0 1
62462: NOT
62463: IFFALSE 62467
// exit ;
62465: GO 62554
// result := false ;
62467: LD_ADDR_VAR 0 2
62471: PUSH
62472: LD_INT 0
62474: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62475: LD_ADDR_VAR 0 5
62479: PUSH
62480: LD_VAR 0 1
62484: PPUSH
62485: LD_INT 21
62487: PUSH
62488: LD_INT 3
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PPUSH
62495: CALL_OW 72
62499: ST_TO_ADDR
// if not tmp then
62500: LD_VAR 0 5
62504: NOT
62505: IFFALSE 62509
// exit ;
62507: GO 62554
// for i in tmp do
62509: LD_ADDR_VAR 0 3
62513: PUSH
62514: LD_VAR 0 5
62518: PUSH
62519: FOR_IN
62520: IFFALSE 62552
// begin result := EnemyInRange ( i , 22 ) ;
62522: LD_ADDR_VAR 0 2
62526: PUSH
62527: LD_VAR 0 3
62531: PPUSH
62532: LD_INT 22
62534: PPUSH
62535: CALL 60790 0 2
62539: ST_TO_ADDR
// if result then
62540: LD_VAR 0 2
62544: IFFALSE 62550
// exit ;
62546: POP
62547: POP
62548: GO 62554
// end ;
62550: GO 62519
62552: POP
62553: POP
// end ;
62554: LD_VAR 0 2
62558: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62559: LD_INT 0
62561: PPUSH
62562: PPUSH
// if not units then
62563: LD_VAR 0 1
62567: NOT
62568: IFFALSE 62572
// exit ;
62570: GO 62642
// result := [ ] ;
62572: LD_ADDR_VAR 0 3
62576: PUSH
62577: EMPTY
62578: ST_TO_ADDR
// for i in units do
62579: LD_ADDR_VAR 0 4
62583: PUSH
62584: LD_VAR 0 1
62588: PUSH
62589: FOR_IN
62590: IFFALSE 62640
// if GetTag ( i ) = tag then
62592: LD_VAR 0 4
62596: PPUSH
62597: CALL_OW 110
62601: PUSH
62602: LD_VAR 0 2
62606: EQUAL
62607: IFFALSE 62638
// result := Insert ( result , result + 1 , i ) ;
62609: LD_ADDR_VAR 0 3
62613: PUSH
62614: LD_VAR 0 3
62618: PPUSH
62619: LD_VAR 0 3
62623: PUSH
62624: LD_INT 1
62626: PLUS
62627: PPUSH
62628: LD_VAR 0 4
62632: PPUSH
62633: CALL_OW 2
62637: ST_TO_ADDR
62638: GO 62589
62640: POP
62641: POP
// end ;
62642: LD_VAR 0 3
62646: RET
// export function IsDriver ( un ) ; begin
62647: LD_INT 0
62649: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62650: LD_ADDR_VAR 0 2
62654: PUSH
62655: LD_VAR 0 1
62659: PUSH
62660: LD_INT 55
62662: PUSH
62663: EMPTY
62664: LIST
62665: PPUSH
62666: CALL_OW 69
62670: IN
62671: ST_TO_ADDR
// end ;
62672: LD_VAR 0 2
62676: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62677: LD_INT 0
62679: PPUSH
62680: PPUSH
// list := [ ] ;
62681: LD_ADDR_VAR 0 5
62685: PUSH
62686: EMPTY
62687: ST_TO_ADDR
// case d of 0 :
62688: LD_VAR 0 3
62692: PUSH
62693: LD_INT 0
62695: DOUBLE
62696: EQUAL
62697: IFTRUE 62701
62699: GO 62834
62701: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62702: LD_ADDR_VAR 0 5
62706: PUSH
62707: LD_VAR 0 1
62711: PUSH
62712: LD_INT 4
62714: MINUS
62715: PUSH
62716: LD_VAR 0 2
62720: PUSH
62721: LD_INT 4
62723: MINUS
62724: PUSH
62725: LD_INT 2
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: LIST
62732: PUSH
62733: LD_VAR 0 1
62737: PUSH
62738: LD_INT 3
62740: MINUS
62741: PUSH
62742: LD_VAR 0 2
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: LIST
62754: PUSH
62755: LD_VAR 0 1
62759: PUSH
62760: LD_INT 4
62762: PLUS
62763: PUSH
62764: LD_VAR 0 2
62768: PUSH
62769: LD_INT 4
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: LIST
62776: PUSH
62777: LD_VAR 0 1
62781: PUSH
62782: LD_INT 3
62784: PLUS
62785: PUSH
62786: LD_VAR 0 2
62790: PUSH
62791: LD_INT 3
62793: PLUS
62794: PUSH
62795: LD_INT 5
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: LIST
62802: PUSH
62803: LD_VAR 0 1
62807: PUSH
62808: LD_VAR 0 2
62812: PUSH
62813: LD_INT 4
62815: PLUS
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: LIST
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: ST_TO_ADDR
// end ; 1 :
62832: GO 63532
62834: LD_INT 1
62836: DOUBLE
62837: EQUAL
62838: IFTRUE 62842
62840: GO 62975
62842: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62843: LD_ADDR_VAR 0 5
62847: PUSH
62848: LD_VAR 0 1
62852: PUSH
62853: LD_VAR 0 2
62857: PUSH
62858: LD_INT 4
62860: MINUS
62861: PUSH
62862: LD_INT 3
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: LIST
62869: PUSH
62870: LD_VAR 0 1
62874: PUSH
62875: LD_INT 3
62877: MINUS
62878: PUSH
62879: LD_VAR 0 2
62883: PUSH
62884: LD_INT 3
62886: MINUS
62887: PUSH
62888: LD_INT 2
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: LIST
62895: PUSH
62896: LD_VAR 0 1
62900: PUSH
62901: LD_INT 4
62903: MINUS
62904: PUSH
62905: LD_VAR 0 2
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: LIST
62917: PUSH
62918: LD_VAR 0 1
62922: PUSH
62923: LD_VAR 0 2
62927: PUSH
62928: LD_INT 3
62930: PLUS
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: PUSH
62940: LD_VAR 0 1
62944: PUSH
62945: LD_INT 4
62947: PLUS
62948: PUSH
62949: LD_VAR 0 2
62953: PUSH
62954: LD_INT 4
62956: PLUS
62957: PUSH
62958: LD_INT 5
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: LIST
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: ST_TO_ADDR
// end ; 2 :
62973: GO 63532
62975: LD_INT 2
62977: DOUBLE
62978: EQUAL
62979: IFTRUE 62983
62981: GO 63112
62983: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62984: LD_ADDR_VAR 0 5
62988: PUSH
62989: LD_VAR 0 1
62993: PUSH
62994: LD_VAR 0 2
62998: PUSH
62999: LD_INT 3
63001: MINUS
63002: PUSH
63003: LD_INT 3
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: LIST
63010: PUSH
63011: LD_VAR 0 1
63015: PUSH
63016: LD_INT 4
63018: PLUS
63019: PUSH
63020: LD_VAR 0 2
63024: PUSH
63025: LD_INT 4
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: PUSH
63033: LD_VAR 0 1
63037: PUSH
63038: LD_VAR 0 2
63042: PUSH
63043: LD_INT 4
63045: PLUS
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: LIST
63054: PUSH
63055: LD_VAR 0 1
63059: PUSH
63060: LD_INT 3
63062: MINUS
63063: PUSH
63064: LD_VAR 0 2
63068: PUSH
63069: LD_INT 1
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: LIST
63076: PUSH
63077: LD_VAR 0 1
63081: PUSH
63082: LD_INT 4
63084: MINUS
63085: PUSH
63086: LD_VAR 0 2
63090: PUSH
63091: LD_INT 4
63093: MINUS
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: LIST
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: ST_TO_ADDR
// end ; 3 :
63110: GO 63532
63112: LD_INT 3
63114: DOUBLE
63115: EQUAL
63116: IFTRUE 63120
63118: GO 63253
63120: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63121: LD_ADDR_VAR 0 5
63125: PUSH
63126: LD_VAR 0 1
63130: PUSH
63131: LD_INT 3
63133: PLUS
63134: PUSH
63135: LD_VAR 0 2
63139: PUSH
63140: LD_INT 4
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: LIST
63147: PUSH
63148: LD_VAR 0 1
63152: PUSH
63153: LD_INT 4
63155: PLUS
63156: PUSH
63157: LD_VAR 0 2
63161: PUSH
63162: LD_INT 4
63164: PLUS
63165: PUSH
63166: LD_INT 5
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: PUSH
63174: LD_VAR 0 1
63178: PUSH
63179: LD_INT 4
63181: MINUS
63182: PUSH
63183: LD_VAR 0 2
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: LIST
63195: PUSH
63196: LD_VAR 0 1
63200: PUSH
63201: LD_VAR 0 2
63205: PUSH
63206: LD_INT 4
63208: MINUS
63209: PUSH
63210: LD_INT 3
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: LIST
63217: PUSH
63218: LD_VAR 0 1
63222: PUSH
63223: LD_INT 3
63225: MINUS
63226: PUSH
63227: LD_VAR 0 2
63231: PUSH
63232: LD_INT 3
63234: MINUS
63235: PUSH
63236: LD_INT 2
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: LIST
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: ST_TO_ADDR
// end ; 4 :
63251: GO 63532
63253: LD_INT 4
63255: DOUBLE
63256: EQUAL
63257: IFTRUE 63261
63259: GO 63394
63261: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63262: LD_ADDR_VAR 0 5
63266: PUSH
63267: LD_VAR 0 1
63271: PUSH
63272: LD_VAR 0 2
63276: PUSH
63277: LD_INT 4
63279: PLUS
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: LIST
63288: PUSH
63289: LD_VAR 0 1
63293: PUSH
63294: LD_INT 3
63296: PLUS
63297: PUSH
63298: LD_VAR 0 2
63302: PUSH
63303: LD_INT 3
63305: PLUS
63306: PUSH
63307: LD_INT 5
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: LIST
63314: PUSH
63315: LD_VAR 0 1
63319: PUSH
63320: LD_INT 4
63322: PLUS
63323: PUSH
63324: LD_VAR 0 2
63328: PUSH
63329: LD_INT 4
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: LIST
63336: PUSH
63337: LD_VAR 0 1
63341: PUSH
63342: LD_VAR 0 2
63346: PUSH
63347: LD_INT 3
63349: MINUS
63350: PUSH
63351: LD_INT 3
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: LIST
63358: PUSH
63359: LD_VAR 0 1
63363: PUSH
63364: LD_INT 4
63366: MINUS
63367: PUSH
63368: LD_VAR 0 2
63372: PUSH
63373: LD_INT 4
63375: MINUS
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: LIST
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: ST_TO_ADDR
// end ; 5 :
63392: GO 63532
63394: LD_INT 5
63396: DOUBLE
63397: EQUAL
63398: IFTRUE 63402
63400: GO 63531
63402: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63403: LD_ADDR_VAR 0 5
63407: PUSH
63408: LD_VAR 0 1
63412: PUSH
63413: LD_INT 4
63415: MINUS
63416: PUSH
63417: LD_VAR 0 2
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: PUSH
63430: LD_VAR 0 1
63434: PUSH
63435: LD_VAR 0 2
63439: PUSH
63440: LD_INT 4
63442: MINUS
63443: PUSH
63444: LD_INT 3
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: LIST
63451: PUSH
63452: LD_VAR 0 1
63456: PUSH
63457: LD_INT 4
63459: PLUS
63460: PUSH
63461: LD_VAR 0 2
63465: PUSH
63466: LD_INT 4
63468: PLUS
63469: PUSH
63470: LD_INT 5
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: PUSH
63478: LD_VAR 0 1
63482: PUSH
63483: LD_INT 3
63485: PLUS
63486: PUSH
63487: LD_VAR 0 2
63491: PUSH
63492: LD_INT 4
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: LIST
63499: PUSH
63500: LD_VAR 0 1
63504: PUSH
63505: LD_VAR 0 2
63509: PUSH
63510: LD_INT 3
63512: PLUS
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: LIST
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: ST_TO_ADDR
// end ; end ;
63529: GO 63532
63531: POP
// result := list ;
63532: LD_ADDR_VAR 0 4
63536: PUSH
63537: LD_VAR 0 5
63541: ST_TO_ADDR
// end ;
63542: LD_VAR 0 4
63546: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63547: LD_INT 0
63549: PPUSH
63550: PPUSH
63551: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63552: LD_VAR 0 1
63556: NOT
63557: PUSH
63558: LD_VAR 0 2
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: LD_INT 3
63571: PUSH
63572: LD_INT 4
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: IN
63581: NOT
63582: OR
63583: IFFALSE 63587
// exit ;
63585: GO 63679
// tmp := [ ] ;
63587: LD_ADDR_VAR 0 5
63591: PUSH
63592: EMPTY
63593: ST_TO_ADDR
// for i in units do
63594: LD_ADDR_VAR 0 4
63598: PUSH
63599: LD_VAR 0 1
63603: PUSH
63604: FOR_IN
63605: IFFALSE 63648
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63607: LD_ADDR_VAR 0 5
63611: PUSH
63612: LD_VAR 0 5
63616: PPUSH
63617: LD_VAR 0 5
63621: PUSH
63622: LD_INT 1
63624: PLUS
63625: PPUSH
63626: LD_VAR 0 4
63630: PPUSH
63631: LD_VAR 0 2
63635: PPUSH
63636: CALL_OW 259
63640: PPUSH
63641: CALL_OW 2
63645: ST_TO_ADDR
63646: GO 63604
63648: POP
63649: POP
// if not tmp then
63650: LD_VAR 0 5
63654: NOT
63655: IFFALSE 63659
// exit ;
63657: GO 63679
// result := SortListByListDesc ( units , tmp ) ;
63659: LD_ADDR_VAR 0 3
63663: PUSH
63664: LD_VAR 0 1
63668: PPUSH
63669: LD_VAR 0 5
63673: PPUSH
63674: CALL_OW 77
63678: ST_TO_ADDR
// end ;
63679: LD_VAR 0 3
63683: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63684: LD_INT 0
63686: PPUSH
63687: PPUSH
63688: PPUSH
// result := false ;
63689: LD_ADDR_VAR 0 3
63693: PUSH
63694: LD_INT 0
63696: ST_TO_ADDR
// x := GetX ( building ) ;
63697: LD_ADDR_VAR 0 4
63701: PUSH
63702: LD_VAR 0 2
63706: PPUSH
63707: CALL_OW 250
63711: ST_TO_ADDR
// y := GetY ( building ) ;
63712: LD_ADDR_VAR 0 5
63716: PUSH
63717: LD_VAR 0 2
63721: PPUSH
63722: CALL_OW 251
63726: ST_TO_ADDR
// if not building or not x or not y then
63727: LD_VAR 0 2
63731: NOT
63732: PUSH
63733: LD_VAR 0 4
63737: NOT
63738: OR
63739: PUSH
63740: LD_VAR 0 5
63744: NOT
63745: OR
63746: IFFALSE 63750
// exit ;
63748: GO 63842
// if GetTaskList ( unit ) then
63750: LD_VAR 0 1
63754: PPUSH
63755: CALL_OW 437
63759: IFFALSE 63842
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63761: LD_STRING e
63763: PUSH
63764: LD_VAR 0 1
63768: PPUSH
63769: CALL_OW 437
63773: PUSH
63774: LD_INT 1
63776: ARRAY
63777: PUSH
63778: LD_INT 1
63780: ARRAY
63781: EQUAL
63782: PUSH
63783: LD_VAR 0 4
63787: PUSH
63788: LD_VAR 0 1
63792: PPUSH
63793: CALL_OW 437
63797: PUSH
63798: LD_INT 1
63800: ARRAY
63801: PUSH
63802: LD_INT 2
63804: ARRAY
63805: EQUAL
63806: AND
63807: PUSH
63808: LD_VAR 0 5
63812: PUSH
63813: LD_VAR 0 1
63817: PPUSH
63818: CALL_OW 437
63822: PUSH
63823: LD_INT 1
63825: ARRAY
63826: PUSH
63827: LD_INT 3
63829: ARRAY
63830: EQUAL
63831: AND
63832: IFFALSE 63842
// result := true end ;
63834: LD_ADDR_VAR 0 3
63838: PUSH
63839: LD_INT 1
63841: ST_TO_ADDR
// end ;
63842: LD_VAR 0 3
63846: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63847: LD_INT 0
63849: PPUSH
// result := false ;
63850: LD_ADDR_VAR 0 4
63854: PUSH
63855: LD_INT 0
63857: ST_TO_ADDR
// if GetTaskList ( unit ) then
63858: LD_VAR 0 1
63862: PPUSH
63863: CALL_OW 437
63867: IFFALSE 63950
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63869: LD_STRING M
63871: PUSH
63872: LD_VAR 0 1
63876: PPUSH
63877: CALL_OW 437
63881: PUSH
63882: LD_INT 1
63884: ARRAY
63885: PUSH
63886: LD_INT 1
63888: ARRAY
63889: EQUAL
63890: PUSH
63891: LD_VAR 0 2
63895: PUSH
63896: LD_VAR 0 1
63900: PPUSH
63901: CALL_OW 437
63905: PUSH
63906: LD_INT 1
63908: ARRAY
63909: PUSH
63910: LD_INT 2
63912: ARRAY
63913: EQUAL
63914: AND
63915: PUSH
63916: LD_VAR 0 3
63920: PUSH
63921: LD_VAR 0 1
63925: PPUSH
63926: CALL_OW 437
63930: PUSH
63931: LD_INT 1
63933: ARRAY
63934: PUSH
63935: LD_INT 3
63937: ARRAY
63938: EQUAL
63939: AND
63940: IFFALSE 63950
// result := true ;
63942: LD_ADDR_VAR 0 4
63946: PUSH
63947: LD_INT 1
63949: ST_TO_ADDR
// end ; end ;
63950: LD_VAR 0 4
63954: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63955: LD_INT 0
63957: PPUSH
63958: PPUSH
63959: PPUSH
63960: PPUSH
// if not unit or not area then
63961: LD_VAR 0 1
63965: NOT
63966: PUSH
63967: LD_VAR 0 2
63971: NOT
63972: OR
63973: IFFALSE 63977
// exit ;
63975: GO 64141
// tmp := AreaToList ( area , i ) ;
63977: LD_ADDR_VAR 0 6
63981: PUSH
63982: LD_VAR 0 2
63986: PPUSH
63987: LD_VAR 0 5
63991: PPUSH
63992: CALL_OW 517
63996: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63997: LD_ADDR_VAR 0 5
64001: PUSH
64002: DOUBLE
64003: LD_INT 1
64005: DEC
64006: ST_TO_ADDR
64007: LD_VAR 0 6
64011: PUSH
64012: LD_INT 1
64014: ARRAY
64015: PUSH
64016: FOR_TO
64017: IFFALSE 64139
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64019: LD_ADDR_VAR 0 7
64023: PUSH
64024: LD_VAR 0 6
64028: PUSH
64029: LD_INT 1
64031: ARRAY
64032: PUSH
64033: LD_VAR 0 5
64037: ARRAY
64038: PUSH
64039: LD_VAR 0 6
64043: PUSH
64044: LD_INT 2
64046: ARRAY
64047: PUSH
64048: LD_VAR 0 5
64052: ARRAY
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64058: LD_VAR 0 7
64062: PUSH
64063: LD_INT 1
64065: ARRAY
64066: PPUSH
64067: LD_VAR 0 7
64071: PUSH
64072: LD_INT 2
64074: ARRAY
64075: PPUSH
64076: CALL_OW 428
64080: PUSH
64081: LD_INT 0
64083: EQUAL
64084: IFFALSE 64137
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64086: LD_VAR 0 1
64090: PPUSH
64091: LD_VAR 0 7
64095: PUSH
64096: LD_INT 1
64098: ARRAY
64099: PPUSH
64100: LD_VAR 0 7
64104: PUSH
64105: LD_INT 2
64107: ARRAY
64108: PPUSH
64109: LD_VAR 0 3
64113: PPUSH
64114: CALL_OW 48
// result := IsPlaced ( unit ) ;
64118: LD_ADDR_VAR 0 4
64122: PUSH
64123: LD_VAR 0 1
64127: PPUSH
64128: CALL_OW 305
64132: ST_TO_ADDR
// exit ;
64133: POP
64134: POP
64135: GO 64141
// end ; end ;
64137: GO 64016
64139: POP
64140: POP
// end ;
64141: LD_VAR 0 4
64145: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64146: LD_INT 0
64148: PPUSH
64149: PPUSH
64150: PPUSH
// if not side or side > 8 then
64151: LD_VAR 0 1
64155: NOT
64156: PUSH
64157: LD_VAR 0 1
64161: PUSH
64162: LD_INT 8
64164: GREATER
64165: OR
64166: IFFALSE 64170
// exit ;
64168: GO 64357
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64170: LD_ADDR_VAR 0 4
64174: PUSH
64175: LD_INT 22
64177: PUSH
64178: LD_VAR 0 1
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 21
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PPUSH
64201: CALL_OW 69
64205: ST_TO_ADDR
// if not tmp then
64206: LD_VAR 0 4
64210: NOT
64211: IFFALSE 64215
// exit ;
64213: GO 64357
// enable_addtolog := true ;
64215: LD_ADDR_OWVAR 81
64219: PUSH
64220: LD_INT 1
64222: ST_TO_ADDR
// AddToLog ( [ ) ;
64223: LD_STRING [
64225: PPUSH
64226: CALL_OW 561
// for i in tmp do
64230: LD_ADDR_VAR 0 3
64234: PUSH
64235: LD_VAR 0 4
64239: PUSH
64240: FOR_IN
64241: IFFALSE 64348
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64243: LD_STRING [
64245: PUSH
64246: LD_VAR 0 3
64250: PPUSH
64251: CALL_OW 266
64255: STR
64256: PUSH
64257: LD_STRING , 
64259: STR
64260: PUSH
64261: LD_VAR 0 3
64265: PPUSH
64266: CALL_OW 250
64270: STR
64271: PUSH
64272: LD_STRING , 
64274: STR
64275: PUSH
64276: LD_VAR 0 3
64280: PPUSH
64281: CALL_OW 251
64285: STR
64286: PUSH
64287: LD_STRING , 
64289: STR
64290: PUSH
64291: LD_VAR 0 3
64295: PPUSH
64296: CALL_OW 254
64300: STR
64301: PUSH
64302: LD_STRING , 
64304: STR
64305: PUSH
64306: LD_VAR 0 3
64310: PPUSH
64311: LD_INT 1
64313: PPUSH
64314: CALL_OW 268
64318: STR
64319: PUSH
64320: LD_STRING , 
64322: STR
64323: PUSH
64324: LD_VAR 0 3
64328: PPUSH
64329: LD_INT 2
64331: PPUSH
64332: CALL_OW 268
64336: STR
64337: PUSH
64338: LD_STRING ],
64340: STR
64341: PPUSH
64342: CALL_OW 561
// end ;
64346: GO 64240
64348: POP
64349: POP
// AddToLog ( ]; ) ;
64350: LD_STRING ];
64352: PPUSH
64353: CALL_OW 561
// end ;
64357: LD_VAR 0 2
64361: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64362: LD_INT 0
64364: PPUSH
64365: PPUSH
64366: PPUSH
64367: PPUSH
64368: PPUSH
// if not area or not rate or not max then
64369: LD_VAR 0 1
64373: NOT
64374: PUSH
64375: LD_VAR 0 2
64379: NOT
64380: OR
64381: PUSH
64382: LD_VAR 0 4
64386: NOT
64387: OR
64388: IFFALSE 64392
// exit ;
64390: GO 64584
// while 1 do
64392: LD_INT 1
64394: IFFALSE 64584
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64396: LD_ADDR_VAR 0 9
64400: PUSH
64401: LD_VAR 0 1
64405: PPUSH
64406: LD_INT 1
64408: PPUSH
64409: CALL_OW 287
64413: PUSH
64414: LD_INT 10
64416: MUL
64417: ST_TO_ADDR
// r := rate / 10 ;
64418: LD_ADDR_VAR 0 7
64422: PUSH
64423: LD_VAR 0 2
64427: PUSH
64428: LD_INT 10
64430: DIVREAL
64431: ST_TO_ADDR
// time := 1 1$00 ;
64432: LD_ADDR_VAR 0 8
64436: PUSH
64437: LD_INT 2100
64439: ST_TO_ADDR
// if amount < min then
64440: LD_VAR 0 9
64444: PUSH
64445: LD_VAR 0 3
64449: LESS
64450: IFFALSE 64468
// r := r * 2 else
64452: LD_ADDR_VAR 0 7
64456: PUSH
64457: LD_VAR 0 7
64461: PUSH
64462: LD_INT 2
64464: MUL
64465: ST_TO_ADDR
64466: GO 64494
// if amount > max then
64468: LD_VAR 0 9
64472: PUSH
64473: LD_VAR 0 4
64477: GREATER
64478: IFFALSE 64494
// r := r / 2 ;
64480: LD_ADDR_VAR 0 7
64484: PUSH
64485: LD_VAR 0 7
64489: PUSH
64490: LD_INT 2
64492: DIVREAL
64493: ST_TO_ADDR
// time := time / r ;
64494: LD_ADDR_VAR 0 8
64498: PUSH
64499: LD_VAR 0 8
64503: PUSH
64504: LD_VAR 0 7
64508: DIVREAL
64509: ST_TO_ADDR
// if time < 0 then
64510: LD_VAR 0 8
64514: PUSH
64515: LD_INT 0
64517: LESS
64518: IFFALSE 64535
// time := time * - 1 ;
64520: LD_ADDR_VAR 0 8
64524: PUSH
64525: LD_VAR 0 8
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: MUL
64534: ST_TO_ADDR
// wait ( time ) ;
64535: LD_VAR 0 8
64539: PPUSH
64540: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64544: LD_INT 35
64546: PPUSH
64547: LD_INT 875
64549: PPUSH
64550: CALL_OW 12
64554: PPUSH
64555: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64559: LD_INT 1
64561: PPUSH
64562: LD_INT 5
64564: PPUSH
64565: CALL_OW 12
64569: PPUSH
64570: LD_VAR 0 1
64574: PPUSH
64575: LD_INT 1
64577: PPUSH
64578: CALL_OW 55
// end ;
64582: GO 64392
// end ;
64584: LD_VAR 0 5
64588: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64589: LD_INT 0
64591: PPUSH
64592: PPUSH
64593: PPUSH
64594: PPUSH
64595: PPUSH
64596: PPUSH
64597: PPUSH
64598: PPUSH
// if not turrets or not factories then
64599: LD_VAR 0 1
64603: NOT
64604: PUSH
64605: LD_VAR 0 2
64609: NOT
64610: OR
64611: IFFALSE 64615
// exit ;
64613: GO 64922
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64615: LD_ADDR_VAR 0 10
64619: PUSH
64620: LD_INT 5
64622: PUSH
64623: LD_INT 6
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: LD_INT 4
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 3
64642: PUSH
64643: LD_INT 5
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 24
64657: PUSH
64658: LD_INT 25
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 23
64667: PUSH
64668: LD_INT 27
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 42
64681: PUSH
64682: LD_INT 43
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 44
64691: PUSH
64692: LD_INT 46
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 45
64701: PUSH
64702: LD_INT 47
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: LIST
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: ST_TO_ADDR
// result := [ ] ;
64719: LD_ADDR_VAR 0 3
64723: PUSH
64724: EMPTY
64725: ST_TO_ADDR
// for i in turrets do
64726: LD_ADDR_VAR 0 4
64730: PUSH
64731: LD_VAR 0 1
64735: PUSH
64736: FOR_IN
64737: IFFALSE 64920
// begin nat := GetNation ( i ) ;
64739: LD_ADDR_VAR 0 7
64743: PUSH
64744: LD_VAR 0 4
64748: PPUSH
64749: CALL_OW 248
64753: ST_TO_ADDR
// weapon := 0 ;
64754: LD_ADDR_VAR 0 8
64758: PUSH
64759: LD_INT 0
64761: ST_TO_ADDR
// if not nat then
64762: LD_VAR 0 7
64766: NOT
64767: IFFALSE 64771
// continue ;
64769: GO 64736
// for j in list [ nat ] do
64771: LD_ADDR_VAR 0 5
64775: PUSH
64776: LD_VAR 0 10
64780: PUSH
64781: LD_VAR 0 7
64785: ARRAY
64786: PUSH
64787: FOR_IN
64788: IFFALSE 64829
// if GetBWeapon ( i ) = j [ 1 ] then
64790: LD_VAR 0 4
64794: PPUSH
64795: CALL_OW 269
64799: PUSH
64800: LD_VAR 0 5
64804: PUSH
64805: LD_INT 1
64807: ARRAY
64808: EQUAL
64809: IFFALSE 64827
// begin weapon := j [ 2 ] ;
64811: LD_ADDR_VAR 0 8
64815: PUSH
64816: LD_VAR 0 5
64820: PUSH
64821: LD_INT 2
64823: ARRAY
64824: ST_TO_ADDR
// break ;
64825: GO 64829
// end ;
64827: GO 64787
64829: POP
64830: POP
// if not weapon then
64831: LD_VAR 0 8
64835: NOT
64836: IFFALSE 64840
// continue ;
64838: GO 64736
// for k in factories do
64840: LD_ADDR_VAR 0 6
64844: PUSH
64845: LD_VAR 0 2
64849: PUSH
64850: FOR_IN
64851: IFFALSE 64916
// begin weapons := AvailableWeaponList ( k ) ;
64853: LD_ADDR_VAR 0 9
64857: PUSH
64858: LD_VAR 0 6
64862: PPUSH
64863: CALL_OW 478
64867: ST_TO_ADDR
// if not weapons then
64868: LD_VAR 0 9
64872: NOT
64873: IFFALSE 64877
// continue ;
64875: GO 64850
// if weapon in weapons then
64877: LD_VAR 0 8
64881: PUSH
64882: LD_VAR 0 9
64886: IN
64887: IFFALSE 64914
// begin result := [ i , weapon ] ;
64889: LD_ADDR_VAR 0 3
64893: PUSH
64894: LD_VAR 0 4
64898: PUSH
64899: LD_VAR 0 8
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: ST_TO_ADDR
// exit ;
64908: POP
64909: POP
64910: POP
64911: POP
64912: GO 64922
// end ; end ;
64914: GO 64850
64916: POP
64917: POP
// end ;
64918: GO 64736
64920: POP
64921: POP
// end ;
64922: LD_VAR 0 3
64926: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64927: LD_INT 0
64929: PPUSH
// if not side or side > 8 then
64930: LD_VAR 0 3
64934: NOT
64935: PUSH
64936: LD_VAR 0 3
64940: PUSH
64941: LD_INT 8
64943: GREATER
64944: OR
64945: IFFALSE 64949
// exit ;
64947: GO 65008
// if not range then
64949: LD_VAR 0 4
64953: NOT
64954: IFFALSE 64965
// range := - 12 ;
64956: LD_ADDR_VAR 0 4
64960: PUSH
64961: LD_INT 12
64963: NEG
64964: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64965: LD_VAR 0 1
64969: PPUSH
64970: LD_VAR 0 2
64974: PPUSH
64975: LD_VAR 0 3
64979: PPUSH
64980: LD_VAR 0 4
64984: PPUSH
64985: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64989: LD_VAR 0 1
64993: PPUSH
64994: LD_VAR 0 2
64998: PPUSH
64999: LD_VAR 0 3
65003: PPUSH
65004: CALL_OW 331
// end ;
65008: LD_VAR 0 5
65012: RET
// export function Video ( mode ) ; begin
65013: LD_INT 0
65015: PPUSH
// ingame_video = mode ;
65016: LD_ADDR_OWVAR 52
65020: PUSH
65021: LD_VAR 0 1
65025: ST_TO_ADDR
// interface_hidden = mode ;
65026: LD_ADDR_OWVAR 54
65030: PUSH
65031: LD_VAR 0 1
65035: ST_TO_ADDR
// end ;
65036: LD_VAR 0 2
65040: RET
// export function Join ( array , element ) ; begin
65041: LD_INT 0
65043: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65044: LD_ADDR_VAR 0 3
65048: PUSH
65049: LD_VAR 0 1
65053: PPUSH
65054: LD_VAR 0 1
65058: PUSH
65059: LD_INT 1
65061: PLUS
65062: PPUSH
65063: LD_VAR 0 2
65067: PPUSH
65068: CALL_OW 1
65072: ST_TO_ADDR
// end ;
65073: LD_VAR 0 3
65077: RET
// export function JoinUnion ( array , element ) ; begin
65078: LD_INT 0
65080: PPUSH
// result := array union element ;
65081: LD_ADDR_VAR 0 3
65085: PUSH
65086: LD_VAR 0 1
65090: PUSH
65091: LD_VAR 0 2
65095: UNION
65096: ST_TO_ADDR
// end ;
65097: LD_VAR 0 3
65101: RET
// export function GetBehemoths ( side ) ; begin
65102: LD_INT 0
65104: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65105: LD_ADDR_VAR 0 2
65109: PUSH
65110: LD_INT 22
65112: PUSH
65113: LD_VAR 0 1
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 31
65124: PUSH
65125: LD_INT 25
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PPUSH
65136: CALL_OW 69
65140: ST_TO_ADDR
// end ;
65141: LD_VAR 0 2
65145: RET
// export function Shuffle ( array ) ; var i , index ; begin
65146: LD_INT 0
65148: PPUSH
65149: PPUSH
65150: PPUSH
// result := [ ] ;
65151: LD_ADDR_VAR 0 2
65155: PUSH
65156: EMPTY
65157: ST_TO_ADDR
// if not array then
65158: LD_VAR 0 1
65162: NOT
65163: IFFALSE 65167
// exit ;
65165: GO 65266
// Randomize ;
65167: CALL_OW 10
// for i = array downto 1 do
65171: LD_ADDR_VAR 0 3
65175: PUSH
65176: DOUBLE
65177: LD_VAR 0 1
65181: INC
65182: ST_TO_ADDR
65183: LD_INT 1
65185: PUSH
65186: FOR_DOWNTO
65187: IFFALSE 65264
// begin index := rand ( 1 , array ) ;
65189: LD_ADDR_VAR 0 4
65193: PUSH
65194: LD_INT 1
65196: PPUSH
65197: LD_VAR 0 1
65201: PPUSH
65202: CALL_OW 12
65206: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65207: LD_ADDR_VAR 0 2
65211: PUSH
65212: LD_VAR 0 2
65216: PPUSH
65217: LD_VAR 0 2
65221: PUSH
65222: LD_INT 1
65224: PLUS
65225: PPUSH
65226: LD_VAR 0 1
65230: PUSH
65231: LD_VAR 0 4
65235: ARRAY
65236: PPUSH
65237: CALL_OW 2
65241: ST_TO_ADDR
// array := Delete ( array , index ) ;
65242: LD_ADDR_VAR 0 1
65246: PUSH
65247: LD_VAR 0 1
65251: PPUSH
65252: LD_VAR 0 4
65256: PPUSH
65257: CALL_OW 3
65261: ST_TO_ADDR
// end ;
65262: GO 65186
65264: POP
65265: POP
// end ;
65266: LD_VAR 0 2
65270: RET
// export function GetBaseMaterials ( base ) ; begin
65271: LD_INT 0
65273: PPUSH
// result := [ 0 , 0 , 0 ] ;
65274: LD_ADDR_VAR 0 2
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// if not base then
65293: LD_VAR 0 1
65297: NOT
65298: IFFALSE 65302
// exit ;
65300: GO 65351
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65302: LD_ADDR_VAR 0 2
65306: PUSH
65307: LD_VAR 0 1
65311: PPUSH
65312: LD_INT 1
65314: PPUSH
65315: CALL_OW 275
65319: PUSH
65320: LD_VAR 0 1
65324: PPUSH
65325: LD_INT 2
65327: PPUSH
65328: CALL_OW 275
65332: PUSH
65333: LD_VAR 0 1
65337: PPUSH
65338: LD_INT 3
65340: PPUSH
65341: CALL_OW 275
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: ST_TO_ADDR
// end ;
65351: LD_VAR 0 2
65355: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65356: LD_INT 0
65358: PPUSH
65359: PPUSH
// result := array ;
65360: LD_ADDR_VAR 0 3
65364: PUSH
65365: LD_VAR 0 1
65369: ST_TO_ADDR
// if size > 0 then
65370: LD_VAR 0 2
65374: PUSH
65375: LD_INT 0
65377: GREATER
65378: IFFALSE 65424
// for i := array downto size do
65380: LD_ADDR_VAR 0 4
65384: PUSH
65385: DOUBLE
65386: LD_VAR 0 1
65390: INC
65391: ST_TO_ADDR
65392: LD_VAR 0 2
65396: PUSH
65397: FOR_DOWNTO
65398: IFFALSE 65422
// result := Delete ( result , result ) ;
65400: LD_ADDR_VAR 0 3
65404: PUSH
65405: LD_VAR 0 3
65409: PPUSH
65410: LD_VAR 0 3
65414: PPUSH
65415: CALL_OW 3
65419: ST_TO_ADDR
65420: GO 65397
65422: POP
65423: POP
// end ;
65424: LD_VAR 0 3
65428: RET
// export function ComExit ( unit ) ; var tmp ; begin
65429: LD_INT 0
65431: PPUSH
65432: PPUSH
// if not IsInUnit ( unit ) then
65433: LD_VAR 0 1
65437: PPUSH
65438: CALL_OW 310
65442: NOT
65443: IFFALSE 65447
// exit ;
65445: GO 65507
// tmp := IsInUnit ( unit ) ;
65447: LD_ADDR_VAR 0 3
65451: PUSH
65452: LD_VAR 0 1
65456: PPUSH
65457: CALL_OW 310
65461: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65462: LD_VAR 0 3
65466: PPUSH
65467: CALL_OW 247
65471: PUSH
65472: LD_INT 2
65474: EQUAL
65475: IFFALSE 65488
// ComExitVehicle ( unit ) else
65477: LD_VAR 0 1
65481: PPUSH
65482: CALL_OW 121
65486: GO 65497
// ComExitBuilding ( unit ) ;
65488: LD_VAR 0 1
65492: PPUSH
65493: CALL_OW 122
// result := tmp ;
65497: LD_ADDR_VAR 0 2
65501: PUSH
65502: LD_VAR 0 3
65506: ST_TO_ADDR
// end ;
65507: LD_VAR 0 2
65511: RET
// export function ComExitAll ( units ) ; var i ; begin
65512: LD_INT 0
65514: PPUSH
65515: PPUSH
// if not units then
65516: LD_VAR 0 1
65520: NOT
65521: IFFALSE 65525
// exit ;
65523: GO 65551
// for i in units do
65525: LD_ADDR_VAR 0 3
65529: PUSH
65530: LD_VAR 0 1
65534: PUSH
65535: FOR_IN
65536: IFFALSE 65549
// ComExit ( i ) ;
65538: LD_VAR 0 3
65542: PPUSH
65543: CALL 65429 0 1
65547: GO 65535
65549: POP
65550: POP
// end ;
65551: LD_VAR 0 2
65555: RET
// export function ResetHc ; begin
65556: LD_INT 0
65558: PPUSH
// InitHc ;
65559: CALL_OW 19
// hc_importance := 0 ;
65563: LD_ADDR_OWVAR 32
65567: PUSH
65568: LD_INT 0
65570: ST_TO_ADDR
// end ;
65571: LD_VAR 0 1
65575: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65576: LD_INT 0
65578: PPUSH
65579: PPUSH
65580: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65581: LD_ADDR_VAR 0 6
65585: PUSH
65586: LD_VAR 0 1
65590: PUSH
65591: LD_VAR 0 3
65595: PLUS
65596: PUSH
65597: LD_INT 2
65599: DIV
65600: ST_TO_ADDR
// if _x < 0 then
65601: LD_VAR 0 6
65605: PUSH
65606: LD_INT 0
65608: LESS
65609: IFFALSE 65626
// _x := _x * - 1 ;
65611: LD_ADDR_VAR 0 6
65615: PUSH
65616: LD_VAR 0 6
65620: PUSH
65621: LD_INT 1
65623: NEG
65624: MUL
65625: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65626: LD_ADDR_VAR 0 7
65630: PUSH
65631: LD_VAR 0 2
65635: PUSH
65636: LD_VAR 0 4
65640: PLUS
65641: PUSH
65642: LD_INT 2
65644: DIV
65645: ST_TO_ADDR
// if _y < 0 then
65646: LD_VAR 0 7
65650: PUSH
65651: LD_INT 0
65653: LESS
65654: IFFALSE 65671
// _y := _y * - 1 ;
65656: LD_ADDR_VAR 0 7
65660: PUSH
65661: LD_VAR 0 7
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: MUL
65670: ST_TO_ADDR
// result := [ _x , _y ] ;
65671: LD_ADDR_VAR 0 5
65675: PUSH
65676: LD_VAR 0 6
65680: PUSH
65681: LD_VAR 0 7
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// end ;
65690: LD_VAR 0 5
65694: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65695: LD_INT 0
65697: PPUSH
65698: PPUSH
65699: PPUSH
65700: PPUSH
// task := GetTaskList ( unit ) ;
65701: LD_ADDR_VAR 0 7
65705: PUSH
65706: LD_VAR 0 1
65710: PPUSH
65711: CALL_OW 437
65715: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65716: LD_VAR 0 7
65720: NOT
65721: PUSH
65722: LD_VAR 0 1
65726: PPUSH
65727: LD_VAR 0 2
65731: PPUSH
65732: CALL_OW 308
65736: NOT
65737: AND
65738: IFFALSE 65742
// exit ;
65740: GO 65860
// if IsInArea ( unit , area ) then
65742: LD_VAR 0 1
65746: PPUSH
65747: LD_VAR 0 2
65751: PPUSH
65752: CALL_OW 308
65756: IFFALSE 65774
// begin ComMoveToArea ( unit , goAway ) ;
65758: LD_VAR 0 1
65762: PPUSH
65763: LD_VAR 0 3
65767: PPUSH
65768: CALL_OW 113
// exit ;
65772: GO 65860
// end ; if task [ 1 ] [ 1 ] <> M then
65774: LD_VAR 0 7
65778: PUSH
65779: LD_INT 1
65781: ARRAY
65782: PUSH
65783: LD_INT 1
65785: ARRAY
65786: PUSH
65787: LD_STRING M
65789: NONEQUAL
65790: IFFALSE 65794
// exit ;
65792: GO 65860
// x := task [ 1 ] [ 2 ] ;
65794: LD_ADDR_VAR 0 5
65798: PUSH
65799: LD_VAR 0 7
65803: PUSH
65804: LD_INT 1
65806: ARRAY
65807: PUSH
65808: LD_INT 2
65810: ARRAY
65811: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65812: LD_ADDR_VAR 0 6
65816: PUSH
65817: LD_VAR 0 7
65821: PUSH
65822: LD_INT 1
65824: ARRAY
65825: PUSH
65826: LD_INT 3
65828: ARRAY
65829: ST_TO_ADDR
// if InArea ( x , y , area ) then
65830: LD_VAR 0 5
65834: PPUSH
65835: LD_VAR 0 6
65839: PPUSH
65840: LD_VAR 0 2
65844: PPUSH
65845: CALL_OW 309
65849: IFFALSE 65860
// ComStop ( unit ) ;
65851: LD_VAR 0 1
65855: PPUSH
65856: CALL_OW 141
// end ;
65860: LD_VAR 0 4
65864: RET
// export function Abs ( value ) ; begin
65865: LD_INT 0
65867: PPUSH
// result := value ;
65868: LD_ADDR_VAR 0 2
65872: PUSH
65873: LD_VAR 0 1
65877: ST_TO_ADDR
// if value < 0 then
65878: LD_VAR 0 1
65882: PUSH
65883: LD_INT 0
65885: LESS
65886: IFFALSE 65903
// result := value * - 1 ;
65888: LD_ADDR_VAR 0 2
65892: PUSH
65893: LD_VAR 0 1
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: MUL
65902: ST_TO_ADDR
// end ;
65903: LD_VAR 0 2
65907: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65908: LD_INT 0
65910: PPUSH
65911: PPUSH
65912: PPUSH
65913: PPUSH
65914: PPUSH
65915: PPUSH
65916: PPUSH
65917: PPUSH
// if not unit or not building then
65918: LD_VAR 0 1
65922: NOT
65923: PUSH
65924: LD_VAR 0 2
65928: NOT
65929: OR
65930: IFFALSE 65934
// exit ;
65932: GO 66160
// x := GetX ( building ) ;
65934: LD_ADDR_VAR 0 4
65938: PUSH
65939: LD_VAR 0 2
65943: PPUSH
65944: CALL_OW 250
65948: ST_TO_ADDR
// y := GetY ( building ) ;
65949: LD_ADDR_VAR 0 6
65953: PUSH
65954: LD_VAR 0 2
65958: PPUSH
65959: CALL_OW 251
65963: ST_TO_ADDR
// d := GetDir ( building ) ;
65964: LD_ADDR_VAR 0 8
65968: PUSH
65969: LD_VAR 0 2
65973: PPUSH
65974: CALL_OW 254
65978: ST_TO_ADDR
// r := 4 ;
65979: LD_ADDR_VAR 0 9
65983: PUSH
65984: LD_INT 4
65986: ST_TO_ADDR
// for i := 1 to 5 do
65987: LD_ADDR_VAR 0 10
65991: PUSH
65992: DOUBLE
65993: LD_INT 1
65995: DEC
65996: ST_TO_ADDR
65997: LD_INT 5
65999: PUSH
66000: FOR_TO
66001: IFFALSE 66158
// begin _x := ShiftX ( x , d , r + i ) ;
66003: LD_ADDR_VAR 0 5
66007: PUSH
66008: LD_VAR 0 4
66012: PPUSH
66013: LD_VAR 0 8
66017: PPUSH
66018: LD_VAR 0 9
66022: PUSH
66023: LD_VAR 0 10
66027: PLUS
66028: PPUSH
66029: CALL_OW 272
66033: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66034: LD_ADDR_VAR 0 7
66038: PUSH
66039: LD_VAR 0 6
66043: PPUSH
66044: LD_VAR 0 8
66048: PPUSH
66049: LD_VAR 0 9
66053: PUSH
66054: LD_VAR 0 10
66058: PLUS
66059: PPUSH
66060: CALL_OW 273
66064: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66065: LD_VAR 0 5
66069: PPUSH
66070: LD_VAR 0 7
66074: PPUSH
66075: CALL_OW 488
66079: PUSH
66080: LD_VAR 0 5
66084: PPUSH
66085: LD_VAR 0 7
66089: PPUSH
66090: CALL_OW 428
66094: PPUSH
66095: CALL_OW 247
66099: PUSH
66100: LD_INT 3
66102: PUSH
66103: LD_INT 2
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: IN
66110: NOT
66111: AND
66112: IFFALSE 66156
// begin ComMoveXY ( unit , _x , _y ) ;
66114: LD_VAR 0 1
66118: PPUSH
66119: LD_VAR 0 5
66123: PPUSH
66124: LD_VAR 0 7
66128: PPUSH
66129: CALL_OW 111
// result := [ _x , _y ] ;
66133: LD_ADDR_VAR 0 3
66137: PUSH
66138: LD_VAR 0 5
66142: PUSH
66143: LD_VAR 0 7
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: ST_TO_ADDR
// exit ;
66152: POP
66153: POP
66154: GO 66160
// end ; end ;
66156: GO 66000
66158: POP
66159: POP
// end ;
66160: LD_VAR 0 3
66164: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66165: LD_INT 0
66167: PPUSH
66168: PPUSH
66169: PPUSH
// result := 0 ;
66170: LD_ADDR_VAR 0 3
66174: PUSH
66175: LD_INT 0
66177: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66178: LD_VAR 0 1
66182: PUSH
66183: LD_INT 0
66185: LESS
66186: PUSH
66187: LD_VAR 0 1
66191: PUSH
66192: LD_INT 8
66194: GREATER
66195: OR
66196: PUSH
66197: LD_VAR 0 2
66201: PUSH
66202: LD_INT 0
66204: LESS
66205: OR
66206: PUSH
66207: LD_VAR 0 2
66211: PUSH
66212: LD_INT 8
66214: GREATER
66215: OR
66216: IFFALSE 66220
// exit ;
66218: GO 66295
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66220: LD_ADDR_VAR 0 4
66224: PUSH
66225: LD_INT 22
66227: PUSH
66228: LD_VAR 0 2
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PPUSH
66237: CALL_OW 69
66241: PUSH
66242: FOR_IN
66243: IFFALSE 66293
// begin un := UnitShoot ( i ) ;
66245: LD_ADDR_VAR 0 5
66249: PUSH
66250: LD_VAR 0 4
66254: PPUSH
66255: CALL_OW 504
66259: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66260: LD_VAR 0 5
66264: PPUSH
66265: CALL_OW 255
66269: PUSH
66270: LD_VAR 0 1
66274: EQUAL
66275: IFFALSE 66291
// begin result := un ;
66277: LD_ADDR_VAR 0 3
66281: PUSH
66282: LD_VAR 0 5
66286: ST_TO_ADDR
// exit ;
66287: POP
66288: POP
66289: GO 66295
// end ; end ;
66291: GO 66242
66293: POP
66294: POP
// end ;
66295: LD_VAR 0 3
66299: RET
// export function GetCargoBay ( units ) ; begin
66300: LD_INT 0
66302: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66303: LD_ADDR_VAR 0 2
66307: PUSH
66308: LD_VAR 0 1
66312: PPUSH
66313: LD_INT 2
66315: PUSH
66316: LD_INT 34
66318: PUSH
66319: LD_INT 12
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 34
66328: PUSH
66329: LD_INT 51
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 34
66338: PUSH
66339: LD_INT 32
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 34
66348: PUSH
66349: LD_EXP 22
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: PPUSH
66365: CALL_OW 72
66369: ST_TO_ADDR
// end ;
66370: LD_VAR 0 2
66374: RET
