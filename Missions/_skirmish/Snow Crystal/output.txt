// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: IFFALSE 10654
// YouLost ( jota-lose ) ;
10647: LD_STRING jota-lose
10649: PPUSH
10650: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10654: LD_EXP 1
10658: PUSH
10659: LD_INT 2
10661: EQUAL
10662: PUSH
10663: LD_EXP 8
10667: PUSH
10668: LD_INT 0
10670: EQUAL
10671: AND
10672: IFFALSE 10987
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 255
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: LD_INT 11
10695: PPUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 70
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 10
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 30
10746: PUSH
10747: LD_INT 8
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: DIFF
10778: IN
10779: AND
10780: IFFALSE 10866
// begin ai_build := ai_build ^ GetBType ( un ) ;
10782: LD_ADDR_EXP 10
10786: PUSH
10787: LD_EXP 10
10791: PUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 266
10801: ADD
10802: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10803: LD_ADDR_EXP 10
10807: PUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 250
10822: ADD
10823: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10824: LD_ADDR_EXP 10
10828: PUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 251
10843: ADD
10844: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10845: LD_ADDR_EXP 10
10849: PUSH
10850: LD_EXP 10
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 254
10864: ADD
10865: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 255
10875: PUSH
10876: LD_INT 1
10878: EQUAL
10879: PUSH
10880: LD_VAR 0 1
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: IN
10900: AND
10901: IFFALSE 10987
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10903: LD_ADDR_EXP 11
10907: PUSH
10908: LD_EXP 11
10912: PUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 265
10922: ADD
10923: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10924: LD_ADDR_EXP 11
10928: PUSH
10929: LD_EXP 11
10933: PUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 262
10943: ADD
10944: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10945: LD_ADDR_EXP 11
10949: PUSH
10950: LD_EXP 11
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: CALL_OW 263
10964: ADD
10965: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10966: LD_ADDR_EXP 11
10970: PUSH
10971: LD_EXP 11
10975: PUSH
10976: LD_VAR 0 1
10980: PPUSH
10981: CALL_OW 264
10985: ADD
10986: ST_TO_ADDR
// end ; end ; end ;
10987: PPOPN 1
10989: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10990: LD_EXP 1
10994: PUSH
10995: LD_INT 1
10997: EQUAL
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PUSH
11028: LD_INT 0
11030: EQUAL
11031: AND
11032: IFFALSE 11044
11034: GO 11036
11036: DISABLE
// YouLost ( peo-lose ) ;
11037: LD_STRING peo-lose
11039: PPUSH
11040: CALL_OW 104
11044: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11045: LD_EXP 1
11049: PUSH
11050: LD_INT 2
11052: EQUAL
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: PUSH
11083: LD_INT 0
11085: EQUAL
11086: AND
11087: IFFALSE 11099
11089: GO 11091
11091: DISABLE
// YouLost ( peo-lose ) ;
11092: LD_STRING peo-lose
11094: PPUSH
11095: CALL_OW 104
11099: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
11100: LD_OWVAR 2
11104: PPUSH
11105: CALL 10510 0 1
11109: PUSH
11110: LD_EXP 5
11114: GREATEREQUAL
11115: IFFALSE 11201
11117: GO 11119
11119: DISABLE
11120: LD_INT 0
11122: PPUSH
// begin if GetSide ( jota_base ) = your_side then
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 255
11130: PUSH
11131: LD_OWVAR 2
11135: EQUAL
11136: IFFALSE 11179
// begin for i = 1 to 3 do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: DOUBLE
11144: LD_INT 1
11146: DEC
11147: ST_TO_ADDR
11148: LD_INT 3
11150: PUSH
11151: FOR_TO
11152: IFFALSE 11166
// AddMedal ( med , 1 ) ;
11154: LD_STRING med
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 101
11164: GO 11151
11166: POP
11167: POP
// GiveMedals ( MAIN ) ;
11168: LD_STRING MAIN
11170: PPUSH
11171: CALL_OW 102
// YouWin ;
11175: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: LD_OWVAR 2
11191: NONEQUAL
11192: IFFALSE 11201
// YouLost ( source ) ;
11194: LD_STRING source
11196: PPUSH
11197: CALL_OW 104
// end ; end_of_file
11201: PPOPN 1
11203: END
// every 2 2$05 + 0 0$11 do
11204: GO 11206
11206: DISABLE
// begin enable ;
11207: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11208: LD_INT 1
11210: PPUSH
11211: LD_INT 5
11213: PPUSH
11214: CALL_OW 12
11218: PPUSH
11219: LD_INT 7
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11229: LD_INT 350
11231: PPUSH
11232: LD_INT 1295
11234: PPUSH
11235: CALL_OW 12
11239: PPUSH
11240: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 5
11249: PPUSH
11250: CALL_OW 12
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 57
// end ;
11262: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11263: LD_EXP 1
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: PUSH
11272: LD_EXP 8
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: AND
11281: IFFALSE 11371
11283: GO 11285
11285: DISABLE
// begin enable ;
11286: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 7
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11308: LD_INT 350
11310: PPUSH
11311: LD_INT 1750
11313: PPUSH
11314: CALL_OW 12
11318: PPUSH
11319: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11323: LD_EXP 6
11327: PUSH
11328: LD_INT 73500
11330: PUSH
11331: LD_INT 63000
11333: PUSH
11334: LD_INT 52500
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_EXP 2
11346: ARRAY
11347: LESSEQUAL
11348: IFFALSE 11371
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 5
11355: PPUSH
11356: CALL_OW 12
11360: PPUSH
11361: LD_INT 12
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 55
// end ; end_of_file
11371: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: CALL 24815 0 3
// end ;
11391: PPOPN 3
11393: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL 24823 0 1
// end ; end_of_file
11403: PPOPN 1
11405: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11406: LD_INT 0
11408: PPUSH
// ar_miner := 81 ;
11409: LD_ADDR_EXP 28
11413: PUSH
11414: LD_INT 81
11416: ST_TO_ADDR
// ar_crane := 88 ;
11417: LD_ADDR_EXP 27
11421: PUSH
11422: LD_INT 88
11424: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11425: LD_ADDR_EXP 22
11429: PUSH
11430: LD_INT 89
11432: ST_TO_ADDR
// us_hack := 99 ;
11433: LD_ADDR_EXP 23
11437: PUSH
11438: LD_INT 99
11440: ST_TO_ADDR
// us_artillery := 97 ;
11441: LD_ADDR_EXP 24
11445: PUSH
11446: LD_INT 97
11448: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11449: LD_ADDR_EXP 25
11453: PUSH
11454: LD_INT 91
11456: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11457: LD_ADDR_EXP 26
11461: PUSH
11462: LD_INT 92
11464: ST_TO_ADDR
// ru_radar := 98 ;
11465: LD_ADDR_EXP 21
11469: PUSH
11470: LD_INT 98
11472: ST_TO_ADDR
// tech_Artillery := 80 ;
11473: LD_ADDR_EXP 29
11477: PUSH
11478: LD_INT 80
11480: ST_TO_ADDR
// tech_RadMat := 81 ;
11481: LD_ADDR_EXP 30
11485: PUSH
11486: LD_INT 81
11488: ST_TO_ADDR
// tech_BasicTools := 82 ;
11489: LD_ADDR_EXP 31
11493: PUSH
11494: LD_INT 82
11496: ST_TO_ADDR
// tech_Cargo := 83 ;
11497: LD_ADDR_EXP 32
11501: PUSH
11502: LD_INT 83
11504: ST_TO_ADDR
// tech_Track := 84 ;
11505: LD_ADDR_EXP 33
11509: PUSH
11510: LD_INT 84
11512: ST_TO_ADDR
// tech_Crane := 85 ;
11513: LD_ADDR_EXP 34
11517: PUSH
11518: LD_INT 85
11520: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11521: LD_ADDR_EXP 35
11525: PUSH
11526: LD_INT 86
11528: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11529: LD_ADDR_EXP 36
11533: PUSH
11534: LD_INT 87
11536: ST_TO_ADDR
// end ;
11537: LD_VAR 0 1
11541: RET
// every 1 do
11542: GO 11544
11544: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11545: CALL 11406 0 0
11549: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11550: LD_VAR 0 2
11554: PUSH
11555: LD_INT 100
11557: EQUAL
11558: IFFALSE 12507
// begin if not StreamModeActive then
11560: LD_EXP 37
11564: NOT
11565: IFFALSE 11575
// StreamModeActive := true ;
11567: LD_ADDR_EXP 37
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
// if p3 = 0 then
11575: LD_VAR 0 3
11579: PUSH
11580: LD_INT 0
11582: EQUAL
11583: IFFALSE 11589
// InitStreamMode ;
11585: CALL 12665 0 0
// if p3 = 1 then
11589: LD_VAR 0 3
11593: PUSH
11594: LD_INT 1
11596: EQUAL
11597: IFFALSE 11607
// sRocket := true ;
11599: LD_ADDR_EXP 42
11603: PUSH
11604: LD_INT 1
11606: ST_TO_ADDR
// if p3 = 2 then
11607: LD_VAR 0 3
11611: PUSH
11612: LD_INT 2
11614: EQUAL
11615: IFFALSE 11625
// sSpeed := true ;
11617: LD_ADDR_EXP 41
11621: PUSH
11622: LD_INT 1
11624: ST_TO_ADDR
// if p3 = 3 then
11625: LD_VAR 0 3
11629: PUSH
11630: LD_INT 3
11632: EQUAL
11633: IFFALSE 11643
// sEngine := true ;
11635: LD_ADDR_EXP 43
11639: PUSH
11640: LD_INT 1
11642: ST_TO_ADDR
// if p3 = 4 then
11643: LD_VAR 0 3
11647: PUSH
11648: LD_INT 4
11650: EQUAL
11651: IFFALSE 11661
// sSpec := true ;
11653: LD_ADDR_EXP 40
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// if p3 = 5 then
11661: LD_VAR 0 3
11665: PUSH
11666: LD_INT 5
11668: EQUAL
11669: IFFALSE 11679
// sLevel := true ;
11671: LD_ADDR_EXP 44
11675: PUSH
11676: LD_INT 1
11678: ST_TO_ADDR
// if p3 = 6 then
11679: LD_VAR 0 3
11683: PUSH
11684: LD_INT 6
11686: EQUAL
11687: IFFALSE 11697
// sArmoury := true ;
11689: LD_ADDR_EXP 45
11693: PUSH
11694: LD_INT 1
11696: ST_TO_ADDR
// if p3 = 7 then
11697: LD_VAR 0 3
11701: PUSH
11702: LD_INT 7
11704: EQUAL
11705: IFFALSE 11715
// sRadar := true ;
11707: LD_ADDR_EXP 46
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// if p3 = 8 then
11715: LD_VAR 0 3
11719: PUSH
11720: LD_INT 8
11722: EQUAL
11723: IFFALSE 11733
// sBunker := true ;
11725: LD_ADDR_EXP 47
11729: PUSH
11730: LD_INT 1
11732: ST_TO_ADDR
// if p3 = 9 then
11733: LD_VAR 0 3
11737: PUSH
11738: LD_INT 9
11740: EQUAL
11741: IFFALSE 11751
// sHack := true ;
11743: LD_ADDR_EXP 48
11747: PUSH
11748: LD_INT 1
11750: ST_TO_ADDR
// if p3 = 10 then
11751: LD_VAR 0 3
11755: PUSH
11756: LD_INT 10
11758: EQUAL
11759: IFFALSE 11769
// sFire := true ;
11761: LD_ADDR_EXP 49
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// if p3 = 11 then
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 11
11776: EQUAL
11777: IFFALSE 11787
// sRefresh := true ;
11779: LD_ADDR_EXP 50
11783: PUSH
11784: LD_INT 1
11786: ST_TO_ADDR
// if p3 = 12 then
11787: LD_VAR 0 3
11791: PUSH
11792: LD_INT 12
11794: EQUAL
11795: IFFALSE 11805
// sExp := true ;
11797: LD_ADDR_EXP 51
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// if p3 = 13 then
11805: LD_VAR 0 3
11809: PUSH
11810: LD_INT 13
11812: EQUAL
11813: IFFALSE 11823
// sDepot := true ;
11815: LD_ADDR_EXP 52
11819: PUSH
11820: LD_INT 1
11822: ST_TO_ADDR
// if p3 = 14 then
11823: LD_VAR 0 3
11827: PUSH
11828: LD_INT 14
11830: EQUAL
11831: IFFALSE 11841
// sFlag := true ;
11833: LD_ADDR_EXP 53
11837: PUSH
11838: LD_INT 1
11840: ST_TO_ADDR
// if p3 = 15 then
11841: LD_VAR 0 3
11845: PUSH
11846: LD_INT 15
11848: EQUAL
11849: IFFALSE 11859
// sKamikadze := true ;
11851: LD_ADDR_EXP 61
11855: PUSH
11856: LD_INT 1
11858: ST_TO_ADDR
// if p3 = 16 then
11859: LD_VAR 0 3
11863: PUSH
11864: LD_INT 16
11866: EQUAL
11867: IFFALSE 11877
// sTroll := true ;
11869: LD_ADDR_EXP 62
11873: PUSH
11874: LD_INT 1
11876: ST_TO_ADDR
// if p3 = 17 then
11877: LD_VAR 0 3
11881: PUSH
11882: LD_INT 17
11884: EQUAL
11885: IFFALSE 11895
// sSlow := true ;
11887: LD_ADDR_EXP 63
11891: PUSH
11892: LD_INT 1
11894: ST_TO_ADDR
// if p3 = 18 then
11895: LD_VAR 0 3
11899: PUSH
11900: LD_INT 18
11902: EQUAL
11903: IFFALSE 11913
// sLack := true ;
11905: LD_ADDR_EXP 64
11909: PUSH
11910: LD_INT 1
11912: ST_TO_ADDR
// if p3 = 19 then
11913: LD_VAR 0 3
11917: PUSH
11918: LD_INT 19
11920: EQUAL
11921: IFFALSE 11931
// sTank := true ;
11923: LD_ADDR_EXP 66
11927: PUSH
11928: LD_INT 1
11930: ST_TO_ADDR
// if p3 = 20 then
11931: LD_VAR 0 3
11935: PUSH
11936: LD_INT 20
11938: EQUAL
11939: IFFALSE 11949
// sRemote := true ;
11941: LD_ADDR_EXP 67
11945: PUSH
11946: LD_INT 1
11948: ST_TO_ADDR
// if p3 = 21 then
11949: LD_VAR 0 3
11953: PUSH
11954: LD_INT 21
11956: EQUAL
11957: IFFALSE 11967
// sPowell := true ;
11959: LD_ADDR_EXP 68
11963: PUSH
11964: LD_INT 1
11966: ST_TO_ADDR
// if p3 = 22 then
11967: LD_VAR 0 3
11971: PUSH
11972: LD_INT 22
11974: EQUAL
11975: IFFALSE 11985
// sTeleport := true ;
11977: LD_ADDR_EXP 71
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// if p3 = 23 then
11985: LD_VAR 0 3
11989: PUSH
11990: LD_INT 23
11992: EQUAL
11993: IFFALSE 12003
// sOilTower := true ;
11995: LD_ADDR_EXP 73
11999: PUSH
12000: LD_INT 1
12002: ST_TO_ADDR
// if p3 = 24 then
12003: LD_VAR 0 3
12007: PUSH
12008: LD_INT 24
12010: EQUAL
12011: IFFALSE 12021
// sShovel := true ;
12013: LD_ADDR_EXP 74
12017: PUSH
12018: LD_INT 1
12020: ST_TO_ADDR
// if p3 = 25 then
12021: LD_VAR 0 3
12025: PUSH
12026: LD_INT 25
12028: EQUAL
12029: IFFALSE 12039
// sSheik := true ;
12031: LD_ADDR_EXP 75
12035: PUSH
12036: LD_INT 1
12038: ST_TO_ADDR
// if p3 = 26 then
12039: LD_VAR 0 3
12043: PUSH
12044: LD_INT 26
12046: EQUAL
12047: IFFALSE 12057
// sEarthquake := true ;
12049: LD_ADDR_EXP 77
12053: PUSH
12054: LD_INT 1
12056: ST_TO_ADDR
// if p3 = 27 then
12057: LD_VAR 0 3
12061: PUSH
12062: LD_INT 27
12064: EQUAL
12065: IFFALSE 12075
// sAI := true ;
12067: LD_ADDR_EXP 78
12071: PUSH
12072: LD_INT 1
12074: ST_TO_ADDR
// if p3 = 28 then
12075: LD_VAR 0 3
12079: PUSH
12080: LD_INT 28
12082: EQUAL
12083: IFFALSE 12093
// sCargo := true ;
12085: LD_ADDR_EXP 81
12089: PUSH
12090: LD_INT 1
12092: ST_TO_ADDR
// if p3 = 29 then
12093: LD_VAR 0 3
12097: PUSH
12098: LD_INT 29
12100: EQUAL
12101: IFFALSE 12111
// sDLaser := true ;
12103: LD_ADDR_EXP 82
12107: PUSH
12108: LD_INT 1
12110: ST_TO_ADDR
// if p3 = 30 then
12111: LD_VAR 0 3
12115: PUSH
12116: LD_INT 30
12118: EQUAL
12119: IFFALSE 12129
// sExchange := true ;
12121: LD_ADDR_EXP 83
12125: PUSH
12126: LD_INT 1
12128: ST_TO_ADDR
// if p3 = 31 then
12129: LD_VAR 0 3
12133: PUSH
12134: LD_INT 31
12136: EQUAL
12137: IFFALSE 12147
// sFac := true ;
12139: LD_ADDR_EXP 84
12143: PUSH
12144: LD_INT 1
12146: ST_TO_ADDR
// if p3 = 32 then
12147: LD_VAR 0 3
12151: PUSH
12152: LD_INT 32
12154: EQUAL
12155: IFFALSE 12165
// sPower := true ;
12157: LD_ADDR_EXP 85
12161: PUSH
12162: LD_INT 1
12164: ST_TO_ADDR
// if p3 = 33 then
12165: LD_VAR 0 3
12169: PUSH
12170: LD_INT 33
12172: EQUAL
12173: IFFALSE 12183
// sRandom := true ;
12175: LD_ADDR_EXP 86
12179: PUSH
12180: LD_INT 1
12182: ST_TO_ADDR
// if p3 = 34 then
12183: LD_VAR 0 3
12187: PUSH
12188: LD_INT 34
12190: EQUAL
12191: IFFALSE 12201
// sShield := true ;
12193: LD_ADDR_EXP 87
12197: PUSH
12198: LD_INT 1
12200: ST_TO_ADDR
// if p3 = 35 then
12201: LD_VAR 0 3
12205: PUSH
12206: LD_INT 35
12208: EQUAL
12209: IFFALSE 12219
// sTime := true ;
12211: LD_ADDR_EXP 88
12215: PUSH
12216: LD_INT 1
12218: ST_TO_ADDR
// if p3 = 36 then
12219: LD_VAR 0 3
12223: PUSH
12224: LD_INT 36
12226: EQUAL
12227: IFFALSE 12237
// sTools := true ;
12229: LD_ADDR_EXP 89
12233: PUSH
12234: LD_INT 1
12236: ST_TO_ADDR
// if p3 = 101 then
12237: LD_VAR 0 3
12241: PUSH
12242: LD_INT 101
12244: EQUAL
12245: IFFALSE 12255
// sSold := true ;
12247: LD_ADDR_EXP 54
12251: PUSH
12252: LD_INT 1
12254: ST_TO_ADDR
// if p3 = 102 then
12255: LD_VAR 0 3
12259: PUSH
12260: LD_INT 102
12262: EQUAL
12263: IFFALSE 12273
// sDiff := true ;
12265: LD_ADDR_EXP 55
12269: PUSH
12270: LD_INT 1
12272: ST_TO_ADDR
// if p3 = 103 then
12273: LD_VAR 0 3
12277: PUSH
12278: LD_INT 103
12280: EQUAL
12281: IFFALSE 12291
// sFog := true ;
12283: LD_ADDR_EXP 58
12287: PUSH
12288: LD_INT 1
12290: ST_TO_ADDR
// if p3 = 104 then
12291: LD_VAR 0 3
12295: PUSH
12296: LD_INT 104
12298: EQUAL
12299: IFFALSE 12309
// sReset := true ;
12301: LD_ADDR_EXP 59
12305: PUSH
12306: LD_INT 1
12308: ST_TO_ADDR
// if p3 = 105 then
12309: LD_VAR 0 3
12313: PUSH
12314: LD_INT 105
12316: EQUAL
12317: IFFALSE 12327
// sSun := true ;
12319: LD_ADDR_EXP 60
12323: PUSH
12324: LD_INT 1
12326: ST_TO_ADDR
// if p3 = 106 then
12327: LD_VAR 0 3
12331: PUSH
12332: LD_INT 106
12334: EQUAL
12335: IFFALSE 12345
// sTiger := true ;
12337: LD_ADDR_EXP 56
12341: PUSH
12342: LD_INT 1
12344: ST_TO_ADDR
// if p3 = 107 then
12345: LD_VAR 0 3
12349: PUSH
12350: LD_INT 107
12352: EQUAL
12353: IFFALSE 12363
// sBomb := true ;
12355: LD_ADDR_EXP 57
12359: PUSH
12360: LD_INT 1
12362: ST_TO_ADDR
// if p3 = 108 then
12363: LD_VAR 0 3
12367: PUSH
12368: LD_INT 108
12370: EQUAL
12371: IFFALSE 12381
// sWound := true ;
12373: LD_ADDR_EXP 65
12377: PUSH
12378: LD_INT 1
12380: ST_TO_ADDR
// if p3 = 109 then
12381: LD_VAR 0 3
12385: PUSH
12386: LD_INT 109
12388: EQUAL
12389: IFFALSE 12399
// sBetray := true ;
12391: LD_ADDR_EXP 69
12395: PUSH
12396: LD_INT 1
12398: ST_TO_ADDR
// if p3 = 110 then
12399: LD_VAR 0 3
12403: PUSH
12404: LD_INT 110
12406: EQUAL
12407: IFFALSE 12417
// sContamin := true ;
12409: LD_ADDR_EXP 70
12413: PUSH
12414: LD_INT 1
12416: ST_TO_ADDR
// if p3 = 111 then
12417: LD_VAR 0 3
12421: PUSH
12422: LD_INT 111
12424: EQUAL
12425: IFFALSE 12435
// sOil := true ;
12427: LD_ADDR_EXP 72
12431: PUSH
12432: LD_INT 1
12434: ST_TO_ADDR
// if p3 = 112 then
12435: LD_VAR 0 3
12439: PUSH
12440: LD_INT 112
12442: EQUAL
12443: IFFALSE 12453
// sStu := true ;
12445: LD_ADDR_EXP 76
12449: PUSH
12450: LD_INT 1
12452: ST_TO_ADDR
// if p3 = 113 then
12453: LD_VAR 0 3
12457: PUSH
12458: LD_INT 113
12460: EQUAL
12461: IFFALSE 12471
// sBazooka := true ;
12463: LD_ADDR_EXP 79
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
// if p3 = 114 then
12471: LD_VAR 0 3
12475: PUSH
12476: LD_INT 114
12478: EQUAL
12479: IFFALSE 12489
// sMortar := true ;
12481: LD_ADDR_EXP 80
12485: PUSH
12486: LD_INT 1
12488: ST_TO_ADDR
// if p3 = 115 then
12489: LD_VAR 0 3
12493: PUSH
12494: LD_INT 115
12496: EQUAL
12497: IFFALSE 12507
// sRanger := true ;
12499: LD_ADDR_EXP 90
12503: PUSH
12504: LD_INT 1
12506: ST_TO_ADDR
// end ; if p2 = 101 then
12507: LD_VAR 0 2
12511: PUSH
12512: LD_INT 101
12514: EQUAL
12515: IFFALSE 12643
// begin case p3 of 1 :
12517: LD_VAR 0 3
12521: PUSH
12522: LD_INT 1
12524: DOUBLE
12525: EQUAL
12526: IFTRUE 12530
12528: GO 12537
12530: POP
// hHackUnlimitedResources ; 2 :
12531: CALL 23678 0 0
12535: GO 12643
12537: LD_INT 2
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 12552
12545: POP
// hHackSetLevel10 ; 3 :
12546: CALL 23811 0 0
12550: GO 12643
12552: LD_INT 3
12554: DOUBLE
12555: EQUAL
12556: IFTRUE 12560
12558: GO 12567
12560: POP
// hHackSetLevel10YourUnits ; 4 :
12561: CALL 23896 0 0
12565: GO 12643
12567: LD_INT 4
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12582
12575: POP
// hHackInvincible ; 5 :
12576: CALL 24344 0 0
12580: GO 12643
12582: LD_INT 5
12584: DOUBLE
12585: EQUAL
12586: IFTRUE 12590
12588: GO 12597
12590: POP
// hHackInvisible ; 6 :
12591: CALL 24455 0 0
12595: GO 12643
12597: LD_INT 6
12599: DOUBLE
12600: EQUAL
12601: IFTRUE 12605
12603: GO 12612
12605: POP
// hHackChangeYourSide ; 7 :
12606: CALL 24512 0 0
12610: GO 12643
12612: LD_INT 7
12614: DOUBLE
12615: EQUAL
12616: IFTRUE 12620
12618: GO 12627
12620: POP
// hHackChangeUnitSide ; 8 :
12621: CALL 24554 0 0
12625: GO 12643
12627: LD_INT 8
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12642
12635: POP
// hHackFog ; end ;
12636: CALL 24655 0 0
12640: GO 12643
12642: POP
// end ; end ;
12643: PPOPN 6
12645: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12646: GO 12648
12648: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12649: LD_STRING initStreamRollete();
12651: PPUSH
12652: CALL_OW 559
// InitStreamMode ;
12656: CALL 12665 0 0
// DefineStreamItems ( ) ;
12660: CALL 13105 0 0
// end ;
12664: END
// function InitStreamMode ; begin
12665: LD_INT 0
12667: PPUSH
// streamModeActive := false ;
12668: LD_ADDR_EXP 37
12672: PUSH
12673: LD_INT 0
12675: ST_TO_ADDR
// normalCounter := 36 ;
12676: LD_ADDR_EXP 38
12680: PUSH
12681: LD_INT 36
12683: ST_TO_ADDR
// hardcoreCounter := 16 ;
12684: LD_ADDR_EXP 39
12688: PUSH
12689: LD_INT 16
12691: ST_TO_ADDR
// sRocket := false ;
12692: LD_ADDR_EXP 42
12696: PUSH
12697: LD_INT 0
12699: ST_TO_ADDR
// sSpeed := false ;
12700: LD_ADDR_EXP 41
12704: PUSH
12705: LD_INT 0
12707: ST_TO_ADDR
// sEngine := false ;
12708: LD_ADDR_EXP 43
12712: PUSH
12713: LD_INT 0
12715: ST_TO_ADDR
// sSpec := false ;
12716: LD_ADDR_EXP 40
12720: PUSH
12721: LD_INT 0
12723: ST_TO_ADDR
// sLevel := false ;
12724: LD_ADDR_EXP 44
12728: PUSH
12729: LD_INT 0
12731: ST_TO_ADDR
// sArmoury := false ;
12732: LD_ADDR_EXP 45
12736: PUSH
12737: LD_INT 0
12739: ST_TO_ADDR
// sRadar := false ;
12740: LD_ADDR_EXP 46
12744: PUSH
12745: LD_INT 0
12747: ST_TO_ADDR
// sBunker := false ;
12748: LD_ADDR_EXP 47
12752: PUSH
12753: LD_INT 0
12755: ST_TO_ADDR
// sHack := false ;
12756: LD_ADDR_EXP 48
12760: PUSH
12761: LD_INT 0
12763: ST_TO_ADDR
// sFire := false ;
12764: LD_ADDR_EXP 49
12768: PUSH
12769: LD_INT 0
12771: ST_TO_ADDR
// sRefresh := false ;
12772: LD_ADDR_EXP 50
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// sExp := false ;
12780: LD_ADDR_EXP 51
12784: PUSH
12785: LD_INT 0
12787: ST_TO_ADDR
// sDepot := false ;
12788: LD_ADDR_EXP 52
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// sFlag := false ;
12796: LD_ADDR_EXP 53
12800: PUSH
12801: LD_INT 0
12803: ST_TO_ADDR
// sKamikadze := false ;
12804: LD_ADDR_EXP 61
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// sTroll := false ;
12812: LD_ADDR_EXP 62
12816: PUSH
12817: LD_INT 0
12819: ST_TO_ADDR
// sSlow := false ;
12820: LD_ADDR_EXP 63
12824: PUSH
12825: LD_INT 0
12827: ST_TO_ADDR
// sLack := false ;
12828: LD_ADDR_EXP 64
12832: PUSH
12833: LD_INT 0
12835: ST_TO_ADDR
// sTank := false ;
12836: LD_ADDR_EXP 66
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// sRemote := false ;
12844: LD_ADDR_EXP 67
12848: PUSH
12849: LD_INT 0
12851: ST_TO_ADDR
// sPowell := false ;
12852: LD_ADDR_EXP 68
12856: PUSH
12857: LD_INT 0
12859: ST_TO_ADDR
// sTeleport := false ;
12860: LD_ADDR_EXP 71
12864: PUSH
12865: LD_INT 0
12867: ST_TO_ADDR
// sOilTower := false ;
12868: LD_ADDR_EXP 73
12872: PUSH
12873: LD_INT 0
12875: ST_TO_ADDR
// sShovel := false ;
12876: LD_ADDR_EXP 74
12880: PUSH
12881: LD_INT 0
12883: ST_TO_ADDR
// sSheik := false ;
12884: LD_ADDR_EXP 75
12888: PUSH
12889: LD_INT 0
12891: ST_TO_ADDR
// sEarthquake := false ;
12892: LD_ADDR_EXP 77
12896: PUSH
12897: LD_INT 0
12899: ST_TO_ADDR
// sAI := false ;
12900: LD_ADDR_EXP 78
12904: PUSH
12905: LD_INT 0
12907: ST_TO_ADDR
// sCargo := false ;
12908: LD_ADDR_EXP 81
12912: PUSH
12913: LD_INT 0
12915: ST_TO_ADDR
// sDLaser := false ;
12916: LD_ADDR_EXP 82
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
// sExchange := false ;
12924: LD_ADDR_EXP 83
12928: PUSH
12929: LD_INT 0
12931: ST_TO_ADDR
// sFac := false ;
12932: LD_ADDR_EXP 84
12936: PUSH
12937: LD_INT 0
12939: ST_TO_ADDR
// sPower := false ;
12940: LD_ADDR_EXP 85
12944: PUSH
12945: LD_INT 0
12947: ST_TO_ADDR
// sRandom := false ;
12948: LD_ADDR_EXP 86
12952: PUSH
12953: LD_INT 0
12955: ST_TO_ADDR
// sShield := false ;
12956: LD_ADDR_EXP 87
12960: PUSH
12961: LD_INT 0
12963: ST_TO_ADDR
// sTime := false ;
12964: LD_ADDR_EXP 88
12968: PUSH
12969: LD_INT 0
12971: ST_TO_ADDR
// sTools := false ;
12972: LD_ADDR_EXP 89
12976: PUSH
12977: LD_INT 0
12979: ST_TO_ADDR
// sSold := false ;
12980: LD_ADDR_EXP 54
12984: PUSH
12985: LD_INT 0
12987: ST_TO_ADDR
// sDiff := false ;
12988: LD_ADDR_EXP 55
12992: PUSH
12993: LD_INT 0
12995: ST_TO_ADDR
// sFog := false ;
12996: LD_ADDR_EXP 58
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// sReset := false ;
13004: LD_ADDR_EXP 59
13008: PUSH
13009: LD_INT 0
13011: ST_TO_ADDR
// sSun := false ;
13012: LD_ADDR_EXP 60
13016: PUSH
13017: LD_INT 0
13019: ST_TO_ADDR
// sTiger := false ;
13020: LD_ADDR_EXP 56
13024: PUSH
13025: LD_INT 0
13027: ST_TO_ADDR
// sBomb := false ;
13028: LD_ADDR_EXP 57
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// sWound := false ;
13036: LD_ADDR_EXP 65
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// sBetray := false ;
13044: LD_ADDR_EXP 69
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// sContamin := false ;
13052: LD_ADDR_EXP 70
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// sOil := false ;
13060: LD_ADDR_EXP 72
13064: PUSH
13065: LD_INT 0
13067: ST_TO_ADDR
// sStu := false ;
13068: LD_ADDR_EXP 76
13072: PUSH
13073: LD_INT 0
13075: ST_TO_ADDR
// sBazooka := false ;
13076: LD_ADDR_EXP 79
13080: PUSH
13081: LD_INT 0
13083: ST_TO_ADDR
// sMortar := false ;
13084: LD_ADDR_EXP 80
13088: PUSH
13089: LD_INT 0
13091: ST_TO_ADDR
// sRanger := false ;
13092: LD_ADDR_EXP 90
13096: PUSH
13097: LD_INT 0
13099: ST_TO_ADDR
// end ;
13100: LD_VAR 0 1
13104: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13105: LD_INT 0
13107: PPUSH
13108: PPUSH
13109: PPUSH
13110: PPUSH
13111: PPUSH
// result := [ ] ;
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: EMPTY
13118: ST_TO_ADDR
// if campaign_id = 1 then
13119: LD_OWVAR 69
13123: PUSH
13124: LD_INT 1
13126: EQUAL
13127: IFFALSE 16065
// begin case mission_number of 1 :
13129: LD_OWVAR 70
13133: PUSH
13134: LD_INT 1
13136: DOUBLE
13137: EQUAL
13138: IFTRUE 13142
13140: GO 13206
13142: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13143: LD_ADDR_VAR 0 1
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 4
13153: PUSH
13154: LD_INT 11
13156: PUSH
13157: LD_INT 12
13159: PUSH
13160: LD_INT 15
13162: PUSH
13163: LD_INT 16
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: LD_INT 26
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 101
13188: PUSH
13189: LD_INT 102
13191: PUSH
13192: LD_INT 106
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: ST_TO_ADDR
13204: GO 16063
13206: LD_INT 2
13208: DOUBLE
13209: EQUAL
13210: IFTRUE 13214
13212: GO 13286
13214: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13215: LD_ADDR_VAR 0 1
13219: PUSH
13220: LD_INT 2
13222: PUSH
13223: LD_INT 4
13225: PUSH
13226: LD_INT 11
13228: PUSH
13229: LD_INT 12
13231: PUSH
13232: LD_INT 15
13234: PUSH
13235: LD_INT 16
13237: PUSH
13238: LD_INT 22
13240: PUSH
13241: LD_INT 23
13243: PUSH
13244: LD_INT 26
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 101
13260: PUSH
13261: LD_INT 102
13263: PUSH
13264: LD_INT 105
13266: PUSH
13267: LD_INT 106
13269: PUSH
13270: LD_INT 108
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: ST_TO_ADDR
13284: GO 16063
13286: LD_INT 3
13288: DOUBLE
13289: EQUAL
13290: IFTRUE 13294
13292: GO 13370
13294: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 4
13305: PUSH
13306: LD_INT 5
13308: PUSH
13309: LD_INT 11
13311: PUSH
13312: LD_INT 12
13314: PUSH
13315: LD_INT 15
13317: PUSH
13318: LD_INT 16
13320: PUSH
13321: LD_INT 22
13323: PUSH
13324: LD_INT 26
13326: PUSH
13327: LD_INT 36
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 101
13344: PUSH
13345: LD_INT 102
13347: PUSH
13348: LD_INT 105
13350: PUSH
13351: LD_INT 106
13353: PUSH
13354: LD_INT 108
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: ST_TO_ADDR
13368: GO 16063
13370: LD_INT 4
13372: DOUBLE
13373: EQUAL
13374: IFTRUE 13378
13376: GO 13462
13378: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13379: LD_ADDR_VAR 0 1
13383: PUSH
13384: LD_INT 2
13386: PUSH
13387: LD_INT 4
13389: PUSH
13390: LD_INT 5
13392: PUSH
13393: LD_INT 8
13395: PUSH
13396: LD_INT 11
13398: PUSH
13399: LD_INT 12
13401: PUSH
13402: LD_INT 15
13404: PUSH
13405: LD_INT 16
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_INT 23
13413: PUSH
13414: LD_INT 26
13416: PUSH
13417: LD_INT 36
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 101
13436: PUSH
13437: LD_INT 102
13439: PUSH
13440: LD_INT 105
13442: PUSH
13443: LD_INT 106
13445: PUSH
13446: LD_INT 108
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: ST_TO_ADDR
13460: GO 16063
13462: LD_INT 5
13464: DOUBLE
13465: EQUAL
13466: IFTRUE 13470
13468: GO 13570
13470: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13471: LD_ADDR_VAR 0 1
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: LD_INT 4
13481: PUSH
13482: LD_INT 5
13484: PUSH
13485: LD_INT 6
13487: PUSH
13488: LD_INT 8
13490: PUSH
13491: LD_INT 11
13493: PUSH
13494: LD_INT 12
13496: PUSH
13497: LD_INT 15
13499: PUSH
13500: LD_INT 16
13502: PUSH
13503: LD_INT 22
13505: PUSH
13506: LD_INT 23
13508: PUSH
13509: LD_INT 25
13511: PUSH
13512: LD_INT 26
13514: PUSH
13515: LD_INT 36
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 101
13536: PUSH
13537: LD_INT 102
13539: PUSH
13540: LD_INT 105
13542: PUSH
13543: LD_INT 106
13545: PUSH
13546: LD_INT 108
13548: PUSH
13549: LD_INT 109
13551: PUSH
13552: LD_INT 112
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: ST_TO_ADDR
13568: GO 16063
13570: LD_INT 6
13572: DOUBLE
13573: EQUAL
13574: IFTRUE 13578
13576: GO 13698
13578: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13579: LD_ADDR_VAR 0 1
13583: PUSH
13584: LD_INT 2
13586: PUSH
13587: LD_INT 4
13589: PUSH
13590: LD_INT 5
13592: PUSH
13593: LD_INT 6
13595: PUSH
13596: LD_INT 8
13598: PUSH
13599: LD_INT 11
13601: PUSH
13602: LD_INT 12
13604: PUSH
13605: LD_INT 15
13607: PUSH
13608: LD_INT 16
13610: PUSH
13611: LD_INT 20
13613: PUSH
13614: LD_INT 21
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_INT 23
13622: PUSH
13623: LD_INT 25
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 30
13631: PUSH
13632: LD_INT 31
13634: PUSH
13635: LD_INT 32
13637: PUSH
13638: LD_INT 36
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 101
13664: PUSH
13665: LD_INT 102
13667: PUSH
13668: LD_INT 105
13670: PUSH
13671: LD_INT 106
13673: PUSH
13674: LD_INT 108
13676: PUSH
13677: LD_INT 109
13679: PUSH
13680: LD_INT 112
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: ST_TO_ADDR
13696: GO 16063
13698: LD_INT 7
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13806
13706: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13707: LD_ADDR_VAR 0 1
13711: PUSH
13712: LD_INT 2
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: LD_INT 5
13720: PUSH
13721: LD_INT 7
13723: PUSH
13724: LD_INT 11
13726: PUSH
13727: LD_INT 12
13729: PUSH
13730: LD_INT 15
13732: PUSH
13733: LD_INT 16
13735: PUSH
13736: LD_INT 20
13738: PUSH
13739: LD_INT 21
13741: PUSH
13742: LD_INT 22
13744: PUSH
13745: LD_INT 23
13747: PUSH
13748: LD_INT 25
13750: PUSH
13751: LD_INT 26
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 101
13772: PUSH
13773: LD_INT 102
13775: PUSH
13776: LD_INT 103
13778: PUSH
13779: LD_INT 105
13781: PUSH
13782: LD_INT 106
13784: PUSH
13785: LD_INT 108
13787: PUSH
13788: LD_INT 112
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: ST_TO_ADDR
13804: GO 16063
13806: LD_INT 8
13808: DOUBLE
13809: EQUAL
13810: IFTRUE 13814
13812: GO 13942
13814: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13815: LD_ADDR_VAR 0 1
13819: PUSH
13820: LD_INT 2
13822: PUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 5
13828: PUSH
13829: LD_INT 6
13831: PUSH
13832: LD_INT 7
13834: PUSH
13835: LD_INT 8
13837: PUSH
13838: LD_INT 11
13840: PUSH
13841: LD_INT 12
13843: PUSH
13844: LD_INT 15
13846: PUSH
13847: LD_INT 16
13849: PUSH
13850: LD_INT 20
13852: PUSH
13853: LD_INT 21
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_INT 23
13861: PUSH
13862: LD_INT 25
13864: PUSH
13865: LD_INT 26
13867: PUSH
13868: LD_INT 30
13870: PUSH
13871: LD_INT 31
13873: PUSH
13874: LD_INT 32
13876: PUSH
13877: LD_INT 36
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 101
13904: PUSH
13905: LD_INT 102
13907: PUSH
13908: LD_INT 103
13910: PUSH
13911: LD_INT 105
13913: PUSH
13914: LD_INT 106
13916: PUSH
13917: LD_INT 108
13919: PUSH
13920: LD_INT 109
13922: PUSH
13923: LD_INT 112
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: ST_TO_ADDR
13940: GO 16063
13942: LD_INT 9
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13950
13948: GO 14086
13950: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13951: LD_ADDR_VAR 0 1
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: LD_INT 4
13961: PUSH
13962: LD_INT 5
13964: PUSH
13965: LD_INT 6
13967: PUSH
13968: LD_INT 7
13970: PUSH
13971: LD_INT 8
13973: PUSH
13974: LD_INT 11
13976: PUSH
13977: LD_INT 12
13979: PUSH
13980: LD_INT 15
13982: PUSH
13983: LD_INT 16
13985: PUSH
13986: LD_INT 20
13988: PUSH
13989: LD_INT 21
13991: PUSH
13992: LD_INT 22
13994: PUSH
13995: LD_INT 23
13997: PUSH
13998: LD_INT 25
14000: PUSH
14001: LD_INT 26
14003: PUSH
14004: LD_INT 28
14006: PUSH
14007: LD_INT 30
14009: PUSH
14010: LD_INT 31
14012: PUSH
14013: LD_INT 32
14015: PUSH
14016: LD_INT 36
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 101
14044: PUSH
14045: LD_INT 102
14047: PUSH
14048: LD_INT 103
14050: PUSH
14051: LD_INT 105
14053: PUSH
14054: LD_INT 106
14056: PUSH
14057: LD_INT 108
14059: PUSH
14060: LD_INT 109
14062: PUSH
14063: LD_INT 112
14065: PUSH
14066: LD_INT 114
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: ST_TO_ADDR
14084: GO 16063
14086: LD_INT 10
14088: DOUBLE
14089: EQUAL
14090: IFTRUE 14094
14092: GO 14278
14094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14095: LD_ADDR_VAR 0 1
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: LD_INT 4
14105: PUSH
14106: LD_INT 5
14108: PUSH
14109: LD_INT 6
14111: PUSH
14112: LD_INT 7
14114: PUSH
14115: LD_INT 8
14117: PUSH
14118: LD_INT 9
14120: PUSH
14121: LD_INT 10
14123: PUSH
14124: LD_INT 11
14126: PUSH
14127: LD_INT 12
14129: PUSH
14130: LD_INT 13
14132: PUSH
14133: LD_INT 14
14135: PUSH
14136: LD_INT 15
14138: PUSH
14139: LD_INT 16
14141: PUSH
14142: LD_INT 17
14144: PUSH
14145: LD_INT 18
14147: PUSH
14148: LD_INT 19
14150: PUSH
14151: LD_INT 20
14153: PUSH
14154: LD_INT 21
14156: PUSH
14157: LD_INT 22
14159: PUSH
14160: LD_INT 23
14162: PUSH
14163: LD_INT 24
14165: PUSH
14166: LD_INT 25
14168: PUSH
14169: LD_INT 26
14171: PUSH
14172: LD_INT 28
14174: PUSH
14175: LD_INT 30
14177: PUSH
14178: LD_INT 31
14180: PUSH
14181: LD_INT 32
14183: PUSH
14184: LD_INT 36
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 101
14220: PUSH
14221: LD_INT 102
14223: PUSH
14224: LD_INT 103
14226: PUSH
14227: LD_INT 104
14229: PUSH
14230: LD_INT 105
14232: PUSH
14233: LD_INT 106
14235: PUSH
14236: LD_INT 107
14238: PUSH
14239: LD_INT 108
14241: PUSH
14242: LD_INT 109
14244: PUSH
14245: LD_INT 110
14247: PUSH
14248: LD_INT 111
14250: PUSH
14251: LD_INT 112
14253: PUSH
14254: LD_INT 114
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: ST_TO_ADDR
14276: GO 16063
14278: LD_INT 11
14280: DOUBLE
14281: EQUAL
14282: IFTRUE 14286
14284: GO 14478
14286: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14287: LD_ADDR_VAR 0 1
14291: PUSH
14292: LD_INT 2
14294: PUSH
14295: LD_INT 3
14297: PUSH
14298: LD_INT 4
14300: PUSH
14301: LD_INT 5
14303: PUSH
14304: LD_INT 6
14306: PUSH
14307: LD_INT 7
14309: PUSH
14310: LD_INT 8
14312: PUSH
14313: LD_INT 9
14315: PUSH
14316: LD_INT 10
14318: PUSH
14319: LD_INT 11
14321: PUSH
14322: LD_INT 12
14324: PUSH
14325: LD_INT 13
14327: PUSH
14328: LD_INT 14
14330: PUSH
14331: LD_INT 15
14333: PUSH
14334: LD_INT 16
14336: PUSH
14337: LD_INT 17
14339: PUSH
14340: LD_INT 18
14342: PUSH
14343: LD_INT 19
14345: PUSH
14346: LD_INT 20
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_INT 23
14357: PUSH
14358: LD_INT 24
14360: PUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 26
14366: PUSH
14367: LD_INT 28
14369: PUSH
14370: LD_INT 30
14372: PUSH
14373: LD_INT 31
14375: PUSH
14376: LD_INT 32
14378: PUSH
14379: LD_INT 34
14381: PUSH
14382: LD_INT 36
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 101
14420: PUSH
14421: LD_INT 102
14423: PUSH
14424: LD_INT 103
14426: PUSH
14427: LD_INT 104
14429: PUSH
14430: LD_INT 105
14432: PUSH
14433: LD_INT 106
14435: PUSH
14436: LD_INT 107
14438: PUSH
14439: LD_INT 108
14441: PUSH
14442: LD_INT 109
14444: PUSH
14445: LD_INT 110
14447: PUSH
14448: LD_INT 111
14450: PUSH
14451: LD_INT 112
14453: PUSH
14454: LD_INT 114
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: ST_TO_ADDR
14476: GO 16063
14478: LD_INT 12
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14694
14486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14487: LD_ADDR_VAR 0 1
14491: PUSH
14492: LD_INT 1
14494: PUSH
14495: LD_INT 2
14497: PUSH
14498: LD_INT 3
14500: PUSH
14501: LD_INT 4
14503: PUSH
14504: LD_INT 5
14506: PUSH
14507: LD_INT 6
14509: PUSH
14510: LD_INT 7
14512: PUSH
14513: LD_INT 8
14515: PUSH
14516: LD_INT 9
14518: PUSH
14519: LD_INT 10
14521: PUSH
14522: LD_INT 11
14524: PUSH
14525: LD_INT 12
14527: PUSH
14528: LD_INT 13
14530: PUSH
14531: LD_INT 14
14533: PUSH
14534: LD_INT 15
14536: PUSH
14537: LD_INT 16
14539: PUSH
14540: LD_INT 17
14542: PUSH
14543: LD_INT 18
14545: PUSH
14546: LD_INT 19
14548: PUSH
14549: LD_INT 20
14551: PUSH
14552: LD_INT 21
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_INT 23
14560: PUSH
14561: LD_INT 24
14563: PUSH
14564: LD_INT 25
14566: PUSH
14567: LD_INT 26
14569: PUSH
14570: LD_INT 27
14572: PUSH
14573: LD_INT 28
14575: PUSH
14576: LD_INT 30
14578: PUSH
14579: LD_INT 31
14581: PUSH
14582: LD_INT 32
14584: PUSH
14585: LD_INT 33
14587: PUSH
14588: LD_INT 34
14590: PUSH
14591: LD_INT 36
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 101
14632: PUSH
14633: LD_INT 102
14635: PUSH
14636: LD_INT 103
14638: PUSH
14639: LD_INT 104
14641: PUSH
14642: LD_INT 105
14644: PUSH
14645: LD_INT 106
14647: PUSH
14648: LD_INT 107
14650: PUSH
14651: LD_INT 108
14653: PUSH
14654: LD_INT 109
14656: PUSH
14657: LD_INT 110
14659: PUSH
14660: LD_INT 111
14662: PUSH
14663: LD_INT 112
14665: PUSH
14666: LD_INT 113
14668: PUSH
14669: LD_INT 114
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: ST_TO_ADDR
14692: GO 16063
14694: LD_INT 13
14696: DOUBLE
14697: EQUAL
14698: IFTRUE 14702
14700: GO 14898
14702: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14703: LD_ADDR_VAR 0 1
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: LD_INT 3
14716: PUSH
14717: LD_INT 4
14719: PUSH
14720: LD_INT 5
14722: PUSH
14723: LD_INT 8
14725: PUSH
14726: LD_INT 9
14728: PUSH
14729: LD_INT 10
14731: PUSH
14732: LD_INT 11
14734: PUSH
14735: LD_INT 12
14737: PUSH
14738: LD_INT 14
14740: PUSH
14741: LD_INT 15
14743: PUSH
14744: LD_INT 16
14746: PUSH
14747: LD_INT 17
14749: PUSH
14750: LD_INT 18
14752: PUSH
14753: LD_INT 19
14755: PUSH
14756: LD_INT 20
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: LD_INT 23
14767: PUSH
14768: LD_INT 24
14770: PUSH
14771: LD_INT 25
14773: PUSH
14774: LD_INT 26
14776: PUSH
14777: LD_INT 27
14779: PUSH
14780: LD_INT 28
14782: PUSH
14783: LD_INT 30
14785: PUSH
14786: LD_INT 31
14788: PUSH
14789: LD_INT 32
14791: PUSH
14792: LD_INT 33
14794: PUSH
14795: LD_INT 34
14797: PUSH
14798: LD_INT 36
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 101
14836: PUSH
14837: LD_INT 102
14839: PUSH
14840: LD_INT 103
14842: PUSH
14843: LD_INT 104
14845: PUSH
14846: LD_INT 105
14848: PUSH
14849: LD_INT 106
14851: PUSH
14852: LD_INT 107
14854: PUSH
14855: LD_INT 108
14857: PUSH
14858: LD_INT 109
14860: PUSH
14861: LD_INT 110
14863: PUSH
14864: LD_INT 111
14866: PUSH
14867: LD_INT 112
14869: PUSH
14870: LD_INT 113
14872: PUSH
14873: LD_INT 114
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: ST_TO_ADDR
14896: GO 16063
14898: LD_INT 14
14900: DOUBLE
14901: EQUAL
14902: IFTRUE 14906
14904: GO 15118
14906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14907: LD_ADDR_VAR 0 1
14911: PUSH
14912: LD_INT 1
14914: PUSH
14915: LD_INT 2
14917: PUSH
14918: LD_INT 3
14920: PUSH
14921: LD_INT 4
14923: PUSH
14924: LD_INT 5
14926: PUSH
14927: LD_INT 6
14929: PUSH
14930: LD_INT 7
14932: PUSH
14933: LD_INT 8
14935: PUSH
14936: LD_INT 9
14938: PUSH
14939: LD_INT 10
14941: PUSH
14942: LD_INT 11
14944: PUSH
14945: LD_INT 12
14947: PUSH
14948: LD_INT 13
14950: PUSH
14951: LD_INT 14
14953: PUSH
14954: LD_INT 15
14956: PUSH
14957: LD_INT 16
14959: PUSH
14960: LD_INT 17
14962: PUSH
14963: LD_INT 18
14965: PUSH
14966: LD_INT 19
14968: PUSH
14969: LD_INT 20
14971: PUSH
14972: LD_INT 21
14974: PUSH
14975: LD_INT 22
14977: PUSH
14978: LD_INT 23
14980: PUSH
14981: LD_INT 24
14983: PUSH
14984: LD_INT 25
14986: PUSH
14987: LD_INT 26
14989: PUSH
14990: LD_INT 27
14992: PUSH
14993: LD_INT 28
14995: PUSH
14996: LD_INT 29
14998: PUSH
14999: LD_INT 30
15001: PUSH
15002: LD_INT 31
15004: PUSH
15005: LD_INT 32
15007: PUSH
15008: LD_INT 33
15010: PUSH
15011: LD_INT 34
15013: PUSH
15014: LD_INT 36
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 101
15056: PUSH
15057: LD_INT 102
15059: PUSH
15060: LD_INT 103
15062: PUSH
15063: LD_INT 104
15065: PUSH
15066: LD_INT 105
15068: PUSH
15069: LD_INT 106
15071: PUSH
15072: LD_INT 107
15074: PUSH
15075: LD_INT 108
15077: PUSH
15078: LD_INT 109
15080: PUSH
15081: LD_INT 110
15083: PUSH
15084: LD_INT 111
15086: PUSH
15087: LD_INT 112
15089: PUSH
15090: LD_INT 113
15092: PUSH
15093: LD_INT 114
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: ST_TO_ADDR
15116: GO 16063
15118: LD_INT 15
15120: DOUBLE
15121: EQUAL
15122: IFTRUE 15126
15124: GO 15338
15126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15127: LD_ADDR_VAR 0 1
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: LD_INT 2
15137: PUSH
15138: LD_INT 3
15140: PUSH
15141: LD_INT 4
15143: PUSH
15144: LD_INT 5
15146: PUSH
15147: LD_INT 6
15149: PUSH
15150: LD_INT 7
15152: PUSH
15153: LD_INT 8
15155: PUSH
15156: LD_INT 9
15158: PUSH
15159: LD_INT 10
15161: PUSH
15162: LD_INT 11
15164: PUSH
15165: LD_INT 12
15167: PUSH
15168: LD_INT 13
15170: PUSH
15171: LD_INT 14
15173: PUSH
15174: LD_INT 15
15176: PUSH
15177: LD_INT 16
15179: PUSH
15180: LD_INT 17
15182: PUSH
15183: LD_INT 18
15185: PUSH
15186: LD_INT 19
15188: PUSH
15189: LD_INT 20
15191: PUSH
15192: LD_INT 21
15194: PUSH
15195: LD_INT 22
15197: PUSH
15198: LD_INT 23
15200: PUSH
15201: LD_INT 24
15203: PUSH
15204: LD_INT 25
15206: PUSH
15207: LD_INT 26
15209: PUSH
15210: LD_INT 27
15212: PUSH
15213: LD_INT 28
15215: PUSH
15216: LD_INT 29
15218: PUSH
15219: LD_INT 30
15221: PUSH
15222: LD_INT 31
15224: PUSH
15225: LD_INT 32
15227: PUSH
15228: LD_INT 33
15230: PUSH
15231: LD_INT 34
15233: PUSH
15234: LD_INT 36
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 101
15276: PUSH
15277: LD_INT 102
15279: PUSH
15280: LD_INT 103
15282: PUSH
15283: LD_INT 104
15285: PUSH
15286: LD_INT 105
15288: PUSH
15289: LD_INT 106
15291: PUSH
15292: LD_INT 107
15294: PUSH
15295: LD_INT 108
15297: PUSH
15298: LD_INT 109
15300: PUSH
15301: LD_INT 110
15303: PUSH
15304: LD_INT 111
15306: PUSH
15307: LD_INT 112
15309: PUSH
15310: LD_INT 113
15312: PUSH
15313: LD_INT 114
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: ST_TO_ADDR
15336: GO 16063
15338: LD_INT 16
15340: DOUBLE
15341: EQUAL
15342: IFTRUE 15346
15344: GO 15470
15346: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: LD_INT 2
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: LD_INT 5
15360: PUSH
15361: LD_INT 7
15363: PUSH
15364: LD_INT 11
15366: PUSH
15367: LD_INT 12
15369: PUSH
15370: LD_INT 15
15372: PUSH
15373: LD_INT 16
15375: PUSH
15376: LD_INT 20
15378: PUSH
15379: LD_INT 21
15381: PUSH
15382: LD_INT 22
15384: PUSH
15385: LD_INT 23
15387: PUSH
15388: LD_INT 25
15390: PUSH
15391: LD_INT 26
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 31
15399: PUSH
15400: LD_INT 32
15402: PUSH
15403: LD_INT 33
15405: PUSH
15406: LD_INT 34
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 101
15432: PUSH
15433: LD_INT 102
15435: PUSH
15436: LD_INT 103
15438: PUSH
15439: LD_INT 106
15441: PUSH
15442: LD_INT 108
15444: PUSH
15445: LD_INT 112
15447: PUSH
15448: LD_INT 113
15450: PUSH
15451: LD_INT 114
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: ST_TO_ADDR
15468: GO 16063
15470: LD_INT 17
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15690
15478: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15479: LD_ADDR_VAR 0 1
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: LD_INT 4
15495: PUSH
15496: LD_INT 5
15498: PUSH
15499: LD_INT 6
15501: PUSH
15502: LD_INT 7
15504: PUSH
15505: LD_INT 8
15507: PUSH
15508: LD_INT 9
15510: PUSH
15511: LD_INT 10
15513: PUSH
15514: LD_INT 11
15516: PUSH
15517: LD_INT 12
15519: PUSH
15520: LD_INT 13
15522: PUSH
15523: LD_INT 14
15525: PUSH
15526: LD_INT 15
15528: PUSH
15529: LD_INT 16
15531: PUSH
15532: LD_INT 17
15534: PUSH
15535: LD_INT 18
15537: PUSH
15538: LD_INT 19
15540: PUSH
15541: LD_INT 20
15543: PUSH
15544: LD_INT 21
15546: PUSH
15547: LD_INT 22
15549: PUSH
15550: LD_INT 23
15552: PUSH
15553: LD_INT 24
15555: PUSH
15556: LD_INT 25
15558: PUSH
15559: LD_INT 26
15561: PUSH
15562: LD_INT 27
15564: PUSH
15565: LD_INT 28
15567: PUSH
15568: LD_INT 29
15570: PUSH
15571: LD_INT 30
15573: PUSH
15574: LD_INT 31
15576: PUSH
15577: LD_INT 32
15579: PUSH
15580: LD_INT 33
15582: PUSH
15583: LD_INT 34
15585: PUSH
15586: LD_INT 36
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 101
15628: PUSH
15629: LD_INT 102
15631: PUSH
15632: LD_INT 103
15634: PUSH
15635: LD_INT 104
15637: PUSH
15638: LD_INT 105
15640: PUSH
15641: LD_INT 106
15643: PUSH
15644: LD_INT 107
15646: PUSH
15647: LD_INT 108
15649: PUSH
15650: LD_INT 109
15652: PUSH
15653: LD_INT 110
15655: PUSH
15656: LD_INT 111
15658: PUSH
15659: LD_INT 112
15661: PUSH
15662: LD_INT 113
15664: PUSH
15665: LD_INT 114
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: ST_TO_ADDR
15688: GO 16063
15690: LD_INT 18
15692: DOUBLE
15693: EQUAL
15694: IFTRUE 15698
15696: GO 15834
15698: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15699: LD_ADDR_VAR 0 1
15703: PUSH
15704: LD_INT 2
15706: PUSH
15707: LD_INT 4
15709: PUSH
15710: LD_INT 5
15712: PUSH
15713: LD_INT 7
15715: PUSH
15716: LD_INT 11
15718: PUSH
15719: LD_INT 12
15721: PUSH
15722: LD_INT 15
15724: PUSH
15725: LD_INT 16
15727: PUSH
15728: LD_INT 20
15730: PUSH
15731: LD_INT 21
15733: PUSH
15734: LD_INT 22
15736: PUSH
15737: LD_INT 23
15739: PUSH
15740: LD_INT 25
15742: PUSH
15743: LD_INT 26
15745: PUSH
15746: LD_INT 30
15748: PUSH
15749: LD_INT 31
15751: PUSH
15752: LD_INT 32
15754: PUSH
15755: LD_INT 33
15757: PUSH
15758: LD_INT 34
15760: PUSH
15761: LD_INT 35
15763: PUSH
15764: LD_INT 36
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 101
15792: PUSH
15793: LD_INT 102
15795: PUSH
15796: LD_INT 103
15798: PUSH
15799: LD_INT 106
15801: PUSH
15802: LD_INT 108
15804: PUSH
15805: LD_INT 112
15807: PUSH
15808: LD_INT 113
15810: PUSH
15811: LD_INT 114
15813: PUSH
15814: LD_INT 115
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: ST_TO_ADDR
15832: GO 16063
15834: LD_INT 19
15836: DOUBLE
15837: EQUAL
15838: IFTRUE 15842
15840: GO 16062
15842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_INT 1
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: LD_INT 5
15862: PUSH
15863: LD_INT 6
15865: PUSH
15866: LD_INT 7
15868: PUSH
15869: LD_INT 8
15871: PUSH
15872: LD_INT 9
15874: PUSH
15875: LD_INT 10
15877: PUSH
15878: LD_INT 11
15880: PUSH
15881: LD_INT 12
15883: PUSH
15884: LD_INT 13
15886: PUSH
15887: LD_INT 14
15889: PUSH
15890: LD_INT 15
15892: PUSH
15893: LD_INT 16
15895: PUSH
15896: LD_INT 17
15898: PUSH
15899: LD_INT 18
15901: PUSH
15902: LD_INT 19
15904: PUSH
15905: LD_INT 20
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 22
15913: PUSH
15914: LD_INT 23
15916: PUSH
15917: LD_INT 24
15919: PUSH
15920: LD_INT 25
15922: PUSH
15923: LD_INT 26
15925: PUSH
15926: LD_INT 27
15928: PUSH
15929: LD_INT 28
15931: PUSH
15932: LD_INT 29
15934: PUSH
15935: LD_INT 30
15937: PUSH
15938: LD_INT 31
15940: PUSH
15941: LD_INT 32
15943: PUSH
15944: LD_INT 33
15946: PUSH
15947: LD_INT 34
15949: PUSH
15950: LD_INT 35
15952: PUSH
15953: LD_INT 36
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 101
15996: PUSH
15997: LD_INT 102
15999: PUSH
16000: LD_INT 103
16002: PUSH
16003: LD_INT 104
16005: PUSH
16006: LD_INT 105
16008: PUSH
16009: LD_INT 106
16011: PUSH
16012: LD_INT 107
16014: PUSH
16015: LD_INT 108
16017: PUSH
16018: LD_INT 109
16020: PUSH
16021: LD_INT 110
16023: PUSH
16024: LD_INT 111
16026: PUSH
16027: LD_INT 112
16029: PUSH
16030: LD_INT 113
16032: PUSH
16033: LD_INT 114
16035: PUSH
16036: LD_INT 115
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: ST_TO_ADDR
16060: GO 16063
16062: POP
// end else
16063: GO 16282
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16065: LD_ADDR_VAR 0 1
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: LD_INT 2
16075: PUSH
16076: LD_INT 3
16078: PUSH
16079: LD_INT 4
16081: PUSH
16082: LD_INT 5
16084: PUSH
16085: LD_INT 6
16087: PUSH
16088: LD_INT 7
16090: PUSH
16091: LD_INT 8
16093: PUSH
16094: LD_INT 9
16096: PUSH
16097: LD_INT 10
16099: PUSH
16100: LD_INT 11
16102: PUSH
16103: LD_INT 12
16105: PUSH
16106: LD_INT 13
16108: PUSH
16109: LD_INT 14
16111: PUSH
16112: LD_INT 15
16114: PUSH
16115: LD_INT 16
16117: PUSH
16118: LD_INT 17
16120: PUSH
16121: LD_INT 18
16123: PUSH
16124: LD_INT 19
16126: PUSH
16127: LD_INT 20
16129: PUSH
16130: LD_INT 21
16132: PUSH
16133: LD_INT 22
16135: PUSH
16136: LD_INT 23
16138: PUSH
16139: LD_INT 24
16141: PUSH
16142: LD_INT 25
16144: PUSH
16145: LD_INT 26
16147: PUSH
16148: LD_INT 27
16150: PUSH
16151: LD_INT 28
16153: PUSH
16154: LD_INT 29
16156: PUSH
16157: LD_INT 30
16159: PUSH
16160: LD_INT 31
16162: PUSH
16163: LD_INT 32
16165: PUSH
16166: LD_INT 33
16168: PUSH
16169: LD_INT 34
16171: PUSH
16172: LD_INT 35
16174: PUSH
16175: LD_INT 36
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 101
16218: PUSH
16219: LD_INT 102
16221: PUSH
16222: LD_INT 103
16224: PUSH
16225: LD_INT 104
16227: PUSH
16228: LD_INT 105
16230: PUSH
16231: LD_INT 106
16233: PUSH
16234: LD_INT 107
16236: PUSH
16237: LD_INT 108
16239: PUSH
16240: LD_INT 109
16242: PUSH
16243: LD_INT 110
16245: PUSH
16246: LD_INT 111
16248: PUSH
16249: LD_INT 112
16251: PUSH
16252: LD_INT 113
16254: PUSH
16255: LD_INT 114
16257: PUSH
16258: LD_INT 115
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: ST_TO_ADDR
// if result then
16282: LD_VAR 0 1
16286: IFFALSE 16575
// begin normal :=  ;
16288: LD_ADDR_VAR 0 3
16292: PUSH
16293: LD_STRING 
16295: ST_TO_ADDR
// hardcore :=  ;
16296: LD_ADDR_VAR 0 4
16300: PUSH
16301: LD_STRING 
16303: ST_TO_ADDR
// for i = 1 to normalCounter do
16304: LD_ADDR_VAR 0 5
16308: PUSH
16309: DOUBLE
16310: LD_INT 1
16312: DEC
16313: ST_TO_ADDR
16314: LD_EXP 38
16318: PUSH
16319: FOR_TO
16320: IFFALSE 16421
// begin tmp := 0 ;
16322: LD_ADDR_VAR 0 2
16326: PUSH
16327: LD_STRING 0
16329: ST_TO_ADDR
// if result [ 1 ] then
16330: LD_VAR 0 1
16334: PUSH
16335: LD_INT 1
16337: ARRAY
16338: IFFALSE 16403
// if result [ 1 ] [ 1 ] = i then
16340: LD_VAR 0 1
16344: PUSH
16345: LD_INT 1
16347: ARRAY
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PUSH
16353: LD_VAR 0 5
16357: EQUAL
16358: IFFALSE 16403
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16360: LD_ADDR_VAR 0 1
16364: PUSH
16365: LD_VAR 0 1
16369: PPUSH
16370: LD_INT 1
16372: PPUSH
16373: LD_VAR 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_INT 1
16384: PPUSH
16385: CALL_OW 3
16389: PPUSH
16390: CALL_OW 1
16394: ST_TO_ADDR
// tmp := 1 ;
16395: LD_ADDR_VAR 0 2
16399: PUSH
16400: LD_STRING 1
16402: ST_TO_ADDR
// end ; normal := normal & tmp ;
16403: LD_ADDR_VAR 0 3
16407: PUSH
16408: LD_VAR 0 3
16412: PUSH
16413: LD_VAR 0 2
16417: STR
16418: ST_TO_ADDR
// end ;
16419: GO 16319
16421: POP
16422: POP
// for i = 1 to hardcoreCounter do
16423: LD_ADDR_VAR 0 5
16427: PUSH
16428: DOUBLE
16429: LD_INT 1
16431: DEC
16432: ST_TO_ADDR
16433: LD_EXP 39
16437: PUSH
16438: FOR_TO
16439: IFFALSE 16544
// begin tmp := 0 ;
16441: LD_ADDR_VAR 0 2
16445: PUSH
16446: LD_STRING 0
16448: ST_TO_ADDR
// if result [ 2 ] then
16449: LD_VAR 0 1
16453: PUSH
16454: LD_INT 2
16456: ARRAY
16457: IFFALSE 16526
// if result [ 2 ] [ 1 ] = 100 + i then
16459: LD_VAR 0 1
16463: PUSH
16464: LD_INT 2
16466: ARRAY
16467: PUSH
16468: LD_INT 1
16470: ARRAY
16471: PUSH
16472: LD_INT 100
16474: PUSH
16475: LD_VAR 0 5
16479: PLUS
16480: EQUAL
16481: IFFALSE 16526
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16483: LD_ADDR_VAR 0 1
16487: PUSH
16488: LD_VAR 0 1
16492: PPUSH
16493: LD_INT 2
16495: PPUSH
16496: LD_VAR 0 1
16500: PUSH
16501: LD_INT 2
16503: ARRAY
16504: PPUSH
16505: LD_INT 1
16507: PPUSH
16508: CALL_OW 3
16512: PPUSH
16513: CALL_OW 1
16517: ST_TO_ADDR
// tmp := 1 ;
16518: LD_ADDR_VAR 0 2
16522: PUSH
16523: LD_STRING 1
16525: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16526: LD_ADDR_VAR 0 4
16530: PUSH
16531: LD_VAR 0 4
16535: PUSH
16536: LD_VAR 0 2
16540: STR
16541: ST_TO_ADDR
// end ;
16542: GO 16438
16544: POP
16545: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16546: LD_STRING getStreamItemsFromMission("
16548: PUSH
16549: LD_VAR 0 3
16553: STR
16554: PUSH
16555: LD_STRING ","
16557: STR
16558: PUSH
16559: LD_VAR 0 4
16563: STR
16564: PUSH
16565: LD_STRING ")
16567: STR
16568: PPUSH
16569: CALL_OW 559
// end else
16573: GO 16582
// ToLua ( getStreamItemsFromMission("","") ) ;
16575: LD_STRING getStreamItemsFromMission("","")
16577: PPUSH
16578: CALL_OW 559
// end ;
16582: LD_VAR 0 1
16586: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16587: LD_EXP 37
16591: PUSH
16592: LD_EXP 42
16596: AND
16597: IFFALSE 16721
16599: GO 16601
16601: DISABLE
16602: LD_INT 0
16604: PPUSH
16605: PPUSH
// begin enable ;
16606: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16607: LD_ADDR_VAR 0 2
16611: PUSH
16612: LD_INT 22
16614: PUSH
16615: LD_OWVAR 2
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 2
16626: PUSH
16627: LD_INT 34
16629: PUSH
16630: LD_INT 7
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 34
16639: PUSH
16640: LD_INT 45
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 34
16649: PUSH
16650: LD_INT 28
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 34
16659: PUSH
16660: LD_INT 47
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PPUSH
16678: CALL_OW 69
16682: ST_TO_ADDR
// if not tmp then
16683: LD_VAR 0 2
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16721
// for i in tmp do
16692: LD_ADDR_VAR 0 1
16696: PUSH
16697: LD_VAR 0 2
16701: PUSH
16702: FOR_IN
16703: IFFALSE 16719
// begin SetLives ( i , 0 ) ;
16705: LD_VAR 0 1
16709: PPUSH
16710: LD_INT 0
16712: PPUSH
16713: CALL_OW 234
// end ;
16717: GO 16702
16719: POP
16720: POP
// end ;
16721: PPOPN 2
16723: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16724: LD_EXP 37
16728: PUSH
16729: LD_EXP 43
16733: AND
16734: IFFALSE 16818
16736: GO 16738
16738: DISABLE
16739: LD_INT 0
16741: PPUSH
16742: PPUSH
// begin enable ;
16743: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16744: LD_ADDR_VAR 0 2
16748: PUSH
16749: LD_INT 22
16751: PUSH
16752: LD_OWVAR 2
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 32
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PPUSH
16775: CALL_OW 69
16779: ST_TO_ADDR
// if not tmp then
16780: LD_VAR 0 2
16784: NOT
16785: IFFALSE 16789
// exit ;
16787: GO 16818
// for i in tmp do
16789: LD_ADDR_VAR 0 1
16793: PUSH
16794: LD_VAR 0 2
16798: PUSH
16799: FOR_IN
16800: IFFALSE 16816
// begin SetLives ( i , 0 ) ;
16802: LD_VAR 0 1
16806: PPUSH
16807: LD_INT 0
16809: PPUSH
16810: CALL_OW 234
// end ;
16814: GO 16799
16816: POP
16817: POP
// end ;
16818: PPOPN 2
16820: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16821: LD_EXP 37
16825: PUSH
16826: LD_EXP 40
16830: AND
16831: IFFALSE 16924
16833: GO 16835
16835: DISABLE
16836: LD_INT 0
16838: PPUSH
// begin enable ;
16839: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: LD_INT 22
16847: PUSH
16848: LD_OWVAR 2
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 25
16862: PUSH
16863: LD_INT 5
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 25
16872: PUSH
16873: LD_INT 9
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 25
16882: PUSH
16883: LD_INT 8
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PPUSH
16900: CALL_OW 69
16904: PUSH
16905: FOR_IN
16906: IFFALSE 16922
// begin SetClass ( i , 1 ) ;
16908: LD_VAR 0 1
16912: PPUSH
16913: LD_INT 1
16915: PPUSH
16916: CALL_OW 336
// end ;
16920: GO 16905
16922: POP
16923: POP
// end ;
16924: PPOPN 1
16926: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16927: LD_EXP 37
16931: PUSH
16932: LD_EXP 41
16936: AND
16937: PUSH
16938: LD_OWVAR 65
16942: PUSH
16943: LD_INT 7
16945: LESS
16946: AND
16947: IFFALSE 16961
16949: GO 16951
16951: DISABLE
// begin enable ;
16952: ENABLE
// game_speed := 7 ;
16953: LD_ADDR_OWVAR 65
16957: PUSH
16958: LD_INT 7
16960: ST_TO_ADDR
// end ;
16961: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16962: LD_EXP 37
16966: PUSH
16967: LD_EXP 44
16971: AND
16972: IFFALSE 17174
16974: GO 16976
16976: DISABLE
16977: LD_INT 0
16979: PPUSH
16980: PPUSH
16981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16982: LD_ADDR_VAR 0 3
16986: PUSH
16987: LD_INT 81
16989: PUSH
16990: LD_OWVAR 2
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 21
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PPUSH
17013: CALL_OW 69
17017: ST_TO_ADDR
// if not tmp then
17018: LD_VAR 0 3
17022: NOT
17023: IFFALSE 17027
// exit ;
17025: GO 17174
// if tmp > 5 then
17027: LD_VAR 0 3
17031: PUSH
17032: LD_INT 5
17034: GREATER
17035: IFFALSE 17047
// k := 5 else
17037: LD_ADDR_VAR 0 2
17041: PUSH
17042: LD_INT 5
17044: ST_TO_ADDR
17045: GO 17057
// k := tmp ;
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_VAR 0 3
17056: ST_TO_ADDR
// for i := 1 to k do
17057: LD_ADDR_VAR 0 1
17061: PUSH
17062: DOUBLE
17063: LD_INT 1
17065: DEC
17066: ST_TO_ADDR
17067: LD_VAR 0 2
17071: PUSH
17072: FOR_TO
17073: IFFALSE 17172
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17075: LD_VAR 0 3
17079: PUSH
17080: LD_VAR 0 1
17084: ARRAY
17085: PPUSH
17086: LD_VAR 0 1
17090: PUSH
17091: LD_INT 4
17093: MOD
17094: PUSH
17095: LD_INT 1
17097: PLUS
17098: PPUSH
17099: CALL_OW 259
17103: PUSH
17104: LD_INT 10
17106: LESS
17107: IFFALSE 17170
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17109: LD_VAR 0 3
17113: PUSH
17114: LD_VAR 0 1
17118: ARRAY
17119: PPUSH
17120: LD_VAR 0 1
17124: PUSH
17125: LD_INT 4
17127: MOD
17128: PUSH
17129: LD_INT 1
17131: PLUS
17132: PPUSH
17133: LD_VAR 0 3
17137: PUSH
17138: LD_VAR 0 1
17142: ARRAY
17143: PPUSH
17144: LD_VAR 0 1
17148: PUSH
17149: LD_INT 4
17151: MOD
17152: PUSH
17153: LD_INT 1
17155: PLUS
17156: PPUSH
17157: CALL_OW 259
17161: PUSH
17162: LD_INT 1
17164: PLUS
17165: PPUSH
17166: CALL_OW 237
17170: GO 17072
17172: POP
17173: POP
// end ;
17174: PPOPN 3
17176: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17177: LD_EXP 37
17181: PUSH
17182: LD_EXP 45
17186: AND
17187: IFFALSE 17207
17189: GO 17191
17191: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17192: LD_INT 4
17194: PPUSH
17195: LD_OWVAR 2
17199: PPUSH
17200: LD_INT 0
17202: PPUSH
17203: CALL_OW 324
17207: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17208: LD_EXP 37
17212: PUSH
17213: LD_EXP 74
17217: AND
17218: IFFALSE 17238
17220: GO 17222
17222: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17223: LD_INT 19
17225: PPUSH
17226: LD_OWVAR 2
17230: PPUSH
17231: LD_INT 0
17233: PPUSH
17234: CALL_OW 324
17238: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17239: LD_EXP 37
17243: PUSH
17244: LD_EXP 46
17248: AND
17249: IFFALSE 17351
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
// begin enable ;
17258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17259: LD_ADDR_VAR 0 2
17263: PUSH
17264: LD_INT 22
17266: PUSH
17267: LD_OWVAR 2
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 34
17281: PUSH
17282: LD_INT 11
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 34
17291: PUSH
17292: LD_INT 30
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PPUSH
17308: CALL_OW 69
17312: ST_TO_ADDR
// if not tmp then
17313: LD_VAR 0 2
17317: NOT
17318: IFFALSE 17322
// exit ;
17320: GO 17351
// for i in tmp do
17322: LD_ADDR_VAR 0 1
17326: PUSH
17327: LD_VAR 0 2
17331: PUSH
17332: FOR_IN
17333: IFFALSE 17349
// begin SetLives ( i , 0 ) ;
17335: LD_VAR 0 1
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: CALL_OW 234
// end ;
17347: GO 17332
17349: POP
17350: POP
// end ;
17351: PPOPN 2
17353: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17354: LD_EXP 37
17358: PUSH
17359: LD_EXP 47
17363: AND
17364: IFFALSE 17384
17366: GO 17368
17368: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17369: LD_INT 32
17371: PPUSH
17372: LD_OWVAR 2
17376: PPUSH
17377: LD_INT 0
17379: PPUSH
17380: CALL_OW 324
17384: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17385: LD_EXP 37
17389: PUSH
17390: LD_EXP 48
17394: AND
17395: IFFALSE 17576
17397: GO 17399
17399: DISABLE
17400: LD_INT 0
17402: PPUSH
17403: PPUSH
17404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_INT 22
17412: PUSH
17413: LD_OWVAR 2
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 33
17424: PUSH
17425: LD_INT 3
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PPUSH
17436: CALL_OW 69
17440: ST_TO_ADDR
// if not tmp then
17441: LD_VAR 0 2
17445: NOT
17446: IFFALSE 17450
// exit ;
17448: GO 17576
// side := 0 ;
17450: LD_ADDR_VAR 0 3
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
// for i := 1 to 8 do
17458: LD_ADDR_VAR 0 1
17462: PUSH
17463: DOUBLE
17464: LD_INT 1
17466: DEC
17467: ST_TO_ADDR
17468: LD_INT 8
17470: PUSH
17471: FOR_TO
17472: IFFALSE 17520
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17474: LD_OWVAR 2
17478: PUSH
17479: LD_VAR 0 1
17483: NONEQUAL
17484: PUSH
17485: LD_OWVAR 2
17489: PPUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 81
17499: PUSH
17500: LD_INT 2
17502: EQUAL
17503: AND
17504: IFFALSE 17518
// begin side := i ;
17506: LD_ADDR_VAR 0 3
17510: PUSH
17511: LD_VAR 0 1
17515: ST_TO_ADDR
// break ;
17516: GO 17520
// end ;
17518: GO 17471
17520: POP
17521: POP
// if not side then
17522: LD_VAR 0 3
17526: NOT
17527: IFFALSE 17531
// exit ;
17529: GO 17576
// for i := 1 to tmp do
17531: LD_ADDR_VAR 0 1
17535: PUSH
17536: DOUBLE
17537: LD_INT 1
17539: DEC
17540: ST_TO_ADDR
17541: LD_VAR 0 2
17545: PUSH
17546: FOR_TO
17547: IFFALSE 17574
// if Prob ( 60 ) then
17549: LD_INT 60
17551: PPUSH
17552: CALL_OW 13
17556: IFFALSE 17572
// SetSide ( i , side ) ;
17558: LD_VAR 0 1
17562: PPUSH
17563: LD_VAR 0 3
17567: PPUSH
17568: CALL_OW 235
17572: GO 17546
17574: POP
17575: POP
// end ;
17576: PPOPN 3
17578: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17579: LD_EXP 37
17583: PUSH
17584: LD_EXP 50
17588: AND
17589: IFFALSE 17708
17591: GO 17593
17593: DISABLE
17594: LD_INT 0
17596: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17597: LD_ADDR_VAR 0 1
17601: PUSH
17602: LD_INT 22
17604: PUSH
17605: LD_OWVAR 2
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 21
17616: PUSH
17617: LD_INT 1
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 3
17626: PUSH
17627: LD_INT 23
17629: PUSH
17630: LD_INT 0
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: LIST
17645: PPUSH
17646: CALL_OW 69
17650: PUSH
17651: FOR_IN
17652: IFFALSE 17706
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17654: LD_VAR 0 1
17658: PPUSH
17659: CALL_OW 257
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: LD_INT 3
17672: PUSH
17673: LD_INT 4
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: IN
17682: IFFALSE 17704
// SetClass ( un , rand ( 1 , 4 ) ) ;
17684: LD_VAR 0 1
17688: PPUSH
17689: LD_INT 1
17691: PPUSH
17692: LD_INT 4
17694: PPUSH
17695: CALL_OW 12
17699: PPUSH
17700: CALL_OW 336
17704: GO 17651
17706: POP
17707: POP
// end ;
17708: PPOPN 1
17710: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17711: LD_EXP 37
17715: PUSH
17716: LD_EXP 49
17720: AND
17721: IFFALSE 17800
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17729: LD_ADDR_VAR 0 1
17733: PUSH
17734: LD_INT 22
17736: PUSH
17737: LD_OWVAR 2
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 21
17748: PUSH
17749: LD_INT 3
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PPUSH
17760: CALL_OW 69
17764: ST_TO_ADDR
// if not tmp then
17765: LD_VAR 0 1
17769: NOT
17770: IFFALSE 17774
// exit ;
17772: GO 17800
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17774: LD_VAR 0 1
17778: PUSH
17779: LD_INT 1
17781: PPUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 12
17791: ARRAY
17792: PPUSH
17793: LD_INT 100
17795: PPUSH
17796: CALL_OW 234
// end ;
17800: PPOPN 1
17802: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17803: LD_EXP 37
17807: PUSH
17808: LD_EXP 51
17812: AND
17813: IFFALSE 17911
17815: GO 17817
17817: DISABLE
17818: LD_INT 0
17820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17821: LD_ADDR_VAR 0 1
17825: PUSH
17826: LD_INT 22
17828: PUSH
17829: LD_OWVAR 2
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 21
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PPUSH
17852: CALL_OW 69
17856: ST_TO_ADDR
// if not tmp then
17857: LD_VAR 0 1
17861: NOT
17862: IFFALSE 17866
// exit ;
17864: GO 17911
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 1
17873: PPUSH
17874: LD_VAR 0 1
17878: PPUSH
17879: CALL_OW 12
17883: ARRAY
17884: PPUSH
17885: LD_INT 1
17887: PPUSH
17888: LD_INT 4
17890: PPUSH
17891: CALL_OW 12
17895: PPUSH
17896: LD_INT 3000
17898: PPUSH
17899: LD_INT 9000
17901: PPUSH
17902: CALL_OW 12
17906: PPUSH
17907: CALL_OW 492
// end ;
17911: PPOPN 1
17913: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17914: LD_EXP 37
17918: PUSH
17919: LD_EXP 52
17923: AND
17924: IFFALSE 17944
17926: GO 17928
17928: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17929: LD_INT 1
17931: PPUSH
17932: LD_OWVAR 2
17936: PPUSH
17937: LD_INT 0
17939: PPUSH
17940: CALL_OW 324
17944: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17945: LD_EXP 37
17949: PUSH
17950: LD_EXP 53
17954: AND
17955: IFFALSE 18038
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
17963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17964: LD_ADDR_VAR 0 2
17968: PUSH
17969: LD_INT 22
17971: PUSH
17972: LD_OWVAR 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 21
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PPUSH
17995: CALL_OW 69
17999: ST_TO_ADDR
// if not tmp then
18000: LD_VAR 0 2
18004: NOT
18005: IFFALSE 18009
// exit ;
18007: GO 18038
// for i in tmp do
18009: LD_ADDR_VAR 0 1
18013: PUSH
18014: LD_VAR 0 2
18018: PUSH
18019: FOR_IN
18020: IFFALSE 18036
// SetBLevel ( i , 10 ) ;
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_INT 10
18029: PPUSH
18030: CALL_OW 241
18034: GO 18019
18036: POP
18037: POP
// end ;
18038: PPOPN 2
18040: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18041: LD_EXP 37
18045: PUSH
18046: LD_EXP 54
18050: AND
18051: IFFALSE 18162
18053: GO 18055
18055: DISABLE
18056: LD_INT 0
18058: PPUSH
18059: PPUSH
18060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18061: LD_ADDR_VAR 0 3
18065: PUSH
18066: LD_INT 22
18068: PUSH
18069: LD_OWVAR 2
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 25
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: ST_TO_ADDR
// if not tmp then
18097: LD_VAR 0 3
18101: NOT
18102: IFFALSE 18106
// exit ;
18104: GO 18162
// un := tmp [ rand ( 1 , tmp ) ] ;
18106: LD_ADDR_VAR 0 2
18110: PUSH
18111: LD_VAR 0 3
18115: PUSH
18116: LD_INT 1
18118: PPUSH
18119: LD_VAR 0 3
18123: PPUSH
18124: CALL_OW 12
18128: ARRAY
18129: ST_TO_ADDR
// if Crawls ( un ) then
18130: LD_VAR 0 2
18134: PPUSH
18135: CALL_OW 318
18139: IFFALSE 18150
// ComWalk ( un ) ;
18141: LD_VAR 0 2
18145: PPUSH
18146: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18150: LD_VAR 0 2
18154: PPUSH
18155: LD_INT 5
18157: PPUSH
18158: CALL_OW 336
// end ;
18162: PPOPN 3
18164: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18165: LD_EXP 37
18169: PUSH
18170: LD_EXP 55
18174: AND
18175: PUSH
18176: LD_OWVAR 67
18180: PUSH
18181: LD_INT 3
18183: LESS
18184: AND
18185: IFFALSE 18204
18187: GO 18189
18189: DISABLE
// Difficulty := Difficulty + 1 ;
18190: LD_ADDR_OWVAR 67
18194: PUSH
18195: LD_OWVAR 67
18199: PUSH
18200: LD_INT 1
18202: PLUS
18203: ST_TO_ADDR
18204: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18205: LD_EXP 37
18209: PUSH
18210: LD_EXP 56
18214: AND
18215: IFFALSE 18318
18217: GO 18219
18219: DISABLE
18220: LD_INT 0
18222: PPUSH
// begin for i := 1 to 5 do
18223: LD_ADDR_VAR 0 1
18227: PUSH
18228: DOUBLE
18229: LD_INT 1
18231: DEC
18232: ST_TO_ADDR
18233: LD_INT 5
18235: PUSH
18236: FOR_TO
18237: IFFALSE 18316
// begin uc_nation := nation_nature ;
18239: LD_ADDR_OWVAR 21
18243: PUSH
18244: LD_INT 0
18246: ST_TO_ADDR
// uc_side := 0 ;
18247: LD_ADDR_OWVAR 20
18251: PUSH
18252: LD_INT 0
18254: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18255: LD_ADDR_OWVAR 29
18259: PUSH
18260: LD_INT 12
18262: PUSH
18263: LD_INT 12
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: ST_TO_ADDR
// hc_agressivity := 20 ;
18270: LD_ADDR_OWVAR 35
18274: PUSH
18275: LD_INT 20
18277: ST_TO_ADDR
// hc_class := class_tiger ;
18278: LD_ADDR_OWVAR 28
18282: PUSH
18283: LD_INT 14
18285: ST_TO_ADDR
// hc_gallery :=  ;
18286: LD_ADDR_OWVAR 33
18290: PUSH
18291: LD_STRING 
18293: ST_TO_ADDR
// hc_name :=  ;
18294: LD_ADDR_OWVAR 26
18298: PUSH
18299: LD_STRING 
18301: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18302: CALL_OW 44
18306: PPUSH
18307: LD_INT 0
18309: PPUSH
18310: CALL_OW 51
// end ;
18314: GO 18236
18316: POP
18317: POP
// end ;
18318: PPOPN 1
18320: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18321: LD_EXP 37
18325: PUSH
18326: LD_EXP 57
18330: AND
18331: IFFALSE 18340
18333: GO 18335
18335: DISABLE
// StreamSibBomb ;
18336: CALL 18341 0 0
18340: END
// export function StreamSibBomb ; var i , x , y ; begin
18341: LD_INT 0
18343: PPUSH
18344: PPUSH
18345: PPUSH
18346: PPUSH
// result := false ;
18347: LD_ADDR_VAR 0 1
18351: PUSH
18352: LD_INT 0
18354: ST_TO_ADDR
// for i := 1 to 16 do
18355: LD_ADDR_VAR 0 2
18359: PUSH
18360: DOUBLE
18361: LD_INT 1
18363: DEC
18364: ST_TO_ADDR
18365: LD_INT 16
18367: PUSH
18368: FOR_TO
18369: IFFALSE 18568
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18371: LD_ADDR_VAR 0 3
18375: PUSH
18376: LD_INT 10
18378: PUSH
18379: LD_INT 20
18381: PUSH
18382: LD_INT 30
18384: PUSH
18385: LD_INT 40
18387: PUSH
18388: LD_INT 50
18390: PUSH
18391: LD_INT 60
18393: PUSH
18394: LD_INT 70
18396: PUSH
18397: LD_INT 80
18399: PUSH
18400: LD_INT 90
18402: PUSH
18403: LD_INT 100
18405: PUSH
18406: LD_INT 110
18408: PUSH
18409: LD_INT 120
18411: PUSH
18412: LD_INT 130
18414: PUSH
18415: LD_INT 140
18417: PUSH
18418: LD_INT 150
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: PPUSH
18441: LD_INT 15
18443: PPUSH
18444: CALL_OW 12
18448: ARRAY
18449: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18450: LD_ADDR_VAR 0 4
18454: PUSH
18455: LD_INT 10
18457: PUSH
18458: LD_INT 20
18460: PUSH
18461: LD_INT 30
18463: PUSH
18464: LD_INT 40
18466: PUSH
18467: LD_INT 50
18469: PUSH
18470: LD_INT 60
18472: PUSH
18473: LD_INT 70
18475: PUSH
18476: LD_INT 80
18478: PUSH
18479: LD_INT 90
18481: PUSH
18482: LD_INT 100
18484: PUSH
18485: LD_INT 110
18487: PUSH
18488: LD_INT 120
18490: PUSH
18491: LD_INT 130
18493: PUSH
18494: LD_INT 140
18496: PUSH
18497: LD_INT 150
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 1
18519: PPUSH
18520: LD_INT 15
18522: PPUSH
18523: CALL_OW 12
18527: ARRAY
18528: ST_TO_ADDR
// if ValidHex ( x , y ) then
18529: LD_VAR 0 3
18533: PPUSH
18534: LD_VAR 0 4
18538: PPUSH
18539: CALL_OW 488
18543: IFFALSE 18566
// begin result := [ x , y ] ;
18545: LD_ADDR_VAR 0 1
18549: PUSH
18550: LD_VAR 0 3
18554: PUSH
18555: LD_VAR 0 4
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: ST_TO_ADDR
// break ;
18564: GO 18568
// end ; end ;
18566: GO 18368
18568: POP
18569: POP
// if result then
18570: LD_VAR 0 1
18574: IFFALSE 18634
// begin ToLua ( playSibBomb() ) ;
18576: LD_STRING playSibBomb()
18578: PPUSH
18579: CALL_OW 559
// wait ( 0 0$14 ) ;
18583: LD_INT 490
18585: PPUSH
18586: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18590: LD_VAR 0 1
18594: PUSH
18595: LD_INT 1
18597: ARRAY
18598: PPUSH
18599: LD_VAR 0 1
18603: PUSH
18604: LD_INT 2
18606: ARRAY
18607: PPUSH
18608: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18612: LD_VAR 0 1
18616: PUSH
18617: LD_INT 1
18619: ARRAY
18620: PPUSH
18621: LD_VAR 0 1
18625: PUSH
18626: LD_INT 2
18628: ARRAY
18629: PPUSH
18630: CALL_OW 429
// end ; end ;
18634: LD_VAR 0 1
18638: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18639: LD_EXP 37
18643: PUSH
18644: LD_EXP 59
18648: AND
18649: IFFALSE 18661
18651: GO 18653
18653: DISABLE
// YouLost (  ) ;
18654: LD_STRING 
18656: PPUSH
18657: CALL_OW 104
18661: END
// every 0 0$1 trigger StreamModeActive and sFog do
18662: LD_EXP 37
18666: PUSH
18667: LD_EXP 58
18671: AND
18672: IFFALSE 18686
18674: GO 18676
18676: DISABLE
// FogOff ( your_side ) ;
18677: LD_OWVAR 2
18681: PPUSH
18682: CALL_OW 344
18686: END
// every 0 0$1 trigger StreamModeActive and sSun do
18687: LD_EXP 37
18691: PUSH
18692: LD_EXP 60
18696: AND
18697: IFFALSE 18725
18699: GO 18701
18701: DISABLE
// begin solar_recharge_percent := 0 ;
18702: LD_ADDR_OWVAR 79
18706: PUSH
18707: LD_INT 0
18709: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18710: LD_INT 10500
18712: PPUSH
18713: CALL_OW 67
// solar_recharge_percent := 100 ;
18717: LD_ADDR_OWVAR 79
18721: PUSH
18722: LD_INT 100
18724: ST_TO_ADDR
// end ;
18725: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18726: LD_EXP 37
18730: PUSH
18731: LD_EXP 61
18735: AND
18736: IFFALSE 18975
18738: GO 18740
18740: DISABLE
18741: LD_INT 0
18743: PPUSH
18744: PPUSH
18745: PPUSH
// begin tmp := [ ] ;
18746: LD_ADDR_VAR 0 3
18750: PUSH
18751: EMPTY
18752: ST_TO_ADDR
// for i := 1 to 6 do
18753: LD_ADDR_VAR 0 1
18757: PUSH
18758: DOUBLE
18759: LD_INT 1
18761: DEC
18762: ST_TO_ADDR
18763: LD_INT 6
18765: PUSH
18766: FOR_TO
18767: IFFALSE 18872
// begin uc_nation := nation_nature ;
18769: LD_ADDR_OWVAR 21
18773: PUSH
18774: LD_INT 0
18776: ST_TO_ADDR
// uc_side := 0 ;
18777: LD_ADDR_OWVAR 20
18781: PUSH
18782: LD_INT 0
18784: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18785: LD_ADDR_OWVAR 29
18789: PUSH
18790: LD_INT 12
18792: PUSH
18793: LD_INT 12
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: ST_TO_ADDR
// hc_agressivity := 20 ;
18800: LD_ADDR_OWVAR 35
18804: PUSH
18805: LD_INT 20
18807: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18808: LD_ADDR_OWVAR 28
18812: PUSH
18813: LD_INT 17
18815: ST_TO_ADDR
// hc_gallery :=  ;
18816: LD_ADDR_OWVAR 33
18820: PUSH
18821: LD_STRING 
18823: ST_TO_ADDR
// hc_name :=  ;
18824: LD_ADDR_OWVAR 26
18828: PUSH
18829: LD_STRING 
18831: ST_TO_ADDR
// un := CreateHuman ;
18832: LD_ADDR_VAR 0 2
18836: PUSH
18837: CALL_OW 44
18841: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18842: LD_VAR 0 2
18846: PPUSH
18847: LD_INT 1
18849: PPUSH
18850: CALL_OW 51
// tmp := tmp ^ un ;
18854: LD_ADDR_VAR 0 3
18858: PUSH
18859: LD_VAR 0 3
18863: PUSH
18864: LD_VAR 0 2
18868: ADD
18869: ST_TO_ADDR
// end ;
18870: GO 18766
18872: POP
18873: POP
// repeat wait ( 0 0$1 ) ;
18874: LD_INT 35
18876: PPUSH
18877: CALL_OW 67
// for un in tmp do
18881: LD_ADDR_VAR 0 2
18885: PUSH
18886: LD_VAR 0 3
18890: PUSH
18891: FOR_IN
18892: IFFALSE 18966
// begin if IsDead ( un ) then
18894: LD_VAR 0 2
18898: PPUSH
18899: CALL_OW 301
18903: IFFALSE 18923
// begin tmp := tmp diff un ;
18905: LD_ADDR_VAR 0 3
18909: PUSH
18910: LD_VAR 0 3
18914: PUSH
18915: LD_VAR 0 2
18919: DIFF
18920: ST_TO_ADDR
// continue ;
18921: GO 18891
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18923: LD_VAR 0 2
18927: PPUSH
18928: LD_INT 3
18930: PUSH
18931: LD_INT 22
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PPUSH
18945: CALL_OW 69
18949: PPUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 74
18959: PPUSH
18960: CALL_OW 115
// end ;
18964: GO 18891
18966: POP
18967: POP
// until not tmp ;
18968: LD_VAR 0 3
18972: NOT
18973: IFFALSE 18874
// end ;
18975: PPOPN 3
18977: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18978: LD_EXP 37
18982: PUSH
18983: LD_EXP 62
18987: AND
18988: IFFALSE 19042
18990: GO 18992
18992: DISABLE
// begin ToLua ( displayTroll(); ) ;
18993: LD_STRING displayTroll();
18995: PPUSH
18996: CALL_OW 559
// wait ( 3 3$00 ) ;
19000: LD_INT 6300
19002: PPUSH
19003: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19007: LD_STRING hideTroll();
19009: PPUSH
19010: CALL_OW 559
// wait ( 1 1$00 ) ;
19014: LD_INT 2100
19016: PPUSH
19017: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19021: LD_STRING displayTroll();
19023: PPUSH
19024: CALL_OW 559
// wait ( 1 1$00 ) ;
19028: LD_INT 2100
19030: PPUSH
19031: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19035: LD_STRING hideTroll();
19037: PPUSH
19038: CALL_OW 559
// end ;
19042: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19043: LD_EXP 37
19047: PUSH
19048: LD_EXP 63
19052: AND
19053: IFFALSE 19116
19055: GO 19057
19057: DISABLE
19058: LD_INT 0
19060: PPUSH
// begin p := 0 ;
19061: LD_ADDR_VAR 0 1
19065: PUSH
19066: LD_INT 0
19068: ST_TO_ADDR
// repeat game_speed := 1 ;
19069: LD_ADDR_OWVAR 65
19073: PUSH
19074: LD_INT 1
19076: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19077: LD_INT 35
19079: PPUSH
19080: CALL_OW 67
// p := p + 1 ;
19084: LD_ADDR_VAR 0 1
19088: PUSH
19089: LD_VAR 0 1
19093: PUSH
19094: LD_INT 1
19096: PLUS
19097: ST_TO_ADDR
// until p >= 60 ;
19098: LD_VAR 0 1
19102: PUSH
19103: LD_INT 60
19105: GREATEREQUAL
19106: IFFALSE 19069
// game_speed := 4 ;
19108: LD_ADDR_OWVAR 65
19112: PUSH
19113: LD_INT 4
19115: ST_TO_ADDR
// end ;
19116: PPOPN 1
19118: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19119: LD_EXP 37
19123: PUSH
19124: LD_EXP 64
19128: AND
19129: IFFALSE 19275
19131: GO 19133
19133: DISABLE
19134: LD_INT 0
19136: PPUSH
19137: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19138: LD_ADDR_VAR 0 1
19142: PUSH
19143: LD_INT 22
19145: PUSH
19146: LD_OWVAR 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 2
19157: PUSH
19158: LD_INT 30
19160: PUSH
19161: LD_INT 0
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 30
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PPUSH
19187: CALL_OW 69
19191: ST_TO_ADDR
// if not depot then
19192: LD_VAR 0 1
19196: NOT
19197: IFFALSE 19201
// exit ;
19199: GO 19275
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: LD_VAR 0 1
19210: PUSH
19211: LD_INT 1
19213: PPUSH
19214: LD_VAR 0 1
19218: PPUSH
19219: CALL_OW 12
19223: ARRAY
19224: PPUSH
19225: CALL_OW 274
19229: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19230: LD_VAR 0 2
19234: PPUSH
19235: LD_INT 1
19237: PPUSH
19238: LD_INT 0
19240: PPUSH
19241: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19245: LD_VAR 0 2
19249: PPUSH
19250: LD_INT 2
19252: PPUSH
19253: LD_INT 0
19255: PPUSH
19256: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19260: LD_VAR 0 2
19264: PPUSH
19265: LD_INT 3
19267: PPUSH
19268: LD_INT 0
19270: PPUSH
19271: CALL_OW 277
// end ;
19275: PPOPN 2
19277: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19278: LD_EXP 37
19282: PUSH
19283: LD_EXP 65
19287: AND
19288: IFFALSE 19385
19290: GO 19292
19292: DISABLE
19293: LD_INT 0
19295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19296: LD_ADDR_VAR 0 1
19300: PUSH
19301: LD_INT 22
19303: PUSH
19304: LD_OWVAR 2
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 21
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 3
19325: PUSH
19326: LD_INT 23
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 69
19349: ST_TO_ADDR
// if not tmp then
19350: LD_VAR 0 1
19354: NOT
19355: IFFALSE 19359
// exit ;
19357: GO 19385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19359: LD_VAR 0 1
19363: PUSH
19364: LD_INT 1
19366: PPUSH
19367: LD_VAR 0 1
19371: PPUSH
19372: CALL_OW 12
19376: ARRAY
19377: PPUSH
19378: LD_INT 200
19380: PPUSH
19381: CALL_OW 234
// end ;
19385: PPOPN 1
19387: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19388: LD_EXP 37
19392: PUSH
19393: LD_EXP 66
19397: AND
19398: IFFALSE 19477
19400: GO 19402
19402: DISABLE
19403: LD_INT 0
19405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19406: LD_ADDR_VAR 0 1
19410: PUSH
19411: LD_INT 22
19413: PUSH
19414: LD_OWVAR 2
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 21
19425: PUSH
19426: LD_INT 2
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PPUSH
19437: CALL_OW 69
19441: ST_TO_ADDR
// if not tmp then
19442: LD_VAR 0 1
19446: NOT
19447: IFFALSE 19451
// exit ;
19449: GO 19477
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19451: LD_VAR 0 1
19455: PUSH
19456: LD_INT 1
19458: PPUSH
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 12
19468: ARRAY
19469: PPUSH
19470: LD_INT 60
19472: PPUSH
19473: CALL_OW 234
// end ;
19477: PPOPN 1
19479: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19480: LD_EXP 37
19484: PUSH
19485: LD_EXP 67
19489: AND
19490: IFFALSE 19589
19492: GO 19494
19494: DISABLE
19495: LD_INT 0
19497: PPUSH
19498: PPUSH
// begin enable ;
19499: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19500: LD_ADDR_VAR 0 1
19504: PUSH
19505: LD_INT 22
19507: PUSH
19508: LD_OWVAR 2
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 61
19519: PUSH
19520: EMPTY
19521: LIST
19522: PUSH
19523: LD_INT 33
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 69
19542: ST_TO_ADDR
// if not tmp then
19543: LD_VAR 0 1
19547: NOT
19548: IFFALSE 19552
// exit ;
19550: GO 19589
// for i in tmp do
19552: LD_ADDR_VAR 0 2
19556: PUSH
19557: LD_VAR 0 1
19561: PUSH
19562: FOR_IN
19563: IFFALSE 19587
// if IsControledBy ( i ) then
19565: LD_VAR 0 2
19569: PPUSH
19570: CALL_OW 312
19574: IFFALSE 19585
// ComUnlink ( i ) ;
19576: LD_VAR 0 2
19580: PPUSH
19581: CALL_OW 136
19585: GO 19562
19587: POP
19588: POP
// end ;
19589: PPOPN 2
19591: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19592: LD_EXP 37
19596: PUSH
19597: LD_EXP 68
19601: AND
19602: IFFALSE 19742
19604: GO 19606
19606: DISABLE
19607: LD_INT 0
19609: PPUSH
19610: PPUSH
// begin ToLua ( displayPowell(); ) ;
19611: LD_STRING displayPowell();
19613: PPUSH
19614: CALL_OW 559
// uc_side := 0 ;
19618: LD_ADDR_OWVAR 20
19622: PUSH
19623: LD_INT 0
19625: ST_TO_ADDR
// uc_nation := 2 ;
19626: LD_ADDR_OWVAR 21
19630: PUSH
19631: LD_INT 2
19633: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19634: LD_ADDR_OWVAR 37
19638: PUSH
19639: LD_INT 14
19641: ST_TO_ADDR
// vc_engine := engine_siberite ;
19642: LD_ADDR_OWVAR 39
19646: PUSH
19647: LD_INT 3
19649: ST_TO_ADDR
// vc_control := control_apeman ;
19650: LD_ADDR_OWVAR 38
19654: PUSH
19655: LD_INT 5
19657: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19658: LD_ADDR_OWVAR 40
19662: PUSH
19663: LD_INT 29
19665: ST_TO_ADDR
// un := CreateVehicle ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: CALL_OW 45
19675: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19676: LD_VAR 0 2
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19688: LD_INT 35
19690: PPUSH
19691: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19695: LD_VAR 0 2
19699: PPUSH
19700: LD_INT 22
19702: PUSH
19703: LD_OWVAR 2
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PPUSH
19712: CALL_OW 69
19716: PPUSH
19717: LD_VAR 0 2
19721: PPUSH
19722: CALL_OW 74
19726: PPUSH
19727: CALL_OW 115
// until IsDead ( un ) ;
19731: LD_VAR 0 2
19735: PPUSH
19736: CALL_OW 301
19740: IFFALSE 19688
// end ;
19742: PPOPN 2
19744: END
// every 0 0$1 trigger StreamModeActive and sStu do
19745: LD_EXP 37
19749: PUSH
19750: LD_EXP 76
19754: AND
19755: IFFALSE 19771
19757: GO 19759
19759: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19760: LD_STRING displayStucuk();
19762: PPUSH
19763: CALL_OW 559
// ResetFog ;
19767: CALL_OW 335
// end ;
19771: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19772: LD_EXP 37
19776: PUSH
19777: LD_EXP 69
19781: AND
19782: IFFALSE 19923
19784: GO 19786
19786: DISABLE
19787: LD_INT 0
19789: PPUSH
19790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19791: LD_ADDR_VAR 0 2
19795: PUSH
19796: LD_INT 22
19798: PUSH
19799: LD_OWVAR 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 21
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PPUSH
19822: CALL_OW 69
19826: ST_TO_ADDR
// if not tmp then
19827: LD_VAR 0 2
19831: NOT
19832: IFFALSE 19836
// exit ;
19834: GO 19923
// un := tmp [ rand ( 1 , tmp ) ] ;
19836: LD_ADDR_VAR 0 1
19840: PUSH
19841: LD_VAR 0 2
19845: PUSH
19846: LD_INT 1
19848: PPUSH
19849: LD_VAR 0 2
19853: PPUSH
19854: CALL_OW 12
19858: ARRAY
19859: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19872: LD_VAR 0 1
19876: PPUSH
19877: LD_OWVAR 3
19881: PUSH
19882: LD_VAR 0 1
19886: DIFF
19887: PPUSH
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 74
19897: PPUSH
19898: CALL_OW 115
// wait ( 0 0$20 ) ;
19902: LD_INT 700
19904: PPUSH
19905: CALL_OW 67
// SetSide ( un , your_side ) ;
19909: LD_VAR 0 1
19913: PPUSH
19914: LD_OWVAR 2
19918: PPUSH
19919: CALL_OW 235
// end ;
19923: PPOPN 2
19925: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19926: LD_EXP 37
19930: PUSH
19931: LD_EXP 70
19935: AND
19936: IFFALSE 20042
19938: GO 19940
19940: DISABLE
19941: LD_INT 0
19943: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19944: LD_ADDR_VAR 0 1
19948: PUSH
19949: LD_INT 22
19951: PUSH
19952: LD_OWVAR 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: LD_INT 30
19966: PUSH
19967: LD_INT 0
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 30
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PPUSH
19993: CALL_OW 69
19997: ST_TO_ADDR
// if not depot then
19998: LD_VAR 0 1
20002: NOT
20003: IFFALSE 20007
// exit ;
20005: GO 20042
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20007: LD_VAR 0 1
20011: PUSH
20012: LD_INT 1
20014: ARRAY
20015: PPUSH
20016: CALL_OW 250
20020: PPUSH
20021: LD_VAR 0 1
20025: PUSH
20026: LD_INT 1
20028: ARRAY
20029: PPUSH
20030: CALL_OW 251
20034: PPUSH
20035: LD_INT 70
20037: PPUSH
20038: CALL_OW 495
// end ;
20042: PPOPN 1
20044: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20045: LD_EXP 37
20049: PUSH
20050: LD_EXP 71
20054: AND
20055: IFFALSE 20266
20057: GO 20059
20059: DISABLE
20060: LD_INT 0
20062: PPUSH
20063: PPUSH
20064: PPUSH
20065: PPUSH
20066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20067: LD_ADDR_VAR 0 5
20071: PUSH
20072: LD_INT 22
20074: PUSH
20075: LD_OWVAR 2
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 21
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PPUSH
20098: CALL_OW 69
20102: ST_TO_ADDR
// if not tmp then
20103: LD_VAR 0 5
20107: NOT
20108: IFFALSE 20112
// exit ;
20110: GO 20266
// for i in tmp do
20112: LD_ADDR_VAR 0 1
20116: PUSH
20117: LD_VAR 0 5
20121: PUSH
20122: FOR_IN
20123: IFFALSE 20264
// begin d := rand ( 0 , 5 ) ;
20125: LD_ADDR_VAR 0 4
20129: PUSH
20130: LD_INT 0
20132: PPUSH
20133: LD_INT 5
20135: PPUSH
20136: CALL_OW 12
20140: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20141: LD_ADDR_VAR 0 2
20145: PUSH
20146: LD_VAR 0 1
20150: PPUSH
20151: CALL_OW 250
20155: PPUSH
20156: LD_VAR 0 4
20160: PPUSH
20161: LD_INT 3
20163: PPUSH
20164: LD_INT 12
20166: PPUSH
20167: CALL_OW 12
20171: PPUSH
20172: CALL_OW 272
20176: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20177: LD_ADDR_VAR 0 3
20181: PUSH
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 251
20191: PPUSH
20192: LD_VAR 0 4
20196: PPUSH
20197: LD_INT 3
20199: PPUSH
20200: LD_INT 12
20202: PPUSH
20203: CALL_OW 12
20207: PPUSH
20208: CALL_OW 273
20212: ST_TO_ADDR
// if ValidHex ( x , y ) then
20213: LD_VAR 0 2
20217: PPUSH
20218: LD_VAR 0 3
20222: PPUSH
20223: CALL_OW 488
20227: IFFALSE 20262
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20229: LD_VAR 0 1
20233: PPUSH
20234: LD_VAR 0 2
20238: PPUSH
20239: LD_VAR 0 3
20243: PPUSH
20244: LD_INT 3
20246: PPUSH
20247: LD_INT 6
20249: PPUSH
20250: CALL_OW 12
20254: PPUSH
20255: LD_INT 1
20257: PPUSH
20258: CALL_OW 483
// end ;
20262: GO 20122
20264: POP
20265: POP
// end ;
20266: PPOPN 5
20268: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20269: LD_EXP 37
20273: PUSH
20274: LD_EXP 72
20278: AND
20279: IFFALSE 20373
20281: GO 20283
20283: DISABLE
20284: LD_INT 0
20286: PPUSH
20287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20288: LD_ADDR_VAR 0 2
20292: PUSH
20293: LD_INT 22
20295: PUSH
20296: LD_OWVAR 2
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 32
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 21
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: PPUSH
20330: CALL_OW 69
20334: ST_TO_ADDR
// if not tmp then
20335: LD_VAR 0 2
20339: NOT
20340: IFFALSE 20344
// exit ;
20342: GO 20373
// for i in tmp do
20344: LD_ADDR_VAR 0 1
20348: PUSH
20349: LD_VAR 0 2
20353: PUSH
20354: FOR_IN
20355: IFFALSE 20371
// SetFuel ( i , 0 ) ;
20357: LD_VAR 0 1
20361: PPUSH
20362: LD_INT 0
20364: PPUSH
20365: CALL_OW 240
20369: GO 20354
20371: POP
20372: POP
// end ;
20373: PPOPN 2
20375: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20376: LD_EXP 37
20380: PUSH
20381: LD_EXP 73
20385: AND
20386: IFFALSE 20452
20388: GO 20390
20390: DISABLE
20391: LD_INT 0
20393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20394: LD_ADDR_VAR 0 1
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_OWVAR 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 30
20413: PUSH
20414: LD_INT 29
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PPUSH
20425: CALL_OW 69
20429: ST_TO_ADDR
// if not tmp then
20430: LD_VAR 0 1
20434: NOT
20435: IFFALSE 20439
// exit ;
20437: GO 20452
// DestroyUnit ( tmp [ 1 ] ) ;
20439: LD_VAR 0 1
20443: PUSH
20444: LD_INT 1
20446: ARRAY
20447: PPUSH
20448: CALL_OW 65
// end ;
20452: PPOPN 1
20454: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20455: LD_EXP 37
20459: PUSH
20460: LD_EXP 75
20464: AND
20465: IFFALSE 20594
20467: GO 20469
20469: DISABLE
20470: LD_INT 0
20472: PPUSH
// begin uc_side := 0 ;
20473: LD_ADDR_OWVAR 20
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// uc_nation := nation_arabian ;
20481: LD_ADDR_OWVAR 21
20485: PUSH
20486: LD_INT 2
20488: ST_TO_ADDR
// hc_gallery :=  ;
20489: LD_ADDR_OWVAR 33
20493: PUSH
20494: LD_STRING 
20496: ST_TO_ADDR
// hc_name :=  ;
20497: LD_ADDR_OWVAR 26
20501: PUSH
20502: LD_STRING 
20504: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20505: LD_INT 1
20507: PPUSH
20508: LD_INT 11
20510: PPUSH
20511: LD_INT 10
20513: PPUSH
20514: CALL_OW 380
// un := CreateHuman ;
20518: LD_ADDR_VAR 0 1
20522: PUSH
20523: CALL_OW 44
20527: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20528: LD_VAR 0 1
20532: PPUSH
20533: LD_INT 1
20535: PPUSH
20536: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20540: LD_INT 35
20542: PPUSH
20543: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20547: LD_VAR 0 1
20551: PPUSH
20552: LD_INT 22
20554: PUSH
20555: LD_OWVAR 2
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PPUSH
20564: CALL_OW 69
20568: PPUSH
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 74
20578: PPUSH
20579: CALL_OW 115
// until IsDead ( un ) ;
20583: LD_VAR 0 1
20587: PPUSH
20588: CALL_OW 301
20592: IFFALSE 20540
// end ;
20594: PPOPN 1
20596: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20597: LD_EXP 37
20601: PUSH
20602: LD_EXP 77
20606: AND
20607: IFFALSE 20619
20609: GO 20611
20611: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20612: LD_STRING earthquake(getX(game), 0, 32)
20614: PPUSH
20615: CALL_OW 559
20619: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20620: LD_EXP 37
20624: PUSH
20625: LD_EXP 78
20629: AND
20630: IFFALSE 20721
20632: GO 20634
20634: DISABLE
20635: LD_INT 0
20637: PPUSH
// begin enable ;
20638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20639: LD_ADDR_VAR 0 1
20643: PUSH
20644: LD_INT 22
20646: PUSH
20647: LD_OWVAR 2
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 21
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 33
20668: PUSH
20669: LD_INT 3
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 69
20685: ST_TO_ADDR
// if not tmp then
20686: LD_VAR 0 1
20690: NOT
20691: IFFALSE 20695
// exit ;
20693: GO 20721
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20695: LD_VAR 0 1
20699: PUSH
20700: LD_INT 1
20702: PPUSH
20703: LD_VAR 0 1
20707: PPUSH
20708: CALL_OW 12
20712: ARRAY
20713: PPUSH
20714: LD_INT 1
20716: PPUSH
20717: CALL_OW 234
// end ;
20721: PPOPN 1
20723: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20724: LD_EXP 37
20728: PUSH
20729: LD_EXP 79
20733: AND
20734: IFFALSE 20875
20736: GO 20738
20738: DISABLE
20739: LD_INT 0
20741: PPUSH
20742: PPUSH
20743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: LD_INT 22
20751: PUSH
20752: LD_OWVAR 2
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 25
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PPUSH
20775: CALL_OW 69
20779: ST_TO_ADDR
// if not tmp then
20780: LD_VAR 0 3
20784: NOT
20785: IFFALSE 20789
// exit ;
20787: GO 20875
// un := tmp [ rand ( 1 , tmp ) ] ;
20789: LD_ADDR_VAR 0 2
20793: PUSH
20794: LD_VAR 0 3
20798: PUSH
20799: LD_INT 1
20801: PPUSH
20802: LD_VAR 0 3
20806: PPUSH
20807: CALL_OW 12
20811: ARRAY
20812: ST_TO_ADDR
// if Crawls ( un ) then
20813: LD_VAR 0 2
20817: PPUSH
20818: CALL_OW 318
20822: IFFALSE 20833
// ComWalk ( un ) ;
20824: LD_VAR 0 2
20828: PPUSH
20829: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20833: LD_VAR 0 2
20837: PPUSH
20838: LD_INT 9
20840: PPUSH
20841: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20845: LD_INT 28
20847: PPUSH
20848: LD_OWVAR 2
20852: PPUSH
20853: LD_INT 2
20855: PPUSH
20856: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20860: LD_INT 29
20862: PPUSH
20863: LD_OWVAR 2
20867: PPUSH
20868: LD_INT 2
20870: PPUSH
20871: CALL_OW 322
// end ;
20875: PPOPN 3
20877: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20878: LD_EXP 37
20882: PUSH
20883: LD_EXP 80
20887: AND
20888: IFFALSE 20999
20890: GO 20892
20892: DISABLE
20893: LD_INT 0
20895: PPUSH
20896: PPUSH
20897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20898: LD_ADDR_VAR 0 3
20902: PUSH
20903: LD_INT 22
20905: PUSH
20906: LD_OWVAR 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 25
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PPUSH
20929: CALL_OW 69
20933: ST_TO_ADDR
// if not tmp then
20934: LD_VAR 0 3
20938: NOT
20939: IFFALSE 20943
// exit ;
20941: GO 20999
// un := tmp [ rand ( 1 , tmp ) ] ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_VAR 0 3
20952: PUSH
20953: LD_INT 1
20955: PPUSH
20956: LD_VAR 0 3
20960: PPUSH
20961: CALL_OW 12
20965: ARRAY
20966: ST_TO_ADDR
// if Crawls ( un ) then
20967: LD_VAR 0 2
20971: PPUSH
20972: CALL_OW 318
20976: IFFALSE 20987
// ComWalk ( un ) ;
20978: LD_VAR 0 2
20982: PPUSH
20983: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20987: LD_VAR 0 2
20991: PPUSH
20992: LD_INT 8
20994: PPUSH
20995: CALL_OW 336
// end ;
20999: PPOPN 3
21001: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21002: LD_EXP 37
21006: PUSH
21007: LD_EXP 81
21011: AND
21012: IFFALSE 21156
21014: GO 21016
21016: DISABLE
21017: LD_INT 0
21019: PPUSH
21020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21021: LD_ADDR_VAR 0 2
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_OWVAR 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 21
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 34
21053: PUSH
21054: LD_INT 12
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 34
21063: PUSH
21064: LD_INT 51
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 34
21073: PUSH
21074: LD_INT 32
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: PPUSH
21092: CALL_OW 69
21096: ST_TO_ADDR
// if not tmp then
21097: LD_VAR 0 2
21101: NOT
21102: IFFALSE 21106
// exit ;
21104: GO 21156
// for i in tmp do
21106: LD_ADDR_VAR 0 1
21110: PUSH
21111: LD_VAR 0 2
21115: PUSH
21116: FOR_IN
21117: IFFALSE 21154
// if GetCargo ( i , mat_artifact ) = 0 then
21119: LD_VAR 0 1
21123: PPUSH
21124: LD_INT 4
21126: PPUSH
21127: CALL_OW 289
21131: PUSH
21132: LD_INT 0
21134: EQUAL
21135: IFFALSE 21152
// SetCargo ( i , mat_siberit , 100 ) ;
21137: LD_VAR 0 1
21141: PPUSH
21142: LD_INT 3
21144: PPUSH
21145: LD_INT 100
21147: PPUSH
21148: CALL_OW 290
21152: GO 21116
21154: POP
21155: POP
// end ;
21156: PPOPN 2
21158: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21159: LD_EXP 37
21163: PUSH
21164: LD_EXP 82
21168: AND
21169: IFFALSE 21352
21171: GO 21173
21173: DISABLE
21174: LD_INT 0
21176: PPUSH
21177: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21178: LD_ADDR_VAR 0 2
21182: PUSH
21183: LD_INT 22
21185: PUSH
21186: LD_OWVAR 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PPUSH
21195: CALL_OW 69
21199: ST_TO_ADDR
// if not tmp then
21200: LD_VAR 0 2
21204: NOT
21205: IFFALSE 21209
// exit ;
21207: GO 21352
// for i := 1 to 2 do
21209: LD_ADDR_VAR 0 1
21213: PUSH
21214: DOUBLE
21215: LD_INT 1
21217: DEC
21218: ST_TO_ADDR
21219: LD_INT 2
21221: PUSH
21222: FOR_TO
21223: IFFALSE 21350
// begin uc_side := your_side ;
21225: LD_ADDR_OWVAR 20
21229: PUSH
21230: LD_OWVAR 2
21234: ST_TO_ADDR
// uc_nation := nation_american ;
21235: LD_ADDR_OWVAR 21
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
// vc_chassis := us_morphling ;
21243: LD_ADDR_OWVAR 37
21247: PUSH
21248: LD_INT 5
21250: ST_TO_ADDR
// vc_engine := engine_siberite ;
21251: LD_ADDR_OWVAR 39
21255: PUSH
21256: LD_INT 3
21258: ST_TO_ADDR
// vc_control := control_computer ;
21259: LD_ADDR_OWVAR 38
21263: PUSH
21264: LD_INT 3
21266: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21267: LD_ADDR_OWVAR 40
21271: PUSH
21272: LD_INT 10
21274: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21275: LD_VAR 0 2
21279: PUSH
21280: LD_INT 1
21282: ARRAY
21283: PPUSH
21284: CALL_OW 310
21288: NOT
21289: IFFALSE 21336
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21291: CALL_OW 45
21295: PPUSH
21296: LD_VAR 0 2
21300: PUSH
21301: LD_INT 1
21303: ARRAY
21304: PPUSH
21305: CALL_OW 250
21309: PPUSH
21310: LD_VAR 0 2
21314: PUSH
21315: LD_INT 1
21317: ARRAY
21318: PPUSH
21319: CALL_OW 251
21323: PPUSH
21324: LD_INT 12
21326: PPUSH
21327: LD_INT 1
21329: PPUSH
21330: CALL_OW 50
21334: GO 21348
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21336: CALL_OW 45
21340: PPUSH
21341: LD_INT 1
21343: PPUSH
21344: CALL_OW 51
// end ;
21348: GO 21222
21350: POP
21351: POP
// end ;
21352: PPOPN 2
21354: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21355: LD_EXP 37
21359: PUSH
21360: LD_EXP 83
21364: AND
21365: IFFALSE 21587
21367: GO 21369
21369: DISABLE
21370: LD_INT 0
21372: PPUSH
21373: PPUSH
21374: PPUSH
21375: PPUSH
21376: PPUSH
21377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21378: LD_ADDR_VAR 0 6
21382: PUSH
21383: LD_INT 22
21385: PUSH
21386: LD_OWVAR 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 21
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 3
21407: PUSH
21408: LD_INT 23
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: PPUSH
21427: CALL_OW 69
21431: ST_TO_ADDR
// if not tmp then
21432: LD_VAR 0 6
21436: NOT
21437: IFFALSE 21441
// exit ;
21439: GO 21587
// s1 := rand ( 1 , 4 ) ;
21441: LD_ADDR_VAR 0 2
21445: PUSH
21446: LD_INT 1
21448: PPUSH
21449: LD_INT 4
21451: PPUSH
21452: CALL_OW 12
21456: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21457: LD_ADDR_VAR 0 4
21461: PUSH
21462: LD_VAR 0 6
21466: PUSH
21467: LD_INT 1
21469: ARRAY
21470: PPUSH
21471: LD_VAR 0 2
21475: PPUSH
21476: CALL_OW 259
21480: ST_TO_ADDR
// if s1 = 1 then
21481: LD_VAR 0 2
21485: PUSH
21486: LD_INT 1
21488: EQUAL
21489: IFFALSE 21509
// s2 := rand ( 2 , 4 ) else
21491: LD_ADDR_VAR 0 3
21495: PUSH
21496: LD_INT 2
21498: PPUSH
21499: LD_INT 4
21501: PPUSH
21502: CALL_OW 12
21506: ST_TO_ADDR
21507: GO 21517
// s2 := 1 ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: LD_INT 1
21516: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21517: LD_ADDR_VAR 0 5
21521: PUSH
21522: LD_VAR 0 6
21526: PUSH
21527: LD_INT 1
21529: ARRAY
21530: PPUSH
21531: LD_VAR 0 3
21535: PPUSH
21536: CALL_OW 259
21540: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21541: LD_VAR 0 6
21545: PUSH
21546: LD_INT 1
21548: ARRAY
21549: PPUSH
21550: LD_VAR 0 2
21554: PPUSH
21555: LD_VAR 0 5
21559: PPUSH
21560: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21564: LD_VAR 0 6
21568: PUSH
21569: LD_INT 1
21571: ARRAY
21572: PPUSH
21573: LD_VAR 0 3
21577: PPUSH
21578: LD_VAR 0 4
21582: PPUSH
21583: CALL_OW 237
// end ;
21587: PPOPN 6
21589: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21590: LD_EXP 37
21594: PUSH
21595: LD_EXP 84
21599: AND
21600: IFFALSE 21679
21602: GO 21604
21604: DISABLE
21605: LD_INT 0
21607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21608: LD_ADDR_VAR 0 1
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_OWVAR 2
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 30
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PPUSH
21639: CALL_OW 69
21643: ST_TO_ADDR
// if not tmp then
21644: LD_VAR 0 1
21648: NOT
21649: IFFALSE 21653
// exit ;
21651: GO 21679
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21653: LD_VAR 0 1
21657: PUSH
21658: LD_INT 1
21660: PPUSH
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL_OW 12
21670: ARRAY
21671: PPUSH
21672: LD_INT 1
21674: PPUSH
21675: CALL_OW 234
// end ;
21679: PPOPN 1
21681: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21682: LD_EXP 37
21686: PUSH
21687: LD_EXP 85
21691: AND
21692: IFFALSE 21804
21694: GO 21696
21696: DISABLE
21697: LD_INT 0
21699: PPUSH
21700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21701: LD_ADDR_VAR 0 2
21705: PUSH
21706: LD_INT 22
21708: PUSH
21709: LD_OWVAR 2
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: LD_INT 30
21723: PUSH
21724: LD_INT 27
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 30
21733: PUSH
21734: LD_INT 26
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 30
21743: PUSH
21744: LD_INT 28
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PPUSH
21761: CALL_OW 69
21765: ST_TO_ADDR
// if not tmp then
21766: LD_VAR 0 2
21770: NOT
21771: IFFALSE 21775
// exit ;
21773: GO 21804
// for i in tmp do
21775: LD_ADDR_VAR 0 1
21779: PUSH
21780: LD_VAR 0 2
21784: PUSH
21785: FOR_IN
21786: IFFALSE 21802
// SetLives ( i , 1 ) ;
21788: LD_VAR 0 1
21792: PPUSH
21793: LD_INT 1
21795: PPUSH
21796: CALL_OW 234
21800: GO 21785
21802: POP
21803: POP
// end ;
21804: PPOPN 2
21806: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21807: LD_EXP 37
21811: PUSH
21812: LD_EXP 86
21816: AND
21817: IFFALSE 22091
21819: GO 21821
21821: DISABLE
21822: LD_INT 0
21824: PPUSH
21825: PPUSH
21826: PPUSH
// begin i := rand ( 1 , 7 ) ;
21827: LD_ADDR_VAR 0 1
21831: PUSH
21832: LD_INT 1
21834: PPUSH
21835: LD_INT 7
21837: PPUSH
21838: CALL_OW 12
21842: ST_TO_ADDR
// case i of 1 :
21843: LD_VAR 0 1
21847: PUSH
21848: LD_INT 1
21850: DOUBLE
21851: EQUAL
21852: IFTRUE 21856
21854: GO 21866
21856: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21857: LD_STRING earthquake(getX(game), 0, 32)
21859: PPUSH
21860: CALL_OW 559
21864: GO 22091
21866: LD_INT 2
21868: DOUBLE
21869: EQUAL
21870: IFTRUE 21874
21872: GO 21888
21874: POP
// begin ToLua ( displayStucuk(); ) ;
21875: LD_STRING displayStucuk();
21877: PPUSH
21878: CALL_OW 559
// ResetFog ;
21882: CALL_OW 335
// end ; 3 :
21886: GO 22091
21888: LD_INT 3
21890: DOUBLE
21891: EQUAL
21892: IFTRUE 21896
21894: GO 22000
21896: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21897: LD_ADDR_VAR 0 2
21901: PUSH
21902: LD_INT 22
21904: PUSH
21905: LD_OWVAR 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 25
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PPUSH
21928: CALL_OW 69
21932: ST_TO_ADDR
// if not tmp then
21933: LD_VAR 0 2
21937: NOT
21938: IFFALSE 21942
// exit ;
21940: GO 22091
// un := tmp [ rand ( 1 , tmp ) ] ;
21942: LD_ADDR_VAR 0 3
21946: PUSH
21947: LD_VAR 0 2
21951: PUSH
21952: LD_INT 1
21954: PPUSH
21955: LD_VAR 0 2
21959: PPUSH
21960: CALL_OW 12
21964: ARRAY
21965: ST_TO_ADDR
// if Crawls ( un ) then
21966: LD_VAR 0 3
21970: PPUSH
21971: CALL_OW 318
21975: IFFALSE 21986
// ComWalk ( un ) ;
21977: LD_VAR 0 3
21981: PPUSH
21982: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21986: LD_VAR 0 3
21990: PPUSH
21991: LD_INT 8
21993: PPUSH
21994: CALL_OW 336
// end ; 4 :
21998: GO 22091
22000: LD_INT 4
22002: DOUBLE
22003: EQUAL
22004: IFTRUE 22008
22006: GO 22069
22008: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22009: LD_ADDR_VAR 0 2
22013: PUSH
22014: LD_INT 22
22016: PUSH
22017: LD_OWVAR 2
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 30
22028: PUSH
22029: LD_INT 29
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PPUSH
22040: CALL_OW 69
22044: ST_TO_ADDR
// if not tmp then
22045: LD_VAR 0 2
22049: NOT
22050: IFFALSE 22054
// exit ;
22052: GO 22091
// DestroyUnit ( tmp [ 1 ] ) ;
22054: LD_VAR 0 2
22058: PUSH
22059: LD_INT 1
22061: ARRAY
22062: PPUSH
22063: CALL_OW 65
// end ; 5 .. 7 :
22067: GO 22091
22069: LD_INT 5
22071: DOUBLE
22072: GREATEREQUAL
22073: IFFALSE 22081
22075: LD_INT 7
22077: DOUBLE
22078: LESSEQUAL
22079: IFTRUE 22083
22081: GO 22090
22083: POP
// StreamSibBomb ; end ;
22084: CALL 18341 0 0
22088: GO 22091
22090: POP
// end ;
22091: PPOPN 3
22093: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22094: LD_EXP 37
22098: PUSH
22099: LD_EXP 87
22103: AND
22104: IFFALSE 22260
22106: GO 22108
22108: DISABLE
22109: LD_INT 0
22111: PPUSH
22112: PPUSH
22113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22114: LD_ADDR_VAR 0 2
22118: PUSH
22119: LD_INT 81
22121: PUSH
22122: LD_OWVAR 2
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: LD_INT 21
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 21
22146: PUSH
22147: LD_INT 2
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: LIST
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PPUSH
22163: CALL_OW 69
22167: ST_TO_ADDR
// if not tmp then
22168: LD_VAR 0 2
22172: NOT
22173: IFFALSE 22177
// exit ;
22175: GO 22260
// p := 0 ;
22177: LD_ADDR_VAR 0 3
22181: PUSH
22182: LD_INT 0
22184: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22185: LD_INT 35
22187: PPUSH
22188: CALL_OW 67
// p := p + 1 ;
22192: LD_ADDR_VAR 0 3
22196: PUSH
22197: LD_VAR 0 3
22201: PUSH
22202: LD_INT 1
22204: PLUS
22205: ST_TO_ADDR
// for i in tmp do
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: LD_VAR 0 2
22215: PUSH
22216: FOR_IN
22217: IFFALSE 22248
// if GetLives ( i ) < 1000 then
22219: LD_VAR 0 1
22223: PPUSH
22224: CALL_OW 256
22228: PUSH
22229: LD_INT 1000
22231: LESS
22232: IFFALSE 22246
// SetLives ( i , 1000 ) ;
22234: LD_VAR 0 1
22238: PPUSH
22239: LD_INT 1000
22241: PPUSH
22242: CALL_OW 234
22246: GO 22216
22248: POP
22249: POP
// until p > 20 ;
22250: LD_VAR 0 3
22254: PUSH
22255: LD_INT 20
22257: GREATER
22258: IFFALSE 22185
// end ;
22260: PPOPN 3
22262: END
// every 0 0$1 trigger StreamModeActive and sTime do
22263: LD_EXP 37
22267: PUSH
22268: LD_EXP 88
22272: AND
22273: IFFALSE 22308
22275: GO 22277
22277: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22278: LD_INT 28
22280: PPUSH
22281: LD_OWVAR 2
22285: PPUSH
22286: LD_INT 2
22288: PPUSH
22289: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22293: LD_INT 30
22295: PPUSH
22296: LD_OWVAR 2
22300: PPUSH
22301: LD_INT 2
22303: PPUSH
22304: CALL_OW 322
// end ;
22308: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22309: LD_EXP 37
22313: PUSH
22314: LD_EXP 89
22318: AND
22319: IFFALSE 22440
22321: GO 22323
22323: DISABLE
22324: LD_INT 0
22326: PPUSH
22327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22328: LD_ADDR_VAR 0 2
22332: PUSH
22333: LD_INT 22
22335: PUSH
22336: LD_OWVAR 2
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 21
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 3
22357: PUSH
22358: LD_INT 23
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: LIST
22376: PPUSH
22377: CALL_OW 69
22381: ST_TO_ADDR
// if not tmp then
22382: LD_VAR 0 2
22386: NOT
22387: IFFALSE 22391
// exit ;
22389: GO 22440
// for i in tmp do
22391: LD_ADDR_VAR 0 1
22395: PUSH
22396: LD_VAR 0 2
22400: PUSH
22401: FOR_IN
22402: IFFALSE 22438
// begin if Crawls ( i ) then
22404: LD_VAR 0 1
22408: PPUSH
22409: CALL_OW 318
22413: IFFALSE 22424
// ComWalk ( i ) ;
22415: LD_VAR 0 1
22419: PPUSH
22420: CALL_OW 138
// SetClass ( i , 2 ) ;
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_INT 2
22431: PPUSH
22432: CALL_OW 336
// end ;
22436: GO 22401
22438: POP
22439: POP
// end ;
22440: PPOPN 2
22442: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22443: LD_EXP 37
22447: PUSH
22448: LD_EXP 90
22452: AND
22453: IFFALSE 22734
22455: GO 22457
22457: DISABLE
22458: LD_INT 0
22460: PPUSH
22461: PPUSH
22462: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22463: LD_OWVAR 2
22467: PPUSH
22468: LD_INT 9
22470: PPUSH
22471: LD_INT 1
22473: PPUSH
22474: LD_INT 1
22476: PPUSH
22477: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22481: LD_INT 9
22483: PPUSH
22484: LD_OWVAR 2
22488: PPUSH
22489: CALL_OW 343
// uc_side := 9 ;
22493: LD_ADDR_OWVAR 20
22497: PUSH
22498: LD_INT 9
22500: ST_TO_ADDR
// uc_nation := 2 ;
22501: LD_ADDR_OWVAR 21
22505: PUSH
22506: LD_INT 2
22508: ST_TO_ADDR
// hc_name := Dark Warrior ;
22509: LD_ADDR_OWVAR 26
22513: PUSH
22514: LD_STRING Dark Warrior
22516: ST_TO_ADDR
// hc_gallery :=  ;
22517: LD_ADDR_OWVAR 33
22521: PUSH
22522: LD_STRING 
22524: ST_TO_ADDR
// hc_noskilllimit := true ;
22525: LD_ADDR_OWVAR 76
22529: PUSH
22530: LD_INT 1
22532: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22533: LD_ADDR_OWVAR 31
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 30
22543: PUSH
22544: LD_INT 30
22546: PUSH
22547: LD_INT 30
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: ST_TO_ADDR
// un := CreateHuman ;
22556: LD_ADDR_VAR 0 3
22560: PUSH
22561: CALL_OW 44
22565: ST_TO_ADDR
// hc_noskilllimit := false ;
22566: LD_ADDR_OWVAR 76
22570: PUSH
22571: LD_INT 0
22573: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22574: LD_VAR 0 3
22578: PPUSH
22579: LD_INT 1
22581: PPUSH
22582: CALL_OW 51
// p := 0 ;
22586: LD_ADDR_VAR 0 2
22590: PUSH
22591: LD_INT 0
22593: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22594: LD_INT 35
22596: PPUSH
22597: CALL_OW 67
// p := p + 1 ;
22601: LD_ADDR_VAR 0 2
22605: PUSH
22606: LD_VAR 0 2
22610: PUSH
22611: LD_INT 1
22613: PLUS
22614: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22615: LD_VAR 0 3
22619: PPUSH
22620: CALL_OW 256
22624: PUSH
22625: LD_INT 1000
22627: LESS
22628: IFFALSE 22642
// SetLives ( un , 1000 ) ;
22630: LD_VAR 0 3
22634: PPUSH
22635: LD_INT 1000
22637: PPUSH
22638: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22642: LD_VAR 0 3
22646: PPUSH
22647: LD_INT 81
22649: PUSH
22650: LD_OWVAR 2
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 91
22661: PUSH
22662: LD_VAR 0 3
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: PPUSH
22684: LD_VAR 0 3
22688: PPUSH
22689: CALL_OW 74
22693: PPUSH
22694: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22698: LD_VAR 0 2
22702: PUSH
22703: LD_INT 60
22705: GREATER
22706: PUSH
22707: LD_VAR 0 3
22711: PPUSH
22712: CALL_OW 301
22716: OR
22717: IFFALSE 22594
// if un then
22719: LD_VAR 0 3
22723: IFFALSE 22734
// RemoveUnit ( un ) ;
22725: LD_VAR 0 3
22729: PPUSH
22730: CALL_OW 64
// end ;
22734: PPOPN 3
22736: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22737: LD_INT 0
22739: PPUSH
// case cmd of 301 :
22740: LD_VAR 0 1
22744: PUSH
22745: LD_INT 301
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22785
22753: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22754: LD_VAR 0 6
22758: PPUSH
22759: LD_VAR 0 7
22763: PPUSH
22764: LD_VAR 0 8
22768: PPUSH
22769: LD_VAR 0 4
22773: PPUSH
22774: LD_VAR 0 5
22778: PPUSH
22779: CALL 23986 0 5
22783: GO 22906
22785: LD_INT 302
22787: DOUBLE
22788: EQUAL
22789: IFTRUE 22793
22791: GO 22830
22793: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22794: LD_VAR 0 6
22798: PPUSH
22799: LD_VAR 0 7
22803: PPUSH
22804: LD_VAR 0 8
22808: PPUSH
22809: LD_VAR 0 9
22813: PPUSH
22814: LD_VAR 0 4
22818: PPUSH
22819: LD_VAR 0 5
22823: PPUSH
22824: CALL 24077 0 6
22828: GO 22906
22830: LD_INT 303
22832: DOUBLE
22833: EQUAL
22834: IFTRUE 22838
22836: GO 22875
22838: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22839: LD_VAR 0 6
22843: PPUSH
22844: LD_VAR 0 7
22848: PPUSH
22849: LD_VAR 0 8
22853: PPUSH
22854: LD_VAR 0 9
22858: PPUSH
22859: LD_VAR 0 4
22863: PPUSH
22864: LD_VAR 0 5
22868: PPUSH
22869: CALL 22911 0 6
22873: GO 22906
22875: LD_INT 304
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22905
22883: POP
// hHackTeleport ( unit , x , y ) ; end ;
22884: LD_VAR 0 2
22888: PPUSH
22889: LD_VAR 0 4
22893: PPUSH
22894: LD_VAR 0 5
22898: PPUSH
22899: CALL 24670 0 3
22903: GO 22906
22905: POP
// end ;
22906: LD_VAR 0 12
22910: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22911: LD_INT 0
22913: PPUSH
22914: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22915: LD_VAR 0 1
22919: PUSH
22920: LD_INT 1
22922: LESS
22923: PUSH
22924: LD_VAR 0 1
22928: PUSH
22929: LD_INT 3
22931: GREATER
22932: OR
22933: PUSH
22934: LD_VAR 0 5
22938: PPUSH
22939: LD_VAR 0 6
22943: PPUSH
22944: CALL_OW 428
22948: OR
22949: IFFALSE 22953
// exit ;
22951: GO 23673
// uc_side := your_side ;
22953: LD_ADDR_OWVAR 20
22957: PUSH
22958: LD_OWVAR 2
22962: ST_TO_ADDR
// uc_nation := nation ;
22963: LD_ADDR_OWVAR 21
22967: PUSH
22968: LD_VAR 0 1
22972: ST_TO_ADDR
// bc_level = 1 ;
22973: LD_ADDR_OWVAR 43
22977: PUSH
22978: LD_INT 1
22980: ST_TO_ADDR
// case btype of 1 :
22981: LD_VAR 0 2
22985: PUSH
22986: LD_INT 1
22988: DOUBLE
22989: EQUAL
22990: IFTRUE 22994
22992: GO 23005
22994: POP
// bc_type := b_depot ; 2 :
22995: LD_ADDR_OWVAR 42
22999: PUSH
23000: LD_INT 0
23002: ST_TO_ADDR
23003: GO 23617
23005: LD_INT 2
23007: DOUBLE
23008: EQUAL
23009: IFTRUE 23013
23011: GO 23024
23013: POP
// bc_type := b_warehouse ; 3 :
23014: LD_ADDR_OWVAR 42
23018: PUSH
23019: LD_INT 1
23021: ST_TO_ADDR
23022: GO 23617
23024: LD_INT 3
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23043
23032: POP
// bc_type := b_lab ; 4 .. 9 :
23033: LD_ADDR_OWVAR 42
23037: PUSH
23038: LD_INT 6
23040: ST_TO_ADDR
23041: GO 23617
23043: LD_INT 4
23045: DOUBLE
23046: GREATEREQUAL
23047: IFFALSE 23055
23049: LD_INT 9
23051: DOUBLE
23052: LESSEQUAL
23053: IFTRUE 23057
23055: GO 23109
23057: POP
// begin bc_type := b_lab_half ;
23058: LD_ADDR_OWVAR 42
23062: PUSH
23063: LD_INT 7
23065: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23066: LD_ADDR_OWVAR 44
23070: PUSH
23071: LD_INT 10
23073: PUSH
23074: LD_INT 11
23076: PUSH
23077: LD_INT 12
23079: PUSH
23080: LD_INT 15
23082: PUSH
23083: LD_INT 14
23085: PUSH
23086: LD_INT 13
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: LD_VAR 0 2
23101: PUSH
23102: LD_INT 3
23104: MINUS
23105: ARRAY
23106: ST_TO_ADDR
// end ; 10 .. 13 :
23107: GO 23617
23109: LD_INT 10
23111: DOUBLE
23112: GREATEREQUAL
23113: IFFALSE 23121
23115: LD_INT 13
23117: DOUBLE
23118: LESSEQUAL
23119: IFTRUE 23123
23121: GO 23200
23123: POP
// begin bc_type := b_lab_full ;
23124: LD_ADDR_OWVAR 42
23128: PUSH
23129: LD_INT 8
23131: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23132: LD_ADDR_OWVAR 44
23136: PUSH
23137: LD_INT 10
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: LD_INT 14
23145: PUSH
23146: LD_INT 13
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: LD_VAR 0 2
23159: PUSH
23160: LD_INT 9
23162: MINUS
23163: ARRAY
23164: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23165: LD_ADDR_OWVAR 45
23169: PUSH
23170: LD_INT 11
23172: PUSH
23173: LD_INT 15
23175: PUSH
23176: LD_INT 12
23178: PUSH
23179: LD_INT 15
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: PUSH
23188: LD_VAR 0 2
23192: PUSH
23193: LD_INT 9
23195: MINUS
23196: ARRAY
23197: ST_TO_ADDR
// end ; 14 :
23198: GO 23617
23200: LD_INT 14
23202: DOUBLE
23203: EQUAL
23204: IFTRUE 23208
23206: GO 23219
23208: POP
// bc_type := b_workshop ; 15 :
23209: LD_ADDR_OWVAR 42
23213: PUSH
23214: LD_INT 2
23216: ST_TO_ADDR
23217: GO 23617
23219: LD_INT 15
23221: DOUBLE
23222: EQUAL
23223: IFTRUE 23227
23225: GO 23238
23227: POP
// bc_type := b_factory ; 16 :
23228: LD_ADDR_OWVAR 42
23232: PUSH
23233: LD_INT 3
23235: ST_TO_ADDR
23236: GO 23617
23238: LD_INT 16
23240: DOUBLE
23241: EQUAL
23242: IFTRUE 23246
23244: GO 23257
23246: POP
// bc_type := b_ext_gun ; 17 :
23247: LD_ADDR_OWVAR 42
23251: PUSH
23252: LD_INT 17
23254: ST_TO_ADDR
23255: GO 23617
23257: LD_INT 17
23259: DOUBLE
23260: EQUAL
23261: IFTRUE 23265
23263: GO 23293
23265: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23266: LD_ADDR_OWVAR 42
23270: PUSH
23271: LD_INT 19
23273: PUSH
23274: LD_INT 23
23276: PUSH
23277: LD_INT 19
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: PUSH
23285: LD_VAR 0 1
23289: ARRAY
23290: ST_TO_ADDR
23291: GO 23617
23293: LD_INT 18
23295: DOUBLE
23296: EQUAL
23297: IFTRUE 23301
23299: GO 23312
23301: POP
// bc_type := b_ext_radar ; 19 :
23302: LD_ADDR_OWVAR 42
23306: PUSH
23307: LD_INT 20
23309: ST_TO_ADDR
23310: GO 23617
23312: LD_INT 19
23314: DOUBLE
23315: EQUAL
23316: IFTRUE 23320
23318: GO 23331
23320: POP
// bc_type := b_ext_radio ; 20 :
23321: LD_ADDR_OWVAR 42
23325: PUSH
23326: LD_INT 22
23328: ST_TO_ADDR
23329: GO 23617
23331: LD_INT 20
23333: DOUBLE
23334: EQUAL
23335: IFTRUE 23339
23337: GO 23350
23339: POP
// bc_type := b_ext_siberium ; 21 :
23340: LD_ADDR_OWVAR 42
23344: PUSH
23345: LD_INT 21
23347: ST_TO_ADDR
23348: GO 23617
23350: LD_INT 21
23352: DOUBLE
23353: EQUAL
23354: IFTRUE 23358
23356: GO 23369
23358: POP
// bc_type := b_ext_computer ; 22 :
23359: LD_ADDR_OWVAR 42
23363: PUSH
23364: LD_INT 24
23366: ST_TO_ADDR
23367: GO 23617
23369: LD_INT 22
23371: DOUBLE
23372: EQUAL
23373: IFTRUE 23377
23375: GO 23388
23377: POP
// bc_type := b_ext_track ; 23 :
23378: LD_ADDR_OWVAR 42
23382: PUSH
23383: LD_INT 16
23385: ST_TO_ADDR
23386: GO 23617
23388: LD_INT 23
23390: DOUBLE
23391: EQUAL
23392: IFTRUE 23396
23394: GO 23407
23396: POP
// bc_type := b_ext_laser ; 24 :
23397: LD_ADDR_OWVAR 42
23401: PUSH
23402: LD_INT 25
23404: ST_TO_ADDR
23405: GO 23617
23407: LD_INT 24
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23426
23415: POP
// bc_type := b_control_tower ; 25 :
23416: LD_ADDR_OWVAR 42
23420: PUSH
23421: LD_INT 36
23423: ST_TO_ADDR
23424: GO 23617
23426: LD_INT 25
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23445
23434: POP
// bc_type := b_breastwork ; 26 :
23435: LD_ADDR_OWVAR 42
23439: PUSH
23440: LD_INT 31
23442: ST_TO_ADDR
23443: GO 23617
23445: LD_INT 26
23447: DOUBLE
23448: EQUAL
23449: IFTRUE 23453
23451: GO 23464
23453: POP
// bc_type := b_bunker ; 27 :
23454: LD_ADDR_OWVAR 42
23458: PUSH
23459: LD_INT 32
23461: ST_TO_ADDR
23462: GO 23617
23464: LD_INT 27
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23483
23472: POP
// bc_type := b_turret ; 28 :
23473: LD_ADDR_OWVAR 42
23477: PUSH
23478: LD_INT 33
23480: ST_TO_ADDR
23481: GO 23617
23483: LD_INT 28
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23502
23491: POP
// bc_type := b_armoury ; 29 :
23492: LD_ADDR_OWVAR 42
23496: PUSH
23497: LD_INT 4
23499: ST_TO_ADDR
23500: GO 23617
23502: LD_INT 29
23504: DOUBLE
23505: EQUAL
23506: IFTRUE 23510
23508: GO 23521
23510: POP
// bc_type := b_barracks ; 30 :
23511: LD_ADDR_OWVAR 42
23515: PUSH
23516: LD_INT 5
23518: ST_TO_ADDR
23519: GO 23617
23521: LD_INT 30
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23540
23529: POP
// bc_type := b_solar_power ; 31 :
23530: LD_ADDR_OWVAR 42
23534: PUSH
23535: LD_INT 27
23537: ST_TO_ADDR
23538: GO 23617
23540: LD_INT 31
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23559
23548: POP
// bc_type := b_oil_power ; 32 :
23549: LD_ADDR_OWVAR 42
23553: PUSH
23554: LD_INT 26
23556: ST_TO_ADDR
23557: GO 23617
23559: LD_INT 32
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23578
23567: POP
// bc_type := b_siberite_power ; 33 :
23568: LD_ADDR_OWVAR 42
23572: PUSH
23573: LD_INT 28
23575: ST_TO_ADDR
23576: GO 23617
23578: LD_INT 33
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23597
23586: POP
// bc_type := b_oil_mine ; 34 :
23587: LD_ADDR_OWVAR 42
23591: PUSH
23592: LD_INT 29
23594: ST_TO_ADDR
23595: GO 23617
23597: LD_INT 34
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23616
23605: POP
// bc_type := b_siberite_mine ; end ;
23606: LD_ADDR_OWVAR 42
23610: PUSH
23611: LD_INT 30
23613: ST_TO_ADDR
23614: GO 23617
23616: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23617: LD_ADDR_VAR 0 8
23621: PUSH
23622: LD_VAR 0 5
23626: PPUSH
23627: LD_VAR 0 6
23631: PPUSH
23632: LD_VAR 0 3
23636: PPUSH
23637: CALL_OW 47
23641: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23642: LD_OWVAR 42
23646: PUSH
23647: LD_INT 32
23649: PUSH
23650: LD_INT 33
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: IN
23657: IFFALSE 23673
// PlaceWeaponTurret ( b , weapon ) ;
23659: LD_VAR 0 8
23663: PPUSH
23664: LD_VAR 0 4
23668: PPUSH
23669: CALL_OW 431
// end ;
23673: LD_VAR 0 7
23677: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23678: LD_INT 0
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23684: LD_ADDR_VAR 0 4
23688: PUSH
23689: LD_INT 22
23691: PUSH
23692: LD_OWVAR 2
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: LD_INT 30
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 30
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PPUSH
23733: CALL_OW 69
23737: ST_TO_ADDR
// if not tmp then
23738: LD_VAR 0 4
23742: NOT
23743: IFFALSE 23747
// exit ;
23745: GO 23806
// for i in tmp do
23747: LD_ADDR_VAR 0 2
23751: PUSH
23752: LD_VAR 0 4
23756: PUSH
23757: FOR_IN
23758: IFFALSE 23804
// for j = 1 to 3 do
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: DOUBLE
23766: LD_INT 1
23768: DEC
23769: ST_TO_ADDR
23770: LD_INT 3
23772: PUSH
23773: FOR_TO
23774: IFFALSE 23800
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23776: LD_VAR 0 2
23780: PPUSH
23781: CALL_OW 274
23785: PPUSH
23786: LD_VAR 0 3
23790: PPUSH
23791: LD_INT 99999
23793: PPUSH
23794: CALL_OW 277
23798: GO 23773
23800: POP
23801: POP
23802: GO 23757
23804: POP
23805: POP
// end ;
23806: LD_VAR 0 1
23810: RET
// export function hHackSetLevel10 ; var i , j ; begin
23811: LD_INT 0
23813: PPUSH
23814: PPUSH
23815: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23816: LD_ADDR_VAR 0 2
23820: PUSH
23821: LD_INT 21
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PPUSH
23831: CALL_OW 69
23835: PUSH
23836: FOR_IN
23837: IFFALSE 23889
// if IsSelected ( i ) then
23839: LD_VAR 0 2
23843: PPUSH
23844: CALL_OW 306
23848: IFFALSE 23887
// begin for j := 1 to 4 do
23850: LD_ADDR_VAR 0 3
23854: PUSH
23855: DOUBLE
23856: LD_INT 1
23858: DEC
23859: ST_TO_ADDR
23860: LD_INT 4
23862: PUSH
23863: FOR_TO
23864: IFFALSE 23885
// SetSkill ( i , j , 10 ) ;
23866: LD_VAR 0 2
23870: PPUSH
23871: LD_VAR 0 3
23875: PPUSH
23876: LD_INT 10
23878: PPUSH
23879: CALL_OW 237
23883: GO 23863
23885: POP
23886: POP
// end ;
23887: GO 23836
23889: POP
23890: POP
// end ;
23891: LD_VAR 0 1
23895: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23896: LD_INT 0
23898: PPUSH
23899: PPUSH
23900: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 22
23908: PUSH
23909: LD_OWVAR 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 69
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23979
// begin for j := 1 to 4 do
23940: LD_ADDR_VAR 0 3
23944: PUSH
23945: DOUBLE
23946: LD_INT 1
23948: DEC
23949: ST_TO_ADDR
23950: LD_INT 4
23952: PUSH
23953: FOR_TO
23954: IFFALSE 23975
// SetSkill ( i , j , 10 ) ;
23956: LD_VAR 0 2
23960: PPUSH
23961: LD_VAR 0 3
23965: PPUSH
23966: LD_INT 10
23968: PPUSH
23969: CALL_OW 237
23973: GO 23953
23975: POP
23976: POP
// end ;
23977: GO 23937
23979: POP
23980: POP
// end ;
23981: LD_VAR 0 1
23985: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23986: LD_INT 0
23988: PPUSH
// uc_side := your_side ;
23989: LD_ADDR_OWVAR 20
23993: PUSH
23994: LD_OWVAR 2
23998: ST_TO_ADDR
// uc_nation := nation ;
23999: LD_ADDR_OWVAR 21
24003: PUSH
24004: LD_VAR 0 1
24008: ST_TO_ADDR
// InitHc ;
24009: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24013: LD_INT 0
24015: PPUSH
24016: LD_VAR 0 2
24020: PPUSH
24021: LD_VAR 0 3
24025: PPUSH
24026: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24030: LD_VAR 0 4
24034: PPUSH
24035: LD_VAR 0 5
24039: PPUSH
24040: CALL_OW 428
24044: PUSH
24045: LD_INT 0
24047: EQUAL
24048: IFFALSE 24072
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24050: CALL_OW 44
24054: PPUSH
24055: LD_VAR 0 4
24059: PPUSH
24060: LD_VAR 0 5
24064: PPUSH
24065: LD_INT 1
24067: PPUSH
24068: CALL_OW 48
// end ;
24072: LD_VAR 0 6
24076: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
// uc_side := your_side ;
24081: LD_ADDR_OWVAR 20
24085: PUSH
24086: LD_OWVAR 2
24090: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24091: LD_VAR 0 1
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: LD_INT 2
24101: PUSH
24102: LD_INT 3
24104: PUSH
24105: LD_INT 4
24107: PUSH
24108: LD_INT 5
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: IN
24118: IFFALSE 24130
// uc_nation := nation_american else
24120: LD_ADDR_OWVAR 21
24124: PUSH
24125: LD_INT 1
24127: ST_TO_ADDR
24128: GO 24173
// if chassis in [ 11 , 12 , 13 , 14 ] then
24130: LD_VAR 0 1
24134: PUSH
24135: LD_INT 11
24137: PUSH
24138: LD_INT 12
24140: PUSH
24141: LD_INT 13
24143: PUSH
24144: LD_INT 14
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: IN
24153: IFFALSE 24165
// uc_nation := nation_arabian else
24155: LD_ADDR_OWVAR 21
24159: PUSH
24160: LD_INT 2
24162: ST_TO_ADDR
24163: GO 24173
// uc_nation := nation_russian ;
24165: LD_ADDR_OWVAR 21
24169: PUSH
24170: LD_INT 3
24172: ST_TO_ADDR
// vc_chassis := chassis ;
24173: LD_ADDR_OWVAR 37
24177: PUSH
24178: LD_VAR 0 1
24182: ST_TO_ADDR
// vc_engine := engine ;
24183: LD_ADDR_OWVAR 39
24187: PUSH
24188: LD_VAR 0 2
24192: ST_TO_ADDR
// vc_control := control ;
24193: LD_ADDR_OWVAR 38
24197: PUSH
24198: LD_VAR 0 3
24202: ST_TO_ADDR
// vc_weapon := weapon ;
24203: LD_ADDR_OWVAR 40
24207: PUSH
24208: LD_VAR 0 4
24212: ST_TO_ADDR
// un := CreateVehicle ;
24213: LD_ADDR_VAR 0 8
24217: PUSH
24218: CALL_OW 45
24222: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24223: LD_VAR 0 8
24227: PPUSH
24228: LD_INT 0
24230: PPUSH
24231: LD_INT 5
24233: PPUSH
24234: CALL_OW 12
24238: PPUSH
24239: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24243: LD_VAR 0 8
24247: PPUSH
24248: LD_VAR 0 5
24252: PPUSH
24253: LD_VAR 0 6
24257: PPUSH
24258: LD_INT 1
24260: PPUSH
24261: CALL_OW 48
// end ;
24265: LD_VAR 0 7
24269: RET
// export hInvincible ; every 1 do
24270: GO 24272
24272: DISABLE
// hInvincible := [ ] ;
24273: LD_ADDR_EXP 91
24277: PUSH
24278: EMPTY
24279: ST_TO_ADDR
24280: END
// every 10 do var i ;
24281: GO 24283
24283: DISABLE
24284: LD_INT 0
24286: PPUSH
// begin enable ;
24287: ENABLE
// if not hInvincible then
24288: LD_EXP 91
24292: NOT
24293: IFFALSE 24297
// exit ;
24295: GO 24341
// for i in hInvincible do
24297: LD_ADDR_VAR 0 1
24301: PUSH
24302: LD_EXP 91
24306: PUSH
24307: FOR_IN
24308: IFFALSE 24339
// if GetLives ( i ) < 1000 then
24310: LD_VAR 0 1
24314: PPUSH
24315: CALL_OW 256
24319: PUSH
24320: LD_INT 1000
24322: LESS
24323: IFFALSE 24337
// SetLives ( i , 1000 ) ;
24325: LD_VAR 0 1
24329: PPUSH
24330: LD_INT 1000
24332: PPUSH
24333: CALL_OW 234
24337: GO 24307
24339: POP
24340: POP
// end ;
24341: PPOPN 1
24343: END
// export function hHackInvincible ; var i ; begin
24344: LD_INT 0
24346: PPUSH
24347: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24348: LD_ADDR_VAR 0 2
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: PPUSH
24381: CALL_OW 69
24385: PUSH
24386: FOR_IN
24387: IFFALSE 24448
// if IsSelected ( i ) then
24389: LD_VAR 0 2
24393: PPUSH
24394: CALL_OW 306
24398: IFFALSE 24446
// begin if i in hInvincible then
24400: LD_VAR 0 2
24404: PUSH
24405: LD_EXP 91
24409: IN
24410: IFFALSE 24430
// hInvincible := hInvincible diff i else
24412: LD_ADDR_EXP 91
24416: PUSH
24417: LD_EXP 91
24421: PUSH
24422: LD_VAR 0 2
24426: DIFF
24427: ST_TO_ADDR
24428: GO 24446
// hInvincible := hInvincible union i ;
24430: LD_ADDR_EXP 91
24434: PUSH
24435: LD_EXP 91
24439: PUSH
24440: LD_VAR 0 2
24444: UNION
24445: ST_TO_ADDR
// end ;
24446: GO 24386
24448: POP
24449: POP
// end ;
24450: LD_VAR 0 1
24454: RET
// export function hHackInvisible ; var i , j ; begin
24455: LD_INT 0
24457: PPUSH
24458: PPUSH
24459: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24460: LD_ADDR_VAR 0 2
24464: PUSH
24465: LD_INT 21
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: PUSH
24480: FOR_IN
24481: IFFALSE 24505
// if IsSelected ( i ) then
24483: LD_VAR 0 2
24487: PPUSH
24488: CALL_OW 306
24492: IFFALSE 24503
// ComForceInvisible ( i ) ;
24494: LD_VAR 0 2
24498: PPUSH
24499: CALL_OW 496
24503: GO 24480
24505: POP
24506: POP
// end ;
24507: LD_VAR 0 1
24511: RET
// export function hHackChangeYourSide ; begin
24512: LD_INT 0
24514: PPUSH
// if your_side = 8 then
24515: LD_OWVAR 2
24519: PUSH
24520: LD_INT 8
24522: EQUAL
24523: IFFALSE 24535
// your_side := 0 else
24525: LD_ADDR_OWVAR 2
24529: PUSH
24530: LD_INT 0
24532: ST_TO_ADDR
24533: GO 24549
// your_side := your_side + 1 ;
24535: LD_ADDR_OWVAR 2
24539: PUSH
24540: LD_OWVAR 2
24544: PUSH
24545: LD_INT 1
24547: PLUS
24548: ST_TO_ADDR
// end ;
24549: LD_VAR 0 1
24553: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24554: LD_INT 0
24556: PPUSH
24557: PPUSH
24558: PPUSH
// for i in all_units do
24559: LD_ADDR_VAR 0 2
24563: PUSH
24564: LD_OWVAR 3
24568: PUSH
24569: FOR_IN
24570: IFFALSE 24648
// if IsSelected ( i ) then
24572: LD_VAR 0 2
24576: PPUSH
24577: CALL_OW 306
24581: IFFALSE 24646
// begin j := GetSide ( i ) ;
24583: LD_ADDR_VAR 0 3
24587: PUSH
24588: LD_VAR 0 2
24592: PPUSH
24593: CALL_OW 255
24597: ST_TO_ADDR
// if j = 8 then
24598: LD_VAR 0 3
24602: PUSH
24603: LD_INT 8
24605: EQUAL
24606: IFFALSE 24618
// j := 0 else
24608: LD_ADDR_VAR 0 3
24612: PUSH
24613: LD_INT 0
24615: ST_TO_ADDR
24616: GO 24632
// j := j + 1 ;
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: LD_VAR 0 3
24627: PUSH
24628: LD_INT 1
24630: PLUS
24631: ST_TO_ADDR
// SetSide ( i , j ) ;
24632: LD_VAR 0 2
24636: PPUSH
24637: LD_VAR 0 3
24641: PPUSH
24642: CALL_OW 235
// end ;
24646: GO 24569
24648: POP
24649: POP
// end ;
24650: LD_VAR 0 1
24654: RET
// export function hHackFog ; begin
24655: LD_INT 0
24657: PPUSH
// FogOff ( true ) ;
24658: LD_INT 1
24660: PPUSH
24661: CALL_OW 344
// end ;
24665: LD_VAR 0 1
24669: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24670: LD_INT 0
24672: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24673: LD_VAR 0 1
24677: PPUSH
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_VAR 0 3
24687: PPUSH
24688: LD_INT 1
24690: PPUSH
24691: LD_INT 1
24693: PPUSH
24694: CALL_OW 483
// CenterOnXY ( x , y ) ;
24698: LD_VAR 0 2
24702: PPUSH
24703: LD_VAR 0 3
24707: PPUSH
24708: CALL_OW 84
// end ; end_of_file
24712: LD_VAR 0 4
24716: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24717: LD_INT 0
24719: PPUSH
24720: PPUSH
24721: PPUSH
24722: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24723: LD_VAR 0 1
24727: PPUSH
24728: CALL_OW 264
24732: PUSH
24733: LD_EXP 25
24737: EQUAL
24738: IFFALSE 24810
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24740: LD_INT 68
24742: PPUSH
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 255
24752: PPUSH
24753: CALL_OW 321
24757: PUSH
24758: LD_INT 2
24760: EQUAL
24761: IFFALSE 24773
// eff := 70 else
24763: LD_ADDR_VAR 0 4
24767: PUSH
24768: LD_INT 70
24770: ST_TO_ADDR
24771: GO 24781
// eff := 30 ;
24773: LD_ADDR_VAR 0 4
24777: PUSH
24778: LD_INT 30
24780: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24781: LD_VAR 0 1
24785: PPUSH
24786: CALL_OW 250
24790: PPUSH
24791: LD_VAR 0 1
24795: PPUSH
24796: CALL_OW 251
24800: PPUSH
24801: LD_VAR 0 4
24805: PPUSH
24806: CALL_OW 495
// end ; end ;
24810: LD_VAR 0 2
24814: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24815: LD_INT 0
24817: PPUSH
// end ;
24818: LD_VAR 0 4
24822: RET
// export function SOS_Command ( cmd ) ; begin
24823: LD_INT 0
24825: PPUSH
// end ;
24826: LD_VAR 0 2
24830: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24831: LD_INT 0
24833: PPUSH
// if cmd = 121 then
24834: LD_VAR 0 1
24838: PUSH
24839: LD_INT 121
24841: EQUAL
24842: IFFALSE 24844
// end ;
24844: LD_VAR 0 6
24848: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24849: LD_INT 0
24851: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24852: LD_VAR 0 1
24856: PUSH
24857: LD_INT 250
24859: EQUAL
24860: PUSH
24861: LD_VAR 0 2
24865: PPUSH
24866: CALL_OW 264
24870: PUSH
24871: LD_EXP 28
24875: EQUAL
24876: AND
24877: IFFALSE 24898
// MinerPlaceMine ( unit , x , y ) ;
24879: LD_VAR 0 2
24883: PPUSH
24884: LD_VAR 0 4
24888: PPUSH
24889: LD_VAR 0 5
24893: PPUSH
24894: CALL 27247 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24898: LD_VAR 0 1
24902: PUSH
24903: LD_INT 251
24905: EQUAL
24906: PUSH
24907: LD_VAR 0 2
24911: PPUSH
24912: CALL_OW 264
24916: PUSH
24917: LD_EXP 28
24921: EQUAL
24922: AND
24923: IFFALSE 24944
// MinerDetonateMine ( unit , x , y ) ;
24925: LD_VAR 0 2
24929: PPUSH
24930: LD_VAR 0 4
24934: PPUSH
24935: LD_VAR 0 5
24939: PPUSH
24940: CALL 27524 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 252
24951: EQUAL
24952: PUSH
24953: LD_VAR 0 2
24957: PPUSH
24958: CALL_OW 264
24962: PUSH
24963: LD_EXP 28
24967: EQUAL
24968: AND
24969: IFFALSE 24990
// MinerCreateMinefield ( unit , x , y ) ;
24971: LD_VAR 0 2
24975: PPUSH
24976: LD_VAR 0 4
24980: PPUSH
24981: LD_VAR 0 5
24985: PPUSH
24986: CALL 27941 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24990: LD_VAR 0 1
24994: PUSH
24995: LD_INT 253
24997: EQUAL
24998: PUSH
24999: LD_VAR 0 2
25003: PPUSH
25004: CALL_OW 257
25008: PUSH
25009: LD_INT 5
25011: EQUAL
25012: AND
25013: IFFALSE 25034
// ComBinocular ( unit , x , y ) ;
25015: LD_VAR 0 2
25019: PPUSH
25020: LD_VAR 0 4
25024: PPUSH
25025: LD_VAR 0 5
25029: PPUSH
25030: CALL 28312 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25034: LD_VAR 0 1
25038: PUSH
25039: LD_INT 254
25041: EQUAL
25042: PUSH
25043: LD_VAR 0 2
25047: PPUSH
25048: CALL_OW 264
25052: PUSH
25053: LD_EXP 23
25057: EQUAL
25058: AND
25059: PUSH
25060: LD_VAR 0 3
25064: PPUSH
25065: CALL_OW 263
25069: PUSH
25070: LD_INT 3
25072: EQUAL
25073: AND
25074: IFFALSE 25090
// HackDestroyVehicle ( unit , selectedUnit ) ;
25076: LD_VAR 0 2
25080: PPUSH
25081: LD_VAR 0 3
25085: PPUSH
25086: CALL 26607 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25090: LD_VAR 0 1
25094: PUSH
25095: LD_INT 255
25097: EQUAL
25098: PUSH
25099: LD_VAR 0 2
25103: PPUSH
25104: CALL_OW 264
25108: PUSH
25109: LD_INT 14
25111: PUSH
25112: LD_INT 53
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: IN
25119: AND
25120: PUSH
25121: LD_VAR 0 4
25125: PPUSH
25126: LD_VAR 0 5
25130: PPUSH
25131: CALL_OW 488
25135: AND
25136: IFFALSE 25160
// CutTreeXYR ( unit , x , y , 12 ) ;
25138: LD_VAR 0 2
25142: PPUSH
25143: LD_VAR 0 4
25147: PPUSH
25148: LD_VAR 0 5
25152: PPUSH
25153: LD_INT 12
25155: PPUSH
25156: CALL 25173 0 4
// end ;
25160: LD_VAR 0 6
25164: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25165: LD_INT 0
25167: PPUSH
// end ;
25168: LD_VAR 0 4
25172: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25173: LD_INT 0
25175: PPUSH
25176: PPUSH
25177: PPUSH
25178: PPUSH
25179: PPUSH
25180: PPUSH
25181: PPUSH
25182: PPUSH
25183: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25184: LD_VAR 0 1
25188: NOT
25189: PUSH
25190: LD_VAR 0 2
25194: PPUSH
25195: LD_VAR 0 3
25199: PPUSH
25200: CALL_OW 488
25204: NOT
25205: OR
25206: PUSH
25207: LD_VAR 0 4
25211: NOT
25212: OR
25213: IFFALSE 25217
// exit ;
25215: GO 25557
// list := [ ] ;
25217: LD_ADDR_VAR 0 13
25221: PUSH
25222: EMPTY
25223: ST_TO_ADDR
// if x - r < 0 then
25224: LD_VAR 0 2
25228: PUSH
25229: LD_VAR 0 4
25233: MINUS
25234: PUSH
25235: LD_INT 0
25237: LESS
25238: IFFALSE 25250
// min_x := 0 else
25240: LD_ADDR_VAR 0 7
25244: PUSH
25245: LD_INT 0
25247: ST_TO_ADDR
25248: GO 25266
// min_x := x - r ;
25250: LD_ADDR_VAR 0 7
25254: PUSH
25255: LD_VAR 0 2
25259: PUSH
25260: LD_VAR 0 4
25264: MINUS
25265: ST_TO_ADDR
// if y - r < 0 then
25266: LD_VAR 0 3
25270: PUSH
25271: LD_VAR 0 4
25275: MINUS
25276: PUSH
25277: LD_INT 0
25279: LESS
25280: IFFALSE 25292
// min_y := 0 else
25282: LD_ADDR_VAR 0 8
25286: PUSH
25287: LD_INT 0
25289: ST_TO_ADDR
25290: GO 25308
// min_y := y - r ;
25292: LD_ADDR_VAR 0 8
25296: PUSH
25297: LD_VAR 0 3
25301: PUSH
25302: LD_VAR 0 4
25306: MINUS
25307: ST_TO_ADDR
// max_x := x + r ;
25308: LD_ADDR_VAR 0 9
25312: PUSH
25313: LD_VAR 0 2
25317: PUSH
25318: LD_VAR 0 4
25322: PLUS
25323: ST_TO_ADDR
// max_y := y + r ;
25324: LD_ADDR_VAR 0 10
25328: PUSH
25329: LD_VAR 0 3
25333: PUSH
25334: LD_VAR 0 4
25338: PLUS
25339: ST_TO_ADDR
// for _x = min_x to max_x do
25340: LD_ADDR_VAR 0 11
25344: PUSH
25345: DOUBLE
25346: LD_VAR 0 7
25350: DEC
25351: ST_TO_ADDR
25352: LD_VAR 0 9
25356: PUSH
25357: FOR_TO
25358: IFFALSE 25475
// for _y = min_y to max_y do
25360: LD_ADDR_VAR 0 12
25364: PUSH
25365: DOUBLE
25366: LD_VAR 0 8
25370: DEC
25371: ST_TO_ADDR
25372: LD_VAR 0 10
25376: PUSH
25377: FOR_TO
25378: IFFALSE 25471
// begin if not ValidHex ( _x , _y ) then
25380: LD_VAR 0 11
25384: PPUSH
25385: LD_VAR 0 12
25389: PPUSH
25390: CALL_OW 488
25394: NOT
25395: IFFALSE 25399
// continue ;
25397: GO 25377
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25399: LD_VAR 0 11
25403: PPUSH
25404: LD_VAR 0 12
25408: PPUSH
25409: CALL_OW 351
25413: PUSH
25414: LD_VAR 0 11
25418: PPUSH
25419: LD_VAR 0 12
25423: PPUSH
25424: CALL_OW 554
25428: AND
25429: IFFALSE 25469
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25431: LD_ADDR_VAR 0 13
25435: PUSH
25436: LD_VAR 0 13
25440: PPUSH
25441: LD_VAR 0 13
25445: PUSH
25446: LD_INT 1
25448: PLUS
25449: PPUSH
25450: LD_VAR 0 11
25454: PUSH
25455: LD_VAR 0 12
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PPUSH
25464: CALL_OW 2
25468: ST_TO_ADDR
// end ;
25469: GO 25377
25471: POP
25472: POP
25473: GO 25357
25475: POP
25476: POP
// if not list then
25477: LD_VAR 0 13
25481: NOT
25482: IFFALSE 25486
// exit ;
25484: GO 25557
// for i in list do
25486: LD_ADDR_VAR 0 6
25490: PUSH
25491: LD_VAR 0 13
25495: PUSH
25496: FOR_IN
25497: IFFALSE 25555
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25499: LD_VAR 0 1
25503: PPUSH
25504: LD_STRING M
25506: PUSH
25507: LD_VAR 0 6
25511: PUSH
25512: LD_INT 1
25514: ARRAY
25515: PUSH
25516: LD_VAR 0 6
25520: PUSH
25521: LD_INT 2
25523: ARRAY
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: PUSH
25546: EMPTY
25547: LIST
25548: PPUSH
25549: CALL_OW 447
25553: GO 25496
25555: POP
25556: POP
// end ;
25557: LD_VAR 0 5
25561: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25562: LD_EXP 94
25566: NOT
25567: IFFALSE 25617
25569: GO 25571
25571: DISABLE
// begin initHack := true ;
25572: LD_ADDR_EXP 94
25576: PUSH
25577: LD_INT 1
25579: ST_TO_ADDR
// hackTanks := [ ] ;
25580: LD_ADDR_EXP 95
25584: PUSH
25585: EMPTY
25586: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25587: LD_ADDR_EXP 96
25591: PUSH
25592: EMPTY
25593: ST_TO_ADDR
// hackLimit := 3 ;
25594: LD_ADDR_EXP 97
25598: PUSH
25599: LD_INT 3
25601: ST_TO_ADDR
// hackDist := 12 ;
25602: LD_ADDR_EXP 98
25606: PUSH
25607: LD_INT 12
25609: ST_TO_ADDR
// hackCounter := [ ] ;
25610: LD_ADDR_EXP 99
25614: PUSH
25615: EMPTY
25616: ST_TO_ADDR
// end ;
25617: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25618: LD_EXP 94
25622: PUSH
25623: LD_INT 34
25625: PUSH
25626: LD_EXP 23
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PPUSH
25635: CALL_OW 69
25639: AND
25640: IFFALSE 25895
25642: GO 25644
25644: DISABLE
25645: LD_INT 0
25647: PPUSH
25648: PPUSH
// begin enable ;
25649: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25650: LD_ADDR_VAR 0 1
25654: PUSH
25655: LD_INT 34
25657: PUSH
25658: LD_EXP 23
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PPUSH
25667: CALL_OW 69
25671: PUSH
25672: FOR_IN
25673: IFFALSE 25893
// begin if not i in hackTanks then
25675: LD_VAR 0 1
25679: PUSH
25680: LD_EXP 95
25684: IN
25685: NOT
25686: IFFALSE 25769
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25688: LD_ADDR_EXP 95
25692: PUSH
25693: LD_EXP 95
25697: PPUSH
25698: LD_EXP 95
25702: PUSH
25703: LD_INT 1
25705: PLUS
25706: PPUSH
25707: LD_VAR 0 1
25711: PPUSH
25712: CALL_OW 1
25716: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25717: LD_ADDR_EXP 96
25721: PUSH
25722: LD_EXP 96
25726: PPUSH
25727: LD_EXP 96
25731: PUSH
25732: LD_INT 1
25734: PLUS
25735: PPUSH
25736: EMPTY
25737: PPUSH
25738: CALL_OW 1
25742: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25743: LD_ADDR_EXP 99
25747: PUSH
25748: LD_EXP 99
25752: PPUSH
25753: LD_EXP 99
25757: PUSH
25758: LD_INT 1
25760: PLUS
25761: PPUSH
25762: EMPTY
25763: PPUSH
25764: CALL_OW 1
25768: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25769: LD_VAR 0 1
25773: PPUSH
25774: CALL_OW 302
25778: NOT
25779: IFFALSE 25792
// begin HackUnlinkAll ( i ) ;
25781: LD_VAR 0 1
25785: PPUSH
25786: CALL 25898 0 1
// continue ;
25790: GO 25672
// end ; HackCheckCapturedStatus ( i ) ;
25792: LD_VAR 0 1
25796: PPUSH
25797: CALL 26341 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25801: LD_ADDR_VAR 0 2
25805: PUSH
25806: LD_INT 81
25808: PUSH
25809: LD_VAR 0 1
25813: PPUSH
25814: CALL_OW 255
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 33
25825: PUSH
25826: LD_INT 3
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 91
25835: PUSH
25836: LD_VAR 0 1
25840: PUSH
25841: LD_EXP 98
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 50
25853: PUSH
25854: EMPTY
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: PPUSH
25863: CALL_OW 69
25867: ST_TO_ADDR
// if not tmp then
25868: LD_VAR 0 2
25872: NOT
25873: IFFALSE 25877
// continue ;
25875: GO 25672
// HackLink ( i , tmp ) ;
25877: LD_VAR 0 1
25881: PPUSH
25882: LD_VAR 0 2
25886: PPUSH
25887: CALL 26034 0 2
// end ;
25891: GO 25672
25893: POP
25894: POP
// end ;
25895: PPOPN 2
25897: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25898: LD_INT 0
25900: PPUSH
25901: PPUSH
25902: PPUSH
// if not hack in hackTanks then
25903: LD_VAR 0 1
25907: PUSH
25908: LD_EXP 95
25912: IN
25913: NOT
25914: IFFALSE 25918
// exit ;
25916: GO 26029
// index := GetElementIndex ( hackTanks , hack ) ;
25918: LD_ADDR_VAR 0 4
25922: PUSH
25923: LD_EXP 95
25927: PPUSH
25928: LD_VAR 0 1
25932: PPUSH
25933: CALL 33463 0 2
25937: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25938: LD_EXP 96
25942: PUSH
25943: LD_VAR 0 4
25947: ARRAY
25948: IFFALSE 26029
// begin for i in hackTanksCaptured [ index ] do
25950: LD_ADDR_VAR 0 3
25954: PUSH
25955: LD_EXP 96
25959: PUSH
25960: LD_VAR 0 4
25964: ARRAY
25965: PUSH
25966: FOR_IN
25967: IFFALSE 25993
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25969: LD_VAR 0 3
25973: PUSH
25974: LD_INT 1
25976: ARRAY
25977: PPUSH
25978: LD_VAR 0 3
25982: PUSH
25983: LD_INT 2
25985: ARRAY
25986: PPUSH
25987: CALL_OW 235
25991: GO 25966
25993: POP
25994: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25995: LD_ADDR_EXP 96
25999: PUSH
26000: LD_EXP 96
26004: PPUSH
26005: LD_VAR 0 4
26009: PPUSH
26010: EMPTY
26011: PPUSH
26012: CALL_OW 1
26016: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26017: LD_VAR 0 1
26021: PPUSH
26022: LD_INT 0
26024: PPUSH
26025: CALL_OW 505
// end ; end ;
26029: LD_VAR 0 2
26033: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26034: LD_INT 0
26036: PPUSH
26037: PPUSH
26038: PPUSH
// if not hack in hackTanks or not vehicles then
26039: LD_VAR 0 1
26043: PUSH
26044: LD_EXP 95
26048: IN
26049: NOT
26050: PUSH
26051: LD_VAR 0 2
26055: NOT
26056: OR
26057: IFFALSE 26061
// exit ;
26059: GO 26336
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26061: LD_ADDR_VAR 0 2
26065: PUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: LD_VAR 0 2
26075: PPUSH
26076: LD_INT 1
26078: PPUSH
26079: LD_INT 1
26081: PPUSH
26082: CALL 34113 0 4
26086: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26087: LD_ADDR_VAR 0 5
26091: PUSH
26092: LD_EXP 95
26096: PPUSH
26097: LD_VAR 0 1
26101: PPUSH
26102: CALL 33463 0 2
26106: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26107: LD_EXP 96
26111: PUSH
26112: LD_VAR 0 5
26116: ARRAY
26117: PUSH
26118: LD_EXP 97
26122: LESS
26123: IFFALSE 26312
// begin for i := 1 to vehicles do
26125: LD_ADDR_VAR 0 4
26129: PUSH
26130: DOUBLE
26131: LD_INT 1
26133: DEC
26134: ST_TO_ADDR
26135: LD_VAR 0 2
26139: PUSH
26140: FOR_TO
26141: IFFALSE 26310
// begin if hackTanksCaptured [ index ] = hackLimit then
26143: LD_EXP 96
26147: PUSH
26148: LD_VAR 0 5
26152: ARRAY
26153: PUSH
26154: LD_EXP 97
26158: EQUAL
26159: IFFALSE 26163
// break ;
26161: GO 26310
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26163: LD_ADDR_EXP 99
26167: PUSH
26168: LD_EXP 99
26172: PPUSH
26173: LD_VAR 0 5
26177: PPUSH
26178: LD_EXP 99
26182: PUSH
26183: LD_VAR 0 5
26187: ARRAY
26188: PUSH
26189: LD_INT 1
26191: PLUS
26192: PPUSH
26193: CALL_OW 1
26197: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26198: LD_ADDR_EXP 96
26202: PUSH
26203: LD_EXP 96
26207: PPUSH
26208: LD_VAR 0 5
26212: PUSH
26213: LD_EXP 96
26217: PUSH
26218: LD_VAR 0 5
26222: ARRAY
26223: PUSH
26224: LD_INT 1
26226: PLUS
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PPUSH
26232: LD_VAR 0 2
26236: PUSH
26237: LD_VAR 0 4
26241: ARRAY
26242: PUSH
26243: LD_VAR 0 2
26247: PUSH
26248: LD_VAR 0 4
26252: ARRAY
26253: PPUSH
26254: CALL_OW 255
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL 33678 0 3
26267: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26268: LD_VAR 0 2
26272: PUSH
26273: LD_VAR 0 4
26277: ARRAY
26278: PPUSH
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL_OW 255
26288: PPUSH
26289: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26293: LD_VAR 0 2
26297: PUSH
26298: LD_VAR 0 4
26302: ARRAY
26303: PPUSH
26304: CALL_OW 141
// end ;
26308: GO 26140
26310: POP
26311: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26312: LD_VAR 0 1
26316: PPUSH
26317: LD_EXP 96
26321: PUSH
26322: LD_VAR 0 5
26326: ARRAY
26327: PUSH
26328: LD_INT 0
26330: PLUS
26331: PPUSH
26332: CALL_OW 505
// end ;
26336: LD_VAR 0 3
26340: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26341: LD_INT 0
26343: PPUSH
26344: PPUSH
26345: PPUSH
26346: PPUSH
// if not hack in hackTanks then
26347: LD_VAR 0 1
26351: PUSH
26352: LD_EXP 95
26356: IN
26357: NOT
26358: IFFALSE 26362
// exit ;
26360: GO 26602
// index := GetElementIndex ( hackTanks , hack ) ;
26362: LD_ADDR_VAR 0 4
26366: PUSH
26367: LD_EXP 95
26371: PPUSH
26372: LD_VAR 0 1
26376: PPUSH
26377: CALL 33463 0 2
26381: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26382: LD_ADDR_VAR 0 3
26386: PUSH
26387: DOUBLE
26388: LD_EXP 96
26392: PUSH
26393: LD_VAR 0 4
26397: ARRAY
26398: INC
26399: ST_TO_ADDR
26400: LD_INT 1
26402: PUSH
26403: FOR_DOWNTO
26404: IFFALSE 26576
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26406: LD_ADDR_VAR 0 5
26410: PUSH
26411: LD_EXP 96
26415: PUSH
26416: LD_VAR 0 4
26420: ARRAY
26421: PUSH
26422: LD_VAR 0 3
26426: ARRAY
26427: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26428: LD_VAR 0 5
26432: PUSH
26433: LD_INT 1
26435: ARRAY
26436: PPUSH
26437: CALL_OW 302
26441: NOT
26442: PUSH
26443: LD_VAR 0 5
26447: PUSH
26448: LD_INT 1
26450: ARRAY
26451: PPUSH
26452: CALL_OW 255
26456: PUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: CALL_OW 255
26466: NONEQUAL
26467: OR
26468: IFFALSE 26574
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26470: LD_VAR 0 5
26474: PUSH
26475: LD_INT 1
26477: ARRAY
26478: PPUSH
26479: CALL_OW 305
26483: PUSH
26484: LD_VAR 0 5
26488: PUSH
26489: LD_INT 1
26491: ARRAY
26492: PPUSH
26493: CALL_OW 255
26497: PUSH
26498: LD_VAR 0 1
26502: PPUSH
26503: CALL_OW 255
26507: EQUAL
26508: AND
26509: IFFALSE 26533
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26511: LD_VAR 0 5
26515: PUSH
26516: LD_INT 1
26518: ARRAY
26519: PPUSH
26520: LD_VAR 0 5
26524: PUSH
26525: LD_INT 2
26527: ARRAY
26528: PPUSH
26529: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26533: LD_ADDR_EXP 96
26537: PUSH
26538: LD_EXP 96
26542: PPUSH
26543: LD_VAR 0 4
26547: PPUSH
26548: LD_EXP 96
26552: PUSH
26553: LD_VAR 0 4
26557: ARRAY
26558: PPUSH
26559: LD_VAR 0 3
26563: PPUSH
26564: CALL_OW 3
26568: PPUSH
26569: CALL_OW 1
26573: ST_TO_ADDR
// end ; end ;
26574: GO 26403
26576: POP
26577: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26578: LD_VAR 0 1
26582: PPUSH
26583: LD_EXP 96
26587: PUSH
26588: LD_VAR 0 4
26592: ARRAY
26593: PUSH
26594: LD_INT 0
26596: PLUS
26597: PPUSH
26598: CALL_OW 505
// end ;
26602: LD_VAR 0 2
26606: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26607: LD_INT 0
26609: PPUSH
26610: PPUSH
26611: PPUSH
26612: PPUSH
// if not hack in hackTanks then
26613: LD_VAR 0 1
26617: PUSH
26618: LD_EXP 95
26622: IN
26623: NOT
26624: IFFALSE 26628
// exit ;
26626: GO 26713
// index := GetElementIndex ( hackTanks , hack ) ;
26628: LD_ADDR_VAR 0 5
26632: PUSH
26633: LD_EXP 95
26637: PPUSH
26638: LD_VAR 0 1
26642: PPUSH
26643: CALL 33463 0 2
26647: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26648: LD_ADDR_VAR 0 4
26652: PUSH
26653: DOUBLE
26654: LD_INT 1
26656: DEC
26657: ST_TO_ADDR
26658: LD_EXP 96
26662: PUSH
26663: LD_VAR 0 5
26667: ARRAY
26668: PUSH
26669: FOR_TO
26670: IFFALSE 26711
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26672: LD_EXP 96
26676: PUSH
26677: LD_VAR 0 5
26681: ARRAY
26682: PUSH
26683: LD_VAR 0 4
26687: ARRAY
26688: PUSH
26689: LD_INT 1
26691: ARRAY
26692: PUSH
26693: LD_VAR 0 2
26697: EQUAL
26698: IFFALSE 26709
// KillUnit ( vehicle ) ;
26700: LD_VAR 0 2
26704: PPUSH
26705: CALL_OW 66
26709: GO 26669
26711: POP
26712: POP
// end ;
26713: LD_VAR 0 3
26717: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26718: LD_EXP 100
26722: NOT
26723: IFFALSE 26758
26725: GO 26727
26727: DISABLE
// begin initMiner := true ;
26728: LD_ADDR_EXP 100
26732: PUSH
26733: LD_INT 1
26735: ST_TO_ADDR
// minersList := [ ] ;
26736: LD_ADDR_EXP 101
26740: PUSH
26741: EMPTY
26742: ST_TO_ADDR
// minerMinesList := [ ] ;
26743: LD_ADDR_EXP 102
26747: PUSH
26748: EMPTY
26749: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26750: LD_ADDR_EXP 103
26754: PUSH
26755: LD_INT 5
26757: ST_TO_ADDR
// end ;
26758: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26759: LD_EXP 100
26763: PUSH
26764: LD_INT 34
26766: PUSH
26767: LD_EXP 28
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PPUSH
26776: CALL_OW 69
26780: AND
26781: IFFALSE 27244
26783: GO 26785
26785: DISABLE
26786: LD_INT 0
26788: PPUSH
26789: PPUSH
26790: PPUSH
26791: PPUSH
// begin enable ;
26792: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26793: LD_ADDR_VAR 0 1
26797: PUSH
26798: LD_INT 34
26800: PUSH
26801: LD_EXP 28
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PPUSH
26810: CALL_OW 69
26814: PUSH
26815: FOR_IN
26816: IFFALSE 26888
// begin if not i in minersList then
26818: LD_VAR 0 1
26822: PUSH
26823: LD_EXP 101
26827: IN
26828: NOT
26829: IFFALSE 26886
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26831: LD_ADDR_EXP 101
26835: PUSH
26836: LD_EXP 101
26840: PPUSH
26841: LD_EXP 101
26845: PUSH
26846: LD_INT 1
26848: PLUS
26849: PPUSH
26850: LD_VAR 0 1
26854: PPUSH
26855: CALL_OW 1
26859: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26860: LD_ADDR_EXP 102
26864: PUSH
26865: LD_EXP 102
26869: PPUSH
26870: LD_EXP 102
26874: PUSH
26875: LD_INT 1
26877: PLUS
26878: PPUSH
26879: EMPTY
26880: PPUSH
26881: CALL_OW 1
26885: ST_TO_ADDR
// end end ;
26886: GO 26815
26888: POP
26889: POP
// for i := minerMinesList downto 1 do
26890: LD_ADDR_VAR 0 1
26894: PUSH
26895: DOUBLE
26896: LD_EXP 102
26900: INC
26901: ST_TO_ADDR
26902: LD_INT 1
26904: PUSH
26905: FOR_DOWNTO
26906: IFFALSE 27242
// begin if IsLive ( minersList [ i ] ) then
26908: LD_EXP 101
26912: PUSH
26913: LD_VAR 0 1
26917: ARRAY
26918: PPUSH
26919: CALL_OW 300
26923: IFFALSE 26951
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26925: LD_EXP 101
26929: PUSH
26930: LD_VAR 0 1
26934: ARRAY
26935: PPUSH
26936: LD_EXP 102
26940: PUSH
26941: LD_VAR 0 1
26945: ARRAY
26946: PPUSH
26947: CALL_OW 505
// if not minerMinesList [ i ] then
26951: LD_EXP 102
26955: PUSH
26956: LD_VAR 0 1
26960: ARRAY
26961: NOT
26962: IFFALSE 26966
// continue ;
26964: GO 26905
// for j := minerMinesList [ i ] downto 1 do
26966: LD_ADDR_VAR 0 2
26970: PUSH
26971: DOUBLE
26972: LD_EXP 102
26976: PUSH
26977: LD_VAR 0 1
26981: ARRAY
26982: INC
26983: ST_TO_ADDR
26984: LD_INT 1
26986: PUSH
26987: FOR_DOWNTO
26988: IFFALSE 27238
// begin side := GetSide ( minersList [ i ] ) ;
26990: LD_ADDR_VAR 0 3
26994: PUSH
26995: LD_EXP 101
26999: PUSH
27000: LD_VAR 0 1
27004: ARRAY
27005: PPUSH
27006: CALL_OW 255
27010: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27011: LD_ADDR_VAR 0 4
27015: PUSH
27016: LD_EXP 102
27020: PUSH
27021: LD_VAR 0 1
27025: ARRAY
27026: PUSH
27027: LD_VAR 0 2
27031: ARRAY
27032: PUSH
27033: LD_INT 1
27035: ARRAY
27036: PPUSH
27037: LD_EXP 102
27041: PUSH
27042: LD_VAR 0 1
27046: ARRAY
27047: PUSH
27048: LD_VAR 0 2
27052: ARRAY
27053: PUSH
27054: LD_INT 2
27056: ARRAY
27057: PPUSH
27058: CALL_OW 428
27062: ST_TO_ADDR
// if not tmp then
27063: LD_VAR 0 4
27067: NOT
27068: IFFALSE 27072
// continue ;
27070: GO 26987
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27072: LD_VAR 0 4
27076: PUSH
27077: LD_INT 81
27079: PUSH
27080: LD_VAR 0 3
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PPUSH
27089: CALL_OW 69
27093: IN
27094: PUSH
27095: LD_EXP 102
27099: PUSH
27100: LD_VAR 0 1
27104: ARRAY
27105: PUSH
27106: LD_VAR 0 2
27110: ARRAY
27111: PUSH
27112: LD_INT 1
27114: ARRAY
27115: PPUSH
27116: LD_EXP 102
27120: PUSH
27121: LD_VAR 0 1
27125: ARRAY
27126: PUSH
27127: LD_VAR 0 2
27131: ARRAY
27132: PUSH
27133: LD_INT 2
27135: ARRAY
27136: PPUSH
27137: CALL_OW 458
27141: AND
27142: IFFALSE 27236
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27144: LD_EXP 102
27148: PUSH
27149: LD_VAR 0 1
27153: ARRAY
27154: PUSH
27155: LD_VAR 0 2
27159: ARRAY
27160: PUSH
27161: LD_INT 1
27163: ARRAY
27164: PPUSH
27165: LD_EXP 102
27169: PUSH
27170: LD_VAR 0 1
27174: ARRAY
27175: PUSH
27176: LD_VAR 0 2
27180: ARRAY
27181: PUSH
27182: LD_INT 2
27184: ARRAY
27185: PPUSH
27186: LD_VAR 0 3
27190: PPUSH
27191: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27195: LD_ADDR_EXP 102
27199: PUSH
27200: LD_EXP 102
27204: PPUSH
27205: LD_VAR 0 1
27209: PPUSH
27210: LD_EXP 102
27214: PUSH
27215: LD_VAR 0 1
27219: ARRAY
27220: PPUSH
27221: LD_VAR 0 2
27225: PPUSH
27226: CALL_OW 3
27230: PPUSH
27231: CALL_OW 1
27235: ST_TO_ADDR
// end ; end ;
27236: GO 26987
27238: POP
27239: POP
// end ;
27240: GO 26905
27242: POP
27243: POP
// end ;
27244: PPOPN 4
27246: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27247: LD_INT 0
27249: PPUSH
27250: PPUSH
// result := false ;
27251: LD_ADDR_VAR 0 4
27255: PUSH
27256: LD_INT 0
27258: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL_OW 264
27268: PUSH
27269: LD_EXP 28
27273: EQUAL
27274: NOT
27275: IFFALSE 27279
// exit ;
27277: GO 27519
// index := GetElementIndex ( minersList , unit ) ;
27279: LD_ADDR_VAR 0 5
27283: PUSH
27284: LD_EXP 101
27288: PPUSH
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL 33463 0 2
27298: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27299: LD_EXP 102
27303: PUSH
27304: LD_VAR 0 5
27308: ARRAY
27309: PUSH
27310: LD_EXP 103
27314: GREATEREQUAL
27315: IFFALSE 27319
// exit ;
27317: GO 27519
// ComMoveXY ( unit , x , y ) ;
27319: LD_VAR 0 1
27323: PPUSH
27324: LD_VAR 0 2
27328: PPUSH
27329: LD_VAR 0 3
27333: PPUSH
27334: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27338: LD_INT 35
27340: PPUSH
27341: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27345: LD_VAR 0 1
27349: PPUSH
27350: LD_VAR 0 2
27354: PPUSH
27355: LD_VAR 0 3
27359: PPUSH
27360: CALL 63860 0 3
27364: NOT
27365: PUSH
27366: LD_VAR 0 1
27370: PPUSH
27371: CALL_OW 314
27375: AND
27376: IFFALSE 27380
// exit ;
27378: GO 27519
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27380: LD_VAR 0 2
27384: PPUSH
27385: LD_VAR 0 3
27389: PPUSH
27390: CALL_OW 428
27394: PUSH
27395: LD_VAR 0 1
27399: EQUAL
27400: PUSH
27401: LD_VAR 0 1
27405: PPUSH
27406: CALL_OW 314
27410: NOT
27411: AND
27412: IFFALSE 27338
// PlaySoundXY ( x , y , PlantMine ) ;
27414: LD_VAR 0 2
27418: PPUSH
27419: LD_VAR 0 3
27423: PPUSH
27424: LD_STRING PlantMine
27426: PPUSH
27427: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27431: LD_VAR 0 2
27435: PPUSH
27436: LD_VAR 0 3
27440: PPUSH
27441: LD_VAR 0 1
27445: PPUSH
27446: CALL_OW 255
27450: PPUSH
27451: LD_INT 0
27453: PPUSH
27454: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27458: LD_ADDR_EXP 102
27462: PUSH
27463: LD_EXP 102
27467: PPUSH
27468: LD_VAR 0 5
27472: PUSH
27473: LD_EXP 102
27477: PUSH
27478: LD_VAR 0 5
27482: ARRAY
27483: PUSH
27484: LD_INT 1
27486: PLUS
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PPUSH
27492: LD_VAR 0 2
27496: PUSH
27497: LD_VAR 0 3
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PPUSH
27506: CALL 33678 0 3
27510: ST_TO_ADDR
// result := true ;
27511: LD_ADDR_VAR 0 4
27515: PUSH
27516: LD_INT 1
27518: ST_TO_ADDR
// end ;
27519: LD_VAR 0 4
27523: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27524: LD_INT 0
27526: PPUSH
27527: PPUSH
27528: PPUSH
// if not unit in minersList then
27529: LD_VAR 0 1
27533: PUSH
27534: LD_EXP 101
27538: IN
27539: NOT
27540: IFFALSE 27544
// exit ;
27542: GO 27936
// index := GetElementIndex ( minersList , unit ) ;
27544: LD_ADDR_VAR 0 6
27548: PUSH
27549: LD_EXP 101
27553: PPUSH
27554: LD_VAR 0 1
27558: PPUSH
27559: CALL 33463 0 2
27563: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27564: LD_ADDR_VAR 0 5
27568: PUSH
27569: DOUBLE
27570: LD_EXP 102
27574: PUSH
27575: LD_VAR 0 6
27579: ARRAY
27580: INC
27581: ST_TO_ADDR
27582: LD_INT 1
27584: PUSH
27585: FOR_DOWNTO
27586: IFFALSE 27747
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27588: LD_EXP 102
27592: PUSH
27593: LD_VAR 0 6
27597: ARRAY
27598: PUSH
27599: LD_VAR 0 5
27603: ARRAY
27604: PUSH
27605: LD_INT 1
27607: ARRAY
27608: PUSH
27609: LD_VAR 0 2
27613: EQUAL
27614: PUSH
27615: LD_EXP 102
27619: PUSH
27620: LD_VAR 0 6
27624: ARRAY
27625: PUSH
27626: LD_VAR 0 5
27630: ARRAY
27631: PUSH
27632: LD_INT 2
27634: ARRAY
27635: PUSH
27636: LD_VAR 0 3
27640: EQUAL
27641: AND
27642: IFFALSE 27745
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27644: LD_EXP 102
27648: PUSH
27649: LD_VAR 0 6
27653: ARRAY
27654: PUSH
27655: LD_VAR 0 5
27659: ARRAY
27660: PUSH
27661: LD_INT 1
27663: ARRAY
27664: PPUSH
27665: LD_EXP 102
27669: PUSH
27670: LD_VAR 0 6
27674: ARRAY
27675: PUSH
27676: LD_VAR 0 5
27680: ARRAY
27681: PUSH
27682: LD_INT 2
27684: ARRAY
27685: PPUSH
27686: LD_VAR 0 1
27690: PPUSH
27691: CALL_OW 255
27695: PPUSH
27696: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27700: LD_ADDR_EXP 102
27704: PUSH
27705: LD_EXP 102
27709: PPUSH
27710: LD_VAR 0 6
27714: PPUSH
27715: LD_EXP 102
27719: PUSH
27720: LD_VAR 0 6
27724: ARRAY
27725: PPUSH
27726: LD_VAR 0 5
27730: PPUSH
27731: CALL_OW 3
27735: PPUSH
27736: CALL_OW 1
27740: ST_TO_ADDR
// exit ;
27741: POP
27742: POP
27743: GO 27936
// end ; end ;
27745: GO 27585
27747: POP
27748: POP
// for i := minerMinesList [ index ] downto 1 do
27749: LD_ADDR_VAR 0 5
27753: PUSH
27754: DOUBLE
27755: LD_EXP 102
27759: PUSH
27760: LD_VAR 0 6
27764: ARRAY
27765: INC
27766: ST_TO_ADDR
27767: LD_INT 1
27769: PUSH
27770: FOR_DOWNTO
27771: IFFALSE 27934
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27773: LD_EXP 102
27777: PUSH
27778: LD_VAR 0 6
27782: ARRAY
27783: PUSH
27784: LD_VAR 0 5
27788: ARRAY
27789: PUSH
27790: LD_INT 1
27792: ARRAY
27793: PPUSH
27794: LD_EXP 102
27798: PUSH
27799: LD_VAR 0 6
27803: ARRAY
27804: PUSH
27805: LD_VAR 0 5
27809: ARRAY
27810: PUSH
27811: LD_INT 2
27813: ARRAY
27814: PPUSH
27815: LD_VAR 0 2
27819: PPUSH
27820: LD_VAR 0 3
27824: PPUSH
27825: CALL_OW 298
27829: PUSH
27830: LD_INT 6
27832: LESS
27833: IFFALSE 27932
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27835: LD_EXP 102
27839: PUSH
27840: LD_VAR 0 6
27844: ARRAY
27845: PUSH
27846: LD_VAR 0 5
27850: ARRAY
27851: PUSH
27852: LD_INT 1
27854: ARRAY
27855: PPUSH
27856: LD_EXP 102
27860: PUSH
27861: LD_VAR 0 6
27865: ARRAY
27866: PUSH
27867: LD_VAR 0 5
27871: ARRAY
27872: PUSH
27873: LD_INT 2
27875: ARRAY
27876: PPUSH
27877: LD_VAR 0 1
27881: PPUSH
27882: CALL_OW 255
27886: PPUSH
27887: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27891: LD_ADDR_EXP 102
27895: PUSH
27896: LD_EXP 102
27900: PPUSH
27901: LD_VAR 0 6
27905: PPUSH
27906: LD_EXP 102
27910: PUSH
27911: LD_VAR 0 6
27915: ARRAY
27916: PPUSH
27917: LD_VAR 0 5
27921: PPUSH
27922: CALL_OW 3
27926: PPUSH
27927: CALL_OW 1
27931: ST_TO_ADDR
// end ; end ;
27932: GO 27770
27934: POP
27935: POP
// end ;
27936: LD_VAR 0 4
27940: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27941: LD_INT 0
27943: PPUSH
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27952: LD_VAR 0 1
27956: PPUSH
27957: CALL_OW 264
27961: PUSH
27962: LD_EXP 28
27966: EQUAL
27967: NOT
27968: PUSH
27969: LD_VAR 0 1
27973: PUSH
27974: LD_EXP 101
27978: IN
27979: NOT
27980: OR
27981: IFFALSE 27985
// exit ;
27983: GO 28307
// index := GetElementIndex ( minersList , unit ) ;
27985: LD_ADDR_VAR 0 6
27989: PUSH
27990: LD_EXP 101
27994: PPUSH
27995: LD_VAR 0 1
27999: PPUSH
28000: CALL 33463 0 2
28004: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28005: LD_ADDR_VAR 0 8
28009: PUSH
28010: LD_EXP 103
28014: PUSH
28015: LD_EXP 102
28019: PUSH
28020: LD_VAR 0 6
28024: ARRAY
28025: MINUS
28026: ST_TO_ADDR
// if not minesFreeAmount then
28027: LD_VAR 0 8
28031: NOT
28032: IFFALSE 28036
// exit ;
28034: GO 28307
// tmp := [ ] ;
28036: LD_ADDR_VAR 0 7
28040: PUSH
28041: EMPTY
28042: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28043: LD_ADDR_VAR 0 5
28047: PUSH
28048: DOUBLE
28049: LD_INT 1
28051: DEC
28052: ST_TO_ADDR
28053: LD_VAR 0 8
28057: PUSH
28058: FOR_TO
28059: IFFALSE 28254
// begin _d := rand ( 0 , 5 ) ;
28061: LD_ADDR_VAR 0 11
28065: PUSH
28066: LD_INT 0
28068: PPUSH
28069: LD_INT 5
28071: PPUSH
28072: CALL_OW 12
28076: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28077: LD_ADDR_VAR 0 12
28081: PUSH
28082: LD_INT 2
28084: PPUSH
28085: LD_INT 6
28087: PPUSH
28088: CALL_OW 12
28092: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28093: LD_ADDR_VAR 0 9
28097: PUSH
28098: LD_VAR 0 2
28102: PPUSH
28103: LD_VAR 0 11
28107: PPUSH
28108: LD_VAR 0 12
28112: PPUSH
28113: CALL_OW 272
28117: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28118: LD_ADDR_VAR 0 10
28122: PUSH
28123: LD_VAR 0 3
28127: PPUSH
28128: LD_VAR 0 11
28132: PPUSH
28133: LD_VAR 0 12
28137: PPUSH
28138: CALL_OW 273
28142: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28143: LD_VAR 0 9
28147: PPUSH
28148: LD_VAR 0 10
28152: PPUSH
28153: CALL_OW 488
28157: PUSH
28158: LD_VAR 0 9
28162: PUSH
28163: LD_VAR 0 10
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_VAR 0 7
28176: IN
28177: NOT
28178: AND
28179: PUSH
28180: LD_VAR 0 9
28184: PPUSH
28185: LD_VAR 0 10
28189: PPUSH
28190: CALL_OW 458
28194: NOT
28195: AND
28196: IFFALSE 28238
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28198: LD_ADDR_VAR 0 7
28202: PUSH
28203: LD_VAR 0 7
28207: PPUSH
28208: LD_VAR 0 7
28212: PUSH
28213: LD_INT 1
28215: PLUS
28216: PPUSH
28217: LD_VAR 0 9
28221: PUSH
28222: LD_VAR 0 10
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PPUSH
28231: CALL_OW 1
28235: ST_TO_ADDR
28236: GO 28252
// i := i - 1 ;
28238: LD_ADDR_VAR 0 5
28242: PUSH
28243: LD_VAR 0 5
28247: PUSH
28248: LD_INT 1
28250: MINUS
28251: ST_TO_ADDR
// end ;
28252: GO 28058
28254: POP
28255: POP
// for i in tmp do
28256: LD_ADDR_VAR 0 5
28260: PUSH
28261: LD_VAR 0 7
28265: PUSH
28266: FOR_IN
28267: IFFALSE 28305
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28269: LD_VAR 0 1
28273: PPUSH
28274: LD_VAR 0 5
28278: PUSH
28279: LD_INT 1
28281: ARRAY
28282: PPUSH
28283: LD_VAR 0 5
28287: PUSH
28288: LD_INT 2
28290: ARRAY
28291: PPUSH
28292: CALL 27247 0 3
28296: NOT
28297: IFFALSE 28303
// exit ;
28299: POP
28300: POP
28301: GO 28307
28303: GO 28266
28305: POP
28306: POP
// end ;
28307: LD_VAR 0 4
28311: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28312: LD_INT 0
28314: PPUSH
28315: PPUSH
28316: PPUSH
28317: PPUSH
28318: PPUSH
28319: PPUSH
28320: PPUSH
// if not GetClass ( unit ) = class_sniper then
28321: LD_VAR 0 1
28325: PPUSH
28326: CALL_OW 257
28330: PUSH
28331: LD_INT 5
28333: EQUAL
28334: NOT
28335: IFFALSE 28339
// exit ;
28337: GO 28727
// dist := 8 ;
28339: LD_ADDR_VAR 0 5
28343: PUSH
28344: LD_INT 8
28346: ST_TO_ADDR
// viewRange := 12 ;
28347: LD_ADDR_VAR 0 7
28351: PUSH
28352: LD_INT 12
28354: ST_TO_ADDR
// side := GetSide ( unit ) ;
28355: LD_ADDR_VAR 0 6
28359: PUSH
28360: LD_VAR 0 1
28364: PPUSH
28365: CALL_OW 255
28369: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28370: LD_INT 61
28372: PPUSH
28373: LD_VAR 0 6
28377: PPUSH
28378: CALL_OW 321
28382: PUSH
28383: LD_INT 2
28385: EQUAL
28386: IFFALSE 28396
// viewRange := 16 ;
28388: LD_ADDR_VAR 0 7
28392: PUSH
28393: LD_INT 16
28395: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28396: LD_VAR 0 1
28400: PPUSH
28401: LD_VAR 0 2
28405: PPUSH
28406: LD_VAR 0 3
28410: PPUSH
28411: CALL_OW 297
28415: PUSH
28416: LD_VAR 0 5
28420: GREATER
28421: IFFALSE 28500
// begin ComMoveXY ( unit , x , y ) ;
28423: LD_VAR 0 1
28427: PPUSH
28428: LD_VAR 0 2
28432: PPUSH
28433: LD_VAR 0 3
28437: PPUSH
28438: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28442: LD_INT 35
28444: PPUSH
28445: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28449: LD_VAR 0 1
28453: PPUSH
28454: LD_VAR 0 2
28458: PPUSH
28459: LD_VAR 0 3
28463: PPUSH
28464: CALL 63860 0 3
28468: NOT
28469: IFFALSE 28473
// exit ;
28471: GO 28727
// until GetDistUnitXY ( unit , x , y ) < dist ;
28473: LD_VAR 0 1
28477: PPUSH
28478: LD_VAR 0 2
28482: PPUSH
28483: LD_VAR 0 3
28487: PPUSH
28488: CALL_OW 297
28492: PUSH
28493: LD_VAR 0 5
28497: LESS
28498: IFFALSE 28442
// end ; ComTurnXY ( unit , x , y ) ;
28500: LD_VAR 0 1
28504: PPUSH
28505: LD_VAR 0 2
28509: PPUSH
28510: LD_VAR 0 3
28514: PPUSH
28515: CALL_OW 118
// wait ( 5 ) ;
28519: LD_INT 5
28521: PPUSH
28522: CALL_OW 67
// _d := GetDir ( unit ) ;
28526: LD_ADDR_VAR 0 10
28530: PUSH
28531: LD_VAR 0 1
28535: PPUSH
28536: CALL_OW 254
28540: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28541: LD_ADDR_VAR 0 8
28545: PUSH
28546: LD_VAR 0 1
28550: PPUSH
28551: CALL_OW 250
28555: PPUSH
28556: LD_VAR 0 10
28560: PPUSH
28561: LD_VAR 0 5
28565: PPUSH
28566: CALL_OW 272
28570: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28571: LD_ADDR_VAR 0 9
28575: PUSH
28576: LD_VAR 0 1
28580: PPUSH
28581: CALL_OW 251
28585: PPUSH
28586: LD_VAR 0 10
28590: PPUSH
28591: LD_VAR 0 5
28595: PPUSH
28596: CALL_OW 273
28600: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28601: LD_VAR 0 8
28605: PPUSH
28606: LD_VAR 0 9
28610: PPUSH
28611: CALL_OW 488
28615: NOT
28616: IFFALSE 28620
// exit ;
28618: GO 28727
// ComAnimCustom ( unit , 1 ) ;
28620: LD_VAR 0 1
28624: PPUSH
28625: LD_INT 1
28627: PPUSH
28628: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28632: LD_VAR 0 8
28636: PPUSH
28637: LD_VAR 0 9
28641: PPUSH
28642: LD_VAR 0 6
28646: PPUSH
28647: LD_VAR 0 7
28651: PPUSH
28652: CALL_OW 330
// repeat wait ( 1 ) ;
28656: LD_INT 1
28658: PPUSH
28659: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 316
28672: PUSH
28673: LD_VAR 0 1
28677: PPUSH
28678: CALL_OW 314
28682: OR
28683: PUSH
28684: LD_VAR 0 1
28688: PPUSH
28689: CALL_OW 302
28693: NOT
28694: OR
28695: PUSH
28696: LD_VAR 0 1
28700: PPUSH
28701: CALL_OW 301
28705: OR
28706: IFFALSE 28656
// RemoveSeeing ( _x , _y , side ) ;
28708: LD_VAR 0 8
28712: PPUSH
28713: LD_VAR 0 9
28717: PPUSH
28718: LD_VAR 0 6
28722: PPUSH
28723: CALL_OW 331
// end ; end_of_file
28727: LD_VAR 0 4
28731: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28732: LD_INT 0
28734: PPUSH
28735: PPUSH
// if exist_mode then
28736: LD_VAR 0 2
28740: IFFALSE 28765
// unit := CreateCharacter ( prefix & ident ) else
28742: LD_ADDR_VAR 0 5
28746: PUSH
28747: LD_VAR 0 3
28751: PUSH
28752: LD_VAR 0 1
28756: STR
28757: PPUSH
28758: CALL_OW 34
28762: ST_TO_ADDR
28763: GO 28780
// unit := NewCharacter ( ident ) ;
28765: LD_ADDR_VAR 0 5
28769: PUSH
28770: LD_VAR 0 1
28774: PPUSH
28775: CALL_OW 25
28779: ST_TO_ADDR
// result := unit ;
28780: LD_ADDR_VAR 0 4
28784: PUSH
28785: LD_VAR 0 5
28789: ST_TO_ADDR
// end ;
28790: LD_VAR 0 4
28794: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28795: LD_INT 0
28797: PPUSH
28798: PPUSH
// if not side or not nation then
28799: LD_VAR 0 1
28803: NOT
28804: PUSH
28805: LD_VAR 0 2
28809: NOT
28810: OR
28811: IFFALSE 28815
// exit ;
28813: GO 29579
// case nation of nation_american :
28815: LD_VAR 0 2
28819: PUSH
28820: LD_INT 1
28822: DOUBLE
28823: EQUAL
28824: IFTRUE 28828
28826: GO 29042
28828: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28829: LD_ADDR_VAR 0 4
28833: PUSH
28834: LD_INT 35
28836: PUSH
28837: LD_INT 45
28839: PUSH
28840: LD_INT 46
28842: PUSH
28843: LD_INT 47
28845: PUSH
28846: LD_INT 82
28848: PUSH
28849: LD_INT 83
28851: PUSH
28852: LD_INT 84
28854: PUSH
28855: LD_INT 85
28857: PUSH
28858: LD_INT 86
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: LD_INT 2
28866: PUSH
28867: LD_INT 6
28869: PUSH
28870: LD_INT 15
28872: PUSH
28873: LD_INT 16
28875: PUSH
28876: LD_INT 7
28878: PUSH
28879: LD_INT 12
28881: PUSH
28882: LD_INT 13
28884: PUSH
28885: LD_INT 10
28887: PUSH
28888: LD_INT 14
28890: PUSH
28891: LD_INT 20
28893: PUSH
28894: LD_INT 21
28896: PUSH
28897: LD_INT 22
28899: PUSH
28900: LD_INT 25
28902: PUSH
28903: LD_INT 32
28905: PUSH
28906: LD_INT 27
28908: PUSH
28909: LD_INT 36
28911: PUSH
28912: LD_INT 69
28914: PUSH
28915: LD_INT 39
28917: PUSH
28918: LD_INT 34
28920: PUSH
28921: LD_INT 40
28923: PUSH
28924: LD_INT 48
28926: PUSH
28927: LD_INT 49
28929: PUSH
28930: LD_INT 50
28932: PUSH
28933: LD_INT 51
28935: PUSH
28936: LD_INT 52
28938: PUSH
28939: LD_INT 53
28941: PUSH
28942: LD_INT 54
28944: PUSH
28945: LD_INT 55
28947: PUSH
28948: LD_INT 56
28950: PUSH
28951: LD_INT 57
28953: PUSH
28954: LD_INT 58
28956: PUSH
28957: LD_INT 59
28959: PUSH
28960: LD_INT 60
28962: PUSH
28963: LD_INT 61
28965: PUSH
28966: LD_INT 62
28968: PUSH
28969: LD_INT 80
28971: PUSH
28972: LD_INT 82
28974: PUSH
28975: LD_INT 83
28977: PUSH
28978: LD_INT 84
28980: PUSH
28981: LD_INT 85
28983: PUSH
28984: LD_INT 86
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: ST_TO_ADDR
29040: GO 29503
29042: LD_INT 2
29044: DOUBLE
29045: EQUAL
29046: IFTRUE 29050
29048: GO 29272
29050: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29051: LD_ADDR_VAR 0 4
29055: PUSH
29056: LD_INT 35
29058: PUSH
29059: LD_INT 45
29061: PUSH
29062: LD_INT 46
29064: PUSH
29065: LD_INT 47
29067: PUSH
29068: LD_INT 82
29070: PUSH
29071: LD_INT 83
29073: PUSH
29074: LD_INT 84
29076: PUSH
29077: LD_INT 85
29079: PUSH
29080: LD_INT 87
29082: PUSH
29083: LD_INT 70
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 11
29091: PUSH
29092: LD_INT 3
29094: PUSH
29095: LD_INT 4
29097: PUSH
29098: LD_INT 5
29100: PUSH
29101: LD_INT 6
29103: PUSH
29104: LD_INT 15
29106: PUSH
29107: LD_INT 18
29109: PUSH
29110: LD_INT 7
29112: PUSH
29113: LD_INT 17
29115: PUSH
29116: LD_INT 8
29118: PUSH
29119: LD_INT 20
29121: PUSH
29122: LD_INT 21
29124: PUSH
29125: LD_INT 22
29127: PUSH
29128: LD_INT 72
29130: PUSH
29131: LD_INT 26
29133: PUSH
29134: LD_INT 69
29136: PUSH
29137: LD_INT 39
29139: PUSH
29140: LD_INT 40
29142: PUSH
29143: LD_INT 41
29145: PUSH
29146: LD_INT 42
29148: PUSH
29149: LD_INT 43
29151: PUSH
29152: LD_INT 48
29154: PUSH
29155: LD_INT 49
29157: PUSH
29158: LD_INT 50
29160: PUSH
29161: LD_INT 51
29163: PUSH
29164: LD_INT 52
29166: PUSH
29167: LD_INT 53
29169: PUSH
29170: LD_INT 54
29172: PUSH
29173: LD_INT 55
29175: PUSH
29176: LD_INT 56
29178: PUSH
29179: LD_INT 60
29181: PUSH
29182: LD_INT 61
29184: PUSH
29185: LD_INT 62
29187: PUSH
29188: LD_INT 66
29190: PUSH
29191: LD_INT 67
29193: PUSH
29194: LD_INT 68
29196: PUSH
29197: LD_INT 81
29199: PUSH
29200: LD_INT 82
29202: PUSH
29203: LD_INT 83
29205: PUSH
29206: LD_INT 84
29208: PUSH
29209: LD_INT 85
29211: PUSH
29212: LD_INT 87
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
29270: GO 29503
29272: LD_INT 3
29274: DOUBLE
29275: EQUAL
29276: IFTRUE 29280
29278: GO 29502
29280: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29281: LD_ADDR_VAR 0 4
29285: PUSH
29286: LD_INT 46
29288: PUSH
29289: LD_INT 47
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: LD_INT 2
29297: PUSH
29298: LD_INT 82
29300: PUSH
29301: LD_INT 83
29303: PUSH
29304: LD_INT 84
29306: PUSH
29307: LD_INT 85
29309: PUSH
29310: LD_INT 86
29312: PUSH
29313: LD_INT 11
29315: PUSH
29316: LD_INT 9
29318: PUSH
29319: LD_INT 20
29321: PUSH
29322: LD_INT 19
29324: PUSH
29325: LD_INT 21
29327: PUSH
29328: LD_INT 24
29330: PUSH
29331: LD_INT 22
29333: PUSH
29334: LD_INT 25
29336: PUSH
29337: LD_INT 28
29339: PUSH
29340: LD_INT 29
29342: PUSH
29343: LD_INT 30
29345: PUSH
29346: LD_INT 31
29348: PUSH
29349: LD_INT 37
29351: PUSH
29352: LD_INT 38
29354: PUSH
29355: LD_INT 32
29357: PUSH
29358: LD_INT 27
29360: PUSH
29361: LD_INT 33
29363: PUSH
29364: LD_INT 69
29366: PUSH
29367: LD_INT 39
29369: PUSH
29370: LD_INT 34
29372: PUSH
29373: LD_INT 40
29375: PUSH
29376: LD_INT 71
29378: PUSH
29379: LD_INT 23
29381: PUSH
29382: LD_INT 44
29384: PUSH
29385: LD_INT 48
29387: PUSH
29388: LD_INT 49
29390: PUSH
29391: LD_INT 50
29393: PUSH
29394: LD_INT 51
29396: PUSH
29397: LD_INT 52
29399: PUSH
29400: LD_INT 53
29402: PUSH
29403: LD_INT 54
29405: PUSH
29406: LD_INT 55
29408: PUSH
29409: LD_INT 56
29411: PUSH
29412: LD_INT 57
29414: PUSH
29415: LD_INT 58
29417: PUSH
29418: LD_INT 59
29420: PUSH
29421: LD_INT 63
29423: PUSH
29424: LD_INT 64
29426: PUSH
29427: LD_INT 65
29429: PUSH
29430: LD_INT 82
29432: PUSH
29433: LD_INT 83
29435: PUSH
29436: LD_INT 84
29438: PUSH
29439: LD_INT 85
29441: PUSH
29442: LD_INT 86
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: ST_TO_ADDR
29500: GO 29503
29502: POP
// if state > - 1 and state < 3 then
29503: LD_VAR 0 3
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: GREATER
29512: PUSH
29513: LD_VAR 0 3
29517: PUSH
29518: LD_INT 3
29520: LESS
29521: AND
29522: IFFALSE 29579
// for i in result do
29524: LD_ADDR_VAR 0 5
29528: PUSH
29529: LD_VAR 0 4
29533: PUSH
29534: FOR_IN
29535: IFFALSE 29577
// if GetTech ( i , side ) <> state then
29537: LD_VAR 0 5
29541: PPUSH
29542: LD_VAR 0 1
29546: PPUSH
29547: CALL_OW 321
29551: PUSH
29552: LD_VAR 0 3
29556: NONEQUAL
29557: IFFALSE 29575
// result := result diff i ;
29559: LD_ADDR_VAR 0 4
29563: PUSH
29564: LD_VAR 0 4
29568: PUSH
29569: LD_VAR 0 5
29573: DIFF
29574: ST_TO_ADDR
29575: GO 29534
29577: POP
29578: POP
// end ;
29579: LD_VAR 0 4
29583: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29584: LD_INT 0
29586: PPUSH
29587: PPUSH
29588: PPUSH
// result := true ;
29589: LD_ADDR_VAR 0 3
29593: PUSH
29594: LD_INT 1
29596: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29597: LD_ADDR_VAR 0 5
29601: PUSH
29602: LD_VAR 0 2
29606: PPUSH
29607: CALL_OW 480
29611: ST_TO_ADDR
// if not tmp then
29612: LD_VAR 0 5
29616: NOT
29617: IFFALSE 29621
// exit ;
29619: GO 29670
// for i in tmp do
29621: LD_ADDR_VAR 0 4
29625: PUSH
29626: LD_VAR 0 5
29630: PUSH
29631: FOR_IN
29632: IFFALSE 29668
// if GetTech ( i , side ) <> state_researched then
29634: LD_VAR 0 4
29638: PPUSH
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL_OW 321
29648: PUSH
29649: LD_INT 2
29651: NONEQUAL
29652: IFFALSE 29666
// begin result := false ;
29654: LD_ADDR_VAR 0 3
29658: PUSH
29659: LD_INT 0
29661: ST_TO_ADDR
// exit ;
29662: POP
29663: POP
29664: GO 29670
// end ;
29666: GO 29631
29668: POP
29669: POP
// end ;
29670: LD_VAR 0 3
29674: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29675: LD_INT 0
29677: PPUSH
29678: PPUSH
29679: PPUSH
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29690: LD_VAR 0 1
29694: NOT
29695: PUSH
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 257
29705: PUSH
29706: LD_INT 9
29708: NONEQUAL
29709: OR
29710: IFFALSE 29714
// exit ;
29712: GO 30287
// side := GetSide ( unit ) ;
29714: LD_ADDR_VAR 0 9
29718: PUSH
29719: LD_VAR 0 1
29723: PPUSH
29724: CALL_OW 255
29728: ST_TO_ADDR
// tech_space := tech_spacanom ;
29729: LD_ADDR_VAR 0 12
29733: PUSH
29734: LD_INT 29
29736: ST_TO_ADDR
// tech_time := tech_taurad ;
29737: LD_ADDR_VAR 0 13
29741: PUSH
29742: LD_INT 28
29744: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29745: LD_ADDR_VAR 0 11
29749: PUSH
29750: LD_VAR 0 1
29754: PPUSH
29755: CALL_OW 310
29759: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29760: LD_VAR 0 11
29764: PPUSH
29765: CALL_OW 247
29769: PUSH
29770: LD_INT 2
29772: EQUAL
29773: IFFALSE 29777
// exit ;
29775: GO 30287
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29777: LD_ADDR_VAR 0 8
29781: PUSH
29782: LD_INT 81
29784: PUSH
29785: LD_VAR 0 9
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 21
29799: PUSH
29800: LD_INT 3
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PPUSH
29815: CALL_OW 69
29819: ST_TO_ADDR
// if not tmp then
29820: LD_VAR 0 8
29824: NOT
29825: IFFALSE 29829
// exit ;
29827: GO 30287
// if in_unit then
29829: LD_VAR 0 11
29833: IFFALSE 29857
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29835: LD_ADDR_VAR 0 10
29839: PUSH
29840: LD_VAR 0 8
29844: PPUSH
29845: LD_VAR 0 11
29849: PPUSH
29850: CALL_OW 74
29854: ST_TO_ADDR
29855: GO 29877
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29857: LD_ADDR_VAR 0 10
29861: PUSH
29862: LD_VAR 0 8
29866: PPUSH
29867: LD_VAR 0 1
29871: PPUSH
29872: CALL_OW 74
29876: ST_TO_ADDR
// if not enemy then
29877: LD_VAR 0 10
29881: NOT
29882: IFFALSE 29886
// exit ;
29884: GO 30287
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29886: LD_VAR 0 11
29890: PUSH
29891: LD_VAR 0 11
29895: PPUSH
29896: LD_VAR 0 10
29900: PPUSH
29901: CALL_OW 296
29905: PUSH
29906: LD_INT 13
29908: GREATER
29909: AND
29910: PUSH
29911: LD_VAR 0 1
29915: PPUSH
29916: LD_VAR 0 10
29920: PPUSH
29921: CALL_OW 296
29925: PUSH
29926: LD_INT 12
29928: GREATER
29929: OR
29930: IFFALSE 29934
// exit ;
29932: GO 30287
// missile := [ 1 ] ;
29934: LD_ADDR_VAR 0 14
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: EMPTY
29943: LIST
29944: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29945: LD_VAR 0 9
29949: PPUSH
29950: LD_VAR 0 12
29954: PPUSH
29955: CALL_OW 325
29959: IFFALSE 29988
// missile := Insert ( missile , missile + 1 , 2 ) ;
29961: LD_ADDR_VAR 0 14
29965: PUSH
29966: LD_VAR 0 14
29970: PPUSH
29971: LD_VAR 0 14
29975: PUSH
29976: LD_INT 1
29978: PLUS
29979: PPUSH
29980: LD_INT 2
29982: PPUSH
29983: CALL_OW 2
29987: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29988: LD_VAR 0 9
29992: PPUSH
29993: LD_VAR 0 13
29997: PPUSH
29998: CALL_OW 325
30002: PUSH
30003: LD_VAR 0 10
30007: PPUSH
30008: CALL_OW 255
30012: PPUSH
30013: LD_VAR 0 13
30017: PPUSH
30018: CALL_OW 325
30022: NOT
30023: AND
30024: IFFALSE 30053
// missile := Insert ( missile , missile + 1 , 3 ) ;
30026: LD_ADDR_VAR 0 14
30030: PUSH
30031: LD_VAR 0 14
30035: PPUSH
30036: LD_VAR 0 14
30040: PUSH
30041: LD_INT 1
30043: PLUS
30044: PPUSH
30045: LD_INT 3
30047: PPUSH
30048: CALL_OW 2
30052: ST_TO_ADDR
// if missile < 2 then
30053: LD_VAR 0 14
30057: PUSH
30058: LD_INT 2
30060: LESS
30061: IFFALSE 30065
// exit ;
30063: GO 30287
// x := GetX ( enemy ) ;
30065: LD_ADDR_VAR 0 4
30069: PUSH
30070: LD_VAR 0 10
30074: PPUSH
30075: CALL_OW 250
30079: ST_TO_ADDR
// y := GetY ( enemy ) ;
30080: LD_ADDR_VAR 0 5
30084: PUSH
30085: LD_VAR 0 10
30089: PPUSH
30090: CALL_OW 251
30094: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30095: LD_ADDR_VAR 0 6
30099: PUSH
30100: LD_VAR 0 4
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PPUSH
30109: LD_INT 1
30111: PPUSH
30112: CALL_OW 12
30116: PLUS
30117: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30118: LD_ADDR_VAR 0 7
30122: PUSH
30123: LD_VAR 0 5
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PPUSH
30132: LD_INT 1
30134: PPUSH
30135: CALL_OW 12
30139: PLUS
30140: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30141: LD_VAR 0 6
30145: PPUSH
30146: LD_VAR 0 7
30150: PPUSH
30151: CALL_OW 488
30155: NOT
30156: IFFALSE 30178
// begin _x := x ;
30158: LD_ADDR_VAR 0 6
30162: PUSH
30163: LD_VAR 0 4
30167: ST_TO_ADDR
// _y := y ;
30168: LD_ADDR_VAR 0 7
30172: PUSH
30173: LD_VAR 0 5
30177: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30178: LD_ADDR_VAR 0 3
30182: PUSH
30183: LD_INT 1
30185: PPUSH
30186: LD_VAR 0 14
30190: PPUSH
30191: CALL_OW 12
30195: ST_TO_ADDR
// case i of 1 :
30196: LD_VAR 0 3
30200: PUSH
30201: LD_INT 1
30203: DOUBLE
30204: EQUAL
30205: IFTRUE 30209
30207: GO 30226
30209: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30210: LD_VAR 0 1
30214: PPUSH
30215: LD_VAR 0 10
30219: PPUSH
30220: CALL_OW 115
30224: GO 30287
30226: LD_INT 2
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 30256
30234: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30235: LD_VAR 0 1
30239: PPUSH
30240: LD_VAR 0 6
30244: PPUSH
30245: LD_VAR 0 7
30249: PPUSH
30250: CALL_OW 153
30254: GO 30287
30256: LD_INT 3
30258: DOUBLE
30259: EQUAL
30260: IFTRUE 30264
30262: GO 30286
30264: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30265: LD_VAR 0 1
30269: PPUSH
30270: LD_VAR 0 6
30274: PPUSH
30275: LD_VAR 0 7
30279: PPUSH
30280: CALL_OW 154
30284: GO 30287
30286: POP
// end ;
30287: LD_VAR 0 2
30291: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30292: LD_INT 0
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
30299: PPUSH
// if not unit or not building then
30300: LD_VAR 0 1
30304: NOT
30305: PUSH
30306: LD_VAR 0 2
30310: NOT
30311: OR
30312: IFFALSE 30316
// exit ;
30314: GO 30474
// x := GetX ( building ) ;
30316: LD_ADDR_VAR 0 5
30320: PUSH
30321: LD_VAR 0 2
30325: PPUSH
30326: CALL_OW 250
30330: ST_TO_ADDR
// y := GetY ( building ) ;
30331: LD_ADDR_VAR 0 6
30335: PUSH
30336: LD_VAR 0 2
30340: PPUSH
30341: CALL_OW 251
30345: ST_TO_ADDR
// for i = 0 to 5 do
30346: LD_ADDR_VAR 0 4
30350: PUSH
30351: DOUBLE
30352: LD_INT 0
30354: DEC
30355: ST_TO_ADDR
30356: LD_INT 5
30358: PUSH
30359: FOR_TO
30360: IFFALSE 30472
// begin _x := ShiftX ( x , i , 3 ) ;
30362: LD_ADDR_VAR 0 7
30366: PUSH
30367: LD_VAR 0 5
30371: PPUSH
30372: LD_VAR 0 4
30376: PPUSH
30377: LD_INT 3
30379: PPUSH
30380: CALL_OW 272
30384: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30385: LD_ADDR_VAR 0 8
30389: PUSH
30390: LD_VAR 0 6
30394: PPUSH
30395: LD_VAR 0 4
30399: PPUSH
30400: LD_INT 3
30402: PPUSH
30403: CALL_OW 273
30407: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30408: LD_VAR 0 7
30412: PPUSH
30413: LD_VAR 0 8
30417: PPUSH
30418: CALL_OW 488
30422: NOT
30423: IFFALSE 30427
// continue ;
30425: GO 30359
// if HexInfo ( _x , _y ) = 0 then
30427: LD_VAR 0 7
30431: PPUSH
30432: LD_VAR 0 8
30436: PPUSH
30437: CALL_OW 428
30441: PUSH
30442: LD_INT 0
30444: EQUAL
30445: IFFALSE 30470
// begin ComMoveXY ( unit , _x , _y ) ;
30447: LD_VAR 0 1
30451: PPUSH
30452: LD_VAR 0 7
30456: PPUSH
30457: LD_VAR 0 8
30461: PPUSH
30462: CALL_OW 111
// exit ;
30466: POP
30467: POP
30468: GO 30474
// end ; end ;
30470: GO 30359
30472: POP
30473: POP
// end ;
30474: LD_VAR 0 3
30478: RET
// export function ScanBase ( side , base_area ) ; begin
30479: LD_INT 0
30481: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30482: LD_ADDR_VAR 0 3
30486: PUSH
30487: LD_VAR 0 2
30491: PPUSH
30492: LD_INT 81
30494: PUSH
30495: LD_VAR 0 1
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PPUSH
30504: CALL_OW 70
30508: ST_TO_ADDR
// end ;
30509: LD_VAR 0 3
30513: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30514: LD_INT 0
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
// result := false ;
30520: LD_ADDR_VAR 0 2
30524: PUSH
30525: LD_INT 0
30527: ST_TO_ADDR
// side := GetSide ( unit ) ;
30528: LD_ADDR_VAR 0 3
30532: PUSH
30533: LD_VAR 0 1
30537: PPUSH
30538: CALL_OW 255
30542: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30543: LD_ADDR_VAR 0 4
30547: PUSH
30548: LD_VAR 0 1
30552: PPUSH
30553: CALL_OW 248
30557: ST_TO_ADDR
// case nat of 1 :
30558: LD_VAR 0 4
30562: PUSH
30563: LD_INT 1
30565: DOUBLE
30566: EQUAL
30567: IFTRUE 30571
30569: GO 30582
30571: POP
// tech := tech_lassight ; 2 :
30572: LD_ADDR_VAR 0 5
30576: PUSH
30577: LD_INT 12
30579: ST_TO_ADDR
30580: GO 30621
30582: LD_INT 2
30584: DOUBLE
30585: EQUAL
30586: IFTRUE 30590
30588: GO 30601
30590: POP
// tech := tech_mortar ; 3 :
30591: LD_ADDR_VAR 0 5
30595: PUSH
30596: LD_INT 41
30598: ST_TO_ADDR
30599: GO 30621
30601: LD_INT 3
30603: DOUBLE
30604: EQUAL
30605: IFTRUE 30609
30607: GO 30620
30609: POP
// tech := tech_bazooka ; end ;
30610: LD_ADDR_VAR 0 5
30614: PUSH
30615: LD_INT 44
30617: ST_TO_ADDR
30618: GO 30621
30620: POP
// if Researched ( side , tech ) then
30621: LD_VAR 0 3
30625: PPUSH
30626: LD_VAR 0 5
30630: PPUSH
30631: CALL_OW 325
30635: IFFALSE 30662
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30637: LD_ADDR_VAR 0 2
30641: PUSH
30642: LD_INT 5
30644: PUSH
30645: LD_INT 8
30647: PUSH
30648: LD_INT 9
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: PUSH
30656: LD_VAR 0 4
30660: ARRAY
30661: ST_TO_ADDR
// end ;
30662: LD_VAR 0 2
30666: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30667: LD_INT 0
30669: PPUSH
30670: PPUSH
30671: PPUSH
// if not mines then
30672: LD_VAR 0 2
30676: NOT
30677: IFFALSE 30681
// exit ;
30679: GO 30825
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30681: LD_ADDR_VAR 0 5
30685: PUSH
30686: LD_INT 81
30688: PUSH
30689: LD_VAR 0 1
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: LD_INT 21
30703: PUSH
30704: LD_INT 3
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PPUSH
30719: CALL_OW 69
30723: ST_TO_ADDR
// for i in mines do
30724: LD_ADDR_VAR 0 4
30728: PUSH
30729: LD_VAR 0 2
30733: PUSH
30734: FOR_IN
30735: IFFALSE 30823
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30737: LD_VAR 0 4
30741: PUSH
30742: LD_INT 1
30744: ARRAY
30745: PPUSH
30746: LD_VAR 0 4
30750: PUSH
30751: LD_INT 2
30753: ARRAY
30754: PPUSH
30755: CALL_OW 458
30759: NOT
30760: IFFALSE 30764
// continue ;
30762: GO 30734
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30764: LD_VAR 0 4
30768: PUSH
30769: LD_INT 1
30771: ARRAY
30772: PPUSH
30773: LD_VAR 0 4
30777: PUSH
30778: LD_INT 2
30780: ARRAY
30781: PPUSH
30782: CALL_OW 428
30786: PUSH
30787: LD_VAR 0 5
30791: IN
30792: IFFALSE 30821
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30794: LD_VAR 0 4
30798: PUSH
30799: LD_INT 1
30801: ARRAY
30802: PPUSH
30803: LD_VAR 0 4
30807: PUSH
30808: LD_INT 2
30810: ARRAY
30811: PPUSH
30812: LD_VAR 0 1
30816: PPUSH
30817: CALL_OW 456
// end ;
30821: GO 30734
30823: POP
30824: POP
// end ;
30825: LD_VAR 0 3
30829: RET
// export function Count ( array ) ; var i ; begin
30830: LD_INT 0
30832: PPUSH
30833: PPUSH
// result := 0 ;
30834: LD_ADDR_VAR 0 2
30838: PUSH
30839: LD_INT 0
30841: ST_TO_ADDR
// for i in array do
30842: LD_ADDR_VAR 0 3
30846: PUSH
30847: LD_VAR 0 1
30851: PUSH
30852: FOR_IN
30853: IFFALSE 30877
// if i then
30855: LD_VAR 0 3
30859: IFFALSE 30875
// result := result + 1 ;
30861: LD_ADDR_VAR 0 2
30865: PUSH
30866: LD_VAR 0 2
30870: PUSH
30871: LD_INT 1
30873: PLUS
30874: ST_TO_ADDR
30875: GO 30852
30877: POP
30878: POP
// end ;
30879: LD_VAR 0 2
30883: RET
// export function IsEmpty ( building ) ; begin
30884: LD_INT 0
30886: PPUSH
// if not building then
30887: LD_VAR 0 1
30891: NOT
30892: IFFALSE 30896
// exit ;
30894: GO 30939
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30896: LD_ADDR_VAR 0 2
30900: PUSH
30901: LD_VAR 0 1
30905: PUSH
30906: LD_INT 22
30908: PUSH
30909: LD_VAR 0 1
30913: PPUSH
30914: CALL_OW 255
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 58
30925: PUSH
30926: EMPTY
30927: LIST
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PPUSH
30933: CALL_OW 69
30937: IN
30938: ST_TO_ADDR
// end ;
30939: LD_VAR 0 2
30943: RET
// export function IsNotFull ( building ) ; begin
30944: LD_INT 0
30946: PPUSH
// if not building then
30947: LD_VAR 0 1
30951: NOT
30952: IFFALSE 30956
// exit ;
30954: GO 30975
// result := UnitsInside ( building ) < 6 ;
30956: LD_ADDR_VAR 0 2
30960: PUSH
30961: LD_VAR 0 1
30965: PPUSH
30966: CALL_OW 313
30970: PUSH
30971: LD_INT 6
30973: LESS
30974: ST_TO_ADDR
// end ;
30975: LD_VAR 0 2
30979: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30980: LD_INT 0
30982: PPUSH
30983: PPUSH
30984: PPUSH
30985: PPUSH
// tmp := [ ] ;
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: EMPTY
30992: ST_TO_ADDR
// list := [ ] ;
30993: LD_ADDR_VAR 0 5
30997: PUSH
30998: EMPTY
30999: ST_TO_ADDR
// for i = 16 to 25 do
31000: LD_ADDR_VAR 0 4
31004: PUSH
31005: DOUBLE
31006: LD_INT 16
31008: DEC
31009: ST_TO_ADDR
31010: LD_INT 25
31012: PUSH
31013: FOR_TO
31014: IFFALSE 31087
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31016: LD_ADDR_VAR 0 3
31020: PUSH
31021: LD_VAR 0 3
31025: PUSH
31026: LD_INT 22
31028: PUSH
31029: LD_VAR 0 1
31033: PPUSH
31034: CALL_OW 255
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 91
31045: PUSH
31046: LD_VAR 0 1
31050: PUSH
31051: LD_INT 6
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 30
31061: PUSH
31062: LD_VAR 0 4
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: LIST
31075: PUSH
31076: EMPTY
31077: LIST
31078: PPUSH
31079: CALL_OW 69
31083: ADD
31084: ST_TO_ADDR
31085: GO 31013
31087: POP
31088: POP
// for i = 1 to tmp do
31089: LD_ADDR_VAR 0 4
31093: PUSH
31094: DOUBLE
31095: LD_INT 1
31097: DEC
31098: ST_TO_ADDR
31099: LD_VAR 0 3
31103: PUSH
31104: FOR_TO
31105: IFFALSE 31193
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31107: LD_ADDR_VAR 0 5
31111: PUSH
31112: LD_VAR 0 5
31116: PUSH
31117: LD_VAR 0 3
31121: PUSH
31122: LD_VAR 0 4
31126: ARRAY
31127: PPUSH
31128: CALL_OW 266
31132: PUSH
31133: LD_VAR 0 3
31137: PUSH
31138: LD_VAR 0 4
31142: ARRAY
31143: PPUSH
31144: CALL_OW 250
31148: PUSH
31149: LD_VAR 0 3
31153: PUSH
31154: LD_VAR 0 4
31158: ARRAY
31159: PPUSH
31160: CALL_OW 251
31164: PUSH
31165: LD_VAR 0 3
31169: PUSH
31170: LD_VAR 0 4
31174: ARRAY
31175: PPUSH
31176: CALL_OW 254
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: PUSH
31187: EMPTY
31188: LIST
31189: ADD
31190: ST_TO_ADDR
31191: GO 31104
31193: POP
31194: POP
// result := list ;
31195: LD_ADDR_VAR 0 2
31199: PUSH
31200: LD_VAR 0 5
31204: ST_TO_ADDR
// end ;
31205: LD_VAR 0 2
31209: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31210: LD_INT 0
31212: PPUSH
31213: PPUSH
31214: PPUSH
31215: PPUSH
31216: PPUSH
31217: PPUSH
31218: PPUSH
// if not factory then
31219: LD_VAR 0 1
31223: NOT
31224: IFFALSE 31228
// exit ;
31226: GO 31821
// if control = control_apeman then
31228: LD_VAR 0 4
31232: PUSH
31233: LD_INT 5
31235: EQUAL
31236: IFFALSE 31345
// begin tmp := UnitsInside ( factory ) ;
31238: LD_ADDR_VAR 0 8
31242: PUSH
31243: LD_VAR 0 1
31247: PPUSH
31248: CALL_OW 313
31252: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31253: LD_VAR 0 8
31257: PPUSH
31258: LD_INT 25
31260: PUSH
31261: LD_INT 12
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 72
31272: NOT
31273: IFFALSE 31283
// control := control_manual ;
31275: LD_ADDR_VAR 0 4
31279: PUSH
31280: LD_INT 1
31282: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31283: LD_ADDR_VAR 0 8
31287: PUSH
31288: LD_VAR 0 1
31292: PPUSH
31293: CALL 30980 0 1
31297: ST_TO_ADDR
// if tmp then
31298: LD_VAR 0 8
31302: IFFALSE 31345
// begin for i in tmp do
31304: LD_ADDR_VAR 0 7
31308: PUSH
31309: LD_VAR 0 8
31313: PUSH
31314: FOR_IN
31315: IFFALSE 31343
// if i [ 1 ] = b_ext_radio then
31317: LD_VAR 0 7
31321: PUSH
31322: LD_INT 1
31324: ARRAY
31325: PUSH
31326: LD_INT 22
31328: EQUAL
31329: IFFALSE 31341
// begin control := control_remote ;
31331: LD_ADDR_VAR 0 4
31335: PUSH
31336: LD_INT 2
31338: ST_TO_ADDR
// break ;
31339: GO 31343
// end ;
31341: GO 31314
31343: POP
31344: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31345: LD_VAR 0 1
31349: PPUSH
31350: LD_VAR 0 2
31354: PPUSH
31355: LD_VAR 0 3
31359: PPUSH
31360: LD_VAR 0 4
31364: PPUSH
31365: LD_VAR 0 5
31369: PPUSH
31370: CALL_OW 448
31374: IFFALSE 31409
// begin result := [ chassis , engine , control , weapon ] ;
31376: LD_ADDR_VAR 0 6
31380: PUSH
31381: LD_VAR 0 2
31385: PUSH
31386: LD_VAR 0 3
31390: PUSH
31391: LD_VAR 0 4
31395: PUSH
31396: LD_VAR 0 5
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// exit ;
31407: GO 31821
// end ; _chassis := AvailableChassisList ( factory ) ;
31409: LD_ADDR_VAR 0 9
31413: PUSH
31414: LD_VAR 0 1
31418: PPUSH
31419: CALL_OW 475
31423: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31424: LD_ADDR_VAR 0 11
31428: PUSH
31429: LD_VAR 0 1
31433: PPUSH
31434: CALL_OW 476
31438: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31439: LD_ADDR_VAR 0 12
31443: PUSH
31444: LD_VAR 0 1
31448: PPUSH
31449: CALL_OW 477
31453: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31454: LD_ADDR_VAR 0 10
31458: PUSH
31459: LD_VAR 0 1
31463: PPUSH
31464: CALL_OW 478
31468: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31469: LD_VAR 0 9
31473: NOT
31474: PUSH
31475: LD_VAR 0 11
31479: NOT
31480: OR
31481: PUSH
31482: LD_VAR 0 12
31486: NOT
31487: OR
31488: PUSH
31489: LD_VAR 0 10
31493: NOT
31494: OR
31495: IFFALSE 31530
// begin result := [ chassis , engine , control , weapon ] ;
31497: LD_ADDR_VAR 0 6
31501: PUSH
31502: LD_VAR 0 2
31506: PUSH
31507: LD_VAR 0 3
31511: PUSH
31512: LD_VAR 0 4
31516: PUSH
31517: LD_VAR 0 5
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
// exit ;
31528: GO 31821
// end ; if not chassis in _chassis then
31530: LD_VAR 0 2
31534: PUSH
31535: LD_VAR 0 9
31539: IN
31540: NOT
31541: IFFALSE 31567
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31543: LD_ADDR_VAR 0 2
31547: PUSH
31548: LD_VAR 0 9
31552: PUSH
31553: LD_INT 1
31555: PPUSH
31556: LD_VAR 0 9
31560: PPUSH
31561: CALL_OW 12
31565: ARRAY
31566: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31567: LD_VAR 0 2
31571: PPUSH
31572: LD_VAR 0 3
31576: PPUSH
31577: CALL 31826 0 2
31581: NOT
31582: IFFALSE 31641
// repeat engine := _engine [ 1 ] ;
31584: LD_ADDR_VAR 0 3
31588: PUSH
31589: LD_VAR 0 11
31593: PUSH
31594: LD_INT 1
31596: ARRAY
31597: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31598: LD_ADDR_VAR 0 11
31602: PUSH
31603: LD_VAR 0 11
31607: PPUSH
31608: LD_INT 1
31610: PPUSH
31611: CALL_OW 3
31615: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31616: LD_VAR 0 2
31620: PPUSH
31621: LD_VAR 0 3
31625: PPUSH
31626: CALL 31826 0 2
31630: PUSH
31631: LD_VAR 0 11
31635: PUSH
31636: EMPTY
31637: EQUAL
31638: OR
31639: IFFALSE 31584
// if not control in _control then
31641: LD_VAR 0 4
31645: PUSH
31646: LD_VAR 0 12
31650: IN
31651: NOT
31652: IFFALSE 31678
// control := _control [ rand ( 1 , _control ) ] ;
31654: LD_ADDR_VAR 0 4
31658: PUSH
31659: LD_VAR 0 12
31663: PUSH
31664: LD_INT 1
31666: PPUSH
31667: LD_VAR 0 12
31671: PPUSH
31672: CALL_OW 12
31676: ARRAY
31677: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31678: LD_VAR 0 2
31682: PPUSH
31683: LD_VAR 0 5
31687: PPUSH
31688: CALL 32046 0 2
31692: NOT
31693: IFFALSE 31752
// repeat weapon := _weapon [ 1 ] ;
31695: LD_ADDR_VAR 0 5
31699: PUSH
31700: LD_VAR 0 10
31704: PUSH
31705: LD_INT 1
31707: ARRAY
31708: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31709: LD_ADDR_VAR 0 10
31713: PUSH
31714: LD_VAR 0 10
31718: PPUSH
31719: LD_INT 1
31721: PPUSH
31722: CALL_OW 3
31726: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31727: LD_VAR 0 2
31731: PPUSH
31732: LD_VAR 0 5
31736: PPUSH
31737: CALL 32046 0 2
31741: PUSH
31742: LD_VAR 0 10
31746: PUSH
31747: EMPTY
31748: EQUAL
31749: OR
31750: IFFALSE 31695
// result := [ ] ;
31752: LD_ADDR_VAR 0 6
31756: PUSH
31757: EMPTY
31758: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31759: LD_VAR 0 1
31763: PPUSH
31764: LD_VAR 0 2
31768: PPUSH
31769: LD_VAR 0 3
31773: PPUSH
31774: LD_VAR 0 4
31778: PPUSH
31779: LD_VAR 0 5
31783: PPUSH
31784: CALL_OW 448
31788: IFFALSE 31821
// result := [ chassis , engine , control , weapon ] ;
31790: LD_ADDR_VAR 0 6
31794: PUSH
31795: LD_VAR 0 2
31799: PUSH
31800: LD_VAR 0 3
31804: PUSH
31805: LD_VAR 0 4
31809: PUSH
31810: LD_VAR 0 5
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: ST_TO_ADDR
// end ;
31821: LD_VAR 0 6
31825: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31826: LD_INT 0
31828: PPUSH
// if not chassis or not engine then
31829: LD_VAR 0 1
31833: NOT
31834: PUSH
31835: LD_VAR 0 2
31839: NOT
31840: OR
31841: IFFALSE 31845
// exit ;
31843: GO 32041
// case engine of engine_solar :
31845: LD_VAR 0 2
31849: PUSH
31850: LD_INT 2
31852: DOUBLE
31853: EQUAL
31854: IFTRUE 31858
31856: GO 31896
31858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31859: LD_ADDR_VAR 0 3
31863: PUSH
31864: LD_INT 11
31866: PUSH
31867: LD_INT 12
31869: PUSH
31870: LD_INT 13
31872: PUSH
31873: LD_INT 14
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: ST_TO_ADDR
31894: GO 32025
31896: LD_INT 1
31898: DOUBLE
31899: EQUAL
31900: IFTRUE 31904
31902: GO 31966
31904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31905: LD_ADDR_VAR 0 3
31909: PUSH
31910: LD_INT 11
31912: PUSH
31913: LD_INT 12
31915: PUSH
31916: LD_INT 13
31918: PUSH
31919: LD_INT 14
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 3
31930: PUSH
31931: LD_INT 4
31933: PUSH
31934: LD_INT 5
31936: PUSH
31937: LD_INT 21
31939: PUSH
31940: LD_INT 23
31942: PUSH
31943: LD_INT 22
31945: PUSH
31946: LD_INT 24
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
31964: GO 32025
31966: LD_INT 3
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 31974
31972: GO 32024
31974: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31975: LD_ADDR_VAR 0 3
31979: PUSH
31980: LD_INT 13
31982: PUSH
31983: LD_INT 14
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: LD_INT 21
32000: PUSH
32001: LD_INT 22
32003: PUSH
32004: LD_INT 23
32006: PUSH
32007: LD_INT 24
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: ST_TO_ADDR
32022: GO 32025
32024: POP
// result := ( chassis in result ) ;
32025: LD_ADDR_VAR 0 3
32029: PUSH
32030: LD_VAR 0 1
32034: PUSH
32035: LD_VAR 0 3
32039: IN
32040: ST_TO_ADDR
// end ;
32041: LD_VAR 0 3
32045: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32046: LD_INT 0
32048: PPUSH
// if not chassis or not weapon then
32049: LD_VAR 0 1
32053: NOT
32054: PUSH
32055: LD_VAR 0 2
32059: NOT
32060: OR
32061: IFFALSE 32065
// exit ;
32063: GO 33091
// case weapon of us_machine_gun :
32065: LD_VAR 0 2
32069: PUSH
32070: LD_INT 2
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32108
32078: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32079: LD_ADDR_VAR 0 3
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: LD_INT 4
32095: PUSH
32096: LD_INT 5
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
32106: GO 33075
32108: LD_INT 3
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32146
32116: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32117: LD_ADDR_VAR 0 3
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: LD_INT 4
32133: PUSH
32134: LD_INT 5
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
32144: GO 33075
32146: LD_INT 11
32148: DOUBLE
32149: EQUAL
32150: IFTRUE 32154
32152: GO 32184
32154: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32155: LD_ADDR_VAR 0 3
32159: PUSH
32160: LD_INT 1
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: LD_INT 4
32171: PUSH
32172: LD_INT 5
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: ST_TO_ADDR
32182: GO 33075
32184: LD_INT 4
32186: DOUBLE
32187: EQUAL
32188: IFTRUE 32192
32190: GO 32218
32192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32193: LD_ADDR_VAR 0 3
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 3
32203: PUSH
32204: LD_INT 4
32206: PUSH
32207: LD_INT 5
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: ST_TO_ADDR
32216: GO 33075
32218: LD_INT 5
32220: DOUBLE
32221: EQUAL
32222: IFTRUE 32226
32224: GO 32252
32226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32227: LD_ADDR_VAR 0 3
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: LD_INT 3
32237: PUSH
32238: LD_INT 4
32240: PUSH
32241: LD_INT 5
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: ST_TO_ADDR
32250: GO 33075
32252: LD_INT 9
32254: DOUBLE
32255: EQUAL
32256: IFTRUE 32260
32258: GO 32286
32260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32261: LD_ADDR_VAR 0 3
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: LD_INT 3
32271: PUSH
32272: LD_INT 4
32274: PUSH
32275: LD_INT 5
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: ST_TO_ADDR
32284: GO 33075
32286: LD_INT 7
32288: DOUBLE
32289: EQUAL
32290: IFTRUE 32294
32292: GO 32320
32294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32295: LD_ADDR_VAR 0 3
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: LD_INT 3
32305: PUSH
32306: LD_INT 4
32308: PUSH
32309: LD_INT 5
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: ST_TO_ADDR
32318: GO 33075
32320: LD_INT 12
32322: DOUBLE
32323: EQUAL
32324: IFTRUE 32328
32326: GO 32354
32328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32329: LD_ADDR_VAR 0 3
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: LD_INT 4
32342: PUSH
32343: LD_INT 5
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: ST_TO_ADDR
32352: GO 33075
32354: LD_INT 13
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32388
32362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32363: LD_ADDR_VAR 0 3
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: LD_INT 4
32376: PUSH
32377: LD_INT 5
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: ST_TO_ADDR
32386: GO 33075
32388: LD_INT 14
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32396
32394: GO 32414
32396: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32397: LD_ADDR_VAR 0 3
32401: PUSH
32402: LD_INT 4
32404: PUSH
32405: LD_INT 5
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: ST_TO_ADDR
32412: GO 33075
32414: LD_INT 6
32416: DOUBLE
32417: EQUAL
32418: IFTRUE 32422
32420: GO 32440
32422: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32423: LD_ADDR_VAR 0 3
32427: PUSH
32428: LD_INT 4
32430: PUSH
32431: LD_INT 5
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: ST_TO_ADDR
32438: GO 33075
32440: LD_INT 10
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32448
32446: GO 32466
32448: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_INT 4
32456: PUSH
32457: LD_INT 5
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: ST_TO_ADDR
32464: GO 33075
32466: LD_INT 22
32468: DOUBLE
32469: EQUAL
32470: IFTRUE 32474
32472: GO 32500
32474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32475: LD_ADDR_VAR 0 3
32479: PUSH
32480: LD_INT 11
32482: PUSH
32483: LD_INT 12
32485: PUSH
32486: LD_INT 13
32488: PUSH
32489: LD_INT 14
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
32498: GO 33075
32500: LD_INT 23
32502: DOUBLE
32503: EQUAL
32504: IFTRUE 32508
32506: GO 32534
32508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: LD_INT 11
32516: PUSH
32517: LD_INT 12
32519: PUSH
32520: LD_INT 13
32522: PUSH
32523: LD_INT 14
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: ST_TO_ADDR
32532: GO 33075
32534: LD_INT 24
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32568
32542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_INT 11
32550: PUSH
32551: LD_INT 12
32553: PUSH
32554: LD_INT 13
32556: PUSH
32557: LD_INT 14
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: ST_TO_ADDR
32566: GO 33075
32568: LD_INT 30
32570: DOUBLE
32571: EQUAL
32572: IFTRUE 32576
32574: GO 32602
32576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32577: LD_ADDR_VAR 0 3
32581: PUSH
32582: LD_INT 11
32584: PUSH
32585: LD_INT 12
32587: PUSH
32588: LD_INT 13
32590: PUSH
32591: LD_INT 14
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: ST_TO_ADDR
32600: GO 33075
32602: LD_INT 25
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32610
32608: GO 32628
32610: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32611: LD_ADDR_VAR 0 3
32615: PUSH
32616: LD_INT 13
32618: PUSH
32619: LD_INT 14
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: ST_TO_ADDR
32626: GO 33075
32628: LD_INT 27
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32654
32636: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32637: LD_ADDR_VAR 0 3
32641: PUSH
32642: LD_INT 13
32644: PUSH
32645: LD_INT 14
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: ST_TO_ADDR
32652: GO 33075
32654: LD_INT 28
32656: DOUBLE
32657: EQUAL
32658: IFTRUE 32662
32660: GO 32680
32662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32663: LD_ADDR_VAR 0 3
32667: PUSH
32668: LD_INT 13
32670: PUSH
32671: LD_INT 14
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: ST_TO_ADDR
32678: GO 33075
32680: LD_INT 29
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32706
32688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: LD_INT 13
32696: PUSH
32697: LD_INT 14
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: ST_TO_ADDR
32704: GO 33075
32706: LD_INT 31
32708: DOUBLE
32709: EQUAL
32710: IFTRUE 32714
32712: GO 32732
32714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_INT 13
32722: PUSH
32723: LD_INT 14
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: ST_TO_ADDR
32730: GO 33075
32732: LD_INT 26
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32740
32738: GO 32758
32740: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32741: LD_ADDR_VAR 0 3
32745: PUSH
32746: LD_INT 13
32748: PUSH
32749: LD_INT 14
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: ST_TO_ADDR
32756: GO 33075
32758: LD_INT 42
32760: DOUBLE
32761: EQUAL
32762: IFTRUE 32766
32764: GO 32792
32766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32767: LD_ADDR_VAR 0 3
32771: PUSH
32772: LD_INT 21
32774: PUSH
32775: LD_INT 22
32777: PUSH
32778: LD_INT 23
32780: PUSH
32781: LD_INT 24
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: ST_TO_ADDR
32790: GO 33075
32792: LD_INT 43
32794: DOUBLE
32795: EQUAL
32796: IFTRUE 32800
32798: GO 32826
32800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32801: LD_ADDR_VAR 0 3
32805: PUSH
32806: LD_INT 21
32808: PUSH
32809: LD_INT 22
32811: PUSH
32812: LD_INT 23
32814: PUSH
32815: LD_INT 24
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: ST_TO_ADDR
32824: GO 33075
32826: LD_INT 44
32828: DOUBLE
32829: EQUAL
32830: IFTRUE 32834
32832: GO 32860
32834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32835: LD_ADDR_VAR 0 3
32839: PUSH
32840: LD_INT 21
32842: PUSH
32843: LD_INT 22
32845: PUSH
32846: LD_INT 23
32848: PUSH
32849: LD_INT 24
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
32858: GO 33075
32860: LD_INT 45
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32894
32868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32869: LD_ADDR_VAR 0 3
32873: PUSH
32874: LD_INT 21
32876: PUSH
32877: LD_INT 22
32879: PUSH
32880: LD_INT 23
32882: PUSH
32883: LD_INT 24
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: ST_TO_ADDR
32892: GO 33075
32894: LD_INT 49
32896: DOUBLE
32897: EQUAL
32898: IFTRUE 32902
32900: GO 32928
32902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32903: LD_ADDR_VAR 0 3
32907: PUSH
32908: LD_INT 21
32910: PUSH
32911: LD_INT 22
32913: PUSH
32914: LD_INT 23
32916: PUSH
32917: LD_INT 24
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: ST_TO_ADDR
32926: GO 33075
32928: LD_INT 51
32930: DOUBLE
32931: EQUAL
32932: IFTRUE 32936
32934: GO 32962
32936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32937: LD_ADDR_VAR 0 3
32941: PUSH
32942: LD_INT 21
32944: PUSH
32945: LD_INT 22
32947: PUSH
32948: LD_INT 23
32950: PUSH
32951: LD_INT 24
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: ST_TO_ADDR
32960: GO 33075
32962: LD_INT 52
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32970
32968: GO 32996
32970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32971: LD_ADDR_VAR 0 3
32975: PUSH
32976: LD_INT 21
32978: PUSH
32979: LD_INT 22
32981: PUSH
32982: LD_INT 23
32984: PUSH
32985: LD_INT 24
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: ST_TO_ADDR
32994: GO 33075
32996: LD_INT 53
32998: DOUBLE
32999: EQUAL
33000: IFTRUE 33004
33002: GO 33022
33004: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33005: LD_ADDR_VAR 0 3
33009: PUSH
33010: LD_INT 23
33012: PUSH
33013: LD_INT 24
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: ST_TO_ADDR
33020: GO 33075
33022: LD_INT 46
33024: DOUBLE
33025: EQUAL
33026: IFTRUE 33030
33028: GO 33048
33030: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33031: LD_ADDR_VAR 0 3
33035: PUSH
33036: LD_INT 23
33038: PUSH
33039: LD_INT 24
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: ST_TO_ADDR
33046: GO 33075
33048: LD_INT 47
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33074
33056: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33057: LD_ADDR_VAR 0 3
33061: PUSH
33062: LD_INT 23
33064: PUSH
33065: LD_INT 24
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: ST_TO_ADDR
33072: GO 33075
33074: POP
// result := ( chassis in result ) ;
33075: LD_ADDR_VAR 0 3
33079: PUSH
33080: LD_VAR 0 1
33084: PUSH
33085: LD_VAR 0 3
33089: IN
33090: ST_TO_ADDR
// end ;
33091: LD_VAR 0 3
33095: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33096: LD_INT 0
33098: PPUSH
33099: PPUSH
33100: PPUSH
33101: PPUSH
33102: PPUSH
33103: PPUSH
33104: PPUSH
// result := array ;
33105: LD_ADDR_VAR 0 5
33109: PUSH
33110: LD_VAR 0 1
33114: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33115: LD_VAR 0 1
33119: NOT
33120: PUSH
33121: LD_VAR 0 2
33125: NOT
33126: OR
33127: PUSH
33128: LD_VAR 0 3
33132: NOT
33133: OR
33134: PUSH
33135: LD_VAR 0 2
33139: PUSH
33140: LD_VAR 0 1
33144: GREATER
33145: OR
33146: PUSH
33147: LD_VAR 0 3
33151: PUSH
33152: LD_VAR 0 1
33156: GREATER
33157: OR
33158: IFFALSE 33162
// exit ;
33160: GO 33458
// if direction then
33162: LD_VAR 0 4
33166: IFFALSE 33230
// begin d := 1 ;
33168: LD_ADDR_VAR 0 9
33172: PUSH
33173: LD_INT 1
33175: ST_TO_ADDR
// if i_from > i_to then
33176: LD_VAR 0 2
33180: PUSH
33181: LD_VAR 0 3
33185: GREATER
33186: IFFALSE 33212
// length := ( array - i_from ) + i_to else
33188: LD_ADDR_VAR 0 11
33192: PUSH
33193: LD_VAR 0 1
33197: PUSH
33198: LD_VAR 0 2
33202: MINUS
33203: PUSH
33204: LD_VAR 0 3
33208: PLUS
33209: ST_TO_ADDR
33210: GO 33228
// length := i_to - i_from ;
33212: LD_ADDR_VAR 0 11
33216: PUSH
33217: LD_VAR 0 3
33221: PUSH
33222: LD_VAR 0 2
33226: MINUS
33227: ST_TO_ADDR
// end else
33228: GO 33291
// begin d := - 1 ;
33230: LD_ADDR_VAR 0 9
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: ST_TO_ADDR
// if i_from > i_to then
33239: LD_VAR 0 2
33243: PUSH
33244: LD_VAR 0 3
33248: GREATER
33249: IFFALSE 33269
// length := i_from - i_to else
33251: LD_ADDR_VAR 0 11
33255: PUSH
33256: LD_VAR 0 2
33260: PUSH
33261: LD_VAR 0 3
33265: MINUS
33266: ST_TO_ADDR
33267: GO 33291
// length := ( array - i_to ) + i_from ;
33269: LD_ADDR_VAR 0 11
33273: PUSH
33274: LD_VAR 0 1
33278: PUSH
33279: LD_VAR 0 3
33283: MINUS
33284: PUSH
33285: LD_VAR 0 2
33289: PLUS
33290: ST_TO_ADDR
// end ; if not length then
33291: LD_VAR 0 11
33295: NOT
33296: IFFALSE 33300
// exit ;
33298: GO 33458
// tmp := array ;
33300: LD_ADDR_VAR 0 10
33304: PUSH
33305: LD_VAR 0 1
33309: ST_TO_ADDR
// for i = 1 to length do
33310: LD_ADDR_VAR 0 6
33314: PUSH
33315: DOUBLE
33316: LD_INT 1
33318: DEC
33319: ST_TO_ADDR
33320: LD_VAR 0 11
33324: PUSH
33325: FOR_TO
33326: IFFALSE 33446
// begin for j = 1 to array do
33328: LD_ADDR_VAR 0 7
33332: PUSH
33333: DOUBLE
33334: LD_INT 1
33336: DEC
33337: ST_TO_ADDR
33338: LD_VAR 0 1
33342: PUSH
33343: FOR_TO
33344: IFFALSE 33432
// begin k := j + d ;
33346: LD_ADDR_VAR 0 8
33350: PUSH
33351: LD_VAR 0 7
33355: PUSH
33356: LD_VAR 0 9
33360: PLUS
33361: ST_TO_ADDR
// if k > array then
33362: LD_VAR 0 8
33366: PUSH
33367: LD_VAR 0 1
33371: GREATER
33372: IFFALSE 33382
// k := 1 ;
33374: LD_ADDR_VAR 0 8
33378: PUSH
33379: LD_INT 1
33381: ST_TO_ADDR
// if not k then
33382: LD_VAR 0 8
33386: NOT
33387: IFFALSE 33399
// k := array ;
33389: LD_ADDR_VAR 0 8
33393: PUSH
33394: LD_VAR 0 1
33398: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33399: LD_ADDR_VAR 0 10
33403: PUSH
33404: LD_VAR 0 10
33408: PPUSH
33409: LD_VAR 0 8
33413: PPUSH
33414: LD_VAR 0 1
33418: PUSH
33419: LD_VAR 0 7
33423: ARRAY
33424: PPUSH
33425: CALL_OW 1
33429: ST_TO_ADDR
// end ;
33430: GO 33343
33432: POP
33433: POP
// array := tmp ;
33434: LD_ADDR_VAR 0 1
33438: PUSH
33439: LD_VAR 0 10
33443: ST_TO_ADDR
// end ;
33444: GO 33325
33446: POP
33447: POP
// result := array ;
33448: LD_ADDR_VAR 0 5
33452: PUSH
33453: LD_VAR 0 1
33457: ST_TO_ADDR
// end ;
33458: LD_VAR 0 5
33462: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33463: LD_INT 0
33465: PPUSH
33466: PPUSH
// result := 0 ;
33467: LD_ADDR_VAR 0 3
33471: PUSH
33472: LD_INT 0
33474: ST_TO_ADDR
// if not array or not value in array then
33475: LD_VAR 0 1
33479: NOT
33480: PUSH
33481: LD_VAR 0 2
33485: PUSH
33486: LD_VAR 0 1
33490: IN
33491: NOT
33492: OR
33493: IFFALSE 33497
// exit ;
33495: GO 33551
// for i = 1 to array do
33497: LD_ADDR_VAR 0 4
33501: PUSH
33502: DOUBLE
33503: LD_INT 1
33505: DEC
33506: ST_TO_ADDR
33507: LD_VAR 0 1
33511: PUSH
33512: FOR_TO
33513: IFFALSE 33549
// if value = array [ i ] then
33515: LD_VAR 0 2
33519: PUSH
33520: LD_VAR 0 1
33524: PUSH
33525: LD_VAR 0 4
33529: ARRAY
33530: EQUAL
33531: IFFALSE 33547
// begin result := i ;
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_VAR 0 4
33542: ST_TO_ADDR
// exit ;
33543: POP
33544: POP
33545: GO 33551
// end ;
33547: GO 33512
33549: POP
33550: POP
// end ;
33551: LD_VAR 0 3
33555: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33556: LD_INT 0
33558: PPUSH
// vc_chassis := chassis ;
33559: LD_ADDR_OWVAR 37
33563: PUSH
33564: LD_VAR 0 1
33568: ST_TO_ADDR
// vc_engine := engine ;
33569: LD_ADDR_OWVAR 39
33573: PUSH
33574: LD_VAR 0 2
33578: ST_TO_ADDR
// vc_control := control ;
33579: LD_ADDR_OWVAR 38
33583: PUSH
33584: LD_VAR 0 3
33588: ST_TO_ADDR
// vc_weapon := weapon ;
33589: LD_ADDR_OWVAR 40
33593: PUSH
33594: LD_VAR 0 4
33598: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33599: LD_ADDR_OWVAR 41
33603: PUSH
33604: LD_VAR 0 5
33608: ST_TO_ADDR
// end ;
33609: LD_VAR 0 6
33613: RET
// export function WantPlant ( unit ) ; var task ; begin
33614: LD_INT 0
33616: PPUSH
33617: PPUSH
// result := false ;
33618: LD_ADDR_VAR 0 2
33622: PUSH
33623: LD_INT 0
33625: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33626: LD_ADDR_VAR 0 3
33630: PUSH
33631: LD_VAR 0 1
33635: PPUSH
33636: CALL_OW 437
33640: ST_TO_ADDR
// if task then
33641: LD_VAR 0 3
33645: IFFALSE 33673
// if task [ 1 ] [ 1 ] = p then
33647: LD_VAR 0 3
33651: PUSH
33652: LD_INT 1
33654: ARRAY
33655: PUSH
33656: LD_INT 1
33658: ARRAY
33659: PUSH
33660: LD_STRING p
33662: EQUAL
33663: IFFALSE 33673
// result := true ;
33665: LD_ADDR_VAR 0 2
33669: PUSH
33670: LD_INT 1
33672: ST_TO_ADDR
// end ;
33673: LD_VAR 0 2
33677: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33678: LD_INT 0
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
// if pos < 1 then
33684: LD_VAR 0 2
33688: PUSH
33689: LD_INT 1
33691: LESS
33692: IFFALSE 33696
// exit ;
33694: GO 33999
// if pos = 1 then
33696: LD_VAR 0 2
33700: PUSH
33701: LD_INT 1
33703: EQUAL
33704: IFFALSE 33737
// result := Replace ( arr , pos [ 1 ] , value ) else
33706: LD_ADDR_VAR 0 4
33710: PUSH
33711: LD_VAR 0 1
33715: PPUSH
33716: LD_VAR 0 2
33720: PUSH
33721: LD_INT 1
33723: ARRAY
33724: PPUSH
33725: LD_VAR 0 3
33729: PPUSH
33730: CALL_OW 1
33734: ST_TO_ADDR
33735: GO 33999
// begin tmp := arr ;
33737: LD_ADDR_VAR 0 6
33741: PUSH
33742: LD_VAR 0 1
33746: ST_TO_ADDR
// s_arr := [ tmp ] ;
33747: LD_ADDR_VAR 0 7
33751: PUSH
33752: LD_VAR 0 6
33756: PUSH
33757: EMPTY
33758: LIST
33759: ST_TO_ADDR
// for i = 1 to pos - 1 do
33760: LD_ADDR_VAR 0 5
33764: PUSH
33765: DOUBLE
33766: LD_INT 1
33768: DEC
33769: ST_TO_ADDR
33770: LD_VAR 0 2
33774: PUSH
33775: LD_INT 1
33777: MINUS
33778: PUSH
33779: FOR_TO
33780: IFFALSE 33825
// begin tmp := tmp [ pos [ i ] ] ;
33782: LD_ADDR_VAR 0 6
33786: PUSH
33787: LD_VAR 0 6
33791: PUSH
33792: LD_VAR 0 2
33796: PUSH
33797: LD_VAR 0 5
33801: ARRAY
33802: ARRAY
33803: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33804: LD_ADDR_VAR 0 7
33808: PUSH
33809: LD_VAR 0 7
33813: PUSH
33814: LD_VAR 0 6
33818: PUSH
33819: EMPTY
33820: LIST
33821: ADD
33822: ST_TO_ADDR
// end ;
33823: GO 33779
33825: POP
33826: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33827: LD_ADDR_VAR 0 6
33831: PUSH
33832: LD_VAR 0 6
33836: PPUSH
33837: LD_VAR 0 2
33841: PUSH
33842: LD_VAR 0 2
33846: ARRAY
33847: PPUSH
33848: LD_VAR 0 3
33852: PPUSH
33853: CALL_OW 1
33857: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33858: LD_ADDR_VAR 0 7
33862: PUSH
33863: LD_VAR 0 7
33867: PPUSH
33868: LD_VAR 0 7
33872: PPUSH
33873: LD_VAR 0 6
33877: PPUSH
33878: CALL_OW 1
33882: ST_TO_ADDR
// for i = s_arr downto 2 do
33883: LD_ADDR_VAR 0 5
33887: PUSH
33888: DOUBLE
33889: LD_VAR 0 7
33893: INC
33894: ST_TO_ADDR
33895: LD_INT 2
33897: PUSH
33898: FOR_DOWNTO
33899: IFFALSE 33983
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33901: LD_ADDR_VAR 0 6
33905: PUSH
33906: LD_VAR 0 7
33910: PUSH
33911: LD_VAR 0 5
33915: PUSH
33916: LD_INT 1
33918: MINUS
33919: ARRAY
33920: PPUSH
33921: LD_VAR 0 2
33925: PUSH
33926: LD_VAR 0 5
33930: PUSH
33931: LD_INT 1
33933: MINUS
33934: ARRAY
33935: PPUSH
33936: LD_VAR 0 7
33940: PUSH
33941: LD_VAR 0 5
33945: ARRAY
33946: PPUSH
33947: CALL_OW 1
33951: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33952: LD_ADDR_VAR 0 7
33956: PUSH
33957: LD_VAR 0 7
33961: PPUSH
33962: LD_VAR 0 5
33966: PUSH
33967: LD_INT 1
33969: MINUS
33970: PPUSH
33971: LD_VAR 0 6
33975: PPUSH
33976: CALL_OW 1
33980: ST_TO_ADDR
// end ;
33981: GO 33898
33983: POP
33984: POP
// result := s_arr [ 1 ] ;
33985: LD_ADDR_VAR 0 4
33989: PUSH
33990: LD_VAR 0 7
33994: PUSH
33995: LD_INT 1
33997: ARRAY
33998: ST_TO_ADDR
// end ; end ;
33999: LD_VAR 0 4
34003: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34004: LD_INT 0
34006: PPUSH
34007: PPUSH
// if not list then
34008: LD_VAR 0 1
34012: NOT
34013: IFFALSE 34017
// exit ;
34015: GO 34108
// i := list [ pos1 ] ;
34017: LD_ADDR_VAR 0 5
34021: PUSH
34022: LD_VAR 0 1
34026: PUSH
34027: LD_VAR 0 2
34031: ARRAY
34032: ST_TO_ADDR
// if not i then
34033: LD_VAR 0 5
34037: NOT
34038: IFFALSE 34042
// exit ;
34040: GO 34108
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34042: LD_ADDR_VAR 0 1
34046: PUSH
34047: LD_VAR 0 1
34051: PPUSH
34052: LD_VAR 0 2
34056: PPUSH
34057: LD_VAR 0 1
34061: PUSH
34062: LD_VAR 0 3
34066: ARRAY
34067: PPUSH
34068: CALL_OW 1
34072: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34073: LD_ADDR_VAR 0 1
34077: PUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: LD_VAR 0 3
34087: PPUSH
34088: LD_VAR 0 5
34092: PPUSH
34093: CALL_OW 1
34097: ST_TO_ADDR
// result := list ;
34098: LD_ADDR_VAR 0 4
34102: PUSH
34103: LD_VAR 0 1
34107: ST_TO_ADDR
// end ;
34108: LD_VAR 0 4
34112: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34113: LD_INT 0
34115: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34116: LD_ADDR_VAR 0 5
34120: PUSH
34121: LD_VAR 0 1
34125: PPUSH
34126: CALL_OW 250
34130: PPUSH
34131: LD_VAR 0 1
34135: PPUSH
34136: CALL_OW 251
34140: PPUSH
34141: LD_VAR 0 2
34145: PPUSH
34146: LD_VAR 0 3
34150: PPUSH
34151: LD_VAR 0 4
34155: PPUSH
34156: CALL 34166 0 5
34160: ST_TO_ADDR
// end ;
34161: LD_VAR 0 5
34165: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34166: LD_INT 0
34168: PPUSH
34169: PPUSH
34170: PPUSH
34171: PPUSH
// if not list then
34172: LD_VAR 0 3
34176: NOT
34177: IFFALSE 34181
// exit ;
34179: GO 34569
// result := [ ] ;
34181: LD_ADDR_VAR 0 6
34185: PUSH
34186: EMPTY
34187: ST_TO_ADDR
// for i in list do
34188: LD_ADDR_VAR 0 7
34192: PUSH
34193: LD_VAR 0 3
34197: PUSH
34198: FOR_IN
34199: IFFALSE 34401
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34201: LD_ADDR_VAR 0 9
34205: PUSH
34206: LD_VAR 0 7
34210: PPUSH
34211: LD_VAR 0 1
34215: PPUSH
34216: LD_VAR 0 2
34220: PPUSH
34221: CALL_OW 297
34225: ST_TO_ADDR
// if not result then
34226: LD_VAR 0 6
34230: NOT
34231: IFFALSE 34257
// result := [ [ i , tmp ] ] else
34233: LD_ADDR_VAR 0 6
34237: PUSH
34238: LD_VAR 0 7
34242: PUSH
34243: LD_VAR 0 9
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: EMPTY
34253: LIST
34254: ST_TO_ADDR
34255: GO 34399
// begin if result [ result ] [ 2 ] < tmp then
34257: LD_VAR 0 6
34261: PUSH
34262: LD_VAR 0 6
34266: ARRAY
34267: PUSH
34268: LD_INT 2
34270: ARRAY
34271: PUSH
34272: LD_VAR 0 9
34276: LESS
34277: IFFALSE 34319
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34279: LD_ADDR_VAR 0 6
34283: PUSH
34284: LD_VAR 0 6
34288: PPUSH
34289: LD_VAR 0 6
34293: PUSH
34294: LD_INT 1
34296: PLUS
34297: PPUSH
34298: LD_VAR 0 7
34302: PUSH
34303: LD_VAR 0 9
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PPUSH
34312: CALL_OW 2
34316: ST_TO_ADDR
34317: GO 34399
// for j = 1 to result do
34319: LD_ADDR_VAR 0 8
34323: PUSH
34324: DOUBLE
34325: LD_INT 1
34327: DEC
34328: ST_TO_ADDR
34329: LD_VAR 0 6
34333: PUSH
34334: FOR_TO
34335: IFFALSE 34397
// begin if tmp < result [ j ] [ 2 ] then
34337: LD_VAR 0 9
34341: PUSH
34342: LD_VAR 0 6
34346: PUSH
34347: LD_VAR 0 8
34351: ARRAY
34352: PUSH
34353: LD_INT 2
34355: ARRAY
34356: LESS
34357: IFFALSE 34395
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34359: LD_ADDR_VAR 0 6
34363: PUSH
34364: LD_VAR 0 6
34368: PPUSH
34369: LD_VAR 0 8
34373: PPUSH
34374: LD_VAR 0 7
34378: PUSH
34379: LD_VAR 0 9
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PPUSH
34388: CALL_OW 2
34392: ST_TO_ADDR
// break ;
34393: GO 34397
// end ; end ;
34395: GO 34334
34397: POP
34398: POP
// end ; end ;
34399: GO 34198
34401: POP
34402: POP
// if result and not asc then
34403: LD_VAR 0 6
34407: PUSH
34408: LD_VAR 0 4
34412: NOT
34413: AND
34414: IFFALSE 34489
// begin tmp := result ;
34416: LD_ADDR_VAR 0 9
34420: PUSH
34421: LD_VAR 0 6
34425: ST_TO_ADDR
// for i = tmp downto 1 do
34426: LD_ADDR_VAR 0 7
34430: PUSH
34431: DOUBLE
34432: LD_VAR 0 9
34436: INC
34437: ST_TO_ADDR
34438: LD_INT 1
34440: PUSH
34441: FOR_DOWNTO
34442: IFFALSE 34487
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34444: LD_ADDR_VAR 0 6
34448: PUSH
34449: LD_VAR 0 6
34453: PPUSH
34454: LD_VAR 0 9
34458: PUSH
34459: LD_VAR 0 7
34463: MINUS
34464: PUSH
34465: LD_INT 1
34467: PLUS
34468: PPUSH
34469: LD_VAR 0 9
34473: PUSH
34474: LD_VAR 0 7
34478: ARRAY
34479: PPUSH
34480: CALL_OW 1
34484: ST_TO_ADDR
34485: GO 34441
34487: POP
34488: POP
// end ; tmp := [ ] ;
34489: LD_ADDR_VAR 0 9
34493: PUSH
34494: EMPTY
34495: ST_TO_ADDR
// if mode then
34496: LD_VAR 0 5
34500: IFFALSE 34569
// begin for i = 1 to result do
34502: LD_ADDR_VAR 0 7
34506: PUSH
34507: DOUBLE
34508: LD_INT 1
34510: DEC
34511: ST_TO_ADDR
34512: LD_VAR 0 6
34516: PUSH
34517: FOR_TO
34518: IFFALSE 34557
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34520: LD_ADDR_VAR 0 9
34524: PUSH
34525: LD_VAR 0 9
34529: PPUSH
34530: LD_VAR 0 7
34534: PPUSH
34535: LD_VAR 0 6
34539: PUSH
34540: LD_VAR 0 7
34544: ARRAY
34545: PUSH
34546: LD_INT 1
34548: ARRAY
34549: PPUSH
34550: CALL_OW 1
34554: ST_TO_ADDR
34555: GO 34517
34557: POP
34558: POP
// result := tmp ;
34559: LD_ADDR_VAR 0 6
34563: PUSH
34564: LD_VAR 0 9
34568: ST_TO_ADDR
// end ; end ;
34569: LD_VAR 0 6
34573: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34574: LD_INT 0
34576: PPUSH
34577: PPUSH
34578: PPUSH
34579: PPUSH
34580: PPUSH
34581: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34582: LD_ADDR_VAR 0 5
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: EMPTY
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: ST_TO_ADDR
// if not x or not y then
34604: LD_VAR 0 2
34608: NOT
34609: PUSH
34610: LD_VAR 0 3
34614: NOT
34615: OR
34616: IFFALSE 34620
// exit ;
34618: GO 36266
// if not range then
34620: LD_VAR 0 4
34624: NOT
34625: IFFALSE 34635
// range := 10 ;
34627: LD_ADDR_VAR 0 4
34631: PUSH
34632: LD_INT 10
34634: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34635: LD_ADDR_VAR 0 8
34639: PUSH
34640: LD_INT 81
34642: PUSH
34643: LD_VAR 0 1
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 92
34654: PUSH
34655: LD_VAR 0 2
34659: PUSH
34660: LD_VAR 0 3
34664: PUSH
34665: LD_VAR 0 4
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 3
34678: PUSH
34679: LD_INT 21
34681: PUSH
34682: LD_INT 3
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: PPUSH
34698: CALL_OW 69
34702: ST_TO_ADDR
// if not tmp then
34703: LD_VAR 0 8
34707: NOT
34708: IFFALSE 34712
// exit ;
34710: GO 36266
// for i in tmp do
34712: LD_ADDR_VAR 0 6
34716: PUSH
34717: LD_VAR 0 8
34721: PUSH
34722: FOR_IN
34723: IFFALSE 36241
// begin points := [ 0 , 0 , 0 ] ;
34725: LD_ADDR_VAR 0 9
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: ST_TO_ADDR
// bpoints := 1 ;
34744: LD_ADDR_VAR 0 10
34748: PUSH
34749: LD_INT 1
34751: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34752: LD_VAR 0 6
34756: PPUSH
34757: CALL_OW 247
34761: PUSH
34762: LD_INT 1
34764: DOUBLE
34765: EQUAL
34766: IFTRUE 34770
34768: GO 35348
34770: POP
// begin if GetClass ( i ) = 1 then
34771: LD_VAR 0 6
34775: PPUSH
34776: CALL_OW 257
34780: PUSH
34781: LD_INT 1
34783: EQUAL
34784: IFFALSE 34805
// points := [ 10 , 5 , 3 ] ;
34786: LD_ADDR_VAR 0 9
34790: PUSH
34791: LD_INT 10
34793: PUSH
34794: LD_INT 5
34796: PUSH
34797: LD_INT 3
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: LIST
34804: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34805: LD_VAR 0 6
34809: PPUSH
34810: CALL_OW 257
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: LD_INT 4
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: IN
34829: IFFALSE 34850
// points := [ 3 , 2 , 1 ] ;
34831: LD_ADDR_VAR 0 9
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34850: LD_VAR 0 6
34854: PPUSH
34855: CALL_OW 257
34859: PUSH
34860: LD_INT 5
34862: EQUAL
34863: IFFALSE 34884
// points := [ 130 , 5 , 2 ] ;
34865: LD_ADDR_VAR 0 9
34869: PUSH
34870: LD_INT 130
34872: PUSH
34873: LD_INT 5
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: LIST
34883: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34884: LD_VAR 0 6
34888: PPUSH
34889: CALL_OW 257
34893: PUSH
34894: LD_INT 8
34896: EQUAL
34897: IFFALSE 34918
// points := [ 35 , 35 , 30 ] ;
34899: LD_ADDR_VAR 0 9
34903: PUSH
34904: LD_INT 35
34906: PUSH
34907: LD_INT 35
34909: PUSH
34910: LD_INT 30
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34918: LD_VAR 0 6
34922: PPUSH
34923: CALL_OW 257
34927: PUSH
34928: LD_INT 9
34930: EQUAL
34931: IFFALSE 34952
// points := [ 20 , 55 , 40 ] ;
34933: LD_ADDR_VAR 0 9
34937: PUSH
34938: LD_INT 20
34940: PUSH
34941: LD_INT 55
34943: PUSH
34944: LD_INT 40
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34952: LD_VAR 0 6
34956: PPUSH
34957: CALL_OW 257
34961: PUSH
34962: LD_INT 12
34964: PUSH
34965: LD_INT 16
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: IN
34972: IFFALSE 34993
// points := [ 5 , 3 , 2 ] ;
34974: LD_ADDR_VAR 0 9
34978: PUSH
34979: LD_INT 5
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34993: LD_VAR 0 6
34997: PPUSH
34998: CALL_OW 257
35002: PUSH
35003: LD_INT 17
35005: EQUAL
35006: IFFALSE 35027
// points := [ 100 , 50 , 75 ] ;
35008: LD_ADDR_VAR 0 9
35012: PUSH
35013: LD_INT 100
35015: PUSH
35016: LD_INT 50
35018: PUSH
35019: LD_INT 75
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35027: LD_VAR 0 6
35031: PPUSH
35032: CALL_OW 257
35036: PUSH
35037: LD_INT 15
35039: EQUAL
35040: IFFALSE 35061
// points := [ 10 , 5 , 3 ] ;
35042: LD_ADDR_VAR 0 9
35046: PUSH
35047: LD_INT 10
35049: PUSH
35050: LD_INT 5
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35061: LD_VAR 0 6
35065: PPUSH
35066: CALL_OW 257
35070: PUSH
35071: LD_INT 14
35073: EQUAL
35074: IFFALSE 35095
// points := [ 10 , 0 , 0 ] ;
35076: LD_ADDR_VAR 0 9
35080: PUSH
35081: LD_INT 10
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: LIST
35094: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35095: LD_VAR 0 6
35099: PPUSH
35100: CALL_OW 257
35104: PUSH
35105: LD_INT 11
35107: EQUAL
35108: IFFALSE 35129
// points := [ 30 , 10 , 5 ] ;
35110: LD_ADDR_VAR 0 9
35114: PUSH
35115: LD_INT 30
35117: PUSH
35118: LD_INT 10
35120: PUSH
35121: LD_INT 5
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35129: LD_VAR 0 1
35133: PPUSH
35134: LD_INT 5
35136: PPUSH
35137: CALL_OW 321
35141: PUSH
35142: LD_INT 2
35144: EQUAL
35145: IFFALSE 35162
// bpoints := bpoints * 1.8 ;
35147: LD_ADDR_VAR 0 10
35151: PUSH
35152: LD_VAR 0 10
35156: PUSH
35157: LD_REAL  1.80000000000000E+0000
35160: MUL
35161: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35162: LD_VAR 0 6
35166: PPUSH
35167: CALL_OW 257
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: LD_INT 3
35180: PUSH
35181: LD_INT 4
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: IN
35190: PUSH
35191: LD_VAR 0 1
35195: PPUSH
35196: LD_INT 51
35198: PPUSH
35199: CALL_OW 321
35203: PUSH
35204: LD_INT 2
35206: EQUAL
35207: AND
35208: IFFALSE 35225
// bpoints := bpoints * 1.2 ;
35210: LD_ADDR_VAR 0 10
35214: PUSH
35215: LD_VAR 0 10
35219: PUSH
35220: LD_REAL  1.20000000000000E+0000
35223: MUL
35224: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35225: LD_VAR 0 6
35229: PPUSH
35230: CALL_OW 257
35234: PUSH
35235: LD_INT 5
35237: PUSH
35238: LD_INT 7
35240: PUSH
35241: LD_INT 9
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: IN
35249: PUSH
35250: LD_VAR 0 1
35254: PPUSH
35255: LD_INT 52
35257: PPUSH
35258: CALL_OW 321
35262: PUSH
35263: LD_INT 2
35265: EQUAL
35266: AND
35267: IFFALSE 35284
// bpoints := bpoints * 1.5 ;
35269: LD_ADDR_VAR 0 10
35273: PUSH
35274: LD_VAR 0 10
35278: PUSH
35279: LD_REAL  1.50000000000000E+0000
35282: MUL
35283: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35284: LD_VAR 0 1
35288: PPUSH
35289: LD_INT 66
35291: PPUSH
35292: CALL_OW 321
35296: PUSH
35297: LD_INT 2
35299: EQUAL
35300: IFFALSE 35317
// bpoints := bpoints * 1.1 ;
35302: LD_ADDR_VAR 0 10
35306: PUSH
35307: LD_VAR 0 10
35311: PUSH
35312: LD_REAL  1.10000000000000E+0000
35315: MUL
35316: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35317: LD_ADDR_VAR 0 10
35321: PUSH
35322: LD_VAR 0 10
35326: PUSH
35327: LD_VAR 0 6
35331: PPUSH
35332: LD_INT 1
35334: PPUSH
35335: CALL_OW 259
35339: PUSH
35340: LD_REAL  1.15000000000000E+0000
35343: MUL
35344: MUL
35345: ST_TO_ADDR
// end ; unit_vehicle :
35346: GO 36170
35348: LD_INT 2
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35356
35354: GO 36158
35356: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35357: LD_VAR 0 6
35361: PPUSH
35362: CALL_OW 264
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: LD_INT 42
35372: PUSH
35373: LD_INT 24
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: LIST
35380: IN
35381: IFFALSE 35402
// points := [ 25 , 5 , 3 ] ;
35383: LD_ADDR_VAR 0 9
35387: PUSH
35388: LD_INT 25
35390: PUSH
35391: LD_INT 5
35393: PUSH
35394: LD_INT 3
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35402: LD_VAR 0 6
35406: PPUSH
35407: CALL_OW 264
35411: PUSH
35412: LD_INT 4
35414: PUSH
35415: LD_INT 43
35417: PUSH
35418: LD_INT 25
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: LIST
35425: IN
35426: IFFALSE 35447
// points := [ 40 , 15 , 5 ] ;
35428: LD_ADDR_VAR 0 9
35432: PUSH
35433: LD_INT 40
35435: PUSH
35436: LD_INT 15
35438: PUSH
35439: LD_INT 5
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35447: LD_VAR 0 6
35451: PPUSH
35452: CALL_OW 264
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: LD_INT 23
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: IN
35467: IFFALSE 35488
// points := [ 7 , 25 , 8 ] ;
35469: LD_ADDR_VAR 0 9
35473: PUSH
35474: LD_INT 7
35476: PUSH
35477: LD_INT 25
35479: PUSH
35480: LD_INT 8
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35488: LD_VAR 0 6
35492: PPUSH
35493: CALL_OW 264
35497: PUSH
35498: LD_INT 5
35500: PUSH
35501: LD_INT 27
35503: PUSH
35504: LD_INT 44
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: IN
35512: IFFALSE 35533
// points := [ 14 , 50 , 16 ] ;
35514: LD_ADDR_VAR 0 9
35518: PUSH
35519: LD_INT 14
35521: PUSH
35522: LD_INT 50
35524: PUSH
35525: LD_INT 16
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35533: LD_VAR 0 6
35537: PPUSH
35538: CALL_OW 264
35542: PUSH
35543: LD_INT 6
35545: PUSH
35546: LD_INT 46
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: IN
35553: IFFALSE 35574
// points := [ 32 , 120 , 70 ] ;
35555: LD_ADDR_VAR 0 9
35559: PUSH
35560: LD_INT 32
35562: PUSH
35563: LD_INT 120
35565: PUSH
35566: LD_INT 70
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: LIST
35573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35574: LD_VAR 0 6
35578: PPUSH
35579: CALL_OW 264
35583: PUSH
35584: LD_INT 7
35586: PUSH
35587: LD_INT 28
35589: PUSH
35590: LD_INT 45
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: IN
35598: IFFALSE 35619
// points := [ 35 , 20 , 45 ] ;
35600: LD_ADDR_VAR 0 9
35604: PUSH
35605: LD_INT 35
35607: PUSH
35608: LD_INT 20
35610: PUSH
35611: LD_INT 45
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35619: LD_VAR 0 6
35623: PPUSH
35624: CALL_OW 264
35628: PUSH
35629: LD_INT 47
35631: PUSH
35632: EMPTY
35633: LIST
35634: IN
35635: IFFALSE 35656
// points := [ 67 , 45 , 75 ] ;
35637: LD_ADDR_VAR 0 9
35641: PUSH
35642: LD_INT 67
35644: PUSH
35645: LD_INT 45
35647: PUSH
35648: LD_INT 75
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35656: LD_VAR 0 6
35660: PPUSH
35661: CALL_OW 264
35665: PUSH
35666: LD_INT 26
35668: PUSH
35669: EMPTY
35670: LIST
35671: IN
35672: IFFALSE 35693
// points := [ 120 , 30 , 80 ] ;
35674: LD_ADDR_VAR 0 9
35678: PUSH
35679: LD_INT 120
35681: PUSH
35682: LD_INT 30
35684: PUSH
35685: LD_INT 80
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: LIST
35692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35693: LD_VAR 0 6
35697: PPUSH
35698: CALL_OW 264
35702: PUSH
35703: LD_INT 22
35705: PUSH
35706: EMPTY
35707: LIST
35708: IN
35709: IFFALSE 35730
// points := [ 40 , 1 , 1 ] ;
35711: LD_ADDR_VAR 0 9
35715: PUSH
35716: LD_INT 40
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35730: LD_VAR 0 6
35734: PPUSH
35735: CALL_OW 264
35739: PUSH
35740: LD_INT 29
35742: PUSH
35743: EMPTY
35744: LIST
35745: IN
35746: IFFALSE 35767
// points := [ 70 , 200 , 400 ] ;
35748: LD_ADDR_VAR 0 9
35752: PUSH
35753: LD_INT 70
35755: PUSH
35756: LD_INT 200
35758: PUSH
35759: LD_INT 400
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35767: LD_VAR 0 6
35771: PPUSH
35772: CALL_OW 264
35776: PUSH
35777: LD_INT 14
35779: PUSH
35780: LD_INT 53
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: IN
35787: IFFALSE 35808
// points := [ 40 , 10 , 20 ] ;
35789: LD_ADDR_VAR 0 9
35793: PUSH
35794: LD_INT 40
35796: PUSH
35797: LD_INT 10
35799: PUSH
35800: LD_INT 20
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35808: LD_VAR 0 6
35812: PPUSH
35813: CALL_OW 264
35817: PUSH
35818: LD_INT 9
35820: PUSH
35821: EMPTY
35822: LIST
35823: IN
35824: IFFALSE 35845
// points := [ 5 , 70 , 20 ] ;
35826: LD_ADDR_VAR 0 9
35830: PUSH
35831: LD_INT 5
35833: PUSH
35834: LD_INT 70
35836: PUSH
35837: LD_INT 20
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35845: LD_VAR 0 6
35849: PPUSH
35850: CALL_OW 264
35854: PUSH
35855: LD_INT 10
35857: PUSH
35858: EMPTY
35859: LIST
35860: IN
35861: IFFALSE 35882
// points := [ 35 , 110 , 70 ] ;
35863: LD_ADDR_VAR 0 9
35867: PUSH
35868: LD_INT 35
35870: PUSH
35871: LD_INT 110
35873: PUSH
35874: LD_INT 70
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35882: LD_VAR 0 6
35886: PPUSH
35887: CALL_OW 265
35891: PUSH
35892: LD_INT 25
35894: EQUAL
35895: IFFALSE 35916
// points := [ 80 , 65 , 100 ] ;
35897: LD_ADDR_VAR 0 9
35901: PUSH
35902: LD_INT 80
35904: PUSH
35905: LD_INT 65
35907: PUSH
35908: LD_INT 100
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35916: LD_VAR 0 6
35920: PPUSH
35921: CALL_OW 263
35925: PUSH
35926: LD_INT 1
35928: EQUAL
35929: IFFALSE 35964
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35931: LD_ADDR_VAR 0 10
35935: PUSH
35936: LD_VAR 0 10
35940: PUSH
35941: LD_VAR 0 6
35945: PPUSH
35946: CALL_OW 311
35950: PPUSH
35951: LD_INT 3
35953: PPUSH
35954: CALL_OW 259
35958: PUSH
35959: LD_INT 4
35961: MUL
35962: MUL
35963: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35964: LD_VAR 0 6
35968: PPUSH
35969: CALL_OW 263
35973: PUSH
35974: LD_INT 2
35976: EQUAL
35977: IFFALSE 36028
// begin j := IsControledBy ( i ) ;
35979: LD_ADDR_VAR 0 7
35983: PUSH
35984: LD_VAR 0 6
35988: PPUSH
35989: CALL_OW 312
35993: ST_TO_ADDR
// if j then
35994: LD_VAR 0 7
35998: IFFALSE 36028
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36000: LD_ADDR_VAR 0 10
36004: PUSH
36005: LD_VAR 0 10
36009: PUSH
36010: LD_VAR 0 7
36014: PPUSH
36015: LD_INT 3
36017: PPUSH
36018: CALL_OW 259
36022: PUSH
36023: LD_INT 3
36025: MUL
36026: MUL
36027: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36028: LD_VAR 0 6
36032: PPUSH
36033: CALL_OW 264
36037: PUSH
36038: LD_INT 5
36040: PUSH
36041: LD_INT 6
36043: PUSH
36044: LD_INT 46
36046: PUSH
36047: LD_INT 44
36049: PUSH
36050: LD_INT 47
36052: PUSH
36053: LD_INT 45
36055: PUSH
36056: LD_INT 28
36058: PUSH
36059: LD_INT 7
36061: PUSH
36062: LD_INT 27
36064: PUSH
36065: LD_INT 29
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: IN
36080: PUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: LD_INT 52
36088: PPUSH
36089: CALL_OW 321
36093: PUSH
36094: LD_INT 2
36096: EQUAL
36097: AND
36098: IFFALSE 36115
// bpoints := bpoints * 1.2 ;
36100: LD_ADDR_VAR 0 10
36104: PUSH
36105: LD_VAR 0 10
36109: PUSH
36110: LD_REAL  1.20000000000000E+0000
36113: MUL
36114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36115: LD_VAR 0 6
36119: PPUSH
36120: CALL_OW 264
36124: PUSH
36125: LD_INT 6
36127: PUSH
36128: LD_INT 46
36130: PUSH
36131: LD_INT 47
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: IN
36139: IFFALSE 36156
// bpoints := bpoints * 1.2 ;
36141: LD_ADDR_VAR 0 10
36145: PUSH
36146: LD_VAR 0 10
36150: PUSH
36151: LD_REAL  1.20000000000000E+0000
36154: MUL
36155: ST_TO_ADDR
// end ; unit_building :
36156: GO 36170
36158: LD_INT 3
36160: DOUBLE
36161: EQUAL
36162: IFTRUE 36166
36164: GO 36169
36166: POP
// ; end ;
36167: GO 36170
36169: POP
// for j = 1 to 3 do
36170: LD_ADDR_VAR 0 7
36174: PUSH
36175: DOUBLE
36176: LD_INT 1
36178: DEC
36179: ST_TO_ADDR
36180: LD_INT 3
36182: PUSH
36183: FOR_TO
36184: IFFALSE 36237
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36186: LD_ADDR_VAR 0 5
36190: PUSH
36191: LD_VAR 0 5
36195: PPUSH
36196: LD_VAR 0 7
36200: PPUSH
36201: LD_VAR 0 5
36205: PUSH
36206: LD_VAR 0 7
36210: ARRAY
36211: PUSH
36212: LD_VAR 0 9
36216: PUSH
36217: LD_VAR 0 7
36221: ARRAY
36222: PUSH
36223: LD_VAR 0 10
36227: MUL
36228: PLUS
36229: PPUSH
36230: CALL_OW 1
36234: ST_TO_ADDR
36235: GO 36183
36237: POP
36238: POP
// end ;
36239: GO 34722
36241: POP
36242: POP
// result := Replace ( result , 4 , tmp ) ;
36243: LD_ADDR_VAR 0 5
36247: PUSH
36248: LD_VAR 0 5
36252: PPUSH
36253: LD_INT 4
36255: PPUSH
36256: LD_VAR 0 8
36260: PPUSH
36261: CALL_OW 1
36265: ST_TO_ADDR
// end ;
36266: LD_VAR 0 5
36270: RET
// export function DangerAtRange ( unit , range ) ; begin
36271: LD_INT 0
36273: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36274: LD_ADDR_VAR 0 3
36278: PUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: CALL_OW 255
36288: PPUSH
36289: LD_VAR 0 1
36293: PPUSH
36294: CALL_OW 250
36298: PPUSH
36299: LD_VAR 0 1
36303: PPUSH
36304: CALL_OW 251
36308: PPUSH
36309: LD_VAR 0 2
36313: PPUSH
36314: CALL 34574 0 4
36318: ST_TO_ADDR
// end ;
36319: LD_VAR 0 3
36323: RET
// export function DangerInArea ( side , area ) ; begin
36324: LD_INT 0
36326: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36327: LD_ADDR_VAR 0 3
36331: PUSH
36332: LD_VAR 0 2
36336: PPUSH
36337: LD_INT 81
36339: PUSH
36340: LD_VAR 0 1
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PPUSH
36349: CALL_OW 70
36353: ST_TO_ADDR
// end ;
36354: LD_VAR 0 3
36358: RET
// export function IsExtension ( b ) ; begin
36359: LD_INT 0
36361: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36362: LD_ADDR_VAR 0 2
36366: PUSH
36367: LD_VAR 0 1
36371: PUSH
36372: LD_INT 23
36374: PUSH
36375: LD_INT 20
36377: PUSH
36378: LD_INT 22
36380: PUSH
36381: LD_INT 17
36383: PUSH
36384: LD_INT 24
36386: PUSH
36387: LD_INT 21
36389: PUSH
36390: LD_INT 19
36392: PUSH
36393: LD_INT 16
36395: PUSH
36396: LD_INT 25
36398: PUSH
36399: LD_INT 18
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: IN
36414: ST_TO_ADDR
// end ;
36415: LD_VAR 0 2
36419: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36420: LD_INT 0
36422: PPUSH
36423: PPUSH
36424: PPUSH
// result := [ ] ;
36425: LD_ADDR_VAR 0 4
36429: PUSH
36430: EMPTY
36431: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36432: LD_ADDR_VAR 0 5
36436: PUSH
36437: LD_VAR 0 2
36441: PPUSH
36442: LD_INT 21
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PPUSH
36452: CALL_OW 70
36456: ST_TO_ADDR
// if not tmp then
36457: LD_VAR 0 5
36461: NOT
36462: IFFALSE 36466
// exit ;
36464: GO 36530
// if checkLink then
36466: LD_VAR 0 3
36470: IFFALSE 36520
// begin for i in tmp do
36472: LD_ADDR_VAR 0 6
36476: PUSH
36477: LD_VAR 0 5
36481: PUSH
36482: FOR_IN
36483: IFFALSE 36518
// if GetBase ( i ) <> base then
36485: LD_VAR 0 6
36489: PPUSH
36490: CALL_OW 274
36494: PUSH
36495: LD_VAR 0 1
36499: NONEQUAL
36500: IFFALSE 36516
// ComLinkToBase ( base , i ) ;
36502: LD_VAR 0 1
36506: PPUSH
36507: LD_VAR 0 6
36511: PPUSH
36512: CALL_OW 169
36516: GO 36482
36518: POP
36519: POP
// end ; result := tmp ;
36520: LD_ADDR_VAR 0 4
36524: PUSH
36525: LD_VAR 0 5
36529: ST_TO_ADDR
// end ;
36530: LD_VAR 0 4
36534: RET
// export function ComComplete ( units , b ) ; var i ; begin
36535: LD_INT 0
36537: PPUSH
36538: PPUSH
// if not units then
36539: LD_VAR 0 1
36543: NOT
36544: IFFALSE 36548
// exit ;
36546: GO 36638
// for i in units do
36548: LD_ADDR_VAR 0 4
36552: PUSH
36553: LD_VAR 0 1
36557: PUSH
36558: FOR_IN
36559: IFFALSE 36636
// if BuildingStatus ( b ) = bs_build then
36561: LD_VAR 0 2
36565: PPUSH
36566: CALL_OW 461
36570: PUSH
36571: LD_INT 1
36573: EQUAL
36574: IFFALSE 36634
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36576: LD_VAR 0 4
36580: PPUSH
36581: LD_STRING h
36583: PUSH
36584: LD_VAR 0 2
36588: PPUSH
36589: CALL_OW 250
36593: PUSH
36594: LD_VAR 0 2
36598: PPUSH
36599: CALL_OW 251
36603: PUSH
36604: LD_VAR 0 2
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: PUSH
36627: EMPTY
36628: LIST
36629: PPUSH
36630: CALL_OW 446
36634: GO 36558
36636: POP
36637: POP
// end ;
36638: LD_VAR 0 3
36642: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36643: LD_INT 0
36645: PPUSH
36646: PPUSH
36647: PPUSH
36648: PPUSH
36649: PPUSH
36650: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36651: LD_VAR 0 1
36655: NOT
36656: PUSH
36657: LD_VAR 0 1
36661: PPUSH
36662: CALL_OW 263
36666: PUSH
36667: LD_INT 2
36669: EQUAL
36670: NOT
36671: OR
36672: IFFALSE 36676
// exit ;
36674: GO 36992
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36676: LD_ADDR_VAR 0 6
36680: PUSH
36681: LD_INT 22
36683: PUSH
36684: LD_VAR 0 1
36688: PPUSH
36689: CALL_OW 255
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: LD_INT 30
36703: PUSH
36704: LD_INT 36
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 34
36713: PUSH
36714: LD_INT 31
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PPUSH
36730: CALL_OW 69
36734: ST_TO_ADDR
// if not tmp then
36735: LD_VAR 0 6
36739: NOT
36740: IFFALSE 36744
// exit ;
36742: GO 36992
// result := [ ] ;
36744: LD_ADDR_VAR 0 2
36748: PUSH
36749: EMPTY
36750: ST_TO_ADDR
// for i in tmp do
36751: LD_ADDR_VAR 0 3
36755: PUSH
36756: LD_VAR 0 6
36760: PUSH
36761: FOR_IN
36762: IFFALSE 36833
// begin t := UnitsInside ( i ) ;
36764: LD_ADDR_VAR 0 4
36768: PUSH
36769: LD_VAR 0 3
36773: PPUSH
36774: CALL_OW 313
36778: ST_TO_ADDR
// if t then
36779: LD_VAR 0 4
36783: IFFALSE 36831
// for j in t do
36785: LD_ADDR_VAR 0 7
36789: PUSH
36790: LD_VAR 0 4
36794: PUSH
36795: FOR_IN
36796: IFFALSE 36829
// result := Insert ( result , result + 1 , j ) ;
36798: LD_ADDR_VAR 0 2
36802: PUSH
36803: LD_VAR 0 2
36807: PPUSH
36808: LD_VAR 0 2
36812: PUSH
36813: LD_INT 1
36815: PLUS
36816: PPUSH
36817: LD_VAR 0 7
36821: PPUSH
36822: CALL_OW 2
36826: ST_TO_ADDR
36827: GO 36795
36829: POP
36830: POP
// end ;
36831: GO 36761
36833: POP
36834: POP
// if not result then
36835: LD_VAR 0 2
36839: NOT
36840: IFFALSE 36844
// exit ;
36842: GO 36992
// mech := result [ 1 ] ;
36844: LD_ADDR_VAR 0 5
36848: PUSH
36849: LD_VAR 0 2
36853: PUSH
36854: LD_INT 1
36856: ARRAY
36857: ST_TO_ADDR
// if result > 1 then
36858: LD_VAR 0 2
36862: PUSH
36863: LD_INT 1
36865: GREATER
36866: IFFALSE 36978
// for i = 2 to result do
36868: LD_ADDR_VAR 0 3
36872: PUSH
36873: DOUBLE
36874: LD_INT 2
36876: DEC
36877: ST_TO_ADDR
36878: LD_VAR 0 2
36882: PUSH
36883: FOR_TO
36884: IFFALSE 36976
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36886: LD_ADDR_VAR 0 4
36890: PUSH
36891: LD_VAR 0 2
36895: PUSH
36896: LD_VAR 0 3
36900: ARRAY
36901: PPUSH
36902: LD_INT 3
36904: PPUSH
36905: CALL_OW 259
36909: PUSH
36910: LD_VAR 0 2
36914: PUSH
36915: LD_VAR 0 3
36919: ARRAY
36920: PPUSH
36921: CALL_OW 432
36925: MINUS
36926: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36927: LD_VAR 0 4
36931: PUSH
36932: LD_VAR 0 5
36936: PPUSH
36937: LD_INT 3
36939: PPUSH
36940: CALL_OW 259
36944: PUSH
36945: LD_VAR 0 5
36949: PPUSH
36950: CALL_OW 432
36954: MINUS
36955: GREATEREQUAL
36956: IFFALSE 36974
// mech := result [ i ] ;
36958: LD_ADDR_VAR 0 5
36962: PUSH
36963: LD_VAR 0 2
36967: PUSH
36968: LD_VAR 0 3
36972: ARRAY
36973: ST_TO_ADDR
// end ;
36974: GO 36883
36976: POP
36977: POP
// ComLinkTo ( vehicle , mech ) ;
36978: LD_VAR 0 1
36982: PPUSH
36983: LD_VAR 0 5
36987: PPUSH
36988: CALL_OW 135
// end ;
36992: LD_VAR 0 2
36996: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36997: LD_INT 0
36999: PPUSH
37000: PPUSH
37001: PPUSH
37002: PPUSH
37003: PPUSH
37004: PPUSH
37005: PPUSH
37006: PPUSH
37007: PPUSH
37008: PPUSH
37009: PPUSH
37010: PPUSH
37011: PPUSH
// result := [ ] ;
37012: LD_ADDR_VAR 0 7
37016: PUSH
37017: EMPTY
37018: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37019: LD_VAR 0 1
37023: PPUSH
37024: CALL_OW 266
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: IN
37039: NOT
37040: IFFALSE 37044
// exit ;
37042: GO 38678
// if name then
37044: LD_VAR 0 3
37048: IFFALSE 37064
// SetBName ( base_dep , name ) ;
37050: LD_VAR 0 1
37054: PPUSH
37055: LD_VAR 0 3
37059: PPUSH
37060: CALL_OW 500
// base := GetBase ( base_dep ) ;
37064: LD_ADDR_VAR 0 15
37068: PUSH
37069: LD_VAR 0 1
37073: PPUSH
37074: CALL_OW 274
37078: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37079: LD_ADDR_VAR 0 16
37083: PUSH
37084: LD_VAR 0 1
37088: PPUSH
37089: CALL_OW 255
37093: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37094: LD_ADDR_VAR 0 17
37098: PUSH
37099: LD_VAR 0 1
37103: PPUSH
37104: CALL_OW 248
37108: ST_TO_ADDR
// if sources then
37109: LD_VAR 0 5
37113: IFFALSE 37160
// for i = 1 to 3 do
37115: LD_ADDR_VAR 0 8
37119: PUSH
37120: DOUBLE
37121: LD_INT 1
37123: DEC
37124: ST_TO_ADDR
37125: LD_INT 3
37127: PUSH
37128: FOR_TO
37129: IFFALSE 37158
// AddResourceType ( base , i , sources [ i ] ) ;
37131: LD_VAR 0 15
37135: PPUSH
37136: LD_VAR 0 8
37140: PPUSH
37141: LD_VAR 0 5
37145: PUSH
37146: LD_VAR 0 8
37150: ARRAY
37151: PPUSH
37152: CALL_OW 276
37156: GO 37128
37158: POP
37159: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37160: LD_ADDR_VAR 0 18
37164: PUSH
37165: LD_VAR 0 15
37169: PPUSH
37170: LD_VAR 0 2
37174: PPUSH
37175: LD_INT 1
37177: PPUSH
37178: CALL 36420 0 3
37182: ST_TO_ADDR
// InitHc ;
37183: CALL_OW 19
// InitUc ;
37187: CALL_OW 18
// uc_side := side ;
37191: LD_ADDR_OWVAR 20
37195: PUSH
37196: LD_VAR 0 16
37200: ST_TO_ADDR
// uc_nation := nation ;
37201: LD_ADDR_OWVAR 21
37205: PUSH
37206: LD_VAR 0 17
37210: ST_TO_ADDR
// if buildings then
37211: LD_VAR 0 18
37215: IFFALSE 38537
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37217: LD_ADDR_VAR 0 19
37221: PUSH
37222: LD_VAR 0 18
37226: PPUSH
37227: LD_INT 2
37229: PUSH
37230: LD_INT 30
37232: PUSH
37233: LD_INT 29
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 30
37242: PUSH
37243: LD_INT 30
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: PPUSH
37255: CALL_OW 72
37259: ST_TO_ADDR
// if tmp then
37260: LD_VAR 0 19
37264: IFFALSE 37312
// for i in tmp do
37266: LD_ADDR_VAR 0 8
37270: PUSH
37271: LD_VAR 0 19
37275: PUSH
37276: FOR_IN
37277: IFFALSE 37310
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37279: LD_VAR 0 8
37283: PPUSH
37284: CALL_OW 250
37288: PPUSH
37289: LD_VAR 0 8
37293: PPUSH
37294: CALL_OW 251
37298: PPUSH
37299: LD_VAR 0 16
37303: PPUSH
37304: CALL_OW 441
37308: GO 37276
37310: POP
37311: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37312: LD_VAR 0 18
37316: PPUSH
37317: LD_INT 2
37319: PUSH
37320: LD_INT 30
37322: PUSH
37323: LD_INT 32
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 30
37332: PUSH
37333: LD_INT 33
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: PPUSH
37345: CALL_OW 72
37349: IFFALSE 37437
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37351: LD_ADDR_VAR 0 8
37355: PUSH
37356: LD_VAR 0 18
37360: PPUSH
37361: LD_INT 2
37363: PUSH
37364: LD_INT 30
37366: PUSH
37367: LD_INT 32
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 30
37376: PUSH
37377: LD_INT 33
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: LIST
37388: PPUSH
37389: CALL_OW 72
37393: PUSH
37394: FOR_IN
37395: IFFALSE 37435
// begin if not GetBWeapon ( i ) then
37397: LD_VAR 0 8
37401: PPUSH
37402: CALL_OW 269
37406: NOT
37407: IFFALSE 37433
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37409: LD_VAR 0 8
37413: PPUSH
37414: LD_VAR 0 8
37418: PPUSH
37419: LD_VAR 0 2
37423: PPUSH
37424: CALL 38683 0 2
37428: PPUSH
37429: CALL_OW 431
// end ;
37433: GO 37394
37435: POP
37436: POP
// end ; for i = 1 to personel do
37437: LD_ADDR_VAR 0 8
37441: PUSH
37442: DOUBLE
37443: LD_INT 1
37445: DEC
37446: ST_TO_ADDR
37447: LD_VAR 0 6
37451: PUSH
37452: FOR_TO
37453: IFFALSE 38517
// begin if i > 4 then
37455: LD_VAR 0 8
37459: PUSH
37460: LD_INT 4
37462: GREATER
37463: IFFALSE 37467
// break ;
37465: GO 38517
// case i of 1 :
37467: LD_VAR 0 8
37471: PUSH
37472: LD_INT 1
37474: DOUBLE
37475: EQUAL
37476: IFTRUE 37480
37478: GO 37560
37480: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37481: LD_ADDR_VAR 0 12
37485: PUSH
37486: LD_VAR 0 18
37490: PPUSH
37491: LD_INT 22
37493: PUSH
37494: LD_VAR 0 16
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 58
37505: PUSH
37506: EMPTY
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 30
37514: PUSH
37515: LD_INT 32
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 30
37524: PUSH
37525: LD_INT 4
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 30
37534: PUSH
37535: LD_INT 5
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: PPUSH
37553: CALL_OW 72
37557: ST_TO_ADDR
37558: GO 37782
37560: LD_INT 2
37562: DOUBLE
37563: EQUAL
37564: IFTRUE 37568
37566: GO 37630
37568: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37569: LD_ADDR_VAR 0 12
37573: PUSH
37574: LD_VAR 0 18
37578: PPUSH
37579: LD_INT 22
37581: PUSH
37582: LD_VAR 0 16
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 30
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 30
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PPUSH
37623: CALL_OW 72
37627: ST_TO_ADDR
37628: GO 37782
37630: LD_INT 3
37632: DOUBLE
37633: EQUAL
37634: IFTRUE 37638
37636: GO 37700
37638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37639: LD_ADDR_VAR 0 12
37643: PUSH
37644: LD_VAR 0 18
37648: PPUSH
37649: LD_INT 22
37651: PUSH
37652: LD_VAR 0 16
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 2
37663: PUSH
37664: LD_INT 30
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 30
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PPUSH
37693: CALL_OW 72
37697: ST_TO_ADDR
37698: GO 37782
37700: LD_INT 4
37702: DOUBLE
37703: EQUAL
37704: IFTRUE 37708
37706: GO 37781
37708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37709: LD_ADDR_VAR 0 12
37713: PUSH
37714: LD_VAR 0 18
37718: PPUSH
37719: LD_INT 22
37721: PUSH
37722: LD_VAR 0 16
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: LD_INT 30
37736: PUSH
37737: LD_INT 6
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 30
37746: PUSH
37747: LD_INT 7
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 30
37756: PUSH
37757: LD_INT 8
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PPUSH
37774: CALL_OW 72
37778: ST_TO_ADDR
37779: GO 37782
37781: POP
// if i = 1 then
37782: LD_VAR 0 8
37786: PUSH
37787: LD_INT 1
37789: EQUAL
37790: IFFALSE 37901
// begin tmp := [ ] ;
37792: LD_ADDR_VAR 0 19
37796: PUSH
37797: EMPTY
37798: ST_TO_ADDR
// for j in f do
37799: LD_ADDR_VAR 0 9
37803: PUSH
37804: LD_VAR 0 12
37808: PUSH
37809: FOR_IN
37810: IFFALSE 37883
// if GetBType ( j ) = b_bunker then
37812: LD_VAR 0 9
37816: PPUSH
37817: CALL_OW 266
37821: PUSH
37822: LD_INT 32
37824: EQUAL
37825: IFFALSE 37852
// tmp := Insert ( tmp , 1 , j ) else
37827: LD_ADDR_VAR 0 19
37831: PUSH
37832: LD_VAR 0 19
37836: PPUSH
37837: LD_INT 1
37839: PPUSH
37840: LD_VAR 0 9
37844: PPUSH
37845: CALL_OW 2
37849: ST_TO_ADDR
37850: GO 37881
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37852: LD_ADDR_VAR 0 19
37856: PUSH
37857: LD_VAR 0 19
37861: PPUSH
37862: LD_VAR 0 19
37866: PUSH
37867: LD_INT 1
37869: PLUS
37870: PPUSH
37871: LD_VAR 0 9
37875: PPUSH
37876: CALL_OW 2
37880: ST_TO_ADDR
37881: GO 37809
37883: POP
37884: POP
// if tmp then
37885: LD_VAR 0 19
37889: IFFALSE 37901
// f := tmp ;
37891: LD_ADDR_VAR 0 12
37895: PUSH
37896: LD_VAR 0 19
37900: ST_TO_ADDR
// end ; x := personel [ i ] ;
37901: LD_ADDR_VAR 0 13
37905: PUSH
37906: LD_VAR 0 6
37910: PUSH
37911: LD_VAR 0 8
37915: ARRAY
37916: ST_TO_ADDR
// if x = - 1 then
37917: LD_VAR 0 13
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: EQUAL
37926: IFFALSE 38135
// begin for j in f do
37928: LD_ADDR_VAR 0 9
37932: PUSH
37933: LD_VAR 0 12
37937: PUSH
37938: FOR_IN
37939: IFFALSE 38131
// repeat InitHc ;
37941: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37945: LD_VAR 0 9
37949: PPUSH
37950: CALL_OW 266
37954: PUSH
37955: LD_INT 5
37957: EQUAL
37958: IFFALSE 38028
// begin if UnitsInside ( j ) < 3 then
37960: LD_VAR 0 9
37964: PPUSH
37965: CALL_OW 313
37969: PUSH
37970: LD_INT 3
37972: LESS
37973: IFFALSE 38009
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37975: LD_INT 0
37977: PPUSH
37978: LD_INT 5
37980: PUSH
37981: LD_INT 8
37983: PUSH
37984: LD_INT 9
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: PUSH
37992: LD_VAR 0 17
37996: ARRAY
37997: PPUSH
37998: LD_VAR 0 4
38002: PPUSH
38003: CALL_OW 380
38007: GO 38026
// PrepareHuman ( false , i , skill ) ;
38009: LD_INT 0
38011: PPUSH
38012: LD_VAR 0 8
38016: PPUSH
38017: LD_VAR 0 4
38021: PPUSH
38022: CALL_OW 380
// end else
38026: GO 38045
// PrepareHuman ( false , i , skill ) ;
38028: LD_INT 0
38030: PPUSH
38031: LD_VAR 0 8
38035: PPUSH
38036: LD_VAR 0 4
38040: PPUSH
38041: CALL_OW 380
// un := CreateHuman ;
38045: LD_ADDR_VAR 0 14
38049: PUSH
38050: CALL_OW 44
38054: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38055: LD_ADDR_VAR 0 7
38059: PUSH
38060: LD_VAR 0 7
38064: PPUSH
38065: LD_INT 1
38067: PPUSH
38068: LD_VAR 0 14
38072: PPUSH
38073: CALL_OW 2
38077: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38078: LD_VAR 0 14
38082: PPUSH
38083: LD_VAR 0 9
38087: PPUSH
38088: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38092: LD_VAR 0 9
38096: PPUSH
38097: CALL_OW 313
38101: PUSH
38102: LD_INT 6
38104: EQUAL
38105: PUSH
38106: LD_VAR 0 9
38110: PPUSH
38111: CALL_OW 266
38115: PUSH
38116: LD_INT 32
38118: PUSH
38119: LD_INT 31
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: IN
38126: OR
38127: IFFALSE 37941
38129: GO 37938
38131: POP
38132: POP
// end else
38133: GO 38515
// for j = 1 to x do
38135: LD_ADDR_VAR 0 9
38139: PUSH
38140: DOUBLE
38141: LD_INT 1
38143: DEC
38144: ST_TO_ADDR
38145: LD_VAR 0 13
38149: PUSH
38150: FOR_TO
38151: IFFALSE 38513
// begin InitHc ;
38153: CALL_OW 19
// if not f then
38157: LD_VAR 0 12
38161: NOT
38162: IFFALSE 38251
// begin PrepareHuman ( false , i , skill ) ;
38164: LD_INT 0
38166: PPUSH
38167: LD_VAR 0 8
38171: PPUSH
38172: LD_VAR 0 4
38176: PPUSH
38177: CALL_OW 380
// un := CreateHuman ;
38181: LD_ADDR_VAR 0 14
38185: PUSH
38186: CALL_OW 44
38190: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38191: LD_ADDR_VAR 0 7
38195: PUSH
38196: LD_VAR 0 7
38200: PPUSH
38201: LD_INT 1
38203: PPUSH
38204: LD_VAR 0 14
38208: PPUSH
38209: CALL_OW 2
38213: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38214: LD_VAR 0 14
38218: PPUSH
38219: LD_VAR 0 1
38223: PPUSH
38224: CALL_OW 250
38228: PPUSH
38229: LD_VAR 0 1
38233: PPUSH
38234: CALL_OW 251
38238: PPUSH
38239: LD_INT 10
38241: PPUSH
38242: LD_INT 0
38244: PPUSH
38245: CALL_OW 50
// continue ;
38249: GO 38150
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38251: LD_VAR 0 12
38255: PUSH
38256: LD_INT 1
38258: ARRAY
38259: PPUSH
38260: CALL_OW 313
38264: PUSH
38265: LD_VAR 0 12
38269: PUSH
38270: LD_INT 1
38272: ARRAY
38273: PPUSH
38274: CALL_OW 266
38278: PUSH
38279: LD_INT 32
38281: PUSH
38282: LD_INT 31
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: IN
38289: AND
38290: PUSH
38291: LD_VAR 0 12
38295: PUSH
38296: LD_INT 1
38298: ARRAY
38299: PPUSH
38300: CALL_OW 313
38304: PUSH
38305: LD_INT 6
38307: EQUAL
38308: OR
38309: IFFALSE 38329
// f := Delete ( f , 1 ) ;
38311: LD_ADDR_VAR 0 12
38315: PUSH
38316: LD_VAR 0 12
38320: PPUSH
38321: LD_INT 1
38323: PPUSH
38324: CALL_OW 3
38328: ST_TO_ADDR
// if not f then
38329: LD_VAR 0 12
38333: NOT
38334: IFFALSE 38352
// begin x := x + 2 ;
38336: LD_ADDR_VAR 0 13
38340: PUSH
38341: LD_VAR 0 13
38345: PUSH
38346: LD_INT 2
38348: PLUS
38349: ST_TO_ADDR
// continue ;
38350: GO 38150
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38352: LD_VAR 0 12
38356: PUSH
38357: LD_INT 1
38359: ARRAY
38360: PPUSH
38361: CALL_OW 266
38365: PUSH
38366: LD_INT 5
38368: EQUAL
38369: IFFALSE 38443
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38371: LD_VAR 0 12
38375: PUSH
38376: LD_INT 1
38378: ARRAY
38379: PPUSH
38380: CALL_OW 313
38384: PUSH
38385: LD_INT 3
38387: LESS
38388: IFFALSE 38424
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38390: LD_INT 0
38392: PPUSH
38393: LD_INT 5
38395: PUSH
38396: LD_INT 8
38398: PUSH
38399: LD_INT 9
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: PUSH
38407: LD_VAR 0 17
38411: ARRAY
38412: PPUSH
38413: LD_VAR 0 4
38417: PPUSH
38418: CALL_OW 380
38422: GO 38441
// PrepareHuman ( false , i , skill ) ;
38424: LD_INT 0
38426: PPUSH
38427: LD_VAR 0 8
38431: PPUSH
38432: LD_VAR 0 4
38436: PPUSH
38437: CALL_OW 380
// end else
38441: GO 38460
// PrepareHuman ( false , i , skill ) ;
38443: LD_INT 0
38445: PPUSH
38446: LD_VAR 0 8
38450: PPUSH
38451: LD_VAR 0 4
38455: PPUSH
38456: CALL_OW 380
// un := CreateHuman ;
38460: LD_ADDR_VAR 0 14
38464: PUSH
38465: CALL_OW 44
38469: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38470: LD_ADDR_VAR 0 7
38474: PUSH
38475: LD_VAR 0 7
38479: PPUSH
38480: LD_INT 1
38482: PPUSH
38483: LD_VAR 0 14
38487: PPUSH
38488: CALL_OW 2
38492: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38493: LD_VAR 0 14
38497: PPUSH
38498: LD_VAR 0 12
38502: PUSH
38503: LD_INT 1
38505: ARRAY
38506: PPUSH
38507: CALL_OW 52
// end ;
38511: GO 38150
38513: POP
38514: POP
// end ;
38515: GO 37452
38517: POP
38518: POP
// result := result ^ buildings ;
38519: LD_ADDR_VAR 0 7
38523: PUSH
38524: LD_VAR 0 7
38528: PUSH
38529: LD_VAR 0 18
38533: ADD
38534: ST_TO_ADDR
// end else
38535: GO 38678
// begin for i = 1 to personel do
38537: LD_ADDR_VAR 0 8
38541: PUSH
38542: DOUBLE
38543: LD_INT 1
38545: DEC
38546: ST_TO_ADDR
38547: LD_VAR 0 6
38551: PUSH
38552: FOR_TO
38553: IFFALSE 38676
// begin if i > 4 then
38555: LD_VAR 0 8
38559: PUSH
38560: LD_INT 4
38562: GREATER
38563: IFFALSE 38567
// break ;
38565: GO 38676
// x := personel [ i ] ;
38567: LD_ADDR_VAR 0 13
38571: PUSH
38572: LD_VAR 0 6
38576: PUSH
38577: LD_VAR 0 8
38581: ARRAY
38582: ST_TO_ADDR
// if x = - 1 then
38583: LD_VAR 0 13
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: EQUAL
38592: IFFALSE 38596
// continue ;
38594: GO 38552
// PrepareHuman ( false , i , skill ) ;
38596: LD_INT 0
38598: PPUSH
38599: LD_VAR 0 8
38603: PPUSH
38604: LD_VAR 0 4
38608: PPUSH
38609: CALL_OW 380
// un := CreateHuman ;
38613: LD_ADDR_VAR 0 14
38617: PUSH
38618: CALL_OW 44
38622: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38623: LD_VAR 0 14
38627: PPUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 250
38637: PPUSH
38638: LD_VAR 0 1
38642: PPUSH
38643: CALL_OW 251
38647: PPUSH
38648: LD_INT 10
38650: PPUSH
38651: LD_INT 0
38653: PPUSH
38654: CALL_OW 50
// result := result ^ un ;
38658: LD_ADDR_VAR 0 7
38662: PUSH
38663: LD_VAR 0 7
38667: PUSH
38668: LD_VAR 0 14
38672: ADD
38673: ST_TO_ADDR
// end ;
38674: GO 38552
38676: POP
38677: POP
// end ; end ;
38678: LD_VAR 0 7
38682: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38683: LD_INT 0
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
// result := false ;
38701: LD_ADDR_VAR 0 3
38705: PUSH
38706: LD_INT 0
38708: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38709: LD_VAR 0 1
38713: NOT
38714: PUSH
38715: LD_VAR 0 1
38719: PPUSH
38720: CALL_OW 266
38724: PUSH
38725: LD_INT 32
38727: PUSH
38728: LD_INT 33
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: IN
38735: NOT
38736: OR
38737: IFFALSE 38741
// exit ;
38739: GO 39880
// nat := GetNation ( tower ) ;
38741: LD_ADDR_VAR 0 12
38745: PUSH
38746: LD_VAR 0 1
38750: PPUSH
38751: CALL_OW 248
38755: ST_TO_ADDR
// side := GetSide ( tower ) ;
38756: LD_ADDR_VAR 0 16
38760: PUSH
38761: LD_VAR 0 1
38765: PPUSH
38766: CALL_OW 255
38770: ST_TO_ADDR
// x := GetX ( tower ) ;
38771: LD_ADDR_VAR 0 10
38775: PUSH
38776: LD_VAR 0 1
38780: PPUSH
38781: CALL_OW 250
38785: ST_TO_ADDR
// y := GetY ( tower ) ;
38786: LD_ADDR_VAR 0 11
38790: PUSH
38791: LD_VAR 0 1
38795: PPUSH
38796: CALL_OW 251
38800: ST_TO_ADDR
// if not x or not y then
38801: LD_VAR 0 10
38805: NOT
38806: PUSH
38807: LD_VAR 0 11
38811: NOT
38812: OR
38813: IFFALSE 38817
// exit ;
38815: GO 39880
// weapon := 0 ;
38817: LD_ADDR_VAR 0 18
38821: PUSH
38822: LD_INT 0
38824: ST_TO_ADDR
// fac_list := [ ] ;
38825: LD_ADDR_VAR 0 17
38829: PUSH
38830: EMPTY
38831: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38832: LD_ADDR_VAR 0 6
38836: PUSH
38837: LD_VAR 0 1
38841: PPUSH
38842: CALL_OW 274
38846: PPUSH
38847: LD_VAR 0 2
38851: PPUSH
38852: LD_INT 0
38854: PPUSH
38855: CALL 36420 0 3
38859: PPUSH
38860: LD_INT 30
38862: PUSH
38863: LD_INT 3
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PPUSH
38870: CALL_OW 72
38874: ST_TO_ADDR
// if not factories then
38875: LD_VAR 0 6
38879: NOT
38880: IFFALSE 38884
// exit ;
38882: GO 39880
// for i in factories do
38884: LD_ADDR_VAR 0 8
38888: PUSH
38889: LD_VAR 0 6
38893: PUSH
38894: FOR_IN
38895: IFFALSE 38920
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38897: LD_ADDR_VAR 0 17
38901: PUSH
38902: LD_VAR 0 17
38906: PUSH
38907: LD_VAR 0 8
38911: PPUSH
38912: CALL_OW 478
38916: UNION
38917: ST_TO_ADDR
38918: GO 38894
38920: POP
38921: POP
// if not fac_list then
38922: LD_VAR 0 17
38926: NOT
38927: IFFALSE 38931
// exit ;
38929: GO 39880
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38931: LD_ADDR_VAR 0 5
38935: PUSH
38936: LD_INT 4
38938: PUSH
38939: LD_INT 5
38941: PUSH
38942: LD_INT 9
38944: PUSH
38945: LD_INT 10
38947: PUSH
38948: LD_INT 6
38950: PUSH
38951: LD_INT 7
38953: PUSH
38954: LD_INT 11
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 27
38968: PUSH
38969: LD_INT 28
38971: PUSH
38972: LD_INT 26
38974: PUSH
38975: LD_INT 30
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 43
38986: PUSH
38987: LD_INT 44
38989: PUSH
38990: LD_INT 46
38992: PUSH
38993: LD_INT 45
38995: PUSH
38996: LD_INT 47
38998: PUSH
38999: LD_INT 49
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: PUSH
39015: LD_VAR 0 12
39019: ARRAY
39020: ST_TO_ADDR
// for i in list do
39021: LD_ADDR_VAR 0 8
39025: PUSH
39026: LD_VAR 0 5
39030: PUSH
39031: FOR_IN
39032: IFFALSE 39065
// if not i in fac_list then
39034: LD_VAR 0 8
39038: PUSH
39039: LD_VAR 0 17
39043: IN
39044: NOT
39045: IFFALSE 39063
// list := list diff i ;
39047: LD_ADDR_VAR 0 5
39051: PUSH
39052: LD_VAR 0 5
39056: PUSH
39057: LD_VAR 0 8
39061: DIFF
39062: ST_TO_ADDR
39063: GO 39031
39065: POP
39066: POP
// if not list then
39067: LD_VAR 0 5
39071: NOT
39072: IFFALSE 39076
// exit ;
39074: GO 39880
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39076: LD_VAR 0 12
39080: PUSH
39081: LD_INT 3
39083: EQUAL
39084: PUSH
39085: LD_INT 49
39087: PUSH
39088: LD_VAR 0 5
39092: IN
39093: AND
39094: PUSH
39095: LD_INT 31
39097: PPUSH
39098: LD_VAR 0 16
39102: PPUSH
39103: CALL_OW 321
39107: PUSH
39108: LD_INT 2
39110: EQUAL
39111: AND
39112: IFFALSE 39172
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39114: LD_INT 22
39116: PUSH
39117: LD_VAR 0 16
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 35
39128: PUSH
39129: LD_INT 49
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 91
39138: PUSH
39139: LD_VAR 0 1
39143: PUSH
39144: LD_INT 10
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: PPUSH
39157: CALL_OW 69
39161: NOT
39162: IFFALSE 39172
// weapon := ru_time_lapser ;
39164: LD_ADDR_VAR 0 18
39168: PUSH
39169: LD_INT 49
39171: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39172: LD_VAR 0 12
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: IN
39187: PUSH
39188: LD_INT 11
39190: PUSH
39191: LD_VAR 0 5
39195: IN
39196: PUSH
39197: LD_INT 30
39199: PUSH
39200: LD_VAR 0 5
39204: IN
39205: OR
39206: AND
39207: PUSH
39208: LD_INT 6
39210: PPUSH
39211: LD_VAR 0 16
39215: PPUSH
39216: CALL_OW 321
39220: PUSH
39221: LD_INT 2
39223: EQUAL
39224: AND
39225: IFFALSE 39390
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39227: LD_INT 22
39229: PUSH
39230: LD_VAR 0 16
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: LD_INT 35
39244: PUSH
39245: LD_INT 11
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 35
39254: PUSH
39255: LD_INT 30
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 91
39269: PUSH
39270: LD_VAR 0 1
39274: PUSH
39275: LD_INT 18
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: PPUSH
39288: CALL_OW 69
39292: NOT
39293: PUSH
39294: LD_INT 22
39296: PUSH
39297: LD_VAR 0 16
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 30
39311: PUSH
39312: LD_INT 32
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 30
39321: PUSH
39322: LD_INT 33
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 91
39336: PUSH
39337: LD_VAR 0 1
39341: PUSH
39342: LD_INT 12
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: PUSH
39355: EMPTY
39356: LIST
39357: PPUSH
39358: CALL_OW 69
39362: PUSH
39363: LD_INT 2
39365: GREATER
39366: AND
39367: IFFALSE 39390
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39369: LD_ADDR_VAR 0 18
39373: PUSH
39374: LD_INT 11
39376: PUSH
39377: LD_INT 30
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_VAR 0 12
39388: ARRAY
39389: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39390: LD_VAR 0 18
39394: NOT
39395: PUSH
39396: LD_INT 40
39398: PPUSH
39399: LD_VAR 0 16
39403: PPUSH
39404: CALL_OW 321
39408: PUSH
39409: LD_INT 2
39411: EQUAL
39412: AND
39413: PUSH
39414: LD_INT 7
39416: PUSH
39417: LD_VAR 0 5
39421: IN
39422: PUSH
39423: LD_INT 28
39425: PUSH
39426: LD_VAR 0 5
39430: IN
39431: OR
39432: PUSH
39433: LD_INT 45
39435: PUSH
39436: LD_VAR 0 5
39440: IN
39441: OR
39442: AND
39443: IFFALSE 39697
// begin hex := GetHexInfo ( x , y ) ;
39445: LD_ADDR_VAR 0 4
39449: PUSH
39450: LD_VAR 0 10
39454: PPUSH
39455: LD_VAR 0 11
39459: PPUSH
39460: CALL_OW 546
39464: ST_TO_ADDR
// if hex [ 1 ] then
39465: LD_VAR 0 4
39469: PUSH
39470: LD_INT 1
39472: ARRAY
39473: IFFALSE 39477
// exit ;
39475: GO 39880
// height := hex [ 2 ] ;
39477: LD_ADDR_VAR 0 15
39481: PUSH
39482: LD_VAR 0 4
39486: PUSH
39487: LD_INT 2
39489: ARRAY
39490: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39491: LD_ADDR_VAR 0 14
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: LD_INT 3
39504: PUSH
39505: LD_INT 5
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: ST_TO_ADDR
// for i in tmp do
39514: LD_ADDR_VAR 0 8
39518: PUSH
39519: LD_VAR 0 14
39523: PUSH
39524: FOR_IN
39525: IFFALSE 39695
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39527: LD_ADDR_VAR 0 9
39531: PUSH
39532: LD_VAR 0 10
39536: PPUSH
39537: LD_VAR 0 8
39541: PPUSH
39542: LD_INT 5
39544: PPUSH
39545: CALL_OW 272
39549: PUSH
39550: LD_VAR 0 11
39554: PPUSH
39555: LD_VAR 0 8
39559: PPUSH
39560: LD_INT 5
39562: PPUSH
39563: CALL_OW 273
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39572: LD_VAR 0 9
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: PPUSH
39581: LD_VAR 0 9
39585: PUSH
39586: LD_INT 2
39588: ARRAY
39589: PPUSH
39590: CALL_OW 488
39594: IFFALSE 39693
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39596: LD_ADDR_VAR 0 4
39600: PUSH
39601: LD_VAR 0 9
39605: PUSH
39606: LD_INT 1
39608: ARRAY
39609: PPUSH
39610: LD_VAR 0 9
39614: PUSH
39615: LD_INT 2
39617: ARRAY
39618: PPUSH
39619: CALL_OW 546
39623: ST_TO_ADDR
// if hex [ 1 ] then
39624: LD_VAR 0 4
39628: PUSH
39629: LD_INT 1
39631: ARRAY
39632: IFFALSE 39636
// continue ;
39634: GO 39524
// h := hex [ 2 ] ;
39636: LD_ADDR_VAR 0 13
39640: PUSH
39641: LD_VAR 0 4
39645: PUSH
39646: LD_INT 2
39648: ARRAY
39649: ST_TO_ADDR
// if h + 7 < height then
39650: LD_VAR 0 13
39654: PUSH
39655: LD_INT 7
39657: PLUS
39658: PUSH
39659: LD_VAR 0 15
39663: LESS
39664: IFFALSE 39693
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39666: LD_ADDR_VAR 0 18
39670: PUSH
39671: LD_INT 7
39673: PUSH
39674: LD_INT 28
39676: PUSH
39677: LD_INT 45
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: PUSH
39685: LD_VAR 0 12
39689: ARRAY
39690: ST_TO_ADDR
// break ;
39691: GO 39695
// end ; end ; end ;
39693: GO 39524
39695: POP
39696: POP
// end ; if not weapon then
39697: LD_VAR 0 18
39701: NOT
39702: IFFALSE 39762
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39704: LD_ADDR_VAR 0 5
39708: PUSH
39709: LD_VAR 0 5
39713: PUSH
39714: LD_INT 11
39716: PUSH
39717: LD_INT 30
39719: PUSH
39720: LD_INT 49
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: LIST
39727: DIFF
39728: ST_TO_ADDR
// if not list then
39729: LD_VAR 0 5
39733: NOT
39734: IFFALSE 39738
// exit ;
39736: GO 39880
// weapon := list [ rand ( 1 , list ) ] ;
39738: LD_ADDR_VAR 0 18
39742: PUSH
39743: LD_VAR 0 5
39747: PUSH
39748: LD_INT 1
39750: PPUSH
39751: LD_VAR 0 5
39755: PPUSH
39756: CALL_OW 12
39760: ARRAY
39761: ST_TO_ADDR
// end ; if weapon then
39762: LD_VAR 0 18
39766: IFFALSE 39880
// begin tmp := CostOfWeapon ( weapon ) ;
39768: LD_ADDR_VAR 0 14
39772: PUSH
39773: LD_VAR 0 18
39777: PPUSH
39778: CALL_OW 451
39782: ST_TO_ADDR
// j := GetBase ( tower ) ;
39783: LD_ADDR_VAR 0 9
39787: PUSH
39788: LD_VAR 0 1
39792: PPUSH
39793: CALL_OW 274
39797: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39798: LD_VAR 0 9
39802: PPUSH
39803: LD_INT 1
39805: PPUSH
39806: CALL_OW 275
39810: PUSH
39811: LD_VAR 0 14
39815: PUSH
39816: LD_INT 1
39818: ARRAY
39819: GREATEREQUAL
39820: PUSH
39821: LD_VAR 0 9
39825: PPUSH
39826: LD_INT 2
39828: PPUSH
39829: CALL_OW 275
39833: PUSH
39834: LD_VAR 0 14
39838: PUSH
39839: LD_INT 2
39841: ARRAY
39842: GREATEREQUAL
39843: AND
39844: PUSH
39845: LD_VAR 0 9
39849: PPUSH
39850: LD_INT 3
39852: PPUSH
39853: CALL_OW 275
39857: PUSH
39858: LD_VAR 0 14
39862: PUSH
39863: LD_INT 3
39865: ARRAY
39866: GREATEREQUAL
39867: AND
39868: IFFALSE 39880
// result := weapon ;
39870: LD_ADDR_VAR 0 3
39874: PUSH
39875: LD_VAR 0 18
39879: ST_TO_ADDR
// end ; end ;
39880: LD_VAR 0 3
39884: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39885: LD_INT 0
39887: PPUSH
39888: PPUSH
// result := true ;
39889: LD_ADDR_VAR 0 3
39893: PUSH
39894: LD_INT 1
39896: ST_TO_ADDR
// if array1 = array2 then
39897: LD_VAR 0 1
39901: PUSH
39902: LD_VAR 0 2
39906: EQUAL
39907: IFFALSE 39967
// begin for i = 1 to array1 do
39909: LD_ADDR_VAR 0 4
39913: PUSH
39914: DOUBLE
39915: LD_INT 1
39917: DEC
39918: ST_TO_ADDR
39919: LD_VAR 0 1
39923: PUSH
39924: FOR_TO
39925: IFFALSE 39963
// if array1 [ i ] <> array2 [ i ] then
39927: LD_VAR 0 1
39931: PUSH
39932: LD_VAR 0 4
39936: ARRAY
39937: PUSH
39938: LD_VAR 0 2
39942: PUSH
39943: LD_VAR 0 4
39947: ARRAY
39948: NONEQUAL
39949: IFFALSE 39961
// begin result := false ;
39951: LD_ADDR_VAR 0 3
39955: PUSH
39956: LD_INT 0
39958: ST_TO_ADDR
// break ;
39959: GO 39963
// end ;
39961: GO 39924
39963: POP
39964: POP
// end else
39965: GO 39975
// result := false ;
39967: LD_ADDR_VAR 0 3
39971: PUSH
39972: LD_INT 0
39974: ST_TO_ADDR
// end ;
39975: LD_VAR 0 3
39979: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39980: LD_INT 0
39982: PPUSH
39983: PPUSH
// if not array1 or not array2 then
39984: LD_VAR 0 1
39988: NOT
39989: PUSH
39990: LD_VAR 0 2
39994: NOT
39995: OR
39996: IFFALSE 40000
// exit ;
39998: GO 40064
// result := true ;
40000: LD_ADDR_VAR 0 3
40004: PUSH
40005: LD_INT 1
40007: ST_TO_ADDR
// for i = 1 to array1 do
40008: LD_ADDR_VAR 0 4
40012: PUSH
40013: DOUBLE
40014: LD_INT 1
40016: DEC
40017: ST_TO_ADDR
40018: LD_VAR 0 1
40022: PUSH
40023: FOR_TO
40024: IFFALSE 40062
// if array1 [ i ] <> array2 [ i ] then
40026: LD_VAR 0 1
40030: PUSH
40031: LD_VAR 0 4
40035: ARRAY
40036: PUSH
40037: LD_VAR 0 2
40041: PUSH
40042: LD_VAR 0 4
40046: ARRAY
40047: NONEQUAL
40048: IFFALSE 40060
// begin result := false ;
40050: LD_ADDR_VAR 0 3
40054: PUSH
40055: LD_INT 0
40057: ST_TO_ADDR
// break ;
40058: GO 40062
// end ;
40060: GO 40023
40062: POP
40063: POP
// end ;
40064: LD_VAR 0 3
40068: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40069: LD_INT 0
40071: PPUSH
40072: PPUSH
40073: PPUSH
// pom := GetBase ( fac ) ;
40074: LD_ADDR_VAR 0 5
40078: PUSH
40079: LD_VAR 0 1
40083: PPUSH
40084: CALL_OW 274
40088: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40089: LD_ADDR_VAR 0 4
40093: PUSH
40094: LD_VAR 0 2
40098: PUSH
40099: LD_INT 1
40101: ARRAY
40102: PPUSH
40103: LD_VAR 0 2
40107: PUSH
40108: LD_INT 2
40110: ARRAY
40111: PPUSH
40112: LD_VAR 0 2
40116: PUSH
40117: LD_INT 3
40119: ARRAY
40120: PPUSH
40121: LD_VAR 0 2
40125: PUSH
40126: LD_INT 4
40128: ARRAY
40129: PPUSH
40130: CALL_OW 449
40134: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40135: LD_ADDR_VAR 0 3
40139: PUSH
40140: LD_VAR 0 5
40144: PPUSH
40145: LD_INT 1
40147: PPUSH
40148: CALL_OW 275
40152: PUSH
40153: LD_VAR 0 4
40157: PUSH
40158: LD_INT 1
40160: ARRAY
40161: GREATEREQUAL
40162: PUSH
40163: LD_VAR 0 5
40167: PPUSH
40168: LD_INT 2
40170: PPUSH
40171: CALL_OW 275
40175: PUSH
40176: LD_VAR 0 4
40180: PUSH
40181: LD_INT 2
40183: ARRAY
40184: GREATEREQUAL
40185: AND
40186: PUSH
40187: LD_VAR 0 5
40191: PPUSH
40192: LD_INT 3
40194: PPUSH
40195: CALL_OW 275
40199: PUSH
40200: LD_VAR 0 4
40204: PUSH
40205: LD_INT 3
40207: ARRAY
40208: GREATEREQUAL
40209: AND
40210: ST_TO_ADDR
// end ;
40211: LD_VAR 0 3
40215: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40216: LD_INT 0
40218: PPUSH
40219: PPUSH
40220: PPUSH
40221: PPUSH
// pom := GetBase ( building ) ;
40222: LD_ADDR_VAR 0 3
40226: PUSH
40227: LD_VAR 0 1
40231: PPUSH
40232: CALL_OW 274
40236: ST_TO_ADDR
// if not pom then
40237: LD_VAR 0 3
40241: NOT
40242: IFFALSE 40246
// exit ;
40244: GO 40416
// btype := GetBType ( building ) ;
40246: LD_ADDR_VAR 0 5
40250: PUSH
40251: LD_VAR 0 1
40255: PPUSH
40256: CALL_OW 266
40260: ST_TO_ADDR
// if btype = b_armoury then
40261: LD_VAR 0 5
40265: PUSH
40266: LD_INT 4
40268: EQUAL
40269: IFFALSE 40279
// btype := b_barracks ;
40271: LD_ADDR_VAR 0 5
40275: PUSH
40276: LD_INT 5
40278: ST_TO_ADDR
// if btype = b_depot then
40279: LD_VAR 0 5
40283: PUSH
40284: LD_INT 0
40286: EQUAL
40287: IFFALSE 40297
// btype := b_warehouse ;
40289: LD_ADDR_VAR 0 5
40293: PUSH
40294: LD_INT 1
40296: ST_TO_ADDR
// if btype = b_workshop then
40297: LD_VAR 0 5
40301: PUSH
40302: LD_INT 2
40304: EQUAL
40305: IFFALSE 40315
// btype := b_factory ;
40307: LD_ADDR_VAR 0 5
40311: PUSH
40312: LD_INT 3
40314: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40315: LD_ADDR_VAR 0 4
40319: PUSH
40320: LD_VAR 0 5
40324: PPUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: CALL_OW 248
40334: PPUSH
40335: CALL_OW 450
40339: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40340: LD_ADDR_VAR 0 2
40344: PUSH
40345: LD_VAR 0 3
40349: PPUSH
40350: LD_INT 1
40352: PPUSH
40353: CALL_OW 275
40357: PUSH
40358: LD_VAR 0 4
40362: PUSH
40363: LD_INT 1
40365: ARRAY
40366: GREATEREQUAL
40367: PUSH
40368: LD_VAR 0 3
40372: PPUSH
40373: LD_INT 2
40375: PPUSH
40376: CALL_OW 275
40380: PUSH
40381: LD_VAR 0 4
40385: PUSH
40386: LD_INT 2
40388: ARRAY
40389: GREATEREQUAL
40390: AND
40391: PUSH
40392: LD_VAR 0 3
40396: PPUSH
40397: LD_INT 3
40399: PPUSH
40400: CALL_OW 275
40404: PUSH
40405: LD_VAR 0 4
40409: PUSH
40410: LD_INT 3
40412: ARRAY
40413: GREATEREQUAL
40414: AND
40415: ST_TO_ADDR
// end ;
40416: LD_VAR 0 2
40420: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40421: LD_INT 0
40423: PPUSH
40424: PPUSH
40425: PPUSH
// pom := GetBase ( building ) ;
40426: LD_ADDR_VAR 0 4
40430: PUSH
40431: LD_VAR 0 1
40435: PPUSH
40436: CALL_OW 274
40440: ST_TO_ADDR
// if not pom then
40441: LD_VAR 0 4
40445: NOT
40446: IFFALSE 40450
// exit ;
40448: GO 40551
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40450: LD_ADDR_VAR 0 5
40454: PUSH
40455: LD_VAR 0 2
40459: PPUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 248
40469: PPUSH
40470: CALL_OW 450
40474: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40475: LD_ADDR_VAR 0 3
40479: PUSH
40480: LD_VAR 0 4
40484: PPUSH
40485: LD_INT 1
40487: PPUSH
40488: CALL_OW 275
40492: PUSH
40493: LD_VAR 0 5
40497: PUSH
40498: LD_INT 1
40500: ARRAY
40501: GREATEREQUAL
40502: PUSH
40503: LD_VAR 0 4
40507: PPUSH
40508: LD_INT 2
40510: PPUSH
40511: CALL_OW 275
40515: PUSH
40516: LD_VAR 0 5
40520: PUSH
40521: LD_INT 2
40523: ARRAY
40524: GREATEREQUAL
40525: AND
40526: PUSH
40527: LD_VAR 0 4
40531: PPUSH
40532: LD_INT 3
40534: PPUSH
40535: CALL_OW 275
40539: PUSH
40540: LD_VAR 0 5
40544: PUSH
40545: LD_INT 3
40547: ARRAY
40548: GREATEREQUAL
40549: AND
40550: ST_TO_ADDR
// end ;
40551: LD_VAR 0 3
40555: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40556: LD_INT 0
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
// result := false ;
40569: LD_ADDR_VAR 0 8
40573: PUSH
40574: LD_INT 0
40576: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40577: LD_VAR 0 5
40581: NOT
40582: PUSH
40583: LD_VAR 0 1
40587: NOT
40588: OR
40589: PUSH
40590: LD_VAR 0 2
40594: NOT
40595: OR
40596: PUSH
40597: LD_VAR 0 3
40601: NOT
40602: OR
40603: IFFALSE 40607
// exit ;
40605: GO 41421
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40607: LD_ADDR_VAR 0 14
40611: PUSH
40612: LD_VAR 0 1
40616: PPUSH
40617: LD_VAR 0 2
40621: PPUSH
40622: LD_VAR 0 3
40626: PPUSH
40627: LD_VAR 0 4
40631: PPUSH
40632: LD_VAR 0 5
40636: PUSH
40637: LD_INT 1
40639: ARRAY
40640: PPUSH
40641: CALL_OW 248
40645: PPUSH
40646: LD_INT 0
40648: PPUSH
40649: CALL 42258 0 6
40653: ST_TO_ADDR
// if not hexes then
40654: LD_VAR 0 14
40658: NOT
40659: IFFALSE 40663
// exit ;
40661: GO 41421
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40663: LD_ADDR_VAR 0 17
40667: PUSH
40668: LD_VAR 0 5
40672: PPUSH
40673: LD_INT 22
40675: PUSH
40676: LD_VAR 0 13
40680: PPUSH
40681: CALL_OW 255
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: LD_INT 30
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 30
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PPUSH
40722: CALL_OW 72
40726: ST_TO_ADDR
// for i = 1 to hexes do
40727: LD_ADDR_VAR 0 9
40731: PUSH
40732: DOUBLE
40733: LD_INT 1
40735: DEC
40736: ST_TO_ADDR
40737: LD_VAR 0 14
40741: PUSH
40742: FOR_TO
40743: IFFALSE 41419
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40745: LD_ADDR_VAR 0 13
40749: PUSH
40750: LD_VAR 0 14
40754: PUSH
40755: LD_VAR 0 9
40759: ARRAY
40760: PUSH
40761: LD_INT 1
40763: ARRAY
40764: PPUSH
40765: LD_VAR 0 14
40769: PUSH
40770: LD_VAR 0 9
40774: ARRAY
40775: PUSH
40776: LD_INT 2
40778: ARRAY
40779: PPUSH
40780: CALL_OW 428
40784: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40785: LD_VAR 0 14
40789: PUSH
40790: LD_VAR 0 9
40794: ARRAY
40795: PUSH
40796: LD_INT 1
40798: ARRAY
40799: PPUSH
40800: LD_VAR 0 14
40804: PUSH
40805: LD_VAR 0 9
40809: ARRAY
40810: PUSH
40811: LD_INT 2
40813: ARRAY
40814: PPUSH
40815: CALL_OW 351
40819: PUSH
40820: LD_VAR 0 14
40824: PUSH
40825: LD_VAR 0 9
40829: ARRAY
40830: PUSH
40831: LD_INT 1
40833: ARRAY
40834: PPUSH
40835: LD_VAR 0 14
40839: PUSH
40840: LD_VAR 0 9
40844: ARRAY
40845: PUSH
40846: LD_INT 2
40848: ARRAY
40849: PPUSH
40850: CALL_OW 488
40854: NOT
40855: OR
40856: PUSH
40857: LD_VAR 0 13
40861: PPUSH
40862: CALL_OW 247
40866: PUSH
40867: LD_INT 3
40869: EQUAL
40870: OR
40871: IFFALSE 40877
// exit ;
40873: POP
40874: POP
40875: GO 41421
// if not tmp then
40877: LD_VAR 0 13
40881: NOT
40882: IFFALSE 40886
// continue ;
40884: GO 40742
// result := true ;
40886: LD_ADDR_VAR 0 8
40890: PUSH
40891: LD_INT 1
40893: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40894: LD_VAR 0 6
40898: PUSH
40899: LD_VAR 0 13
40903: PPUSH
40904: CALL_OW 247
40908: PUSH
40909: LD_INT 2
40911: EQUAL
40912: AND
40913: PUSH
40914: LD_VAR 0 13
40918: PPUSH
40919: CALL_OW 263
40923: PUSH
40924: LD_INT 1
40926: EQUAL
40927: AND
40928: IFFALSE 41092
// begin if IsDrivenBy ( tmp ) then
40930: LD_VAR 0 13
40934: PPUSH
40935: CALL_OW 311
40939: IFFALSE 40943
// continue ;
40941: GO 40742
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40943: LD_VAR 0 6
40947: PPUSH
40948: LD_INT 3
40950: PUSH
40951: LD_INT 60
40953: PUSH
40954: EMPTY
40955: LIST
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 3
40963: PUSH
40964: LD_INT 55
40966: PUSH
40967: EMPTY
40968: LIST
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PPUSH
40978: CALL_OW 72
40982: IFFALSE 41090
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40984: LD_ADDR_VAR 0 18
40988: PUSH
40989: LD_VAR 0 6
40993: PPUSH
40994: LD_INT 3
40996: PUSH
40997: LD_INT 60
40999: PUSH
41000: EMPTY
41001: LIST
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 3
41009: PUSH
41010: LD_INT 55
41012: PUSH
41013: EMPTY
41014: LIST
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PPUSH
41024: CALL_OW 72
41028: PUSH
41029: LD_INT 1
41031: ARRAY
41032: ST_TO_ADDR
// if IsInUnit ( driver ) then
41033: LD_VAR 0 18
41037: PPUSH
41038: CALL_OW 310
41042: IFFALSE 41053
// ComExit ( driver ) ;
41044: LD_VAR 0 18
41048: PPUSH
41049: CALL 65442 0 1
// AddComEnterUnit ( driver , tmp ) ;
41053: LD_VAR 0 18
41057: PPUSH
41058: LD_VAR 0 13
41062: PPUSH
41063: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41067: LD_VAR 0 18
41071: PPUSH
41072: LD_VAR 0 7
41076: PPUSH
41077: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41081: LD_VAR 0 18
41085: PPUSH
41086: CALL_OW 181
// end ; continue ;
41090: GO 40742
// end ; if not cleaners or not tmp in cleaners then
41092: LD_VAR 0 6
41096: NOT
41097: PUSH
41098: LD_VAR 0 13
41102: PUSH
41103: LD_VAR 0 6
41107: IN
41108: NOT
41109: OR
41110: IFFALSE 41417
// begin if dep then
41112: LD_VAR 0 17
41116: IFFALSE 41252
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41118: LD_ADDR_VAR 0 16
41122: PUSH
41123: LD_VAR 0 17
41127: PUSH
41128: LD_INT 1
41130: ARRAY
41131: PPUSH
41132: CALL_OW 250
41136: PPUSH
41137: LD_VAR 0 17
41141: PUSH
41142: LD_INT 1
41144: ARRAY
41145: PPUSH
41146: CALL_OW 254
41150: PPUSH
41151: LD_INT 5
41153: PPUSH
41154: CALL_OW 272
41158: PUSH
41159: LD_VAR 0 17
41163: PUSH
41164: LD_INT 1
41166: ARRAY
41167: PPUSH
41168: CALL_OW 251
41172: PPUSH
41173: LD_VAR 0 17
41177: PUSH
41178: LD_INT 1
41180: ARRAY
41181: PPUSH
41182: CALL_OW 254
41186: PPUSH
41187: LD_INT 5
41189: PPUSH
41190: CALL_OW 273
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41199: LD_VAR 0 16
41203: PUSH
41204: LD_INT 1
41206: ARRAY
41207: PPUSH
41208: LD_VAR 0 16
41212: PUSH
41213: LD_INT 2
41215: ARRAY
41216: PPUSH
41217: CALL_OW 488
41221: IFFALSE 41252
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41223: LD_VAR 0 13
41227: PPUSH
41228: LD_VAR 0 16
41232: PUSH
41233: LD_INT 1
41235: ARRAY
41236: PPUSH
41237: LD_VAR 0 16
41241: PUSH
41242: LD_INT 2
41244: ARRAY
41245: PPUSH
41246: CALL_OW 111
// continue ;
41250: GO 40742
// end ; end ; r := GetDir ( tmp ) ;
41252: LD_ADDR_VAR 0 15
41256: PUSH
41257: LD_VAR 0 13
41261: PPUSH
41262: CALL_OW 254
41266: ST_TO_ADDR
// if r = 5 then
41267: LD_VAR 0 15
41271: PUSH
41272: LD_INT 5
41274: EQUAL
41275: IFFALSE 41285
// r := 0 ;
41277: LD_ADDR_VAR 0 15
41281: PUSH
41282: LD_INT 0
41284: ST_TO_ADDR
// for j = r to 5 do
41285: LD_ADDR_VAR 0 10
41289: PUSH
41290: DOUBLE
41291: LD_VAR 0 15
41295: DEC
41296: ST_TO_ADDR
41297: LD_INT 5
41299: PUSH
41300: FOR_TO
41301: IFFALSE 41415
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41303: LD_ADDR_VAR 0 11
41307: PUSH
41308: LD_VAR 0 13
41312: PPUSH
41313: CALL_OW 250
41317: PPUSH
41318: LD_VAR 0 10
41322: PPUSH
41323: LD_INT 2
41325: PPUSH
41326: CALL_OW 272
41330: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41331: LD_ADDR_VAR 0 12
41335: PUSH
41336: LD_VAR 0 13
41340: PPUSH
41341: CALL_OW 251
41345: PPUSH
41346: LD_VAR 0 10
41350: PPUSH
41351: LD_INT 2
41353: PPUSH
41354: CALL_OW 273
41358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41359: LD_VAR 0 11
41363: PPUSH
41364: LD_VAR 0 12
41368: PPUSH
41369: CALL_OW 488
41373: PUSH
41374: LD_VAR 0 11
41378: PPUSH
41379: LD_VAR 0 12
41383: PPUSH
41384: CALL_OW 428
41388: NOT
41389: AND
41390: IFFALSE 41413
// begin ComMoveXY ( tmp , _x , _y ) ;
41392: LD_VAR 0 13
41396: PPUSH
41397: LD_VAR 0 11
41401: PPUSH
41402: LD_VAR 0 12
41406: PPUSH
41407: CALL_OW 111
// break ;
41411: GO 41415
// end ; end ;
41413: GO 41300
41415: POP
41416: POP
// end ; end ;
41417: GO 40742
41419: POP
41420: POP
// end ;
41421: LD_VAR 0 8
41425: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41426: LD_INT 0
41428: PPUSH
41429: PPUSH
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
// result := false ;
41438: LD_ADDR_VAR 0 6
41442: PUSH
41443: LD_INT 0
41445: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41446: LD_VAR 0 1
41450: NOT
41451: PUSH
41452: LD_VAR 0 1
41456: PPUSH
41457: CALL_OW 266
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: IN
41472: NOT
41473: OR
41474: PUSH
41475: LD_VAR 0 2
41479: NOT
41480: OR
41481: PUSH
41482: LD_VAR 0 5
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: LD_INT 3
41498: PUSH
41499: LD_INT 4
41501: PUSH
41502: LD_INT 5
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: IN
41513: NOT
41514: OR
41515: PUSH
41516: LD_VAR 0 3
41520: PPUSH
41521: LD_VAR 0 4
41525: PPUSH
41526: CALL_OW 488
41530: NOT
41531: OR
41532: IFFALSE 41536
// exit ;
41534: GO 42253
// pom := GetBase ( depot ) ;
41536: LD_ADDR_VAR 0 10
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 274
41550: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41551: LD_ADDR_VAR 0 11
41555: PUSH
41556: LD_VAR 0 2
41560: PPUSH
41561: LD_VAR 0 1
41565: PPUSH
41566: CALL_OW 248
41570: PPUSH
41571: CALL_OW 450
41575: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41576: LD_VAR 0 10
41580: PPUSH
41581: LD_INT 1
41583: PPUSH
41584: CALL_OW 275
41588: PUSH
41589: LD_VAR 0 11
41593: PUSH
41594: LD_INT 1
41596: ARRAY
41597: GREATEREQUAL
41598: PUSH
41599: LD_VAR 0 10
41603: PPUSH
41604: LD_INT 2
41606: PPUSH
41607: CALL_OW 275
41611: PUSH
41612: LD_VAR 0 11
41616: PUSH
41617: LD_INT 2
41619: ARRAY
41620: GREATEREQUAL
41621: AND
41622: PUSH
41623: LD_VAR 0 10
41627: PPUSH
41628: LD_INT 3
41630: PPUSH
41631: CALL_OW 275
41635: PUSH
41636: LD_VAR 0 11
41640: PUSH
41641: LD_INT 3
41643: ARRAY
41644: GREATEREQUAL
41645: AND
41646: NOT
41647: IFFALSE 41651
// exit ;
41649: GO 42253
// if GetBType ( depot ) = b_depot then
41651: LD_VAR 0 1
41655: PPUSH
41656: CALL_OW 266
41660: PUSH
41661: LD_INT 0
41663: EQUAL
41664: IFFALSE 41676
// dist := 28 else
41666: LD_ADDR_VAR 0 14
41670: PUSH
41671: LD_INT 28
41673: ST_TO_ADDR
41674: GO 41684
// dist := 36 ;
41676: LD_ADDR_VAR 0 14
41680: PUSH
41681: LD_INT 36
41683: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41684: LD_VAR 0 1
41688: PPUSH
41689: LD_VAR 0 3
41693: PPUSH
41694: LD_VAR 0 4
41698: PPUSH
41699: CALL_OW 297
41703: PUSH
41704: LD_VAR 0 14
41708: GREATER
41709: IFFALSE 41713
// exit ;
41711: GO 42253
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41713: LD_ADDR_VAR 0 12
41717: PUSH
41718: LD_VAR 0 2
41722: PPUSH
41723: LD_VAR 0 3
41727: PPUSH
41728: LD_VAR 0 4
41732: PPUSH
41733: LD_VAR 0 5
41737: PPUSH
41738: LD_VAR 0 1
41742: PPUSH
41743: CALL_OW 248
41747: PPUSH
41748: LD_INT 0
41750: PPUSH
41751: CALL 42258 0 6
41755: ST_TO_ADDR
// if not hexes then
41756: LD_VAR 0 12
41760: NOT
41761: IFFALSE 41765
// exit ;
41763: GO 42253
// hex := GetHexInfo ( x , y ) ;
41765: LD_ADDR_VAR 0 15
41769: PUSH
41770: LD_VAR 0 3
41774: PPUSH
41775: LD_VAR 0 4
41779: PPUSH
41780: CALL_OW 546
41784: ST_TO_ADDR
// if hex [ 1 ] then
41785: LD_VAR 0 15
41789: PUSH
41790: LD_INT 1
41792: ARRAY
41793: IFFALSE 41797
// exit ;
41795: GO 42253
// height := hex [ 2 ] ;
41797: LD_ADDR_VAR 0 13
41801: PUSH
41802: LD_VAR 0 15
41806: PUSH
41807: LD_INT 2
41809: ARRAY
41810: ST_TO_ADDR
// for i = 1 to hexes do
41811: LD_ADDR_VAR 0 7
41815: PUSH
41816: DOUBLE
41817: LD_INT 1
41819: DEC
41820: ST_TO_ADDR
41821: LD_VAR 0 12
41825: PUSH
41826: FOR_TO
41827: IFFALSE 42157
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41829: LD_VAR 0 12
41833: PUSH
41834: LD_VAR 0 7
41838: ARRAY
41839: PUSH
41840: LD_INT 1
41842: ARRAY
41843: PPUSH
41844: LD_VAR 0 12
41848: PUSH
41849: LD_VAR 0 7
41853: ARRAY
41854: PUSH
41855: LD_INT 2
41857: ARRAY
41858: PPUSH
41859: CALL_OW 488
41863: NOT
41864: PUSH
41865: LD_VAR 0 12
41869: PUSH
41870: LD_VAR 0 7
41874: ARRAY
41875: PUSH
41876: LD_INT 1
41878: ARRAY
41879: PPUSH
41880: LD_VAR 0 12
41884: PUSH
41885: LD_VAR 0 7
41889: ARRAY
41890: PUSH
41891: LD_INT 2
41893: ARRAY
41894: PPUSH
41895: CALL_OW 428
41899: PUSH
41900: LD_INT 0
41902: GREATER
41903: OR
41904: PUSH
41905: LD_VAR 0 12
41909: PUSH
41910: LD_VAR 0 7
41914: ARRAY
41915: PUSH
41916: LD_INT 1
41918: ARRAY
41919: PPUSH
41920: LD_VAR 0 12
41924: PUSH
41925: LD_VAR 0 7
41929: ARRAY
41930: PUSH
41931: LD_INT 2
41933: ARRAY
41934: PPUSH
41935: CALL_OW 351
41939: OR
41940: IFFALSE 41946
// exit ;
41942: POP
41943: POP
41944: GO 42253
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41946: LD_ADDR_VAR 0 8
41950: PUSH
41951: LD_VAR 0 12
41955: PUSH
41956: LD_VAR 0 7
41960: ARRAY
41961: PUSH
41962: LD_INT 1
41964: ARRAY
41965: PPUSH
41966: LD_VAR 0 12
41970: PUSH
41971: LD_VAR 0 7
41975: ARRAY
41976: PUSH
41977: LD_INT 2
41979: ARRAY
41980: PPUSH
41981: CALL_OW 546
41985: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41986: LD_VAR 0 8
41990: PUSH
41991: LD_INT 1
41993: ARRAY
41994: PUSH
41995: LD_VAR 0 8
41999: PUSH
42000: LD_INT 2
42002: ARRAY
42003: PUSH
42004: LD_VAR 0 13
42008: PUSH
42009: LD_INT 2
42011: PLUS
42012: GREATER
42013: OR
42014: PUSH
42015: LD_VAR 0 8
42019: PUSH
42020: LD_INT 2
42022: ARRAY
42023: PUSH
42024: LD_VAR 0 13
42028: PUSH
42029: LD_INT 2
42031: MINUS
42032: LESS
42033: OR
42034: PUSH
42035: LD_VAR 0 8
42039: PUSH
42040: LD_INT 3
42042: ARRAY
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 8
42049: PUSH
42050: LD_INT 9
42052: PUSH
42053: LD_INT 10
42055: PUSH
42056: LD_INT 11
42058: PUSH
42059: LD_INT 12
42061: PUSH
42062: LD_INT 13
42064: PUSH
42065: LD_INT 16
42067: PUSH
42068: LD_INT 17
42070: PUSH
42071: LD_INT 18
42073: PUSH
42074: LD_INT 19
42076: PUSH
42077: LD_INT 20
42079: PUSH
42080: LD_INT 21
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: IN
42098: NOT
42099: OR
42100: PUSH
42101: LD_VAR 0 8
42105: PUSH
42106: LD_INT 5
42108: ARRAY
42109: NOT
42110: OR
42111: PUSH
42112: LD_VAR 0 8
42116: PUSH
42117: LD_INT 6
42119: ARRAY
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: LD_INT 7
42129: PUSH
42130: LD_INT 9
42132: PUSH
42133: LD_INT 10
42135: PUSH
42136: LD_INT 11
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: IN
42147: NOT
42148: OR
42149: IFFALSE 42155
// exit ;
42151: POP
42152: POP
42153: GO 42253
// end ;
42155: GO 41826
42157: POP
42158: POP
// side := GetSide ( depot ) ;
42159: LD_ADDR_VAR 0 9
42163: PUSH
42164: LD_VAR 0 1
42168: PPUSH
42169: CALL_OW 255
42173: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42174: LD_VAR 0 9
42178: PPUSH
42179: LD_VAR 0 3
42183: PPUSH
42184: LD_VAR 0 4
42188: PPUSH
42189: LD_INT 20
42191: PPUSH
42192: CALL 34574 0 4
42196: PUSH
42197: LD_INT 4
42199: ARRAY
42200: IFFALSE 42204
// exit ;
42202: GO 42253
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42204: LD_VAR 0 2
42208: PUSH
42209: LD_INT 29
42211: PUSH
42212: LD_INT 30
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: IN
42219: PUSH
42220: LD_VAR 0 3
42224: PPUSH
42225: LD_VAR 0 4
42229: PPUSH
42230: LD_VAR 0 9
42234: PPUSH
42235: CALL_OW 440
42239: NOT
42240: AND
42241: IFFALSE 42245
// exit ;
42243: GO 42253
// result := true ;
42245: LD_ADDR_VAR 0 6
42249: PUSH
42250: LD_INT 1
42252: ST_TO_ADDR
// end ;
42253: LD_VAR 0 6
42257: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42258: LD_INT 0
42260: PPUSH
42261: PPUSH
42262: PPUSH
42263: PPUSH
42264: PPUSH
42265: PPUSH
42266: PPUSH
42267: PPUSH
42268: PPUSH
42269: PPUSH
42270: PPUSH
42271: PPUSH
42272: PPUSH
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
42277: PPUSH
42278: PPUSH
42279: PPUSH
42280: PPUSH
42281: PPUSH
42282: PPUSH
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
42291: PPUSH
42292: PPUSH
42293: PPUSH
42294: PPUSH
42295: PPUSH
42296: PPUSH
42297: PPUSH
42298: PPUSH
42299: PPUSH
42300: PPUSH
42301: PPUSH
42302: PPUSH
42303: PPUSH
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
42312: PPUSH
42313: PPUSH
42314: PPUSH
42315: PPUSH
42316: PPUSH
42317: PPUSH
// result = [ ] ;
42318: LD_ADDR_VAR 0 7
42322: PUSH
42323: EMPTY
42324: ST_TO_ADDR
// temp_list = [ ] ;
42325: LD_ADDR_VAR 0 9
42329: PUSH
42330: EMPTY
42331: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42332: LD_VAR 0 4
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: LD_INT 3
42348: PUSH
42349: LD_INT 4
42351: PUSH
42352: LD_INT 5
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: IN
42363: NOT
42364: PUSH
42365: LD_VAR 0 1
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: IN
42380: PUSH
42381: LD_VAR 0 5
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: LD_INT 3
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: IN
42400: NOT
42401: AND
42402: OR
42403: IFFALSE 42407
// exit ;
42405: GO 60798
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42407: LD_VAR 0 1
42411: PUSH
42412: LD_INT 6
42414: PUSH
42415: LD_INT 7
42417: PUSH
42418: LD_INT 8
42420: PUSH
42421: LD_INT 13
42423: PUSH
42424: LD_INT 12
42426: PUSH
42427: LD_INT 15
42429: PUSH
42430: LD_INT 11
42432: PUSH
42433: LD_INT 14
42435: PUSH
42436: LD_INT 10
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: IN
42450: IFFALSE 42460
// btype = b_lab ;
42452: LD_ADDR_VAR 0 1
42456: PUSH
42457: LD_INT 6
42459: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42460: LD_VAR 0 6
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: IN
42479: NOT
42480: PUSH
42481: LD_VAR 0 1
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: LD_INT 3
42497: PUSH
42498: LD_INT 6
42500: PUSH
42501: LD_INT 36
42503: PUSH
42504: LD_INT 4
42506: PUSH
42507: LD_INT 5
42509: PUSH
42510: LD_INT 31
42512: PUSH
42513: LD_INT 32
42515: PUSH
42516: LD_INT 33
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: IN
42532: NOT
42533: PUSH
42534: LD_VAR 0 6
42538: PUSH
42539: LD_INT 1
42541: EQUAL
42542: AND
42543: OR
42544: PUSH
42545: LD_VAR 0 1
42549: PUSH
42550: LD_INT 2
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: IN
42560: NOT
42561: PUSH
42562: LD_VAR 0 6
42566: PUSH
42567: LD_INT 2
42569: EQUAL
42570: AND
42571: OR
42572: IFFALSE 42582
// mode = 0 ;
42574: LD_ADDR_VAR 0 6
42578: PUSH
42579: LD_INT 0
42581: ST_TO_ADDR
// case mode of 0 :
42582: LD_VAR 0 6
42586: PUSH
42587: LD_INT 0
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42595
42593: GO 54048
42595: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42596: LD_ADDR_VAR 0 11
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: LD_INT 3
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42789: LD_ADDR_VAR 0 12
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: NEG
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 3
42946: NEG
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 3
42957: NEG
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42985: LD_ADDR_VAR 0 13
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 3
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 3
43144: NEG
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 3
43156: NEG
43157: PUSH
43158: LD_INT 3
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43184: LD_ADDR_VAR 0 14
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 2
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 3
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 3
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43380: LD_ADDR_VAR 0 15
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 3
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43573: LD_ADDR_VAR 0 16
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: LD_INT 2
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43766: LD_ADDR_VAR 0 17
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 2
43901: PUSH
43902: LD_INT 2
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: NEG
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43996: LD_ADDR_VAR 0 18
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44226: LD_ADDR_VAR 0 19
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: NEG
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44456: LD_ADDR_VAR 0 20
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44686: LD_ADDR_VAR 0 21
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: NEG
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44916: LD_ADDR_VAR 0 22
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: NEG
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45146: LD_ADDR_VAR 0 23
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: LD_INT 3
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 3
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45426: LD_ADDR_VAR 0 24
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 3
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 3
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45702: LD_ADDR_VAR 0 25
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 3
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 3
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45976: LD_ADDR_VAR 0 26
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46252: LD_ADDR_VAR 0 27
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: NEG
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46532: LD_ADDR_VAR 0 28
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: LD_INT 3
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 3
46767: NEG
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: NEG
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46814: LD_ADDR_VAR 0 29
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: NEG
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: LD_INT 3
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 3
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 3
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 3
47058: NEG
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47093: LD_ADDR_VAR 0 30
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 3
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: LD_INT 3
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 3
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47371: LD_ADDR_VAR 0 31
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: LD_INT 3
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47649: LD_ADDR_VAR 0 32
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 3
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 3
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 3
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47927: LD_ADDR_VAR 0 33
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 3
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 3
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 3
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 3
48171: NEG
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48206: LD_ADDR_VAR 0 34
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 3
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 3
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 3
48451: NEG
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48486: LD_ADDR_VAR 0 35
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48598: LD_ADDR_VAR 0 36
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48710: LD_ADDR_VAR 0 37
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48822: LD_ADDR_VAR 0 38
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48934: LD_ADDR_VAR 0 39
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49046: LD_ADDR_VAR 0 40
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49158: LD_ADDR_VAR 0 41
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 2
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 3
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 3
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 3
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 3
49401: PUSH
49402: LD_INT 3
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: LD_INT 3
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 3
49432: NEG
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 3
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 3
49455: NEG
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 3
49467: NEG
49468: PUSH
49469: LD_INT 3
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49508: LD_ADDR_VAR 0 42
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: LD_INT 3
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 3
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 3
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: LD_INT 3
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 3
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 3
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: NEG
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49858: LD_ADDR_VAR 0 43
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 3
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 3
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50206: LD_ADDR_VAR 0 44
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 3
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 3
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 3
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 3
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 3
50503: NEG
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: NEG
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50556: LD_ADDR_VAR 0 45
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 3
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 3
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: LD_INT 3
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: LD_INT 3
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 3
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 3
50865: NEG
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50906: LD_ADDR_VAR 0 46
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: LD_INT 3
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 3
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 3
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 3
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 3
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 3
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 3
51202: NEG
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 3
51213: NEG
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51254: LD_ADDR_VAR 0 47
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51405: LD_ADDR_VAR 0 48
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51552: LD_ADDR_VAR 0 49
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51696: LD_ADDR_VAR 0 50
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51840: LD_ADDR_VAR 0 51
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51987: LD_ADDR_VAR 0 52
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 2
52091: NEG
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52138: LD_ADDR_VAR 0 53
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 2
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52368: LD_ADDR_VAR 0 54
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52598: LD_ADDR_VAR 0 55
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52828: LD_ADDR_VAR 0 56
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53058: LD_ADDR_VAR 0 57
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53288: LD_ADDR_VAR 0 58
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53518: LD_ADDR_VAR 0 59
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53606: LD_ADDR_VAR 0 60
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53694: LD_ADDR_VAR 0 61
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53782: LD_ADDR_VAR 0 62
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53870: LD_ADDR_VAR 0 63
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53958: LD_ADDR_VAR 0 64
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// end ; 1 :
54046: GO 59943
54048: LD_INT 1
54050: DOUBLE
54051: EQUAL
54052: IFTRUE 54056
54054: GO 56679
54056: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54057: LD_ADDR_VAR 0 11
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: LD_INT 3
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 3
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: LIST
54100: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54101: LD_ADDR_VAR 0 12
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54142: LD_ADDR_VAR 0 13
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 3
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54182: LD_ADDR_VAR 0 14
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 3
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54223: LD_ADDR_VAR 0 15
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 3
54241: NEG
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: LIST
54266: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54267: LD_ADDR_VAR 0 16
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: LD_INT 3
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 3
54286: NEG
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54313: LD_ADDR_VAR 0 17
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 3
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 3
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: LIST
54356: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54357: LD_ADDR_VAR 0 18
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 3
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 3
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54398: LD_ADDR_VAR 0 19
54402: PUSH
54403: LD_INT 3
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 3
54415: PUSH
54416: LD_INT 3
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: LD_INT 3
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54438: LD_ADDR_VAR 0 20
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 3
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 3
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: LIST
54478: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54479: LD_ADDR_VAR 0 21
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 3
54497: NEG
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 3
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: LIST
54522: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54523: LD_ADDR_VAR 0 22
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: LD_INT 3
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 3
54554: NEG
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54569: LD_ADDR_VAR 0 23
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 4
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: LIST
54612: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54613: LD_ADDR_VAR 0 24
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 4
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: LIST
54653: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54654: LD_ADDR_VAR 0 25
54658: PUSH
54659: LD_INT 3
54661: PUSH
54662: LD_INT 3
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 4
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 3
54681: PUSH
54682: LD_INT 4
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: LIST
54693: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54694: LD_ADDR_VAR 0 26
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 4
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54735: LD_ADDR_VAR 0 27
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 4
54764: NEG
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54779: LD_ADDR_VAR 0 28
54783: PUSH
54784: LD_INT 3
54786: NEG
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 3
54798: NEG
54799: PUSH
54800: LD_INT 4
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 4
54810: NEG
54811: PUSH
54812: LD_INT 3
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54825: LD_ADDR_VAR 0 29
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 3
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 3
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: LD_INT 4
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 4
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 5
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: LD_INT 5
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 4
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 6
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 6
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 5
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54980: LD_ADDR_VAR 0 30
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 3
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 4
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 4
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 4
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 5
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 5
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 5
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 6
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 6
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55123: LD_ADDR_VAR 0 31
55127: PUSH
55128: LD_INT 3
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: LD_INT 3
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 3
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 4
55170: PUSH
55171: LD_INT 4
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: LD_INT 4
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 5
55190: PUSH
55191: LD_INT 4
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 5
55200: PUSH
55201: LD_INT 5
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 4
55210: PUSH
55211: LD_INT 5
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 6
55220: PUSH
55221: LD_INT 5
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 6
55230: PUSH
55231: LD_INT 6
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 5
55240: PUSH
55241: LD_INT 6
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55262: LD_ADDR_VAR 0 32
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 3
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 4
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 4
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: LD_INT 3
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: LD_INT 5
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 5
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 4
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 6
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 6
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 5
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55405: LD_ADDR_VAR 0 33
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 3
55423: NEG
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 3
55434: NEG
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 3
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 4
55457: NEG
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 4
55468: NEG
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 4
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 5
55491: NEG
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 5
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 5
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 6
55525: NEG
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 6
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55560: LD_ADDR_VAR 0 34
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: LD_INT 3
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 3
55603: NEG
55604: PUSH
55605: LD_INT 4
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 4
55615: NEG
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 4
55627: NEG
55628: PUSH
55629: LD_INT 4
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 4
55639: NEG
55640: PUSH
55641: LD_INT 5
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 5
55651: NEG
55652: PUSH
55653: LD_INT 4
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 5
55663: NEG
55664: PUSH
55665: LD_INT 5
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 5
55675: NEG
55676: PUSH
55677: LD_INT 6
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 6
55687: NEG
55688: PUSH
55689: LD_INT 5
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 6
55699: NEG
55700: PUSH
55701: LD_INT 6
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55723: LD_ADDR_VAR 0 41
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 3
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: LIST
55766: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55767: LD_ADDR_VAR 0 42
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 3
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: LIST
55807: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55808: LD_ADDR_VAR 0 43
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 3
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55848: LD_ADDR_VAR 0 44
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 2
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55889: LD_ADDR_VAR 0 45
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55933: LD_ADDR_VAR 0 46
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: LD_INT 3
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 3
55964: NEG
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: LIST
55978: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55979: LD_ADDR_VAR 0 47
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56012: LD_ADDR_VAR 0 48
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56043: LD_ADDR_VAR 0 49
56047: PUSH
56048: LD_INT 3
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56072: LD_ADDR_VAR 0 50
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56101: LD_ADDR_VAR 0 51
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56132: LD_ADDR_VAR 0 52
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 3
56151: NEG
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56165: LD_ADDR_VAR 0 53
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 3
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 3
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56209: LD_ADDR_VAR 0 54
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56250: LD_ADDR_VAR 0 55
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56290: LD_ADDR_VAR 0 56
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 3
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56331: LD_ADDR_VAR 0 57
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 3
56360: NEG
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56375: LD_ADDR_VAR 0 58
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56421: LD_ADDR_VAR 0 59
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56465: LD_ADDR_VAR 0 60
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56506: LD_ADDR_VAR 0 61
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: LIST
56545: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56546: LD_ADDR_VAR 0 62
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: LIST
56586: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56587: LD_ADDR_VAR 0 63
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56631: LD_ADDR_VAR 0 64
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: ST_TO_ADDR
// end ; 2 :
56677: GO 59943
56679: LD_INT 2
56681: DOUBLE
56682: EQUAL
56683: IFTRUE 56687
56685: GO 59942
56687: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56688: LD_ADDR_VAR 0 29
56692: PUSH
56693: LD_INT 4
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 4
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 5
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 5
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 4
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 5
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 3
56788: PUSH
56789: LD_INT 3
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 4
56808: PUSH
56809: LD_INT 3
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 4
56818: PUSH
56819: LD_INT 4
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: LD_INT 4
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: LD_INT 3
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 4
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 4
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 4
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 4
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 5
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 5
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 4
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: LD_INT 5
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 3
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 4
57027: NEG
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 4
57038: NEG
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 4
57050: NEG
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 4
57073: NEG
57074: PUSH
57075: LD_INT 4
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 4
57085: NEG
57086: PUSH
57087: LD_INT 5
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 3
57097: NEG
57098: PUSH
57099: LD_INT 4
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 4
57121: NEG
57122: PUSH
57123: LD_INT 3
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 5
57133: NEG
57134: PUSH
57135: LD_INT 4
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 5
57145: NEG
57146: PUSH
57147: LD_INT 5
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 3
57157: NEG
57158: PUSH
57159: LD_INT 5
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 5
57169: NEG
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57226: LD_ADDR_VAR 0 30
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: LD_INT 4
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 4
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 5
57253: PUSH
57254: LD_INT 4
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 5
57263: PUSH
57264: LD_INT 5
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 4
57273: PUSH
57274: LD_INT 5
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 5
57303: PUSH
57304: LD_INT 3
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: LD_INT 5
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 4
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 4
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: LD_INT 4
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 4
57416: NEG
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 4
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 4
57461: NEG
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 5
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 5
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 5
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 3
57518: NEG
57519: PUSH
57520: LD_INT 3
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: NEG
57531: PUSH
57532: LD_INT 4
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: LD_INT 3
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: NEG
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 4
57578: NEG
57579: PUSH
57580: LD_INT 3
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 4
57590: NEG
57591: PUSH
57592: LD_INT 4
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: LD_INT 4
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 4
57614: NEG
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 4
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: LD_INT 5
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: LD_INT 4
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 3
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: LD_INT 4
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 5
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: LD_INT 5
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57773: LD_ADDR_VAR 0 31
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 4
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 4
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 5
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 5
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: LD_INT 5
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 3
57873: NEG
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: NEG
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: NEG
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 4
57940: NEG
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 4
57952: NEG
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 4
57975: NEG
57976: PUSH
57977: LD_INT 4
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 4
57987: NEG
57988: PUSH
57989: LD_INT 5
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: NEG
58000: PUSH
58001: LD_INT 4
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 4
58023: NEG
58024: PUSH
58025: LD_INT 3
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 5
58035: NEG
58036: PUSH
58037: LD_INT 4
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 5
58047: NEG
58048: PUSH
58049: LD_INT 5
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: LD_INT 5
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 5
58071: NEG
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 4
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 3
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: LD_INT 4
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: LD_INT 4
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 4
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 4
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 5
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 5
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 4
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 3
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 3
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 5
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58323: LD_ADDR_VAR 0 32
58327: PUSH
58328: LD_INT 4
58330: NEG
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 4
58341: NEG
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 3
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 4
58375: NEG
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 5
58386: NEG
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 5
58397: NEG
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 5
58409: NEG
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 3
58421: NEG
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 3
58432: NEG
58433: PUSH
58434: LD_INT 3
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: NEG
58445: PUSH
58446: LD_INT 4
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 3
58480: NEG
58481: PUSH
58482: LD_INT 2
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 4
58492: NEG
58493: PUSH
58494: LD_INT 3
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 4
58504: NEG
58505: PUSH
58506: LD_INT 4
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: NEG
58517: PUSH
58518: LD_INT 4
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 4
58528: NEG
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 5
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: LD_INT 4
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 3
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: LD_INT 4
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: LD_INT 5
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: LD_INT 5
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 3
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 4
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 4
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 3
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 4
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 4
58735: PUSH
58736: LD_INT 4
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 5
58755: PUSH
58756: LD_INT 4
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 5
58765: PUSH
58766: LD_INT 5
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: LD_INT 5
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 3
58785: PUSH
58786: LD_INT 4
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 5
58805: PUSH
58806: LD_INT 3
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: LD_INT 5
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58870: LD_ADDR_VAR 0 33
58874: PUSH
58875: LD_INT 4
58877: NEG
58878: PUSH
58879: LD_INT 4
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 4
58889: NEG
58890: PUSH
58891: LD_INT 5
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: NEG
58902: PUSH
58903: LD_INT 4
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: LD_INT 3
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 4
58925: NEG
58926: PUSH
58927: LD_INT 3
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 5
58937: NEG
58938: PUSH
58939: LD_INT 4
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 5
58949: NEG
58950: PUSH
58951: LD_INT 5
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: LD_INT 5
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 5
58973: NEG
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: LD_INT 3
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 4
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: LD_INT 3
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: LD_INT 3
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: LD_INT 4
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: LD_INT 4
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 4
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 4
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 5
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 5
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 4
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 5
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: LD_INT 4
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 4
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 4
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 4
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 4
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: LD_INT 5
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 5
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 4
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: PUSH
59343: LD_INT 5
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59408: LD_ADDR_VAR 0 34
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: LD_INT 5
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 4
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 3
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 4
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 5
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 3
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: NEG
59506: PUSH
59507: LD_INT 5
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 3
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 4
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 4
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: LD_INT 2
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 4
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 4
59610: PUSH
59611: LD_INT 4
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 4
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 5
59630: PUSH
59631: LD_INT 4
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 5
59640: PUSH
59641: LD_INT 5
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 4
59650: PUSH
59651: LD_INT 5
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 3
59660: PUSH
59661: LD_INT 4
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: PUSH
59671: LD_INT 3
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 5
59680: PUSH
59681: LD_INT 3
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: LD_INT 5
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 4
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 4
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 3
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 4
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 4
59793: NEG
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 4
59804: NEG
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 3
59827: NEG
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 4
59838: NEG
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 5
59849: NEG
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 5
59860: NEG
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 5
59872: NEG
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 3
59884: NEG
59885: PUSH
59886: LD_INT 2
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: ST_TO_ADDR
// end ; end ;
59940: GO 59943
59942: POP
// case btype of b_depot , b_warehouse :
59943: LD_VAR 0 1
59947: PUSH
59948: LD_INT 0
59950: DOUBLE
59951: EQUAL
59952: IFTRUE 59962
59954: LD_INT 1
59956: DOUBLE
59957: EQUAL
59958: IFTRUE 59962
59960: GO 60163
59962: POP
// case nation of nation_american :
59963: LD_VAR 0 5
59967: PUSH
59968: LD_INT 1
59970: DOUBLE
59971: EQUAL
59972: IFTRUE 59976
59974: GO 60032
59976: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59977: LD_ADDR_VAR 0 9
59981: PUSH
59982: LD_VAR 0 11
59986: PUSH
59987: LD_VAR 0 12
59991: PUSH
59992: LD_VAR 0 13
59996: PUSH
59997: LD_VAR 0 14
60001: PUSH
60002: LD_VAR 0 15
60006: PUSH
60007: LD_VAR 0 16
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: PUSH
60020: LD_VAR 0 4
60024: PUSH
60025: LD_INT 1
60027: PLUS
60028: ARRAY
60029: ST_TO_ADDR
60030: GO 60161
60032: LD_INT 2
60034: DOUBLE
60035: EQUAL
60036: IFTRUE 60040
60038: GO 60096
60040: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60041: LD_ADDR_VAR 0 9
60045: PUSH
60046: LD_VAR 0 17
60050: PUSH
60051: LD_VAR 0 18
60055: PUSH
60056: LD_VAR 0 19
60060: PUSH
60061: LD_VAR 0 20
60065: PUSH
60066: LD_VAR 0 21
60070: PUSH
60071: LD_VAR 0 22
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: PUSH
60084: LD_VAR 0 4
60088: PUSH
60089: LD_INT 1
60091: PLUS
60092: ARRAY
60093: ST_TO_ADDR
60094: GO 60161
60096: LD_INT 3
60098: DOUBLE
60099: EQUAL
60100: IFTRUE 60104
60102: GO 60160
60104: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60105: LD_ADDR_VAR 0 9
60109: PUSH
60110: LD_VAR 0 23
60114: PUSH
60115: LD_VAR 0 24
60119: PUSH
60120: LD_VAR 0 25
60124: PUSH
60125: LD_VAR 0 26
60129: PUSH
60130: LD_VAR 0 27
60134: PUSH
60135: LD_VAR 0 28
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: PUSH
60148: LD_VAR 0 4
60152: PUSH
60153: LD_INT 1
60155: PLUS
60156: ARRAY
60157: ST_TO_ADDR
60158: GO 60161
60160: POP
60161: GO 60716
60163: LD_INT 2
60165: DOUBLE
60166: EQUAL
60167: IFTRUE 60177
60169: LD_INT 3
60171: DOUBLE
60172: EQUAL
60173: IFTRUE 60177
60175: GO 60233
60177: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60178: LD_ADDR_VAR 0 9
60182: PUSH
60183: LD_VAR 0 29
60187: PUSH
60188: LD_VAR 0 30
60192: PUSH
60193: LD_VAR 0 31
60197: PUSH
60198: LD_VAR 0 32
60202: PUSH
60203: LD_VAR 0 33
60207: PUSH
60208: LD_VAR 0 34
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: PUSH
60221: LD_VAR 0 4
60225: PUSH
60226: LD_INT 1
60228: PLUS
60229: ARRAY
60230: ST_TO_ADDR
60231: GO 60716
60233: LD_INT 16
60235: DOUBLE
60236: EQUAL
60237: IFTRUE 60295
60239: LD_INT 17
60241: DOUBLE
60242: EQUAL
60243: IFTRUE 60295
60245: LD_INT 18
60247: DOUBLE
60248: EQUAL
60249: IFTRUE 60295
60251: LD_INT 19
60253: DOUBLE
60254: EQUAL
60255: IFTRUE 60295
60257: LD_INT 22
60259: DOUBLE
60260: EQUAL
60261: IFTRUE 60295
60263: LD_INT 20
60265: DOUBLE
60266: EQUAL
60267: IFTRUE 60295
60269: LD_INT 21
60271: DOUBLE
60272: EQUAL
60273: IFTRUE 60295
60275: LD_INT 23
60277: DOUBLE
60278: EQUAL
60279: IFTRUE 60295
60281: LD_INT 24
60283: DOUBLE
60284: EQUAL
60285: IFTRUE 60295
60287: LD_INT 25
60289: DOUBLE
60290: EQUAL
60291: IFTRUE 60295
60293: GO 60351
60295: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60296: LD_ADDR_VAR 0 9
60300: PUSH
60301: LD_VAR 0 35
60305: PUSH
60306: LD_VAR 0 36
60310: PUSH
60311: LD_VAR 0 37
60315: PUSH
60316: LD_VAR 0 38
60320: PUSH
60321: LD_VAR 0 39
60325: PUSH
60326: LD_VAR 0 40
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: PUSH
60339: LD_VAR 0 4
60343: PUSH
60344: LD_INT 1
60346: PLUS
60347: ARRAY
60348: ST_TO_ADDR
60349: GO 60716
60351: LD_INT 6
60353: DOUBLE
60354: EQUAL
60355: IFTRUE 60407
60357: LD_INT 7
60359: DOUBLE
60360: EQUAL
60361: IFTRUE 60407
60363: LD_INT 8
60365: DOUBLE
60366: EQUAL
60367: IFTRUE 60407
60369: LD_INT 13
60371: DOUBLE
60372: EQUAL
60373: IFTRUE 60407
60375: LD_INT 12
60377: DOUBLE
60378: EQUAL
60379: IFTRUE 60407
60381: LD_INT 15
60383: DOUBLE
60384: EQUAL
60385: IFTRUE 60407
60387: LD_INT 11
60389: DOUBLE
60390: EQUAL
60391: IFTRUE 60407
60393: LD_INT 14
60395: DOUBLE
60396: EQUAL
60397: IFTRUE 60407
60399: LD_INT 10
60401: DOUBLE
60402: EQUAL
60403: IFTRUE 60407
60405: GO 60463
60407: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60408: LD_ADDR_VAR 0 9
60412: PUSH
60413: LD_VAR 0 41
60417: PUSH
60418: LD_VAR 0 42
60422: PUSH
60423: LD_VAR 0 43
60427: PUSH
60428: LD_VAR 0 44
60432: PUSH
60433: LD_VAR 0 45
60437: PUSH
60438: LD_VAR 0 46
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: PUSH
60451: LD_VAR 0 4
60455: PUSH
60456: LD_INT 1
60458: PLUS
60459: ARRAY
60460: ST_TO_ADDR
60461: GO 60716
60463: LD_INT 36
60465: DOUBLE
60466: EQUAL
60467: IFTRUE 60471
60469: GO 60527
60471: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60472: LD_ADDR_VAR 0 9
60476: PUSH
60477: LD_VAR 0 47
60481: PUSH
60482: LD_VAR 0 48
60486: PUSH
60487: LD_VAR 0 49
60491: PUSH
60492: LD_VAR 0 50
60496: PUSH
60497: LD_VAR 0 51
60501: PUSH
60502: LD_VAR 0 52
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: PUSH
60515: LD_VAR 0 4
60519: PUSH
60520: LD_INT 1
60522: PLUS
60523: ARRAY
60524: ST_TO_ADDR
60525: GO 60716
60527: LD_INT 4
60529: DOUBLE
60530: EQUAL
60531: IFTRUE 60553
60533: LD_INT 5
60535: DOUBLE
60536: EQUAL
60537: IFTRUE 60553
60539: LD_INT 34
60541: DOUBLE
60542: EQUAL
60543: IFTRUE 60553
60545: LD_INT 37
60547: DOUBLE
60548: EQUAL
60549: IFTRUE 60553
60551: GO 60609
60553: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60554: LD_ADDR_VAR 0 9
60558: PUSH
60559: LD_VAR 0 53
60563: PUSH
60564: LD_VAR 0 54
60568: PUSH
60569: LD_VAR 0 55
60573: PUSH
60574: LD_VAR 0 56
60578: PUSH
60579: LD_VAR 0 57
60583: PUSH
60584: LD_VAR 0 58
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: PUSH
60597: LD_VAR 0 4
60601: PUSH
60602: LD_INT 1
60604: PLUS
60605: ARRAY
60606: ST_TO_ADDR
60607: GO 60716
60609: LD_INT 31
60611: DOUBLE
60612: EQUAL
60613: IFTRUE 60659
60615: LD_INT 32
60617: DOUBLE
60618: EQUAL
60619: IFTRUE 60659
60621: LD_INT 33
60623: DOUBLE
60624: EQUAL
60625: IFTRUE 60659
60627: LD_INT 27
60629: DOUBLE
60630: EQUAL
60631: IFTRUE 60659
60633: LD_INT 26
60635: DOUBLE
60636: EQUAL
60637: IFTRUE 60659
60639: LD_INT 28
60641: DOUBLE
60642: EQUAL
60643: IFTRUE 60659
60645: LD_INT 29
60647: DOUBLE
60648: EQUAL
60649: IFTRUE 60659
60651: LD_INT 30
60653: DOUBLE
60654: EQUAL
60655: IFTRUE 60659
60657: GO 60715
60659: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60660: LD_ADDR_VAR 0 9
60664: PUSH
60665: LD_VAR 0 59
60669: PUSH
60670: LD_VAR 0 60
60674: PUSH
60675: LD_VAR 0 61
60679: PUSH
60680: LD_VAR 0 62
60684: PUSH
60685: LD_VAR 0 63
60689: PUSH
60690: LD_VAR 0 64
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: PUSH
60703: LD_VAR 0 4
60707: PUSH
60708: LD_INT 1
60710: PLUS
60711: ARRAY
60712: ST_TO_ADDR
60713: GO 60716
60715: POP
// temp_list2 = [ ] ;
60716: LD_ADDR_VAR 0 10
60720: PUSH
60721: EMPTY
60722: ST_TO_ADDR
// for i in temp_list do
60723: LD_ADDR_VAR 0 8
60727: PUSH
60728: LD_VAR 0 9
60732: PUSH
60733: FOR_IN
60734: IFFALSE 60786
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60736: LD_ADDR_VAR 0 10
60740: PUSH
60741: LD_VAR 0 10
60745: PUSH
60746: LD_VAR 0 8
60750: PUSH
60751: LD_INT 1
60753: ARRAY
60754: PUSH
60755: LD_VAR 0 2
60759: PLUS
60760: PUSH
60761: LD_VAR 0 8
60765: PUSH
60766: LD_INT 2
60768: ARRAY
60769: PUSH
60770: LD_VAR 0 3
60774: PLUS
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: EMPTY
60781: LIST
60782: ADD
60783: ST_TO_ADDR
60784: GO 60733
60786: POP
60787: POP
// result = temp_list2 ;
60788: LD_ADDR_VAR 0 7
60792: PUSH
60793: LD_VAR 0 10
60797: ST_TO_ADDR
// end ;
60798: LD_VAR 0 7
60802: RET
// export function EnemyInRange ( unit , dist ) ; begin
60803: LD_INT 0
60805: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60806: LD_ADDR_VAR 0 3
60810: PUSH
60811: LD_VAR 0 1
60815: PPUSH
60816: CALL_OW 255
60820: PPUSH
60821: LD_VAR 0 1
60825: PPUSH
60826: CALL_OW 250
60830: PPUSH
60831: LD_VAR 0 1
60835: PPUSH
60836: CALL_OW 251
60840: PPUSH
60841: LD_VAR 0 2
60845: PPUSH
60846: CALL 34574 0 4
60850: PUSH
60851: LD_INT 4
60853: ARRAY
60854: ST_TO_ADDR
// end ;
60855: LD_VAR 0 3
60859: RET
// export function PlayerSeeMe ( unit ) ; begin
60860: LD_INT 0
60862: PPUSH
// result := See ( your_side , unit ) ;
60863: LD_ADDR_VAR 0 2
60867: PUSH
60868: LD_OWVAR 2
60872: PPUSH
60873: LD_VAR 0 1
60877: PPUSH
60878: CALL_OW 292
60882: ST_TO_ADDR
// end ;
60883: LD_VAR 0 2
60887: RET
// export function ReverseDir ( unit ) ; begin
60888: LD_INT 0
60890: PPUSH
// if not unit then
60891: LD_VAR 0 1
60895: NOT
60896: IFFALSE 60900
// exit ;
60898: GO 60923
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60900: LD_ADDR_VAR 0 2
60904: PUSH
60905: LD_VAR 0 1
60909: PPUSH
60910: CALL_OW 254
60914: PUSH
60915: LD_INT 3
60917: PLUS
60918: PUSH
60919: LD_INT 6
60921: MOD
60922: ST_TO_ADDR
// end ;
60923: LD_VAR 0 2
60927: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60928: LD_INT 0
60930: PPUSH
60931: PPUSH
60932: PPUSH
60933: PPUSH
60934: PPUSH
// if not hexes then
60935: LD_VAR 0 2
60939: NOT
60940: IFFALSE 60944
// exit ;
60942: GO 61092
// dist := 9999 ;
60944: LD_ADDR_VAR 0 5
60948: PUSH
60949: LD_INT 9999
60951: ST_TO_ADDR
// for i = 1 to hexes do
60952: LD_ADDR_VAR 0 4
60956: PUSH
60957: DOUBLE
60958: LD_INT 1
60960: DEC
60961: ST_TO_ADDR
60962: LD_VAR 0 2
60966: PUSH
60967: FOR_TO
60968: IFFALSE 61080
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60970: LD_VAR 0 1
60974: PPUSH
60975: LD_VAR 0 2
60979: PUSH
60980: LD_VAR 0 4
60984: ARRAY
60985: PUSH
60986: LD_INT 1
60988: ARRAY
60989: PPUSH
60990: LD_VAR 0 2
60994: PUSH
60995: LD_VAR 0 4
60999: ARRAY
61000: PUSH
61001: LD_INT 2
61003: ARRAY
61004: PPUSH
61005: CALL_OW 297
61009: PUSH
61010: LD_VAR 0 5
61014: LESS
61015: IFFALSE 61078
// begin hex := hexes [ i ] ;
61017: LD_ADDR_VAR 0 7
61021: PUSH
61022: LD_VAR 0 2
61026: PUSH
61027: LD_VAR 0 4
61031: ARRAY
61032: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61033: LD_ADDR_VAR 0 5
61037: PUSH
61038: LD_VAR 0 1
61042: PPUSH
61043: LD_VAR 0 2
61047: PUSH
61048: LD_VAR 0 4
61052: ARRAY
61053: PUSH
61054: LD_INT 1
61056: ARRAY
61057: PPUSH
61058: LD_VAR 0 2
61062: PUSH
61063: LD_VAR 0 4
61067: ARRAY
61068: PUSH
61069: LD_INT 2
61071: ARRAY
61072: PPUSH
61073: CALL_OW 297
61077: ST_TO_ADDR
// end ; end ;
61078: GO 60967
61080: POP
61081: POP
// result := hex ;
61082: LD_ADDR_VAR 0 3
61086: PUSH
61087: LD_VAR 0 7
61091: ST_TO_ADDR
// end ;
61092: LD_VAR 0 3
61096: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61097: LD_INT 0
61099: PPUSH
61100: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61101: LD_VAR 0 1
61105: NOT
61106: PUSH
61107: LD_VAR 0 1
61111: PUSH
61112: LD_INT 21
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 23
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PPUSH
61136: CALL_OW 69
61140: IN
61141: NOT
61142: OR
61143: IFFALSE 61147
// exit ;
61145: GO 61194
// for i = 1 to 3 do
61147: LD_ADDR_VAR 0 3
61151: PUSH
61152: DOUBLE
61153: LD_INT 1
61155: DEC
61156: ST_TO_ADDR
61157: LD_INT 3
61159: PUSH
61160: FOR_TO
61161: IFFALSE 61192
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61163: LD_VAR 0 1
61167: PPUSH
61168: CALL_OW 250
61172: PPUSH
61173: LD_VAR 0 1
61177: PPUSH
61178: CALL_OW 251
61182: PPUSH
61183: LD_INT 1
61185: PPUSH
61186: CALL_OW 453
61190: GO 61160
61192: POP
61193: POP
// end ;
61194: LD_VAR 0 2
61198: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61199: LD_INT 0
61201: PPUSH
61202: PPUSH
61203: PPUSH
61204: PPUSH
61205: PPUSH
61206: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61207: LD_VAR 0 1
61211: NOT
61212: PUSH
61213: LD_VAR 0 2
61217: NOT
61218: OR
61219: PUSH
61220: LD_VAR 0 1
61224: PPUSH
61225: CALL_OW 314
61229: OR
61230: IFFALSE 61234
// exit ;
61232: GO 61675
// x := GetX ( enemy_unit ) ;
61234: LD_ADDR_VAR 0 7
61238: PUSH
61239: LD_VAR 0 2
61243: PPUSH
61244: CALL_OW 250
61248: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61249: LD_ADDR_VAR 0 8
61253: PUSH
61254: LD_VAR 0 2
61258: PPUSH
61259: CALL_OW 251
61263: ST_TO_ADDR
// if not x or not y then
61264: LD_VAR 0 7
61268: NOT
61269: PUSH
61270: LD_VAR 0 8
61274: NOT
61275: OR
61276: IFFALSE 61280
// exit ;
61278: GO 61675
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61280: LD_ADDR_VAR 0 6
61284: PUSH
61285: LD_VAR 0 7
61289: PPUSH
61290: LD_INT 0
61292: PPUSH
61293: LD_INT 4
61295: PPUSH
61296: CALL_OW 272
61300: PUSH
61301: LD_VAR 0 8
61305: PPUSH
61306: LD_INT 0
61308: PPUSH
61309: LD_INT 4
61311: PPUSH
61312: CALL_OW 273
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_VAR 0 7
61325: PPUSH
61326: LD_INT 1
61328: PPUSH
61329: LD_INT 4
61331: PPUSH
61332: CALL_OW 272
61336: PUSH
61337: LD_VAR 0 8
61341: PPUSH
61342: LD_INT 1
61344: PPUSH
61345: LD_INT 4
61347: PPUSH
61348: CALL_OW 273
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_VAR 0 7
61361: PPUSH
61362: LD_INT 2
61364: PPUSH
61365: LD_INT 4
61367: PPUSH
61368: CALL_OW 272
61372: PUSH
61373: LD_VAR 0 8
61377: PPUSH
61378: LD_INT 2
61380: PPUSH
61381: LD_INT 4
61383: PPUSH
61384: CALL_OW 273
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_VAR 0 7
61397: PPUSH
61398: LD_INT 3
61400: PPUSH
61401: LD_INT 4
61403: PPUSH
61404: CALL_OW 272
61408: PUSH
61409: LD_VAR 0 8
61413: PPUSH
61414: LD_INT 3
61416: PPUSH
61417: LD_INT 4
61419: PPUSH
61420: CALL_OW 273
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_VAR 0 7
61433: PPUSH
61434: LD_INT 4
61436: PPUSH
61437: LD_INT 4
61439: PPUSH
61440: CALL_OW 272
61444: PUSH
61445: LD_VAR 0 8
61449: PPUSH
61450: LD_INT 4
61452: PPUSH
61453: LD_INT 4
61455: PPUSH
61456: CALL_OW 273
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_VAR 0 7
61469: PPUSH
61470: LD_INT 5
61472: PPUSH
61473: LD_INT 4
61475: PPUSH
61476: CALL_OW 272
61480: PUSH
61481: LD_VAR 0 8
61485: PPUSH
61486: LD_INT 5
61488: PPUSH
61489: LD_INT 4
61491: PPUSH
61492: CALL_OW 273
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: ST_TO_ADDR
// for i = tmp downto 1 do
61509: LD_ADDR_VAR 0 4
61513: PUSH
61514: DOUBLE
61515: LD_VAR 0 6
61519: INC
61520: ST_TO_ADDR
61521: LD_INT 1
61523: PUSH
61524: FOR_DOWNTO
61525: IFFALSE 61626
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61527: LD_VAR 0 6
61531: PUSH
61532: LD_VAR 0 4
61536: ARRAY
61537: PUSH
61538: LD_INT 1
61540: ARRAY
61541: PPUSH
61542: LD_VAR 0 6
61546: PUSH
61547: LD_VAR 0 4
61551: ARRAY
61552: PUSH
61553: LD_INT 2
61555: ARRAY
61556: PPUSH
61557: CALL_OW 488
61561: NOT
61562: PUSH
61563: LD_VAR 0 6
61567: PUSH
61568: LD_VAR 0 4
61572: ARRAY
61573: PUSH
61574: LD_INT 1
61576: ARRAY
61577: PPUSH
61578: LD_VAR 0 6
61582: PUSH
61583: LD_VAR 0 4
61587: ARRAY
61588: PUSH
61589: LD_INT 2
61591: ARRAY
61592: PPUSH
61593: CALL_OW 428
61597: PUSH
61598: LD_INT 0
61600: NONEQUAL
61601: OR
61602: IFFALSE 61624
// tmp := Delete ( tmp , i ) ;
61604: LD_ADDR_VAR 0 6
61608: PUSH
61609: LD_VAR 0 6
61613: PPUSH
61614: LD_VAR 0 4
61618: PPUSH
61619: CALL_OW 3
61623: ST_TO_ADDR
61624: GO 61524
61626: POP
61627: POP
// j := GetClosestHex ( unit , tmp ) ;
61628: LD_ADDR_VAR 0 5
61632: PUSH
61633: LD_VAR 0 1
61637: PPUSH
61638: LD_VAR 0 6
61642: PPUSH
61643: CALL 60928 0 2
61647: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61648: LD_VAR 0 1
61652: PPUSH
61653: LD_VAR 0 5
61657: PUSH
61658: LD_INT 1
61660: ARRAY
61661: PPUSH
61662: LD_VAR 0 5
61666: PUSH
61667: LD_INT 2
61669: ARRAY
61670: PPUSH
61671: CALL_OW 111
// end ;
61675: LD_VAR 0 3
61679: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61680: LD_INT 0
61682: PPUSH
61683: PPUSH
61684: PPUSH
// uc_side = 0 ;
61685: LD_ADDR_OWVAR 20
61689: PUSH
61690: LD_INT 0
61692: ST_TO_ADDR
// uc_nation = 0 ;
61693: LD_ADDR_OWVAR 21
61697: PUSH
61698: LD_INT 0
61700: ST_TO_ADDR
// InitHc_All ( ) ;
61701: CALL_OW 584
// InitVc ;
61705: CALL_OW 20
// if mastodonts then
61709: LD_VAR 0 6
61713: IFFALSE 61780
// for i = 1 to mastodonts do
61715: LD_ADDR_VAR 0 11
61719: PUSH
61720: DOUBLE
61721: LD_INT 1
61723: DEC
61724: ST_TO_ADDR
61725: LD_VAR 0 6
61729: PUSH
61730: FOR_TO
61731: IFFALSE 61778
// begin vc_chassis := 31 ;
61733: LD_ADDR_OWVAR 37
61737: PUSH
61738: LD_INT 31
61740: ST_TO_ADDR
// vc_control := control_rider ;
61741: LD_ADDR_OWVAR 38
61745: PUSH
61746: LD_INT 4
61748: ST_TO_ADDR
// animal := CreateVehicle ;
61749: LD_ADDR_VAR 0 12
61753: PUSH
61754: CALL_OW 45
61758: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61759: LD_VAR 0 12
61763: PPUSH
61764: LD_VAR 0 8
61768: PPUSH
61769: LD_INT 0
61771: PPUSH
61772: CALL 63968 0 3
// end ;
61776: GO 61730
61778: POP
61779: POP
// if horses then
61780: LD_VAR 0 5
61784: IFFALSE 61851
// for i = 1 to horses do
61786: LD_ADDR_VAR 0 11
61790: PUSH
61791: DOUBLE
61792: LD_INT 1
61794: DEC
61795: ST_TO_ADDR
61796: LD_VAR 0 5
61800: PUSH
61801: FOR_TO
61802: IFFALSE 61849
// begin hc_class := 21 ;
61804: LD_ADDR_OWVAR 28
61808: PUSH
61809: LD_INT 21
61811: ST_TO_ADDR
// hc_gallery :=  ;
61812: LD_ADDR_OWVAR 33
61816: PUSH
61817: LD_STRING 
61819: ST_TO_ADDR
// animal := CreateHuman ;
61820: LD_ADDR_VAR 0 12
61824: PUSH
61825: CALL_OW 44
61829: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61830: LD_VAR 0 12
61834: PPUSH
61835: LD_VAR 0 8
61839: PPUSH
61840: LD_INT 0
61842: PPUSH
61843: CALL 63968 0 3
// end ;
61847: GO 61801
61849: POP
61850: POP
// if birds then
61851: LD_VAR 0 1
61855: IFFALSE 61922
// for i = 1 to birds do
61857: LD_ADDR_VAR 0 11
61861: PUSH
61862: DOUBLE
61863: LD_INT 1
61865: DEC
61866: ST_TO_ADDR
61867: LD_VAR 0 1
61871: PUSH
61872: FOR_TO
61873: IFFALSE 61920
// begin hc_class = 18 ;
61875: LD_ADDR_OWVAR 28
61879: PUSH
61880: LD_INT 18
61882: ST_TO_ADDR
// hc_gallery =  ;
61883: LD_ADDR_OWVAR 33
61887: PUSH
61888: LD_STRING 
61890: ST_TO_ADDR
// animal := CreateHuman ;
61891: LD_ADDR_VAR 0 12
61895: PUSH
61896: CALL_OW 44
61900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61901: LD_VAR 0 12
61905: PPUSH
61906: LD_VAR 0 8
61910: PPUSH
61911: LD_INT 0
61913: PPUSH
61914: CALL 63968 0 3
// end ;
61918: GO 61872
61920: POP
61921: POP
// if tigers then
61922: LD_VAR 0 2
61926: IFFALSE 62010
// for i = 1 to tigers do
61928: LD_ADDR_VAR 0 11
61932: PUSH
61933: DOUBLE
61934: LD_INT 1
61936: DEC
61937: ST_TO_ADDR
61938: LD_VAR 0 2
61942: PUSH
61943: FOR_TO
61944: IFFALSE 62008
// begin hc_class = class_tiger ;
61946: LD_ADDR_OWVAR 28
61950: PUSH
61951: LD_INT 14
61953: ST_TO_ADDR
// hc_gallery =  ;
61954: LD_ADDR_OWVAR 33
61958: PUSH
61959: LD_STRING 
61961: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61962: LD_ADDR_OWVAR 35
61966: PUSH
61967: LD_INT 7
61969: NEG
61970: PPUSH
61971: LD_INT 7
61973: PPUSH
61974: CALL_OW 12
61978: ST_TO_ADDR
// animal := CreateHuman ;
61979: LD_ADDR_VAR 0 12
61983: PUSH
61984: CALL_OW 44
61988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61989: LD_VAR 0 12
61993: PPUSH
61994: LD_VAR 0 8
61998: PPUSH
61999: LD_INT 0
62001: PPUSH
62002: CALL 63968 0 3
// end ;
62006: GO 61943
62008: POP
62009: POP
// if apemans then
62010: LD_VAR 0 3
62014: IFFALSE 62137
// for i = 1 to apemans do
62016: LD_ADDR_VAR 0 11
62020: PUSH
62021: DOUBLE
62022: LD_INT 1
62024: DEC
62025: ST_TO_ADDR
62026: LD_VAR 0 3
62030: PUSH
62031: FOR_TO
62032: IFFALSE 62135
// begin hc_class = class_apeman ;
62034: LD_ADDR_OWVAR 28
62038: PUSH
62039: LD_INT 12
62041: ST_TO_ADDR
// hc_gallery =  ;
62042: LD_ADDR_OWVAR 33
62046: PUSH
62047: LD_STRING 
62049: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62050: LD_ADDR_OWVAR 35
62054: PUSH
62055: LD_INT 5
62057: NEG
62058: PPUSH
62059: LD_INT 5
62061: PPUSH
62062: CALL_OW 12
62066: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62067: LD_ADDR_OWVAR 31
62071: PUSH
62072: LD_INT 1
62074: PPUSH
62075: LD_INT 3
62077: PPUSH
62078: CALL_OW 12
62082: PUSH
62083: LD_INT 1
62085: PPUSH
62086: LD_INT 3
62088: PPUSH
62089: CALL_OW 12
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: ST_TO_ADDR
// animal := CreateHuman ;
62106: LD_ADDR_VAR 0 12
62110: PUSH
62111: CALL_OW 44
62115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62116: LD_VAR 0 12
62120: PPUSH
62121: LD_VAR 0 8
62125: PPUSH
62126: LD_INT 0
62128: PPUSH
62129: CALL 63968 0 3
// end ;
62133: GO 62031
62135: POP
62136: POP
// if enchidnas then
62137: LD_VAR 0 4
62141: IFFALSE 62208
// for i = 1 to enchidnas do
62143: LD_ADDR_VAR 0 11
62147: PUSH
62148: DOUBLE
62149: LD_INT 1
62151: DEC
62152: ST_TO_ADDR
62153: LD_VAR 0 4
62157: PUSH
62158: FOR_TO
62159: IFFALSE 62206
// begin hc_class = 13 ;
62161: LD_ADDR_OWVAR 28
62165: PUSH
62166: LD_INT 13
62168: ST_TO_ADDR
// hc_gallery =  ;
62169: LD_ADDR_OWVAR 33
62173: PUSH
62174: LD_STRING 
62176: ST_TO_ADDR
// animal := CreateHuman ;
62177: LD_ADDR_VAR 0 12
62181: PUSH
62182: CALL_OW 44
62186: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62187: LD_VAR 0 12
62191: PPUSH
62192: LD_VAR 0 8
62196: PPUSH
62197: LD_INT 0
62199: PPUSH
62200: CALL 63968 0 3
// end ;
62204: GO 62158
62206: POP
62207: POP
// if fishes then
62208: LD_VAR 0 7
62212: IFFALSE 62279
// for i = 1 to fishes do
62214: LD_ADDR_VAR 0 11
62218: PUSH
62219: DOUBLE
62220: LD_INT 1
62222: DEC
62223: ST_TO_ADDR
62224: LD_VAR 0 7
62228: PUSH
62229: FOR_TO
62230: IFFALSE 62277
// begin hc_class = 20 ;
62232: LD_ADDR_OWVAR 28
62236: PUSH
62237: LD_INT 20
62239: ST_TO_ADDR
// hc_gallery =  ;
62240: LD_ADDR_OWVAR 33
62244: PUSH
62245: LD_STRING 
62247: ST_TO_ADDR
// animal := CreateHuman ;
62248: LD_ADDR_VAR 0 12
62252: PUSH
62253: CALL_OW 44
62257: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62258: LD_VAR 0 12
62262: PPUSH
62263: LD_VAR 0 9
62267: PPUSH
62268: LD_INT 0
62270: PPUSH
62271: CALL 63968 0 3
// end ;
62275: GO 62229
62277: POP
62278: POP
// end ;
62279: LD_VAR 0 10
62283: RET
// export function WantHeal ( sci , unit ) ; begin
62284: LD_INT 0
62286: PPUSH
// if GetTaskList ( sci ) > 0 then
62287: LD_VAR 0 1
62291: PPUSH
62292: CALL_OW 437
62296: PUSH
62297: LD_INT 0
62299: GREATER
62300: IFFALSE 62370
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62302: LD_VAR 0 1
62306: PPUSH
62307: CALL_OW 437
62311: PUSH
62312: LD_INT 1
62314: ARRAY
62315: PUSH
62316: LD_INT 1
62318: ARRAY
62319: PUSH
62320: LD_STRING l
62322: EQUAL
62323: PUSH
62324: LD_VAR 0 1
62328: PPUSH
62329: CALL_OW 437
62333: PUSH
62334: LD_INT 1
62336: ARRAY
62337: PUSH
62338: LD_INT 4
62340: ARRAY
62341: PUSH
62342: LD_VAR 0 2
62346: EQUAL
62347: AND
62348: IFFALSE 62360
// result := true else
62350: LD_ADDR_VAR 0 3
62354: PUSH
62355: LD_INT 1
62357: ST_TO_ADDR
62358: GO 62368
// result := false ;
62360: LD_ADDR_VAR 0 3
62364: PUSH
62365: LD_INT 0
62367: ST_TO_ADDR
// end else
62368: GO 62378
// result := false ;
62370: LD_ADDR_VAR 0 3
62374: PUSH
62375: LD_INT 0
62377: ST_TO_ADDR
// end ;
62378: LD_VAR 0 3
62382: RET
// export function HealTarget ( sci ) ; begin
62383: LD_INT 0
62385: PPUSH
// if not sci then
62386: LD_VAR 0 1
62390: NOT
62391: IFFALSE 62395
// exit ;
62393: GO 62460
// result := 0 ;
62395: LD_ADDR_VAR 0 2
62399: PUSH
62400: LD_INT 0
62402: ST_TO_ADDR
// if GetTaskList ( sci ) then
62403: LD_VAR 0 1
62407: PPUSH
62408: CALL_OW 437
62412: IFFALSE 62460
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62414: LD_VAR 0 1
62418: PPUSH
62419: CALL_OW 437
62423: PUSH
62424: LD_INT 1
62426: ARRAY
62427: PUSH
62428: LD_INT 1
62430: ARRAY
62431: PUSH
62432: LD_STRING l
62434: EQUAL
62435: IFFALSE 62460
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62437: LD_ADDR_VAR 0 2
62441: PUSH
62442: LD_VAR 0 1
62446: PPUSH
62447: CALL_OW 437
62451: PUSH
62452: LD_INT 1
62454: ARRAY
62455: PUSH
62456: LD_INT 4
62458: ARRAY
62459: ST_TO_ADDR
// end ;
62460: LD_VAR 0 2
62464: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62465: LD_INT 0
62467: PPUSH
62468: PPUSH
62469: PPUSH
62470: PPUSH
// if not base_units then
62471: LD_VAR 0 1
62475: NOT
62476: IFFALSE 62480
// exit ;
62478: GO 62567
// result := false ;
62480: LD_ADDR_VAR 0 2
62484: PUSH
62485: LD_INT 0
62487: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62488: LD_ADDR_VAR 0 5
62492: PUSH
62493: LD_VAR 0 1
62497: PPUSH
62498: LD_INT 21
62500: PUSH
62501: LD_INT 3
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PPUSH
62508: CALL_OW 72
62512: ST_TO_ADDR
// if not tmp then
62513: LD_VAR 0 5
62517: NOT
62518: IFFALSE 62522
// exit ;
62520: GO 62567
// for i in tmp do
62522: LD_ADDR_VAR 0 3
62526: PUSH
62527: LD_VAR 0 5
62531: PUSH
62532: FOR_IN
62533: IFFALSE 62565
// begin result := EnemyInRange ( i , 22 ) ;
62535: LD_ADDR_VAR 0 2
62539: PUSH
62540: LD_VAR 0 3
62544: PPUSH
62545: LD_INT 22
62547: PPUSH
62548: CALL 60803 0 2
62552: ST_TO_ADDR
// if result then
62553: LD_VAR 0 2
62557: IFFALSE 62563
// exit ;
62559: POP
62560: POP
62561: GO 62567
// end ;
62563: GO 62532
62565: POP
62566: POP
// end ;
62567: LD_VAR 0 2
62571: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62572: LD_INT 0
62574: PPUSH
62575: PPUSH
// if not units then
62576: LD_VAR 0 1
62580: NOT
62581: IFFALSE 62585
// exit ;
62583: GO 62655
// result := [ ] ;
62585: LD_ADDR_VAR 0 3
62589: PUSH
62590: EMPTY
62591: ST_TO_ADDR
// for i in units do
62592: LD_ADDR_VAR 0 4
62596: PUSH
62597: LD_VAR 0 1
62601: PUSH
62602: FOR_IN
62603: IFFALSE 62653
// if GetTag ( i ) = tag then
62605: LD_VAR 0 4
62609: PPUSH
62610: CALL_OW 110
62614: PUSH
62615: LD_VAR 0 2
62619: EQUAL
62620: IFFALSE 62651
// result := Insert ( result , result + 1 , i ) ;
62622: LD_ADDR_VAR 0 3
62626: PUSH
62627: LD_VAR 0 3
62631: PPUSH
62632: LD_VAR 0 3
62636: PUSH
62637: LD_INT 1
62639: PLUS
62640: PPUSH
62641: LD_VAR 0 4
62645: PPUSH
62646: CALL_OW 2
62650: ST_TO_ADDR
62651: GO 62602
62653: POP
62654: POP
// end ;
62655: LD_VAR 0 3
62659: RET
// export function IsDriver ( un ) ; begin
62660: LD_INT 0
62662: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62663: LD_ADDR_VAR 0 2
62667: PUSH
62668: LD_VAR 0 1
62672: PUSH
62673: LD_INT 55
62675: PUSH
62676: EMPTY
62677: LIST
62678: PPUSH
62679: CALL_OW 69
62683: IN
62684: ST_TO_ADDR
// end ;
62685: LD_VAR 0 2
62689: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62690: LD_INT 0
62692: PPUSH
62693: PPUSH
// list := [ ] ;
62694: LD_ADDR_VAR 0 5
62698: PUSH
62699: EMPTY
62700: ST_TO_ADDR
// case d of 0 :
62701: LD_VAR 0 3
62705: PUSH
62706: LD_INT 0
62708: DOUBLE
62709: EQUAL
62710: IFTRUE 62714
62712: GO 62847
62714: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62715: LD_ADDR_VAR 0 5
62719: PUSH
62720: LD_VAR 0 1
62724: PUSH
62725: LD_INT 4
62727: MINUS
62728: PUSH
62729: LD_VAR 0 2
62733: PUSH
62734: LD_INT 4
62736: MINUS
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: LIST
62745: PUSH
62746: LD_VAR 0 1
62750: PUSH
62751: LD_INT 3
62753: MINUS
62754: PUSH
62755: LD_VAR 0 2
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: LIST
62767: PUSH
62768: LD_VAR 0 1
62772: PUSH
62773: LD_INT 4
62775: PLUS
62776: PUSH
62777: LD_VAR 0 2
62781: PUSH
62782: LD_INT 4
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: PUSH
62790: LD_VAR 0 1
62794: PUSH
62795: LD_INT 3
62797: PLUS
62798: PUSH
62799: LD_VAR 0 2
62803: PUSH
62804: LD_INT 3
62806: PLUS
62807: PUSH
62808: LD_INT 5
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: LIST
62815: PUSH
62816: LD_VAR 0 1
62820: PUSH
62821: LD_VAR 0 2
62825: PUSH
62826: LD_INT 4
62828: PLUS
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: LIST
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: ST_TO_ADDR
// end ; 1 :
62845: GO 63545
62847: LD_INT 1
62849: DOUBLE
62850: EQUAL
62851: IFTRUE 62855
62853: GO 62988
62855: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62856: LD_ADDR_VAR 0 5
62860: PUSH
62861: LD_VAR 0 1
62865: PUSH
62866: LD_VAR 0 2
62870: PUSH
62871: LD_INT 4
62873: MINUS
62874: PUSH
62875: LD_INT 3
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: LIST
62882: PUSH
62883: LD_VAR 0 1
62887: PUSH
62888: LD_INT 3
62890: MINUS
62891: PUSH
62892: LD_VAR 0 2
62896: PUSH
62897: LD_INT 3
62899: MINUS
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: PUSH
62909: LD_VAR 0 1
62913: PUSH
62914: LD_INT 4
62916: MINUS
62917: PUSH
62918: LD_VAR 0 2
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: LIST
62930: PUSH
62931: LD_VAR 0 1
62935: PUSH
62936: LD_VAR 0 2
62940: PUSH
62941: LD_INT 3
62943: PLUS
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: LIST
62952: PUSH
62953: LD_VAR 0 1
62957: PUSH
62958: LD_INT 4
62960: PLUS
62961: PUSH
62962: LD_VAR 0 2
62966: PUSH
62967: LD_INT 4
62969: PLUS
62970: PUSH
62971: LD_INT 5
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: LIST
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: ST_TO_ADDR
// end ; 2 :
62986: GO 63545
62988: LD_INT 2
62990: DOUBLE
62991: EQUAL
62992: IFTRUE 62996
62994: GO 63125
62996: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62997: LD_ADDR_VAR 0 5
63001: PUSH
63002: LD_VAR 0 1
63006: PUSH
63007: LD_VAR 0 2
63011: PUSH
63012: LD_INT 3
63014: MINUS
63015: PUSH
63016: LD_INT 3
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: LIST
63023: PUSH
63024: LD_VAR 0 1
63028: PUSH
63029: LD_INT 4
63031: PLUS
63032: PUSH
63033: LD_VAR 0 2
63037: PUSH
63038: LD_INT 4
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: PUSH
63046: LD_VAR 0 1
63050: PUSH
63051: LD_VAR 0 2
63055: PUSH
63056: LD_INT 4
63058: PLUS
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: PUSH
63068: LD_VAR 0 1
63072: PUSH
63073: LD_INT 3
63075: MINUS
63076: PUSH
63077: LD_VAR 0 2
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: PUSH
63090: LD_VAR 0 1
63094: PUSH
63095: LD_INT 4
63097: MINUS
63098: PUSH
63099: LD_VAR 0 2
63103: PUSH
63104: LD_INT 4
63106: MINUS
63107: PUSH
63108: LD_INT 2
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: ST_TO_ADDR
// end ; 3 :
63123: GO 63545
63125: LD_INT 3
63127: DOUBLE
63128: EQUAL
63129: IFTRUE 63133
63131: GO 63266
63133: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63134: LD_ADDR_VAR 0 5
63138: PUSH
63139: LD_VAR 0 1
63143: PUSH
63144: LD_INT 3
63146: PLUS
63147: PUSH
63148: LD_VAR 0 2
63152: PUSH
63153: LD_INT 4
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: PUSH
63161: LD_VAR 0 1
63165: PUSH
63166: LD_INT 4
63168: PLUS
63169: PUSH
63170: LD_VAR 0 2
63174: PUSH
63175: LD_INT 4
63177: PLUS
63178: PUSH
63179: LD_INT 5
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: PUSH
63187: LD_VAR 0 1
63191: PUSH
63192: LD_INT 4
63194: MINUS
63195: PUSH
63196: LD_VAR 0 2
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: LIST
63208: PUSH
63209: LD_VAR 0 1
63213: PUSH
63214: LD_VAR 0 2
63218: PUSH
63219: LD_INT 4
63221: MINUS
63222: PUSH
63223: LD_INT 3
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: PUSH
63231: LD_VAR 0 1
63235: PUSH
63236: LD_INT 3
63238: MINUS
63239: PUSH
63240: LD_VAR 0 2
63244: PUSH
63245: LD_INT 3
63247: MINUS
63248: PUSH
63249: LD_INT 2
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: ST_TO_ADDR
// end ; 4 :
63264: GO 63545
63266: LD_INT 4
63268: DOUBLE
63269: EQUAL
63270: IFTRUE 63274
63272: GO 63407
63274: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63275: LD_ADDR_VAR 0 5
63279: PUSH
63280: LD_VAR 0 1
63284: PUSH
63285: LD_VAR 0 2
63289: PUSH
63290: LD_INT 4
63292: PLUS
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: LIST
63301: PUSH
63302: LD_VAR 0 1
63306: PUSH
63307: LD_INT 3
63309: PLUS
63310: PUSH
63311: LD_VAR 0 2
63315: PUSH
63316: LD_INT 3
63318: PLUS
63319: PUSH
63320: LD_INT 5
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: PUSH
63328: LD_VAR 0 1
63332: PUSH
63333: LD_INT 4
63335: PLUS
63336: PUSH
63337: LD_VAR 0 2
63341: PUSH
63342: LD_INT 4
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: LIST
63349: PUSH
63350: LD_VAR 0 1
63354: PUSH
63355: LD_VAR 0 2
63359: PUSH
63360: LD_INT 3
63362: MINUS
63363: PUSH
63364: LD_INT 3
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: LIST
63371: PUSH
63372: LD_VAR 0 1
63376: PUSH
63377: LD_INT 4
63379: MINUS
63380: PUSH
63381: LD_VAR 0 2
63385: PUSH
63386: LD_INT 4
63388: MINUS
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: ST_TO_ADDR
// end ; 5 :
63405: GO 63545
63407: LD_INT 5
63409: DOUBLE
63410: EQUAL
63411: IFTRUE 63415
63413: GO 63544
63415: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63416: LD_ADDR_VAR 0 5
63420: PUSH
63421: LD_VAR 0 1
63425: PUSH
63426: LD_INT 4
63428: MINUS
63429: PUSH
63430: LD_VAR 0 2
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: LIST
63442: PUSH
63443: LD_VAR 0 1
63447: PUSH
63448: LD_VAR 0 2
63452: PUSH
63453: LD_INT 4
63455: MINUS
63456: PUSH
63457: LD_INT 3
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: LIST
63464: PUSH
63465: LD_VAR 0 1
63469: PUSH
63470: LD_INT 4
63472: PLUS
63473: PUSH
63474: LD_VAR 0 2
63478: PUSH
63479: LD_INT 4
63481: PLUS
63482: PUSH
63483: LD_INT 5
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: LIST
63490: PUSH
63491: LD_VAR 0 1
63495: PUSH
63496: LD_INT 3
63498: PLUS
63499: PUSH
63500: LD_VAR 0 2
63504: PUSH
63505: LD_INT 4
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: LIST
63512: PUSH
63513: LD_VAR 0 1
63517: PUSH
63518: LD_VAR 0 2
63522: PUSH
63523: LD_INT 3
63525: PLUS
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: ST_TO_ADDR
// end ; end ;
63542: GO 63545
63544: POP
// result := list ;
63545: LD_ADDR_VAR 0 4
63549: PUSH
63550: LD_VAR 0 5
63554: ST_TO_ADDR
// end ;
63555: LD_VAR 0 4
63559: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63560: LD_INT 0
63562: PPUSH
63563: PPUSH
63564: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63565: LD_VAR 0 1
63569: NOT
63570: PUSH
63571: LD_VAR 0 2
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: LD_INT 3
63584: PUSH
63585: LD_INT 4
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: IN
63594: NOT
63595: OR
63596: IFFALSE 63600
// exit ;
63598: GO 63692
// tmp := [ ] ;
63600: LD_ADDR_VAR 0 5
63604: PUSH
63605: EMPTY
63606: ST_TO_ADDR
// for i in units do
63607: LD_ADDR_VAR 0 4
63611: PUSH
63612: LD_VAR 0 1
63616: PUSH
63617: FOR_IN
63618: IFFALSE 63661
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63620: LD_ADDR_VAR 0 5
63624: PUSH
63625: LD_VAR 0 5
63629: PPUSH
63630: LD_VAR 0 5
63634: PUSH
63635: LD_INT 1
63637: PLUS
63638: PPUSH
63639: LD_VAR 0 4
63643: PPUSH
63644: LD_VAR 0 2
63648: PPUSH
63649: CALL_OW 259
63653: PPUSH
63654: CALL_OW 2
63658: ST_TO_ADDR
63659: GO 63617
63661: POP
63662: POP
// if not tmp then
63663: LD_VAR 0 5
63667: NOT
63668: IFFALSE 63672
// exit ;
63670: GO 63692
// result := SortListByListDesc ( units , tmp ) ;
63672: LD_ADDR_VAR 0 3
63676: PUSH
63677: LD_VAR 0 1
63681: PPUSH
63682: LD_VAR 0 5
63686: PPUSH
63687: CALL_OW 77
63691: ST_TO_ADDR
// end ;
63692: LD_VAR 0 3
63696: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63697: LD_INT 0
63699: PPUSH
63700: PPUSH
63701: PPUSH
// result := false ;
63702: LD_ADDR_VAR 0 3
63706: PUSH
63707: LD_INT 0
63709: ST_TO_ADDR
// x := GetX ( building ) ;
63710: LD_ADDR_VAR 0 4
63714: PUSH
63715: LD_VAR 0 2
63719: PPUSH
63720: CALL_OW 250
63724: ST_TO_ADDR
// y := GetY ( building ) ;
63725: LD_ADDR_VAR 0 5
63729: PUSH
63730: LD_VAR 0 2
63734: PPUSH
63735: CALL_OW 251
63739: ST_TO_ADDR
// if not building or not x or not y then
63740: LD_VAR 0 2
63744: NOT
63745: PUSH
63746: LD_VAR 0 4
63750: NOT
63751: OR
63752: PUSH
63753: LD_VAR 0 5
63757: NOT
63758: OR
63759: IFFALSE 63763
// exit ;
63761: GO 63855
// if GetTaskList ( unit ) then
63763: LD_VAR 0 1
63767: PPUSH
63768: CALL_OW 437
63772: IFFALSE 63855
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63774: LD_STRING e
63776: PUSH
63777: LD_VAR 0 1
63781: PPUSH
63782: CALL_OW 437
63786: PUSH
63787: LD_INT 1
63789: ARRAY
63790: PUSH
63791: LD_INT 1
63793: ARRAY
63794: EQUAL
63795: PUSH
63796: LD_VAR 0 4
63800: PUSH
63801: LD_VAR 0 1
63805: PPUSH
63806: CALL_OW 437
63810: PUSH
63811: LD_INT 1
63813: ARRAY
63814: PUSH
63815: LD_INT 2
63817: ARRAY
63818: EQUAL
63819: AND
63820: PUSH
63821: LD_VAR 0 5
63825: PUSH
63826: LD_VAR 0 1
63830: PPUSH
63831: CALL_OW 437
63835: PUSH
63836: LD_INT 1
63838: ARRAY
63839: PUSH
63840: LD_INT 3
63842: ARRAY
63843: EQUAL
63844: AND
63845: IFFALSE 63855
// result := true end ;
63847: LD_ADDR_VAR 0 3
63851: PUSH
63852: LD_INT 1
63854: ST_TO_ADDR
// end ;
63855: LD_VAR 0 3
63859: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63860: LD_INT 0
63862: PPUSH
// result := false ;
63863: LD_ADDR_VAR 0 4
63867: PUSH
63868: LD_INT 0
63870: ST_TO_ADDR
// if GetTaskList ( unit ) then
63871: LD_VAR 0 1
63875: PPUSH
63876: CALL_OW 437
63880: IFFALSE 63963
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63882: LD_STRING M
63884: PUSH
63885: LD_VAR 0 1
63889: PPUSH
63890: CALL_OW 437
63894: PUSH
63895: LD_INT 1
63897: ARRAY
63898: PUSH
63899: LD_INT 1
63901: ARRAY
63902: EQUAL
63903: PUSH
63904: LD_VAR 0 2
63908: PUSH
63909: LD_VAR 0 1
63913: PPUSH
63914: CALL_OW 437
63918: PUSH
63919: LD_INT 1
63921: ARRAY
63922: PUSH
63923: LD_INT 2
63925: ARRAY
63926: EQUAL
63927: AND
63928: PUSH
63929: LD_VAR 0 3
63933: PUSH
63934: LD_VAR 0 1
63938: PPUSH
63939: CALL_OW 437
63943: PUSH
63944: LD_INT 1
63946: ARRAY
63947: PUSH
63948: LD_INT 3
63950: ARRAY
63951: EQUAL
63952: AND
63953: IFFALSE 63963
// result := true ;
63955: LD_ADDR_VAR 0 4
63959: PUSH
63960: LD_INT 1
63962: ST_TO_ADDR
// end ; end ;
63963: LD_VAR 0 4
63967: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63968: LD_INT 0
63970: PPUSH
63971: PPUSH
63972: PPUSH
63973: PPUSH
// if not unit or not area then
63974: LD_VAR 0 1
63978: NOT
63979: PUSH
63980: LD_VAR 0 2
63984: NOT
63985: OR
63986: IFFALSE 63990
// exit ;
63988: GO 64154
// tmp := AreaToList ( area , i ) ;
63990: LD_ADDR_VAR 0 6
63994: PUSH
63995: LD_VAR 0 2
63999: PPUSH
64000: LD_VAR 0 5
64004: PPUSH
64005: CALL_OW 517
64009: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64010: LD_ADDR_VAR 0 5
64014: PUSH
64015: DOUBLE
64016: LD_INT 1
64018: DEC
64019: ST_TO_ADDR
64020: LD_VAR 0 6
64024: PUSH
64025: LD_INT 1
64027: ARRAY
64028: PUSH
64029: FOR_TO
64030: IFFALSE 64152
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64032: LD_ADDR_VAR 0 7
64036: PUSH
64037: LD_VAR 0 6
64041: PUSH
64042: LD_INT 1
64044: ARRAY
64045: PUSH
64046: LD_VAR 0 5
64050: ARRAY
64051: PUSH
64052: LD_VAR 0 6
64056: PUSH
64057: LD_INT 2
64059: ARRAY
64060: PUSH
64061: LD_VAR 0 5
64065: ARRAY
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64071: LD_VAR 0 7
64075: PUSH
64076: LD_INT 1
64078: ARRAY
64079: PPUSH
64080: LD_VAR 0 7
64084: PUSH
64085: LD_INT 2
64087: ARRAY
64088: PPUSH
64089: CALL_OW 428
64093: PUSH
64094: LD_INT 0
64096: EQUAL
64097: IFFALSE 64150
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64099: LD_VAR 0 1
64103: PPUSH
64104: LD_VAR 0 7
64108: PUSH
64109: LD_INT 1
64111: ARRAY
64112: PPUSH
64113: LD_VAR 0 7
64117: PUSH
64118: LD_INT 2
64120: ARRAY
64121: PPUSH
64122: LD_VAR 0 3
64126: PPUSH
64127: CALL_OW 48
// result := IsPlaced ( unit ) ;
64131: LD_ADDR_VAR 0 4
64135: PUSH
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL_OW 305
64145: ST_TO_ADDR
// exit ;
64146: POP
64147: POP
64148: GO 64154
// end ; end ;
64150: GO 64029
64152: POP
64153: POP
// end ;
64154: LD_VAR 0 4
64158: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64159: LD_INT 0
64161: PPUSH
64162: PPUSH
64163: PPUSH
// if not side or side > 8 then
64164: LD_VAR 0 1
64168: NOT
64169: PUSH
64170: LD_VAR 0 1
64174: PUSH
64175: LD_INT 8
64177: GREATER
64178: OR
64179: IFFALSE 64183
// exit ;
64181: GO 64370
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64183: LD_ADDR_VAR 0 4
64187: PUSH
64188: LD_INT 22
64190: PUSH
64191: LD_VAR 0 1
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 21
64202: PUSH
64203: LD_INT 3
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PPUSH
64214: CALL_OW 69
64218: ST_TO_ADDR
// if not tmp then
64219: LD_VAR 0 4
64223: NOT
64224: IFFALSE 64228
// exit ;
64226: GO 64370
// enable_addtolog := true ;
64228: LD_ADDR_OWVAR 81
64232: PUSH
64233: LD_INT 1
64235: ST_TO_ADDR
// AddToLog ( [ ) ;
64236: LD_STRING [
64238: PPUSH
64239: CALL_OW 561
// for i in tmp do
64243: LD_ADDR_VAR 0 3
64247: PUSH
64248: LD_VAR 0 4
64252: PUSH
64253: FOR_IN
64254: IFFALSE 64361
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64256: LD_STRING [
64258: PUSH
64259: LD_VAR 0 3
64263: PPUSH
64264: CALL_OW 266
64268: STR
64269: PUSH
64270: LD_STRING , 
64272: STR
64273: PUSH
64274: LD_VAR 0 3
64278: PPUSH
64279: CALL_OW 250
64283: STR
64284: PUSH
64285: LD_STRING , 
64287: STR
64288: PUSH
64289: LD_VAR 0 3
64293: PPUSH
64294: CALL_OW 251
64298: STR
64299: PUSH
64300: LD_STRING , 
64302: STR
64303: PUSH
64304: LD_VAR 0 3
64308: PPUSH
64309: CALL_OW 254
64313: STR
64314: PUSH
64315: LD_STRING , 
64317: STR
64318: PUSH
64319: LD_VAR 0 3
64323: PPUSH
64324: LD_INT 1
64326: PPUSH
64327: CALL_OW 268
64331: STR
64332: PUSH
64333: LD_STRING , 
64335: STR
64336: PUSH
64337: LD_VAR 0 3
64341: PPUSH
64342: LD_INT 2
64344: PPUSH
64345: CALL_OW 268
64349: STR
64350: PUSH
64351: LD_STRING ],
64353: STR
64354: PPUSH
64355: CALL_OW 561
// end ;
64359: GO 64253
64361: POP
64362: POP
// AddToLog ( ]; ) ;
64363: LD_STRING ];
64365: PPUSH
64366: CALL_OW 561
// end ;
64370: LD_VAR 0 2
64374: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64375: LD_INT 0
64377: PPUSH
64378: PPUSH
64379: PPUSH
64380: PPUSH
64381: PPUSH
// if not area or not rate or not max then
64382: LD_VAR 0 1
64386: NOT
64387: PUSH
64388: LD_VAR 0 2
64392: NOT
64393: OR
64394: PUSH
64395: LD_VAR 0 4
64399: NOT
64400: OR
64401: IFFALSE 64405
// exit ;
64403: GO 64597
// while 1 do
64405: LD_INT 1
64407: IFFALSE 64597
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64409: LD_ADDR_VAR 0 9
64413: PUSH
64414: LD_VAR 0 1
64418: PPUSH
64419: LD_INT 1
64421: PPUSH
64422: CALL_OW 287
64426: PUSH
64427: LD_INT 10
64429: MUL
64430: ST_TO_ADDR
// r := rate / 10 ;
64431: LD_ADDR_VAR 0 7
64435: PUSH
64436: LD_VAR 0 2
64440: PUSH
64441: LD_INT 10
64443: DIVREAL
64444: ST_TO_ADDR
// time := 1 1$00 ;
64445: LD_ADDR_VAR 0 8
64449: PUSH
64450: LD_INT 2100
64452: ST_TO_ADDR
// if amount < min then
64453: LD_VAR 0 9
64457: PUSH
64458: LD_VAR 0 3
64462: LESS
64463: IFFALSE 64481
// r := r * 2 else
64465: LD_ADDR_VAR 0 7
64469: PUSH
64470: LD_VAR 0 7
64474: PUSH
64475: LD_INT 2
64477: MUL
64478: ST_TO_ADDR
64479: GO 64507
// if amount > max then
64481: LD_VAR 0 9
64485: PUSH
64486: LD_VAR 0 4
64490: GREATER
64491: IFFALSE 64507
// r := r / 2 ;
64493: LD_ADDR_VAR 0 7
64497: PUSH
64498: LD_VAR 0 7
64502: PUSH
64503: LD_INT 2
64505: DIVREAL
64506: ST_TO_ADDR
// time := time / r ;
64507: LD_ADDR_VAR 0 8
64511: PUSH
64512: LD_VAR 0 8
64516: PUSH
64517: LD_VAR 0 7
64521: DIVREAL
64522: ST_TO_ADDR
// if time < 0 then
64523: LD_VAR 0 8
64527: PUSH
64528: LD_INT 0
64530: LESS
64531: IFFALSE 64548
// time := time * - 1 ;
64533: LD_ADDR_VAR 0 8
64537: PUSH
64538: LD_VAR 0 8
64542: PUSH
64543: LD_INT 1
64545: NEG
64546: MUL
64547: ST_TO_ADDR
// wait ( time ) ;
64548: LD_VAR 0 8
64552: PPUSH
64553: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64557: LD_INT 35
64559: PPUSH
64560: LD_INT 875
64562: PPUSH
64563: CALL_OW 12
64567: PPUSH
64568: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64572: LD_INT 1
64574: PPUSH
64575: LD_INT 5
64577: PPUSH
64578: CALL_OW 12
64582: PPUSH
64583: LD_VAR 0 1
64587: PPUSH
64588: LD_INT 1
64590: PPUSH
64591: CALL_OW 55
// end ;
64595: GO 64405
// end ;
64597: LD_VAR 0 5
64601: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64602: LD_INT 0
64604: PPUSH
64605: PPUSH
64606: PPUSH
64607: PPUSH
64608: PPUSH
64609: PPUSH
64610: PPUSH
64611: PPUSH
// if not turrets or not factories then
64612: LD_VAR 0 1
64616: NOT
64617: PUSH
64618: LD_VAR 0 2
64622: NOT
64623: OR
64624: IFFALSE 64628
// exit ;
64626: GO 64935
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64628: LD_ADDR_VAR 0 10
64632: PUSH
64633: LD_INT 5
64635: PUSH
64636: LD_INT 6
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 2
64645: PUSH
64646: LD_INT 4
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 3
64655: PUSH
64656: LD_INT 5
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 24
64670: PUSH
64671: LD_INT 25
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 23
64680: PUSH
64681: LD_INT 27
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 42
64694: PUSH
64695: LD_INT 43
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 44
64704: PUSH
64705: LD_INT 46
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 45
64714: PUSH
64715: LD_INT 47
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: LIST
64731: ST_TO_ADDR
// result := [ ] ;
64732: LD_ADDR_VAR 0 3
64736: PUSH
64737: EMPTY
64738: ST_TO_ADDR
// for i in turrets do
64739: LD_ADDR_VAR 0 4
64743: PUSH
64744: LD_VAR 0 1
64748: PUSH
64749: FOR_IN
64750: IFFALSE 64933
// begin nat := GetNation ( i ) ;
64752: LD_ADDR_VAR 0 7
64756: PUSH
64757: LD_VAR 0 4
64761: PPUSH
64762: CALL_OW 248
64766: ST_TO_ADDR
// weapon := 0 ;
64767: LD_ADDR_VAR 0 8
64771: PUSH
64772: LD_INT 0
64774: ST_TO_ADDR
// if not nat then
64775: LD_VAR 0 7
64779: NOT
64780: IFFALSE 64784
// continue ;
64782: GO 64749
// for j in list [ nat ] do
64784: LD_ADDR_VAR 0 5
64788: PUSH
64789: LD_VAR 0 10
64793: PUSH
64794: LD_VAR 0 7
64798: ARRAY
64799: PUSH
64800: FOR_IN
64801: IFFALSE 64842
// if GetBWeapon ( i ) = j [ 1 ] then
64803: LD_VAR 0 4
64807: PPUSH
64808: CALL_OW 269
64812: PUSH
64813: LD_VAR 0 5
64817: PUSH
64818: LD_INT 1
64820: ARRAY
64821: EQUAL
64822: IFFALSE 64840
// begin weapon := j [ 2 ] ;
64824: LD_ADDR_VAR 0 8
64828: PUSH
64829: LD_VAR 0 5
64833: PUSH
64834: LD_INT 2
64836: ARRAY
64837: ST_TO_ADDR
// break ;
64838: GO 64842
// end ;
64840: GO 64800
64842: POP
64843: POP
// if not weapon then
64844: LD_VAR 0 8
64848: NOT
64849: IFFALSE 64853
// continue ;
64851: GO 64749
// for k in factories do
64853: LD_ADDR_VAR 0 6
64857: PUSH
64858: LD_VAR 0 2
64862: PUSH
64863: FOR_IN
64864: IFFALSE 64929
// begin weapons := AvailableWeaponList ( k ) ;
64866: LD_ADDR_VAR 0 9
64870: PUSH
64871: LD_VAR 0 6
64875: PPUSH
64876: CALL_OW 478
64880: ST_TO_ADDR
// if not weapons then
64881: LD_VAR 0 9
64885: NOT
64886: IFFALSE 64890
// continue ;
64888: GO 64863
// if weapon in weapons then
64890: LD_VAR 0 8
64894: PUSH
64895: LD_VAR 0 9
64899: IN
64900: IFFALSE 64927
// begin result := [ i , weapon ] ;
64902: LD_ADDR_VAR 0 3
64906: PUSH
64907: LD_VAR 0 4
64911: PUSH
64912: LD_VAR 0 8
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: ST_TO_ADDR
// exit ;
64921: POP
64922: POP
64923: POP
64924: POP
64925: GO 64935
// end ; end ;
64927: GO 64863
64929: POP
64930: POP
// end ;
64931: GO 64749
64933: POP
64934: POP
// end ;
64935: LD_VAR 0 3
64939: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64940: LD_INT 0
64942: PPUSH
// if not side or side > 8 then
64943: LD_VAR 0 3
64947: NOT
64948: PUSH
64949: LD_VAR 0 3
64953: PUSH
64954: LD_INT 8
64956: GREATER
64957: OR
64958: IFFALSE 64962
// exit ;
64960: GO 65021
// if not range then
64962: LD_VAR 0 4
64966: NOT
64967: IFFALSE 64978
// range := - 12 ;
64969: LD_ADDR_VAR 0 4
64973: PUSH
64974: LD_INT 12
64976: NEG
64977: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64978: LD_VAR 0 1
64982: PPUSH
64983: LD_VAR 0 2
64987: PPUSH
64988: LD_VAR 0 3
64992: PPUSH
64993: LD_VAR 0 4
64997: PPUSH
64998: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65002: LD_VAR 0 1
65006: PPUSH
65007: LD_VAR 0 2
65011: PPUSH
65012: LD_VAR 0 3
65016: PPUSH
65017: CALL_OW 331
// end ;
65021: LD_VAR 0 5
65025: RET
// export function Video ( mode ) ; begin
65026: LD_INT 0
65028: PPUSH
// ingame_video = mode ;
65029: LD_ADDR_OWVAR 52
65033: PUSH
65034: LD_VAR 0 1
65038: ST_TO_ADDR
// interface_hidden = mode ;
65039: LD_ADDR_OWVAR 54
65043: PUSH
65044: LD_VAR 0 1
65048: ST_TO_ADDR
// end ;
65049: LD_VAR 0 2
65053: RET
// export function Join ( array , element ) ; begin
65054: LD_INT 0
65056: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65057: LD_ADDR_VAR 0 3
65061: PUSH
65062: LD_VAR 0 1
65066: PPUSH
65067: LD_VAR 0 1
65071: PUSH
65072: LD_INT 1
65074: PLUS
65075: PPUSH
65076: LD_VAR 0 2
65080: PPUSH
65081: CALL_OW 1
65085: ST_TO_ADDR
// end ;
65086: LD_VAR 0 3
65090: RET
// export function JoinUnion ( array , element ) ; begin
65091: LD_INT 0
65093: PPUSH
// result := array union element ;
65094: LD_ADDR_VAR 0 3
65098: PUSH
65099: LD_VAR 0 1
65103: PUSH
65104: LD_VAR 0 2
65108: UNION
65109: ST_TO_ADDR
// end ;
65110: LD_VAR 0 3
65114: RET
// export function GetBehemoths ( side ) ; begin
65115: LD_INT 0
65117: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65118: LD_ADDR_VAR 0 2
65122: PUSH
65123: LD_INT 22
65125: PUSH
65126: LD_VAR 0 1
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 31
65137: PUSH
65138: LD_INT 25
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PPUSH
65149: CALL_OW 69
65153: ST_TO_ADDR
// end ;
65154: LD_VAR 0 2
65158: RET
// export function Shuffle ( array ) ; var i , index ; begin
65159: LD_INT 0
65161: PPUSH
65162: PPUSH
65163: PPUSH
// result := [ ] ;
65164: LD_ADDR_VAR 0 2
65168: PUSH
65169: EMPTY
65170: ST_TO_ADDR
// if not array then
65171: LD_VAR 0 1
65175: NOT
65176: IFFALSE 65180
// exit ;
65178: GO 65279
// Randomize ;
65180: CALL_OW 10
// for i = array downto 1 do
65184: LD_ADDR_VAR 0 3
65188: PUSH
65189: DOUBLE
65190: LD_VAR 0 1
65194: INC
65195: ST_TO_ADDR
65196: LD_INT 1
65198: PUSH
65199: FOR_DOWNTO
65200: IFFALSE 65277
// begin index := rand ( 1 , array ) ;
65202: LD_ADDR_VAR 0 4
65206: PUSH
65207: LD_INT 1
65209: PPUSH
65210: LD_VAR 0 1
65214: PPUSH
65215: CALL_OW 12
65219: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65220: LD_ADDR_VAR 0 2
65224: PUSH
65225: LD_VAR 0 2
65229: PPUSH
65230: LD_VAR 0 2
65234: PUSH
65235: LD_INT 1
65237: PLUS
65238: PPUSH
65239: LD_VAR 0 1
65243: PUSH
65244: LD_VAR 0 4
65248: ARRAY
65249: PPUSH
65250: CALL_OW 2
65254: ST_TO_ADDR
// array := Delete ( array , index ) ;
65255: LD_ADDR_VAR 0 1
65259: PUSH
65260: LD_VAR 0 1
65264: PPUSH
65265: LD_VAR 0 4
65269: PPUSH
65270: CALL_OW 3
65274: ST_TO_ADDR
// end ;
65275: GO 65199
65277: POP
65278: POP
// end ;
65279: LD_VAR 0 2
65283: RET
// export function GetBaseMaterials ( base ) ; begin
65284: LD_INT 0
65286: PPUSH
// result := [ 0 , 0 , 0 ] ;
65287: LD_ADDR_VAR 0 2
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: LIST
65305: ST_TO_ADDR
// if not base then
65306: LD_VAR 0 1
65310: NOT
65311: IFFALSE 65315
// exit ;
65313: GO 65364
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65315: LD_ADDR_VAR 0 2
65319: PUSH
65320: LD_VAR 0 1
65324: PPUSH
65325: LD_INT 1
65327: PPUSH
65328: CALL_OW 275
65332: PUSH
65333: LD_VAR 0 1
65337: PPUSH
65338: LD_INT 2
65340: PPUSH
65341: CALL_OW 275
65345: PUSH
65346: LD_VAR 0 1
65350: PPUSH
65351: LD_INT 3
65353: PPUSH
65354: CALL_OW 275
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: ST_TO_ADDR
// end ;
65364: LD_VAR 0 2
65368: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65369: LD_INT 0
65371: PPUSH
65372: PPUSH
// result := array ;
65373: LD_ADDR_VAR 0 3
65377: PUSH
65378: LD_VAR 0 1
65382: ST_TO_ADDR
// if size > 0 then
65383: LD_VAR 0 2
65387: PUSH
65388: LD_INT 0
65390: GREATER
65391: IFFALSE 65437
// for i := array downto size do
65393: LD_ADDR_VAR 0 4
65397: PUSH
65398: DOUBLE
65399: LD_VAR 0 1
65403: INC
65404: ST_TO_ADDR
65405: LD_VAR 0 2
65409: PUSH
65410: FOR_DOWNTO
65411: IFFALSE 65435
// result := Delete ( result , result ) ;
65413: LD_ADDR_VAR 0 3
65417: PUSH
65418: LD_VAR 0 3
65422: PPUSH
65423: LD_VAR 0 3
65427: PPUSH
65428: CALL_OW 3
65432: ST_TO_ADDR
65433: GO 65410
65435: POP
65436: POP
// end ;
65437: LD_VAR 0 3
65441: RET
// export function ComExit ( unit ) ; var tmp ; begin
65442: LD_INT 0
65444: PPUSH
65445: PPUSH
// if not IsInUnit ( unit ) then
65446: LD_VAR 0 1
65450: PPUSH
65451: CALL_OW 310
65455: NOT
65456: IFFALSE 65460
// exit ;
65458: GO 65520
// tmp := IsInUnit ( unit ) ;
65460: LD_ADDR_VAR 0 3
65464: PUSH
65465: LD_VAR 0 1
65469: PPUSH
65470: CALL_OW 310
65474: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65475: LD_VAR 0 3
65479: PPUSH
65480: CALL_OW 247
65484: PUSH
65485: LD_INT 2
65487: EQUAL
65488: IFFALSE 65501
// ComExitVehicle ( unit ) else
65490: LD_VAR 0 1
65494: PPUSH
65495: CALL_OW 121
65499: GO 65510
// ComExitBuilding ( unit ) ;
65501: LD_VAR 0 1
65505: PPUSH
65506: CALL_OW 122
// result := tmp ;
65510: LD_ADDR_VAR 0 2
65514: PUSH
65515: LD_VAR 0 3
65519: ST_TO_ADDR
// end ;
65520: LD_VAR 0 2
65524: RET
// export function ComExitAll ( units ) ; var i ; begin
65525: LD_INT 0
65527: PPUSH
65528: PPUSH
// if not units then
65529: LD_VAR 0 1
65533: NOT
65534: IFFALSE 65538
// exit ;
65536: GO 65564
// for i in units do
65538: LD_ADDR_VAR 0 3
65542: PUSH
65543: LD_VAR 0 1
65547: PUSH
65548: FOR_IN
65549: IFFALSE 65562
// ComExit ( i ) ;
65551: LD_VAR 0 3
65555: PPUSH
65556: CALL 65442 0 1
65560: GO 65548
65562: POP
65563: POP
// end ;
65564: LD_VAR 0 2
65568: RET
// export function ResetHc ; begin
65569: LD_INT 0
65571: PPUSH
// InitHc ;
65572: CALL_OW 19
// hc_importance := 0 ;
65576: LD_ADDR_OWVAR 32
65580: PUSH
65581: LD_INT 0
65583: ST_TO_ADDR
// end ;
65584: LD_VAR 0 1
65588: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65589: LD_INT 0
65591: PPUSH
65592: PPUSH
65593: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65594: LD_ADDR_VAR 0 6
65598: PUSH
65599: LD_VAR 0 1
65603: PUSH
65604: LD_VAR 0 3
65608: PLUS
65609: PUSH
65610: LD_INT 2
65612: DIV
65613: ST_TO_ADDR
// if _x < 0 then
65614: LD_VAR 0 6
65618: PUSH
65619: LD_INT 0
65621: LESS
65622: IFFALSE 65639
// _x := _x * - 1 ;
65624: LD_ADDR_VAR 0 6
65628: PUSH
65629: LD_VAR 0 6
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: MUL
65638: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65639: LD_ADDR_VAR 0 7
65643: PUSH
65644: LD_VAR 0 2
65648: PUSH
65649: LD_VAR 0 4
65653: PLUS
65654: PUSH
65655: LD_INT 2
65657: DIV
65658: ST_TO_ADDR
// if _y < 0 then
65659: LD_VAR 0 7
65663: PUSH
65664: LD_INT 0
65666: LESS
65667: IFFALSE 65684
// _y := _y * - 1 ;
65669: LD_ADDR_VAR 0 7
65673: PUSH
65674: LD_VAR 0 7
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: MUL
65683: ST_TO_ADDR
// result := [ _x , _y ] ;
65684: LD_ADDR_VAR 0 5
65688: PUSH
65689: LD_VAR 0 6
65693: PUSH
65694: LD_VAR 0 7
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: ST_TO_ADDR
// end ;
65703: LD_VAR 0 5
65707: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65708: LD_INT 0
65710: PPUSH
65711: PPUSH
65712: PPUSH
65713: PPUSH
// task := GetTaskList ( unit ) ;
65714: LD_ADDR_VAR 0 7
65718: PUSH
65719: LD_VAR 0 1
65723: PPUSH
65724: CALL_OW 437
65728: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65729: LD_VAR 0 7
65733: NOT
65734: PUSH
65735: LD_VAR 0 1
65739: PPUSH
65740: LD_VAR 0 2
65744: PPUSH
65745: CALL_OW 308
65749: NOT
65750: AND
65751: IFFALSE 65755
// exit ;
65753: GO 65873
// if IsInArea ( unit , area ) then
65755: LD_VAR 0 1
65759: PPUSH
65760: LD_VAR 0 2
65764: PPUSH
65765: CALL_OW 308
65769: IFFALSE 65787
// begin ComMoveToArea ( unit , goAway ) ;
65771: LD_VAR 0 1
65775: PPUSH
65776: LD_VAR 0 3
65780: PPUSH
65781: CALL_OW 113
// exit ;
65785: GO 65873
// end ; if task [ 1 ] [ 1 ] <> M then
65787: LD_VAR 0 7
65791: PUSH
65792: LD_INT 1
65794: ARRAY
65795: PUSH
65796: LD_INT 1
65798: ARRAY
65799: PUSH
65800: LD_STRING M
65802: NONEQUAL
65803: IFFALSE 65807
// exit ;
65805: GO 65873
// x := task [ 1 ] [ 2 ] ;
65807: LD_ADDR_VAR 0 5
65811: PUSH
65812: LD_VAR 0 7
65816: PUSH
65817: LD_INT 1
65819: ARRAY
65820: PUSH
65821: LD_INT 2
65823: ARRAY
65824: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65825: LD_ADDR_VAR 0 6
65829: PUSH
65830: LD_VAR 0 7
65834: PUSH
65835: LD_INT 1
65837: ARRAY
65838: PUSH
65839: LD_INT 3
65841: ARRAY
65842: ST_TO_ADDR
// if InArea ( x , y , area ) then
65843: LD_VAR 0 5
65847: PPUSH
65848: LD_VAR 0 6
65852: PPUSH
65853: LD_VAR 0 2
65857: PPUSH
65858: CALL_OW 309
65862: IFFALSE 65873
// ComStop ( unit ) ;
65864: LD_VAR 0 1
65868: PPUSH
65869: CALL_OW 141
// end ;
65873: LD_VAR 0 4
65877: RET
// export function Abs ( value ) ; begin
65878: LD_INT 0
65880: PPUSH
// result := value ;
65881: LD_ADDR_VAR 0 2
65885: PUSH
65886: LD_VAR 0 1
65890: ST_TO_ADDR
// if value < 0 then
65891: LD_VAR 0 1
65895: PUSH
65896: LD_INT 0
65898: LESS
65899: IFFALSE 65916
// result := value * - 1 ;
65901: LD_ADDR_VAR 0 2
65905: PUSH
65906: LD_VAR 0 1
65910: PUSH
65911: LD_INT 1
65913: NEG
65914: MUL
65915: ST_TO_ADDR
// end ;
65916: LD_VAR 0 2
65920: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65921: LD_INT 0
65923: PPUSH
65924: PPUSH
65925: PPUSH
65926: PPUSH
65927: PPUSH
65928: PPUSH
65929: PPUSH
65930: PPUSH
// if not unit or not building then
65931: LD_VAR 0 1
65935: NOT
65936: PUSH
65937: LD_VAR 0 2
65941: NOT
65942: OR
65943: IFFALSE 65947
// exit ;
65945: GO 66173
// x := GetX ( building ) ;
65947: LD_ADDR_VAR 0 4
65951: PUSH
65952: LD_VAR 0 2
65956: PPUSH
65957: CALL_OW 250
65961: ST_TO_ADDR
// y := GetY ( building ) ;
65962: LD_ADDR_VAR 0 6
65966: PUSH
65967: LD_VAR 0 2
65971: PPUSH
65972: CALL_OW 251
65976: ST_TO_ADDR
// d := GetDir ( building ) ;
65977: LD_ADDR_VAR 0 8
65981: PUSH
65982: LD_VAR 0 2
65986: PPUSH
65987: CALL_OW 254
65991: ST_TO_ADDR
// r := 4 ;
65992: LD_ADDR_VAR 0 9
65996: PUSH
65997: LD_INT 4
65999: ST_TO_ADDR
// for i := 1 to 5 do
66000: LD_ADDR_VAR 0 10
66004: PUSH
66005: DOUBLE
66006: LD_INT 1
66008: DEC
66009: ST_TO_ADDR
66010: LD_INT 5
66012: PUSH
66013: FOR_TO
66014: IFFALSE 66171
// begin _x := ShiftX ( x , d , r + i ) ;
66016: LD_ADDR_VAR 0 5
66020: PUSH
66021: LD_VAR 0 4
66025: PPUSH
66026: LD_VAR 0 8
66030: PPUSH
66031: LD_VAR 0 9
66035: PUSH
66036: LD_VAR 0 10
66040: PLUS
66041: PPUSH
66042: CALL_OW 272
66046: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66047: LD_ADDR_VAR 0 7
66051: PUSH
66052: LD_VAR 0 6
66056: PPUSH
66057: LD_VAR 0 8
66061: PPUSH
66062: LD_VAR 0 9
66066: PUSH
66067: LD_VAR 0 10
66071: PLUS
66072: PPUSH
66073: CALL_OW 273
66077: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66078: LD_VAR 0 5
66082: PPUSH
66083: LD_VAR 0 7
66087: PPUSH
66088: CALL_OW 488
66092: PUSH
66093: LD_VAR 0 5
66097: PPUSH
66098: LD_VAR 0 7
66102: PPUSH
66103: CALL_OW 428
66107: PPUSH
66108: CALL_OW 247
66112: PUSH
66113: LD_INT 3
66115: PUSH
66116: LD_INT 2
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: IN
66123: NOT
66124: AND
66125: IFFALSE 66169
// begin ComMoveXY ( unit , _x , _y ) ;
66127: LD_VAR 0 1
66131: PPUSH
66132: LD_VAR 0 5
66136: PPUSH
66137: LD_VAR 0 7
66141: PPUSH
66142: CALL_OW 111
// result := [ _x , _y ] ;
66146: LD_ADDR_VAR 0 3
66150: PUSH
66151: LD_VAR 0 5
66155: PUSH
66156: LD_VAR 0 7
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: ST_TO_ADDR
// exit ;
66165: POP
66166: POP
66167: GO 66173
// end ; end ;
66169: GO 66013
66171: POP
66172: POP
// end ;
66173: LD_VAR 0 3
66177: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66178: LD_INT 0
66180: PPUSH
66181: PPUSH
66182: PPUSH
// result := 0 ;
66183: LD_ADDR_VAR 0 3
66187: PUSH
66188: LD_INT 0
66190: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66191: LD_VAR 0 1
66195: PUSH
66196: LD_INT 0
66198: LESS
66199: PUSH
66200: LD_VAR 0 1
66204: PUSH
66205: LD_INT 8
66207: GREATER
66208: OR
66209: PUSH
66210: LD_VAR 0 2
66214: PUSH
66215: LD_INT 0
66217: LESS
66218: OR
66219: PUSH
66220: LD_VAR 0 2
66224: PUSH
66225: LD_INT 8
66227: GREATER
66228: OR
66229: IFFALSE 66233
// exit ;
66231: GO 66308
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66233: LD_ADDR_VAR 0 4
66237: PUSH
66238: LD_INT 22
66240: PUSH
66241: LD_VAR 0 2
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PPUSH
66250: CALL_OW 69
66254: PUSH
66255: FOR_IN
66256: IFFALSE 66306
// begin un := UnitShoot ( i ) ;
66258: LD_ADDR_VAR 0 5
66262: PUSH
66263: LD_VAR 0 4
66267: PPUSH
66268: CALL_OW 504
66272: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66273: LD_VAR 0 5
66277: PPUSH
66278: CALL_OW 255
66282: PUSH
66283: LD_VAR 0 1
66287: EQUAL
66288: IFFALSE 66304
// begin result := un ;
66290: LD_ADDR_VAR 0 3
66294: PUSH
66295: LD_VAR 0 5
66299: ST_TO_ADDR
// exit ;
66300: POP
66301: POP
66302: GO 66308
// end ; end ;
66304: GO 66255
66306: POP
66307: POP
// end ;
66308: LD_VAR 0 3
66312: RET
// export function GetCargoBay ( units ) ; begin
66313: LD_INT 0
66315: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66316: LD_ADDR_VAR 0 2
66320: PUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: LD_INT 2
66328: PUSH
66329: LD_INT 34
66331: PUSH
66332: LD_INT 12
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 34
66341: PUSH
66342: LD_INT 51
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 34
66351: PUSH
66352: LD_INT 32
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 34
66361: PUSH
66362: LD_EXP 22
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: PPUSH
66378: CALL_OW 72
66382: ST_TO_ADDR
// end ;
66383: LD_VAR 0 2
66387: RET
