// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: IFFALSE 10654
// YouLost ( jota-lose ) ;
10647: LD_STRING jota-lose
10649: PPUSH
10650: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10654: LD_EXP 1
10658: PUSH
10659: LD_INT 2
10661: EQUAL
10662: PUSH
10663: LD_EXP 8
10667: PUSH
10668: LD_INT 0
10670: EQUAL
10671: AND
10672: IFFALSE 10987
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 255
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: LD_INT 11
10695: PPUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 70
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 10
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 30
10746: PUSH
10747: LD_INT 8
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: DIFF
10778: IN
10779: AND
10780: IFFALSE 10866
// begin ai_build := ai_build ^ GetBType ( un ) ;
10782: LD_ADDR_EXP 10
10786: PUSH
10787: LD_EXP 10
10791: PUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 266
10801: ADD
10802: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10803: LD_ADDR_EXP 10
10807: PUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 250
10822: ADD
10823: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10824: LD_ADDR_EXP 10
10828: PUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 251
10843: ADD
10844: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10845: LD_ADDR_EXP 10
10849: PUSH
10850: LD_EXP 10
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 254
10864: ADD
10865: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 255
10875: PUSH
10876: LD_INT 1
10878: EQUAL
10879: PUSH
10880: LD_VAR 0 1
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: IN
10900: AND
10901: IFFALSE 10987
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10903: LD_ADDR_EXP 11
10907: PUSH
10908: LD_EXP 11
10912: PUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 265
10922: ADD
10923: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10924: LD_ADDR_EXP 11
10928: PUSH
10929: LD_EXP 11
10933: PUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 262
10943: ADD
10944: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10945: LD_ADDR_EXP 11
10949: PUSH
10950: LD_EXP 11
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: CALL_OW 263
10964: ADD
10965: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10966: LD_ADDR_EXP 11
10970: PUSH
10971: LD_EXP 11
10975: PUSH
10976: LD_VAR 0 1
10980: PPUSH
10981: CALL_OW 264
10985: ADD
10986: ST_TO_ADDR
// end ; end ; end ;
10987: PPOPN 1
10989: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10990: LD_EXP 1
10994: PUSH
10995: LD_INT 1
10997: EQUAL
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PUSH
11028: LD_INT 0
11030: EQUAL
11031: AND
11032: IFFALSE 11044
11034: GO 11036
11036: DISABLE
// YouLost ( peo-lose ) ;
11037: LD_STRING peo-lose
11039: PPUSH
11040: CALL_OW 104
11044: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11045: LD_EXP 1
11049: PUSH
11050: LD_INT 2
11052: EQUAL
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: PUSH
11083: LD_INT 0
11085: EQUAL
11086: AND
11087: IFFALSE 11099
11089: GO 11091
11091: DISABLE
// YouLost ( peo-lose ) ;
11092: LD_STRING peo-lose
11094: PPUSH
11095: CALL_OW 104
11099: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
11100: LD_OWVAR 2
11104: PPUSH
11105: CALL 10510 0 1
11109: PUSH
11110: LD_EXP 5
11114: GREATEREQUAL
11115: IFFALSE 11201
11117: GO 11119
11119: DISABLE
11120: LD_INT 0
11122: PPUSH
// begin if GetSide ( jota_base ) = your_side then
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 255
11130: PUSH
11131: LD_OWVAR 2
11135: EQUAL
11136: IFFALSE 11179
// begin for i = 1 to 3 do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: DOUBLE
11144: LD_INT 1
11146: DEC
11147: ST_TO_ADDR
11148: LD_INT 3
11150: PUSH
11151: FOR_TO
11152: IFFALSE 11166
// AddMedal ( med , 1 ) ;
11154: LD_STRING med
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 101
11164: GO 11151
11166: POP
11167: POP
// GiveMedals ( MAIN ) ;
11168: LD_STRING MAIN
11170: PPUSH
11171: CALL_OW 102
// YouWin ;
11175: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: LD_OWVAR 2
11191: NONEQUAL
11192: IFFALSE 11201
// YouLost ( source ) ;
11194: LD_STRING source
11196: PPUSH
11197: CALL_OW 104
// end ; end_of_file
11201: PPOPN 1
11203: END
// every 2 2$05 + 0 0$11 do
11204: GO 11206
11206: DISABLE
// begin enable ;
11207: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11208: LD_INT 1
11210: PPUSH
11211: LD_INT 5
11213: PPUSH
11214: CALL_OW 12
11218: PPUSH
11219: LD_INT 7
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11229: LD_INT 350
11231: PPUSH
11232: LD_INT 1295
11234: PPUSH
11235: CALL_OW 12
11239: PPUSH
11240: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 5
11249: PPUSH
11250: CALL_OW 12
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 57
// end ;
11262: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11263: LD_EXP 1
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: PUSH
11272: LD_EXP 8
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: AND
11281: IFFALSE 11371
11283: GO 11285
11285: DISABLE
// begin enable ;
11286: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 7
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11308: LD_INT 350
11310: PPUSH
11311: LD_INT 1750
11313: PPUSH
11314: CALL_OW 12
11318: PPUSH
11319: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11323: LD_EXP 6
11327: PUSH
11328: LD_INT 73500
11330: PUSH
11331: LD_INT 63000
11333: PUSH
11334: LD_INT 52500
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_EXP 2
11346: ARRAY
11347: LESSEQUAL
11348: IFFALSE 11371
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 5
11355: PPUSH
11356: CALL_OW 12
11360: PPUSH
11361: LD_INT 12
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 55
// end ; end_of_file
11371: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: CALL 25457 0 3
// end ;
11391: PPOPN 3
11393: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL 25465 0 1
// end ; end_of_file
11403: PPOPN 1
11405: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11406: LD_INT 0
11408: PPUSH
// ar_miner := 81 ;
11409: LD_ADDR_EXP 28
11413: PUSH
11414: LD_INT 81
11416: ST_TO_ADDR
// ar_crane := 88 ;
11417: LD_ADDR_EXP 27
11421: PUSH
11422: LD_INT 88
11424: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11425: LD_ADDR_EXP 22
11429: PUSH
11430: LD_INT 89
11432: ST_TO_ADDR
// us_hack := 99 ;
11433: LD_ADDR_EXP 23
11437: PUSH
11438: LD_INT 99
11440: ST_TO_ADDR
// us_artillery := 97 ;
11441: LD_ADDR_EXP 24
11445: PUSH
11446: LD_INT 97
11448: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11449: LD_ADDR_EXP 25
11453: PUSH
11454: LD_INT 91
11456: ST_TO_ADDR
// ar_mortar := 92 ;
11457: LD_ADDR_EXP 26
11461: PUSH
11462: LD_INT 92
11464: ST_TO_ADDR
// ru_radar := 98 ;
11465: LD_ADDR_EXP 21
11469: PUSH
11470: LD_INT 98
11472: ST_TO_ADDR
// tech_Artillery := 80 ;
11473: LD_ADDR_EXP 29
11477: PUSH
11478: LD_INT 80
11480: ST_TO_ADDR
// tech_RadMat := 81 ;
11481: LD_ADDR_EXP 30
11485: PUSH
11486: LD_INT 81
11488: ST_TO_ADDR
// tech_BasicTools := 82 ;
11489: LD_ADDR_EXP 31
11493: PUSH
11494: LD_INT 82
11496: ST_TO_ADDR
// tech_Cargo := 83 ;
11497: LD_ADDR_EXP 32
11501: PUSH
11502: LD_INT 83
11504: ST_TO_ADDR
// tech_Track := 84 ;
11505: LD_ADDR_EXP 33
11509: PUSH
11510: LD_INT 84
11512: ST_TO_ADDR
// tech_Crane := 85 ;
11513: LD_ADDR_EXP 34
11517: PUSH
11518: LD_INT 85
11520: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11521: LD_ADDR_EXP 35
11525: PUSH
11526: LD_INT 86
11528: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11529: LD_ADDR_EXP 36
11533: PUSH
11534: LD_INT 87
11536: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11537: LD_ADDR_EXP 37
11541: PUSH
11542: LD_INT 88
11544: ST_TO_ADDR
// class_mastodont := 31 ;
11545: LD_ADDR_EXP 38
11549: PUSH
11550: LD_INT 31
11552: ST_TO_ADDR
// class_horse := 21 ;
11553: LD_ADDR_EXP 39
11557: PUSH
11558: LD_INT 21
11560: ST_TO_ADDR
// end ;
11561: LD_VAR 0 1
11565: RET
// every 1 do
11566: GO 11568
11568: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11569: CALL 11406 0 0
11573: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11574: LD_INT 0
11576: PPUSH
// if p2 = 100 then
11577: LD_VAR 0 2
11581: PUSH
11582: LD_INT 100
11584: EQUAL
11585: IFFALSE 12588
// begin if not StreamModeActive then
11587: LD_EXP 40
11591: NOT
11592: IFFALSE 11602
// StreamModeActive := true ;
11594: LD_ADDR_EXP 40
11598: PUSH
11599: LD_INT 1
11601: ST_TO_ADDR
// if p3 = 0 then
11602: LD_VAR 0 3
11606: PUSH
11607: LD_INT 0
11609: EQUAL
11610: IFFALSE 11616
// InitStreamMode ;
11612: CALL 12748 0 0
// if p3 = 1 then
11616: LD_VAR 0 3
11620: PUSH
11621: LD_INT 1
11623: EQUAL
11624: IFFALSE 11634
// sRocket := true ;
11626: LD_ADDR_EXP 45
11630: PUSH
11631: LD_INT 1
11633: ST_TO_ADDR
// if p3 = 2 then
11634: LD_VAR 0 3
11638: PUSH
11639: LD_INT 2
11641: EQUAL
11642: IFFALSE 11652
// sSpeed := true ;
11644: LD_ADDR_EXP 44
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// if p3 = 3 then
11652: LD_VAR 0 3
11656: PUSH
11657: LD_INT 3
11659: EQUAL
11660: IFFALSE 11670
// sEngine := true ;
11662: LD_ADDR_EXP 46
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// if p3 = 4 then
11670: LD_VAR 0 3
11674: PUSH
11675: LD_INT 4
11677: EQUAL
11678: IFFALSE 11688
// sSpec := true ;
11680: LD_ADDR_EXP 43
11684: PUSH
11685: LD_INT 1
11687: ST_TO_ADDR
// if p3 = 5 then
11688: LD_VAR 0 3
11692: PUSH
11693: LD_INT 5
11695: EQUAL
11696: IFFALSE 11706
// sLevel := true ;
11698: LD_ADDR_EXP 47
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// if p3 = 6 then
11706: LD_VAR 0 3
11710: PUSH
11711: LD_INT 6
11713: EQUAL
11714: IFFALSE 11724
// sArmoury := true ;
11716: LD_ADDR_EXP 48
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// if p3 = 7 then
11724: LD_VAR 0 3
11728: PUSH
11729: LD_INT 7
11731: EQUAL
11732: IFFALSE 11742
// sRadar := true ;
11734: LD_ADDR_EXP 49
11738: PUSH
11739: LD_INT 1
11741: ST_TO_ADDR
// if p3 = 8 then
11742: LD_VAR 0 3
11746: PUSH
11747: LD_INT 8
11749: EQUAL
11750: IFFALSE 11760
// sBunker := true ;
11752: LD_ADDR_EXP 50
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// if p3 = 9 then
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 9
11767: EQUAL
11768: IFFALSE 11778
// sHack := true ;
11770: LD_ADDR_EXP 51
11774: PUSH
11775: LD_INT 1
11777: ST_TO_ADDR
// if p3 = 10 then
11778: LD_VAR 0 3
11782: PUSH
11783: LD_INT 10
11785: EQUAL
11786: IFFALSE 11796
// sFire := true ;
11788: LD_ADDR_EXP 52
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// if p3 = 11 then
11796: LD_VAR 0 3
11800: PUSH
11801: LD_INT 11
11803: EQUAL
11804: IFFALSE 11814
// sRefresh := true ;
11806: LD_ADDR_EXP 53
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if p3 = 12 then
11814: LD_VAR 0 3
11818: PUSH
11819: LD_INT 12
11821: EQUAL
11822: IFFALSE 11832
// sExp := true ;
11824: LD_ADDR_EXP 54
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// if p3 = 13 then
11832: LD_VAR 0 3
11836: PUSH
11837: LD_INT 13
11839: EQUAL
11840: IFFALSE 11850
// sDepot := true ;
11842: LD_ADDR_EXP 55
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// if p3 = 14 then
11850: LD_VAR 0 3
11854: PUSH
11855: LD_INT 14
11857: EQUAL
11858: IFFALSE 11868
// sFlag := true ;
11860: LD_ADDR_EXP 56
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// if p3 = 15 then
11868: LD_VAR 0 3
11872: PUSH
11873: LD_INT 15
11875: EQUAL
11876: IFFALSE 11886
// sKamikadze := true ;
11878: LD_ADDR_EXP 64
11882: PUSH
11883: LD_INT 1
11885: ST_TO_ADDR
// if p3 = 16 then
11886: LD_VAR 0 3
11890: PUSH
11891: LD_INT 16
11893: EQUAL
11894: IFFALSE 11904
// sTroll := true ;
11896: LD_ADDR_EXP 65
11900: PUSH
11901: LD_INT 1
11903: ST_TO_ADDR
// if p3 = 17 then
11904: LD_VAR 0 3
11908: PUSH
11909: LD_INT 17
11911: EQUAL
11912: IFFALSE 11922
// sSlow := true ;
11914: LD_ADDR_EXP 66
11918: PUSH
11919: LD_INT 1
11921: ST_TO_ADDR
// if p3 = 18 then
11922: LD_VAR 0 3
11926: PUSH
11927: LD_INT 18
11929: EQUAL
11930: IFFALSE 11940
// sLack := true ;
11932: LD_ADDR_EXP 67
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// if p3 = 19 then
11940: LD_VAR 0 3
11944: PUSH
11945: LD_INT 19
11947: EQUAL
11948: IFFALSE 11958
// sTank := true ;
11950: LD_ADDR_EXP 69
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// if p3 = 20 then
11958: LD_VAR 0 3
11962: PUSH
11963: LD_INT 20
11965: EQUAL
11966: IFFALSE 11976
// sRemote := true ;
11968: LD_ADDR_EXP 70
11972: PUSH
11973: LD_INT 1
11975: ST_TO_ADDR
// if p3 = 21 then
11976: LD_VAR 0 3
11980: PUSH
11981: LD_INT 21
11983: EQUAL
11984: IFFALSE 11994
// sPowell := true ;
11986: LD_ADDR_EXP 71
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// if p3 = 22 then
11994: LD_VAR 0 3
11998: PUSH
11999: LD_INT 22
12001: EQUAL
12002: IFFALSE 12012
// sTeleport := true ;
12004: LD_ADDR_EXP 74
12008: PUSH
12009: LD_INT 1
12011: ST_TO_ADDR
// if p3 = 23 then
12012: LD_VAR 0 3
12016: PUSH
12017: LD_INT 23
12019: EQUAL
12020: IFFALSE 12030
// sOilTower := true ;
12022: LD_ADDR_EXP 76
12026: PUSH
12027: LD_INT 1
12029: ST_TO_ADDR
// if p3 = 24 then
12030: LD_VAR 0 3
12034: PUSH
12035: LD_INT 24
12037: EQUAL
12038: IFFALSE 12048
// sShovel := true ;
12040: LD_ADDR_EXP 77
12044: PUSH
12045: LD_INT 1
12047: ST_TO_ADDR
// if p3 = 25 then
12048: LD_VAR 0 3
12052: PUSH
12053: LD_INT 25
12055: EQUAL
12056: IFFALSE 12066
// sSheik := true ;
12058: LD_ADDR_EXP 78
12062: PUSH
12063: LD_INT 1
12065: ST_TO_ADDR
// if p3 = 26 then
12066: LD_VAR 0 3
12070: PUSH
12071: LD_INT 26
12073: EQUAL
12074: IFFALSE 12084
// sEarthquake := true ;
12076: LD_ADDR_EXP 80
12080: PUSH
12081: LD_INT 1
12083: ST_TO_ADDR
// if p3 = 27 then
12084: LD_VAR 0 3
12088: PUSH
12089: LD_INT 27
12091: EQUAL
12092: IFFALSE 12102
// sAI := true ;
12094: LD_ADDR_EXP 81
12098: PUSH
12099: LD_INT 1
12101: ST_TO_ADDR
// if p3 = 28 then
12102: LD_VAR 0 3
12106: PUSH
12107: LD_INT 28
12109: EQUAL
12110: IFFALSE 12120
// sCargo := true ;
12112: LD_ADDR_EXP 84
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// if p3 = 29 then
12120: LD_VAR 0 3
12124: PUSH
12125: LD_INT 29
12127: EQUAL
12128: IFFALSE 12138
// sDLaser := true ;
12130: LD_ADDR_EXP 85
12134: PUSH
12135: LD_INT 1
12137: ST_TO_ADDR
// if p3 = 30 then
12138: LD_VAR 0 3
12142: PUSH
12143: LD_INT 30
12145: EQUAL
12146: IFFALSE 12156
// sExchange := true ;
12148: LD_ADDR_EXP 86
12152: PUSH
12153: LD_INT 1
12155: ST_TO_ADDR
// if p3 = 31 then
12156: LD_VAR 0 3
12160: PUSH
12161: LD_INT 31
12163: EQUAL
12164: IFFALSE 12174
// sFac := true ;
12166: LD_ADDR_EXP 87
12170: PUSH
12171: LD_INT 1
12173: ST_TO_ADDR
// if p3 = 32 then
12174: LD_VAR 0 3
12178: PUSH
12179: LD_INT 32
12181: EQUAL
12182: IFFALSE 12192
// sPower := true ;
12184: LD_ADDR_EXP 88
12188: PUSH
12189: LD_INT 1
12191: ST_TO_ADDR
// if p3 = 33 then
12192: LD_VAR 0 3
12196: PUSH
12197: LD_INT 33
12199: EQUAL
12200: IFFALSE 12210
// sRandom := true ;
12202: LD_ADDR_EXP 89
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// if p3 = 34 then
12210: LD_VAR 0 3
12214: PUSH
12215: LD_INT 34
12217: EQUAL
12218: IFFALSE 12228
// sShield := true ;
12220: LD_ADDR_EXP 90
12224: PUSH
12225: LD_INT 1
12227: ST_TO_ADDR
// if p3 = 35 then
12228: LD_VAR 0 3
12232: PUSH
12233: LD_INT 35
12235: EQUAL
12236: IFFALSE 12246
// sTime := true ;
12238: LD_ADDR_EXP 91
12242: PUSH
12243: LD_INT 1
12245: ST_TO_ADDR
// if p3 = 36 then
12246: LD_VAR 0 3
12250: PUSH
12251: LD_INT 36
12253: EQUAL
12254: IFFALSE 12264
// sTools := true ;
12256: LD_ADDR_EXP 92
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// if p3 = 101 then
12264: LD_VAR 0 3
12268: PUSH
12269: LD_INT 101
12271: EQUAL
12272: IFFALSE 12282
// sSold := true ;
12274: LD_ADDR_EXP 57
12278: PUSH
12279: LD_INT 1
12281: ST_TO_ADDR
// if p3 = 102 then
12282: LD_VAR 0 3
12286: PUSH
12287: LD_INT 102
12289: EQUAL
12290: IFFALSE 12300
// sDiff := true ;
12292: LD_ADDR_EXP 58
12296: PUSH
12297: LD_INT 1
12299: ST_TO_ADDR
// if p3 = 103 then
12300: LD_VAR 0 3
12304: PUSH
12305: LD_INT 103
12307: EQUAL
12308: IFFALSE 12318
// sFog := true ;
12310: LD_ADDR_EXP 61
12314: PUSH
12315: LD_INT 1
12317: ST_TO_ADDR
// if p3 = 104 then
12318: LD_VAR 0 3
12322: PUSH
12323: LD_INT 104
12325: EQUAL
12326: IFFALSE 12336
// sReset := true ;
12328: LD_ADDR_EXP 62
12332: PUSH
12333: LD_INT 1
12335: ST_TO_ADDR
// if p3 = 105 then
12336: LD_VAR 0 3
12340: PUSH
12341: LD_INT 105
12343: EQUAL
12344: IFFALSE 12354
// sSun := true ;
12346: LD_ADDR_EXP 63
12350: PUSH
12351: LD_INT 1
12353: ST_TO_ADDR
// if p3 = 106 then
12354: LD_VAR 0 3
12358: PUSH
12359: LD_INT 106
12361: EQUAL
12362: IFFALSE 12372
// sTiger := true ;
12364: LD_ADDR_EXP 59
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// if p3 = 107 then
12372: LD_VAR 0 3
12376: PUSH
12377: LD_INT 107
12379: EQUAL
12380: IFFALSE 12390
// sBomb := true ;
12382: LD_ADDR_EXP 60
12386: PUSH
12387: LD_INT 1
12389: ST_TO_ADDR
// if p3 = 108 then
12390: LD_VAR 0 3
12394: PUSH
12395: LD_INT 108
12397: EQUAL
12398: IFFALSE 12408
// sWound := true ;
12400: LD_ADDR_EXP 68
12404: PUSH
12405: LD_INT 1
12407: ST_TO_ADDR
// if p3 = 109 then
12408: LD_VAR 0 3
12412: PUSH
12413: LD_INT 109
12415: EQUAL
12416: IFFALSE 12426
// sBetray := true ;
12418: LD_ADDR_EXP 72
12422: PUSH
12423: LD_INT 1
12425: ST_TO_ADDR
// if p3 = 110 then
12426: LD_VAR 0 3
12430: PUSH
12431: LD_INT 110
12433: EQUAL
12434: IFFALSE 12444
// sContamin := true ;
12436: LD_ADDR_EXP 73
12440: PUSH
12441: LD_INT 1
12443: ST_TO_ADDR
// if p3 = 111 then
12444: LD_VAR 0 3
12448: PUSH
12449: LD_INT 111
12451: EQUAL
12452: IFFALSE 12462
// sOil := true ;
12454: LD_ADDR_EXP 75
12458: PUSH
12459: LD_INT 1
12461: ST_TO_ADDR
// if p3 = 112 then
12462: LD_VAR 0 3
12466: PUSH
12467: LD_INT 112
12469: EQUAL
12470: IFFALSE 12480
// sStu := true ;
12472: LD_ADDR_EXP 79
12476: PUSH
12477: LD_INT 1
12479: ST_TO_ADDR
// if p3 = 113 then
12480: LD_VAR 0 3
12484: PUSH
12485: LD_INT 113
12487: EQUAL
12488: IFFALSE 12498
// sBazooka := true ;
12490: LD_ADDR_EXP 82
12494: PUSH
12495: LD_INT 1
12497: ST_TO_ADDR
// if p3 = 114 then
12498: LD_VAR 0 3
12502: PUSH
12503: LD_INT 114
12505: EQUAL
12506: IFFALSE 12516
// sMortar := true ;
12508: LD_ADDR_EXP 83
12512: PUSH
12513: LD_INT 1
12515: ST_TO_ADDR
// if p3 = 115 then
12516: LD_VAR 0 3
12520: PUSH
12521: LD_INT 115
12523: EQUAL
12524: IFFALSE 12534
// sRanger := true ;
12526: LD_ADDR_EXP 93
12530: PUSH
12531: LD_INT 1
12533: ST_TO_ADDR
// if p3 = 116 then
12534: LD_VAR 0 3
12538: PUSH
12539: LD_INT 116
12541: EQUAL
12542: IFFALSE 12552
// sComputer := true ;
12544: LD_ADDR_EXP 94
12548: PUSH
12549: LD_INT 1
12551: ST_TO_ADDR
// if p3 = 117 then
12552: LD_VAR 0 3
12556: PUSH
12557: LD_INT 117
12559: EQUAL
12560: IFFALSE 12570
// s30 := true ;
12562: LD_ADDR_EXP 95
12566: PUSH
12567: LD_INT 1
12569: ST_TO_ADDR
// if p3 = 118 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_INT 118
12577: EQUAL
12578: IFFALSE 12588
// s60 := true ;
12580: LD_ADDR_EXP 96
12584: PUSH
12585: LD_INT 1
12587: ST_TO_ADDR
// end ; if p2 = 101 then
12588: LD_VAR 0 2
12592: PUSH
12593: LD_INT 101
12595: EQUAL
12596: IFFALSE 12724
// begin case p3 of 1 :
12598: LD_VAR 0 3
12602: PUSH
12603: LD_INT 1
12605: DOUBLE
12606: EQUAL
12607: IFTRUE 12611
12609: GO 12618
12611: POP
// hHackUnlimitedResources ; 2 :
12612: CALL 24320 0 0
12616: GO 12724
12618: LD_INT 2
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12633
12626: POP
// hHackSetLevel10 ; 3 :
12627: CALL 24453 0 0
12631: GO 12724
12633: LD_INT 3
12635: DOUBLE
12636: EQUAL
12637: IFTRUE 12641
12639: GO 12648
12641: POP
// hHackSetLevel10YourUnits ; 4 :
12642: CALL 24538 0 0
12646: GO 12724
12648: LD_INT 4
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12663
12656: POP
// hHackInvincible ; 5 :
12657: CALL 24986 0 0
12661: GO 12724
12663: LD_INT 5
12665: DOUBLE
12666: EQUAL
12667: IFTRUE 12671
12669: GO 12678
12671: POP
// hHackInvisible ; 6 :
12672: CALL 25097 0 0
12676: GO 12724
12678: LD_INT 6
12680: DOUBLE
12681: EQUAL
12682: IFTRUE 12686
12684: GO 12693
12686: POP
// hHackChangeYourSide ; 7 :
12687: CALL 25154 0 0
12691: GO 12724
12693: LD_INT 7
12695: DOUBLE
12696: EQUAL
12697: IFTRUE 12701
12699: GO 12708
12701: POP
// hHackChangeUnitSide ; 8 :
12702: CALL 25196 0 0
12706: GO 12724
12708: LD_INT 8
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12723
12716: POP
// hHackFog ; end ;
12717: CALL 25297 0 0
12721: GO 12724
12723: POP
// end ; end ;
12724: LD_VAR 0 7
12728: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12729: GO 12731
12731: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12732: LD_STRING initStreamRollete();
12734: PPUSH
12735: CALL_OW 559
// InitStreamMode ;
12739: CALL 12748 0 0
// DefineStreamItems ( ) ;
12743: CALL 13212 0 0
// end ;
12747: END
// function InitStreamMode ; begin
12748: LD_INT 0
12750: PPUSH
// streamModeActive := false ;
12751: LD_ADDR_EXP 40
12755: PUSH
12756: LD_INT 0
12758: ST_TO_ADDR
// normalCounter := 36 ;
12759: LD_ADDR_EXP 41
12763: PUSH
12764: LD_INT 36
12766: ST_TO_ADDR
// hardcoreCounter := 16 ;
12767: LD_ADDR_EXP 42
12771: PUSH
12772: LD_INT 16
12774: ST_TO_ADDR
// sRocket := false ;
12775: LD_ADDR_EXP 45
12779: PUSH
12780: LD_INT 0
12782: ST_TO_ADDR
// sSpeed := false ;
12783: LD_ADDR_EXP 44
12787: PUSH
12788: LD_INT 0
12790: ST_TO_ADDR
// sEngine := false ;
12791: LD_ADDR_EXP 46
12795: PUSH
12796: LD_INT 0
12798: ST_TO_ADDR
// sSpec := false ;
12799: LD_ADDR_EXP 43
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// sLevel := false ;
12807: LD_ADDR_EXP 47
12811: PUSH
12812: LD_INT 0
12814: ST_TO_ADDR
// sArmoury := false ;
12815: LD_ADDR_EXP 48
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// sRadar := false ;
12823: LD_ADDR_EXP 49
12827: PUSH
12828: LD_INT 0
12830: ST_TO_ADDR
// sBunker := false ;
12831: LD_ADDR_EXP 50
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// sHack := false ;
12839: LD_ADDR_EXP 51
12843: PUSH
12844: LD_INT 0
12846: ST_TO_ADDR
// sFire := false ;
12847: LD_ADDR_EXP 52
12851: PUSH
12852: LD_INT 0
12854: ST_TO_ADDR
// sRefresh := false ;
12855: LD_ADDR_EXP 53
12859: PUSH
12860: LD_INT 0
12862: ST_TO_ADDR
// sExp := false ;
12863: LD_ADDR_EXP 54
12867: PUSH
12868: LD_INT 0
12870: ST_TO_ADDR
// sDepot := false ;
12871: LD_ADDR_EXP 55
12875: PUSH
12876: LD_INT 0
12878: ST_TO_ADDR
// sFlag := false ;
12879: LD_ADDR_EXP 56
12883: PUSH
12884: LD_INT 0
12886: ST_TO_ADDR
// sKamikadze := false ;
12887: LD_ADDR_EXP 64
12891: PUSH
12892: LD_INT 0
12894: ST_TO_ADDR
// sTroll := false ;
12895: LD_ADDR_EXP 65
12899: PUSH
12900: LD_INT 0
12902: ST_TO_ADDR
// sSlow := false ;
12903: LD_ADDR_EXP 66
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
// sLack := false ;
12911: LD_ADDR_EXP 67
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// sTank := false ;
12919: LD_ADDR_EXP 69
12923: PUSH
12924: LD_INT 0
12926: ST_TO_ADDR
// sRemote := false ;
12927: LD_ADDR_EXP 70
12931: PUSH
12932: LD_INT 0
12934: ST_TO_ADDR
// sPowell := false ;
12935: LD_ADDR_EXP 71
12939: PUSH
12940: LD_INT 0
12942: ST_TO_ADDR
// sTeleport := false ;
12943: LD_ADDR_EXP 74
12947: PUSH
12948: LD_INT 0
12950: ST_TO_ADDR
// sOilTower := false ;
12951: LD_ADDR_EXP 76
12955: PUSH
12956: LD_INT 0
12958: ST_TO_ADDR
// sShovel := false ;
12959: LD_ADDR_EXP 77
12963: PUSH
12964: LD_INT 0
12966: ST_TO_ADDR
// sSheik := false ;
12967: LD_ADDR_EXP 78
12971: PUSH
12972: LD_INT 0
12974: ST_TO_ADDR
// sEarthquake := false ;
12975: LD_ADDR_EXP 80
12979: PUSH
12980: LD_INT 0
12982: ST_TO_ADDR
// sAI := false ;
12983: LD_ADDR_EXP 81
12987: PUSH
12988: LD_INT 0
12990: ST_TO_ADDR
// sCargo := false ;
12991: LD_ADDR_EXP 84
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// sDLaser := false ;
12999: LD_ADDR_EXP 85
13003: PUSH
13004: LD_INT 0
13006: ST_TO_ADDR
// sExchange := false ;
13007: LD_ADDR_EXP 86
13011: PUSH
13012: LD_INT 0
13014: ST_TO_ADDR
// sFac := false ;
13015: LD_ADDR_EXP 87
13019: PUSH
13020: LD_INT 0
13022: ST_TO_ADDR
// sPower := false ;
13023: LD_ADDR_EXP 88
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// sRandom := false ;
13031: LD_ADDR_EXP 89
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// sShield := false ;
13039: LD_ADDR_EXP 90
13043: PUSH
13044: LD_INT 0
13046: ST_TO_ADDR
// sTime := false ;
13047: LD_ADDR_EXP 91
13051: PUSH
13052: LD_INT 0
13054: ST_TO_ADDR
// sTools := false ;
13055: LD_ADDR_EXP 92
13059: PUSH
13060: LD_INT 0
13062: ST_TO_ADDR
// sSold := false ;
13063: LD_ADDR_EXP 57
13067: PUSH
13068: LD_INT 0
13070: ST_TO_ADDR
// sDiff := false ;
13071: LD_ADDR_EXP 58
13075: PUSH
13076: LD_INT 0
13078: ST_TO_ADDR
// sFog := false ;
13079: LD_ADDR_EXP 61
13083: PUSH
13084: LD_INT 0
13086: ST_TO_ADDR
// sReset := false ;
13087: LD_ADDR_EXP 62
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// sSun := false ;
13095: LD_ADDR_EXP 63
13099: PUSH
13100: LD_INT 0
13102: ST_TO_ADDR
// sTiger := false ;
13103: LD_ADDR_EXP 59
13107: PUSH
13108: LD_INT 0
13110: ST_TO_ADDR
// sBomb := false ;
13111: LD_ADDR_EXP 60
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// sWound := false ;
13119: LD_ADDR_EXP 68
13123: PUSH
13124: LD_INT 0
13126: ST_TO_ADDR
// sBetray := false ;
13127: LD_ADDR_EXP 72
13131: PUSH
13132: LD_INT 0
13134: ST_TO_ADDR
// sContamin := false ;
13135: LD_ADDR_EXP 73
13139: PUSH
13140: LD_INT 0
13142: ST_TO_ADDR
// sOil := false ;
13143: LD_ADDR_EXP 75
13147: PUSH
13148: LD_INT 0
13150: ST_TO_ADDR
// sStu := false ;
13151: LD_ADDR_EXP 79
13155: PUSH
13156: LD_INT 0
13158: ST_TO_ADDR
// sBazooka := false ;
13159: LD_ADDR_EXP 82
13163: PUSH
13164: LD_INT 0
13166: ST_TO_ADDR
// sMortar := false ;
13167: LD_ADDR_EXP 83
13171: PUSH
13172: LD_INT 0
13174: ST_TO_ADDR
// sRanger := false ;
13175: LD_ADDR_EXP 93
13179: PUSH
13180: LD_INT 0
13182: ST_TO_ADDR
// sComputer := false ;
13183: LD_ADDR_EXP 94
13187: PUSH
13188: LD_INT 0
13190: ST_TO_ADDR
// s30 := false ;
13191: LD_ADDR_EXP 95
13195: PUSH
13196: LD_INT 0
13198: ST_TO_ADDR
// s60 := false ;
13199: LD_ADDR_EXP 96
13203: PUSH
13204: LD_INT 0
13206: ST_TO_ADDR
// end ;
13207: LD_VAR 0 1
13211: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13212: LD_INT 0
13214: PPUSH
13215: PPUSH
13216: PPUSH
13217: PPUSH
13218: PPUSH
// result := [ ] ;
13219: LD_ADDR_VAR 0 1
13223: PUSH
13224: EMPTY
13225: ST_TO_ADDR
// if campaign_id = 1 then
13226: LD_OWVAR 69
13230: PUSH
13231: LD_INT 1
13233: EQUAL
13234: IFFALSE 16400
// begin case mission_number of 1 :
13236: LD_OWVAR 70
13240: PUSH
13241: LD_INT 1
13243: DOUBLE
13244: EQUAL
13245: IFTRUE 13249
13247: GO 13325
13249: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13250: LD_ADDR_VAR 0 1
13254: PUSH
13255: LD_INT 2
13257: PUSH
13258: LD_INT 4
13260: PUSH
13261: LD_INT 11
13263: PUSH
13264: LD_INT 12
13266: PUSH
13267: LD_INT 15
13269: PUSH
13270: LD_INT 16
13272: PUSH
13273: LD_INT 22
13275: PUSH
13276: LD_INT 23
13278: PUSH
13279: LD_INT 26
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 101
13295: PUSH
13296: LD_INT 102
13298: PUSH
13299: LD_INT 106
13301: PUSH
13302: LD_INT 116
13304: PUSH
13305: LD_INT 117
13307: PUSH
13308: LD_INT 118
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: ST_TO_ADDR
13323: GO 16398
13325: LD_INT 2
13327: DOUBLE
13328: EQUAL
13329: IFTRUE 13333
13331: GO 13417
13333: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13334: LD_ADDR_VAR 0 1
13338: PUSH
13339: LD_INT 2
13341: PUSH
13342: LD_INT 4
13344: PUSH
13345: LD_INT 11
13347: PUSH
13348: LD_INT 12
13350: PUSH
13351: LD_INT 15
13353: PUSH
13354: LD_INT 16
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_INT 23
13362: PUSH
13363: LD_INT 26
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 101
13379: PUSH
13380: LD_INT 102
13382: PUSH
13383: LD_INT 105
13385: PUSH
13386: LD_INT 106
13388: PUSH
13389: LD_INT 108
13391: PUSH
13392: LD_INT 116
13394: PUSH
13395: LD_INT 117
13397: PUSH
13398: LD_INT 118
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: ST_TO_ADDR
13415: GO 16398
13417: LD_INT 3
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13513
13425: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13426: LD_ADDR_VAR 0 1
13430: PUSH
13431: LD_INT 2
13433: PUSH
13434: LD_INT 4
13436: PUSH
13437: LD_INT 5
13439: PUSH
13440: LD_INT 11
13442: PUSH
13443: LD_INT 12
13445: PUSH
13446: LD_INT 15
13448: PUSH
13449: LD_INT 16
13451: PUSH
13452: LD_INT 22
13454: PUSH
13455: LD_INT 26
13457: PUSH
13458: LD_INT 36
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 101
13475: PUSH
13476: LD_INT 102
13478: PUSH
13479: LD_INT 105
13481: PUSH
13482: LD_INT 106
13484: PUSH
13485: LD_INT 108
13487: PUSH
13488: LD_INT 116
13490: PUSH
13491: LD_INT 117
13493: PUSH
13494: LD_INT 118
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: ST_TO_ADDR
13511: GO 16398
13513: LD_INT 4
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13617
13521: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13522: LD_ADDR_VAR 0 1
13526: PUSH
13527: LD_INT 2
13529: PUSH
13530: LD_INT 4
13532: PUSH
13533: LD_INT 5
13535: PUSH
13536: LD_INT 8
13538: PUSH
13539: LD_INT 11
13541: PUSH
13542: LD_INT 12
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 22
13553: PUSH
13554: LD_INT 23
13556: PUSH
13557: LD_INT 26
13559: PUSH
13560: LD_INT 36
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 101
13579: PUSH
13580: LD_INT 102
13582: PUSH
13583: LD_INT 105
13585: PUSH
13586: LD_INT 106
13588: PUSH
13589: LD_INT 108
13591: PUSH
13592: LD_INT 116
13594: PUSH
13595: LD_INT 117
13597: PUSH
13598: LD_INT 118
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: ST_TO_ADDR
13615: GO 16398
13617: LD_INT 5
13619: DOUBLE
13620: EQUAL
13621: IFTRUE 13625
13623: GO 13737
13625: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13626: LD_ADDR_VAR 0 1
13630: PUSH
13631: LD_INT 2
13633: PUSH
13634: LD_INT 4
13636: PUSH
13637: LD_INT 5
13639: PUSH
13640: LD_INT 6
13642: PUSH
13643: LD_INT 8
13645: PUSH
13646: LD_INT 11
13648: PUSH
13649: LD_INT 12
13651: PUSH
13652: LD_INT 15
13654: PUSH
13655: LD_INT 16
13657: PUSH
13658: LD_INT 22
13660: PUSH
13661: LD_INT 23
13663: PUSH
13664: LD_INT 25
13666: PUSH
13667: LD_INT 26
13669: PUSH
13670: LD_INT 36
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 101
13691: PUSH
13692: LD_INT 102
13694: PUSH
13695: LD_INT 105
13697: PUSH
13698: LD_INT 106
13700: PUSH
13701: LD_INT 108
13703: PUSH
13704: LD_INT 109
13706: PUSH
13707: LD_INT 112
13709: PUSH
13710: LD_INT 116
13712: PUSH
13713: LD_INT 117
13715: PUSH
13716: LD_INT 118
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: ST_TO_ADDR
13735: GO 16398
13737: LD_INT 6
13739: DOUBLE
13740: EQUAL
13741: IFTRUE 13745
13743: GO 13877
13745: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13746: LD_ADDR_VAR 0 1
13750: PUSH
13751: LD_INT 2
13753: PUSH
13754: LD_INT 4
13756: PUSH
13757: LD_INT 5
13759: PUSH
13760: LD_INT 6
13762: PUSH
13763: LD_INT 8
13765: PUSH
13766: LD_INT 11
13768: PUSH
13769: LD_INT 12
13771: PUSH
13772: LD_INT 15
13774: PUSH
13775: LD_INT 16
13777: PUSH
13778: LD_INT 20
13780: PUSH
13781: LD_INT 21
13783: PUSH
13784: LD_INT 22
13786: PUSH
13787: LD_INT 23
13789: PUSH
13790: LD_INT 25
13792: PUSH
13793: LD_INT 26
13795: PUSH
13796: LD_INT 30
13798: PUSH
13799: LD_INT 31
13801: PUSH
13802: LD_INT 32
13804: PUSH
13805: LD_INT 36
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 101
13831: PUSH
13832: LD_INT 102
13834: PUSH
13835: LD_INT 105
13837: PUSH
13838: LD_INT 106
13840: PUSH
13841: LD_INT 108
13843: PUSH
13844: LD_INT 109
13846: PUSH
13847: LD_INT 112
13849: PUSH
13850: LD_INT 116
13852: PUSH
13853: LD_INT 117
13855: PUSH
13856: LD_INT 118
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: ST_TO_ADDR
13875: GO 16398
13877: LD_INT 7
13879: DOUBLE
13880: EQUAL
13881: IFTRUE 13885
13883: GO 13997
13885: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13886: LD_ADDR_VAR 0 1
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: LD_INT 4
13896: PUSH
13897: LD_INT 5
13899: PUSH
13900: LD_INT 7
13902: PUSH
13903: LD_INT 11
13905: PUSH
13906: LD_INT 12
13908: PUSH
13909: LD_INT 15
13911: PUSH
13912: LD_INT 16
13914: PUSH
13915: LD_INT 20
13917: PUSH
13918: LD_INT 21
13920: PUSH
13921: LD_INT 22
13923: PUSH
13924: LD_INT 23
13926: PUSH
13927: LD_INT 25
13929: PUSH
13930: LD_INT 26
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 101
13951: PUSH
13952: LD_INT 102
13954: PUSH
13955: LD_INT 103
13957: PUSH
13958: LD_INT 105
13960: PUSH
13961: LD_INT 106
13963: PUSH
13964: LD_INT 108
13966: PUSH
13967: LD_INT 112
13969: PUSH
13970: LD_INT 116
13972: PUSH
13973: LD_INT 117
13975: PUSH
13976: LD_INT 118
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: ST_TO_ADDR
13995: GO 16398
13997: LD_INT 8
13999: DOUBLE
14000: EQUAL
14001: IFTRUE 14005
14003: GO 14145
14005: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14006: LD_ADDR_VAR 0 1
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: LD_INT 4
14016: PUSH
14017: LD_INT 5
14019: PUSH
14020: LD_INT 6
14022: PUSH
14023: LD_INT 7
14025: PUSH
14026: LD_INT 8
14028: PUSH
14029: LD_INT 11
14031: PUSH
14032: LD_INT 12
14034: PUSH
14035: LD_INT 15
14037: PUSH
14038: LD_INT 16
14040: PUSH
14041: LD_INT 20
14043: PUSH
14044: LD_INT 21
14046: PUSH
14047: LD_INT 22
14049: PUSH
14050: LD_INT 23
14052: PUSH
14053: LD_INT 25
14055: PUSH
14056: LD_INT 26
14058: PUSH
14059: LD_INT 30
14061: PUSH
14062: LD_INT 31
14064: PUSH
14065: LD_INT 32
14067: PUSH
14068: LD_INT 36
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 101
14095: PUSH
14096: LD_INT 102
14098: PUSH
14099: LD_INT 103
14101: PUSH
14102: LD_INT 105
14104: PUSH
14105: LD_INT 106
14107: PUSH
14108: LD_INT 108
14110: PUSH
14111: LD_INT 109
14113: PUSH
14114: LD_INT 112
14116: PUSH
14117: LD_INT 116
14119: PUSH
14120: LD_INT 117
14122: PUSH
14123: LD_INT 118
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: ST_TO_ADDR
14143: GO 16398
14145: LD_INT 9
14147: DOUBLE
14148: EQUAL
14149: IFTRUE 14153
14151: GO 14301
14153: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14154: LD_ADDR_VAR 0 1
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: LD_INT 4
14164: PUSH
14165: LD_INT 5
14167: PUSH
14168: LD_INT 6
14170: PUSH
14171: LD_INT 7
14173: PUSH
14174: LD_INT 8
14176: PUSH
14177: LD_INT 11
14179: PUSH
14180: LD_INT 12
14182: PUSH
14183: LD_INT 15
14185: PUSH
14186: LD_INT 16
14188: PUSH
14189: LD_INT 20
14191: PUSH
14192: LD_INT 21
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 23
14200: PUSH
14201: LD_INT 25
14203: PUSH
14204: LD_INT 26
14206: PUSH
14207: LD_INT 28
14209: PUSH
14210: LD_INT 30
14212: PUSH
14213: LD_INT 31
14215: PUSH
14216: LD_INT 32
14218: PUSH
14219: LD_INT 36
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 101
14247: PUSH
14248: LD_INT 102
14250: PUSH
14251: LD_INT 103
14253: PUSH
14254: LD_INT 105
14256: PUSH
14257: LD_INT 106
14259: PUSH
14260: LD_INT 108
14262: PUSH
14263: LD_INT 109
14265: PUSH
14266: LD_INT 112
14268: PUSH
14269: LD_INT 114
14271: PUSH
14272: LD_INT 116
14274: PUSH
14275: LD_INT 117
14277: PUSH
14278: LD_INT 118
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: ST_TO_ADDR
14299: GO 16398
14301: LD_INT 10
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14505
14309: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14310: LD_ADDR_VAR 0 1
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: LD_INT 4
14320: PUSH
14321: LD_INT 5
14323: PUSH
14324: LD_INT 6
14326: PUSH
14327: LD_INT 7
14329: PUSH
14330: LD_INT 8
14332: PUSH
14333: LD_INT 9
14335: PUSH
14336: LD_INT 10
14338: PUSH
14339: LD_INT 11
14341: PUSH
14342: LD_INT 12
14344: PUSH
14345: LD_INT 13
14347: PUSH
14348: LD_INT 14
14350: PUSH
14351: LD_INT 15
14353: PUSH
14354: LD_INT 16
14356: PUSH
14357: LD_INT 17
14359: PUSH
14360: LD_INT 18
14362: PUSH
14363: LD_INT 19
14365: PUSH
14366: LD_INT 20
14368: PUSH
14369: LD_INT 21
14371: PUSH
14372: LD_INT 22
14374: PUSH
14375: LD_INT 23
14377: PUSH
14378: LD_INT 24
14380: PUSH
14381: LD_INT 25
14383: PUSH
14384: LD_INT 26
14386: PUSH
14387: LD_INT 28
14389: PUSH
14390: LD_INT 30
14392: PUSH
14393: LD_INT 31
14395: PUSH
14396: LD_INT 32
14398: PUSH
14399: LD_INT 36
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 101
14435: PUSH
14436: LD_INT 102
14438: PUSH
14439: LD_INT 103
14441: PUSH
14442: LD_INT 104
14444: PUSH
14445: LD_INT 105
14447: PUSH
14448: LD_INT 106
14450: PUSH
14451: LD_INT 107
14453: PUSH
14454: LD_INT 108
14456: PUSH
14457: LD_INT 109
14459: PUSH
14460: LD_INT 110
14462: PUSH
14463: LD_INT 111
14465: PUSH
14466: LD_INT 112
14468: PUSH
14469: LD_INT 114
14471: PUSH
14472: LD_INT 116
14474: PUSH
14475: LD_INT 117
14477: PUSH
14478: LD_INT 118
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: ST_TO_ADDR
14503: GO 16398
14505: LD_INT 11
14507: DOUBLE
14508: EQUAL
14509: IFTRUE 14513
14511: GO 14717
14513: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14514: LD_ADDR_VAR 0 1
14518: PUSH
14519: LD_INT 2
14521: PUSH
14522: LD_INT 3
14524: PUSH
14525: LD_INT 4
14527: PUSH
14528: LD_INT 5
14530: PUSH
14531: LD_INT 6
14533: PUSH
14534: LD_INT 7
14536: PUSH
14537: LD_INT 8
14539: PUSH
14540: LD_INT 9
14542: PUSH
14543: LD_INT 10
14545: PUSH
14546: LD_INT 11
14548: PUSH
14549: LD_INT 12
14551: PUSH
14552: LD_INT 13
14554: PUSH
14555: LD_INT 14
14557: PUSH
14558: LD_INT 15
14560: PUSH
14561: LD_INT 16
14563: PUSH
14564: LD_INT 17
14566: PUSH
14567: LD_INT 18
14569: PUSH
14570: LD_INT 19
14572: PUSH
14573: LD_INT 20
14575: PUSH
14576: LD_INT 21
14578: PUSH
14579: LD_INT 22
14581: PUSH
14582: LD_INT 23
14584: PUSH
14585: LD_INT 24
14587: PUSH
14588: LD_INT 25
14590: PUSH
14591: LD_INT 26
14593: PUSH
14594: LD_INT 28
14596: PUSH
14597: LD_INT 30
14599: PUSH
14600: LD_INT 31
14602: PUSH
14603: LD_INT 32
14605: PUSH
14606: LD_INT 34
14608: PUSH
14609: LD_INT 36
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: PUSH
14645: LD_INT 101
14647: PUSH
14648: LD_INT 102
14650: PUSH
14651: LD_INT 103
14653: PUSH
14654: LD_INT 104
14656: PUSH
14657: LD_INT 105
14659: PUSH
14660: LD_INT 106
14662: PUSH
14663: LD_INT 107
14665: PUSH
14666: LD_INT 108
14668: PUSH
14669: LD_INT 109
14671: PUSH
14672: LD_INT 110
14674: PUSH
14675: LD_INT 111
14677: PUSH
14678: LD_INT 112
14680: PUSH
14681: LD_INT 114
14683: PUSH
14684: LD_INT 116
14686: PUSH
14687: LD_INT 117
14689: PUSH
14690: LD_INT 118
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: ST_TO_ADDR
14715: GO 16398
14717: LD_INT 12
14719: DOUBLE
14720: EQUAL
14721: IFTRUE 14725
14723: GO 14945
14725: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14726: LD_ADDR_VAR 0 1
14730: PUSH
14731: LD_INT 1
14733: PUSH
14734: LD_INT 2
14736: PUSH
14737: LD_INT 3
14739: PUSH
14740: LD_INT 4
14742: PUSH
14743: LD_INT 5
14745: PUSH
14746: LD_INT 6
14748: PUSH
14749: LD_INT 7
14751: PUSH
14752: LD_INT 8
14754: PUSH
14755: LD_INT 9
14757: PUSH
14758: LD_INT 10
14760: PUSH
14761: LD_INT 11
14763: PUSH
14764: LD_INT 12
14766: PUSH
14767: LD_INT 13
14769: PUSH
14770: LD_INT 14
14772: PUSH
14773: LD_INT 15
14775: PUSH
14776: LD_INT 16
14778: PUSH
14779: LD_INT 17
14781: PUSH
14782: LD_INT 18
14784: PUSH
14785: LD_INT 19
14787: PUSH
14788: LD_INT 20
14790: PUSH
14791: LD_INT 21
14793: PUSH
14794: LD_INT 22
14796: PUSH
14797: LD_INT 23
14799: PUSH
14800: LD_INT 24
14802: PUSH
14803: LD_INT 25
14805: PUSH
14806: LD_INT 26
14808: PUSH
14809: LD_INT 27
14811: PUSH
14812: LD_INT 28
14814: PUSH
14815: LD_INT 30
14817: PUSH
14818: LD_INT 31
14820: PUSH
14821: LD_INT 32
14823: PUSH
14824: LD_INT 33
14826: PUSH
14827: LD_INT 34
14829: PUSH
14830: LD_INT 36
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 101
14871: PUSH
14872: LD_INT 102
14874: PUSH
14875: LD_INT 103
14877: PUSH
14878: LD_INT 104
14880: PUSH
14881: LD_INT 105
14883: PUSH
14884: LD_INT 106
14886: PUSH
14887: LD_INT 107
14889: PUSH
14890: LD_INT 108
14892: PUSH
14893: LD_INT 109
14895: PUSH
14896: LD_INT 110
14898: PUSH
14899: LD_INT 111
14901: PUSH
14902: LD_INT 112
14904: PUSH
14905: LD_INT 113
14907: PUSH
14908: LD_INT 114
14910: PUSH
14911: LD_INT 116
14913: PUSH
14914: LD_INT 117
14916: PUSH
14917: LD_INT 118
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: ST_TO_ADDR
14943: GO 16398
14945: LD_INT 13
14947: DOUBLE
14948: EQUAL
14949: IFTRUE 14953
14951: GO 15161
14953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14954: LD_ADDR_VAR 0 1
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: LD_INT 2
14964: PUSH
14965: LD_INT 3
14967: PUSH
14968: LD_INT 4
14970: PUSH
14971: LD_INT 5
14973: PUSH
14974: LD_INT 8
14976: PUSH
14977: LD_INT 9
14979: PUSH
14980: LD_INT 10
14982: PUSH
14983: LD_INT 11
14985: PUSH
14986: LD_INT 12
14988: PUSH
14989: LD_INT 14
14991: PUSH
14992: LD_INT 15
14994: PUSH
14995: LD_INT 16
14997: PUSH
14998: LD_INT 17
15000: PUSH
15001: LD_INT 18
15003: PUSH
15004: LD_INT 19
15006: PUSH
15007: LD_INT 20
15009: PUSH
15010: LD_INT 21
15012: PUSH
15013: LD_INT 22
15015: PUSH
15016: LD_INT 23
15018: PUSH
15019: LD_INT 24
15021: PUSH
15022: LD_INT 25
15024: PUSH
15025: LD_INT 26
15027: PUSH
15028: LD_INT 27
15030: PUSH
15031: LD_INT 28
15033: PUSH
15034: LD_INT 30
15036: PUSH
15037: LD_INT 31
15039: PUSH
15040: LD_INT 32
15042: PUSH
15043: LD_INT 33
15045: PUSH
15046: LD_INT 34
15048: PUSH
15049: LD_INT 36
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: PUSH
15085: LD_INT 101
15087: PUSH
15088: LD_INT 102
15090: PUSH
15091: LD_INT 103
15093: PUSH
15094: LD_INT 104
15096: PUSH
15097: LD_INT 105
15099: PUSH
15100: LD_INT 106
15102: PUSH
15103: LD_INT 107
15105: PUSH
15106: LD_INT 108
15108: PUSH
15109: LD_INT 109
15111: PUSH
15112: LD_INT 110
15114: PUSH
15115: LD_INT 111
15117: PUSH
15118: LD_INT 112
15120: PUSH
15121: LD_INT 113
15123: PUSH
15124: LD_INT 114
15126: PUSH
15127: LD_INT 116
15129: PUSH
15130: LD_INT 117
15132: PUSH
15133: LD_INT 118
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: ST_TO_ADDR
15159: GO 16398
15161: LD_INT 14
15163: DOUBLE
15164: EQUAL
15165: IFTRUE 15169
15167: GO 15393
15169: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_INT 1
15177: PUSH
15178: LD_INT 2
15180: PUSH
15181: LD_INT 3
15183: PUSH
15184: LD_INT 4
15186: PUSH
15187: LD_INT 5
15189: PUSH
15190: LD_INT 6
15192: PUSH
15193: LD_INT 7
15195: PUSH
15196: LD_INT 8
15198: PUSH
15199: LD_INT 9
15201: PUSH
15202: LD_INT 10
15204: PUSH
15205: LD_INT 11
15207: PUSH
15208: LD_INT 12
15210: PUSH
15211: LD_INT 13
15213: PUSH
15214: LD_INT 14
15216: PUSH
15217: LD_INT 15
15219: PUSH
15220: LD_INT 16
15222: PUSH
15223: LD_INT 17
15225: PUSH
15226: LD_INT 18
15228: PUSH
15229: LD_INT 19
15231: PUSH
15232: LD_INT 20
15234: PUSH
15235: LD_INT 21
15237: PUSH
15238: LD_INT 22
15240: PUSH
15241: LD_INT 23
15243: PUSH
15244: LD_INT 24
15246: PUSH
15247: LD_INT 25
15249: PUSH
15250: LD_INT 26
15252: PUSH
15253: LD_INT 27
15255: PUSH
15256: LD_INT 28
15258: PUSH
15259: LD_INT 29
15261: PUSH
15262: LD_INT 30
15264: PUSH
15265: LD_INT 31
15267: PUSH
15268: LD_INT 32
15270: PUSH
15271: LD_INT 33
15273: PUSH
15274: LD_INT 34
15276: PUSH
15277: LD_INT 36
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 101
15319: PUSH
15320: LD_INT 102
15322: PUSH
15323: LD_INT 103
15325: PUSH
15326: LD_INT 104
15328: PUSH
15329: LD_INT 105
15331: PUSH
15332: LD_INT 106
15334: PUSH
15335: LD_INT 107
15337: PUSH
15338: LD_INT 108
15340: PUSH
15341: LD_INT 109
15343: PUSH
15344: LD_INT 110
15346: PUSH
15347: LD_INT 111
15349: PUSH
15350: LD_INT 112
15352: PUSH
15353: LD_INT 113
15355: PUSH
15356: LD_INT 114
15358: PUSH
15359: LD_INT 116
15361: PUSH
15362: LD_INT 117
15364: PUSH
15365: LD_INT 118
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: ST_TO_ADDR
15391: GO 16398
15393: LD_INT 15
15395: DOUBLE
15396: EQUAL
15397: IFTRUE 15401
15399: GO 15625
15401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15402: LD_ADDR_VAR 0 1
15406: PUSH
15407: LD_INT 1
15409: PUSH
15410: LD_INT 2
15412: PUSH
15413: LD_INT 3
15415: PUSH
15416: LD_INT 4
15418: PUSH
15419: LD_INT 5
15421: PUSH
15422: LD_INT 6
15424: PUSH
15425: LD_INT 7
15427: PUSH
15428: LD_INT 8
15430: PUSH
15431: LD_INT 9
15433: PUSH
15434: LD_INT 10
15436: PUSH
15437: LD_INT 11
15439: PUSH
15440: LD_INT 12
15442: PUSH
15443: LD_INT 13
15445: PUSH
15446: LD_INT 14
15448: PUSH
15449: LD_INT 15
15451: PUSH
15452: LD_INT 16
15454: PUSH
15455: LD_INT 17
15457: PUSH
15458: LD_INT 18
15460: PUSH
15461: LD_INT 19
15463: PUSH
15464: LD_INT 20
15466: PUSH
15467: LD_INT 21
15469: PUSH
15470: LD_INT 22
15472: PUSH
15473: LD_INT 23
15475: PUSH
15476: LD_INT 24
15478: PUSH
15479: LD_INT 25
15481: PUSH
15482: LD_INT 26
15484: PUSH
15485: LD_INT 27
15487: PUSH
15488: LD_INT 28
15490: PUSH
15491: LD_INT 29
15493: PUSH
15494: LD_INT 30
15496: PUSH
15497: LD_INT 31
15499: PUSH
15500: LD_INT 32
15502: PUSH
15503: LD_INT 33
15505: PUSH
15506: LD_INT 34
15508: PUSH
15509: LD_INT 36
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 101
15551: PUSH
15552: LD_INT 102
15554: PUSH
15555: LD_INT 103
15557: PUSH
15558: LD_INT 104
15560: PUSH
15561: LD_INT 105
15563: PUSH
15564: LD_INT 106
15566: PUSH
15567: LD_INT 107
15569: PUSH
15570: LD_INT 108
15572: PUSH
15573: LD_INT 109
15575: PUSH
15576: LD_INT 110
15578: PUSH
15579: LD_INT 111
15581: PUSH
15582: LD_INT 112
15584: PUSH
15585: LD_INT 113
15587: PUSH
15588: LD_INT 114
15590: PUSH
15591: LD_INT 116
15593: PUSH
15594: LD_INT 117
15596: PUSH
15597: LD_INT 118
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: ST_TO_ADDR
15623: GO 16398
15625: LD_INT 16
15627: DOUBLE
15628: EQUAL
15629: IFTRUE 15633
15631: GO 15769
15633: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15634: LD_ADDR_VAR 0 1
15638: PUSH
15639: LD_INT 2
15641: PUSH
15642: LD_INT 4
15644: PUSH
15645: LD_INT 5
15647: PUSH
15648: LD_INT 7
15650: PUSH
15651: LD_INT 11
15653: PUSH
15654: LD_INT 12
15656: PUSH
15657: LD_INT 15
15659: PUSH
15660: LD_INT 16
15662: PUSH
15663: LD_INT 20
15665: PUSH
15666: LD_INT 21
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_INT 23
15674: PUSH
15675: LD_INT 25
15677: PUSH
15678: LD_INT 26
15680: PUSH
15681: LD_INT 30
15683: PUSH
15684: LD_INT 31
15686: PUSH
15687: LD_INT 32
15689: PUSH
15690: LD_INT 33
15692: PUSH
15693: LD_INT 34
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 101
15719: PUSH
15720: LD_INT 102
15722: PUSH
15723: LD_INT 103
15725: PUSH
15726: LD_INT 106
15728: PUSH
15729: LD_INT 108
15731: PUSH
15732: LD_INT 112
15734: PUSH
15735: LD_INT 113
15737: PUSH
15738: LD_INT 114
15740: PUSH
15741: LD_INT 116
15743: PUSH
15744: LD_INT 117
15746: PUSH
15747: LD_INT 118
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: ST_TO_ADDR
15767: GO 16398
15769: LD_INT 17
15771: DOUBLE
15772: EQUAL
15773: IFTRUE 15777
15775: GO 16001
15777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15778: LD_ADDR_VAR 0 1
15782: PUSH
15783: LD_INT 1
15785: PUSH
15786: LD_INT 2
15788: PUSH
15789: LD_INT 3
15791: PUSH
15792: LD_INT 4
15794: PUSH
15795: LD_INT 5
15797: PUSH
15798: LD_INT 6
15800: PUSH
15801: LD_INT 7
15803: PUSH
15804: LD_INT 8
15806: PUSH
15807: LD_INT 9
15809: PUSH
15810: LD_INT 10
15812: PUSH
15813: LD_INT 11
15815: PUSH
15816: LD_INT 12
15818: PUSH
15819: LD_INT 13
15821: PUSH
15822: LD_INT 14
15824: PUSH
15825: LD_INT 15
15827: PUSH
15828: LD_INT 16
15830: PUSH
15831: LD_INT 17
15833: PUSH
15834: LD_INT 18
15836: PUSH
15837: LD_INT 19
15839: PUSH
15840: LD_INT 20
15842: PUSH
15843: LD_INT 21
15845: PUSH
15846: LD_INT 22
15848: PUSH
15849: LD_INT 23
15851: PUSH
15852: LD_INT 24
15854: PUSH
15855: LD_INT 25
15857: PUSH
15858: LD_INT 26
15860: PUSH
15861: LD_INT 27
15863: PUSH
15864: LD_INT 28
15866: PUSH
15867: LD_INT 29
15869: PUSH
15870: LD_INT 30
15872: PUSH
15873: LD_INT 31
15875: PUSH
15876: LD_INT 32
15878: PUSH
15879: LD_INT 33
15881: PUSH
15882: LD_INT 34
15884: PUSH
15885: LD_INT 36
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 101
15927: PUSH
15928: LD_INT 102
15930: PUSH
15931: LD_INT 103
15933: PUSH
15934: LD_INT 104
15936: PUSH
15937: LD_INT 105
15939: PUSH
15940: LD_INT 106
15942: PUSH
15943: LD_INT 107
15945: PUSH
15946: LD_INT 108
15948: PUSH
15949: LD_INT 109
15951: PUSH
15952: LD_INT 110
15954: PUSH
15955: LD_INT 111
15957: PUSH
15958: LD_INT 112
15960: PUSH
15961: LD_INT 113
15963: PUSH
15964: LD_INT 114
15966: PUSH
15967: LD_INT 116
15969: PUSH
15970: LD_INT 117
15972: PUSH
15973: LD_INT 118
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: ST_TO_ADDR
15999: GO 16398
16001: LD_INT 18
16003: DOUBLE
16004: EQUAL
16005: IFTRUE 16009
16007: GO 16157
16009: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16010: LD_ADDR_VAR 0 1
16014: PUSH
16015: LD_INT 2
16017: PUSH
16018: LD_INT 4
16020: PUSH
16021: LD_INT 5
16023: PUSH
16024: LD_INT 7
16026: PUSH
16027: LD_INT 11
16029: PUSH
16030: LD_INT 12
16032: PUSH
16033: LD_INT 15
16035: PUSH
16036: LD_INT 16
16038: PUSH
16039: LD_INT 20
16041: PUSH
16042: LD_INT 21
16044: PUSH
16045: LD_INT 22
16047: PUSH
16048: LD_INT 23
16050: PUSH
16051: LD_INT 25
16053: PUSH
16054: LD_INT 26
16056: PUSH
16057: LD_INT 30
16059: PUSH
16060: LD_INT 31
16062: PUSH
16063: LD_INT 32
16065: PUSH
16066: LD_INT 33
16068: PUSH
16069: LD_INT 34
16071: PUSH
16072: LD_INT 35
16074: PUSH
16075: LD_INT 36
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 101
16103: PUSH
16104: LD_INT 102
16106: PUSH
16107: LD_INT 103
16109: PUSH
16110: LD_INT 106
16112: PUSH
16113: LD_INT 108
16115: PUSH
16116: LD_INT 112
16118: PUSH
16119: LD_INT 113
16121: PUSH
16122: LD_INT 114
16124: PUSH
16125: LD_INT 115
16127: PUSH
16128: LD_INT 116
16130: PUSH
16131: LD_INT 117
16133: PUSH
16134: LD_INT 118
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: ST_TO_ADDR
16155: GO 16398
16157: LD_INT 19
16159: DOUBLE
16160: EQUAL
16161: IFTRUE 16165
16163: GO 16397
16165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16166: LD_ADDR_VAR 0 1
16170: PUSH
16171: LD_INT 1
16173: PUSH
16174: LD_INT 2
16176: PUSH
16177: LD_INT 3
16179: PUSH
16180: LD_INT 4
16182: PUSH
16183: LD_INT 5
16185: PUSH
16186: LD_INT 6
16188: PUSH
16189: LD_INT 7
16191: PUSH
16192: LD_INT 8
16194: PUSH
16195: LD_INT 9
16197: PUSH
16198: LD_INT 10
16200: PUSH
16201: LD_INT 11
16203: PUSH
16204: LD_INT 12
16206: PUSH
16207: LD_INT 13
16209: PUSH
16210: LD_INT 14
16212: PUSH
16213: LD_INT 15
16215: PUSH
16216: LD_INT 16
16218: PUSH
16219: LD_INT 17
16221: PUSH
16222: LD_INT 18
16224: PUSH
16225: LD_INT 19
16227: PUSH
16228: LD_INT 20
16230: PUSH
16231: LD_INT 21
16233: PUSH
16234: LD_INT 22
16236: PUSH
16237: LD_INT 23
16239: PUSH
16240: LD_INT 24
16242: PUSH
16243: LD_INT 25
16245: PUSH
16246: LD_INT 26
16248: PUSH
16249: LD_INT 27
16251: PUSH
16252: LD_INT 28
16254: PUSH
16255: LD_INT 29
16257: PUSH
16258: LD_INT 30
16260: PUSH
16261: LD_INT 31
16263: PUSH
16264: LD_INT 32
16266: PUSH
16267: LD_INT 33
16269: PUSH
16270: LD_INT 34
16272: PUSH
16273: LD_INT 35
16275: PUSH
16276: LD_INT 36
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 101
16319: PUSH
16320: LD_INT 102
16322: PUSH
16323: LD_INT 103
16325: PUSH
16326: LD_INT 104
16328: PUSH
16329: LD_INT 105
16331: PUSH
16332: LD_INT 106
16334: PUSH
16335: LD_INT 107
16337: PUSH
16338: LD_INT 108
16340: PUSH
16341: LD_INT 109
16343: PUSH
16344: LD_INT 110
16346: PUSH
16347: LD_INT 111
16349: PUSH
16350: LD_INT 112
16352: PUSH
16353: LD_INT 113
16355: PUSH
16356: LD_INT 114
16358: PUSH
16359: LD_INT 115
16361: PUSH
16362: LD_INT 116
16364: PUSH
16365: LD_INT 117
16367: PUSH
16368: LD_INT 118
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: ST_TO_ADDR
16395: GO 16398
16397: POP
// end else
16398: GO 16629
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16400: LD_ADDR_VAR 0 1
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: LD_INT 2
16410: PUSH
16411: LD_INT 3
16413: PUSH
16414: LD_INT 4
16416: PUSH
16417: LD_INT 5
16419: PUSH
16420: LD_INT 6
16422: PUSH
16423: LD_INT 7
16425: PUSH
16426: LD_INT 8
16428: PUSH
16429: LD_INT 9
16431: PUSH
16432: LD_INT 10
16434: PUSH
16435: LD_INT 11
16437: PUSH
16438: LD_INT 12
16440: PUSH
16441: LD_INT 13
16443: PUSH
16444: LD_INT 14
16446: PUSH
16447: LD_INT 15
16449: PUSH
16450: LD_INT 16
16452: PUSH
16453: LD_INT 17
16455: PUSH
16456: LD_INT 18
16458: PUSH
16459: LD_INT 19
16461: PUSH
16462: LD_INT 20
16464: PUSH
16465: LD_INT 21
16467: PUSH
16468: LD_INT 22
16470: PUSH
16471: LD_INT 23
16473: PUSH
16474: LD_INT 24
16476: PUSH
16477: LD_INT 25
16479: PUSH
16480: LD_INT 26
16482: PUSH
16483: LD_INT 27
16485: PUSH
16486: LD_INT 28
16488: PUSH
16489: LD_INT 29
16491: PUSH
16492: LD_INT 30
16494: PUSH
16495: LD_INT 31
16497: PUSH
16498: LD_INT 32
16500: PUSH
16501: LD_INT 33
16503: PUSH
16504: LD_INT 34
16506: PUSH
16507: LD_INT 35
16509: PUSH
16510: LD_INT 36
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 101
16553: PUSH
16554: LD_INT 102
16556: PUSH
16557: LD_INT 103
16559: PUSH
16560: LD_INT 104
16562: PUSH
16563: LD_INT 105
16565: PUSH
16566: LD_INT 106
16568: PUSH
16569: LD_INT 107
16571: PUSH
16572: LD_INT 108
16574: PUSH
16575: LD_INT 109
16577: PUSH
16578: LD_INT 110
16580: PUSH
16581: LD_INT 111
16583: PUSH
16584: LD_INT 112
16586: PUSH
16587: LD_INT 113
16589: PUSH
16590: LD_INT 114
16592: PUSH
16593: LD_INT 115
16595: PUSH
16596: LD_INT 116
16598: PUSH
16599: LD_INT 117
16601: PUSH
16602: LD_INT 118
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: ST_TO_ADDR
// if result then
16629: LD_VAR 0 1
16633: IFFALSE 16922
// begin normal :=  ;
16635: LD_ADDR_VAR 0 3
16639: PUSH
16640: LD_STRING 
16642: ST_TO_ADDR
// hardcore :=  ;
16643: LD_ADDR_VAR 0 4
16647: PUSH
16648: LD_STRING 
16650: ST_TO_ADDR
// for i = 1 to normalCounter do
16651: LD_ADDR_VAR 0 5
16655: PUSH
16656: DOUBLE
16657: LD_INT 1
16659: DEC
16660: ST_TO_ADDR
16661: LD_EXP 41
16665: PUSH
16666: FOR_TO
16667: IFFALSE 16768
// begin tmp := 0 ;
16669: LD_ADDR_VAR 0 2
16673: PUSH
16674: LD_STRING 0
16676: ST_TO_ADDR
// if result [ 1 ] then
16677: LD_VAR 0 1
16681: PUSH
16682: LD_INT 1
16684: ARRAY
16685: IFFALSE 16750
// if result [ 1 ] [ 1 ] = i then
16687: LD_VAR 0 1
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: PUSH
16696: LD_INT 1
16698: ARRAY
16699: PUSH
16700: LD_VAR 0 5
16704: EQUAL
16705: IFFALSE 16750
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16707: LD_ADDR_VAR 0 1
16711: PUSH
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: LD_VAR 0 1
16724: PUSH
16725: LD_INT 1
16727: ARRAY
16728: PPUSH
16729: LD_INT 1
16731: PPUSH
16732: CALL_OW 3
16736: PPUSH
16737: CALL_OW 1
16741: ST_TO_ADDR
// tmp := 1 ;
16742: LD_ADDR_VAR 0 2
16746: PUSH
16747: LD_STRING 1
16749: ST_TO_ADDR
// end ; normal := normal & tmp ;
16750: LD_ADDR_VAR 0 3
16754: PUSH
16755: LD_VAR 0 3
16759: PUSH
16760: LD_VAR 0 2
16764: STR
16765: ST_TO_ADDR
// end ;
16766: GO 16666
16768: POP
16769: POP
// for i = 1 to hardcoreCounter do
16770: LD_ADDR_VAR 0 5
16774: PUSH
16775: DOUBLE
16776: LD_INT 1
16778: DEC
16779: ST_TO_ADDR
16780: LD_EXP 42
16784: PUSH
16785: FOR_TO
16786: IFFALSE 16891
// begin tmp := 0 ;
16788: LD_ADDR_VAR 0 2
16792: PUSH
16793: LD_STRING 0
16795: ST_TO_ADDR
// if result [ 2 ] then
16796: LD_VAR 0 1
16800: PUSH
16801: LD_INT 2
16803: ARRAY
16804: IFFALSE 16873
// if result [ 2 ] [ 1 ] = 100 + i then
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 2
16813: ARRAY
16814: PUSH
16815: LD_INT 1
16817: ARRAY
16818: PUSH
16819: LD_INT 100
16821: PUSH
16822: LD_VAR 0 5
16826: PLUS
16827: EQUAL
16828: IFFALSE 16873
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16830: LD_ADDR_VAR 0 1
16834: PUSH
16835: LD_VAR 0 1
16839: PPUSH
16840: LD_INT 2
16842: PPUSH
16843: LD_VAR 0 1
16847: PUSH
16848: LD_INT 2
16850: ARRAY
16851: PPUSH
16852: LD_INT 1
16854: PPUSH
16855: CALL_OW 3
16859: PPUSH
16860: CALL_OW 1
16864: ST_TO_ADDR
// tmp := 1 ;
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: LD_STRING 1
16872: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16873: LD_ADDR_VAR 0 4
16877: PUSH
16878: LD_VAR 0 4
16882: PUSH
16883: LD_VAR 0 2
16887: STR
16888: ST_TO_ADDR
// end ;
16889: GO 16785
16891: POP
16892: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16893: LD_STRING getStreamItemsFromMission("
16895: PUSH
16896: LD_VAR 0 3
16900: STR
16901: PUSH
16902: LD_STRING ","
16904: STR
16905: PUSH
16906: LD_VAR 0 4
16910: STR
16911: PUSH
16912: LD_STRING ")
16914: STR
16915: PPUSH
16916: CALL_OW 559
// end else
16920: GO 16929
// ToLua ( getStreamItemsFromMission("","") ) ;
16922: LD_STRING getStreamItemsFromMission("","")
16924: PPUSH
16925: CALL_OW 559
// end ;
16929: LD_VAR 0 1
16933: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16934: LD_EXP 40
16938: PUSH
16939: LD_EXP 45
16943: AND
16944: IFFALSE 17068
16946: GO 16948
16948: DISABLE
16949: LD_INT 0
16951: PPUSH
16952: PPUSH
// begin enable ;
16953: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16954: LD_ADDR_VAR 0 2
16958: PUSH
16959: LD_INT 22
16961: PUSH
16962: LD_OWVAR 2
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 2
16973: PUSH
16974: LD_INT 34
16976: PUSH
16977: LD_INT 7
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 34
16986: PUSH
16987: LD_INT 45
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 34
16996: PUSH
16997: LD_INT 28
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 34
17006: PUSH
17007: LD_INT 47
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PPUSH
17025: CALL_OW 69
17029: ST_TO_ADDR
// if not tmp then
17030: LD_VAR 0 2
17034: NOT
17035: IFFALSE 17039
// exit ;
17037: GO 17068
// for i in tmp do
17039: LD_ADDR_VAR 0 1
17043: PUSH
17044: LD_VAR 0 2
17048: PUSH
17049: FOR_IN
17050: IFFALSE 17066
// begin SetLives ( i , 0 ) ;
17052: LD_VAR 0 1
17056: PPUSH
17057: LD_INT 0
17059: PPUSH
17060: CALL_OW 234
// end ;
17064: GO 17049
17066: POP
17067: POP
// end ;
17068: PPOPN 2
17070: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17071: LD_EXP 40
17075: PUSH
17076: LD_EXP 46
17080: AND
17081: IFFALSE 17165
17083: GO 17085
17085: DISABLE
17086: LD_INT 0
17088: PPUSH
17089: PPUSH
// begin enable ;
17090: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17091: LD_ADDR_VAR 0 2
17095: PUSH
17096: LD_INT 22
17098: PUSH
17099: LD_OWVAR 2
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 32
17110: PUSH
17111: LD_INT 3
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PPUSH
17122: CALL_OW 69
17126: ST_TO_ADDR
// if not tmp then
17127: LD_VAR 0 2
17131: NOT
17132: IFFALSE 17136
// exit ;
17134: GO 17165
// for i in tmp do
17136: LD_ADDR_VAR 0 1
17140: PUSH
17141: LD_VAR 0 2
17145: PUSH
17146: FOR_IN
17147: IFFALSE 17163
// begin SetLives ( i , 0 ) ;
17149: LD_VAR 0 1
17153: PPUSH
17154: LD_INT 0
17156: PPUSH
17157: CALL_OW 234
// end ;
17161: GO 17146
17163: POP
17164: POP
// end ;
17165: PPOPN 2
17167: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17168: LD_EXP 40
17172: PUSH
17173: LD_EXP 43
17177: AND
17178: IFFALSE 17271
17180: GO 17182
17182: DISABLE
17183: LD_INT 0
17185: PPUSH
// begin enable ;
17186: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_OWVAR 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 25
17209: PUSH
17210: LD_INT 5
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 25
17219: PUSH
17220: LD_INT 9
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 25
17229: PUSH
17230: LD_INT 8
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PPUSH
17247: CALL_OW 69
17251: PUSH
17252: FOR_IN
17253: IFFALSE 17269
// begin SetClass ( i , 1 ) ;
17255: LD_VAR 0 1
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL_OW 336
// end ;
17267: GO 17252
17269: POP
17270: POP
// end ;
17271: PPOPN 1
17273: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17274: LD_EXP 40
17278: PUSH
17279: LD_EXP 44
17283: AND
17284: PUSH
17285: LD_OWVAR 65
17289: PUSH
17290: LD_INT 7
17292: LESS
17293: AND
17294: IFFALSE 17308
17296: GO 17298
17298: DISABLE
// begin enable ;
17299: ENABLE
// game_speed := 7 ;
17300: LD_ADDR_OWVAR 65
17304: PUSH
17305: LD_INT 7
17307: ST_TO_ADDR
// end ;
17308: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17309: LD_EXP 40
17313: PUSH
17314: LD_EXP 47
17318: AND
17319: IFFALSE 17521
17321: GO 17323
17323: DISABLE
17324: LD_INT 0
17326: PPUSH
17327: PPUSH
17328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17329: LD_ADDR_VAR 0 3
17333: PUSH
17334: LD_INT 81
17336: PUSH
17337: LD_OWVAR 2
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 21
17348: PUSH
17349: LD_INT 1
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PPUSH
17360: CALL_OW 69
17364: ST_TO_ADDR
// if not tmp then
17365: LD_VAR 0 3
17369: NOT
17370: IFFALSE 17374
// exit ;
17372: GO 17521
// if tmp > 5 then
17374: LD_VAR 0 3
17378: PUSH
17379: LD_INT 5
17381: GREATER
17382: IFFALSE 17394
// k := 5 else
17384: LD_ADDR_VAR 0 2
17388: PUSH
17389: LD_INT 5
17391: ST_TO_ADDR
17392: GO 17404
// k := tmp ;
17394: LD_ADDR_VAR 0 2
17398: PUSH
17399: LD_VAR 0 3
17403: ST_TO_ADDR
// for i := 1 to k do
17404: LD_ADDR_VAR 0 1
17408: PUSH
17409: DOUBLE
17410: LD_INT 1
17412: DEC
17413: ST_TO_ADDR
17414: LD_VAR 0 2
17418: PUSH
17419: FOR_TO
17420: IFFALSE 17519
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17422: LD_VAR 0 3
17426: PUSH
17427: LD_VAR 0 1
17431: ARRAY
17432: PPUSH
17433: LD_VAR 0 1
17437: PUSH
17438: LD_INT 4
17440: MOD
17441: PUSH
17442: LD_INT 1
17444: PLUS
17445: PPUSH
17446: CALL_OW 259
17450: PUSH
17451: LD_INT 10
17453: LESS
17454: IFFALSE 17517
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17456: LD_VAR 0 3
17460: PUSH
17461: LD_VAR 0 1
17465: ARRAY
17466: PPUSH
17467: LD_VAR 0 1
17471: PUSH
17472: LD_INT 4
17474: MOD
17475: PUSH
17476: LD_INT 1
17478: PLUS
17479: PPUSH
17480: LD_VAR 0 3
17484: PUSH
17485: LD_VAR 0 1
17489: ARRAY
17490: PPUSH
17491: LD_VAR 0 1
17495: PUSH
17496: LD_INT 4
17498: MOD
17499: PUSH
17500: LD_INT 1
17502: PLUS
17503: PPUSH
17504: CALL_OW 259
17508: PUSH
17509: LD_INT 1
17511: PLUS
17512: PPUSH
17513: CALL_OW 237
17517: GO 17419
17519: POP
17520: POP
// end ;
17521: PPOPN 3
17523: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17524: LD_EXP 40
17528: PUSH
17529: LD_EXP 48
17533: AND
17534: IFFALSE 17554
17536: GO 17538
17538: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17539: LD_INT 4
17541: PPUSH
17542: LD_OWVAR 2
17546: PPUSH
17547: LD_INT 0
17549: PPUSH
17550: CALL_OW 324
17554: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17555: LD_EXP 40
17559: PUSH
17560: LD_EXP 77
17564: AND
17565: IFFALSE 17585
17567: GO 17569
17569: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17570: LD_INT 19
17572: PPUSH
17573: LD_OWVAR 2
17577: PPUSH
17578: LD_INT 0
17580: PPUSH
17581: CALL_OW 324
17585: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17586: LD_EXP 40
17590: PUSH
17591: LD_EXP 49
17595: AND
17596: IFFALSE 17698
17598: GO 17600
17600: DISABLE
17601: LD_INT 0
17603: PPUSH
17604: PPUSH
// begin enable ;
17605: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17606: LD_ADDR_VAR 0 2
17610: PUSH
17611: LD_INT 22
17613: PUSH
17614: LD_OWVAR 2
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 2
17625: PUSH
17626: LD_INT 34
17628: PUSH
17629: LD_INT 11
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 34
17638: PUSH
17639: LD_INT 30
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PPUSH
17655: CALL_OW 69
17659: ST_TO_ADDR
// if not tmp then
17660: LD_VAR 0 2
17664: NOT
17665: IFFALSE 17669
// exit ;
17667: GO 17698
// for i in tmp do
17669: LD_ADDR_VAR 0 1
17673: PUSH
17674: LD_VAR 0 2
17678: PUSH
17679: FOR_IN
17680: IFFALSE 17696
// begin SetLives ( i , 0 ) ;
17682: LD_VAR 0 1
17686: PPUSH
17687: LD_INT 0
17689: PPUSH
17690: CALL_OW 234
// end ;
17694: GO 17679
17696: POP
17697: POP
// end ;
17698: PPOPN 2
17700: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17701: LD_EXP 40
17705: PUSH
17706: LD_EXP 50
17710: AND
17711: IFFALSE 17731
17713: GO 17715
17715: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17716: LD_INT 32
17718: PPUSH
17719: LD_OWVAR 2
17723: PPUSH
17724: LD_INT 0
17726: PPUSH
17727: CALL_OW 324
17731: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17732: LD_EXP 40
17736: PUSH
17737: LD_EXP 51
17741: AND
17742: IFFALSE 17923
17744: GO 17746
17746: DISABLE
17747: LD_INT 0
17749: PPUSH
17750: PPUSH
17751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17752: LD_ADDR_VAR 0 2
17756: PUSH
17757: LD_INT 22
17759: PUSH
17760: LD_OWVAR 2
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 33
17771: PUSH
17772: LD_INT 3
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PPUSH
17783: CALL_OW 69
17787: ST_TO_ADDR
// if not tmp then
17788: LD_VAR 0 2
17792: NOT
17793: IFFALSE 17797
// exit ;
17795: GO 17923
// side := 0 ;
17797: LD_ADDR_VAR 0 3
17801: PUSH
17802: LD_INT 0
17804: ST_TO_ADDR
// for i := 1 to 8 do
17805: LD_ADDR_VAR 0 1
17809: PUSH
17810: DOUBLE
17811: LD_INT 1
17813: DEC
17814: ST_TO_ADDR
17815: LD_INT 8
17817: PUSH
17818: FOR_TO
17819: IFFALSE 17867
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17821: LD_OWVAR 2
17825: PUSH
17826: LD_VAR 0 1
17830: NONEQUAL
17831: PUSH
17832: LD_OWVAR 2
17836: PPUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 81
17846: PUSH
17847: LD_INT 2
17849: EQUAL
17850: AND
17851: IFFALSE 17865
// begin side := i ;
17853: LD_ADDR_VAR 0 3
17857: PUSH
17858: LD_VAR 0 1
17862: ST_TO_ADDR
// break ;
17863: GO 17867
// end ;
17865: GO 17818
17867: POP
17868: POP
// if not side then
17869: LD_VAR 0 3
17873: NOT
17874: IFFALSE 17878
// exit ;
17876: GO 17923
// for i := 1 to tmp do
17878: LD_ADDR_VAR 0 1
17882: PUSH
17883: DOUBLE
17884: LD_INT 1
17886: DEC
17887: ST_TO_ADDR
17888: LD_VAR 0 2
17892: PUSH
17893: FOR_TO
17894: IFFALSE 17921
// if Prob ( 60 ) then
17896: LD_INT 60
17898: PPUSH
17899: CALL_OW 13
17903: IFFALSE 17919
// SetSide ( i , side ) ;
17905: LD_VAR 0 1
17909: PPUSH
17910: LD_VAR 0 3
17914: PPUSH
17915: CALL_OW 235
17919: GO 17893
17921: POP
17922: POP
// end ;
17923: PPOPN 3
17925: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17926: LD_EXP 40
17930: PUSH
17931: LD_EXP 53
17935: AND
17936: IFFALSE 18055
17938: GO 17940
17940: DISABLE
17941: LD_INT 0
17943: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17944: LD_ADDR_VAR 0 1
17948: PUSH
17949: LD_INT 22
17951: PUSH
17952: LD_OWVAR 2
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 21
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 3
17973: PUSH
17974: LD_INT 23
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: PPUSH
17993: CALL_OW 69
17997: PUSH
17998: FOR_IN
17999: IFFALSE 18053
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 257
18010: PUSH
18011: LD_INT 1
18013: PUSH
18014: LD_INT 2
18016: PUSH
18017: LD_INT 3
18019: PUSH
18020: LD_INT 4
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: IN
18029: IFFALSE 18051
// SetClass ( un , rand ( 1 , 4 ) ) ;
18031: LD_VAR 0 1
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: LD_INT 4
18041: PPUSH
18042: CALL_OW 12
18046: PPUSH
18047: CALL_OW 336
18051: GO 17998
18053: POP
18054: POP
// end ;
18055: PPOPN 1
18057: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18058: LD_EXP 40
18062: PUSH
18063: LD_EXP 52
18067: AND
18068: IFFALSE 18147
18070: GO 18072
18072: DISABLE
18073: LD_INT 0
18075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18076: LD_ADDR_VAR 0 1
18080: PUSH
18081: LD_INT 22
18083: PUSH
18084: LD_OWVAR 2
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 21
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PPUSH
18107: CALL_OW 69
18111: ST_TO_ADDR
// if not tmp then
18112: LD_VAR 0 1
18116: NOT
18117: IFFALSE 18121
// exit ;
18119: GO 18147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18121: LD_VAR 0 1
18125: PUSH
18126: LD_INT 1
18128: PPUSH
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 12
18138: ARRAY
18139: PPUSH
18140: LD_INT 100
18142: PPUSH
18143: CALL_OW 234
// end ;
18147: PPOPN 1
18149: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18150: LD_EXP 40
18154: PUSH
18155: LD_EXP 54
18159: AND
18160: IFFALSE 18258
18162: GO 18164
18164: DISABLE
18165: LD_INT 0
18167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18168: LD_ADDR_VAR 0 1
18172: PUSH
18173: LD_INT 22
18175: PUSH
18176: LD_OWVAR 2
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 21
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PPUSH
18199: CALL_OW 69
18203: ST_TO_ADDR
// if not tmp then
18204: LD_VAR 0 1
18208: NOT
18209: IFFALSE 18213
// exit ;
18211: GO 18258
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18213: LD_VAR 0 1
18217: PUSH
18218: LD_INT 1
18220: PPUSH
18221: LD_VAR 0 1
18225: PPUSH
18226: CALL_OW 12
18230: ARRAY
18231: PPUSH
18232: LD_INT 1
18234: PPUSH
18235: LD_INT 4
18237: PPUSH
18238: CALL_OW 12
18242: PPUSH
18243: LD_INT 3000
18245: PPUSH
18246: LD_INT 9000
18248: PPUSH
18249: CALL_OW 12
18253: PPUSH
18254: CALL_OW 492
// end ;
18258: PPOPN 1
18260: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18261: LD_EXP 40
18265: PUSH
18266: LD_EXP 55
18270: AND
18271: IFFALSE 18291
18273: GO 18275
18275: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18276: LD_INT 1
18278: PPUSH
18279: LD_OWVAR 2
18283: PPUSH
18284: LD_INT 0
18286: PPUSH
18287: CALL_OW 324
18291: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18292: LD_EXP 40
18296: PUSH
18297: LD_EXP 56
18301: AND
18302: IFFALSE 18385
18304: GO 18306
18306: DISABLE
18307: LD_INT 0
18309: PPUSH
18310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18311: LD_ADDR_VAR 0 2
18315: PUSH
18316: LD_INT 22
18318: PUSH
18319: LD_OWVAR 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 21
18330: PUSH
18331: LD_INT 3
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PPUSH
18342: CALL_OW 69
18346: ST_TO_ADDR
// if not tmp then
18347: LD_VAR 0 2
18351: NOT
18352: IFFALSE 18356
// exit ;
18354: GO 18385
// for i in tmp do
18356: LD_ADDR_VAR 0 1
18360: PUSH
18361: LD_VAR 0 2
18365: PUSH
18366: FOR_IN
18367: IFFALSE 18383
// SetBLevel ( i , 10 ) ;
18369: LD_VAR 0 1
18373: PPUSH
18374: LD_INT 10
18376: PPUSH
18377: CALL_OW 241
18381: GO 18366
18383: POP
18384: POP
// end ;
18385: PPOPN 2
18387: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18388: LD_EXP 40
18392: PUSH
18393: LD_EXP 57
18397: AND
18398: IFFALSE 18509
18400: GO 18402
18402: DISABLE
18403: LD_INT 0
18405: PPUSH
18406: PPUSH
18407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18408: LD_ADDR_VAR 0 3
18412: PUSH
18413: LD_INT 22
18415: PUSH
18416: LD_OWVAR 2
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 25
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PPUSH
18439: CALL_OW 69
18443: ST_TO_ADDR
// if not tmp then
18444: LD_VAR 0 3
18448: NOT
18449: IFFALSE 18453
// exit ;
18451: GO 18509
// un := tmp [ rand ( 1 , tmp ) ] ;
18453: LD_ADDR_VAR 0 2
18457: PUSH
18458: LD_VAR 0 3
18462: PUSH
18463: LD_INT 1
18465: PPUSH
18466: LD_VAR 0 3
18470: PPUSH
18471: CALL_OW 12
18475: ARRAY
18476: ST_TO_ADDR
// if Crawls ( un ) then
18477: LD_VAR 0 2
18481: PPUSH
18482: CALL_OW 318
18486: IFFALSE 18497
// ComWalk ( un ) ;
18488: LD_VAR 0 2
18492: PPUSH
18493: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18497: LD_VAR 0 2
18501: PPUSH
18502: LD_INT 5
18504: PPUSH
18505: CALL_OW 336
// end ;
18509: PPOPN 3
18511: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18512: LD_EXP 40
18516: PUSH
18517: LD_EXP 58
18521: AND
18522: PUSH
18523: LD_OWVAR 67
18527: PUSH
18528: LD_INT 4
18530: LESS
18531: AND
18532: IFFALSE 18551
18534: GO 18536
18536: DISABLE
// begin Difficulty := Difficulty + 1 ;
18537: LD_ADDR_OWVAR 67
18541: PUSH
18542: LD_OWVAR 67
18546: PUSH
18547: LD_INT 1
18549: PLUS
18550: ST_TO_ADDR
// end ;
18551: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18552: LD_EXP 40
18556: PUSH
18557: LD_EXP 59
18561: AND
18562: IFFALSE 18665
18564: GO 18566
18566: DISABLE
18567: LD_INT 0
18569: PPUSH
// begin for i := 1 to 5 do
18570: LD_ADDR_VAR 0 1
18574: PUSH
18575: DOUBLE
18576: LD_INT 1
18578: DEC
18579: ST_TO_ADDR
18580: LD_INT 5
18582: PUSH
18583: FOR_TO
18584: IFFALSE 18663
// begin uc_nation := nation_nature ;
18586: LD_ADDR_OWVAR 21
18590: PUSH
18591: LD_INT 0
18593: ST_TO_ADDR
// uc_side := 0 ;
18594: LD_ADDR_OWVAR 20
18598: PUSH
18599: LD_INT 0
18601: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18602: LD_ADDR_OWVAR 29
18606: PUSH
18607: LD_INT 12
18609: PUSH
18610: LD_INT 12
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: ST_TO_ADDR
// hc_agressivity := 20 ;
18617: LD_ADDR_OWVAR 35
18621: PUSH
18622: LD_INT 20
18624: ST_TO_ADDR
// hc_class := class_tiger ;
18625: LD_ADDR_OWVAR 28
18629: PUSH
18630: LD_INT 14
18632: ST_TO_ADDR
// hc_gallery :=  ;
18633: LD_ADDR_OWVAR 33
18637: PUSH
18638: LD_STRING 
18640: ST_TO_ADDR
// hc_name :=  ;
18641: LD_ADDR_OWVAR 26
18645: PUSH
18646: LD_STRING 
18648: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18649: CALL_OW 44
18653: PPUSH
18654: LD_INT 0
18656: PPUSH
18657: CALL_OW 51
// end ;
18661: GO 18583
18663: POP
18664: POP
// end ;
18665: PPOPN 1
18667: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18668: LD_EXP 40
18672: PUSH
18673: LD_EXP 60
18677: AND
18678: IFFALSE 18687
18680: GO 18682
18682: DISABLE
// StreamSibBomb ;
18683: CALL 18688 0 0
18687: END
// export function StreamSibBomb ; var i , x , y ; begin
18688: LD_INT 0
18690: PPUSH
18691: PPUSH
18692: PPUSH
18693: PPUSH
// result := false ;
18694: LD_ADDR_VAR 0 1
18698: PUSH
18699: LD_INT 0
18701: ST_TO_ADDR
// for i := 1 to 16 do
18702: LD_ADDR_VAR 0 2
18706: PUSH
18707: DOUBLE
18708: LD_INT 1
18710: DEC
18711: ST_TO_ADDR
18712: LD_INT 16
18714: PUSH
18715: FOR_TO
18716: IFFALSE 18915
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18718: LD_ADDR_VAR 0 3
18722: PUSH
18723: LD_INT 10
18725: PUSH
18726: LD_INT 20
18728: PUSH
18729: LD_INT 30
18731: PUSH
18732: LD_INT 40
18734: PUSH
18735: LD_INT 50
18737: PUSH
18738: LD_INT 60
18740: PUSH
18741: LD_INT 70
18743: PUSH
18744: LD_INT 80
18746: PUSH
18747: LD_INT 90
18749: PUSH
18750: LD_INT 100
18752: PUSH
18753: LD_INT 110
18755: PUSH
18756: LD_INT 120
18758: PUSH
18759: LD_INT 130
18761: PUSH
18762: LD_INT 140
18764: PUSH
18765: LD_INT 150
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 1
18787: PPUSH
18788: LD_INT 15
18790: PPUSH
18791: CALL_OW 12
18795: ARRAY
18796: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18797: LD_ADDR_VAR 0 4
18801: PUSH
18802: LD_INT 10
18804: PUSH
18805: LD_INT 20
18807: PUSH
18808: LD_INT 30
18810: PUSH
18811: LD_INT 40
18813: PUSH
18814: LD_INT 50
18816: PUSH
18817: LD_INT 60
18819: PUSH
18820: LD_INT 70
18822: PUSH
18823: LD_INT 80
18825: PUSH
18826: LD_INT 90
18828: PUSH
18829: LD_INT 100
18831: PUSH
18832: LD_INT 110
18834: PUSH
18835: LD_INT 120
18837: PUSH
18838: LD_INT 130
18840: PUSH
18841: LD_INT 140
18843: PUSH
18844: LD_INT 150
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 1
18866: PPUSH
18867: LD_INT 15
18869: PPUSH
18870: CALL_OW 12
18874: ARRAY
18875: ST_TO_ADDR
// if ValidHex ( x , y ) then
18876: LD_VAR 0 3
18880: PPUSH
18881: LD_VAR 0 4
18885: PPUSH
18886: CALL_OW 488
18890: IFFALSE 18913
// begin result := [ x , y ] ;
18892: LD_ADDR_VAR 0 1
18896: PUSH
18897: LD_VAR 0 3
18901: PUSH
18902: LD_VAR 0 4
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: ST_TO_ADDR
// break ;
18911: GO 18915
// end ; end ;
18913: GO 18715
18915: POP
18916: POP
// if result then
18917: LD_VAR 0 1
18921: IFFALSE 18981
// begin ToLua ( playSibBomb() ) ;
18923: LD_STRING playSibBomb()
18925: PPUSH
18926: CALL_OW 559
// wait ( 0 0$14 ) ;
18930: LD_INT 490
18932: PPUSH
18933: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18937: LD_VAR 0 1
18941: PUSH
18942: LD_INT 1
18944: ARRAY
18945: PPUSH
18946: LD_VAR 0 1
18950: PUSH
18951: LD_INT 2
18953: ARRAY
18954: PPUSH
18955: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18959: LD_VAR 0 1
18963: PUSH
18964: LD_INT 1
18966: ARRAY
18967: PPUSH
18968: LD_VAR 0 1
18972: PUSH
18973: LD_INT 2
18975: ARRAY
18976: PPUSH
18977: CALL_OW 429
// end ; end ;
18981: LD_VAR 0 1
18985: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18986: LD_EXP 40
18990: PUSH
18991: LD_EXP 62
18995: AND
18996: IFFALSE 19008
18998: GO 19000
19000: DISABLE
// YouLost (  ) ;
19001: LD_STRING 
19003: PPUSH
19004: CALL_OW 104
19008: END
// every 0 0$1 trigger StreamModeActive and sFog do
19009: LD_EXP 40
19013: PUSH
19014: LD_EXP 61
19018: AND
19019: IFFALSE 19033
19021: GO 19023
19023: DISABLE
// FogOff ( your_side ) ;
19024: LD_OWVAR 2
19028: PPUSH
19029: CALL_OW 344
19033: END
// every 0 0$1 trigger StreamModeActive and sSun do
19034: LD_EXP 40
19038: PUSH
19039: LD_EXP 63
19043: AND
19044: IFFALSE 19072
19046: GO 19048
19048: DISABLE
// begin solar_recharge_percent := 0 ;
19049: LD_ADDR_OWVAR 79
19053: PUSH
19054: LD_INT 0
19056: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19057: LD_INT 10500
19059: PPUSH
19060: CALL_OW 67
// solar_recharge_percent := 100 ;
19064: LD_ADDR_OWVAR 79
19068: PUSH
19069: LD_INT 100
19071: ST_TO_ADDR
// end ;
19072: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19073: LD_EXP 40
19077: PUSH
19078: LD_EXP 64
19082: AND
19083: IFFALSE 19322
19085: GO 19087
19087: DISABLE
19088: LD_INT 0
19090: PPUSH
19091: PPUSH
19092: PPUSH
// begin tmp := [ ] ;
19093: LD_ADDR_VAR 0 3
19097: PUSH
19098: EMPTY
19099: ST_TO_ADDR
// for i := 1 to 6 do
19100: LD_ADDR_VAR 0 1
19104: PUSH
19105: DOUBLE
19106: LD_INT 1
19108: DEC
19109: ST_TO_ADDR
19110: LD_INT 6
19112: PUSH
19113: FOR_TO
19114: IFFALSE 19219
// begin uc_nation := nation_nature ;
19116: LD_ADDR_OWVAR 21
19120: PUSH
19121: LD_INT 0
19123: ST_TO_ADDR
// uc_side := 0 ;
19124: LD_ADDR_OWVAR 20
19128: PUSH
19129: LD_INT 0
19131: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19132: LD_ADDR_OWVAR 29
19136: PUSH
19137: LD_INT 12
19139: PUSH
19140: LD_INT 12
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: ST_TO_ADDR
// hc_agressivity := 20 ;
19147: LD_ADDR_OWVAR 35
19151: PUSH
19152: LD_INT 20
19154: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19155: LD_ADDR_OWVAR 28
19159: PUSH
19160: LD_INT 17
19162: ST_TO_ADDR
// hc_gallery :=  ;
19163: LD_ADDR_OWVAR 33
19167: PUSH
19168: LD_STRING 
19170: ST_TO_ADDR
// hc_name :=  ;
19171: LD_ADDR_OWVAR 26
19175: PUSH
19176: LD_STRING 
19178: ST_TO_ADDR
// un := CreateHuman ;
19179: LD_ADDR_VAR 0 2
19183: PUSH
19184: CALL_OW 44
19188: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19189: LD_VAR 0 2
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL_OW 51
// tmp := tmp ^ un ;
19201: LD_ADDR_VAR 0 3
19205: PUSH
19206: LD_VAR 0 3
19210: PUSH
19211: LD_VAR 0 2
19215: ADD
19216: ST_TO_ADDR
// end ;
19217: GO 19113
19219: POP
19220: POP
// repeat wait ( 0 0$1 ) ;
19221: LD_INT 35
19223: PPUSH
19224: CALL_OW 67
// for un in tmp do
19228: LD_ADDR_VAR 0 2
19232: PUSH
19233: LD_VAR 0 3
19237: PUSH
19238: FOR_IN
19239: IFFALSE 19313
// begin if IsDead ( un ) then
19241: LD_VAR 0 2
19245: PPUSH
19246: CALL_OW 301
19250: IFFALSE 19270
// begin tmp := tmp diff un ;
19252: LD_ADDR_VAR 0 3
19256: PUSH
19257: LD_VAR 0 3
19261: PUSH
19262: LD_VAR 0 2
19266: DIFF
19267: ST_TO_ADDR
// continue ;
19268: GO 19238
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19270: LD_VAR 0 2
19274: PPUSH
19275: LD_INT 3
19277: PUSH
19278: LD_INT 22
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PPUSH
19292: CALL_OW 69
19296: PPUSH
19297: LD_VAR 0 2
19301: PPUSH
19302: CALL_OW 74
19306: PPUSH
19307: CALL_OW 115
// end ;
19311: GO 19238
19313: POP
19314: POP
// until not tmp ;
19315: LD_VAR 0 3
19319: NOT
19320: IFFALSE 19221
// end ;
19322: PPOPN 3
19324: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19325: LD_EXP 40
19329: PUSH
19330: LD_EXP 65
19334: AND
19335: IFFALSE 19389
19337: GO 19339
19339: DISABLE
// begin ToLua ( displayTroll(); ) ;
19340: LD_STRING displayTroll();
19342: PPUSH
19343: CALL_OW 559
// wait ( 3 3$00 ) ;
19347: LD_INT 6300
19349: PPUSH
19350: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19354: LD_STRING hideTroll();
19356: PPUSH
19357: CALL_OW 559
// wait ( 1 1$00 ) ;
19361: LD_INT 2100
19363: PPUSH
19364: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19368: LD_STRING displayTroll();
19370: PPUSH
19371: CALL_OW 559
// wait ( 1 1$00 ) ;
19375: LD_INT 2100
19377: PPUSH
19378: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19382: LD_STRING hideTroll();
19384: PPUSH
19385: CALL_OW 559
// end ;
19389: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19390: LD_EXP 40
19394: PUSH
19395: LD_EXP 66
19399: AND
19400: IFFALSE 19463
19402: GO 19404
19404: DISABLE
19405: LD_INT 0
19407: PPUSH
// begin p := 0 ;
19408: LD_ADDR_VAR 0 1
19412: PUSH
19413: LD_INT 0
19415: ST_TO_ADDR
// repeat game_speed := 1 ;
19416: LD_ADDR_OWVAR 65
19420: PUSH
19421: LD_INT 1
19423: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19424: LD_INT 35
19426: PPUSH
19427: CALL_OW 67
// p := p + 1 ;
19431: LD_ADDR_VAR 0 1
19435: PUSH
19436: LD_VAR 0 1
19440: PUSH
19441: LD_INT 1
19443: PLUS
19444: ST_TO_ADDR
// until p >= 60 ;
19445: LD_VAR 0 1
19449: PUSH
19450: LD_INT 60
19452: GREATEREQUAL
19453: IFFALSE 19416
// game_speed := 4 ;
19455: LD_ADDR_OWVAR 65
19459: PUSH
19460: LD_INT 4
19462: ST_TO_ADDR
// end ;
19463: PPOPN 1
19465: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19466: LD_EXP 40
19470: PUSH
19471: LD_EXP 67
19475: AND
19476: IFFALSE 19622
19478: GO 19480
19480: DISABLE
19481: LD_INT 0
19483: PPUSH
19484: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19485: LD_ADDR_VAR 0 1
19489: PUSH
19490: LD_INT 22
19492: PUSH
19493: LD_OWVAR 2
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: LD_INT 30
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 30
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PPUSH
19534: CALL_OW 69
19538: ST_TO_ADDR
// if not depot then
19539: LD_VAR 0 1
19543: NOT
19544: IFFALSE 19548
// exit ;
19546: GO 19622
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19548: LD_ADDR_VAR 0 2
19552: PUSH
19553: LD_VAR 0 1
19557: PUSH
19558: LD_INT 1
19560: PPUSH
19561: LD_VAR 0 1
19565: PPUSH
19566: CALL_OW 12
19570: ARRAY
19571: PPUSH
19572: CALL_OW 274
19576: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19577: LD_VAR 0 2
19581: PPUSH
19582: LD_INT 1
19584: PPUSH
19585: LD_INT 0
19587: PPUSH
19588: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19592: LD_VAR 0 2
19596: PPUSH
19597: LD_INT 2
19599: PPUSH
19600: LD_INT 0
19602: PPUSH
19603: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19607: LD_VAR 0 2
19611: PPUSH
19612: LD_INT 3
19614: PPUSH
19615: LD_INT 0
19617: PPUSH
19618: CALL_OW 277
// end ;
19622: PPOPN 2
19624: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19625: LD_EXP 40
19629: PUSH
19630: LD_EXP 68
19634: AND
19635: IFFALSE 19732
19637: GO 19639
19639: DISABLE
19640: LD_INT 0
19642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19643: LD_ADDR_VAR 0 1
19647: PUSH
19648: LD_INT 22
19650: PUSH
19651: LD_OWVAR 2
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 21
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 3
19672: PUSH
19673: LD_INT 23
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: LIST
19691: PPUSH
19692: CALL_OW 69
19696: ST_TO_ADDR
// if not tmp then
19697: LD_VAR 0 1
19701: NOT
19702: IFFALSE 19706
// exit ;
19704: GO 19732
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19706: LD_VAR 0 1
19710: PUSH
19711: LD_INT 1
19713: PPUSH
19714: LD_VAR 0 1
19718: PPUSH
19719: CALL_OW 12
19723: ARRAY
19724: PPUSH
19725: LD_INT 200
19727: PPUSH
19728: CALL_OW 234
// end ;
19732: PPOPN 1
19734: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19735: LD_EXP 40
19739: PUSH
19740: LD_EXP 69
19744: AND
19745: IFFALSE 19824
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19753: LD_ADDR_VAR 0 1
19757: PUSH
19758: LD_INT 22
19760: PUSH
19761: LD_OWVAR 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 21
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PPUSH
19784: CALL_OW 69
19788: ST_TO_ADDR
// if not tmp then
19789: LD_VAR 0 1
19793: NOT
19794: IFFALSE 19798
// exit ;
19796: GO 19824
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19798: LD_VAR 0 1
19802: PUSH
19803: LD_INT 1
19805: PPUSH
19806: LD_VAR 0 1
19810: PPUSH
19811: CALL_OW 12
19815: ARRAY
19816: PPUSH
19817: LD_INT 60
19819: PPUSH
19820: CALL_OW 234
// end ;
19824: PPOPN 1
19826: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19827: LD_EXP 40
19831: PUSH
19832: LD_EXP 70
19836: AND
19837: IFFALSE 19936
19839: GO 19841
19841: DISABLE
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
// begin enable ;
19846: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19847: LD_ADDR_VAR 0 1
19851: PUSH
19852: LD_INT 22
19854: PUSH
19855: LD_OWVAR 2
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 61
19866: PUSH
19867: EMPTY
19868: LIST
19869: PUSH
19870: LD_INT 33
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: PPUSH
19885: CALL_OW 69
19889: ST_TO_ADDR
// if not tmp then
19890: LD_VAR 0 1
19894: NOT
19895: IFFALSE 19899
// exit ;
19897: GO 19936
// for i in tmp do
19899: LD_ADDR_VAR 0 2
19903: PUSH
19904: LD_VAR 0 1
19908: PUSH
19909: FOR_IN
19910: IFFALSE 19934
// if IsControledBy ( i ) then
19912: LD_VAR 0 2
19916: PPUSH
19917: CALL_OW 312
19921: IFFALSE 19932
// ComUnlink ( i ) ;
19923: LD_VAR 0 2
19927: PPUSH
19928: CALL_OW 136
19932: GO 19909
19934: POP
19935: POP
// end ;
19936: PPOPN 2
19938: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19939: LD_EXP 40
19943: PUSH
19944: LD_EXP 71
19948: AND
19949: IFFALSE 20089
19951: GO 19953
19953: DISABLE
19954: LD_INT 0
19956: PPUSH
19957: PPUSH
// begin ToLua ( displayPowell(); ) ;
19958: LD_STRING displayPowell();
19960: PPUSH
19961: CALL_OW 559
// uc_side := 0 ;
19965: LD_ADDR_OWVAR 20
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// uc_nation := 2 ;
19973: LD_ADDR_OWVAR 21
19977: PUSH
19978: LD_INT 2
19980: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19981: LD_ADDR_OWVAR 37
19985: PUSH
19986: LD_INT 14
19988: ST_TO_ADDR
// vc_engine := engine_siberite ;
19989: LD_ADDR_OWVAR 39
19993: PUSH
19994: LD_INT 3
19996: ST_TO_ADDR
// vc_control := control_apeman ;
19997: LD_ADDR_OWVAR 38
20001: PUSH
20002: LD_INT 5
20004: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20005: LD_ADDR_OWVAR 40
20009: PUSH
20010: LD_INT 29
20012: ST_TO_ADDR
// un := CreateVehicle ;
20013: LD_ADDR_VAR 0 2
20017: PUSH
20018: CALL_OW 45
20022: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20023: LD_VAR 0 2
20027: PPUSH
20028: LD_INT 1
20030: PPUSH
20031: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20035: LD_INT 35
20037: PPUSH
20038: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20042: LD_VAR 0 2
20046: PPUSH
20047: LD_INT 22
20049: PUSH
20050: LD_OWVAR 2
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PPUSH
20059: CALL_OW 69
20063: PPUSH
20064: LD_VAR 0 2
20068: PPUSH
20069: CALL_OW 74
20073: PPUSH
20074: CALL_OW 115
// until IsDead ( un ) ;
20078: LD_VAR 0 2
20082: PPUSH
20083: CALL_OW 301
20087: IFFALSE 20035
// end ;
20089: PPOPN 2
20091: END
// every 0 0$1 trigger StreamModeActive and sStu do
20092: LD_EXP 40
20096: PUSH
20097: LD_EXP 79
20101: AND
20102: IFFALSE 20118
20104: GO 20106
20106: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20107: LD_STRING displayStucuk();
20109: PPUSH
20110: CALL_OW 559
// ResetFog ;
20114: CALL_OW 335
// end ;
20118: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20119: LD_EXP 40
20123: PUSH
20124: LD_EXP 72
20128: AND
20129: IFFALSE 20270
20131: GO 20133
20133: DISABLE
20134: LD_INT 0
20136: PPUSH
20137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20138: LD_ADDR_VAR 0 2
20142: PUSH
20143: LD_INT 22
20145: PUSH
20146: LD_OWVAR 2
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 21
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PPUSH
20169: CALL_OW 69
20173: ST_TO_ADDR
// if not tmp then
20174: LD_VAR 0 2
20178: NOT
20179: IFFALSE 20183
// exit ;
20181: GO 20270
// un := tmp [ rand ( 1 , tmp ) ] ;
20183: LD_ADDR_VAR 0 1
20187: PUSH
20188: LD_VAR 0 2
20192: PUSH
20193: LD_INT 1
20195: PPUSH
20196: LD_VAR 0 2
20200: PPUSH
20201: CALL_OW 12
20205: ARRAY
20206: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20207: LD_VAR 0 1
20211: PPUSH
20212: LD_INT 0
20214: PPUSH
20215: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20219: LD_VAR 0 1
20223: PPUSH
20224: LD_OWVAR 3
20228: PUSH
20229: LD_VAR 0 1
20233: DIFF
20234: PPUSH
20235: LD_VAR 0 1
20239: PPUSH
20240: CALL_OW 74
20244: PPUSH
20245: CALL_OW 115
// wait ( 0 0$20 ) ;
20249: LD_INT 700
20251: PPUSH
20252: CALL_OW 67
// SetSide ( un , your_side ) ;
20256: LD_VAR 0 1
20260: PPUSH
20261: LD_OWVAR 2
20265: PPUSH
20266: CALL_OW 235
// end ;
20270: PPOPN 2
20272: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20273: LD_EXP 40
20277: PUSH
20278: LD_EXP 73
20282: AND
20283: IFFALSE 20389
20285: GO 20287
20287: DISABLE
20288: LD_INT 0
20290: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20291: LD_ADDR_VAR 0 1
20295: PUSH
20296: LD_INT 22
20298: PUSH
20299: LD_OWVAR 2
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 2
20310: PUSH
20311: LD_INT 30
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 30
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: LIST
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PPUSH
20340: CALL_OW 69
20344: ST_TO_ADDR
// if not depot then
20345: LD_VAR 0 1
20349: NOT
20350: IFFALSE 20354
// exit ;
20352: GO 20389
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20354: LD_VAR 0 1
20358: PUSH
20359: LD_INT 1
20361: ARRAY
20362: PPUSH
20363: CALL_OW 250
20367: PPUSH
20368: LD_VAR 0 1
20372: PUSH
20373: LD_INT 1
20375: ARRAY
20376: PPUSH
20377: CALL_OW 251
20381: PPUSH
20382: LD_INT 70
20384: PPUSH
20385: CALL_OW 495
// end ;
20389: PPOPN 1
20391: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20392: LD_EXP 40
20396: PUSH
20397: LD_EXP 74
20401: AND
20402: IFFALSE 20613
20404: GO 20406
20406: DISABLE
20407: LD_INT 0
20409: PPUSH
20410: PPUSH
20411: PPUSH
20412: PPUSH
20413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20414: LD_ADDR_VAR 0 5
20418: PUSH
20419: LD_INT 22
20421: PUSH
20422: LD_OWVAR 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 21
20433: PUSH
20434: LD_INT 1
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PPUSH
20445: CALL_OW 69
20449: ST_TO_ADDR
// if not tmp then
20450: LD_VAR 0 5
20454: NOT
20455: IFFALSE 20459
// exit ;
20457: GO 20613
// for i in tmp do
20459: LD_ADDR_VAR 0 1
20463: PUSH
20464: LD_VAR 0 5
20468: PUSH
20469: FOR_IN
20470: IFFALSE 20611
// begin d := rand ( 0 , 5 ) ;
20472: LD_ADDR_VAR 0 4
20476: PUSH
20477: LD_INT 0
20479: PPUSH
20480: LD_INT 5
20482: PPUSH
20483: CALL_OW 12
20487: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20488: LD_ADDR_VAR 0 2
20492: PUSH
20493: LD_VAR 0 1
20497: PPUSH
20498: CALL_OW 250
20502: PPUSH
20503: LD_VAR 0 4
20507: PPUSH
20508: LD_INT 3
20510: PPUSH
20511: LD_INT 12
20513: PPUSH
20514: CALL_OW 12
20518: PPUSH
20519: CALL_OW 272
20523: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20524: LD_ADDR_VAR 0 3
20528: PUSH
20529: LD_VAR 0 1
20533: PPUSH
20534: CALL_OW 251
20538: PPUSH
20539: LD_VAR 0 4
20543: PPUSH
20544: LD_INT 3
20546: PPUSH
20547: LD_INT 12
20549: PPUSH
20550: CALL_OW 12
20554: PPUSH
20555: CALL_OW 273
20559: ST_TO_ADDR
// if ValidHex ( x , y ) then
20560: LD_VAR 0 2
20564: PPUSH
20565: LD_VAR 0 3
20569: PPUSH
20570: CALL_OW 488
20574: IFFALSE 20609
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20576: LD_VAR 0 1
20580: PPUSH
20581: LD_VAR 0 2
20585: PPUSH
20586: LD_VAR 0 3
20590: PPUSH
20591: LD_INT 3
20593: PPUSH
20594: LD_INT 6
20596: PPUSH
20597: CALL_OW 12
20601: PPUSH
20602: LD_INT 1
20604: PPUSH
20605: CALL_OW 483
// end ;
20609: GO 20469
20611: POP
20612: POP
// end ;
20613: PPOPN 5
20615: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20616: LD_EXP 40
20620: PUSH
20621: LD_EXP 75
20625: AND
20626: IFFALSE 20720
20628: GO 20630
20630: DISABLE
20631: LD_INT 0
20633: PPUSH
20634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20635: LD_ADDR_VAR 0 2
20639: PUSH
20640: LD_INT 22
20642: PUSH
20643: LD_OWVAR 2
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 32
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 21
20664: PUSH
20665: LD_INT 2
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: LIST
20676: PPUSH
20677: CALL_OW 69
20681: ST_TO_ADDR
// if not tmp then
20682: LD_VAR 0 2
20686: NOT
20687: IFFALSE 20691
// exit ;
20689: GO 20720
// for i in tmp do
20691: LD_ADDR_VAR 0 1
20695: PUSH
20696: LD_VAR 0 2
20700: PUSH
20701: FOR_IN
20702: IFFALSE 20718
// SetFuel ( i , 0 ) ;
20704: LD_VAR 0 1
20708: PPUSH
20709: LD_INT 0
20711: PPUSH
20712: CALL_OW 240
20716: GO 20701
20718: POP
20719: POP
// end ;
20720: PPOPN 2
20722: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20723: LD_EXP 40
20727: PUSH
20728: LD_EXP 76
20732: AND
20733: IFFALSE 20799
20735: GO 20737
20737: DISABLE
20738: LD_INT 0
20740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20741: LD_ADDR_VAR 0 1
20745: PUSH
20746: LD_INT 22
20748: PUSH
20749: LD_OWVAR 2
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 30
20760: PUSH
20761: LD_INT 29
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PPUSH
20772: CALL_OW 69
20776: ST_TO_ADDR
// if not tmp then
20777: LD_VAR 0 1
20781: NOT
20782: IFFALSE 20786
// exit ;
20784: GO 20799
// DestroyUnit ( tmp [ 1 ] ) ;
20786: LD_VAR 0 1
20790: PUSH
20791: LD_INT 1
20793: ARRAY
20794: PPUSH
20795: CALL_OW 65
// end ;
20799: PPOPN 1
20801: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20802: LD_EXP 40
20806: PUSH
20807: LD_EXP 78
20811: AND
20812: IFFALSE 20941
20814: GO 20816
20816: DISABLE
20817: LD_INT 0
20819: PPUSH
// begin uc_side := 0 ;
20820: LD_ADDR_OWVAR 20
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// uc_nation := nation_arabian ;
20828: LD_ADDR_OWVAR 21
20832: PUSH
20833: LD_INT 2
20835: ST_TO_ADDR
// hc_gallery :=  ;
20836: LD_ADDR_OWVAR 33
20840: PUSH
20841: LD_STRING 
20843: ST_TO_ADDR
// hc_name :=  ;
20844: LD_ADDR_OWVAR 26
20848: PUSH
20849: LD_STRING 
20851: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20852: LD_INT 1
20854: PPUSH
20855: LD_INT 11
20857: PPUSH
20858: LD_INT 10
20860: PPUSH
20861: CALL_OW 380
// un := CreateHuman ;
20865: LD_ADDR_VAR 0 1
20869: PUSH
20870: CALL_OW 44
20874: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20875: LD_VAR 0 1
20879: PPUSH
20880: LD_INT 1
20882: PPUSH
20883: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20887: LD_INT 35
20889: PPUSH
20890: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20894: LD_VAR 0 1
20898: PPUSH
20899: LD_INT 22
20901: PUSH
20902: LD_OWVAR 2
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 69
20915: PPUSH
20916: LD_VAR 0 1
20920: PPUSH
20921: CALL_OW 74
20925: PPUSH
20926: CALL_OW 115
// until IsDead ( un ) ;
20930: LD_VAR 0 1
20934: PPUSH
20935: CALL_OW 301
20939: IFFALSE 20887
// end ;
20941: PPOPN 1
20943: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20944: LD_EXP 40
20948: PUSH
20949: LD_EXP 80
20953: AND
20954: IFFALSE 20966
20956: GO 20958
20958: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20959: LD_STRING earthquake(getX(game), 0, 32)
20961: PPUSH
20962: CALL_OW 559
20966: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20967: LD_EXP 40
20971: PUSH
20972: LD_EXP 81
20976: AND
20977: IFFALSE 21068
20979: GO 20981
20981: DISABLE
20982: LD_INT 0
20984: PPUSH
// begin enable ;
20985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20986: LD_ADDR_VAR 0 1
20990: PUSH
20991: LD_INT 22
20993: PUSH
20994: LD_OWVAR 2
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 21
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 33
21015: PUSH
21016: LD_INT 3
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: LIST
21027: PPUSH
21028: CALL_OW 69
21032: ST_TO_ADDR
// if not tmp then
21033: LD_VAR 0 1
21037: NOT
21038: IFFALSE 21042
// exit ;
21040: GO 21068
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21042: LD_VAR 0 1
21046: PUSH
21047: LD_INT 1
21049: PPUSH
21050: LD_VAR 0 1
21054: PPUSH
21055: CALL_OW 12
21059: ARRAY
21060: PPUSH
21061: LD_INT 1
21063: PPUSH
21064: CALL_OW 234
// end ;
21068: PPOPN 1
21070: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21071: LD_EXP 40
21075: PUSH
21076: LD_EXP 82
21080: AND
21081: IFFALSE 21222
21083: GO 21085
21085: DISABLE
21086: LD_INT 0
21088: PPUSH
21089: PPUSH
21090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21091: LD_ADDR_VAR 0 3
21095: PUSH
21096: LD_INT 22
21098: PUSH
21099: LD_OWVAR 2
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 25
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PPUSH
21122: CALL_OW 69
21126: ST_TO_ADDR
// if not tmp then
21127: LD_VAR 0 3
21131: NOT
21132: IFFALSE 21136
// exit ;
21134: GO 21222
// un := tmp [ rand ( 1 , tmp ) ] ;
21136: LD_ADDR_VAR 0 2
21140: PUSH
21141: LD_VAR 0 3
21145: PUSH
21146: LD_INT 1
21148: PPUSH
21149: LD_VAR 0 3
21153: PPUSH
21154: CALL_OW 12
21158: ARRAY
21159: ST_TO_ADDR
// if Crawls ( un ) then
21160: LD_VAR 0 2
21164: PPUSH
21165: CALL_OW 318
21169: IFFALSE 21180
// ComWalk ( un ) ;
21171: LD_VAR 0 2
21175: PPUSH
21176: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21180: LD_VAR 0 2
21184: PPUSH
21185: LD_INT 9
21187: PPUSH
21188: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21192: LD_INT 28
21194: PPUSH
21195: LD_OWVAR 2
21199: PPUSH
21200: LD_INT 2
21202: PPUSH
21203: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21207: LD_INT 29
21209: PPUSH
21210: LD_OWVAR 2
21214: PPUSH
21215: LD_INT 2
21217: PPUSH
21218: CALL_OW 322
// end ;
21222: PPOPN 3
21224: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21225: LD_EXP 40
21229: PUSH
21230: LD_EXP 83
21234: AND
21235: IFFALSE 21346
21237: GO 21239
21239: DISABLE
21240: LD_INT 0
21242: PPUSH
21243: PPUSH
21244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21245: LD_ADDR_VAR 0 3
21249: PUSH
21250: LD_INT 22
21252: PUSH
21253: LD_OWVAR 2
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 25
21264: PUSH
21265: LD_INT 1
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PPUSH
21276: CALL_OW 69
21280: ST_TO_ADDR
// if not tmp then
21281: LD_VAR 0 3
21285: NOT
21286: IFFALSE 21290
// exit ;
21288: GO 21346
// un := tmp [ rand ( 1 , tmp ) ] ;
21290: LD_ADDR_VAR 0 2
21294: PUSH
21295: LD_VAR 0 3
21299: PUSH
21300: LD_INT 1
21302: PPUSH
21303: LD_VAR 0 3
21307: PPUSH
21308: CALL_OW 12
21312: ARRAY
21313: ST_TO_ADDR
// if Crawls ( un ) then
21314: LD_VAR 0 2
21318: PPUSH
21319: CALL_OW 318
21323: IFFALSE 21334
// ComWalk ( un ) ;
21325: LD_VAR 0 2
21329: PPUSH
21330: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21334: LD_VAR 0 2
21338: PPUSH
21339: LD_INT 8
21341: PPUSH
21342: CALL_OW 336
// end ;
21346: PPOPN 3
21348: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21349: LD_EXP 40
21353: PUSH
21354: LD_EXP 84
21358: AND
21359: IFFALSE 21503
21361: GO 21363
21363: DISABLE
21364: LD_INT 0
21366: PPUSH
21367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21368: LD_ADDR_VAR 0 2
21372: PUSH
21373: LD_INT 22
21375: PUSH
21376: LD_OWVAR 2
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 21
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 2
21397: PUSH
21398: LD_INT 34
21400: PUSH
21401: LD_INT 12
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 34
21410: PUSH
21411: LD_INT 51
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 34
21420: PUSH
21421: LD_INT 32
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: PPUSH
21439: CALL_OW 69
21443: ST_TO_ADDR
// if not tmp then
21444: LD_VAR 0 2
21448: NOT
21449: IFFALSE 21453
// exit ;
21451: GO 21503
// for i in tmp do
21453: LD_ADDR_VAR 0 1
21457: PUSH
21458: LD_VAR 0 2
21462: PUSH
21463: FOR_IN
21464: IFFALSE 21501
// if GetCargo ( i , mat_artifact ) = 0 then
21466: LD_VAR 0 1
21470: PPUSH
21471: LD_INT 4
21473: PPUSH
21474: CALL_OW 289
21478: PUSH
21479: LD_INT 0
21481: EQUAL
21482: IFFALSE 21499
// SetCargo ( i , mat_siberit , 100 ) ;
21484: LD_VAR 0 1
21488: PPUSH
21489: LD_INT 3
21491: PPUSH
21492: LD_INT 100
21494: PPUSH
21495: CALL_OW 290
21499: GO 21463
21501: POP
21502: POP
// end ;
21503: PPOPN 2
21505: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21506: LD_EXP 40
21510: PUSH
21511: LD_EXP 85
21515: AND
21516: IFFALSE 21699
21518: GO 21520
21520: DISABLE
21521: LD_INT 0
21523: PPUSH
21524: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21525: LD_ADDR_VAR 0 2
21529: PUSH
21530: LD_INT 22
21532: PUSH
21533: LD_OWVAR 2
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 69
21546: ST_TO_ADDR
// if not tmp then
21547: LD_VAR 0 2
21551: NOT
21552: IFFALSE 21556
// exit ;
21554: GO 21699
// for i := 1 to 2 do
21556: LD_ADDR_VAR 0 1
21560: PUSH
21561: DOUBLE
21562: LD_INT 1
21564: DEC
21565: ST_TO_ADDR
21566: LD_INT 2
21568: PUSH
21569: FOR_TO
21570: IFFALSE 21697
// begin uc_side := your_side ;
21572: LD_ADDR_OWVAR 20
21576: PUSH
21577: LD_OWVAR 2
21581: ST_TO_ADDR
// uc_nation := nation_american ;
21582: LD_ADDR_OWVAR 21
21586: PUSH
21587: LD_INT 1
21589: ST_TO_ADDR
// vc_chassis := us_morphling ;
21590: LD_ADDR_OWVAR 37
21594: PUSH
21595: LD_INT 5
21597: ST_TO_ADDR
// vc_engine := engine_siberite ;
21598: LD_ADDR_OWVAR 39
21602: PUSH
21603: LD_INT 3
21605: ST_TO_ADDR
// vc_control := control_computer ;
21606: LD_ADDR_OWVAR 38
21610: PUSH
21611: LD_INT 3
21613: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21614: LD_ADDR_OWVAR 40
21618: PUSH
21619: LD_INT 10
21621: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21622: LD_VAR 0 2
21626: PUSH
21627: LD_INT 1
21629: ARRAY
21630: PPUSH
21631: CALL_OW 310
21635: NOT
21636: IFFALSE 21683
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21638: CALL_OW 45
21642: PPUSH
21643: LD_VAR 0 2
21647: PUSH
21648: LD_INT 1
21650: ARRAY
21651: PPUSH
21652: CALL_OW 250
21656: PPUSH
21657: LD_VAR 0 2
21661: PUSH
21662: LD_INT 1
21664: ARRAY
21665: PPUSH
21666: CALL_OW 251
21670: PPUSH
21671: LD_INT 12
21673: PPUSH
21674: LD_INT 1
21676: PPUSH
21677: CALL_OW 50
21681: GO 21695
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21683: CALL_OW 45
21687: PPUSH
21688: LD_INT 1
21690: PPUSH
21691: CALL_OW 51
// end ;
21695: GO 21569
21697: POP
21698: POP
// end ;
21699: PPOPN 2
21701: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21702: LD_EXP 40
21706: PUSH
21707: LD_EXP 86
21711: AND
21712: IFFALSE 21934
21714: GO 21716
21716: DISABLE
21717: LD_INT 0
21719: PPUSH
21720: PPUSH
21721: PPUSH
21722: PPUSH
21723: PPUSH
21724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21725: LD_ADDR_VAR 0 6
21729: PUSH
21730: LD_INT 22
21732: PUSH
21733: LD_OWVAR 2
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 21
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 3
21754: PUSH
21755: LD_INT 23
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: LIST
21773: PPUSH
21774: CALL_OW 69
21778: ST_TO_ADDR
// if not tmp then
21779: LD_VAR 0 6
21783: NOT
21784: IFFALSE 21788
// exit ;
21786: GO 21934
// s1 := rand ( 1 , 4 ) ;
21788: LD_ADDR_VAR 0 2
21792: PUSH
21793: LD_INT 1
21795: PPUSH
21796: LD_INT 4
21798: PPUSH
21799: CALL_OW 12
21803: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21804: LD_ADDR_VAR 0 4
21808: PUSH
21809: LD_VAR 0 6
21813: PUSH
21814: LD_INT 1
21816: ARRAY
21817: PPUSH
21818: LD_VAR 0 2
21822: PPUSH
21823: CALL_OW 259
21827: ST_TO_ADDR
// if s1 = 1 then
21828: LD_VAR 0 2
21832: PUSH
21833: LD_INT 1
21835: EQUAL
21836: IFFALSE 21856
// s2 := rand ( 2 , 4 ) else
21838: LD_ADDR_VAR 0 3
21842: PUSH
21843: LD_INT 2
21845: PPUSH
21846: LD_INT 4
21848: PPUSH
21849: CALL_OW 12
21853: ST_TO_ADDR
21854: GO 21864
// s2 := 1 ;
21856: LD_ADDR_VAR 0 3
21860: PUSH
21861: LD_INT 1
21863: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21864: LD_ADDR_VAR 0 5
21868: PUSH
21869: LD_VAR 0 6
21873: PUSH
21874: LD_INT 1
21876: ARRAY
21877: PPUSH
21878: LD_VAR 0 3
21882: PPUSH
21883: CALL_OW 259
21887: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21888: LD_VAR 0 6
21892: PUSH
21893: LD_INT 1
21895: ARRAY
21896: PPUSH
21897: LD_VAR 0 2
21901: PPUSH
21902: LD_VAR 0 5
21906: PPUSH
21907: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21911: LD_VAR 0 6
21915: PUSH
21916: LD_INT 1
21918: ARRAY
21919: PPUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: LD_VAR 0 4
21929: PPUSH
21930: CALL_OW 237
// end ;
21934: PPOPN 6
21936: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21937: LD_EXP 40
21941: PUSH
21942: LD_EXP 87
21946: AND
21947: IFFALSE 22026
21949: GO 21951
21951: DISABLE
21952: LD_INT 0
21954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21955: LD_ADDR_VAR 0 1
21959: PUSH
21960: LD_INT 22
21962: PUSH
21963: LD_OWVAR 2
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 30
21974: PUSH
21975: LD_INT 3
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PPUSH
21986: CALL_OW 69
21990: ST_TO_ADDR
// if not tmp then
21991: LD_VAR 0 1
21995: NOT
21996: IFFALSE 22000
// exit ;
21998: GO 22026
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22000: LD_VAR 0 1
22004: PUSH
22005: LD_INT 1
22007: PPUSH
22008: LD_VAR 0 1
22012: PPUSH
22013: CALL_OW 12
22017: ARRAY
22018: PPUSH
22019: LD_INT 1
22021: PPUSH
22022: CALL_OW 234
// end ;
22026: PPOPN 1
22028: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22029: LD_EXP 40
22033: PUSH
22034: LD_EXP 88
22038: AND
22039: IFFALSE 22151
22041: GO 22043
22043: DISABLE
22044: LD_INT 0
22046: PPUSH
22047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22048: LD_ADDR_VAR 0 2
22052: PUSH
22053: LD_INT 22
22055: PUSH
22056: LD_OWVAR 2
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 30
22070: PUSH
22071: LD_INT 27
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 30
22080: PUSH
22081: LD_INT 26
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 30
22090: PUSH
22091: LD_INT 28
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PPUSH
22108: CALL_OW 69
22112: ST_TO_ADDR
// if not tmp then
22113: LD_VAR 0 2
22117: NOT
22118: IFFALSE 22122
// exit ;
22120: GO 22151
// for i in tmp do
22122: LD_ADDR_VAR 0 1
22126: PUSH
22127: LD_VAR 0 2
22131: PUSH
22132: FOR_IN
22133: IFFALSE 22149
// SetLives ( i , 1 ) ;
22135: LD_VAR 0 1
22139: PPUSH
22140: LD_INT 1
22142: PPUSH
22143: CALL_OW 234
22147: GO 22132
22149: POP
22150: POP
// end ;
22151: PPOPN 2
22153: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22154: LD_EXP 40
22158: PUSH
22159: LD_EXP 89
22163: AND
22164: IFFALSE 22451
22166: GO 22168
22168: DISABLE
22169: LD_INT 0
22171: PPUSH
22172: PPUSH
22173: PPUSH
// begin i := rand ( 1 , 7 ) ;
22174: LD_ADDR_VAR 0 1
22178: PUSH
22179: LD_INT 1
22181: PPUSH
22182: LD_INT 7
22184: PPUSH
22185: CALL_OW 12
22189: ST_TO_ADDR
// case i of 1 :
22190: LD_VAR 0 1
22194: PUSH
22195: LD_INT 1
22197: DOUBLE
22198: EQUAL
22199: IFTRUE 22203
22201: GO 22213
22203: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22204: LD_STRING earthquake(getX(game), 0, 32)
22206: PPUSH
22207: CALL_OW 559
22211: GO 22451
22213: LD_INT 2
22215: DOUBLE
22216: EQUAL
22217: IFTRUE 22221
22219: GO 22235
22221: POP
// begin ToLua ( displayStucuk(); ) ;
22222: LD_STRING displayStucuk();
22224: PPUSH
22225: CALL_OW 559
// ResetFog ;
22229: CALL_OW 335
// end ; 3 :
22233: GO 22451
22235: LD_INT 3
22237: DOUBLE
22238: EQUAL
22239: IFTRUE 22243
22241: GO 22347
22243: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22244: LD_ADDR_VAR 0 2
22248: PUSH
22249: LD_INT 22
22251: PUSH
22252: LD_OWVAR 2
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 25
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PPUSH
22275: CALL_OW 69
22279: ST_TO_ADDR
// if not tmp then
22280: LD_VAR 0 2
22284: NOT
22285: IFFALSE 22289
// exit ;
22287: GO 22451
// un := tmp [ rand ( 1 , tmp ) ] ;
22289: LD_ADDR_VAR 0 3
22293: PUSH
22294: LD_VAR 0 2
22298: PUSH
22299: LD_INT 1
22301: PPUSH
22302: LD_VAR 0 2
22306: PPUSH
22307: CALL_OW 12
22311: ARRAY
22312: ST_TO_ADDR
// if Crawls ( un ) then
22313: LD_VAR 0 3
22317: PPUSH
22318: CALL_OW 318
22322: IFFALSE 22333
// ComWalk ( un ) ;
22324: LD_VAR 0 3
22328: PPUSH
22329: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22333: LD_VAR 0 3
22337: PPUSH
22338: LD_INT 8
22340: PPUSH
22341: CALL_OW 336
// end ; 4 :
22345: GO 22451
22347: LD_INT 4
22349: DOUBLE
22350: EQUAL
22351: IFTRUE 22355
22353: GO 22429
22355: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22356: LD_ADDR_VAR 0 2
22360: PUSH
22361: LD_INT 22
22363: PUSH
22364: LD_OWVAR 2
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 30
22375: PUSH
22376: LD_INT 29
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PPUSH
22387: CALL_OW 69
22391: ST_TO_ADDR
// if not tmp then
22392: LD_VAR 0 2
22396: NOT
22397: IFFALSE 22401
// exit ;
22399: GO 22451
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22401: LD_VAR 0 2
22405: PUSH
22406: LD_INT 1
22408: ARRAY
22409: PPUSH
22410: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22414: LD_VAR 0 2
22418: PUSH
22419: LD_INT 1
22421: ARRAY
22422: PPUSH
22423: CALL_OW 65
// end ; 5 .. 7 :
22427: GO 22451
22429: LD_INT 5
22431: DOUBLE
22432: GREATEREQUAL
22433: IFFALSE 22441
22435: LD_INT 7
22437: DOUBLE
22438: LESSEQUAL
22439: IFTRUE 22443
22441: GO 22450
22443: POP
// StreamSibBomb ; end ;
22444: CALL 18688 0 0
22448: GO 22451
22450: POP
// end ;
22451: PPOPN 3
22453: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22454: LD_EXP 40
22458: PUSH
22459: LD_EXP 90
22463: AND
22464: IFFALSE 22620
22466: GO 22468
22468: DISABLE
22469: LD_INT 0
22471: PPUSH
22472: PPUSH
22473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22474: LD_ADDR_VAR 0 2
22478: PUSH
22479: LD_INT 81
22481: PUSH
22482: LD_OWVAR 2
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 2
22493: PUSH
22494: LD_INT 21
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 21
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PPUSH
22523: CALL_OW 69
22527: ST_TO_ADDR
// if not tmp then
22528: LD_VAR 0 2
22532: NOT
22533: IFFALSE 22537
// exit ;
22535: GO 22620
// p := 0 ;
22537: LD_ADDR_VAR 0 3
22541: PUSH
22542: LD_INT 0
22544: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22545: LD_INT 35
22547: PPUSH
22548: CALL_OW 67
// p := p + 1 ;
22552: LD_ADDR_VAR 0 3
22556: PUSH
22557: LD_VAR 0 3
22561: PUSH
22562: LD_INT 1
22564: PLUS
22565: ST_TO_ADDR
// for i in tmp do
22566: LD_ADDR_VAR 0 1
22570: PUSH
22571: LD_VAR 0 2
22575: PUSH
22576: FOR_IN
22577: IFFALSE 22608
// if GetLives ( i ) < 1000 then
22579: LD_VAR 0 1
22583: PPUSH
22584: CALL_OW 256
22588: PUSH
22589: LD_INT 1000
22591: LESS
22592: IFFALSE 22606
// SetLives ( i , 1000 ) ;
22594: LD_VAR 0 1
22598: PPUSH
22599: LD_INT 1000
22601: PPUSH
22602: CALL_OW 234
22606: GO 22576
22608: POP
22609: POP
// until p > 20 ;
22610: LD_VAR 0 3
22614: PUSH
22615: LD_INT 20
22617: GREATER
22618: IFFALSE 22545
// end ;
22620: PPOPN 3
22622: END
// every 0 0$1 trigger StreamModeActive and sTime do
22623: LD_EXP 40
22627: PUSH
22628: LD_EXP 91
22632: AND
22633: IFFALSE 22668
22635: GO 22637
22637: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22638: LD_INT 28
22640: PPUSH
22641: LD_OWVAR 2
22645: PPUSH
22646: LD_INT 2
22648: PPUSH
22649: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22653: LD_INT 30
22655: PPUSH
22656: LD_OWVAR 2
22660: PPUSH
22661: LD_INT 2
22663: PPUSH
22664: CALL_OW 322
// end ;
22668: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22669: LD_EXP 40
22673: PUSH
22674: LD_EXP 92
22678: AND
22679: IFFALSE 22800
22681: GO 22683
22683: DISABLE
22684: LD_INT 0
22686: PPUSH
22687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22688: LD_ADDR_VAR 0 2
22692: PUSH
22693: LD_INT 22
22695: PUSH
22696: LD_OWVAR 2
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 21
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 3
22717: PUSH
22718: LD_INT 23
22720: PUSH
22721: LD_INT 0
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: LIST
22736: PPUSH
22737: CALL_OW 69
22741: ST_TO_ADDR
// if not tmp then
22742: LD_VAR 0 2
22746: NOT
22747: IFFALSE 22751
// exit ;
22749: GO 22800
// for i in tmp do
22751: LD_ADDR_VAR 0 1
22755: PUSH
22756: LD_VAR 0 2
22760: PUSH
22761: FOR_IN
22762: IFFALSE 22798
// begin if Crawls ( i ) then
22764: LD_VAR 0 1
22768: PPUSH
22769: CALL_OW 318
22773: IFFALSE 22784
// ComWalk ( i ) ;
22775: LD_VAR 0 1
22779: PPUSH
22780: CALL_OW 138
// SetClass ( i , 2 ) ;
22784: LD_VAR 0 1
22788: PPUSH
22789: LD_INT 2
22791: PPUSH
22792: CALL_OW 336
// end ;
22796: GO 22761
22798: POP
22799: POP
// end ;
22800: PPOPN 2
22802: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22803: LD_EXP 40
22807: PUSH
22808: LD_EXP 93
22812: AND
22813: IFFALSE 23101
22815: GO 22817
22817: DISABLE
22818: LD_INT 0
22820: PPUSH
22821: PPUSH
22822: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22823: LD_OWVAR 2
22827: PPUSH
22828: LD_INT 9
22830: PPUSH
22831: LD_INT 1
22833: PPUSH
22834: LD_INT 1
22836: PPUSH
22837: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22841: LD_INT 9
22843: PPUSH
22844: LD_OWVAR 2
22848: PPUSH
22849: CALL_OW 343
// uc_side := 9 ;
22853: LD_ADDR_OWVAR 20
22857: PUSH
22858: LD_INT 9
22860: ST_TO_ADDR
// uc_nation := 2 ;
22861: LD_ADDR_OWVAR 21
22865: PUSH
22866: LD_INT 2
22868: ST_TO_ADDR
// hc_name := Dark Warrior ;
22869: LD_ADDR_OWVAR 26
22873: PUSH
22874: LD_STRING Dark Warrior
22876: ST_TO_ADDR
// hc_gallery :=  ;
22877: LD_ADDR_OWVAR 33
22881: PUSH
22882: LD_STRING 
22884: ST_TO_ADDR
// hc_noskilllimit := true ;
22885: LD_ADDR_OWVAR 76
22889: PUSH
22890: LD_INT 1
22892: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22893: LD_ADDR_OWVAR 31
22897: PUSH
22898: LD_INT 30
22900: PUSH
22901: LD_INT 30
22903: PUSH
22904: LD_INT 30
22906: PUSH
22907: LD_INT 30
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: ST_TO_ADDR
// un := CreateHuman ;
22916: LD_ADDR_VAR 0 3
22920: PUSH
22921: CALL_OW 44
22925: ST_TO_ADDR
// hc_noskilllimit := false ;
22926: LD_ADDR_OWVAR 76
22930: PUSH
22931: LD_INT 0
22933: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22934: LD_VAR 0 3
22938: PPUSH
22939: LD_INT 1
22941: PPUSH
22942: CALL_OW 51
// ToLua ( playRanger() ) ;
22946: LD_STRING playRanger()
22948: PPUSH
22949: CALL_OW 559
// p := 0 ;
22953: LD_ADDR_VAR 0 2
22957: PUSH
22958: LD_INT 0
22960: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22961: LD_INT 35
22963: PPUSH
22964: CALL_OW 67
// p := p + 1 ;
22968: LD_ADDR_VAR 0 2
22972: PUSH
22973: LD_VAR 0 2
22977: PUSH
22978: LD_INT 1
22980: PLUS
22981: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22982: LD_VAR 0 3
22986: PPUSH
22987: CALL_OW 256
22991: PUSH
22992: LD_INT 1000
22994: LESS
22995: IFFALSE 23009
// SetLives ( un , 1000 ) ;
22997: LD_VAR 0 3
23001: PPUSH
23002: LD_INT 1000
23004: PPUSH
23005: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23009: LD_VAR 0 3
23013: PPUSH
23014: LD_INT 81
23016: PUSH
23017: LD_OWVAR 2
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 91
23028: PUSH
23029: LD_VAR 0 3
23033: PUSH
23034: LD_INT 30
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PPUSH
23046: CALL_OW 69
23050: PPUSH
23051: LD_VAR 0 3
23055: PPUSH
23056: CALL_OW 74
23060: PPUSH
23061: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23065: LD_VAR 0 2
23069: PUSH
23070: LD_INT 80
23072: GREATER
23073: PUSH
23074: LD_VAR 0 3
23078: PPUSH
23079: CALL_OW 301
23083: OR
23084: IFFALSE 22961
// if un then
23086: LD_VAR 0 3
23090: IFFALSE 23101
// RemoveUnit ( un ) ;
23092: LD_VAR 0 3
23096: PPUSH
23097: CALL_OW 64
// end ;
23101: PPOPN 3
23103: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23104: LD_EXP 94
23108: IFFALSE 23224
23110: GO 23112
23112: DISABLE
23113: LD_INT 0
23115: PPUSH
23116: PPUSH
23117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23118: LD_ADDR_VAR 0 2
23122: PUSH
23123: LD_INT 81
23125: PUSH
23126: LD_OWVAR 2
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 21
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PPUSH
23149: CALL_OW 69
23153: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23154: LD_STRING playComputer()
23156: PPUSH
23157: CALL_OW 559
// if not tmp then
23161: LD_VAR 0 2
23165: NOT
23166: IFFALSE 23170
// exit ;
23168: GO 23224
// for i in tmp do
23170: LD_ADDR_VAR 0 1
23174: PUSH
23175: LD_VAR 0 2
23179: PUSH
23180: FOR_IN
23181: IFFALSE 23222
// for j := 1 to 4 do
23183: LD_ADDR_VAR 0 3
23187: PUSH
23188: DOUBLE
23189: LD_INT 1
23191: DEC
23192: ST_TO_ADDR
23193: LD_INT 4
23195: PUSH
23196: FOR_TO
23197: IFFALSE 23218
// SetSkill ( i , j , 10 ) ;
23199: LD_VAR 0 1
23203: PPUSH
23204: LD_VAR 0 3
23208: PPUSH
23209: LD_INT 10
23211: PPUSH
23212: CALL_OW 237
23216: GO 23196
23218: POP
23219: POP
23220: GO 23180
23222: POP
23223: POP
// end ;
23224: PPOPN 3
23226: END
// every 0 0$1 trigger s30 do var i , tmp ;
23227: LD_EXP 95
23231: IFFALSE 23300
23233: GO 23235
23235: DISABLE
23236: LD_INT 0
23238: PPUSH
23239: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23240: LD_ADDR_VAR 0 2
23244: PUSH
23245: LD_INT 22
23247: PUSH
23248: LD_OWVAR 2
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PPUSH
23257: CALL_OW 69
23261: ST_TO_ADDR
// if not tmp then
23262: LD_VAR 0 2
23266: NOT
23267: IFFALSE 23271
// exit ;
23269: GO 23300
// for i in tmp do
23271: LD_ADDR_VAR 0 1
23275: PUSH
23276: LD_VAR 0 2
23280: PUSH
23281: FOR_IN
23282: IFFALSE 23298
// SetLives ( i , 300 ) ;
23284: LD_VAR 0 1
23288: PPUSH
23289: LD_INT 300
23291: PPUSH
23292: CALL_OW 234
23296: GO 23281
23298: POP
23299: POP
// end ;
23300: PPOPN 2
23302: END
// every 0 0$1 trigger s60 do var i , tmp ;
23303: LD_EXP 96
23307: IFFALSE 23376
23309: GO 23311
23311: DISABLE
23312: LD_INT 0
23314: PPUSH
23315: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23316: LD_ADDR_VAR 0 2
23320: PUSH
23321: LD_INT 22
23323: PUSH
23324: LD_OWVAR 2
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PPUSH
23333: CALL_OW 69
23337: ST_TO_ADDR
// if not tmp then
23338: LD_VAR 0 2
23342: NOT
23343: IFFALSE 23347
// exit ;
23345: GO 23376
// for i in tmp do
23347: LD_ADDR_VAR 0 1
23351: PUSH
23352: LD_VAR 0 2
23356: PUSH
23357: FOR_IN
23358: IFFALSE 23374
// SetLives ( i , 600 ) ;
23360: LD_VAR 0 1
23364: PPUSH
23365: LD_INT 600
23367: PPUSH
23368: CALL_OW 234
23372: GO 23357
23374: POP
23375: POP
// end ;
23376: PPOPN 2
23378: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23379: LD_INT 0
23381: PPUSH
// case cmd of 301 :
23382: LD_VAR 0 1
23386: PUSH
23387: LD_INT 301
23389: DOUBLE
23390: EQUAL
23391: IFTRUE 23395
23393: GO 23427
23395: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23396: LD_VAR 0 6
23400: PPUSH
23401: LD_VAR 0 7
23405: PPUSH
23406: LD_VAR 0 8
23410: PPUSH
23411: LD_VAR 0 4
23415: PPUSH
23416: LD_VAR 0 5
23420: PPUSH
23421: CALL 24628 0 5
23425: GO 23548
23427: LD_INT 302
23429: DOUBLE
23430: EQUAL
23431: IFTRUE 23435
23433: GO 23472
23435: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23436: LD_VAR 0 6
23440: PPUSH
23441: LD_VAR 0 7
23445: PPUSH
23446: LD_VAR 0 8
23450: PPUSH
23451: LD_VAR 0 9
23455: PPUSH
23456: LD_VAR 0 4
23460: PPUSH
23461: LD_VAR 0 5
23465: PPUSH
23466: CALL 24719 0 6
23470: GO 23548
23472: LD_INT 303
23474: DOUBLE
23475: EQUAL
23476: IFTRUE 23480
23478: GO 23517
23480: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23481: LD_VAR 0 6
23485: PPUSH
23486: LD_VAR 0 7
23490: PPUSH
23491: LD_VAR 0 8
23495: PPUSH
23496: LD_VAR 0 9
23500: PPUSH
23501: LD_VAR 0 4
23505: PPUSH
23506: LD_VAR 0 5
23510: PPUSH
23511: CALL 23553 0 6
23515: GO 23548
23517: LD_INT 304
23519: DOUBLE
23520: EQUAL
23521: IFTRUE 23525
23523: GO 23547
23525: POP
// hHackTeleport ( unit , x , y ) ; end ;
23526: LD_VAR 0 2
23530: PPUSH
23531: LD_VAR 0 4
23535: PPUSH
23536: LD_VAR 0 5
23540: PPUSH
23541: CALL 25312 0 3
23545: GO 23548
23547: POP
// end ;
23548: LD_VAR 0 12
23552: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23553: LD_INT 0
23555: PPUSH
23556: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23557: LD_VAR 0 1
23561: PUSH
23562: LD_INT 1
23564: LESS
23565: PUSH
23566: LD_VAR 0 1
23570: PUSH
23571: LD_INT 3
23573: GREATER
23574: OR
23575: PUSH
23576: LD_VAR 0 5
23580: PPUSH
23581: LD_VAR 0 6
23585: PPUSH
23586: CALL_OW 428
23590: OR
23591: IFFALSE 23595
// exit ;
23593: GO 24315
// uc_side := your_side ;
23595: LD_ADDR_OWVAR 20
23599: PUSH
23600: LD_OWVAR 2
23604: ST_TO_ADDR
// uc_nation := nation ;
23605: LD_ADDR_OWVAR 21
23609: PUSH
23610: LD_VAR 0 1
23614: ST_TO_ADDR
// bc_level = 1 ;
23615: LD_ADDR_OWVAR 43
23619: PUSH
23620: LD_INT 1
23622: ST_TO_ADDR
// case btype of 1 :
23623: LD_VAR 0 2
23627: PUSH
23628: LD_INT 1
23630: DOUBLE
23631: EQUAL
23632: IFTRUE 23636
23634: GO 23647
23636: POP
// bc_type := b_depot ; 2 :
23637: LD_ADDR_OWVAR 42
23641: PUSH
23642: LD_INT 0
23644: ST_TO_ADDR
23645: GO 24259
23647: LD_INT 2
23649: DOUBLE
23650: EQUAL
23651: IFTRUE 23655
23653: GO 23666
23655: POP
// bc_type := b_warehouse ; 3 :
23656: LD_ADDR_OWVAR 42
23660: PUSH
23661: LD_INT 1
23663: ST_TO_ADDR
23664: GO 24259
23666: LD_INT 3
23668: DOUBLE
23669: EQUAL
23670: IFTRUE 23674
23672: GO 23685
23674: POP
// bc_type := b_lab ; 4 .. 9 :
23675: LD_ADDR_OWVAR 42
23679: PUSH
23680: LD_INT 6
23682: ST_TO_ADDR
23683: GO 24259
23685: LD_INT 4
23687: DOUBLE
23688: GREATEREQUAL
23689: IFFALSE 23697
23691: LD_INT 9
23693: DOUBLE
23694: LESSEQUAL
23695: IFTRUE 23699
23697: GO 23751
23699: POP
// begin bc_type := b_lab_half ;
23700: LD_ADDR_OWVAR 42
23704: PUSH
23705: LD_INT 7
23707: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23708: LD_ADDR_OWVAR 44
23712: PUSH
23713: LD_INT 10
23715: PUSH
23716: LD_INT 11
23718: PUSH
23719: LD_INT 12
23721: PUSH
23722: LD_INT 15
23724: PUSH
23725: LD_INT 14
23727: PUSH
23728: LD_INT 13
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: PUSH
23739: LD_VAR 0 2
23743: PUSH
23744: LD_INT 3
23746: MINUS
23747: ARRAY
23748: ST_TO_ADDR
// end ; 10 .. 13 :
23749: GO 24259
23751: LD_INT 10
23753: DOUBLE
23754: GREATEREQUAL
23755: IFFALSE 23763
23757: LD_INT 13
23759: DOUBLE
23760: LESSEQUAL
23761: IFTRUE 23765
23763: GO 23842
23765: POP
// begin bc_type := b_lab_full ;
23766: LD_ADDR_OWVAR 42
23770: PUSH
23771: LD_INT 8
23773: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23774: LD_ADDR_OWVAR 44
23778: PUSH
23779: LD_INT 10
23781: PUSH
23782: LD_INT 12
23784: PUSH
23785: LD_INT 14
23787: PUSH
23788: LD_INT 13
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: PUSH
23797: LD_VAR 0 2
23801: PUSH
23802: LD_INT 9
23804: MINUS
23805: ARRAY
23806: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23807: LD_ADDR_OWVAR 45
23811: PUSH
23812: LD_INT 11
23814: PUSH
23815: LD_INT 15
23817: PUSH
23818: LD_INT 12
23820: PUSH
23821: LD_INT 15
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: LD_VAR 0 2
23834: PUSH
23835: LD_INT 9
23837: MINUS
23838: ARRAY
23839: ST_TO_ADDR
// end ; 14 :
23840: GO 24259
23842: LD_INT 14
23844: DOUBLE
23845: EQUAL
23846: IFTRUE 23850
23848: GO 23861
23850: POP
// bc_type := b_workshop ; 15 :
23851: LD_ADDR_OWVAR 42
23855: PUSH
23856: LD_INT 2
23858: ST_TO_ADDR
23859: GO 24259
23861: LD_INT 15
23863: DOUBLE
23864: EQUAL
23865: IFTRUE 23869
23867: GO 23880
23869: POP
// bc_type := b_factory ; 16 :
23870: LD_ADDR_OWVAR 42
23874: PUSH
23875: LD_INT 3
23877: ST_TO_ADDR
23878: GO 24259
23880: LD_INT 16
23882: DOUBLE
23883: EQUAL
23884: IFTRUE 23888
23886: GO 23899
23888: POP
// bc_type := b_ext_gun ; 17 :
23889: LD_ADDR_OWVAR 42
23893: PUSH
23894: LD_INT 17
23896: ST_TO_ADDR
23897: GO 24259
23899: LD_INT 17
23901: DOUBLE
23902: EQUAL
23903: IFTRUE 23907
23905: GO 23935
23907: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23908: LD_ADDR_OWVAR 42
23912: PUSH
23913: LD_INT 19
23915: PUSH
23916: LD_INT 23
23918: PUSH
23919: LD_INT 19
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: PUSH
23927: LD_VAR 0 1
23931: ARRAY
23932: ST_TO_ADDR
23933: GO 24259
23935: LD_INT 18
23937: DOUBLE
23938: EQUAL
23939: IFTRUE 23943
23941: GO 23954
23943: POP
// bc_type := b_ext_radar ; 19 :
23944: LD_ADDR_OWVAR 42
23948: PUSH
23949: LD_INT 20
23951: ST_TO_ADDR
23952: GO 24259
23954: LD_INT 19
23956: DOUBLE
23957: EQUAL
23958: IFTRUE 23962
23960: GO 23973
23962: POP
// bc_type := b_ext_radio ; 20 :
23963: LD_ADDR_OWVAR 42
23967: PUSH
23968: LD_INT 22
23970: ST_TO_ADDR
23971: GO 24259
23973: LD_INT 20
23975: DOUBLE
23976: EQUAL
23977: IFTRUE 23981
23979: GO 23992
23981: POP
// bc_type := b_ext_siberium ; 21 :
23982: LD_ADDR_OWVAR 42
23986: PUSH
23987: LD_INT 21
23989: ST_TO_ADDR
23990: GO 24259
23992: LD_INT 21
23994: DOUBLE
23995: EQUAL
23996: IFTRUE 24000
23998: GO 24011
24000: POP
// bc_type := b_ext_computer ; 22 :
24001: LD_ADDR_OWVAR 42
24005: PUSH
24006: LD_INT 24
24008: ST_TO_ADDR
24009: GO 24259
24011: LD_INT 22
24013: DOUBLE
24014: EQUAL
24015: IFTRUE 24019
24017: GO 24030
24019: POP
// bc_type := b_ext_track ; 23 :
24020: LD_ADDR_OWVAR 42
24024: PUSH
24025: LD_INT 16
24027: ST_TO_ADDR
24028: GO 24259
24030: LD_INT 23
24032: DOUBLE
24033: EQUAL
24034: IFTRUE 24038
24036: GO 24049
24038: POP
// bc_type := b_ext_laser ; 24 :
24039: LD_ADDR_OWVAR 42
24043: PUSH
24044: LD_INT 25
24046: ST_TO_ADDR
24047: GO 24259
24049: LD_INT 24
24051: DOUBLE
24052: EQUAL
24053: IFTRUE 24057
24055: GO 24068
24057: POP
// bc_type := b_control_tower ; 25 :
24058: LD_ADDR_OWVAR 42
24062: PUSH
24063: LD_INT 36
24065: ST_TO_ADDR
24066: GO 24259
24068: LD_INT 25
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24087
24076: POP
// bc_type := b_breastwork ; 26 :
24077: LD_ADDR_OWVAR 42
24081: PUSH
24082: LD_INT 31
24084: ST_TO_ADDR
24085: GO 24259
24087: LD_INT 26
24089: DOUBLE
24090: EQUAL
24091: IFTRUE 24095
24093: GO 24106
24095: POP
// bc_type := b_bunker ; 27 :
24096: LD_ADDR_OWVAR 42
24100: PUSH
24101: LD_INT 32
24103: ST_TO_ADDR
24104: GO 24259
24106: LD_INT 27
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24125
24114: POP
// bc_type := b_turret ; 28 :
24115: LD_ADDR_OWVAR 42
24119: PUSH
24120: LD_INT 33
24122: ST_TO_ADDR
24123: GO 24259
24125: LD_INT 28
24127: DOUBLE
24128: EQUAL
24129: IFTRUE 24133
24131: GO 24144
24133: POP
// bc_type := b_armoury ; 29 :
24134: LD_ADDR_OWVAR 42
24138: PUSH
24139: LD_INT 4
24141: ST_TO_ADDR
24142: GO 24259
24144: LD_INT 29
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24163
24152: POP
// bc_type := b_barracks ; 30 :
24153: LD_ADDR_OWVAR 42
24157: PUSH
24158: LD_INT 5
24160: ST_TO_ADDR
24161: GO 24259
24163: LD_INT 30
24165: DOUBLE
24166: EQUAL
24167: IFTRUE 24171
24169: GO 24182
24171: POP
// bc_type := b_solar_power ; 31 :
24172: LD_ADDR_OWVAR 42
24176: PUSH
24177: LD_INT 27
24179: ST_TO_ADDR
24180: GO 24259
24182: LD_INT 31
24184: DOUBLE
24185: EQUAL
24186: IFTRUE 24190
24188: GO 24201
24190: POP
// bc_type := b_oil_power ; 32 :
24191: LD_ADDR_OWVAR 42
24195: PUSH
24196: LD_INT 26
24198: ST_TO_ADDR
24199: GO 24259
24201: LD_INT 32
24203: DOUBLE
24204: EQUAL
24205: IFTRUE 24209
24207: GO 24220
24209: POP
// bc_type := b_siberite_power ; 33 :
24210: LD_ADDR_OWVAR 42
24214: PUSH
24215: LD_INT 28
24217: ST_TO_ADDR
24218: GO 24259
24220: LD_INT 33
24222: DOUBLE
24223: EQUAL
24224: IFTRUE 24228
24226: GO 24239
24228: POP
// bc_type := b_oil_mine ; 34 :
24229: LD_ADDR_OWVAR 42
24233: PUSH
24234: LD_INT 29
24236: ST_TO_ADDR
24237: GO 24259
24239: LD_INT 34
24241: DOUBLE
24242: EQUAL
24243: IFTRUE 24247
24245: GO 24258
24247: POP
// bc_type := b_siberite_mine ; end ;
24248: LD_ADDR_OWVAR 42
24252: PUSH
24253: LD_INT 30
24255: ST_TO_ADDR
24256: GO 24259
24258: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24259: LD_ADDR_VAR 0 8
24263: PUSH
24264: LD_VAR 0 5
24268: PPUSH
24269: LD_VAR 0 6
24273: PPUSH
24274: LD_VAR 0 3
24278: PPUSH
24279: CALL_OW 47
24283: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24284: LD_OWVAR 42
24288: PUSH
24289: LD_INT 32
24291: PUSH
24292: LD_INT 33
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: IN
24299: IFFALSE 24315
// PlaceWeaponTurret ( b , weapon ) ;
24301: LD_VAR 0 8
24305: PPUSH
24306: LD_VAR 0 4
24310: PPUSH
24311: CALL_OW 431
// end ;
24315: LD_VAR 0 7
24319: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24320: LD_INT 0
24322: PPUSH
24323: PPUSH
24324: PPUSH
24325: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24326: LD_ADDR_VAR 0 4
24330: PUSH
24331: LD_INT 22
24333: PUSH
24334: LD_OWVAR 2
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: LD_INT 30
24348: PUSH
24349: LD_INT 0
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 30
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PPUSH
24375: CALL_OW 69
24379: ST_TO_ADDR
// if not tmp then
24380: LD_VAR 0 4
24384: NOT
24385: IFFALSE 24389
// exit ;
24387: GO 24448
// for i in tmp do
24389: LD_ADDR_VAR 0 2
24393: PUSH
24394: LD_VAR 0 4
24398: PUSH
24399: FOR_IN
24400: IFFALSE 24446
// for j = 1 to 3 do
24402: LD_ADDR_VAR 0 3
24406: PUSH
24407: DOUBLE
24408: LD_INT 1
24410: DEC
24411: ST_TO_ADDR
24412: LD_INT 3
24414: PUSH
24415: FOR_TO
24416: IFFALSE 24442
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24418: LD_VAR 0 2
24422: PPUSH
24423: CALL_OW 274
24427: PPUSH
24428: LD_VAR 0 3
24432: PPUSH
24433: LD_INT 99999
24435: PPUSH
24436: CALL_OW 277
24440: GO 24415
24442: POP
24443: POP
24444: GO 24399
24446: POP
24447: POP
// end ;
24448: LD_VAR 0 1
24452: RET
// export function hHackSetLevel10 ; var i , j ; begin
24453: LD_INT 0
24455: PPUSH
24456: PPUSH
24457: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24458: LD_ADDR_VAR 0 2
24462: PUSH
24463: LD_INT 21
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PPUSH
24473: CALL_OW 69
24477: PUSH
24478: FOR_IN
24479: IFFALSE 24531
// if IsSelected ( i ) then
24481: LD_VAR 0 2
24485: PPUSH
24486: CALL_OW 306
24490: IFFALSE 24529
// begin for j := 1 to 4 do
24492: LD_ADDR_VAR 0 3
24496: PUSH
24497: DOUBLE
24498: LD_INT 1
24500: DEC
24501: ST_TO_ADDR
24502: LD_INT 4
24504: PUSH
24505: FOR_TO
24506: IFFALSE 24527
// SetSkill ( i , j , 10 ) ;
24508: LD_VAR 0 2
24512: PPUSH
24513: LD_VAR 0 3
24517: PPUSH
24518: LD_INT 10
24520: PPUSH
24521: CALL_OW 237
24525: GO 24505
24527: POP
24528: POP
// end ;
24529: GO 24478
24531: POP
24532: POP
// end ;
24533: LD_VAR 0 1
24537: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24538: LD_INT 0
24540: PPUSH
24541: PPUSH
24542: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24543: LD_ADDR_VAR 0 2
24547: PUSH
24548: LD_INT 22
24550: PUSH
24551: LD_OWVAR 2
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 21
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PPUSH
24574: CALL_OW 69
24578: PUSH
24579: FOR_IN
24580: IFFALSE 24621
// begin for j := 1 to 4 do
24582: LD_ADDR_VAR 0 3
24586: PUSH
24587: DOUBLE
24588: LD_INT 1
24590: DEC
24591: ST_TO_ADDR
24592: LD_INT 4
24594: PUSH
24595: FOR_TO
24596: IFFALSE 24617
// SetSkill ( i , j , 10 ) ;
24598: LD_VAR 0 2
24602: PPUSH
24603: LD_VAR 0 3
24607: PPUSH
24608: LD_INT 10
24610: PPUSH
24611: CALL_OW 237
24615: GO 24595
24617: POP
24618: POP
// end ;
24619: GO 24579
24621: POP
24622: POP
// end ;
24623: LD_VAR 0 1
24627: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24628: LD_INT 0
24630: PPUSH
// uc_side := your_side ;
24631: LD_ADDR_OWVAR 20
24635: PUSH
24636: LD_OWVAR 2
24640: ST_TO_ADDR
// uc_nation := nation ;
24641: LD_ADDR_OWVAR 21
24645: PUSH
24646: LD_VAR 0 1
24650: ST_TO_ADDR
// InitHc ;
24651: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24655: LD_INT 0
24657: PPUSH
24658: LD_VAR 0 2
24662: PPUSH
24663: LD_VAR 0 3
24667: PPUSH
24668: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24672: LD_VAR 0 4
24676: PPUSH
24677: LD_VAR 0 5
24681: PPUSH
24682: CALL_OW 428
24686: PUSH
24687: LD_INT 0
24689: EQUAL
24690: IFFALSE 24714
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24692: CALL_OW 44
24696: PPUSH
24697: LD_VAR 0 4
24701: PPUSH
24702: LD_VAR 0 5
24706: PPUSH
24707: LD_INT 1
24709: PPUSH
24710: CALL_OW 48
// end ;
24714: LD_VAR 0 6
24718: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24719: LD_INT 0
24721: PPUSH
24722: PPUSH
// uc_side := your_side ;
24723: LD_ADDR_OWVAR 20
24727: PUSH
24728: LD_OWVAR 2
24732: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24733: LD_VAR 0 1
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: LD_INT 4
24749: PUSH
24750: LD_INT 5
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: IN
24760: IFFALSE 24772
// uc_nation := nation_american else
24762: LD_ADDR_OWVAR 21
24766: PUSH
24767: LD_INT 1
24769: ST_TO_ADDR
24770: GO 24815
// if chassis in [ 11 , 12 , 13 , 14 ] then
24772: LD_VAR 0 1
24776: PUSH
24777: LD_INT 11
24779: PUSH
24780: LD_INT 12
24782: PUSH
24783: LD_INT 13
24785: PUSH
24786: LD_INT 14
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: IN
24795: IFFALSE 24807
// uc_nation := nation_arabian else
24797: LD_ADDR_OWVAR 21
24801: PUSH
24802: LD_INT 2
24804: ST_TO_ADDR
24805: GO 24815
// uc_nation := nation_russian ;
24807: LD_ADDR_OWVAR 21
24811: PUSH
24812: LD_INT 3
24814: ST_TO_ADDR
// vc_chassis := chassis ;
24815: LD_ADDR_OWVAR 37
24819: PUSH
24820: LD_VAR 0 1
24824: ST_TO_ADDR
// vc_engine := engine ;
24825: LD_ADDR_OWVAR 39
24829: PUSH
24830: LD_VAR 0 2
24834: ST_TO_ADDR
// vc_control := control ;
24835: LD_ADDR_OWVAR 38
24839: PUSH
24840: LD_VAR 0 3
24844: ST_TO_ADDR
// vc_weapon := weapon ;
24845: LD_ADDR_OWVAR 40
24849: PUSH
24850: LD_VAR 0 4
24854: ST_TO_ADDR
// un := CreateVehicle ;
24855: LD_ADDR_VAR 0 8
24859: PUSH
24860: CALL_OW 45
24864: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24865: LD_VAR 0 8
24869: PPUSH
24870: LD_INT 0
24872: PPUSH
24873: LD_INT 5
24875: PPUSH
24876: CALL_OW 12
24880: PPUSH
24881: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24885: LD_VAR 0 8
24889: PPUSH
24890: LD_VAR 0 5
24894: PPUSH
24895: LD_VAR 0 6
24899: PPUSH
24900: LD_INT 1
24902: PPUSH
24903: CALL_OW 48
// end ;
24907: LD_VAR 0 7
24911: RET
// export hInvincible ; every 1 do
24912: GO 24914
24914: DISABLE
// hInvincible := [ ] ;
24915: LD_ADDR_EXP 97
24919: PUSH
24920: EMPTY
24921: ST_TO_ADDR
24922: END
// every 10 do var i ;
24923: GO 24925
24925: DISABLE
24926: LD_INT 0
24928: PPUSH
// begin enable ;
24929: ENABLE
// if not hInvincible then
24930: LD_EXP 97
24934: NOT
24935: IFFALSE 24939
// exit ;
24937: GO 24983
// for i in hInvincible do
24939: LD_ADDR_VAR 0 1
24943: PUSH
24944: LD_EXP 97
24948: PUSH
24949: FOR_IN
24950: IFFALSE 24981
// if GetLives ( i ) < 1000 then
24952: LD_VAR 0 1
24956: PPUSH
24957: CALL_OW 256
24961: PUSH
24962: LD_INT 1000
24964: LESS
24965: IFFALSE 24979
// SetLives ( i , 1000 ) ;
24967: LD_VAR 0 1
24971: PPUSH
24972: LD_INT 1000
24974: PPUSH
24975: CALL_OW 234
24979: GO 24949
24981: POP
24982: POP
// end ;
24983: PPOPN 1
24985: END
// export function hHackInvincible ; var i ; begin
24986: LD_INT 0
24988: PPUSH
24989: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24990: LD_ADDR_VAR 0 2
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: LD_INT 21
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 21
25010: PUSH
25011: LD_INT 2
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: PPUSH
25023: CALL_OW 69
25027: PUSH
25028: FOR_IN
25029: IFFALSE 25090
// if IsSelected ( i ) then
25031: LD_VAR 0 2
25035: PPUSH
25036: CALL_OW 306
25040: IFFALSE 25088
// begin if i in hInvincible then
25042: LD_VAR 0 2
25046: PUSH
25047: LD_EXP 97
25051: IN
25052: IFFALSE 25072
// hInvincible := hInvincible diff i else
25054: LD_ADDR_EXP 97
25058: PUSH
25059: LD_EXP 97
25063: PUSH
25064: LD_VAR 0 2
25068: DIFF
25069: ST_TO_ADDR
25070: GO 25088
// hInvincible := hInvincible union i ;
25072: LD_ADDR_EXP 97
25076: PUSH
25077: LD_EXP 97
25081: PUSH
25082: LD_VAR 0 2
25086: UNION
25087: ST_TO_ADDR
// end ;
25088: GO 25028
25090: POP
25091: POP
// end ;
25092: LD_VAR 0 1
25096: RET
// export function hHackInvisible ; var i , j ; begin
25097: LD_INT 0
25099: PPUSH
25100: PPUSH
25101: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25102: LD_ADDR_VAR 0 2
25106: PUSH
25107: LD_INT 21
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PPUSH
25117: CALL_OW 69
25121: PUSH
25122: FOR_IN
25123: IFFALSE 25147
// if IsSelected ( i ) then
25125: LD_VAR 0 2
25129: PPUSH
25130: CALL_OW 306
25134: IFFALSE 25145
// ComForceInvisible ( i ) ;
25136: LD_VAR 0 2
25140: PPUSH
25141: CALL_OW 496
25145: GO 25122
25147: POP
25148: POP
// end ;
25149: LD_VAR 0 1
25153: RET
// export function hHackChangeYourSide ; begin
25154: LD_INT 0
25156: PPUSH
// if your_side = 8 then
25157: LD_OWVAR 2
25161: PUSH
25162: LD_INT 8
25164: EQUAL
25165: IFFALSE 25177
// your_side := 0 else
25167: LD_ADDR_OWVAR 2
25171: PUSH
25172: LD_INT 0
25174: ST_TO_ADDR
25175: GO 25191
// your_side := your_side + 1 ;
25177: LD_ADDR_OWVAR 2
25181: PUSH
25182: LD_OWVAR 2
25186: PUSH
25187: LD_INT 1
25189: PLUS
25190: ST_TO_ADDR
// end ;
25191: LD_VAR 0 1
25195: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25196: LD_INT 0
25198: PPUSH
25199: PPUSH
25200: PPUSH
// for i in all_units do
25201: LD_ADDR_VAR 0 2
25205: PUSH
25206: LD_OWVAR 3
25210: PUSH
25211: FOR_IN
25212: IFFALSE 25290
// if IsSelected ( i ) then
25214: LD_VAR 0 2
25218: PPUSH
25219: CALL_OW 306
25223: IFFALSE 25288
// begin j := GetSide ( i ) ;
25225: LD_ADDR_VAR 0 3
25229: PUSH
25230: LD_VAR 0 2
25234: PPUSH
25235: CALL_OW 255
25239: ST_TO_ADDR
// if j = 8 then
25240: LD_VAR 0 3
25244: PUSH
25245: LD_INT 8
25247: EQUAL
25248: IFFALSE 25260
// j := 0 else
25250: LD_ADDR_VAR 0 3
25254: PUSH
25255: LD_INT 0
25257: ST_TO_ADDR
25258: GO 25274
// j := j + 1 ;
25260: LD_ADDR_VAR 0 3
25264: PUSH
25265: LD_VAR 0 3
25269: PUSH
25270: LD_INT 1
25272: PLUS
25273: ST_TO_ADDR
// SetSide ( i , j ) ;
25274: LD_VAR 0 2
25278: PPUSH
25279: LD_VAR 0 3
25283: PPUSH
25284: CALL_OW 235
// end ;
25288: GO 25211
25290: POP
25291: POP
// end ;
25292: LD_VAR 0 1
25296: RET
// export function hHackFog ; begin
25297: LD_INT 0
25299: PPUSH
// FogOff ( true ) ;
25300: LD_INT 1
25302: PPUSH
25303: CALL_OW 344
// end ;
25307: LD_VAR 0 1
25311: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25312: LD_INT 0
25314: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25315: LD_VAR 0 1
25319: PPUSH
25320: LD_VAR 0 2
25324: PPUSH
25325: LD_VAR 0 3
25329: PPUSH
25330: LD_INT 1
25332: PPUSH
25333: LD_INT 1
25335: PPUSH
25336: CALL_OW 483
// CenterOnXY ( x , y ) ;
25340: LD_VAR 0 2
25344: PPUSH
25345: LD_VAR 0 3
25349: PPUSH
25350: CALL_OW 84
// end ; end_of_file
25354: LD_VAR 0 4
25358: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25359: LD_INT 0
25361: PPUSH
25362: PPUSH
25363: PPUSH
25364: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25365: LD_VAR 0 1
25369: PPUSH
25370: CALL_OW 264
25374: PUSH
25375: LD_EXP 25
25379: EQUAL
25380: IFFALSE 25452
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25382: LD_INT 68
25384: PPUSH
25385: LD_VAR 0 1
25389: PPUSH
25390: CALL_OW 255
25394: PPUSH
25395: CALL_OW 321
25399: PUSH
25400: LD_INT 2
25402: EQUAL
25403: IFFALSE 25415
// eff := 70 else
25405: LD_ADDR_VAR 0 4
25409: PUSH
25410: LD_INT 70
25412: ST_TO_ADDR
25413: GO 25423
// eff := 30 ;
25415: LD_ADDR_VAR 0 4
25419: PUSH
25420: LD_INT 30
25422: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25423: LD_VAR 0 1
25427: PPUSH
25428: CALL_OW 250
25432: PPUSH
25433: LD_VAR 0 1
25437: PPUSH
25438: CALL_OW 251
25442: PPUSH
25443: LD_VAR 0 4
25447: PPUSH
25448: CALL_OW 495
// end ; end ;
25452: LD_VAR 0 2
25456: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25457: LD_INT 0
25459: PPUSH
// end ;
25460: LD_VAR 0 4
25464: RET
// export function SOS_Command ( cmd ) ; begin
25465: LD_INT 0
25467: PPUSH
// end ;
25468: LD_VAR 0 2
25472: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25473: LD_INT 0
25475: PPUSH
// end ;
25476: LD_VAR 0 6
25480: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25481: LD_INT 0
25483: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25484: LD_VAR 0 1
25488: PUSH
25489: LD_INT 250
25491: EQUAL
25492: PUSH
25493: LD_VAR 0 2
25497: PPUSH
25498: CALL_OW 264
25502: PUSH
25503: LD_EXP 28
25507: EQUAL
25508: AND
25509: IFFALSE 25530
// MinerPlaceMine ( unit , x , y ) ;
25511: LD_VAR 0 2
25515: PPUSH
25516: LD_VAR 0 4
25520: PPUSH
25521: LD_VAR 0 5
25525: PPUSH
25526: CALL 27879 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25530: LD_VAR 0 1
25534: PUSH
25535: LD_INT 251
25537: EQUAL
25538: PUSH
25539: LD_VAR 0 2
25543: PPUSH
25544: CALL_OW 264
25548: PUSH
25549: LD_EXP 28
25553: EQUAL
25554: AND
25555: IFFALSE 25576
// MinerDetonateMine ( unit , x , y ) ;
25557: LD_VAR 0 2
25561: PPUSH
25562: LD_VAR 0 4
25566: PPUSH
25567: LD_VAR 0 5
25571: PPUSH
25572: CALL 28156 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25576: LD_VAR 0 1
25580: PUSH
25581: LD_INT 252
25583: EQUAL
25584: PUSH
25585: LD_VAR 0 2
25589: PPUSH
25590: CALL_OW 264
25594: PUSH
25595: LD_EXP 28
25599: EQUAL
25600: AND
25601: IFFALSE 25622
// MinerCreateMinefield ( unit , x , y ) ;
25603: LD_VAR 0 2
25607: PPUSH
25608: LD_VAR 0 4
25612: PPUSH
25613: LD_VAR 0 5
25617: PPUSH
25618: CALL 28573 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25622: LD_VAR 0 1
25626: PUSH
25627: LD_INT 253
25629: EQUAL
25630: PUSH
25631: LD_VAR 0 2
25635: PPUSH
25636: CALL_OW 257
25640: PUSH
25641: LD_INT 5
25643: EQUAL
25644: AND
25645: IFFALSE 25666
// ComBinocular ( unit , x , y ) ;
25647: LD_VAR 0 2
25651: PPUSH
25652: LD_VAR 0 4
25656: PPUSH
25657: LD_VAR 0 5
25661: PPUSH
25662: CALL 28944 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25666: LD_VAR 0 1
25670: PUSH
25671: LD_INT 254
25673: EQUAL
25674: PUSH
25675: LD_VAR 0 2
25679: PPUSH
25680: CALL_OW 264
25684: PUSH
25685: LD_EXP 23
25689: EQUAL
25690: AND
25691: PUSH
25692: LD_VAR 0 3
25696: PPUSH
25697: CALL_OW 263
25701: PUSH
25702: LD_INT 3
25704: EQUAL
25705: AND
25706: IFFALSE 25722
// HackDestroyVehicle ( unit , selectedUnit ) ;
25708: LD_VAR 0 2
25712: PPUSH
25713: LD_VAR 0 3
25717: PPUSH
25718: CALL 27239 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25722: LD_VAR 0 1
25726: PUSH
25727: LD_INT 255
25729: EQUAL
25730: PUSH
25731: LD_VAR 0 2
25735: PPUSH
25736: CALL_OW 264
25740: PUSH
25741: LD_INT 14
25743: PUSH
25744: LD_INT 53
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: IN
25751: AND
25752: PUSH
25753: LD_VAR 0 4
25757: PPUSH
25758: LD_VAR 0 5
25762: PPUSH
25763: CALL_OW 488
25767: AND
25768: IFFALSE 25792
// CutTreeXYR ( unit , x , y , 12 ) ;
25770: LD_VAR 0 2
25774: PPUSH
25775: LD_VAR 0 4
25779: PPUSH
25780: LD_VAR 0 5
25784: PPUSH
25785: LD_INT 12
25787: PPUSH
25788: CALL 25805 0 4
// end ;
25792: LD_VAR 0 6
25796: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25797: LD_INT 0
25799: PPUSH
// end ;
25800: LD_VAR 0 4
25804: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25805: LD_INT 0
25807: PPUSH
25808: PPUSH
25809: PPUSH
25810: PPUSH
25811: PPUSH
25812: PPUSH
25813: PPUSH
25814: PPUSH
25815: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25816: LD_VAR 0 1
25820: NOT
25821: PUSH
25822: LD_VAR 0 2
25826: PPUSH
25827: LD_VAR 0 3
25831: PPUSH
25832: CALL_OW 488
25836: NOT
25837: OR
25838: PUSH
25839: LD_VAR 0 4
25843: NOT
25844: OR
25845: IFFALSE 25849
// exit ;
25847: GO 26189
// list := [ ] ;
25849: LD_ADDR_VAR 0 13
25853: PUSH
25854: EMPTY
25855: ST_TO_ADDR
// if x - r < 0 then
25856: LD_VAR 0 2
25860: PUSH
25861: LD_VAR 0 4
25865: MINUS
25866: PUSH
25867: LD_INT 0
25869: LESS
25870: IFFALSE 25882
// min_x := 0 else
25872: LD_ADDR_VAR 0 7
25876: PUSH
25877: LD_INT 0
25879: ST_TO_ADDR
25880: GO 25898
// min_x := x - r ;
25882: LD_ADDR_VAR 0 7
25886: PUSH
25887: LD_VAR 0 2
25891: PUSH
25892: LD_VAR 0 4
25896: MINUS
25897: ST_TO_ADDR
// if y - r < 0 then
25898: LD_VAR 0 3
25902: PUSH
25903: LD_VAR 0 4
25907: MINUS
25908: PUSH
25909: LD_INT 0
25911: LESS
25912: IFFALSE 25924
// min_y := 0 else
25914: LD_ADDR_VAR 0 8
25918: PUSH
25919: LD_INT 0
25921: ST_TO_ADDR
25922: GO 25940
// min_y := y - r ;
25924: LD_ADDR_VAR 0 8
25928: PUSH
25929: LD_VAR 0 3
25933: PUSH
25934: LD_VAR 0 4
25938: MINUS
25939: ST_TO_ADDR
// max_x := x + r ;
25940: LD_ADDR_VAR 0 9
25944: PUSH
25945: LD_VAR 0 2
25949: PUSH
25950: LD_VAR 0 4
25954: PLUS
25955: ST_TO_ADDR
// max_y := y + r ;
25956: LD_ADDR_VAR 0 10
25960: PUSH
25961: LD_VAR 0 3
25965: PUSH
25966: LD_VAR 0 4
25970: PLUS
25971: ST_TO_ADDR
// for _x = min_x to max_x do
25972: LD_ADDR_VAR 0 11
25976: PUSH
25977: DOUBLE
25978: LD_VAR 0 7
25982: DEC
25983: ST_TO_ADDR
25984: LD_VAR 0 9
25988: PUSH
25989: FOR_TO
25990: IFFALSE 26107
// for _y = min_y to max_y do
25992: LD_ADDR_VAR 0 12
25996: PUSH
25997: DOUBLE
25998: LD_VAR 0 8
26002: DEC
26003: ST_TO_ADDR
26004: LD_VAR 0 10
26008: PUSH
26009: FOR_TO
26010: IFFALSE 26103
// begin if not ValidHex ( _x , _y ) then
26012: LD_VAR 0 11
26016: PPUSH
26017: LD_VAR 0 12
26021: PPUSH
26022: CALL_OW 488
26026: NOT
26027: IFFALSE 26031
// continue ;
26029: GO 26009
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26031: LD_VAR 0 11
26035: PPUSH
26036: LD_VAR 0 12
26040: PPUSH
26041: CALL_OW 351
26045: PUSH
26046: LD_VAR 0 11
26050: PPUSH
26051: LD_VAR 0 12
26055: PPUSH
26056: CALL_OW 554
26060: AND
26061: IFFALSE 26101
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26063: LD_ADDR_VAR 0 13
26067: PUSH
26068: LD_VAR 0 13
26072: PPUSH
26073: LD_VAR 0 13
26077: PUSH
26078: LD_INT 1
26080: PLUS
26081: PPUSH
26082: LD_VAR 0 11
26086: PUSH
26087: LD_VAR 0 12
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PPUSH
26096: CALL_OW 2
26100: ST_TO_ADDR
// end ;
26101: GO 26009
26103: POP
26104: POP
26105: GO 25989
26107: POP
26108: POP
// if not list then
26109: LD_VAR 0 13
26113: NOT
26114: IFFALSE 26118
// exit ;
26116: GO 26189
// for i in list do
26118: LD_ADDR_VAR 0 6
26122: PUSH
26123: LD_VAR 0 13
26127: PUSH
26128: FOR_IN
26129: IFFALSE 26187
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26131: LD_VAR 0 1
26135: PPUSH
26136: LD_STRING M
26138: PUSH
26139: LD_VAR 0 6
26143: PUSH
26144: LD_INT 1
26146: ARRAY
26147: PUSH
26148: LD_VAR 0 6
26152: PUSH
26153: LD_INT 2
26155: ARRAY
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: PUSH
26178: EMPTY
26179: LIST
26180: PPUSH
26181: CALL_OW 447
26185: GO 26128
26187: POP
26188: POP
// end ;
26189: LD_VAR 0 5
26193: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26194: LD_EXP 100
26198: NOT
26199: IFFALSE 26249
26201: GO 26203
26203: DISABLE
// begin initHack := true ;
26204: LD_ADDR_EXP 100
26208: PUSH
26209: LD_INT 1
26211: ST_TO_ADDR
// hackTanks := [ ] ;
26212: LD_ADDR_EXP 101
26216: PUSH
26217: EMPTY
26218: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26219: LD_ADDR_EXP 102
26223: PUSH
26224: EMPTY
26225: ST_TO_ADDR
// hackLimit := 3 ;
26226: LD_ADDR_EXP 103
26230: PUSH
26231: LD_INT 3
26233: ST_TO_ADDR
// hackDist := 12 ;
26234: LD_ADDR_EXP 104
26238: PUSH
26239: LD_INT 12
26241: ST_TO_ADDR
// hackCounter := [ ] ;
26242: LD_ADDR_EXP 105
26246: PUSH
26247: EMPTY
26248: ST_TO_ADDR
// end ;
26249: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26250: LD_EXP 100
26254: PUSH
26255: LD_INT 34
26257: PUSH
26258: LD_EXP 23
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PPUSH
26267: CALL_OW 69
26271: AND
26272: IFFALSE 26527
26274: GO 26276
26276: DISABLE
26277: LD_INT 0
26279: PPUSH
26280: PPUSH
// begin enable ;
26281: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26282: LD_ADDR_VAR 0 1
26286: PUSH
26287: LD_INT 34
26289: PUSH
26290: LD_EXP 23
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PPUSH
26299: CALL_OW 69
26303: PUSH
26304: FOR_IN
26305: IFFALSE 26525
// begin if not i in hackTanks then
26307: LD_VAR 0 1
26311: PUSH
26312: LD_EXP 101
26316: IN
26317: NOT
26318: IFFALSE 26401
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26320: LD_ADDR_EXP 101
26324: PUSH
26325: LD_EXP 101
26329: PPUSH
26330: LD_EXP 101
26334: PUSH
26335: LD_INT 1
26337: PLUS
26338: PPUSH
26339: LD_VAR 0 1
26343: PPUSH
26344: CALL_OW 1
26348: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26349: LD_ADDR_EXP 102
26353: PUSH
26354: LD_EXP 102
26358: PPUSH
26359: LD_EXP 102
26363: PUSH
26364: LD_INT 1
26366: PLUS
26367: PPUSH
26368: EMPTY
26369: PPUSH
26370: CALL_OW 1
26374: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26375: LD_ADDR_EXP 105
26379: PUSH
26380: LD_EXP 105
26384: PPUSH
26385: LD_EXP 105
26389: PUSH
26390: LD_INT 1
26392: PLUS
26393: PPUSH
26394: EMPTY
26395: PPUSH
26396: CALL_OW 1
26400: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26401: LD_VAR 0 1
26405: PPUSH
26406: CALL_OW 302
26410: NOT
26411: IFFALSE 26424
// begin HackUnlinkAll ( i ) ;
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL 26530 0 1
// continue ;
26422: GO 26304
// end ; HackCheckCapturedStatus ( i ) ;
26424: LD_VAR 0 1
26428: PPUSH
26429: CALL 26973 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26433: LD_ADDR_VAR 0 2
26437: PUSH
26438: LD_INT 81
26440: PUSH
26441: LD_VAR 0 1
26445: PPUSH
26446: CALL_OW 255
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 33
26457: PUSH
26458: LD_INT 3
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 91
26467: PUSH
26468: LD_VAR 0 1
26472: PUSH
26473: LD_EXP 104
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 50
26485: PUSH
26486: EMPTY
26487: LIST
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: PPUSH
26495: CALL_OW 69
26499: ST_TO_ADDR
// if not tmp then
26500: LD_VAR 0 2
26504: NOT
26505: IFFALSE 26509
// continue ;
26507: GO 26304
// HackLink ( i , tmp ) ;
26509: LD_VAR 0 1
26513: PPUSH
26514: LD_VAR 0 2
26518: PPUSH
26519: CALL 26666 0 2
// end ;
26523: GO 26304
26525: POP
26526: POP
// end ;
26527: PPOPN 2
26529: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26530: LD_INT 0
26532: PPUSH
26533: PPUSH
26534: PPUSH
// if not hack in hackTanks then
26535: LD_VAR 0 1
26539: PUSH
26540: LD_EXP 101
26544: IN
26545: NOT
26546: IFFALSE 26550
// exit ;
26548: GO 26661
// index := GetElementIndex ( hackTanks , hack ) ;
26550: LD_ADDR_VAR 0 4
26554: PUSH
26555: LD_EXP 101
26559: PPUSH
26560: LD_VAR 0 1
26564: PPUSH
26565: CALL 34135 0 2
26569: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26570: LD_EXP 102
26574: PUSH
26575: LD_VAR 0 4
26579: ARRAY
26580: IFFALSE 26661
// begin for i in hackTanksCaptured [ index ] do
26582: LD_ADDR_VAR 0 3
26586: PUSH
26587: LD_EXP 102
26591: PUSH
26592: LD_VAR 0 4
26596: ARRAY
26597: PUSH
26598: FOR_IN
26599: IFFALSE 26625
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26601: LD_VAR 0 3
26605: PUSH
26606: LD_INT 1
26608: ARRAY
26609: PPUSH
26610: LD_VAR 0 3
26614: PUSH
26615: LD_INT 2
26617: ARRAY
26618: PPUSH
26619: CALL_OW 235
26623: GO 26598
26625: POP
26626: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26627: LD_ADDR_EXP 102
26631: PUSH
26632: LD_EXP 102
26636: PPUSH
26637: LD_VAR 0 4
26641: PPUSH
26642: EMPTY
26643: PPUSH
26644: CALL_OW 1
26648: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26649: LD_VAR 0 1
26653: PPUSH
26654: LD_INT 0
26656: PPUSH
26657: CALL_OW 505
// end ; end ;
26661: LD_VAR 0 2
26665: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26666: LD_INT 0
26668: PPUSH
26669: PPUSH
26670: PPUSH
// if not hack in hackTanks or not vehicles then
26671: LD_VAR 0 1
26675: PUSH
26676: LD_EXP 101
26680: IN
26681: NOT
26682: PUSH
26683: LD_VAR 0 2
26687: NOT
26688: OR
26689: IFFALSE 26693
// exit ;
26691: GO 26968
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26693: LD_ADDR_VAR 0 2
26697: PUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: LD_VAR 0 2
26707: PPUSH
26708: LD_INT 1
26710: PPUSH
26711: LD_INT 1
26713: PPUSH
26714: CALL 34785 0 4
26718: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26719: LD_ADDR_VAR 0 5
26723: PUSH
26724: LD_EXP 101
26728: PPUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: CALL 34135 0 2
26738: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26739: LD_EXP 102
26743: PUSH
26744: LD_VAR 0 5
26748: ARRAY
26749: PUSH
26750: LD_EXP 103
26754: LESS
26755: IFFALSE 26944
// begin for i := 1 to vehicles do
26757: LD_ADDR_VAR 0 4
26761: PUSH
26762: DOUBLE
26763: LD_INT 1
26765: DEC
26766: ST_TO_ADDR
26767: LD_VAR 0 2
26771: PUSH
26772: FOR_TO
26773: IFFALSE 26942
// begin if hackTanksCaptured [ index ] = hackLimit then
26775: LD_EXP 102
26779: PUSH
26780: LD_VAR 0 5
26784: ARRAY
26785: PUSH
26786: LD_EXP 103
26790: EQUAL
26791: IFFALSE 26795
// break ;
26793: GO 26942
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26795: LD_ADDR_EXP 105
26799: PUSH
26800: LD_EXP 105
26804: PPUSH
26805: LD_VAR 0 5
26809: PPUSH
26810: LD_EXP 105
26814: PUSH
26815: LD_VAR 0 5
26819: ARRAY
26820: PUSH
26821: LD_INT 1
26823: PLUS
26824: PPUSH
26825: CALL_OW 1
26829: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26830: LD_ADDR_EXP 102
26834: PUSH
26835: LD_EXP 102
26839: PPUSH
26840: LD_VAR 0 5
26844: PUSH
26845: LD_EXP 102
26849: PUSH
26850: LD_VAR 0 5
26854: ARRAY
26855: PUSH
26856: LD_INT 1
26858: PLUS
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PPUSH
26864: LD_VAR 0 2
26868: PUSH
26869: LD_VAR 0 4
26873: ARRAY
26874: PUSH
26875: LD_VAR 0 2
26879: PUSH
26880: LD_VAR 0 4
26884: ARRAY
26885: PPUSH
26886: CALL_OW 255
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PPUSH
26895: CALL 34350 0 3
26899: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26900: LD_VAR 0 2
26904: PUSH
26905: LD_VAR 0 4
26909: ARRAY
26910: PPUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL_OW 255
26920: PPUSH
26921: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26925: LD_VAR 0 2
26929: PUSH
26930: LD_VAR 0 4
26934: ARRAY
26935: PPUSH
26936: CALL_OW 141
// end ;
26940: GO 26772
26942: POP
26943: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26944: LD_VAR 0 1
26948: PPUSH
26949: LD_EXP 102
26953: PUSH
26954: LD_VAR 0 5
26958: ARRAY
26959: PUSH
26960: LD_INT 0
26962: PLUS
26963: PPUSH
26964: CALL_OW 505
// end ;
26968: LD_VAR 0 3
26972: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26973: LD_INT 0
26975: PPUSH
26976: PPUSH
26977: PPUSH
26978: PPUSH
// if not hack in hackTanks then
26979: LD_VAR 0 1
26983: PUSH
26984: LD_EXP 101
26988: IN
26989: NOT
26990: IFFALSE 26994
// exit ;
26992: GO 27234
// index := GetElementIndex ( hackTanks , hack ) ;
26994: LD_ADDR_VAR 0 4
26998: PUSH
26999: LD_EXP 101
27003: PPUSH
27004: LD_VAR 0 1
27008: PPUSH
27009: CALL 34135 0 2
27013: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27014: LD_ADDR_VAR 0 3
27018: PUSH
27019: DOUBLE
27020: LD_EXP 102
27024: PUSH
27025: LD_VAR 0 4
27029: ARRAY
27030: INC
27031: ST_TO_ADDR
27032: LD_INT 1
27034: PUSH
27035: FOR_DOWNTO
27036: IFFALSE 27208
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27038: LD_ADDR_VAR 0 5
27042: PUSH
27043: LD_EXP 102
27047: PUSH
27048: LD_VAR 0 4
27052: ARRAY
27053: PUSH
27054: LD_VAR 0 3
27058: ARRAY
27059: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27060: LD_VAR 0 5
27064: PUSH
27065: LD_INT 1
27067: ARRAY
27068: PPUSH
27069: CALL_OW 302
27073: NOT
27074: PUSH
27075: LD_VAR 0 5
27079: PUSH
27080: LD_INT 1
27082: ARRAY
27083: PPUSH
27084: CALL_OW 255
27088: PUSH
27089: LD_VAR 0 1
27093: PPUSH
27094: CALL_OW 255
27098: NONEQUAL
27099: OR
27100: IFFALSE 27206
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27102: LD_VAR 0 5
27106: PUSH
27107: LD_INT 1
27109: ARRAY
27110: PPUSH
27111: CALL_OW 305
27115: PUSH
27116: LD_VAR 0 5
27120: PUSH
27121: LD_INT 1
27123: ARRAY
27124: PPUSH
27125: CALL_OW 255
27129: PUSH
27130: LD_VAR 0 1
27134: PPUSH
27135: CALL_OW 255
27139: EQUAL
27140: AND
27141: IFFALSE 27165
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27143: LD_VAR 0 5
27147: PUSH
27148: LD_INT 1
27150: ARRAY
27151: PPUSH
27152: LD_VAR 0 5
27156: PUSH
27157: LD_INT 2
27159: ARRAY
27160: PPUSH
27161: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27165: LD_ADDR_EXP 102
27169: PUSH
27170: LD_EXP 102
27174: PPUSH
27175: LD_VAR 0 4
27179: PPUSH
27180: LD_EXP 102
27184: PUSH
27185: LD_VAR 0 4
27189: ARRAY
27190: PPUSH
27191: LD_VAR 0 3
27195: PPUSH
27196: CALL_OW 3
27200: PPUSH
27201: CALL_OW 1
27205: ST_TO_ADDR
// end ; end ;
27206: GO 27035
27208: POP
27209: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27210: LD_VAR 0 1
27214: PPUSH
27215: LD_EXP 102
27219: PUSH
27220: LD_VAR 0 4
27224: ARRAY
27225: PUSH
27226: LD_INT 0
27228: PLUS
27229: PPUSH
27230: CALL_OW 505
// end ;
27234: LD_VAR 0 2
27238: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27239: LD_INT 0
27241: PPUSH
27242: PPUSH
27243: PPUSH
27244: PPUSH
// if not hack in hackTanks then
27245: LD_VAR 0 1
27249: PUSH
27250: LD_EXP 101
27254: IN
27255: NOT
27256: IFFALSE 27260
// exit ;
27258: GO 27345
// index := GetElementIndex ( hackTanks , hack ) ;
27260: LD_ADDR_VAR 0 5
27264: PUSH
27265: LD_EXP 101
27269: PPUSH
27270: LD_VAR 0 1
27274: PPUSH
27275: CALL 34135 0 2
27279: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27280: LD_ADDR_VAR 0 4
27284: PUSH
27285: DOUBLE
27286: LD_INT 1
27288: DEC
27289: ST_TO_ADDR
27290: LD_EXP 102
27294: PUSH
27295: LD_VAR 0 5
27299: ARRAY
27300: PUSH
27301: FOR_TO
27302: IFFALSE 27343
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27304: LD_EXP 102
27308: PUSH
27309: LD_VAR 0 5
27313: ARRAY
27314: PUSH
27315: LD_VAR 0 4
27319: ARRAY
27320: PUSH
27321: LD_INT 1
27323: ARRAY
27324: PUSH
27325: LD_VAR 0 2
27329: EQUAL
27330: IFFALSE 27341
// KillUnit ( vehicle ) ;
27332: LD_VAR 0 2
27336: PPUSH
27337: CALL_OW 66
27341: GO 27301
27343: POP
27344: POP
// end ;
27345: LD_VAR 0 3
27349: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27350: LD_EXP 106
27354: NOT
27355: IFFALSE 27390
27357: GO 27359
27359: DISABLE
// begin initMiner := true ;
27360: LD_ADDR_EXP 106
27364: PUSH
27365: LD_INT 1
27367: ST_TO_ADDR
// minersList := [ ] ;
27368: LD_ADDR_EXP 107
27372: PUSH
27373: EMPTY
27374: ST_TO_ADDR
// minerMinesList := [ ] ;
27375: LD_ADDR_EXP 108
27379: PUSH
27380: EMPTY
27381: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27382: LD_ADDR_EXP 109
27386: PUSH
27387: LD_INT 5
27389: ST_TO_ADDR
// end ;
27390: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27391: LD_EXP 106
27395: PUSH
27396: LD_INT 34
27398: PUSH
27399: LD_EXP 28
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PPUSH
27408: CALL_OW 69
27412: AND
27413: IFFALSE 27876
27415: GO 27417
27417: DISABLE
27418: LD_INT 0
27420: PPUSH
27421: PPUSH
27422: PPUSH
27423: PPUSH
// begin enable ;
27424: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27425: LD_ADDR_VAR 0 1
27429: PUSH
27430: LD_INT 34
27432: PUSH
27433: LD_EXP 28
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PPUSH
27442: CALL_OW 69
27446: PUSH
27447: FOR_IN
27448: IFFALSE 27520
// begin if not i in minersList then
27450: LD_VAR 0 1
27454: PUSH
27455: LD_EXP 107
27459: IN
27460: NOT
27461: IFFALSE 27518
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27463: LD_ADDR_EXP 107
27467: PUSH
27468: LD_EXP 107
27472: PPUSH
27473: LD_EXP 107
27477: PUSH
27478: LD_INT 1
27480: PLUS
27481: PPUSH
27482: LD_VAR 0 1
27486: PPUSH
27487: CALL_OW 1
27491: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27492: LD_ADDR_EXP 108
27496: PUSH
27497: LD_EXP 108
27501: PPUSH
27502: LD_EXP 108
27506: PUSH
27507: LD_INT 1
27509: PLUS
27510: PPUSH
27511: EMPTY
27512: PPUSH
27513: CALL_OW 1
27517: ST_TO_ADDR
// end end ;
27518: GO 27447
27520: POP
27521: POP
// for i := minerMinesList downto 1 do
27522: LD_ADDR_VAR 0 1
27526: PUSH
27527: DOUBLE
27528: LD_EXP 108
27532: INC
27533: ST_TO_ADDR
27534: LD_INT 1
27536: PUSH
27537: FOR_DOWNTO
27538: IFFALSE 27874
// begin if IsLive ( minersList [ i ] ) then
27540: LD_EXP 107
27544: PUSH
27545: LD_VAR 0 1
27549: ARRAY
27550: PPUSH
27551: CALL_OW 300
27555: IFFALSE 27583
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27557: LD_EXP 107
27561: PUSH
27562: LD_VAR 0 1
27566: ARRAY
27567: PPUSH
27568: LD_EXP 108
27572: PUSH
27573: LD_VAR 0 1
27577: ARRAY
27578: PPUSH
27579: CALL_OW 505
// if not minerMinesList [ i ] then
27583: LD_EXP 108
27587: PUSH
27588: LD_VAR 0 1
27592: ARRAY
27593: NOT
27594: IFFALSE 27598
// continue ;
27596: GO 27537
// for j := minerMinesList [ i ] downto 1 do
27598: LD_ADDR_VAR 0 2
27602: PUSH
27603: DOUBLE
27604: LD_EXP 108
27608: PUSH
27609: LD_VAR 0 1
27613: ARRAY
27614: INC
27615: ST_TO_ADDR
27616: LD_INT 1
27618: PUSH
27619: FOR_DOWNTO
27620: IFFALSE 27870
// begin side := GetSide ( minersList [ i ] ) ;
27622: LD_ADDR_VAR 0 3
27626: PUSH
27627: LD_EXP 107
27631: PUSH
27632: LD_VAR 0 1
27636: ARRAY
27637: PPUSH
27638: CALL_OW 255
27642: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27643: LD_ADDR_VAR 0 4
27647: PUSH
27648: LD_EXP 108
27652: PUSH
27653: LD_VAR 0 1
27657: ARRAY
27658: PUSH
27659: LD_VAR 0 2
27663: ARRAY
27664: PUSH
27665: LD_INT 1
27667: ARRAY
27668: PPUSH
27669: LD_EXP 108
27673: PUSH
27674: LD_VAR 0 1
27678: ARRAY
27679: PUSH
27680: LD_VAR 0 2
27684: ARRAY
27685: PUSH
27686: LD_INT 2
27688: ARRAY
27689: PPUSH
27690: CALL_OW 428
27694: ST_TO_ADDR
// if not tmp then
27695: LD_VAR 0 4
27699: NOT
27700: IFFALSE 27704
// continue ;
27702: GO 27619
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27704: LD_VAR 0 4
27708: PUSH
27709: LD_INT 81
27711: PUSH
27712: LD_VAR 0 3
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PPUSH
27721: CALL_OW 69
27725: IN
27726: PUSH
27727: LD_EXP 108
27731: PUSH
27732: LD_VAR 0 1
27736: ARRAY
27737: PUSH
27738: LD_VAR 0 2
27742: ARRAY
27743: PUSH
27744: LD_INT 1
27746: ARRAY
27747: PPUSH
27748: LD_EXP 108
27752: PUSH
27753: LD_VAR 0 1
27757: ARRAY
27758: PUSH
27759: LD_VAR 0 2
27763: ARRAY
27764: PUSH
27765: LD_INT 2
27767: ARRAY
27768: PPUSH
27769: CALL_OW 458
27773: AND
27774: IFFALSE 27868
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27776: LD_EXP 108
27780: PUSH
27781: LD_VAR 0 1
27785: ARRAY
27786: PUSH
27787: LD_VAR 0 2
27791: ARRAY
27792: PUSH
27793: LD_INT 1
27795: ARRAY
27796: PPUSH
27797: LD_EXP 108
27801: PUSH
27802: LD_VAR 0 1
27806: ARRAY
27807: PUSH
27808: LD_VAR 0 2
27812: ARRAY
27813: PUSH
27814: LD_INT 2
27816: ARRAY
27817: PPUSH
27818: LD_VAR 0 3
27822: PPUSH
27823: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27827: LD_ADDR_EXP 108
27831: PUSH
27832: LD_EXP 108
27836: PPUSH
27837: LD_VAR 0 1
27841: PPUSH
27842: LD_EXP 108
27846: PUSH
27847: LD_VAR 0 1
27851: ARRAY
27852: PPUSH
27853: LD_VAR 0 2
27857: PPUSH
27858: CALL_OW 3
27862: PPUSH
27863: CALL_OW 1
27867: ST_TO_ADDR
// end ; end ;
27868: GO 27619
27870: POP
27871: POP
// end ;
27872: GO 27537
27874: POP
27875: POP
// end ;
27876: PPOPN 4
27878: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27879: LD_INT 0
27881: PPUSH
27882: PPUSH
// result := false ;
27883: LD_ADDR_VAR 0 4
27887: PUSH
27888: LD_INT 0
27890: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27891: LD_VAR 0 1
27895: PPUSH
27896: CALL_OW 264
27900: PUSH
27901: LD_EXP 28
27905: EQUAL
27906: NOT
27907: IFFALSE 27911
// exit ;
27909: GO 28151
// index := GetElementIndex ( minersList , unit ) ;
27911: LD_ADDR_VAR 0 5
27915: PUSH
27916: LD_EXP 107
27920: PPUSH
27921: LD_VAR 0 1
27925: PPUSH
27926: CALL 34135 0 2
27930: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27931: LD_EXP 108
27935: PUSH
27936: LD_VAR 0 5
27940: ARRAY
27941: PUSH
27942: LD_EXP 109
27946: GREATEREQUAL
27947: IFFALSE 27951
// exit ;
27949: GO 28151
// ComMoveXY ( unit , x , y ) ;
27951: LD_VAR 0 1
27955: PPUSH
27956: LD_VAR 0 2
27960: PPUSH
27961: LD_VAR 0 3
27965: PPUSH
27966: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27970: LD_INT 35
27972: PPUSH
27973: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27977: LD_VAR 0 1
27981: PPUSH
27982: LD_VAR 0 2
27986: PPUSH
27987: LD_VAR 0 3
27991: PPUSH
27992: CALL 64907 0 3
27996: NOT
27997: PUSH
27998: LD_VAR 0 1
28002: PPUSH
28003: CALL_OW 314
28007: AND
28008: IFFALSE 28012
// exit ;
28010: GO 28151
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28012: LD_VAR 0 2
28016: PPUSH
28017: LD_VAR 0 3
28021: PPUSH
28022: CALL_OW 428
28026: PUSH
28027: LD_VAR 0 1
28031: EQUAL
28032: PUSH
28033: LD_VAR 0 1
28037: PPUSH
28038: CALL_OW 314
28042: NOT
28043: AND
28044: IFFALSE 27970
// PlaySoundXY ( x , y , PlantMine ) ;
28046: LD_VAR 0 2
28050: PPUSH
28051: LD_VAR 0 3
28055: PPUSH
28056: LD_STRING PlantMine
28058: PPUSH
28059: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28063: LD_VAR 0 2
28067: PPUSH
28068: LD_VAR 0 3
28072: PPUSH
28073: LD_VAR 0 1
28077: PPUSH
28078: CALL_OW 255
28082: PPUSH
28083: LD_INT 0
28085: PPUSH
28086: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28090: LD_ADDR_EXP 108
28094: PUSH
28095: LD_EXP 108
28099: PPUSH
28100: LD_VAR 0 5
28104: PUSH
28105: LD_EXP 108
28109: PUSH
28110: LD_VAR 0 5
28114: ARRAY
28115: PUSH
28116: LD_INT 1
28118: PLUS
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PPUSH
28124: LD_VAR 0 2
28128: PUSH
28129: LD_VAR 0 3
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PPUSH
28138: CALL 34350 0 3
28142: ST_TO_ADDR
// result := true ;
28143: LD_ADDR_VAR 0 4
28147: PUSH
28148: LD_INT 1
28150: ST_TO_ADDR
// end ;
28151: LD_VAR 0 4
28155: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28156: LD_INT 0
28158: PPUSH
28159: PPUSH
28160: PPUSH
// if not unit in minersList then
28161: LD_VAR 0 1
28165: PUSH
28166: LD_EXP 107
28170: IN
28171: NOT
28172: IFFALSE 28176
// exit ;
28174: GO 28568
// index := GetElementIndex ( minersList , unit ) ;
28176: LD_ADDR_VAR 0 6
28180: PUSH
28181: LD_EXP 107
28185: PPUSH
28186: LD_VAR 0 1
28190: PPUSH
28191: CALL 34135 0 2
28195: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28196: LD_ADDR_VAR 0 5
28200: PUSH
28201: DOUBLE
28202: LD_EXP 108
28206: PUSH
28207: LD_VAR 0 6
28211: ARRAY
28212: INC
28213: ST_TO_ADDR
28214: LD_INT 1
28216: PUSH
28217: FOR_DOWNTO
28218: IFFALSE 28379
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28220: LD_EXP 108
28224: PUSH
28225: LD_VAR 0 6
28229: ARRAY
28230: PUSH
28231: LD_VAR 0 5
28235: ARRAY
28236: PUSH
28237: LD_INT 1
28239: ARRAY
28240: PUSH
28241: LD_VAR 0 2
28245: EQUAL
28246: PUSH
28247: LD_EXP 108
28251: PUSH
28252: LD_VAR 0 6
28256: ARRAY
28257: PUSH
28258: LD_VAR 0 5
28262: ARRAY
28263: PUSH
28264: LD_INT 2
28266: ARRAY
28267: PUSH
28268: LD_VAR 0 3
28272: EQUAL
28273: AND
28274: IFFALSE 28377
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28276: LD_EXP 108
28280: PUSH
28281: LD_VAR 0 6
28285: ARRAY
28286: PUSH
28287: LD_VAR 0 5
28291: ARRAY
28292: PUSH
28293: LD_INT 1
28295: ARRAY
28296: PPUSH
28297: LD_EXP 108
28301: PUSH
28302: LD_VAR 0 6
28306: ARRAY
28307: PUSH
28308: LD_VAR 0 5
28312: ARRAY
28313: PUSH
28314: LD_INT 2
28316: ARRAY
28317: PPUSH
28318: LD_VAR 0 1
28322: PPUSH
28323: CALL_OW 255
28327: PPUSH
28328: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28332: LD_ADDR_EXP 108
28336: PUSH
28337: LD_EXP 108
28341: PPUSH
28342: LD_VAR 0 6
28346: PPUSH
28347: LD_EXP 108
28351: PUSH
28352: LD_VAR 0 6
28356: ARRAY
28357: PPUSH
28358: LD_VAR 0 5
28362: PPUSH
28363: CALL_OW 3
28367: PPUSH
28368: CALL_OW 1
28372: ST_TO_ADDR
// exit ;
28373: POP
28374: POP
28375: GO 28568
// end ; end ;
28377: GO 28217
28379: POP
28380: POP
// for i := minerMinesList [ index ] downto 1 do
28381: LD_ADDR_VAR 0 5
28385: PUSH
28386: DOUBLE
28387: LD_EXP 108
28391: PUSH
28392: LD_VAR 0 6
28396: ARRAY
28397: INC
28398: ST_TO_ADDR
28399: LD_INT 1
28401: PUSH
28402: FOR_DOWNTO
28403: IFFALSE 28566
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28405: LD_EXP 108
28409: PUSH
28410: LD_VAR 0 6
28414: ARRAY
28415: PUSH
28416: LD_VAR 0 5
28420: ARRAY
28421: PUSH
28422: LD_INT 1
28424: ARRAY
28425: PPUSH
28426: LD_EXP 108
28430: PUSH
28431: LD_VAR 0 6
28435: ARRAY
28436: PUSH
28437: LD_VAR 0 5
28441: ARRAY
28442: PUSH
28443: LD_INT 2
28445: ARRAY
28446: PPUSH
28447: LD_VAR 0 2
28451: PPUSH
28452: LD_VAR 0 3
28456: PPUSH
28457: CALL_OW 298
28461: PUSH
28462: LD_INT 6
28464: LESS
28465: IFFALSE 28564
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28467: LD_EXP 108
28471: PUSH
28472: LD_VAR 0 6
28476: ARRAY
28477: PUSH
28478: LD_VAR 0 5
28482: ARRAY
28483: PUSH
28484: LD_INT 1
28486: ARRAY
28487: PPUSH
28488: LD_EXP 108
28492: PUSH
28493: LD_VAR 0 6
28497: ARRAY
28498: PUSH
28499: LD_VAR 0 5
28503: ARRAY
28504: PUSH
28505: LD_INT 2
28507: ARRAY
28508: PPUSH
28509: LD_VAR 0 1
28513: PPUSH
28514: CALL_OW 255
28518: PPUSH
28519: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28523: LD_ADDR_EXP 108
28527: PUSH
28528: LD_EXP 108
28532: PPUSH
28533: LD_VAR 0 6
28537: PPUSH
28538: LD_EXP 108
28542: PUSH
28543: LD_VAR 0 6
28547: ARRAY
28548: PPUSH
28549: LD_VAR 0 5
28553: PPUSH
28554: CALL_OW 3
28558: PPUSH
28559: CALL_OW 1
28563: ST_TO_ADDR
// end ; end ;
28564: GO 28402
28566: POP
28567: POP
// end ;
28568: LD_VAR 0 4
28572: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28573: LD_INT 0
28575: PPUSH
28576: PPUSH
28577: PPUSH
28578: PPUSH
28579: PPUSH
28580: PPUSH
28581: PPUSH
28582: PPUSH
28583: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28584: LD_VAR 0 1
28588: PPUSH
28589: CALL_OW 264
28593: PUSH
28594: LD_EXP 28
28598: EQUAL
28599: NOT
28600: PUSH
28601: LD_VAR 0 1
28605: PUSH
28606: LD_EXP 107
28610: IN
28611: NOT
28612: OR
28613: IFFALSE 28617
// exit ;
28615: GO 28939
// index := GetElementIndex ( minersList , unit ) ;
28617: LD_ADDR_VAR 0 6
28621: PUSH
28622: LD_EXP 107
28626: PPUSH
28627: LD_VAR 0 1
28631: PPUSH
28632: CALL 34135 0 2
28636: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28637: LD_ADDR_VAR 0 8
28641: PUSH
28642: LD_EXP 109
28646: PUSH
28647: LD_EXP 108
28651: PUSH
28652: LD_VAR 0 6
28656: ARRAY
28657: MINUS
28658: ST_TO_ADDR
// if not minesFreeAmount then
28659: LD_VAR 0 8
28663: NOT
28664: IFFALSE 28668
// exit ;
28666: GO 28939
// tmp := [ ] ;
28668: LD_ADDR_VAR 0 7
28672: PUSH
28673: EMPTY
28674: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28675: LD_ADDR_VAR 0 5
28679: PUSH
28680: DOUBLE
28681: LD_INT 1
28683: DEC
28684: ST_TO_ADDR
28685: LD_VAR 0 8
28689: PUSH
28690: FOR_TO
28691: IFFALSE 28886
// begin _d := rand ( 0 , 5 ) ;
28693: LD_ADDR_VAR 0 11
28697: PUSH
28698: LD_INT 0
28700: PPUSH
28701: LD_INT 5
28703: PPUSH
28704: CALL_OW 12
28708: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28709: LD_ADDR_VAR 0 12
28713: PUSH
28714: LD_INT 2
28716: PPUSH
28717: LD_INT 6
28719: PPUSH
28720: CALL_OW 12
28724: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28725: LD_ADDR_VAR 0 9
28729: PUSH
28730: LD_VAR 0 2
28734: PPUSH
28735: LD_VAR 0 11
28739: PPUSH
28740: LD_VAR 0 12
28744: PPUSH
28745: CALL_OW 272
28749: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28750: LD_ADDR_VAR 0 10
28754: PUSH
28755: LD_VAR 0 3
28759: PPUSH
28760: LD_VAR 0 11
28764: PPUSH
28765: LD_VAR 0 12
28769: PPUSH
28770: CALL_OW 273
28774: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28775: LD_VAR 0 9
28779: PPUSH
28780: LD_VAR 0 10
28784: PPUSH
28785: CALL_OW 488
28789: PUSH
28790: LD_VAR 0 9
28794: PUSH
28795: LD_VAR 0 10
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_VAR 0 7
28808: IN
28809: NOT
28810: AND
28811: PUSH
28812: LD_VAR 0 9
28816: PPUSH
28817: LD_VAR 0 10
28821: PPUSH
28822: CALL_OW 458
28826: NOT
28827: AND
28828: IFFALSE 28870
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28830: LD_ADDR_VAR 0 7
28834: PUSH
28835: LD_VAR 0 7
28839: PPUSH
28840: LD_VAR 0 7
28844: PUSH
28845: LD_INT 1
28847: PLUS
28848: PPUSH
28849: LD_VAR 0 9
28853: PUSH
28854: LD_VAR 0 10
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PPUSH
28863: CALL_OW 1
28867: ST_TO_ADDR
28868: GO 28884
// i := i - 1 ;
28870: LD_ADDR_VAR 0 5
28874: PUSH
28875: LD_VAR 0 5
28879: PUSH
28880: LD_INT 1
28882: MINUS
28883: ST_TO_ADDR
// end ;
28884: GO 28690
28886: POP
28887: POP
// for i in tmp do
28888: LD_ADDR_VAR 0 5
28892: PUSH
28893: LD_VAR 0 7
28897: PUSH
28898: FOR_IN
28899: IFFALSE 28937
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28901: LD_VAR 0 1
28905: PPUSH
28906: LD_VAR 0 5
28910: PUSH
28911: LD_INT 1
28913: ARRAY
28914: PPUSH
28915: LD_VAR 0 5
28919: PUSH
28920: LD_INT 2
28922: ARRAY
28923: PPUSH
28924: CALL 27879 0 3
28928: NOT
28929: IFFALSE 28935
// exit ;
28931: POP
28932: POP
28933: GO 28939
28935: GO 28898
28937: POP
28938: POP
// end ;
28939: LD_VAR 0 4
28943: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28944: LD_INT 0
28946: PPUSH
28947: PPUSH
28948: PPUSH
28949: PPUSH
28950: PPUSH
28951: PPUSH
28952: PPUSH
// if not GetClass ( unit ) = class_sniper then
28953: LD_VAR 0 1
28957: PPUSH
28958: CALL_OW 257
28962: PUSH
28963: LD_INT 5
28965: EQUAL
28966: NOT
28967: IFFALSE 28971
// exit ;
28969: GO 29359
// dist := 8 ;
28971: LD_ADDR_VAR 0 5
28975: PUSH
28976: LD_INT 8
28978: ST_TO_ADDR
// viewRange := 12 ;
28979: LD_ADDR_VAR 0 7
28983: PUSH
28984: LD_INT 12
28986: ST_TO_ADDR
// side := GetSide ( unit ) ;
28987: LD_ADDR_VAR 0 6
28991: PUSH
28992: LD_VAR 0 1
28996: PPUSH
28997: CALL_OW 255
29001: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29002: LD_INT 61
29004: PPUSH
29005: LD_VAR 0 6
29009: PPUSH
29010: CALL_OW 321
29014: PUSH
29015: LD_INT 2
29017: EQUAL
29018: IFFALSE 29028
// viewRange := 16 ;
29020: LD_ADDR_VAR 0 7
29024: PUSH
29025: LD_INT 16
29027: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29028: LD_VAR 0 1
29032: PPUSH
29033: LD_VAR 0 2
29037: PPUSH
29038: LD_VAR 0 3
29042: PPUSH
29043: CALL_OW 297
29047: PUSH
29048: LD_VAR 0 5
29052: GREATER
29053: IFFALSE 29132
// begin ComMoveXY ( unit , x , y ) ;
29055: LD_VAR 0 1
29059: PPUSH
29060: LD_VAR 0 2
29064: PPUSH
29065: LD_VAR 0 3
29069: PPUSH
29070: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29074: LD_INT 35
29076: PPUSH
29077: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29081: LD_VAR 0 1
29085: PPUSH
29086: LD_VAR 0 2
29090: PPUSH
29091: LD_VAR 0 3
29095: PPUSH
29096: CALL 64907 0 3
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 29359
// until GetDistUnitXY ( unit , x , y ) < dist ;
29105: LD_VAR 0 1
29109: PPUSH
29110: LD_VAR 0 2
29114: PPUSH
29115: LD_VAR 0 3
29119: PPUSH
29120: CALL_OW 297
29124: PUSH
29125: LD_VAR 0 5
29129: LESS
29130: IFFALSE 29074
// end ; ComTurnXY ( unit , x , y ) ;
29132: LD_VAR 0 1
29136: PPUSH
29137: LD_VAR 0 2
29141: PPUSH
29142: LD_VAR 0 3
29146: PPUSH
29147: CALL_OW 118
// wait ( 5 ) ;
29151: LD_INT 5
29153: PPUSH
29154: CALL_OW 67
// _d := GetDir ( unit ) ;
29158: LD_ADDR_VAR 0 10
29162: PUSH
29163: LD_VAR 0 1
29167: PPUSH
29168: CALL_OW 254
29172: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29173: LD_ADDR_VAR 0 8
29177: PUSH
29178: LD_VAR 0 1
29182: PPUSH
29183: CALL_OW 250
29187: PPUSH
29188: LD_VAR 0 10
29192: PPUSH
29193: LD_VAR 0 5
29197: PPUSH
29198: CALL_OW 272
29202: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29203: LD_ADDR_VAR 0 9
29207: PUSH
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 251
29217: PPUSH
29218: LD_VAR 0 10
29222: PPUSH
29223: LD_VAR 0 5
29227: PPUSH
29228: CALL_OW 273
29232: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29233: LD_VAR 0 8
29237: PPUSH
29238: LD_VAR 0 9
29242: PPUSH
29243: CALL_OW 488
29247: NOT
29248: IFFALSE 29252
// exit ;
29250: GO 29359
// ComAnimCustom ( unit , 1 ) ;
29252: LD_VAR 0 1
29256: PPUSH
29257: LD_INT 1
29259: PPUSH
29260: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29264: LD_VAR 0 8
29268: PPUSH
29269: LD_VAR 0 9
29273: PPUSH
29274: LD_VAR 0 6
29278: PPUSH
29279: LD_VAR 0 7
29283: PPUSH
29284: CALL_OW 330
// repeat wait ( 1 ) ;
29288: LD_INT 1
29290: PPUSH
29291: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29295: LD_VAR 0 1
29299: PPUSH
29300: CALL_OW 316
29304: PUSH
29305: LD_VAR 0 1
29309: PPUSH
29310: CALL_OW 314
29314: OR
29315: PUSH
29316: LD_VAR 0 1
29320: PPUSH
29321: CALL_OW 302
29325: NOT
29326: OR
29327: PUSH
29328: LD_VAR 0 1
29332: PPUSH
29333: CALL_OW 301
29337: OR
29338: IFFALSE 29288
// RemoveSeeing ( _x , _y , side ) ;
29340: LD_VAR 0 8
29344: PPUSH
29345: LD_VAR 0 9
29349: PPUSH
29350: LD_VAR 0 6
29354: PPUSH
29355: CALL_OW 331
// end ; end_of_file
29359: LD_VAR 0 4
29363: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29364: LD_INT 0
29366: PPUSH
29367: PPUSH
// if exist_mode then
29368: LD_VAR 0 2
29372: IFFALSE 29397
// unit := CreateCharacter ( prefix & ident ) else
29374: LD_ADDR_VAR 0 5
29378: PUSH
29379: LD_VAR 0 3
29383: PUSH
29384: LD_VAR 0 1
29388: STR
29389: PPUSH
29390: CALL_OW 34
29394: ST_TO_ADDR
29395: GO 29412
// unit := NewCharacter ( ident ) ;
29397: LD_ADDR_VAR 0 5
29401: PUSH
29402: LD_VAR 0 1
29406: PPUSH
29407: CALL_OW 25
29411: ST_TO_ADDR
// result := unit ;
29412: LD_ADDR_VAR 0 4
29416: PUSH
29417: LD_VAR 0 5
29421: ST_TO_ADDR
// end ;
29422: LD_VAR 0 4
29426: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29427: LD_INT 0
29429: PPUSH
29430: PPUSH
// if not side or not nation then
29431: LD_VAR 0 1
29435: NOT
29436: PUSH
29437: LD_VAR 0 2
29441: NOT
29442: OR
29443: IFFALSE 29447
// exit ;
29445: GO 30215
// case nation of nation_american :
29447: LD_VAR 0 2
29451: PUSH
29452: LD_INT 1
29454: DOUBLE
29455: EQUAL
29456: IFTRUE 29460
29458: GO 29674
29460: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29461: LD_ADDR_VAR 0 4
29465: PUSH
29466: LD_INT 35
29468: PUSH
29469: LD_INT 45
29471: PUSH
29472: LD_INT 46
29474: PUSH
29475: LD_INT 47
29477: PUSH
29478: LD_INT 82
29480: PUSH
29481: LD_INT 83
29483: PUSH
29484: LD_INT 84
29486: PUSH
29487: LD_INT 85
29489: PUSH
29490: LD_INT 86
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: LD_INT 2
29498: PUSH
29499: LD_INT 6
29501: PUSH
29502: LD_INT 15
29504: PUSH
29505: LD_INT 16
29507: PUSH
29508: LD_INT 7
29510: PUSH
29511: LD_INT 12
29513: PUSH
29514: LD_INT 13
29516: PUSH
29517: LD_INT 10
29519: PUSH
29520: LD_INT 14
29522: PUSH
29523: LD_INT 20
29525: PUSH
29526: LD_INT 21
29528: PUSH
29529: LD_INT 22
29531: PUSH
29532: LD_INT 25
29534: PUSH
29535: LD_INT 32
29537: PUSH
29538: LD_INT 27
29540: PUSH
29541: LD_INT 36
29543: PUSH
29544: LD_INT 69
29546: PUSH
29547: LD_INT 39
29549: PUSH
29550: LD_INT 34
29552: PUSH
29553: LD_INT 40
29555: PUSH
29556: LD_INT 48
29558: PUSH
29559: LD_INT 49
29561: PUSH
29562: LD_INT 50
29564: PUSH
29565: LD_INT 51
29567: PUSH
29568: LD_INT 52
29570: PUSH
29571: LD_INT 53
29573: PUSH
29574: LD_INT 54
29576: PUSH
29577: LD_INT 55
29579: PUSH
29580: LD_INT 56
29582: PUSH
29583: LD_INT 57
29585: PUSH
29586: LD_INT 58
29588: PUSH
29589: LD_INT 59
29591: PUSH
29592: LD_INT 60
29594: PUSH
29595: LD_INT 61
29597: PUSH
29598: LD_INT 62
29600: PUSH
29601: LD_INT 80
29603: PUSH
29604: LD_INT 82
29606: PUSH
29607: LD_INT 83
29609: PUSH
29610: LD_INT 84
29612: PUSH
29613: LD_INT 85
29615: PUSH
29616: LD_INT 86
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: ST_TO_ADDR
29672: GO 30139
29674: LD_INT 2
29676: DOUBLE
29677: EQUAL
29678: IFTRUE 29682
29680: GO 29908
29682: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29683: LD_ADDR_VAR 0 4
29687: PUSH
29688: LD_INT 35
29690: PUSH
29691: LD_INT 45
29693: PUSH
29694: LD_INT 46
29696: PUSH
29697: LD_INT 47
29699: PUSH
29700: LD_INT 82
29702: PUSH
29703: LD_INT 83
29705: PUSH
29706: LD_INT 84
29708: PUSH
29709: LD_INT 85
29711: PUSH
29712: LD_INT 87
29714: PUSH
29715: LD_INT 70
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 11
29723: PUSH
29724: LD_INT 3
29726: PUSH
29727: LD_INT 4
29729: PUSH
29730: LD_INT 5
29732: PUSH
29733: LD_INT 6
29735: PUSH
29736: LD_INT 15
29738: PUSH
29739: LD_INT 18
29741: PUSH
29742: LD_INT 7
29744: PUSH
29745: LD_INT 17
29747: PUSH
29748: LD_INT 8
29750: PUSH
29751: LD_INT 20
29753: PUSH
29754: LD_INT 21
29756: PUSH
29757: LD_INT 22
29759: PUSH
29760: LD_INT 72
29762: PUSH
29763: LD_INT 26
29765: PUSH
29766: LD_INT 69
29768: PUSH
29769: LD_INT 39
29771: PUSH
29772: LD_INT 40
29774: PUSH
29775: LD_INT 41
29777: PUSH
29778: LD_INT 42
29780: PUSH
29781: LD_INT 43
29783: PUSH
29784: LD_INT 48
29786: PUSH
29787: LD_INT 49
29789: PUSH
29790: LD_INT 50
29792: PUSH
29793: LD_INT 51
29795: PUSH
29796: LD_INT 52
29798: PUSH
29799: LD_INT 53
29801: PUSH
29802: LD_INT 54
29804: PUSH
29805: LD_INT 55
29807: PUSH
29808: LD_INT 56
29810: PUSH
29811: LD_INT 60
29813: PUSH
29814: LD_INT 61
29816: PUSH
29817: LD_INT 62
29819: PUSH
29820: LD_INT 66
29822: PUSH
29823: LD_INT 67
29825: PUSH
29826: LD_INT 68
29828: PUSH
29829: LD_INT 81
29831: PUSH
29832: LD_INT 82
29834: PUSH
29835: LD_INT 83
29837: PUSH
29838: LD_INT 84
29840: PUSH
29841: LD_INT 85
29843: PUSH
29844: LD_INT 87
29846: PUSH
29847: LD_INT 88
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
29906: GO 30139
29908: LD_INT 3
29910: DOUBLE
29911: EQUAL
29912: IFTRUE 29916
29914: GO 30138
29916: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29917: LD_ADDR_VAR 0 4
29921: PUSH
29922: LD_INT 46
29924: PUSH
29925: LD_INT 47
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 2
29933: PUSH
29934: LD_INT 82
29936: PUSH
29937: LD_INT 83
29939: PUSH
29940: LD_INT 84
29942: PUSH
29943: LD_INT 85
29945: PUSH
29946: LD_INT 86
29948: PUSH
29949: LD_INT 11
29951: PUSH
29952: LD_INT 9
29954: PUSH
29955: LD_INT 20
29957: PUSH
29958: LD_INT 19
29960: PUSH
29961: LD_INT 21
29963: PUSH
29964: LD_INT 24
29966: PUSH
29967: LD_INT 22
29969: PUSH
29970: LD_INT 25
29972: PUSH
29973: LD_INT 28
29975: PUSH
29976: LD_INT 29
29978: PUSH
29979: LD_INT 30
29981: PUSH
29982: LD_INT 31
29984: PUSH
29985: LD_INT 37
29987: PUSH
29988: LD_INT 38
29990: PUSH
29991: LD_INT 32
29993: PUSH
29994: LD_INT 27
29996: PUSH
29997: LD_INT 33
29999: PUSH
30000: LD_INT 69
30002: PUSH
30003: LD_INT 39
30005: PUSH
30006: LD_INT 34
30008: PUSH
30009: LD_INT 40
30011: PUSH
30012: LD_INT 71
30014: PUSH
30015: LD_INT 23
30017: PUSH
30018: LD_INT 44
30020: PUSH
30021: LD_INT 48
30023: PUSH
30024: LD_INT 49
30026: PUSH
30027: LD_INT 50
30029: PUSH
30030: LD_INT 51
30032: PUSH
30033: LD_INT 52
30035: PUSH
30036: LD_INT 53
30038: PUSH
30039: LD_INT 54
30041: PUSH
30042: LD_INT 55
30044: PUSH
30045: LD_INT 56
30047: PUSH
30048: LD_INT 57
30050: PUSH
30051: LD_INT 58
30053: PUSH
30054: LD_INT 59
30056: PUSH
30057: LD_INT 63
30059: PUSH
30060: LD_INT 64
30062: PUSH
30063: LD_INT 65
30065: PUSH
30066: LD_INT 82
30068: PUSH
30069: LD_INT 83
30071: PUSH
30072: LD_INT 84
30074: PUSH
30075: LD_INT 85
30077: PUSH
30078: LD_INT 86
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
30136: GO 30139
30138: POP
// if state > - 1 and state < 3 then
30139: LD_VAR 0 3
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: GREATER
30148: PUSH
30149: LD_VAR 0 3
30153: PUSH
30154: LD_INT 3
30156: LESS
30157: AND
30158: IFFALSE 30215
// for i in result do
30160: LD_ADDR_VAR 0 5
30164: PUSH
30165: LD_VAR 0 4
30169: PUSH
30170: FOR_IN
30171: IFFALSE 30213
// if GetTech ( i , side ) <> state then
30173: LD_VAR 0 5
30177: PPUSH
30178: LD_VAR 0 1
30182: PPUSH
30183: CALL_OW 321
30187: PUSH
30188: LD_VAR 0 3
30192: NONEQUAL
30193: IFFALSE 30211
// result := result diff i ;
30195: LD_ADDR_VAR 0 4
30199: PUSH
30200: LD_VAR 0 4
30204: PUSH
30205: LD_VAR 0 5
30209: DIFF
30210: ST_TO_ADDR
30211: GO 30170
30213: POP
30214: POP
// end ;
30215: LD_VAR 0 4
30219: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30220: LD_INT 0
30222: PPUSH
30223: PPUSH
30224: PPUSH
// result := true ;
30225: LD_ADDR_VAR 0 3
30229: PUSH
30230: LD_INT 1
30232: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30233: LD_ADDR_VAR 0 5
30237: PUSH
30238: LD_VAR 0 2
30242: PPUSH
30243: CALL_OW 480
30247: ST_TO_ADDR
// if not tmp then
30248: LD_VAR 0 5
30252: NOT
30253: IFFALSE 30257
// exit ;
30255: GO 30306
// for i in tmp do
30257: LD_ADDR_VAR 0 4
30261: PUSH
30262: LD_VAR 0 5
30266: PUSH
30267: FOR_IN
30268: IFFALSE 30304
// if GetTech ( i , side ) <> state_researched then
30270: LD_VAR 0 4
30274: PPUSH
30275: LD_VAR 0 1
30279: PPUSH
30280: CALL_OW 321
30284: PUSH
30285: LD_INT 2
30287: NONEQUAL
30288: IFFALSE 30302
// begin result := false ;
30290: LD_ADDR_VAR 0 3
30294: PUSH
30295: LD_INT 0
30297: ST_TO_ADDR
// exit ;
30298: POP
30299: POP
30300: GO 30306
// end ;
30302: GO 30267
30304: POP
30305: POP
// end ;
30306: LD_VAR 0 3
30310: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30311: LD_INT 0
30313: PPUSH
30314: PPUSH
30315: PPUSH
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30326: LD_VAR 0 1
30330: NOT
30331: PUSH
30332: LD_VAR 0 1
30336: PPUSH
30337: CALL_OW 257
30341: PUSH
30342: LD_INT 9
30344: NONEQUAL
30345: OR
30346: IFFALSE 30350
// exit ;
30348: GO 30923
// side := GetSide ( unit ) ;
30350: LD_ADDR_VAR 0 9
30354: PUSH
30355: LD_VAR 0 1
30359: PPUSH
30360: CALL_OW 255
30364: ST_TO_ADDR
// tech_space := tech_spacanom ;
30365: LD_ADDR_VAR 0 12
30369: PUSH
30370: LD_INT 29
30372: ST_TO_ADDR
// tech_time := tech_taurad ;
30373: LD_ADDR_VAR 0 13
30377: PUSH
30378: LD_INT 28
30380: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30381: LD_ADDR_VAR 0 11
30385: PUSH
30386: LD_VAR 0 1
30390: PPUSH
30391: CALL_OW 310
30395: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30396: LD_VAR 0 11
30400: PPUSH
30401: CALL_OW 247
30405: PUSH
30406: LD_INT 2
30408: EQUAL
30409: IFFALSE 30413
// exit ;
30411: GO 30923
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30413: LD_ADDR_VAR 0 8
30417: PUSH
30418: LD_INT 81
30420: PUSH
30421: LD_VAR 0 9
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: LD_INT 21
30435: PUSH
30436: LD_INT 3
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PPUSH
30451: CALL_OW 69
30455: ST_TO_ADDR
// if not tmp then
30456: LD_VAR 0 8
30460: NOT
30461: IFFALSE 30465
// exit ;
30463: GO 30923
// if in_unit then
30465: LD_VAR 0 11
30469: IFFALSE 30493
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30471: LD_ADDR_VAR 0 10
30475: PUSH
30476: LD_VAR 0 8
30480: PPUSH
30481: LD_VAR 0 11
30485: PPUSH
30486: CALL_OW 74
30490: ST_TO_ADDR
30491: GO 30513
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30493: LD_ADDR_VAR 0 10
30497: PUSH
30498: LD_VAR 0 8
30502: PPUSH
30503: LD_VAR 0 1
30507: PPUSH
30508: CALL_OW 74
30512: ST_TO_ADDR
// if not enemy then
30513: LD_VAR 0 10
30517: NOT
30518: IFFALSE 30522
// exit ;
30520: GO 30923
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30522: LD_VAR 0 11
30526: PUSH
30527: LD_VAR 0 11
30531: PPUSH
30532: LD_VAR 0 10
30536: PPUSH
30537: CALL_OW 296
30541: PUSH
30542: LD_INT 13
30544: GREATER
30545: AND
30546: PUSH
30547: LD_VAR 0 1
30551: PPUSH
30552: LD_VAR 0 10
30556: PPUSH
30557: CALL_OW 296
30561: PUSH
30562: LD_INT 12
30564: GREATER
30565: OR
30566: IFFALSE 30570
// exit ;
30568: GO 30923
// missile := [ 1 ] ;
30570: LD_ADDR_VAR 0 14
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: EMPTY
30579: LIST
30580: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30581: LD_VAR 0 9
30585: PPUSH
30586: LD_VAR 0 12
30590: PPUSH
30591: CALL_OW 325
30595: IFFALSE 30624
// missile := Insert ( missile , missile + 1 , 2 ) ;
30597: LD_ADDR_VAR 0 14
30601: PUSH
30602: LD_VAR 0 14
30606: PPUSH
30607: LD_VAR 0 14
30611: PUSH
30612: LD_INT 1
30614: PLUS
30615: PPUSH
30616: LD_INT 2
30618: PPUSH
30619: CALL_OW 2
30623: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30624: LD_VAR 0 9
30628: PPUSH
30629: LD_VAR 0 13
30633: PPUSH
30634: CALL_OW 325
30638: PUSH
30639: LD_VAR 0 10
30643: PPUSH
30644: CALL_OW 255
30648: PPUSH
30649: LD_VAR 0 13
30653: PPUSH
30654: CALL_OW 325
30658: NOT
30659: AND
30660: IFFALSE 30689
// missile := Insert ( missile , missile + 1 , 3 ) ;
30662: LD_ADDR_VAR 0 14
30666: PUSH
30667: LD_VAR 0 14
30671: PPUSH
30672: LD_VAR 0 14
30676: PUSH
30677: LD_INT 1
30679: PLUS
30680: PPUSH
30681: LD_INT 3
30683: PPUSH
30684: CALL_OW 2
30688: ST_TO_ADDR
// if missile < 2 then
30689: LD_VAR 0 14
30693: PUSH
30694: LD_INT 2
30696: LESS
30697: IFFALSE 30701
// exit ;
30699: GO 30923
// x := GetX ( enemy ) ;
30701: LD_ADDR_VAR 0 4
30705: PUSH
30706: LD_VAR 0 10
30710: PPUSH
30711: CALL_OW 250
30715: ST_TO_ADDR
// y := GetY ( enemy ) ;
30716: LD_ADDR_VAR 0 5
30720: PUSH
30721: LD_VAR 0 10
30725: PPUSH
30726: CALL_OW 251
30730: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30731: LD_ADDR_VAR 0 6
30735: PUSH
30736: LD_VAR 0 4
30740: PUSH
30741: LD_INT 1
30743: NEG
30744: PPUSH
30745: LD_INT 1
30747: PPUSH
30748: CALL_OW 12
30752: PLUS
30753: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30754: LD_ADDR_VAR 0 7
30758: PUSH
30759: LD_VAR 0 5
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PPUSH
30768: LD_INT 1
30770: PPUSH
30771: CALL_OW 12
30775: PLUS
30776: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30777: LD_VAR 0 6
30781: PPUSH
30782: LD_VAR 0 7
30786: PPUSH
30787: CALL_OW 488
30791: NOT
30792: IFFALSE 30814
// begin _x := x ;
30794: LD_ADDR_VAR 0 6
30798: PUSH
30799: LD_VAR 0 4
30803: ST_TO_ADDR
// _y := y ;
30804: LD_ADDR_VAR 0 7
30808: PUSH
30809: LD_VAR 0 5
30813: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30814: LD_ADDR_VAR 0 3
30818: PUSH
30819: LD_INT 1
30821: PPUSH
30822: LD_VAR 0 14
30826: PPUSH
30827: CALL_OW 12
30831: ST_TO_ADDR
// case i of 1 :
30832: LD_VAR 0 3
30836: PUSH
30837: LD_INT 1
30839: DOUBLE
30840: EQUAL
30841: IFTRUE 30845
30843: GO 30862
30845: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30846: LD_VAR 0 1
30850: PPUSH
30851: LD_VAR 0 10
30855: PPUSH
30856: CALL_OW 115
30860: GO 30923
30862: LD_INT 2
30864: DOUBLE
30865: EQUAL
30866: IFTRUE 30870
30868: GO 30892
30870: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30871: LD_VAR 0 1
30875: PPUSH
30876: LD_VAR 0 6
30880: PPUSH
30881: LD_VAR 0 7
30885: PPUSH
30886: CALL_OW 153
30890: GO 30923
30892: LD_INT 3
30894: DOUBLE
30895: EQUAL
30896: IFTRUE 30900
30898: GO 30922
30900: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30901: LD_VAR 0 1
30905: PPUSH
30906: LD_VAR 0 6
30910: PPUSH
30911: LD_VAR 0 7
30915: PPUSH
30916: CALL_OW 154
30920: GO 30923
30922: POP
// end ;
30923: LD_VAR 0 2
30927: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30928: LD_INT 0
30930: PPUSH
30931: PPUSH
30932: PPUSH
30933: PPUSH
30934: PPUSH
30935: PPUSH
// if not unit or not building then
30936: LD_VAR 0 1
30940: NOT
30941: PUSH
30942: LD_VAR 0 2
30946: NOT
30947: OR
30948: IFFALSE 30952
// exit ;
30950: GO 31110
// x := GetX ( building ) ;
30952: LD_ADDR_VAR 0 5
30956: PUSH
30957: LD_VAR 0 2
30961: PPUSH
30962: CALL_OW 250
30966: ST_TO_ADDR
// y := GetY ( building ) ;
30967: LD_ADDR_VAR 0 6
30971: PUSH
30972: LD_VAR 0 2
30976: PPUSH
30977: CALL_OW 251
30981: ST_TO_ADDR
// for i = 0 to 5 do
30982: LD_ADDR_VAR 0 4
30986: PUSH
30987: DOUBLE
30988: LD_INT 0
30990: DEC
30991: ST_TO_ADDR
30992: LD_INT 5
30994: PUSH
30995: FOR_TO
30996: IFFALSE 31108
// begin _x := ShiftX ( x , i , 3 ) ;
30998: LD_ADDR_VAR 0 7
31002: PUSH
31003: LD_VAR 0 5
31007: PPUSH
31008: LD_VAR 0 4
31012: PPUSH
31013: LD_INT 3
31015: PPUSH
31016: CALL_OW 272
31020: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31021: LD_ADDR_VAR 0 8
31025: PUSH
31026: LD_VAR 0 6
31030: PPUSH
31031: LD_VAR 0 4
31035: PPUSH
31036: LD_INT 3
31038: PPUSH
31039: CALL_OW 273
31043: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31044: LD_VAR 0 7
31048: PPUSH
31049: LD_VAR 0 8
31053: PPUSH
31054: CALL_OW 488
31058: NOT
31059: IFFALSE 31063
// continue ;
31061: GO 30995
// if HexInfo ( _x , _y ) = 0 then
31063: LD_VAR 0 7
31067: PPUSH
31068: LD_VAR 0 8
31072: PPUSH
31073: CALL_OW 428
31077: PUSH
31078: LD_INT 0
31080: EQUAL
31081: IFFALSE 31106
// begin ComMoveXY ( unit , _x , _y ) ;
31083: LD_VAR 0 1
31087: PPUSH
31088: LD_VAR 0 7
31092: PPUSH
31093: LD_VAR 0 8
31097: PPUSH
31098: CALL_OW 111
// exit ;
31102: POP
31103: POP
31104: GO 31110
// end ; end ;
31106: GO 30995
31108: POP
31109: POP
// end ;
31110: LD_VAR 0 3
31114: RET
// export function ScanBase ( side , base_area ) ; begin
31115: LD_INT 0
31117: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31118: LD_ADDR_VAR 0 3
31122: PUSH
31123: LD_VAR 0 2
31127: PPUSH
31128: LD_INT 81
31130: PUSH
31131: LD_VAR 0 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PPUSH
31140: CALL_OW 70
31144: ST_TO_ADDR
// end ;
31145: LD_VAR 0 3
31149: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31150: LD_INT 0
31152: PPUSH
31153: PPUSH
31154: PPUSH
31155: PPUSH
// result := false ;
31156: LD_ADDR_VAR 0 2
31160: PUSH
31161: LD_INT 0
31163: ST_TO_ADDR
// side := GetSide ( unit ) ;
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_VAR 0 1
31173: PPUSH
31174: CALL_OW 255
31178: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31179: LD_ADDR_VAR 0 4
31183: PUSH
31184: LD_VAR 0 1
31188: PPUSH
31189: CALL_OW 248
31193: ST_TO_ADDR
// case nat of 1 :
31194: LD_VAR 0 4
31198: PUSH
31199: LD_INT 1
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31218
31207: POP
// tech := tech_lassight ; 2 :
31208: LD_ADDR_VAR 0 5
31212: PUSH
31213: LD_INT 12
31215: ST_TO_ADDR
31216: GO 31257
31218: LD_INT 2
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31237
31226: POP
// tech := tech_mortar ; 3 :
31227: LD_ADDR_VAR 0 5
31231: PUSH
31232: LD_INT 41
31234: ST_TO_ADDR
31235: GO 31257
31237: LD_INT 3
31239: DOUBLE
31240: EQUAL
31241: IFTRUE 31245
31243: GO 31256
31245: POP
// tech := tech_bazooka ; end ;
31246: LD_ADDR_VAR 0 5
31250: PUSH
31251: LD_INT 44
31253: ST_TO_ADDR
31254: GO 31257
31256: POP
// if Researched ( side , tech ) then
31257: LD_VAR 0 3
31261: PPUSH
31262: LD_VAR 0 5
31266: PPUSH
31267: CALL_OW 325
31271: IFFALSE 31298
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31273: LD_ADDR_VAR 0 2
31277: PUSH
31278: LD_INT 5
31280: PUSH
31281: LD_INT 8
31283: PUSH
31284: LD_INT 9
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: LIST
31291: PUSH
31292: LD_VAR 0 4
31296: ARRAY
31297: ST_TO_ADDR
// end ;
31298: LD_VAR 0 2
31302: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31303: LD_INT 0
31305: PPUSH
31306: PPUSH
31307: PPUSH
// if not mines then
31308: LD_VAR 0 2
31312: NOT
31313: IFFALSE 31317
// exit ;
31315: GO 31461
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31317: LD_ADDR_VAR 0 5
31321: PUSH
31322: LD_INT 81
31324: PUSH
31325: LD_VAR 0 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 3
31336: PUSH
31337: LD_INT 21
31339: PUSH
31340: LD_INT 3
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PPUSH
31355: CALL_OW 69
31359: ST_TO_ADDR
// for i in mines do
31360: LD_ADDR_VAR 0 4
31364: PUSH
31365: LD_VAR 0 2
31369: PUSH
31370: FOR_IN
31371: IFFALSE 31459
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31373: LD_VAR 0 4
31377: PUSH
31378: LD_INT 1
31380: ARRAY
31381: PPUSH
31382: LD_VAR 0 4
31386: PUSH
31387: LD_INT 2
31389: ARRAY
31390: PPUSH
31391: CALL_OW 458
31395: NOT
31396: IFFALSE 31400
// continue ;
31398: GO 31370
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31400: LD_VAR 0 4
31404: PUSH
31405: LD_INT 1
31407: ARRAY
31408: PPUSH
31409: LD_VAR 0 4
31413: PUSH
31414: LD_INT 2
31416: ARRAY
31417: PPUSH
31418: CALL_OW 428
31422: PUSH
31423: LD_VAR 0 5
31427: IN
31428: IFFALSE 31457
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31430: LD_VAR 0 4
31434: PUSH
31435: LD_INT 1
31437: ARRAY
31438: PPUSH
31439: LD_VAR 0 4
31443: PUSH
31444: LD_INT 2
31446: ARRAY
31447: PPUSH
31448: LD_VAR 0 1
31452: PPUSH
31453: CALL_OW 456
// end ;
31457: GO 31370
31459: POP
31460: POP
// end ;
31461: LD_VAR 0 3
31465: RET
// export function Count ( array ) ; var i ; begin
31466: LD_INT 0
31468: PPUSH
31469: PPUSH
// result := 0 ;
31470: LD_ADDR_VAR 0 2
31474: PUSH
31475: LD_INT 0
31477: ST_TO_ADDR
// for i in array do
31478: LD_ADDR_VAR 0 3
31482: PUSH
31483: LD_VAR 0 1
31487: PUSH
31488: FOR_IN
31489: IFFALSE 31513
// if i then
31491: LD_VAR 0 3
31495: IFFALSE 31511
// result := result + 1 ;
31497: LD_ADDR_VAR 0 2
31501: PUSH
31502: LD_VAR 0 2
31506: PUSH
31507: LD_INT 1
31509: PLUS
31510: ST_TO_ADDR
31511: GO 31488
31513: POP
31514: POP
// end ;
31515: LD_VAR 0 2
31519: RET
// export function IsEmpty ( building ) ; begin
31520: LD_INT 0
31522: PPUSH
// if not building then
31523: LD_VAR 0 1
31527: NOT
31528: IFFALSE 31532
// exit ;
31530: GO 31575
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31532: LD_ADDR_VAR 0 2
31536: PUSH
31537: LD_VAR 0 1
31541: PUSH
31542: LD_INT 22
31544: PUSH
31545: LD_VAR 0 1
31549: PPUSH
31550: CALL_OW 255
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 58
31561: PUSH
31562: EMPTY
31563: LIST
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PPUSH
31569: CALL_OW 69
31573: IN
31574: ST_TO_ADDR
// end ;
31575: LD_VAR 0 2
31579: RET
// export function IsNotFull ( building ) ; begin
31580: LD_INT 0
31582: PPUSH
// if not building then
31583: LD_VAR 0 1
31587: NOT
31588: IFFALSE 31592
// exit ;
31590: GO 31611
// result := UnitsInside ( building ) < 6 ;
31592: LD_ADDR_VAR 0 2
31596: PUSH
31597: LD_VAR 0 1
31601: PPUSH
31602: CALL_OW 313
31606: PUSH
31607: LD_INT 6
31609: LESS
31610: ST_TO_ADDR
// end ;
31611: LD_VAR 0 2
31615: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31616: LD_INT 0
31618: PPUSH
31619: PPUSH
31620: PPUSH
31621: PPUSH
// tmp := [ ] ;
31622: LD_ADDR_VAR 0 3
31626: PUSH
31627: EMPTY
31628: ST_TO_ADDR
// list := [ ] ;
31629: LD_ADDR_VAR 0 5
31633: PUSH
31634: EMPTY
31635: ST_TO_ADDR
// for i = 16 to 25 do
31636: LD_ADDR_VAR 0 4
31640: PUSH
31641: DOUBLE
31642: LD_INT 16
31644: DEC
31645: ST_TO_ADDR
31646: LD_INT 25
31648: PUSH
31649: FOR_TO
31650: IFFALSE 31723
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31652: LD_ADDR_VAR 0 3
31656: PUSH
31657: LD_VAR 0 3
31661: PUSH
31662: LD_INT 22
31664: PUSH
31665: LD_VAR 0 1
31669: PPUSH
31670: CALL_OW 255
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 91
31681: PUSH
31682: LD_VAR 0 1
31686: PUSH
31687: LD_INT 6
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 30
31697: PUSH
31698: LD_VAR 0 4
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: PPUSH
31715: CALL_OW 69
31719: ADD
31720: ST_TO_ADDR
31721: GO 31649
31723: POP
31724: POP
// for i = 1 to tmp do
31725: LD_ADDR_VAR 0 4
31729: PUSH
31730: DOUBLE
31731: LD_INT 1
31733: DEC
31734: ST_TO_ADDR
31735: LD_VAR 0 3
31739: PUSH
31740: FOR_TO
31741: IFFALSE 31829
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31743: LD_ADDR_VAR 0 5
31747: PUSH
31748: LD_VAR 0 5
31752: PUSH
31753: LD_VAR 0 3
31757: PUSH
31758: LD_VAR 0 4
31762: ARRAY
31763: PPUSH
31764: CALL_OW 266
31768: PUSH
31769: LD_VAR 0 3
31773: PUSH
31774: LD_VAR 0 4
31778: ARRAY
31779: PPUSH
31780: CALL_OW 250
31784: PUSH
31785: LD_VAR 0 3
31789: PUSH
31790: LD_VAR 0 4
31794: ARRAY
31795: PPUSH
31796: CALL_OW 251
31800: PUSH
31801: LD_VAR 0 3
31805: PUSH
31806: LD_VAR 0 4
31810: ARRAY
31811: PPUSH
31812: CALL_OW 254
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: PUSH
31823: EMPTY
31824: LIST
31825: ADD
31826: ST_TO_ADDR
31827: GO 31740
31829: POP
31830: POP
// result := list ;
31831: LD_ADDR_VAR 0 2
31835: PUSH
31836: LD_VAR 0 5
31840: ST_TO_ADDR
// end ;
31841: LD_VAR 0 2
31845: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31846: LD_INT 0
31848: PPUSH
31849: PPUSH
31850: PPUSH
31851: PPUSH
31852: PPUSH
31853: PPUSH
31854: PPUSH
// if not factory then
31855: LD_VAR 0 1
31859: NOT
31860: IFFALSE 31864
// exit ;
31862: GO 32457
// if control = control_apeman then
31864: LD_VAR 0 4
31868: PUSH
31869: LD_INT 5
31871: EQUAL
31872: IFFALSE 31981
// begin tmp := UnitsInside ( factory ) ;
31874: LD_ADDR_VAR 0 8
31878: PUSH
31879: LD_VAR 0 1
31883: PPUSH
31884: CALL_OW 313
31888: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31889: LD_VAR 0 8
31893: PPUSH
31894: LD_INT 25
31896: PUSH
31897: LD_INT 12
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PPUSH
31904: CALL_OW 72
31908: NOT
31909: IFFALSE 31919
// control := control_manual ;
31911: LD_ADDR_VAR 0 4
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31919: LD_ADDR_VAR 0 8
31923: PUSH
31924: LD_VAR 0 1
31928: PPUSH
31929: CALL 31616 0 1
31933: ST_TO_ADDR
// if tmp then
31934: LD_VAR 0 8
31938: IFFALSE 31981
// begin for i in tmp do
31940: LD_ADDR_VAR 0 7
31944: PUSH
31945: LD_VAR 0 8
31949: PUSH
31950: FOR_IN
31951: IFFALSE 31979
// if i [ 1 ] = b_ext_radio then
31953: LD_VAR 0 7
31957: PUSH
31958: LD_INT 1
31960: ARRAY
31961: PUSH
31962: LD_INT 22
31964: EQUAL
31965: IFFALSE 31977
// begin control := control_remote ;
31967: LD_ADDR_VAR 0 4
31971: PUSH
31972: LD_INT 2
31974: ST_TO_ADDR
// break ;
31975: GO 31979
// end ;
31977: GO 31950
31979: POP
31980: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31981: LD_VAR 0 1
31985: PPUSH
31986: LD_VAR 0 2
31990: PPUSH
31991: LD_VAR 0 3
31995: PPUSH
31996: LD_VAR 0 4
32000: PPUSH
32001: LD_VAR 0 5
32005: PPUSH
32006: CALL_OW 448
32010: IFFALSE 32045
// begin result := [ chassis , engine , control , weapon ] ;
32012: LD_ADDR_VAR 0 6
32016: PUSH
32017: LD_VAR 0 2
32021: PUSH
32022: LD_VAR 0 3
32026: PUSH
32027: LD_VAR 0 4
32031: PUSH
32032: LD_VAR 0 5
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: ST_TO_ADDR
// exit ;
32043: GO 32457
// end ; _chassis := AvailableChassisList ( factory ) ;
32045: LD_ADDR_VAR 0 9
32049: PUSH
32050: LD_VAR 0 1
32054: PPUSH
32055: CALL_OW 475
32059: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32060: LD_ADDR_VAR 0 11
32064: PUSH
32065: LD_VAR 0 1
32069: PPUSH
32070: CALL_OW 476
32074: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32075: LD_ADDR_VAR 0 12
32079: PUSH
32080: LD_VAR 0 1
32084: PPUSH
32085: CALL_OW 477
32089: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32090: LD_ADDR_VAR 0 10
32094: PUSH
32095: LD_VAR 0 1
32099: PPUSH
32100: CALL_OW 478
32104: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32105: LD_VAR 0 9
32109: NOT
32110: PUSH
32111: LD_VAR 0 11
32115: NOT
32116: OR
32117: PUSH
32118: LD_VAR 0 12
32122: NOT
32123: OR
32124: PUSH
32125: LD_VAR 0 10
32129: NOT
32130: OR
32131: IFFALSE 32166
// begin result := [ chassis , engine , control , weapon ] ;
32133: LD_ADDR_VAR 0 6
32137: PUSH
32138: LD_VAR 0 2
32142: PUSH
32143: LD_VAR 0 3
32147: PUSH
32148: LD_VAR 0 4
32152: PUSH
32153: LD_VAR 0 5
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
// exit ;
32164: GO 32457
// end ; if not chassis in _chassis then
32166: LD_VAR 0 2
32170: PUSH
32171: LD_VAR 0 9
32175: IN
32176: NOT
32177: IFFALSE 32203
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32179: LD_ADDR_VAR 0 2
32183: PUSH
32184: LD_VAR 0 9
32188: PUSH
32189: LD_INT 1
32191: PPUSH
32192: LD_VAR 0 9
32196: PPUSH
32197: CALL_OW 12
32201: ARRAY
32202: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32203: LD_VAR 0 2
32207: PPUSH
32208: LD_VAR 0 3
32212: PPUSH
32213: CALL 32462 0 2
32217: NOT
32218: IFFALSE 32277
// repeat engine := _engine [ 1 ] ;
32220: LD_ADDR_VAR 0 3
32224: PUSH
32225: LD_VAR 0 11
32229: PUSH
32230: LD_INT 1
32232: ARRAY
32233: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32234: LD_ADDR_VAR 0 11
32238: PUSH
32239: LD_VAR 0 11
32243: PPUSH
32244: LD_INT 1
32246: PPUSH
32247: CALL_OW 3
32251: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32252: LD_VAR 0 2
32256: PPUSH
32257: LD_VAR 0 3
32261: PPUSH
32262: CALL 32462 0 2
32266: PUSH
32267: LD_VAR 0 11
32271: PUSH
32272: EMPTY
32273: EQUAL
32274: OR
32275: IFFALSE 32220
// if not control in _control then
32277: LD_VAR 0 4
32281: PUSH
32282: LD_VAR 0 12
32286: IN
32287: NOT
32288: IFFALSE 32314
// control := _control [ rand ( 1 , _control ) ] ;
32290: LD_ADDR_VAR 0 4
32294: PUSH
32295: LD_VAR 0 12
32299: PUSH
32300: LD_INT 1
32302: PPUSH
32303: LD_VAR 0 12
32307: PPUSH
32308: CALL_OW 12
32312: ARRAY
32313: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32314: LD_VAR 0 2
32318: PPUSH
32319: LD_VAR 0 5
32323: PPUSH
32324: CALL 32682 0 2
32328: NOT
32329: IFFALSE 32388
// repeat weapon := _weapon [ 1 ] ;
32331: LD_ADDR_VAR 0 5
32335: PUSH
32336: LD_VAR 0 10
32340: PUSH
32341: LD_INT 1
32343: ARRAY
32344: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32345: LD_ADDR_VAR 0 10
32349: PUSH
32350: LD_VAR 0 10
32354: PPUSH
32355: LD_INT 1
32357: PPUSH
32358: CALL_OW 3
32362: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32363: LD_VAR 0 2
32367: PPUSH
32368: LD_VAR 0 5
32372: PPUSH
32373: CALL 32682 0 2
32377: PUSH
32378: LD_VAR 0 10
32382: PUSH
32383: EMPTY
32384: EQUAL
32385: OR
32386: IFFALSE 32331
// result := [ ] ;
32388: LD_ADDR_VAR 0 6
32392: PUSH
32393: EMPTY
32394: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32395: LD_VAR 0 1
32399: PPUSH
32400: LD_VAR 0 2
32404: PPUSH
32405: LD_VAR 0 3
32409: PPUSH
32410: LD_VAR 0 4
32414: PPUSH
32415: LD_VAR 0 5
32419: PPUSH
32420: CALL_OW 448
32424: IFFALSE 32457
// result := [ chassis , engine , control , weapon ] ;
32426: LD_ADDR_VAR 0 6
32430: PUSH
32431: LD_VAR 0 2
32435: PUSH
32436: LD_VAR 0 3
32440: PUSH
32441: LD_VAR 0 4
32445: PUSH
32446: LD_VAR 0 5
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: ST_TO_ADDR
// end ;
32457: LD_VAR 0 6
32461: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32462: LD_INT 0
32464: PPUSH
// if not chassis or not engine then
32465: LD_VAR 0 1
32469: NOT
32470: PUSH
32471: LD_VAR 0 2
32475: NOT
32476: OR
32477: IFFALSE 32481
// exit ;
32479: GO 32677
// case engine of engine_solar :
32481: LD_VAR 0 2
32485: PUSH
32486: LD_INT 2
32488: DOUBLE
32489: EQUAL
32490: IFTRUE 32494
32492: GO 32532
32494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32495: LD_ADDR_VAR 0 3
32499: PUSH
32500: LD_INT 11
32502: PUSH
32503: LD_INT 12
32505: PUSH
32506: LD_INT 13
32508: PUSH
32509: LD_INT 14
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: LD_INT 2
32517: PUSH
32518: LD_INT 3
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: ST_TO_ADDR
32530: GO 32661
32532: LD_INT 1
32534: DOUBLE
32535: EQUAL
32536: IFTRUE 32540
32538: GO 32602
32540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32541: LD_ADDR_VAR 0 3
32545: PUSH
32546: LD_INT 11
32548: PUSH
32549: LD_INT 12
32551: PUSH
32552: LD_INT 13
32554: PUSH
32555: LD_INT 14
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: LD_INT 3
32566: PUSH
32567: LD_INT 4
32569: PUSH
32570: LD_INT 5
32572: PUSH
32573: LD_INT 21
32575: PUSH
32576: LD_INT 23
32578: PUSH
32579: LD_INT 22
32581: PUSH
32582: LD_INT 24
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: ST_TO_ADDR
32600: GO 32661
32602: LD_INT 3
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32610
32608: GO 32660
32610: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32611: LD_ADDR_VAR 0 3
32615: PUSH
32616: LD_INT 13
32618: PUSH
32619: LD_INT 14
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: LD_INT 3
32627: PUSH
32628: LD_INT 4
32630: PUSH
32631: LD_INT 5
32633: PUSH
32634: LD_INT 21
32636: PUSH
32637: LD_INT 22
32639: PUSH
32640: LD_INT 23
32642: PUSH
32643: LD_INT 24
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: ST_TO_ADDR
32658: GO 32661
32660: POP
// result := ( chassis in result ) ;
32661: LD_ADDR_VAR 0 3
32665: PUSH
32666: LD_VAR 0 1
32670: PUSH
32671: LD_VAR 0 3
32675: IN
32676: ST_TO_ADDR
// end ;
32677: LD_VAR 0 3
32681: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32682: LD_INT 0
32684: PPUSH
// if not chassis or not weapon then
32685: LD_VAR 0 1
32689: NOT
32690: PUSH
32691: LD_VAR 0 2
32695: NOT
32696: OR
32697: IFFALSE 32701
// exit ;
32699: GO 33763
// case weapon of us_machine_gun :
32701: LD_VAR 0 2
32705: PUSH
32706: LD_INT 2
32708: DOUBLE
32709: EQUAL
32710: IFTRUE 32714
32712: GO 32744
32714: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: LD_INT 3
32728: PUSH
32729: LD_INT 4
32731: PUSH
32732: LD_INT 5
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: ST_TO_ADDR
32742: GO 33747
32744: LD_INT 3
32746: DOUBLE
32747: EQUAL
32748: IFTRUE 32752
32750: GO 32782
32752: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32753: LD_ADDR_VAR 0 3
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: LD_INT 4
32769: PUSH
32770: LD_INT 5
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: ST_TO_ADDR
32780: GO 33747
32782: LD_INT 11
32784: DOUBLE
32785: EQUAL
32786: IFTRUE 32790
32788: GO 32820
32790: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32791: LD_ADDR_VAR 0 3
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: LD_INT 3
32804: PUSH
32805: LD_INT 4
32807: PUSH
32808: LD_INT 5
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: ST_TO_ADDR
32818: GO 33747
32820: LD_INT 4
32822: DOUBLE
32823: EQUAL
32824: IFTRUE 32828
32826: GO 32854
32828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32829: LD_ADDR_VAR 0 3
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: LD_INT 3
32839: PUSH
32840: LD_INT 4
32842: PUSH
32843: LD_INT 5
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: ST_TO_ADDR
32852: GO 33747
32854: LD_INT 5
32856: DOUBLE
32857: EQUAL
32858: IFTRUE 32862
32860: GO 32888
32862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32863: LD_ADDR_VAR 0 3
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: LD_INT 4
32876: PUSH
32877: LD_INT 5
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
32886: GO 33747
32888: LD_INT 9
32890: DOUBLE
32891: EQUAL
32892: IFTRUE 32896
32894: GO 32922
32896: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32897: LD_ADDR_VAR 0 3
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: LD_INT 3
32907: PUSH
32908: LD_INT 4
32910: PUSH
32911: LD_INT 5
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: ST_TO_ADDR
32920: GO 33747
32922: LD_INT 7
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32956
32930: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32931: LD_ADDR_VAR 0 3
32935: PUSH
32936: LD_INT 2
32938: PUSH
32939: LD_INT 3
32941: PUSH
32942: LD_INT 4
32944: PUSH
32945: LD_INT 5
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
32954: GO 33747
32956: LD_INT 12
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 32990
32964: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: LD_INT 4
32978: PUSH
32979: LD_INT 5
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: ST_TO_ADDR
32988: GO 33747
32990: LD_INT 13
32992: DOUBLE
32993: EQUAL
32994: IFTRUE 32998
32996: GO 33024
32998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32999: LD_ADDR_VAR 0 3
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: LD_INT 3
33009: PUSH
33010: LD_INT 4
33012: PUSH
33013: LD_INT 5
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: ST_TO_ADDR
33022: GO 33747
33024: LD_INT 14
33026: DOUBLE
33027: EQUAL
33028: IFTRUE 33032
33030: GO 33050
33032: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33033: LD_ADDR_VAR 0 3
33037: PUSH
33038: LD_INT 4
33040: PUSH
33041: LD_INT 5
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: ST_TO_ADDR
33048: GO 33747
33050: LD_INT 6
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33076
33058: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33059: LD_ADDR_VAR 0 3
33063: PUSH
33064: LD_INT 4
33066: PUSH
33067: LD_INT 5
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: ST_TO_ADDR
33074: GO 33747
33076: LD_INT 10
33078: DOUBLE
33079: EQUAL
33080: IFTRUE 33084
33082: GO 33102
33084: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33085: LD_ADDR_VAR 0 3
33089: PUSH
33090: LD_INT 4
33092: PUSH
33093: LD_INT 5
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: ST_TO_ADDR
33100: GO 33747
33102: LD_INT 22
33104: DOUBLE
33105: EQUAL
33106: IFTRUE 33110
33108: GO 33136
33110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33111: LD_ADDR_VAR 0 3
33115: PUSH
33116: LD_INT 11
33118: PUSH
33119: LD_INT 12
33121: PUSH
33122: LD_INT 13
33124: PUSH
33125: LD_INT 14
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: ST_TO_ADDR
33134: GO 33747
33136: LD_INT 23
33138: DOUBLE
33139: EQUAL
33140: IFTRUE 33144
33142: GO 33170
33144: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33145: LD_ADDR_VAR 0 3
33149: PUSH
33150: LD_INT 11
33152: PUSH
33153: LD_INT 12
33155: PUSH
33156: LD_INT 13
33158: PUSH
33159: LD_INT 14
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: ST_TO_ADDR
33168: GO 33747
33170: LD_INT 24
33172: DOUBLE
33173: EQUAL
33174: IFTRUE 33178
33176: GO 33204
33178: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33179: LD_ADDR_VAR 0 3
33183: PUSH
33184: LD_INT 11
33186: PUSH
33187: LD_INT 12
33189: PUSH
33190: LD_INT 13
33192: PUSH
33193: LD_INT 14
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: ST_TO_ADDR
33202: GO 33747
33204: LD_INT 30
33206: DOUBLE
33207: EQUAL
33208: IFTRUE 33212
33210: GO 33238
33212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: LD_INT 11
33220: PUSH
33221: LD_INT 12
33223: PUSH
33224: LD_INT 13
33226: PUSH
33227: LD_INT 14
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: ST_TO_ADDR
33236: GO 33747
33238: LD_INT 25
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33264
33246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33247: LD_ADDR_VAR 0 3
33251: PUSH
33252: LD_INT 13
33254: PUSH
33255: LD_INT 14
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: ST_TO_ADDR
33262: GO 33747
33264: LD_INT 27
33266: DOUBLE
33267: EQUAL
33268: IFTRUE 33272
33270: GO 33290
33272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33273: LD_ADDR_VAR 0 3
33277: PUSH
33278: LD_INT 13
33280: PUSH
33281: LD_INT 14
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: ST_TO_ADDR
33288: GO 33747
33290: LD_EXP 26
33294: DOUBLE
33295: EQUAL
33296: IFTRUE 33300
33298: GO 33326
33300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33301: LD_ADDR_VAR 0 3
33305: PUSH
33306: LD_INT 11
33308: PUSH
33309: LD_INT 12
33311: PUSH
33312: LD_INT 13
33314: PUSH
33315: LD_INT 14
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: ST_TO_ADDR
33324: GO 33747
33326: LD_INT 28
33328: DOUBLE
33329: EQUAL
33330: IFTRUE 33334
33332: GO 33352
33334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33335: LD_ADDR_VAR 0 3
33339: PUSH
33340: LD_INT 13
33342: PUSH
33343: LD_INT 14
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: ST_TO_ADDR
33350: GO 33747
33352: LD_INT 29
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33378
33360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: LD_INT 13
33368: PUSH
33369: LD_INT 14
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: ST_TO_ADDR
33376: GO 33747
33378: LD_INT 31
33380: DOUBLE
33381: EQUAL
33382: IFTRUE 33386
33384: GO 33404
33386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33387: LD_ADDR_VAR 0 3
33391: PUSH
33392: LD_INT 13
33394: PUSH
33395: LD_INT 14
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: ST_TO_ADDR
33402: GO 33747
33404: LD_INT 26
33406: DOUBLE
33407: EQUAL
33408: IFTRUE 33412
33410: GO 33430
33412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33413: LD_ADDR_VAR 0 3
33417: PUSH
33418: LD_INT 13
33420: PUSH
33421: LD_INT 14
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: ST_TO_ADDR
33428: GO 33747
33430: LD_INT 42
33432: DOUBLE
33433: EQUAL
33434: IFTRUE 33438
33436: GO 33464
33438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33439: LD_ADDR_VAR 0 3
33443: PUSH
33444: LD_INT 21
33446: PUSH
33447: LD_INT 22
33449: PUSH
33450: LD_INT 23
33452: PUSH
33453: LD_INT 24
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: ST_TO_ADDR
33462: GO 33747
33464: LD_INT 43
33466: DOUBLE
33467: EQUAL
33468: IFTRUE 33472
33470: GO 33498
33472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33473: LD_ADDR_VAR 0 3
33477: PUSH
33478: LD_INT 21
33480: PUSH
33481: LD_INT 22
33483: PUSH
33484: LD_INT 23
33486: PUSH
33487: LD_INT 24
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: ST_TO_ADDR
33496: GO 33747
33498: LD_INT 44
33500: DOUBLE
33501: EQUAL
33502: IFTRUE 33506
33504: GO 33532
33506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33507: LD_ADDR_VAR 0 3
33511: PUSH
33512: LD_INT 21
33514: PUSH
33515: LD_INT 22
33517: PUSH
33518: LD_INT 23
33520: PUSH
33521: LD_INT 24
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: ST_TO_ADDR
33530: GO 33747
33532: LD_INT 45
33534: DOUBLE
33535: EQUAL
33536: IFTRUE 33540
33538: GO 33566
33540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33541: LD_ADDR_VAR 0 3
33545: PUSH
33546: LD_INT 21
33548: PUSH
33549: LD_INT 22
33551: PUSH
33552: LD_INT 23
33554: PUSH
33555: LD_INT 24
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: ST_TO_ADDR
33564: GO 33747
33566: LD_INT 49
33568: DOUBLE
33569: EQUAL
33570: IFTRUE 33574
33572: GO 33600
33574: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33575: LD_ADDR_VAR 0 3
33579: PUSH
33580: LD_INT 21
33582: PUSH
33583: LD_INT 22
33585: PUSH
33586: LD_INT 23
33588: PUSH
33589: LD_INT 24
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
33598: GO 33747
33600: LD_INT 51
33602: DOUBLE
33603: EQUAL
33604: IFTRUE 33608
33606: GO 33634
33608: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33609: LD_ADDR_VAR 0 3
33613: PUSH
33614: LD_INT 21
33616: PUSH
33617: LD_INT 22
33619: PUSH
33620: LD_INT 23
33622: PUSH
33623: LD_INT 24
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: ST_TO_ADDR
33632: GO 33747
33634: LD_INT 52
33636: DOUBLE
33637: EQUAL
33638: IFTRUE 33642
33640: GO 33668
33642: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33643: LD_ADDR_VAR 0 3
33647: PUSH
33648: LD_INT 21
33650: PUSH
33651: LD_INT 22
33653: PUSH
33654: LD_INT 23
33656: PUSH
33657: LD_INT 24
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: ST_TO_ADDR
33666: GO 33747
33668: LD_INT 53
33670: DOUBLE
33671: EQUAL
33672: IFTRUE 33676
33674: GO 33694
33676: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33677: LD_ADDR_VAR 0 3
33681: PUSH
33682: LD_INT 23
33684: PUSH
33685: LD_INT 24
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: ST_TO_ADDR
33692: GO 33747
33694: LD_INT 46
33696: DOUBLE
33697: EQUAL
33698: IFTRUE 33702
33700: GO 33720
33702: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: LD_INT 23
33710: PUSH
33711: LD_INT 24
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: ST_TO_ADDR
33718: GO 33747
33720: LD_INT 47
33722: DOUBLE
33723: EQUAL
33724: IFTRUE 33728
33726: GO 33746
33728: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33729: LD_ADDR_VAR 0 3
33733: PUSH
33734: LD_INT 23
33736: PUSH
33737: LD_INT 24
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: ST_TO_ADDR
33744: GO 33747
33746: POP
// result := ( chassis in result ) ;
33747: LD_ADDR_VAR 0 3
33751: PUSH
33752: LD_VAR 0 1
33756: PUSH
33757: LD_VAR 0 3
33761: IN
33762: ST_TO_ADDR
// end ;
33763: LD_VAR 0 3
33767: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33768: LD_INT 0
33770: PPUSH
33771: PPUSH
33772: PPUSH
33773: PPUSH
33774: PPUSH
33775: PPUSH
33776: PPUSH
// result := array ;
33777: LD_ADDR_VAR 0 5
33781: PUSH
33782: LD_VAR 0 1
33786: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33787: LD_VAR 0 1
33791: NOT
33792: PUSH
33793: LD_VAR 0 2
33797: NOT
33798: OR
33799: PUSH
33800: LD_VAR 0 3
33804: NOT
33805: OR
33806: PUSH
33807: LD_VAR 0 2
33811: PUSH
33812: LD_VAR 0 1
33816: GREATER
33817: OR
33818: PUSH
33819: LD_VAR 0 3
33823: PUSH
33824: LD_VAR 0 1
33828: GREATER
33829: OR
33830: IFFALSE 33834
// exit ;
33832: GO 34130
// if direction then
33834: LD_VAR 0 4
33838: IFFALSE 33902
// begin d := 1 ;
33840: LD_ADDR_VAR 0 9
33844: PUSH
33845: LD_INT 1
33847: ST_TO_ADDR
// if i_from > i_to then
33848: LD_VAR 0 2
33852: PUSH
33853: LD_VAR 0 3
33857: GREATER
33858: IFFALSE 33884
// length := ( array - i_from ) + i_to else
33860: LD_ADDR_VAR 0 11
33864: PUSH
33865: LD_VAR 0 1
33869: PUSH
33870: LD_VAR 0 2
33874: MINUS
33875: PUSH
33876: LD_VAR 0 3
33880: PLUS
33881: ST_TO_ADDR
33882: GO 33900
// length := i_to - i_from ;
33884: LD_ADDR_VAR 0 11
33888: PUSH
33889: LD_VAR 0 3
33893: PUSH
33894: LD_VAR 0 2
33898: MINUS
33899: ST_TO_ADDR
// end else
33900: GO 33963
// begin d := - 1 ;
33902: LD_ADDR_VAR 0 9
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: ST_TO_ADDR
// if i_from > i_to then
33911: LD_VAR 0 2
33915: PUSH
33916: LD_VAR 0 3
33920: GREATER
33921: IFFALSE 33941
// length := i_from - i_to else
33923: LD_ADDR_VAR 0 11
33927: PUSH
33928: LD_VAR 0 2
33932: PUSH
33933: LD_VAR 0 3
33937: MINUS
33938: ST_TO_ADDR
33939: GO 33963
// length := ( array - i_to ) + i_from ;
33941: LD_ADDR_VAR 0 11
33945: PUSH
33946: LD_VAR 0 1
33950: PUSH
33951: LD_VAR 0 3
33955: MINUS
33956: PUSH
33957: LD_VAR 0 2
33961: PLUS
33962: ST_TO_ADDR
// end ; if not length then
33963: LD_VAR 0 11
33967: NOT
33968: IFFALSE 33972
// exit ;
33970: GO 34130
// tmp := array ;
33972: LD_ADDR_VAR 0 10
33976: PUSH
33977: LD_VAR 0 1
33981: ST_TO_ADDR
// for i = 1 to length do
33982: LD_ADDR_VAR 0 6
33986: PUSH
33987: DOUBLE
33988: LD_INT 1
33990: DEC
33991: ST_TO_ADDR
33992: LD_VAR 0 11
33996: PUSH
33997: FOR_TO
33998: IFFALSE 34118
// begin for j = 1 to array do
34000: LD_ADDR_VAR 0 7
34004: PUSH
34005: DOUBLE
34006: LD_INT 1
34008: DEC
34009: ST_TO_ADDR
34010: LD_VAR 0 1
34014: PUSH
34015: FOR_TO
34016: IFFALSE 34104
// begin k := j + d ;
34018: LD_ADDR_VAR 0 8
34022: PUSH
34023: LD_VAR 0 7
34027: PUSH
34028: LD_VAR 0 9
34032: PLUS
34033: ST_TO_ADDR
// if k > array then
34034: LD_VAR 0 8
34038: PUSH
34039: LD_VAR 0 1
34043: GREATER
34044: IFFALSE 34054
// k := 1 ;
34046: LD_ADDR_VAR 0 8
34050: PUSH
34051: LD_INT 1
34053: ST_TO_ADDR
// if not k then
34054: LD_VAR 0 8
34058: NOT
34059: IFFALSE 34071
// k := array ;
34061: LD_ADDR_VAR 0 8
34065: PUSH
34066: LD_VAR 0 1
34070: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34071: LD_ADDR_VAR 0 10
34075: PUSH
34076: LD_VAR 0 10
34080: PPUSH
34081: LD_VAR 0 8
34085: PPUSH
34086: LD_VAR 0 1
34090: PUSH
34091: LD_VAR 0 7
34095: ARRAY
34096: PPUSH
34097: CALL_OW 1
34101: ST_TO_ADDR
// end ;
34102: GO 34015
34104: POP
34105: POP
// array := tmp ;
34106: LD_ADDR_VAR 0 1
34110: PUSH
34111: LD_VAR 0 10
34115: ST_TO_ADDR
// end ;
34116: GO 33997
34118: POP
34119: POP
// result := array ;
34120: LD_ADDR_VAR 0 5
34124: PUSH
34125: LD_VAR 0 1
34129: ST_TO_ADDR
// end ;
34130: LD_VAR 0 5
34134: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34135: LD_INT 0
34137: PPUSH
34138: PPUSH
// result := 0 ;
34139: LD_ADDR_VAR 0 3
34143: PUSH
34144: LD_INT 0
34146: ST_TO_ADDR
// if not array or not value in array then
34147: LD_VAR 0 1
34151: NOT
34152: PUSH
34153: LD_VAR 0 2
34157: PUSH
34158: LD_VAR 0 1
34162: IN
34163: NOT
34164: OR
34165: IFFALSE 34169
// exit ;
34167: GO 34223
// for i = 1 to array do
34169: LD_ADDR_VAR 0 4
34173: PUSH
34174: DOUBLE
34175: LD_INT 1
34177: DEC
34178: ST_TO_ADDR
34179: LD_VAR 0 1
34183: PUSH
34184: FOR_TO
34185: IFFALSE 34221
// if value = array [ i ] then
34187: LD_VAR 0 2
34191: PUSH
34192: LD_VAR 0 1
34196: PUSH
34197: LD_VAR 0 4
34201: ARRAY
34202: EQUAL
34203: IFFALSE 34219
// begin result := i ;
34205: LD_ADDR_VAR 0 3
34209: PUSH
34210: LD_VAR 0 4
34214: ST_TO_ADDR
// exit ;
34215: POP
34216: POP
34217: GO 34223
// end ;
34219: GO 34184
34221: POP
34222: POP
// end ;
34223: LD_VAR 0 3
34227: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34228: LD_INT 0
34230: PPUSH
// vc_chassis := chassis ;
34231: LD_ADDR_OWVAR 37
34235: PUSH
34236: LD_VAR 0 1
34240: ST_TO_ADDR
// vc_engine := engine ;
34241: LD_ADDR_OWVAR 39
34245: PUSH
34246: LD_VAR 0 2
34250: ST_TO_ADDR
// vc_control := control ;
34251: LD_ADDR_OWVAR 38
34255: PUSH
34256: LD_VAR 0 3
34260: ST_TO_ADDR
// vc_weapon := weapon ;
34261: LD_ADDR_OWVAR 40
34265: PUSH
34266: LD_VAR 0 4
34270: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34271: LD_ADDR_OWVAR 41
34275: PUSH
34276: LD_VAR 0 5
34280: ST_TO_ADDR
// end ;
34281: LD_VAR 0 6
34285: RET
// export function WantPlant ( unit ) ; var task ; begin
34286: LD_INT 0
34288: PPUSH
34289: PPUSH
// result := false ;
34290: LD_ADDR_VAR 0 2
34294: PUSH
34295: LD_INT 0
34297: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34298: LD_ADDR_VAR 0 3
34302: PUSH
34303: LD_VAR 0 1
34307: PPUSH
34308: CALL_OW 437
34312: ST_TO_ADDR
// if task then
34313: LD_VAR 0 3
34317: IFFALSE 34345
// if task [ 1 ] [ 1 ] = p then
34319: LD_VAR 0 3
34323: PUSH
34324: LD_INT 1
34326: ARRAY
34327: PUSH
34328: LD_INT 1
34330: ARRAY
34331: PUSH
34332: LD_STRING p
34334: EQUAL
34335: IFFALSE 34345
// result := true ;
34337: LD_ADDR_VAR 0 2
34341: PUSH
34342: LD_INT 1
34344: ST_TO_ADDR
// end ;
34345: LD_VAR 0 2
34349: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34350: LD_INT 0
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
// if pos < 1 then
34356: LD_VAR 0 2
34360: PUSH
34361: LD_INT 1
34363: LESS
34364: IFFALSE 34368
// exit ;
34366: GO 34671
// if pos = 1 then
34368: LD_VAR 0 2
34372: PUSH
34373: LD_INT 1
34375: EQUAL
34376: IFFALSE 34409
// result := Replace ( arr , pos [ 1 ] , value ) else
34378: LD_ADDR_VAR 0 4
34382: PUSH
34383: LD_VAR 0 1
34387: PPUSH
34388: LD_VAR 0 2
34392: PUSH
34393: LD_INT 1
34395: ARRAY
34396: PPUSH
34397: LD_VAR 0 3
34401: PPUSH
34402: CALL_OW 1
34406: ST_TO_ADDR
34407: GO 34671
// begin tmp := arr ;
34409: LD_ADDR_VAR 0 6
34413: PUSH
34414: LD_VAR 0 1
34418: ST_TO_ADDR
// s_arr := [ tmp ] ;
34419: LD_ADDR_VAR 0 7
34423: PUSH
34424: LD_VAR 0 6
34428: PUSH
34429: EMPTY
34430: LIST
34431: ST_TO_ADDR
// for i = 1 to pos - 1 do
34432: LD_ADDR_VAR 0 5
34436: PUSH
34437: DOUBLE
34438: LD_INT 1
34440: DEC
34441: ST_TO_ADDR
34442: LD_VAR 0 2
34446: PUSH
34447: LD_INT 1
34449: MINUS
34450: PUSH
34451: FOR_TO
34452: IFFALSE 34497
// begin tmp := tmp [ pos [ i ] ] ;
34454: LD_ADDR_VAR 0 6
34458: PUSH
34459: LD_VAR 0 6
34463: PUSH
34464: LD_VAR 0 2
34468: PUSH
34469: LD_VAR 0 5
34473: ARRAY
34474: ARRAY
34475: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34476: LD_ADDR_VAR 0 7
34480: PUSH
34481: LD_VAR 0 7
34485: PUSH
34486: LD_VAR 0 6
34490: PUSH
34491: EMPTY
34492: LIST
34493: ADD
34494: ST_TO_ADDR
// end ;
34495: GO 34451
34497: POP
34498: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34499: LD_ADDR_VAR 0 6
34503: PUSH
34504: LD_VAR 0 6
34508: PPUSH
34509: LD_VAR 0 2
34513: PUSH
34514: LD_VAR 0 2
34518: ARRAY
34519: PPUSH
34520: LD_VAR 0 3
34524: PPUSH
34525: CALL_OW 1
34529: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34530: LD_ADDR_VAR 0 7
34534: PUSH
34535: LD_VAR 0 7
34539: PPUSH
34540: LD_VAR 0 7
34544: PPUSH
34545: LD_VAR 0 6
34549: PPUSH
34550: CALL_OW 1
34554: ST_TO_ADDR
// for i = s_arr downto 2 do
34555: LD_ADDR_VAR 0 5
34559: PUSH
34560: DOUBLE
34561: LD_VAR 0 7
34565: INC
34566: ST_TO_ADDR
34567: LD_INT 2
34569: PUSH
34570: FOR_DOWNTO
34571: IFFALSE 34655
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34573: LD_ADDR_VAR 0 6
34577: PUSH
34578: LD_VAR 0 7
34582: PUSH
34583: LD_VAR 0 5
34587: PUSH
34588: LD_INT 1
34590: MINUS
34591: ARRAY
34592: PPUSH
34593: LD_VAR 0 2
34597: PUSH
34598: LD_VAR 0 5
34602: PUSH
34603: LD_INT 1
34605: MINUS
34606: ARRAY
34607: PPUSH
34608: LD_VAR 0 7
34612: PUSH
34613: LD_VAR 0 5
34617: ARRAY
34618: PPUSH
34619: CALL_OW 1
34623: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34624: LD_ADDR_VAR 0 7
34628: PUSH
34629: LD_VAR 0 7
34633: PPUSH
34634: LD_VAR 0 5
34638: PUSH
34639: LD_INT 1
34641: MINUS
34642: PPUSH
34643: LD_VAR 0 6
34647: PPUSH
34648: CALL_OW 1
34652: ST_TO_ADDR
// end ;
34653: GO 34570
34655: POP
34656: POP
// result := s_arr [ 1 ] ;
34657: LD_ADDR_VAR 0 4
34661: PUSH
34662: LD_VAR 0 7
34666: PUSH
34667: LD_INT 1
34669: ARRAY
34670: ST_TO_ADDR
// end ; end ;
34671: LD_VAR 0 4
34675: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34676: LD_INT 0
34678: PPUSH
34679: PPUSH
// if not list then
34680: LD_VAR 0 1
34684: NOT
34685: IFFALSE 34689
// exit ;
34687: GO 34780
// i := list [ pos1 ] ;
34689: LD_ADDR_VAR 0 5
34693: PUSH
34694: LD_VAR 0 1
34698: PUSH
34699: LD_VAR 0 2
34703: ARRAY
34704: ST_TO_ADDR
// if not i then
34705: LD_VAR 0 5
34709: NOT
34710: IFFALSE 34714
// exit ;
34712: GO 34780
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34714: LD_ADDR_VAR 0 1
34718: PUSH
34719: LD_VAR 0 1
34723: PPUSH
34724: LD_VAR 0 2
34728: PPUSH
34729: LD_VAR 0 1
34733: PUSH
34734: LD_VAR 0 3
34738: ARRAY
34739: PPUSH
34740: CALL_OW 1
34744: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34745: LD_ADDR_VAR 0 1
34749: PUSH
34750: LD_VAR 0 1
34754: PPUSH
34755: LD_VAR 0 3
34759: PPUSH
34760: LD_VAR 0 5
34764: PPUSH
34765: CALL_OW 1
34769: ST_TO_ADDR
// result := list ;
34770: LD_ADDR_VAR 0 4
34774: PUSH
34775: LD_VAR 0 1
34779: ST_TO_ADDR
// end ;
34780: LD_VAR 0 4
34784: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34785: LD_INT 0
34787: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34788: LD_ADDR_VAR 0 5
34792: PUSH
34793: LD_VAR 0 1
34797: PPUSH
34798: CALL_OW 250
34802: PPUSH
34803: LD_VAR 0 1
34807: PPUSH
34808: CALL_OW 251
34812: PPUSH
34813: LD_VAR 0 2
34817: PPUSH
34818: LD_VAR 0 3
34822: PPUSH
34823: LD_VAR 0 4
34827: PPUSH
34828: CALL 34838 0 5
34832: ST_TO_ADDR
// end ;
34833: LD_VAR 0 5
34837: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34838: LD_INT 0
34840: PPUSH
34841: PPUSH
34842: PPUSH
34843: PPUSH
// if not list then
34844: LD_VAR 0 3
34848: NOT
34849: IFFALSE 34853
// exit ;
34851: GO 35241
// result := [ ] ;
34853: LD_ADDR_VAR 0 6
34857: PUSH
34858: EMPTY
34859: ST_TO_ADDR
// for i in list do
34860: LD_ADDR_VAR 0 7
34864: PUSH
34865: LD_VAR 0 3
34869: PUSH
34870: FOR_IN
34871: IFFALSE 35073
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34873: LD_ADDR_VAR 0 9
34877: PUSH
34878: LD_VAR 0 7
34882: PPUSH
34883: LD_VAR 0 1
34887: PPUSH
34888: LD_VAR 0 2
34892: PPUSH
34893: CALL_OW 297
34897: ST_TO_ADDR
// if not result then
34898: LD_VAR 0 6
34902: NOT
34903: IFFALSE 34929
// result := [ [ i , tmp ] ] else
34905: LD_ADDR_VAR 0 6
34909: PUSH
34910: LD_VAR 0 7
34914: PUSH
34915: LD_VAR 0 9
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: ST_TO_ADDR
34927: GO 35071
// begin if result [ result ] [ 2 ] < tmp then
34929: LD_VAR 0 6
34933: PUSH
34934: LD_VAR 0 6
34938: ARRAY
34939: PUSH
34940: LD_INT 2
34942: ARRAY
34943: PUSH
34944: LD_VAR 0 9
34948: LESS
34949: IFFALSE 34991
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34951: LD_ADDR_VAR 0 6
34955: PUSH
34956: LD_VAR 0 6
34960: PPUSH
34961: LD_VAR 0 6
34965: PUSH
34966: LD_INT 1
34968: PLUS
34969: PPUSH
34970: LD_VAR 0 7
34974: PUSH
34975: LD_VAR 0 9
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PPUSH
34984: CALL_OW 2
34988: ST_TO_ADDR
34989: GO 35071
// for j = 1 to result do
34991: LD_ADDR_VAR 0 8
34995: PUSH
34996: DOUBLE
34997: LD_INT 1
34999: DEC
35000: ST_TO_ADDR
35001: LD_VAR 0 6
35005: PUSH
35006: FOR_TO
35007: IFFALSE 35069
// begin if tmp < result [ j ] [ 2 ] then
35009: LD_VAR 0 9
35013: PUSH
35014: LD_VAR 0 6
35018: PUSH
35019: LD_VAR 0 8
35023: ARRAY
35024: PUSH
35025: LD_INT 2
35027: ARRAY
35028: LESS
35029: IFFALSE 35067
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35031: LD_ADDR_VAR 0 6
35035: PUSH
35036: LD_VAR 0 6
35040: PPUSH
35041: LD_VAR 0 8
35045: PPUSH
35046: LD_VAR 0 7
35050: PUSH
35051: LD_VAR 0 9
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PPUSH
35060: CALL_OW 2
35064: ST_TO_ADDR
// break ;
35065: GO 35069
// end ; end ;
35067: GO 35006
35069: POP
35070: POP
// end ; end ;
35071: GO 34870
35073: POP
35074: POP
// if result and not asc then
35075: LD_VAR 0 6
35079: PUSH
35080: LD_VAR 0 4
35084: NOT
35085: AND
35086: IFFALSE 35161
// begin tmp := result ;
35088: LD_ADDR_VAR 0 9
35092: PUSH
35093: LD_VAR 0 6
35097: ST_TO_ADDR
// for i = tmp downto 1 do
35098: LD_ADDR_VAR 0 7
35102: PUSH
35103: DOUBLE
35104: LD_VAR 0 9
35108: INC
35109: ST_TO_ADDR
35110: LD_INT 1
35112: PUSH
35113: FOR_DOWNTO
35114: IFFALSE 35159
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35116: LD_ADDR_VAR 0 6
35120: PUSH
35121: LD_VAR 0 6
35125: PPUSH
35126: LD_VAR 0 9
35130: PUSH
35131: LD_VAR 0 7
35135: MINUS
35136: PUSH
35137: LD_INT 1
35139: PLUS
35140: PPUSH
35141: LD_VAR 0 9
35145: PUSH
35146: LD_VAR 0 7
35150: ARRAY
35151: PPUSH
35152: CALL_OW 1
35156: ST_TO_ADDR
35157: GO 35113
35159: POP
35160: POP
// end ; tmp := [ ] ;
35161: LD_ADDR_VAR 0 9
35165: PUSH
35166: EMPTY
35167: ST_TO_ADDR
// if mode then
35168: LD_VAR 0 5
35172: IFFALSE 35241
// begin for i = 1 to result do
35174: LD_ADDR_VAR 0 7
35178: PUSH
35179: DOUBLE
35180: LD_INT 1
35182: DEC
35183: ST_TO_ADDR
35184: LD_VAR 0 6
35188: PUSH
35189: FOR_TO
35190: IFFALSE 35229
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35192: LD_ADDR_VAR 0 9
35196: PUSH
35197: LD_VAR 0 9
35201: PPUSH
35202: LD_VAR 0 7
35206: PPUSH
35207: LD_VAR 0 6
35211: PUSH
35212: LD_VAR 0 7
35216: ARRAY
35217: PUSH
35218: LD_INT 1
35220: ARRAY
35221: PPUSH
35222: CALL_OW 1
35226: ST_TO_ADDR
35227: GO 35189
35229: POP
35230: POP
// result := tmp ;
35231: LD_ADDR_VAR 0 6
35235: PUSH
35236: LD_VAR 0 9
35240: ST_TO_ADDR
// end ; end ;
35241: LD_VAR 0 6
35245: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35246: LD_INT 0
35248: PPUSH
35249: PPUSH
35250: PPUSH
35251: PPUSH
35252: PPUSH
35253: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35254: LD_ADDR_VAR 0 5
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: EMPTY
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: ST_TO_ADDR
// if not x or not y then
35276: LD_VAR 0 2
35280: NOT
35281: PUSH
35282: LD_VAR 0 3
35286: NOT
35287: OR
35288: IFFALSE 35292
// exit ;
35290: GO 36944
// if not range then
35292: LD_VAR 0 4
35296: NOT
35297: IFFALSE 35307
// range := 10 ;
35299: LD_ADDR_VAR 0 4
35303: PUSH
35304: LD_INT 10
35306: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35307: LD_ADDR_VAR 0 8
35311: PUSH
35312: LD_INT 81
35314: PUSH
35315: LD_VAR 0 1
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 92
35326: PUSH
35327: LD_VAR 0 2
35331: PUSH
35332: LD_VAR 0 3
35336: PUSH
35337: LD_VAR 0 4
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 3
35350: PUSH
35351: LD_INT 21
35353: PUSH
35354: LD_INT 3
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: PPUSH
35370: CALL_OW 69
35374: ST_TO_ADDR
// if not tmp then
35375: LD_VAR 0 8
35379: NOT
35380: IFFALSE 35384
// exit ;
35382: GO 36944
// for i in tmp do
35384: LD_ADDR_VAR 0 6
35388: PUSH
35389: LD_VAR 0 8
35393: PUSH
35394: FOR_IN
35395: IFFALSE 36919
// begin points := [ 0 , 0 , 0 ] ;
35397: LD_ADDR_VAR 0 9
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
// bpoints := 1 ;
35416: LD_ADDR_VAR 0 10
35420: PUSH
35421: LD_INT 1
35423: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35424: LD_VAR 0 6
35428: PPUSH
35429: CALL_OW 247
35433: PUSH
35434: LD_INT 1
35436: DOUBLE
35437: EQUAL
35438: IFTRUE 35442
35440: GO 36020
35442: POP
// begin if GetClass ( i ) = 1 then
35443: LD_VAR 0 6
35447: PPUSH
35448: CALL_OW 257
35452: PUSH
35453: LD_INT 1
35455: EQUAL
35456: IFFALSE 35477
// points := [ 10 , 5 , 3 ] ;
35458: LD_ADDR_VAR 0 9
35462: PUSH
35463: LD_INT 10
35465: PUSH
35466: LD_INT 5
35468: PUSH
35469: LD_INT 3
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35477: LD_VAR 0 6
35481: PPUSH
35482: CALL_OW 257
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 3
35492: PUSH
35493: LD_INT 4
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: LIST
35500: IN
35501: IFFALSE 35522
// points := [ 3 , 2 , 1 ] ;
35503: LD_ADDR_VAR 0 9
35507: PUSH
35508: LD_INT 3
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35522: LD_VAR 0 6
35526: PPUSH
35527: CALL_OW 257
35531: PUSH
35532: LD_INT 5
35534: EQUAL
35535: IFFALSE 35556
// points := [ 130 , 5 , 2 ] ;
35537: LD_ADDR_VAR 0 9
35541: PUSH
35542: LD_INT 130
35544: PUSH
35545: LD_INT 5
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35556: LD_VAR 0 6
35560: PPUSH
35561: CALL_OW 257
35565: PUSH
35566: LD_INT 8
35568: EQUAL
35569: IFFALSE 35590
// points := [ 35 , 35 , 30 ] ;
35571: LD_ADDR_VAR 0 9
35575: PUSH
35576: LD_INT 35
35578: PUSH
35579: LD_INT 35
35581: PUSH
35582: LD_INT 30
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: LIST
35589: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35590: LD_VAR 0 6
35594: PPUSH
35595: CALL_OW 257
35599: PUSH
35600: LD_INT 9
35602: EQUAL
35603: IFFALSE 35624
// points := [ 20 , 55 , 40 ] ;
35605: LD_ADDR_VAR 0 9
35609: PUSH
35610: LD_INT 20
35612: PUSH
35613: LD_INT 55
35615: PUSH
35616: LD_INT 40
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35624: LD_VAR 0 6
35628: PPUSH
35629: CALL_OW 257
35633: PUSH
35634: LD_INT 12
35636: PUSH
35637: LD_INT 16
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: IN
35644: IFFALSE 35665
// points := [ 5 , 3 , 2 ] ;
35646: LD_ADDR_VAR 0 9
35650: PUSH
35651: LD_INT 5
35653: PUSH
35654: LD_INT 3
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: LIST
35664: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35665: LD_VAR 0 6
35669: PPUSH
35670: CALL_OW 257
35674: PUSH
35675: LD_INT 17
35677: EQUAL
35678: IFFALSE 35699
// points := [ 100 , 50 , 75 ] ;
35680: LD_ADDR_VAR 0 9
35684: PUSH
35685: LD_INT 100
35687: PUSH
35688: LD_INT 50
35690: PUSH
35691: LD_INT 75
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: LIST
35698: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35699: LD_VAR 0 6
35703: PPUSH
35704: CALL_OW 257
35708: PUSH
35709: LD_INT 15
35711: EQUAL
35712: IFFALSE 35733
// points := [ 10 , 5 , 3 ] ;
35714: LD_ADDR_VAR 0 9
35718: PUSH
35719: LD_INT 10
35721: PUSH
35722: LD_INT 5
35724: PUSH
35725: LD_INT 3
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35733: LD_VAR 0 6
35737: PPUSH
35738: CALL_OW 257
35742: PUSH
35743: LD_INT 14
35745: EQUAL
35746: IFFALSE 35767
// points := [ 10 , 0 , 0 ] ;
35748: LD_ADDR_VAR 0 9
35752: PUSH
35753: LD_INT 10
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35767: LD_VAR 0 6
35771: PPUSH
35772: CALL_OW 257
35776: PUSH
35777: LD_INT 11
35779: EQUAL
35780: IFFALSE 35801
// points := [ 30 , 10 , 5 ] ;
35782: LD_ADDR_VAR 0 9
35786: PUSH
35787: LD_INT 30
35789: PUSH
35790: LD_INT 10
35792: PUSH
35793: LD_INT 5
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35801: LD_VAR 0 1
35805: PPUSH
35806: LD_INT 5
35808: PPUSH
35809: CALL_OW 321
35813: PUSH
35814: LD_INT 2
35816: EQUAL
35817: IFFALSE 35834
// bpoints := bpoints * 1.8 ;
35819: LD_ADDR_VAR 0 10
35823: PUSH
35824: LD_VAR 0 10
35828: PUSH
35829: LD_REAL  1.80000000000000E+0000
35832: MUL
35833: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35834: LD_VAR 0 6
35838: PPUSH
35839: CALL_OW 257
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: LD_INT 3
35852: PUSH
35853: LD_INT 4
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: IN
35862: PUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: LD_INT 51
35870: PPUSH
35871: CALL_OW 321
35875: PUSH
35876: LD_INT 2
35878: EQUAL
35879: AND
35880: IFFALSE 35897
// bpoints := bpoints * 1.2 ;
35882: LD_ADDR_VAR 0 10
35886: PUSH
35887: LD_VAR 0 10
35891: PUSH
35892: LD_REAL  1.20000000000000E+0000
35895: MUL
35896: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35897: LD_VAR 0 6
35901: PPUSH
35902: CALL_OW 257
35906: PUSH
35907: LD_INT 5
35909: PUSH
35910: LD_INT 7
35912: PUSH
35913: LD_INT 9
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: IN
35921: PUSH
35922: LD_VAR 0 1
35926: PPUSH
35927: LD_INT 52
35929: PPUSH
35930: CALL_OW 321
35934: PUSH
35935: LD_INT 2
35937: EQUAL
35938: AND
35939: IFFALSE 35956
// bpoints := bpoints * 1.5 ;
35941: LD_ADDR_VAR 0 10
35945: PUSH
35946: LD_VAR 0 10
35950: PUSH
35951: LD_REAL  1.50000000000000E+0000
35954: MUL
35955: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35956: LD_VAR 0 1
35960: PPUSH
35961: LD_INT 66
35963: PPUSH
35964: CALL_OW 321
35968: PUSH
35969: LD_INT 2
35971: EQUAL
35972: IFFALSE 35989
// bpoints := bpoints * 1.1 ;
35974: LD_ADDR_VAR 0 10
35978: PUSH
35979: LD_VAR 0 10
35983: PUSH
35984: LD_REAL  1.10000000000000E+0000
35987: MUL
35988: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35989: LD_ADDR_VAR 0 10
35993: PUSH
35994: LD_VAR 0 10
35998: PUSH
35999: LD_VAR 0 6
36003: PPUSH
36004: LD_INT 1
36006: PPUSH
36007: CALL_OW 259
36011: PUSH
36012: LD_REAL  1.15000000000000E+0000
36015: MUL
36016: MUL
36017: ST_TO_ADDR
// end ; unit_vehicle :
36018: GO 36848
36020: LD_INT 2
36022: DOUBLE
36023: EQUAL
36024: IFTRUE 36028
36026: GO 36836
36028: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36029: LD_VAR 0 6
36033: PPUSH
36034: CALL_OW 264
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: LD_INT 42
36044: PUSH
36045: LD_INT 24
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: LIST
36052: IN
36053: IFFALSE 36074
// points := [ 25 , 5 , 3 ] ;
36055: LD_ADDR_VAR 0 9
36059: PUSH
36060: LD_INT 25
36062: PUSH
36063: LD_INT 5
36065: PUSH
36066: LD_INT 3
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: LIST
36073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36074: LD_VAR 0 6
36078: PPUSH
36079: CALL_OW 264
36083: PUSH
36084: LD_INT 4
36086: PUSH
36087: LD_INT 43
36089: PUSH
36090: LD_INT 25
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: IN
36098: IFFALSE 36119
// points := [ 40 , 15 , 5 ] ;
36100: LD_ADDR_VAR 0 9
36104: PUSH
36105: LD_INT 40
36107: PUSH
36108: LD_INT 15
36110: PUSH
36111: LD_INT 5
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36119: LD_VAR 0 6
36123: PPUSH
36124: CALL_OW 264
36128: PUSH
36129: LD_INT 3
36131: PUSH
36132: LD_INT 23
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: IN
36139: IFFALSE 36160
// points := [ 7 , 25 , 8 ] ;
36141: LD_ADDR_VAR 0 9
36145: PUSH
36146: LD_INT 7
36148: PUSH
36149: LD_INT 25
36151: PUSH
36152: LD_INT 8
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36160: LD_VAR 0 6
36164: PPUSH
36165: CALL_OW 264
36169: PUSH
36170: LD_INT 5
36172: PUSH
36173: LD_INT 27
36175: PUSH
36176: LD_INT 44
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: IN
36184: IFFALSE 36205
// points := [ 14 , 50 , 16 ] ;
36186: LD_ADDR_VAR 0 9
36190: PUSH
36191: LD_INT 14
36193: PUSH
36194: LD_INT 50
36196: PUSH
36197: LD_INT 16
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36205: LD_VAR 0 6
36209: PPUSH
36210: CALL_OW 264
36214: PUSH
36215: LD_INT 6
36217: PUSH
36218: LD_INT 46
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: IN
36225: IFFALSE 36246
// points := [ 32 , 120 , 70 ] ;
36227: LD_ADDR_VAR 0 9
36231: PUSH
36232: LD_INT 32
36234: PUSH
36235: LD_INT 120
36237: PUSH
36238: LD_INT 70
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36246: LD_VAR 0 6
36250: PPUSH
36251: CALL_OW 264
36255: PUSH
36256: LD_INT 7
36258: PUSH
36259: LD_INT 28
36261: PUSH
36262: LD_INT 45
36264: PUSH
36265: LD_EXP 26
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: IN
36276: IFFALSE 36297
// points := [ 35 , 20 , 45 ] ;
36278: LD_ADDR_VAR 0 9
36282: PUSH
36283: LD_INT 35
36285: PUSH
36286: LD_INT 20
36288: PUSH
36289: LD_INT 45
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36297: LD_VAR 0 6
36301: PPUSH
36302: CALL_OW 264
36306: PUSH
36307: LD_INT 47
36309: PUSH
36310: EMPTY
36311: LIST
36312: IN
36313: IFFALSE 36334
// points := [ 67 , 45 , 75 ] ;
36315: LD_ADDR_VAR 0 9
36319: PUSH
36320: LD_INT 67
36322: PUSH
36323: LD_INT 45
36325: PUSH
36326: LD_INT 75
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36334: LD_VAR 0 6
36338: PPUSH
36339: CALL_OW 264
36343: PUSH
36344: LD_INT 26
36346: PUSH
36347: EMPTY
36348: LIST
36349: IN
36350: IFFALSE 36371
// points := [ 120 , 30 , 80 ] ;
36352: LD_ADDR_VAR 0 9
36356: PUSH
36357: LD_INT 120
36359: PUSH
36360: LD_INT 30
36362: PUSH
36363: LD_INT 80
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36371: LD_VAR 0 6
36375: PPUSH
36376: CALL_OW 264
36380: PUSH
36381: LD_INT 22
36383: PUSH
36384: EMPTY
36385: LIST
36386: IN
36387: IFFALSE 36408
// points := [ 40 , 1 , 1 ] ;
36389: LD_ADDR_VAR 0 9
36393: PUSH
36394: LD_INT 40
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36408: LD_VAR 0 6
36412: PPUSH
36413: CALL_OW 264
36417: PUSH
36418: LD_INT 29
36420: PUSH
36421: EMPTY
36422: LIST
36423: IN
36424: IFFALSE 36445
// points := [ 70 , 200 , 400 ] ;
36426: LD_ADDR_VAR 0 9
36430: PUSH
36431: LD_INT 70
36433: PUSH
36434: LD_INT 200
36436: PUSH
36437: LD_INT 400
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36445: LD_VAR 0 6
36449: PPUSH
36450: CALL_OW 264
36454: PUSH
36455: LD_INT 14
36457: PUSH
36458: LD_INT 53
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: IN
36465: IFFALSE 36486
// points := [ 40 , 10 , 20 ] ;
36467: LD_ADDR_VAR 0 9
36471: PUSH
36472: LD_INT 40
36474: PUSH
36475: LD_INT 10
36477: PUSH
36478: LD_INT 20
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36486: LD_VAR 0 6
36490: PPUSH
36491: CALL_OW 264
36495: PUSH
36496: LD_INT 9
36498: PUSH
36499: EMPTY
36500: LIST
36501: IN
36502: IFFALSE 36523
// points := [ 5 , 70 , 20 ] ;
36504: LD_ADDR_VAR 0 9
36508: PUSH
36509: LD_INT 5
36511: PUSH
36512: LD_INT 70
36514: PUSH
36515: LD_INT 20
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: LIST
36522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36523: LD_VAR 0 6
36527: PPUSH
36528: CALL_OW 264
36532: PUSH
36533: LD_INT 10
36535: PUSH
36536: EMPTY
36537: LIST
36538: IN
36539: IFFALSE 36560
// points := [ 35 , 110 , 70 ] ;
36541: LD_ADDR_VAR 0 9
36545: PUSH
36546: LD_INT 35
36548: PUSH
36549: LD_INT 110
36551: PUSH
36552: LD_INT 70
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: LIST
36559: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36560: LD_VAR 0 6
36564: PPUSH
36565: CALL_OW 265
36569: PUSH
36570: LD_INT 25
36572: EQUAL
36573: IFFALSE 36594
// points := [ 80 , 65 , 100 ] ;
36575: LD_ADDR_VAR 0 9
36579: PUSH
36580: LD_INT 80
36582: PUSH
36583: LD_INT 65
36585: PUSH
36586: LD_INT 100
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36594: LD_VAR 0 6
36598: PPUSH
36599: CALL_OW 263
36603: PUSH
36604: LD_INT 1
36606: EQUAL
36607: IFFALSE 36642
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36609: LD_ADDR_VAR 0 10
36613: PUSH
36614: LD_VAR 0 10
36618: PUSH
36619: LD_VAR 0 6
36623: PPUSH
36624: CALL_OW 311
36628: PPUSH
36629: LD_INT 3
36631: PPUSH
36632: CALL_OW 259
36636: PUSH
36637: LD_INT 4
36639: MUL
36640: MUL
36641: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36642: LD_VAR 0 6
36646: PPUSH
36647: CALL_OW 263
36651: PUSH
36652: LD_INT 2
36654: EQUAL
36655: IFFALSE 36706
// begin j := IsControledBy ( i ) ;
36657: LD_ADDR_VAR 0 7
36661: PUSH
36662: LD_VAR 0 6
36666: PPUSH
36667: CALL_OW 312
36671: ST_TO_ADDR
// if j then
36672: LD_VAR 0 7
36676: IFFALSE 36706
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36678: LD_ADDR_VAR 0 10
36682: PUSH
36683: LD_VAR 0 10
36687: PUSH
36688: LD_VAR 0 7
36692: PPUSH
36693: LD_INT 3
36695: PPUSH
36696: CALL_OW 259
36700: PUSH
36701: LD_INT 3
36703: MUL
36704: MUL
36705: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36706: LD_VAR 0 6
36710: PPUSH
36711: CALL_OW 264
36715: PUSH
36716: LD_INT 5
36718: PUSH
36719: LD_INT 6
36721: PUSH
36722: LD_INT 46
36724: PUSH
36725: LD_INT 44
36727: PUSH
36728: LD_INT 47
36730: PUSH
36731: LD_INT 45
36733: PUSH
36734: LD_INT 28
36736: PUSH
36737: LD_INT 7
36739: PUSH
36740: LD_INT 27
36742: PUSH
36743: LD_INT 29
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: IN
36758: PUSH
36759: LD_VAR 0 1
36763: PPUSH
36764: LD_INT 52
36766: PPUSH
36767: CALL_OW 321
36771: PUSH
36772: LD_INT 2
36774: EQUAL
36775: AND
36776: IFFALSE 36793
// bpoints := bpoints * 1.2 ;
36778: LD_ADDR_VAR 0 10
36782: PUSH
36783: LD_VAR 0 10
36787: PUSH
36788: LD_REAL  1.20000000000000E+0000
36791: MUL
36792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36793: LD_VAR 0 6
36797: PPUSH
36798: CALL_OW 264
36802: PUSH
36803: LD_INT 6
36805: PUSH
36806: LD_INT 46
36808: PUSH
36809: LD_INT 47
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: IN
36817: IFFALSE 36834
// bpoints := bpoints * 1.2 ;
36819: LD_ADDR_VAR 0 10
36823: PUSH
36824: LD_VAR 0 10
36828: PUSH
36829: LD_REAL  1.20000000000000E+0000
36832: MUL
36833: ST_TO_ADDR
// end ; unit_building :
36834: GO 36848
36836: LD_INT 3
36838: DOUBLE
36839: EQUAL
36840: IFTRUE 36844
36842: GO 36847
36844: POP
// ; end ;
36845: GO 36848
36847: POP
// for j = 1 to 3 do
36848: LD_ADDR_VAR 0 7
36852: PUSH
36853: DOUBLE
36854: LD_INT 1
36856: DEC
36857: ST_TO_ADDR
36858: LD_INT 3
36860: PUSH
36861: FOR_TO
36862: IFFALSE 36915
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36864: LD_ADDR_VAR 0 5
36868: PUSH
36869: LD_VAR 0 5
36873: PPUSH
36874: LD_VAR 0 7
36878: PPUSH
36879: LD_VAR 0 5
36883: PUSH
36884: LD_VAR 0 7
36888: ARRAY
36889: PUSH
36890: LD_VAR 0 9
36894: PUSH
36895: LD_VAR 0 7
36899: ARRAY
36900: PUSH
36901: LD_VAR 0 10
36905: MUL
36906: PLUS
36907: PPUSH
36908: CALL_OW 1
36912: ST_TO_ADDR
36913: GO 36861
36915: POP
36916: POP
// end ;
36917: GO 35394
36919: POP
36920: POP
// result := Replace ( result , 4 , tmp ) ;
36921: LD_ADDR_VAR 0 5
36925: PUSH
36926: LD_VAR 0 5
36930: PPUSH
36931: LD_INT 4
36933: PPUSH
36934: LD_VAR 0 8
36938: PPUSH
36939: CALL_OW 1
36943: ST_TO_ADDR
// end ;
36944: LD_VAR 0 5
36948: RET
// export function DangerAtRange ( unit , range ) ; begin
36949: LD_INT 0
36951: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36952: LD_ADDR_VAR 0 3
36956: PUSH
36957: LD_VAR 0 1
36961: PPUSH
36962: CALL_OW 255
36966: PPUSH
36967: LD_VAR 0 1
36971: PPUSH
36972: CALL_OW 250
36976: PPUSH
36977: LD_VAR 0 1
36981: PPUSH
36982: CALL_OW 251
36986: PPUSH
36987: LD_VAR 0 2
36991: PPUSH
36992: CALL 35246 0 4
36996: ST_TO_ADDR
// end ;
36997: LD_VAR 0 3
37001: RET
// export function DangerInArea ( side , area ) ; begin
37002: LD_INT 0
37004: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37005: LD_ADDR_VAR 0 3
37009: PUSH
37010: LD_VAR 0 2
37014: PPUSH
37015: LD_INT 81
37017: PUSH
37018: LD_VAR 0 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PPUSH
37027: CALL_OW 70
37031: ST_TO_ADDR
// end ;
37032: LD_VAR 0 3
37036: RET
// export function IsExtension ( b ) ; begin
37037: LD_INT 0
37039: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37040: LD_ADDR_VAR 0 2
37044: PUSH
37045: LD_VAR 0 1
37049: PUSH
37050: LD_INT 23
37052: PUSH
37053: LD_INT 20
37055: PUSH
37056: LD_INT 22
37058: PUSH
37059: LD_INT 17
37061: PUSH
37062: LD_INT 24
37064: PUSH
37065: LD_INT 21
37067: PUSH
37068: LD_INT 19
37070: PUSH
37071: LD_INT 16
37073: PUSH
37074: LD_INT 25
37076: PUSH
37077: LD_INT 18
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: IN
37092: ST_TO_ADDR
// end ;
37093: LD_VAR 0 2
37097: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37098: LD_INT 0
37100: PPUSH
37101: PPUSH
37102: PPUSH
// result := [ ] ;
37103: LD_ADDR_VAR 0 4
37107: PUSH
37108: EMPTY
37109: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37110: LD_ADDR_VAR 0 5
37114: PUSH
37115: LD_VAR 0 2
37119: PPUSH
37120: LD_INT 21
37122: PUSH
37123: LD_INT 3
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PPUSH
37130: CALL_OW 70
37134: ST_TO_ADDR
// if not tmp then
37135: LD_VAR 0 5
37139: NOT
37140: IFFALSE 37144
// exit ;
37142: GO 37208
// if checkLink then
37144: LD_VAR 0 3
37148: IFFALSE 37198
// begin for i in tmp do
37150: LD_ADDR_VAR 0 6
37154: PUSH
37155: LD_VAR 0 5
37159: PUSH
37160: FOR_IN
37161: IFFALSE 37196
// if GetBase ( i ) <> base then
37163: LD_VAR 0 6
37167: PPUSH
37168: CALL_OW 274
37172: PUSH
37173: LD_VAR 0 1
37177: NONEQUAL
37178: IFFALSE 37194
// ComLinkToBase ( base , i ) ;
37180: LD_VAR 0 1
37184: PPUSH
37185: LD_VAR 0 6
37189: PPUSH
37190: CALL_OW 169
37194: GO 37160
37196: POP
37197: POP
// end ; result := tmp ;
37198: LD_ADDR_VAR 0 4
37202: PUSH
37203: LD_VAR 0 5
37207: ST_TO_ADDR
// end ;
37208: LD_VAR 0 4
37212: RET
// export function ComComplete ( units , b ) ; var i ; begin
37213: LD_INT 0
37215: PPUSH
37216: PPUSH
// if not units then
37217: LD_VAR 0 1
37221: NOT
37222: IFFALSE 37226
// exit ;
37224: GO 37316
// for i in units do
37226: LD_ADDR_VAR 0 4
37230: PUSH
37231: LD_VAR 0 1
37235: PUSH
37236: FOR_IN
37237: IFFALSE 37314
// if BuildingStatus ( b ) = bs_build then
37239: LD_VAR 0 2
37243: PPUSH
37244: CALL_OW 461
37248: PUSH
37249: LD_INT 1
37251: EQUAL
37252: IFFALSE 37312
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37254: LD_VAR 0 4
37258: PPUSH
37259: LD_STRING h
37261: PUSH
37262: LD_VAR 0 2
37266: PPUSH
37267: CALL_OW 250
37271: PUSH
37272: LD_VAR 0 2
37276: PPUSH
37277: CALL_OW 251
37281: PUSH
37282: LD_VAR 0 2
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: PPUSH
37308: CALL_OW 446
37312: GO 37236
37314: POP
37315: POP
// end ;
37316: LD_VAR 0 3
37320: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37321: LD_INT 0
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37329: LD_VAR 0 1
37333: NOT
37334: PUSH
37335: LD_VAR 0 1
37339: PPUSH
37340: CALL_OW 263
37344: PUSH
37345: LD_INT 2
37347: NONEQUAL
37348: OR
37349: IFFALSE 37353
// exit ;
37351: GO 37669
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37353: LD_ADDR_VAR 0 6
37357: PUSH
37358: LD_INT 22
37360: PUSH
37361: LD_VAR 0 1
37365: PPUSH
37366: CALL_OW 255
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: LD_INT 30
37380: PUSH
37381: LD_INT 36
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 34
37390: PUSH
37391: LD_INT 31
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PPUSH
37407: CALL_OW 69
37411: ST_TO_ADDR
// if not tmp then
37412: LD_VAR 0 6
37416: NOT
37417: IFFALSE 37421
// exit ;
37419: GO 37669
// result := [ ] ;
37421: LD_ADDR_VAR 0 2
37425: PUSH
37426: EMPTY
37427: ST_TO_ADDR
// for i in tmp do
37428: LD_ADDR_VAR 0 3
37432: PUSH
37433: LD_VAR 0 6
37437: PUSH
37438: FOR_IN
37439: IFFALSE 37510
// begin t := UnitsInside ( i ) ;
37441: LD_ADDR_VAR 0 4
37445: PUSH
37446: LD_VAR 0 3
37450: PPUSH
37451: CALL_OW 313
37455: ST_TO_ADDR
// if t then
37456: LD_VAR 0 4
37460: IFFALSE 37508
// for j in t do
37462: LD_ADDR_VAR 0 7
37466: PUSH
37467: LD_VAR 0 4
37471: PUSH
37472: FOR_IN
37473: IFFALSE 37506
// result := Replace ( result , result + 1 , j ) ;
37475: LD_ADDR_VAR 0 2
37479: PUSH
37480: LD_VAR 0 2
37484: PPUSH
37485: LD_VAR 0 2
37489: PUSH
37490: LD_INT 1
37492: PLUS
37493: PPUSH
37494: LD_VAR 0 7
37498: PPUSH
37499: CALL_OW 1
37503: ST_TO_ADDR
37504: GO 37472
37506: POP
37507: POP
// end ;
37508: GO 37438
37510: POP
37511: POP
// if not result then
37512: LD_VAR 0 2
37516: NOT
37517: IFFALSE 37521
// exit ;
37519: GO 37669
// mech := result [ 1 ] ;
37521: LD_ADDR_VAR 0 5
37525: PUSH
37526: LD_VAR 0 2
37530: PUSH
37531: LD_INT 1
37533: ARRAY
37534: ST_TO_ADDR
// if result > 1 then
37535: LD_VAR 0 2
37539: PUSH
37540: LD_INT 1
37542: GREATER
37543: IFFALSE 37655
// begin for i = 2 to result do
37545: LD_ADDR_VAR 0 3
37549: PUSH
37550: DOUBLE
37551: LD_INT 2
37553: DEC
37554: ST_TO_ADDR
37555: LD_VAR 0 2
37559: PUSH
37560: FOR_TO
37561: IFFALSE 37653
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37563: LD_ADDR_VAR 0 4
37567: PUSH
37568: LD_VAR 0 2
37572: PUSH
37573: LD_VAR 0 3
37577: ARRAY
37578: PPUSH
37579: LD_INT 3
37581: PPUSH
37582: CALL_OW 259
37586: PUSH
37587: LD_VAR 0 2
37591: PUSH
37592: LD_VAR 0 3
37596: ARRAY
37597: PPUSH
37598: CALL_OW 432
37602: MINUS
37603: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37604: LD_VAR 0 4
37608: PUSH
37609: LD_VAR 0 5
37613: PPUSH
37614: LD_INT 3
37616: PPUSH
37617: CALL_OW 259
37621: PUSH
37622: LD_VAR 0 5
37626: PPUSH
37627: CALL_OW 432
37631: MINUS
37632: GREATEREQUAL
37633: IFFALSE 37651
// mech := result [ i ] ;
37635: LD_ADDR_VAR 0 5
37639: PUSH
37640: LD_VAR 0 2
37644: PUSH
37645: LD_VAR 0 3
37649: ARRAY
37650: ST_TO_ADDR
// end ;
37651: GO 37560
37653: POP
37654: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37655: LD_VAR 0 1
37659: PPUSH
37660: LD_VAR 0 5
37664: PPUSH
37665: CALL_OW 135
// end ;
37669: LD_VAR 0 2
37673: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37674: LD_INT 0
37676: PPUSH
37677: PPUSH
37678: PPUSH
37679: PPUSH
37680: PPUSH
37681: PPUSH
37682: PPUSH
37683: PPUSH
37684: PPUSH
37685: PPUSH
37686: PPUSH
37687: PPUSH
37688: PPUSH
// result := [ ] ;
37689: LD_ADDR_VAR 0 7
37693: PUSH
37694: EMPTY
37695: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37696: LD_VAR 0 1
37700: PPUSH
37701: CALL_OW 266
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: IN
37716: NOT
37717: IFFALSE 37721
// exit ;
37719: GO 39355
// if name then
37721: LD_VAR 0 3
37725: IFFALSE 37741
// SetBName ( base_dep , name ) ;
37727: LD_VAR 0 1
37731: PPUSH
37732: LD_VAR 0 3
37736: PPUSH
37737: CALL_OW 500
// base := GetBase ( base_dep ) ;
37741: LD_ADDR_VAR 0 15
37745: PUSH
37746: LD_VAR 0 1
37750: PPUSH
37751: CALL_OW 274
37755: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37756: LD_ADDR_VAR 0 16
37760: PUSH
37761: LD_VAR 0 1
37765: PPUSH
37766: CALL_OW 255
37770: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37771: LD_ADDR_VAR 0 17
37775: PUSH
37776: LD_VAR 0 1
37780: PPUSH
37781: CALL_OW 248
37785: ST_TO_ADDR
// if sources then
37786: LD_VAR 0 5
37790: IFFALSE 37837
// for i = 1 to 3 do
37792: LD_ADDR_VAR 0 8
37796: PUSH
37797: DOUBLE
37798: LD_INT 1
37800: DEC
37801: ST_TO_ADDR
37802: LD_INT 3
37804: PUSH
37805: FOR_TO
37806: IFFALSE 37835
// AddResourceType ( base , i , sources [ i ] ) ;
37808: LD_VAR 0 15
37812: PPUSH
37813: LD_VAR 0 8
37817: PPUSH
37818: LD_VAR 0 5
37822: PUSH
37823: LD_VAR 0 8
37827: ARRAY
37828: PPUSH
37829: CALL_OW 276
37833: GO 37805
37835: POP
37836: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37837: LD_ADDR_VAR 0 18
37841: PUSH
37842: LD_VAR 0 15
37846: PPUSH
37847: LD_VAR 0 2
37851: PPUSH
37852: LD_INT 1
37854: PPUSH
37855: CALL 37098 0 3
37859: ST_TO_ADDR
// InitHc ;
37860: CALL_OW 19
// InitUc ;
37864: CALL_OW 18
// uc_side := side ;
37868: LD_ADDR_OWVAR 20
37872: PUSH
37873: LD_VAR 0 16
37877: ST_TO_ADDR
// uc_nation := nation ;
37878: LD_ADDR_OWVAR 21
37882: PUSH
37883: LD_VAR 0 17
37887: ST_TO_ADDR
// if buildings then
37888: LD_VAR 0 18
37892: IFFALSE 39214
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37894: LD_ADDR_VAR 0 19
37898: PUSH
37899: LD_VAR 0 18
37903: PPUSH
37904: LD_INT 2
37906: PUSH
37907: LD_INT 30
37909: PUSH
37910: LD_INT 29
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 30
37919: PUSH
37920: LD_INT 30
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: LIST
37931: PPUSH
37932: CALL_OW 72
37936: ST_TO_ADDR
// if tmp then
37937: LD_VAR 0 19
37941: IFFALSE 37989
// for i in tmp do
37943: LD_ADDR_VAR 0 8
37947: PUSH
37948: LD_VAR 0 19
37952: PUSH
37953: FOR_IN
37954: IFFALSE 37987
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37956: LD_VAR 0 8
37960: PPUSH
37961: CALL_OW 250
37965: PPUSH
37966: LD_VAR 0 8
37970: PPUSH
37971: CALL_OW 251
37975: PPUSH
37976: LD_VAR 0 16
37980: PPUSH
37981: CALL_OW 441
37985: GO 37953
37987: POP
37988: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37989: LD_VAR 0 18
37993: PPUSH
37994: LD_INT 2
37996: PUSH
37997: LD_INT 30
37999: PUSH
38000: LD_INT 32
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 30
38009: PUSH
38010: LD_INT 33
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: PPUSH
38022: CALL_OW 72
38026: IFFALSE 38114
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38028: LD_ADDR_VAR 0 8
38032: PUSH
38033: LD_VAR 0 18
38037: PPUSH
38038: LD_INT 2
38040: PUSH
38041: LD_INT 30
38043: PUSH
38044: LD_INT 32
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 30
38053: PUSH
38054: LD_INT 33
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: PPUSH
38066: CALL_OW 72
38070: PUSH
38071: FOR_IN
38072: IFFALSE 38112
// begin if not GetBWeapon ( i ) then
38074: LD_VAR 0 8
38078: PPUSH
38079: CALL_OW 269
38083: NOT
38084: IFFALSE 38110
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38086: LD_VAR 0 8
38090: PPUSH
38091: LD_VAR 0 8
38095: PPUSH
38096: LD_VAR 0 2
38100: PPUSH
38101: CALL 39360 0 2
38105: PPUSH
38106: CALL_OW 431
// end ;
38110: GO 38071
38112: POP
38113: POP
// end ; for i = 1 to personel do
38114: LD_ADDR_VAR 0 8
38118: PUSH
38119: DOUBLE
38120: LD_INT 1
38122: DEC
38123: ST_TO_ADDR
38124: LD_VAR 0 6
38128: PUSH
38129: FOR_TO
38130: IFFALSE 39194
// begin if i > 4 then
38132: LD_VAR 0 8
38136: PUSH
38137: LD_INT 4
38139: GREATER
38140: IFFALSE 38144
// break ;
38142: GO 39194
// case i of 1 :
38144: LD_VAR 0 8
38148: PUSH
38149: LD_INT 1
38151: DOUBLE
38152: EQUAL
38153: IFTRUE 38157
38155: GO 38237
38157: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38158: LD_ADDR_VAR 0 12
38162: PUSH
38163: LD_VAR 0 18
38167: PPUSH
38168: LD_INT 22
38170: PUSH
38171: LD_VAR 0 16
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 58
38182: PUSH
38183: EMPTY
38184: LIST
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: LD_INT 30
38191: PUSH
38192: LD_INT 32
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 30
38201: PUSH
38202: LD_INT 4
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 30
38211: PUSH
38212: LD_INT 5
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: PPUSH
38230: CALL_OW 72
38234: ST_TO_ADDR
38235: GO 38459
38237: LD_INT 2
38239: DOUBLE
38240: EQUAL
38241: IFTRUE 38245
38243: GO 38307
38245: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38246: LD_ADDR_VAR 0 12
38250: PUSH
38251: LD_VAR 0 18
38255: PPUSH
38256: LD_INT 22
38258: PUSH
38259: LD_VAR 0 16
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: LD_INT 30
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 30
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PPUSH
38300: CALL_OW 72
38304: ST_TO_ADDR
38305: GO 38459
38307: LD_INT 3
38309: DOUBLE
38310: EQUAL
38311: IFTRUE 38315
38313: GO 38377
38315: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38316: LD_ADDR_VAR 0 12
38320: PUSH
38321: LD_VAR 0 18
38325: PPUSH
38326: LD_INT 22
38328: PUSH
38329: LD_VAR 0 16
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: LD_INT 30
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 30
38353: PUSH
38354: LD_INT 3
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: LIST
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PPUSH
38370: CALL_OW 72
38374: ST_TO_ADDR
38375: GO 38459
38377: LD_INT 4
38379: DOUBLE
38380: EQUAL
38381: IFTRUE 38385
38383: GO 38458
38385: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38386: LD_ADDR_VAR 0 12
38390: PUSH
38391: LD_VAR 0 18
38395: PPUSH
38396: LD_INT 22
38398: PUSH
38399: LD_VAR 0 16
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: LD_INT 30
38413: PUSH
38414: LD_INT 6
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 30
38423: PUSH
38424: LD_INT 7
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 30
38433: PUSH
38434: LD_INT 8
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PPUSH
38451: CALL_OW 72
38455: ST_TO_ADDR
38456: GO 38459
38458: POP
// if i = 1 then
38459: LD_VAR 0 8
38463: PUSH
38464: LD_INT 1
38466: EQUAL
38467: IFFALSE 38578
// begin tmp := [ ] ;
38469: LD_ADDR_VAR 0 19
38473: PUSH
38474: EMPTY
38475: ST_TO_ADDR
// for j in f do
38476: LD_ADDR_VAR 0 9
38480: PUSH
38481: LD_VAR 0 12
38485: PUSH
38486: FOR_IN
38487: IFFALSE 38560
// if GetBType ( j ) = b_bunker then
38489: LD_VAR 0 9
38493: PPUSH
38494: CALL_OW 266
38498: PUSH
38499: LD_INT 32
38501: EQUAL
38502: IFFALSE 38529
// tmp := Insert ( tmp , 1 , j ) else
38504: LD_ADDR_VAR 0 19
38508: PUSH
38509: LD_VAR 0 19
38513: PPUSH
38514: LD_INT 1
38516: PPUSH
38517: LD_VAR 0 9
38521: PPUSH
38522: CALL_OW 2
38526: ST_TO_ADDR
38527: GO 38558
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38529: LD_ADDR_VAR 0 19
38533: PUSH
38534: LD_VAR 0 19
38538: PPUSH
38539: LD_VAR 0 19
38543: PUSH
38544: LD_INT 1
38546: PLUS
38547: PPUSH
38548: LD_VAR 0 9
38552: PPUSH
38553: CALL_OW 2
38557: ST_TO_ADDR
38558: GO 38486
38560: POP
38561: POP
// if tmp then
38562: LD_VAR 0 19
38566: IFFALSE 38578
// f := tmp ;
38568: LD_ADDR_VAR 0 12
38572: PUSH
38573: LD_VAR 0 19
38577: ST_TO_ADDR
// end ; x := personel [ i ] ;
38578: LD_ADDR_VAR 0 13
38582: PUSH
38583: LD_VAR 0 6
38587: PUSH
38588: LD_VAR 0 8
38592: ARRAY
38593: ST_TO_ADDR
// if x = - 1 then
38594: LD_VAR 0 13
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: EQUAL
38603: IFFALSE 38812
// begin for j in f do
38605: LD_ADDR_VAR 0 9
38609: PUSH
38610: LD_VAR 0 12
38614: PUSH
38615: FOR_IN
38616: IFFALSE 38808
// repeat InitHc ;
38618: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38622: LD_VAR 0 9
38626: PPUSH
38627: CALL_OW 266
38631: PUSH
38632: LD_INT 5
38634: EQUAL
38635: IFFALSE 38705
// begin if UnitsInside ( j ) < 3 then
38637: LD_VAR 0 9
38641: PPUSH
38642: CALL_OW 313
38646: PUSH
38647: LD_INT 3
38649: LESS
38650: IFFALSE 38686
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38652: LD_INT 0
38654: PPUSH
38655: LD_INT 5
38657: PUSH
38658: LD_INT 8
38660: PUSH
38661: LD_INT 9
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: PUSH
38669: LD_VAR 0 17
38673: ARRAY
38674: PPUSH
38675: LD_VAR 0 4
38679: PPUSH
38680: CALL_OW 380
38684: GO 38703
// PrepareHuman ( false , i , skill ) ;
38686: LD_INT 0
38688: PPUSH
38689: LD_VAR 0 8
38693: PPUSH
38694: LD_VAR 0 4
38698: PPUSH
38699: CALL_OW 380
// end else
38703: GO 38722
// PrepareHuman ( false , i , skill ) ;
38705: LD_INT 0
38707: PPUSH
38708: LD_VAR 0 8
38712: PPUSH
38713: LD_VAR 0 4
38717: PPUSH
38718: CALL_OW 380
// un := CreateHuman ;
38722: LD_ADDR_VAR 0 14
38726: PUSH
38727: CALL_OW 44
38731: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38732: LD_ADDR_VAR 0 7
38736: PUSH
38737: LD_VAR 0 7
38741: PPUSH
38742: LD_INT 1
38744: PPUSH
38745: LD_VAR 0 14
38749: PPUSH
38750: CALL_OW 2
38754: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38755: LD_VAR 0 14
38759: PPUSH
38760: LD_VAR 0 9
38764: PPUSH
38765: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38769: LD_VAR 0 9
38773: PPUSH
38774: CALL_OW 313
38778: PUSH
38779: LD_INT 6
38781: EQUAL
38782: PUSH
38783: LD_VAR 0 9
38787: PPUSH
38788: CALL_OW 266
38792: PUSH
38793: LD_INT 32
38795: PUSH
38796: LD_INT 31
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: IN
38803: OR
38804: IFFALSE 38618
38806: GO 38615
38808: POP
38809: POP
// end else
38810: GO 39192
// for j = 1 to x do
38812: LD_ADDR_VAR 0 9
38816: PUSH
38817: DOUBLE
38818: LD_INT 1
38820: DEC
38821: ST_TO_ADDR
38822: LD_VAR 0 13
38826: PUSH
38827: FOR_TO
38828: IFFALSE 39190
// begin InitHc ;
38830: CALL_OW 19
// if not f then
38834: LD_VAR 0 12
38838: NOT
38839: IFFALSE 38928
// begin PrepareHuman ( false , i , skill ) ;
38841: LD_INT 0
38843: PPUSH
38844: LD_VAR 0 8
38848: PPUSH
38849: LD_VAR 0 4
38853: PPUSH
38854: CALL_OW 380
// un := CreateHuman ;
38858: LD_ADDR_VAR 0 14
38862: PUSH
38863: CALL_OW 44
38867: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38868: LD_ADDR_VAR 0 7
38872: PUSH
38873: LD_VAR 0 7
38877: PPUSH
38878: LD_INT 1
38880: PPUSH
38881: LD_VAR 0 14
38885: PPUSH
38886: CALL_OW 2
38890: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38891: LD_VAR 0 14
38895: PPUSH
38896: LD_VAR 0 1
38900: PPUSH
38901: CALL_OW 250
38905: PPUSH
38906: LD_VAR 0 1
38910: PPUSH
38911: CALL_OW 251
38915: PPUSH
38916: LD_INT 10
38918: PPUSH
38919: LD_INT 0
38921: PPUSH
38922: CALL_OW 50
// continue ;
38926: GO 38827
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38928: LD_VAR 0 12
38932: PUSH
38933: LD_INT 1
38935: ARRAY
38936: PPUSH
38937: CALL_OW 313
38941: PUSH
38942: LD_VAR 0 12
38946: PUSH
38947: LD_INT 1
38949: ARRAY
38950: PPUSH
38951: CALL_OW 266
38955: PUSH
38956: LD_INT 32
38958: PUSH
38959: LD_INT 31
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: IN
38966: AND
38967: PUSH
38968: LD_VAR 0 12
38972: PUSH
38973: LD_INT 1
38975: ARRAY
38976: PPUSH
38977: CALL_OW 313
38981: PUSH
38982: LD_INT 6
38984: EQUAL
38985: OR
38986: IFFALSE 39006
// f := Delete ( f , 1 ) ;
38988: LD_ADDR_VAR 0 12
38992: PUSH
38993: LD_VAR 0 12
38997: PPUSH
38998: LD_INT 1
39000: PPUSH
39001: CALL_OW 3
39005: ST_TO_ADDR
// if not f then
39006: LD_VAR 0 12
39010: NOT
39011: IFFALSE 39029
// begin x := x + 2 ;
39013: LD_ADDR_VAR 0 13
39017: PUSH
39018: LD_VAR 0 13
39022: PUSH
39023: LD_INT 2
39025: PLUS
39026: ST_TO_ADDR
// continue ;
39027: GO 38827
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39029: LD_VAR 0 12
39033: PUSH
39034: LD_INT 1
39036: ARRAY
39037: PPUSH
39038: CALL_OW 266
39042: PUSH
39043: LD_INT 5
39045: EQUAL
39046: IFFALSE 39120
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39048: LD_VAR 0 12
39052: PUSH
39053: LD_INT 1
39055: ARRAY
39056: PPUSH
39057: CALL_OW 313
39061: PUSH
39062: LD_INT 3
39064: LESS
39065: IFFALSE 39101
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39067: LD_INT 0
39069: PPUSH
39070: LD_INT 5
39072: PUSH
39073: LD_INT 8
39075: PUSH
39076: LD_INT 9
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: PUSH
39084: LD_VAR 0 17
39088: ARRAY
39089: PPUSH
39090: LD_VAR 0 4
39094: PPUSH
39095: CALL_OW 380
39099: GO 39118
// PrepareHuman ( false , i , skill ) ;
39101: LD_INT 0
39103: PPUSH
39104: LD_VAR 0 8
39108: PPUSH
39109: LD_VAR 0 4
39113: PPUSH
39114: CALL_OW 380
// end else
39118: GO 39137
// PrepareHuman ( false , i , skill ) ;
39120: LD_INT 0
39122: PPUSH
39123: LD_VAR 0 8
39127: PPUSH
39128: LD_VAR 0 4
39132: PPUSH
39133: CALL_OW 380
// un := CreateHuman ;
39137: LD_ADDR_VAR 0 14
39141: PUSH
39142: CALL_OW 44
39146: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39147: LD_ADDR_VAR 0 7
39151: PUSH
39152: LD_VAR 0 7
39156: PPUSH
39157: LD_INT 1
39159: PPUSH
39160: LD_VAR 0 14
39164: PPUSH
39165: CALL_OW 2
39169: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39170: LD_VAR 0 14
39174: PPUSH
39175: LD_VAR 0 12
39179: PUSH
39180: LD_INT 1
39182: ARRAY
39183: PPUSH
39184: CALL_OW 52
// end ;
39188: GO 38827
39190: POP
39191: POP
// end ;
39192: GO 38129
39194: POP
39195: POP
// result := result ^ buildings ;
39196: LD_ADDR_VAR 0 7
39200: PUSH
39201: LD_VAR 0 7
39205: PUSH
39206: LD_VAR 0 18
39210: ADD
39211: ST_TO_ADDR
// end else
39212: GO 39355
// begin for i = 1 to personel do
39214: LD_ADDR_VAR 0 8
39218: PUSH
39219: DOUBLE
39220: LD_INT 1
39222: DEC
39223: ST_TO_ADDR
39224: LD_VAR 0 6
39228: PUSH
39229: FOR_TO
39230: IFFALSE 39353
// begin if i > 4 then
39232: LD_VAR 0 8
39236: PUSH
39237: LD_INT 4
39239: GREATER
39240: IFFALSE 39244
// break ;
39242: GO 39353
// x := personel [ i ] ;
39244: LD_ADDR_VAR 0 13
39248: PUSH
39249: LD_VAR 0 6
39253: PUSH
39254: LD_VAR 0 8
39258: ARRAY
39259: ST_TO_ADDR
// if x = - 1 then
39260: LD_VAR 0 13
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: EQUAL
39269: IFFALSE 39273
// continue ;
39271: GO 39229
// PrepareHuman ( false , i , skill ) ;
39273: LD_INT 0
39275: PPUSH
39276: LD_VAR 0 8
39280: PPUSH
39281: LD_VAR 0 4
39285: PPUSH
39286: CALL_OW 380
// un := CreateHuman ;
39290: LD_ADDR_VAR 0 14
39294: PUSH
39295: CALL_OW 44
39299: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39300: LD_VAR 0 14
39304: PPUSH
39305: LD_VAR 0 1
39309: PPUSH
39310: CALL_OW 250
39314: PPUSH
39315: LD_VAR 0 1
39319: PPUSH
39320: CALL_OW 251
39324: PPUSH
39325: LD_INT 10
39327: PPUSH
39328: LD_INT 0
39330: PPUSH
39331: CALL_OW 50
// result := result ^ un ;
39335: LD_ADDR_VAR 0 7
39339: PUSH
39340: LD_VAR 0 7
39344: PUSH
39345: LD_VAR 0 14
39349: ADD
39350: ST_TO_ADDR
// end ;
39351: GO 39229
39353: POP
39354: POP
// end ; end ;
39355: LD_VAR 0 7
39359: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39360: LD_INT 0
39362: PPUSH
39363: PPUSH
39364: PPUSH
39365: PPUSH
39366: PPUSH
39367: PPUSH
39368: PPUSH
39369: PPUSH
39370: PPUSH
39371: PPUSH
39372: PPUSH
39373: PPUSH
39374: PPUSH
39375: PPUSH
39376: PPUSH
39377: PPUSH
// result := false ;
39378: LD_ADDR_VAR 0 3
39382: PUSH
39383: LD_INT 0
39385: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39386: LD_VAR 0 1
39390: NOT
39391: PUSH
39392: LD_VAR 0 1
39396: PPUSH
39397: CALL_OW 266
39401: PUSH
39402: LD_INT 32
39404: PUSH
39405: LD_INT 33
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: IN
39412: NOT
39413: OR
39414: IFFALSE 39418
// exit ;
39416: GO 40527
// nat := GetNation ( tower ) ;
39418: LD_ADDR_VAR 0 12
39422: PUSH
39423: LD_VAR 0 1
39427: PPUSH
39428: CALL_OW 248
39432: ST_TO_ADDR
// side := GetSide ( tower ) ;
39433: LD_ADDR_VAR 0 16
39437: PUSH
39438: LD_VAR 0 1
39442: PPUSH
39443: CALL_OW 255
39447: ST_TO_ADDR
// x := GetX ( tower ) ;
39448: LD_ADDR_VAR 0 10
39452: PUSH
39453: LD_VAR 0 1
39457: PPUSH
39458: CALL_OW 250
39462: ST_TO_ADDR
// y := GetY ( tower ) ;
39463: LD_ADDR_VAR 0 11
39467: PUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: CALL_OW 251
39477: ST_TO_ADDR
// if not x or not y then
39478: LD_VAR 0 10
39482: NOT
39483: PUSH
39484: LD_VAR 0 11
39488: NOT
39489: OR
39490: IFFALSE 39494
// exit ;
39492: GO 40527
// weapon := 0 ;
39494: LD_ADDR_VAR 0 18
39498: PUSH
39499: LD_INT 0
39501: ST_TO_ADDR
// fac_list := [ ] ;
39502: LD_ADDR_VAR 0 17
39506: PUSH
39507: EMPTY
39508: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39509: LD_ADDR_VAR 0 6
39513: PUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: CALL_OW 274
39523: PPUSH
39524: LD_VAR 0 2
39528: PPUSH
39529: LD_INT 0
39531: PPUSH
39532: CALL 37098 0 3
39536: PPUSH
39537: LD_INT 30
39539: PUSH
39540: LD_INT 3
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PPUSH
39547: CALL_OW 72
39551: ST_TO_ADDR
// if not factories then
39552: LD_VAR 0 6
39556: NOT
39557: IFFALSE 39561
// exit ;
39559: GO 40527
// for i in factories do
39561: LD_ADDR_VAR 0 8
39565: PUSH
39566: LD_VAR 0 6
39570: PUSH
39571: FOR_IN
39572: IFFALSE 39597
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39574: LD_ADDR_VAR 0 17
39578: PUSH
39579: LD_VAR 0 17
39583: PUSH
39584: LD_VAR 0 8
39588: PPUSH
39589: CALL_OW 478
39593: UNION
39594: ST_TO_ADDR
39595: GO 39571
39597: POP
39598: POP
// if not fac_list then
39599: LD_VAR 0 17
39603: NOT
39604: IFFALSE 39608
// exit ;
39606: GO 40527
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39608: LD_ADDR_VAR 0 5
39612: PUSH
39613: LD_INT 4
39615: PUSH
39616: LD_INT 5
39618: PUSH
39619: LD_INT 9
39621: PUSH
39622: LD_INT 10
39624: PUSH
39625: LD_INT 6
39627: PUSH
39628: LD_INT 7
39630: PUSH
39631: LD_INT 11
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 27
39645: PUSH
39646: LD_INT 28
39648: PUSH
39649: LD_INT 26
39651: PUSH
39652: LD_INT 30
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 43
39663: PUSH
39664: LD_INT 44
39666: PUSH
39667: LD_INT 46
39669: PUSH
39670: LD_INT 45
39672: PUSH
39673: LD_INT 47
39675: PUSH
39676: LD_INT 49
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: PUSH
39692: LD_VAR 0 12
39696: ARRAY
39697: ST_TO_ADDR
// list := list isect fac_list ;
39698: LD_ADDR_VAR 0 5
39702: PUSH
39703: LD_VAR 0 5
39707: PUSH
39708: LD_VAR 0 17
39712: ISECT
39713: ST_TO_ADDR
// if not list then
39714: LD_VAR 0 5
39718: NOT
39719: IFFALSE 39723
// exit ;
39721: GO 40527
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39723: LD_VAR 0 12
39727: PUSH
39728: LD_INT 3
39730: EQUAL
39731: PUSH
39732: LD_INT 49
39734: PUSH
39735: LD_VAR 0 5
39739: IN
39740: AND
39741: PUSH
39742: LD_INT 31
39744: PPUSH
39745: LD_VAR 0 16
39749: PPUSH
39750: CALL_OW 321
39754: PUSH
39755: LD_INT 2
39757: EQUAL
39758: AND
39759: IFFALSE 39819
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39761: LD_INT 22
39763: PUSH
39764: LD_VAR 0 16
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 35
39775: PUSH
39776: LD_INT 49
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 91
39785: PUSH
39786: LD_VAR 0 1
39790: PUSH
39791: LD_INT 10
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: LIST
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: LIST
39803: PPUSH
39804: CALL_OW 69
39808: NOT
39809: IFFALSE 39819
// weapon := ru_time_lapser ;
39811: LD_ADDR_VAR 0 18
39815: PUSH
39816: LD_INT 49
39818: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39819: LD_VAR 0 12
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: IN
39834: PUSH
39835: LD_INT 11
39837: PUSH
39838: LD_VAR 0 5
39842: IN
39843: PUSH
39844: LD_INT 30
39846: PUSH
39847: LD_VAR 0 5
39851: IN
39852: OR
39853: AND
39854: PUSH
39855: LD_INT 6
39857: PPUSH
39858: LD_VAR 0 16
39862: PPUSH
39863: CALL_OW 321
39867: PUSH
39868: LD_INT 2
39870: EQUAL
39871: AND
39872: IFFALSE 40037
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39874: LD_INT 22
39876: PUSH
39877: LD_VAR 0 16
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: LD_INT 35
39891: PUSH
39892: LD_INT 11
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 35
39901: PUSH
39902: LD_INT 30
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 91
39916: PUSH
39917: LD_VAR 0 1
39921: PUSH
39922: LD_INT 18
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: PPUSH
39935: CALL_OW 69
39939: NOT
39940: PUSH
39941: LD_INT 22
39943: PUSH
39944: LD_VAR 0 16
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: LD_INT 30
39958: PUSH
39959: LD_INT 32
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 30
39968: PUSH
39969: LD_INT 33
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 91
39983: PUSH
39984: LD_VAR 0 1
39988: PUSH
39989: LD_INT 12
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: PUSH
40002: EMPTY
40003: LIST
40004: PPUSH
40005: CALL_OW 69
40009: PUSH
40010: LD_INT 2
40012: GREATER
40013: AND
40014: IFFALSE 40037
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40016: LD_ADDR_VAR 0 18
40020: PUSH
40021: LD_INT 11
40023: PUSH
40024: LD_INT 30
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_VAR 0 12
40035: ARRAY
40036: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40037: LD_VAR 0 18
40041: NOT
40042: PUSH
40043: LD_INT 40
40045: PPUSH
40046: LD_VAR 0 16
40050: PPUSH
40051: CALL_OW 321
40055: PUSH
40056: LD_INT 2
40058: EQUAL
40059: AND
40060: PUSH
40061: LD_INT 7
40063: PUSH
40064: LD_VAR 0 5
40068: IN
40069: PUSH
40070: LD_INT 28
40072: PUSH
40073: LD_VAR 0 5
40077: IN
40078: OR
40079: PUSH
40080: LD_INT 45
40082: PUSH
40083: LD_VAR 0 5
40087: IN
40088: OR
40089: AND
40090: IFFALSE 40344
// begin hex := GetHexInfo ( x , y ) ;
40092: LD_ADDR_VAR 0 4
40096: PUSH
40097: LD_VAR 0 10
40101: PPUSH
40102: LD_VAR 0 11
40106: PPUSH
40107: CALL_OW 546
40111: ST_TO_ADDR
// if hex [ 1 ] then
40112: LD_VAR 0 4
40116: PUSH
40117: LD_INT 1
40119: ARRAY
40120: IFFALSE 40124
// exit ;
40122: GO 40527
// height := hex [ 2 ] ;
40124: LD_ADDR_VAR 0 15
40128: PUSH
40129: LD_VAR 0 4
40133: PUSH
40134: LD_INT 2
40136: ARRAY
40137: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40138: LD_ADDR_VAR 0 14
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: LD_INT 3
40151: PUSH
40152: LD_INT 5
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
// for i in tmp do
40161: LD_ADDR_VAR 0 8
40165: PUSH
40166: LD_VAR 0 14
40170: PUSH
40171: FOR_IN
40172: IFFALSE 40342
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40174: LD_ADDR_VAR 0 9
40178: PUSH
40179: LD_VAR 0 10
40183: PPUSH
40184: LD_VAR 0 8
40188: PPUSH
40189: LD_INT 5
40191: PPUSH
40192: CALL_OW 272
40196: PUSH
40197: LD_VAR 0 11
40201: PPUSH
40202: LD_VAR 0 8
40206: PPUSH
40207: LD_INT 5
40209: PPUSH
40210: CALL_OW 273
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40219: LD_VAR 0 9
40223: PUSH
40224: LD_INT 1
40226: ARRAY
40227: PPUSH
40228: LD_VAR 0 9
40232: PUSH
40233: LD_INT 2
40235: ARRAY
40236: PPUSH
40237: CALL_OW 488
40241: IFFALSE 40340
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40243: LD_ADDR_VAR 0 4
40247: PUSH
40248: LD_VAR 0 9
40252: PUSH
40253: LD_INT 1
40255: ARRAY
40256: PPUSH
40257: LD_VAR 0 9
40261: PUSH
40262: LD_INT 2
40264: ARRAY
40265: PPUSH
40266: CALL_OW 546
40270: ST_TO_ADDR
// if hex [ 1 ] then
40271: LD_VAR 0 4
40275: PUSH
40276: LD_INT 1
40278: ARRAY
40279: IFFALSE 40283
// continue ;
40281: GO 40171
// h := hex [ 2 ] ;
40283: LD_ADDR_VAR 0 13
40287: PUSH
40288: LD_VAR 0 4
40292: PUSH
40293: LD_INT 2
40295: ARRAY
40296: ST_TO_ADDR
// if h + 7 < height then
40297: LD_VAR 0 13
40301: PUSH
40302: LD_INT 7
40304: PLUS
40305: PUSH
40306: LD_VAR 0 15
40310: LESS
40311: IFFALSE 40340
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40313: LD_ADDR_VAR 0 18
40317: PUSH
40318: LD_INT 7
40320: PUSH
40321: LD_INT 28
40323: PUSH
40324: LD_INT 45
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: LIST
40331: PUSH
40332: LD_VAR 0 12
40336: ARRAY
40337: ST_TO_ADDR
// break ;
40338: GO 40342
// end ; end ; end ;
40340: GO 40171
40342: POP
40343: POP
// end ; if not weapon then
40344: LD_VAR 0 18
40348: NOT
40349: IFFALSE 40409
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40351: LD_ADDR_VAR 0 5
40355: PUSH
40356: LD_VAR 0 5
40360: PUSH
40361: LD_INT 11
40363: PUSH
40364: LD_INT 30
40366: PUSH
40367: LD_INT 49
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: DIFF
40375: ST_TO_ADDR
// if not list then
40376: LD_VAR 0 5
40380: NOT
40381: IFFALSE 40385
// exit ;
40383: GO 40527
// weapon := list [ rand ( 1 , list ) ] ;
40385: LD_ADDR_VAR 0 18
40389: PUSH
40390: LD_VAR 0 5
40394: PUSH
40395: LD_INT 1
40397: PPUSH
40398: LD_VAR 0 5
40402: PPUSH
40403: CALL_OW 12
40407: ARRAY
40408: ST_TO_ADDR
// end ; if weapon then
40409: LD_VAR 0 18
40413: IFFALSE 40527
// begin tmp := CostOfWeapon ( weapon ) ;
40415: LD_ADDR_VAR 0 14
40419: PUSH
40420: LD_VAR 0 18
40424: PPUSH
40425: CALL_OW 451
40429: ST_TO_ADDR
// j := GetBase ( tower ) ;
40430: LD_ADDR_VAR 0 9
40434: PUSH
40435: LD_VAR 0 1
40439: PPUSH
40440: CALL_OW 274
40444: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40445: LD_VAR 0 9
40449: PPUSH
40450: LD_INT 1
40452: PPUSH
40453: CALL_OW 275
40457: PUSH
40458: LD_VAR 0 14
40462: PUSH
40463: LD_INT 1
40465: ARRAY
40466: GREATEREQUAL
40467: PUSH
40468: LD_VAR 0 9
40472: PPUSH
40473: LD_INT 2
40475: PPUSH
40476: CALL_OW 275
40480: PUSH
40481: LD_VAR 0 14
40485: PUSH
40486: LD_INT 2
40488: ARRAY
40489: GREATEREQUAL
40490: AND
40491: PUSH
40492: LD_VAR 0 9
40496: PPUSH
40497: LD_INT 3
40499: PPUSH
40500: CALL_OW 275
40504: PUSH
40505: LD_VAR 0 14
40509: PUSH
40510: LD_INT 3
40512: ARRAY
40513: GREATEREQUAL
40514: AND
40515: IFFALSE 40527
// result := weapon ;
40517: LD_ADDR_VAR 0 3
40521: PUSH
40522: LD_VAR 0 18
40526: ST_TO_ADDR
// end ; end ;
40527: LD_VAR 0 3
40531: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40532: LD_INT 0
40534: PPUSH
40535: PPUSH
// result := true ;
40536: LD_ADDR_VAR 0 3
40540: PUSH
40541: LD_INT 1
40543: ST_TO_ADDR
// if array1 = array2 then
40544: LD_VAR 0 1
40548: PUSH
40549: LD_VAR 0 2
40553: EQUAL
40554: IFFALSE 40614
// begin for i = 1 to array1 do
40556: LD_ADDR_VAR 0 4
40560: PUSH
40561: DOUBLE
40562: LD_INT 1
40564: DEC
40565: ST_TO_ADDR
40566: LD_VAR 0 1
40570: PUSH
40571: FOR_TO
40572: IFFALSE 40610
// if array1 [ i ] <> array2 [ i ] then
40574: LD_VAR 0 1
40578: PUSH
40579: LD_VAR 0 4
40583: ARRAY
40584: PUSH
40585: LD_VAR 0 2
40589: PUSH
40590: LD_VAR 0 4
40594: ARRAY
40595: NONEQUAL
40596: IFFALSE 40608
// begin result := false ;
40598: LD_ADDR_VAR 0 3
40602: PUSH
40603: LD_INT 0
40605: ST_TO_ADDR
// break ;
40606: GO 40610
// end ;
40608: GO 40571
40610: POP
40611: POP
// end else
40612: GO 40622
// result := false ;
40614: LD_ADDR_VAR 0 3
40618: PUSH
40619: LD_INT 0
40621: ST_TO_ADDR
// end ;
40622: LD_VAR 0 3
40626: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40627: LD_INT 0
40629: PPUSH
40630: PPUSH
// if not array1 or not array2 then
40631: LD_VAR 0 1
40635: NOT
40636: PUSH
40637: LD_VAR 0 2
40641: NOT
40642: OR
40643: IFFALSE 40647
// exit ;
40645: GO 40711
// result := true ;
40647: LD_ADDR_VAR 0 3
40651: PUSH
40652: LD_INT 1
40654: ST_TO_ADDR
// for i = 1 to array1 do
40655: LD_ADDR_VAR 0 4
40659: PUSH
40660: DOUBLE
40661: LD_INT 1
40663: DEC
40664: ST_TO_ADDR
40665: LD_VAR 0 1
40669: PUSH
40670: FOR_TO
40671: IFFALSE 40709
// if array1 [ i ] <> array2 [ i ] then
40673: LD_VAR 0 1
40677: PUSH
40678: LD_VAR 0 4
40682: ARRAY
40683: PUSH
40684: LD_VAR 0 2
40688: PUSH
40689: LD_VAR 0 4
40693: ARRAY
40694: NONEQUAL
40695: IFFALSE 40707
// begin result := false ;
40697: LD_ADDR_VAR 0 3
40701: PUSH
40702: LD_INT 0
40704: ST_TO_ADDR
// break ;
40705: GO 40709
// end ;
40707: GO 40670
40709: POP
40710: POP
// end ;
40711: LD_VAR 0 3
40715: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40716: LD_INT 0
40718: PPUSH
40719: PPUSH
40720: PPUSH
// pom := GetBase ( fac ) ;
40721: LD_ADDR_VAR 0 5
40725: PUSH
40726: LD_VAR 0 1
40730: PPUSH
40731: CALL_OW 274
40735: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40736: LD_ADDR_VAR 0 4
40740: PUSH
40741: LD_VAR 0 2
40745: PUSH
40746: LD_INT 1
40748: ARRAY
40749: PPUSH
40750: LD_VAR 0 2
40754: PUSH
40755: LD_INT 2
40757: ARRAY
40758: PPUSH
40759: LD_VAR 0 2
40763: PUSH
40764: LD_INT 3
40766: ARRAY
40767: PPUSH
40768: LD_VAR 0 2
40772: PUSH
40773: LD_INT 4
40775: ARRAY
40776: PPUSH
40777: CALL_OW 449
40781: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40782: LD_ADDR_VAR 0 3
40786: PUSH
40787: LD_VAR 0 5
40791: PPUSH
40792: LD_INT 1
40794: PPUSH
40795: CALL_OW 275
40799: PUSH
40800: LD_VAR 0 4
40804: PUSH
40805: LD_INT 1
40807: ARRAY
40808: GREATEREQUAL
40809: PUSH
40810: LD_VAR 0 5
40814: PPUSH
40815: LD_INT 2
40817: PPUSH
40818: CALL_OW 275
40822: PUSH
40823: LD_VAR 0 4
40827: PUSH
40828: LD_INT 2
40830: ARRAY
40831: GREATEREQUAL
40832: AND
40833: PUSH
40834: LD_VAR 0 5
40838: PPUSH
40839: LD_INT 3
40841: PPUSH
40842: CALL_OW 275
40846: PUSH
40847: LD_VAR 0 4
40851: PUSH
40852: LD_INT 3
40854: ARRAY
40855: GREATEREQUAL
40856: AND
40857: ST_TO_ADDR
// end ;
40858: LD_VAR 0 3
40862: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40863: LD_INT 0
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
// pom := GetBase ( building ) ;
40869: LD_ADDR_VAR 0 3
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 274
40883: ST_TO_ADDR
// if not pom then
40884: LD_VAR 0 3
40888: NOT
40889: IFFALSE 40893
// exit ;
40891: GO 41063
// btype := GetBType ( building ) ;
40893: LD_ADDR_VAR 0 5
40897: PUSH
40898: LD_VAR 0 1
40902: PPUSH
40903: CALL_OW 266
40907: ST_TO_ADDR
// if btype = b_armoury then
40908: LD_VAR 0 5
40912: PUSH
40913: LD_INT 4
40915: EQUAL
40916: IFFALSE 40926
// btype := b_barracks ;
40918: LD_ADDR_VAR 0 5
40922: PUSH
40923: LD_INT 5
40925: ST_TO_ADDR
// if btype = b_depot then
40926: LD_VAR 0 5
40930: PUSH
40931: LD_INT 0
40933: EQUAL
40934: IFFALSE 40944
// btype := b_warehouse ;
40936: LD_ADDR_VAR 0 5
40940: PUSH
40941: LD_INT 1
40943: ST_TO_ADDR
// if btype = b_workshop then
40944: LD_VAR 0 5
40948: PUSH
40949: LD_INT 2
40951: EQUAL
40952: IFFALSE 40962
// btype := b_factory ;
40954: LD_ADDR_VAR 0 5
40958: PUSH
40959: LD_INT 3
40961: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40962: LD_ADDR_VAR 0 4
40966: PUSH
40967: LD_VAR 0 5
40971: PPUSH
40972: LD_VAR 0 1
40976: PPUSH
40977: CALL_OW 248
40981: PPUSH
40982: CALL_OW 450
40986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40987: LD_ADDR_VAR 0 2
40991: PUSH
40992: LD_VAR 0 3
40996: PPUSH
40997: LD_INT 1
40999: PPUSH
41000: CALL_OW 275
41004: PUSH
41005: LD_VAR 0 4
41009: PUSH
41010: LD_INT 1
41012: ARRAY
41013: GREATEREQUAL
41014: PUSH
41015: LD_VAR 0 3
41019: PPUSH
41020: LD_INT 2
41022: PPUSH
41023: CALL_OW 275
41027: PUSH
41028: LD_VAR 0 4
41032: PUSH
41033: LD_INT 2
41035: ARRAY
41036: GREATEREQUAL
41037: AND
41038: PUSH
41039: LD_VAR 0 3
41043: PPUSH
41044: LD_INT 3
41046: PPUSH
41047: CALL_OW 275
41051: PUSH
41052: LD_VAR 0 4
41056: PUSH
41057: LD_INT 3
41059: ARRAY
41060: GREATEREQUAL
41061: AND
41062: ST_TO_ADDR
// end ;
41063: LD_VAR 0 2
41067: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41068: LD_INT 0
41070: PPUSH
41071: PPUSH
41072: PPUSH
// pom := GetBase ( building ) ;
41073: LD_ADDR_VAR 0 4
41077: PUSH
41078: LD_VAR 0 1
41082: PPUSH
41083: CALL_OW 274
41087: ST_TO_ADDR
// if not pom then
41088: LD_VAR 0 4
41092: NOT
41093: IFFALSE 41097
// exit ;
41095: GO 41198
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41097: LD_ADDR_VAR 0 5
41101: PUSH
41102: LD_VAR 0 2
41106: PPUSH
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL_OW 248
41116: PPUSH
41117: CALL_OW 450
41121: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41122: LD_ADDR_VAR 0 3
41126: PUSH
41127: LD_VAR 0 4
41131: PPUSH
41132: LD_INT 1
41134: PPUSH
41135: CALL_OW 275
41139: PUSH
41140: LD_VAR 0 5
41144: PUSH
41145: LD_INT 1
41147: ARRAY
41148: GREATEREQUAL
41149: PUSH
41150: LD_VAR 0 4
41154: PPUSH
41155: LD_INT 2
41157: PPUSH
41158: CALL_OW 275
41162: PUSH
41163: LD_VAR 0 5
41167: PUSH
41168: LD_INT 2
41170: ARRAY
41171: GREATEREQUAL
41172: AND
41173: PUSH
41174: LD_VAR 0 4
41178: PPUSH
41179: LD_INT 3
41181: PPUSH
41182: CALL_OW 275
41186: PUSH
41187: LD_VAR 0 5
41191: PUSH
41192: LD_INT 3
41194: ARRAY
41195: GREATEREQUAL
41196: AND
41197: ST_TO_ADDR
// end ;
41198: LD_VAR 0 3
41202: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41203: LD_INT 0
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
// result := false ;
41216: LD_ADDR_VAR 0 8
41220: PUSH
41221: LD_INT 0
41223: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41224: LD_VAR 0 5
41228: NOT
41229: PUSH
41230: LD_VAR 0 1
41234: NOT
41235: OR
41236: PUSH
41237: LD_VAR 0 2
41241: NOT
41242: OR
41243: PUSH
41244: LD_VAR 0 3
41248: NOT
41249: OR
41250: IFFALSE 41254
// exit ;
41252: GO 42068
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41254: LD_ADDR_VAR 0 14
41258: PUSH
41259: LD_VAR 0 1
41263: PPUSH
41264: LD_VAR 0 2
41268: PPUSH
41269: LD_VAR 0 3
41273: PPUSH
41274: LD_VAR 0 4
41278: PPUSH
41279: LD_VAR 0 5
41283: PUSH
41284: LD_INT 1
41286: ARRAY
41287: PPUSH
41288: CALL_OW 248
41292: PPUSH
41293: LD_INT 0
41295: PPUSH
41296: CALL 43305 0 6
41300: ST_TO_ADDR
// if not hexes then
41301: LD_VAR 0 14
41305: NOT
41306: IFFALSE 41310
// exit ;
41308: GO 42068
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41310: LD_ADDR_VAR 0 17
41314: PUSH
41315: LD_VAR 0 5
41319: PPUSH
41320: LD_INT 22
41322: PUSH
41323: LD_VAR 0 13
41327: PPUSH
41328: CALL_OW 255
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 30
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 30
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: LIST
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PPUSH
41369: CALL_OW 72
41373: ST_TO_ADDR
// for i = 1 to hexes do
41374: LD_ADDR_VAR 0 9
41378: PUSH
41379: DOUBLE
41380: LD_INT 1
41382: DEC
41383: ST_TO_ADDR
41384: LD_VAR 0 14
41388: PUSH
41389: FOR_TO
41390: IFFALSE 42066
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41392: LD_ADDR_VAR 0 13
41396: PUSH
41397: LD_VAR 0 14
41401: PUSH
41402: LD_VAR 0 9
41406: ARRAY
41407: PUSH
41408: LD_INT 1
41410: ARRAY
41411: PPUSH
41412: LD_VAR 0 14
41416: PUSH
41417: LD_VAR 0 9
41421: ARRAY
41422: PUSH
41423: LD_INT 2
41425: ARRAY
41426: PPUSH
41427: CALL_OW 428
41431: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41432: LD_VAR 0 14
41436: PUSH
41437: LD_VAR 0 9
41441: ARRAY
41442: PUSH
41443: LD_INT 1
41445: ARRAY
41446: PPUSH
41447: LD_VAR 0 14
41451: PUSH
41452: LD_VAR 0 9
41456: ARRAY
41457: PUSH
41458: LD_INT 2
41460: ARRAY
41461: PPUSH
41462: CALL_OW 351
41466: PUSH
41467: LD_VAR 0 14
41471: PUSH
41472: LD_VAR 0 9
41476: ARRAY
41477: PUSH
41478: LD_INT 1
41480: ARRAY
41481: PPUSH
41482: LD_VAR 0 14
41486: PUSH
41487: LD_VAR 0 9
41491: ARRAY
41492: PUSH
41493: LD_INT 2
41495: ARRAY
41496: PPUSH
41497: CALL_OW 488
41501: NOT
41502: OR
41503: PUSH
41504: LD_VAR 0 13
41508: PPUSH
41509: CALL_OW 247
41513: PUSH
41514: LD_INT 3
41516: EQUAL
41517: OR
41518: IFFALSE 41524
// exit ;
41520: POP
41521: POP
41522: GO 42068
// if not tmp then
41524: LD_VAR 0 13
41528: NOT
41529: IFFALSE 41533
// continue ;
41531: GO 41389
// result := true ;
41533: LD_ADDR_VAR 0 8
41537: PUSH
41538: LD_INT 1
41540: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41541: LD_VAR 0 6
41545: PUSH
41546: LD_VAR 0 13
41550: PPUSH
41551: CALL_OW 247
41555: PUSH
41556: LD_INT 2
41558: EQUAL
41559: AND
41560: PUSH
41561: LD_VAR 0 13
41565: PPUSH
41566: CALL_OW 263
41570: PUSH
41571: LD_INT 1
41573: EQUAL
41574: AND
41575: IFFALSE 41739
// begin if IsDrivenBy ( tmp ) then
41577: LD_VAR 0 13
41581: PPUSH
41582: CALL_OW 311
41586: IFFALSE 41590
// continue ;
41588: GO 41389
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41590: LD_VAR 0 6
41594: PPUSH
41595: LD_INT 3
41597: PUSH
41598: LD_INT 60
41600: PUSH
41601: EMPTY
41602: LIST
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 3
41610: PUSH
41611: LD_INT 55
41613: PUSH
41614: EMPTY
41615: LIST
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PPUSH
41625: CALL_OW 72
41629: IFFALSE 41737
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41631: LD_ADDR_VAR 0 18
41635: PUSH
41636: LD_VAR 0 6
41640: PPUSH
41641: LD_INT 3
41643: PUSH
41644: LD_INT 60
41646: PUSH
41647: EMPTY
41648: LIST
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 3
41656: PUSH
41657: LD_INT 55
41659: PUSH
41660: EMPTY
41661: LIST
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PPUSH
41671: CALL_OW 72
41675: PUSH
41676: LD_INT 1
41678: ARRAY
41679: ST_TO_ADDR
// if IsInUnit ( driver ) then
41680: LD_VAR 0 18
41684: PPUSH
41685: CALL_OW 310
41689: IFFALSE 41700
// ComExit ( driver ) ;
41691: LD_VAR 0 18
41695: PPUSH
41696: CALL 66489 0 1
// AddComEnterUnit ( driver , tmp ) ;
41700: LD_VAR 0 18
41704: PPUSH
41705: LD_VAR 0 13
41709: PPUSH
41710: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41714: LD_VAR 0 18
41718: PPUSH
41719: LD_VAR 0 7
41723: PPUSH
41724: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41728: LD_VAR 0 18
41732: PPUSH
41733: CALL_OW 181
// end ; continue ;
41737: GO 41389
// end ; if not cleaners or not tmp in cleaners then
41739: LD_VAR 0 6
41743: NOT
41744: PUSH
41745: LD_VAR 0 13
41749: PUSH
41750: LD_VAR 0 6
41754: IN
41755: NOT
41756: OR
41757: IFFALSE 42064
// begin if dep then
41759: LD_VAR 0 17
41763: IFFALSE 41899
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41765: LD_ADDR_VAR 0 16
41769: PUSH
41770: LD_VAR 0 17
41774: PUSH
41775: LD_INT 1
41777: ARRAY
41778: PPUSH
41779: CALL_OW 250
41783: PPUSH
41784: LD_VAR 0 17
41788: PUSH
41789: LD_INT 1
41791: ARRAY
41792: PPUSH
41793: CALL_OW 254
41797: PPUSH
41798: LD_INT 5
41800: PPUSH
41801: CALL_OW 272
41805: PUSH
41806: LD_VAR 0 17
41810: PUSH
41811: LD_INT 1
41813: ARRAY
41814: PPUSH
41815: CALL_OW 251
41819: PPUSH
41820: LD_VAR 0 17
41824: PUSH
41825: LD_INT 1
41827: ARRAY
41828: PPUSH
41829: CALL_OW 254
41833: PPUSH
41834: LD_INT 5
41836: PPUSH
41837: CALL_OW 273
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41846: LD_VAR 0 16
41850: PUSH
41851: LD_INT 1
41853: ARRAY
41854: PPUSH
41855: LD_VAR 0 16
41859: PUSH
41860: LD_INT 2
41862: ARRAY
41863: PPUSH
41864: CALL_OW 488
41868: IFFALSE 41899
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41870: LD_VAR 0 13
41874: PPUSH
41875: LD_VAR 0 16
41879: PUSH
41880: LD_INT 1
41882: ARRAY
41883: PPUSH
41884: LD_VAR 0 16
41888: PUSH
41889: LD_INT 2
41891: ARRAY
41892: PPUSH
41893: CALL_OW 111
// continue ;
41897: GO 41389
// end ; end ; r := GetDir ( tmp ) ;
41899: LD_ADDR_VAR 0 15
41903: PUSH
41904: LD_VAR 0 13
41908: PPUSH
41909: CALL_OW 254
41913: ST_TO_ADDR
// if r = 5 then
41914: LD_VAR 0 15
41918: PUSH
41919: LD_INT 5
41921: EQUAL
41922: IFFALSE 41932
// r := 0 ;
41924: LD_ADDR_VAR 0 15
41928: PUSH
41929: LD_INT 0
41931: ST_TO_ADDR
// for j = r to 5 do
41932: LD_ADDR_VAR 0 10
41936: PUSH
41937: DOUBLE
41938: LD_VAR 0 15
41942: DEC
41943: ST_TO_ADDR
41944: LD_INT 5
41946: PUSH
41947: FOR_TO
41948: IFFALSE 42062
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41950: LD_ADDR_VAR 0 11
41954: PUSH
41955: LD_VAR 0 13
41959: PPUSH
41960: CALL_OW 250
41964: PPUSH
41965: LD_VAR 0 10
41969: PPUSH
41970: LD_INT 2
41972: PPUSH
41973: CALL_OW 272
41977: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41978: LD_ADDR_VAR 0 12
41982: PUSH
41983: LD_VAR 0 13
41987: PPUSH
41988: CALL_OW 251
41992: PPUSH
41993: LD_VAR 0 10
41997: PPUSH
41998: LD_INT 2
42000: PPUSH
42001: CALL_OW 273
42005: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42006: LD_VAR 0 11
42010: PPUSH
42011: LD_VAR 0 12
42015: PPUSH
42016: CALL_OW 488
42020: PUSH
42021: LD_VAR 0 11
42025: PPUSH
42026: LD_VAR 0 12
42030: PPUSH
42031: CALL_OW 428
42035: NOT
42036: AND
42037: IFFALSE 42060
// begin ComMoveXY ( tmp , _x , _y ) ;
42039: LD_VAR 0 13
42043: PPUSH
42044: LD_VAR 0 11
42048: PPUSH
42049: LD_VAR 0 12
42053: PPUSH
42054: CALL_OW 111
// break ;
42058: GO 42062
// end ; end ;
42060: GO 41947
42062: POP
42063: POP
// end ; end ;
42064: GO 41389
42066: POP
42067: POP
// end ;
42068: LD_VAR 0 8
42072: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42073: LD_INT 0
42075: PPUSH
// result := true ;
42076: LD_ADDR_VAR 0 3
42080: PUSH
42081: LD_INT 1
42083: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42084: LD_VAR 0 2
42088: PUSH
42089: LD_INT 24
42091: DOUBLE
42092: EQUAL
42093: IFTRUE 42103
42095: LD_INT 33
42097: DOUBLE
42098: EQUAL
42099: IFTRUE 42103
42101: GO 42128
42103: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42104: LD_ADDR_VAR 0 3
42108: PUSH
42109: LD_INT 32
42111: PPUSH
42112: LD_VAR 0 1
42116: PPUSH
42117: CALL_OW 321
42121: PUSH
42122: LD_INT 2
42124: EQUAL
42125: ST_TO_ADDR
42126: GO 42448
42128: LD_INT 20
42130: DOUBLE
42131: EQUAL
42132: IFTRUE 42136
42134: GO 42161
42136: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42137: LD_ADDR_VAR 0 3
42141: PUSH
42142: LD_INT 6
42144: PPUSH
42145: LD_VAR 0 1
42149: PPUSH
42150: CALL_OW 321
42154: PUSH
42155: LD_INT 2
42157: EQUAL
42158: ST_TO_ADDR
42159: GO 42448
42161: LD_INT 22
42163: DOUBLE
42164: EQUAL
42165: IFTRUE 42175
42167: LD_INT 36
42169: DOUBLE
42170: EQUAL
42171: IFTRUE 42175
42173: GO 42200
42175: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42176: LD_ADDR_VAR 0 3
42180: PUSH
42181: LD_INT 15
42183: PPUSH
42184: LD_VAR 0 1
42188: PPUSH
42189: CALL_OW 321
42193: PUSH
42194: LD_INT 2
42196: EQUAL
42197: ST_TO_ADDR
42198: GO 42448
42200: LD_INT 30
42202: DOUBLE
42203: EQUAL
42204: IFTRUE 42208
42206: GO 42233
42208: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42209: LD_ADDR_VAR 0 3
42213: PUSH
42214: LD_INT 20
42216: PPUSH
42217: LD_VAR 0 1
42221: PPUSH
42222: CALL_OW 321
42226: PUSH
42227: LD_INT 2
42229: EQUAL
42230: ST_TO_ADDR
42231: GO 42448
42233: LD_INT 28
42235: DOUBLE
42236: EQUAL
42237: IFTRUE 42247
42239: LD_INT 21
42241: DOUBLE
42242: EQUAL
42243: IFTRUE 42247
42245: GO 42272
42247: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42248: LD_ADDR_VAR 0 3
42252: PUSH
42253: LD_INT 21
42255: PPUSH
42256: LD_VAR 0 1
42260: PPUSH
42261: CALL_OW 321
42265: PUSH
42266: LD_INT 2
42268: EQUAL
42269: ST_TO_ADDR
42270: GO 42448
42272: LD_INT 16
42274: DOUBLE
42275: EQUAL
42276: IFTRUE 42280
42278: GO 42307
42280: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42281: LD_ADDR_VAR 0 3
42285: PUSH
42286: LD_EXP 33
42290: PPUSH
42291: LD_VAR 0 1
42295: PPUSH
42296: CALL_OW 321
42300: PUSH
42301: LD_INT 2
42303: EQUAL
42304: ST_TO_ADDR
42305: GO 42448
42307: LD_INT 19
42309: DOUBLE
42310: EQUAL
42311: IFTRUE 42321
42313: LD_INT 23
42315: DOUBLE
42316: EQUAL
42317: IFTRUE 42321
42319: GO 42348
42321: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42322: LD_ADDR_VAR 0 3
42326: PUSH
42327: LD_EXP 32
42331: PPUSH
42332: LD_VAR 0 1
42336: PPUSH
42337: CALL_OW 321
42341: PUSH
42342: LD_INT 2
42344: EQUAL
42345: ST_TO_ADDR
42346: GO 42448
42348: LD_INT 17
42350: DOUBLE
42351: EQUAL
42352: IFTRUE 42356
42354: GO 42381
42356: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42357: LD_ADDR_VAR 0 3
42361: PUSH
42362: LD_INT 39
42364: PPUSH
42365: LD_VAR 0 1
42369: PPUSH
42370: CALL_OW 321
42374: PUSH
42375: LD_INT 2
42377: EQUAL
42378: ST_TO_ADDR
42379: GO 42448
42381: LD_INT 18
42383: DOUBLE
42384: EQUAL
42385: IFTRUE 42389
42387: GO 42414
42389: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42390: LD_ADDR_VAR 0 3
42394: PUSH
42395: LD_INT 40
42397: PPUSH
42398: LD_VAR 0 1
42402: PPUSH
42403: CALL_OW 321
42407: PUSH
42408: LD_INT 2
42410: EQUAL
42411: ST_TO_ADDR
42412: GO 42448
42414: LD_INT 27
42416: DOUBLE
42417: EQUAL
42418: IFTRUE 42422
42420: GO 42447
42422: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_INT 35
42430: PPUSH
42431: LD_VAR 0 1
42435: PPUSH
42436: CALL_OW 321
42440: PUSH
42441: LD_INT 2
42443: EQUAL
42444: ST_TO_ADDR
42445: GO 42448
42447: POP
// end ;
42448: LD_VAR 0 3
42452: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42453: LD_INT 0
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
42465: PPUSH
// result := false ;
42466: LD_ADDR_VAR 0 6
42470: PUSH
42471: LD_INT 0
42473: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42474: LD_VAR 0 1
42478: NOT
42479: PUSH
42480: LD_VAR 0 1
42484: PPUSH
42485: CALL_OW 266
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: IN
42500: NOT
42501: OR
42502: PUSH
42503: LD_VAR 0 2
42507: NOT
42508: OR
42509: PUSH
42510: LD_VAR 0 5
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: LD_INT 2
42523: PUSH
42524: LD_INT 3
42526: PUSH
42527: LD_INT 4
42529: PUSH
42530: LD_INT 5
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: IN
42541: NOT
42542: OR
42543: PUSH
42544: LD_VAR 0 3
42548: PPUSH
42549: LD_VAR 0 4
42553: PPUSH
42554: CALL_OW 488
42558: NOT
42559: OR
42560: IFFALSE 42564
// exit ;
42562: GO 43300
// side := GetSide ( depot ) ;
42564: LD_ADDR_VAR 0 9
42568: PUSH
42569: LD_VAR 0 1
42573: PPUSH
42574: CALL_OW 255
42578: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42579: LD_VAR 0 9
42583: PPUSH
42584: LD_VAR 0 2
42588: PPUSH
42589: CALL 42073 0 2
42593: NOT
42594: IFFALSE 42598
// exit ;
42596: GO 43300
// pom := GetBase ( depot ) ;
42598: LD_ADDR_VAR 0 10
42602: PUSH
42603: LD_VAR 0 1
42607: PPUSH
42608: CALL_OW 274
42612: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42613: LD_ADDR_VAR 0 11
42617: PUSH
42618: LD_VAR 0 2
42622: PPUSH
42623: LD_VAR 0 1
42627: PPUSH
42628: CALL_OW 248
42632: PPUSH
42633: CALL_OW 450
42637: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42638: LD_VAR 0 10
42642: PPUSH
42643: LD_INT 1
42645: PPUSH
42646: CALL_OW 275
42650: PUSH
42651: LD_VAR 0 11
42655: PUSH
42656: LD_INT 1
42658: ARRAY
42659: GREATEREQUAL
42660: PUSH
42661: LD_VAR 0 10
42665: PPUSH
42666: LD_INT 2
42668: PPUSH
42669: CALL_OW 275
42673: PUSH
42674: LD_VAR 0 11
42678: PUSH
42679: LD_INT 2
42681: ARRAY
42682: GREATEREQUAL
42683: AND
42684: PUSH
42685: LD_VAR 0 10
42689: PPUSH
42690: LD_INT 3
42692: PPUSH
42693: CALL_OW 275
42697: PUSH
42698: LD_VAR 0 11
42702: PUSH
42703: LD_INT 3
42705: ARRAY
42706: GREATEREQUAL
42707: AND
42708: NOT
42709: IFFALSE 42713
// exit ;
42711: GO 43300
// if GetBType ( depot ) = b_depot then
42713: LD_VAR 0 1
42717: PPUSH
42718: CALL_OW 266
42722: PUSH
42723: LD_INT 0
42725: EQUAL
42726: IFFALSE 42738
// dist := 28 else
42728: LD_ADDR_VAR 0 14
42732: PUSH
42733: LD_INT 28
42735: ST_TO_ADDR
42736: GO 42746
// dist := 36 ;
42738: LD_ADDR_VAR 0 14
42742: PUSH
42743: LD_INT 36
42745: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42746: LD_VAR 0 1
42750: PPUSH
42751: LD_VAR 0 3
42755: PPUSH
42756: LD_VAR 0 4
42760: PPUSH
42761: CALL_OW 297
42765: PUSH
42766: LD_VAR 0 14
42770: GREATER
42771: IFFALSE 42775
// exit ;
42773: GO 43300
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42775: LD_ADDR_VAR 0 12
42779: PUSH
42780: LD_VAR 0 2
42784: PPUSH
42785: LD_VAR 0 3
42789: PPUSH
42790: LD_VAR 0 4
42794: PPUSH
42795: LD_VAR 0 5
42799: PPUSH
42800: LD_VAR 0 1
42804: PPUSH
42805: CALL_OW 248
42809: PPUSH
42810: LD_INT 0
42812: PPUSH
42813: CALL 43305 0 6
42817: ST_TO_ADDR
// if not hexes then
42818: LD_VAR 0 12
42822: NOT
42823: IFFALSE 42827
// exit ;
42825: GO 43300
// hex := GetHexInfo ( x , y ) ;
42827: LD_ADDR_VAR 0 15
42831: PUSH
42832: LD_VAR 0 3
42836: PPUSH
42837: LD_VAR 0 4
42841: PPUSH
42842: CALL_OW 546
42846: ST_TO_ADDR
// if hex [ 1 ] then
42847: LD_VAR 0 15
42851: PUSH
42852: LD_INT 1
42854: ARRAY
42855: IFFALSE 42859
// exit ;
42857: GO 43300
// height := hex [ 2 ] ;
42859: LD_ADDR_VAR 0 13
42863: PUSH
42864: LD_VAR 0 15
42868: PUSH
42869: LD_INT 2
42871: ARRAY
42872: ST_TO_ADDR
// for i = 1 to hexes do
42873: LD_ADDR_VAR 0 7
42877: PUSH
42878: DOUBLE
42879: LD_INT 1
42881: DEC
42882: ST_TO_ADDR
42883: LD_VAR 0 12
42887: PUSH
42888: FOR_TO
42889: IFFALSE 43219
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42891: LD_VAR 0 12
42895: PUSH
42896: LD_VAR 0 7
42900: ARRAY
42901: PUSH
42902: LD_INT 1
42904: ARRAY
42905: PPUSH
42906: LD_VAR 0 12
42910: PUSH
42911: LD_VAR 0 7
42915: ARRAY
42916: PUSH
42917: LD_INT 2
42919: ARRAY
42920: PPUSH
42921: CALL_OW 488
42925: NOT
42926: PUSH
42927: LD_VAR 0 12
42931: PUSH
42932: LD_VAR 0 7
42936: ARRAY
42937: PUSH
42938: LD_INT 1
42940: ARRAY
42941: PPUSH
42942: LD_VAR 0 12
42946: PUSH
42947: LD_VAR 0 7
42951: ARRAY
42952: PUSH
42953: LD_INT 2
42955: ARRAY
42956: PPUSH
42957: CALL_OW 428
42961: PUSH
42962: LD_INT 0
42964: GREATER
42965: OR
42966: PUSH
42967: LD_VAR 0 12
42971: PUSH
42972: LD_VAR 0 7
42976: ARRAY
42977: PUSH
42978: LD_INT 1
42980: ARRAY
42981: PPUSH
42982: LD_VAR 0 12
42986: PUSH
42987: LD_VAR 0 7
42991: ARRAY
42992: PUSH
42993: LD_INT 2
42995: ARRAY
42996: PPUSH
42997: CALL_OW 351
43001: OR
43002: IFFALSE 43008
// exit ;
43004: POP
43005: POP
43006: GO 43300
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43008: LD_ADDR_VAR 0 8
43012: PUSH
43013: LD_VAR 0 12
43017: PUSH
43018: LD_VAR 0 7
43022: ARRAY
43023: PUSH
43024: LD_INT 1
43026: ARRAY
43027: PPUSH
43028: LD_VAR 0 12
43032: PUSH
43033: LD_VAR 0 7
43037: ARRAY
43038: PUSH
43039: LD_INT 2
43041: ARRAY
43042: PPUSH
43043: CALL_OW 546
43047: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43048: LD_VAR 0 8
43052: PUSH
43053: LD_INT 1
43055: ARRAY
43056: PUSH
43057: LD_VAR 0 8
43061: PUSH
43062: LD_INT 2
43064: ARRAY
43065: PUSH
43066: LD_VAR 0 13
43070: PUSH
43071: LD_INT 2
43073: PLUS
43074: GREATER
43075: OR
43076: PUSH
43077: LD_VAR 0 8
43081: PUSH
43082: LD_INT 2
43084: ARRAY
43085: PUSH
43086: LD_VAR 0 13
43090: PUSH
43091: LD_INT 2
43093: MINUS
43094: LESS
43095: OR
43096: PUSH
43097: LD_VAR 0 8
43101: PUSH
43102: LD_INT 3
43104: ARRAY
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 8
43111: PUSH
43112: LD_INT 9
43114: PUSH
43115: LD_INT 10
43117: PUSH
43118: LD_INT 11
43120: PUSH
43121: LD_INT 12
43123: PUSH
43124: LD_INT 13
43126: PUSH
43127: LD_INT 16
43129: PUSH
43130: LD_INT 17
43132: PUSH
43133: LD_INT 18
43135: PUSH
43136: LD_INT 19
43138: PUSH
43139: LD_INT 20
43141: PUSH
43142: LD_INT 21
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: IN
43160: NOT
43161: OR
43162: PUSH
43163: LD_VAR 0 8
43167: PUSH
43168: LD_INT 5
43170: ARRAY
43171: NOT
43172: OR
43173: PUSH
43174: LD_VAR 0 8
43178: PUSH
43179: LD_INT 6
43181: ARRAY
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 7
43191: PUSH
43192: LD_INT 9
43194: PUSH
43195: LD_INT 10
43197: PUSH
43198: LD_INT 11
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: IN
43209: NOT
43210: OR
43211: IFFALSE 43217
// exit ;
43213: POP
43214: POP
43215: GO 43300
// end ;
43217: GO 42888
43219: POP
43220: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43221: LD_VAR 0 9
43225: PPUSH
43226: LD_VAR 0 3
43230: PPUSH
43231: LD_VAR 0 4
43235: PPUSH
43236: LD_INT 20
43238: PPUSH
43239: CALL 35246 0 4
43243: PUSH
43244: LD_INT 4
43246: ARRAY
43247: IFFALSE 43251
// exit ;
43249: GO 43300
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43251: LD_VAR 0 2
43255: PUSH
43256: LD_INT 29
43258: PUSH
43259: LD_INT 30
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: IN
43266: PUSH
43267: LD_VAR 0 3
43271: PPUSH
43272: LD_VAR 0 4
43276: PPUSH
43277: LD_VAR 0 9
43281: PPUSH
43282: CALL_OW 440
43286: NOT
43287: AND
43288: IFFALSE 43292
// exit ;
43290: GO 43300
// result := true ;
43292: LD_ADDR_VAR 0 6
43296: PUSH
43297: LD_INT 1
43299: ST_TO_ADDR
// end ;
43300: LD_VAR 0 6
43304: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43305: LD_INT 0
43307: PPUSH
43308: PPUSH
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
43318: PPUSH
43319: PPUSH
43320: PPUSH
43321: PPUSH
43322: PPUSH
43323: PPUSH
43324: PPUSH
43325: PPUSH
43326: PPUSH
43327: PPUSH
43328: PPUSH
43329: PPUSH
43330: PPUSH
43331: PPUSH
43332: PPUSH
43333: PPUSH
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
43345: PPUSH
43346: PPUSH
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
43351: PPUSH
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
43357: PPUSH
43358: PPUSH
43359: PPUSH
43360: PPUSH
43361: PPUSH
43362: PPUSH
43363: PPUSH
43364: PPUSH
// result = [ ] ;
43365: LD_ADDR_VAR 0 7
43369: PUSH
43370: EMPTY
43371: ST_TO_ADDR
// temp_list = [ ] ;
43372: LD_ADDR_VAR 0 9
43376: PUSH
43377: EMPTY
43378: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43379: LD_VAR 0 4
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: LD_INT 3
43395: PUSH
43396: LD_INT 4
43398: PUSH
43399: LD_INT 5
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: IN
43410: NOT
43411: PUSH
43412: LD_VAR 0 1
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: IN
43427: PUSH
43428: LD_VAR 0 5
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: LD_INT 3
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: LIST
43446: IN
43447: NOT
43448: AND
43449: OR
43450: IFFALSE 43454
// exit ;
43452: GO 61845
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43454: LD_VAR 0 1
43458: PUSH
43459: LD_INT 6
43461: PUSH
43462: LD_INT 7
43464: PUSH
43465: LD_INT 8
43467: PUSH
43468: LD_INT 13
43470: PUSH
43471: LD_INT 12
43473: PUSH
43474: LD_INT 15
43476: PUSH
43477: LD_INT 11
43479: PUSH
43480: LD_INT 14
43482: PUSH
43483: LD_INT 10
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: IN
43497: IFFALSE 43507
// btype = b_lab ;
43499: LD_ADDR_VAR 0 1
43503: PUSH
43504: LD_INT 6
43506: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43507: LD_VAR 0 6
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: IN
43526: NOT
43527: PUSH
43528: LD_VAR 0 1
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: LD_INT 6
43547: PUSH
43548: LD_INT 36
43550: PUSH
43551: LD_INT 4
43553: PUSH
43554: LD_INT 5
43556: PUSH
43557: LD_INT 31
43559: PUSH
43560: LD_INT 32
43562: PUSH
43563: LD_INT 33
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: IN
43579: NOT
43580: PUSH
43581: LD_VAR 0 6
43585: PUSH
43586: LD_INT 1
43588: EQUAL
43589: AND
43590: OR
43591: PUSH
43592: LD_VAR 0 1
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: LD_INT 3
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: IN
43607: NOT
43608: PUSH
43609: LD_VAR 0 6
43613: PUSH
43614: LD_INT 2
43616: EQUAL
43617: AND
43618: OR
43619: IFFALSE 43629
// mode = 0 ;
43621: LD_ADDR_VAR 0 6
43625: PUSH
43626: LD_INT 0
43628: ST_TO_ADDR
// case mode of 0 :
43629: LD_VAR 0 6
43633: PUSH
43634: LD_INT 0
43636: DOUBLE
43637: EQUAL
43638: IFTRUE 43642
43640: GO 55095
43642: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43643: LD_ADDR_VAR 0 11
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: LD_INT 3
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 3
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43836: LD_ADDR_VAR 0 12
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 3
43993: NEG
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 3
44004: NEG
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44032: LD_ADDR_VAR 0 13
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: LD_INT 3
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 3
44191: NEG
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: NEG
44204: PUSH
44205: LD_INT 3
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44231: LD_ADDR_VAR 0 14
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: LD_INT 3
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: LD_INT 3
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44427: LD_ADDR_VAR 0 15
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 3
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 3
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44620: LD_ADDR_VAR 0 16
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 2
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 3
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 3
44777: PUSH
44778: LD_INT 3
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: LD_INT 3
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44813: LD_ADDR_VAR 0 17
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45043: LD_ADDR_VAR 0 18
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45273: LD_ADDR_VAR 0 19
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45503: LD_ADDR_VAR 0 20
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45733: LD_ADDR_VAR 0 21
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45963: LD_ADDR_VAR 0 22
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46193: LD_ADDR_VAR 0 23
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: LD_INT 3
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46473: LD_ADDR_VAR 0 24
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 3
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 3
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46749: LD_ADDR_VAR 0 25
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 3
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 3
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47023: LD_ADDR_VAR 0 26
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 2
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 3
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47299: LD_ADDR_VAR 0 27
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: LD_INT 2
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 3
47532: NEG
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 3
47544: NEG
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47579: LD_ADDR_VAR 0 28
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: NEG
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 3
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47861: LD_ADDR_VAR 0 29
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: LD_INT 3
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 3
48105: NEG
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48140: LD_ADDR_VAR 0 30
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48418: LD_ADDR_VAR 0 31
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 3
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 3
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48696: LD_ADDR_VAR 0 32
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 3
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 3
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48974: LD_ADDR_VAR 0 33
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: LD_INT 3
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 3
49218: NEG
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49253: LD_ADDR_VAR 0 34
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 3
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 3
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: LD_INT 3
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 3
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49533: LD_ADDR_VAR 0 35
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49645: LD_ADDR_VAR 0 36
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49757: LD_ADDR_VAR 0 37
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49869: LD_ADDR_VAR 0 38
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49981: LD_ADDR_VAR 0 39
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50093: LD_ADDR_VAR 0 40
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50205: LD_ADDR_VAR 0 41
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: LD_INT 3
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 3
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 3
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: LD_INT 3
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 3
50479: NEG
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 3
50502: NEG
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: LD_INT 3
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50555: LD_ADDR_VAR 0 42
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 3
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 3
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 3
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 3
50852: NEG
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: LD_INT 3
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50905: LD_ADDR_VAR 0 43
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 3
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: LD_INT 3
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 3
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 3
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 3
51201: NEG
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51253: LD_ADDR_VAR 0 44
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 3
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 3
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 3
51527: NEG
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 3
51562: NEG
51563: PUSH
51564: LD_INT 3
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51603: LD_ADDR_VAR 0 45
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: LD_INT 3
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 3
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 2
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: LD_INT 3
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 3
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 3
51900: NEG
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 3
51912: NEG
51913: PUSH
51914: LD_INT 3
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51953: LD_ADDR_VAR 0 46
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 3
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 3
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 3
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 3
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52301: LD_ADDR_VAR 0 47
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52452: LD_ADDR_VAR 0 48
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52599: LD_ADDR_VAR 0 49
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52743: LD_ADDR_VAR 0 50
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52887: LD_ADDR_VAR 0 51
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53034: LD_ADDR_VAR 0 52
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 2
53149: NEG
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53185: LD_ADDR_VAR 0 53
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53415: LD_ADDR_VAR 0 54
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53645: LD_ADDR_VAR 0 55
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53875: LD_ADDR_VAR 0 56
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54105: LD_ADDR_VAR 0 57
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54335: LD_ADDR_VAR 0 58
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54565: LD_ADDR_VAR 0 59
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54653: LD_ADDR_VAR 0 60
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54741: LD_ADDR_VAR 0 61
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54829: LD_ADDR_VAR 0 62
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54917: LD_ADDR_VAR 0 63
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55005: LD_ADDR_VAR 0 64
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: ST_TO_ADDR
// end ; 1 :
55093: GO 60990
55095: LD_INT 1
55097: DOUBLE
55098: EQUAL
55099: IFTRUE 55103
55101: GO 57726
55103: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55104: LD_ADDR_VAR 0 11
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55148: LD_ADDR_VAR 0 12
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: LIST
55188: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55189: LD_ADDR_VAR 0 13
55193: PUSH
55194: LD_INT 3
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 3
55206: PUSH
55207: LD_INT 3
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: LD_INT 3
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: LIST
55228: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55229: LD_ADDR_VAR 0 14
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 3
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55270: LD_ADDR_VAR 0 15
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55314: LD_ADDR_VAR 0 16
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 3
55345: NEG
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55360: LD_ADDR_VAR 0 17
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 3
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: LIST
55403: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55404: LD_ADDR_VAR 0 18
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 3
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: LIST
55444: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55445: LD_ADDR_VAR 0 19
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55485: LD_ADDR_VAR 0 20
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55526: LD_ADDR_VAR 0 21
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: NEG
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: LIST
55569: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55570: LD_ADDR_VAR 0 22
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: LIST
55615: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55616: LD_ADDR_VAR 0 23
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 3
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 4
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 3
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55660: LD_ADDR_VAR 0 24
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 4
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55701: LD_ADDR_VAR 0 25
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: LD_INT 3
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 4
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: LD_INT 4
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55741: LD_ADDR_VAR 0 26
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 3
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: LD_INT 4
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 3
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: LIST
55781: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55782: LD_ADDR_VAR 0 27
55786: PUSH
55787: LD_INT 3
55789: NEG
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 4
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: LIST
55825: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55826: LD_ADDR_VAR 0 28
55830: PUSH
55831: LD_INT 3
55833: NEG
55834: PUSH
55835: LD_INT 3
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: LD_INT 4
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 4
55857: NEG
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55872: LD_ADDR_VAR 0 29
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 3
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 3
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 4
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 4
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 3
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 5
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 5
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 4
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: LD_INT 6
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 6
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 5
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56027: LD_ADDR_VAR 0 30
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 4
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 4
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 4
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 5
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 5
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 5
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 6
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 6
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56170: LD_ADDR_VAR 0 31
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: LD_INT 3
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 3
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 4
56207: PUSH
56208: LD_INT 3
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 4
56217: PUSH
56218: LD_INT 4
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: LD_INT 4
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 5
56237: PUSH
56238: LD_INT 4
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 5
56247: PUSH
56248: LD_INT 5
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 4
56257: PUSH
56258: LD_INT 5
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 6
56267: PUSH
56268: LD_INT 5
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 6
56277: PUSH
56278: LD_INT 6
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 5
56287: PUSH
56288: LD_INT 6
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56309: LD_ADDR_VAR 0 32
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 4
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 5
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 5
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 4
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: LD_INT 6
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 6
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: LD_INT 5
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56452: LD_ADDR_VAR 0 33
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 4
56504: NEG
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 4
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 4
56527: NEG
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 5
56538: NEG
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 5
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 5
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 6
56572: NEG
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 6
56583: NEG
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56607: LD_ADDR_VAR 0 34
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: LD_INT 4
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 4
56662: NEG
56663: PUSH
56664: LD_INT 3
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 4
56674: NEG
56675: PUSH
56676: LD_INT 4
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 4
56686: NEG
56687: PUSH
56688: LD_INT 5
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 5
56698: NEG
56699: PUSH
56700: LD_INT 4
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 5
56710: NEG
56711: PUSH
56712: LD_INT 5
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 5
56722: NEG
56723: PUSH
56724: LD_INT 6
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 6
56734: NEG
56735: PUSH
56736: LD_INT 5
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 6
56746: NEG
56747: PUSH
56748: LD_INT 6
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56770: LD_ADDR_VAR 0 41
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: LD_INT 3
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56814: LD_ADDR_VAR 0 42
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: LIST
56854: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56855: LD_ADDR_VAR 0 43
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56895: LD_ADDR_VAR 0 44
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56936: LD_ADDR_VAR 0 45
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56980: LD_ADDR_VAR 0 46
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 3
57011: NEG
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: LIST
57025: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57026: LD_ADDR_VAR 0 47
57030: PUSH
57031: LD_INT 2
57033: NEG
57034: PUSH
57035: LD_INT 3
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 3
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57059: LD_ADDR_VAR 0 48
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57090: LD_ADDR_VAR 0 49
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57119: LD_ADDR_VAR 0 50
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 3
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57148: LD_ADDR_VAR 0 51
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57179: LD_ADDR_VAR 0 52
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57212: LD_ADDR_VAR 0 53
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57256: LD_ADDR_VAR 0 54
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 3
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57297: LD_ADDR_VAR 0 55
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57337: LD_ADDR_VAR 0 56
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: LIST
57377: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57378: LD_ADDR_VAR 0 57
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57422: LD_ADDR_VAR 0 58
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: LD_INT 3
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: NEG
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: LD_INT 3
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57468: LD_ADDR_VAR 0 59
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: LIST
57511: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57512: LD_ADDR_VAR 0 60
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: LIST
57552: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57553: LD_ADDR_VAR 0 61
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57593: LD_ADDR_VAR 0 62
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57634: LD_ADDR_VAR 0 63
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57678: LD_ADDR_VAR 0 64
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// end ; 2 :
57724: GO 60990
57726: LD_INT 2
57728: DOUBLE
57729: EQUAL
57730: IFTRUE 57734
57732: GO 60989
57734: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57735: LD_ADDR_VAR 0 29
57739: PUSH
57740: LD_INT 4
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 5
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 5
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 4
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 5
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 3
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 4
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 4
57865: PUSH
57866: LD_INT 4
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 3
57875: PUSH
57876: LD_INT 4
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 4
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: LD_INT 4
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 4
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 4
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: LD_INT 5
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 5
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: LD_INT 4
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 5
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 3
58018: NEG
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: NEG
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 4
58074: NEG
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 4
58085: NEG
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 4
58097: NEG
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 4
58120: NEG
58121: PUSH
58122: LD_INT 4
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 4
58132: NEG
58133: PUSH
58134: LD_INT 5
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: LD_INT 4
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 4
58168: NEG
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 5
58180: NEG
58181: PUSH
58182: LD_INT 4
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 5
58192: NEG
58193: PUSH
58194: LD_INT 5
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 3
58204: NEG
58205: PUSH
58206: LD_INT 5
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 5
58216: NEG
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58273: LD_ADDR_VAR 0 30
58277: PUSH
58278: LD_INT 4
58280: PUSH
58281: LD_INT 4
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 4
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 5
58300: PUSH
58301: LD_INT 4
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 5
58310: PUSH
58311: LD_INT 5
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 4
58320: PUSH
58321: LD_INT 5
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 3
58330: PUSH
58331: LD_INT 4
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 3
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 5
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: LD_INT 5
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 3
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 4
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 4
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 3
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: LD_INT 4
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 4
58463: NEG
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 4
58474: NEG
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: NEG
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 3
58497: NEG
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 4
58508: NEG
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 5
58519: NEG
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 5
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 5
58542: NEG
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 3
58565: NEG
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: NEG
58578: PUSH
58579: LD_INT 4
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: LD_INT 3
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 3
58613: NEG
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 4
58625: NEG
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 4
58637: NEG
58638: PUSH
58639: LD_INT 4
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: LD_INT 4
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 4
58661: NEG
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 4
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 5
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 4
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 3
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 4
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 5
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: LD_INT 5
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58820: LD_ADDR_VAR 0 31
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 4
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: LD_INT 4
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 5
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 5
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: LD_INT 4
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: LD_INT 5
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 3
58965: NEG
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 4
58976: NEG
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 4
58987: NEG
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 4
58999: NEG
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 4
59022: NEG
59023: PUSH
59024: LD_INT 4
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 4
59034: NEG
59035: PUSH
59036: LD_INT 5
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 3
59046: NEG
59047: PUSH
59048: LD_INT 4
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 3
59058: NEG
59059: PUSH
59060: LD_INT 3
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 4
59070: NEG
59071: PUSH
59072: LD_INT 3
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 5
59082: NEG
59083: PUSH
59084: LD_INT 4
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 5
59094: NEG
59095: PUSH
59096: LD_INT 5
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: NEG
59107: PUSH
59108: LD_INT 5
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 5
59118: NEG
59119: PUSH
59120: LD_INT 3
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 3
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: LD_INT 4
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: LD_INT 3
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 4
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: LD_INT 4
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 4
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 4
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 5
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 5
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 3
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: LD_INT 2
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 5
59315: PUSH
59316: LD_INT 2
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59370: LD_ADDR_VAR 0 32
59374: PUSH
59375: LD_INT 4
59377: NEG
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 4
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 5
59433: NEG
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 5
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 5
59456: NEG
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 3
59468: NEG
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: LD_INT 3
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: LD_INT 4
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: LD_INT 2
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 3
59527: NEG
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 4
59539: NEG
59540: PUSH
59541: LD_INT 3
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 4
59551: NEG
59552: PUSH
59553: LD_INT 4
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 4
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 4
59575: NEG
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 4
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 5
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 4
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 3
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: LD_INT 4
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 5
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: NEG
59678: PUSH
59679: LD_INT 5
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 3
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 3
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 4
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 4
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 3
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 2
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 4
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 4
59782: PUSH
59783: LD_INT 4
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 4
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 5
59802: PUSH
59803: LD_INT 4
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 5
59812: PUSH
59813: LD_INT 5
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 4
59822: PUSH
59823: LD_INT 5
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 3
59832: PUSH
59833: LD_INT 4
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: LD_INT 3
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 5
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: LD_INT 5
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59917: LD_ADDR_VAR 0 33
59921: PUSH
59922: LD_INT 4
59924: NEG
59925: PUSH
59926: LD_INT 4
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 4
59936: NEG
59937: PUSH
59938: LD_INT 5
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: NEG
59949: PUSH
59950: LD_INT 4
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 3
59960: NEG
59961: PUSH
59962: LD_INT 3
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 4
59972: NEG
59973: PUSH
59974: LD_INT 3
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 5
59984: NEG
59985: PUSH
59986: LD_INT 4
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 5
59996: NEG
59997: PUSH
59998: LD_INT 5
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 3
60008: NEG
60009: PUSH
60010: LD_INT 5
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 5
60020: NEG
60021: PUSH
60022: LD_INT 3
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: LD_INT 3
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 4
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: LD_INT 3
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 4
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 2
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 4
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 4
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 4
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 5
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 5
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 4
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 3
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 5
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 4
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 4
60257: PUSH
60258: LD_INT 4
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 3
60267: PUSH
60268: LD_INT 4
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: LD_INT 3
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 4
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: LD_INT 4
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 4
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 4
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 5
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 5
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 4
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: LD_INT 5
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: LD_INT 3
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60455: LD_ADDR_VAR 0 34
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 4
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: LD_INT 5
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: LD_INT 4
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: LD_INT 4
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: LD_INT 5
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: LD_INT 3
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: LD_INT 5
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 3
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 4
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 4
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 3
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 4
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 4
60657: PUSH
60658: LD_INT 4
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 4
60667: PUSH
60668: LD_INT 3
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 5
60677: PUSH
60678: LD_INT 4
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 5
60687: PUSH
60688: LD_INT 5
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 4
60697: PUSH
60698: LD_INT 5
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 3
60707: PUSH
60708: LD_INT 4
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 5
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: LD_INT 5
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 3
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: LD_INT 3
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: LD_INT 4
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 2
60819: PUSH
60820: LD_INT 4
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 4
60840: NEG
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 4
60851: NEG
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 3
60863: NEG
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: NEG
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 4
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 5
60896: NEG
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 5
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 5
60919: NEG
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 3
60931: NEG
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: ST_TO_ADDR
// end ; end ;
60987: GO 60990
60989: POP
// case btype of b_depot , b_warehouse :
60990: LD_VAR 0 1
60994: PUSH
60995: LD_INT 0
60997: DOUBLE
60998: EQUAL
60999: IFTRUE 61009
61001: LD_INT 1
61003: DOUBLE
61004: EQUAL
61005: IFTRUE 61009
61007: GO 61210
61009: POP
// case nation of nation_american :
61010: LD_VAR 0 5
61014: PUSH
61015: LD_INT 1
61017: DOUBLE
61018: EQUAL
61019: IFTRUE 61023
61021: GO 61079
61023: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61024: LD_ADDR_VAR 0 9
61028: PUSH
61029: LD_VAR 0 11
61033: PUSH
61034: LD_VAR 0 12
61038: PUSH
61039: LD_VAR 0 13
61043: PUSH
61044: LD_VAR 0 14
61048: PUSH
61049: LD_VAR 0 15
61053: PUSH
61054: LD_VAR 0 16
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: PUSH
61067: LD_VAR 0 4
61071: PUSH
61072: LD_INT 1
61074: PLUS
61075: ARRAY
61076: ST_TO_ADDR
61077: GO 61208
61079: LD_INT 2
61081: DOUBLE
61082: EQUAL
61083: IFTRUE 61087
61085: GO 61143
61087: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61088: LD_ADDR_VAR 0 9
61092: PUSH
61093: LD_VAR 0 17
61097: PUSH
61098: LD_VAR 0 18
61102: PUSH
61103: LD_VAR 0 19
61107: PUSH
61108: LD_VAR 0 20
61112: PUSH
61113: LD_VAR 0 21
61117: PUSH
61118: LD_VAR 0 22
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: PUSH
61131: LD_VAR 0 4
61135: PUSH
61136: LD_INT 1
61138: PLUS
61139: ARRAY
61140: ST_TO_ADDR
61141: GO 61208
61143: LD_INT 3
61145: DOUBLE
61146: EQUAL
61147: IFTRUE 61151
61149: GO 61207
61151: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61152: LD_ADDR_VAR 0 9
61156: PUSH
61157: LD_VAR 0 23
61161: PUSH
61162: LD_VAR 0 24
61166: PUSH
61167: LD_VAR 0 25
61171: PUSH
61172: LD_VAR 0 26
61176: PUSH
61177: LD_VAR 0 27
61181: PUSH
61182: LD_VAR 0 28
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: PUSH
61195: LD_VAR 0 4
61199: PUSH
61200: LD_INT 1
61202: PLUS
61203: ARRAY
61204: ST_TO_ADDR
61205: GO 61208
61207: POP
61208: GO 61763
61210: LD_INT 2
61212: DOUBLE
61213: EQUAL
61214: IFTRUE 61224
61216: LD_INT 3
61218: DOUBLE
61219: EQUAL
61220: IFTRUE 61224
61222: GO 61280
61224: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61225: LD_ADDR_VAR 0 9
61229: PUSH
61230: LD_VAR 0 29
61234: PUSH
61235: LD_VAR 0 30
61239: PUSH
61240: LD_VAR 0 31
61244: PUSH
61245: LD_VAR 0 32
61249: PUSH
61250: LD_VAR 0 33
61254: PUSH
61255: LD_VAR 0 34
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: PUSH
61268: LD_VAR 0 4
61272: PUSH
61273: LD_INT 1
61275: PLUS
61276: ARRAY
61277: ST_TO_ADDR
61278: GO 61763
61280: LD_INT 16
61282: DOUBLE
61283: EQUAL
61284: IFTRUE 61342
61286: LD_INT 17
61288: DOUBLE
61289: EQUAL
61290: IFTRUE 61342
61292: LD_INT 18
61294: DOUBLE
61295: EQUAL
61296: IFTRUE 61342
61298: LD_INT 19
61300: DOUBLE
61301: EQUAL
61302: IFTRUE 61342
61304: LD_INT 22
61306: DOUBLE
61307: EQUAL
61308: IFTRUE 61342
61310: LD_INT 20
61312: DOUBLE
61313: EQUAL
61314: IFTRUE 61342
61316: LD_INT 21
61318: DOUBLE
61319: EQUAL
61320: IFTRUE 61342
61322: LD_INT 23
61324: DOUBLE
61325: EQUAL
61326: IFTRUE 61342
61328: LD_INT 24
61330: DOUBLE
61331: EQUAL
61332: IFTRUE 61342
61334: LD_INT 25
61336: DOUBLE
61337: EQUAL
61338: IFTRUE 61342
61340: GO 61398
61342: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61343: LD_ADDR_VAR 0 9
61347: PUSH
61348: LD_VAR 0 35
61352: PUSH
61353: LD_VAR 0 36
61357: PUSH
61358: LD_VAR 0 37
61362: PUSH
61363: LD_VAR 0 38
61367: PUSH
61368: LD_VAR 0 39
61372: PUSH
61373: LD_VAR 0 40
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: PUSH
61386: LD_VAR 0 4
61390: PUSH
61391: LD_INT 1
61393: PLUS
61394: ARRAY
61395: ST_TO_ADDR
61396: GO 61763
61398: LD_INT 6
61400: DOUBLE
61401: EQUAL
61402: IFTRUE 61454
61404: LD_INT 7
61406: DOUBLE
61407: EQUAL
61408: IFTRUE 61454
61410: LD_INT 8
61412: DOUBLE
61413: EQUAL
61414: IFTRUE 61454
61416: LD_INT 13
61418: DOUBLE
61419: EQUAL
61420: IFTRUE 61454
61422: LD_INT 12
61424: DOUBLE
61425: EQUAL
61426: IFTRUE 61454
61428: LD_INT 15
61430: DOUBLE
61431: EQUAL
61432: IFTRUE 61454
61434: LD_INT 11
61436: DOUBLE
61437: EQUAL
61438: IFTRUE 61454
61440: LD_INT 14
61442: DOUBLE
61443: EQUAL
61444: IFTRUE 61454
61446: LD_INT 10
61448: DOUBLE
61449: EQUAL
61450: IFTRUE 61454
61452: GO 61510
61454: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61455: LD_ADDR_VAR 0 9
61459: PUSH
61460: LD_VAR 0 41
61464: PUSH
61465: LD_VAR 0 42
61469: PUSH
61470: LD_VAR 0 43
61474: PUSH
61475: LD_VAR 0 44
61479: PUSH
61480: LD_VAR 0 45
61484: PUSH
61485: LD_VAR 0 46
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: PUSH
61498: LD_VAR 0 4
61502: PUSH
61503: LD_INT 1
61505: PLUS
61506: ARRAY
61507: ST_TO_ADDR
61508: GO 61763
61510: LD_INT 36
61512: DOUBLE
61513: EQUAL
61514: IFTRUE 61518
61516: GO 61574
61518: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61519: LD_ADDR_VAR 0 9
61523: PUSH
61524: LD_VAR 0 47
61528: PUSH
61529: LD_VAR 0 48
61533: PUSH
61534: LD_VAR 0 49
61538: PUSH
61539: LD_VAR 0 50
61543: PUSH
61544: LD_VAR 0 51
61548: PUSH
61549: LD_VAR 0 52
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: PUSH
61562: LD_VAR 0 4
61566: PUSH
61567: LD_INT 1
61569: PLUS
61570: ARRAY
61571: ST_TO_ADDR
61572: GO 61763
61574: LD_INT 4
61576: DOUBLE
61577: EQUAL
61578: IFTRUE 61600
61580: LD_INT 5
61582: DOUBLE
61583: EQUAL
61584: IFTRUE 61600
61586: LD_INT 34
61588: DOUBLE
61589: EQUAL
61590: IFTRUE 61600
61592: LD_INT 37
61594: DOUBLE
61595: EQUAL
61596: IFTRUE 61600
61598: GO 61656
61600: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61601: LD_ADDR_VAR 0 9
61605: PUSH
61606: LD_VAR 0 53
61610: PUSH
61611: LD_VAR 0 54
61615: PUSH
61616: LD_VAR 0 55
61620: PUSH
61621: LD_VAR 0 56
61625: PUSH
61626: LD_VAR 0 57
61630: PUSH
61631: LD_VAR 0 58
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: PUSH
61644: LD_VAR 0 4
61648: PUSH
61649: LD_INT 1
61651: PLUS
61652: ARRAY
61653: ST_TO_ADDR
61654: GO 61763
61656: LD_INT 31
61658: DOUBLE
61659: EQUAL
61660: IFTRUE 61706
61662: LD_INT 32
61664: DOUBLE
61665: EQUAL
61666: IFTRUE 61706
61668: LD_INT 33
61670: DOUBLE
61671: EQUAL
61672: IFTRUE 61706
61674: LD_INT 27
61676: DOUBLE
61677: EQUAL
61678: IFTRUE 61706
61680: LD_INT 26
61682: DOUBLE
61683: EQUAL
61684: IFTRUE 61706
61686: LD_INT 28
61688: DOUBLE
61689: EQUAL
61690: IFTRUE 61706
61692: LD_INT 29
61694: DOUBLE
61695: EQUAL
61696: IFTRUE 61706
61698: LD_INT 30
61700: DOUBLE
61701: EQUAL
61702: IFTRUE 61706
61704: GO 61762
61706: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61707: LD_ADDR_VAR 0 9
61711: PUSH
61712: LD_VAR 0 59
61716: PUSH
61717: LD_VAR 0 60
61721: PUSH
61722: LD_VAR 0 61
61726: PUSH
61727: LD_VAR 0 62
61731: PUSH
61732: LD_VAR 0 63
61736: PUSH
61737: LD_VAR 0 64
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: PUSH
61750: LD_VAR 0 4
61754: PUSH
61755: LD_INT 1
61757: PLUS
61758: ARRAY
61759: ST_TO_ADDR
61760: GO 61763
61762: POP
// temp_list2 = [ ] ;
61763: LD_ADDR_VAR 0 10
61767: PUSH
61768: EMPTY
61769: ST_TO_ADDR
// for i in temp_list do
61770: LD_ADDR_VAR 0 8
61774: PUSH
61775: LD_VAR 0 9
61779: PUSH
61780: FOR_IN
61781: IFFALSE 61833
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61783: LD_ADDR_VAR 0 10
61787: PUSH
61788: LD_VAR 0 10
61792: PUSH
61793: LD_VAR 0 8
61797: PUSH
61798: LD_INT 1
61800: ARRAY
61801: PUSH
61802: LD_VAR 0 2
61806: PLUS
61807: PUSH
61808: LD_VAR 0 8
61812: PUSH
61813: LD_INT 2
61815: ARRAY
61816: PUSH
61817: LD_VAR 0 3
61821: PLUS
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: EMPTY
61828: LIST
61829: ADD
61830: ST_TO_ADDR
61831: GO 61780
61833: POP
61834: POP
// result = temp_list2 ;
61835: LD_ADDR_VAR 0 7
61839: PUSH
61840: LD_VAR 0 10
61844: ST_TO_ADDR
// end ;
61845: LD_VAR 0 7
61849: RET
// export function EnemyInRange ( unit , dist ) ; begin
61850: LD_INT 0
61852: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61853: LD_ADDR_VAR 0 3
61857: PUSH
61858: LD_VAR 0 1
61862: PPUSH
61863: CALL_OW 255
61867: PPUSH
61868: LD_VAR 0 1
61872: PPUSH
61873: CALL_OW 250
61877: PPUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: CALL_OW 251
61887: PPUSH
61888: LD_VAR 0 2
61892: PPUSH
61893: CALL 35246 0 4
61897: PUSH
61898: LD_INT 4
61900: ARRAY
61901: ST_TO_ADDR
// end ;
61902: LD_VAR 0 3
61906: RET
// export function PlayerSeeMe ( unit ) ; begin
61907: LD_INT 0
61909: PPUSH
// result := See ( your_side , unit ) ;
61910: LD_ADDR_VAR 0 2
61914: PUSH
61915: LD_OWVAR 2
61919: PPUSH
61920: LD_VAR 0 1
61924: PPUSH
61925: CALL_OW 292
61929: ST_TO_ADDR
// end ;
61930: LD_VAR 0 2
61934: RET
// export function ReverseDir ( unit ) ; begin
61935: LD_INT 0
61937: PPUSH
// if not unit then
61938: LD_VAR 0 1
61942: NOT
61943: IFFALSE 61947
// exit ;
61945: GO 61970
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61947: LD_ADDR_VAR 0 2
61951: PUSH
61952: LD_VAR 0 1
61956: PPUSH
61957: CALL_OW 254
61961: PUSH
61962: LD_INT 3
61964: PLUS
61965: PUSH
61966: LD_INT 6
61968: MOD
61969: ST_TO_ADDR
// end ;
61970: LD_VAR 0 2
61974: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61975: LD_INT 0
61977: PPUSH
61978: PPUSH
61979: PPUSH
61980: PPUSH
61981: PPUSH
// if not hexes then
61982: LD_VAR 0 2
61986: NOT
61987: IFFALSE 61991
// exit ;
61989: GO 62139
// dist := 9999 ;
61991: LD_ADDR_VAR 0 5
61995: PUSH
61996: LD_INT 9999
61998: ST_TO_ADDR
// for i = 1 to hexes do
61999: LD_ADDR_VAR 0 4
62003: PUSH
62004: DOUBLE
62005: LD_INT 1
62007: DEC
62008: ST_TO_ADDR
62009: LD_VAR 0 2
62013: PUSH
62014: FOR_TO
62015: IFFALSE 62127
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62017: LD_VAR 0 1
62021: PPUSH
62022: LD_VAR 0 2
62026: PUSH
62027: LD_VAR 0 4
62031: ARRAY
62032: PUSH
62033: LD_INT 1
62035: ARRAY
62036: PPUSH
62037: LD_VAR 0 2
62041: PUSH
62042: LD_VAR 0 4
62046: ARRAY
62047: PUSH
62048: LD_INT 2
62050: ARRAY
62051: PPUSH
62052: CALL_OW 297
62056: PUSH
62057: LD_VAR 0 5
62061: LESS
62062: IFFALSE 62125
// begin hex := hexes [ i ] ;
62064: LD_ADDR_VAR 0 7
62068: PUSH
62069: LD_VAR 0 2
62073: PUSH
62074: LD_VAR 0 4
62078: ARRAY
62079: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62080: LD_ADDR_VAR 0 5
62084: PUSH
62085: LD_VAR 0 1
62089: PPUSH
62090: LD_VAR 0 2
62094: PUSH
62095: LD_VAR 0 4
62099: ARRAY
62100: PUSH
62101: LD_INT 1
62103: ARRAY
62104: PPUSH
62105: LD_VAR 0 2
62109: PUSH
62110: LD_VAR 0 4
62114: ARRAY
62115: PUSH
62116: LD_INT 2
62118: ARRAY
62119: PPUSH
62120: CALL_OW 297
62124: ST_TO_ADDR
// end ; end ;
62125: GO 62014
62127: POP
62128: POP
// result := hex ;
62129: LD_ADDR_VAR 0 3
62133: PUSH
62134: LD_VAR 0 7
62138: ST_TO_ADDR
// end ;
62139: LD_VAR 0 3
62143: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62144: LD_INT 0
62146: PPUSH
62147: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62148: LD_VAR 0 1
62152: NOT
62153: PUSH
62154: LD_VAR 0 1
62158: PUSH
62159: LD_INT 21
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 23
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PPUSH
62183: CALL_OW 69
62187: IN
62188: NOT
62189: OR
62190: IFFALSE 62194
// exit ;
62192: GO 62241
// for i = 1 to 3 do
62194: LD_ADDR_VAR 0 3
62198: PUSH
62199: DOUBLE
62200: LD_INT 1
62202: DEC
62203: ST_TO_ADDR
62204: LD_INT 3
62206: PUSH
62207: FOR_TO
62208: IFFALSE 62239
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62210: LD_VAR 0 1
62214: PPUSH
62215: CALL_OW 250
62219: PPUSH
62220: LD_VAR 0 1
62224: PPUSH
62225: CALL_OW 251
62229: PPUSH
62230: LD_INT 1
62232: PPUSH
62233: CALL_OW 453
62237: GO 62207
62239: POP
62240: POP
// end ;
62241: LD_VAR 0 2
62245: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62246: LD_INT 0
62248: PPUSH
62249: PPUSH
62250: PPUSH
62251: PPUSH
62252: PPUSH
62253: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62254: LD_VAR 0 1
62258: NOT
62259: PUSH
62260: LD_VAR 0 2
62264: NOT
62265: OR
62266: PUSH
62267: LD_VAR 0 1
62271: PPUSH
62272: CALL_OW 314
62276: OR
62277: IFFALSE 62281
// exit ;
62279: GO 62722
// x := GetX ( enemy_unit ) ;
62281: LD_ADDR_VAR 0 7
62285: PUSH
62286: LD_VAR 0 2
62290: PPUSH
62291: CALL_OW 250
62295: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62296: LD_ADDR_VAR 0 8
62300: PUSH
62301: LD_VAR 0 2
62305: PPUSH
62306: CALL_OW 251
62310: ST_TO_ADDR
// if not x or not y then
62311: LD_VAR 0 7
62315: NOT
62316: PUSH
62317: LD_VAR 0 8
62321: NOT
62322: OR
62323: IFFALSE 62327
// exit ;
62325: GO 62722
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62327: LD_ADDR_VAR 0 6
62331: PUSH
62332: LD_VAR 0 7
62336: PPUSH
62337: LD_INT 0
62339: PPUSH
62340: LD_INT 4
62342: PPUSH
62343: CALL_OW 272
62347: PUSH
62348: LD_VAR 0 8
62352: PPUSH
62353: LD_INT 0
62355: PPUSH
62356: LD_INT 4
62358: PPUSH
62359: CALL_OW 273
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_VAR 0 7
62372: PPUSH
62373: LD_INT 1
62375: PPUSH
62376: LD_INT 4
62378: PPUSH
62379: CALL_OW 272
62383: PUSH
62384: LD_VAR 0 8
62388: PPUSH
62389: LD_INT 1
62391: PPUSH
62392: LD_INT 4
62394: PPUSH
62395: CALL_OW 273
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_VAR 0 7
62408: PPUSH
62409: LD_INT 2
62411: PPUSH
62412: LD_INT 4
62414: PPUSH
62415: CALL_OW 272
62419: PUSH
62420: LD_VAR 0 8
62424: PPUSH
62425: LD_INT 2
62427: PPUSH
62428: LD_INT 4
62430: PPUSH
62431: CALL_OW 273
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_VAR 0 7
62444: PPUSH
62445: LD_INT 3
62447: PPUSH
62448: LD_INT 4
62450: PPUSH
62451: CALL_OW 272
62455: PUSH
62456: LD_VAR 0 8
62460: PPUSH
62461: LD_INT 3
62463: PPUSH
62464: LD_INT 4
62466: PPUSH
62467: CALL_OW 273
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_VAR 0 7
62480: PPUSH
62481: LD_INT 4
62483: PPUSH
62484: LD_INT 4
62486: PPUSH
62487: CALL_OW 272
62491: PUSH
62492: LD_VAR 0 8
62496: PPUSH
62497: LD_INT 4
62499: PPUSH
62500: LD_INT 4
62502: PPUSH
62503: CALL_OW 273
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_VAR 0 7
62516: PPUSH
62517: LD_INT 5
62519: PPUSH
62520: LD_INT 4
62522: PPUSH
62523: CALL_OW 272
62527: PUSH
62528: LD_VAR 0 8
62532: PPUSH
62533: LD_INT 5
62535: PPUSH
62536: LD_INT 4
62538: PPUSH
62539: CALL_OW 273
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: ST_TO_ADDR
// for i = tmp downto 1 do
62556: LD_ADDR_VAR 0 4
62560: PUSH
62561: DOUBLE
62562: LD_VAR 0 6
62566: INC
62567: ST_TO_ADDR
62568: LD_INT 1
62570: PUSH
62571: FOR_DOWNTO
62572: IFFALSE 62673
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62574: LD_VAR 0 6
62578: PUSH
62579: LD_VAR 0 4
62583: ARRAY
62584: PUSH
62585: LD_INT 1
62587: ARRAY
62588: PPUSH
62589: LD_VAR 0 6
62593: PUSH
62594: LD_VAR 0 4
62598: ARRAY
62599: PUSH
62600: LD_INT 2
62602: ARRAY
62603: PPUSH
62604: CALL_OW 488
62608: NOT
62609: PUSH
62610: LD_VAR 0 6
62614: PUSH
62615: LD_VAR 0 4
62619: ARRAY
62620: PUSH
62621: LD_INT 1
62623: ARRAY
62624: PPUSH
62625: LD_VAR 0 6
62629: PUSH
62630: LD_VAR 0 4
62634: ARRAY
62635: PUSH
62636: LD_INT 2
62638: ARRAY
62639: PPUSH
62640: CALL_OW 428
62644: PUSH
62645: LD_INT 0
62647: NONEQUAL
62648: OR
62649: IFFALSE 62671
// tmp := Delete ( tmp , i ) ;
62651: LD_ADDR_VAR 0 6
62655: PUSH
62656: LD_VAR 0 6
62660: PPUSH
62661: LD_VAR 0 4
62665: PPUSH
62666: CALL_OW 3
62670: ST_TO_ADDR
62671: GO 62571
62673: POP
62674: POP
// j := GetClosestHex ( unit , tmp ) ;
62675: LD_ADDR_VAR 0 5
62679: PUSH
62680: LD_VAR 0 1
62684: PPUSH
62685: LD_VAR 0 6
62689: PPUSH
62690: CALL 61975 0 2
62694: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62695: LD_VAR 0 1
62699: PPUSH
62700: LD_VAR 0 5
62704: PUSH
62705: LD_INT 1
62707: ARRAY
62708: PPUSH
62709: LD_VAR 0 5
62713: PUSH
62714: LD_INT 2
62716: ARRAY
62717: PPUSH
62718: CALL_OW 111
// end ;
62722: LD_VAR 0 3
62726: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62727: LD_INT 0
62729: PPUSH
62730: PPUSH
62731: PPUSH
// uc_side = 0 ;
62732: LD_ADDR_OWVAR 20
62736: PUSH
62737: LD_INT 0
62739: ST_TO_ADDR
// uc_nation = 0 ;
62740: LD_ADDR_OWVAR 21
62744: PUSH
62745: LD_INT 0
62747: ST_TO_ADDR
// InitHc_All ( ) ;
62748: CALL_OW 584
// InitVc ;
62752: CALL_OW 20
// if mastodonts then
62756: LD_VAR 0 6
62760: IFFALSE 62827
// for i = 1 to mastodonts do
62762: LD_ADDR_VAR 0 11
62766: PUSH
62767: DOUBLE
62768: LD_INT 1
62770: DEC
62771: ST_TO_ADDR
62772: LD_VAR 0 6
62776: PUSH
62777: FOR_TO
62778: IFFALSE 62825
// begin vc_chassis := 31 ;
62780: LD_ADDR_OWVAR 37
62784: PUSH
62785: LD_INT 31
62787: ST_TO_ADDR
// vc_control := control_rider ;
62788: LD_ADDR_OWVAR 38
62792: PUSH
62793: LD_INT 4
62795: ST_TO_ADDR
// animal := CreateVehicle ;
62796: LD_ADDR_VAR 0 12
62800: PUSH
62801: CALL_OW 45
62805: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62806: LD_VAR 0 12
62810: PPUSH
62811: LD_VAR 0 8
62815: PPUSH
62816: LD_INT 0
62818: PPUSH
62819: CALL 65015 0 3
// end ;
62823: GO 62777
62825: POP
62826: POP
// if horses then
62827: LD_VAR 0 5
62831: IFFALSE 62898
// for i = 1 to horses do
62833: LD_ADDR_VAR 0 11
62837: PUSH
62838: DOUBLE
62839: LD_INT 1
62841: DEC
62842: ST_TO_ADDR
62843: LD_VAR 0 5
62847: PUSH
62848: FOR_TO
62849: IFFALSE 62896
// begin hc_class := 21 ;
62851: LD_ADDR_OWVAR 28
62855: PUSH
62856: LD_INT 21
62858: ST_TO_ADDR
// hc_gallery :=  ;
62859: LD_ADDR_OWVAR 33
62863: PUSH
62864: LD_STRING 
62866: ST_TO_ADDR
// animal := CreateHuman ;
62867: LD_ADDR_VAR 0 12
62871: PUSH
62872: CALL_OW 44
62876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62877: LD_VAR 0 12
62881: PPUSH
62882: LD_VAR 0 8
62886: PPUSH
62887: LD_INT 0
62889: PPUSH
62890: CALL 65015 0 3
// end ;
62894: GO 62848
62896: POP
62897: POP
// if birds then
62898: LD_VAR 0 1
62902: IFFALSE 62969
// for i = 1 to birds do
62904: LD_ADDR_VAR 0 11
62908: PUSH
62909: DOUBLE
62910: LD_INT 1
62912: DEC
62913: ST_TO_ADDR
62914: LD_VAR 0 1
62918: PUSH
62919: FOR_TO
62920: IFFALSE 62967
// begin hc_class = 18 ;
62922: LD_ADDR_OWVAR 28
62926: PUSH
62927: LD_INT 18
62929: ST_TO_ADDR
// hc_gallery =  ;
62930: LD_ADDR_OWVAR 33
62934: PUSH
62935: LD_STRING 
62937: ST_TO_ADDR
// animal := CreateHuman ;
62938: LD_ADDR_VAR 0 12
62942: PUSH
62943: CALL_OW 44
62947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62948: LD_VAR 0 12
62952: PPUSH
62953: LD_VAR 0 8
62957: PPUSH
62958: LD_INT 0
62960: PPUSH
62961: CALL 65015 0 3
// end ;
62965: GO 62919
62967: POP
62968: POP
// if tigers then
62969: LD_VAR 0 2
62973: IFFALSE 63057
// for i = 1 to tigers do
62975: LD_ADDR_VAR 0 11
62979: PUSH
62980: DOUBLE
62981: LD_INT 1
62983: DEC
62984: ST_TO_ADDR
62985: LD_VAR 0 2
62989: PUSH
62990: FOR_TO
62991: IFFALSE 63055
// begin hc_class = class_tiger ;
62993: LD_ADDR_OWVAR 28
62997: PUSH
62998: LD_INT 14
63000: ST_TO_ADDR
// hc_gallery =  ;
63001: LD_ADDR_OWVAR 33
63005: PUSH
63006: LD_STRING 
63008: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63009: LD_ADDR_OWVAR 35
63013: PUSH
63014: LD_INT 7
63016: NEG
63017: PPUSH
63018: LD_INT 7
63020: PPUSH
63021: CALL_OW 12
63025: ST_TO_ADDR
// animal := CreateHuman ;
63026: LD_ADDR_VAR 0 12
63030: PUSH
63031: CALL_OW 44
63035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63036: LD_VAR 0 12
63040: PPUSH
63041: LD_VAR 0 8
63045: PPUSH
63046: LD_INT 0
63048: PPUSH
63049: CALL 65015 0 3
// end ;
63053: GO 62990
63055: POP
63056: POP
// if apemans then
63057: LD_VAR 0 3
63061: IFFALSE 63184
// for i = 1 to apemans do
63063: LD_ADDR_VAR 0 11
63067: PUSH
63068: DOUBLE
63069: LD_INT 1
63071: DEC
63072: ST_TO_ADDR
63073: LD_VAR 0 3
63077: PUSH
63078: FOR_TO
63079: IFFALSE 63182
// begin hc_class = class_apeman ;
63081: LD_ADDR_OWVAR 28
63085: PUSH
63086: LD_INT 12
63088: ST_TO_ADDR
// hc_gallery =  ;
63089: LD_ADDR_OWVAR 33
63093: PUSH
63094: LD_STRING 
63096: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63097: LD_ADDR_OWVAR 35
63101: PUSH
63102: LD_INT 2
63104: NEG
63105: PPUSH
63106: LD_INT 2
63108: PPUSH
63109: CALL_OW 12
63113: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63114: LD_ADDR_OWVAR 31
63118: PUSH
63119: LD_INT 1
63121: PPUSH
63122: LD_INT 3
63124: PPUSH
63125: CALL_OW 12
63129: PUSH
63130: LD_INT 1
63132: PPUSH
63133: LD_INT 3
63135: PPUSH
63136: CALL_OW 12
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: ST_TO_ADDR
// animal := CreateHuman ;
63153: LD_ADDR_VAR 0 12
63157: PUSH
63158: CALL_OW 44
63162: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63163: LD_VAR 0 12
63167: PPUSH
63168: LD_VAR 0 8
63172: PPUSH
63173: LD_INT 0
63175: PPUSH
63176: CALL 65015 0 3
// end ;
63180: GO 63078
63182: POP
63183: POP
// if enchidnas then
63184: LD_VAR 0 4
63188: IFFALSE 63255
// for i = 1 to enchidnas do
63190: LD_ADDR_VAR 0 11
63194: PUSH
63195: DOUBLE
63196: LD_INT 1
63198: DEC
63199: ST_TO_ADDR
63200: LD_VAR 0 4
63204: PUSH
63205: FOR_TO
63206: IFFALSE 63253
// begin hc_class = 13 ;
63208: LD_ADDR_OWVAR 28
63212: PUSH
63213: LD_INT 13
63215: ST_TO_ADDR
// hc_gallery =  ;
63216: LD_ADDR_OWVAR 33
63220: PUSH
63221: LD_STRING 
63223: ST_TO_ADDR
// animal := CreateHuman ;
63224: LD_ADDR_VAR 0 12
63228: PUSH
63229: CALL_OW 44
63233: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63234: LD_VAR 0 12
63238: PPUSH
63239: LD_VAR 0 8
63243: PPUSH
63244: LD_INT 0
63246: PPUSH
63247: CALL 65015 0 3
// end ;
63251: GO 63205
63253: POP
63254: POP
// if fishes then
63255: LD_VAR 0 7
63259: IFFALSE 63326
// for i = 1 to fishes do
63261: LD_ADDR_VAR 0 11
63265: PUSH
63266: DOUBLE
63267: LD_INT 1
63269: DEC
63270: ST_TO_ADDR
63271: LD_VAR 0 7
63275: PUSH
63276: FOR_TO
63277: IFFALSE 63324
// begin hc_class = 20 ;
63279: LD_ADDR_OWVAR 28
63283: PUSH
63284: LD_INT 20
63286: ST_TO_ADDR
// hc_gallery =  ;
63287: LD_ADDR_OWVAR 33
63291: PUSH
63292: LD_STRING 
63294: ST_TO_ADDR
// animal := CreateHuman ;
63295: LD_ADDR_VAR 0 12
63299: PUSH
63300: CALL_OW 44
63304: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63305: LD_VAR 0 12
63309: PPUSH
63310: LD_VAR 0 9
63314: PPUSH
63315: LD_INT 0
63317: PPUSH
63318: CALL 65015 0 3
// end ;
63322: GO 63276
63324: POP
63325: POP
// end ;
63326: LD_VAR 0 10
63330: RET
// export function WantHeal ( sci , unit ) ; begin
63331: LD_INT 0
63333: PPUSH
// if GetTaskList ( sci ) > 0 then
63334: LD_VAR 0 1
63338: PPUSH
63339: CALL_OW 437
63343: PUSH
63344: LD_INT 0
63346: GREATER
63347: IFFALSE 63417
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63349: LD_VAR 0 1
63353: PPUSH
63354: CALL_OW 437
63358: PUSH
63359: LD_INT 1
63361: ARRAY
63362: PUSH
63363: LD_INT 1
63365: ARRAY
63366: PUSH
63367: LD_STRING l
63369: EQUAL
63370: PUSH
63371: LD_VAR 0 1
63375: PPUSH
63376: CALL_OW 437
63380: PUSH
63381: LD_INT 1
63383: ARRAY
63384: PUSH
63385: LD_INT 4
63387: ARRAY
63388: PUSH
63389: LD_VAR 0 2
63393: EQUAL
63394: AND
63395: IFFALSE 63407
// result := true else
63397: LD_ADDR_VAR 0 3
63401: PUSH
63402: LD_INT 1
63404: ST_TO_ADDR
63405: GO 63415
// result := false ;
63407: LD_ADDR_VAR 0 3
63411: PUSH
63412: LD_INT 0
63414: ST_TO_ADDR
// end else
63415: GO 63425
// result := false ;
63417: LD_ADDR_VAR 0 3
63421: PUSH
63422: LD_INT 0
63424: ST_TO_ADDR
// end ;
63425: LD_VAR 0 3
63429: RET
// export function HealTarget ( sci ) ; begin
63430: LD_INT 0
63432: PPUSH
// if not sci then
63433: LD_VAR 0 1
63437: NOT
63438: IFFALSE 63442
// exit ;
63440: GO 63507
// result := 0 ;
63442: LD_ADDR_VAR 0 2
63446: PUSH
63447: LD_INT 0
63449: ST_TO_ADDR
// if GetTaskList ( sci ) then
63450: LD_VAR 0 1
63454: PPUSH
63455: CALL_OW 437
63459: IFFALSE 63507
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63461: LD_VAR 0 1
63465: PPUSH
63466: CALL_OW 437
63470: PUSH
63471: LD_INT 1
63473: ARRAY
63474: PUSH
63475: LD_INT 1
63477: ARRAY
63478: PUSH
63479: LD_STRING l
63481: EQUAL
63482: IFFALSE 63507
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63484: LD_ADDR_VAR 0 2
63488: PUSH
63489: LD_VAR 0 1
63493: PPUSH
63494: CALL_OW 437
63498: PUSH
63499: LD_INT 1
63501: ARRAY
63502: PUSH
63503: LD_INT 4
63505: ARRAY
63506: ST_TO_ADDR
// end ;
63507: LD_VAR 0 2
63511: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63512: LD_INT 0
63514: PPUSH
63515: PPUSH
63516: PPUSH
63517: PPUSH
// if not base_units then
63518: LD_VAR 0 1
63522: NOT
63523: IFFALSE 63527
// exit ;
63525: GO 63614
// result := false ;
63527: LD_ADDR_VAR 0 2
63531: PUSH
63532: LD_INT 0
63534: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63535: LD_ADDR_VAR 0 5
63539: PUSH
63540: LD_VAR 0 1
63544: PPUSH
63545: LD_INT 21
63547: PUSH
63548: LD_INT 3
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PPUSH
63555: CALL_OW 72
63559: ST_TO_ADDR
// if not tmp then
63560: LD_VAR 0 5
63564: NOT
63565: IFFALSE 63569
// exit ;
63567: GO 63614
// for i in tmp do
63569: LD_ADDR_VAR 0 3
63573: PUSH
63574: LD_VAR 0 5
63578: PUSH
63579: FOR_IN
63580: IFFALSE 63612
// begin result := EnemyInRange ( i , 22 ) ;
63582: LD_ADDR_VAR 0 2
63586: PUSH
63587: LD_VAR 0 3
63591: PPUSH
63592: LD_INT 22
63594: PPUSH
63595: CALL 61850 0 2
63599: ST_TO_ADDR
// if result then
63600: LD_VAR 0 2
63604: IFFALSE 63610
// exit ;
63606: POP
63607: POP
63608: GO 63614
// end ;
63610: GO 63579
63612: POP
63613: POP
// end ;
63614: LD_VAR 0 2
63618: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63619: LD_INT 0
63621: PPUSH
63622: PPUSH
// if not units then
63623: LD_VAR 0 1
63627: NOT
63628: IFFALSE 63632
// exit ;
63630: GO 63702
// result := [ ] ;
63632: LD_ADDR_VAR 0 3
63636: PUSH
63637: EMPTY
63638: ST_TO_ADDR
// for i in units do
63639: LD_ADDR_VAR 0 4
63643: PUSH
63644: LD_VAR 0 1
63648: PUSH
63649: FOR_IN
63650: IFFALSE 63700
// if GetTag ( i ) = tag then
63652: LD_VAR 0 4
63656: PPUSH
63657: CALL_OW 110
63661: PUSH
63662: LD_VAR 0 2
63666: EQUAL
63667: IFFALSE 63698
// result := Replace ( result , result + 1 , i ) ;
63669: LD_ADDR_VAR 0 3
63673: PUSH
63674: LD_VAR 0 3
63678: PPUSH
63679: LD_VAR 0 3
63683: PUSH
63684: LD_INT 1
63686: PLUS
63687: PPUSH
63688: LD_VAR 0 4
63692: PPUSH
63693: CALL_OW 1
63697: ST_TO_ADDR
63698: GO 63649
63700: POP
63701: POP
// end ;
63702: LD_VAR 0 3
63706: RET
// export function IsDriver ( un ) ; begin
63707: LD_INT 0
63709: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63710: LD_ADDR_VAR 0 2
63714: PUSH
63715: LD_VAR 0 1
63719: PUSH
63720: LD_INT 55
63722: PUSH
63723: EMPTY
63724: LIST
63725: PPUSH
63726: CALL_OW 69
63730: IN
63731: ST_TO_ADDR
// end ;
63732: LD_VAR 0 2
63736: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63737: LD_INT 0
63739: PPUSH
63740: PPUSH
// list := [ ] ;
63741: LD_ADDR_VAR 0 5
63745: PUSH
63746: EMPTY
63747: ST_TO_ADDR
// case d of 0 :
63748: LD_VAR 0 3
63752: PUSH
63753: LD_INT 0
63755: DOUBLE
63756: EQUAL
63757: IFTRUE 63761
63759: GO 63894
63761: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63762: LD_ADDR_VAR 0 5
63766: PUSH
63767: LD_VAR 0 1
63771: PUSH
63772: LD_INT 4
63774: MINUS
63775: PUSH
63776: LD_VAR 0 2
63780: PUSH
63781: LD_INT 4
63783: MINUS
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: LIST
63792: PUSH
63793: LD_VAR 0 1
63797: PUSH
63798: LD_INT 3
63800: MINUS
63801: PUSH
63802: LD_VAR 0 2
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: LIST
63814: PUSH
63815: LD_VAR 0 1
63819: PUSH
63820: LD_INT 4
63822: PLUS
63823: PUSH
63824: LD_VAR 0 2
63828: PUSH
63829: LD_INT 4
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: LIST
63836: PUSH
63837: LD_VAR 0 1
63841: PUSH
63842: LD_INT 3
63844: PLUS
63845: PUSH
63846: LD_VAR 0 2
63850: PUSH
63851: LD_INT 3
63853: PLUS
63854: PUSH
63855: LD_INT 5
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: LIST
63862: PUSH
63863: LD_VAR 0 1
63867: PUSH
63868: LD_VAR 0 2
63872: PUSH
63873: LD_INT 4
63875: PLUS
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: ST_TO_ADDR
// end ; 1 :
63892: GO 64592
63894: LD_INT 1
63896: DOUBLE
63897: EQUAL
63898: IFTRUE 63902
63900: GO 64035
63902: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63903: LD_ADDR_VAR 0 5
63907: PUSH
63908: LD_VAR 0 1
63912: PUSH
63913: LD_VAR 0 2
63917: PUSH
63918: LD_INT 4
63920: MINUS
63921: PUSH
63922: LD_INT 3
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: LIST
63929: PUSH
63930: LD_VAR 0 1
63934: PUSH
63935: LD_INT 3
63937: MINUS
63938: PUSH
63939: LD_VAR 0 2
63943: PUSH
63944: LD_INT 3
63946: MINUS
63947: PUSH
63948: LD_INT 2
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: PUSH
63956: LD_VAR 0 1
63960: PUSH
63961: LD_INT 4
63963: MINUS
63964: PUSH
63965: LD_VAR 0 2
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: LIST
63977: PUSH
63978: LD_VAR 0 1
63982: PUSH
63983: LD_VAR 0 2
63987: PUSH
63988: LD_INT 3
63990: PLUS
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: LIST
63999: PUSH
64000: LD_VAR 0 1
64004: PUSH
64005: LD_INT 4
64007: PLUS
64008: PUSH
64009: LD_VAR 0 2
64013: PUSH
64014: LD_INT 4
64016: PLUS
64017: PUSH
64018: LD_INT 5
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: ST_TO_ADDR
// end ; 2 :
64033: GO 64592
64035: LD_INT 2
64037: DOUBLE
64038: EQUAL
64039: IFTRUE 64043
64041: GO 64172
64043: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64044: LD_ADDR_VAR 0 5
64048: PUSH
64049: LD_VAR 0 1
64053: PUSH
64054: LD_VAR 0 2
64058: PUSH
64059: LD_INT 3
64061: MINUS
64062: PUSH
64063: LD_INT 3
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: PUSH
64071: LD_VAR 0 1
64075: PUSH
64076: LD_INT 4
64078: PLUS
64079: PUSH
64080: LD_VAR 0 2
64084: PUSH
64085: LD_INT 4
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: PUSH
64093: LD_VAR 0 1
64097: PUSH
64098: LD_VAR 0 2
64102: PUSH
64103: LD_INT 4
64105: PLUS
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: PUSH
64115: LD_VAR 0 1
64119: PUSH
64120: LD_INT 3
64122: MINUS
64123: PUSH
64124: LD_VAR 0 2
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: PUSH
64137: LD_VAR 0 1
64141: PUSH
64142: LD_INT 4
64144: MINUS
64145: PUSH
64146: LD_VAR 0 2
64150: PUSH
64151: LD_INT 4
64153: MINUS
64154: PUSH
64155: LD_INT 2
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: LIST
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: ST_TO_ADDR
// end ; 3 :
64170: GO 64592
64172: LD_INT 3
64174: DOUBLE
64175: EQUAL
64176: IFTRUE 64180
64178: GO 64313
64180: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64181: LD_ADDR_VAR 0 5
64185: PUSH
64186: LD_VAR 0 1
64190: PUSH
64191: LD_INT 3
64193: PLUS
64194: PUSH
64195: LD_VAR 0 2
64199: PUSH
64200: LD_INT 4
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: LIST
64207: PUSH
64208: LD_VAR 0 1
64212: PUSH
64213: LD_INT 4
64215: PLUS
64216: PUSH
64217: LD_VAR 0 2
64221: PUSH
64222: LD_INT 4
64224: PLUS
64225: PUSH
64226: LD_INT 5
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: LIST
64233: PUSH
64234: LD_VAR 0 1
64238: PUSH
64239: LD_INT 4
64241: MINUS
64242: PUSH
64243: LD_VAR 0 2
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: LIST
64255: PUSH
64256: LD_VAR 0 1
64260: PUSH
64261: LD_VAR 0 2
64265: PUSH
64266: LD_INT 4
64268: MINUS
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: LIST
64277: PUSH
64278: LD_VAR 0 1
64282: PUSH
64283: LD_INT 3
64285: MINUS
64286: PUSH
64287: LD_VAR 0 2
64291: PUSH
64292: LD_INT 3
64294: MINUS
64295: PUSH
64296: LD_INT 2
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: ST_TO_ADDR
// end ; 4 :
64311: GO 64592
64313: LD_INT 4
64315: DOUBLE
64316: EQUAL
64317: IFTRUE 64321
64319: GO 64454
64321: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64322: LD_ADDR_VAR 0 5
64326: PUSH
64327: LD_VAR 0 1
64331: PUSH
64332: LD_VAR 0 2
64336: PUSH
64337: LD_INT 4
64339: PLUS
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: LIST
64348: PUSH
64349: LD_VAR 0 1
64353: PUSH
64354: LD_INT 3
64356: PLUS
64357: PUSH
64358: LD_VAR 0 2
64362: PUSH
64363: LD_INT 3
64365: PLUS
64366: PUSH
64367: LD_INT 5
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: PUSH
64375: LD_VAR 0 1
64379: PUSH
64380: LD_INT 4
64382: PLUS
64383: PUSH
64384: LD_VAR 0 2
64388: PUSH
64389: LD_INT 4
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: LIST
64396: PUSH
64397: LD_VAR 0 1
64401: PUSH
64402: LD_VAR 0 2
64406: PUSH
64407: LD_INT 3
64409: MINUS
64410: PUSH
64411: LD_INT 3
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: PUSH
64419: LD_VAR 0 1
64423: PUSH
64424: LD_INT 4
64426: MINUS
64427: PUSH
64428: LD_VAR 0 2
64432: PUSH
64433: LD_INT 4
64435: MINUS
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: ST_TO_ADDR
// end ; 5 :
64452: GO 64592
64454: LD_INT 5
64456: DOUBLE
64457: EQUAL
64458: IFTRUE 64462
64460: GO 64591
64462: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64463: LD_ADDR_VAR 0 5
64467: PUSH
64468: LD_VAR 0 1
64472: PUSH
64473: LD_INT 4
64475: MINUS
64476: PUSH
64477: LD_VAR 0 2
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: PUSH
64490: LD_VAR 0 1
64494: PUSH
64495: LD_VAR 0 2
64499: PUSH
64500: LD_INT 4
64502: MINUS
64503: PUSH
64504: LD_INT 3
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: LIST
64511: PUSH
64512: LD_VAR 0 1
64516: PUSH
64517: LD_INT 4
64519: PLUS
64520: PUSH
64521: LD_VAR 0 2
64525: PUSH
64526: LD_INT 4
64528: PLUS
64529: PUSH
64530: LD_INT 5
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: PUSH
64538: LD_VAR 0 1
64542: PUSH
64543: LD_INT 3
64545: PLUS
64546: PUSH
64547: LD_VAR 0 2
64551: PUSH
64552: LD_INT 4
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: PUSH
64560: LD_VAR 0 1
64564: PUSH
64565: LD_VAR 0 2
64569: PUSH
64570: LD_INT 3
64572: PLUS
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: ST_TO_ADDR
// end ; end ;
64589: GO 64592
64591: POP
// result := list ;
64592: LD_ADDR_VAR 0 4
64596: PUSH
64597: LD_VAR 0 5
64601: ST_TO_ADDR
// end ;
64602: LD_VAR 0 4
64606: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64607: LD_INT 0
64609: PPUSH
64610: PPUSH
64611: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64612: LD_VAR 0 1
64616: NOT
64617: PUSH
64618: LD_VAR 0 2
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: LD_INT 2
64628: PUSH
64629: LD_INT 3
64631: PUSH
64632: LD_INT 4
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: IN
64641: NOT
64642: OR
64643: IFFALSE 64647
// exit ;
64645: GO 64739
// tmp := [ ] ;
64647: LD_ADDR_VAR 0 5
64651: PUSH
64652: EMPTY
64653: ST_TO_ADDR
// for i in units do
64654: LD_ADDR_VAR 0 4
64658: PUSH
64659: LD_VAR 0 1
64663: PUSH
64664: FOR_IN
64665: IFFALSE 64708
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64667: LD_ADDR_VAR 0 5
64671: PUSH
64672: LD_VAR 0 5
64676: PPUSH
64677: LD_VAR 0 5
64681: PUSH
64682: LD_INT 1
64684: PLUS
64685: PPUSH
64686: LD_VAR 0 4
64690: PPUSH
64691: LD_VAR 0 2
64695: PPUSH
64696: CALL_OW 259
64700: PPUSH
64701: CALL_OW 2
64705: ST_TO_ADDR
64706: GO 64664
64708: POP
64709: POP
// if not tmp then
64710: LD_VAR 0 5
64714: NOT
64715: IFFALSE 64719
// exit ;
64717: GO 64739
// result := SortListByListDesc ( units , tmp ) ;
64719: LD_ADDR_VAR 0 3
64723: PUSH
64724: LD_VAR 0 1
64728: PPUSH
64729: LD_VAR 0 5
64733: PPUSH
64734: CALL_OW 77
64738: ST_TO_ADDR
// end ;
64739: LD_VAR 0 3
64743: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64744: LD_INT 0
64746: PPUSH
64747: PPUSH
64748: PPUSH
// result := false ;
64749: LD_ADDR_VAR 0 3
64753: PUSH
64754: LD_INT 0
64756: ST_TO_ADDR
// x := GetX ( building ) ;
64757: LD_ADDR_VAR 0 4
64761: PUSH
64762: LD_VAR 0 2
64766: PPUSH
64767: CALL_OW 250
64771: ST_TO_ADDR
// y := GetY ( building ) ;
64772: LD_ADDR_VAR 0 5
64776: PUSH
64777: LD_VAR 0 2
64781: PPUSH
64782: CALL_OW 251
64786: ST_TO_ADDR
// if not building or not x or not y then
64787: LD_VAR 0 2
64791: NOT
64792: PUSH
64793: LD_VAR 0 4
64797: NOT
64798: OR
64799: PUSH
64800: LD_VAR 0 5
64804: NOT
64805: OR
64806: IFFALSE 64810
// exit ;
64808: GO 64902
// if GetTaskList ( unit ) then
64810: LD_VAR 0 1
64814: PPUSH
64815: CALL_OW 437
64819: IFFALSE 64902
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64821: LD_STRING e
64823: PUSH
64824: LD_VAR 0 1
64828: PPUSH
64829: CALL_OW 437
64833: PUSH
64834: LD_INT 1
64836: ARRAY
64837: PUSH
64838: LD_INT 1
64840: ARRAY
64841: EQUAL
64842: PUSH
64843: LD_VAR 0 4
64847: PUSH
64848: LD_VAR 0 1
64852: PPUSH
64853: CALL_OW 437
64857: PUSH
64858: LD_INT 1
64860: ARRAY
64861: PUSH
64862: LD_INT 2
64864: ARRAY
64865: EQUAL
64866: AND
64867: PUSH
64868: LD_VAR 0 5
64872: PUSH
64873: LD_VAR 0 1
64877: PPUSH
64878: CALL_OW 437
64882: PUSH
64883: LD_INT 1
64885: ARRAY
64886: PUSH
64887: LD_INT 3
64889: ARRAY
64890: EQUAL
64891: AND
64892: IFFALSE 64902
// result := true end ;
64894: LD_ADDR_VAR 0 3
64898: PUSH
64899: LD_INT 1
64901: ST_TO_ADDR
// end ;
64902: LD_VAR 0 3
64906: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64907: LD_INT 0
64909: PPUSH
// result := false ;
64910: LD_ADDR_VAR 0 4
64914: PUSH
64915: LD_INT 0
64917: ST_TO_ADDR
// if GetTaskList ( unit ) then
64918: LD_VAR 0 1
64922: PPUSH
64923: CALL_OW 437
64927: IFFALSE 65010
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64929: LD_STRING M
64931: PUSH
64932: LD_VAR 0 1
64936: PPUSH
64937: CALL_OW 437
64941: PUSH
64942: LD_INT 1
64944: ARRAY
64945: PUSH
64946: LD_INT 1
64948: ARRAY
64949: EQUAL
64950: PUSH
64951: LD_VAR 0 2
64955: PUSH
64956: LD_VAR 0 1
64960: PPUSH
64961: CALL_OW 437
64965: PUSH
64966: LD_INT 1
64968: ARRAY
64969: PUSH
64970: LD_INT 2
64972: ARRAY
64973: EQUAL
64974: AND
64975: PUSH
64976: LD_VAR 0 3
64980: PUSH
64981: LD_VAR 0 1
64985: PPUSH
64986: CALL_OW 437
64990: PUSH
64991: LD_INT 1
64993: ARRAY
64994: PUSH
64995: LD_INT 3
64997: ARRAY
64998: EQUAL
64999: AND
65000: IFFALSE 65010
// result := true ;
65002: LD_ADDR_VAR 0 4
65006: PUSH
65007: LD_INT 1
65009: ST_TO_ADDR
// end ; end ;
65010: LD_VAR 0 4
65014: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65015: LD_INT 0
65017: PPUSH
65018: PPUSH
65019: PPUSH
65020: PPUSH
// if not unit or not area then
65021: LD_VAR 0 1
65025: NOT
65026: PUSH
65027: LD_VAR 0 2
65031: NOT
65032: OR
65033: IFFALSE 65037
// exit ;
65035: GO 65201
// tmp := AreaToList ( area , i ) ;
65037: LD_ADDR_VAR 0 6
65041: PUSH
65042: LD_VAR 0 2
65046: PPUSH
65047: LD_VAR 0 5
65051: PPUSH
65052: CALL_OW 517
65056: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65057: LD_ADDR_VAR 0 5
65061: PUSH
65062: DOUBLE
65063: LD_INT 1
65065: DEC
65066: ST_TO_ADDR
65067: LD_VAR 0 6
65071: PUSH
65072: LD_INT 1
65074: ARRAY
65075: PUSH
65076: FOR_TO
65077: IFFALSE 65199
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65079: LD_ADDR_VAR 0 7
65083: PUSH
65084: LD_VAR 0 6
65088: PUSH
65089: LD_INT 1
65091: ARRAY
65092: PUSH
65093: LD_VAR 0 5
65097: ARRAY
65098: PUSH
65099: LD_VAR 0 6
65103: PUSH
65104: LD_INT 2
65106: ARRAY
65107: PUSH
65108: LD_VAR 0 5
65112: ARRAY
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65118: LD_VAR 0 7
65122: PUSH
65123: LD_INT 1
65125: ARRAY
65126: PPUSH
65127: LD_VAR 0 7
65131: PUSH
65132: LD_INT 2
65134: ARRAY
65135: PPUSH
65136: CALL_OW 428
65140: PUSH
65141: LD_INT 0
65143: EQUAL
65144: IFFALSE 65197
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65146: LD_VAR 0 1
65150: PPUSH
65151: LD_VAR 0 7
65155: PUSH
65156: LD_INT 1
65158: ARRAY
65159: PPUSH
65160: LD_VAR 0 7
65164: PUSH
65165: LD_INT 2
65167: ARRAY
65168: PPUSH
65169: LD_VAR 0 3
65173: PPUSH
65174: CALL_OW 48
// result := IsPlaced ( unit ) ;
65178: LD_ADDR_VAR 0 4
65182: PUSH
65183: LD_VAR 0 1
65187: PPUSH
65188: CALL_OW 305
65192: ST_TO_ADDR
// exit ;
65193: POP
65194: POP
65195: GO 65201
// end ; end ;
65197: GO 65076
65199: POP
65200: POP
// end ;
65201: LD_VAR 0 4
65205: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65206: LD_INT 0
65208: PPUSH
65209: PPUSH
65210: PPUSH
// if not side or side > 8 then
65211: LD_VAR 0 1
65215: NOT
65216: PUSH
65217: LD_VAR 0 1
65221: PUSH
65222: LD_INT 8
65224: GREATER
65225: OR
65226: IFFALSE 65230
// exit ;
65228: GO 65417
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65230: LD_ADDR_VAR 0 4
65234: PUSH
65235: LD_INT 22
65237: PUSH
65238: LD_VAR 0 1
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 21
65249: PUSH
65250: LD_INT 3
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PPUSH
65261: CALL_OW 69
65265: ST_TO_ADDR
// if not tmp then
65266: LD_VAR 0 4
65270: NOT
65271: IFFALSE 65275
// exit ;
65273: GO 65417
// enable_addtolog := true ;
65275: LD_ADDR_OWVAR 81
65279: PUSH
65280: LD_INT 1
65282: ST_TO_ADDR
// AddToLog ( [ ) ;
65283: LD_STRING [
65285: PPUSH
65286: CALL_OW 561
// for i in tmp do
65290: LD_ADDR_VAR 0 3
65294: PUSH
65295: LD_VAR 0 4
65299: PUSH
65300: FOR_IN
65301: IFFALSE 65408
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65303: LD_STRING [
65305: PUSH
65306: LD_VAR 0 3
65310: PPUSH
65311: CALL_OW 266
65315: STR
65316: PUSH
65317: LD_STRING , 
65319: STR
65320: PUSH
65321: LD_VAR 0 3
65325: PPUSH
65326: CALL_OW 250
65330: STR
65331: PUSH
65332: LD_STRING , 
65334: STR
65335: PUSH
65336: LD_VAR 0 3
65340: PPUSH
65341: CALL_OW 251
65345: STR
65346: PUSH
65347: LD_STRING , 
65349: STR
65350: PUSH
65351: LD_VAR 0 3
65355: PPUSH
65356: CALL_OW 254
65360: STR
65361: PUSH
65362: LD_STRING , 
65364: STR
65365: PUSH
65366: LD_VAR 0 3
65370: PPUSH
65371: LD_INT 1
65373: PPUSH
65374: CALL_OW 268
65378: STR
65379: PUSH
65380: LD_STRING , 
65382: STR
65383: PUSH
65384: LD_VAR 0 3
65388: PPUSH
65389: LD_INT 2
65391: PPUSH
65392: CALL_OW 268
65396: STR
65397: PUSH
65398: LD_STRING ],
65400: STR
65401: PPUSH
65402: CALL_OW 561
// end ;
65406: GO 65300
65408: POP
65409: POP
// AddToLog ( ]; ) ;
65410: LD_STRING ];
65412: PPUSH
65413: CALL_OW 561
// end ;
65417: LD_VAR 0 2
65421: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65422: LD_INT 0
65424: PPUSH
65425: PPUSH
65426: PPUSH
65427: PPUSH
65428: PPUSH
// if not area or not rate or not max then
65429: LD_VAR 0 1
65433: NOT
65434: PUSH
65435: LD_VAR 0 2
65439: NOT
65440: OR
65441: PUSH
65442: LD_VAR 0 4
65446: NOT
65447: OR
65448: IFFALSE 65452
// exit ;
65450: GO 65644
// while 1 do
65452: LD_INT 1
65454: IFFALSE 65644
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65456: LD_ADDR_VAR 0 9
65460: PUSH
65461: LD_VAR 0 1
65465: PPUSH
65466: LD_INT 1
65468: PPUSH
65469: CALL_OW 287
65473: PUSH
65474: LD_INT 10
65476: MUL
65477: ST_TO_ADDR
// r := rate / 10 ;
65478: LD_ADDR_VAR 0 7
65482: PUSH
65483: LD_VAR 0 2
65487: PUSH
65488: LD_INT 10
65490: DIVREAL
65491: ST_TO_ADDR
// time := 1 1$00 ;
65492: LD_ADDR_VAR 0 8
65496: PUSH
65497: LD_INT 2100
65499: ST_TO_ADDR
// if amount < min then
65500: LD_VAR 0 9
65504: PUSH
65505: LD_VAR 0 3
65509: LESS
65510: IFFALSE 65528
// r := r * 2 else
65512: LD_ADDR_VAR 0 7
65516: PUSH
65517: LD_VAR 0 7
65521: PUSH
65522: LD_INT 2
65524: MUL
65525: ST_TO_ADDR
65526: GO 65554
// if amount > max then
65528: LD_VAR 0 9
65532: PUSH
65533: LD_VAR 0 4
65537: GREATER
65538: IFFALSE 65554
// r := r / 2 ;
65540: LD_ADDR_VAR 0 7
65544: PUSH
65545: LD_VAR 0 7
65549: PUSH
65550: LD_INT 2
65552: DIVREAL
65553: ST_TO_ADDR
// time := time / r ;
65554: LD_ADDR_VAR 0 8
65558: PUSH
65559: LD_VAR 0 8
65563: PUSH
65564: LD_VAR 0 7
65568: DIVREAL
65569: ST_TO_ADDR
// if time < 0 then
65570: LD_VAR 0 8
65574: PUSH
65575: LD_INT 0
65577: LESS
65578: IFFALSE 65595
// time := time * - 1 ;
65580: LD_ADDR_VAR 0 8
65584: PUSH
65585: LD_VAR 0 8
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: MUL
65594: ST_TO_ADDR
// wait ( time ) ;
65595: LD_VAR 0 8
65599: PPUSH
65600: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65604: LD_INT 35
65606: PPUSH
65607: LD_INT 875
65609: PPUSH
65610: CALL_OW 12
65614: PPUSH
65615: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65619: LD_INT 1
65621: PPUSH
65622: LD_INT 5
65624: PPUSH
65625: CALL_OW 12
65629: PPUSH
65630: LD_VAR 0 1
65634: PPUSH
65635: LD_INT 1
65637: PPUSH
65638: CALL_OW 55
// end ;
65642: GO 65452
// end ;
65644: LD_VAR 0 5
65648: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65649: LD_INT 0
65651: PPUSH
65652: PPUSH
65653: PPUSH
65654: PPUSH
65655: PPUSH
65656: PPUSH
65657: PPUSH
65658: PPUSH
// if not turrets or not factories then
65659: LD_VAR 0 1
65663: NOT
65664: PUSH
65665: LD_VAR 0 2
65669: NOT
65670: OR
65671: IFFALSE 65675
// exit ;
65673: GO 65982
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65675: LD_ADDR_VAR 0 10
65679: PUSH
65680: LD_INT 5
65682: PUSH
65683: LD_INT 6
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: LD_INT 4
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 3
65702: PUSH
65703: LD_INT 5
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 24
65717: PUSH
65718: LD_INT 25
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 23
65727: PUSH
65728: LD_INT 27
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 42
65741: PUSH
65742: LD_INT 43
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 44
65751: PUSH
65752: LD_INT 46
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 45
65761: PUSH
65762: LD_INT 47
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: LIST
65778: ST_TO_ADDR
// result := [ ] ;
65779: LD_ADDR_VAR 0 3
65783: PUSH
65784: EMPTY
65785: ST_TO_ADDR
// for i in turrets do
65786: LD_ADDR_VAR 0 4
65790: PUSH
65791: LD_VAR 0 1
65795: PUSH
65796: FOR_IN
65797: IFFALSE 65980
// begin nat := GetNation ( i ) ;
65799: LD_ADDR_VAR 0 7
65803: PUSH
65804: LD_VAR 0 4
65808: PPUSH
65809: CALL_OW 248
65813: ST_TO_ADDR
// weapon := 0 ;
65814: LD_ADDR_VAR 0 8
65818: PUSH
65819: LD_INT 0
65821: ST_TO_ADDR
// if not nat then
65822: LD_VAR 0 7
65826: NOT
65827: IFFALSE 65831
// continue ;
65829: GO 65796
// for j in list [ nat ] do
65831: LD_ADDR_VAR 0 5
65835: PUSH
65836: LD_VAR 0 10
65840: PUSH
65841: LD_VAR 0 7
65845: ARRAY
65846: PUSH
65847: FOR_IN
65848: IFFALSE 65889
// if GetBWeapon ( i ) = j [ 1 ] then
65850: LD_VAR 0 4
65854: PPUSH
65855: CALL_OW 269
65859: PUSH
65860: LD_VAR 0 5
65864: PUSH
65865: LD_INT 1
65867: ARRAY
65868: EQUAL
65869: IFFALSE 65887
// begin weapon := j [ 2 ] ;
65871: LD_ADDR_VAR 0 8
65875: PUSH
65876: LD_VAR 0 5
65880: PUSH
65881: LD_INT 2
65883: ARRAY
65884: ST_TO_ADDR
// break ;
65885: GO 65889
// end ;
65887: GO 65847
65889: POP
65890: POP
// if not weapon then
65891: LD_VAR 0 8
65895: NOT
65896: IFFALSE 65900
// continue ;
65898: GO 65796
// for k in factories do
65900: LD_ADDR_VAR 0 6
65904: PUSH
65905: LD_VAR 0 2
65909: PUSH
65910: FOR_IN
65911: IFFALSE 65976
// begin weapons := AvailableWeaponList ( k ) ;
65913: LD_ADDR_VAR 0 9
65917: PUSH
65918: LD_VAR 0 6
65922: PPUSH
65923: CALL_OW 478
65927: ST_TO_ADDR
// if not weapons then
65928: LD_VAR 0 9
65932: NOT
65933: IFFALSE 65937
// continue ;
65935: GO 65910
// if weapon in weapons then
65937: LD_VAR 0 8
65941: PUSH
65942: LD_VAR 0 9
65946: IN
65947: IFFALSE 65974
// begin result := [ i , weapon ] ;
65949: LD_ADDR_VAR 0 3
65953: PUSH
65954: LD_VAR 0 4
65958: PUSH
65959: LD_VAR 0 8
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: ST_TO_ADDR
// exit ;
65968: POP
65969: POP
65970: POP
65971: POP
65972: GO 65982
// end ; end ;
65974: GO 65910
65976: POP
65977: POP
// end ;
65978: GO 65796
65980: POP
65981: POP
// end ;
65982: LD_VAR 0 3
65986: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65987: LD_INT 0
65989: PPUSH
// if not side or side > 8 then
65990: LD_VAR 0 3
65994: NOT
65995: PUSH
65996: LD_VAR 0 3
66000: PUSH
66001: LD_INT 8
66003: GREATER
66004: OR
66005: IFFALSE 66009
// exit ;
66007: GO 66068
// if not range then
66009: LD_VAR 0 4
66013: NOT
66014: IFFALSE 66025
// range := - 12 ;
66016: LD_ADDR_VAR 0 4
66020: PUSH
66021: LD_INT 12
66023: NEG
66024: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66025: LD_VAR 0 1
66029: PPUSH
66030: LD_VAR 0 2
66034: PPUSH
66035: LD_VAR 0 3
66039: PPUSH
66040: LD_VAR 0 4
66044: PPUSH
66045: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66049: LD_VAR 0 1
66053: PPUSH
66054: LD_VAR 0 2
66058: PPUSH
66059: LD_VAR 0 3
66063: PPUSH
66064: CALL_OW 331
// end ;
66068: LD_VAR 0 5
66072: RET
// export function Video ( mode ) ; begin
66073: LD_INT 0
66075: PPUSH
// ingame_video = mode ;
66076: LD_ADDR_OWVAR 52
66080: PUSH
66081: LD_VAR 0 1
66085: ST_TO_ADDR
// interface_hidden = mode ;
66086: LD_ADDR_OWVAR 54
66090: PUSH
66091: LD_VAR 0 1
66095: ST_TO_ADDR
// end ;
66096: LD_VAR 0 2
66100: RET
// export function Join ( array , element ) ; begin
66101: LD_INT 0
66103: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66104: LD_ADDR_VAR 0 3
66108: PUSH
66109: LD_VAR 0 1
66113: PPUSH
66114: LD_VAR 0 1
66118: PUSH
66119: LD_INT 1
66121: PLUS
66122: PPUSH
66123: LD_VAR 0 2
66127: PPUSH
66128: CALL_OW 1
66132: ST_TO_ADDR
// end ;
66133: LD_VAR 0 3
66137: RET
// export function JoinUnion ( array , element ) ; begin
66138: LD_INT 0
66140: PPUSH
// result := array union element ;
66141: LD_ADDR_VAR 0 3
66145: PUSH
66146: LD_VAR 0 1
66150: PUSH
66151: LD_VAR 0 2
66155: UNION
66156: ST_TO_ADDR
// end ;
66157: LD_VAR 0 3
66161: RET
// export function GetBehemoths ( side ) ; begin
66162: LD_INT 0
66164: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66165: LD_ADDR_VAR 0 2
66169: PUSH
66170: LD_INT 22
66172: PUSH
66173: LD_VAR 0 1
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 31
66184: PUSH
66185: LD_INT 25
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PPUSH
66196: CALL_OW 69
66200: ST_TO_ADDR
// end ;
66201: LD_VAR 0 2
66205: RET
// export function Shuffle ( array ) ; var i , index ; begin
66206: LD_INT 0
66208: PPUSH
66209: PPUSH
66210: PPUSH
// result := [ ] ;
66211: LD_ADDR_VAR 0 2
66215: PUSH
66216: EMPTY
66217: ST_TO_ADDR
// if not array then
66218: LD_VAR 0 1
66222: NOT
66223: IFFALSE 66227
// exit ;
66225: GO 66326
// Randomize ;
66227: CALL_OW 10
// for i = array downto 1 do
66231: LD_ADDR_VAR 0 3
66235: PUSH
66236: DOUBLE
66237: LD_VAR 0 1
66241: INC
66242: ST_TO_ADDR
66243: LD_INT 1
66245: PUSH
66246: FOR_DOWNTO
66247: IFFALSE 66324
// begin index := rand ( 1 , array ) ;
66249: LD_ADDR_VAR 0 4
66253: PUSH
66254: LD_INT 1
66256: PPUSH
66257: LD_VAR 0 1
66261: PPUSH
66262: CALL_OW 12
66266: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66267: LD_ADDR_VAR 0 2
66271: PUSH
66272: LD_VAR 0 2
66276: PPUSH
66277: LD_VAR 0 2
66281: PUSH
66282: LD_INT 1
66284: PLUS
66285: PPUSH
66286: LD_VAR 0 1
66290: PUSH
66291: LD_VAR 0 4
66295: ARRAY
66296: PPUSH
66297: CALL_OW 2
66301: ST_TO_ADDR
// array := Delete ( array , index ) ;
66302: LD_ADDR_VAR 0 1
66306: PUSH
66307: LD_VAR 0 1
66311: PPUSH
66312: LD_VAR 0 4
66316: PPUSH
66317: CALL_OW 3
66321: ST_TO_ADDR
// end ;
66322: GO 66246
66324: POP
66325: POP
// end ;
66326: LD_VAR 0 2
66330: RET
// export function GetBaseMaterials ( base ) ; begin
66331: LD_INT 0
66333: PPUSH
// result := [ 0 , 0 , 0 ] ;
66334: LD_ADDR_VAR 0 2
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: LD_INT 0
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: LIST
66352: ST_TO_ADDR
// if not base then
66353: LD_VAR 0 1
66357: NOT
66358: IFFALSE 66362
// exit ;
66360: GO 66411
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66362: LD_ADDR_VAR 0 2
66366: PUSH
66367: LD_VAR 0 1
66371: PPUSH
66372: LD_INT 1
66374: PPUSH
66375: CALL_OW 275
66379: PUSH
66380: LD_VAR 0 1
66384: PPUSH
66385: LD_INT 2
66387: PPUSH
66388: CALL_OW 275
66392: PUSH
66393: LD_VAR 0 1
66397: PPUSH
66398: LD_INT 3
66400: PPUSH
66401: CALL_OW 275
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: ST_TO_ADDR
// end ;
66411: LD_VAR 0 2
66415: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66416: LD_INT 0
66418: PPUSH
66419: PPUSH
// result := array ;
66420: LD_ADDR_VAR 0 3
66424: PUSH
66425: LD_VAR 0 1
66429: ST_TO_ADDR
// if size > 0 then
66430: LD_VAR 0 2
66434: PUSH
66435: LD_INT 0
66437: GREATER
66438: IFFALSE 66484
// for i := array downto size do
66440: LD_ADDR_VAR 0 4
66444: PUSH
66445: DOUBLE
66446: LD_VAR 0 1
66450: INC
66451: ST_TO_ADDR
66452: LD_VAR 0 2
66456: PUSH
66457: FOR_DOWNTO
66458: IFFALSE 66482
// result := Delete ( result , result ) ;
66460: LD_ADDR_VAR 0 3
66464: PUSH
66465: LD_VAR 0 3
66469: PPUSH
66470: LD_VAR 0 3
66474: PPUSH
66475: CALL_OW 3
66479: ST_TO_ADDR
66480: GO 66457
66482: POP
66483: POP
// end ;
66484: LD_VAR 0 3
66488: RET
// export function ComExit ( unit ) ; var tmp ; begin
66489: LD_INT 0
66491: PPUSH
66492: PPUSH
// if not IsInUnit ( unit ) then
66493: LD_VAR 0 1
66497: PPUSH
66498: CALL_OW 310
66502: NOT
66503: IFFALSE 66507
// exit ;
66505: GO 66567
// tmp := IsInUnit ( unit ) ;
66507: LD_ADDR_VAR 0 3
66511: PUSH
66512: LD_VAR 0 1
66516: PPUSH
66517: CALL_OW 310
66521: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66522: LD_VAR 0 3
66526: PPUSH
66527: CALL_OW 247
66531: PUSH
66532: LD_INT 2
66534: EQUAL
66535: IFFALSE 66548
// ComExitVehicle ( unit ) else
66537: LD_VAR 0 1
66541: PPUSH
66542: CALL_OW 121
66546: GO 66557
// ComExitBuilding ( unit ) ;
66548: LD_VAR 0 1
66552: PPUSH
66553: CALL_OW 122
// result := tmp ;
66557: LD_ADDR_VAR 0 2
66561: PUSH
66562: LD_VAR 0 3
66566: ST_TO_ADDR
// end ;
66567: LD_VAR 0 2
66571: RET
// export function ComExitAll ( units ) ; var i ; begin
66572: LD_INT 0
66574: PPUSH
66575: PPUSH
// if not units then
66576: LD_VAR 0 1
66580: NOT
66581: IFFALSE 66585
// exit ;
66583: GO 66611
// for i in units do
66585: LD_ADDR_VAR 0 3
66589: PUSH
66590: LD_VAR 0 1
66594: PUSH
66595: FOR_IN
66596: IFFALSE 66609
// ComExit ( i ) ;
66598: LD_VAR 0 3
66602: PPUSH
66603: CALL 66489 0 1
66607: GO 66595
66609: POP
66610: POP
// end ;
66611: LD_VAR 0 2
66615: RET
// export function ResetHc ; begin
66616: LD_INT 0
66618: PPUSH
// InitHc ;
66619: CALL_OW 19
// hc_importance := 0 ;
66623: LD_ADDR_OWVAR 32
66627: PUSH
66628: LD_INT 0
66630: ST_TO_ADDR
// end ;
66631: LD_VAR 0 1
66635: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66636: LD_INT 0
66638: PPUSH
66639: PPUSH
66640: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66641: LD_ADDR_VAR 0 6
66645: PUSH
66646: LD_VAR 0 1
66650: PUSH
66651: LD_VAR 0 3
66655: PLUS
66656: PUSH
66657: LD_INT 2
66659: DIV
66660: ST_TO_ADDR
// if _x < 0 then
66661: LD_VAR 0 6
66665: PUSH
66666: LD_INT 0
66668: LESS
66669: IFFALSE 66686
// _x := _x * - 1 ;
66671: LD_ADDR_VAR 0 6
66675: PUSH
66676: LD_VAR 0 6
66680: PUSH
66681: LD_INT 1
66683: NEG
66684: MUL
66685: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66686: LD_ADDR_VAR 0 7
66690: PUSH
66691: LD_VAR 0 2
66695: PUSH
66696: LD_VAR 0 4
66700: PLUS
66701: PUSH
66702: LD_INT 2
66704: DIV
66705: ST_TO_ADDR
// if _y < 0 then
66706: LD_VAR 0 7
66710: PUSH
66711: LD_INT 0
66713: LESS
66714: IFFALSE 66731
// _y := _y * - 1 ;
66716: LD_ADDR_VAR 0 7
66720: PUSH
66721: LD_VAR 0 7
66725: PUSH
66726: LD_INT 1
66728: NEG
66729: MUL
66730: ST_TO_ADDR
// result := [ _x , _y ] ;
66731: LD_ADDR_VAR 0 5
66735: PUSH
66736: LD_VAR 0 6
66740: PUSH
66741: LD_VAR 0 7
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: ST_TO_ADDR
// end ;
66750: LD_VAR 0 5
66754: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66755: LD_INT 0
66757: PPUSH
66758: PPUSH
66759: PPUSH
66760: PPUSH
// task := GetTaskList ( unit ) ;
66761: LD_ADDR_VAR 0 7
66765: PUSH
66766: LD_VAR 0 1
66770: PPUSH
66771: CALL_OW 437
66775: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66776: LD_VAR 0 7
66780: NOT
66781: PUSH
66782: LD_VAR 0 1
66786: PPUSH
66787: LD_VAR 0 2
66791: PPUSH
66792: CALL_OW 308
66796: NOT
66797: AND
66798: IFFALSE 66802
// exit ;
66800: GO 66920
// if IsInArea ( unit , area ) then
66802: LD_VAR 0 1
66806: PPUSH
66807: LD_VAR 0 2
66811: PPUSH
66812: CALL_OW 308
66816: IFFALSE 66834
// begin ComMoveToArea ( unit , goAway ) ;
66818: LD_VAR 0 1
66822: PPUSH
66823: LD_VAR 0 3
66827: PPUSH
66828: CALL_OW 113
// exit ;
66832: GO 66920
// end ; if task [ 1 ] [ 1 ] <> M then
66834: LD_VAR 0 7
66838: PUSH
66839: LD_INT 1
66841: ARRAY
66842: PUSH
66843: LD_INT 1
66845: ARRAY
66846: PUSH
66847: LD_STRING M
66849: NONEQUAL
66850: IFFALSE 66854
// exit ;
66852: GO 66920
// x := task [ 1 ] [ 2 ] ;
66854: LD_ADDR_VAR 0 5
66858: PUSH
66859: LD_VAR 0 7
66863: PUSH
66864: LD_INT 1
66866: ARRAY
66867: PUSH
66868: LD_INT 2
66870: ARRAY
66871: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66872: LD_ADDR_VAR 0 6
66876: PUSH
66877: LD_VAR 0 7
66881: PUSH
66882: LD_INT 1
66884: ARRAY
66885: PUSH
66886: LD_INT 3
66888: ARRAY
66889: ST_TO_ADDR
// if InArea ( x , y , area ) then
66890: LD_VAR 0 5
66894: PPUSH
66895: LD_VAR 0 6
66899: PPUSH
66900: LD_VAR 0 2
66904: PPUSH
66905: CALL_OW 309
66909: IFFALSE 66920
// ComStop ( unit ) ;
66911: LD_VAR 0 1
66915: PPUSH
66916: CALL_OW 141
// end ;
66920: LD_VAR 0 4
66924: RET
// export function Abs ( value ) ; begin
66925: LD_INT 0
66927: PPUSH
// result := value ;
66928: LD_ADDR_VAR 0 2
66932: PUSH
66933: LD_VAR 0 1
66937: ST_TO_ADDR
// if value < 0 then
66938: LD_VAR 0 1
66942: PUSH
66943: LD_INT 0
66945: LESS
66946: IFFALSE 66963
// result := value * - 1 ;
66948: LD_ADDR_VAR 0 2
66952: PUSH
66953: LD_VAR 0 1
66957: PUSH
66958: LD_INT 1
66960: NEG
66961: MUL
66962: ST_TO_ADDR
// end ;
66963: LD_VAR 0 2
66967: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66968: LD_INT 0
66970: PPUSH
66971: PPUSH
66972: PPUSH
66973: PPUSH
66974: PPUSH
66975: PPUSH
66976: PPUSH
66977: PPUSH
// if not unit or not building then
66978: LD_VAR 0 1
66982: NOT
66983: PUSH
66984: LD_VAR 0 2
66988: NOT
66989: OR
66990: IFFALSE 66994
// exit ;
66992: GO 67220
// x := GetX ( building ) ;
66994: LD_ADDR_VAR 0 4
66998: PUSH
66999: LD_VAR 0 2
67003: PPUSH
67004: CALL_OW 250
67008: ST_TO_ADDR
// y := GetY ( building ) ;
67009: LD_ADDR_VAR 0 6
67013: PUSH
67014: LD_VAR 0 2
67018: PPUSH
67019: CALL_OW 251
67023: ST_TO_ADDR
// d := GetDir ( building ) ;
67024: LD_ADDR_VAR 0 8
67028: PUSH
67029: LD_VAR 0 2
67033: PPUSH
67034: CALL_OW 254
67038: ST_TO_ADDR
// r := 4 ;
67039: LD_ADDR_VAR 0 9
67043: PUSH
67044: LD_INT 4
67046: ST_TO_ADDR
// for i := 1 to 5 do
67047: LD_ADDR_VAR 0 10
67051: PUSH
67052: DOUBLE
67053: LD_INT 1
67055: DEC
67056: ST_TO_ADDR
67057: LD_INT 5
67059: PUSH
67060: FOR_TO
67061: IFFALSE 67218
// begin _x := ShiftX ( x , d , r + i ) ;
67063: LD_ADDR_VAR 0 5
67067: PUSH
67068: LD_VAR 0 4
67072: PPUSH
67073: LD_VAR 0 8
67077: PPUSH
67078: LD_VAR 0 9
67082: PUSH
67083: LD_VAR 0 10
67087: PLUS
67088: PPUSH
67089: CALL_OW 272
67093: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67094: LD_ADDR_VAR 0 7
67098: PUSH
67099: LD_VAR 0 6
67103: PPUSH
67104: LD_VAR 0 8
67108: PPUSH
67109: LD_VAR 0 9
67113: PUSH
67114: LD_VAR 0 10
67118: PLUS
67119: PPUSH
67120: CALL_OW 273
67124: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67125: LD_VAR 0 5
67129: PPUSH
67130: LD_VAR 0 7
67134: PPUSH
67135: CALL_OW 488
67139: PUSH
67140: LD_VAR 0 5
67144: PPUSH
67145: LD_VAR 0 7
67149: PPUSH
67150: CALL_OW 428
67154: PPUSH
67155: CALL_OW 247
67159: PUSH
67160: LD_INT 3
67162: PUSH
67163: LD_INT 2
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: IN
67170: NOT
67171: AND
67172: IFFALSE 67216
// begin ComMoveXY ( unit , _x , _y ) ;
67174: LD_VAR 0 1
67178: PPUSH
67179: LD_VAR 0 5
67183: PPUSH
67184: LD_VAR 0 7
67188: PPUSH
67189: CALL_OW 111
// result := [ _x , _y ] ;
67193: LD_ADDR_VAR 0 3
67197: PUSH
67198: LD_VAR 0 5
67202: PUSH
67203: LD_VAR 0 7
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: ST_TO_ADDR
// exit ;
67212: POP
67213: POP
67214: GO 67220
// end ; end ;
67216: GO 67060
67218: POP
67219: POP
// end ;
67220: LD_VAR 0 3
67224: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67225: LD_INT 0
67227: PPUSH
67228: PPUSH
67229: PPUSH
// result := 0 ;
67230: LD_ADDR_VAR 0 3
67234: PUSH
67235: LD_INT 0
67237: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67238: LD_VAR 0 1
67242: PUSH
67243: LD_INT 0
67245: LESS
67246: PUSH
67247: LD_VAR 0 1
67251: PUSH
67252: LD_INT 8
67254: GREATER
67255: OR
67256: PUSH
67257: LD_VAR 0 2
67261: PUSH
67262: LD_INT 0
67264: LESS
67265: OR
67266: PUSH
67267: LD_VAR 0 2
67271: PUSH
67272: LD_INT 8
67274: GREATER
67275: OR
67276: IFFALSE 67280
// exit ;
67278: GO 67355
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67280: LD_ADDR_VAR 0 4
67284: PUSH
67285: LD_INT 22
67287: PUSH
67288: LD_VAR 0 2
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PPUSH
67297: CALL_OW 69
67301: PUSH
67302: FOR_IN
67303: IFFALSE 67353
// begin un := UnitShoot ( i ) ;
67305: LD_ADDR_VAR 0 5
67309: PUSH
67310: LD_VAR 0 4
67314: PPUSH
67315: CALL_OW 504
67319: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67320: LD_VAR 0 5
67324: PPUSH
67325: CALL_OW 255
67329: PUSH
67330: LD_VAR 0 1
67334: EQUAL
67335: IFFALSE 67351
// begin result := un ;
67337: LD_ADDR_VAR 0 3
67341: PUSH
67342: LD_VAR 0 5
67346: ST_TO_ADDR
// exit ;
67347: POP
67348: POP
67349: GO 67355
// end ; end ;
67351: GO 67302
67353: POP
67354: POP
// end ;
67355: LD_VAR 0 3
67359: RET
// export function GetCargoBay ( units ) ; begin
67360: LD_INT 0
67362: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67363: LD_ADDR_VAR 0 2
67367: PUSH
67368: LD_VAR 0 1
67372: PPUSH
67373: LD_INT 2
67375: PUSH
67376: LD_INT 34
67378: PUSH
67379: LD_INT 12
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 34
67388: PUSH
67389: LD_INT 51
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 34
67398: PUSH
67399: LD_INT 32
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 34
67408: PUSH
67409: LD_EXP 22
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: PPUSH
67425: CALL_OW 72
67429: ST_TO_ADDR
// end ;
67430: LD_VAR 0 2
67434: RET
// export function Negate ( value ) ; begin
67435: LD_INT 0
67437: PPUSH
// result := not value ;
67438: LD_ADDR_VAR 0 2
67442: PUSH
67443: LD_VAR 0 1
67447: NOT
67448: ST_TO_ADDR
// end ;
67449: LD_VAR 0 2
67453: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
67454: LD_INT 0
67456: PPUSH
// if x1 = x2 then
67457: LD_VAR 0 1
67461: PUSH
67462: LD_VAR 0 3
67466: EQUAL
67467: IFFALSE 67501
// begin if y1 > y2 then
67469: LD_VAR 0 2
67473: PUSH
67474: LD_VAR 0 4
67478: GREATER
67479: IFFALSE 67491
// result := 0 else
67481: LD_ADDR_VAR 0 5
67485: PUSH
67486: LD_INT 0
67488: ST_TO_ADDR
67489: GO 67499
// result := 3 ;
67491: LD_ADDR_VAR 0 5
67495: PUSH
67496: LD_INT 3
67498: ST_TO_ADDR
// exit ;
67499: GO 67587
// end ; if y1 = y2 then
67501: LD_VAR 0 2
67505: PUSH
67506: LD_VAR 0 4
67510: EQUAL
67511: IFFALSE 67545
// begin if x1 > x2 then
67513: LD_VAR 0 1
67517: PUSH
67518: LD_VAR 0 3
67522: GREATER
67523: IFFALSE 67535
// result := 1 else
67525: LD_ADDR_VAR 0 5
67529: PUSH
67530: LD_INT 1
67532: ST_TO_ADDR
67533: GO 67543
// result := 4 ;
67535: LD_ADDR_VAR 0 5
67539: PUSH
67540: LD_INT 4
67542: ST_TO_ADDR
// exit ;
67543: GO 67587
// end ; if x1 > x2 and y1 > y2 then
67545: LD_VAR 0 1
67549: PUSH
67550: LD_VAR 0 3
67554: GREATER
67555: PUSH
67556: LD_VAR 0 2
67560: PUSH
67561: LD_VAR 0 4
67565: GREATER
67566: AND
67567: IFFALSE 67579
// result := 2 else
67569: LD_ADDR_VAR 0 5
67573: PUSH
67574: LD_INT 2
67576: ST_TO_ADDR
67577: GO 67587
// result := 5 ;
67579: LD_ADDR_VAR 0 5
67583: PUSH
67584: LD_INT 5
67586: ST_TO_ADDR
// end ;
67587: LD_VAR 0 5
67591: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67592: LD_INT 0
67594: PPUSH
67595: PPUSH
// if not driver or not IsInUnit ( driver ) then
67596: LD_VAR 0 1
67600: NOT
67601: PUSH
67602: LD_VAR 0 1
67606: PPUSH
67607: CALL_OW 310
67611: NOT
67612: OR
67613: IFFALSE 67617
// exit ;
67615: GO 67707
// vehicle := IsInUnit ( driver ) ;
67617: LD_ADDR_VAR 0 3
67621: PUSH
67622: LD_VAR 0 1
67626: PPUSH
67627: CALL_OW 310
67631: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67632: LD_VAR 0 1
67636: PPUSH
67637: LD_STRING \
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: LD_INT 0
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: PUSH
67667: LD_STRING E
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: LD_VAR 0 3
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PPUSH
67703: CALL_OW 446
// end ;
67707: LD_VAR 0 2
67711: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67712: LD_INT 0
67714: PPUSH
67715: PPUSH
// if not driver or not IsInUnit ( driver ) then
67716: LD_VAR 0 1
67720: NOT
67721: PUSH
67722: LD_VAR 0 1
67726: PPUSH
67727: CALL_OW 310
67731: NOT
67732: OR
67733: IFFALSE 67737
// exit ;
67735: GO 67827
// vehicle := IsInUnit ( driver ) ;
67737: LD_ADDR_VAR 0 3
67741: PUSH
67742: LD_VAR 0 1
67746: PPUSH
67747: CALL_OW 310
67751: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67752: LD_VAR 0 1
67756: PPUSH
67757: LD_STRING \
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: LD_INT 0
67765: PUSH
67766: LD_INT 0
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: LD_INT 0
67774: PUSH
67775: LD_INT 0
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: PUSH
67787: LD_STRING E
67789: PUSH
67790: LD_INT 0
67792: PUSH
67793: LD_INT 0
67795: PUSH
67796: LD_VAR 0 3
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PPUSH
67823: CALL_OW 447
// end ;
67827: LD_VAR 0 2
67831: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67832: LD_INT 0
67834: PPUSH
67835: PPUSH
67836: PPUSH
// tmp := [ ] ;
67837: LD_ADDR_VAR 0 5
67841: PUSH
67842: EMPTY
67843: ST_TO_ADDR
// for i in units do
67844: LD_ADDR_VAR 0 4
67848: PUSH
67849: LD_VAR 0 1
67853: PUSH
67854: FOR_IN
67855: IFFALSE 67893
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67857: LD_ADDR_VAR 0 5
67861: PUSH
67862: LD_VAR 0 5
67866: PPUSH
67867: LD_VAR 0 5
67871: PUSH
67872: LD_INT 1
67874: PLUS
67875: PPUSH
67876: LD_VAR 0 4
67880: PPUSH
67881: CALL_OW 256
67885: PPUSH
67886: CALL_OW 2
67890: ST_TO_ADDR
67891: GO 67854
67893: POP
67894: POP
// if not tmp then
67895: LD_VAR 0 5
67899: NOT
67900: IFFALSE 67904
// exit ;
67902: GO 67952
// if asc then
67904: LD_VAR 0 2
67908: IFFALSE 67932
// result := SortListByListAsc ( units , tmp ) else
67910: LD_ADDR_VAR 0 3
67914: PUSH
67915: LD_VAR 0 1
67919: PPUSH
67920: LD_VAR 0 5
67924: PPUSH
67925: CALL_OW 76
67929: ST_TO_ADDR
67930: GO 67952
// result := SortListByListDesc ( units , tmp ) ;
67932: LD_ADDR_VAR 0 3
67936: PUSH
67937: LD_VAR 0 1
67941: PPUSH
67942: LD_VAR 0 5
67946: PPUSH
67947: CALL_OW 77
67951: ST_TO_ADDR
// end ;
67952: LD_VAR 0 3
67956: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67957: LD_INT 0
67959: PPUSH
67960: PPUSH
// task := GetTaskList ( mech ) ;
67961: LD_ADDR_VAR 0 4
67965: PUSH
67966: LD_VAR 0 1
67970: PPUSH
67971: CALL_OW 437
67975: ST_TO_ADDR
// if not task then
67976: LD_VAR 0 4
67980: NOT
67981: IFFALSE 67985
// exit ;
67983: GO 68027
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67985: LD_ADDR_VAR 0 3
67989: PUSH
67990: LD_VAR 0 4
67994: PUSH
67995: LD_INT 1
67997: ARRAY
67998: PUSH
67999: LD_INT 1
68001: ARRAY
68002: PUSH
68003: LD_STRING r
68005: EQUAL
68006: PUSH
68007: LD_VAR 0 4
68011: PUSH
68012: LD_INT 1
68014: ARRAY
68015: PUSH
68016: LD_INT 4
68018: ARRAY
68019: PUSH
68020: LD_VAR 0 2
68024: EQUAL
68025: AND
68026: ST_TO_ADDR
// end ;
68027: LD_VAR 0 3
68031: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68032: LD_INT 0
68034: PPUSH
// SetDir ( unit , d ) ;
68035: LD_VAR 0 1
68039: PPUSH
68040: LD_VAR 0 4
68044: PPUSH
68045: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68049: LD_VAR 0 1
68053: PPUSH
68054: LD_VAR 0 2
68058: PPUSH
68059: LD_VAR 0 3
68063: PPUSH
68064: LD_VAR 0 5
68068: PPUSH
68069: CALL_OW 48
// end ;
68073: LD_VAR 0 6
68077: RET
// export function ToNaturalNumber ( number ) ; begin
68078: LD_INT 0
68080: PPUSH
// result := number div 1 ;
68081: LD_ADDR_VAR 0 2
68085: PUSH
68086: LD_VAR 0 1
68090: PUSH
68091: LD_INT 1
68093: DIV
68094: ST_TO_ADDR
// if number < 0 then
68095: LD_VAR 0 1
68099: PUSH
68100: LD_INT 0
68102: LESS
68103: IFFALSE 68113
// result := 0 ;
68105: LD_ADDR_VAR 0 2
68109: PUSH
68110: LD_INT 0
68112: ST_TO_ADDR
// end ;
68113: LD_VAR 0 2
68117: RET
// export function SortByClass ( units , class ) ; var un ; begin
68118: LD_INT 0
68120: PPUSH
68121: PPUSH
// if not units or not class then
68122: LD_VAR 0 1
68126: NOT
68127: PUSH
68128: LD_VAR 0 2
68132: NOT
68133: OR
68134: IFFALSE 68138
// exit ;
68136: GO 68233
// result := [ ] ;
68138: LD_ADDR_VAR 0 3
68142: PUSH
68143: EMPTY
68144: ST_TO_ADDR
// for un in units do
68145: LD_ADDR_VAR 0 4
68149: PUSH
68150: LD_VAR 0 1
68154: PUSH
68155: FOR_IN
68156: IFFALSE 68231
// if GetClass ( un ) = class then
68158: LD_VAR 0 4
68162: PPUSH
68163: CALL_OW 257
68167: PUSH
68168: LD_VAR 0 2
68172: EQUAL
68173: IFFALSE 68200
// result := Insert ( result , 1 , un ) else
68175: LD_ADDR_VAR 0 3
68179: PUSH
68180: LD_VAR 0 3
68184: PPUSH
68185: LD_INT 1
68187: PPUSH
68188: LD_VAR 0 4
68192: PPUSH
68193: CALL_OW 2
68197: ST_TO_ADDR
68198: GO 68229
// result := Replace ( result , result + 1 , un ) ;
68200: LD_ADDR_VAR 0 3
68204: PUSH
68205: LD_VAR 0 3
68209: PPUSH
68210: LD_VAR 0 3
68214: PUSH
68215: LD_INT 1
68217: PLUS
68218: PPUSH
68219: LD_VAR 0 4
68223: PPUSH
68224: CALL_OW 1
68228: ST_TO_ADDR
68229: GO 68155
68231: POP
68232: POP
// end ;
68233: LD_VAR 0 3
68237: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68238: LD_INT 0
68240: PPUSH
68241: PPUSH
68242: PPUSH
68243: PPUSH
68244: PPUSH
68245: PPUSH
68246: PPUSH
// result := [ ] ;
68247: LD_ADDR_VAR 0 4
68251: PUSH
68252: EMPTY
68253: ST_TO_ADDR
// if x - r < 0 then
68254: LD_VAR 0 1
68258: PUSH
68259: LD_VAR 0 3
68263: MINUS
68264: PUSH
68265: LD_INT 0
68267: LESS
68268: IFFALSE 68280
// min_x := 0 else
68270: LD_ADDR_VAR 0 8
68274: PUSH
68275: LD_INT 0
68277: ST_TO_ADDR
68278: GO 68296
// min_x := x - r ;
68280: LD_ADDR_VAR 0 8
68284: PUSH
68285: LD_VAR 0 1
68289: PUSH
68290: LD_VAR 0 3
68294: MINUS
68295: ST_TO_ADDR
// if y - r < 0 then
68296: LD_VAR 0 2
68300: PUSH
68301: LD_VAR 0 3
68305: MINUS
68306: PUSH
68307: LD_INT 0
68309: LESS
68310: IFFALSE 68322
// min_y := 0 else
68312: LD_ADDR_VAR 0 7
68316: PUSH
68317: LD_INT 0
68319: ST_TO_ADDR
68320: GO 68338
// min_y := y - r ;
68322: LD_ADDR_VAR 0 7
68326: PUSH
68327: LD_VAR 0 2
68331: PUSH
68332: LD_VAR 0 3
68336: MINUS
68337: ST_TO_ADDR
// max_x := x + r ;
68338: LD_ADDR_VAR 0 9
68342: PUSH
68343: LD_VAR 0 1
68347: PUSH
68348: LD_VAR 0 3
68352: PLUS
68353: ST_TO_ADDR
// max_y := y + r ;
68354: LD_ADDR_VAR 0 10
68358: PUSH
68359: LD_VAR 0 2
68363: PUSH
68364: LD_VAR 0 3
68368: PLUS
68369: ST_TO_ADDR
// for _x = min_x to max_x do
68370: LD_ADDR_VAR 0 5
68374: PUSH
68375: DOUBLE
68376: LD_VAR 0 8
68380: DEC
68381: ST_TO_ADDR
68382: LD_VAR 0 9
68386: PUSH
68387: FOR_TO
68388: IFFALSE 68489
// for _y = min_y to max_y do
68390: LD_ADDR_VAR 0 6
68394: PUSH
68395: DOUBLE
68396: LD_VAR 0 7
68400: DEC
68401: ST_TO_ADDR
68402: LD_VAR 0 10
68406: PUSH
68407: FOR_TO
68408: IFFALSE 68485
// begin if not ValidHex ( _x , _y ) then
68410: LD_VAR 0 5
68414: PPUSH
68415: LD_VAR 0 6
68419: PPUSH
68420: CALL_OW 488
68424: NOT
68425: IFFALSE 68429
// continue ;
68427: GO 68407
// if GetResourceTypeXY ( _x , _y ) then
68429: LD_VAR 0 5
68433: PPUSH
68434: LD_VAR 0 6
68438: PPUSH
68439: CALL_OW 283
68443: IFFALSE 68483
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68445: LD_ADDR_VAR 0 4
68449: PUSH
68450: LD_VAR 0 4
68454: PPUSH
68455: LD_VAR 0 4
68459: PUSH
68460: LD_INT 1
68462: PLUS
68463: PPUSH
68464: LD_VAR 0 5
68468: PUSH
68469: LD_VAR 0 6
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PPUSH
68478: CALL_OW 1
68482: ST_TO_ADDR
// end ;
68483: GO 68407
68485: POP
68486: POP
68487: GO 68387
68489: POP
68490: POP
// end ;
68491: LD_VAR 0 4
68495: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
68496: LD_INT 0
68498: PPUSH
68499: PPUSH
68500: PPUSH
68501: PPUSH
68502: PPUSH
68503: PPUSH
// if not units then
68504: LD_VAR 0 1
68508: NOT
68509: IFFALSE 68513
// exit ;
68511: GO 68914
// result := UnitFilter ( units , [ f_ok ] ) ;
68513: LD_ADDR_VAR 0 3
68517: PUSH
68518: LD_VAR 0 1
68522: PPUSH
68523: LD_INT 50
68525: PUSH
68526: EMPTY
68527: LIST
68528: PPUSH
68529: CALL_OW 72
68533: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68534: LD_ADDR_VAR 0 7
68538: PUSH
68539: LD_VAR 0 1
68543: PUSH
68544: LD_INT 1
68546: ARRAY
68547: PPUSH
68548: CALL_OW 255
68552: ST_TO_ADDR
// if not result then
68553: LD_VAR 0 3
68557: NOT
68558: IFFALSE 68562
// exit ;
68560: GO 68914
// for i in result do
68562: LD_ADDR_VAR 0 4
68566: PUSH
68567: LD_VAR 0 3
68571: PUSH
68572: FOR_IN
68573: IFFALSE 68912
// begin tag := GetTag ( i ) + 1 ;
68575: LD_ADDR_VAR 0 8
68579: PUSH
68580: LD_VAR 0 4
68584: PPUSH
68585: CALL_OW 110
68589: PUSH
68590: LD_INT 1
68592: PLUS
68593: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68594: LD_ADDR_VAR 0 6
68598: PUSH
68599: LD_VAR 0 4
68603: PPUSH
68604: CALL_OW 250
68608: PPUSH
68609: LD_VAR 0 4
68613: PPUSH
68614: CALL_OW 251
68618: PPUSH
68619: LD_INT 6
68621: PPUSH
68622: CALL 68238 0 3
68626: ST_TO_ADDR
// if cr then
68627: LD_VAR 0 6
68631: IFFALSE 68670
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68633: LD_VAR 0 4
68637: PPUSH
68638: LD_VAR 0 6
68642: PUSH
68643: LD_INT 1
68645: ARRAY
68646: PUSH
68647: LD_INT 1
68649: ARRAY
68650: PPUSH
68651: LD_VAR 0 6
68655: PUSH
68656: LD_INT 1
68658: ARRAY
68659: PUSH
68660: LD_INT 2
68662: ARRAY
68663: PPUSH
68664: CALL_OW 116
68668: GO 68910
// if path > tag then
68670: LD_VAR 0 2
68674: PUSH
68675: LD_VAR 0 8
68679: GREATER
68680: IFFALSE 68858
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
68682: LD_ADDR_VAR 0 5
68686: PUSH
68687: LD_INT 81
68689: PUSH
68690: LD_VAR 0 7
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 91
68701: PUSH
68702: LD_VAR 0 4
68706: PUSH
68707: LD_INT 12
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: LIST
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PPUSH
68719: CALL_OW 69
68723: ST_TO_ADDR
// if enemy then
68724: LD_VAR 0 5
68728: IFFALSE 68756
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68730: LD_VAR 0 4
68734: PPUSH
68735: LD_VAR 0 5
68739: PPUSH
68740: LD_VAR 0 4
68744: PPUSH
68745: CALL_OW 74
68749: PPUSH
68750: CALL_OW 115
68754: GO 68856
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68756: LD_VAR 0 4
68760: PPUSH
68761: LD_VAR 0 2
68765: PUSH
68766: LD_VAR 0 8
68770: ARRAY
68771: PUSH
68772: LD_INT 1
68774: ARRAY
68775: PPUSH
68776: LD_VAR 0 2
68780: PUSH
68781: LD_VAR 0 8
68785: ARRAY
68786: PUSH
68787: LD_INT 2
68789: ARRAY
68790: PPUSH
68791: CALL_OW 297
68795: PUSH
68796: LD_INT 6
68798: GREATER
68799: IFFALSE 68842
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68801: LD_VAR 0 4
68805: PPUSH
68806: LD_VAR 0 2
68810: PUSH
68811: LD_VAR 0 8
68815: ARRAY
68816: PUSH
68817: LD_INT 1
68819: ARRAY
68820: PPUSH
68821: LD_VAR 0 2
68825: PUSH
68826: LD_VAR 0 8
68830: ARRAY
68831: PUSH
68832: LD_INT 2
68834: ARRAY
68835: PPUSH
68836: CALL_OW 114
68840: GO 68856
// SetTag ( i , tag ) ;
68842: LD_VAR 0 4
68846: PPUSH
68847: LD_VAR 0 8
68851: PPUSH
68852: CALL_OW 109
// end else
68856: GO 68910
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68858: LD_ADDR_VAR 0 5
68862: PUSH
68863: LD_INT 81
68865: PUSH
68866: LD_VAR 0 7
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PPUSH
68875: CALL_OW 69
68879: ST_TO_ADDR
// if enemy then
68880: LD_VAR 0 5
68884: IFFALSE 68910
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68886: LD_VAR 0 4
68890: PPUSH
68891: LD_VAR 0 5
68895: PPUSH
68896: LD_VAR 0 4
68900: PPUSH
68901: CALL_OW 74
68905: PPUSH
68906: CALL_OW 115
// end ; end ;
68910: GO 68572
68912: POP
68913: POP
// end ; end_of_file
68914: LD_VAR 0 3
68918: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68919: LD_VAR 0 1
68923: PUSH
68924: LD_INT 200
68926: DOUBLE
68927: GREATEREQUAL
68928: IFFALSE 68936
68930: LD_INT 299
68932: DOUBLE
68933: LESSEQUAL
68934: IFTRUE 68938
68936: GO 68970
68938: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68939: LD_VAR 0 1
68943: PPUSH
68944: LD_VAR 0 2
68948: PPUSH
68949: LD_VAR 0 3
68953: PPUSH
68954: LD_VAR 0 4
68958: PPUSH
68959: LD_VAR 0 5
68963: PPUSH
68964: CALL 25481 0 5
68968: GO 69047
68970: LD_INT 300
68972: DOUBLE
68973: GREATEREQUAL
68974: IFFALSE 68982
68976: LD_INT 399
68978: DOUBLE
68979: LESSEQUAL
68980: IFTRUE 68984
68982: GO 69046
68984: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68985: LD_VAR 0 1
68989: PPUSH
68990: LD_VAR 0 2
68994: PPUSH
68995: LD_VAR 0 3
68999: PPUSH
69000: LD_VAR 0 4
69004: PPUSH
69005: LD_VAR 0 5
69009: PPUSH
69010: LD_VAR 0 6
69014: PPUSH
69015: LD_VAR 0 7
69019: PPUSH
69020: LD_VAR 0 8
69024: PPUSH
69025: LD_VAR 0 9
69029: PPUSH
69030: LD_VAR 0 10
69034: PPUSH
69035: LD_VAR 0 11
69039: PPUSH
69040: CALL 23379 0 11
69044: GO 69047
69046: POP
// end ;
69047: PPOPN 11
69049: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69050: LD_VAR 0 1
69054: PPUSH
69055: LD_VAR 0 2
69059: PPUSH
69060: LD_VAR 0 3
69064: PPUSH
69065: LD_VAR 0 4
69069: PPUSH
69070: LD_VAR 0 5
69074: PPUSH
69075: CALL 25473 0 5
// end ; end_of_file
69079: PPOPN 5
69081: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69082: LD_VAR 0 1
69086: PPUSH
69087: LD_VAR 0 2
69091: PPUSH
69092: LD_VAR 0 3
69096: PPUSH
69097: LD_VAR 0 4
69101: PPUSH
69102: LD_VAR 0 5
69106: PPUSH
69107: LD_VAR 0 6
69111: PPUSH
69112: CALL 11574 0 6
// end ;
69116: PPOPN 6
69118: END
