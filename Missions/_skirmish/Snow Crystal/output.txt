// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// SetWeather ( 2 , 300 , 30 ) ;
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 300
  19: PPUSH
  20: LD_INT 30
  22: PPUSH
  23: CALL_OW 550
// AnimateTrees ( true ) ;
  27: LD_INT 1
  29: PPUSH
  30: CALL_OW 573
// GameType ;
  34: CALL 280 0 0
// PrepareAmerican ;
  38: CALL 607 0 0
// if game_type = 2 then
  42: LD_EXP 1
  46: PUSH
  47: LD_INT 2
  49: EQUAL
  50: IFFALSE 56
// PrepareRussian ;
  52: CALL 6794 0 0
// GameStarted ;
  56: CALL 424 0 0
// end ;
  60: END
// every 0 0$01 do var sib ;
  61: GO 63
  63: DISABLE
  64: LD_INT 0
  66: PPUSH
// begin enable ;
  67: ENABLE
// sib := GetResourceType ( GetBase ( jota_base ) , mat_siberit ) ;
  68: LD_ADDR_VAR 0 1
  72: PUSH
  73: LD_INT 1
  75: PPUSH
  76: CALL_OW 274
  80: PPUSH
  81: LD_INT 3
  83: PPUSH
  84: CALL_OW 275
  88: ST_TO_ADDR
// Display_Strings := [ #tick , timer , #sib , sib , need_to_win ] ;
  89: LD_ADDR_OWVAR 47
  93: PUSH
  94: LD_STRING #tick
  96: PUSH
  97: LD_EXP 6
 101: PUSH
 102: LD_STRING #sib
 104: PUSH
 105: LD_VAR 0 1
 109: PUSH
 110: LD_EXP 5
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 122: LD_ADDR_EXP 6
 126: PUSH
 127: LD_EXP 6
 131: PUSH
 132: LD_INT 35
 134: PLUS
 135: ST_TO_ADDR
// end ;
 136: PPOPN 1
 138: END
// every 1 do
 139: GO 141
 141: DISABLE
// begin while ( true ) do
 142: LD_INT 1
 144: IFFALSE 279
// begin music_nat := 1 ;
 146: LD_ADDR_OWVAR 71
 150: PUSH
 151: LD_INT 1
 153: ST_TO_ADDR
// music_class := 5 ;
 154: LD_ADDR_OWVAR 72
 158: PUSH
 159: LD_INT 5
 161: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 162: LD_INT 7350
 164: PPUSH
 165: LD_INT 10500
 167: PPUSH
 168: CALL_OW 12
 172: PPUSH
 173: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 177: LD_ADDR_OWVAR 71
 181: PUSH
 182: LD_INT 1
 184: PUSH
 185: LD_INT 3
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 1
 194: PPUSH
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 12
 202: ARRAY
 203: ST_TO_ADDR
// music_class := 0 ;
 204: LD_ADDR_OWVAR 72
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 212: LD_INT 7350
 214: PPUSH
 215: LD_INT 10500
 217: PPUSH
 218: CALL_OW 12
 222: PPUSH
 223: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 227: LD_ADDR_OWVAR 71
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 1
 244: PPUSH
 245: LD_INT 2
 247: PPUSH
 248: CALL_OW 12
 252: ARRAY
 253: ST_TO_ADDR
// music_class := 0 ;
 254: LD_ADDR_OWVAR 72
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 262: LD_INT 7350
 264: PPUSH
 265: LD_INT 10500
 267: PPUSH
 268: CALL_OW 12
 272: PPUSH
 273: CALL_OW 67
// end ;
 277: GO 142
// end ; end_of_file
 279: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 280: LD_INT 0
 282: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 283: LD_ADDR_EXP 2
 287: PUSH
 288: LD_INT 0
 290: PPUSH
 291: CALL_OW 426
 295: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 296: LD_ADDR_EXP 1
 300: PUSH
 301: LD_INT 1
 303: PPUSH
 304: CALL_OW 426
 308: ST_TO_ADDR
// if game_type = 1 then
 309: LD_EXP 1
 313: PUSH
 314: LD_INT 1
 316: EQUAL
 317: IFFALSE 339
// case Query ( GameRulesAm ) of 1 :
 319: LD_STRING GameRulesAm
 321: PPUSH
 322: CALL_OW 97
 326: PUSH
 327: LD_INT 1
 329: DOUBLE
 330: EQUAL
 331: IFTRUE 335
 333: GO 338
 335: POP
// ; end ;
 336: GO 339
 338: POP
// if game_type = 2 then
 339: LD_EXP 1
 343: PUSH
 344: LD_INT 2
 346: EQUAL
 347: IFFALSE 369
// case Query ( GameRulesRu ) of 1 :
 349: LD_STRING GameRulesRu
 351: PPUSH
 352: CALL_OW 97
 356: PUSH
 357: LD_INT 1
 359: DOUBLE
 360: EQUAL
 361: IFTRUE 365
 363: GO 368
 365: POP
// ; end ;
 366: GO 369
 368: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 369: LD_ADDR_EXP 3
 373: PUSH
 374: LD_INT 6
 376: PUSH
 377: LD_INT 4
 379: PUSH
 380: LD_INT 2
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: LIST
 387: PUSH
 388: LD_EXP 2
 392: ARRAY
 393: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 394: LD_ADDR_EXP 4
 398: PUSH
 399: LD_INT 4
 401: PUSH
 402: LD_INT 5
 404: PUSH
 405: LD_INT 6
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: PUSH
 413: LD_EXP 2
 417: ARRAY
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 1
 423: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 424: LD_INT 0
 426: PPUSH
// if game_type = 1 then
 427: LD_EXP 1
 431: PUSH
 432: LD_INT 1
 434: EQUAL
 435: IFFALSE 504
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 437: LD_ADDR_EXP 5
 441: PUSH
 442: LD_INT 350
 444: PUSH
 445: LD_INT 375
 447: PUSH
 448: LD_INT 400
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_EXP 2
 460: ARRAY
 461: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 462: LD_ADDR_EXP 7
 466: PUSH
 467: LD_INT 95
 469: PUSH
 470: LD_INT 100
 472: PUSH
 473: LD_INT 105
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PUSH
 481: LD_EXP 2
 485: ARRAY
 486: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 487: LD_INT 84
 489: PPUSH
 490: LD_INT 45
 492: PPUSH
 493: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 497: LD_STRING GType1
 499: PPUSH
 500: CALL_OW 337
// end ; if game_type = 2 then
 504: LD_EXP 1
 508: PUSH
 509: LD_INT 2
 511: EQUAL
 512: IFFALSE 594
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 514: LD_ADDR_EXP 5
 518: PUSH
 519: LD_INT 300
 521: PUSH
 522: LD_INT 350
 524: PUSH
 525: LD_INT 400
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_EXP 2
 537: ARRAY
 538: ST_TO_ADDR
// depot_captured := false ;
 539: LD_ADDR_EXP 8
 543: PUSH
 544: LD_INT 0
 546: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 547: LD_EXP 18
 551: PPUSH
 552: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 556: LD_STRING GType2
 558: PPUSH
 559: CALL_OW 337
// Wait ( 0 0$03 ) ;
 563: LD_INT 105
 565: PPUSH
 566: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 570: LD_EXP 19
 574: PPUSH
 575: LD_STRING D-gorky1
 577: PPUSH
 578: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 582: LD_EXP 18
 586: PPUSH
 587: LD_STRING D-rudow1
 589: PPUSH
 590: CALL_OW 88
// end ; timer := 0 0$00 ;
 594: LD_ADDR_EXP 6
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// end ; end_of_file
 602: LD_VAR 0 1
 606: RET
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
 611: PPUSH
 612: PPUSH
 613: PPUSH
 614: PPUSH
// SetBName ( jota_base , jota ) ;
 615: LD_INT 1
 617: PPUSH
 618: LD_STRING jota
 620: PPUSH
 621: CALL_OW 500
// if game_type = 1 then
 625: LD_EXP 1
 629: PUSH
 630: LD_INT 1
 632: EQUAL
 633: IFFALSE 1065
// begin list := [ west_bun1 , east_bun , am_gun ] ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_INT 29
 642: PUSH
 643: LD_INT 35
 645: PUSH
 646: LD_INT 21
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: ST_TO_ADDR
// if game_diff = 1 then
 654: LD_EXP 2
 658: PUSH
 659: LD_INT 1
 661: EQUAL
 662: IFFALSE 677
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 664: LD_INT 57
 666: PPUSH
 667: LD_INT 3
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: CALL_OW 322
// if game_diff = 2 then
 677: LD_EXP 2
 681: PUSH
 682: LD_INT 2
 684: EQUAL
 685: IFFALSE 700
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 687: LD_INT 58
 689: PPUSH
 690: LD_INT 3
 692: PPUSH
 693: LD_INT 2
 695: PPUSH
 696: CALL_OW 322
// if game_diff = 3 then
 700: LD_EXP 2
 704: PUSH
 705: LD_INT 3
 707: EQUAL
 708: IFFALSE 723
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 710: LD_INT 59
 712: PPUSH
 713: LD_INT 3
 715: PPUSH
 716: LD_INT 2
 718: PPUSH
 719: CALL_OW 322
// for i = 1 to list do
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_VAR 0 5
 737: PUSH
 738: FOR_TO
 739: IFFALSE 758
// RemoveUnit ( list [ i ] ) ;
 741: LD_VAR 0 5
 745: PUSH
 746: LD_VAR 0 2
 750: ARRAY
 751: PPUSH
 752: CALL_OW 64
 756: GO 738
 758: POP
 759: POP
// ResetFog ;
 760: CALL_OW 335
// uc_side := 1 ;
 764: LD_ADDR_OWVAR 20
 768: PUSH
 769: LD_INT 1
 771: ST_TO_ADDR
// uc_nation := 1 ;
 772: LD_ADDR_OWVAR 21
 776: PUSH
 777: LD_INT 1
 779: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 4
 792: PUSH
 793: LD_EXP 2
 797: MINUS
 798: PUSH
 799: FOR_TO
 800: IFFALSE 837
// begin un := CreateHumanWithClass ( 1 , game_skill ) ;
 802: LD_ADDR_VAR 0 3
 806: PUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_EXP 3
 814: PPUSH
 815: CALL 9068 0 2
 819: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 820: LD_VAR 0 3
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: LD_INT 0
 830: PPUSH
 831: CALL_OW 49
// end ;
 835: GO 799
 837: POP
 838: POP
// for i = 1 to 5 - ( game_diff ) do
 839: LD_ADDR_VAR 0 2
 843: PUSH
 844: DOUBLE
 845: LD_INT 1
 847: DEC
 848: ST_TO_ADDR
 849: LD_INT 5
 851: PUSH
 852: LD_EXP 2
 856: MINUS
 857: PUSH
 858: FOR_TO
 859: IFFALSE 896
// begin un := CreateHumanWithClass ( 2 , game_skill ) ;
 861: LD_ADDR_VAR 0 3
 865: PUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_EXP 3
 873: PPUSH
 874: CALL 9068 0 2
 878: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 879: LD_VAR 0 3
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 49
// end ;
 894: GO 858
 896: POP
 897: POP
// for i = 1 to 5 - ( game_diff ) do
 898: LD_ADDR_VAR 0 2
 902: PUSH
 903: DOUBLE
 904: LD_INT 1
 906: DEC
 907: ST_TO_ADDR
 908: LD_INT 5
 910: PUSH
 911: LD_EXP 2
 915: MINUS
 916: PUSH
 917: FOR_TO
 918: IFFALSE 955
// begin un := CreateHumanWithClass ( 3 , game_skill ) ;
 920: LD_ADDR_VAR 0 3
 924: PUSH
 925: LD_INT 3
 927: PPUSH
 928: LD_EXP 3
 932: PPUSH
 933: CALL 9068 0 2
 937: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 938: LD_VAR 0 3
 942: PPUSH
 943: LD_INT 1
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL_OW 49
// end ;
 953: GO 917
 955: POP
 956: POP
// for i = 1 to 5 - ( game_diff ) do
 957: LD_ADDR_VAR 0 2
 961: PUSH
 962: DOUBLE
 963: LD_INT 1
 965: DEC
 966: ST_TO_ADDR
 967: LD_INT 5
 969: PUSH
 970: LD_EXP 2
 974: MINUS
 975: PUSH
 976: FOR_TO
 977: IFFALSE 1014
// begin un := CreateHumanWithClass ( 4 , game_skill ) ;
 979: LD_ADDR_VAR 0 3
 983: PUSH
 984: LD_INT 4
 986: PPUSH
 987: LD_EXP 3
 991: PPUSH
 992: CALL 9068 0 2
 996: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 997: LD_VAR 0 3
1001: PPUSH
1002: LD_INT 1
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// end ;
1012: GO 976
1014: POP
1015: POP
// hc_importance := 100 ;
1016: LD_ADDR_OWVAR 32
1020: PUSH
1021: LD_INT 100
1023: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1024: LD_ADDR_EXP 9
1028: PUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_EXP 3
1036: PPUSH
1037: CALL 9068 0 2
1041: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1042: LD_EXP 9
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// hc_importance := 0 ;
1057: LD_ADDR_OWVAR 32
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// end ; if game_type = 2 then
1065: LD_EXP 1
1069: PUSH
1070: LD_INT 2
1072: EQUAL
1073: IFFALSE 2238
// begin uc_side := 1 ;
1075: LD_ADDR_OWVAR 20
1079: PUSH
1080: LD_INT 1
1082: ST_TO_ADDR
// uc_nation := 1 ;
1083: LD_ADDR_OWVAR 21
1087: PUSH
1088: LD_INT 1
1090: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1091: LD_INT 1
1093: PPUSH
1094: CALL_OW 274
1098: PPUSH
1099: LD_INT 1
1101: PPUSH
1102: LD_INT 1000
1104: PPUSH
1105: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1109: LD_INT 20
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 322
// for i = 1 to 4 do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: DOUBLE
1128: LD_INT 1
1130: DEC
1131: ST_TO_ADDR
1132: LD_INT 4
1134: PUSH
1135: FOR_TO
1136: IFFALSE 1195
// begin for p = 1 to 5 do
1138: LD_ADDR_VAR 0 6
1142: PUSH
1143: DOUBLE
1144: LD_INT 1
1146: DEC
1147: ST_TO_ADDR
1148: LD_INT 5
1150: PUSH
1151: FOR_TO
1152: IFFALSE 1191
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1154: LD_ADDR_VAR 0 3
1158: PUSH
1159: LD_VAR 0 2
1163: PPUSH
1164: LD_EXP 4
1168: PPUSH
1169: CALL 9068 0 2
1173: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1174: LD_VAR 0 3
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 49
// end ;
1189: GO 1151
1191: POP
1192: POP
// end ;
1193: GO 1135
1195: POP
1196: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1197: LD_ADDR_VAR 0 3
1201: PUSH
1202: LD_INT 5
1204: PPUSH
1205: LD_EXP 4
1209: PPUSH
1210: CALL 9068 0 2
1214: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1215: LD_VAR 0 3
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1230: LD_VAR 0 3
1234: PPUSH
1235: LD_INT 29
1237: PPUSH
1238: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1242: LD_ADDR_VAR 0 3
1246: PUSH
1247: LD_INT 5
1249: PPUSH
1250: LD_EXP 4
1254: PPUSH
1255: CALL 9068 0 2
1259: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1260: LD_VAR 0 3
1264: PPUSH
1265: LD_INT 4
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1275: LD_VAR 0 3
1279: PPUSH
1280: LD_INT 20
1282: PPUSH
1283: CALL_OW 120
// if game_diff > 1 then
1287: LD_EXP 2
1291: PUSH
1292: LD_INT 1
1294: GREATER
1295: IFFALSE 1439
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1297: LD_ADDR_VAR 0 3
1301: PUSH
1302: LD_INT 5
1304: PPUSH
1305: LD_EXP 4
1309: PPUSH
1310: CALL 9068 0 2
1314: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1315: LD_VAR 0 3
1319: PPUSH
1320: LD_INT 3
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: CALL_OW 49
// for i = 1 to 2 do
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: DOUBLE
1336: LD_INT 1
1338: DEC
1339: ST_TO_ADDR
1340: LD_INT 2
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1437
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1346: LD_ADDR_VAR 0 3
1350: PUSH
1351: LD_INT 5
1353: PPUSH
1354: LD_EXP 4
1358: PPUSH
1359: CALL 9068 0 2
1363: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1364: LD_VAR 0 3
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: LD_INT 0
1374: PPUSH
1375: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1379: LD_VAR 0 3
1383: PPUSH
1384: LD_INT 22
1386: PUSH
1387: LD_INT 1
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: PUSH
1394: LD_INT 30
1396: PUSH
1397: LD_INT 4
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 24
1406: PUSH
1407: LD_INT 251
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: PPUSH
1422: CALL_OW 69
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: PPUSH
1431: CALL_OW 120
// end ;
1435: GO 1343
1437: POP
1438: POP
// end ; if game_diff > 1 then
1439: LD_EXP 2
1443: PUSH
1444: LD_INT 1
1446: GREATER
1447: IFFALSE 1485
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1449: LD_ADDR_VAR 0 3
1453: PUSH
1454: LD_INT 5
1456: PPUSH
1457: LD_EXP 4
1461: PPUSH
1462: CALL 9068 0 2
1466: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_INT 37
1474: PPUSH
1475: LD_INT 44
1477: PPUSH
1478: LD_INT 0
1480: PPUSH
1481: CALL_OW 48
// end ; if game_diff > 2 then
1485: LD_EXP 2
1489: PUSH
1490: LD_INT 2
1492: GREATER
1493: IFFALSE 1543
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1495: LD_ADDR_VAR 0 3
1499: PUSH
1500: LD_INT 5
1502: PPUSH
1503: LD_EXP 4
1507: PPUSH
1508: CALL 9068 0 2
1512: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1513: LD_VAR 0 3
1517: PPUSH
1518: LD_INT 106
1520: PPUSH
1521: LD_INT 45
1523: PPUSH
1524: LD_INT 0
1526: PPUSH
1527: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1531: LD_VAR 0 3
1535: PPUSH
1536: LD_INT 35
1538: PPUSH
1539: CALL_OW 120
// end ; if game_diff < 3 then
1543: LD_EXP 2
1547: PUSH
1548: LD_INT 3
1550: LESS
1551: IFFALSE 1560
// RemoveUnit ( east_bun ) ;
1553: LD_INT 35
1555: PPUSH
1556: CALL_OW 64
// if game_diff > 1 then
1560: LD_EXP 2
1564: PUSH
1565: LD_INT 1
1567: GREATER
1568: IFFALSE 1583
// SetTech ( tech_rocket , 1 , state_researched ) ;
1570: LD_INT 40
1572: PPUSH
1573: LD_INT 1
1575: PPUSH
1576: LD_INT 2
1578: PPUSH
1579: CALL_OW 322
// case game_diff of 1 :
1583: LD_EXP 2
1587: PUSH
1588: LD_INT 1
1590: DOUBLE
1591: EQUAL
1592: IFTRUE 1596
1594: GO 1670
1596: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1597: LD_ADDR_EXP 10
1601: PUSH
1602: LD_INT 26
1604: PUSH
1605: LD_INT 78
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: LD_INT 3
1613: PUSH
1614: LD_INT 26
1616: PUSH
1617: LD_INT 96
1619: PUSH
1620: LD_INT 58
1622: PUSH
1623: LD_INT 0
1625: PUSH
1626: LD_INT 32
1628: PUSH
1629: LD_INT 72
1631: PUSH
1632: LD_INT 34
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 32
1640: PUSH
1641: LD_INT 83
1643: PUSH
1644: LD_INT 54
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: ST_TO_ADDR
// end ; 2 :
1668: GO 1947
1670: LD_INT 2
1672: DOUBLE
1673: EQUAL
1674: IFTRUE 1678
1676: GO 1800
1678: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1679: LD_ADDR_EXP 10
1683: PUSH
1684: LD_INT 18
1686: PUSH
1687: LD_INT 73
1689: PUSH
1690: LD_INT 42
1692: PUSH
1693: LD_INT 2
1695: PUSH
1696: LD_INT 26
1698: PUSH
1699: LD_INT 78
1701: PUSH
1702: LD_INT 52
1704: PUSH
1705: LD_INT 3
1707: PUSH
1708: LD_INT 26
1710: PUSH
1711: LD_INT 96
1713: PUSH
1714: LD_INT 58
1716: PUSH
1717: LD_INT 0
1719: PUSH
1720: LD_INT 32
1722: PUSH
1723: LD_INT 72
1725: PUSH
1726: LD_INT 34
1728: PUSH
1729: LD_INT 3
1731: PUSH
1732: LD_INT 32
1734: PUSH
1735: LD_INT 83
1737: PUSH
1738: LD_INT 54
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: LD_INT 32
1746: PUSH
1747: LD_INT 82
1749: PUSH
1750: LD_INT 38
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: LD_INT 26
1758: PUSH
1759: LD_INT 69
1761: PUSH
1762: LD_INT 39
1764: PUSH
1765: LD_INT 3
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: ST_TO_ADDR
// end ; 3 :
1798: GO 1947
1800: LD_INT 3
1802: DOUBLE
1803: EQUAL
1804: IFTRUE 1808
1806: GO 1946
1808: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1809: LD_ADDR_EXP 10
1813: PUSH
1814: LD_INT 18
1816: PUSH
1817: LD_INT 73
1819: PUSH
1820: LD_INT 42
1822: PUSH
1823: LD_INT 2
1825: PUSH
1826: LD_INT 26
1828: PUSH
1829: LD_INT 78
1831: PUSH
1832: LD_INT 52
1834: PUSH
1835: LD_INT 3
1837: PUSH
1838: LD_INT 26
1840: PUSH
1841: LD_INT 96
1843: PUSH
1844: LD_INT 58
1846: PUSH
1847: LD_INT 0
1849: PUSH
1850: LD_INT 32
1852: PUSH
1853: LD_INT 72
1855: PUSH
1856: LD_INT 34
1858: PUSH
1859: LD_INT 3
1861: PUSH
1862: LD_INT 32
1864: PUSH
1865: LD_INT 83
1867: PUSH
1868: LD_INT 54
1870: PUSH
1871: LD_INT 0
1873: PUSH
1874: LD_INT 32
1876: PUSH
1877: LD_INT 82
1879: PUSH
1880: LD_INT 38
1882: PUSH
1883: LD_INT 2
1885: PUSH
1886: LD_INT 32
1888: PUSH
1889: LD_INT 103
1891: PUSH
1892: LD_INT 59
1894: PUSH
1895: LD_INT 3
1897: PUSH
1898: LD_INT 26
1900: PUSH
1901: LD_INT 69
1903: PUSH
1904: LD_INT 39
1906: PUSH
1907: LD_INT 3
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: ST_TO_ADDR
// end ; end ;
1944: GO 1947
1946: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
1947: LD_ADDR_EXP 12
1951: PUSH
1952: LD_INT 48
1954: PUSH
1955: LD_INT 47
1957: PUSH
1958: LD_INT 49
1960: PUSH
1961: LD_INT 51
1963: PUSH
1964: LD_INT 69
1966: PUSH
1967: LD_INT 52
1969: PUSH
1970: LD_INT 39
1972: PUSH
1973: LD_INT 50
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: ST_TO_ADDR
// case game_diff of 1 :
1986: LD_EXP 2
1990: PUSH
1991: LD_INT 1
1993: DOUBLE
1994: EQUAL
1995: IFTRUE 1999
1997: GO 2073
1999: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2000: LD_ADDR_EXP 11
2004: PUSH
2005: LD_INT 3
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: LD_INT 1
2013: PUSH
2014: LD_INT 12
2016: PUSH
2017: LD_INT 4
2019: PUSH
2020: LD_INT 1
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: LD_INT 4
2028: PUSH
2029: LD_INT 4
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: LD_INT 1
2037: PUSH
2038: LD_INT 5
2040: PUSH
2041: LD_INT 4
2043: PUSH
2044: LD_INT 1
2046: PUSH
2047: LD_INT 1
2049: PUSH
2050: LD_INT 4
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: ST_TO_ADDR
// end ; 2 :
2071: GO 2238
2073: LD_INT 2
2075: DOUBLE
2076: EQUAL
2077: IFTRUE 2081
2079: GO 2155
2081: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2082: LD_ADDR_EXP 11
2086: PUSH
2087: LD_INT 3
2089: PUSH
2090: LD_INT 1
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: LD_INT 12
2098: PUSH
2099: LD_INT 4
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: LD_INT 7
2110: PUSH
2111: LD_INT 4
2113: PUSH
2114: LD_INT 1
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: LD_INT 5
2122: PUSH
2123: LD_INT 4
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: LD_INT 1
2131: PUSH
2132: LD_INT 7
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: ST_TO_ADDR
// end ; 3 :
2153: GO 2238
2155: LD_INT 3
2157: DOUBLE
2158: EQUAL
2159: IFTRUE 2163
2161: GO 2237
2163: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2164: LD_ADDR_EXP 11
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: LD_INT 1
2174: PUSH
2175: LD_INT 1
2177: PUSH
2178: LD_INT 12
2180: PUSH
2181: LD_INT 4
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 7
2192: PUSH
2193: LD_INT 4
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: LD_INT 7
2204: PUSH
2205: LD_INT 4
2207: PUSH
2208: LD_INT 1
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: LD_INT 7
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: ST_TO_ADDR
// end ; end ;
2235: GO 2238
2237: POP
// end ; end ;
2238: LD_VAR 0 1
2242: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2243: GO 2245
2245: DISABLE
// begin sold_ocp := [ ] ;
2246: LD_ADDR_EXP 13
2250: PUSH
2251: EMPTY
2252: ST_TO_ADDR
// tower_list := [ ] ;
2253: LD_ADDR_EXP 14
2257: PUSH
2258: EMPTY
2259: ST_TO_ADDR
// end ;
2260: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2261: LD_EXP 1
2265: PUSH
2266: LD_INT 2
2268: EQUAL
2269: PUSH
2270: LD_EXP 8
2274: PUSH
2275: LD_INT 0
2277: EQUAL
2278: AND
2279: IFFALSE 3956
2281: GO 2283
2283: DISABLE
2284: LD_INT 0
2286: PPUSH
2287: PPUSH
2288: PPUSH
2289: PPUSH
2290: PPUSH
2291: PPUSH
2292: PPUSH
2293: PPUSH
2294: PPUSH
2295: PPUSH
2296: PPUSH
2297: PPUSH
2298: PPUSH
// begin enable ;
2299: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2300: LD_ADDR_VAR 0 3
2304: PUSH
2305: LD_INT 22
2307: PUSH
2308: LD_INT 1
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 24
2327: PUSH
2328: LD_INT 650
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: PPUSH
2343: CALL_OW 69
2347: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2348: LD_ADDR_VAR 0 6
2352: PUSH
2353: LD_INT 22
2355: PUSH
2356: LD_INT 1
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: LD_INT 25
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PUSH
2373: LD_INT 24
2375: PUSH
2376: LD_INT 650
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: LIST
2387: PUSH
2388: EMPTY
2389: LIST
2390: PPUSH
2391: CALL_OW 69
2395: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2396: LD_ADDR_VAR 0 7
2400: PUSH
2401: LD_INT 22
2403: PUSH
2404: LD_INT 1
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 25
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 24
2423: PUSH
2424: LD_INT 650
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: PUSH
2436: EMPTY
2437: LIST
2438: PPUSH
2439: CALL_OW 69
2443: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2444: LD_ADDR_VAR 0 8
2448: PUSH
2449: LD_INT 22
2451: PUSH
2452: LD_INT 1
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 25
2461: PUSH
2462: LD_INT 4
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 24
2471: PUSH
2472: LD_INT 650
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: LIST
2483: PUSH
2484: EMPTY
2485: LIST
2486: PPUSH
2487: CALL_OW 69
2491: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2492: LD_ADDR_VAR 0 9
2496: PUSH
2497: LD_INT 22
2499: PUSH
2500: LD_INT 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 30
2509: PUSH
2510: LD_INT 32
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PUSH
2517: LD_INT 58
2519: PUSH
2520: EMPTY
2521: LIST
2522: PUSH
2523: LD_INT 24
2525: PUSH
2526: LD_INT 251
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: PPUSH
2539: CALL_OW 69
2543: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2544: LD_ADDR_VAR 0 10
2548: PUSH
2549: LD_INT 22
2551: PUSH
2552: LD_INT 1
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 30
2561: PUSH
2562: LD_INT 32
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 2
2571: PUSH
2572: LD_INT 35
2574: PUSH
2575: LD_INT 7
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 35
2584: PUSH
2585: LD_INT 4
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: LD_INT 24
2599: PUSH
2600: LD_INT 251
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2621: LD_ADDR_VAR 0 11
2625: PUSH
2626: LD_INT 22
2628: PUSH
2629: LD_INT 1
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 21
2638: PUSH
2639: LD_INT 1
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 3
2648: PUSH
2649: LD_INT 24
2651: PUSH
2652: LD_INT 650
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: PPUSH
2671: CALL_OW 69
2675: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2676: LD_ADDR_VAR 0 12
2680: PUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 22
2686: PUSH
2687: LD_INT 1
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: LD_INT 21
2696: PUSH
2697: LD_INT 3
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: LD_INT 3
2706: PUSH
2707: LD_INT 24
2709: PUSH
2710: LD_INT 1000
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: PPUSH
2729: CALL_OW 70
2733: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2734: LD_ADDR_VAR 0 13
2738: PUSH
2739: LD_INT 22
2741: PUSH
2742: LD_INT 1
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 21
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 24
2764: PUSH
2765: LD_INT 650
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: PPUSH
2784: CALL_OW 69
2788: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2789: LD_INT 1
2791: PPUSH
2792: CALL_OW 274
2796: PPUSH
2797: LD_INT 2
2799: PPUSH
2800: CALL_OW 275
2804: PUSH
2805: LD_INT 30
2807: LESSEQUAL
2808: IFFALSE 2828
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 274
2817: PPUSH
2818: LD_INT 2
2820: PPUSH
2821: LD_INT 100
2823: PPUSH
2824: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
2828: LD_ADDR_VAR 0 5
2832: PUSH
2833: LD_VAR 0 3
2837: PUSH
2838: LD_EXP 13
2842: DIFF
2843: ST_TO_ADDR
// if sold > 0 then
2844: LD_VAR 0 3
2848: PUSH
2849: LD_INT 0
2851: GREATER
2852: IFFALSE 2974
// for i = 1 to sold_em do
2854: LD_ADDR_VAR 0 1
2858: PUSH
2859: DOUBLE
2860: LD_INT 1
2862: DEC
2863: ST_TO_ADDR
2864: LD_VAR 0 5
2868: PUSH
2869: FOR_TO
2870: IFFALSE 2972
// if empty_towers > 0 then
2872: LD_VAR 0 9
2876: PUSH
2877: LD_INT 0
2879: GREATER
2880: IFFALSE 2908
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
2882: LD_VAR 0 5
2886: PUSH
2887: LD_VAR 0 1
2891: ARRAY
2892: PPUSH
2893: LD_VAR 0 9
2897: PUSH
2898: LD_INT 1
2900: ARRAY
2901: PPUSH
2902: CALL_OW 120
2906: GO 2970
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
2908: LD_VAR 0 5
2912: PUSH
2913: LD_VAR 0 1
2917: ARRAY
2918: PPUSH
2919: LD_INT 22
2921: PUSH
2922: LD_INT 1
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 30
2931: PUSH
2932: LD_INT 4
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 24
2941: PUSH
2942: LD_INT 251
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: LIST
2953: PUSH
2954: EMPTY
2955: LIST
2956: PPUSH
2957: CALL_OW 69
2961: PUSH
2962: LD_INT 1
2964: ARRAY
2965: PPUSH
2966: CALL_OW 120
2970: GO 2869
2972: POP
2973: POP
// if mechs > 0 then
2974: LD_VAR 0 7
2978: PUSH
2979: LD_INT 0
2981: GREATER
2982: IFFALSE 3060
// for i = 1 to mechs do
2984: LD_ADDR_VAR 0 1
2988: PUSH
2989: DOUBLE
2990: LD_INT 1
2992: DEC
2993: ST_TO_ADDR
2994: LD_VAR 0 7
2998: PUSH
2999: FOR_TO
3000: IFFALSE 3058
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3002: LD_VAR 0 7
3006: PUSH
3007: LD_VAR 0 1
3011: ARRAY
3012: PPUSH
3013: CALL_OW 310
3017: NOT
3018: PUSH
3019: LD_VAR 0 7
3023: PUSH
3024: LD_VAR 0 1
3028: ARRAY
3029: PPUSH
3030: CALL_OW 314
3034: NOT
3035: AND
3036: IFFALSE 3056
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3038: LD_VAR 0 7
3042: PUSH
3043: LD_VAR 0 1
3047: ARRAY
3048: PPUSH
3049: LD_INT 14
3051: PPUSH
3052: CALL_OW 120
3056: GO 2999
3058: POP
3059: POP
// if sci > 0 then
3060: LD_VAR 0 8
3064: PUSH
3065: LD_INT 0
3067: GREATER
3068: IFFALSE 3138
// for i = 1 to sci do
3070: LD_ADDR_VAR 0 1
3074: PUSH
3075: DOUBLE
3076: LD_INT 1
3078: DEC
3079: ST_TO_ADDR
3080: LD_VAR 0 8
3084: PUSH
3085: FOR_TO
3086: IFFALSE 3136
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3088: LD_VAR 0 11
3092: PUSH
3093: LD_INT 0
3095: EQUAL
3096: PUSH
3097: LD_VAR 0 8
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: CALL_OW 314
3112: NOT
3113: AND
3114: IFFALSE 3134
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3116: LD_VAR 0 8
3120: PUSH
3121: LD_VAR 0 1
3125: ARRAY
3126: PPUSH
3127: LD_INT 9
3129: PPUSH
3130: CALL_OW 120
3134: GO 3085
3136: POP
3137: POP
// if damage_build > 0 then
3138: LD_VAR 0 12
3142: PUSH
3143: LD_INT 0
3145: GREATER
3146: IFFALSE 3194
// for i = 1 to engs do
3148: LD_ADDR_VAR 0 1
3152: PUSH
3153: DOUBLE
3154: LD_INT 1
3156: DEC
3157: ST_TO_ADDR
3158: LD_VAR 0 6
3162: PUSH
3163: FOR_TO
3164: IFFALSE 3192
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3166: LD_VAR 0 6
3170: PUSH
3171: LD_VAR 0 1
3175: ARRAY
3176: PPUSH
3177: LD_VAR 0 12
3181: PUSH
3182: LD_INT 1
3184: ARRAY
3185: PPUSH
3186: CALL_OW 130
3190: GO 3163
3192: POP
3193: POP
// if ai_build > 0 then
3194: LD_EXP 10
3198: PUSH
3199: LD_INT 0
3201: GREATER
3202: IFFALSE 3295
// for i = 1 to engs do
3204: LD_ADDR_VAR 0 1
3208: PUSH
3209: DOUBLE
3210: LD_INT 1
3212: DEC
3213: ST_TO_ADDR
3214: LD_VAR 0 6
3218: PUSH
3219: FOR_TO
3220: IFFALSE 3293
// if not HasTask ( engs [ i ] ) then
3222: LD_VAR 0 6
3226: PUSH
3227: LD_VAR 0 1
3231: ARRAY
3232: PPUSH
3233: CALL_OW 314
3237: NOT
3238: IFFALSE 3291
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3240: LD_VAR 0 6
3244: PUSH
3245: LD_VAR 0 1
3249: ARRAY
3250: PPUSH
3251: LD_EXP 10
3255: PUSH
3256: LD_INT 1
3258: ARRAY
3259: PPUSH
3260: LD_EXP 10
3264: PUSH
3265: LD_INT 2
3267: ARRAY
3268: PPUSH
3269: LD_EXP 10
3273: PUSH
3274: LD_INT 3
3276: ARRAY
3277: PPUSH
3278: LD_EXP 10
3282: PUSH
3283: LD_INT 4
3285: ARRAY
3286: PPUSH
3287: CALL_OW 145
3291: GO 3219
3293: POP
3294: POP
// if damage_pep > 0 and sci > 0 then
3295: LD_VAR 0 11
3299: PUSH
3300: LD_INT 0
3302: GREATER
3303: PUSH
3304: LD_VAR 0 8
3308: PUSH
3309: LD_INT 0
3311: GREATER
3312: AND
3313: IFFALSE 3499
// begin for i = 1 to sci do
3315: LD_ADDR_VAR 0 1
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_VAR 0 8
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3350
// ComExitBuilding ( sci [ i ] ) ;
3333: LD_VAR 0 8
3337: PUSH
3338: LD_VAR 0 1
3342: ARRAY
3343: PPUSH
3344: CALL_OW 122
3348: GO 3330
3350: POP
3351: POP
// for i = 1 to damage_pep do
3352: LD_ADDR_VAR 0 1
3356: PUSH
3357: DOUBLE
3358: LD_INT 1
3360: DEC
3361: ST_TO_ADDR
3362: LD_VAR 0 11
3366: PUSH
3367: FOR_TO
3368: IFFALSE 3447
// begin if not IsInUnit ( damage_pep [ i ] ) then
3370: LD_VAR 0 11
3374: PUSH
3375: LD_VAR 0 1
3379: ARRAY
3380: PPUSH
3381: CALL_OW 310
3385: NOT
3386: IFFALSE 3403
// ComExitBuilding ( damage_pep [ i ] ) ;
3388: LD_VAR 0 11
3392: PUSH
3393: LD_VAR 0 1
3397: ARRAY
3398: PPUSH
3399: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3403: LD_VAR 0 11
3407: PUSH
3408: LD_VAR 0 1
3412: ARRAY
3413: PPUSH
3414: LD_INT 9
3416: PPUSH
3417: CALL_OW 308
3421: NOT
3422: IFFALSE 3445
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3424: LD_VAR 0 11
3428: PUSH
3429: LD_VAR 0 1
3433: ARRAY
3434: PPUSH
3435: LD_INT 96
3437: PPUSH
3438: LD_INT 52
3440: PPUSH
3441: CALL_OW 111
// end ;
3445: GO 3367
3447: POP
3448: POP
// if damage_pep = 0 then
3449: LD_VAR 0 11
3453: PUSH
3454: LD_INT 0
3456: EQUAL
3457: IFFALSE 3499
// for i = 1 to sci do
3459: LD_ADDR_VAR 0 1
3463: PUSH
3464: DOUBLE
3465: LD_INT 1
3467: DEC
3468: ST_TO_ADDR
3469: LD_VAR 0 8
3473: PUSH
3474: FOR_TO
3475: IFFALSE 3497
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3477: LD_VAR 0 8
3481: PUSH
3482: LD_VAR 0 1
3486: ARRAY
3487: PPUSH
3488: LD_INT 9
3490: PPUSH
3491: CALL_OW 120
3495: GO 3474
3497: POP
3498: POP
// end ; if ai_tech > 0 then
3499: LD_EXP 12
3503: PUSH
3504: LD_INT 0
3506: GREATER
3507: IFFALSE 3525
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3509: LD_INT 9
3511: PPUSH
3512: LD_EXP 12
3516: PUSH
3517: LD_INT 1
3519: ARRAY
3520: PPUSH
3521: CALL_OW 124
// if ai_vehs > 0 then
3525: LD_EXP 11
3529: PUSH
3530: LD_INT 0
3532: GREATER
3533: IFFALSE 3661
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3535: LD_INT 14
3537: PPUSH
3538: LD_EXP 11
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: LD_EXP 11
3551: PUSH
3552: LD_INT 2
3554: ARRAY
3555: PPUSH
3556: LD_EXP 11
3560: PUSH
3561: LD_INT 3
3563: ARRAY
3564: PPUSH
3565: LD_EXP 11
3569: PUSH
3570: LD_INT 4
3572: ARRAY
3573: PPUSH
3574: CALL_OW 448
3578: IFFALSE 3661
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3580: LD_INT 14
3582: PPUSH
3583: LD_EXP 11
3587: PUSH
3588: LD_INT 1
3590: ARRAY
3591: PPUSH
3592: LD_EXP 11
3596: PUSH
3597: LD_INT 2
3599: ARRAY
3600: PPUSH
3601: LD_EXP 11
3605: PUSH
3606: LD_INT 3
3608: ARRAY
3609: PPUSH
3610: LD_EXP 11
3614: PUSH
3615: LD_INT 4
3617: ARRAY
3618: PPUSH
3619: CALL_OW 125
// for i = 1 to 4 do
3623: LD_ADDR_VAR 0 1
3627: PUSH
3628: DOUBLE
3629: LD_INT 1
3631: DEC
3632: ST_TO_ADDR
3633: LD_INT 4
3635: PUSH
3636: FOR_TO
3637: IFFALSE 3659
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3639: LD_ADDR_EXP 11
3643: PUSH
3644: LD_EXP 11
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 3
3656: ST_TO_ADDR
3657: GO 3636
3659: POP
3660: POP
// end ; if tower_list > 0 then
3661: LD_EXP 14
3665: PUSH
3666: LD_INT 0
3668: GREATER
3669: IFFALSE 3773
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3671: LD_INT 40
3673: PPUSH
3674: LD_INT 1
3676: PPUSH
3677: CALL_OW 321
3681: PUSH
3682: LD_INT 2
3684: EQUAL
3685: IFFALSE 3723
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3687: LD_EXP 14
3691: PUSH
3692: LD_INT 1
3694: ARRAY
3695: PPUSH
3696: LD_INT 7
3698: PPUSH
3699: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3703: LD_ADDR_EXP 14
3707: PUSH
3708: LD_EXP 14
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: CALL_OW 3
3720: ST_TO_ADDR
// end else
3721: GO 3773
// if GetTech ( tech_gatling , 1 ) = state_researched then
3723: LD_INT 69
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 321
3733: PUSH
3734: LD_INT 2
3736: EQUAL
3737: IFFALSE 3773
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3739: LD_EXP 14
3743: PUSH
3744: LD_INT 1
3746: ARRAY
3747: PPUSH
3748: LD_INT 4
3750: PPUSH
3751: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3755: LD_ADDR_EXP 14
3759: PUSH
3760: LD_EXP 14
3764: PPUSH
3765: LD_INT 1
3767: PPUSH
3768: CALL_OW 3
3772: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3773: LD_VAR 0 13
3777: PUSH
3778: LD_INT 0
3780: GREATER
3781: IFFALSE 3956
// begin for i = 1 to damage_vehs do
3783: LD_ADDR_VAR 0 1
3787: PUSH
3788: DOUBLE
3789: LD_INT 1
3791: DEC
3792: ST_TO_ADDR
3793: LD_VAR 0 13
3797: PUSH
3798: FOR_TO
3799: IFFALSE 3954
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3801: LD_ADDR_VAR 0 2
3805: PUSH
3806: LD_VAR 0 13
3810: PUSH
3811: LD_VAR 0 1
3815: ARRAY
3816: PPUSH
3817: CALL_OW 311
3821: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
3822: LD_VAR 0 13
3826: PUSH
3827: LD_VAR 0 1
3831: ARRAY
3832: PPUSH
3833: LD_INT 10
3835: PPUSH
3836: CALL_OW 308
3840: NOT
3841: IFFALSE 3857
// ComMoveToArea ( un , repair_area ) else
3843: LD_VAR 0 2
3847: PPUSH
3848: LD_INT 10
3850: PPUSH
3851: CALL_OW 113
3855: GO 3952
// begin if IsInUnit ( un ) then
3857: LD_VAR 0 2
3861: PPUSH
3862: CALL_OW 310
3866: IFFALSE 3877
// ComExitVehicle ( un ) ;
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 121
// Wait ( 0 0$01 ) ;
3877: LD_INT 35
3879: PPUSH
3880: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
3884: LD_VAR 0 2
3888: PPUSH
3889: LD_VAR 0 13
3893: PUSH
3894: LD_VAR 0 1
3898: ARRAY
3899: PPUSH
3900: CALL_OW 129
// Wait ( 0 0$01 ) ;
3904: LD_INT 35
3906: PPUSH
3907: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
3911: LD_VAR 0 13
3915: PUSH
3916: LD_VAR 0 1
3920: ARRAY
3921: PPUSH
3922: CALL_OW 256
3926: PUSH
3927: LD_INT 1000
3929: EQUAL
3930: IFFALSE 3884
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
3932: LD_VAR 0 2
3936: PPUSH
3937: LD_VAR 0 13
3941: PUSH
3942: LD_VAR 0 1
3946: ARRAY
3947: PPUSH
3948: CALL_OW 120
// end ; end ;
3952: GO 3798
3954: POP
3955: POP
// end ; end ;
3956: PPOPN 13
3958: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
3959: LD_EXP 1
3963: PUSH
3964: LD_INT 2
3966: EQUAL
3967: PUSH
3968: LD_EXP 8
3972: PUSH
3973: LD_INT 0
3975: EQUAL
3976: AND
3977: IFFALSE 4156
3979: GO 3981
3981: DISABLE
3982: LD_INT 0
3984: PPUSH
3985: PPUSH
3986: PPUSH
3987: PPUSH
// begin enable ;
3988: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
3989: LD_ADDR_VAR 0 3
3993: PUSH
3994: LD_INT 22
3996: PUSH
3997: LD_INT 1
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 21
4006: PUSH
4007: LD_INT 2
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 24
4016: PUSH
4017: LD_INT 650
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 3
4026: PUSH
4027: LD_INT 34
4029: PUSH
4030: LD_INT 12
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: PPUSH
4050: CALL_OW 69
4054: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4055: LD_ADDR_VAR 0 4
4059: PUSH
4060: LD_INT 11
4062: PPUSH
4063: LD_INT 22
4065: PUSH
4066: LD_INT 3
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 70
4077: ST_TO_ADDR
// if filter > 0 then
4078: LD_VAR 0 3
4082: PUSH
4083: LD_INT 0
4085: GREATER
4086: IFFALSE 4156
// for i = 1 to filter do
4088: LD_ADDR_VAR 0 1
4092: PUSH
4093: DOUBLE
4094: LD_INT 1
4096: DEC
4097: ST_TO_ADDR
4098: LD_VAR 0 3
4102: PUSH
4103: FOR_TO
4104: IFFALSE 4154
// if enemy > 0 then
4106: LD_VAR 0 4
4110: PUSH
4111: LD_INT 0
4113: GREATER
4114: IFFALSE 4152
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4116: LD_VAR 0 3
4120: PUSH
4121: LD_VAR 0 1
4125: ARRAY
4126: PPUSH
4127: LD_VAR 0 4
4131: PPUSH
4132: LD_VAR 0 3
4136: PUSH
4137: LD_VAR 0 1
4141: ARRAY
4142: PPUSH
4143: CALL_OW 74
4147: PPUSH
4148: CALL_OW 115
4152: GO 4103
4154: POP
4155: POP
// end ;
4156: PPOPN 4
4158: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4159: LD_EXP 1
4163: PUSH
4164: LD_INT 2
4166: EQUAL
4167: PUSH
4168: LD_EXP 8
4172: PUSH
4173: LD_INT 0
4175: EQUAL
4176: AND
4177: IFFALSE 4624
4179: GO 4181
4181: DISABLE
4182: LD_INT 0
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
4188: PPUSH
4189: PPUSH
4190: PPUSH
// begin enable ;
4191: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4192: LD_ADDR_VAR 0 5
4196: PUSH
4197: LD_INT 50
4199: PUSH
4200: EMPTY
4201: LIST
4202: PUSH
4203: LD_INT 22
4205: PUSH
4206: LD_INT 1
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 2
4215: PUSH
4216: LD_INT 25
4218: PUSH
4219: LD_INT 2
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: LD_INT 25
4228: PUSH
4229: LD_INT 16
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: LIST
4245: PPUSH
4246: CALL_OW 69
4250: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4251: LD_ADDR_VAR 0 6
4255: PUSH
4256: LD_INT 22
4258: PUSH
4259: LD_INT 1
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PUSH
4266: LD_INT 34
4268: PUSH
4269: LD_INT 12
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PUSH
4276: LD_INT 24
4278: PUSH
4279: LD_INT 650
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: PPUSH
4291: CALL_OW 69
4295: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4296: LD_ADDR_VAR 0 7
4300: PUSH
4301: LD_INT 22
4303: PUSH
4304: LD_INT 1
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: LD_INT 30
4316: PUSH
4317: LD_INT 0
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PUSH
4324: LD_INT 30
4326: PUSH
4327: LD_INT 1
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PPUSH
4343: CALL_OW 69
4347: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4348: LD_ADDR_VAR 0 4
4352: PUSH
4353: LD_INT 7
4355: PPUSH
4356: CALL_OW 435
4360: ST_TO_ADDR
// c = 1 ;
4361: LD_ADDR_VAR 0 2
4365: PUSH
4366: LD_INT 1
4368: ST_TO_ADDR
// if cargo > 0 then
4369: LD_VAR 0 6
4373: PUSH
4374: LD_INT 0
4376: GREATER
4377: IFFALSE 4624
// while c < skr do
4379: LD_VAR 0 2
4383: PUSH
4384: LD_VAR 0 4
4388: LESS
4389: IFFALSE 4624
// begin if cargo > 0 then
4391: LD_VAR 0 6
4395: PUSH
4396: LD_INT 0
4398: GREATER
4399: IFFALSE 4622
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4401: LD_VAR 0 6
4405: PUSH
4406: LD_INT 1
4408: ARRAY
4409: PPUSH
4410: CALL_OW 261
4414: PUSH
4415: LD_INT 40
4417: GREATER
4418: IFFALSE 4516
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4420: LD_VAR 0 4
4424: PUSH
4425: LD_VAR 0 2
4429: ARRAY
4430: PPUSH
4431: LD_VAR 0 4
4435: PUSH
4436: LD_VAR 0 2
4440: PUSH
4441: LD_INT 1
4443: PLUS
4444: ARRAY
4445: PPUSH
4446: LD_INT 3
4448: PPUSH
4449: CALL 10231 0 3
4453: PUSH
4454: LD_INT 15
4456: GREATER
4457: PUSH
4458: LD_VAR 0 6
4462: PUSH
4463: LD_INT 1
4465: ARRAY
4466: PPUSH
4467: CALL_OW 314
4471: NOT
4472: AND
4473: IFFALSE 4514
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4475: LD_VAR 0 6
4479: PUSH
4480: LD_INT 1
4482: ARRAY
4483: PPUSH
4484: LD_VAR 0 4
4488: PUSH
4489: LD_VAR 0 2
4493: ARRAY
4494: PPUSH
4495: LD_VAR 0 4
4499: PUSH
4500: LD_VAR 0 2
4504: PUSH
4505: LD_INT 1
4507: PLUS
4508: ARRAY
4509: PPUSH
4510: CALL_OW 117
// end else
4514: GO 4608
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4516: LD_VAR 0 6
4520: PUSH
4521: LD_INT 1
4523: ARRAY
4524: PPUSH
4525: LD_VAR 0 7
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PPUSH
4534: CALL_OW 250
4538: PPUSH
4539: LD_VAR 0 7
4543: PUSH
4544: LD_INT 1
4546: ARRAY
4547: PPUSH
4548: CALL_OW 251
4552: PPUSH
4553: CALL_OW 111
// Wait ( 0 0$01 ) ;
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4564: LD_VAR 0 6
4568: PUSH
4569: LD_INT 1
4571: ARRAY
4572: PPUSH
4573: LD_VAR 0 7
4577: PUSH
4578: LD_INT 1
4580: ARRAY
4581: PPUSH
4582: CALL_OW 296
4586: PUSH
4587: LD_INT 7
4589: LESS
4590: IFFALSE 4516
// SetFuel ( cargo [ 1 ] , 100 ) ;
4592: LD_VAR 0 6
4596: PUSH
4597: LD_INT 1
4599: ARRAY
4600: PPUSH
4601: LD_INT 100
4603: PPUSH
4604: CALL_OW 240
// end ; c = c + 2 ;
4608: LD_ADDR_VAR 0 2
4612: PUSH
4613: LD_VAR 0 2
4617: PUSH
4618: LD_INT 2
4620: PLUS
4621: ST_TO_ADDR
// end ; end ;
4622: GO 4379
// end ;
4624: PPOPN 7
4626: END
// on EnterBuilding ( b , un ) do var i , filter ;
4627: LD_INT 0
4629: PPUSH
4630: PPUSH
// begin if game_type = 2 and depot_captured = false then
4631: LD_EXP 1
4635: PUSH
4636: LD_INT 2
4638: EQUAL
4639: PUSH
4640: LD_EXP 8
4644: PUSH
4645: LD_INT 0
4647: EQUAL
4648: AND
4649: IFFALSE 4703
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4651: LD_VAR 0 1
4655: PUSH
4656: LD_INT 22
4658: PUSH
4659: LD_INT 1
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_INT 30
4668: PUSH
4669: LD_INT 32
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PPUSH
4680: CALL_OW 69
4684: IN
4685: IFFALSE 4703
// sold_ocp := sold_ocp ^ un ;
4687: LD_ADDR_EXP 13
4691: PUSH
4692: LD_EXP 13
4696: PUSH
4697: LD_VAR 0 2
4701: ADD
4702: ST_TO_ADDR
// end ; end ;
4703: PPOPN 4
4705: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4706: LD_INT 0
4708: PPUSH
4709: PPUSH
// begin if un in sold_ocp then
4710: LD_VAR 0 2
4714: PUSH
4715: LD_EXP 13
4719: IN
4720: IFFALSE 4742
// sold_ocp := Delete ( sold_ocp , un ) ;
4722: LD_ADDR_EXP 13
4726: PUSH
4727: LD_EXP 13
4731: PPUSH
4732: LD_VAR 0 2
4736: PPUSH
4737: CALL_OW 3
4741: ST_TO_ADDR
// end ;
4742: PPOPN 4
4744: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4745: LD_INT 0
4747: PPUSH
4748: PPUSH
4749: PPUSH
// begin if game_type = 2 then
4750: LD_EXP 1
4754: PUSH
4755: LD_INT 2
4757: EQUAL
4758: IFFALSE 4805
// begin if GetSide ( lab ) = 1 then
4760: LD_VAR 0 2
4764: PPUSH
4765: CALL_OW 255
4769: PUSH
4770: LD_INT 1
4772: EQUAL
4773: IFFALSE 4805
// if tech in ai_tech then
4775: LD_VAR 0 1
4779: PUSH
4780: LD_EXP 12
4784: IN
4785: IFFALSE 4805
// ai_tech := Delete ( ai_tech , 1 ) ;
4787: LD_ADDR_EXP 12
4791: PUSH
4792: LD_EXP 12
4796: PPUSH
4797: LD_INT 1
4799: PPUSH
4800: CALL_OW 3
4804: ST_TO_ADDR
// end ; end ;
4805: PPOPN 5
4807: END
// on BuildingComplete ( b ) do var i , side , un ;
4808: LD_INT 0
4810: PPUSH
4811: PPUSH
4812: PPUSH
// begin if game_type = 2 and depot_captured = false then
4813: LD_EXP 1
4817: PUSH
4818: LD_INT 2
4820: EQUAL
4821: PUSH
4822: LD_EXP 8
4826: PUSH
4827: LD_INT 0
4829: EQUAL
4830: AND
4831: IFFALSE 4938
// begin if GetSide ( b ) = 1 then
4833: LD_VAR 0 1
4837: PPUSH
4838: CALL_OW 255
4842: PUSH
4843: LD_INT 1
4845: EQUAL
4846: IFFALSE 4886
// for i = 1 to 4 do
4848: LD_ADDR_VAR 0 2
4852: PUSH
4853: DOUBLE
4854: LD_INT 1
4856: DEC
4857: ST_TO_ADDR
4858: LD_INT 4
4860: PUSH
4861: FOR_TO
4862: IFFALSE 4884
// ai_build := Delete ( ai_build , 1 ) ;
4864: LD_ADDR_EXP 10
4868: PUSH
4869: LD_EXP 10
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL_OW 3
4881: ST_TO_ADDR
4882: GO 4861
4884: POP
4885: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4886: LD_VAR 0 1
4890: PUSH
4891: LD_INT 22
4893: PUSH
4894: LD_INT 1
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 30
4903: PUSH
4904: LD_INT 32
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PPUSH
4915: CALL_OW 69
4919: IN
4920: IFFALSE 4938
// tower_list := tower_list ^ b ;
4922: LD_ADDR_EXP 14
4926: PUSH
4927: LD_EXP 14
4931: PUSH
4932: LD_VAR 0 1
4936: ADD
4937: ST_TO_ADDR
// end ; end ;
4938: PPOPN 4
4940: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
4941: LD_EXP 1
4945: PUSH
4946: LD_INT 1
4948: EQUAL
4949: IFFALSE 5147
4951: GO 4953
4953: DISABLE
// begin enable ;
4954: ENABLE
// if timer <= 20 20$00 then
4955: LD_EXP 6
4959: PUSH
4960: LD_INT 42000
4962: LESSEQUAL
4963: IFFALSE 4998
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
4965: LD_ADDR_EXP 15
4969: PUSH
4970: LD_INT 5
4972: PUSH
4973: LD_INT 6
4975: PUSH
4976: LD_INT 7
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: PUSH
4984: LD_EXP 2
4988: ARRAY
4989: ST_TO_ADDR
// enemy_typ := 1 ;
4990: LD_ADDR_EXP 16
4994: PUSH
4995: LD_INT 1
4997: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
4998: LD_EXP 6
5002: PUSH
5003: LD_INT 42000
5005: GREATER
5006: PUSH
5007: LD_EXP 6
5011: PUSH
5012: LD_INT 84000
5014: LESSEQUAL
5015: AND
5016: IFFALSE 5051
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5018: LD_ADDR_EXP 15
5022: PUSH
5023: LD_INT 6
5025: PUSH
5026: LD_INT 8
5028: PUSH
5029: LD_INT 9
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: LIST
5036: PUSH
5037: LD_EXP 2
5041: ARRAY
5042: ST_TO_ADDR
// enemy_typ := 2 ;
5043: LD_ADDR_EXP 16
5047: PUSH
5048: LD_INT 2
5050: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5051: LD_EXP 6
5055: PUSH
5056: LD_INT 84000
5058: GREATER
5059: PUSH
5060: LD_EXP 6
5064: PUSH
5065: LD_INT 126000
5067: LESSEQUAL
5068: AND
5069: IFFALSE 5104
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5071: LD_ADDR_EXP 15
5075: PUSH
5076: LD_INT 8
5078: PUSH
5079: LD_INT 9
5081: PUSH
5082: LD_INT 10
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: LIST
5089: PUSH
5090: LD_EXP 2
5094: ARRAY
5095: ST_TO_ADDR
// enemy_typ := 3 ;
5096: LD_ADDR_EXP 16
5100: PUSH
5101: LD_INT 3
5103: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5104: LD_EXP 6
5108: PUSH
5109: LD_INT 126000
5111: GREATER
5112: IFFALSE 5147
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5114: LD_ADDR_EXP 15
5118: PUSH
5119: LD_INT 10
5121: PUSH
5122: LD_INT 12
5124: PUSH
5125: LD_INT 14
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: LIST
5132: PUSH
5133: LD_EXP 2
5137: ARRAY
5138: ST_TO_ADDR
// enemy_typ := 3 ;
5139: LD_ADDR_EXP 16
5143: PUSH
5144: LD_INT 3
5146: ST_TO_ADDR
// end ; end ;
5147: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5148: LD_EXP 6
5152: PUSH
5153: LD_INT 16800
5155: PUSH
5156: LD_INT 17850
5158: PUSH
5159: LD_INT 18900
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: LIST
5166: PUSH
5167: LD_EXP 2
5171: ARRAY
5172: GREATEREQUAL
5173: PUSH
5174: LD_EXP 1
5178: PUSH
5179: LD_INT 1
5181: EQUAL
5182: AND
5183: IFFALSE 5387
5185: GO 5187
5187: DISABLE
5188: LD_INT 0
5190: PPUSH
// begin uc_nation := 1 ;
5191: LD_ADDR_OWVAR 21
5195: PUSH
5196: LD_INT 1
5198: ST_TO_ADDR
// uc_side := 4 ;
5199: LD_ADDR_OWVAR 20
5203: PUSH
5204: LD_INT 4
5206: ST_TO_ADDR
// hc_sex := sex_male ;
5207: LD_ADDR_OWVAR 27
5211: PUSH
5212: LD_INT 1
5214: ST_TO_ADDR
// hc_class := 1 ;
5215: LD_ADDR_OWVAR 28
5219: PUSH
5220: LD_INT 1
5222: ST_TO_ADDR
// hc_gallery :=  ;
5223: LD_ADDR_OWVAR 33
5227: PUSH
5228: LD_STRING 
5230: ST_TO_ADDR
// hc_name :=  ;
5231: LD_ADDR_OWVAR 26
5235: PUSH
5236: LD_STRING 
5238: ST_TO_ADDR
// am_com2 := CreateHuman ;
5239: LD_ADDR_EXP 17
5243: PUSH
5244: CALL_OW 44
5248: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5249: LD_EXP 17
5253: PPUSH
5254: LD_STRING D-rus
5256: PPUSH
5257: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5261: LD_ADDR_VAR 0 1
5265: PUSH
5266: LD_INT 6
5268: PUSH
5269: LD_INT 5
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: ST_TO_ADDR
// while ( true ) do
5276: LD_INT 1
5278: IFFALSE 5387
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5280: LD_INT 13650
5282: PPUSH
5283: LD_INT 17920
5285: PPUSH
5286: CALL_OW 12
5290: PPUSH
5291: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5295: LD_INT 3
5297: PPUSH
5298: LD_EXP 15
5302: PPUSH
5303: LD_EXP 16
5307: PPUSH
5308: LD_VAR 0 1
5312: PPUSH
5313: CALL 7813 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5317: LD_EXP 6
5321: PUSH
5322: LD_INT 115500
5324: PUSH
5325: LD_INT 94500
5327: PUSH
5328: LD_INT 73500
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_OWVAR 67
5340: ARRAY
5341: GREATER
5342: IFFALSE 5385
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5344: LD_INT 1050
5346: PPUSH
5347: LD_INT 3150
5349: PPUSH
5350: CALL_OW 12
5354: PPUSH
5355: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5359: LD_INT 3
5361: PPUSH
5362: LD_EXP 15
5366: PUSH
5367: LD_INT 2
5369: DIVREAL
5370: PPUSH
5371: LD_EXP 16
5375: PPUSH
5376: LD_VAR 0 1
5380: PPUSH
5381: CALL 7813 0 4
// end ; end ;
5385: GO 5276
// end ;
5387: PPOPN 1
5389: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5390: LD_INT 1
5392: PPUSH
5393: CALL_OW 274
5397: PPUSH
5398: LD_INT 3
5400: PPUSH
5401: CALL_OW 275
5405: PUSH
5406: LD_EXP 7
5410: EQUAL
5411: IFFALSE 5693
5413: GO 5415
5415: DISABLE
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5420: LD_EXP 17
5424: PPUSH
5425: LD_STRING D-help
5427: PPUSH
5428: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5432: LD_INT 7035
5434: PPUSH
5435: LD_INT 16065
5437: PPUSH
5438: CALL_OW 12
5442: PPUSH
5443: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5447: LD_INT 35
5449: PPUSH
5450: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5454: LD_INT 22
5456: PUSH
5457: LD_INT 3
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PPUSH
5464: CALL_OW 69
5468: PUSH
5469: LD_INT 0
5471: EQUAL
5472: IFFALSE 5447
// uc_side := 1 ;
5474: LD_ADDR_OWVAR 20
5478: PUSH
5479: LD_INT 1
5481: ST_TO_ADDR
// uc_nation := 1 ;
5482: LD_ADDR_OWVAR 21
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5490: LD_ADDR_VAR 0 1
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_INT 3
5502: PUSH
5503: LD_EXP 2
5507: PLUS
5508: PUSH
5509: FOR_TO
5510: IFFALSE 5555
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5512: LD_ADDR_VAR 0 2
5516: PUSH
5517: LD_INT 1
5519: PPUSH
5520: LD_INT 4
5522: PPUSH
5523: CALL_OW 12
5527: PPUSH
5528: LD_EXP 3
5532: PPUSH
5533: CALL 9068 0 2
5537: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5538: LD_VAR 0 2
5542: PPUSH
5543: LD_INT 5
5545: PPUSH
5546: LD_INT 0
5548: PPUSH
5549: CALL_OW 49
// end ;
5553: GO 5509
5555: POP
5556: POP
// case game_diff of 1 :
5557: LD_EXP 2
5561: PUSH
5562: LD_INT 1
5564: DOUBLE
5565: EQUAL
5566: IFTRUE 5570
5568: GO 5597
5570: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5571: LD_INT 4
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: LD_INT 5
5579: PPUSH
5580: LD_INT 5
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: LD_EXP 3
5590: PPUSH
5591: CALL 9607 0 6
5595: GO 5668
5597: LD_INT 2
5599: DOUBLE
5600: EQUAL
5601: IFTRUE 5605
5603: GO 5632
5605: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5606: LD_INT 3
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: LD_INT 5
5614: PPUSH
5615: LD_INT 5
5617: PPUSH
5618: LD_INT 0
5620: PPUSH
5621: LD_EXP 3
5625: PPUSH
5626: CALL 9607 0 6
5630: GO 5668
5632: LD_INT 3
5634: DOUBLE
5635: EQUAL
5636: IFTRUE 5640
5638: GO 5667
5640: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5641: LD_INT 3
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: LD_INT 3
5649: PPUSH
5650: LD_INT 5
5652: PPUSH
5653: LD_INT 0
5655: PPUSH
5656: LD_EXP 3
5660: PPUSH
5661: CALL 9607 0 6
5665: GO 5668
5667: POP
// DialogueOn ;
5668: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5672: LD_INT 91
5674: PPUSH
5675: LD_INT 115
5677: PPUSH
5678: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5682: LD_INT 10
5684: PPUSH
5685: CALL_OW 67
// DialogueOff ;
5689: CALL_OW 7
// end ;
5693: PPOPN 2
5695: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5696: LD_INT 0
5698: PPUSH
5699: PPUSH
5700: PPUSH
5701: PPUSH
5702: PPUSH
5703: PPUSH
5704: PPUSH
5705: PPUSH
// uc_side := side ;
5706: LD_ADDR_OWVAR 20
5710: PUSH
5711: LD_VAR 0 1
5715: ST_TO_ADDR
// uc_nation := nation_american ;
5716: LD_ADDR_OWVAR 21
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5724: LD_ADDR_VAR 0 10
5728: PUSH
5729: LD_INT 3
5731: PUSH
5732: LD_INT 4
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5739: LD_ADDR_VAR 0 11
5743: PUSH
5744: LD_INT 2
5746: PUSH
5747: LD_INT 4
5749: PUSH
5750: LD_INT 5
5752: PUSH
5753: LD_INT 6
5755: PUSH
5756: LD_INT 7
5758: PUSH
5759: LD_INT 97
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: ST_TO_ADDR
// case typ of 1 :
5770: LD_VAR 0 3
5774: PUSH
5775: LD_INT 1
5777: DOUBLE
5778: EQUAL
5779: IFTRUE 5783
5781: GO 5977
5783: POP
// begin for i = 1 to num do
5784: LD_ADDR_VAR 0 6
5788: PUSH
5789: DOUBLE
5790: LD_INT 1
5792: DEC
5793: ST_TO_ADDR
5794: LD_VAR 0 2
5798: PUSH
5799: FOR_TO
5800: IFFALSE 5973
// begin vc_chassis := chassis [ 1 ] ;
5802: LD_ADDR_OWVAR 37
5806: PUSH
5807: LD_VAR 0 10
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: ST_TO_ADDR
// vc_engine := engine_combustion ;
5816: LD_ADDR_OWVAR 39
5820: PUSH
5821: LD_INT 1
5823: ST_TO_ADDR
// vc_control := control_manual ;
5824: LD_ADDR_OWVAR 38
5828: PUSH
5829: LD_INT 1
5831: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
5832: LD_ADDR_OWVAR 40
5836: PUSH
5837: LD_VAR 0 11
5841: PUSH
5842: LD_INT 1
5844: PPUSH
5845: LD_INT 3
5847: PPUSH
5848: CALL_OW 12
5852: ARRAY
5853: ST_TO_ADDR
// veh := CreateVehicle ;
5854: LD_ADDR_VAR 0 9
5858: PUSH
5859: CALL_OW 45
5863: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
5864: LD_ADDR_VAR 0 12
5868: PUSH
5869: LD_INT 1
5871: PPUSH
5872: LD_INT 2
5874: PPUSH
5875: CALL_OW 12
5879: ST_TO_ADDR
// if f = 1 then
5880: LD_VAR 0 12
5884: PUSH
5885: LD_INT 1
5887: EQUAL
5888: IFFALSE 5904
// SetDir ( veh , 3 ) else
5890: LD_VAR 0 9
5894: PPUSH
5895: LD_INT 3
5897: PPUSH
5898: CALL_OW 233
5902: GO 5916
// SetDir ( veh , 1 ) ;
5904: LD_VAR 0 9
5908: PPUSH
5909: LD_INT 1
5911: PPUSH
5912: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
5916: LD_VAR 0 9
5920: PPUSH
5921: LD_VAR 0 4
5925: PUSH
5926: LD_VAR 0 12
5930: ARRAY
5931: PPUSH
5932: LD_INT 0
5934: PPUSH
5935: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
5939: LD_ADDR_VAR 0 7
5943: PUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_EXP 4
5951: PPUSH
5952: CALL 9068 0 2
5956: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5957: LD_VAR 0 7
5961: PPUSH
5962: LD_VAR 0 9
5966: PPUSH
5967: CALL_OW 52
// end ;
5971: GO 5799
5973: POP
5974: POP
// end ; 2 :
5975: GO 6451
5977: LD_INT 2
5979: DOUBLE
5980: EQUAL
5981: IFTRUE 5985
5983: GO 6248
5985: POP
// begin for i = 1 to num do
5986: LD_ADDR_VAR 0 6
5990: PUSH
5991: DOUBLE
5992: LD_INT 1
5994: DEC
5995: ST_TO_ADDR
5996: LD_VAR 0 2
6000: PUSH
6001: FOR_TO
6002: IFFALSE 6183
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6004: LD_ADDR_OWVAR 37
6008: PUSH
6009: LD_VAR 0 10
6013: PUSH
6014: LD_INT 1
6016: PPUSH
6017: LD_INT 2
6019: PPUSH
6020: CALL_OW 12
6024: ARRAY
6025: ST_TO_ADDR
// vc_engine := engine_combustion ;
6026: LD_ADDR_OWVAR 39
6030: PUSH
6031: LD_INT 1
6033: ST_TO_ADDR
// vc_control := control_manual ;
6034: LD_ADDR_OWVAR 38
6038: PUSH
6039: LD_INT 1
6041: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6042: LD_ADDR_OWVAR 40
6046: PUSH
6047: LD_VAR 0 11
6051: PUSH
6052: LD_INT 1
6054: PPUSH
6055: LD_INT 3
6057: PPUSH
6058: CALL_OW 12
6062: ARRAY
6063: ST_TO_ADDR
// veh := CreateVehicle ;
6064: LD_ADDR_VAR 0 9
6068: PUSH
6069: CALL_OW 45
6073: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6074: LD_ADDR_VAR 0 12
6078: PUSH
6079: LD_INT 1
6081: PPUSH
6082: LD_INT 2
6084: PPUSH
6085: CALL_OW 12
6089: ST_TO_ADDR
// if f = 1 then
6090: LD_VAR 0 12
6094: PUSH
6095: LD_INT 1
6097: EQUAL
6098: IFFALSE 6114
// SetDir ( veh , 3 ) else
6100: LD_VAR 0 9
6104: PPUSH
6105: LD_INT 3
6107: PPUSH
6108: CALL_OW 233
6112: GO 6126
// SetDir ( veh , 1 ) ;
6114: LD_VAR 0 9
6118: PPUSH
6119: LD_INT 1
6121: PPUSH
6122: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6126: LD_VAR 0 9
6130: PPUSH
6131: LD_VAR 0 4
6135: PUSH
6136: LD_VAR 0 12
6140: ARRAY
6141: PPUSH
6142: LD_INT 0
6144: PPUSH
6145: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6149: LD_ADDR_VAR 0 7
6153: PUSH
6154: LD_INT 1
6156: PPUSH
6157: LD_EXP 4
6161: PPUSH
6162: CALL 9068 0 2
6166: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6167: LD_VAR 0 7
6171: PPUSH
6172: LD_VAR 0 9
6176: PPUSH
6177: CALL_OW 52
// end ;
6181: GO 6001
6183: POP
6184: POP
// for i = 1 to 3 do
6185: LD_ADDR_VAR 0 6
6189: PUSH
6190: DOUBLE
6191: LD_INT 1
6193: DEC
6194: ST_TO_ADDR
6195: LD_INT 3
6197: PUSH
6198: FOR_TO
6199: IFFALSE 6244
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6201: LD_ADDR_VAR 0 7
6205: PUSH
6206: LD_INT 5
6208: PPUSH
6209: LD_EXP 4
6213: PPUSH
6214: CALL 9068 0 2
6218: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6219: LD_VAR 0 7
6223: PPUSH
6224: LD_VAR 0 4
6228: PUSH
6229: LD_VAR 0 12
6233: ARRAY
6234: PPUSH
6235: LD_INT 0
6237: PPUSH
6238: CALL_OW 49
// end ;
6242: GO 6198
6244: POP
6245: POP
// end ; 3 :
6246: GO 6451
6248: LD_INT 3
6250: DOUBLE
6251: EQUAL
6252: IFTRUE 6256
6254: GO 6450
6256: POP
// begin for i = 1 to num do
6257: LD_ADDR_VAR 0 6
6261: PUSH
6262: DOUBLE
6263: LD_INT 1
6265: DEC
6266: ST_TO_ADDR
6267: LD_VAR 0 2
6271: PUSH
6272: FOR_TO
6273: IFFALSE 6446
// begin vc_chassis := chassis [ 2 ] ;
6275: LD_ADDR_OWVAR 37
6279: PUSH
6280: LD_VAR 0 10
6284: PUSH
6285: LD_INT 2
6287: ARRAY
6288: ST_TO_ADDR
// vc_engine := engine_combustion ;
6289: LD_ADDR_OWVAR 39
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// vc_control := control_manual ;
6297: LD_ADDR_OWVAR 38
6301: PUSH
6302: LD_INT 1
6304: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6305: LD_ADDR_OWVAR 40
6309: PUSH
6310: LD_VAR 0 11
6314: PUSH
6315: LD_INT 3
6317: PPUSH
6318: LD_INT 6
6320: PPUSH
6321: CALL_OW 12
6325: ARRAY
6326: ST_TO_ADDR
// veh := CreateVehicle ;
6327: LD_ADDR_VAR 0 9
6331: PUSH
6332: CALL_OW 45
6336: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6337: LD_ADDR_VAR 0 12
6341: PUSH
6342: LD_INT 1
6344: PPUSH
6345: LD_INT 2
6347: PPUSH
6348: CALL_OW 12
6352: ST_TO_ADDR
// if f = 1 then
6353: LD_VAR 0 12
6357: PUSH
6358: LD_INT 1
6360: EQUAL
6361: IFFALSE 6377
// SetDir ( veh , 3 ) else
6363: LD_VAR 0 9
6367: PPUSH
6368: LD_INT 3
6370: PPUSH
6371: CALL_OW 233
6375: GO 6389
// SetDir ( veh , 1 ) ;
6377: LD_VAR 0 9
6381: PPUSH
6382: LD_INT 1
6384: PPUSH
6385: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6389: LD_VAR 0 9
6393: PPUSH
6394: LD_VAR 0 4
6398: PUSH
6399: LD_VAR 0 12
6403: ARRAY
6404: PPUSH
6405: LD_INT 0
6407: PPUSH
6408: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6412: LD_ADDR_VAR 0 7
6416: PUSH
6417: LD_INT 1
6419: PPUSH
6420: LD_EXP 4
6424: PPUSH
6425: CALL 9068 0 2
6429: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6430: LD_VAR 0 7
6434: PPUSH
6435: LD_VAR 0 9
6439: PPUSH
6440: CALL_OW 52
// end ;
6444: GO 6272
6446: POP
6447: POP
// end ; end ;
6448: GO 6451
6450: POP
// end ;
6451: LD_VAR 0 5
6455: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6456: LD_EXP 1
6460: PUSH
6461: LD_INT 2
6463: EQUAL
6464: PUSH
6465: LD_EXP 8
6469: AND
6470: IFFALSE 6625
6472: GO 6474
6474: DISABLE
6475: LD_INT 0
6477: PPUSH
6478: PPUSH
6479: PPUSH
// begin enable ;
6480: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6481: LD_ADDR_VAR 0 1
6485: PUSH
6486: LD_INT 22
6488: PUSH
6489: LD_INT 1
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL_OW 69
6500: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6501: LD_ADDR_VAR 0 2
6505: PUSH
6506: LD_INT 2
6508: PUSH
6509: LD_INT 22
6511: PUSH
6512: LD_INT 3
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 6
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: LIST
6533: PPUSH
6534: CALL_OW 69
6538: ST_TO_ADDR
// if filter > 0 then
6539: LD_VAR 0 1
6543: PUSH
6544: LD_INT 0
6546: GREATER
6547: IFFALSE 6625
// for i = 1 to filter do
6549: LD_ADDR_VAR 0 3
6553: PUSH
6554: DOUBLE
6555: LD_INT 1
6557: DEC
6558: ST_TO_ADDR
6559: LD_VAR 0 1
6563: PUSH
6564: FOR_TO
6565: IFFALSE 6623
// if not HasTask ( filter [ i ] ) then
6567: LD_VAR 0 1
6571: PUSH
6572: LD_VAR 0 3
6576: ARRAY
6577: PPUSH
6578: CALL_OW 314
6582: NOT
6583: IFFALSE 6621
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6585: LD_VAR 0 1
6589: PUSH
6590: LD_VAR 0 3
6594: ARRAY
6595: PPUSH
6596: LD_VAR 0 2
6600: PPUSH
6601: LD_VAR 0 1
6605: PUSH
6606: LD_VAR 0 3
6610: ARRAY
6611: PPUSH
6612: CALL_OW 74
6616: PPUSH
6617: CALL_OW 115
6621: GO 6564
6623: POP
6624: POP
// end ;
6625: PPOPN 3
6627: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6628: LD_EXP 1
6632: PUSH
6633: LD_INT 2
6635: EQUAL
6636: IFFALSE 6791
6638: GO 6640
6640: DISABLE
6641: LD_INT 0
6643: PPUSH
6644: PPUSH
6645: PPUSH
// begin enable ;
6646: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6647: LD_ADDR_VAR 0 1
6651: PUSH
6652: LD_INT 22
6654: PUSH
6655: LD_INT 8
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 69
6666: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6667: LD_ADDR_VAR 0 2
6671: PUSH
6672: LD_INT 2
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: LD_INT 22
6687: PUSH
6688: LD_INT 6
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: ST_TO_ADDR
// if filter > 0 then
6705: LD_VAR 0 1
6709: PUSH
6710: LD_INT 0
6712: GREATER
6713: IFFALSE 6791
// for i = 1 to filter do
6715: LD_ADDR_VAR 0 3
6719: PUSH
6720: DOUBLE
6721: LD_INT 1
6723: DEC
6724: ST_TO_ADDR
6725: LD_VAR 0 1
6729: PUSH
6730: FOR_TO
6731: IFFALSE 6789
// if not HasTask ( filter [ i ] ) then
6733: LD_VAR 0 1
6737: PUSH
6738: LD_VAR 0 3
6742: ARRAY
6743: PPUSH
6744: CALL_OW 314
6748: NOT
6749: IFFALSE 6787
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6751: LD_VAR 0 1
6755: PUSH
6756: LD_VAR 0 3
6760: ARRAY
6761: PPUSH
6762: LD_VAR 0 2
6766: PPUSH
6767: LD_VAR 0 1
6771: PUSH
6772: LD_VAR 0 3
6776: ARRAY
6777: PPUSH
6778: CALL_OW 74
6782: PPUSH
6783: CALL_OW 115
6787: GO 6730
6789: POP
6790: POP
// end ; end_of_file
6791: PPOPN 3
6793: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6794: LD_INT 0
6796: PPUSH
6797: PPUSH
6798: PPUSH
6799: PPUSH
6800: PPUSH
// Your_Side := 3 ;
6801: LD_ADDR_OWVAR 2
6805: PUSH
6806: LD_INT 3
6808: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6809: LD_INT 3
6811: PPUSH
6812: LD_INT 3
6814: PPUSH
6815: CALL_OW 343
// ResetFog ;
6819: CALL_OW 335
// uc_side := 6 ;
6823: LD_ADDR_OWVAR 20
6827: PUSH
6828: LD_INT 6
6830: ST_TO_ADDR
// uc_nation := 3 ;
6831: LD_ADDR_OWVAR 21
6835: PUSH
6836: LD_INT 3
6838: ST_TO_ADDR
// hc_gallery := ru ;
6839: LD_ADDR_OWVAR 33
6843: PUSH
6844: LD_STRING ru
6846: ST_TO_ADDR
// hc_face_number := 1 ;
6847: LD_ADDR_OWVAR 34
6851: PUSH
6852: LD_INT 1
6854: ST_TO_ADDR
// hc_name := J. I. Gorki ;
6855: LD_ADDR_OWVAR 26
6859: PUSH
6860: LD_STRING J. I. Gorki
6862: ST_TO_ADDR
// hc_class := 3 ;
6863: LD_ADDR_OWVAR 28
6867: PUSH
6868: LD_INT 3
6870: ST_TO_ADDR
// hc_sex := sex_male ;
6871: LD_ADDR_OWVAR 27
6875: PUSH
6876: LD_INT 1
6878: ST_TO_ADDR
// gorki := CreateHuman ;
6879: LD_ADDR_EXP 19
6883: PUSH
6884: CALL_OW 44
6888: ST_TO_ADDR
// uc_side := 3 ;
6889: LD_ADDR_OWVAR 20
6893: PUSH
6894: LD_INT 3
6896: ST_TO_ADDR
// uc_nation := 3 ;
6897: LD_ADDR_OWVAR 21
6901: PUSH
6902: LD_INT 3
6904: ST_TO_ADDR
// hc_importance := 100 ;
6905: LD_ADDR_OWVAR 32
6909: PUSH
6910: LD_INT 100
6912: ST_TO_ADDR
// hc_name :=  ;
6913: LD_ADDR_OWVAR 26
6917: PUSH
6918: LD_STRING 
6920: ST_TO_ADDR
// hc_gallery :=  ;
6921: LD_ADDR_OWVAR 33
6925: PUSH
6926: LD_STRING 
6928: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
6929: LD_INT 1
6931: PPUSH
6932: LD_INT 1
6934: PPUSH
6935: LD_EXP 3
6939: PUSH
6940: LD_INT 3
6942: PLUS
6943: PPUSH
6944: CALL_OW 380
// ru_dow := CreateHuman ;
6948: LD_ADDR_EXP 18
6952: PUSH
6953: CALL_OW 44
6957: ST_TO_ADDR
// hc_importance := 0 ;
6958: LD_ADDR_OWVAR 32
6962: PUSH
6963: LD_INT 0
6965: ST_TO_ADDR
// for i = 1 to 20 do
6966: LD_ADDR_VAR 0 3
6970: PUSH
6971: DOUBLE
6972: LD_INT 1
6974: DEC
6975: ST_TO_ADDR
6976: LD_INT 20
6978: PUSH
6979: FOR_TO
6980: IFFALSE 7026
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
6982: LD_ADDR_VAR 0 2
6986: PUSH
6987: LD_INT 1
6989: PPUSH
6990: LD_INT 4
6992: PPUSH
6993: CALL_OW 12
6997: PPUSH
6998: LD_EXP 3
7002: PPUSH
7003: CALL 9068 0 2
7007: ST_TO_ADDR
// filter := filter ^ un ;
7008: LD_ADDR_VAR 0 4
7012: PUSH
7013: LD_VAR 0 4
7017: PUSH
7018: LD_VAR 0 2
7022: ADD
7023: ST_TO_ADDR
// end ;
7024: GO 6979
7026: POP
7027: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7028: LD_ADDR_VAR 0 5
7032: PUSH
7033: LD_STRING text
7035: PPUSH
7036: LD_INT 9
7038: PUSH
7039: LD_INT 8
7041: PUSH
7042: LD_INT 7
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_EXP 2
7054: ARRAY
7055: PPUSH
7056: LD_INT 9
7058: PUSH
7059: LD_INT 8
7061: PUSH
7062: LD_INT 7
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: PUSH
7070: LD_EXP 2
7074: ARRAY
7075: PPUSH
7076: LD_INT -5
7078: PUSH
7079: LD_EXP 18
7083: PUSH
7084: LD_INT -3
7086: PUSH
7087: LD_INT -2
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: PUSH
7096: LD_VAR 0 4
7100: ADD
7101: PPUSH
7102: LD_INT 1
7104: PUSH
7105: LD_INT 3
7107: PUSH
7108: LD_INT 2
7110: PUSH
7111: LD_INT 1
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 4
7120: PUSH
7121: LD_INT 1
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 9
7130: PUSH
7131: LD_INT 0
7133: PUSH
7134: LD_INT 6
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: LD_INT 3
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: PUSH
7148: LD_EXP 2
7152: ARRAY
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: LIST
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: PPUSH
7166: CALL_OW 42
7170: ST_TO_ADDR
// team := team ^ ru_dow ;
7171: LD_ADDR_VAR 0 5
7175: PUSH
7176: LD_VAR 0 5
7180: PUSH
7181: LD_EXP 18
7185: ADD
7186: ST_TO_ADDR
// for i = 1 to team do
7187: LD_ADDR_VAR 0 3
7191: PUSH
7192: DOUBLE
7193: LD_INT 1
7195: DEC
7196: ST_TO_ADDR
7197: LD_VAR 0 5
7201: PUSH
7202: FOR_TO
7203: IFFALSE 7228
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7205: LD_VAR 0 5
7209: PUSH
7210: LD_VAR 0 3
7214: ARRAY
7215: PPUSH
7216: LD_INT 5
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: CALL_OW 49
7226: GO 7202
7228: POP
7229: POP
// end ;
7230: LD_VAR 0 1
7234: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7235: LD_INT 1
7237: PPUSH
7238: CALL_OW 255
7242: PUSH
7243: LD_INT 3
7245: EQUAL
7246: IFFALSE 7356
7248: GO 7250
7250: DISABLE
7251: LD_INT 0
7253: PPUSH
// begin depot_captured := true ;
7254: LD_ADDR_EXP 8
7258: PUSH
7259: LD_INT 1
7261: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7262: LD_STRING GType2b
7264: PPUSH
7265: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7269: LD_EXP 18
7273: PPUSH
7274: LD_STRING D-rudow2
7276: PPUSH
7277: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7281: LD_EXP 19
7285: PPUSH
7286: LD_STRING D-gorky2
7288: PPUSH
7289: CALL_OW 94
// while ( true ) do
7293: LD_INT 1
7295: IFFALSE 7356
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7297: LD_INT 13300
7299: PPUSH
7300: LD_INT 19985
7302: PPUSH
7303: CALL_OW 12
7307: PPUSH
7308: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7312: LD_ADDR_VAR 0 1
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 5
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7327: LD_INT 1
7329: PPUSH
7330: LD_EXP 15
7334: PPUSH
7335: LD_EXP 16
7339: PPUSH
7340: LD_INT 6
7342: PUSH
7343: LD_INT 5
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PPUSH
7350: CALL 5696 0 4
// end ;
7354: GO 7293
// end ;
7356: PPOPN 1
7358: END
// every 1 1$30 trigger game_type = 2 do
7359: LD_EXP 1
7363: PUSH
7364: LD_INT 2
7366: EQUAL
7367: IFFALSE 7512
7369: GO 7371
7371: DISABLE
// begin enable ;
7372: ENABLE
// if timer <= 45 45$00 then
7373: LD_EXP 6
7377: PUSH
7378: LD_INT 94500
7380: LESSEQUAL
7381: IFFALSE 7416
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7383: LD_ADDR_EXP 15
7387: PUSH
7388: LD_INT 5
7390: PUSH
7391: LD_INT 6
7393: PUSH
7394: LD_INT 7
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: LIST
7401: PUSH
7402: LD_EXP 2
7406: ARRAY
7407: ST_TO_ADDR
// enemy_typ := 1 ;
7408: LD_ADDR_EXP 16
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7416: LD_EXP 6
7420: PUSH
7421: LD_INT 126000
7423: GREATER
7424: PUSH
7425: LD_EXP 6
7429: PUSH
7430: LD_INT 168000
7432: LESSEQUAL
7433: AND
7434: IFFALSE 7469
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7436: LD_ADDR_EXP 15
7440: PUSH
7441: LD_INT 6
7443: PUSH
7444: LD_INT 8
7446: PUSH
7447: LD_INT 9
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: LD_EXP 2
7459: ARRAY
7460: ST_TO_ADDR
// enemy_typ := 2 ;
7461: LD_ADDR_EXP 16
7465: PUSH
7466: LD_INT 2
7468: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7469: LD_EXP 6
7473: PUSH
7474: LD_INT 168000
7476: GREATER
7477: IFFALSE 7512
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7479: LD_ADDR_EXP 15
7483: PUSH
7484: LD_INT 8
7486: PUSH
7487: LD_INT 9
7489: PUSH
7490: LD_INT 10
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: LIST
7497: PUSH
7498: LD_EXP 2
7502: ARRAY
7503: ST_TO_ADDR
// enemy_typ := 3 ;
7504: LD_ADDR_EXP 16
7508: PUSH
7509: LD_INT 3
7511: ST_TO_ADDR
// end ; end ;
7512: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7513: LD_EXP 1
7517: PUSH
7518: LD_INT 2
7520: EQUAL
7521: IFFALSE 7646
7523: GO 7525
7525: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7526: LD_INT 8
7528: PPUSH
7529: LD_EXP 15
7533: PPUSH
7534: LD_INT 1
7536: PPUSH
7537: LD_INT 6
7539: PPUSH
7540: CALL 9717 0 4
// Wait ( 20 20$00 ) ;
7544: LD_INT 42000
7546: PPUSH
7547: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7551: LD_INT 8
7553: PPUSH
7554: LD_EXP 15
7558: PPUSH
7559: LD_INT 2
7561: PPUSH
7562: LD_INT 6
7564: PPUSH
7565: CALL 9717 0 4
// Wait ( 4 4$00 ) ;
7569: LD_INT 8400
7571: PPUSH
7572: CALL_OW 67
// uc_side := 8 ;
7576: LD_ADDR_OWVAR 20
7580: PUSH
7581: LD_INT 8
7583: ST_TO_ADDR
// uc_nation := 2 ;
7584: LD_ADDR_OWVAR 21
7588: PUSH
7589: LD_INT 2
7591: ST_TO_ADDR
// hc_class := 1 ;
7592: LD_ADDR_OWVAR 28
7596: PUSH
7597: LD_INT 1
7599: ST_TO_ADDR
// hc_gallery := sandar ;
7600: LD_ADDR_OWVAR 33
7604: PUSH
7605: LD_STRING sandar
7607: ST_TO_ADDR
// hc_face_number := 4 ;
7608: LD_ADDR_OWVAR 34
7612: PUSH
7613: LD_INT 4
7615: ST_TO_ADDR
// hc_sex := sex_male ;
7616: LD_ADDR_OWVAR 27
7620: PUSH
7621: LD_INT 1
7623: ST_TO_ADDR
// farmer := CreateHuman ;
7624: LD_ADDR_EXP 20
7628: PUSH
7629: CALL_OW 44
7633: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7634: LD_EXP 20
7638: PPUSH
7639: LD_STRING D-farmer
7641: PPUSH
7642: CALL_OW 94
// end ;
7646: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7647: LD_EXP 1
7651: PUSH
7652: LD_INT 1
7654: EQUAL
7655: IFFALSE 7810
7657: GO 7659
7659: DISABLE
7660: LD_INT 0
7662: PPUSH
7663: PPUSH
7664: PPUSH
// begin enable ;
7665: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7666: LD_ADDR_VAR 0 1
7670: PUSH
7671: LD_INT 2
7673: PUSH
7674: LD_INT 22
7676: PUSH
7677: LD_INT 3
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 22
7686: PUSH
7687: LD_INT 6
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: PPUSH
7699: CALL_OW 69
7703: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: LD_INT 2
7711: PUSH
7712: LD_INT 22
7714: PUSH
7715: LD_INT 1
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 22
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 69
7741: ST_TO_ADDR
// if filter > 0 then
7742: LD_VAR 0 1
7746: PUSH
7747: LD_INT 0
7749: GREATER
7750: IFFALSE 7810
// for i = 1 to filter do
7752: LD_ADDR_VAR 0 3
7756: PUSH
7757: DOUBLE
7758: LD_INT 1
7760: DEC
7761: ST_TO_ADDR
7762: LD_VAR 0 1
7766: PUSH
7767: FOR_TO
7768: IFFALSE 7808
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7770: LD_VAR 0 1
7774: PUSH
7775: LD_VAR 0 3
7779: ARRAY
7780: PPUSH
7781: LD_VAR 0 2
7785: PPUSH
7786: LD_VAR 0 1
7790: PUSH
7791: LD_VAR 0 3
7795: ARRAY
7796: PPUSH
7797: CALL_OW 74
7801: PPUSH
7802: CALL_OW 115
7806: GO 7767
7808: POP
7809: POP
// end ;
7810: PPOPN 3
7812: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
7813: LD_INT 0
7815: PPUSH
7816: PPUSH
7817: PPUSH
7818: PPUSH
7819: PPUSH
7820: PPUSH
7821: PPUSH
7822: PPUSH
// Randomize ;
7823: CALL_OW 10
// uc_side := side ;
7827: LD_ADDR_OWVAR 20
7831: PUSH
7832: LD_VAR 0 1
7836: ST_TO_ADDR
// uc_nation := nation_russian ;
7837: LD_ADDR_OWVAR 21
7841: PUSH
7842: LD_INT 3
7844: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
7845: LD_ADDR_VAR 0 10
7849: PUSH
7850: LD_INT 22
7852: PUSH
7853: LD_INT 24
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
7860: LD_ADDR_VAR 0 11
7864: PUSH
7865: LD_INT 42
7867: PUSH
7868: LD_INT 43
7870: PUSH
7871: LD_INT 44
7873: PUSH
7874: LD_INT 46
7876: PUSH
7877: LD_INT 45
7879: PUSH
7880: LD_INT 47
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: ST_TO_ADDR
// case typ of 1 :
7891: LD_VAR 0 3
7895: PUSH
7896: LD_INT 1
7898: DOUBLE
7899: EQUAL
7900: IFTRUE 7904
7902: GO 8098
7904: POP
// begin for i = 1 to num do
7905: LD_ADDR_VAR 0 6
7909: PUSH
7910: DOUBLE
7911: LD_INT 1
7913: DEC
7914: ST_TO_ADDR
7915: LD_VAR 0 2
7919: PUSH
7920: FOR_TO
7921: IFFALSE 8094
// begin vc_chassis := chassis [ 1 ] ;
7923: LD_ADDR_OWVAR 37
7927: PUSH
7928: LD_VAR 0 10
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: ST_TO_ADDR
// vc_engine := engine_combustion ;
7937: LD_ADDR_OWVAR 39
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// vc_control := control_manual ;
7945: LD_ADDR_OWVAR 38
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
7953: LD_ADDR_OWVAR 40
7957: PUSH
7958: LD_VAR 0 11
7962: PUSH
7963: LD_INT 1
7965: PPUSH
7966: LD_INT 3
7968: PPUSH
7969: CALL_OW 12
7973: ARRAY
7974: ST_TO_ADDR
// veh := CreateVehicle ;
7975: LD_ADDR_VAR 0 9
7979: PUSH
7980: CALL_OW 45
7984: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
7985: LD_ADDR_VAR 0 12
7989: PUSH
7990: LD_INT 1
7992: PPUSH
7993: LD_INT 2
7995: PPUSH
7996: CALL_OW 12
8000: ST_TO_ADDR
// if f = 1 then
8001: LD_VAR 0 12
8005: PUSH
8006: LD_INT 1
8008: EQUAL
8009: IFFALSE 8025
// SetDir ( veh , 3 ) else
8011: LD_VAR 0 9
8015: PPUSH
8016: LD_INT 3
8018: PPUSH
8019: CALL_OW 233
8023: GO 8037
// SetDir ( veh , 1 ) ;
8025: LD_VAR 0 9
8029: PPUSH
8030: LD_INT 1
8032: PPUSH
8033: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8037: LD_VAR 0 9
8041: PPUSH
8042: LD_VAR 0 4
8046: PUSH
8047: LD_VAR 0 12
8051: ARRAY
8052: PPUSH
8053: LD_INT 0
8055: PPUSH
8056: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8060: LD_ADDR_VAR 0 7
8064: PUSH
8065: LD_INT 1
8067: PPUSH
8068: LD_EXP 4
8072: PPUSH
8073: CALL 9068 0 2
8077: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8078: LD_VAR 0 7
8082: PPUSH
8083: LD_VAR 0 9
8087: PPUSH
8088: CALL_OW 52
// end ;
8092: GO 7920
8094: POP
8095: POP
// end ; 2 :
8096: GO 8640
8098: LD_INT 2
8100: DOUBLE
8101: EQUAL
8102: IFTRUE 8106
8104: GO 8403
8106: POP
// begin for i = 1 to num do
8107: LD_ADDR_VAR 0 6
8111: PUSH
8112: DOUBLE
8113: LD_INT 1
8115: DEC
8116: ST_TO_ADDR
8117: LD_VAR 0 2
8121: PUSH
8122: FOR_TO
8123: IFFALSE 8338
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8125: LD_ADDR_OWVAR 37
8129: PUSH
8130: LD_VAR 0 10
8134: PUSH
8135: LD_INT 1
8137: PPUSH
8138: LD_INT 2
8140: PPUSH
8141: CALL_OW 12
8145: ARRAY
8146: ST_TO_ADDR
// vc_engine := engine_combustion ;
8147: LD_ADDR_OWVAR 39
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8155: LD_ADDR_OWVAR 38
8159: PUSH
8160: LD_INT 1
8162: PUSH
8163: LD_INT 3
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 1
8172: PPUSH
8173: LD_INT 2
8175: PPUSH
8176: CALL_OW 12
8180: ARRAY
8181: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8182: LD_ADDR_OWVAR 40
8186: PUSH
8187: LD_VAR 0 11
8191: PUSH
8192: LD_INT 1
8194: PPUSH
8195: LD_INT 3
8197: PPUSH
8198: CALL_OW 12
8202: ARRAY
8203: ST_TO_ADDR
// veh := CreateVehicle ;
8204: LD_ADDR_VAR 0 9
8208: PUSH
8209: CALL_OW 45
8213: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8214: LD_ADDR_VAR 0 12
8218: PUSH
8219: LD_INT 1
8221: PPUSH
8222: LD_INT 2
8224: PPUSH
8225: CALL_OW 12
8229: ST_TO_ADDR
// if f = 1 then
8230: LD_VAR 0 12
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: IFFALSE 8254
// SetDir ( veh , 3 ) else
8240: LD_VAR 0 9
8244: PPUSH
8245: LD_INT 3
8247: PPUSH
8248: CALL_OW 233
8252: GO 8266
// SetDir ( veh , 1 ) ;
8254: LD_VAR 0 9
8258: PPUSH
8259: LD_INT 1
8261: PPUSH
8262: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8266: LD_VAR 0 9
8270: PPUSH
8271: LD_VAR 0 4
8275: PUSH
8276: LD_VAR 0 12
8280: ARRAY
8281: PPUSH
8282: LD_INT 0
8284: PPUSH
8285: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8289: LD_VAR 0 9
8293: PPUSH
8294: CALL_OW 263
8298: PUSH
8299: LD_INT 1
8301: EQUAL
8302: IFFALSE 8336
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8304: LD_ADDR_VAR 0 7
8308: PUSH
8309: LD_INT 1
8311: PPUSH
8312: LD_EXP 4
8316: PPUSH
8317: CALL 9068 0 2
8321: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8322: LD_VAR 0 7
8326: PPUSH
8327: LD_VAR 0 9
8331: PPUSH
8332: CALL_OW 52
// end ; end ;
8336: GO 8122
8338: POP
8339: POP
// for i = 1 to 2 do
8340: LD_ADDR_VAR 0 6
8344: PUSH
8345: DOUBLE
8346: LD_INT 1
8348: DEC
8349: ST_TO_ADDR
8350: LD_INT 2
8352: PUSH
8353: FOR_TO
8354: IFFALSE 8399
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8356: LD_ADDR_VAR 0 7
8360: PUSH
8361: LD_INT 9
8363: PPUSH
8364: LD_EXP 4
8368: PPUSH
8369: CALL 9068 0 2
8373: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8374: LD_VAR 0 7
8378: PPUSH
8379: LD_VAR 0 4
8383: PUSH
8384: LD_VAR 0 12
8388: ARRAY
8389: PPUSH
8390: LD_INT 0
8392: PPUSH
8393: CALL_OW 49
// end ;
8397: GO 8353
8399: POP
8400: POP
// end ; 3 :
8401: GO 8640
8403: LD_INT 3
8405: DOUBLE
8406: EQUAL
8407: IFTRUE 8411
8409: GO 8639
8411: POP
// begin for i = 1 to num do
8412: LD_ADDR_VAR 0 6
8416: PUSH
8417: DOUBLE
8418: LD_INT 1
8420: DEC
8421: ST_TO_ADDR
8422: LD_VAR 0 2
8426: PUSH
8427: FOR_TO
8428: IFFALSE 8635
// begin vc_chassis := chassis [ 2 ] ;
8430: LD_ADDR_OWVAR 37
8434: PUSH
8435: LD_VAR 0 10
8439: PUSH
8440: LD_INT 2
8442: ARRAY
8443: ST_TO_ADDR
// vc_engine := engine_combustion ;
8444: LD_ADDR_OWVAR 39
8448: PUSH
8449: LD_INT 1
8451: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8452: LD_ADDR_OWVAR 38
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: LD_INT 1
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 1
8469: PPUSH
8470: LD_INT 2
8472: PPUSH
8473: CALL_OW 12
8477: ARRAY
8478: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8479: LD_ADDR_OWVAR 40
8483: PUSH
8484: LD_VAR 0 11
8488: PUSH
8489: LD_INT 3
8491: PPUSH
8492: LD_INT 6
8494: PPUSH
8495: CALL_OW 12
8499: ARRAY
8500: ST_TO_ADDR
// veh := CreateVehicle ;
8501: LD_ADDR_VAR 0 9
8505: PUSH
8506: CALL_OW 45
8510: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8511: LD_ADDR_VAR 0 12
8515: PUSH
8516: LD_INT 1
8518: PPUSH
8519: LD_INT 2
8521: PPUSH
8522: CALL_OW 12
8526: ST_TO_ADDR
// if f = 1 then
8527: LD_VAR 0 12
8531: PUSH
8532: LD_INT 1
8534: EQUAL
8535: IFFALSE 8551
// SetDir ( veh , 3 ) else
8537: LD_VAR 0 9
8541: PPUSH
8542: LD_INT 3
8544: PPUSH
8545: CALL_OW 233
8549: GO 8563
// SetDir ( veh , 1 ) ;
8551: LD_VAR 0 9
8555: PPUSH
8556: LD_INT 1
8558: PPUSH
8559: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8563: LD_VAR 0 9
8567: PPUSH
8568: LD_VAR 0 4
8572: PUSH
8573: LD_VAR 0 12
8577: ARRAY
8578: PPUSH
8579: LD_INT 0
8581: PPUSH
8582: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8586: LD_VAR 0 9
8590: PPUSH
8591: CALL_OW 263
8595: PUSH
8596: LD_INT 1
8598: EQUAL
8599: IFFALSE 8633
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8601: LD_ADDR_VAR 0 7
8605: PUSH
8606: LD_INT 1
8608: PPUSH
8609: LD_EXP 4
8613: PPUSH
8614: CALL 9068 0 2
8618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8619: LD_VAR 0 7
8623: PPUSH
8624: LD_VAR 0 9
8628: PPUSH
8629: CALL_OW 52
// end ; end ;
8633: GO 8427
8635: POP
8636: POP
// end ; end ;
8637: GO 8640
8639: POP
// end ; end_of_file
8640: LD_VAR 0 5
8644: RET
// every 0 0$01 do
8645: GO 8647
8647: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8648: LD_INT 6
8650: PUSH
8651: LD_EXP 2
8655: PLUS
8656: PPUSH
8657: LD_INT 5
8659: PPUSH
8660: LD_INT 4
8662: PPUSH
8663: LD_INT 8
8665: PPUSH
8666: CALL 8671 0 4
8670: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8671: LD_INT 0
8673: PPUSH
8674: PPUSH
8675: PPUSH
8676: PPUSH
8677: PPUSH
// uc_nation = nation_nature ;
8678: LD_ADDR_OWVAR 21
8682: PUSH
8683: LD_INT 0
8685: ST_TO_ADDR
// uc_side = 0 ;
8686: LD_ADDR_OWVAR 20
8690: PUSH
8691: LD_INT 0
8693: ST_TO_ADDR
// l = 0 ;
8694: LD_ADDR_VAR 0 6
8698: PUSH
8699: LD_INT 0
8701: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8702: LD_ADDR_OWVAR 24
8706: PUSH
8707: LD_INT 0
8709: PPUSH
8710: LD_INT 5
8712: PPUSH
8713: CALL_OW 12
8717: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8718: LD_ADDR_OWVAR 35
8722: PUSH
8723: LD_INT 5
8725: NEG
8726: PPUSH
8727: LD_INT 5
8729: PPUSH
8730: CALL_OW 12
8734: ST_TO_ADDR
// hc_gallery =  ;
8735: LD_ADDR_OWVAR 33
8739: PUSH
8740: LD_STRING 
8742: ST_TO_ADDR
// hc_class = class_apeman ;
8743: LD_ADDR_OWVAR 28
8747: PUSH
8748: LD_INT 12
8750: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8751: LD_ADDR_OWVAR 29
8755: PUSH
8756: LD_INT 11
8758: PPUSH
8759: LD_INT 13
8761: PPUSH
8762: CALL_OW 12
8766: PUSH
8767: LD_INT 10
8769: PPUSH
8770: LD_INT 11
8772: PPUSH
8773: CALL_OW 12
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: ST_TO_ADDR
// hc_sex = sex_male ;
8782: LD_ADDR_OWVAR 27
8786: PUSH
8787: LD_INT 1
8789: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8790: LD_ADDR_OWVAR 31
8794: PUSH
8795: LD_INT 0
8797: PPUSH
8798: LD_INT 2
8800: PPUSH
8801: CALL_OW 12
8805: PUSH
8806: LD_INT 0
8808: PUSH
8809: LD_INT 0
8811: PUSH
8812: LD_INT 0
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: ST_TO_ADDR
// apeman = CreateHuman ;
8821: LD_ADDR_VAR 0 7
8825: PUSH
8826: CALL_OW 44
8830: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8831: LD_VAR 0 7
8835: PPUSH
8836: LD_VAR 0 4
8840: PPUSH
8841: LD_INT 0
8843: PPUSH
8844: CALL_OW 49
// l = l + 1 ;
8848: LD_ADDR_VAR 0 6
8852: PUSH
8853: LD_VAR 0 6
8857: PUSH
8858: LD_INT 1
8860: PLUS
8861: ST_TO_ADDR
// end until l = num1 ;
8862: LD_VAR 0 6
8866: PUSH
8867: LD_VAR 0 1
8871: EQUAL
8872: IFFALSE 8702
// l = 0 ;
8874: LD_ADDR_VAR 0 6
8878: PUSH
8879: LD_INT 0
8881: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8882: LD_ADDR_OWVAR 35
8886: PUSH
8887: LD_INT 0
8889: PPUSH
8890: LD_INT 25
8892: PPUSH
8893: CALL_OW 12
8897: ST_TO_ADDR
// hc_class = class_tiger ;
8898: LD_ADDR_OWVAR 28
8902: PUSH
8903: LD_INT 14
8905: ST_TO_ADDR
// hc_sex = sex_male ;
8906: LD_ADDR_OWVAR 27
8910: PUSH
8911: LD_INT 1
8913: ST_TO_ADDR
// hc_gallery = sandnature ;
8914: LD_ADDR_OWVAR 33
8918: PUSH
8919: LD_STRING sandnature
8921: ST_TO_ADDR
// hc_face_number = 3 ;
8922: LD_ADDR_OWVAR 34
8926: PUSH
8927: LD_INT 3
8929: ST_TO_ADDR
// tiger = CreateHuman ;
8930: LD_ADDR_VAR 0 8
8934: PUSH
8935: CALL_OW 44
8939: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8940: LD_VAR 0 8
8944: PPUSH
8945: LD_VAR 0 4
8949: PPUSH
8950: LD_INT 0
8952: PPUSH
8953: CALL_OW 49
// l = l + 1 ;
8957: LD_ADDR_VAR 0 6
8961: PUSH
8962: LD_VAR 0 6
8966: PUSH
8967: LD_INT 1
8969: PLUS
8970: ST_TO_ADDR
// end until l = num2 ;
8971: LD_VAR 0 6
8975: PUSH
8976: LD_VAR 0 2
8980: EQUAL
8981: IFFALSE 8882
// l = 0 ;
8983: LD_ADDR_VAR 0 6
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8991: LD_ADDR_OWVAR 28
8995: PUSH
8996: LD_INT 18
8998: ST_TO_ADDR
// hc_gallery = sandnature ;
8999: LD_ADDR_OWVAR 33
9003: PUSH
9004: LD_STRING sandnature
9006: ST_TO_ADDR
// hc_face_number = 1 ;
9007: LD_ADDR_OWVAR 34
9011: PUSH
9012: LD_INT 1
9014: ST_TO_ADDR
// bird = CreateHuman ;
9015: LD_ADDR_VAR 0 9
9019: PUSH
9020: CALL_OW 44
9024: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9025: LD_VAR 0 9
9029: PPUSH
9030: LD_INT 0
9032: PPUSH
9033: CALL_OW 51
// l = l + 1 ;
9037: LD_ADDR_VAR 0 6
9041: PUSH
9042: LD_VAR 0 6
9046: PUSH
9047: LD_INT 1
9049: PLUS
9050: ST_TO_ADDR
// end until l = num3 ;
9051: LD_VAR 0 6
9055: PUSH
9056: LD_VAR 0 3
9060: EQUAL
9061: IFFALSE 8991
// end ;
9063: LD_VAR 0 5
9067: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9068: LD_INT 0
9070: PPUSH
9071: PPUSH
9072: PPUSH
9073: PPUSH
9074: PPUSH
9075: PPUSH
// hc_class := clas ;
9076: LD_ADDR_OWVAR 28
9080: PUSH
9081: LD_VAR 0 1
9085: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9086: LD_ADDR_VAR 0 4
9090: PUSH
9091: LD_VAR 0 2
9095: PUSH
9096: LD_INT 1
9098: NEG
9099: PPUSH
9100: LD_INT 1
9102: PPUSH
9103: CALL_OW 12
9107: PLUS
9108: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9109: LD_ADDR_VAR 0 5
9113: PUSH
9114: LD_VAR 0 2
9118: PUSH
9119: LD_INT 1
9121: NEG
9122: PPUSH
9123: LD_INT 1
9125: PPUSH
9126: CALL_OW 12
9130: PLUS
9131: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9132: LD_ADDR_VAR 0 6
9136: PUSH
9137: LD_VAR 0 2
9141: PUSH
9142: LD_INT 1
9144: NEG
9145: PPUSH
9146: LD_INT 1
9148: PPUSH
9149: CALL_OW 12
9153: PLUS
9154: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9155: LD_ADDR_VAR 0 7
9159: PUSH
9160: LD_VAR 0 2
9164: PUSH
9165: LD_INT 1
9167: NEG
9168: PPUSH
9169: LD_INT 1
9171: PPUSH
9172: CALL_OW 12
9176: PLUS
9177: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9178: LD_VAR 0 1
9182: PUSH
9183: LD_INT 1
9185: EQUAL
9186: PUSH
9187: LD_VAR 0 1
9191: PUSH
9192: LD_INT 9
9194: EQUAL
9195: OR
9196: PUSH
9197: LD_VAR 0 1
9201: PUSH
9202: LD_INT 5
9204: EQUAL
9205: OR
9206: PUSH
9207: LD_VAR 0 1
9211: PUSH
9212: LD_INT 8
9214: EQUAL
9215: OR
9216: IFFALSE 9241
// bonus := [ 2 , 0 , 0 , 0 ] ;
9218: LD_ADDR_VAR 0 8
9222: PUSH
9223: LD_INT 2
9225: PUSH
9226: LD_INT 0
9228: PUSH
9229: LD_INT 0
9231: PUSH
9232: LD_INT 0
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: ST_TO_ADDR
// if clas = 2 then
9241: LD_VAR 0 1
9245: PUSH
9246: LD_INT 2
9248: EQUAL
9249: IFFALSE 9274
// bonus := [ 0 , 2 , 0 , 0 ] ;
9251: LD_ADDR_VAR 0 8
9255: PUSH
9256: LD_INT 0
9258: PUSH
9259: LD_INT 2
9261: PUSH
9262: LD_INT 0
9264: PUSH
9265: LD_INT 0
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: ST_TO_ADDR
// if clas = 3 then
9274: LD_VAR 0 1
9278: PUSH
9279: LD_INT 3
9281: EQUAL
9282: IFFALSE 9307
// bonus := [ 0 , 0 , 2 , 0 ] ;
9284: LD_ADDR_VAR 0 8
9288: PUSH
9289: LD_INT 0
9291: PUSH
9292: LD_INT 0
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: LD_INT 0
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: ST_TO_ADDR
// if clas = 4 then
9307: LD_VAR 0 1
9311: PUSH
9312: LD_INT 4
9314: EQUAL
9315: IFFALSE 9340
// bonus := [ 0 , 0 , 0 , 2 ] ;
9317: LD_ADDR_VAR 0 8
9321: PUSH
9322: LD_INT 0
9324: PUSH
9325: LD_INT 0
9327: PUSH
9328: LD_INT 0
9330: PUSH
9331: LD_INT 2
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9340: LD_VAR 0 1
9344: PUSH
9345: LD_INT 4
9347: GREATER
9348: PUSH
9349: LD_VAR 0 1
9353: PUSH
9354: LD_INT 9
9356: NONEQUAL
9357: AND
9358: PUSH
9359: LD_VAR 0 1
9363: PUSH
9364: LD_INT 5
9366: NONEQUAL
9367: AND
9368: PUSH
9369: LD_VAR 0 1
9373: PUSH
9374: LD_INT 8
9376: NONEQUAL
9377: AND
9378: IFFALSE 9403
// bonus := [ 0 , 0 , 0 , 0 ] ;
9380: LD_ADDR_VAR 0 8
9384: PUSH
9385: LD_INT 0
9387: PUSH
9388: LD_INT 0
9390: PUSH
9391: LD_INT 0
9393: PUSH
9394: LD_INT 0
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9403: LD_ADDR_OWVAR 30
9407: PUSH
9408: LD_INT 0
9410: PPUSH
9411: LD_INT 2
9413: PPUSH
9414: CALL_OW 12
9418: PUSH
9419: LD_INT 0
9421: PPUSH
9422: LD_INT 2
9424: PPUSH
9425: CALL_OW 12
9429: PUSH
9430: LD_INT 0
9432: PPUSH
9433: LD_INT 2
9435: PPUSH
9436: CALL_OW 12
9440: PUSH
9441: LD_INT 0
9443: PPUSH
9444: LD_INT 2
9446: PPUSH
9447: CALL_OW 12
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9458: LD_ADDR_OWVAR 31
9462: PUSH
9463: LD_VAR 0 4
9467: PUSH
9468: LD_VAR 0 8
9472: PUSH
9473: LD_INT 1
9475: ARRAY
9476: PLUS
9477: PUSH
9478: LD_VAR 0 5
9482: PUSH
9483: LD_VAR 0 8
9487: PUSH
9488: LD_INT 2
9490: ARRAY
9491: PLUS
9492: PUSH
9493: LD_VAR 0 6
9497: PUSH
9498: LD_VAR 0 8
9502: PUSH
9503: LD_INT 3
9505: ARRAY
9506: PLUS
9507: PUSH
9508: LD_VAR 0 7
9512: PUSH
9513: LD_VAR 0 8
9517: PUSH
9518: LD_INT 4
9520: ARRAY
9521: PLUS
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9529: LD_ADDR_OWVAR 27
9533: PUSH
9534: LD_INT 1
9536: PPUSH
9537: LD_INT 2
9539: PPUSH
9540: CALL_OW 12
9544: ST_TO_ADDR
// hc_gallery :=  ;
9545: LD_ADDR_OWVAR 33
9549: PUSH
9550: LD_STRING 
9552: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9553: LD_ADDR_OWVAR 29
9557: PUSH
9558: LD_INT 8
9560: PPUSH
9561: LD_INT 12
9563: PPUSH
9564: CALL_OW 12
9568: PUSH
9569: LD_INT 9
9571: PPUSH
9572: LD_INT 11
9574: PPUSH
9575: CALL_OW 12
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: ST_TO_ADDR
// hc_name :=  ;
9584: LD_ADDR_OWVAR 26
9588: PUSH
9589: LD_STRING 
9591: ST_TO_ADDR
// result := CreateHuman ;
9592: LD_ADDR_VAR 0 3
9596: PUSH
9597: CALL_OW 44
9601: ST_TO_ADDR
// end ;
9602: LD_VAR 0 3
9606: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9607: LD_INT 0
9609: PPUSH
9610: PPUSH
// vc_chassis := chassis ;
9611: LD_ADDR_OWVAR 37
9615: PUSH
9616: LD_VAR 0 1
9620: ST_TO_ADDR
// vc_engine := engine ;
9621: LD_ADDR_OWVAR 39
9625: PUSH
9626: LD_VAR 0 2
9630: ST_TO_ADDR
// vc_weapon := weapon ;
9631: LD_ADDR_OWVAR 40
9635: PUSH
9636: LD_VAR 0 3
9640: ST_TO_ADDR
// vc_control := control_manual ;
9641: LD_ADDR_OWVAR 38
9645: PUSH
9646: LD_INT 1
9648: ST_TO_ADDR
// veh := CreateVehicle ;
9649: LD_ADDR_VAR 0 8
9653: PUSH
9654: CALL_OW 45
9658: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9659: LD_VAR 0 8
9663: PPUSH
9664: LD_VAR 0 5
9668: PPUSH
9669: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9673: LD_VAR 0 8
9677: PPUSH
9678: LD_VAR 0 4
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9690: LD_INT 3
9692: PPUSH
9693: LD_VAR 0 6
9697: PPUSH
9698: CALL 9068 0 2
9702: PPUSH
9703: LD_VAR 0 8
9707: PPUSH
9708: CALL_OW 52
// end ;
9712: LD_VAR 0 7
9716: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9717: LD_INT 0
9719: PPUSH
9720: PPUSH
9721: PPUSH
9722: PPUSH
9723: PPUSH
9724: PPUSH
9725: PPUSH
// uc_side := side ;
9726: LD_ADDR_OWVAR 20
9730: PUSH
9731: LD_VAR 0 1
9735: ST_TO_ADDR
// uc_nation := nation_arabian ;
9736: LD_ADDR_OWVAR 21
9740: PUSH
9741: LD_INT 2
9743: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9744: LD_ADDR_VAR 0 10
9748: PUSH
9749: LD_INT 14
9751: PUSH
9752: EMPTY
9753: LIST
9754: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9755: LD_ADDR_VAR 0 11
9759: PUSH
9760: LD_INT 24
9762: PUSH
9763: LD_INT 25
9765: PUSH
9766: LD_INT 27
9768: PUSH
9769: LD_INT 28
9771: PUSH
9772: LD_INT 29
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: ST_TO_ADDR
// case typ of 1 :
9782: LD_VAR 0 3
9786: PUSH
9787: LD_INT 1
9789: DOUBLE
9790: EQUAL
9791: IFTRUE 9795
9793: GO 9967
9795: POP
// begin for i = 1 to num do
9796: LD_ADDR_VAR 0 6
9800: PUSH
9801: DOUBLE
9802: LD_INT 1
9804: DEC
9805: ST_TO_ADDR
9806: LD_VAR 0 2
9810: PUSH
9811: FOR_TO
9812: IFFALSE 9963
// begin vc_chassis := chassis [ 1 ] ;
9814: LD_ADDR_OWVAR 37
9818: PUSH
9819: LD_VAR 0 10
9823: PUSH
9824: LD_INT 1
9826: ARRAY
9827: ST_TO_ADDR
// vc_engine := engine_combustion ;
9828: LD_ADDR_OWVAR 39
9832: PUSH
9833: LD_INT 1
9835: ST_TO_ADDR
// vc_control := control_manual ;
9836: LD_ADDR_OWVAR 38
9840: PUSH
9841: LD_INT 1
9843: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
9844: LD_ADDR_OWVAR 40
9848: PUSH
9849: LD_VAR 0 11
9853: PUSH
9854: LD_INT 1
9856: PPUSH
9857: LD_INT 3
9859: PPUSH
9860: CALL_OW 12
9864: ARRAY
9865: ST_TO_ADDR
// veh := CreateVehicle ;
9866: LD_ADDR_VAR 0 9
9870: PUSH
9871: CALL_OW 45
9875: ST_TO_ADDR
// if area = north_spawn then
9876: LD_VAR 0 4
9880: PUSH
9881: LD_INT 6
9883: EQUAL
9884: IFFALSE 9900
// SetDir ( veh , 3 ) else
9886: LD_VAR 0 9
9890: PPUSH
9891: LD_INT 3
9893: PPUSH
9894: CALL_OW 233
9898: GO 9912
// SetDir ( veh , 1 ) ;
9900: LD_VAR 0 9
9904: PPUSH
9905: LD_INT 1
9907: PPUSH
9908: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9912: LD_VAR 0 9
9916: PPUSH
9917: LD_VAR 0 4
9921: PPUSH
9922: LD_INT 0
9924: PPUSH
9925: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
9929: LD_ADDR_VAR 0 7
9933: PUSH
9934: LD_INT 1
9936: PPUSH
9937: LD_EXP 4
9941: PPUSH
9942: CALL 9068 0 2
9946: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9947: LD_VAR 0 7
9951: PPUSH
9952: LD_VAR 0 9
9956: PPUSH
9957: CALL_OW 52
// end ;
9961: GO 9811
9963: POP
9964: POP
// end ; 2 :
9965: GO 10226
9967: LD_INT 2
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 10225
9975: POP
// begin for i = 1 to num do
9976: LD_ADDR_VAR 0 6
9980: PUSH
9981: DOUBLE
9982: LD_INT 1
9984: DEC
9985: ST_TO_ADDR
9986: LD_VAR 0 2
9990: PUSH
9991: FOR_TO
9992: IFFALSE 10143
// begin vc_chassis := chassis [ 1 ] ;
9994: LD_ADDR_OWVAR 37
9998: PUSH
9999: LD_VAR 0 10
10003: PUSH
10004: LD_INT 1
10006: ARRAY
10007: ST_TO_ADDR
// vc_engine := engine_combustion ;
10008: LD_ADDR_OWVAR 39
10012: PUSH
10013: LD_INT 1
10015: ST_TO_ADDR
// vc_control := control_manual ;
10016: LD_ADDR_OWVAR 38
10020: PUSH
10021: LD_INT 1
10023: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10024: LD_ADDR_OWVAR 40
10028: PUSH
10029: LD_VAR 0 11
10033: PUSH
10034: LD_INT 3
10036: PPUSH
10037: LD_INT 5
10039: PPUSH
10040: CALL_OW 12
10044: ARRAY
10045: ST_TO_ADDR
// veh := CreateVehicle ;
10046: LD_ADDR_VAR 0 9
10050: PUSH
10051: CALL_OW 45
10055: ST_TO_ADDR
// if area = north_spawn then
10056: LD_VAR 0 4
10060: PUSH
10061: LD_INT 6
10063: EQUAL
10064: IFFALSE 10080
// SetDir ( veh , 3 ) else
10066: LD_VAR 0 9
10070: PPUSH
10071: LD_INT 3
10073: PPUSH
10074: CALL_OW 233
10078: GO 10092
// SetDir ( veh , 1 ) ;
10080: LD_VAR 0 9
10084: PPUSH
10085: LD_INT 1
10087: PPUSH
10088: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10092: LD_VAR 0 9
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: LD_INT 0
10104: PPUSH
10105: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10109: LD_ADDR_VAR 0 7
10113: PUSH
10114: LD_INT 1
10116: PPUSH
10117: LD_EXP 4
10121: PPUSH
10122: CALL 9068 0 2
10126: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10127: LD_VAR 0 7
10131: PPUSH
10132: LD_VAR 0 9
10136: PPUSH
10137: CALL_OW 52
// end ;
10141: GO 9991
10143: POP
10144: POP
// for i = 1 to 4 do
10145: LD_ADDR_VAR 0 6
10149: PUSH
10150: DOUBLE
10151: LD_INT 1
10153: DEC
10154: ST_TO_ADDR
10155: LD_INT 4
10157: PUSH
10158: FOR_TO
10159: IFFALSE 10221
// begin uc_nation := 0 ;
10161: LD_ADDR_OWVAR 21
10165: PUSH
10166: LD_INT 0
10168: ST_TO_ADDR
// hc_class := 17 ;
10169: LD_ADDR_OWVAR 28
10173: PUSH
10174: LD_INT 17
10176: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10177: LD_ADDR_OWVAR 29
10181: PUSH
10182: LD_INT 11
10184: PUSH
10185: LD_INT 13
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: ST_TO_ADDR
// un := CreateHuman ;
10192: LD_ADDR_VAR 0 7
10196: PUSH
10197: CALL_OW 44
10201: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10202: LD_VAR 0 7
10206: PPUSH
10207: LD_VAR 0 4
10211: PPUSH
10212: LD_INT 0
10214: PPUSH
10215: CALL_OW 49
// end ;
10219: GO 10158
10221: POP
10222: POP
// end ; end ;
10223: GO 10226
10225: POP
// end ;
10226: LD_VAR 0 5
10230: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10231: LD_INT 0
10233: PPUSH
10234: PPUSH
10235: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10236: LD_ADDR_VAR 0 5
10240: PUSH
10241: LD_INT 22
10243: PUSH
10244: LD_VAR 0 3
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PPUSH
10253: CALL_OW 69
10257: PPUSH
10258: LD_VAR 0 1
10262: PPUSH
10263: LD_VAR 0 2
10267: PPUSH
10268: CALL_OW 73
10272: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10273: LD_ADDR_VAR 0 6
10277: PUSH
10278: LD_VAR 0 5
10282: PPUSH
10283: LD_VAR 0 1
10287: PPUSH
10288: LD_VAR 0 2
10292: PPUSH
10293: CALL_OW 297
10297: ST_TO_ADDR
// result := dist ;
10298: LD_ADDR_VAR 0 4
10302: PUSH
10303: LD_VAR 0 6
10307: ST_TO_ADDR
// end ; end_of_file
10308: LD_VAR 0 4
10312: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10313: LD_VAR 0 1
10317: PUSH
10318: LD_INT 1
10320: EQUAL
10321: IFFALSE 10330
// YouLost ( jota-lose ) ;
10323: LD_STRING jota-lose
10325: PPUSH
10326: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10330: LD_EXP 1
10334: PUSH
10335: LD_INT 2
10337: EQUAL
10338: PUSH
10339: LD_EXP 8
10343: PUSH
10344: LD_INT 0
10346: EQUAL
10347: AND
10348: IFFALSE 10663
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 255
10359: PUSH
10360: LD_INT 1
10362: EQUAL
10363: PUSH
10364: LD_VAR 0 1
10368: PUSH
10369: LD_INT 11
10371: PPUSH
10372: LD_INT 21
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 70
10386: PUSH
10387: LD_INT 2
10389: PUSH
10390: LD_INT 30
10392: PUSH
10393: LD_INT 6
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 30
10402: PUSH
10403: LD_INT 10
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 30
10412: PUSH
10413: LD_INT 7
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 30
10422: PUSH
10423: LD_INT 8
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: PUSH
10443: EMPTY
10444: LIST
10445: PUSH
10446: EMPTY
10447: LIST
10448: PPUSH
10449: CALL_OW 69
10453: DIFF
10454: IN
10455: AND
10456: IFFALSE 10542
// begin ai_build := ai_build ^ GetBType ( un ) ;
10458: LD_ADDR_EXP 10
10462: PUSH
10463: LD_EXP 10
10467: PUSH
10468: LD_VAR 0 1
10472: PPUSH
10473: CALL_OW 266
10477: ADD
10478: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10479: LD_ADDR_EXP 10
10483: PUSH
10484: LD_EXP 10
10488: PUSH
10489: LD_VAR 0 1
10493: PPUSH
10494: CALL_OW 250
10498: ADD
10499: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10500: LD_ADDR_EXP 10
10504: PUSH
10505: LD_EXP 10
10509: PUSH
10510: LD_VAR 0 1
10514: PPUSH
10515: CALL_OW 251
10519: ADD
10520: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10521: LD_ADDR_EXP 10
10525: PUSH
10526: LD_EXP 10
10530: PUSH
10531: LD_VAR 0 1
10535: PPUSH
10536: CALL_OW 254
10540: ADD
10541: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10542: LD_VAR 0 1
10546: PPUSH
10547: CALL_OW 255
10551: PUSH
10552: LD_INT 1
10554: EQUAL
10555: PUSH
10556: LD_VAR 0 1
10560: PUSH
10561: LD_INT 21
10563: PUSH
10564: LD_INT 2
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: IN
10576: AND
10577: IFFALSE 10663
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10579: LD_ADDR_EXP 11
10583: PUSH
10584: LD_EXP 11
10588: PUSH
10589: LD_VAR 0 1
10593: PPUSH
10594: CALL_OW 265
10598: ADD
10599: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10600: LD_ADDR_EXP 11
10604: PUSH
10605: LD_EXP 11
10609: PUSH
10610: LD_VAR 0 1
10614: PPUSH
10615: CALL_OW 262
10619: ADD
10620: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10621: LD_ADDR_EXP 11
10625: PUSH
10626: LD_EXP 11
10630: PUSH
10631: LD_VAR 0 1
10635: PPUSH
10636: CALL_OW 263
10640: ADD
10641: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10642: LD_ADDR_EXP 11
10646: PUSH
10647: LD_EXP 11
10651: PUSH
10652: LD_VAR 0 1
10656: PPUSH
10657: CALL_OW 264
10661: ADD
10662: ST_TO_ADDR
// end ; end ; end ;
10663: PPOPN 1
10665: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10666: LD_EXP 1
10670: PUSH
10671: LD_INT 1
10673: EQUAL
10674: PUSH
10675: LD_INT 22
10677: PUSH
10678: LD_INT 1
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 21
10687: PUSH
10688: LD_INT 1
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PPUSH
10699: CALL_OW 69
10703: PUSH
10704: LD_INT 0
10706: EQUAL
10707: AND
10708: IFFALSE 10720
10710: GO 10712
10712: DISABLE
// YouLost ( peo-lose ) ;
10713: LD_STRING peo-lose
10715: PPUSH
10716: CALL_OW 104
10720: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10721: LD_EXP 1
10725: PUSH
10726: LD_INT 2
10728: EQUAL
10729: PUSH
10730: LD_INT 22
10732: PUSH
10733: LD_INT 3
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 21
10742: PUSH
10743: LD_INT 1
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: PUSH
10759: LD_INT 0
10761: EQUAL
10762: AND
10763: IFFALSE 10775
10765: GO 10767
10767: DISABLE
// YouLost ( peo-lose ) ;
10768: LD_STRING peo-lose
10770: PPUSH
10771: CALL_OW 104
10775: END
// every 0 0$03 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = need_to_win do var i ;
10776: LD_INT 1
10778: PPUSH
10779: CALL_OW 274
10783: PPUSH
10784: LD_INT 3
10786: PPUSH
10787: CALL_OW 275
10791: PUSH
10792: LD_EXP 5
10796: EQUAL
10797: IFFALSE 10883
10799: GO 10801
10801: DISABLE
10802: LD_INT 0
10804: PPUSH
// begin if GetSide ( jota_base ) = your_side then
10805: LD_INT 1
10807: PPUSH
10808: CALL_OW 255
10812: PUSH
10813: LD_OWVAR 2
10817: EQUAL
10818: IFFALSE 10861
// begin for i = 1 to 3 do
10820: LD_ADDR_VAR 0 1
10824: PUSH
10825: DOUBLE
10826: LD_INT 1
10828: DEC
10829: ST_TO_ADDR
10830: LD_INT 3
10832: PUSH
10833: FOR_TO
10834: IFFALSE 10848
// AddMedal ( med , 1 ) ;
10836: LD_STRING med
10838: PPUSH
10839: LD_INT 1
10841: PPUSH
10842: CALL_OW 101
10846: GO 10833
10848: POP
10849: POP
// GiveMedals ( MAIN ) ;
10850: LD_STRING MAIN
10852: PPUSH
10853: CALL_OW 102
// YouWin ;
10857: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
10861: LD_INT 1
10863: PPUSH
10864: CALL_OW 255
10868: PUSH
10869: LD_OWVAR 2
10873: NONEQUAL
10874: IFFALSE 10883
// YouLost ( source ) ;
10876: LD_STRING source
10878: PPUSH
10879: CALL_OW 104
// end ; end_of_file
10883: PPOPN 1
10885: END
// every 2 2$05 + 0 0$11 do
10886: GO 10888
10888: DISABLE
// begin enable ;
10889: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10890: LD_INT 1
10892: PPUSH
10893: LD_INT 5
10895: PPUSH
10896: CALL_OW 12
10900: PPUSH
10901: LD_INT 7
10903: PPUSH
10904: LD_INT 1
10906: PPUSH
10907: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
10911: LD_INT 350
10913: PPUSH
10914: LD_INT 1295
10916: PPUSH
10917: CALL_OW 12
10921: PPUSH
10922: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
10926: LD_INT 1
10928: PPUSH
10929: LD_INT 5
10931: PPUSH
10932: CALL_OW 12
10936: PPUSH
10937: LD_INT 1
10939: PPUSH
10940: CALL_OW 57
// end ;
10944: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
10945: LD_EXP 1
10949: PUSH
10950: LD_INT 2
10952: EQUAL
10953: PUSH
10954: LD_EXP 8
10958: PUSH
10959: LD_INT 0
10961: EQUAL
10962: AND
10963: IFFALSE 11053
10965: GO 10967
10967: DISABLE
// begin enable ;
10968: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10969: LD_INT 1
10971: PPUSH
10972: LD_INT 5
10974: PPUSH
10975: CALL_OW 12
10979: PPUSH
10980: LD_INT 7
10982: PPUSH
10983: LD_INT 1
10985: PPUSH
10986: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
10990: LD_INT 350
10992: PPUSH
10993: LD_INT 1750
10995: PPUSH
10996: CALL_OW 12
11000: PPUSH
11001: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11005: LD_EXP 6
11009: PUSH
11010: LD_INT 73500
11012: PUSH
11013: LD_INT 63000
11015: PUSH
11016: LD_INT 52500
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: LD_EXP 2
11028: ARRAY
11029: LESSEQUAL
11030: IFFALSE 11053
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11032: LD_INT 1
11034: PPUSH
11035: LD_INT 5
11037: PPUSH
11038: CALL_OW 12
11042: PPUSH
11043: LD_INT 12
11045: PPUSH
11046: LD_INT 1
11048: PPUSH
11049: CALL_OW 55
// end ;
11053: END
