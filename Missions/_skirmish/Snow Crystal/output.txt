// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: IFFALSE 10654
// YouLost ( jota-lose ) ;
10647: LD_STRING jota-lose
10649: PPUSH
10650: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10654: LD_EXP 1
10658: PUSH
10659: LD_INT 2
10661: EQUAL
10662: PUSH
10663: LD_EXP 8
10667: PUSH
10668: LD_INT 0
10670: EQUAL
10671: AND
10672: IFFALSE 10987
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 255
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: LD_INT 11
10695: PPUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 70
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 10
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 30
10746: PUSH
10747: LD_INT 8
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: DIFF
10778: IN
10779: AND
10780: IFFALSE 10866
// begin ai_build := ai_build ^ GetBType ( un ) ;
10782: LD_ADDR_EXP 10
10786: PUSH
10787: LD_EXP 10
10791: PUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 266
10801: ADD
10802: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10803: LD_ADDR_EXP 10
10807: PUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 250
10822: ADD
10823: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10824: LD_ADDR_EXP 10
10828: PUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 251
10843: ADD
10844: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10845: LD_ADDR_EXP 10
10849: PUSH
10850: LD_EXP 10
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 254
10864: ADD
10865: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 255
10875: PUSH
10876: LD_INT 1
10878: EQUAL
10879: PUSH
10880: LD_VAR 0 1
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: IN
10900: AND
10901: IFFALSE 10987
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10903: LD_ADDR_EXP 11
10907: PUSH
10908: LD_EXP 11
10912: PUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 265
10922: ADD
10923: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10924: LD_ADDR_EXP 11
10928: PUSH
10929: LD_EXP 11
10933: PUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 262
10943: ADD
10944: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10945: LD_ADDR_EXP 11
10949: PUSH
10950: LD_EXP 11
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: CALL_OW 263
10964: ADD
10965: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10966: LD_ADDR_EXP 11
10970: PUSH
10971: LD_EXP 11
10975: PUSH
10976: LD_VAR 0 1
10980: PPUSH
10981: CALL_OW 264
10985: ADD
10986: ST_TO_ADDR
// end ; end ; end ;
10987: PPOPN 1
10989: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10990: LD_EXP 1
10994: PUSH
10995: LD_INT 1
10997: EQUAL
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PUSH
11028: LD_INT 0
11030: EQUAL
11031: AND
11032: IFFALSE 11044
11034: GO 11036
11036: DISABLE
// YouLost ( peo-lose ) ;
11037: LD_STRING peo-lose
11039: PPUSH
11040: CALL_OW 104
11044: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11045: LD_EXP 1
11049: PUSH
11050: LD_INT 2
11052: EQUAL
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: PUSH
11083: LD_INT 0
11085: EQUAL
11086: AND
11087: IFFALSE 11099
11089: GO 11091
11091: DISABLE
// YouLost ( peo-lose ) ;
11092: LD_STRING peo-lose
11094: PPUSH
11095: CALL_OW 104
11099: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
11100: LD_OWVAR 2
11104: PPUSH
11105: CALL 10510 0 1
11109: PUSH
11110: LD_EXP 5
11114: GREATEREQUAL
11115: IFFALSE 11201
11117: GO 11119
11119: DISABLE
11120: LD_INT 0
11122: PPUSH
// begin if GetSide ( jota_base ) = your_side then
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 255
11130: PUSH
11131: LD_OWVAR 2
11135: EQUAL
11136: IFFALSE 11179
// begin for i = 1 to 3 do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: DOUBLE
11144: LD_INT 1
11146: DEC
11147: ST_TO_ADDR
11148: LD_INT 3
11150: PUSH
11151: FOR_TO
11152: IFFALSE 11166
// AddMedal ( med , 1 ) ;
11154: LD_STRING med
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 101
11164: GO 11151
11166: POP
11167: POP
// GiveMedals ( MAIN ) ;
11168: LD_STRING MAIN
11170: PPUSH
11171: CALL_OW 102
// YouWin ;
11175: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: LD_OWVAR 2
11191: NONEQUAL
11192: IFFALSE 11201
// YouLost ( source ) ;
11194: LD_STRING source
11196: PPUSH
11197: CALL_OW 104
// end ; end_of_file
11201: PPOPN 1
11203: END
// every 2 2$05 + 0 0$11 do
11204: GO 11206
11206: DISABLE
// begin enable ;
11207: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11208: LD_INT 1
11210: PPUSH
11211: LD_INT 5
11213: PPUSH
11214: CALL_OW 12
11218: PPUSH
11219: LD_INT 7
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11229: LD_INT 350
11231: PPUSH
11232: LD_INT 1295
11234: PPUSH
11235: CALL_OW 12
11239: PPUSH
11240: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 5
11249: PPUSH
11250: CALL_OW 12
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 57
// end ;
11262: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11263: LD_EXP 1
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: PUSH
11272: LD_EXP 8
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: AND
11281: IFFALSE 11371
11283: GO 11285
11285: DISABLE
// begin enable ;
11286: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 7
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11308: LD_INT 350
11310: PPUSH
11311: LD_INT 1750
11313: PPUSH
11314: CALL_OW 12
11318: PPUSH
11319: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11323: LD_EXP 6
11327: PUSH
11328: LD_INT 73500
11330: PUSH
11331: LD_INT 63000
11333: PUSH
11334: LD_INT 52500
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_EXP 2
11346: ARRAY
11347: LESSEQUAL
11348: IFFALSE 11371
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 5
11355: PPUSH
11356: CALL_OW 12
11360: PPUSH
11361: LD_INT 12
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 55
// end ; end_of_file
11371: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: CALL 25479 0 3
// end ;
11391: PPOPN 3
11393: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL 25487 0 1
// end ; end_of_file
11403: PPOPN 1
11405: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11406: LD_INT 0
11408: PPUSH
// ar_miner := 81 ;
11409: LD_ADDR_EXP 28
11413: PUSH
11414: LD_INT 81
11416: ST_TO_ADDR
// ar_crane := 88 ;
11417: LD_ADDR_EXP 27
11421: PUSH
11422: LD_INT 88
11424: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11425: LD_ADDR_EXP 22
11429: PUSH
11430: LD_INT 89
11432: ST_TO_ADDR
// us_hack := 99 ;
11433: LD_ADDR_EXP 23
11437: PUSH
11438: LD_INT 99
11440: ST_TO_ADDR
// us_artillery := 97 ;
11441: LD_ADDR_EXP 24
11445: PUSH
11446: LD_INT 97
11448: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11449: LD_ADDR_EXP 25
11453: PUSH
11454: LD_INT 91
11456: ST_TO_ADDR
// ar_mortar := 92 ;
11457: LD_ADDR_EXP 26
11461: PUSH
11462: LD_INT 92
11464: ST_TO_ADDR
// ru_radar := 98 ;
11465: LD_ADDR_EXP 21
11469: PUSH
11470: LD_INT 98
11472: ST_TO_ADDR
// tech_Artillery := 80 ;
11473: LD_ADDR_EXP 29
11477: PUSH
11478: LD_INT 80
11480: ST_TO_ADDR
// tech_RadMat := 81 ;
11481: LD_ADDR_EXP 30
11485: PUSH
11486: LD_INT 81
11488: ST_TO_ADDR
// tech_BasicTools := 82 ;
11489: LD_ADDR_EXP 31
11493: PUSH
11494: LD_INT 82
11496: ST_TO_ADDR
// tech_Cargo := 83 ;
11497: LD_ADDR_EXP 32
11501: PUSH
11502: LD_INT 83
11504: ST_TO_ADDR
// tech_Track := 84 ;
11505: LD_ADDR_EXP 33
11509: PUSH
11510: LD_INT 84
11512: ST_TO_ADDR
// tech_Crane := 85 ;
11513: LD_ADDR_EXP 34
11517: PUSH
11518: LD_INT 85
11520: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11521: LD_ADDR_EXP 35
11525: PUSH
11526: LD_INT 86
11528: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11529: LD_ADDR_EXP 36
11533: PUSH
11534: LD_INT 87
11536: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11537: LD_ADDR_EXP 37
11541: PUSH
11542: LD_INT 88
11544: ST_TO_ADDR
// class_mastodont := 31 ;
11545: LD_ADDR_EXP 38
11549: PUSH
11550: LD_INT 31
11552: ST_TO_ADDR
// class_horse := 21 ;
11553: LD_ADDR_EXP 39
11557: PUSH
11558: LD_INT 21
11560: ST_TO_ADDR
// end ;
11561: LD_VAR 0 1
11565: RET
// every 1 do
11566: GO 11568
11568: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11569: CALL 11406 0 0
11573: END
// every 0 0$1 do
11574: GO 11576
11576: DISABLE
// begin enable ;
11577: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11578: LD_STRING updateTimer(
11580: PUSH
11581: LD_OWVAR 1
11585: STR
11586: PUSH
11587: LD_STRING );
11589: STR
11590: PPUSH
11591: CALL_OW 559
// end ;
11595: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11596: LD_INT 0
11598: PPUSH
// if p2 = 100 then
11599: LD_VAR 0 2
11603: PUSH
11604: LD_INT 100
11606: EQUAL
11607: IFFALSE 12610
// begin if not StreamModeActive then
11609: LD_EXP 40
11613: NOT
11614: IFFALSE 11624
// StreamModeActive := true ;
11616: LD_ADDR_EXP 40
11620: PUSH
11621: LD_INT 1
11623: ST_TO_ADDR
// if p3 = 0 then
11624: LD_VAR 0 3
11628: PUSH
11629: LD_INT 0
11631: EQUAL
11632: IFFALSE 11638
// InitStreamMode ;
11634: CALL 12770 0 0
// if p3 = 1 then
11638: LD_VAR 0 3
11642: PUSH
11643: LD_INT 1
11645: EQUAL
11646: IFFALSE 11656
// sRocket := true ;
11648: LD_ADDR_EXP 45
11652: PUSH
11653: LD_INT 1
11655: ST_TO_ADDR
// if p3 = 2 then
11656: LD_VAR 0 3
11660: PUSH
11661: LD_INT 2
11663: EQUAL
11664: IFFALSE 11674
// sSpeed := true ;
11666: LD_ADDR_EXP 44
11670: PUSH
11671: LD_INT 1
11673: ST_TO_ADDR
// if p3 = 3 then
11674: LD_VAR 0 3
11678: PUSH
11679: LD_INT 3
11681: EQUAL
11682: IFFALSE 11692
// sEngine := true ;
11684: LD_ADDR_EXP 46
11688: PUSH
11689: LD_INT 1
11691: ST_TO_ADDR
// if p3 = 4 then
11692: LD_VAR 0 3
11696: PUSH
11697: LD_INT 4
11699: EQUAL
11700: IFFALSE 11710
// sSpec := true ;
11702: LD_ADDR_EXP 43
11706: PUSH
11707: LD_INT 1
11709: ST_TO_ADDR
// if p3 = 5 then
11710: LD_VAR 0 3
11714: PUSH
11715: LD_INT 5
11717: EQUAL
11718: IFFALSE 11728
// sLevel := true ;
11720: LD_ADDR_EXP 47
11724: PUSH
11725: LD_INT 1
11727: ST_TO_ADDR
// if p3 = 6 then
11728: LD_VAR 0 3
11732: PUSH
11733: LD_INT 6
11735: EQUAL
11736: IFFALSE 11746
// sArmoury := true ;
11738: LD_ADDR_EXP 48
11742: PUSH
11743: LD_INT 1
11745: ST_TO_ADDR
// if p3 = 7 then
11746: LD_VAR 0 3
11750: PUSH
11751: LD_INT 7
11753: EQUAL
11754: IFFALSE 11764
// sRadar := true ;
11756: LD_ADDR_EXP 49
11760: PUSH
11761: LD_INT 1
11763: ST_TO_ADDR
// if p3 = 8 then
11764: LD_VAR 0 3
11768: PUSH
11769: LD_INT 8
11771: EQUAL
11772: IFFALSE 11782
// sBunker := true ;
11774: LD_ADDR_EXP 50
11778: PUSH
11779: LD_INT 1
11781: ST_TO_ADDR
// if p3 = 9 then
11782: LD_VAR 0 3
11786: PUSH
11787: LD_INT 9
11789: EQUAL
11790: IFFALSE 11800
// sHack := true ;
11792: LD_ADDR_EXP 51
11796: PUSH
11797: LD_INT 1
11799: ST_TO_ADDR
// if p3 = 10 then
11800: LD_VAR 0 3
11804: PUSH
11805: LD_INT 10
11807: EQUAL
11808: IFFALSE 11818
// sFire := true ;
11810: LD_ADDR_EXP 52
11814: PUSH
11815: LD_INT 1
11817: ST_TO_ADDR
// if p3 = 11 then
11818: LD_VAR 0 3
11822: PUSH
11823: LD_INT 11
11825: EQUAL
11826: IFFALSE 11836
// sRefresh := true ;
11828: LD_ADDR_EXP 53
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// if p3 = 12 then
11836: LD_VAR 0 3
11840: PUSH
11841: LD_INT 12
11843: EQUAL
11844: IFFALSE 11854
// sExp := true ;
11846: LD_ADDR_EXP 54
11850: PUSH
11851: LD_INT 1
11853: ST_TO_ADDR
// if p3 = 13 then
11854: LD_VAR 0 3
11858: PUSH
11859: LD_INT 13
11861: EQUAL
11862: IFFALSE 11872
// sDepot := true ;
11864: LD_ADDR_EXP 55
11868: PUSH
11869: LD_INT 1
11871: ST_TO_ADDR
// if p3 = 14 then
11872: LD_VAR 0 3
11876: PUSH
11877: LD_INT 14
11879: EQUAL
11880: IFFALSE 11890
// sFlag := true ;
11882: LD_ADDR_EXP 56
11886: PUSH
11887: LD_INT 1
11889: ST_TO_ADDR
// if p3 = 15 then
11890: LD_VAR 0 3
11894: PUSH
11895: LD_INT 15
11897: EQUAL
11898: IFFALSE 11908
// sKamikadze := true ;
11900: LD_ADDR_EXP 64
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// if p3 = 16 then
11908: LD_VAR 0 3
11912: PUSH
11913: LD_INT 16
11915: EQUAL
11916: IFFALSE 11926
// sTroll := true ;
11918: LD_ADDR_EXP 65
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// if p3 = 17 then
11926: LD_VAR 0 3
11930: PUSH
11931: LD_INT 17
11933: EQUAL
11934: IFFALSE 11944
// sSlow := true ;
11936: LD_ADDR_EXP 66
11940: PUSH
11941: LD_INT 1
11943: ST_TO_ADDR
// if p3 = 18 then
11944: LD_VAR 0 3
11948: PUSH
11949: LD_INT 18
11951: EQUAL
11952: IFFALSE 11962
// sLack := true ;
11954: LD_ADDR_EXP 67
11958: PUSH
11959: LD_INT 1
11961: ST_TO_ADDR
// if p3 = 19 then
11962: LD_VAR 0 3
11966: PUSH
11967: LD_INT 19
11969: EQUAL
11970: IFFALSE 11980
// sTank := true ;
11972: LD_ADDR_EXP 69
11976: PUSH
11977: LD_INT 1
11979: ST_TO_ADDR
// if p3 = 20 then
11980: LD_VAR 0 3
11984: PUSH
11985: LD_INT 20
11987: EQUAL
11988: IFFALSE 11998
// sRemote := true ;
11990: LD_ADDR_EXP 70
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// if p3 = 21 then
11998: LD_VAR 0 3
12002: PUSH
12003: LD_INT 21
12005: EQUAL
12006: IFFALSE 12016
// sPowell := true ;
12008: LD_ADDR_EXP 71
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// if p3 = 22 then
12016: LD_VAR 0 3
12020: PUSH
12021: LD_INT 22
12023: EQUAL
12024: IFFALSE 12034
// sTeleport := true ;
12026: LD_ADDR_EXP 74
12030: PUSH
12031: LD_INT 1
12033: ST_TO_ADDR
// if p3 = 23 then
12034: LD_VAR 0 3
12038: PUSH
12039: LD_INT 23
12041: EQUAL
12042: IFFALSE 12052
// sOilTower := true ;
12044: LD_ADDR_EXP 76
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// if p3 = 24 then
12052: LD_VAR 0 3
12056: PUSH
12057: LD_INT 24
12059: EQUAL
12060: IFFALSE 12070
// sShovel := true ;
12062: LD_ADDR_EXP 77
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// if p3 = 25 then
12070: LD_VAR 0 3
12074: PUSH
12075: LD_INT 25
12077: EQUAL
12078: IFFALSE 12088
// sSheik := true ;
12080: LD_ADDR_EXP 78
12084: PUSH
12085: LD_INT 1
12087: ST_TO_ADDR
// if p3 = 26 then
12088: LD_VAR 0 3
12092: PUSH
12093: LD_INT 26
12095: EQUAL
12096: IFFALSE 12106
// sEarthquake := true ;
12098: LD_ADDR_EXP 80
12102: PUSH
12103: LD_INT 1
12105: ST_TO_ADDR
// if p3 = 27 then
12106: LD_VAR 0 3
12110: PUSH
12111: LD_INT 27
12113: EQUAL
12114: IFFALSE 12124
// sAI := true ;
12116: LD_ADDR_EXP 81
12120: PUSH
12121: LD_INT 1
12123: ST_TO_ADDR
// if p3 = 28 then
12124: LD_VAR 0 3
12128: PUSH
12129: LD_INT 28
12131: EQUAL
12132: IFFALSE 12142
// sCargo := true ;
12134: LD_ADDR_EXP 84
12138: PUSH
12139: LD_INT 1
12141: ST_TO_ADDR
// if p3 = 29 then
12142: LD_VAR 0 3
12146: PUSH
12147: LD_INT 29
12149: EQUAL
12150: IFFALSE 12160
// sDLaser := true ;
12152: LD_ADDR_EXP 85
12156: PUSH
12157: LD_INT 1
12159: ST_TO_ADDR
// if p3 = 30 then
12160: LD_VAR 0 3
12164: PUSH
12165: LD_INT 30
12167: EQUAL
12168: IFFALSE 12178
// sExchange := true ;
12170: LD_ADDR_EXP 86
12174: PUSH
12175: LD_INT 1
12177: ST_TO_ADDR
// if p3 = 31 then
12178: LD_VAR 0 3
12182: PUSH
12183: LD_INT 31
12185: EQUAL
12186: IFFALSE 12196
// sFac := true ;
12188: LD_ADDR_EXP 87
12192: PUSH
12193: LD_INT 1
12195: ST_TO_ADDR
// if p3 = 32 then
12196: LD_VAR 0 3
12200: PUSH
12201: LD_INT 32
12203: EQUAL
12204: IFFALSE 12214
// sPower := true ;
12206: LD_ADDR_EXP 88
12210: PUSH
12211: LD_INT 1
12213: ST_TO_ADDR
// if p3 = 33 then
12214: LD_VAR 0 3
12218: PUSH
12219: LD_INT 33
12221: EQUAL
12222: IFFALSE 12232
// sRandom := true ;
12224: LD_ADDR_EXP 89
12228: PUSH
12229: LD_INT 1
12231: ST_TO_ADDR
// if p3 = 34 then
12232: LD_VAR 0 3
12236: PUSH
12237: LD_INT 34
12239: EQUAL
12240: IFFALSE 12250
// sShield := true ;
12242: LD_ADDR_EXP 90
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// if p3 = 35 then
12250: LD_VAR 0 3
12254: PUSH
12255: LD_INT 35
12257: EQUAL
12258: IFFALSE 12268
// sTime := true ;
12260: LD_ADDR_EXP 91
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// if p3 = 36 then
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 36
12275: EQUAL
12276: IFFALSE 12286
// sTools := true ;
12278: LD_ADDR_EXP 92
12282: PUSH
12283: LD_INT 1
12285: ST_TO_ADDR
// if p3 = 101 then
12286: LD_VAR 0 3
12290: PUSH
12291: LD_INT 101
12293: EQUAL
12294: IFFALSE 12304
// sSold := true ;
12296: LD_ADDR_EXP 57
12300: PUSH
12301: LD_INT 1
12303: ST_TO_ADDR
// if p3 = 102 then
12304: LD_VAR 0 3
12308: PUSH
12309: LD_INT 102
12311: EQUAL
12312: IFFALSE 12322
// sDiff := true ;
12314: LD_ADDR_EXP 58
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// if p3 = 103 then
12322: LD_VAR 0 3
12326: PUSH
12327: LD_INT 103
12329: EQUAL
12330: IFFALSE 12340
// sFog := true ;
12332: LD_ADDR_EXP 61
12336: PUSH
12337: LD_INT 1
12339: ST_TO_ADDR
// if p3 = 104 then
12340: LD_VAR 0 3
12344: PUSH
12345: LD_INT 104
12347: EQUAL
12348: IFFALSE 12358
// sReset := true ;
12350: LD_ADDR_EXP 62
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// if p3 = 105 then
12358: LD_VAR 0 3
12362: PUSH
12363: LD_INT 105
12365: EQUAL
12366: IFFALSE 12376
// sSun := true ;
12368: LD_ADDR_EXP 63
12372: PUSH
12373: LD_INT 1
12375: ST_TO_ADDR
// if p3 = 106 then
12376: LD_VAR 0 3
12380: PUSH
12381: LD_INT 106
12383: EQUAL
12384: IFFALSE 12394
// sTiger := true ;
12386: LD_ADDR_EXP 59
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// if p3 = 107 then
12394: LD_VAR 0 3
12398: PUSH
12399: LD_INT 107
12401: EQUAL
12402: IFFALSE 12412
// sBomb := true ;
12404: LD_ADDR_EXP 60
12408: PUSH
12409: LD_INT 1
12411: ST_TO_ADDR
// if p3 = 108 then
12412: LD_VAR 0 3
12416: PUSH
12417: LD_INT 108
12419: EQUAL
12420: IFFALSE 12430
// sWound := true ;
12422: LD_ADDR_EXP 68
12426: PUSH
12427: LD_INT 1
12429: ST_TO_ADDR
// if p3 = 109 then
12430: LD_VAR 0 3
12434: PUSH
12435: LD_INT 109
12437: EQUAL
12438: IFFALSE 12448
// sBetray := true ;
12440: LD_ADDR_EXP 72
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// if p3 = 110 then
12448: LD_VAR 0 3
12452: PUSH
12453: LD_INT 110
12455: EQUAL
12456: IFFALSE 12466
// sContamin := true ;
12458: LD_ADDR_EXP 73
12462: PUSH
12463: LD_INT 1
12465: ST_TO_ADDR
// if p3 = 111 then
12466: LD_VAR 0 3
12470: PUSH
12471: LD_INT 111
12473: EQUAL
12474: IFFALSE 12484
// sOil := true ;
12476: LD_ADDR_EXP 75
12480: PUSH
12481: LD_INT 1
12483: ST_TO_ADDR
// if p3 = 112 then
12484: LD_VAR 0 3
12488: PUSH
12489: LD_INT 112
12491: EQUAL
12492: IFFALSE 12502
// sStu := true ;
12494: LD_ADDR_EXP 79
12498: PUSH
12499: LD_INT 1
12501: ST_TO_ADDR
// if p3 = 113 then
12502: LD_VAR 0 3
12506: PUSH
12507: LD_INT 113
12509: EQUAL
12510: IFFALSE 12520
// sBazooka := true ;
12512: LD_ADDR_EXP 82
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// if p3 = 114 then
12520: LD_VAR 0 3
12524: PUSH
12525: LD_INT 114
12527: EQUAL
12528: IFFALSE 12538
// sMortar := true ;
12530: LD_ADDR_EXP 83
12534: PUSH
12535: LD_INT 1
12537: ST_TO_ADDR
// if p3 = 115 then
12538: LD_VAR 0 3
12542: PUSH
12543: LD_INT 115
12545: EQUAL
12546: IFFALSE 12556
// sRanger := true ;
12548: LD_ADDR_EXP 93
12552: PUSH
12553: LD_INT 1
12555: ST_TO_ADDR
// if p3 = 116 then
12556: LD_VAR 0 3
12560: PUSH
12561: LD_INT 116
12563: EQUAL
12564: IFFALSE 12574
// sComputer := true ;
12566: LD_ADDR_EXP 94
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// if p3 = 117 then
12574: LD_VAR 0 3
12578: PUSH
12579: LD_INT 117
12581: EQUAL
12582: IFFALSE 12592
// s30 := true ;
12584: LD_ADDR_EXP 95
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// if p3 = 118 then
12592: LD_VAR 0 3
12596: PUSH
12597: LD_INT 118
12599: EQUAL
12600: IFFALSE 12610
// s60 := true ;
12602: LD_ADDR_EXP 96
12606: PUSH
12607: LD_INT 1
12609: ST_TO_ADDR
// end ; if p2 = 101 then
12610: LD_VAR 0 2
12614: PUSH
12615: LD_INT 101
12617: EQUAL
12618: IFFALSE 12746
// begin case p3 of 1 :
12620: LD_VAR 0 3
12624: PUSH
12625: LD_INT 1
12627: DOUBLE
12628: EQUAL
12629: IFTRUE 12633
12631: GO 12640
12633: POP
// hHackUnlimitedResources ; 2 :
12634: CALL 24342 0 0
12638: GO 12746
12640: LD_INT 2
12642: DOUBLE
12643: EQUAL
12644: IFTRUE 12648
12646: GO 12655
12648: POP
// hHackSetLevel10 ; 3 :
12649: CALL 24475 0 0
12653: GO 12746
12655: LD_INT 3
12657: DOUBLE
12658: EQUAL
12659: IFTRUE 12663
12661: GO 12670
12663: POP
// hHackSetLevel10YourUnits ; 4 :
12664: CALL 24560 0 0
12668: GO 12746
12670: LD_INT 4
12672: DOUBLE
12673: EQUAL
12674: IFTRUE 12678
12676: GO 12685
12678: POP
// hHackInvincible ; 5 :
12679: CALL 25008 0 0
12683: GO 12746
12685: LD_INT 5
12687: DOUBLE
12688: EQUAL
12689: IFTRUE 12693
12691: GO 12700
12693: POP
// hHackInvisible ; 6 :
12694: CALL 25119 0 0
12698: GO 12746
12700: LD_INT 6
12702: DOUBLE
12703: EQUAL
12704: IFTRUE 12708
12706: GO 12715
12708: POP
// hHackChangeYourSide ; 7 :
12709: CALL 25176 0 0
12713: GO 12746
12715: LD_INT 7
12717: DOUBLE
12718: EQUAL
12719: IFTRUE 12723
12721: GO 12730
12723: POP
// hHackChangeUnitSide ; 8 :
12724: CALL 25218 0 0
12728: GO 12746
12730: LD_INT 8
12732: DOUBLE
12733: EQUAL
12734: IFTRUE 12738
12736: GO 12745
12738: POP
// hHackFog ; end ;
12739: CALL 25319 0 0
12743: GO 12746
12745: POP
// end ; end ;
12746: LD_VAR 0 7
12750: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12751: GO 12753
12753: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12754: LD_STRING initStreamRollete();
12756: PPUSH
12757: CALL_OW 559
// InitStreamMode ;
12761: CALL 12770 0 0
// DefineStreamItems ( ) ;
12765: CALL 13234 0 0
// end ;
12769: END
// function InitStreamMode ; begin
12770: LD_INT 0
12772: PPUSH
// streamModeActive := false ;
12773: LD_ADDR_EXP 40
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// normalCounter := 36 ;
12781: LD_ADDR_EXP 41
12785: PUSH
12786: LD_INT 36
12788: ST_TO_ADDR
// hardcoreCounter := 16 ;
12789: LD_ADDR_EXP 42
12793: PUSH
12794: LD_INT 16
12796: ST_TO_ADDR
// sRocket := false ;
12797: LD_ADDR_EXP 45
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// sSpeed := false ;
12805: LD_ADDR_EXP 44
12809: PUSH
12810: LD_INT 0
12812: ST_TO_ADDR
// sEngine := false ;
12813: LD_ADDR_EXP 46
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// sSpec := false ;
12821: LD_ADDR_EXP 43
12825: PUSH
12826: LD_INT 0
12828: ST_TO_ADDR
// sLevel := false ;
12829: LD_ADDR_EXP 47
12833: PUSH
12834: LD_INT 0
12836: ST_TO_ADDR
// sArmoury := false ;
12837: LD_ADDR_EXP 48
12841: PUSH
12842: LD_INT 0
12844: ST_TO_ADDR
// sRadar := false ;
12845: LD_ADDR_EXP 49
12849: PUSH
12850: LD_INT 0
12852: ST_TO_ADDR
// sBunker := false ;
12853: LD_ADDR_EXP 50
12857: PUSH
12858: LD_INT 0
12860: ST_TO_ADDR
// sHack := false ;
12861: LD_ADDR_EXP 51
12865: PUSH
12866: LD_INT 0
12868: ST_TO_ADDR
// sFire := false ;
12869: LD_ADDR_EXP 52
12873: PUSH
12874: LD_INT 0
12876: ST_TO_ADDR
// sRefresh := false ;
12877: LD_ADDR_EXP 53
12881: PUSH
12882: LD_INT 0
12884: ST_TO_ADDR
// sExp := false ;
12885: LD_ADDR_EXP 54
12889: PUSH
12890: LD_INT 0
12892: ST_TO_ADDR
// sDepot := false ;
12893: LD_ADDR_EXP 55
12897: PUSH
12898: LD_INT 0
12900: ST_TO_ADDR
// sFlag := false ;
12901: LD_ADDR_EXP 56
12905: PUSH
12906: LD_INT 0
12908: ST_TO_ADDR
// sKamikadze := false ;
12909: LD_ADDR_EXP 64
12913: PUSH
12914: LD_INT 0
12916: ST_TO_ADDR
// sTroll := false ;
12917: LD_ADDR_EXP 65
12921: PUSH
12922: LD_INT 0
12924: ST_TO_ADDR
// sSlow := false ;
12925: LD_ADDR_EXP 66
12929: PUSH
12930: LD_INT 0
12932: ST_TO_ADDR
// sLack := false ;
12933: LD_ADDR_EXP 67
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// sTank := false ;
12941: LD_ADDR_EXP 69
12945: PUSH
12946: LD_INT 0
12948: ST_TO_ADDR
// sRemote := false ;
12949: LD_ADDR_EXP 70
12953: PUSH
12954: LD_INT 0
12956: ST_TO_ADDR
// sPowell := false ;
12957: LD_ADDR_EXP 71
12961: PUSH
12962: LD_INT 0
12964: ST_TO_ADDR
// sTeleport := false ;
12965: LD_ADDR_EXP 74
12969: PUSH
12970: LD_INT 0
12972: ST_TO_ADDR
// sOilTower := false ;
12973: LD_ADDR_EXP 76
12977: PUSH
12978: LD_INT 0
12980: ST_TO_ADDR
// sShovel := false ;
12981: LD_ADDR_EXP 77
12985: PUSH
12986: LD_INT 0
12988: ST_TO_ADDR
// sSheik := false ;
12989: LD_ADDR_EXP 78
12993: PUSH
12994: LD_INT 0
12996: ST_TO_ADDR
// sEarthquake := false ;
12997: LD_ADDR_EXP 80
13001: PUSH
13002: LD_INT 0
13004: ST_TO_ADDR
// sAI := false ;
13005: LD_ADDR_EXP 81
13009: PUSH
13010: LD_INT 0
13012: ST_TO_ADDR
// sCargo := false ;
13013: LD_ADDR_EXP 84
13017: PUSH
13018: LD_INT 0
13020: ST_TO_ADDR
// sDLaser := false ;
13021: LD_ADDR_EXP 85
13025: PUSH
13026: LD_INT 0
13028: ST_TO_ADDR
// sExchange := false ;
13029: LD_ADDR_EXP 86
13033: PUSH
13034: LD_INT 0
13036: ST_TO_ADDR
// sFac := false ;
13037: LD_ADDR_EXP 87
13041: PUSH
13042: LD_INT 0
13044: ST_TO_ADDR
// sPower := false ;
13045: LD_ADDR_EXP 88
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// sRandom := false ;
13053: LD_ADDR_EXP 89
13057: PUSH
13058: LD_INT 0
13060: ST_TO_ADDR
// sShield := false ;
13061: LD_ADDR_EXP 90
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// sTime := false ;
13069: LD_ADDR_EXP 91
13073: PUSH
13074: LD_INT 0
13076: ST_TO_ADDR
// sTools := false ;
13077: LD_ADDR_EXP 92
13081: PUSH
13082: LD_INT 0
13084: ST_TO_ADDR
// sSold := false ;
13085: LD_ADDR_EXP 57
13089: PUSH
13090: LD_INT 0
13092: ST_TO_ADDR
// sDiff := false ;
13093: LD_ADDR_EXP 58
13097: PUSH
13098: LD_INT 0
13100: ST_TO_ADDR
// sFog := false ;
13101: LD_ADDR_EXP 61
13105: PUSH
13106: LD_INT 0
13108: ST_TO_ADDR
// sReset := false ;
13109: LD_ADDR_EXP 62
13113: PUSH
13114: LD_INT 0
13116: ST_TO_ADDR
// sSun := false ;
13117: LD_ADDR_EXP 63
13121: PUSH
13122: LD_INT 0
13124: ST_TO_ADDR
// sTiger := false ;
13125: LD_ADDR_EXP 59
13129: PUSH
13130: LD_INT 0
13132: ST_TO_ADDR
// sBomb := false ;
13133: LD_ADDR_EXP 60
13137: PUSH
13138: LD_INT 0
13140: ST_TO_ADDR
// sWound := false ;
13141: LD_ADDR_EXP 68
13145: PUSH
13146: LD_INT 0
13148: ST_TO_ADDR
// sBetray := false ;
13149: LD_ADDR_EXP 72
13153: PUSH
13154: LD_INT 0
13156: ST_TO_ADDR
// sContamin := false ;
13157: LD_ADDR_EXP 73
13161: PUSH
13162: LD_INT 0
13164: ST_TO_ADDR
// sOil := false ;
13165: LD_ADDR_EXP 75
13169: PUSH
13170: LD_INT 0
13172: ST_TO_ADDR
// sStu := false ;
13173: LD_ADDR_EXP 79
13177: PUSH
13178: LD_INT 0
13180: ST_TO_ADDR
// sBazooka := false ;
13181: LD_ADDR_EXP 82
13185: PUSH
13186: LD_INT 0
13188: ST_TO_ADDR
// sMortar := false ;
13189: LD_ADDR_EXP 83
13193: PUSH
13194: LD_INT 0
13196: ST_TO_ADDR
// sRanger := false ;
13197: LD_ADDR_EXP 93
13201: PUSH
13202: LD_INT 0
13204: ST_TO_ADDR
// sComputer := false ;
13205: LD_ADDR_EXP 94
13209: PUSH
13210: LD_INT 0
13212: ST_TO_ADDR
// s30 := false ;
13213: LD_ADDR_EXP 95
13217: PUSH
13218: LD_INT 0
13220: ST_TO_ADDR
// s60 := false ;
13221: LD_ADDR_EXP 96
13225: PUSH
13226: LD_INT 0
13228: ST_TO_ADDR
// end ;
13229: LD_VAR 0 1
13233: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13234: LD_INT 0
13236: PPUSH
13237: PPUSH
13238: PPUSH
13239: PPUSH
13240: PPUSH
// result := [ ] ;
13241: LD_ADDR_VAR 0 1
13245: PUSH
13246: EMPTY
13247: ST_TO_ADDR
// if campaign_id = 1 then
13248: LD_OWVAR 69
13252: PUSH
13253: LD_INT 1
13255: EQUAL
13256: IFFALSE 16422
// begin case mission_number of 1 :
13258: LD_OWVAR 70
13262: PUSH
13263: LD_INT 1
13265: DOUBLE
13266: EQUAL
13267: IFTRUE 13271
13269: GO 13347
13271: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13272: LD_ADDR_VAR 0 1
13276: PUSH
13277: LD_INT 2
13279: PUSH
13280: LD_INT 4
13282: PUSH
13283: LD_INT 11
13285: PUSH
13286: LD_INT 12
13288: PUSH
13289: LD_INT 15
13291: PUSH
13292: LD_INT 16
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_INT 23
13300: PUSH
13301: LD_INT 26
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 101
13317: PUSH
13318: LD_INT 102
13320: PUSH
13321: LD_INT 106
13323: PUSH
13324: LD_INT 116
13326: PUSH
13327: LD_INT 117
13329: PUSH
13330: LD_INT 118
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: ST_TO_ADDR
13345: GO 16420
13347: LD_INT 2
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13355
13353: GO 13439
13355: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13356: LD_ADDR_VAR 0 1
13360: PUSH
13361: LD_INT 2
13363: PUSH
13364: LD_INT 4
13366: PUSH
13367: LD_INT 11
13369: PUSH
13370: LD_INT 12
13372: PUSH
13373: LD_INT 15
13375: PUSH
13376: LD_INT 16
13378: PUSH
13379: LD_INT 22
13381: PUSH
13382: LD_INT 23
13384: PUSH
13385: LD_INT 26
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 101
13401: PUSH
13402: LD_INT 102
13404: PUSH
13405: LD_INT 105
13407: PUSH
13408: LD_INT 106
13410: PUSH
13411: LD_INT 108
13413: PUSH
13414: LD_INT 116
13416: PUSH
13417: LD_INT 117
13419: PUSH
13420: LD_INT 118
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: ST_TO_ADDR
13437: GO 16420
13439: LD_INT 3
13441: DOUBLE
13442: EQUAL
13443: IFTRUE 13447
13445: GO 13535
13447: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13448: LD_ADDR_VAR 0 1
13452: PUSH
13453: LD_INT 2
13455: PUSH
13456: LD_INT 4
13458: PUSH
13459: LD_INT 5
13461: PUSH
13462: LD_INT 11
13464: PUSH
13465: LD_INT 12
13467: PUSH
13468: LD_INT 15
13470: PUSH
13471: LD_INT 16
13473: PUSH
13474: LD_INT 22
13476: PUSH
13477: LD_INT 26
13479: PUSH
13480: LD_INT 36
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 101
13497: PUSH
13498: LD_INT 102
13500: PUSH
13501: LD_INT 105
13503: PUSH
13504: LD_INT 106
13506: PUSH
13507: LD_INT 108
13509: PUSH
13510: LD_INT 116
13512: PUSH
13513: LD_INT 117
13515: PUSH
13516: LD_INT 118
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: ST_TO_ADDR
13533: GO 16420
13535: LD_INT 4
13537: DOUBLE
13538: EQUAL
13539: IFTRUE 13543
13541: GO 13639
13543: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13544: LD_ADDR_VAR 0 1
13548: PUSH
13549: LD_INT 2
13551: PUSH
13552: LD_INT 4
13554: PUSH
13555: LD_INT 5
13557: PUSH
13558: LD_INT 8
13560: PUSH
13561: LD_INT 11
13563: PUSH
13564: LD_INT 12
13566: PUSH
13567: LD_INT 15
13569: PUSH
13570: LD_INT 16
13572: PUSH
13573: LD_INT 22
13575: PUSH
13576: LD_INT 23
13578: PUSH
13579: LD_INT 26
13581: PUSH
13582: LD_INT 36
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 101
13601: PUSH
13602: LD_INT 102
13604: PUSH
13605: LD_INT 105
13607: PUSH
13608: LD_INT 106
13610: PUSH
13611: LD_INT 108
13613: PUSH
13614: LD_INT 116
13616: PUSH
13617: LD_INT 117
13619: PUSH
13620: LD_INT 118
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: ST_TO_ADDR
13637: GO 16420
13639: LD_INT 5
13641: DOUBLE
13642: EQUAL
13643: IFTRUE 13647
13645: GO 13759
13647: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13648: LD_ADDR_VAR 0 1
13652: PUSH
13653: LD_INT 2
13655: PUSH
13656: LD_INT 4
13658: PUSH
13659: LD_INT 5
13661: PUSH
13662: LD_INT 6
13664: PUSH
13665: LD_INT 8
13667: PUSH
13668: LD_INT 11
13670: PUSH
13671: LD_INT 12
13673: PUSH
13674: LD_INT 15
13676: PUSH
13677: LD_INT 16
13679: PUSH
13680: LD_INT 22
13682: PUSH
13683: LD_INT 23
13685: PUSH
13686: LD_INT 25
13688: PUSH
13689: LD_INT 26
13691: PUSH
13692: LD_INT 36
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 101
13713: PUSH
13714: LD_INT 102
13716: PUSH
13717: LD_INT 105
13719: PUSH
13720: LD_INT 106
13722: PUSH
13723: LD_INT 108
13725: PUSH
13726: LD_INT 109
13728: PUSH
13729: LD_INT 112
13731: PUSH
13732: LD_INT 116
13734: PUSH
13735: LD_INT 117
13737: PUSH
13738: LD_INT 118
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: ST_TO_ADDR
13757: GO 16420
13759: LD_INT 6
13761: DOUBLE
13762: EQUAL
13763: IFTRUE 13767
13765: GO 13899
13767: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13768: LD_ADDR_VAR 0 1
13772: PUSH
13773: LD_INT 2
13775: PUSH
13776: LD_INT 4
13778: PUSH
13779: LD_INT 5
13781: PUSH
13782: LD_INT 6
13784: PUSH
13785: LD_INT 8
13787: PUSH
13788: LD_INT 11
13790: PUSH
13791: LD_INT 12
13793: PUSH
13794: LD_INT 15
13796: PUSH
13797: LD_INT 16
13799: PUSH
13800: LD_INT 20
13802: PUSH
13803: LD_INT 21
13805: PUSH
13806: LD_INT 22
13808: PUSH
13809: LD_INT 23
13811: PUSH
13812: LD_INT 25
13814: PUSH
13815: LD_INT 26
13817: PUSH
13818: LD_INT 30
13820: PUSH
13821: LD_INT 31
13823: PUSH
13824: LD_INT 32
13826: PUSH
13827: LD_INT 36
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 101
13853: PUSH
13854: LD_INT 102
13856: PUSH
13857: LD_INT 105
13859: PUSH
13860: LD_INT 106
13862: PUSH
13863: LD_INT 108
13865: PUSH
13866: LD_INT 109
13868: PUSH
13869: LD_INT 112
13871: PUSH
13872: LD_INT 116
13874: PUSH
13875: LD_INT 117
13877: PUSH
13878: LD_INT 118
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: ST_TO_ADDR
13897: GO 16420
13899: LD_INT 7
13901: DOUBLE
13902: EQUAL
13903: IFTRUE 13907
13905: GO 14019
13907: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13908: LD_ADDR_VAR 0 1
13912: PUSH
13913: LD_INT 2
13915: PUSH
13916: LD_INT 4
13918: PUSH
13919: LD_INT 5
13921: PUSH
13922: LD_INT 7
13924: PUSH
13925: LD_INT 11
13927: PUSH
13928: LD_INT 12
13930: PUSH
13931: LD_INT 15
13933: PUSH
13934: LD_INT 16
13936: PUSH
13937: LD_INT 20
13939: PUSH
13940: LD_INT 21
13942: PUSH
13943: LD_INT 22
13945: PUSH
13946: LD_INT 23
13948: PUSH
13949: LD_INT 25
13951: PUSH
13952: LD_INT 26
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 101
13973: PUSH
13974: LD_INT 102
13976: PUSH
13977: LD_INT 103
13979: PUSH
13980: LD_INT 105
13982: PUSH
13983: LD_INT 106
13985: PUSH
13986: LD_INT 108
13988: PUSH
13989: LD_INT 112
13991: PUSH
13992: LD_INT 116
13994: PUSH
13995: LD_INT 117
13997: PUSH
13998: LD_INT 118
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: ST_TO_ADDR
14017: GO 16420
14019: LD_INT 8
14021: DOUBLE
14022: EQUAL
14023: IFTRUE 14027
14025: GO 14167
14027: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14028: LD_ADDR_VAR 0 1
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: LD_INT 4
14038: PUSH
14039: LD_INT 5
14041: PUSH
14042: LD_INT 6
14044: PUSH
14045: LD_INT 7
14047: PUSH
14048: LD_INT 8
14050: PUSH
14051: LD_INT 11
14053: PUSH
14054: LD_INT 12
14056: PUSH
14057: LD_INT 15
14059: PUSH
14060: LD_INT 16
14062: PUSH
14063: LD_INT 20
14065: PUSH
14066: LD_INT 21
14068: PUSH
14069: LD_INT 22
14071: PUSH
14072: LD_INT 23
14074: PUSH
14075: LD_INT 25
14077: PUSH
14078: LD_INT 26
14080: PUSH
14081: LD_INT 30
14083: PUSH
14084: LD_INT 31
14086: PUSH
14087: LD_INT 32
14089: PUSH
14090: LD_INT 36
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 101
14117: PUSH
14118: LD_INT 102
14120: PUSH
14121: LD_INT 103
14123: PUSH
14124: LD_INT 105
14126: PUSH
14127: LD_INT 106
14129: PUSH
14130: LD_INT 108
14132: PUSH
14133: LD_INT 109
14135: PUSH
14136: LD_INT 112
14138: PUSH
14139: LD_INT 116
14141: PUSH
14142: LD_INT 117
14144: PUSH
14145: LD_INT 118
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: ST_TO_ADDR
14165: GO 16420
14167: LD_INT 9
14169: DOUBLE
14170: EQUAL
14171: IFTRUE 14175
14173: GO 14323
14175: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14176: LD_ADDR_VAR 0 1
14180: PUSH
14181: LD_INT 2
14183: PUSH
14184: LD_INT 4
14186: PUSH
14187: LD_INT 5
14189: PUSH
14190: LD_INT 6
14192: PUSH
14193: LD_INT 7
14195: PUSH
14196: LD_INT 8
14198: PUSH
14199: LD_INT 11
14201: PUSH
14202: LD_INT 12
14204: PUSH
14205: LD_INT 15
14207: PUSH
14208: LD_INT 16
14210: PUSH
14211: LD_INT 20
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 22
14219: PUSH
14220: LD_INT 23
14222: PUSH
14223: LD_INT 25
14225: PUSH
14226: LD_INT 26
14228: PUSH
14229: LD_INT 28
14231: PUSH
14232: LD_INT 30
14234: PUSH
14235: LD_INT 31
14237: PUSH
14238: LD_INT 32
14240: PUSH
14241: LD_INT 36
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 101
14269: PUSH
14270: LD_INT 102
14272: PUSH
14273: LD_INT 103
14275: PUSH
14276: LD_INT 105
14278: PUSH
14279: LD_INT 106
14281: PUSH
14282: LD_INT 108
14284: PUSH
14285: LD_INT 109
14287: PUSH
14288: LD_INT 112
14290: PUSH
14291: LD_INT 114
14293: PUSH
14294: LD_INT 116
14296: PUSH
14297: LD_INT 117
14299: PUSH
14300: LD_INT 118
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: ST_TO_ADDR
14321: GO 16420
14323: LD_INT 10
14325: DOUBLE
14326: EQUAL
14327: IFTRUE 14331
14329: GO 14527
14331: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14332: LD_ADDR_VAR 0 1
14336: PUSH
14337: LD_INT 2
14339: PUSH
14340: LD_INT 4
14342: PUSH
14343: LD_INT 5
14345: PUSH
14346: LD_INT 6
14348: PUSH
14349: LD_INT 7
14351: PUSH
14352: LD_INT 8
14354: PUSH
14355: LD_INT 9
14357: PUSH
14358: LD_INT 10
14360: PUSH
14361: LD_INT 11
14363: PUSH
14364: LD_INT 12
14366: PUSH
14367: LD_INT 13
14369: PUSH
14370: LD_INT 14
14372: PUSH
14373: LD_INT 15
14375: PUSH
14376: LD_INT 16
14378: PUSH
14379: LD_INT 17
14381: PUSH
14382: LD_INT 18
14384: PUSH
14385: LD_INT 19
14387: PUSH
14388: LD_INT 20
14390: PUSH
14391: LD_INT 21
14393: PUSH
14394: LD_INT 22
14396: PUSH
14397: LD_INT 23
14399: PUSH
14400: LD_INT 24
14402: PUSH
14403: LD_INT 25
14405: PUSH
14406: LD_INT 26
14408: PUSH
14409: LD_INT 28
14411: PUSH
14412: LD_INT 30
14414: PUSH
14415: LD_INT 31
14417: PUSH
14418: LD_INT 32
14420: PUSH
14421: LD_INT 36
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 101
14457: PUSH
14458: LD_INT 102
14460: PUSH
14461: LD_INT 103
14463: PUSH
14464: LD_INT 104
14466: PUSH
14467: LD_INT 105
14469: PUSH
14470: LD_INT 106
14472: PUSH
14473: LD_INT 107
14475: PUSH
14476: LD_INT 108
14478: PUSH
14479: LD_INT 109
14481: PUSH
14482: LD_INT 110
14484: PUSH
14485: LD_INT 111
14487: PUSH
14488: LD_INT 112
14490: PUSH
14491: LD_INT 114
14493: PUSH
14494: LD_INT 116
14496: PUSH
14497: LD_INT 117
14499: PUSH
14500: LD_INT 118
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: ST_TO_ADDR
14525: GO 16420
14527: LD_INT 11
14529: DOUBLE
14530: EQUAL
14531: IFTRUE 14535
14533: GO 14739
14535: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14536: LD_ADDR_VAR 0 1
14540: PUSH
14541: LD_INT 2
14543: PUSH
14544: LD_INT 3
14546: PUSH
14547: LD_INT 4
14549: PUSH
14550: LD_INT 5
14552: PUSH
14553: LD_INT 6
14555: PUSH
14556: LD_INT 7
14558: PUSH
14559: LD_INT 8
14561: PUSH
14562: LD_INT 9
14564: PUSH
14565: LD_INT 10
14567: PUSH
14568: LD_INT 11
14570: PUSH
14571: LD_INT 12
14573: PUSH
14574: LD_INT 13
14576: PUSH
14577: LD_INT 14
14579: PUSH
14580: LD_INT 15
14582: PUSH
14583: LD_INT 16
14585: PUSH
14586: LD_INT 17
14588: PUSH
14589: LD_INT 18
14591: PUSH
14592: LD_INT 19
14594: PUSH
14595: LD_INT 20
14597: PUSH
14598: LD_INT 21
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_INT 23
14606: PUSH
14607: LD_INT 24
14609: PUSH
14610: LD_INT 25
14612: PUSH
14613: LD_INT 26
14615: PUSH
14616: LD_INT 28
14618: PUSH
14619: LD_INT 30
14621: PUSH
14622: LD_INT 31
14624: PUSH
14625: LD_INT 32
14627: PUSH
14628: LD_INT 34
14630: PUSH
14631: LD_INT 36
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 101
14669: PUSH
14670: LD_INT 102
14672: PUSH
14673: LD_INT 103
14675: PUSH
14676: LD_INT 104
14678: PUSH
14679: LD_INT 105
14681: PUSH
14682: LD_INT 106
14684: PUSH
14685: LD_INT 107
14687: PUSH
14688: LD_INT 108
14690: PUSH
14691: LD_INT 109
14693: PUSH
14694: LD_INT 110
14696: PUSH
14697: LD_INT 111
14699: PUSH
14700: LD_INT 112
14702: PUSH
14703: LD_INT 114
14705: PUSH
14706: LD_INT 116
14708: PUSH
14709: LD_INT 117
14711: PUSH
14712: LD_INT 118
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: ST_TO_ADDR
14737: GO 16420
14739: LD_INT 12
14741: DOUBLE
14742: EQUAL
14743: IFTRUE 14747
14745: GO 14967
14747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14748: LD_ADDR_VAR 0 1
14752: PUSH
14753: LD_INT 1
14755: PUSH
14756: LD_INT 2
14758: PUSH
14759: LD_INT 3
14761: PUSH
14762: LD_INT 4
14764: PUSH
14765: LD_INT 5
14767: PUSH
14768: LD_INT 6
14770: PUSH
14771: LD_INT 7
14773: PUSH
14774: LD_INT 8
14776: PUSH
14777: LD_INT 9
14779: PUSH
14780: LD_INT 10
14782: PUSH
14783: LD_INT 11
14785: PUSH
14786: LD_INT 12
14788: PUSH
14789: LD_INT 13
14791: PUSH
14792: LD_INT 14
14794: PUSH
14795: LD_INT 15
14797: PUSH
14798: LD_INT 16
14800: PUSH
14801: LD_INT 17
14803: PUSH
14804: LD_INT 18
14806: PUSH
14807: LD_INT 19
14809: PUSH
14810: LD_INT 20
14812: PUSH
14813: LD_INT 21
14815: PUSH
14816: LD_INT 22
14818: PUSH
14819: LD_INT 23
14821: PUSH
14822: LD_INT 24
14824: PUSH
14825: LD_INT 25
14827: PUSH
14828: LD_INT 26
14830: PUSH
14831: LD_INT 27
14833: PUSH
14834: LD_INT 28
14836: PUSH
14837: LD_INT 30
14839: PUSH
14840: LD_INT 31
14842: PUSH
14843: LD_INT 32
14845: PUSH
14846: LD_INT 33
14848: PUSH
14849: LD_INT 34
14851: PUSH
14852: LD_INT 36
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 101
14893: PUSH
14894: LD_INT 102
14896: PUSH
14897: LD_INT 103
14899: PUSH
14900: LD_INT 104
14902: PUSH
14903: LD_INT 105
14905: PUSH
14906: LD_INT 106
14908: PUSH
14909: LD_INT 107
14911: PUSH
14912: LD_INT 108
14914: PUSH
14915: LD_INT 109
14917: PUSH
14918: LD_INT 110
14920: PUSH
14921: LD_INT 111
14923: PUSH
14924: LD_INT 112
14926: PUSH
14927: LD_INT 113
14929: PUSH
14930: LD_INT 114
14932: PUSH
14933: LD_INT 116
14935: PUSH
14936: LD_INT 117
14938: PUSH
14939: LD_INT 118
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: ST_TO_ADDR
14965: GO 16420
14967: LD_INT 13
14969: DOUBLE
14970: EQUAL
14971: IFTRUE 14975
14973: GO 15183
14975: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: LD_INT 2
14986: PUSH
14987: LD_INT 3
14989: PUSH
14990: LD_INT 4
14992: PUSH
14993: LD_INT 5
14995: PUSH
14996: LD_INT 8
14998: PUSH
14999: LD_INT 9
15001: PUSH
15002: LD_INT 10
15004: PUSH
15005: LD_INT 11
15007: PUSH
15008: LD_INT 12
15010: PUSH
15011: LD_INT 14
15013: PUSH
15014: LD_INT 15
15016: PUSH
15017: LD_INT 16
15019: PUSH
15020: LD_INT 17
15022: PUSH
15023: LD_INT 18
15025: PUSH
15026: LD_INT 19
15028: PUSH
15029: LD_INT 20
15031: PUSH
15032: LD_INT 21
15034: PUSH
15035: LD_INT 22
15037: PUSH
15038: LD_INT 23
15040: PUSH
15041: LD_INT 24
15043: PUSH
15044: LD_INT 25
15046: PUSH
15047: LD_INT 26
15049: PUSH
15050: LD_INT 27
15052: PUSH
15053: LD_INT 28
15055: PUSH
15056: LD_INT 30
15058: PUSH
15059: LD_INT 31
15061: PUSH
15062: LD_INT 32
15064: PUSH
15065: LD_INT 33
15067: PUSH
15068: LD_INT 34
15070: PUSH
15071: LD_INT 36
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 101
15109: PUSH
15110: LD_INT 102
15112: PUSH
15113: LD_INT 103
15115: PUSH
15116: LD_INT 104
15118: PUSH
15119: LD_INT 105
15121: PUSH
15122: LD_INT 106
15124: PUSH
15125: LD_INT 107
15127: PUSH
15128: LD_INT 108
15130: PUSH
15131: LD_INT 109
15133: PUSH
15134: LD_INT 110
15136: PUSH
15137: LD_INT 111
15139: PUSH
15140: LD_INT 112
15142: PUSH
15143: LD_INT 113
15145: PUSH
15146: LD_INT 114
15148: PUSH
15149: LD_INT 116
15151: PUSH
15152: LD_INT 117
15154: PUSH
15155: LD_INT 118
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: ST_TO_ADDR
15181: GO 16420
15183: LD_INT 14
15185: DOUBLE
15186: EQUAL
15187: IFTRUE 15191
15189: GO 15415
15191: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: LD_INT 2
15202: PUSH
15203: LD_INT 3
15205: PUSH
15206: LD_INT 4
15208: PUSH
15209: LD_INT 5
15211: PUSH
15212: LD_INT 6
15214: PUSH
15215: LD_INT 7
15217: PUSH
15218: LD_INT 8
15220: PUSH
15221: LD_INT 9
15223: PUSH
15224: LD_INT 10
15226: PUSH
15227: LD_INT 11
15229: PUSH
15230: LD_INT 12
15232: PUSH
15233: LD_INT 13
15235: PUSH
15236: LD_INT 14
15238: PUSH
15239: LD_INT 15
15241: PUSH
15242: LD_INT 16
15244: PUSH
15245: LD_INT 17
15247: PUSH
15248: LD_INT 18
15250: PUSH
15251: LD_INT 19
15253: PUSH
15254: LD_INT 20
15256: PUSH
15257: LD_INT 21
15259: PUSH
15260: LD_INT 22
15262: PUSH
15263: LD_INT 23
15265: PUSH
15266: LD_INT 24
15268: PUSH
15269: LD_INT 25
15271: PUSH
15272: LD_INT 26
15274: PUSH
15275: LD_INT 27
15277: PUSH
15278: LD_INT 28
15280: PUSH
15281: LD_INT 29
15283: PUSH
15284: LD_INT 30
15286: PUSH
15287: LD_INT 31
15289: PUSH
15290: LD_INT 32
15292: PUSH
15293: LD_INT 33
15295: PUSH
15296: LD_INT 34
15298: PUSH
15299: LD_INT 36
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 101
15341: PUSH
15342: LD_INT 102
15344: PUSH
15345: LD_INT 103
15347: PUSH
15348: LD_INT 104
15350: PUSH
15351: LD_INT 105
15353: PUSH
15354: LD_INT 106
15356: PUSH
15357: LD_INT 107
15359: PUSH
15360: LD_INT 108
15362: PUSH
15363: LD_INT 109
15365: PUSH
15366: LD_INT 110
15368: PUSH
15369: LD_INT 111
15371: PUSH
15372: LD_INT 112
15374: PUSH
15375: LD_INT 113
15377: PUSH
15378: LD_INT 114
15380: PUSH
15381: LD_INT 116
15383: PUSH
15384: LD_INT 117
15386: PUSH
15387: LD_INT 118
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: ST_TO_ADDR
15413: GO 16420
15415: LD_INT 15
15417: DOUBLE
15418: EQUAL
15419: IFTRUE 15423
15421: GO 15647
15423: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15424: LD_ADDR_VAR 0 1
15428: PUSH
15429: LD_INT 1
15431: PUSH
15432: LD_INT 2
15434: PUSH
15435: LD_INT 3
15437: PUSH
15438: LD_INT 4
15440: PUSH
15441: LD_INT 5
15443: PUSH
15444: LD_INT 6
15446: PUSH
15447: LD_INT 7
15449: PUSH
15450: LD_INT 8
15452: PUSH
15453: LD_INT 9
15455: PUSH
15456: LD_INT 10
15458: PUSH
15459: LD_INT 11
15461: PUSH
15462: LD_INT 12
15464: PUSH
15465: LD_INT 13
15467: PUSH
15468: LD_INT 14
15470: PUSH
15471: LD_INT 15
15473: PUSH
15474: LD_INT 16
15476: PUSH
15477: LD_INT 17
15479: PUSH
15480: LD_INT 18
15482: PUSH
15483: LD_INT 19
15485: PUSH
15486: LD_INT 20
15488: PUSH
15489: LD_INT 21
15491: PUSH
15492: LD_INT 22
15494: PUSH
15495: LD_INT 23
15497: PUSH
15498: LD_INT 24
15500: PUSH
15501: LD_INT 25
15503: PUSH
15504: LD_INT 26
15506: PUSH
15507: LD_INT 27
15509: PUSH
15510: LD_INT 28
15512: PUSH
15513: LD_INT 29
15515: PUSH
15516: LD_INT 30
15518: PUSH
15519: LD_INT 31
15521: PUSH
15522: LD_INT 32
15524: PUSH
15525: LD_INT 33
15527: PUSH
15528: LD_INT 34
15530: PUSH
15531: LD_INT 36
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 101
15573: PUSH
15574: LD_INT 102
15576: PUSH
15577: LD_INT 103
15579: PUSH
15580: LD_INT 104
15582: PUSH
15583: LD_INT 105
15585: PUSH
15586: LD_INT 106
15588: PUSH
15589: LD_INT 107
15591: PUSH
15592: LD_INT 108
15594: PUSH
15595: LD_INT 109
15597: PUSH
15598: LD_INT 110
15600: PUSH
15601: LD_INT 111
15603: PUSH
15604: LD_INT 112
15606: PUSH
15607: LD_INT 113
15609: PUSH
15610: LD_INT 114
15612: PUSH
15613: LD_INT 116
15615: PUSH
15616: LD_INT 117
15618: PUSH
15619: LD_INT 118
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: ST_TO_ADDR
15645: GO 16420
15647: LD_INT 16
15649: DOUBLE
15650: EQUAL
15651: IFTRUE 15655
15653: GO 15791
15655: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15656: LD_ADDR_VAR 0 1
15660: PUSH
15661: LD_INT 2
15663: PUSH
15664: LD_INT 4
15666: PUSH
15667: LD_INT 5
15669: PUSH
15670: LD_INT 7
15672: PUSH
15673: LD_INT 11
15675: PUSH
15676: LD_INT 12
15678: PUSH
15679: LD_INT 15
15681: PUSH
15682: LD_INT 16
15684: PUSH
15685: LD_INT 20
15687: PUSH
15688: LD_INT 21
15690: PUSH
15691: LD_INT 22
15693: PUSH
15694: LD_INT 23
15696: PUSH
15697: LD_INT 25
15699: PUSH
15700: LD_INT 26
15702: PUSH
15703: LD_INT 30
15705: PUSH
15706: LD_INT 31
15708: PUSH
15709: LD_INT 32
15711: PUSH
15712: LD_INT 33
15714: PUSH
15715: LD_INT 34
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 101
15741: PUSH
15742: LD_INT 102
15744: PUSH
15745: LD_INT 103
15747: PUSH
15748: LD_INT 106
15750: PUSH
15751: LD_INT 108
15753: PUSH
15754: LD_INT 112
15756: PUSH
15757: LD_INT 113
15759: PUSH
15760: LD_INT 114
15762: PUSH
15763: LD_INT 116
15765: PUSH
15766: LD_INT 117
15768: PUSH
15769: LD_INT 118
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: ST_TO_ADDR
15789: GO 16420
15791: LD_INT 17
15793: DOUBLE
15794: EQUAL
15795: IFTRUE 15799
15797: GO 16023
15799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15800: LD_ADDR_VAR 0 1
15804: PUSH
15805: LD_INT 1
15807: PUSH
15808: LD_INT 2
15810: PUSH
15811: LD_INT 3
15813: PUSH
15814: LD_INT 4
15816: PUSH
15817: LD_INT 5
15819: PUSH
15820: LD_INT 6
15822: PUSH
15823: LD_INT 7
15825: PUSH
15826: LD_INT 8
15828: PUSH
15829: LD_INT 9
15831: PUSH
15832: LD_INT 10
15834: PUSH
15835: LD_INT 11
15837: PUSH
15838: LD_INT 12
15840: PUSH
15841: LD_INT 13
15843: PUSH
15844: LD_INT 14
15846: PUSH
15847: LD_INT 15
15849: PUSH
15850: LD_INT 16
15852: PUSH
15853: LD_INT 17
15855: PUSH
15856: LD_INT 18
15858: PUSH
15859: LD_INT 19
15861: PUSH
15862: LD_INT 20
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 22
15870: PUSH
15871: LD_INT 23
15873: PUSH
15874: LD_INT 24
15876: PUSH
15877: LD_INT 25
15879: PUSH
15880: LD_INT 26
15882: PUSH
15883: LD_INT 27
15885: PUSH
15886: LD_INT 28
15888: PUSH
15889: LD_INT 29
15891: PUSH
15892: LD_INT 30
15894: PUSH
15895: LD_INT 31
15897: PUSH
15898: LD_INT 32
15900: PUSH
15901: LD_INT 33
15903: PUSH
15904: LD_INT 34
15906: PUSH
15907: LD_INT 36
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 101
15949: PUSH
15950: LD_INT 102
15952: PUSH
15953: LD_INT 103
15955: PUSH
15956: LD_INT 104
15958: PUSH
15959: LD_INT 105
15961: PUSH
15962: LD_INT 106
15964: PUSH
15965: LD_INT 107
15967: PUSH
15968: LD_INT 108
15970: PUSH
15971: LD_INT 109
15973: PUSH
15974: LD_INT 110
15976: PUSH
15977: LD_INT 111
15979: PUSH
15980: LD_INT 112
15982: PUSH
15983: LD_INT 113
15985: PUSH
15986: LD_INT 114
15988: PUSH
15989: LD_INT 116
15991: PUSH
15992: LD_INT 117
15994: PUSH
15995: LD_INT 118
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: ST_TO_ADDR
16021: GO 16420
16023: LD_INT 18
16025: DOUBLE
16026: EQUAL
16027: IFTRUE 16031
16029: GO 16179
16031: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16032: LD_ADDR_VAR 0 1
16036: PUSH
16037: LD_INT 2
16039: PUSH
16040: LD_INT 4
16042: PUSH
16043: LD_INT 5
16045: PUSH
16046: LD_INT 7
16048: PUSH
16049: LD_INT 11
16051: PUSH
16052: LD_INT 12
16054: PUSH
16055: LD_INT 15
16057: PUSH
16058: LD_INT 16
16060: PUSH
16061: LD_INT 20
16063: PUSH
16064: LD_INT 21
16066: PUSH
16067: LD_INT 22
16069: PUSH
16070: LD_INT 23
16072: PUSH
16073: LD_INT 25
16075: PUSH
16076: LD_INT 26
16078: PUSH
16079: LD_INT 30
16081: PUSH
16082: LD_INT 31
16084: PUSH
16085: LD_INT 32
16087: PUSH
16088: LD_INT 33
16090: PUSH
16091: LD_INT 34
16093: PUSH
16094: LD_INT 35
16096: PUSH
16097: LD_INT 36
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 101
16125: PUSH
16126: LD_INT 102
16128: PUSH
16129: LD_INT 103
16131: PUSH
16132: LD_INT 106
16134: PUSH
16135: LD_INT 108
16137: PUSH
16138: LD_INT 112
16140: PUSH
16141: LD_INT 113
16143: PUSH
16144: LD_INT 114
16146: PUSH
16147: LD_INT 115
16149: PUSH
16150: LD_INT 116
16152: PUSH
16153: LD_INT 117
16155: PUSH
16156: LD_INT 118
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: ST_TO_ADDR
16177: GO 16420
16179: LD_INT 19
16181: DOUBLE
16182: EQUAL
16183: IFTRUE 16187
16185: GO 16419
16187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16188: LD_ADDR_VAR 0 1
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: LD_INT 2
16198: PUSH
16199: LD_INT 3
16201: PUSH
16202: LD_INT 4
16204: PUSH
16205: LD_INT 5
16207: PUSH
16208: LD_INT 6
16210: PUSH
16211: LD_INT 7
16213: PUSH
16214: LD_INT 8
16216: PUSH
16217: LD_INT 9
16219: PUSH
16220: LD_INT 10
16222: PUSH
16223: LD_INT 11
16225: PUSH
16226: LD_INT 12
16228: PUSH
16229: LD_INT 13
16231: PUSH
16232: LD_INT 14
16234: PUSH
16235: LD_INT 15
16237: PUSH
16238: LD_INT 16
16240: PUSH
16241: LD_INT 17
16243: PUSH
16244: LD_INT 18
16246: PUSH
16247: LD_INT 19
16249: PUSH
16250: LD_INT 20
16252: PUSH
16253: LD_INT 21
16255: PUSH
16256: LD_INT 22
16258: PUSH
16259: LD_INT 23
16261: PUSH
16262: LD_INT 24
16264: PUSH
16265: LD_INT 25
16267: PUSH
16268: LD_INT 26
16270: PUSH
16271: LD_INT 27
16273: PUSH
16274: LD_INT 28
16276: PUSH
16277: LD_INT 29
16279: PUSH
16280: LD_INT 30
16282: PUSH
16283: LD_INT 31
16285: PUSH
16286: LD_INT 32
16288: PUSH
16289: LD_INT 33
16291: PUSH
16292: LD_INT 34
16294: PUSH
16295: LD_INT 35
16297: PUSH
16298: LD_INT 36
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 101
16341: PUSH
16342: LD_INT 102
16344: PUSH
16345: LD_INT 103
16347: PUSH
16348: LD_INT 104
16350: PUSH
16351: LD_INT 105
16353: PUSH
16354: LD_INT 106
16356: PUSH
16357: LD_INT 107
16359: PUSH
16360: LD_INT 108
16362: PUSH
16363: LD_INT 109
16365: PUSH
16366: LD_INT 110
16368: PUSH
16369: LD_INT 111
16371: PUSH
16372: LD_INT 112
16374: PUSH
16375: LD_INT 113
16377: PUSH
16378: LD_INT 114
16380: PUSH
16381: LD_INT 115
16383: PUSH
16384: LD_INT 116
16386: PUSH
16387: LD_INT 117
16389: PUSH
16390: LD_INT 118
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: ST_TO_ADDR
16417: GO 16420
16419: POP
// end else
16420: GO 16651
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16422: LD_ADDR_VAR 0 1
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: LD_INT 3
16435: PUSH
16436: LD_INT 4
16438: PUSH
16439: LD_INT 5
16441: PUSH
16442: LD_INT 6
16444: PUSH
16445: LD_INT 7
16447: PUSH
16448: LD_INT 8
16450: PUSH
16451: LD_INT 9
16453: PUSH
16454: LD_INT 10
16456: PUSH
16457: LD_INT 11
16459: PUSH
16460: LD_INT 12
16462: PUSH
16463: LD_INT 13
16465: PUSH
16466: LD_INT 14
16468: PUSH
16469: LD_INT 15
16471: PUSH
16472: LD_INT 16
16474: PUSH
16475: LD_INT 17
16477: PUSH
16478: LD_INT 18
16480: PUSH
16481: LD_INT 19
16483: PUSH
16484: LD_INT 20
16486: PUSH
16487: LD_INT 21
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_INT 23
16495: PUSH
16496: LD_INT 24
16498: PUSH
16499: LD_INT 25
16501: PUSH
16502: LD_INT 26
16504: PUSH
16505: LD_INT 27
16507: PUSH
16508: LD_INT 28
16510: PUSH
16511: LD_INT 29
16513: PUSH
16514: LD_INT 30
16516: PUSH
16517: LD_INT 31
16519: PUSH
16520: LD_INT 32
16522: PUSH
16523: LD_INT 33
16525: PUSH
16526: LD_INT 34
16528: PUSH
16529: LD_INT 35
16531: PUSH
16532: LD_INT 36
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 101
16575: PUSH
16576: LD_INT 102
16578: PUSH
16579: LD_INT 103
16581: PUSH
16582: LD_INT 104
16584: PUSH
16585: LD_INT 105
16587: PUSH
16588: LD_INT 106
16590: PUSH
16591: LD_INT 107
16593: PUSH
16594: LD_INT 108
16596: PUSH
16597: LD_INT 109
16599: PUSH
16600: LD_INT 110
16602: PUSH
16603: LD_INT 111
16605: PUSH
16606: LD_INT 112
16608: PUSH
16609: LD_INT 113
16611: PUSH
16612: LD_INT 114
16614: PUSH
16615: LD_INT 115
16617: PUSH
16618: LD_INT 116
16620: PUSH
16621: LD_INT 117
16623: PUSH
16624: LD_INT 118
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: ST_TO_ADDR
// if result then
16651: LD_VAR 0 1
16655: IFFALSE 16944
// begin normal :=  ;
16657: LD_ADDR_VAR 0 3
16661: PUSH
16662: LD_STRING 
16664: ST_TO_ADDR
// hardcore :=  ;
16665: LD_ADDR_VAR 0 4
16669: PUSH
16670: LD_STRING 
16672: ST_TO_ADDR
// for i = 1 to normalCounter do
16673: LD_ADDR_VAR 0 5
16677: PUSH
16678: DOUBLE
16679: LD_INT 1
16681: DEC
16682: ST_TO_ADDR
16683: LD_EXP 41
16687: PUSH
16688: FOR_TO
16689: IFFALSE 16790
// begin tmp := 0 ;
16691: LD_ADDR_VAR 0 2
16695: PUSH
16696: LD_STRING 0
16698: ST_TO_ADDR
// if result [ 1 ] then
16699: LD_VAR 0 1
16703: PUSH
16704: LD_INT 1
16706: ARRAY
16707: IFFALSE 16772
// if result [ 1 ] [ 1 ] = i then
16709: LD_VAR 0 1
16713: PUSH
16714: LD_INT 1
16716: ARRAY
16717: PUSH
16718: LD_INT 1
16720: ARRAY
16721: PUSH
16722: LD_VAR 0 5
16726: EQUAL
16727: IFFALSE 16772
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16729: LD_ADDR_VAR 0 1
16733: PUSH
16734: LD_VAR 0 1
16738: PPUSH
16739: LD_INT 1
16741: PPUSH
16742: LD_VAR 0 1
16746: PUSH
16747: LD_INT 1
16749: ARRAY
16750: PPUSH
16751: LD_INT 1
16753: PPUSH
16754: CALL_OW 3
16758: PPUSH
16759: CALL_OW 1
16763: ST_TO_ADDR
// tmp := 1 ;
16764: LD_ADDR_VAR 0 2
16768: PUSH
16769: LD_STRING 1
16771: ST_TO_ADDR
// end ; normal := normal & tmp ;
16772: LD_ADDR_VAR 0 3
16776: PUSH
16777: LD_VAR 0 3
16781: PUSH
16782: LD_VAR 0 2
16786: STR
16787: ST_TO_ADDR
// end ;
16788: GO 16688
16790: POP
16791: POP
// for i = 1 to hardcoreCounter do
16792: LD_ADDR_VAR 0 5
16796: PUSH
16797: DOUBLE
16798: LD_INT 1
16800: DEC
16801: ST_TO_ADDR
16802: LD_EXP 42
16806: PUSH
16807: FOR_TO
16808: IFFALSE 16913
// begin tmp := 0 ;
16810: LD_ADDR_VAR 0 2
16814: PUSH
16815: LD_STRING 0
16817: ST_TO_ADDR
// if result [ 2 ] then
16818: LD_VAR 0 1
16822: PUSH
16823: LD_INT 2
16825: ARRAY
16826: IFFALSE 16895
// if result [ 2 ] [ 1 ] = 100 + i then
16828: LD_VAR 0 1
16832: PUSH
16833: LD_INT 2
16835: ARRAY
16836: PUSH
16837: LD_INT 1
16839: ARRAY
16840: PUSH
16841: LD_INT 100
16843: PUSH
16844: LD_VAR 0 5
16848: PLUS
16849: EQUAL
16850: IFFALSE 16895
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16852: LD_ADDR_VAR 0 1
16856: PUSH
16857: LD_VAR 0 1
16861: PPUSH
16862: LD_INT 2
16864: PPUSH
16865: LD_VAR 0 1
16869: PUSH
16870: LD_INT 2
16872: ARRAY
16873: PPUSH
16874: LD_INT 1
16876: PPUSH
16877: CALL_OW 3
16881: PPUSH
16882: CALL_OW 1
16886: ST_TO_ADDR
// tmp := 1 ;
16887: LD_ADDR_VAR 0 2
16891: PUSH
16892: LD_STRING 1
16894: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16895: LD_ADDR_VAR 0 4
16899: PUSH
16900: LD_VAR 0 4
16904: PUSH
16905: LD_VAR 0 2
16909: STR
16910: ST_TO_ADDR
// end ;
16911: GO 16807
16913: POP
16914: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16915: LD_STRING getStreamItemsFromMission("
16917: PUSH
16918: LD_VAR 0 3
16922: STR
16923: PUSH
16924: LD_STRING ","
16926: STR
16927: PUSH
16928: LD_VAR 0 4
16932: STR
16933: PUSH
16934: LD_STRING ")
16936: STR
16937: PPUSH
16938: CALL_OW 559
// end else
16942: GO 16951
// ToLua ( getStreamItemsFromMission("","") ) ;
16944: LD_STRING getStreamItemsFromMission("","")
16946: PPUSH
16947: CALL_OW 559
// end ;
16951: LD_VAR 0 1
16955: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16956: LD_EXP 40
16960: PUSH
16961: LD_EXP 45
16965: AND
16966: IFFALSE 17090
16968: GO 16970
16970: DISABLE
16971: LD_INT 0
16973: PPUSH
16974: PPUSH
// begin enable ;
16975: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16976: LD_ADDR_VAR 0 2
16980: PUSH
16981: LD_INT 22
16983: PUSH
16984: LD_OWVAR 2
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 2
16995: PUSH
16996: LD_INT 34
16998: PUSH
16999: LD_INT 7
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 34
17008: PUSH
17009: LD_INT 45
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 34
17018: PUSH
17019: LD_INT 28
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 34
17028: PUSH
17029: LD_INT 47
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PPUSH
17047: CALL_OW 69
17051: ST_TO_ADDR
// if not tmp then
17052: LD_VAR 0 2
17056: NOT
17057: IFFALSE 17061
// exit ;
17059: GO 17090
// for i in tmp do
17061: LD_ADDR_VAR 0 1
17065: PUSH
17066: LD_VAR 0 2
17070: PUSH
17071: FOR_IN
17072: IFFALSE 17088
// begin SetLives ( i , 0 ) ;
17074: LD_VAR 0 1
17078: PPUSH
17079: LD_INT 0
17081: PPUSH
17082: CALL_OW 234
// end ;
17086: GO 17071
17088: POP
17089: POP
// end ;
17090: PPOPN 2
17092: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17093: LD_EXP 40
17097: PUSH
17098: LD_EXP 46
17102: AND
17103: IFFALSE 17187
17105: GO 17107
17107: DISABLE
17108: LD_INT 0
17110: PPUSH
17111: PPUSH
// begin enable ;
17112: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17113: LD_ADDR_VAR 0 2
17117: PUSH
17118: LD_INT 22
17120: PUSH
17121: LD_OWVAR 2
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 32
17132: PUSH
17133: LD_INT 3
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PPUSH
17144: CALL_OW 69
17148: ST_TO_ADDR
// if not tmp then
17149: LD_VAR 0 2
17153: NOT
17154: IFFALSE 17158
// exit ;
17156: GO 17187
// for i in tmp do
17158: LD_ADDR_VAR 0 1
17162: PUSH
17163: LD_VAR 0 2
17167: PUSH
17168: FOR_IN
17169: IFFALSE 17185
// begin SetLives ( i , 0 ) ;
17171: LD_VAR 0 1
17175: PPUSH
17176: LD_INT 0
17178: PPUSH
17179: CALL_OW 234
// end ;
17183: GO 17168
17185: POP
17186: POP
// end ;
17187: PPOPN 2
17189: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17190: LD_EXP 40
17194: PUSH
17195: LD_EXP 43
17199: AND
17200: IFFALSE 17293
17202: GO 17204
17204: DISABLE
17205: LD_INT 0
17207: PPUSH
// begin enable ;
17208: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17209: LD_ADDR_VAR 0 1
17213: PUSH
17214: LD_INT 22
17216: PUSH
17217: LD_OWVAR 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 2
17228: PUSH
17229: LD_INT 25
17231: PUSH
17232: LD_INT 5
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 25
17241: PUSH
17242: LD_INT 9
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 25
17251: PUSH
17252: LD_INT 8
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PPUSH
17269: CALL_OW 69
17273: PUSH
17274: FOR_IN
17275: IFFALSE 17291
// begin SetClass ( i , 1 ) ;
17277: LD_VAR 0 1
17281: PPUSH
17282: LD_INT 1
17284: PPUSH
17285: CALL_OW 336
// end ;
17289: GO 17274
17291: POP
17292: POP
// end ;
17293: PPOPN 1
17295: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17296: LD_EXP 40
17300: PUSH
17301: LD_EXP 44
17305: AND
17306: PUSH
17307: LD_OWVAR 65
17311: PUSH
17312: LD_INT 7
17314: LESS
17315: AND
17316: IFFALSE 17330
17318: GO 17320
17320: DISABLE
// begin enable ;
17321: ENABLE
// game_speed := 7 ;
17322: LD_ADDR_OWVAR 65
17326: PUSH
17327: LD_INT 7
17329: ST_TO_ADDR
// end ;
17330: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17331: LD_EXP 40
17335: PUSH
17336: LD_EXP 47
17340: AND
17341: IFFALSE 17543
17343: GO 17345
17345: DISABLE
17346: LD_INT 0
17348: PPUSH
17349: PPUSH
17350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17351: LD_ADDR_VAR 0 3
17355: PUSH
17356: LD_INT 81
17358: PUSH
17359: LD_OWVAR 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 21
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PPUSH
17382: CALL_OW 69
17386: ST_TO_ADDR
// if not tmp then
17387: LD_VAR 0 3
17391: NOT
17392: IFFALSE 17396
// exit ;
17394: GO 17543
// if tmp > 5 then
17396: LD_VAR 0 3
17400: PUSH
17401: LD_INT 5
17403: GREATER
17404: IFFALSE 17416
// k := 5 else
17406: LD_ADDR_VAR 0 2
17410: PUSH
17411: LD_INT 5
17413: ST_TO_ADDR
17414: GO 17426
// k := tmp ;
17416: LD_ADDR_VAR 0 2
17420: PUSH
17421: LD_VAR 0 3
17425: ST_TO_ADDR
// for i := 1 to k do
17426: LD_ADDR_VAR 0 1
17430: PUSH
17431: DOUBLE
17432: LD_INT 1
17434: DEC
17435: ST_TO_ADDR
17436: LD_VAR 0 2
17440: PUSH
17441: FOR_TO
17442: IFFALSE 17541
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17444: LD_VAR 0 3
17448: PUSH
17449: LD_VAR 0 1
17453: ARRAY
17454: PPUSH
17455: LD_VAR 0 1
17459: PUSH
17460: LD_INT 4
17462: MOD
17463: PUSH
17464: LD_INT 1
17466: PLUS
17467: PPUSH
17468: CALL_OW 259
17472: PUSH
17473: LD_INT 10
17475: LESS
17476: IFFALSE 17539
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17478: LD_VAR 0 3
17482: PUSH
17483: LD_VAR 0 1
17487: ARRAY
17488: PPUSH
17489: LD_VAR 0 1
17493: PUSH
17494: LD_INT 4
17496: MOD
17497: PUSH
17498: LD_INT 1
17500: PLUS
17501: PPUSH
17502: LD_VAR 0 3
17506: PUSH
17507: LD_VAR 0 1
17511: ARRAY
17512: PPUSH
17513: LD_VAR 0 1
17517: PUSH
17518: LD_INT 4
17520: MOD
17521: PUSH
17522: LD_INT 1
17524: PLUS
17525: PPUSH
17526: CALL_OW 259
17530: PUSH
17531: LD_INT 1
17533: PLUS
17534: PPUSH
17535: CALL_OW 237
17539: GO 17441
17541: POP
17542: POP
// end ;
17543: PPOPN 3
17545: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17546: LD_EXP 40
17550: PUSH
17551: LD_EXP 48
17555: AND
17556: IFFALSE 17576
17558: GO 17560
17560: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17561: LD_INT 4
17563: PPUSH
17564: LD_OWVAR 2
17568: PPUSH
17569: LD_INT 0
17571: PPUSH
17572: CALL_OW 324
17576: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17577: LD_EXP 40
17581: PUSH
17582: LD_EXP 77
17586: AND
17587: IFFALSE 17607
17589: GO 17591
17591: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17592: LD_INT 19
17594: PPUSH
17595: LD_OWVAR 2
17599: PPUSH
17600: LD_INT 0
17602: PPUSH
17603: CALL_OW 324
17607: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17608: LD_EXP 40
17612: PUSH
17613: LD_EXP 49
17617: AND
17618: IFFALSE 17720
17620: GO 17622
17622: DISABLE
17623: LD_INT 0
17625: PPUSH
17626: PPUSH
// begin enable ;
17627: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17628: LD_ADDR_VAR 0 2
17632: PUSH
17633: LD_INT 22
17635: PUSH
17636: LD_OWVAR 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 2
17647: PUSH
17648: LD_INT 34
17650: PUSH
17651: LD_INT 11
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 34
17660: PUSH
17661: LD_INT 30
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: LIST
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PPUSH
17677: CALL_OW 69
17681: ST_TO_ADDR
// if not tmp then
17682: LD_VAR 0 2
17686: NOT
17687: IFFALSE 17691
// exit ;
17689: GO 17720
// for i in tmp do
17691: LD_ADDR_VAR 0 1
17695: PUSH
17696: LD_VAR 0 2
17700: PUSH
17701: FOR_IN
17702: IFFALSE 17718
// begin SetLives ( i , 0 ) ;
17704: LD_VAR 0 1
17708: PPUSH
17709: LD_INT 0
17711: PPUSH
17712: CALL_OW 234
// end ;
17716: GO 17701
17718: POP
17719: POP
// end ;
17720: PPOPN 2
17722: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17723: LD_EXP 40
17727: PUSH
17728: LD_EXP 50
17732: AND
17733: IFFALSE 17753
17735: GO 17737
17737: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17738: LD_INT 32
17740: PPUSH
17741: LD_OWVAR 2
17745: PPUSH
17746: LD_INT 0
17748: PPUSH
17749: CALL_OW 324
17753: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17754: LD_EXP 40
17758: PUSH
17759: LD_EXP 51
17763: AND
17764: IFFALSE 17945
17766: GO 17768
17768: DISABLE
17769: LD_INT 0
17771: PPUSH
17772: PPUSH
17773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17774: LD_ADDR_VAR 0 2
17778: PUSH
17779: LD_INT 22
17781: PUSH
17782: LD_OWVAR 2
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 33
17793: PUSH
17794: LD_INT 3
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PPUSH
17805: CALL_OW 69
17809: ST_TO_ADDR
// if not tmp then
17810: LD_VAR 0 2
17814: NOT
17815: IFFALSE 17819
// exit ;
17817: GO 17945
// side := 0 ;
17819: LD_ADDR_VAR 0 3
17823: PUSH
17824: LD_INT 0
17826: ST_TO_ADDR
// for i := 1 to 8 do
17827: LD_ADDR_VAR 0 1
17831: PUSH
17832: DOUBLE
17833: LD_INT 1
17835: DEC
17836: ST_TO_ADDR
17837: LD_INT 8
17839: PUSH
17840: FOR_TO
17841: IFFALSE 17889
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17843: LD_OWVAR 2
17847: PUSH
17848: LD_VAR 0 1
17852: NONEQUAL
17853: PUSH
17854: LD_OWVAR 2
17858: PPUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 81
17868: PUSH
17869: LD_INT 2
17871: EQUAL
17872: AND
17873: IFFALSE 17887
// begin side := i ;
17875: LD_ADDR_VAR 0 3
17879: PUSH
17880: LD_VAR 0 1
17884: ST_TO_ADDR
// break ;
17885: GO 17889
// end ;
17887: GO 17840
17889: POP
17890: POP
// if not side then
17891: LD_VAR 0 3
17895: NOT
17896: IFFALSE 17900
// exit ;
17898: GO 17945
// for i := 1 to tmp do
17900: LD_ADDR_VAR 0 1
17904: PUSH
17905: DOUBLE
17906: LD_INT 1
17908: DEC
17909: ST_TO_ADDR
17910: LD_VAR 0 2
17914: PUSH
17915: FOR_TO
17916: IFFALSE 17943
// if Prob ( 60 ) then
17918: LD_INT 60
17920: PPUSH
17921: CALL_OW 13
17925: IFFALSE 17941
// SetSide ( i , side ) ;
17927: LD_VAR 0 1
17931: PPUSH
17932: LD_VAR 0 3
17936: PPUSH
17937: CALL_OW 235
17941: GO 17915
17943: POP
17944: POP
// end ;
17945: PPOPN 3
17947: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17948: LD_EXP 40
17952: PUSH
17953: LD_EXP 53
17957: AND
17958: IFFALSE 18077
17960: GO 17962
17962: DISABLE
17963: LD_INT 0
17965: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17966: LD_ADDR_VAR 0 1
17970: PUSH
17971: LD_INT 22
17973: PUSH
17974: LD_OWVAR 2
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 21
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: LD_INT 23
17998: PUSH
17999: LD_INT 0
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: LIST
18014: PPUSH
18015: CALL_OW 69
18019: PUSH
18020: FOR_IN
18021: IFFALSE 18075
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18023: LD_VAR 0 1
18027: PPUSH
18028: CALL_OW 257
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: LD_INT 2
18038: PUSH
18039: LD_INT 3
18041: PUSH
18042: LD_INT 4
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: IN
18051: IFFALSE 18073
// SetClass ( un , rand ( 1 , 4 ) ) ;
18053: LD_VAR 0 1
18057: PPUSH
18058: LD_INT 1
18060: PPUSH
18061: LD_INT 4
18063: PPUSH
18064: CALL_OW 12
18068: PPUSH
18069: CALL_OW 336
18073: GO 18020
18075: POP
18076: POP
// end ;
18077: PPOPN 1
18079: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18080: LD_EXP 40
18084: PUSH
18085: LD_EXP 52
18089: AND
18090: IFFALSE 18169
18092: GO 18094
18094: DISABLE
18095: LD_INT 0
18097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18098: LD_ADDR_VAR 0 1
18102: PUSH
18103: LD_INT 22
18105: PUSH
18106: LD_OWVAR 2
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 21
18117: PUSH
18118: LD_INT 3
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PPUSH
18129: CALL_OW 69
18133: ST_TO_ADDR
// if not tmp then
18134: LD_VAR 0 1
18138: NOT
18139: IFFALSE 18143
// exit ;
18141: GO 18169
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18143: LD_VAR 0 1
18147: PUSH
18148: LD_INT 1
18150: PPUSH
18151: LD_VAR 0 1
18155: PPUSH
18156: CALL_OW 12
18160: ARRAY
18161: PPUSH
18162: LD_INT 100
18164: PPUSH
18165: CALL_OW 234
// end ;
18169: PPOPN 1
18171: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18172: LD_EXP 40
18176: PUSH
18177: LD_EXP 54
18181: AND
18182: IFFALSE 18280
18184: GO 18186
18186: DISABLE
18187: LD_INT 0
18189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18190: LD_ADDR_VAR 0 1
18194: PUSH
18195: LD_INT 22
18197: PUSH
18198: LD_OWVAR 2
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 21
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PPUSH
18221: CALL_OW 69
18225: ST_TO_ADDR
// if not tmp then
18226: LD_VAR 0 1
18230: NOT
18231: IFFALSE 18235
// exit ;
18233: GO 18280
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18235: LD_VAR 0 1
18239: PUSH
18240: LD_INT 1
18242: PPUSH
18243: LD_VAR 0 1
18247: PPUSH
18248: CALL_OW 12
18252: ARRAY
18253: PPUSH
18254: LD_INT 1
18256: PPUSH
18257: LD_INT 4
18259: PPUSH
18260: CALL_OW 12
18264: PPUSH
18265: LD_INT 3000
18267: PPUSH
18268: LD_INT 9000
18270: PPUSH
18271: CALL_OW 12
18275: PPUSH
18276: CALL_OW 492
// end ;
18280: PPOPN 1
18282: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18283: LD_EXP 40
18287: PUSH
18288: LD_EXP 55
18292: AND
18293: IFFALSE 18313
18295: GO 18297
18297: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18298: LD_INT 1
18300: PPUSH
18301: LD_OWVAR 2
18305: PPUSH
18306: LD_INT 0
18308: PPUSH
18309: CALL_OW 324
18313: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18314: LD_EXP 40
18318: PUSH
18319: LD_EXP 56
18323: AND
18324: IFFALSE 18407
18326: GO 18328
18328: DISABLE
18329: LD_INT 0
18331: PPUSH
18332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18333: LD_ADDR_VAR 0 2
18337: PUSH
18338: LD_INT 22
18340: PUSH
18341: LD_OWVAR 2
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 21
18352: PUSH
18353: LD_INT 3
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PPUSH
18364: CALL_OW 69
18368: ST_TO_ADDR
// if not tmp then
18369: LD_VAR 0 2
18373: NOT
18374: IFFALSE 18378
// exit ;
18376: GO 18407
// for i in tmp do
18378: LD_ADDR_VAR 0 1
18382: PUSH
18383: LD_VAR 0 2
18387: PUSH
18388: FOR_IN
18389: IFFALSE 18405
// SetBLevel ( i , 10 ) ;
18391: LD_VAR 0 1
18395: PPUSH
18396: LD_INT 10
18398: PPUSH
18399: CALL_OW 241
18403: GO 18388
18405: POP
18406: POP
// end ;
18407: PPOPN 2
18409: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18410: LD_EXP 40
18414: PUSH
18415: LD_EXP 57
18419: AND
18420: IFFALSE 18531
18422: GO 18424
18424: DISABLE
18425: LD_INT 0
18427: PPUSH
18428: PPUSH
18429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18430: LD_ADDR_VAR 0 3
18434: PUSH
18435: LD_INT 22
18437: PUSH
18438: LD_OWVAR 2
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 25
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PPUSH
18461: CALL_OW 69
18465: ST_TO_ADDR
// if not tmp then
18466: LD_VAR 0 3
18470: NOT
18471: IFFALSE 18475
// exit ;
18473: GO 18531
// un := tmp [ rand ( 1 , tmp ) ] ;
18475: LD_ADDR_VAR 0 2
18479: PUSH
18480: LD_VAR 0 3
18484: PUSH
18485: LD_INT 1
18487: PPUSH
18488: LD_VAR 0 3
18492: PPUSH
18493: CALL_OW 12
18497: ARRAY
18498: ST_TO_ADDR
// if Crawls ( un ) then
18499: LD_VAR 0 2
18503: PPUSH
18504: CALL_OW 318
18508: IFFALSE 18519
// ComWalk ( un ) ;
18510: LD_VAR 0 2
18514: PPUSH
18515: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18519: LD_VAR 0 2
18523: PPUSH
18524: LD_INT 5
18526: PPUSH
18527: CALL_OW 336
// end ;
18531: PPOPN 3
18533: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18534: LD_EXP 40
18538: PUSH
18539: LD_EXP 58
18543: AND
18544: PUSH
18545: LD_OWVAR 67
18549: PUSH
18550: LD_INT 4
18552: LESS
18553: AND
18554: IFFALSE 18573
18556: GO 18558
18558: DISABLE
// begin Difficulty := Difficulty + 1 ;
18559: LD_ADDR_OWVAR 67
18563: PUSH
18564: LD_OWVAR 67
18568: PUSH
18569: LD_INT 1
18571: PLUS
18572: ST_TO_ADDR
// end ;
18573: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18574: LD_EXP 40
18578: PUSH
18579: LD_EXP 59
18583: AND
18584: IFFALSE 18687
18586: GO 18588
18588: DISABLE
18589: LD_INT 0
18591: PPUSH
// begin for i := 1 to 5 do
18592: LD_ADDR_VAR 0 1
18596: PUSH
18597: DOUBLE
18598: LD_INT 1
18600: DEC
18601: ST_TO_ADDR
18602: LD_INT 5
18604: PUSH
18605: FOR_TO
18606: IFFALSE 18685
// begin uc_nation := nation_nature ;
18608: LD_ADDR_OWVAR 21
18612: PUSH
18613: LD_INT 0
18615: ST_TO_ADDR
// uc_side := 0 ;
18616: LD_ADDR_OWVAR 20
18620: PUSH
18621: LD_INT 0
18623: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18624: LD_ADDR_OWVAR 29
18628: PUSH
18629: LD_INT 12
18631: PUSH
18632: LD_INT 12
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: ST_TO_ADDR
// hc_agressivity := 20 ;
18639: LD_ADDR_OWVAR 35
18643: PUSH
18644: LD_INT 20
18646: ST_TO_ADDR
// hc_class := class_tiger ;
18647: LD_ADDR_OWVAR 28
18651: PUSH
18652: LD_INT 14
18654: ST_TO_ADDR
// hc_gallery :=  ;
18655: LD_ADDR_OWVAR 33
18659: PUSH
18660: LD_STRING 
18662: ST_TO_ADDR
// hc_name :=  ;
18663: LD_ADDR_OWVAR 26
18667: PUSH
18668: LD_STRING 
18670: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18671: CALL_OW 44
18675: PPUSH
18676: LD_INT 0
18678: PPUSH
18679: CALL_OW 51
// end ;
18683: GO 18605
18685: POP
18686: POP
// end ;
18687: PPOPN 1
18689: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18690: LD_EXP 40
18694: PUSH
18695: LD_EXP 60
18699: AND
18700: IFFALSE 18709
18702: GO 18704
18704: DISABLE
// StreamSibBomb ;
18705: CALL 18710 0 0
18709: END
// export function StreamSibBomb ; var i , x , y ; begin
18710: LD_INT 0
18712: PPUSH
18713: PPUSH
18714: PPUSH
18715: PPUSH
// result := false ;
18716: LD_ADDR_VAR 0 1
18720: PUSH
18721: LD_INT 0
18723: ST_TO_ADDR
// for i := 1 to 16 do
18724: LD_ADDR_VAR 0 2
18728: PUSH
18729: DOUBLE
18730: LD_INT 1
18732: DEC
18733: ST_TO_ADDR
18734: LD_INT 16
18736: PUSH
18737: FOR_TO
18738: IFFALSE 18937
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18740: LD_ADDR_VAR 0 3
18744: PUSH
18745: LD_INT 10
18747: PUSH
18748: LD_INT 20
18750: PUSH
18751: LD_INT 30
18753: PUSH
18754: LD_INT 40
18756: PUSH
18757: LD_INT 50
18759: PUSH
18760: LD_INT 60
18762: PUSH
18763: LD_INT 70
18765: PUSH
18766: LD_INT 80
18768: PUSH
18769: LD_INT 90
18771: PUSH
18772: LD_INT 100
18774: PUSH
18775: LD_INT 110
18777: PUSH
18778: LD_INT 120
18780: PUSH
18781: LD_INT 130
18783: PUSH
18784: LD_INT 140
18786: PUSH
18787: LD_INT 150
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: PPUSH
18810: LD_INT 15
18812: PPUSH
18813: CALL_OW 12
18817: ARRAY
18818: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18819: LD_ADDR_VAR 0 4
18823: PUSH
18824: LD_INT 10
18826: PUSH
18827: LD_INT 20
18829: PUSH
18830: LD_INT 30
18832: PUSH
18833: LD_INT 40
18835: PUSH
18836: LD_INT 50
18838: PUSH
18839: LD_INT 60
18841: PUSH
18842: LD_INT 70
18844: PUSH
18845: LD_INT 80
18847: PUSH
18848: LD_INT 90
18850: PUSH
18851: LD_INT 100
18853: PUSH
18854: LD_INT 110
18856: PUSH
18857: LD_INT 120
18859: PUSH
18860: LD_INT 130
18862: PUSH
18863: LD_INT 140
18865: PUSH
18866: LD_INT 150
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 1
18888: PPUSH
18889: LD_INT 15
18891: PPUSH
18892: CALL_OW 12
18896: ARRAY
18897: ST_TO_ADDR
// if ValidHex ( x , y ) then
18898: LD_VAR 0 3
18902: PPUSH
18903: LD_VAR 0 4
18907: PPUSH
18908: CALL_OW 488
18912: IFFALSE 18935
// begin result := [ x , y ] ;
18914: LD_ADDR_VAR 0 1
18918: PUSH
18919: LD_VAR 0 3
18923: PUSH
18924: LD_VAR 0 4
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: ST_TO_ADDR
// break ;
18933: GO 18937
// end ; end ;
18935: GO 18737
18937: POP
18938: POP
// if result then
18939: LD_VAR 0 1
18943: IFFALSE 19003
// begin ToLua ( playSibBomb() ) ;
18945: LD_STRING playSibBomb()
18947: PPUSH
18948: CALL_OW 559
// wait ( 0 0$14 ) ;
18952: LD_INT 490
18954: PPUSH
18955: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18959: LD_VAR 0 1
18963: PUSH
18964: LD_INT 1
18966: ARRAY
18967: PPUSH
18968: LD_VAR 0 1
18972: PUSH
18973: LD_INT 2
18975: ARRAY
18976: PPUSH
18977: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18981: LD_VAR 0 1
18985: PUSH
18986: LD_INT 1
18988: ARRAY
18989: PPUSH
18990: LD_VAR 0 1
18994: PUSH
18995: LD_INT 2
18997: ARRAY
18998: PPUSH
18999: CALL_OW 429
// end ; end ;
19003: LD_VAR 0 1
19007: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19008: LD_EXP 40
19012: PUSH
19013: LD_EXP 62
19017: AND
19018: IFFALSE 19030
19020: GO 19022
19022: DISABLE
// YouLost (  ) ;
19023: LD_STRING 
19025: PPUSH
19026: CALL_OW 104
19030: END
// every 0 0$1 trigger StreamModeActive and sFog do
19031: LD_EXP 40
19035: PUSH
19036: LD_EXP 61
19040: AND
19041: IFFALSE 19055
19043: GO 19045
19045: DISABLE
// FogOff ( your_side ) ;
19046: LD_OWVAR 2
19050: PPUSH
19051: CALL_OW 344
19055: END
// every 0 0$1 trigger StreamModeActive and sSun do
19056: LD_EXP 40
19060: PUSH
19061: LD_EXP 63
19065: AND
19066: IFFALSE 19094
19068: GO 19070
19070: DISABLE
// begin solar_recharge_percent := 0 ;
19071: LD_ADDR_OWVAR 79
19075: PUSH
19076: LD_INT 0
19078: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19079: LD_INT 10500
19081: PPUSH
19082: CALL_OW 67
// solar_recharge_percent := 100 ;
19086: LD_ADDR_OWVAR 79
19090: PUSH
19091: LD_INT 100
19093: ST_TO_ADDR
// end ;
19094: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19095: LD_EXP 40
19099: PUSH
19100: LD_EXP 64
19104: AND
19105: IFFALSE 19344
19107: GO 19109
19109: DISABLE
19110: LD_INT 0
19112: PPUSH
19113: PPUSH
19114: PPUSH
// begin tmp := [ ] ;
19115: LD_ADDR_VAR 0 3
19119: PUSH
19120: EMPTY
19121: ST_TO_ADDR
// for i := 1 to 6 do
19122: LD_ADDR_VAR 0 1
19126: PUSH
19127: DOUBLE
19128: LD_INT 1
19130: DEC
19131: ST_TO_ADDR
19132: LD_INT 6
19134: PUSH
19135: FOR_TO
19136: IFFALSE 19241
// begin uc_nation := nation_nature ;
19138: LD_ADDR_OWVAR 21
19142: PUSH
19143: LD_INT 0
19145: ST_TO_ADDR
// uc_side := 0 ;
19146: LD_ADDR_OWVAR 20
19150: PUSH
19151: LD_INT 0
19153: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19154: LD_ADDR_OWVAR 29
19158: PUSH
19159: LD_INT 12
19161: PUSH
19162: LD_INT 12
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: ST_TO_ADDR
// hc_agressivity := 20 ;
19169: LD_ADDR_OWVAR 35
19173: PUSH
19174: LD_INT 20
19176: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19177: LD_ADDR_OWVAR 28
19181: PUSH
19182: LD_INT 17
19184: ST_TO_ADDR
// hc_gallery :=  ;
19185: LD_ADDR_OWVAR 33
19189: PUSH
19190: LD_STRING 
19192: ST_TO_ADDR
// hc_name :=  ;
19193: LD_ADDR_OWVAR 26
19197: PUSH
19198: LD_STRING 
19200: ST_TO_ADDR
// un := CreateHuman ;
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: CALL_OW 44
19210: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19211: LD_VAR 0 2
19215: PPUSH
19216: LD_INT 1
19218: PPUSH
19219: CALL_OW 51
// tmp := tmp ^ un ;
19223: LD_ADDR_VAR 0 3
19227: PUSH
19228: LD_VAR 0 3
19232: PUSH
19233: LD_VAR 0 2
19237: ADD
19238: ST_TO_ADDR
// end ;
19239: GO 19135
19241: POP
19242: POP
// repeat wait ( 0 0$1 ) ;
19243: LD_INT 35
19245: PPUSH
19246: CALL_OW 67
// for un in tmp do
19250: LD_ADDR_VAR 0 2
19254: PUSH
19255: LD_VAR 0 3
19259: PUSH
19260: FOR_IN
19261: IFFALSE 19335
// begin if IsDead ( un ) then
19263: LD_VAR 0 2
19267: PPUSH
19268: CALL_OW 301
19272: IFFALSE 19292
// begin tmp := tmp diff un ;
19274: LD_ADDR_VAR 0 3
19278: PUSH
19279: LD_VAR 0 3
19283: PUSH
19284: LD_VAR 0 2
19288: DIFF
19289: ST_TO_ADDR
// continue ;
19290: GO 19260
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19292: LD_VAR 0 2
19296: PPUSH
19297: LD_INT 3
19299: PUSH
19300: LD_INT 22
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PPUSH
19314: CALL_OW 69
19318: PPUSH
19319: LD_VAR 0 2
19323: PPUSH
19324: CALL_OW 74
19328: PPUSH
19329: CALL_OW 115
// end ;
19333: GO 19260
19335: POP
19336: POP
// until not tmp ;
19337: LD_VAR 0 3
19341: NOT
19342: IFFALSE 19243
// end ;
19344: PPOPN 3
19346: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19347: LD_EXP 40
19351: PUSH
19352: LD_EXP 65
19356: AND
19357: IFFALSE 19411
19359: GO 19361
19361: DISABLE
// begin ToLua ( displayTroll(); ) ;
19362: LD_STRING displayTroll();
19364: PPUSH
19365: CALL_OW 559
// wait ( 3 3$00 ) ;
19369: LD_INT 6300
19371: PPUSH
19372: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19376: LD_STRING hideTroll();
19378: PPUSH
19379: CALL_OW 559
// wait ( 1 1$00 ) ;
19383: LD_INT 2100
19385: PPUSH
19386: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19390: LD_STRING displayTroll();
19392: PPUSH
19393: CALL_OW 559
// wait ( 1 1$00 ) ;
19397: LD_INT 2100
19399: PPUSH
19400: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19404: LD_STRING hideTroll();
19406: PPUSH
19407: CALL_OW 559
// end ;
19411: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19412: LD_EXP 40
19416: PUSH
19417: LD_EXP 66
19421: AND
19422: IFFALSE 19485
19424: GO 19426
19426: DISABLE
19427: LD_INT 0
19429: PPUSH
// begin p := 0 ;
19430: LD_ADDR_VAR 0 1
19434: PUSH
19435: LD_INT 0
19437: ST_TO_ADDR
// repeat game_speed := 1 ;
19438: LD_ADDR_OWVAR 65
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19446: LD_INT 35
19448: PPUSH
19449: CALL_OW 67
// p := p + 1 ;
19453: LD_ADDR_VAR 0 1
19457: PUSH
19458: LD_VAR 0 1
19462: PUSH
19463: LD_INT 1
19465: PLUS
19466: ST_TO_ADDR
// until p >= 60 ;
19467: LD_VAR 0 1
19471: PUSH
19472: LD_INT 60
19474: GREATEREQUAL
19475: IFFALSE 19438
// game_speed := 4 ;
19477: LD_ADDR_OWVAR 65
19481: PUSH
19482: LD_INT 4
19484: ST_TO_ADDR
// end ;
19485: PPOPN 1
19487: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19488: LD_EXP 40
19492: PUSH
19493: LD_EXP 67
19497: AND
19498: IFFALSE 19644
19500: GO 19502
19502: DISABLE
19503: LD_INT 0
19505: PPUSH
19506: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19507: LD_ADDR_VAR 0 1
19511: PUSH
19512: LD_INT 22
19514: PUSH
19515: LD_OWVAR 2
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: LD_INT 30
19529: PUSH
19530: LD_INT 0
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 30
19539: PUSH
19540: LD_INT 1
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PPUSH
19556: CALL_OW 69
19560: ST_TO_ADDR
// if not depot then
19561: LD_VAR 0 1
19565: NOT
19566: IFFALSE 19570
// exit ;
19568: GO 19644
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19570: LD_ADDR_VAR 0 2
19574: PUSH
19575: LD_VAR 0 1
19579: PUSH
19580: LD_INT 1
19582: PPUSH
19583: LD_VAR 0 1
19587: PPUSH
19588: CALL_OW 12
19592: ARRAY
19593: PPUSH
19594: CALL_OW 274
19598: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19599: LD_VAR 0 2
19603: PPUSH
19604: LD_INT 1
19606: PPUSH
19607: LD_INT 0
19609: PPUSH
19610: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19614: LD_VAR 0 2
19618: PPUSH
19619: LD_INT 2
19621: PPUSH
19622: LD_INT 0
19624: PPUSH
19625: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19629: LD_VAR 0 2
19633: PPUSH
19634: LD_INT 3
19636: PPUSH
19637: LD_INT 0
19639: PPUSH
19640: CALL_OW 277
// end ;
19644: PPOPN 2
19646: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19647: LD_EXP 40
19651: PUSH
19652: LD_EXP 68
19656: AND
19657: IFFALSE 19754
19659: GO 19661
19661: DISABLE
19662: LD_INT 0
19664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19665: LD_ADDR_VAR 0 1
19669: PUSH
19670: LD_INT 22
19672: PUSH
19673: LD_OWVAR 2
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 21
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 3
19694: PUSH
19695: LD_INT 23
19697: PUSH
19698: LD_INT 0
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: LIST
19713: PPUSH
19714: CALL_OW 69
19718: ST_TO_ADDR
// if not tmp then
19719: LD_VAR 0 1
19723: NOT
19724: IFFALSE 19728
// exit ;
19726: GO 19754
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19728: LD_VAR 0 1
19732: PUSH
19733: LD_INT 1
19735: PPUSH
19736: LD_VAR 0 1
19740: PPUSH
19741: CALL_OW 12
19745: ARRAY
19746: PPUSH
19747: LD_INT 200
19749: PPUSH
19750: CALL_OW 234
// end ;
19754: PPOPN 1
19756: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19757: LD_EXP 40
19761: PUSH
19762: LD_EXP 69
19766: AND
19767: IFFALSE 19846
19769: GO 19771
19771: DISABLE
19772: LD_INT 0
19774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19775: LD_ADDR_VAR 0 1
19779: PUSH
19780: LD_INT 22
19782: PUSH
19783: LD_OWVAR 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 21
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PPUSH
19806: CALL_OW 69
19810: ST_TO_ADDR
// if not tmp then
19811: LD_VAR 0 1
19815: NOT
19816: IFFALSE 19820
// exit ;
19818: GO 19846
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19820: LD_VAR 0 1
19824: PUSH
19825: LD_INT 1
19827: PPUSH
19828: LD_VAR 0 1
19832: PPUSH
19833: CALL_OW 12
19837: ARRAY
19838: PPUSH
19839: LD_INT 60
19841: PPUSH
19842: CALL_OW 234
// end ;
19846: PPOPN 1
19848: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19849: LD_EXP 40
19853: PUSH
19854: LD_EXP 70
19858: AND
19859: IFFALSE 19958
19861: GO 19863
19863: DISABLE
19864: LD_INT 0
19866: PPUSH
19867: PPUSH
// begin enable ;
19868: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19869: LD_ADDR_VAR 0 1
19873: PUSH
19874: LD_INT 22
19876: PUSH
19877: LD_OWVAR 2
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 61
19888: PUSH
19889: EMPTY
19890: LIST
19891: PUSH
19892: LD_INT 33
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: PPUSH
19907: CALL_OW 69
19911: ST_TO_ADDR
// if not tmp then
19912: LD_VAR 0 1
19916: NOT
19917: IFFALSE 19921
// exit ;
19919: GO 19958
// for i in tmp do
19921: LD_ADDR_VAR 0 2
19925: PUSH
19926: LD_VAR 0 1
19930: PUSH
19931: FOR_IN
19932: IFFALSE 19956
// if IsControledBy ( i ) then
19934: LD_VAR 0 2
19938: PPUSH
19939: CALL_OW 312
19943: IFFALSE 19954
// ComUnlink ( i ) ;
19945: LD_VAR 0 2
19949: PPUSH
19950: CALL_OW 136
19954: GO 19931
19956: POP
19957: POP
// end ;
19958: PPOPN 2
19960: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19961: LD_EXP 40
19965: PUSH
19966: LD_EXP 71
19970: AND
19971: IFFALSE 20111
19973: GO 19975
19975: DISABLE
19976: LD_INT 0
19978: PPUSH
19979: PPUSH
// begin ToLua ( displayPowell(); ) ;
19980: LD_STRING displayPowell();
19982: PPUSH
19983: CALL_OW 559
// uc_side := 0 ;
19987: LD_ADDR_OWVAR 20
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// uc_nation := 2 ;
19995: LD_ADDR_OWVAR 21
19999: PUSH
20000: LD_INT 2
20002: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20003: LD_ADDR_OWVAR 37
20007: PUSH
20008: LD_INT 14
20010: ST_TO_ADDR
// vc_engine := engine_siberite ;
20011: LD_ADDR_OWVAR 39
20015: PUSH
20016: LD_INT 3
20018: ST_TO_ADDR
// vc_control := control_apeman ;
20019: LD_ADDR_OWVAR 38
20023: PUSH
20024: LD_INT 5
20026: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20027: LD_ADDR_OWVAR 40
20031: PUSH
20032: LD_INT 29
20034: ST_TO_ADDR
// un := CreateVehicle ;
20035: LD_ADDR_VAR 0 2
20039: PUSH
20040: CALL_OW 45
20044: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20045: LD_VAR 0 2
20049: PPUSH
20050: LD_INT 1
20052: PPUSH
20053: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20057: LD_INT 35
20059: PPUSH
20060: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20064: LD_VAR 0 2
20068: PPUSH
20069: LD_INT 22
20071: PUSH
20072: LD_OWVAR 2
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PPUSH
20081: CALL_OW 69
20085: PPUSH
20086: LD_VAR 0 2
20090: PPUSH
20091: CALL_OW 74
20095: PPUSH
20096: CALL_OW 115
// until IsDead ( un ) ;
20100: LD_VAR 0 2
20104: PPUSH
20105: CALL_OW 301
20109: IFFALSE 20057
// end ;
20111: PPOPN 2
20113: END
// every 0 0$1 trigger StreamModeActive and sStu do
20114: LD_EXP 40
20118: PUSH
20119: LD_EXP 79
20123: AND
20124: IFFALSE 20140
20126: GO 20128
20128: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20129: LD_STRING displayStucuk();
20131: PPUSH
20132: CALL_OW 559
// ResetFog ;
20136: CALL_OW 335
// end ;
20140: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20141: LD_EXP 40
20145: PUSH
20146: LD_EXP 72
20150: AND
20151: IFFALSE 20292
20153: GO 20155
20155: DISABLE
20156: LD_INT 0
20158: PPUSH
20159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20160: LD_ADDR_VAR 0 2
20164: PUSH
20165: LD_INT 22
20167: PUSH
20168: LD_OWVAR 2
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 21
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PPUSH
20191: CALL_OW 69
20195: ST_TO_ADDR
// if not tmp then
20196: LD_VAR 0 2
20200: NOT
20201: IFFALSE 20205
// exit ;
20203: GO 20292
// un := tmp [ rand ( 1 , tmp ) ] ;
20205: LD_ADDR_VAR 0 1
20209: PUSH
20210: LD_VAR 0 2
20214: PUSH
20215: LD_INT 1
20217: PPUSH
20218: LD_VAR 0 2
20222: PPUSH
20223: CALL_OW 12
20227: ARRAY
20228: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20229: LD_VAR 0 1
20233: PPUSH
20234: LD_INT 0
20236: PPUSH
20237: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20241: LD_VAR 0 1
20245: PPUSH
20246: LD_OWVAR 3
20250: PUSH
20251: LD_VAR 0 1
20255: DIFF
20256: PPUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: CALL_OW 74
20266: PPUSH
20267: CALL_OW 115
// wait ( 0 0$20 ) ;
20271: LD_INT 700
20273: PPUSH
20274: CALL_OW 67
// SetSide ( un , your_side ) ;
20278: LD_VAR 0 1
20282: PPUSH
20283: LD_OWVAR 2
20287: PPUSH
20288: CALL_OW 235
// end ;
20292: PPOPN 2
20294: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20295: LD_EXP 40
20299: PUSH
20300: LD_EXP 73
20304: AND
20305: IFFALSE 20411
20307: GO 20309
20309: DISABLE
20310: LD_INT 0
20312: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20313: LD_ADDR_VAR 0 1
20317: PUSH
20318: LD_INT 22
20320: PUSH
20321: LD_OWVAR 2
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 2
20332: PUSH
20333: LD_INT 30
20335: PUSH
20336: LD_INT 0
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 30
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PPUSH
20362: CALL_OW 69
20366: ST_TO_ADDR
// if not depot then
20367: LD_VAR 0 1
20371: NOT
20372: IFFALSE 20376
// exit ;
20374: GO 20411
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20376: LD_VAR 0 1
20380: PUSH
20381: LD_INT 1
20383: ARRAY
20384: PPUSH
20385: CALL_OW 250
20389: PPUSH
20390: LD_VAR 0 1
20394: PUSH
20395: LD_INT 1
20397: ARRAY
20398: PPUSH
20399: CALL_OW 251
20403: PPUSH
20404: LD_INT 70
20406: PPUSH
20407: CALL_OW 495
// end ;
20411: PPOPN 1
20413: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20414: LD_EXP 40
20418: PUSH
20419: LD_EXP 74
20423: AND
20424: IFFALSE 20635
20426: GO 20428
20428: DISABLE
20429: LD_INT 0
20431: PPUSH
20432: PPUSH
20433: PPUSH
20434: PPUSH
20435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20436: LD_ADDR_VAR 0 5
20440: PUSH
20441: LD_INT 22
20443: PUSH
20444: LD_OWVAR 2
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 21
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PPUSH
20467: CALL_OW 69
20471: ST_TO_ADDR
// if not tmp then
20472: LD_VAR 0 5
20476: NOT
20477: IFFALSE 20481
// exit ;
20479: GO 20635
// for i in tmp do
20481: LD_ADDR_VAR 0 1
20485: PUSH
20486: LD_VAR 0 5
20490: PUSH
20491: FOR_IN
20492: IFFALSE 20633
// begin d := rand ( 0 , 5 ) ;
20494: LD_ADDR_VAR 0 4
20498: PUSH
20499: LD_INT 0
20501: PPUSH
20502: LD_INT 5
20504: PPUSH
20505: CALL_OW 12
20509: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20510: LD_ADDR_VAR 0 2
20514: PUSH
20515: LD_VAR 0 1
20519: PPUSH
20520: CALL_OW 250
20524: PPUSH
20525: LD_VAR 0 4
20529: PPUSH
20530: LD_INT 3
20532: PPUSH
20533: LD_INT 12
20535: PPUSH
20536: CALL_OW 12
20540: PPUSH
20541: CALL_OW 272
20545: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20546: LD_ADDR_VAR 0 3
20550: PUSH
20551: LD_VAR 0 1
20555: PPUSH
20556: CALL_OW 251
20560: PPUSH
20561: LD_VAR 0 4
20565: PPUSH
20566: LD_INT 3
20568: PPUSH
20569: LD_INT 12
20571: PPUSH
20572: CALL_OW 12
20576: PPUSH
20577: CALL_OW 273
20581: ST_TO_ADDR
// if ValidHex ( x , y ) then
20582: LD_VAR 0 2
20586: PPUSH
20587: LD_VAR 0 3
20591: PPUSH
20592: CALL_OW 488
20596: IFFALSE 20631
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20598: LD_VAR 0 1
20602: PPUSH
20603: LD_VAR 0 2
20607: PPUSH
20608: LD_VAR 0 3
20612: PPUSH
20613: LD_INT 3
20615: PPUSH
20616: LD_INT 6
20618: PPUSH
20619: CALL_OW 12
20623: PPUSH
20624: LD_INT 1
20626: PPUSH
20627: CALL_OW 483
// end ;
20631: GO 20491
20633: POP
20634: POP
// end ;
20635: PPOPN 5
20637: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20638: LD_EXP 40
20642: PUSH
20643: LD_EXP 75
20647: AND
20648: IFFALSE 20742
20650: GO 20652
20652: DISABLE
20653: LD_INT 0
20655: PPUSH
20656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20657: LD_ADDR_VAR 0 2
20661: PUSH
20662: LD_INT 22
20664: PUSH
20665: LD_OWVAR 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 32
20676: PUSH
20677: LD_INT 1
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 21
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: PPUSH
20699: CALL_OW 69
20703: ST_TO_ADDR
// if not tmp then
20704: LD_VAR 0 2
20708: NOT
20709: IFFALSE 20713
// exit ;
20711: GO 20742
// for i in tmp do
20713: LD_ADDR_VAR 0 1
20717: PUSH
20718: LD_VAR 0 2
20722: PUSH
20723: FOR_IN
20724: IFFALSE 20740
// SetFuel ( i , 0 ) ;
20726: LD_VAR 0 1
20730: PPUSH
20731: LD_INT 0
20733: PPUSH
20734: CALL_OW 240
20738: GO 20723
20740: POP
20741: POP
// end ;
20742: PPOPN 2
20744: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20745: LD_EXP 40
20749: PUSH
20750: LD_EXP 76
20754: AND
20755: IFFALSE 20821
20757: GO 20759
20759: DISABLE
20760: LD_INT 0
20762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20763: LD_ADDR_VAR 0 1
20767: PUSH
20768: LD_INT 22
20770: PUSH
20771: LD_OWVAR 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 30
20782: PUSH
20783: LD_INT 29
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PPUSH
20794: CALL_OW 69
20798: ST_TO_ADDR
// if not tmp then
20799: LD_VAR 0 1
20803: NOT
20804: IFFALSE 20808
// exit ;
20806: GO 20821
// DestroyUnit ( tmp [ 1 ] ) ;
20808: LD_VAR 0 1
20812: PUSH
20813: LD_INT 1
20815: ARRAY
20816: PPUSH
20817: CALL_OW 65
// end ;
20821: PPOPN 1
20823: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20824: LD_EXP 40
20828: PUSH
20829: LD_EXP 78
20833: AND
20834: IFFALSE 20963
20836: GO 20838
20838: DISABLE
20839: LD_INT 0
20841: PPUSH
// begin uc_side := 0 ;
20842: LD_ADDR_OWVAR 20
20846: PUSH
20847: LD_INT 0
20849: ST_TO_ADDR
// uc_nation := nation_arabian ;
20850: LD_ADDR_OWVAR 21
20854: PUSH
20855: LD_INT 2
20857: ST_TO_ADDR
// hc_gallery :=  ;
20858: LD_ADDR_OWVAR 33
20862: PUSH
20863: LD_STRING 
20865: ST_TO_ADDR
// hc_name :=  ;
20866: LD_ADDR_OWVAR 26
20870: PUSH
20871: LD_STRING 
20873: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20874: LD_INT 1
20876: PPUSH
20877: LD_INT 11
20879: PPUSH
20880: LD_INT 10
20882: PPUSH
20883: CALL_OW 380
// un := CreateHuman ;
20887: LD_ADDR_VAR 0 1
20891: PUSH
20892: CALL_OW 44
20896: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20897: LD_VAR 0 1
20901: PPUSH
20902: LD_INT 1
20904: PPUSH
20905: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20909: LD_INT 35
20911: PPUSH
20912: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20916: LD_VAR 0 1
20920: PPUSH
20921: LD_INT 22
20923: PUSH
20924: LD_OWVAR 2
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PPUSH
20933: CALL_OW 69
20937: PPUSH
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 74
20947: PPUSH
20948: CALL_OW 115
// until IsDead ( un ) ;
20952: LD_VAR 0 1
20956: PPUSH
20957: CALL_OW 301
20961: IFFALSE 20909
// end ;
20963: PPOPN 1
20965: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20966: LD_EXP 40
20970: PUSH
20971: LD_EXP 80
20975: AND
20976: IFFALSE 20988
20978: GO 20980
20980: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20981: LD_STRING earthquake(getX(game), 0, 32)
20983: PPUSH
20984: CALL_OW 559
20988: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20989: LD_EXP 40
20993: PUSH
20994: LD_EXP 81
20998: AND
20999: IFFALSE 21090
21001: GO 21003
21003: DISABLE
21004: LD_INT 0
21006: PPUSH
// begin enable ;
21007: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21008: LD_ADDR_VAR 0 1
21012: PUSH
21013: LD_INT 22
21015: PUSH
21016: LD_OWVAR 2
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 21
21027: PUSH
21028: LD_INT 2
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 33
21037: PUSH
21038: LD_INT 3
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: PPUSH
21050: CALL_OW 69
21054: ST_TO_ADDR
// if not tmp then
21055: LD_VAR 0 1
21059: NOT
21060: IFFALSE 21064
// exit ;
21062: GO 21090
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21064: LD_VAR 0 1
21068: PUSH
21069: LD_INT 1
21071: PPUSH
21072: LD_VAR 0 1
21076: PPUSH
21077: CALL_OW 12
21081: ARRAY
21082: PPUSH
21083: LD_INT 1
21085: PPUSH
21086: CALL_OW 234
// end ;
21090: PPOPN 1
21092: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21093: LD_EXP 40
21097: PUSH
21098: LD_EXP 82
21102: AND
21103: IFFALSE 21244
21105: GO 21107
21107: DISABLE
21108: LD_INT 0
21110: PPUSH
21111: PPUSH
21112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21113: LD_ADDR_VAR 0 3
21117: PUSH
21118: LD_INT 22
21120: PUSH
21121: LD_OWVAR 2
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 25
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PPUSH
21144: CALL_OW 69
21148: ST_TO_ADDR
// if not tmp then
21149: LD_VAR 0 3
21153: NOT
21154: IFFALSE 21158
// exit ;
21156: GO 21244
// un := tmp [ rand ( 1 , tmp ) ] ;
21158: LD_ADDR_VAR 0 2
21162: PUSH
21163: LD_VAR 0 3
21167: PUSH
21168: LD_INT 1
21170: PPUSH
21171: LD_VAR 0 3
21175: PPUSH
21176: CALL_OW 12
21180: ARRAY
21181: ST_TO_ADDR
// if Crawls ( un ) then
21182: LD_VAR 0 2
21186: PPUSH
21187: CALL_OW 318
21191: IFFALSE 21202
// ComWalk ( un ) ;
21193: LD_VAR 0 2
21197: PPUSH
21198: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21202: LD_VAR 0 2
21206: PPUSH
21207: LD_INT 9
21209: PPUSH
21210: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21214: LD_INT 28
21216: PPUSH
21217: LD_OWVAR 2
21221: PPUSH
21222: LD_INT 2
21224: PPUSH
21225: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21229: LD_INT 29
21231: PPUSH
21232: LD_OWVAR 2
21236: PPUSH
21237: LD_INT 2
21239: PPUSH
21240: CALL_OW 322
// end ;
21244: PPOPN 3
21246: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21247: LD_EXP 40
21251: PUSH
21252: LD_EXP 83
21256: AND
21257: IFFALSE 21368
21259: GO 21261
21261: DISABLE
21262: LD_INT 0
21264: PPUSH
21265: PPUSH
21266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21267: LD_ADDR_VAR 0 3
21271: PUSH
21272: LD_INT 22
21274: PUSH
21275: LD_OWVAR 2
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 25
21286: PUSH
21287: LD_INT 1
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PPUSH
21298: CALL_OW 69
21302: ST_TO_ADDR
// if not tmp then
21303: LD_VAR 0 3
21307: NOT
21308: IFFALSE 21312
// exit ;
21310: GO 21368
// un := tmp [ rand ( 1 , tmp ) ] ;
21312: LD_ADDR_VAR 0 2
21316: PUSH
21317: LD_VAR 0 3
21321: PUSH
21322: LD_INT 1
21324: PPUSH
21325: LD_VAR 0 3
21329: PPUSH
21330: CALL_OW 12
21334: ARRAY
21335: ST_TO_ADDR
// if Crawls ( un ) then
21336: LD_VAR 0 2
21340: PPUSH
21341: CALL_OW 318
21345: IFFALSE 21356
// ComWalk ( un ) ;
21347: LD_VAR 0 2
21351: PPUSH
21352: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21356: LD_VAR 0 2
21360: PPUSH
21361: LD_INT 8
21363: PPUSH
21364: CALL_OW 336
// end ;
21368: PPOPN 3
21370: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21371: LD_EXP 40
21375: PUSH
21376: LD_EXP 84
21380: AND
21381: IFFALSE 21525
21383: GO 21385
21385: DISABLE
21386: LD_INT 0
21388: PPUSH
21389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21390: LD_ADDR_VAR 0 2
21394: PUSH
21395: LD_INT 22
21397: PUSH
21398: LD_OWVAR 2
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 21
21409: PUSH
21410: LD_INT 2
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 2
21419: PUSH
21420: LD_INT 34
21422: PUSH
21423: LD_INT 12
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 34
21432: PUSH
21433: LD_INT 51
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 34
21442: PUSH
21443: LD_INT 32
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: PPUSH
21461: CALL_OW 69
21465: ST_TO_ADDR
// if not tmp then
21466: LD_VAR 0 2
21470: NOT
21471: IFFALSE 21475
// exit ;
21473: GO 21525
// for i in tmp do
21475: LD_ADDR_VAR 0 1
21479: PUSH
21480: LD_VAR 0 2
21484: PUSH
21485: FOR_IN
21486: IFFALSE 21523
// if GetCargo ( i , mat_artifact ) = 0 then
21488: LD_VAR 0 1
21492: PPUSH
21493: LD_INT 4
21495: PPUSH
21496: CALL_OW 289
21500: PUSH
21501: LD_INT 0
21503: EQUAL
21504: IFFALSE 21521
// SetCargo ( i , mat_siberit , 100 ) ;
21506: LD_VAR 0 1
21510: PPUSH
21511: LD_INT 3
21513: PPUSH
21514: LD_INT 100
21516: PPUSH
21517: CALL_OW 290
21521: GO 21485
21523: POP
21524: POP
// end ;
21525: PPOPN 2
21527: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21528: LD_EXP 40
21532: PUSH
21533: LD_EXP 85
21537: AND
21538: IFFALSE 21721
21540: GO 21542
21542: DISABLE
21543: LD_INT 0
21545: PPUSH
21546: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21547: LD_ADDR_VAR 0 2
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_OWVAR 2
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PPUSH
21564: CALL_OW 69
21568: ST_TO_ADDR
// if not tmp then
21569: LD_VAR 0 2
21573: NOT
21574: IFFALSE 21578
// exit ;
21576: GO 21721
// for i := 1 to 2 do
21578: LD_ADDR_VAR 0 1
21582: PUSH
21583: DOUBLE
21584: LD_INT 1
21586: DEC
21587: ST_TO_ADDR
21588: LD_INT 2
21590: PUSH
21591: FOR_TO
21592: IFFALSE 21719
// begin uc_side := your_side ;
21594: LD_ADDR_OWVAR 20
21598: PUSH
21599: LD_OWVAR 2
21603: ST_TO_ADDR
// uc_nation := nation_american ;
21604: LD_ADDR_OWVAR 21
21608: PUSH
21609: LD_INT 1
21611: ST_TO_ADDR
// vc_chassis := us_morphling ;
21612: LD_ADDR_OWVAR 37
21616: PUSH
21617: LD_INT 5
21619: ST_TO_ADDR
// vc_engine := engine_siberite ;
21620: LD_ADDR_OWVAR 39
21624: PUSH
21625: LD_INT 3
21627: ST_TO_ADDR
// vc_control := control_computer ;
21628: LD_ADDR_OWVAR 38
21632: PUSH
21633: LD_INT 3
21635: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21636: LD_ADDR_OWVAR 40
21640: PUSH
21641: LD_INT 10
21643: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21644: LD_VAR 0 2
21648: PUSH
21649: LD_INT 1
21651: ARRAY
21652: PPUSH
21653: CALL_OW 310
21657: NOT
21658: IFFALSE 21705
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21660: CALL_OW 45
21664: PPUSH
21665: LD_VAR 0 2
21669: PUSH
21670: LD_INT 1
21672: ARRAY
21673: PPUSH
21674: CALL_OW 250
21678: PPUSH
21679: LD_VAR 0 2
21683: PUSH
21684: LD_INT 1
21686: ARRAY
21687: PPUSH
21688: CALL_OW 251
21692: PPUSH
21693: LD_INT 12
21695: PPUSH
21696: LD_INT 1
21698: PPUSH
21699: CALL_OW 50
21703: GO 21717
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21705: CALL_OW 45
21709: PPUSH
21710: LD_INT 1
21712: PPUSH
21713: CALL_OW 51
// end ;
21717: GO 21591
21719: POP
21720: POP
// end ;
21721: PPOPN 2
21723: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21724: LD_EXP 40
21728: PUSH
21729: LD_EXP 86
21733: AND
21734: IFFALSE 21956
21736: GO 21738
21738: DISABLE
21739: LD_INT 0
21741: PPUSH
21742: PPUSH
21743: PPUSH
21744: PPUSH
21745: PPUSH
21746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21747: LD_ADDR_VAR 0 6
21751: PUSH
21752: LD_INT 22
21754: PUSH
21755: LD_OWVAR 2
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 21
21766: PUSH
21767: LD_INT 1
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 3
21776: PUSH
21777: LD_INT 23
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: PPUSH
21796: CALL_OW 69
21800: ST_TO_ADDR
// if not tmp then
21801: LD_VAR 0 6
21805: NOT
21806: IFFALSE 21810
// exit ;
21808: GO 21956
// s1 := rand ( 1 , 4 ) ;
21810: LD_ADDR_VAR 0 2
21814: PUSH
21815: LD_INT 1
21817: PPUSH
21818: LD_INT 4
21820: PPUSH
21821: CALL_OW 12
21825: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21826: LD_ADDR_VAR 0 4
21830: PUSH
21831: LD_VAR 0 6
21835: PUSH
21836: LD_INT 1
21838: ARRAY
21839: PPUSH
21840: LD_VAR 0 2
21844: PPUSH
21845: CALL_OW 259
21849: ST_TO_ADDR
// if s1 = 1 then
21850: LD_VAR 0 2
21854: PUSH
21855: LD_INT 1
21857: EQUAL
21858: IFFALSE 21878
// s2 := rand ( 2 , 4 ) else
21860: LD_ADDR_VAR 0 3
21864: PUSH
21865: LD_INT 2
21867: PPUSH
21868: LD_INT 4
21870: PPUSH
21871: CALL_OW 12
21875: ST_TO_ADDR
21876: GO 21886
// s2 := 1 ;
21878: LD_ADDR_VAR 0 3
21882: PUSH
21883: LD_INT 1
21885: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21886: LD_ADDR_VAR 0 5
21890: PUSH
21891: LD_VAR 0 6
21895: PUSH
21896: LD_INT 1
21898: ARRAY
21899: PPUSH
21900: LD_VAR 0 3
21904: PPUSH
21905: CALL_OW 259
21909: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21910: LD_VAR 0 6
21914: PUSH
21915: LD_INT 1
21917: ARRAY
21918: PPUSH
21919: LD_VAR 0 2
21923: PPUSH
21924: LD_VAR 0 5
21928: PPUSH
21929: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21933: LD_VAR 0 6
21937: PUSH
21938: LD_INT 1
21940: ARRAY
21941: PPUSH
21942: LD_VAR 0 3
21946: PPUSH
21947: LD_VAR 0 4
21951: PPUSH
21952: CALL_OW 237
// end ;
21956: PPOPN 6
21958: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21959: LD_EXP 40
21963: PUSH
21964: LD_EXP 87
21968: AND
21969: IFFALSE 22048
21971: GO 21973
21973: DISABLE
21974: LD_INT 0
21976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21977: LD_ADDR_VAR 0 1
21981: PUSH
21982: LD_INT 22
21984: PUSH
21985: LD_OWVAR 2
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 30
21996: PUSH
21997: LD_INT 3
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PPUSH
22008: CALL_OW 69
22012: ST_TO_ADDR
// if not tmp then
22013: LD_VAR 0 1
22017: NOT
22018: IFFALSE 22022
// exit ;
22020: GO 22048
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22022: LD_VAR 0 1
22026: PUSH
22027: LD_INT 1
22029: PPUSH
22030: LD_VAR 0 1
22034: PPUSH
22035: CALL_OW 12
22039: ARRAY
22040: PPUSH
22041: LD_INT 1
22043: PPUSH
22044: CALL_OW 234
// end ;
22048: PPOPN 1
22050: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22051: LD_EXP 40
22055: PUSH
22056: LD_EXP 88
22060: AND
22061: IFFALSE 22173
22063: GO 22065
22065: DISABLE
22066: LD_INT 0
22068: PPUSH
22069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22070: LD_ADDR_VAR 0 2
22074: PUSH
22075: LD_INT 22
22077: PUSH
22078: LD_OWVAR 2
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: LD_INT 30
22092: PUSH
22093: LD_INT 27
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 30
22102: PUSH
22103: LD_INT 26
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 30
22112: PUSH
22113: LD_INT 28
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PPUSH
22130: CALL_OW 69
22134: ST_TO_ADDR
// if not tmp then
22135: LD_VAR 0 2
22139: NOT
22140: IFFALSE 22144
// exit ;
22142: GO 22173
// for i in tmp do
22144: LD_ADDR_VAR 0 1
22148: PUSH
22149: LD_VAR 0 2
22153: PUSH
22154: FOR_IN
22155: IFFALSE 22171
// SetLives ( i , 1 ) ;
22157: LD_VAR 0 1
22161: PPUSH
22162: LD_INT 1
22164: PPUSH
22165: CALL_OW 234
22169: GO 22154
22171: POP
22172: POP
// end ;
22173: PPOPN 2
22175: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22176: LD_EXP 40
22180: PUSH
22181: LD_EXP 89
22185: AND
22186: IFFALSE 22473
22188: GO 22190
22190: DISABLE
22191: LD_INT 0
22193: PPUSH
22194: PPUSH
22195: PPUSH
// begin i := rand ( 1 , 7 ) ;
22196: LD_ADDR_VAR 0 1
22200: PUSH
22201: LD_INT 1
22203: PPUSH
22204: LD_INT 7
22206: PPUSH
22207: CALL_OW 12
22211: ST_TO_ADDR
// case i of 1 :
22212: LD_VAR 0 1
22216: PUSH
22217: LD_INT 1
22219: DOUBLE
22220: EQUAL
22221: IFTRUE 22225
22223: GO 22235
22225: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22226: LD_STRING earthquake(getX(game), 0, 32)
22228: PPUSH
22229: CALL_OW 559
22233: GO 22473
22235: LD_INT 2
22237: DOUBLE
22238: EQUAL
22239: IFTRUE 22243
22241: GO 22257
22243: POP
// begin ToLua ( displayStucuk(); ) ;
22244: LD_STRING displayStucuk();
22246: PPUSH
22247: CALL_OW 559
// ResetFog ;
22251: CALL_OW 335
// end ; 3 :
22255: GO 22473
22257: LD_INT 3
22259: DOUBLE
22260: EQUAL
22261: IFTRUE 22265
22263: GO 22369
22265: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22266: LD_ADDR_VAR 0 2
22270: PUSH
22271: LD_INT 22
22273: PUSH
22274: LD_OWVAR 2
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 25
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PPUSH
22297: CALL_OW 69
22301: ST_TO_ADDR
// if not tmp then
22302: LD_VAR 0 2
22306: NOT
22307: IFFALSE 22311
// exit ;
22309: GO 22473
// un := tmp [ rand ( 1 , tmp ) ] ;
22311: LD_ADDR_VAR 0 3
22315: PUSH
22316: LD_VAR 0 2
22320: PUSH
22321: LD_INT 1
22323: PPUSH
22324: LD_VAR 0 2
22328: PPUSH
22329: CALL_OW 12
22333: ARRAY
22334: ST_TO_ADDR
// if Crawls ( un ) then
22335: LD_VAR 0 3
22339: PPUSH
22340: CALL_OW 318
22344: IFFALSE 22355
// ComWalk ( un ) ;
22346: LD_VAR 0 3
22350: PPUSH
22351: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22355: LD_VAR 0 3
22359: PPUSH
22360: LD_INT 8
22362: PPUSH
22363: CALL_OW 336
// end ; 4 :
22367: GO 22473
22369: LD_INT 4
22371: DOUBLE
22372: EQUAL
22373: IFTRUE 22377
22375: GO 22451
22377: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22378: LD_ADDR_VAR 0 2
22382: PUSH
22383: LD_INT 22
22385: PUSH
22386: LD_OWVAR 2
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 30
22397: PUSH
22398: LD_INT 29
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PPUSH
22409: CALL_OW 69
22413: ST_TO_ADDR
// if not tmp then
22414: LD_VAR 0 2
22418: NOT
22419: IFFALSE 22423
// exit ;
22421: GO 22473
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22423: LD_VAR 0 2
22427: PUSH
22428: LD_INT 1
22430: ARRAY
22431: PPUSH
22432: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22436: LD_VAR 0 2
22440: PUSH
22441: LD_INT 1
22443: ARRAY
22444: PPUSH
22445: CALL_OW 65
// end ; 5 .. 7 :
22449: GO 22473
22451: LD_INT 5
22453: DOUBLE
22454: GREATEREQUAL
22455: IFFALSE 22463
22457: LD_INT 7
22459: DOUBLE
22460: LESSEQUAL
22461: IFTRUE 22465
22463: GO 22472
22465: POP
// StreamSibBomb ; end ;
22466: CALL 18710 0 0
22470: GO 22473
22472: POP
// end ;
22473: PPOPN 3
22475: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22476: LD_EXP 40
22480: PUSH
22481: LD_EXP 90
22485: AND
22486: IFFALSE 22642
22488: GO 22490
22490: DISABLE
22491: LD_INT 0
22493: PPUSH
22494: PPUSH
22495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22496: LD_ADDR_VAR 0 2
22500: PUSH
22501: LD_INT 81
22503: PUSH
22504: LD_OWVAR 2
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 2
22515: PUSH
22516: LD_INT 21
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: LIST
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PPUSH
22545: CALL_OW 69
22549: ST_TO_ADDR
// if not tmp then
22550: LD_VAR 0 2
22554: NOT
22555: IFFALSE 22559
// exit ;
22557: GO 22642
// p := 0 ;
22559: LD_ADDR_VAR 0 3
22563: PUSH
22564: LD_INT 0
22566: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22567: LD_INT 35
22569: PPUSH
22570: CALL_OW 67
// p := p + 1 ;
22574: LD_ADDR_VAR 0 3
22578: PUSH
22579: LD_VAR 0 3
22583: PUSH
22584: LD_INT 1
22586: PLUS
22587: ST_TO_ADDR
// for i in tmp do
22588: LD_ADDR_VAR 0 1
22592: PUSH
22593: LD_VAR 0 2
22597: PUSH
22598: FOR_IN
22599: IFFALSE 22630
// if GetLives ( i ) < 1000 then
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 256
22610: PUSH
22611: LD_INT 1000
22613: LESS
22614: IFFALSE 22628
// SetLives ( i , 1000 ) ;
22616: LD_VAR 0 1
22620: PPUSH
22621: LD_INT 1000
22623: PPUSH
22624: CALL_OW 234
22628: GO 22598
22630: POP
22631: POP
// until p > 20 ;
22632: LD_VAR 0 3
22636: PUSH
22637: LD_INT 20
22639: GREATER
22640: IFFALSE 22567
// end ;
22642: PPOPN 3
22644: END
// every 0 0$1 trigger StreamModeActive and sTime do
22645: LD_EXP 40
22649: PUSH
22650: LD_EXP 91
22654: AND
22655: IFFALSE 22690
22657: GO 22659
22659: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22660: LD_INT 28
22662: PPUSH
22663: LD_OWVAR 2
22667: PPUSH
22668: LD_INT 2
22670: PPUSH
22671: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22675: LD_INT 30
22677: PPUSH
22678: LD_OWVAR 2
22682: PPUSH
22683: LD_INT 2
22685: PPUSH
22686: CALL_OW 322
// end ;
22690: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22691: LD_EXP 40
22695: PUSH
22696: LD_EXP 92
22700: AND
22701: IFFALSE 22822
22703: GO 22705
22705: DISABLE
22706: LD_INT 0
22708: PPUSH
22709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22710: LD_ADDR_VAR 0 2
22714: PUSH
22715: LD_INT 22
22717: PUSH
22718: LD_OWVAR 2
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 21
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 3
22739: PUSH
22740: LD_INT 23
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: LIST
22758: PPUSH
22759: CALL_OW 69
22763: ST_TO_ADDR
// if not tmp then
22764: LD_VAR 0 2
22768: NOT
22769: IFFALSE 22773
// exit ;
22771: GO 22822
// for i in tmp do
22773: LD_ADDR_VAR 0 1
22777: PUSH
22778: LD_VAR 0 2
22782: PUSH
22783: FOR_IN
22784: IFFALSE 22820
// begin if Crawls ( i ) then
22786: LD_VAR 0 1
22790: PPUSH
22791: CALL_OW 318
22795: IFFALSE 22806
// ComWalk ( i ) ;
22797: LD_VAR 0 1
22801: PPUSH
22802: CALL_OW 138
// SetClass ( i , 2 ) ;
22806: LD_VAR 0 1
22810: PPUSH
22811: LD_INT 2
22813: PPUSH
22814: CALL_OW 336
// end ;
22818: GO 22783
22820: POP
22821: POP
// end ;
22822: PPOPN 2
22824: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22825: LD_EXP 40
22829: PUSH
22830: LD_EXP 93
22834: AND
22835: IFFALSE 23123
22837: GO 22839
22839: DISABLE
22840: LD_INT 0
22842: PPUSH
22843: PPUSH
22844: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22845: LD_OWVAR 2
22849: PPUSH
22850: LD_INT 9
22852: PPUSH
22853: LD_INT 1
22855: PPUSH
22856: LD_INT 1
22858: PPUSH
22859: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22863: LD_INT 9
22865: PPUSH
22866: LD_OWVAR 2
22870: PPUSH
22871: CALL_OW 343
// uc_side := 9 ;
22875: LD_ADDR_OWVAR 20
22879: PUSH
22880: LD_INT 9
22882: ST_TO_ADDR
// uc_nation := 2 ;
22883: LD_ADDR_OWVAR 21
22887: PUSH
22888: LD_INT 2
22890: ST_TO_ADDR
// hc_name := Dark Warrior ;
22891: LD_ADDR_OWVAR 26
22895: PUSH
22896: LD_STRING Dark Warrior
22898: ST_TO_ADDR
// hc_gallery :=  ;
22899: LD_ADDR_OWVAR 33
22903: PUSH
22904: LD_STRING 
22906: ST_TO_ADDR
// hc_noskilllimit := true ;
22907: LD_ADDR_OWVAR 76
22911: PUSH
22912: LD_INT 1
22914: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22915: LD_ADDR_OWVAR 31
22919: PUSH
22920: LD_INT 30
22922: PUSH
22923: LD_INT 30
22925: PUSH
22926: LD_INT 30
22928: PUSH
22929: LD_INT 30
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: ST_TO_ADDR
// un := CreateHuman ;
22938: LD_ADDR_VAR 0 3
22942: PUSH
22943: CALL_OW 44
22947: ST_TO_ADDR
// hc_noskilllimit := false ;
22948: LD_ADDR_OWVAR 76
22952: PUSH
22953: LD_INT 0
22955: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22956: LD_VAR 0 3
22960: PPUSH
22961: LD_INT 1
22963: PPUSH
22964: CALL_OW 51
// ToLua ( playRanger() ) ;
22968: LD_STRING playRanger()
22970: PPUSH
22971: CALL_OW 559
// p := 0 ;
22975: LD_ADDR_VAR 0 2
22979: PUSH
22980: LD_INT 0
22982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22983: LD_INT 35
22985: PPUSH
22986: CALL_OW 67
// p := p + 1 ;
22990: LD_ADDR_VAR 0 2
22994: PUSH
22995: LD_VAR 0 2
22999: PUSH
23000: LD_INT 1
23002: PLUS
23003: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23004: LD_VAR 0 3
23008: PPUSH
23009: CALL_OW 256
23013: PUSH
23014: LD_INT 1000
23016: LESS
23017: IFFALSE 23031
// SetLives ( un , 1000 ) ;
23019: LD_VAR 0 3
23023: PPUSH
23024: LD_INT 1000
23026: PPUSH
23027: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23031: LD_VAR 0 3
23035: PPUSH
23036: LD_INT 81
23038: PUSH
23039: LD_OWVAR 2
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 91
23050: PUSH
23051: LD_VAR 0 3
23055: PUSH
23056: LD_INT 30
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PPUSH
23068: CALL_OW 69
23072: PPUSH
23073: LD_VAR 0 3
23077: PPUSH
23078: CALL_OW 74
23082: PPUSH
23083: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23087: LD_VAR 0 2
23091: PUSH
23092: LD_INT 80
23094: GREATER
23095: PUSH
23096: LD_VAR 0 3
23100: PPUSH
23101: CALL_OW 301
23105: OR
23106: IFFALSE 22983
// if un then
23108: LD_VAR 0 3
23112: IFFALSE 23123
// RemoveUnit ( un ) ;
23114: LD_VAR 0 3
23118: PPUSH
23119: CALL_OW 64
// end ;
23123: PPOPN 3
23125: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23126: LD_EXP 94
23130: IFFALSE 23246
23132: GO 23134
23134: DISABLE
23135: LD_INT 0
23137: PPUSH
23138: PPUSH
23139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23140: LD_ADDR_VAR 0 2
23144: PUSH
23145: LD_INT 81
23147: PUSH
23148: LD_OWVAR 2
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 21
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PPUSH
23171: CALL_OW 69
23175: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23176: LD_STRING playComputer()
23178: PPUSH
23179: CALL_OW 559
// if not tmp then
23183: LD_VAR 0 2
23187: NOT
23188: IFFALSE 23192
// exit ;
23190: GO 23246
// for i in tmp do
23192: LD_ADDR_VAR 0 1
23196: PUSH
23197: LD_VAR 0 2
23201: PUSH
23202: FOR_IN
23203: IFFALSE 23244
// for j := 1 to 4 do
23205: LD_ADDR_VAR 0 3
23209: PUSH
23210: DOUBLE
23211: LD_INT 1
23213: DEC
23214: ST_TO_ADDR
23215: LD_INT 4
23217: PUSH
23218: FOR_TO
23219: IFFALSE 23240
// SetSkill ( i , j , 10 ) ;
23221: LD_VAR 0 1
23225: PPUSH
23226: LD_VAR 0 3
23230: PPUSH
23231: LD_INT 10
23233: PPUSH
23234: CALL_OW 237
23238: GO 23218
23240: POP
23241: POP
23242: GO 23202
23244: POP
23245: POP
// end ;
23246: PPOPN 3
23248: END
// every 0 0$1 trigger s30 do var i , tmp ;
23249: LD_EXP 95
23253: IFFALSE 23322
23255: GO 23257
23257: DISABLE
23258: LD_INT 0
23260: PPUSH
23261: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23262: LD_ADDR_VAR 0 2
23266: PUSH
23267: LD_INT 22
23269: PUSH
23270: LD_OWVAR 2
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PPUSH
23279: CALL_OW 69
23283: ST_TO_ADDR
// if not tmp then
23284: LD_VAR 0 2
23288: NOT
23289: IFFALSE 23293
// exit ;
23291: GO 23322
// for i in tmp do
23293: LD_ADDR_VAR 0 1
23297: PUSH
23298: LD_VAR 0 2
23302: PUSH
23303: FOR_IN
23304: IFFALSE 23320
// SetLives ( i , 300 ) ;
23306: LD_VAR 0 1
23310: PPUSH
23311: LD_INT 300
23313: PPUSH
23314: CALL_OW 234
23318: GO 23303
23320: POP
23321: POP
// end ;
23322: PPOPN 2
23324: END
// every 0 0$1 trigger s60 do var i , tmp ;
23325: LD_EXP 96
23329: IFFALSE 23398
23331: GO 23333
23333: DISABLE
23334: LD_INT 0
23336: PPUSH
23337: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23338: LD_ADDR_VAR 0 2
23342: PUSH
23343: LD_INT 22
23345: PUSH
23346: LD_OWVAR 2
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PPUSH
23355: CALL_OW 69
23359: ST_TO_ADDR
// if not tmp then
23360: LD_VAR 0 2
23364: NOT
23365: IFFALSE 23369
// exit ;
23367: GO 23398
// for i in tmp do
23369: LD_ADDR_VAR 0 1
23373: PUSH
23374: LD_VAR 0 2
23378: PUSH
23379: FOR_IN
23380: IFFALSE 23396
// SetLives ( i , 600 ) ;
23382: LD_VAR 0 1
23386: PPUSH
23387: LD_INT 600
23389: PPUSH
23390: CALL_OW 234
23394: GO 23379
23396: POP
23397: POP
// end ;
23398: PPOPN 2
23400: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23401: LD_INT 0
23403: PPUSH
// case cmd of 301 :
23404: LD_VAR 0 1
23408: PUSH
23409: LD_INT 301
23411: DOUBLE
23412: EQUAL
23413: IFTRUE 23417
23415: GO 23449
23417: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23418: LD_VAR 0 6
23422: PPUSH
23423: LD_VAR 0 7
23427: PPUSH
23428: LD_VAR 0 8
23432: PPUSH
23433: LD_VAR 0 4
23437: PPUSH
23438: LD_VAR 0 5
23442: PPUSH
23443: CALL 24650 0 5
23447: GO 23570
23449: LD_INT 302
23451: DOUBLE
23452: EQUAL
23453: IFTRUE 23457
23455: GO 23494
23457: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23458: LD_VAR 0 6
23462: PPUSH
23463: LD_VAR 0 7
23467: PPUSH
23468: LD_VAR 0 8
23472: PPUSH
23473: LD_VAR 0 9
23477: PPUSH
23478: LD_VAR 0 4
23482: PPUSH
23483: LD_VAR 0 5
23487: PPUSH
23488: CALL 24741 0 6
23492: GO 23570
23494: LD_INT 303
23496: DOUBLE
23497: EQUAL
23498: IFTRUE 23502
23500: GO 23539
23502: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23503: LD_VAR 0 6
23507: PPUSH
23508: LD_VAR 0 7
23512: PPUSH
23513: LD_VAR 0 8
23517: PPUSH
23518: LD_VAR 0 9
23522: PPUSH
23523: LD_VAR 0 4
23527: PPUSH
23528: LD_VAR 0 5
23532: PPUSH
23533: CALL 23575 0 6
23537: GO 23570
23539: LD_INT 304
23541: DOUBLE
23542: EQUAL
23543: IFTRUE 23547
23545: GO 23569
23547: POP
// hHackTeleport ( unit , x , y ) ; end ;
23548: LD_VAR 0 2
23552: PPUSH
23553: LD_VAR 0 4
23557: PPUSH
23558: LD_VAR 0 5
23562: PPUSH
23563: CALL 25334 0 3
23567: GO 23570
23569: POP
// end ;
23570: LD_VAR 0 12
23574: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23575: LD_INT 0
23577: PPUSH
23578: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23579: LD_VAR 0 1
23583: PUSH
23584: LD_INT 1
23586: LESS
23587: PUSH
23588: LD_VAR 0 1
23592: PUSH
23593: LD_INT 3
23595: GREATER
23596: OR
23597: PUSH
23598: LD_VAR 0 5
23602: PPUSH
23603: LD_VAR 0 6
23607: PPUSH
23608: CALL_OW 428
23612: OR
23613: IFFALSE 23617
// exit ;
23615: GO 24337
// uc_side := your_side ;
23617: LD_ADDR_OWVAR 20
23621: PUSH
23622: LD_OWVAR 2
23626: ST_TO_ADDR
// uc_nation := nation ;
23627: LD_ADDR_OWVAR 21
23631: PUSH
23632: LD_VAR 0 1
23636: ST_TO_ADDR
// bc_level = 1 ;
23637: LD_ADDR_OWVAR 43
23641: PUSH
23642: LD_INT 1
23644: ST_TO_ADDR
// case btype of 1 :
23645: LD_VAR 0 2
23649: PUSH
23650: LD_INT 1
23652: DOUBLE
23653: EQUAL
23654: IFTRUE 23658
23656: GO 23669
23658: POP
// bc_type := b_depot ; 2 :
23659: LD_ADDR_OWVAR 42
23663: PUSH
23664: LD_INT 0
23666: ST_TO_ADDR
23667: GO 24281
23669: LD_INT 2
23671: DOUBLE
23672: EQUAL
23673: IFTRUE 23677
23675: GO 23688
23677: POP
// bc_type := b_warehouse ; 3 :
23678: LD_ADDR_OWVAR 42
23682: PUSH
23683: LD_INT 1
23685: ST_TO_ADDR
23686: GO 24281
23688: LD_INT 3
23690: DOUBLE
23691: EQUAL
23692: IFTRUE 23696
23694: GO 23707
23696: POP
// bc_type := b_lab ; 4 .. 9 :
23697: LD_ADDR_OWVAR 42
23701: PUSH
23702: LD_INT 6
23704: ST_TO_ADDR
23705: GO 24281
23707: LD_INT 4
23709: DOUBLE
23710: GREATEREQUAL
23711: IFFALSE 23719
23713: LD_INT 9
23715: DOUBLE
23716: LESSEQUAL
23717: IFTRUE 23721
23719: GO 23773
23721: POP
// begin bc_type := b_lab_half ;
23722: LD_ADDR_OWVAR 42
23726: PUSH
23727: LD_INT 7
23729: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23730: LD_ADDR_OWVAR 44
23734: PUSH
23735: LD_INT 10
23737: PUSH
23738: LD_INT 11
23740: PUSH
23741: LD_INT 12
23743: PUSH
23744: LD_INT 15
23746: PUSH
23747: LD_INT 14
23749: PUSH
23750: LD_INT 13
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: PUSH
23761: LD_VAR 0 2
23765: PUSH
23766: LD_INT 3
23768: MINUS
23769: ARRAY
23770: ST_TO_ADDR
// end ; 10 .. 13 :
23771: GO 24281
23773: LD_INT 10
23775: DOUBLE
23776: GREATEREQUAL
23777: IFFALSE 23785
23779: LD_INT 13
23781: DOUBLE
23782: LESSEQUAL
23783: IFTRUE 23787
23785: GO 23864
23787: POP
// begin bc_type := b_lab_full ;
23788: LD_ADDR_OWVAR 42
23792: PUSH
23793: LD_INT 8
23795: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23796: LD_ADDR_OWVAR 44
23800: PUSH
23801: LD_INT 10
23803: PUSH
23804: LD_INT 12
23806: PUSH
23807: LD_INT 14
23809: PUSH
23810: LD_INT 13
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: PUSH
23819: LD_VAR 0 2
23823: PUSH
23824: LD_INT 9
23826: MINUS
23827: ARRAY
23828: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23829: LD_ADDR_OWVAR 45
23833: PUSH
23834: LD_INT 11
23836: PUSH
23837: LD_INT 15
23839: PUSH
23840: LD_INT 12
23842: PUSH
23843: LD_INT 15
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: PUSH
23852: LD_VAR 0 2
23856: PUSH
23857: LD_INT 9
23859: MINUS
23860: ARRAY
23861: ST_TO_ADDR
// end ; 14 :
23862: GO 24281
23864: LD_INT 14
23866: DOUBLE
23867: EQUAL
23868: IFTRUE 23872
23870: GO 23883
23872: POP
// bc_type := b_workshop ; 15 :
23873: LD_ADDR_OWVAR 42
23877: PUSH
23878: LD_INT 2
23880: ST_TO_ADDR
23881: GO 24281
23883: LD_INT 15
23885: DOUBLE
23886: EQUAL
23887: IFTRUE 23891
23889: GO 23902
23891: POP
// bc_type := b_factory ; 16 :
23892: LD_ADDR_OWVAR 42
23896: PUSH
23897: LD_INT 3
23899: ST_TO_ADDR
23900: GO 24281
23902: LD_INT 16
23904: DOUBLE
23905: EQUAL
23906: IFTRUE 23910
23908: GO 23921
23910: POP
// bc_type := b_ext_gun ; 17 :
23911: LD_ADDR_OWVAR 42
23915: PUSH
23916: LD_INT 17
23918: ST_TO_ADDR
23919: GO 24281
23921: LD_INT 17
23923: DOUBLE
23924: EQUAL
23925: IFTRUE 23929
23927: GO 23957
23929: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23930: LD_ADDR_OWVAR 42
23934: PUSH
23935: LD_INT 19
23937: PUSH
23938: LD_INT 23
23940: PUSH
23941: LD_INT 19
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: LIST
23948: PUSH
23949: LD_VAR 0 1
23953: ARRAY
23954: ST_TO_ADDR
23955: GO 24281
23957: LD_INT 18
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 23976
23965: POP
// bc_type := b_ext_radar ; 19 :
23966: LD_ADDR_OWVAR 42
23970: PUSH
23971: LD_INT 20
23973: ST_TO_ADDR
23974: GO 24281
23976: LD_INT 19
23978: DOUBLE
23979: EQUAL
23980: IFTRUE 23984
23982: GO 23995
23984: POP
// bc_type := b_ext_radio ; 20 :
23985: LD_ADDR_OWVAR 42
23989: PUSH
23990: LD_INT 22
23992: ST_TO_ADDR
23993: GO 24281
23995: LD_INT 20
23997: DOUBLE
23998: EQUAL
23999: IFTRUE 24003
24001: GO 24014
24003: POP
// bc_type := b_ext_siberium ; 21 :
24004: LD_ADDR_OWVAR 42
24008: PUSH
24009: LD_INT 21
24011: ST_TO_ADDR
24012: GO 24281
24014: LD_INT 21
24016: DOUBLE
24017: EQUAL
24018: IFTRUE 24022
24020: GO 24033
24022: POP
// bc_type := b_ext_computer ; 22 :
24023: LD_ADDR_OWVAR 42
24027: PUSH
24028: LD_INT 24
24030: ST_TO_ADDR
24031: GO 24281
24033: LD_INT 22
24035: DOUBLE
24036: EQUAL
24037: IFTRUE 24041
24039: GO 24052
24041: POP
// bc_type := b_ext_track ; 23 :
24042: LD_ADDR_OWVAR 42
24046: PUSH
24047: LD_INT 16
24049: ST_TO_ADDR
24050: GO 24281
24052: LD_INT 23
24054: DOUBLE
24055: EQUAL
24056: IFTRUE 24060
24058: GO 24071
24060: POP
// bc_type := b_ext_laser ; 24 :
24061: LD_ADDR_OWVAR 42
24065: PUSH
24066: LD_INT 25
24068: ST_TO_ADDR
24069: GO 24281
24071: LD_INT 24
24073: DOUBLE
24074: EQUAL
24075: IFTRUE 24079
24077: GO 24090
24079: POP
// bc_type := b_control_tower ; 25 :
24080: LD_ADDR_OWVAR 42
24084: PUSH
24085: LD_INT 36
24087: ST_TO_ADDR
24088: GO 24281
24090: LD_INT 25
24092: DOUBLE
24093: EQUAL
24094: IFTRUE 24098
24096: GO 24109
24098: POP
// bc_type := b_breastwork ; 26 :
24099: LD_ADDR_OWVAR 42
24103: PUSH
24104: LD_INT 31
24106: ST_TO_ADDR
24107: GO 24281
24109: LD_INT 26
24111: DOUBLE
24112: EQUAL
24113: IFTRUE 24117
24115: GO 24128
24117: POP
// bc_type := b_bunker ; 27 :
24118: LD_ADDR_OWVAR 42
24122: PUSH
24123: LD_INT 32
24125: ST_TO_ADDR
24126: GO 24281
24128: LD_INT 27
24130: DOUBLE
24131: EQUAL
24132: IFTRUE 24136
24134: GO 24147
24136: POP
// bc_type := b_turret ; 28 :
24137: LD_ADDR_OWVAR 42
24141: PUSH
24142: LD_INT 33
24144: ST_TO_ADDR
24145: GO 24281
24147: LD_INT 28
24149: DOUBLE
24150: EQUAL
24151: IFTRUE 24155
24153: GO 24166
24155: POP
// bc_type := b_armoury ; 29 :
24156: LD_ADDR_OWVAR 42
24160: PUSH
24161: LD_INT 4
24163: ST_TO_ADDR
24164: GO 24281
24166: LD_INT 29
24168: DOUBLE
24169: EQUAL
24170: IFTRUE 24174
24172: GO 24185
24174: POP
// bc_type := b_barracks ; 30 :
24175: LD_ADDR_OWVAR 42
24179: PUSH
24180: LD_INT 5
24182: ST_TO_ADDR
24183: GO 24281
24185: LD_INT 30
24187: DOUBLE
24188: EQUAL
24189: IFTRUE 24193
24191: GO 24204
24193: POP
// bc_type := b_solar_power ; 31 :
24194: LD_ADDR_OWVAR 42
24198: PUSH
24199: LD_INT 27
24201: ST_TO_ADDR
24202: GO 24281
24204: LD_INT 31
24206: DOUBLE
24207: EQUAL
24208: IFTRUE 24212
24210: GO 24223
24212: POP
// bc_type := b_oil_power ; 32 :
24213: LD_ADDR_OWVAR 42
24217: PUSH
24218: LD_INT 26
24220: ST_TO_ADDR
24221: GO 24281
24223: LD_INT 32
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24231
24229: GO 24242
24231: POP
// bc_type := b_siberite_power ; 33 :
24232: LD_ADDR_OWVAR 42
24236: PUSH
24237: LD_INT 28
24239: ST_TO_ADDR
24240: GO 24281
24242: LD_INT 33
24244: DOUBLE
24245: EQUAL
24246: IFTRUE 24250
24248: GO 24261
24250: POP
// bc_type := b_oil_mine ; 34 :
24251: LD_ADDR_OWVAR 42
24255: PUSH
24256: LD_INT 29
24258: ST_TO_ADDR
24259: GO 24281
24261: LD_INT 34
24263: DOUBLE
24264: EQUAL
24265: IFTRUE 24269
24267: GO 24280
24269: POP
// bc_type := b_siberite_mine ; end ;
24270: LD_ADDR_OWVAR 42
24274: PUSH
24275: LD_INT 30
24277: ST_TO_ADDR
24278: GO 24281
24280: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24281: LD_ADDR_VAR 0 8
24285: PUSH
24286: LD_VAR 0 5
24290: PPUSH
24291: LD_VAR 0 6
24295: PPUSH
24296: LD_VAR 0 3
24300: PPUSH
24301: CALL_OW 47
24305: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24306: LD_OWVAR 42
24310: PUSH
24311: LD_INT 32
24313: PUSH
24314: LD_INT 33
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: IN
24321: IFFALSE 24337
// PlaceWeaponTurret ( b , weapon ) ;
24323: LD_VAR 0 8
24327: PPUSH
24328: LD_VAR 0 4
24332: PPUSH
24333: CALL_OW 431
// end ;
24337: LD_VAR 0 7
24341: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24342: LD_INT 0
24344: PPUSH
24345: PPUSH
24346: PPUSH
24347: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24348: LD_ADDR_VAR 0 4
24352: PUSH
24353: LD_INT 22
24355: PUSH
24356: LD_OWVAR 2
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 30
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 30
24380: PUSH
24381: LD_INT 1
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PPUSH
24397: CALL_OW 69
24401: ST_TO_ADDR
// if not tmp then
24402: LD_VAR 0 4
24406: NOT
24407: IFFALSE 24411
// exit ;
24409: GO 24470
// for i in tmp do
24411: LD_ADDR_VAR 0 2
24415: PUSH
24416: LD_VAR 0 4
24420: PUSH
24421: FOR_IN
24422: IFFALSE 24468
// for j = 1 to 3 do
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: DOUBLE
24430: LD_INT 1
24432: DEC
24433: ST_TO_ADDR
24434: LD_INT 3
24436: PUSH
24437: FOR_TO
24438: IFFALSE 24464
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24440: LD_VAR 0 2
24444: PPUSH
24445: CALL_OW 274
24449: PPUSH
24450: LD_VAR 0 3
24454: PPUSH
24455: LD_INT 99999
24457: PPUSH
24458: CALL_OW 277
24462: GO 24437
24464: POP
24465: POP
24466: GO 24421
24468: POP
24469: POP
// end ;
24470: LD_VAR 0 1
24474: RET
// export function hHackSetLevel10 ; var i , j ; begin
24475: LD_INT 0
24477: PPUSH
24478: PPUSH
24479: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24480: LD_ADDR_VAR 0 2
24484: PUSH
24485: LD_INT 21
24487: PUSH
24488: LD_INT 1
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: PUSH
24500: FOR_IN
24501: IFFALSE 24553
// if IsSelected ( i ) then
24503: LD_VAR 0 2
24507: PPUSH
24508: CALL_OW 306
24512: IFFALSE 24551
// begin for j := 1 to 4 do
24514: LD_ADDR_VAR 0 3
24518: PUSH
24519: DOUBLE
24520: LD_INT 1
24522: DEC
24523: ST_TO_ADDR
24524: LD_INT 4
24526: PUSH
24527: FOR_TO
24528: IFFALSE 24549
// SetSkill ( i , j , 10 ) ;
24530: LD_VAR 0 2
24534: PPUSH
24535: LD_VAR 0 3
24539: PPUSH
24540: LD_INT 10
24542: PPUSH
24543: CALL_OW 237
24547: GO 24527
24549: POP
24550: POP
// end ;
24551: GO 24500
24553: POP
24554: POP
// end ;
24555: LD_VAR 0 1
24559: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24560: LD_INT 0
24562: PPUSH
24563: PPUSH
24564: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24565: LD_ADDR_VAR 0 2
24569: PUSH
24570: LD_INT 22
24572: PUSH
24573: LD_OWVAR 2
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 21
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PPUSH
24596: CALL_OW 69
24600: PUSH
24601: FOR_IN
24602: IFFALSE 24643
// begin for j := 1 to 4 do
24604: LD_ADDR_VAR 0 3
24608: PUSH
24609: DOUBLE
24610: LD_INT 1
24612: DEC
24613: ST_TO_ADDR
24614: LD_INT 4
24616: PUSH
24617: FOR_TO
24618: IFFALSE 24639
// SetSkill ( i , j , 10 ) ;
24620: LD_VAR 0 2
24624: PPUSH
24625: LD_VAR 0 3
24629: PPUSH
24630: LD_INT 10
24632: PPUSH
24633: CALL_OW 237
24637: GO 24617
24639: POP
24640: POP
// end ;
24641: GO 24601
24643: POP
24644: POP
// end ;
24645: LD_VAR 0 1
24649: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24650: LD_INT 0
24652: PPUSH
// uc_side := your_side ;
24653: LD_ADDR_OWVAR 20
24657: PUSH
24658: LD_OWVAR 2
24662: ST_TO_ADDR
// uc_nation := nation ;
24663: LD_ADDR_OWVAR 21
24667: PUSH
24668: LD_VAR 0 1
24672: ST_TO_ADDR
// InitHc ;
24673: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24677: LD_INT 0
24679: PPUSH
24680: LD_VAR 0 2
24684: PPUSH
24685: LD_VAR 0 3
24689: PPUSH
24690: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24694: LD_VAR 0 4
24698: PPUSH
24699: LD_VAR 0 5
24703: PPUSH
24704: CALL_OW 428
24708: PUSH
24709: LD_INT 0
24711: EQUAL
24712: IFFALSE 24736
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24714: CALL_OW 44
24718: PPUSH
24719: LD_VAR 0 4
24723: PPUSH
24724: LD_VAR 0 5
24728: PPUSH
24729: LD_INT 1
24731: PPUSH
24732: CALL_OW 48
// end ;
24736: LD_VAR 0 6
24740: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24741: LD_INT 0
24743: PPUSH
24744: PPUSH
// uc_side := your_side ;
24745: LD_ADDR_OWVAR 20
24749: PUSH
24750: LD_OWVAR 2
24754: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24755: LD_VAR 0 1
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: LD_INT 2
24765: PUSH
24766: LD_INT 3
24768: PUSH
24769: LD_INT 4
24771: PUSH
24772: LD_INT 5
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: IN
24782: IFFALSE 24794
// uc_nation := nation_american else
24784: LD_ADDR_OWVAR 21
24788: PUSH
24789: LD_INT 1
24791: ST_TO_ADDR
24792: GO 24837
// if chassis in [ 11 , 12 , 13 , 14 ] then
24794: LD_VAR 0 1
24798: PUSH
24799: LD_INT 11
24801: PUSH
24802: LD_INT 12
24804: PUSH
24805: LD_INT 13
24807: PUSH
24808: LD_INT 14
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: IN
24817: IFFALSE 24829
// uc_nation := nation_arabian else
24819: LD_ADDR_OWVAR 21
24823: PUSH
24824: LD_INT 2
24826: ST_TO_ADDR
24827: GO 24837
// uc_nation := nation_russian ;
24829: LD_ADDR_OWVAR 21
24833: PUSH
24834: LD_INT 3
24836: ST_TO_ADDR
// vc_chassis := chassis ;
24837: LD_ADDR_OWVAR 37
24841: PUSH
24842: LD_VAR 0 1
24846: ST_TO_ADDR
// vc_engine := engine ;
24847: LD_ADDR_OWVAR 39
24851: PUSH
24852: LD_VAR 0 2
24856: ST_TO_ADDR
// vc_control := control ;
24857: LD_ADDR_OWVAR 38
24861: PUSH
24862: LD_VAR 0 3
24866: ST_TO_ADDR
// vc_weapon := weapon ;
24867: LD_ADDR_OWVAR 40
24871: PUSH
24872: LD_VAR 0 4
24876: ST_TO_ADDR
// un := CreateVehicle ;
24877: LD_ADDR_VAR 0 8
24881: PUSH
24882: CALL_OW 45
24886: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24887: LD_VAR 0 8
24891: PPUSH
24892: LD_INT 0
24894: PPUSH
24895: LD_INT 5
24897: PPUSH
24898: CALL_OW 12
24902: PPUSH
24903: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24907: LD_VAR 0 8
24911: PPUSH
24912: LD_VAR 0 5
24916: PPUSH
24917: LD_VAR 0 6
24921: PPUSH
24922: LD_INT 1
24924: PPUSH
24925: CALL_OW 48
// end ;
24929: LD_VAR 0 7
24933: RET
// export hInvincible ; every 1 do
24934: GO 24936
24936: DISABLE
// hInvincible := [ ] ;
24937: LD_ADDR_EXP 97
24941: PUSH
24942: EMPTY
24943: ST_TO_ADDR
24944: END
// every 10 do var i ;
24945: GO 24947
24947: DISABLE
24948: LD_INT 0
24950: PPUSH
// begin enable ;
24951: ENABLE
// if not hInvincible then
24952: LD_EXP 97
24956: NOT
24957: IFFALSE 24961
// exit ;
24959: GO 25005
// for i in hInvincible do
24961: LD_ADDR_VAR 0 1
24965: PUSH
24966: LD_EXP 97
24970: PUSH
24971: FOR_IN
24972: IFFALSE 25003
// if GetLives ( i ) < 1000 then
24974: LD_VAR 0 1
24978: PPUSH
24979: CALL_OW 256
24983: PUSH
24984: LD_INT 1000
24986: LESS
24987: IFFALSE 25001
// SetLives ( i , 1000 ) ;
24989: LD_VAR 0 1
24993: PPUSH
24994: LD_INT 1000
24996: PPUSH
24997: CALL_OW 234
25001: GO 24971
25003: POP
25004: POP
// end ;
25005: PPOPN 1
25007: END
// export function hHackInvincible ; var i ; begin
25008: LD_INT 0
25010: PPUSH
25011: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25012: LD_ADDR_VAR 0 2
25016: PUSH
25017: LD_INT 2
25019: PUSH
25020: LD_INT 21
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 21
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: PPUSH
25045: CALL_OW 69
25049: PUSH
25050: FOR_IN
25051: IFFALSE 25112
// if IsSelected ( i ) then
25053: LD_VAR 0 2
25057: PPUSH
25058: CALL_OW 306
25062: IFFALSE 25110
// begin if i in hInvincible then
25064: LD_VAR 0 2
25068: PUSH
25069: LD_EXP 97
25073: IN
25074: IFFALSE 25094
// hInvincible := hInvincible diff i else
25076: LD_ADDR_EXP 97
25080: PUSH
25081: LD_EXP 97
25085: PUSH
25086: LD_VAR 0 2
25090: DIFF
25091: ST_TO_ADDR
25092: GO 25110
// hInvincible := hInvincible union i ;
25094: LD_ADDR_EXP 97
25098: PUSH
25099: LD_EXP 97
25103: PUSH
25104: LD_VAR 0 2
25108: UNION
25109: ST_TO_ADDR
// end ;
25110: GO 25050
25112: POP
25113: POP
// end ;
25114: LD_VAR 0 1
25118: RET
// export function hHackInvisible ; var i , j ; begin
25119: LD_INT 0
25121: PPUSH
25122: PPUSH
25123: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25124: LD_ADDR_VAR 0 2
25128: PUSH
25129: LD_INT 21
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PPUSH
25139: CALL_OW 69
25143: PUSH
25144: FOR_IN
25145: IFFALSE 25169
// if IsSelected ( i ) then
25147: LD_VAR 0 2
25151: PPUSH
25152: CALL_OW 306
25156: IFFALSE 25167
// ComForceInvisible ( i ) ;
25158: LD_VAR 0 2
25162: PPUSH
25163: CALL_OW 496
25167: GO 25144
25169: POP
25170: POP
// end ;
25171: LD_VAR 0 1
25175: RET
// export function hHackChangeYourSide ; begin
25176: LD_INT 0
25178: PPUSH
// if your_side = 8 then
25179: LD_OWVAR 2
25183: PUSH
25184: LD_INT 8
25186: EQUAL
25187: IFFALSE 25199
// your_side := 0 else
25189: LD_ADDR_OWVAR 2
25193: PUSH
25194: LD_INT 0
25196: ST_TO_ADDR
25197: GO 25213
// your_side := your_side + 1 ;
25199: LD_ADDR_OWVAR 2
25203: PUSH
25204: LD_OWVAR 2
25208: PUSH
25209: LD_INT 1
25211: PLUS
25212: ST_TO_ADDR
// end ;
25213: LD_VAR 0 1
25217: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25218: LD_INT 0
25220: PPUSH
25221: PPUSH
25222: PPUSH
// for i in all_units do
25223: LD_ADDR_VAR 0 2
25227: PUSH
25228: LD_OWVAR 3
25232: PUSH
25233: FOR_IN
25234: IFFALSE 25312
// if IsSelected ( i ) then
25236: LD_VAR 0 2
25240: PPUSH
25241: CALL_OW 306
25245: IFFALSE 25310
// begin j := GetSide ( i ) ;
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_VAR 0 2
25256: PPUSH
25257: CALL_OW 255
25261: ST_TO_ADDR
// if j = 8 then
25262: LD_VAR 0 3
25266: PUSH
25267: LD_INT 8
25269: EQUAL
25270: IFFALSE 25282
// j := 0 else
25272: LD_ADDR_VAR 0 3
25276: PUSH
25277: LD_INT 0
25279: ST_TO_ADDR
25280: GO 25296
// j := j + 1 ;
25282: LD_ADDR_VAR 0 3
25286: PUSH
25287: LD_VAR 0 3
25291: PUSH
25292: LD_INT 1
25294: PLUS
25295: ST_TO_ADDR
// SetSide ( i , j ) ;
25296: LD_VAR 0 2
25300: PPUSH
25301: LD_VAR 0 3
25305: PPUSH
25306: CALL_OW 235
// end ;
25310: GO 25233
25312: POP
25313: POP
// end ;
25314: LD_VAR 0 1
25318: RET
// export function hHackFog ; begin
25319: LD_INT 0
25321: PPUSH
// FogOff ( true ) ;
25322: LD_INT 1
25324: PPUSH
25325: CALL_OW 344
// end ;
25329: LD_VAR 0 1
25333: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25334: LD_INT 0
25336: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25337: LD_VAR 0 1
25341: PPUSH
25342: LD_VAR 0 2
25346: PPUSH
25347: LD_VAR 0 3
25351: PPUSH
25352: LD_INT 1
25354: PPUSH
25355: LD_INT 1
25357: PPUSH
25358: CALL_OW 483
// CenterOnXY ( x , y ) ;
25362: LD_VAR 0 2
25366: PPUSH
25367: LD_VAR 0 3
25371: PPUSH
25372: CALL_OW 84
// end ; end_of_file
25376: LD_VAR 0 4
25380: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25381: LD_INT 0
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25387: LD_VAR 0 1
25391: PPUSH
25392: CALL_OW 264
25396: PUSH
25397: LD_EXP 25
25401: EQUAL
25402: IFFALSE 25474
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25404: LD_INT 68
25406: PPUSH
25407: LD_VAR 0 1
25411: PPUSH
25412: CALL_OW 255
25416: PPUSH
25417: CALL_OW 321
25421: PUSH
25422: LD_INT 2
25424: EQUAL
25425: IFFALSE 25437
// eff := 70 else
25427: LD_ADDR_VAR 0 4
25431: PUSH
25432: LD_INT 70
25434: ST_TO_ADDR
25435: GO 25445
// eff := 30 ;
25437: LD_ADDR_VAR 0 4
25441: PUSH
25442: LD_INT 30
25444: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25445: LD_VAR 0 1
25449: PPUSH
25450: CALL_OW 250
25454: PPUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL_OW 251
25464: PPUSH
25465: LD_VAR 0 4
25469: PPUSH
25470: CALL_OW 495
// end ; end ;
25474: LD_VAR 0 2
25478: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25479: LD_INT 0
25481: PPUSH
// end ;
25482: LD_VAR 0 4
25486: RET
// export function SOS_Command ( cmd ) ; begin
25487: LD_INT 0
25489: PPUSH
// end ;
25490: LD_VAR 0 2
25494: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25495: LD_INT 0
25497: PPUSH
// end ;
25498: LD_VAR 0 6
25502: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25503: LD_INT 0
25505: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25506: LD_VAR 0 1
25510: PUSH
25511: LD_INT 250
25513: EQUAL
25514: PUSH
25515: LD_VAR 0 2
25519: PPUSH
25520: CALL_OW 264
25524: PUSH
25525: LD_EXP 28
25529: EQUAL
25530: AND
25531: IFFALSE 25552
// MinerPlaceMine ( unit , x , y ) ;
25533: LD_VAR 0 2
25537: PPUSH
25538: LD_VAR 0 4
25542: PPUSH
25543: LD_VAR 0 5
25547: PPUSH
25548: CALL 27901 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25552: LD_VAR 0 1
25556: PUSH
25557: LD_INT 251
25559: EQUAL
25560: PUSH
25561: LD_VAR 0 2
25565: PPUSH
25566: CALL_OW 264
25570: PUSH
25571: LD_EXP 28
25575: EQUAL
25576: AND
25577: IFFALSE 25598
// MinerDetonateMine ( unit , x , y ) ;
25579: LD_VAR 0 2
25583: PPUSH
25584: LD_VAR 0 4
25588: PPUSH
25589: LD_VAR 0 5
25593: PPUSH
25594: CALL 28178 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25598: LD_VAR 0 1
25602: PUSH
25603: LD_INT 252
25605: EQUAL
25606: PUSH
25607: LD_VAR 0 2
25611: PPUSH
25612: CALL_OW 264
25616: PUSH
25617: LD_EXP 28
25621: EQUAL
25622: AND
25623: IFFALSE 25644
// MinerCreateMinefield ( unit , x , y ) ;
25625: LD_VAR 0 2
25629: PPUSH
25630: LD_VAR 0 4
25634: PPUSH
25635: LD_VAR 0 5
25639: PPUSH
25640: CALL 28595 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25644: LD_VAR 0 1
25648: PUSH
25649: LD_INT 253
25651: EQUAL
25652: PUSH
25653: LD_VAR 0 2
25657: PPUSH
25658: CALL_OW 257
25662: PUSH
25663: LD_INT 5
25665: EQUAL
25666: AND
25667: IFFALSE 25688
// ComBinocular ( unit , x , y ) ;
25669: LD_VAR 0 2
25673: PPUSH
25674: LD_VAR 0 4
25678: PPUSH
25679: LD_VAR 0 5
25683: PPUSH
25684: CALL 28966 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25688: LD_VAR 0 1
25692: PUSH
25693: LD_INT 254
25695: EQUAL
25696: PUSH
25697: LD_VAR 0 2
25701: PPUSH
25702: CALL_OW 264
25706: PUSH
25707: LD_EXP 23
25711: EQUAL
25712: AND
25713: PUSH
25714: LD_VAR 0 3
25718: PPUSH
25719: CALL_OW 263
25723: PUSH
25724: LD_INT 3
25726: EQUAL
25727: AND
25728: IFFALSE 25744
// HackDestroyVehicle ( unit , selectedUnit ) ;
25730: LD_VAR 0 2
25734: PPUSH
25735: LD_VAR 0 3
25739: PPUSH
25740: CALL 27261 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25744: LD_VAR 0 1
25748: PUSH
25749: LD_INT 255
25751: EQUAL
25752: PUSH
25753: LD_VAR 0 2
25757: PPUSH
25758: CALL_OW 264
25762: PUSH
25763: LD_INT 14
25765: PUSH
25766: LD_INT 53
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: IN
25773: AND
25774: PUSH
25775: LD_VAR 0 4
25779: PPUSH
25780: LD_VAR 0 5
25784: PPUSH
25785: CALL_OW 488
25789: AND
25790: IFFALSE 25814
// CutTreeXYR ( unit , x , y , 12 ) ;
25792: LD_VAR 0 2
25796: PPUSH
25797: LD_VAR 0 4
25801: PPUSH
25802: LD_VAR 0 5
25806: PPUSH
25807: LD_INT 12
25809: PPUSH
25810: CALL 25827 0 4
// end ;
25814: LD_VAR 0 6
25818: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25819: LD_INT 0
25821: PPUSH
// end ;
25822: LD_VAR 0 4
25826: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25827: LD_INT 0
25829: PPUSH
25830: PPUSH
25831: PPUSH
25832: PPUSH
25833: PPUSH
25834: PPUSH
25835: PPUSH
25836: PPUSH
25837: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25838: LD_VAR 0 1
25842: NOT
25843: PUSH
25844: LD_VAR 0 2
25848: PPUSH
25849: LD_VAR 0 3
25853: PPUSH
25854: CALL_OW 488
25858: NOT
25859: OR
25860: PUSH
25861: LD_VAR 0 4
25865: NOT
25866: OR
25867: IFFALSE 25871
// exit ;
25869: GO 26211
// list := [ ] ;
25871: LD_ADDR_VAR 0 13
25875: PUSH
25876: EMPTY
25877: ST_TO_ADDR
// if x - r < 0 then
25878: LD_VAR 0 2
25882: PUSH
25883: LD_VAR 0 4
25887: MINUS
25888: PUSH
25889: LD_INT 0
25891: LESS
25892: IFFALSE 25904
// min_x := 0 else
25894: LD_ADDR_VAR 0 7
25898: PUSH
25899: LD_INT 0
25901: ST_TO_ADDR
25902: GO 25920
// min_x := x - r ;
25904: LD_ADDR_VAR 0 7
25908: PUSH
25909: LD_VAR 0 2
25913: PUSH
25914: LD_VAR 0 4
25918: MINUS
25919: ST_TO_ADDR
// if y - r < 0 then
25920: LD_VAR 0 3
25924: PUSH
25925: LD_VAR 0 4
25929: MINUS
25930: PUSH
25931: LD_INT 0
25933: LESS
25934: IFFALSE 25946
// min_y := 0 else
25936: LD_ADDR_VAR 0 8
25940: PUSH
25941: LD_INT 0
25943: ST_TO_ADDR
25944: GO 25962
// min_y := y - r ;
25946: LD_ADDR_VAR 0 8
25950: PUSH
25951: LD_VAR 0 3
25955: PUSH
25956: LD_VAR 0 4
25960: MINUS
25961: ST_TO_ADDR
// max_x := x + r ;
25962: LD_ADDR_VAR 0 9
25966: PUSH
25967: LD_VAR 0 2
25971: PUSH
25972: LD_VAR 0 4
25976: PLUS
25977: ST_TO_ADDR
// max_y := y + r ;
25978: LD_ADDR_VAR 0 10
25982: PUSH
25983: LD_VAR 0 3
25987: PUSH
25988: LD_VAR 0 4
25992: PLUS
25993: ST_TO_ADDR
// for _x = min_x to max_x do
25994: LD_ADDR_VAR 0 11
25998: PUSH
25999: DOUBLE
26000: LD_VAR 0 7
26004: DEC
26005: ST_TO_ADDR
26006: LD_VAR 0 9
26010: PUSH
26011: FOR_TO
26012: IFFALSE 26129
// for _y = min_y to max_y do
26014: LD_ADDR_VAR 0 12
26018: PUSH
26019: DOUBLE
26020: LD_VAR 0 8
26024: DEC
26025: ST_TO_ADDR
26026: LD_VAR 0 10
26030: PUSH
26031: FOR_TO
26032: IFFALSE 26125
// begin if not ValidHex ( _x , _y ) then
26034: LD_VAR 0 11
26038: PPUSH
26039: LD_VAR 0 12
26043: PPUSH
26044: CALL_OW 488
26048: NOT
26049: IFFALSE 26053
// continue ;
26051: GO 26031
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26053: LD_VAR 0 11
26057: PPUSH
26058: LD_VAR 0 12
26062: PPUSH
26063: CALL_OW 351
26067: PUSH
26068: LD_VAR 0 11
26072: PPUSH
26073: LD_VAR 0 12
26077: PPUSH
26078: CALL_OW 554
26082: AND
26083: IFFALSE 26123
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26085: LD_ADDR_VAR 0 13
26089: PUSH
26090: LD_VAR 0 13
26094: PPUSH
26095: LD_VAR 0 13
26099: PUSH
26100: LD_INT 1
26102: PLUS
26103: PPUSH
26104: LD_VAR 0 11
26108: PUSH
26109: LD_VAR 0 12
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PPUSH
26118: CALL_OW 2
26122: ST_TO_ADDR
// end ;
26123: GO 26031
26125: POP
26126: POP
26127: GO 26011
26129: POP
26130: POP
// if not list then
26131: LD_VAR 0 13
26135: NOT
26136: IFFALSE 26140
// exit ;
26138: GO 26211
// for i in list do
26140: LD_ADDR_VAR 0 6
26144: PUSH
26145: LD_VAR 0 13
26149: PUSH
26150: FOR_IN
26151: IFFALSE 26209
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26153: LD_VAR 0 1
26157: PPUSH
26158: LD_STRING M
26160: PUSH
26161: LD_VAR 0 6
26165: PUSH
26166: LD_INT 1
26168: ARRAY
26169: PUSH
26170: LD_VAR 0 6
26174: PUSH
26175: LD_INT 2
26177: ARRAY
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: PUSH
26200: EMPTY
26201: LIST
26202: PPUSH
26203: CALL_OW 447
26207: GO 26150
26209: POP
26210: POP
// end ;
26211: LD_VAR 0 5
26215: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26216: LD_EXP 100
26220: NOT
26221: IFFALSE 26271
26223: GO 26225
26225: DISABLE
// begin initHack := true ;
26226: LD_ADDR_EXP 100
26230: PUSH
26231: LD_INT 1
26233: ST_TO_ADDR
// hackTanks := [ ] ;
26234: LD_ADDR_EXP 101
26238: PUSH
26239: EMPTY
26240: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26241: LD_ADDR_EXP 102
26245: PUSH
26246: EMPTY
26247: ST_TO_ADDR
// hackLimit := 3 ;
26248: LD_ADDR_EXP 103
26252: PUSH
26253: LD_INT 3
26255: ST_TO_ADDR
// hackDist := 12 ;
26256: LD_ADDR_EXP 104
26260: PUSH
26261: LD_INT 12
26263: ST_TO_ADDR
// hackCounter := [ ] ;
26264: LD_ADDR_EXP 105
26268: PUSH
26269: EMPTY
26270: ST_TO_ADDR
// end ;
26271: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26272: LD_EXP 100
26276: PUSH
26277: LD_INT 34
26279: PUSH
26280: LD_EXP 23
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PPUSH
26289: CALL_OW 69
26293: AND
26294: IFFALSE 26549
26296: GO 26298
26298: DISABLE
26299: LD_INT 0
26301: PPUSH
26302: PPUSH
// begin enable ;
26303: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26304: LD_ADDR_VAR 0 1
26308: PUSH
26309: LD_INT 34
26311: PUSH
26312: LD_EXP 23
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PPUSH
26321: CALL_OW 69
26325: PUSH
26326: FOR_IN
26327: IFFALSE 26547
// begin if not i in hackTanks then
26329: LD_VAR 0 1
26333: PUSH
26334: LD_EXP 101
26338: IN
26339: NOT
26340: IFFALSE 26423
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26342: LD_ADDR_EXP 101
26346: PUSH
26347: LD_EXP 101
26351: PPUSH
26352: LD_EXP 101
26356: PUSH
26357: LD_INT 1
26359: PLUS
26360: PPUSH
26361: LD_VAR 0 1
26365: PPUSH
26366: CALL_OW 1
26370: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26371: LD_ADDR_EXP 102
26375: PUSH
26376: LD_EXP 102
26380: PPUSH
26381: LD_EXP 102
26385: PUSH
26386: LD_INT 1
26388: PLUS
26389: PPUSH
26390: EMPTY
26391: PPUSH
26392: CALL_OW 1
26396: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26397: LD_ADDR_EXP 105
26401: PUSH
26402: LD_EXP 105
26406: PPUSH
26407: LD_EXP 105
26411: PUSH
26412: LD_INT 1
26414: PLUS
26415: PPUSH
26416: EMPTY
26417: PPUSH
26418: CALL_OW 1
26422: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26423: LD_VAR 0 1
26427: PPUSH
26428: CALL_OW 302
26432: NOT
26433: IFFALSE 26446
// begin HackUnlinkAll ( i ) ;
26435: LD_VAR 0 1
26439: PPUSH
26440: CALL 26552 0 1
// continue ;
26444: GO 26326
// end ; HackCheckCapturedStatus ( i ) ;
26446: LD_VAR 0 1
26450: PPUSH
26451: CALL 26995 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26455: LD_ADDR_VAR 0 2
26459: PUSH
26460: LD_INT 81
26462: PUSH
26463: LD_VAR 0 1
26467: PPUSH
26468: CALL_OW 255
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 33
26479: PUSH
26480: LD_INT 3
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 91
26489: PUSH
26490: LD_VAR 0 1
26494: PUSH
26495: LD_EXP 104
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 50
26507: PUSH
26508: EMPTY
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: PPUSH
26517: CALL_OW 69
26521: ST_TO_ADDR
// if not tmp then
26522: LD_VAR 0 2
26526: NOT
26527: IFFALSE 26531
// continue ;
26529: GO 26326
// HackLink ( i , tmp ) ;
26531: LD_VAR 0 1
26535: PPUSH
26536: LD_VAR 0 2
26540: PPUSH
26541: CALL 26688 0 2
// end ;
26545: GO 26326
26547: POP
26548: POP
// end ;
26549: PPOPN 2
26551: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26552: LD_INT 0
26554: PPUSH
26555: PPUSH
26556: PPUSH
// if not hack in hackTanks then
26557: LD_VAR 0 1
26561: PUSH
26562: LD_EXP 101
26566: IN
26567: NOT
26568: IFFALSE 26572
// exit ;
26570: GO 26683
// index := GetElementIndex ( hackTanks , hack ) ;
26572: LD_ADDR_VAR 0 4
26576: PUSH
26577: LD_EXP 101
26581: PPUSH
26582: LD_VAR 0 1
26586: PPUSH
26587: CALL 34157 0 2
26591: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26592: LD_EXP 102
26596: PUSH
26597: LD_VAR 0 4
26601: ARRAY
26602: IFFALSE 26683
// begin for i in hackTanksCaptured [ index ] do
26604: LD_ADDR_VAR 0 3
26608: PUSH
26609: LD_EXP 102
26613: PUSH
26614: LD_VAR 0 4
26618: ARRAY
26619: PUSH
26620: FOR_IN
26621: IFFALSE 26647
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26623: LD_VAR 0 3
26627: PUSH
26628: LD_INT 1
26630: ARRAY
26631: PPUSH
26632: LD_VAR 0 3
26636: PUSH
26637: LD_INT 2
26639: ARRAY
26640: PPUSH
26641: CALL_OW 235
26645: GO 26620
26647: POP
26648: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26649: LD_ADDR_EXP 102
26653: PUSH
26654: LD_EXP 102
26658: PPUSH
26659: LD_VAR 0 4
26663: PPUSH
26664: EMPTY
26665: PPUSH
26666: CALL_OW 1
26670: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26671: LD_VAR 0 1
26675: PPUSH
26676: LD_INT 0
26678: PPUSH
26679: CALL_OW 505
// end ; end ;
26683: LD_VAR 0 2
26687: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26688: LD_INT 0
26690: PPUSH
26691: PPUSH
26692: PPUSH
// if not hack in hackTanks or not vehicles then
26693: LD_VAR 0 1
26697: PUSH
26698: LD_EXP 101
26702: IN
26703: NOT
26704: PUSH
26705: LD_VAR 0 2
26709: NOT
26710: OR
26711: IFFALSE 26715
// exit ;
26713: GO 26990
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26715: LD_ADDR_VAR 0 2
26719: PUSH
26720: LD_VAR 0 1
26724: PPUSH
26725: LD_VAR 0 2
26729: PPUSH
26730: LD_INT 1
26732: PPUSH
26733: LD_INT 1
26735: PPUSH
26736: CALL 34807 0 4
26740: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26741: LD_ADDR_VAR 0 5
26745: PUSH
26746: LD_EXP 101
26750: PPUSH
26751: LD_VAR 0 1
26755: PPUSH
26756: CALL 34157 0 2
26760: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26761: LD_EXP 102
26765: PUSH
26766: LD_VAR 0 5
26770: ARRAY
26771: PUSH
26772: LD_EXP 103
26776: LESS
26777: IFFALSE 26966
// begin for i := 1 to vehicles do
26779: LD_ADDR_VAR 0 4
26783: PUSH
26784: DOUBLE
26785: LD_INT 1
26787: DEC
26788: ST_TO_ADDR
26789: LD_VAR 0 2
26793: PUSH
26794: FOR_TO
26795: IFFALSE 26964
// begin if hackTanksCaptured [ index ] = hackLimit then
26797: LD_EXP 102
26801: PUSH
26802: LD_VAR 0 5
26806: ARRAY
26807: PUSH
26808: LD_EXP 103
26812: EQUAL
26813: IFFALSE 26817
// break ;
26815: GO 26964
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26817: LD_ADDR_EXP 105
26821: PUSH
26822: LD_EXP 105
26826: PPUSH
26827: LD_VAR 0 5
26831: PPUSH
26832: LD_EXP 105
26836: PUSH
26837: LD_VAR 0 5
26841: ARRAY
26842: PUSH
26843: LD_INT 1
26845: PLUS
26846: PPUSH
26847: CALL_OW 1
26851: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26852: LD_ADDR_EXP 102
26856: PUSH
26857: LD_EXP 102
26861: PPUSH
26862: LD_VAR 0 5
26866: PUSH
26867: LD_EXP 102
26871: PUSH
26872: LD_VAR 0 5
26876: ARRAY
26877: PUSH
26878: LD_INT 1
26880: PLUS
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PPUSH
26886: LD_VAR 0 2
26890: PUSH
26891: LD_VAR 0 4
26895: ARRAY
26896: PUSH
26897: LD_VAR 0 2
26901: PUSH
26902: LD_VAR 0 4
26906: ARRAY
26907: PPUSH
26908: CALL_OW 255
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PPUSH
26917: CALL 34372 0 3
26921: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26922: LD_VAR 0 2
26926: PUSH
26927: LD_VAR 0 4
26931: ARRAY
26932: PPUSH
26933: LD_VAR 0 1
26937: PPUSH
26938: CALL_OW 255
26942: PPUSH
26943: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26947: LD_VAR 0 2
26951: PUSH
26952: LD_VAR 0 4
26956: ARRAY
26957: PPUSH
26958: CALL_OW 141
// end ;
26962: GO 26794
26964: POP
26965: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26966: LD_VAR 0 1
26970: PPUSH
26971: LD_EXP 102
26975: PUSH
26976: LD_VAR 0 5
26980: ARRAY
26981: PUSH
26982: LD_INT 0
26984: PLUS
26985: PPUSH
26986: CALL_OW 505
// end ;
26990: LD_VAR 0 3
26994: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26995: LD_INT 0
26997: PPUSH
26998: PPUSH
26999: PPUSH
27000: PPUSH
// if not hack in hackTanks then
27001: LD_VAR 0 1
27005: PUSH
27006: LD_EXP 101
27010: IN
27011: NOT
27012: IFFALSE 27016
// exit ;
27014: GO 27256
// index := GetElementIndex ( hackTanks , hack ) ;
27016: LD_ADDR_VAR 0 4
27020: PUSH
27021: LD_EXP 101
27025: PPUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL 34157 0 2
27035: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27036: LD_ADDR_VAR 0 3
27040: PUSH
27041: DOUBLE
27042: LD_EXP 102
27046: PUSH
27047: LD_VAR 0 4
27051: ARRAY
27052: INC
27053: ST_TO_ADDR
27054: LD_INT 1
27056: PUSH
27057: FOR_DOWNTO
27058: IFFALSE 27230
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27060: LD_ADDR_VAR 0 5
27064: PUSH
27065: LD_EXP 102
27069: PUSH
27070: LD_VAR 0 4
27074: ARRAY
27075: PUSH
27076: LD_VAR 0 3
27080: ARRAY
27081: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27082: LD_VAR 0 5
27086: PUSH
27087: LD_INT 1
27089: ARRAY
27090: PPUSH
27091: CALL_OW 302
27095: NOT
27096: PUSH
27097: LD_VAR 0 5
27101: PUSH
27102: LD_INT 1
27104: ARRAY
27105: PPUSH
27106: CALL_OW 255
27110: PUSH
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL_OW 255
27120: NONEQUAL
27121: OR
27122: IFFALSE 27228
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27124: LD_VAR 0 5
27128: PUSH
27129: LD_INT 1
27131: ARRAY
27132: PPUSH
27133: CALL_OW 305
27137: PUSH
27138: LD_VAR 0 5
27142: PUSH
27143: LD_INT 1
27145: ARRAY
27146: PPUSH
27147: CALL_OW 255
27151: PUSH
27152: LD_VAR 0 1
27156: PPUSH
27157: CALL_OW 255
27161: EQUAL
27162: AND
27163: IFFALSE 27187
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27165: LD_VAR 0 5
27169: PUSH
27170: LD_INT 1
27172: ARRAY
27173: PPUSH
27174: LD_VAR 0 5
27178: PUSH
27179: LD_INT 2
27181: ARRAY
27182: PPUSH
27183: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27187: LD_ADDR_EXP 102
27191: PUSH
27192: LD_EXP 102
27196: PPUSH
27197: LD_VAR 0 4
27201: PPUSH
27202: LD_EXP 102
27206: PUSH
27207: LD_VAR 0 4
27211: ARRAY
27212: PPUSH
27213: LD_VAR 0 3
27217: PPUSH
27218: CALL_OW 3
27222: PPUSH
27223: CALL_OW 1
27227: ST_TO_ADDR
// end ; end ;
27228: GO 27057
27230: POP
27231: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27232: LD_VAR 0 1
27236: PPUSH
27237: LD_EXP 102
27241: PUSH
27242: LD_VAR 0 4
27246: ARRAY
27247: PUSH
27248: LD_INT 0
27250: PLUS
27251: PPUSH
27252: CALL_OW 505
// end ;
27256: LD_VAR 0 2
27260: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27261: LD_INT 0
27263: PPUSH
27264: PPUSH
27265: PPUSH
27266: PPUSH
// if not hack in hackTanks then
27267: LD_VAR 0 1
27271: PUSH
27272: LD_EXP 101
27276: IN
27277: NOT
27278: IFFALSE 27282
// exit ;
27280: GO 27367
// index := GetElementIndex ( hackTanks , hack ) ;
27282: LD_ADDR_VAR 0 5
27286: PUSH
27287: LD_EXP 101
27291: PPUSH
27292: LD_VAR 0 1
27296: PPUSH
27297: CALL 34157 0 2
27301: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27302: LD_ADDR_VAR 0 4
27306: PUSH
27307: DOUBLE
27308: LD_INT 1
27310: DEC
27311: ST_TO_ADDR
27312: LD_EXP 102
27316: PUSH
27317: LD_VAR 0 5
27321: ARRAY
27322: PUSH
27323: FOR_TO
27324: IFFALSE 27365
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27326: LD_EXP 102
27330: PUSH
27331: LD_VAR 0 5
27335: ARRAY
27336: PUSH
27337: LD_VAR 0 4
27341: ARRAY
27342: PUSH
27343: LD_INT 1
27345: ARRAY
27346: PUSH
27347: LD_VAR 0 2
27351: EQUAL
27352: IFFALSE 27363
// KillUnit ( vehicle ) ;
27354: LD_VAR 0 2
27358: PPUSH
27359: CALL_OW 66
27363: GO 27323
27365: POP
27366: POP
// end ;
27367: LD_VAR 0 3
27371: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27372: LD_EXP 106
27376: NOT
27377: IFFALSE 27412
27379: GO 27381
27381: DISABLE
// begin initMiner := true ;
27382: LD_ADDR_EXP 106
27386: PUSH
27387: LD_INT 1
27389: ST_TO_ADDR
// minersList := [ ] ;
27390: LD_ADDR_EXP 107
27394: PUSH
27395: EMPTY
27396: ST_TO_ADDR
// minerMinesList := [ ] ;
27397: LD_ADDR_EXP 108
27401: PUSH
27402: EMPTY
27403: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27404: LD_ADDR_EXP 109
27408: PUSH
27409: LD_INT 5
27411: ST_TO_ADDR
// end ;
27412: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27413: LD_EXP 106
27417: PUSH
27418: LD_INT 34
27420: PUSH
27421: LD_EXP 28
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PPUSH
27430: CALL_OW 69
27434: AND
27435: IFFALSE 27898
27437: GO 27439
27439: DISABLE
27440: LD_INT 0
27442: PPUSH
27443: PPUSH
27444: PPUSH
27445: PPUSH
// begin enable ;
27446: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27447: LD_ADDR_VAR 0 1
27451: PUSH
27452: LD_INT 34
27454: PUSH
27455: LD_EXP 28
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PPUSH
27464: CALL_OW 69
27468: PUSH
27469: FOR_IN
27470: IFFALSE 27542
// begin if not i in minersList then
27472: LD_VAR 0 1
27476: PUSH
27477: LD_EXP 107
27481: IN
27482: NOT
27483: IFFALSE 27540
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27485: LD_ADDR_EXP 107
27489: PUSH
27490: LD_EXP 107
27494: PPUSH
27495: LD_EXP 107
27499: PUSH
27500: LD_INT 1
27502: PLUS
27503: PPUSH
27504: LD_VAR 0 1
27508: PPUSH
27509: CALL_OW 1
27513: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27514: LD_ADDR_EXP 108
27518: PUSH
27519: LD_EXP 108
27523: PPUSH
27524: LD_EXP 108
27528: PUSH
27529: LD_INT 1
27531: PLUS
27532: PPUSH
27533: EMPTY
27534: PPUSH
27535: CALL_OW 1
27539: ST_TO_ADDR
// end end ;
27540: GO 27469
27542: POP
27543: POP
// for i := minerMinesList downto 1 do
27544: LD_ADDR_VAR 0 1
27548: PUSH
27549: DOUBLE
27550: LD_EXP 108
27554: INC
27555: ST_TO_ADDR
27556: LD_INT 1
27558: PUSH
27559: FOR_DOWNTO
27560: IFFALSE 27896
// begin if IsLive ( minersList [ i ] ) then
27562: LD_EXP 107
27566: PUSH
27567: LD_VAR 0 1
27571: ARRAY
27572: PPUSH
27573: CALL_OW 300
27577: IFFALSE 27605
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27579: LD_EXP 107
27583: PUSH
27584: LD_VAR 0 1
27588: ARRAY
27589: PPUSH
27590: LD_EXP 108
27594: PUSH
27595: LD_VAR 0 1
27599: ARRAY
27600: PPUSH
27601: CALL_OW 505
// if not minerMinesList [ i ] then
27605: LD_EXP 108
27609: PUSH
27610: LD_VAR 0 1
27614: ARRAY
27615: NOT
27616: IFFALSE 27620
// continue ;
27618: GO 27559
// for j := minerMinesList [ i ] downto 1 do
27620: LD_ADDR_VAR 0 2
27624: PUSH
27625: DOUBLE
27626: LD_EXP 108
27630: PUSH
27631: LD_VAR 0 1
27635: ARRAY
27636: INC
27637: ST_TO_ADDR
27638: LD_INT 1
27640: PUSH
27641: FOR_DOWNTO
27642: IFFALSE 27892
// begin side := GetSide ( minersList [ i ] ) ;
27644: LD_ADDR_VAR 0 3
27648: PUSH
27649: LD_EXP 107
27653: PUSH
27654: LD_VAR 0 1
27658: ARRAY
27659: PPUSH
27660: CALL_OW 255
27664: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27665: LD_ADDR_VAR 0 4
27669: PUSH
27670: LD_EXP 108
27674: PUSH
27675: LD_VAR 0 1
27679: ARRAY
27680: PUSH
27681: LD_VAR 0 2
27685: ARRAY
27686: PUSH
27687: LD_INT 1
27689: ARRAY
27690: PPUSH
27691: LD_EXP 108
27695: PUSH
27696: LD_VAR 0 1
27700: ARRAY
27701: PUSH
27702: LD_VAR 0 2
27706: ARRAY
27707: PUSH
27708: LD_INT 2
27710: ARRAY
27711: PPUSH
27712: CALL_OW 428
27716: ST_TO_ADDR
// if not tmp then
27717: LD_VAR 0 4
27721: NOT
27722: IFFALSE 27726
// continue ;
27724: GO 27641
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27726: LD_VAR 0 4
27730: PUSH
27731: LD_INT 81
27733: PUSH
27734: LD_VAR 0 3
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PPUSH
27743: CALL_OW 69
27747: IN
27748: PUSH
27749: LD_EXP 108
27753: PUSH
27754: LD_VAR 0 1
27758: ARRAY
27759: PUSH
27760: LD_VAR 0 2
27764: ARRAY
27765: PUSH
27766: LD_INT 1
27768: ARRAY
27769: PPUSH
27770: LD_EXP 108
27774: PUSH
27775: LD_VAR 0 1
27779: ARRAY
27780: PUSH
27781: LD_VAR 0 2
27785: ARRAY
27786: PUSH
27787: LD_INT 2
27789: ARRAY
27790: PPUSH
27791: CALL_OW 458
27795: AND
27796: IFFALSE 27890
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27798: LD_EXP 108
27802: PUSH
27803: LD_VAR 0 1
27807: ARRAY
27808: PUSH
27809: LD_VAR 0 2
27813: ARRAY
27814: PUSH
27815: LD_INT 1
27817: ARRAY
27818: PPUSH
27819: LD_EXP 108
27823: PUSH
27824: LD_VAR 0 1
27828: ARRAY
27829: PUSH
27830: LD_VAR 0 2
27834: ARRAY
27835: PUSH
27836: LD_INT 2
27838: ARRAY
27839: PPUSH
27840: LD_VAR 0 3
27844: PPUSH
27845: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27849: LD_ADDR_EXP 108
27853: PUSH
27854: LD_EXP 108
27858: PPUSH
27859: LD_VAR 0 1
27863: PPUSH
27864: LD_EXP 108
27868: PUSH
27869: LD_VAR 0 1
27873: ARRAY
27874: PPUSH
27875: LD_VAR 0 2
27879: PPUSH
27880: CALL_OW 3
27884: PPUSH
27885: CALL_OW 1
27889: ST_TO_ADDR
// end ; end ;
27890: GO 27641
27892: POP
27893: POP
// end ;
27894: GO 27559
27896: POP
27897: POP
// end ;
27898: PPOPN 4
27900: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27901: LD_INT 0
27903: PPUSH
27904: PPUSH
// result := false ;
27905: LD_ADDR_VAR 0 4
27909: PUSH
27910: LD_INT 0
27912: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27913: LD_VAR 0 1
27917: PPUSH
27918: CALL_OW 264
27922: PUSH
27923: LD_EXP 28
27927: EQUAL
27928: NOT
27929: IFFALSE 27933
// exit ;
27931: GO 28173
// index := GetElementIndex ( minersList , unit ) ;
27933: LD_ADDR_VAR 0 5
27937: PUSH
27938: LD_EXP 107
27942: PPUSH
27943: LD_VAR 0 1
27947: PPUSH
27948: CALL 34157 0 2
27952: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27953: LD_EXP 108
27957: PUSH
27958: LD_VAR 0 5
27962: ARRAY
27963: PUSH
27964: LD_EXP 109
27968: GREATEREQUAL
27969: IFFALSE 27973
// exit ;
27971: GO 28173
// ComMoveXY ( unit , x , y ) ;
27973: LD_VAR 0 1
27977: PPUSH
27978: LD_VAR 0 2
27982: PPUSH
27983: LD_VAR 0 3
27987: PPUSH
27988: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27992: LD_INT 35
27994: PPUSH
27995: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27999: LD_VAR 0 1
28003: PPUSH
28004: LD_VAR 0 2
28008: PPUSH
28009: LD_VAR 0 3
28013: PPUSH
28014: CALL 64929 0 3
28018: NOT
28019: PUSH
28020: LD_VAR 0 1
28024: PPUSH
28025: CALL_OW 314
28029: AND
28030: IFFALSE 28034
// exit ;
28032: GO 28173
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28034: LD_VAR 0 2
28038: PPUSH
28039: LD_VAR 0 3
28043: PPUSH
28044: CALL_OW 428
28048: PUSH
28049: LD_VAR 0 1
28053: EQUAL
28054: PUSH
28055: LD_VAR 0 1
28059: PPUSH
28060: CALL_OW 314
28064: NOT
28065: AND
28066: IFFALSE 27992
// PlaySoundXY ( x , y , PlantMine ) ;
28068: LD_VAR 0 2
28072: PPUSH
28073: LD_VAR 0 3
28077: PPUSH
28078: LD_STRING PlantMine
28080: PPUSH
28081: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28085: LD_VAR 0 2
28089: PPUSH
28090: LD_VAR 0 3
28094: PPUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL_OW 255
28104: PPUSH
28105: LD_INT 0
28107: PPUSH
28108: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28112: LD_ADDR_EXP 108
28116: PUSH
28117: LD_EXP 108
28121: PPUSH
28122: LD_VAR 0 5
28126: PUSH
28127: LD_EXP 108
28131: PUSH
28132: LD_VAR 0 5
28136: ARRAY
28137: PUSH
28138: LD_INT 1
28140: PLUS
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PPUSH
28146: LD_VAR 0 2
28150: PUSH
28151: LD_VAR 0 3
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PPUSH
28160: CALL 34372 0 3
28164: ST_TO_ADDR
// result := true ;
28165: LD_ADDR_VAR 0 4
28169: PUSH
28170: LD_INT 1
28172: ST_TO_ADDR
// end ;
28173: LD_VAR 0 4
28177: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28178: LD_INT 0
28180: PPUSH
28181: PPUSH
28182: PPUSH
// if not unit in minersList then
28183: LD_VAR 0 1
28187: PUSH
28188: LD_EXP 107
28192: IN
28193: NOT
28194: IFFALSE 28198
// exit ;
28196: GO 28590
// index := GetElementIndex ( minersList , unit ) ;
28198: LD_ADDR_VAR 0 6
28202: PUSH
28203: LD_EXP 107
28207: PPUSH
28208: LD_VAR 0 1
28212: PPUSH
28213: CALL 34157 0 2
28217: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28218: LD_ADDR_VAR 0 5
28222: PUSH
28223: DOUBLE
28224: LD_EXP 108
28228: PUSH
28229: LD_VAR 0 6
28233: ARRAY
28234: INC
28235: ST_TO_ADDR
28236: LD_INT 1
28238: PUSH
28239: FOR_DOWNTO
28240: IFFALSE 28401
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28242: LD_EXP 108
28246: PUSH
28247: LD_VAR 0 6
28251: ARRAY
28252: PUSH
28253: LD_VAR 0 5
28257: ARRAY
28258: PUSH
28259: LD_INT 1
28261: ARRAY
28262: PUSH
28263: LD_VAR 0 2
28267: EQUAL
28268: PUSH
28269: LD_EXP 108
28273: PUSH
28274: LD_VAR 0 6
28278: ARRAY
28279: PUSH
28280: LD_VAR 0 5
28284: ARRAY
28285: PUSH
28286: LD_INT 2
28288: ARRAY
28289: PUSH
28290: LD_VAR 0 3
28294: EQUAL
28295: AND
28296: IFFALSE 28399
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28298: LD_EXP 108
28302: PUSH
28303: LD_VAR 0 6
28307: ARRAY
28308: PUSH
28309: LD_VAR 0 5
28313: ARRAY
28314: PUSH
28315: LD_INT 1
28317: ARRAY
28318: PPUSH
28319: LD_EXP 108
28323: PUSH
28324: LD_VAR 0 6
28328: ARRAY
28329: PUSH
28330: LD_VAR 0 5
28334: ARRAY
28335: PUSH
28336: LD_INT 2
28338: ARRAY
28339: PPUSH
28340: LD_VAR 0 1
28344: PPUSH
28345: CALL_OW 255
28349: PPUSH
28350: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28354: LD_ADDR_EXP 108
28358: PUSH
28359: LD_EXP 108
28363: PPUSH
28364: LD_VAR 0 6
28368: PPUSH
28369: LD_EXP 108
28373: PUSH
28374: LD_VAR 0 6
28378: ARRAY
28379: PPUSH
28380: LD_VAR 0 5
28384: PPUSH
28385: CALL_OW 3
28389: PPUSH
28390: CALL_OW 1
28394: ST_TO_ADDR
// exit ;
28395: POP
28396: POP
28397: GO 28590
// end ; end ;
28399: GO 28239
28401: POP
28402: POP
// for i := minerMinesList [ index ] downto 1 do
28403: LD_ADDR_VAR 0 5
28407: PUSH
28408: DOUBLE
28409: LD_EXP 108
28413: PUSH
28414: LD_VAR 0 6
28418: ARRAY
28419: INC
28420: ST_TO_ADDR
28421: LD_INT 1
28423: PUSH
28424: FOR_DOWNTO
28425: IFFALSE 28588
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28427: LD_EXP 108
28431: PUSH
28432: LD_VAR 0 6
28436: ARRAY
28437: PUSH
28438: LD_VAR 0 5
28442: ARRAY
28443: PUSH
28444: LD_INT 1
28446: ARRAY
28447: PPUSH
28448: LD_EXP 108
28452: PUSH
28453: LD_VAR 0 6
28457: ARRAY
28458: PUSH
28459: LD_VAR 0 5
28463: ARRAY
28464: PUSH
28465: LD_INT 2
28467: ARRAY
28468: PPUSH
28469: LD_VAR 0 2
28473: PPUSH
28474: LD_VAR 0 3
28478: PPUSH
28479: CALL_OW 298
28483: PUSH
28484: LD_INT 6
28486: LESS
28487: IFFALSE 28586
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28489: LD_EXP 108
28493: PUSH
28494: LD_VAR 0 6
28498: ARRAY
28499: PUSH
28500: LD_VAR 0 5
28504: ARRAY
28505: PUSH
28506: LD_INT 1
28508: ARRAY
28509: PPUSH
28510: LD_EXP 108
28514: PUSH
28515: LD_VAR 0 6
28519: ARRAY
28520: PUSH
28521: LD_VAR 0 5
28525: ARRAY
28526: PUSH
28527: LD_INT 2
28529: ARRAY
28530: PPUSH
28531: LD_VAR 0 1
28535: PPUSH
28536: CALL_OW 255
28540: PPUSH
28541: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28545: LD_ADDR_EXP 108
28549: PUSH
28550: LD_EXP 108
28554: PPUSH
28555: LD_VAR 0 6
28559: PPUSH
28560: LD_EXP 108
28564: PUSH
28565: LD_VAR 0 6
28569: ARRAY
28570: PPUSH
28571: LD_VAR 0 5
28575: PPUSH
28576: CALL_OW 3
28580: PPUSH
28581: CALL_OW 1
28585: ST_TO_ADDR
// end ; end ;
28586: GO 28424
28588: POP
28589: POP
// end ;
28590: LD_VAR 0 4
28594: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28595: LD_INT 0
28597: PPUSH
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
28605: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28606: LD_VAR 0 1
28610: PPUSH
28611: CALL_OW 264
28615: PUSH
28616: LD_EXP 28
28620: EQUAL
28621: NOT
28622: PUSH
28623: LD_VAR 0 1
28627: PUSH
28628: LD_EXP 107
28632: IN
28633: NOT
28634: OR
28635: IFFALSE 28639
// exit ;
28637: GO 28961
// index := GetElementIndex ( minersList , unit ) ;
28639: LD_ADDR_VAR 0 6
28643: PUSH
28644: LD_EXP 107
28648: PPUSH
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL 34157 0 2
28658: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28659: LD_ADDR_VAR 0 8
28663: PUSH
28664: LD_EXP 109
28668: PUSH
28669: LD_EXP 108
28673: PUSH
28674: LD_VAR 0 6
28678: ARRAY
28679: MINUS
28680: ST_TO_ADDR
// if not minesFreeAmount then
28681: LD_VAR 0 8
28685: NOT
28686: IFFALSE 28690
// exit ;
28688: GO 28961
// tmp := [ ] ;
28690: LD_ADDR_VAR 0 7
28694: PUSH
28695: EMPTY
28696: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28697: LD_ADDR_VAR 0 5
28701: PUSH
28702: DOUBLE
28703: LD_INT 1
28705: DEC
28706: ST_TO_ADDR
28707: LD_VAR 0 8
28711: PUSH
28712: FOR_TO
28713: IFFALSE 28908
// begin _d := rand ( 0 , 5 ) ;
28715: LD_ADDR_VAR 0 11
28719: PUSH
28720: LD_INT 0
28722: PPUSH
28723: LD_INT 5
28725: PPUSH
28726: CALL_OW 12
28730: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28731: LD_ADDR_VAR 0 12
28735: PUSH
28736: LD_INT 2
28738: PPUSH
28739: LD_INT 6
28741: PPUSH
28742: CALL_OW 12
28746: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28747: LD_ADDR_VAR 0 9
28751: PUSH
28752: LD_VAR 0 2
28756: PPUSH
28757: LD_VAR 0 11
28761: PPUSH
28762: LD_VAR 0 12
28766: PPUSH
28767: CALL_OW 272
28771: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28772: LD_ADDR_VAR 0 10
28776: PUSH
28777: LD_VAR 0 3
28781: PPUSH
28782: LD_VAR 0 11
28786: PPUSH
28787: LD_VAR 0 12
28791: PPUSH
28792: CALL_OW 273
28796: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28797: LD_VAR 0 9
28801: PPUSH
28802: LD_VAR 0 10
28806: PPUSH
28807: CALL_OW 488
28811: PUSH
28812: LD_VAR 0 9
28816: PUSH
28817: LD_VAR 0 10
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_VAR 0 7
28830: IN
28831: NOT
28832: AND
28833: PUSH
28834: LD_VAR 0 9
28838: PPUSH
28839: LD_VAR 0 10
28843: PPUSH
28844: CALL_OW 458
28848: NOT
28849: AND
28850: IFFALSE 28892
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28852: LD_ADDR_VAR 0 7
28856: PUSH
28857: LD_VAR 0 7
28861: PPUSH
28862: LD_VAR 0 7
28866: PUSH
28867: LD_INT 1
28869: PLUS
28870: PPUSH
28871: LD_VAR 0 9
28875: PUSH
28876: LD_VAR 0 10
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PPUSH
28885: CALL_OW 1
28889: ST_TO_ADDR
28890: GO 28906
// i := i - 1 ;
28892: LD_ADDR_VAR 0 5
28896: PUSH
28897: LD_VAR 0 5
28901: PUSH
28902: LD_INT 1
28904: MINUS
28905: ST_TO_ADDR
// end ;
28906: GO 28712
28908: POP
28909: POP
// for i in tmp do
28910: LD_ADDR_VAR 0 5
28914: PUSH
28915: LD_VAR 0 7
28919: PUSH
28920: FOR_IN
28921: IFFALSE 28959
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28923: LD_VAR 0 1
28927: PPUSH
28928: LD_VAR 0 5
28932: PUSH
28933: LD_INT 1
28935: ARRAY
28936: PPUSH
28937: LD_VAR 0 5
28941: PUSH
28942: LD_INT 2
28944: ARRAY
28945: PPUSH
28946: CALL 27901 0 3
28950: NOT
28951: IFFALSE 28957
// exit ;
28953: POP
28954: POP
28955: GO 28961
28957: GO 28920
28959: POP
28960: POP
// end ;
28961: LD_VAR 0 4
28965: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
28973: PPUSH
28974: PPUSH
// if not GetClass ( unit ) = class_sniper then
28975: LD_VAR 0 1
28979: PPUSH
28980: CALL_OW 257
28984: PUSH
28985: LD_INT 5
28987: EQUAL
28988: NOT
28989: IFFALSE 28993
// exit ;
28991: GO 29381
// dist := 8 ;
28993: LD_ADDR_VAR 0 5
28997: PUSH
28998: LD_INT 8
29000: ST_TO_ADDR
// viewRange := 12 ;
29001: LD_ADDR_VAR 0 7
29005: PUSH
29006: LD_INT 12
29008: ST_TO_ADDR
// side := GetSide ( unit ) ;
29009: LD_ADDR_VAR 0 6
29013: PUSH
29014: LD_VAR 0 1
29018: PPUSH
29019: CALL_OW 255
29023: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29024: LD_INT 61
29026: PPUSH
29027: LD_VAR 0 6
29031: PPUSH
29032: CALL_OW 321
29036: PUSH
29037: LD_INT 2
29039: EQUAL
29040: IFFALSE 29050
// viewRange := 16 ;
29042: LD_ADDR_VAR 0 7
29046: PUSH
29047: LD_INT 16
29049: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29050: LD_VAR 0 1
29054: PPUSH
29055: LD_VAR 0 2
29059: PPUSH
29060: LD_VAR 0 3
29064: PPUSH
29065: CALL_OW 297
29069: PUSH
29070: LD_VAR 0 5
29074: GREATER
29075: IFFALSE 29154
// begin ComMoveXY ( unit , x , y ) ;
29077: LD_VAR 0 1
29081: PPUSH
29082: LD_VAR 0 2
29086: PPUSH
29087: LD_VAR 0 3
29091: PPUSH
29092: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29096: LD_INT 35
29098: PPUSH
29099: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29103: LD_VAR 0 1
29107: PPUSH
29108: LD_VAR 0 2
29112: PPUSH
29113: LD_VAR 0 3
29117: PPUSH
29118: CALL 64929 0 3
29122: NOT
29123: IFFALSE 29127
// exit ;
29125: GO 29381
// until GetDistUnitXY ( unit , x , y ) < dist ;
29127: LD_VAR 0 1
29131: PPUSH
29132: LD_VAR 0 2
29136: PPUSH
29137: LD_VAR 0 3
29141: PPUSH
29142: CALL_OW 297
29146: PUSH
29147: LD_VAR 0 5
29151: LESS
29152: IFFALSE 29096
// end ; ComTurnXY ( unit , x , y ) ;
29154: LD_VAR 0 1
29158: PPUSH
29159: LD_VAR 0 2
29163: PPUSH
29164: LD_VAR 0 3
29168: PPUSH
29169: CALL_OW 118
// wait ( 5 ) ;
29173: LD_INT 5
29175: PPUSH
29176: CALL_OW 67
// _d := GetDir ( unit ) ;
29180: LD_ADDR_VAR 0 10
29184: PUSH
29185: LD_VAR 0 1
29189: PPUSH
29190: CALL_OW 254
29194: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29195: LD_ADDR_VAR 0 8
29199: PUSH
29200: LD_VAR 0 1
29204: PPUSH
29205: CALL_OW 250
29209: PPUSH
29210: LD_VAR 0 10
29214: PPUSH
29215: LD_VAR 0 5
29219: PPUSH
29220: CALL_OW 272
29224: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29225: LD_ADDR_VAR 0 9
29229: PUSH
29230: LD_VAR 0 1
29234: PPUSH
29235: CALL_OW 251
29239: PPUSH
29240: LD_VAR 0 10
29244: PPUSH
29245: LD_VAR 0 5
29249: PPUSH
29250: CALL_OW 273
29254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29255: LD_VAR 0 8
29259: PPUSH
29260: LD_VAR 0 9
29264: PPUSH
29265: CALL_OW 488
29269: NOT
29270: IFFALSE 29274
// exit ;
29272: GO 29381
// ComAnimCustom ( unit , 1 ) ;
29274: LD_VAR 0 1
29278: PPUSH
29279: LD_INT 1
29281: PPUSH
29282: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29286: LD_VAR 0 8
29290: PPUSH
29291: LD_VAR 0 9
29295: PPUSH
29296: LD_VAR 0 6
29300: PPUSH
29301: LD_VAR 0 7
29305: PPUSH
29306: CALL_OW 330
// repeat wait ( 1 ) ;
29310: LD_INT 1
29312: PPUSH
29313: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29317: LD_VAR 0 1
29321: PPUSH
29322: CALL_OW 316
29326: PUSH
29327: LD_VAR 0 1
29331: PPUSH
29332: CALL_OW 314
29336: OR
29337: PUSH
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 302
29347: NOT
29348: OR
29349: PUSH
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL_OW 301
29359: OR
29360: IFFALSE 29310
// RemoveSeeing ( _x , _y , side ) ;
29362: LD_VAR 0 8
29366: PPUSH
29367: LD_VAR 0 9
29371: PPUSH
29372: LD_VAR 0 6
29376: PPUSH
29377: CALL_OW 331
// end ; end_of_file
29381: LD_VAR 0 4
29385: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29386: LD_INT 0
29388: PPUSH
29389: PPUSH
// if exist_mode then
29390: LD_VAR 0 2
29394: IFFALSE 29419
// unit := CreateCharacter ( prefix & ident ) else
29396: LD_ADDR_VAR 0 5
29400: PUSH
29401: LD_VAR 0 3
29405: PUSH
29406: LD_VAR 0 1
29410: STR
29411: PPUSH
29412: CALL_OW 34
29416: ST_TO_ADDR
29417: GO 29434
// unit := NewCharacter ( ident ) ;
29419: LD_ADDR_VAR 0 5
29423: PUSH
29424: LD_VAR 0 1
29428: PPUSH
29429: CALL_OW 25
29433: ST_TO_ADDR
// result := unit ;
29434: LD_ADDR_VAR 0 4
29438: PUSH
29439: LD_VAR 0 5
29443: ST_TO_ADDR
// end ;
29444: LD_VAR 0 4
29448: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29449: LD_INT 0
29451: PPUSH
29452: PPUSH
// if not side or not nation then
29453: LD_VAR 0 1
29457: NOT
29458: PUSH
29459: LD_VAR 0 2
29463: NOT
29464: OR
29465: IFFALSE 29469
// exit ;
29467: GO 30237
// case nation of nation_american :
29469: LD_VAR 0 2
29473: PUSH
29474: LD_INT 1
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29696
29482: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29483: LD_ADDR_VAR 0 4
29487: PUSH
29488: LD_INT 35
29490: PUSH
29491: LD_INT 45
29493: PUSH
29494: LD_INT 46
29496: PUSH
29497: LD_INT 47
29499: PUSH
29500: LD_INT 82
29502: PUSH
29503: LD_INT 83
29505: PUSH
29506: LD_INT 84
29508: PUSH
29509: LD_INT 85
29511: PUSH
29512: LD_INT 86
29514: PUSH
29515: LD_INT 1
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: LD_INT 6
29523: PUSH
29524: LD_INT 15
29526: PUSH
29527: LD_INT 16
29529: PUSH
29530: LD_INT 7
29532: PUSH
29533: LD_INT 12
29535: PUSH
29536: LD_INT 13
29538: PUSH
29539: LD_INT 10
29541: PUSH
29542: LD_INT 14
29544: PUSH
29545: LD_INT 20
29547: PUSH
29548: LD_INT 21
29550: PUSH
29551: LD_INT 22
29553: PUSH
29554: LD_INT 25
29556: PUSH
29557: LD_INT 32
29559: PUSH
29560: LD_INT 27
29562: PUSH
29563: LD_INT 36
29565: PUSH
29566: LD_INT 69
29568: PUSH
29569: LD_INT 39
29571: PUSH
29572: LD_INT 34
29574: PUSH
29575: LD_INT 40
29577: PUSH
29578: LD_INT 48
29580: PUSH
29581: LD_INT 49
29583: PUSH
29584: LD_INT 50
29586: PUSH
29587: LD_INT 51
29589: PUSH
29590: LD_INT 52
29592: PUSH
29593: LD_INT 53
29595: PUSH
29596: LD_INT 54
29598: PUSH
29599: LD_INT 55
29601: PUSH
29602: LD_INT 56
29604: PUSH
29605: LD_INT 57
29607: PUSH
29608: LD_INT 58
29610: PUSH
29611: LD_INT 59
29613: PUSH
29614: LD_INT 60
29616: PUSH
29617: LD_INT 61
29619: PUSH
29620: LD_INT 62
29622: PUSH
29623: LD_INT 80
29625: PUSH
29626: LD_INT 82
29628: PUSH
29629: LD_INT 83
29631: PUSH
29632: LD_INT 84
29634: PUSH
29635: LD_INT 85
29637: PUSH
29638: LD_INT 86
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: ST_TO_ADDR
29694: GO 30161
29696: LD_INT 2
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29930
29704: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29705: LD_ADDR_VAR 0 4
29709: PUSH
29710: LD_INT 35
29712: PUSH
29713: LD_INT 45
29715: PUSH
29716: LD_INT 46
29718: PUSH
29719: LD_INT 47
29721: PUSH
29722: LD_INT 82
29724: PUSH
29725: LD_INT 83
29727: PUSH
29728: LD_INT 84
29730: PUSH
29731: LD_INT 85
29733: PUSH
29734: LD_INT 87
29736: PUSH
29737: LD_INT 70
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: LD_INT 11
29745: PUSH
29746: LD_INT 3
29748: PUSH
29749: LD_INT 4
29751: PUSH
29752: LD_INT 5
29754: PUSH
29755: LD_INT 6
29757: PUSH
29758: LD_INT 15
29760: PUSH
29761: LD_INT 18
29763: PUSH
29764: LD_INT 7
29766: PUSH
29767: LD_INT 17
29769: PUSH
29770: LD_INT 8
29772: PUSH
29773: LD_INT 20
29775: PUSH
29776: LD_INT 21
29778: PUSH
29779: LD_INT 22
29781: PUSH
29782: LD_INT 72
29784: PUSH
29785: LD_INT 26
29787: PUSH
29788: LD_INT 69
29790: PUSH
29791: LD_INT 39
29793: PUSH
29794: LD_INT 40
29796: PUSH
29797: LD_INT 41
29799: PUSH
29800: LD_INT 42
29802: PUSH
29803: LD_INT 43
29805: PUSH
29806: LD_INT 48
29808: PUSH
29809: LD_INT 49
29811: PUSH
29812: LD_INT 50
29814: PUSH
29815: LD_INT 51
29817: PUSH
29818: LD_INT 52
29820: PUSH
29821: LD_INT 53
29823: PUSH
29824: LD_INT 54
29826: PUSH
29827: LD_INT 55
29829: PUSH
29830: LD_INT 56
29832: PUSH
29833: LD_INT 60
29835: PUSH
29836: LD_INT 61
29838: PUSH
29839: LD_INT 62
29841: PUSH
29842: LD_INT 66
29844: PUSH
29845: LD_INT 67
29847: PUSH
29848: LD_INT 68
29850: PUSH
29851: LD_INT 81
29853: PUSH
29854: LD_INT 82
29856: PUSH
29857: LD_INT 83
29859: PUSH
29860: LD_INT 84
29862: PUSH
29863: LD_INT 85
29865: PUSH
29866: LD_INT 87
29868: PUSH
29869: LD_INT 88
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: ST_TO_ADDR
29928: GO 30161
29930: LD_INT 3
29932: DOUBLE
29933: EQUAL
29934: IFTRUE 29938
29936: GO 30160
29938: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29939: LD_ADDR_VAR 0 4
29943: PUSH
29944: LD_INT 46
29946: PUSH
29947: LD_INT 47
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 2
29955: PUSH
29956: LD_INT 82
29958: PUSH
29959: LD_INT 83
29961: PUSH
29962: LD_INT 84
29964: PUSH
29965: LD_INT 85
29967: PUSH
29968: LD_INT 86
29970: PUSH
29971: LD_INT 11
29973: PUSH
29974: LD_INT 9
29976: PUSH
29977: LD_INT 20
29979: PUSH
29980: LD_INT 19
29982: PUSH
29983: LD_INT 21
29985: PUSH
29986: LD_INT 24
29988: PUSH
29989: LD_INT 22
29991: PUSH
29992: LD_INT 25
29994: PUSH
29995: LD_INT 28
29997: PUSH
29998: LD_INT 29
30000: PUSH
30001: LD_INT 30
30003: PUSH
30004: LD_INT 31
30006: PUSH
30007: LD_INT 37
30009: PUSH
30010: LD_INT 38
30012: PUSH
30013: LD_INT 32
30015: PUSH
30016: LD_INT 27
30018: PUSH
30019: LD_INT 33
30021: PUSH
30022: LD_INT 69
30024: PUSH
30025: LD_INT 39
30027: PUSH
30028: LD_INT 34
30030: PUSH
30031: LD_INT 40
30033: PUSH
30034: LD_INT 71
30036: PUSH
30037: LD_INT 23
30039: PUSH
30040: LD_INT 44
30042: PUSH
30043: LD_INT 48
30045: PUSH
30046: LD_INT 49
30048: PUSH
30049: LD_INT 50
30051: PUSH
30052: LD_INT 51
30054: PUSH
30055: LD_INT 52
30057: PUSH
30058: LD_INT 53
30060: PUSH
30061: LD_INT 54
30063: PUSH
30064: LD_INT 55
30066: PUSH
30067: LD_INT 56
30069: PUSH
30070: LD_INT 57
30072: PUSH
30073: LD_INT 58
30075: PUSH
30076: LD_INT 59
30078: PUSH
30079: LD_INT 63
30081: PUSH
30082: LD_INT 64
30084: PUSH
30085: LD_INT 65
30087: PUSH
30088: LD_INT 82
30090: PUSH
30091: LD_INT 83
30093: PUSH
30094: LD_INT 84
30096: PUSH
30097: LD_INT 85
30099: PUSH
30100: LD_INT 86
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: ST_TO_ADDR
30158: GO 30161
30160: POP
// if state > - 1 and state < 3 then
30161: LD_VAR 0 3
30165: PUSH
30166: LD_INT 1
30168: NEG
30169: GREATER
30170: PUSH
30171: LD_VAR 0 3
30175: PUSH
30176: LD_INT 3
30178: LESS
30179: AND
30180: IFFALSE 30237
// for i in result do
30182: LD_ADDR_VAR 0 5
30186: PUSH
30187: LD_VAR 0 4
30191: PUSH
30192: FOR_IN
30193: IFFALSE 30235
// if GetTech ( i , side ) <> state then
30195: LD_VAR 0 5
30199: PPUSH
30200: LD_VAR 0 1
30204: PPUSH
30205: CALL_OW 321
30209: PUSH
30210: LD_VAR 0 3
30214: NONEQUAL
30215: IFFALSE 30233
// result := result diff i ;
30217: LD_ADDR_VAR 0 4
30221: PUSH
30222: LD_VAR 0 4
30226: PUSH
30227: LD_VAR 0 5
30231: DIFF
30232: ST_TO_ADDR
30233: GO 30192
30235: POP
30236: POP
// end ;
30237: LD_VAR 0 4
30241: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30242: LD_INT 0
30244: PPUSH
30245: PPUSH
30246: PPUSH
// result := true ;
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_INT 1
30254: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30255: LD_ADDR_VAR 0 5
30259: PUSH
30260: LD_VAR 0 2
30264: PPUSH
30265: CALL_OW 480
30269: ST_TO_ADDR
// if not tmp then
30270: LD_VAR 0 5
30274: NOT
30275: IFFALSE 30279
// exit ;
30277: GO 30328
// for i in tmp do
30279: LD_ADDR_VAR 0 4
30283: PUSH
30284: LD_VAR 0 5
30288: PUSH
30289: FOR_IN
30290: IFFALSE 30326
// if GetTech ( i , side ) <> state_researched then
30292: LD_VAR 0 4
30296: PPUSH
30297: LD_VAR 0 1
30301: PPUSH
30302: CALL_OW 321
30306: PUSH
30307: LD_INT 2
30309: NONEQUAL
30310: IFFALSE 30324
// begin result := false ;
30312: LD_ADDR_VAR 0 3
30316: PUSH
30317: LD_INT 0
30319: ST_TO_ADDR
// exit ;
30320: POP
30321: POP
30322: GO 30328
// end ;
30324: GO 30289
30326: POP
30327: POP
// end ;
30328: LD_VAR 0 3
30332: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30333: LD_INT 0
30335: PPUSH
30336: PPUSH
30337: PPUSH
30338: PPUSH
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
30343: PPUSH
30344: PPUSH
30345: PPUSH
30346: PPUSH
30347: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30348: LD_VAR 0 1
30352: NOT
30353: PUSH
30354: LD_VAR 0 1
30358: PPUSH
30359: CALL_OW 257
30363: PUSH
30364: LD_INT 9
30366: NONEQUAL
30367: OR
30368: IFFALSE 30372
// exit ;
30370: GO 30945
// side := GetSide ( unit ) ;
30372: LD_ADDR_VAR 0 9
30376: PUSH
30377: LD_VAR 0 1
30381: PPUSH
30382: CALL_OW 255
30386: ST_TO_ADDR
// tech_space := tech_spacanom ;
30387: LD_ADDR_VAR 0 12
30391: PUSH
30392: LD_INT 29
30394: ST_TO_ADDR
// tech_time := tech_taurad ;
30395: LD_ADDR_VAR 0 13
30399: PUSH
30400: LD_INT 28
30402: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30403: LD_ADDR_VAR 0 11
30407: PUSH
30408: LD_VAR 0 1
30412: PPUSH
30413: CALL_OW 310
30417: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30418: LD_VAR 0 11
30422: PPUSH
30423: CALL_OW 247
30427: PUSH
30428: LD_INT 2
30430: EQUAL
30431: IFFALSE 30435
// exit ;
30433: GO 30945
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30435: LD_ADDR_VAR 0 8
30439: PUSH
30440: LD_INT 81
30442: PUSH
30443: LD_VAR 0 9
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: LD_INT 21
30457: PUSH
30458: LD_INT 3
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PPUSH
30473: CALL_OW 69
30477: ST_TO_ADDR
// if not tmp then
30478: LD_VAR 0 8
30482: NOT
30483: IFFALSE 30487
// exit ;
30485: GO 30945
// if in_unit then
30487: LD_VAR 0 11
30491: IFFALSE 30515
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30493: LD_ADDR_VAR 0 10
30497: PUSH
30498: LD_VAR 0 8
30502: PPUSH
30503: LD_VAR 0 11
30507: PPUSH
30508: CALL_OW 74
30512: ST_TO_ADDR
30513: GO 30535
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30515: LD_ADDR_VAR 0 10
30519: PUSH
30520: LD_VAR 0 8
30524: PPUSH
30525: LD_VAR 0 1
30529: PPUSH
30530: CALL_OW 74
30534: ST_TO_ADDR
// if not enemy then
30535: LD_VAR 0 10
30539: NOT
30540: IFFALSE 30544
// exit ;
30542: GO 30945
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30544: LD_VAR 0 11
30548: PUSH
30549: LD_VAR 0 11
30553: PPUSH
30554: LD_VAR 0 10
30558: PPUSH
30559: CALL_OW 296
30563: PUSH
30564: LD_INT 13
30566: GREATER
30567: AND
30568: PUSH
30569: LD_VAR 0 1
30573: PPUSH
30574: LD_VAR 0 10
30578: PPUSH
30579: CALL_OW 296
30583: PUSH
30584: LD_INT 12
30586: GREATER
30587: OR
30588: IFFALSE 30592
// exit ;
30590: GO 30945
// missile := [ 1 ] ;
30592: LD_ADDR_VAR 0 14
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: EMPTY
30601: LIST
30602: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30603: LD_VAR 0 9
30607: PPUSH
30608: LD_VAR 0 12
30612: PPUSH
30613: CALL_OW 325
30617: IFFALSE 30646
// missile := Insert ( missile , missile + 1 , 2 ) ;
30619: LD_ADDR_VAR 0 14
30623: PUSH
30624: LD_VAR 0 14
30628: PPUSH
30629: LD_VAR 0 14
30633: PUSH
30634: LD_INT 1
30636: PLUS
30637: PPUSH
30638: LD_INT 2
30640: PPUSH
30641: CALL_OW 2
30645: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30646: LD_VAR 0 9
30650: PPUSH
30651: LD_VAR 0 13
30655: PPUSH
30656: CALL_OW 325
30660: PUSH
30661: LD_VAR 0 10
30665: PPUSH
30666: CALL_OW 255
30670: PPUSH
30671: LD_VAR 0 13
30675: PPUSH
30676: CALL_OW 325
30680: NOT
30681: AND
30682: IFFALSE 30711
// missile := Insert ( missile , missile + 1 , 3 ) ;
30684: LD_ADDR_VAR 0 14
30688: PUSH
30689: LD_VAR 0 14
30693: PPUSH
30694: LD_VAR 0 14
30698: PUSH
30699: LD_INT 1
30701: PLUS
30702: PPUSH
30703: LD_INT 3
30705: PPUSH
30706: CALL_OW 2
30710: ST_TO_ADDR
// if missile < 2 then
30711: LD_VAR 0 14
30715: PUSH
30716: LD_INT 2
30718: LESS
30719: IFFALSE 30723
// exit ;
30721: GO 30945
// x := GetX ( enemy ) ;
30723: LD_ADDR_VAR 0 4
30727: PUSH
30728: LD_VAR 0 10
30732: PPUSH
30733: CALL_OW 250
30737: ST_TO_ADDR
// y := GetY ( enemy ) ;
30738: LD_ADDR_VAR 0 5
30742: PUSH
30743: LD_VAR 0 10
30747: PPUSH
30748: CALL_OW 251
30752: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30753: LD_ADDR_VAR 0 6
30757: PUSH
30758: LD_VAR 0 4
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PPUSH
30767: LD_INT 1
30769: PPUSH
30770: CALL_OW 12
30774: PLUS
30775: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30776: LD_ADDR_VAR 0 7
30780: PUSH
30781: LD_VAR 0 5
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PPUSH
30790: LD_INT 1
30792: PPUSH
30793: CALL_OW 12
30797: PLUS
30798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30799: LD_VAR 0 6
30803: PPUSH
30804: LD_VAR 0 7
30808: PPUSH
30809: CALL_OW 488
30813: NOT
30814: IFFALSE 30836
// begin _x := x ;
30816: LD_ADDR_VAR 0 6
30820: PUSH
30821: LD_VAR 0 4
30825: ST_TO_ADDR
// _y := y ;
30826: LD_ADDR_VAR 0 7
30830: PUSH
30831: LD_VAR 0 5
30835: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30836: LD_ADDR_VAR 0 3
30840: PUSH
30841: LD_INT 1
30843: PPUSH
30844: LD_VAR 0 14
30848: PPUSH
30849: CALL_OW 12
30853: ST_TO_ADDR
// case i of 1 :
30854: LD_VAR 0 3
30858: PUSH
30859: LD_INT 1
30861: DOUBLE
30862: EQUAL
30863: IFTRUE 30867
30865: GO 30884
30867: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30868: LD_VAR 0 1
30872: PPUSH
30873: LD_VAR 0 10
30877: PPUSH
30878: CALL_OW 115
30882: GO 30945
30884: LD_INT 2
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30914
30892: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30893: LD_VAR 0 1
30897: PPUSH
30898: LD_VAR 0 6
30902: PPUSH
30903: LD_VAR 0 7
30907: PPUSH
30908: CALL_OW 153
30912: GO 30945
30914: LD_INT 3
30916: DOUBLE
30917: EQUAL
30918: IFTRUE 30922
30920: GO 30944
30922: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30923: LD_VAR 0 1
30927: PPUSH
30928: LD_VAR 0 6
30932: PPUSH
30933: LD_VAR 0 7
30937: PPUSH
30938: CALL_OW 154
30942: GO 30945
30944: POP
// end ;
30945: LD_VAR 0 2
30949: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30950: LD_INT 0
30952: PPUSH
30953: PPUSH
30954: PPUSH
30955: PPUSH
30956: PPUSH
30957: PPUSH
// if not unit or not building then
30958: LD_VAR 0 1
30962: NOT
30963: PUSH
30964: LD_VAR 0 2
30968: NOT
30969: OR
30970: IFFALSE 30974
// exit ;
30972: GO 31132
// x := GetX ( building ) ;
30974: LD_ADDR_VAR 0 5
30978: PUSH
30979: LD_VAR 0 2
30983: PPUSH
30984: CALL_OW 250
30988: ST_TO_ADDR
// y := GetY ( building ) ;
30989: LD_ADDR_VAR 0 6
30993: PUSH
30994: LD_VAR 0 2
30998: PPUSH
30999: CALL_OW 251
31003: ST_TO_ADDR
// for i = 0 to 5 do
31004: LD_ADDR_VAR 0 4
31008: PUSH
31009: DOUBLE
31010: LD_INT 0
31012: DEC
31013: ST_TO_ADDR
31014: LD_INT 5
31016: PUSH
31017: FOR_TO
31018: IFFALSE 31130
// begin _x := ShiftX ( x , i , 3 ) ;
31020: LD_ADDR_VAR 0 7
31024: PUSH
31025: LD_VAR 0 5
31029: PPUSH
31030: LD_VAR 0 4
31034: PPUSH
31035: LD_INT 3
31037: PPUSH
31038: CALL_OW 272
31042: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31043: LD_ADDR_VAR 0 8
31047: PUSH
31048: LD_VAR 0 6
31052: PPUSH
31053: LD_VAR 0 4
31057: PPUSH
31058: LD_INT 3
31060: PPUSH
31061: CALL_OW 273
31065: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31066: LD_VAR 0 7
31070: PPUSH
31071: LD_VAR 0 8
31075: PPUSH
31076: CALL_OW 488
31080: NOT
31081: IFFALSE 31085
// continue ;
31083: GO 31017
// if HexInfo ( _x , _y ) = 0 then
31085: LD_VAR 0 7
31089: PPUSH
31090: LD_VAR 0 8
31094: PPUSH
31095: CALL_OW 428
31099: PUSH
31100: LD_INT 0
31102: EQUAL
31103: IFFALSE 31128
// begin ComMoveXY ( unit , _x , _y ) ;
31105: LD_VAR 0 1
31109: PPUSH
31110: LD_VAR 0 7
31114: PPUSH
31115: LD_VAR 0 8
31119: PPUSH
31120: CALL_OW 111
// exit ;
31124: POP
31125: POP
31126: GO 31132
// end ; end ;
31128: GO 31017
31130: POP
31131: POP
// end ;
31132: LD_VAR 0 3
31136: RET
// export function ScanBase ( side , base_area ) ; begin
31137: LD_INT 0
31139: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: LD_VAR 0 2
31149: PPUSH
31150: LD_INT 81
31152: PUSH
31153: LD_VAR 0 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PPUSH
31162: CALL_OW 70
31166: ST_TO_ADDR
// end ;
31167: LD_VAR 0 3
31171: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31172: LD_INT 0
31174: PPUSH
31175: PPUSH
31176: PPUSH
31177: PPUSH
// result := false ;
31178: LD_ADDR_VAR 0 2
31182: PUSH
31183: LD_INT 0
31185: ST_TO_ADDR
// side := GetSide ( unit ) ;
31186: LD_ADDR_VAR 0 3
31190: PUSH
31191: LD_VAR 0 1
31195: PPUSH
31196: CALL_OW 255
31200: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31201: LD_ADDR_VAR 0 4
31205: PUSH
31206: LD_VAR 0 1
31210: PPUSH
31211: CALL_OW 248
31215: ST_TO_ADDR
// case nat of 1 :
31216: LD_VAR 0 4
31220: PUSH
31221: LD_INT 1
31223: DOUBLE
31224: EQUAL
31225: IFTRUE 31229
31227: GO 31240
31229: POP
// tech := tech_lassight ; 2 :
31230: LD_ADDR_VAR 0 5
31234: PUSH
31235: LD_INT 12
31237: ST_TO_ADDR
31238: GO 31279
31240: LD_INT 2
31242: DOUBLE
31243: EQUAL
31244: IFTRUE 31248
31246: GO 31259
31248: POP
// tech := tech_mortar ; 3 :
31249: LD_ADDR_VAR 0 5
31253: PUSH
31254: LD_INT 41
31256: ST_TO_ADDR
31257: GO 31279
31259: LD_INT 3
31261: DOUBLE
31262: EQUAL
31263: IFTRUE 31267
31265: GO 31278
31267: POP
// tech := tech_bazooka ; end ;
31268: LD_ADDR_VAR 0 5
31272: PUSH
31273: LD_INT 44
31275: ST_TO_ADDR
31276: GO 31279
31278: POP
// if Researched ( side , tech ) then
31279: LD_VAR 0 3
31283: PPUSH
31284: LD_VAR 0 5
31288: PPUSH
31289: CALL_OW 325
31293: IFFALSE 31320
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31295: LD_ADDR_VAR 0 2
31299: PUSH
31300: LD_INT 5
31302: PUSH
31303: LD_INT 8
31305: PUSH
31306: LD_INT 9
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: PUSH
31314: LD_VAR 0 4
31318: ARRAY
31319: ST_TO_ADDR
// end ;
31320: LD_VAR 0 2
31324: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31325: LD_INT 0
31327: PPUSH
31328: PPUSH
31329: PPUSH
// if not mines then
31330: LD_VAR 0 2
31334: NOT
31335: IFFALSE 31339
// exit ;
31337: GO 31483
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31339: LD_ADDR_VAR 0 5
31343: PUSH
31344: LD_INT 81
31346: PUSH
31347: LD_VAR 0 1
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 3
31358: PUSH
31359: LD_INT 21
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PPUSH
31377: CALL_OW 69
31381: ST_TO_ADDR
// for i in mines do
31382: LD_ADDR_VAR 0 4
31386: PUSH
31387: LD_VAR 0 2
31391: PUSH
31392: FOR_IN
31393: IFFALSE 31481
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31395: LD_VAR 0 4
31399: PUSH
31400: LD_INT 1
31402: ARRAY
31403: PPUSH
31404: LD_VAR 0 4
31408: PUSH
31409: LD_INT 2
31411: ARRAY
31412: PPUSH
31413: CALL_OW 458
31417: NOT
31418: IFFALSE 31422
// continue ;
31420: GO 31392
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31422: LD_VAR 0 4
31426: PUSH
31427: LD_INT 1
31429: ARRAY
31430: PPUSH
31431: LD_VAR 0 4
31435: PUSH
31436: LD_INT 2
31438: ARRAY
31439: PPUSH
31440: CALL_OW 428
31444: PUSH
31445: LD_VAR 0 5
31449: IN
31450: IFFALSE 31479
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31452: LD_VAR 0 4
31456: PUSH
31457: LD_INT 1
31459: ARRAY
31460: PPUSH
31461: LD_VAR 0 4
31465: PUSH
31466: LD_INT 2
31468: ARRAY
31469: PPUSH
31470: LD_VAR 0 1
31474: PPUSH
31475: CALL_OW 456
// end ;
31479: GO 31392
31481: POP
31482: POP
// end ;
31483: LD_VAR 0 3
31487: RET
// export function Count ( array ) ; var i ; begin
31488: LD_INT 0
31490: PPUSH
31491: PPUSH
// result := 0 ;
31492: LD_ADDR_VAR 0 2
31496: PUSH
31497: LD_INT 0
31499: ST_TO_ADDR
// for i in array do
31500: LD_ADDR_VAR 0 3
31504: PUSH
31505: LD_VAR 0 1
31509: PUSH
31510: FOR_IN
31511: IFFALSE 31535
// if i then
31513: LD_VAR 0 3
31517: IFFALSE 31533
// result := result + 1 ;
31519: LD_ADDR_VAR 0 2
31523: PUSH
31524: LD_VAR 0 2
31528: PUSH
31529: LD_INT 1
31531: PLUS
31532: ST_TO_ADDR
31533: GO 31510
31535: POP
31536: POP
// end ;
31537: LD_VAR 0 2
31541: RET
// export function IsEmpty ( building ) ; begin
31542: LD_INT 0
31544: PPUSH
// if not building then
31545: LD_VAR 0 1
31549: NOT
31550: IFFALSE 31554
// exit ;
31552: GO 31597
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31554: LD_ADDR_VAR 0 2
31558: PUSH
31559: LD_VAR 0 1
31563: PUSH
31564: LD_INT 22
31566: PUSH
31567: LD_VAR 0 1
31571: PPUSH
31572: CALL_OW 255
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 58
31583: PUSH
31584: EMPTY
31585: LIST
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PPUSH
31591: CALL_OW 69
31595: IN
31596: ST_TO_ADDR
// end ;
31597: LD_VAR 0 2
31601: RET
// export function IsNotFull ( building ) ; begin
31602: LD_INT 0
31604: PPUSH
// if not building then
31605: LD_VAR 0 1
31609: NOT
31610: IFFALSE 31614
// exit ;
31612: GO 31633
// result := UnitsInside ( building ) < 6 ;
31614: LD_ADDR_VAR 0 2
31618: PUSH
31619: LD_VAR 0 1
31623: PPUSH
31624: CALL_OW 313
31628: PUSH
31629: LD_INT 6
31631: LESS
31632: ST_TO_ADDR
// end ;
31633: LD_VAR 0 2
31637: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31638: LD_INT 0
31640: PPUSH
31641: PPUSH
31642: PPUSH
31643: PPUSH
// tmp := [ ] ;
31644: LD_ADDR_VAR 0 3
31648: PUSH
31649: EMPTY
31650: ST_TO_ADDR
// list := [ ] ;
31651: LD_ADDR_VAR 0 5
31655: PUSH
31656: EMPTY
31657: ST_TO_ADDR
// for i = 16 to 25 do
31658: LD_ADDR_VAR 0 4
31662: PUSH
31663: DOUBLE
31664: LD_INT 16
31666: DEC
31667: ST_TO_ADDR
31668: LD_INT 25
31670: PUSH
31671: FOR_TO
31672: IFFALSE 31745
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31674: LD_ADDR_VAR 0 3
31678: PUSH
31679: LD_VAR 0 3
31683: PUSH
31684: LD_INT 22
31686: PUSH
31687: LD_VAR 0 1
31691: PPUSH
31692: CALL_OW 255
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 91
31703: PUSH
31704: LD_VAR 0 1
31708: PUSH
31709: LD_INT 6
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 30
31719: PUSH
31720: LD_VAR 0 4
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: LIST
31733: PUSH
31734: EMPTY
31735: LIST
31736: PPUSH
31737: CALL_OW 69
31741: ADD
31742: ST_TO_ADDR
31743: GO 31671
31745: POP
31746: POP
// for i = 1 to tmp do
31747: LD_ADDR_VAR 0 4
31751: PUSH
31752: DOUBLE
31753: LD_INT 1
31755: DEC
31756: ST_TO_ADDR
31757: LD_VAR 0 3
31761: PUSH
31762: FOR_TO
31763: IFFALSE 31851
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31765: LD_ADDR_VAR 0 5
31769: PUSH
31770: LD_VAR 0 5
31774: PUSH
31775: LD_VAR 0 3
31779: PUSH
31780: LD_VAR 0 4
31784: ARRAY
31785: PPUSH
31786: CALL_OW 266
31790: PUSH
31791: LD_VAR 0 3
31795: PUSH
31796: LD_VAR 0 4
31800: ARRAY
31801: PPUSH
31802: CALL_OW 250
31806: PUSH
31807: LD_VAR 0 3
31811: PUSH
31812: LD_VAR 0 4
31816: ARRAY
31817: PPUSH
31818: CALL_OW 251
31822: PUSH
31823: LD_VAR 0 3
31827: PUSH
31828: LD_VAR 0 4
31832: ARRAY
31833: PPUSH
31834: CALL_OW 254
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: ADD
31848: ST_TO_ADDR
31849: GO 31762
31851: POP
31852: POP
// result := list ;
31853: LD_ADDR_VAR 0 2
31857: PUSH
31858: LD_VAR 0 5
31862: ST_TO_ADDR
// end ;
31863: LD_VAR 0 2
31867: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31868: LD_INT 0
31870: PPUSH
31871: PPUSH
31872: PPUSH
31873: PPUSH
31874: PPUSH
31875: PPUSH
31876: PPUSH
// if not factory then
31877: LD_VAR 0 1
31881: NOT
31882: IFFALSE 31886
// exit ;
31884: GO 32479
// if control = control_apeman then
31886: LD_VAR 0 4
31890: PUSH
31891: LD_INT 5
31893: EQUAL
31894: IFFALSE 32003
// begin tmp := UnitsInside ( factory ) ;
31896: LD_ADDR_VAR 0 8
31900: PUSH
31901: LD_VAR 0 1
31905: PPUSH
31906: CALL_OW 313
31910: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31911: LD_VAR 0 8
31915: PPUSH
31916: LD_INT 25
31918: PUSH
31919: LD_INT 12
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PPUSH
31926: CALL_OW 72
31930: NOT
31931: IFFALSE 31941
// control := control_manual ;
31933: LD_ADDR_VAR 0 4
31937: PUSH
31938: LD_INT 1
31940: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31941: LD_ADDR_VAR 0 8
31945: PUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL 31638 0 1
31955: ST_TO_ADDR
// if tmp then
31956: LD_VAR 0 8
31960: IFFALSE 32003
// begin for i in tmp do
31962: LD_ADDR_VAR 0 7
31966: PUSH
31967: LD_VAR 0 8
31971: PUSH
31972: FOR_IN
31973: IFFALSE 32001
// if i [ 1 ] = b_ext_radio then
31975: LD_VAR 0 7
31979: PUSH
31980: LD_INT 1
31982: ARRAY
31983: PUSH
31984: LD_INT 22
31986: EQUAL
31987: IFFALSE 31999
// begin control := control_remote ;
31989: LD_ADDR_VAR 0 4
31993: PUSH
31994: LD_INT 2
31996: ST_TO_ADDR
// break ;
31997: GO 32001
// end ;
31999: GO 31972
32001: POP
32002: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32003: LD_VAR 0 1
32007: PPUSH
32008: LD_VAR 0 2
32012: PPUSH
32013: LD_VAR 0 3
32017: PPUSH
32018: LD_VAR 0 4
32022: PPUSH
32023: LD_VAR 0 5
32027: PPUSH
32028: CALL_OW 448
32032: IFFALSE 32067
// begin result := [ chassis , engine , control , weapon ] ;
32034: LD_ADDR_VAR 0 6
32038: PUSH
32039: LD_VAR 0 2
32043: PUSH
32044: LD_VAR 0 3
32048: PUSH
32049: LD_VAR 0 4
32053: PUSH
32054: LD_VAR 0 5
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: ST_TO_ADDR
// exit ;
32065: GO 32479
// end ; _chassis := AvailableChassisList ( factory ) ;
32067: LD_ADDR_VAR 0 9
32071: PUSH
32072: LD_VAR 0 1
32076: PPUSH
32077: CALL_OW 475
32081: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32082: LD_ADDR_VAR 0 11
32086: PUSH
32087: LD_VAR 0 1
32091: PPUSH
32092: CALL_OW 476
32096: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32097: LD_ADDR_VAR 0 12
32101: PUSH
32102: LD_VAR 0 1
32106: PPUSH
32107: CALL_OW 477
32111: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32112: LD_ADDR_VAR 0 10
32116: PUSH
32117: LD_VAR 0 1
32121: PPUSH
32122: CALL_OW 478
32126: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32127: LD_VAR 0 9
32131: NOT
32132: PUSH
32133: LD_VAR 0 11
32137: NOT
32138: OR
32139: PUSH
32140: LD_VAR 0 12
32144: NOT
32145: OR
32146: PUSH
32147: LD_VAR 0 10
32151: NOT
32152: OR
32153: IFFALSE 32188
// begin result := [ chassis , engine , control , weapon ] ;
32155: LD_ADDR_VAR 0 6
32159: PUSH
32160: LD_VAR 0 2
32164: PUSH
32165: LD_VAR 0 3
32169: PUSH
32170: LD_VAR 0 4
32174: PUSH
32175: LD_VAR 0 5
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: ST_TO_ADDR
// exit ;
32186: GO 32479
// end ; if not chassis in _chassis then
32188: LD_VAR 0 2
32192: PUSH
32193: LD_VAR 0 9
32197: IN
32198: NOT
32199: IFFALSE 32225
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32201: LD_ADDR_VAR 0 2
32205: PUSH
32206: LD_VAR 0 9
32210: PUSH
32211: LD_INT 1
32213: PPUSH
32214: LD_VAR 0 9
32218: PPUSH
32219: CALL_OW 12
32223: ARRAY
32224: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32225: LD_VAR 0 2
32229: PPUSH
32230: LD_VAR 0 3
32234: PPUSH
32235: CALL 32484 0 2
32239: NOT
32240: IFFALSE 32299
// repeat engine := _engine [ 1 ] ;
32242: LD_ADDR_VAR 0 3
32246: PUSH
32247: LD_VAR 0 11
32251: PUSH
32252: LD_INT 1
32254: ARRAY
32255: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32256: LD_ADDR_VAR 0 11
32260: PUSH
32261: LD_VAR 0 11
32265: PPUSH
32266: LD_INT 1
32268: PPUSH
32269: CALL_OW 3
32273: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32274: LD_VAR 0 2
32278: PPUSH
32279: LD_VAR 0 3
32283: PPUSH
32284: CALL 32484 0 2
32288: PUSH
32289: LD_VAR 0 11
32293: PUSH
32294: EMPTY
32295: EQUAL
32296: OR
32297: IFFALSE 32242
// if not control in _control then
32299: LD_VAR 0 4
32303: PUSH
32304: LD_VAR 0 12
32308: IN
32309: NOT
32310: IFFALSE 32336
// control := _control [ rand ( 1 , _control ) ] ;
32312: LD_ADDR_VAR 0 4
32316: PUSH
32317: LD_VAR 0 12
32321: PUSH
32322: LD_INT 1
32324: PPUSH
32325: LD_VAR 0 12
32329: PPUSH
32330: CALL_OW 12
32334: ARRAY
32335: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32336: LD_VAR 0 2
32340: PPUSH
32341: LD_VAR 0 5
32345: PPUSH
32346: CALL 32704 0 2
32350: NOT
32351: IFFALSE 32410
// repeat weapon := _weapon [ 1 ] ;
32353: LD_ADDR_VAR 0 5
32357: PUSH
32358: LD_VAR 0 10
32362: PUSH
32363: LD_INT 1
32365: ARRAY
32366: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32367: LD_ADDR_VAR 0 10
32371: PUSH
32372: LD_VAR 0 10
32376: PPUSH
32377: LD_INT 1
32379: PPUSH
32380: CALL_OW 3
32384: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32385: LD_VAR 0 2
32389: PPUSH
32390: LD_VAR 0 5
32394: PPUSH
32395: CALL 32704 0 2
32399: PUSH
32400: LD_VAR 0 10
32404: PUSH
32405: EMPTY
32406: EQUAL
32407: OR
32408: IFFALSE 32353
// result := [ ] ;
32410: LD_ADDR_VAR 0 6
32414: PUSH
32415: EMPTY
32416: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32417: LD_VAR 0 1
32421: PPUSH
32422: LD_VAR 0 2
32426: PPUSH
32427: LD_VAR 0 3
32431: PPUSH
32432: LD_VAR 0 4
32436: PPUSH
32437: LD_VAR 0 5
32441: PPUSH
32442: CALL_OW 448
32446: IFFALSE 32479
// result := [ chassis , engine , control , weapon ] ;
32448: LD_ADDR_VAR 0 6
32452: PUSH
32453: LD_VAR 0 2
32457: PUSH
32458: LD_VAR 0 3
32462: PUSH
32463: LD_VAR 0 4
32467: PUSH
32468: LD_VAR 0 5
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: ST_TO_ADDR
// end ;
32479: LD_VAR 0 6
32483: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32484: LD_INT 0
32486: PPUSH
// if not chassis or not engine then
32487: LD_VAR 0 1
32491: NOT
32492: PUSH
32493: LD_VAR 0 2
32497: NOT
32498: OR
32499: IFFALSE 32503
// exit ;
32501: GO 32699
// case engine of engine_solar :
32503: LD_VAR 0 2
32507: PUSH
32508: LD_INT 2
32510: DOUBLE
32511: EQUAL
32512: IFTRUE 32516
32514: GO 32554
32516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 11
32524: PUSH
32525: LD_INT 12
32527: PUSH
32528: LD_INT 13
32530: PUSH
32531: LD_INT 14
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: ST_TO_ADDR
32552: GO 32683
32554: LD_INT 1
32556: DOUBLE
32557: EQUAL
32558: IFTRUE 32562
32560: GO 32624
32562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32563: LD_ADDR_VAR 0 3
32567: PUSH
32568: LD_INT 11
32570: PUSH
32571: LD_INT 12
32573: PUSH
32574: LD_INT 13
32576: PUSH
32577: LD_INT 14
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: LD_INT 2
32585: PUSH
32586: LD_INT 3
32588: PUSH
32589: LD_INT 4
32591: PUSH
32592: LD_INT 5
32594: PUSH
32595: LD_INT 21
32597: PUSH
32598: LD_INT 23
32600: PUSH
32601: LD_INT 22
32603: PUSH
32604: LD_INT 24
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
32622: GO 32683
32624: LD_INT 3
32626: DOUBLE
32627: EQUAL
32628: IFTRUE 32632
32630: GO 32682
32632: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32633: LD_ADDR_VAR 0 3
32637: PUSH
32638: LD_INT 13
32640: PUSH
32641: LD_INT 14
32643: PUSH
32644: LD_INT 2
32646: PUSH
32647: LD_INT 3
32649: PUSH
32650: LD_INT 4
32652: PUSH
32653: LD_INT 5
32655: PUSH
32656: LD_INT 21
32658: PUSH
32659: LD_INT 22
32661: PUSH
32662: LD_INT 23
32664: PUSH
32665: LD_INT 24
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: ST_TO_ADDR
32680: GO 32683
32682: POP
// result := ( chassis in result ) ;
32683: LD_ADDR_VAR 0 3
32687: PUSH
32688: LD_VAR 0 1
32692: PUSH
32693: LD_VAR 0 3
32697: IN
32698: ST_TO_ADDR
// end ;
32699: LD_VAR 0 3
32703: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32704: LD_INT 0
32706: PPUSH
// if not chassis or not weapon then
32707: LD_VAR 0 1
32711: NOT
32712: PUSH
32713: LD_VAR 0 2
32717: NOT
32718: OR
32719: IFFALSE 32723
// exit ;
32721: GO 33785
// case weapon of us_machine_gun :
32723: LD_VAR 0 2
32727: PUSH
32728: LD_INT 2
32730: DOUBLE
32731: EQUAL
32732: IFTRUE 32736
32734: GO 32766
32736: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: LD_INT 2
32747: PUSH
32748: LD_INT 3
32750: PUSH
32751: LD_INT 4
32753: PUSH
32754: LD_INT 5
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: ST_TO_ADDR
32764: GO 33769
32766: LD_INT 3
32768: DOUBLE
32769: EQUAL
32770: IFTRUE 32774
32772: GO 32804
32774: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32775: LD_ADDR_VAR 0 3
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: LD_INT 3
32788: PUSH
32789: LD_INT 4
32791: PUSH
32792: LD_INT 5
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: ST_TO_ADDR
32802: GO 33769
32804: LD_INT 11
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32812
32810: GO 32842
32812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32813: LD_ADDR_VAR 0 3
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 3
32826: PUSH
32827: LD_INT 4
32829: PUSH
32830: LD_INT 5
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: ST_TO_ADDR
32840: GO 33769
32842: LD_INT 4
32844: DOUBLE
32845: EQUAL
32846: IFTRUE 32850
32848: GO 32876
32850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32851: LD_ADDR_VAR 0 3
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: LD_INT 4
32864: PUSH
32865: LD_INT 5
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: ST_TO_ADDR
32874: GO 33769
32876: LD_INT 5
32878: DOUBLE
32879: EQUAL
32880: IFTRUE 32884
32882: GO 32910
32884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32885: LD_ADDR_VAR 0 3
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: LD_INT 3
32895: PUSH
32896: LD_INT 4
32898: PUSH
32899: LD_INT 5
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: ST_TO_ADDR
32908: GO 33769
32910: LD_INT 9
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32918
32916: GO 32944
32918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32919: LD_ADDR_VAR 0 3
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: LD_INT 3
32929: PUSH
32930: LD_INT 4
32932: PUSH
32933: LD_INT 5
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: ST_TO_ADDR
32942: GO 33769
32944: LD_INT 7
32946: DOUBLE
32947: EQUAL
32948: IFTRUE 32952
32950: GO 32978
32952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32953: LD_ADDR_VAR 0 3
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: LD_INT 3
32963: PUSH
32964: LD_INT 4
32966: PUSH
32967: LD_INT 5
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: ST_TO_ADDR
32976: GO 33769
32978: LD_INT 12
32980: DOUBLE
32981: EQUAL
32982: IFTRUE 32986
32984: GO 33012
32986: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32987: LD_ADDR_VAR 0 3
32991: PUSH
32992: LD_INT 2
32994: PUSH
32995: LD_INT 3
32997: PUSH
32998: LD_INT 4
33000: PUSH
33001: LD_INT 5
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: ST_TO_ADDR
33010: GO 33769
33012: LD_INT 13
33014: DOUBLE
33015: EQUAL
33016: IFTRUE 33020
33018: GO 33046
33020: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33021: LD_ADDR_VAR 0 3
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: LD_INT 4
33034: PUSH
33035: LD_INT 5
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: ST_TO_ADDR
33044: GO 33769
33046: LD_INT 14
33048: DOUBLE
33049: EQUAL
33050: IFTRUE 33054
33052: GO 33072
33054: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33055: LD_ADDR_VAR 0 3
33059: PUSH
33060: LD_INT 4
33062: PUSH
33063: LD_INT 5
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: ST_TO_ADDR
33070: GO 33769
33072: LD_INT 6
33074: DOUBLE
33075: EQUAL
33076: IFTRUE 33080
33078: GO 33098
33080: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33081: LD_ADDR_VAR 0 3
33085: PUSH
33086: LD_INT 4
33088: PUSH
33089: LD_INT 5
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: ST_TO_ADDR
33096: GO 33769
33098: LD_INT 10
33100: DOUBLE
33101: EQUAL
33102: IFTRUE 33106
33104: GO 33124
33106: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33107: LD_ADDR_VAR 0 3
33111: PUSH
33112: LD_INT 4
33114: PUSH
33115: LD_INT 5
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: ST_TO_ADDR
33122: GO 33769
33124: LD_INT 22
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33132
33130: GO 33158
33132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33133: LD_ADDR_VAR 0 3
33137: PUSH
33138: LD_INT 11
33140: PUSH
33141: LD_INT 12
33143: PUSH
33144: LD_INT 13
33146: PUSH
33147: LD_INT 14
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: ST_TO_ADDR
33156: GO 33769
33158: LD_INT 23
33160: DOUBLE
33161: EQUAL
33162: IFTRUE 33166
33164: GO 33192
33166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33167: LD_ADDR_VAR 0 3
33171: PUSH
33172: LD_INT 11
33174: PUSH
33175: LD_INT 12
33177: PUSH
33178: LD_INT 13
33180: PUSH
33181: LD_INT 14
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: ST_TO_ADDR
33190: GO 33769
33192: LD_INT 24
33194: DOUBLE
33195: EQUAL
33196: IFTRUE 33200
33198: GO 33226
33200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33201: LD_ADDR_VAR 0 3
33205: PUSH
33206: LD_INT 11
33208: PUSH
33209: LD_INT 12
33211: PUSH
33212: LD_INT 13
33214: PUSH
33215: LD_INT 14
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: ST_TO_ADDR
33224: GO 33769
33226: LD_INT 30
33228: DOUBLE
33229: EQUAL
33230: IFTRUE 33234
33232: GO 33260
33234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33235: LD_ADDR_VAR 0 3
33239: PUSH
33240: LD_INT 11
33242: PUSH
33243: LD_INT 12
33245: PUSH
33246: LD_INT 13
33248: PUSH
33249: LD_INT 14
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: ST_TO_ADDR
33258: GO 33769
33260: LD_INT 25
33262: DOUBLE
33263: EQUAL
33264: IFTRUE 33268
33266: GO 33286
33268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33269: LD_ADDR_VAR 0 3
33273: PUSH
33274: LD_INT 13
33276: PUSH
33277: LD_INT 14
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: ST_TO_ADDR
33284: GO 33769
33286: LD_INT 27
33288: DOUBLE
33289: EQUAL
33290: IFTRUE 33294
33292: GO 33312
33294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33295: LD_ADDR_VAR 0 3
33299: PUSH
33300: LD_INT 13
33302: PUSH
33303: LD_INT 14
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: ST_TO_ADDR
33310: GO 33769
33312: LD_EXP 26
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33348
33322: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33323: LD_ADDR_VAR 0 3
33327: PUSH
33328: LD_INT 11
33330: PUSH
33331: LD_INT 12
33333: PUSH
33334: LD_INT 13
33336: PUSH
33337: LD_INT 14
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: ST_TO_ADDR
33346: GO 33769
33348: LD_INT 28
33350: DOUBLE
33351: EQUAL
33352: IFTRUE 33356
33354: GO 33374
33356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33357: LD_ADDR_VAR 0 3
33361: PUSH
33362: LD_INT 13
33364: PUSH
33365: LD_INT 14
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: ST_TO_ADDR
33372: GO 33769
33374: LD_INT 29
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33400
33382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33383: LD_ADDR_VAR 0 3
33387: PUSH
33388: LD_INT 13
33390: PUSH
33391: LD_INT 14
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: ST_TO_ADDR
33398: GO 33769
33400: LD_INT 31
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33408
33406: GO 33426
33408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33409: LD_ADDR_VAR 0 3
33413: PUSH
33414: LD_INT 13
33416: PUSH
33417: LD_INT 14
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: ST_TO_ADDR
33424: GO 33769
33426: LD_INT 26
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33434
33432: GO 33452
33434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33435: LD_ADDR_VAR 0 3
33439: PUSH
33440: LD_INT 13
33442: PUSH
33443: LD_INT 14
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: ST_TO_ADDR
33450: GO 33769
33452: LD_INT 42
33454: DOUBLE
33455: EQUAL
33456: IFTRUE 33460
33458: GO 33486
33460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_INT 21
33468: PUSH
33469: LD_INT 22
33471: PUSH
33472: LD_INT 23
33474: PUSH
33475: LD_INT 24
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
33484: GO 33769
33486: LD_INT 43
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33520
33494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: LD_INT 21
33502: PUSH
33503: LD_INT 22
33505: PUSH
33506: LD_INT 23
33508: PUSH
33509: LD_INT 24
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
33518: GO 33769
33520: LD_INT 44
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33528
33526: GO 33554
33528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33529: LD_ADDR_VAR 0 3
33533: PUSH
33534: LD_INT 21
33536: PUSH
33537: LD_INT 22
33539: PUSH
33540: LD_INT 23
33542: PUSH
33543: LD_INT 24
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: ST_TO_ADDR
33552: GO 33769
33554: LD_INT 45
33556: DOUBLE
33557: EQUAL
33558: IFTRUE 33562
33560: GO 33588
33562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33563: LD_ADDR_VAR 0 3
33567: PUSH
33568: LD_INT 21
33570: PUSH
33571: LD_INT 22
33573: PUSH
33574: LD_INT 23
33576: PUSH
33577: LD_INT 24
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: ST_TO_ADDR
33586: GO 33769
33588: LD_INT 49
33590: DOUBLE
33591: EQUAL
33592: IFTRUE 33596
33594: GO 33622
33596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33597: LD_ADDR_VAR 0 3
33601: PUSH
33602: LD_INT 21
33604: PUSH
33605: LD_INT 22
33607: PUSH
33608: LD_INT 23
33610: PUSH
33611: LD_INT 24
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: ST_TO_ADDR
33620: GO 33769
33622: LD_INT 51
33624: DOUBLE
33625: EQUAL
33626: IFTRUE 33630
33628: GO 33656
33630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33631: LD_ADDR_VAR 0 3
33635: PUSH
33636: LD_INT 21
33638: PUSH
33639: LD_INT 22
33641: PUSH
33642: LD_INT 23
33644: PUSH
33645: LD_INT 24
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: ST_TO_ADDR
33654: GO 33769
33656: LD_INT 52
33658: DOUBLE
33659: EQUAL
33660: IFTRUE 33664
33662: GO 33690
33664: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33665: LD_ADDR_VAR 0 3
33669: PUSH
33670: LD_INT 21
33672: PUSH
33673: LD_INT 22
33675: PUSH
33676: LD_INT 23
33678: PUSH
33679: LD_INT 24
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: ST_TO_ADDR
33688: GO 33769
33690: LD_INT 53
33692: DOUBLE
33693: EQUAL
33694: IFTRUE 33698
33696: GO 33716
33698: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33699: LD_ADDR_VAR 0 3
33703: PUSH
33704: LD_INT 23
33706: PUSH
33707: LD_INT 24
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: ST_TO_ADDR
33714: GO 33769
33716: LD_INT 46
33718: DOUBLE
33719: EQUAL
33720: IFTRUE 33724
33722: GO 33742
33724: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33725: LD_ADDR_VAR 0 3
33729: PUSH
33730: LD_INT 23
33732: PUSH
33733: LD_INT 24
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: ST_TO_ADDR
33740: GO 33769
33742: LD_INT 47
33744: DOUBLE
33745: EQUAL
33746: IFTRUE 33750
33748: GO 33768
33750: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33751: LD_ADDR_VAR 0 3
33755: PUSH
33756: LD_INT 23
33758: PUSH
33759: LD_INT 24
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: ST_TO_ADDR
33766: GO 33769
33768: POP
// result := ( chassis in result ) ;
33769: LD_ADDR_VAR 0 3
33773: PUSH
33774: LD_VAR 0 1
33778: PUSH
33779: LD_VAR 0 3
33783: IN
33784: ST_TO_ADDR
// end ;
33785: LD_VAR 0 3
33789: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33790: LD_INT 0
33792: PPUSH
33793: PPUSH
33794: PPUSH
33795: PPUSH
33796: PPUSH
33797: PPUSH
33798: PPUSH
// result := array ;
33799: LD_ADDR_VAR 0 5
33803: PUSH
33804: LD_VAR 0 1
33808: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33809: LD_VAR 0 1
33813: NOT
33814: PUSH
33815: LD_VAR 0 2
33819: NOT
33820: OR
33821: PUSH
33822: LD_VAR 0 3
33826: NOT
33827: OR
33828: PUSH
33829: LD_VAR 0 2
33833: PUSH
33834: LD_VAR 0 1
33838: GREATER
33839: OR
33840: PUSH
33841: LD_VAR 0 3
33845: PUSH
33846: LD_VAR 0 1
33850: GREATER
33851: OR
33852: IFFALSE 33856
// exit ;
33854: GO 34152
// if direction then
33856: LD_VAR 0 4
33860: IFFALSE 33924
// begin d := 1 ;
33862: LD_ADDR_VAR 0 9
33866: PUSH
33867: LD_INT 1
33869: ST_TO_ADDR
// if i_from > i_to then
33870: LD_VAR 0 2
33874: PUSH
33875: LD_VAR 0 3
33879: GREATER
33880: IFFALSE 33906
// length := ( array - i_from ) + i_to else
33882: LD_ADDR_VAR 0 11
33886: PUSH
33887: LD_VAR 0 1
33891: PUSH
33892: LD_VAR 0 2
33896: MINUS
33897: PUSH
33898: LD_VAR 0 3
33902: PLUS
33903: ST_TO_ADDR
33904: GO 33922
// length := i_to - i_from ;
33906: LD_ADDR_VAR 0 11
33910: PUSH
33911: LD_VAR 0 3
33915: PUSH
33916: LD_VAR 0 2
33920: MINUS
33921: ST_TO_ADDR
// end else
33922: GO 33985
// begin d := - 1 ;
33924: LD_ADDR_VAR 0 9
33928: PUSH
33929: LD_INT 1
33931: NEG
33932: ST_TO_ADDR
// if i_from > i_to then
33933: LD_VAR 0 2
33937: PUSH
33938: LD_VAR 0 3
33942: GREATER
33943: IFFALSE 33963
// length := i_from - i_to else
33945: LD_ADDR_VAR 0 11
33949: PUSH
33950: LD_VAR 0 2
33954: PUSH
33955: LD_VAR 0 3
33959: MINUS
33960: ST_TO_ADDR
33961: GO 33985
// length := ( array - i_to ) + i_from ;
33963: LD_ADDR_VAR 0 11
33967: PUSH
33968: LD_VAR 0 1
33972: PUSH
33973: LD_VAR 0 3
33977: MINUS
33978: PUSH
33979: LD_VAR 0 2
33983: PLUS
33984: ST_TO_ADDR
// end ; if not length then
33985: LD_VAR 0 11
33989: NOT
33990: IFFALSE 33994
// exit ;
33992: GO 34152
// tmp := array ;
33994: LD_ADDR_VAR 0 10
33998: PUSH
33999: LD_VAR 0 1
34003: ST_TO_ADDR
// for i = 1 to length do
34004: LD_ADDR_VAR 0 6
34008: PUSH
34009: DOUBLE
34010: LD_INT 1
34012: DEC
34013: ST_TO_ADDR
34014: LD_VAR 0 11
34018: PUSH
34019: FOR_TO
34020: IFFALSE 34140
// begin for j = 1 to array do
34022: LD_ADDR_VAR 0 7
34026: PUSH
34027: DOUBLE
34028: LD_INT 1
34030: DEC
34031: ST_TO_ADDR
34032: LD_VAR 0 1
34036: PUSH
34037: FOR_TO
34038: IFFALSE 34126
// begin k := j + d ;
34040: LD_ADDR_VAR 0 8
34044: PUSH
34045: LD_VAR 0 7
34049: PUSH
34050: LD_VAR 0 9
34054: PLUS
34055: ST_TO_ADDR
// if k > array then
34056: LD_VAR 0 8
34060: PUSH
34061: LD_VAR 0 1
34065: GREATER
34066: IFFALSE 34076
// k := 1 ;
34068: LD_ADDR_VAR 0 8
34072: PUSH
34073: LD_INT 1
34075: ST_TO_ADDR
// if not k then
34076: LD_VAR 0 8
34080: NOT
34081: IFFALSE 34093
// k := array ;
34083: LD_ADDR_VAR 0 8
34087: PUSH
34088: LD_VAR 0 1
34092: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34093: LD_ADDR_VAR 0 10
34097: PUSH
34098: LD_VAR 0 10
34102: PPUSH
34103: LD_VAR 0 8
34107: PPUSH
34108: LD_VAR 0 1
34112: PUSH
34113: LD_VAR 0 7
34117: ARRAY
34118: PPUSH
34119: CALL_OW 1
34123: ST_TO_ADDR
// end ;
34124: GO 34037
34126: POP
34127: POP
// array := tmp ;
34128: LD_ADDR_VAR 0 1
34132: PUSH
34133: LD_VAR 0 10
34137: ST_TO_ADDR
// end ;
34138: GO 34019
34140: POP
34141: POP
// result := array ;
34142: LD_ADDR_VAR 0 5
34146: PUSH
34147: LD_VAR 0 1
34151: ST_TO_ADDR
// end ;
34152: LD_VAR 0 5
34156: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34157: LD_INT 0
34159: PPUSH
34160: PPUSH
// result := 0 ;
34161: LD_ADDR_VAR 0 3
34165: PUSH
34166: LD_INT 0
34168: ST_TO_ADDR
// if not array or not value in array then
34169: LD_VAR 0 1
34173: NOT
34174: PUSH
34175: LD_VAR 0 2
34179: PUSH
34180: LD_VAR 0 1
34184: IN
34185: NOT
34186: OR
34187: IFFALSE 34191
// exit ;
34189: GO 34245
// for i = 1 to array do
34191: LD_ADDR_VAR 0 4
34195: PUSH
34196: DOUBLE
34197: LD_INT 1
34199: DEC
34200: ST_TO_ADDR
34201: LD_VAR 0 1
34205: PUSH
34206: FOR_TO
34207: IFFALSE 34243
// if value = array [ i ] then
34209: LD_VAR 0 2
34213: PUSH
34214: LD_VAR 0 1
34218: PUSH
34219: LD_VAR 0 4
34223: ARRAY
34224: EQUAL
34225: IFFALSE 34241
// begin result := i ;
34227: LD_ADDR_VAR 0 3
34231: PUSH
34232: LD_VAR 0 4
34236: ST_TO_ADDR
// exit ;
34237: POP
34238: POP
34239: GO 34245
// end ;
34241: GO 34206
34243: POP
34244: POP
// end ;
34245: LD_VAR 0 3
34249: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34250: LD_INT 0
34252: PPUSH
// vc_chassis := chassis ;
34253: LD_ADDR_OWVAR 37
34257: PUSH
34258: LD_VAR 0 1
34262: ST_TO_ADDR
// vc_engine := engine ;
34263: LD_ADDR_OWVAR 39
34267: PUSH
34268: LD_VAR 0 2
34272: ST_TO_ADDR
// vc_control := control ;
34273: LD_ADDR_OWVAR 38
34277: PUSH
34278: LD_VAR 0 3
34282: ST_TO_ADDR
// vc_weapon := weapon ;
34283: LD_ADDR_OWVAR 40
34287: PUSH
34288: LD_VAR 0 4
34292: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34293: LD_ADDR_OWVAR 41
34297: PUSH
34298: LD_VAR 0 5
34302: ST_TO_ADDR
// end ;
34303: LD_VAR 0 6
34307: RET
// export function WantPlant ( unit ) ; var task ; begin
34308: LD_INT 0
34310: PPUSH
34311: PPUSH
// result := false ;
34312: LD_ADDR_VAR 0 2
34316: PUSH
34317: LD_INT 0
34319: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34320: LD_ADDR_VAR 0 3
34324: PUSH
34325: LD_VAR 0 1
34329: PPUSH
34330: CALL_OW 437
34334: ST_TO_ADDR
// if task then
34335: LD_VAR 0 3
34339: IFFALSE 34367
// if task [ 1 ] [ 1 ] = p then
34341: LD_VAR 0 3
34345: PUSH
34346: LD_INT 1
34348: ARRAY
34349: PUSH
34350: LD_INT 1
34352: ARRAY
34353: PUSH
34354: LD_STRING p
34356: EQUAL
34357: IFFALSE 34367
// result := true ;
34359: LD_ADDR_VAR 0 2
34363: PUSH
34364: LD_INT 1
34366: ST_TO_ADDR
// end ;
34367: LD_VAR 0 2
34371: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34372: LD_INT 0
34374: PPUSH
34375: PPUSH
34376: PPUSH
34377: PPUSH
// if pos < 1 then
34378: LD_VAR 0 2
34382: PUSH
34383: LD_INT 1
34385: LESS
34386: IFFALSE 34390
// exit ;
34388: GO 34693
// if pos = 1 then
34390: LD_VAR 0 2
34394: PUSH
34395: LD_INT 1
34397: EQUAL
34398: IFFALSE 34431
// result := Replace ( arr , pos [ 1 ] , value ) else
34400: LD_ADDR_VAR 0 4
34404: PUSH
34405: LD_VAR 0 1
34409: PPUSH
34410: LD_VAR 0 2
34414: PUSH
34415: LD_INT 1
34417: ARRAY
34418: PPUSH
34419: LD_VAR 0 3
34423: PPUSH
34424: CALL_OW 1
34428: ST_TO_ADDR
34429: GO 34693
// begin tmp := arr ;
34431: LD_ADDR_VAR 0 6
34435: PUSH
34436: LD_VAR 0 1
34440: ST_TO_ADDR
// s_arr := [ tmp ] ;
34441: LD_ADDR_VAR 0 7
34445: PUSH
34446: LD_VAR 0 6
34450: PUSH
34451: EMPTY
34452: LIST
34453: ST_TO_ADDR
// for i = 1 to pos - 1 do
34454: LD_ADDR_VAR 0 5
34458: PUSH
34459: DOUBLE
34460: LD_INT 1
34462: DEC
34463: ST_TO_ADDR
34464: LD_VAR 0 2
34468: PUSH
34469: LD_INT 1
34471: MINUS
34472: PUSH
34473: FOR_TO
34474: IFFALSE 34519
// begin tmp := tmp [ pos [ i ] ] ;
34476: LD_ADDR_VAR 0 6
34480: PUSH
34481: LD_VAR 0 6
34485: PUSH
34486: LD_VAR 0 2
34490: PUSH
34491: LD_VAR 0 5
34495: ARRAY
34496: ARRAY
34497: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34498: LD_ADDR_VAR 0 7
34502: PUSH
34503: LD_VAR 0 7
34507: PUSH
34508: LD_VAR 0 6
34512: PUSH
34513: EMPTY
34514: LIST
34515: ADD
34516: ST_TO_ADDR
// end ;
34517: GO 34473
34519: POP
34520: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34521: LD_ADDR_VAR 0 6
34525: PUSH
34526: LD_VAR 0 6
34530: PPUSH
34531: LD_VAR 0 2
34535: PUSH
34536: LD_VAR 0 2
34540: ARRAY
34541: PPUSH
34542: LD_VAR 0 3
34546: PPUSH
34547: CALL_OW 1
34551: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34552: LD_ADDR_VAR 0 7
34556: PUSH
34557: LD_VAR 0 7
34561: PPUSH
34562: LD_VAR 0 7
34566: PPUSH
34567: LD_VAR 0 6
34571: PPUSH
34572: CALL_OW 1
34576: ST_TO_ADDR
// for i = s_arr downto 2 do
34577: LD_ADDR_VAR 0 5
34581: PUSH
34582: DOUBLE
34583: LD_VAR 0 7
34587: INC
34588: ST_TO_ADDR
34589: LD_INT 2
34591: PUSH
34592: FOR_DOWNTO
34593: IFFALSE 34677
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34595: LD_ADDR_VAR 0 6
34599: PUSH
34600: LD_VAR 0 7
34604: PUSH
34605: LD_VAR 0 5
34609: PUSH
34610: LD_INT 1
34612: MINUS
34613: ARRAY
34614: PPUSH
34615: LD_VAR 0 2
34619: PUSH
34620: LD_VAR 0 5
34624: PUSH
34625: LD_INT 1
34627: MINUS
34628: ARRAY
34629: PPUSH
34630: LD_VAR 0 7
34634: PUSH
34635: LD_VAR 0 5
34639: ARRAY
34640: PPUSH
34641: CALL_OW 1
34645: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34646: LD_ADDR_VAR 0 7
34650: PUSH
34651: LD_VAR 0 7
34655: PPUSH
34656: LD_VAR 0 5
34660: PUSH
34661: LD_INT 1
34663: MINUS
34664: PPUSH
34665: LD_VAR 0 6
34669: PPUSH
34670: CALL_OW 1
34674: ST_TO_ADDR
// end ;
34675: GO 34592
34677: POP
34678: POP
// result := s_arr [ 1 ] ;
34679: LD_ADDR_VAR 0 4
34683: PUSH
34684: LD_VAR 0 7
34688: PUSH
34689: LD_INT 1
34691: ARRAY
34692: ST_TO_ADDR
// end ; end ;
34693: LD_VAR 0 4
34697: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34698: LD_INT 0
34700: PPUSH
34701: PPUSH
// if not list then
34702: LD_VAR 0 1
34706: NOT
34707: IFFALSE 34711
// exit ;
34709: GO 34802
// i := list [ pos1 ] ;
34711: LD_ADDR_VAR 0 5
34715: PUSH
34716: LD_VAR 0 1
34720: PUSH
34721: LD_VAR 0 2
34725: ARRAY
34726: ST_TO_ADDR
// if not i then
34727: LD_VAR 0 5
34731: NOT
34732: IFFALSE 34736
// exit ;
34734: GO 34802
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34736: LD_ADDR_VAR 0 1
34740: PUSH
34741: LD_VAR 0 1
34745: PPUSH
34746: LD_VAR 0 2
34750: PPUSH
34751: LD_VAR 0 1
34755: PUSH
34756: LD_VAR 0 3
34760: ARRAY
34761: PPUSH
34762: CALL_OW 1
34766: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34767: LD_ADDR_VAR 0 1
34771: PUSH
34772: LD_VAR 0 1
34776: PPUSH
34777: LD_VAR 0 3
34781: PPUSH
34782: LD_VAR 0 5
34786: PPUSH
34787: CALL_OW 1
34791: ST_TO_ADDR
// result := list ;
34792: LD_ADDR_VAR 0 4
34796: PUSH
34797: LD_VAR 0 1
34801: ST_TO_ADDR
// end ;
34802: LD_VAR 0 4
34806: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34807: LD_INT 0
34809: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34810: LD_ADDR_VAR 0 5
34814: PUSH
34815: LD_VAR 0 1
34819: PPUSH
34820: CALL_OW 250
34824: PPUSH
34825: LD_VAR 0 1
34829: PPUSH
34830: CALL_OW 251
34834: PPUSH
34835: LD_VAR 0 2
34839: PPUSH
34840: LD_VAR 0 3
34844: PPUSH
34845: LD_VAR 0 4
34849: PPUSH
34850: CALL 34860 0 5
34854: ST_TO_ADDR
// end ;
34855: LD_VAR 0 5
34859: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34860: LD_INT 0
34862: PPUSH
34863: PPUSH
34864: PPUSH
34865: PPUSH
// if not list then
34866: LD_VAR 0 3
34870: NOT
34871: IFFALSE 34875
// exit ;
34873: GO 35263
// result := [ ] ;
34875: LD_ADDR_VAR 0 6
34879: PUSH
34880: EMPTY
34881: ST_TO_ADDR
// for i in list do
34882: LD_ADDR_VAR 0 7
34886: PUSH
34887: LD_VAR 0 3
34891: PUSH
34892: FOR_IN
34893: IFFALSE 35095
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34895: LD_ADDR_VAR 0 9
34899: PUSH
34900: LD_VAR 0 7
34904: PPUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: LD_VAR 0 2
34914: PPUSH
34915: CALL_OW 297
34919: ST_TO_ADDR
// if not result then
34920: LD_VAR 0 6
34924: NOT
34925: IFFALSE 34951
// result := [ [ i , tmp ] ] else
34927: LD_ADDR_VAR 0 6
34931: PUSH
34932: LD_VAR 0 7
34936: PUSH
34937: LD_VAR 0 9
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: EMPTY
34947: LIST
34948: ST_TO_ADDR
34949: GO 35093
// begin if result [ result ] [ 2 ] < tmp then
34951: LD_VAR 0 6
34955: PUSH
34956: LD_VAR 0 6
34960: ARRAY
34961: PUSH
34962: LD_INT 2
34964: ARRAY
34965: PUSH
34966: LD_VAR 0 9
34970: LESS
34971: IFFALSE 35013
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34973: LD_ADDR_VAR 0 6
34977: PUSH
34978: LD_VAR 0 6
34982: PPUSH
34983: LD_VAR 0 6
34987: PUSH
34988: LD_INT 1
34990: PLUS
34991: PPUSH
34992: LD_VAR 0 7
34996: PUSH
34997: LD_VAR 0 9
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PPUSH
35006: CALL_OW 2
35010: ST_TO_ADDR
35011: GO 35093
// for j = 1 to result do
35013: LD_ADDR_VAR 0 8
35017: PUSH
35018: DOUBLE
35019: LD_INT 1
35021: DEC
35022: ST_TO_ADDR
35023: LD_VAR 0 6
35027: PUSH
35028: FOR_TO
35029: IFFALSE 35091
// begin if tmp < result [ j ] [ 2 ] then
35031: LD_VAR 0 9
35035: PUSH
35036: LD_VAR 0 6
35040: PUSH
35041: LD_VAR 0 8
35045: ARRAY
35046: PUSH
35047: LD_INT 2
35049: ARRAY
35050: LESS
35051: IFFALSE 35089
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35053: LD_ADDR_VAR 0 6
35057: PUSH
35058: LD_VAR 0 6
35062: PPUSH
35063: LD_VAR 0 8
35067: PPUSH
35068: LD_VAR 0 7
35072: PUSH
35073: LD_VAR 0 9
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PPUSH
35082: CALL_OW 2
35086: ST_TO_ADDR
// break ;
35087: GO 35091
// end ; end ;
35089: GO 35028
35091: POP
35092: POP
// end ; end ;
35093: GO 34892
35095: POP
35096: POP
// if result and not asc then
35097: LD_VAR 0 6
35101: PUSH
35102: LD_VAR 0 4
35106: NOT
35107: AND
35108: IFFALSE 35183
// begin tmp := result ;
35110: LD_ADDR_VAR 0 9
35114: PUSH
35115: LD_VAR 0 6
35119: ST_TO_ADDR
// for i = tmp downto 1 do
35120: LD_ADDR_VAR 0 7
35124: PUSH
35125: DOUBLE
35126: LD_VAR 0 9
35130: INC
35131: ST_TO_ADDR
35132: LD_INT 1
35134: PUSH
35135: FOR_DOWNTO
35136: IFFALSE 35181
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35138: LD_ADDR_VAR 0 6
35142: PUSH
35143: LD_VAR 0 6
35147: PPUSH
35148: LD_VAR 0 9
35152: PUSH
35153: LD_VAR 0 7
35157: MINUS
35158: PUSH
35159: LD_INT 1
35161: PLUS
35162: PPUSH
35163: LD_VAR 0 9
35167: PUSH
35168: LD_VAR 0 7
35172: ARRAY
35173: PPUSH
35174: CALL_OW 1
35178: ST_TO_ADDR
35179: GO 35135
35181: POP
35182: POP
// end ; tmp := [ ] ;
35183: LD_ADDR_VAR 0 9
35187: PUSH
35188: EMPTY
35189: ST_TO_ADDR
// if mode then
35190: LD_VAR 0 5
35194: IFFALSE 35263
// begin for i = 1 to result do
35196: LD_ADDR_VAR 0 7
35200: PUSH
35201: DOUBLE
35202: LD_INT 1
35204: DEC
35205: ST_TO_ADDR
35206: LD_VAR 0 6
35210: PUSH
35211: FOR_TO
35212: IFFALSE 35251
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35214: LD_ADDR_VAR 0 9
35218: PUSH
35219: LD_VAR 0 9
35223: PPUSH
35224: LD_VAR 0 7
35228: PPUSH
35229: LD_VAR 0 6
35233: PUSH
35234: LD_VAR 0 7
35238: ARRAY
35239: PUSH
35240: LD_INT 1
35242: ARRAY
35243: PPUSH
35244: CALL_OW 1
35248: ST_TO_ADDR
35249: GO 35211
35251: POP
35252: POP
// result := tmp ;
35253: LD_ADDR_VAR 0 6
35257: PUSH
35258: LD_VAR 0 9
35262: ST_TO_ADDR
// end ; end ;
35263: LD_VAR 0 6
35267: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35268: LD_INT 0
35270: PPUSH
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35276: LD_ADDR_VAR 0 5
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: EMPTY
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: ST_TO_ADDR
// if not x or not y then
35298: LD_VAR 0 2
35302: NOT
35303: PUSH
35304: LD_VAR 0 3
35308: NOT
35309: OR
35310: IFFALSE 35314
// exit ;
35312: GO 36966
// if not range then
35314: LD_VAR 0 4
35318: NOT
35319: IFFALSE 35329
// range := 10 ;
35321: LD_ADDR_VAR 0 4
35325: PUSH
35326: LD_INT 10
35328: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35329: LD_ADDR_VAR 0 8
35333: PUSH
35334: LD_INT 81
35336: PUSH
35337: LD_VAR 0 1
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 92
35348: PUSH
35349: LD_VAR 0 2
35353: PUSH
35354: LD_VAR 0 3
35358: PUSH
35359: LD_VAR 0 4
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 3
35372: PUSH
35373: LD_INT 21
35375: PUSH
35376: LD_INT 3
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: PPUSH
35392: CALL_OW 69
35396: ST_TO_ADDR
// if not tmp then
35397: LD_VAR 0 8
35401: NOT
35402: IFFALSE 35406
// exit ;
35404: GO 36966
// for i in tmp do
35406: LD_ADDR_VAR 0 6
35410: PUSH
35411: LD_VAR 0 8
35415: PUSH
35416: FOR_IN
35417: IFFALSE 36941
// begin points := [ 0 , 0 , 0 ] ;
35419: LD_ADDR_VAR 0 9
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: ST_TO_ADDR
// bpoints := 1 ;
35438: LD_ADDR_VAR 0 10
35442: PUSH
35443: LD_INT 1
35445: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35446: LD_VAR 0 6
35450: PPUSH
35451: CALL_OW 247
35455: PUSH
35456: LD_INT 1
35458: DOUBLE
35459: EQUAL
35460: IFTRUE 35464
35462: GO 36042
35464: POP
// begin if GetClass ( i ) = 1 then
35465: LD_VAR 0 6
35469: PPUSH
35470: CALL_OW 257
35474: PUSH
35475: LD_INT 1
35477: EQUAL
35478: IFFALSE 35499
// points := [ 10 , 5 , 3 ] ;
35480: LD_ADDR_VAR 0 9
35484: PUSH
35485: LD_INT 10
35487: PUSH
35488: LD_INT 5
35490: PUSH
35491: LD_INT 3
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35499: LD_VAR 0 6
35503: PPUSH
35504: CALL_OW 257
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 3
35514: PUSH
35515: LD_INT 4
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: IN
35523: IFFALSE 35544
// points := [ 3 , 2 , 1 ] ;
35525: LD_ADDR_VAR 0 9
35529: PUSH
35530: LD_INT 3
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35544: LD_VAR 0 6
35548: PPUSH
35549: CALL_OW 257
35553: PUSH
35554: LD_INT 5
35556: EQUAL
35557: IFFALSE 35578
// points := [ 130 , 5 , 2 ] ;
35559: LD_ADDR_VAR 0 9
35563: PUSH
35564: LD_INT 130
35566: PUSH
35567: LD_INT 5
35569: PUSH
35570: LD_INT 2
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35578: LD_VAR 0 6
35582: PPUSH
35583: CALL_OW 257
35587: PUSH
35588: LD_INT 8
35590: EQUAL
35591: IFFALSE 35612
// points := [ 35 , 35 , 30 ] ;
35593: LD_ADDR_VAR 0 9
35597: PUSH
35598: LD_INT 35
35600: PUSH
35601: LD_INT 35
35603: PUSH
35604: LD_INT 30
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35612: LD_VAR 0 6
35616: PPUSH
35617: CALL_OW 257
35621: PUSH
35622: LD_INT 9
35624: EQUAL
35625: IFFALSE 35646
// points := [ 20 , 55 , 40 ] ;
35627: LD_ADDR_VAR 0 9
35631: PUSH
35632: LD_INT 20
35634: PUSH
35635: LD_INT 55
35637: PUSH
35638: LD_INT 40
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35646: LD_VAR 0 6
35650: PPUSH
35651: CALL_OW 257
35655: PUSH
35656: LD_INT 12
35658: PUSH
35659: LD_INT 16
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: IN
35666: IFFALSE 35687
// points := [ 5 , 3 , 2 ] ;
35668: LD_ADDR_VAR 0 9
35672: PUSH
35673: LD_INT 5
35675: PUSH
35676: LD_INT 3
35678: PUSH
35679: LD_INT 2
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: LIST
35686: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35687: LD_VAR 0 6
35691: PPUSH
35692: CALL_OW 257
35696: PUSH
35697: LD_INT 17
35699: EQUAL
35700: IFFALSE 35721
// points := [ 100 , 50 , 75 ] ;
35702: LD_ADDR_VAR 0 9
35706: PUSH
35707: LD_INT 100
35709: PUSH
35710: LD_INT 50
35712: PUSH
35713: LD_INT 75
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35721: LD_VAR 0 6
35725: PPUSH
35726: CALL_OW 257
35730: PUSH
35731: LD_INT 15
35733: EQUAL
35734: IFFALSE 35755
// points := [ 10 , 5 , 3 ] ;
35736: LD_ADDR_VAR 0 9
35740: PUSH
35741: LD_INT 10
35743: PUSH
35744: LD_INT 5
35746: PUSH
35747: LD_INT 3
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: LIST
35754: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35755: LD_VAR 0 6
35759: PPUSH
35760: CALL_OW 257
35764: PUSH
35765: LD_INT 14
35767: EQUAL
35768: IFFALSE 35789
// points := [ 10 , 0 , 0 ] ;
35770: LD_ADDR_VAR 0 9
35774: PUSH
35775: LD_INT 10
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35789: LD_VAR 0 6
35793: PPUSH
35794: CALL_OW 257
35798: PUSH
35799: LD_INT 11
35801: EQUAL
35802: IFFALSE 35823
// points := [ 30 , 10 , 5 ] ;
35804: LD_ADDR_VAR 0 9
35808: PUSH
35809: LD_INT 30
35811: PUSH
35812: LD_INT 10
35814: PUSH
35815: LD_INT 5
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35823: LD_VAR 0 1
35827: PPUSH
35828: LD_INT 5
35830: PPUSH
35831: CALL_OW 321
35835: PUSH
35836: LD_INT 2
35838: EQUAL
35839: IFFALSE 35856
// bpoints := bpoints * 1.8 ;
35841: LD_ADDR_VAR 0 10
35845: PUSH
35846: LD_VAR 0 10
35850: PUSH
35851: LD_REAL  1.80000000000000E+0000
35854: MUL
35855: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35856: LD_VAR 0 6
35860: PPUSH
35861: CALL_OW 257
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: LD_INT 3
35874: PUSH
35875: LD_INT 4
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: IN
35884: PUSH
35885: LD_VAR 0 1
35889: PPUSH
35890: LD_INT 51
35892: PPUSH
35893: CALL_OW 321
35897: PUSH
35898: LD_INT 2
35900: EQUAL
35901: AND
35902: IFFALSE 35919
// bpoints := bpoints * 1.2 ;
35904: LD_ADDR_VAR 0 10
35908: PUSH
35909: LD_VAR 0 10
35913: PUSH
35914: LD_REAL  1.20000000000000E+0000
35917: MUL
35918: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35919: LD_VAR 0 6
35923: PPUSH
35924: CALL_OW 257
35928: PUSH
35929: LD_INT 5
35931: PUSH
35932: LD_INT 7
35934: PUSH
35935: LD_INT 9
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: IN
35943: PUSH
35944: LD_VAR 0 1
35948: PPUSH
35949: LD_INT 52
35951: PPUSH
35952: CALL_OW 321
35956: PUSH
35957: LD_INT 2
35959: EQUAL
35960: AND
35961: IFFALSE 35978
// bpoints := bpoints * 1.5 ;
35963: LD_ADDR_VAR 0 10
35967: PUSH
35968: LD_VAR 0 10
35972: PUSH
35973: LD_REAL  1.50000000000000E+0000
35976: MUL
35977: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35978: LD_VAR 0 1
35982: PPUSH
35983: LD_INT 66
35985: PPUSH
35986: CALL_OW 321
35990: PUSH
35991: LD_INT 2
35993: EQUAL
35994: IFFALSE 36011
// bpoints := bpoints * 1.1 ;
35996: LD_ADDR_VAR 0 10
36000: PUSH
36001: LD_VAR 0 10
36005: PUSH
36006: LD_REAL  1.10000000000000E+0000
36009: MUL
36010: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36011: LD_ADDR_VAR 0 10
36015: PUSH
36016: LD_VAR 0 10
36020: PUSH
36021: LD_VAR 0 6
36025: PPUSH
36026: LD_INT 1
36028: PPUSH
36029: CALL_OW 259
36033: PUSH
36034: LD_REAL  1.15000000000000E+0000
36037: MUL
36038: MUL
36039: ST_TO_ADDR
// end ; unit_vehicle :
36040: GO 36870
36042: LD_INT 2
36044: DOUBLE
36045: EQUAL
36046: IFTRUE 36050
36048: GO 36858
36050: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36051: LD_VAR 0 6
36055: PPUSH
36056: CALL_OW 264
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: LD_INT 42
36066: PUSH
36067: LD_INT 24
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: IN
36075: IFFALSE 36096
// points := [ 25 , 5 , 3 ] ;
36077: LD_ADDR_VAR 0 9
36081: PUSH
36082: LD_INT 25
36084: PUSH
36085: LD_INT 5
36087: PUSH
36088: LD_INT 3
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36096: LD_VAR 0 6
36100: PPUSH
36101: CALL_OW 264
36105: PUSH
36106: LD_INT 4
36108: PUSH
36109: LD_INT 43
36111: PUSH
36112: LD_INT 25
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: IN
36120: IFFALSE 36141
// points := [ 40 , 15 , 5 ] ;
36122: LD_ADDR_VAR 0 9
36126: PUSH
36127: LD_INT 40
36129: PUSH
36130: LD_INT 15
36132: PUSH
36133: LD_INT 5
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36141: LD_VAR 0 6
36145: PPUSH
36146: CALL_OW 264
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: LD_INT 23
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: IN
36161: IFFALSE 36182
// points := [ 7 , 25 , 8 ] ;
36163: LD_ADDR_VAR 0 9
36167: PUSH
36168: LD_INT 7
36170: PUSH
36171: LD_INT 25
36173: PUSH
36174: LD_INT 8
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36182: LD_VAR 0 6
36186: PPUSH
36187: CALL_OW 264
36191: PUSH
36192: LD_INT 5
36194: PUSH
36195: LD_INT 27
36197: PUSH
36198: LD_INT 44
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: IN
36206: IFFALSE 36227
// points := [ 14 , 50 , 16 ] ;
36208: LD_ADDR_VAR 0 9
36212: PUSH
36213: LD_INT 14
36215: PUSH
36216: LD_INT 50
36218: PUSH
36219: LD_INT 16
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36227: LD_VAR 0 6
36231: PPUSH
36232: CALL_OW 264
36236: PUSH
36237: LD_INT 6
36239: PUSH
36240: LD_INT 46
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: IN
36247: IFFALSE 36268
// points := [ 32 , 120 , 70 ] ;
36249: LD_ADDR_VAR 0 9
36253: PUSH
36254: LD_INT 32
36256: PUSH
36257: LD_INT 120
36259: PUSH
36260: LD_INT 70
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36268: LD_VAR 0 6
36272: PPUSH
36273: CALL_OW 264
36277: PUSH
36278: LD_INT 7
36280: PUSH
36281: LD_INT 28
36283: PUSH
36284: LD_INT 45
36286: PUSH
36287: LD_EXP 26
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: IN
36298: IFFALSE 36319
// points := [ 35 , 20 , 45 ] ;
36300: LD_ADDR_VAR 0 9
36304: PUSH
36305: LD_INT 35
36307: PUSH
36308: LD_INT 20
36310: PUSH
36311: LD_INT 45
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: LIST
36318: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36319: LD_VAR 0 6
36323: PPUSH
36324: CALL_OW 264
36328: PUSH
36329: LD_INT 47
36331: PUSH
36332: EMPTY
36333: LIST
36334: IN
36335: IFFALSE 36356
// points := [ 67 , 45 , 75 ] ;
36337: LD_ADDR_VAR 0 9
36341: PUSH
36342: LD_INT 67
36344: PUSH
36345: LD_INT 45
36347: PUSH
36348: LD_INT 75
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36356: LD_VAR 0 6
36360: PPUSH
36361: CALL_OW 264
36365: PUSH
36366: LD_INT 26
36368: PUSH
36369: EMPTY
36370: LIST
36371: IN
36372: IFFALSE 36393
// points := [ 120 , 30 , 80 ] ;
36374: LD_ADDR_VAR 0 9
36378: PUSH
36379: LD_INT 120
36381: PUSH
36382: LD_INT 30
36384: PUSH
36385: LD_INT 80
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36393: LD_VAR 0 6
36397: PPUSH
36398: CALL_OW 264
36402: PUSH
36403: LD_INT 22
36405: PUSH
36406: EMPTY
36407: LIST
36408: IN
36409: IFFALSE 36430
// points := [ 40 , 1 , 1 ] ;
36411: LD_ADDR_VAR 0 9
36415: PUSH
36416: LD_INT 40
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36430: LD_VAR 0 6
36434: PPUSH
36435: CALL_OW 264
36439: PUSH
36440: LD_INT 29
36442: PUSH
36443: EMPTY
36444: LIST
36445: IN
36446: IFFALSE 36467
// points := [ 70 , 200 , 400 ] ;
36448: LD_ADDR_VAR 0 9
36452: PUSH
36453: LD_INT 70
36455: PUSH
36456: LD_INT 200
36458: PUSH
36459: LD_INT 400
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36467: LD_VAR 0 6
36471: PPUSH
36472: CALL_OW 264
36476: PUSH
36477: LD_INT 14
36479: PUSH
36480: LD_INT 53
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: IN
36487: IFFALSE 36508
// points := [ 40 , 10 , 20 ] ;
36489: LD_ADDR_VAR 0 9
36493: PUSH
36494: LD_INT 40
36496: PUSH
36497: LD_INT 10
36499: PUSH
36500: LD_INT 20
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36508: LD_VAR 0 6
36512: PPUSH
36513: CALL_OW 264
36517: PUSH
36518: LD_INT 9
36520: PUSH
36521: EMPTY
36522: LIST
36523: IN
36524: IFFALSE 36545
// points := [ 5 , 70 , 20 ] ;
36526: LD_ADDR_VAR 0 9
36530: PUSH
36531: LD_INT 5
36533: PUSH
36534: LD_INT 70
36536: PUSH
36537: LD_INT 20
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: LIST
36544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36545: LD_VAR 0 6
36549: PPUSH
36550: CALL_OW 264
36554: PUSH
36555: LD_INT 10
36557: PUSH
36558: EMPTY
36559: LIST
36560: IN
36561: IFFALSE 36582
// points := [ 35 , 110 , 70 ] ;
36563: LD_ADDR_VAR 0 9
36567: PUSH
36568: LD_INT 35
36570: PUSH
36571: LD_INT 110
36573: PUSH
36574: LD_INT 70
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36582: LD_VAR 0 6
36586: PPUSH
36587: CALL_OW 265
36591: PUSH
36592: LD_INT 25
36594: EQUAL
36595: IFFALSE 36616
// points := [ 80 , 65 , 100 ] ;
36597: LD_ADDR_VAR 0 9
36601: PUSH
36602: LD_INT 80
36604: PUSH
36605: LD_INT 65
36607: PUSH
36608: LD_INT 100
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36616: LD_VAR 0 6
36620: PPUSH
36621: CALL_OW 263
36625: PUSH
36626: LD_INT 1
36628: EQUAL
36629: IFFALSE 36664
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36631: LD_ADDR_VAR 0 10
36635: PUSH
36636: LD_VAR 0 10
36640: PUSH
36641: LD_VAR 0 6
36645: PPUSH
36646: CALL_OW 311
36650: PPUSH
36651: LD_INT 3
36653: PPUSH
36654: CALL_OW 259
36658: PUSH
36659: LD_INT 4
36661: MUL
36662: MUL
36663: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36664: LD_VAR 0 6
36668: PPUSH
36669: CALL_OW 263
36673: PUSH
36674: LD_INT 2
36676: EQUAL
36677: IFFALSE 36728
// begin j := IsControledBy ( i ) ;
36679: LD_ADDR_VAR 0 7
36683: PUSH
36684: LD_VAR 0 6
36688: PPUSH
36689: CALL_OW 312
36693: ST_TO_ADDR
// if j then
36694: LD_VAR 0 7
36698: IFFALSE 36728
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36700: LD_ADDR_VAR 0 10
36704: PUSH
36705: LD_VAR 0 10
36709: PUSH
36710: LD_VAR 0 7
36714: PPUSH
36715: LD_INT 3
36717: PPUSH
36718: CALL_OW 259
36722: PUSH
36723: LD_INT 3
36725: MUL
36726: MUL
36727: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36728: LD_VAR 0 6
36732: PPUSH
36733: CALL_OW 264
36737: PUSH
36738: LD_INT 5
36740: PUSH
36741: LD_INT 6
36743: PUSH
36744: LD_INT 46
36746: PUSH
36747: LD_INT 44
36749: PUSH
36750: LD_INT 47
36752: PUSH
36753: LD_INT 45
36755: PUSH
36756: LD_INT 28
36758: PUSH
36759: LD_INT 7
36761: PUSH
36762: LD_INT 27
36764: PUSH
36765: LD_INT 29
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: IN
36780: PUSH
36781: LD_VAR 0 1
36785: PPUSH
36786: LD_INT 52
36788: PPUSH
36789: CALL_OW 321
36793: PUSH
36794: LD_INT 2
36796: EQUAL
36797: AND
36798: IFFALSE 36815
// bpoints := bpoints * 1.2 ;
36800: LD_ADDR_VAR 0 10
36804: PUSH
36805: LD_VAR 0 10
36809: PUSH
36810: LD_REAL  1.20000000000000E+0000
36813: MUL
36814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36815: LD_VAR 0 6
36819: PPUSH
36820: CALL_OW 264
36824: PUSH
36825: LD_INT 6
36827: PUSH
36828: LD_INT 46
36830: PUSH
36831: LD_INT 47
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: LIST
36838: IN
36839: IFFALSE 36856
// bpoints := bpoints * 1.2 ;
36841: LD_ADDR_VAR 0 10
36845: PUSH
36846: LD_VAR 0 10
36850: PUSH
36851: LD_REAL  1.20000000000000E+0000
36854: MUL
36855: ST_TO_ADDR
// end ; unit_building :
36856: GO 36870
36858: LD_INT 3
36860: DOUBLE
36861: EQUAL
36862: IFTRUE 36866
36864: GO 36869
36866: POP
// ; end ;
36867: GO 36870
36869: POP
// for j = 1 to 3 do
36870: LD_ADDR_VAR 0 7
36874: PUSH
36875: DOUBLE
36876: LD_INT 1
36878: DEC
36879: ST_TO_ADDR
36880: LD_INT 3
36882: PUSH
36883: FOR_TO
36884: IFFALSE 36937
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36886: LD_ADDR_VAR 0 5
36890: PUSH
36891: LD_VAR 0 5
36895: PPUSH
36896: LD_VAR 0 7
36900: PPUSH
36901: LD_VAR 0 5
36905: PUSH
36906: LD_VAR 0 7
36910: ARRAY
36911: PUSH
36912: LD_VAR 0 9
36916: PUSH
36917: LD_VAR 0 7
36921: ARRAY
36922: PUSH
36923: LD_VAR 0 10
36927: MUL
36928: PLUS
36929: PPUSH
36930: CALL_OW 1
36934: ST_TO_ADDR
36935: GO 36883
36937: POP
36938: POP
// end ;
36939: GO 35416
36941: POP
36942: POP
// result := Replace ( result , 4 , tmp ) ;
36943: LD_ADDR_VAR 0 5
36947: PUSH
36948: LD_VAR 0 5
36952: PPUSH
36953: LD_INT 4
36955: PPUSH
36956: LD_VAR 0 8
36960: PPUSH
36961: CALL_OW 1
36965: ST_TO_ADDR
// end ;
36966: LD_VAR 0 5
36970: RET
// export function DangerAtRange ( unit , range ) ; begin
36971: LD_INT 0
36973: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36974: LD_ADDR_VAR 0 3
36978: PUSH
36979: LD_VAR 0 1
36983: PPUSH
36984: CALL_OW 255
36988: PPUSH
36989: LD_VAR 0 1
36993: PPUSH
36994: CALL_OW 250
36998: PPUSH
36999: LD_VAR 0 1
37003: PPUSH
37004: CALL_OW 251
37008: PPUSH
37009: LD_VAR 0 2
37013: PPUSH
37014: CALL 35268 0 4
37018: ST_TO_ADDR
// end ;
37019: LD_VAR 0 3
37023: RET
// export function DangerInArea ( side , area ) ; begin
37024: LD_INT 0
37026: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37027: LD_ADDR_VAR 0 3
37031: PUSH
37032: LD_VAR 0 2
37036: PPUSH
37037: LD_INT 81
37039: PUSH
37040: LD_VAR 0 1
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PPUSH
37049: CALL_OW 70
37053: ST_TO_ADDR
// end ;
37054: LD_VAR 0 3
37058: RET
// export function IsExtension ( b ) ; begin
37059: LD_INT 0
37061: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37062: LD_ADDR_VAR 0 2
37066: PUSH
37067: LD_VAR 0 1
37071: PUSH
37072: LD_INT 23
37074: PUSH
37075: LD_INT 20
37077: PUSH
37078: LD_INT 22
37080: PUSH
37081: LD_INT 17
37083: PUSH
37084: LD_INT 24
37086: PUSH
37087: LD_INT 21
37089: PUSH
37090: LD_INT 19
37092: PUSH
37093: LD_INT 16
37095: PUSH
37096: LD_INT 25
37098: PUSH
37099: LD_INT 18
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: IN
37114: ST_TO_ADDR
// end ;
37115: LD_VAR 0 2
37119: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37120: LD_INT 0
37122: PPUSH
37123: PPUSH
37124: PPUSH
// result := [ ] ;
37125: LD_ADDR_VAR 0 4
37129: PUSH
37130: EMPTY
37131: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37132: LD_ADDR_VAR 0 5
37136: PUSH
37137: LD_VAR 0 2
37141: PPUSH
37142: LD_INT 21
37144: PUSH
37145: LD_INT 3
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PPUSH
37152: CALL_OW 70
37156: ST_TO_ADDR
// if not tmp then
37157: LD_VAR 0 5
37161: NOT
37162: IFFALSE 37166
// exit ;
37164: GO 37230
// if checkLink then
37166: LD_VAR 0 3
37170: IFFALSE 37220
// begin for i in tmp do
37172: LD_ADDR_VAR 0 6
37176: PUSH
37177: LD_VAR 0 5
37181: PUSH
37182: FOR_IN
37183: IFFALSE 37218
// if GetBase ( i ) <> base then
37185: LD_VAR 0 6
37189: PPUSH
37190: CALL_OW 274
37194: PUSH
37195: LD_VAR 0 1
37199: NONEQUAL
37200: IFFALSE 37216
// ComLinkToBase ( base , i ) ;
37202: LD_VAR 0 1
37206: PPUSH
37207: LD_VAR 0 6
37211: PPUSH
37212: CALL_OW 169
37216: GO 37182
37218: POP
37219: POP
// end ; result := tmp ;
37220: LD_ADDR_VAR 0 4
37224: PUSH
37225: LD_VAR 0 5
37229: ST_TO_ADDR
// end ;
37230: LD_VAR 0 4
37234: RET
// export function ComComplete ( units , b ) ; var i ; begin
37235: LD_INT 0
37237: PPUSH
37238: PPUSH
// if not units then
37239: LD_VAR 0 1
37243: NOT
37244: IFFALSE 37248
// exit ;
37246: GO 37338
// for i in units do
37248: LD_ADDR_VAR 0 4
37252: PUSH
37253: LD_VAR 0 1
37257: PUSH
37258: FOR_IN
37259: IFFALSE 37336
// if BuildingStatus ( b ) = bs_build then
37261: LD_VAR 0 2
37265: PPUSH
37266: CALL_OW 461
37270: PUSH
37271: LD_INT 1
37273: EQUAL
37274: IFFALSE 37334
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37276: LD_VAR 0 4
37280: PPUSH
37281: LD_STRING h
37283: PUSH
37284: LD_VAR 0 2
37288: PPUSH
37289: CALL_OW 250
37293: PUSH
37294: LD_VAR 0 2
37298: PPUSH
37299: CALL_OW 251
37303: PUSH
37304: LD_VAR 0 2
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: PUSH
37327: EMPTY
37328: LIST
37329: PPUSH
37330: CALL_OW 446
37334: GO 37258
37336: POP
37337: POP
// end ;
37338: LD_VAR 0 3
37342: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37343: LD_INT 0
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
37350: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37351: LD_VAR 0 1
37355: NOT
37356: PUSH
37357: LD_VAR 0 1
37361: PPUSH
37362: CALL_OW 263
37366: PUSH
37367: LD_INT 2
37369: NONEQUAL
37370: OR
37371: IFFALSE 37375
// exit ;
37373: GO 37691
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37375: LD_ADDR_VAR 0 6
37379: PUSH
37380: LD_INT 22
37382: PUSH
37383: LD_VAR 0 1
37387: PPUSH
37388: CALL_OW 255
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: LD_INT 30
37402: PUSH
37403: LD_INT 36
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 34
37412: PUSH
37413: LD_INT 31
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PPUSH
37429: CALL_OW 69
37433: ST_TO_ADDR
// if not tmp then
37434: LD_VAR 0 6
37438: NOT
37439: IFFALSE 37443
// exit ;
37441: GO 37691
// result := [ ] ;
37443: LD_ADDR_VAR 0 2
37447: PUSH
37448: EMPTY
37449: ST_TO_ADDR
// for i in tmp do
37450: LD_ADDR_VAR 0 3
37454: PUSH
37455: LD_VAR 0 6
37459: PUSH
37460: FOR_IN
37461: IFFALSE 37532
// begin t := UnitsInside ( i ) ;
37463: LD_ADDR_VAR 0 4
37467: PUSH
37468: LD_VAR 0 3
37472: PPUSH
37473: CALL_OW 313
37477: ST_TO_ADDR
// if t then
37478: LD_VAR 0 4
37482: IFFALSE 37530
// for j in t do
37484: LD_ADDR_VAR 0 7
37488: PUSH
37489: LD_VAR 0 4
37493: PUSH
37494: FOR_IN
37495: IFFALSE 37528
// result := Replace ( result , result + 1 , j ) ;
37497: LD_ADDR_VAR 0 2
37501: PUSH
37502: LD_VAR 0 2
37506: PPUSH
37507: LD_VAR 0 2
37511: PUSH
37512: LD_INT 1
37514: PLUS
37515: PPUSH
37516: LD_VAR 0 7
37520: PPUSH
37521: CALL_OW 1
37525: ST_TO_ADDR
37526: GO 37494
37528: POP
37529: POP
// end ;
37530: GO 37460
37532: POP
37533: POP
// if not result then
37534: LD_VAR 0 2
37538: NOT
37539: IFFALSE 37543
// exit ;
37541: GO 37691
// mech := result [ 1 ] ;
37543: LD_ADDR_VAR 0 5
37547: PUSH
37548: LD_VAR 0 2
37552: PUSH
37553: LD_INT 1
37555: ARRAY
37556: ST_TO_ADDR
// if result > 1 then
37557: LD_VAR 0 2
37561: PUSH
37562: LD_INT 1
37564: GREATER
37565: IFFALSE 37677
// begin for i = 2 to result do
37567: LD_ADDR_VAR 0 3
37571: PUSH
37572: DOUBLE
37573: LD_INT 2
37575: DEC
37576: ST_TO_ADDR
37577: LD_VAR 0 2
37581: PUSH
37582: FOR_TO
37583: IFFALSE 37675
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37585: LD_ADDR_VAR 0 4
37589: PUSH
37590: LD_VAR 0 2
37594: PUSH
37595: LD_VAR 0 3
37599: ARRAY
37600: PPUSH
37601: LD_INT 3
37603: PPUSH
37604: CALL_OW 259
37608: PUSH
37609: LD_VAR 0 2
37613: PUSH
37614: LD_VAR 0 3
37618: ARRAY
37619: PPUSH
37620: CALL_OW 432
37624: MINUS
37625: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37626: LD_VAR 0 4
37630: PUSH
37631: LD_VAR 0 5
37635: PPUSH
37636: LD_INT 3
37638: PPUSH
37639: CALL_OW 259
37643: PUSH
37644: LD_VAR 0 5
37648: PPUSH
37649: CALL_OW 432
37653: MINUS
37654: GREATEREQUAL
37655: IFFALSE 37673
// mech := result [ i ] ;
37657: LD_ADDR_VAR 0 5
37661: PUSH
37662: LD_VAR 0 2
37666: PUSH
37667: LD_VAR 0 3
37671: ARRAY
37672: ST_TO_ADDR
// end ;
37673: GO 37582
37675: POP
37676: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37677: LD_VAR 0 1
37681: PPUSH
37682: LD_VAR 0 5
37686: PPUSH
37687: CALL_OW 135
// end ;
37691: LD_VAR 0 2
37695: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37696: LD_INT 0
37698: PPUSH
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
37703: PPUSH
37704: PPUSH
37705: PPUSH
37706: PPUSH
37707: PPUSH
37708: PPUSH
37709: PPUSH
37710: PPUSH
// result := [ ] ;
37711: LD_ADDR_VAR 0 7
37715: PUSH
37716: EMPTY
37717: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37718: LD_VAR 0 1
37722: PPUSH
37723: CALL_OW 266
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: IN
37738: NOT
37739: IFFALSE 37743
// exit ;
37741: GO 39377
// if name then
37743: LD_VAR 0 3
37747: IFFALSE 37763
// SetBName ( base_dep , name ) ;
37749: LD_VAR 0 1
37753: PPUSH
37754: LD_VAR 0 3
37758: PPUSH
37759: CALL_OW 500
// base := GetBase ( base_dep ) ;
37763: LD_ADDR_VAR 0 15
37767: PUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 274
37777: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37778: LD_ADDR_VAR 0 16
37782: PUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 255
37792: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37793: LD_ADDR_VAR 0 17
37797: PUSH
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 248
37807: ST_TO_ADDR
// if sources then
37808: LD_VAR 0 5
37812: IFFALSE 37859
// for i = 1 to 3 do
37814: LD_ADDR_VAR 0 8
37818: PUSH
37819: DOUBLE
37820: LD_INT 1
37822: DEC
37823: ST_TO_ADDR
37824: LD_INT 3
37826: PUSH
37827: FOR_TO
37828: IFFALSE 37857
// AddResourceType ( base , i , sources [ i ] ) ;
37830: LD_VAR 0 15
37834: PPUSH
37835: LD_VAR 0 8
37839: PPUSH
37840: LD_VAR 0 5
37844: PUSH
37845: LD_VAR 0 8
37849: ARRAY
37850: PPUSH
37851: CALL_OW 276
37855: GO 37827
37857: POP
37858: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37859: LD_ADDR_VAR 0 18
37863: PUSH
37864: LD_VAR 0 15
37868: PPUSH
37869: LD_VAR 0 2
37873: PPUSH
37874: LD_INT 1
37876: PPUSH
37877: CALL 37120 0 3
37881: ST_TO_ADDR
// InitHc ;
37882: CALL_OW 19
// InitUc ;
37886: CALL_OW 18
// uc_side := side ;
37890: LD_ADDR_OWVAR 20
37894: PUSH
37895: LD_VAR 0 16
37899: ST_TO_ADDR
// uc_nation := nation ;
37900: LD_ADDR_OWVAR 21
37904: PUSH
37905: LD_VAR 0 17
37909: ST_TO_ADDR
// if buildings then
37910: LD_VAR 0 18
37914: IFFALSE 39236
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37916: LD_ADDR_VAR 0 19
37920: PUSH
37921: LD_VAR 0 18
37925: PPUSH
37926: LD_INT 2
37928: PUSH
37929: LD_INT 30
37931: PUSH
37932: LD_INT 29
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 30
37941: PUSH
37942: LD_INT 30
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: PPUSH
37954: CALL_OW 72
37958: ST_TO_ADDR
// if tmp then
37959: LD_VAR 0 19
37963: IFFALSE 38011
// for i in tmp do
37965: LD_ADDR_VAR 0 8
37969: PUSH
37970: LD_VAR 0 19
37974: PUSH
37975: FOR_IN
37976: IFFALSE 38009
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37978: LD_VAR 0 8
37982: PPUSH
37983: CALL_OW 250
37987: PPUSH
37988: LD_VAR 0 8
37992: PPUSH
37993: CALL_OW 251
37997: PPUSH
37998: LD_VAR 0 16
38002: PPUSH
38003: CALL_OW 441
38007: GO 37975
38009: POP
38010: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38011: LD_VAR 0 18
38015: PPUSH
38016: LD_INT 2
38018: PUSH
38019: LD_INT 30
38021: PUSH
38022: LD_INT 32
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 30
38031: PUSH
38032: LD_INT 33
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: LIST
38043: PPUSH
38044: CALL_OW 72
38048: IFFALSE 38136
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38050: LD_ADDR_VAR 0 8
38054: PUSH
38055: LD_VAR 0 18
38059: PPUSH
38060: LD_INT 2
38062: PUSH
38063: LD_INT 30
38065: PUSH
38066: LD_INT 32
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 30
38075: PUSH
38076: LD_INT 33
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: PPUSH
38088: CALL_OW 72
38092: PUSH
38093: FOR_IN
38094: IFFALSE 38134
// begin if not GetBWeapon ( i ) then
38096: LD_VAR 0 8
38100: PPUSH
38101: CALL_OW 269
38105: NOT
38106: IFFALSE 38132
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38108: LD_VAR 0 8
38112: PPUSH
38113: LD_VAR 0 8
38117: PPUSH
38118: LD_VAR 0 2
38122: PPUSH
38123: CALL 39382 0 2
38127: PPUSH
38128: CALL_OW 431
// end ;
38132: GO 38093
38134: POP
38135: POP
// end ; for i = 1 to personel do
38136: LD_ADDR_VAR 0 8
38140: PUSH
38141: DOUBLE
38142: LD_INT 1
38144: DEC
38145: ST_TO_ADDR
38146: LD_VAR 0 6
38150: PUSH
38151: FOR_TO
38152: IFFALSE 39216
// begin if i > 4 then
38154: LD_VAR 0 8
38158: PUSH
38159: LD_INT 4
38161: GREATER
38162: IFFALSE 38166
// break ;
38164: GO 39216
// case i of 1 :
38166: LD_VAR 0 8
38170: PUSH
38171: LD_INT 1
38173: DOUBLE
38174: EQUAL
38175: IFTRUE 38179
38177: GO 38259
38179: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38180: LD_ADDR_VAR 0 12
38184: PUSH
38185: LD_VAR 0 18
38189: PPUSH
38190: LD_INT 22
38192: PUSH
38193: LD_VAR 0 16
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 58
38204: PUSH
38205: EMPTY
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: PUSH
38211: LD_INT 30
38213: PUSH
38214: LD_INT 32
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 30
38223: PUSH
38224: LD_INT 4
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 30
38233: PUSH
38234: LD_INT 5
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: PPUSH
38252: CALL_OW 72
38256: ST_TO_ADDR
38257: GO 38481
38259: LD_INT 2
38261: DOUBLE
38262: EQUAL
38263: IFTRUE 38267
38265: GO 38329
38267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38268: LD_ADDR_VAR 0 12
38272: PUSH
38273: LD_VAR 0 18
38277: PPUSH
38278: LD_INT 22
38280: PUSH
38281: LD_VAR 0 16
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: LD_INT 30
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 30
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: LIST
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PPUSH
38322: CALL_OW 72
38326: ST_TO_ADDR
38327: GO 38481
38329: LD_INT 3
38331: DOUBLE
38332: EQUAL
38333: IFTRUE 38337
38335: GO 38399
38337: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38338: LD_ADDR_VAR 0 12
38342: PUSH
38343: LD_VAR 0 18
38347: PPUSH
38348: LD_INT 22
38350: PUSH
38351: LD_VAR 0 16
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: LD_INT 30
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 30
38375: PUSH
38376: LD_INT 3
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PPUSH
38392: CALL_OW 72
38396: ST_TO_ADDR
38397: GO 38481
38399: LD_INT 4
38401: DOUBLE
38402: EQUAL
38403: IFTRUE 38407
38405: GO 38480
38407: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38408: LD_ADDR_VAR 0 12
38412: PUSH
38413: LD_VAR 0 18
38417: PPUSH
38418: LD_INT 22
38420: PUSH
38421: LD_VAR 0 16
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 2
38432: PUSH
38433: LD_INT 30
38435: PUSH
38436: LD_INT 6
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 30
38445: PUSH
38446: LD_INT 7
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 30
38455: PUSH
38456: LD_INT 8
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PPUSH
38473: CALL_OW 72
38477: ST_TO_ADDR
38478: GO 38481
38480: POP
// if i = 1 then
38481: LD_VAR 0 8
38485: PUSH
38486: LD_INT 1
38488: EQUAL
38489: IFFALSE 38600
// begin tmp := [ ] ;
38491: LD_ADDR_VAR 0 19
38495: PUSH
38496: EMPTY
38497: ST_TO_ADDR
// for j in f do
38498: LD_ADDR_VAR 0 9
38502: PUSH
38503: LD_VAR 0 12
38507: PUSH
38508: FOR_IN
38509: IFFALSE 38582
// if GetBType ( j ) = b_bunker then
38511: LD_VAR 0 9
38515: PPUSH
38516: CALL_OW 266
38520: PUSH
38521: LD_INT 32
38523: EQUAL
38524: IFFALSE 38551
// tmp := Insert ( tmp , 1 , j ) else
38526: LD_ADDR_VAR 0 19
38530: PUSH
38531: LD_VAR 0 19
38535: PPUSH
38536: LD_INT 1
38538: PPUSH
38539: LD_VAR 0 9
38543: PPUSH
38544: CALL_OW 2
38548: ST_TO_ADDR
38549: GO 38580
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38551: LD_ADDR_VAR 0 19
38555: PUSH
38556: LD_VAR 0 19
38560: PPUSH
38561: LD_VAR 0 19
38565: PUSH
38566: LD_INT 1
38568: PLUS
38569: PPUSH
38570: LD_VAR 0 9
38574: PPUSH
38575: CALL_OW 2
38579: ST_TO_ADDR
38580: GO 38508
38582: POP
38583: POP
// if tmp then
38584: LD_VAR 0 19
38588: IFFALSE 38600
// f := tmp ;
38590: LD_ADDR_VAR 0 12
38594: PUSH
38595: LD_VAR 0 19
38599: ST_TO_ADDR
// end ; x := personel [ i ] ;
38600: LD_ADDR_VAR 0 13
38604: PUSH
38605: LD_VAR 0 6
38609: PUSH
38610: LD_VAR 0 8
38614: ARRAY
38615: ST_TO_ADDR
// if x = - 1 then
38616: LD_VAR 0 13
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: EQUAL
38625: IFFALSE 38834
// begin for j in f do
38627: LD_ADDR_VAR 0 9
38631: PUSH
38632: LD_VAR 0 12
38636: PUSH
38637: FOR_IN
38638: IFFALSE 38830
// repeat InitHc ;
38640: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38644: LD_VAR 0 9
38648: PPUSH
38649: CALL_OW 266
38653: PUSH
38654: LD_INT 5
38656: EQUAL
38657: IFFALSE 38727
// begin if UnitsInside ( j ) < 3 then
38659: LD_VAR 0 9
38663: PPUSH
38664: CALL_OW 313
38668: PUSH
38669: LD_INT 3
38671: LESS
38672: IFFALSE 38708
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38674: LD_INT 0
38676: PPUSH
38677: LD_INT 5
38679: PUSH
38680: LD_INT 8
38682: PUSH
38683: LD_INT 9
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: LIST
38690: PUSH
38691: LD_VAR 0 17
38695: ARRAY
38696: PPUSH
38697: LD_VAR 0 4
38701: PPUSH
38702: CALL_OW 380
38706: GO 38725
// PrepareHuman ( false , i , skill ) ;
38708: LD_INT 0
38710: PPUSH
38711: LD_VAR 0 8
38715: PPUSH
38716: LD_VAR 0 4
38720: PPUSH
38721: CALL_OW 380
// end else
38725: GO 38744
// PrepareHuman ( false , i , skill ) ;
38727: LD_INT 0
38729: PPUSH
38730: LD_VAR 0 8
38734: PPUSH
38735: LD_VAR 0 4
38739: PPUSH
38740: CALL_OW 380
// un := CreateHuman ;
38744: LD_ADDR_VAR 0 14
38748: PUSH
38749: CALL_OW 44
38753: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38754: LD_ADDR_VAR 0 7
38758: PUSH
38759: LD_VAR 0 7
38763: PPUSH
38764: LD_INT 1
38766: PPUSH
38767: LD_VAR 0 14
38771: PPUSH
38772: CALL_OW 2
38776: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38777: LD_VAR 0 14
38781: PPUSH
38782: LD_VAR 0 9
38786: PPUSH
38787: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38791: LD_VAR 0 9
38795: PPUSH
38796: CALL_OW 313
38800: PUSH
38801: LD_INT 6
38803: EQUAL
38804: PUSH
38805: LD_VAR 0 9
38809: PPUSH
38810: CALL_OW 266
38814: PUSH
38815: LD_INT 32
38817: PUSH
38818: LD_INT 31
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: IN
38825: OR
38826: IFFALSE 38640
38828: GO 38637
38830: POP
38831: POP
// end else
38832: GO 39214
// for j = 1 to x do
38834: LD_ADDR_VAR 0 9
38838: PUSH
38839: DOUBLE
38840: LD_INT 1
38842: DEC
38843: ST_TO_ADDR
38844: LD_VAR 0 13
38848: PUSH
38849: FOR_TO
38850: IFFALSE 39212
// begin InitHc ;
38852: CALL_OW 19
// if not f then
38856: LD_VAR 0 12
38860: NOT
38861: IFFALSE 38950
// begin PrepareHuman ( false , i , skill ) ;
38863: LD_INT 0
38865: PPUSH
38866: LD_VAR 0 8
38870: PPUSH
38871: LD_VAR 0 4
38875: PPUSH
38876: CALL_OW 380
// un := CreateHuman ;
38880: LD_ADDR_VAR 0 14
38884: PUSH
38885: CALL_OW 44
38889: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38890: LD_ADDR_VAR 0 7
38894: PUSH
38895: LD_VAR 0 7
38899: PPUSH
38900: LD_INT 1
38902: PPUSH
38903: LD_VAR 0 14
38907: PPUSH
38908: CALL_OW 2
38912: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38913: LD_VAR 0 14
38917: PPUSH
38918: LD_VAR 0 1
38922: PPUSH
38923: CALL_OW 250
38927: PPUSH
38928: LD_VAR 0 1
38932: PPUSH
38933: CALL_OW 251
38937: PPUSH
38938: LD_INT 10
38940: PPUSH
38941: LD_INT 0
38943: PPUSH
38944: CALL_OW 50
// continue ;
38948: GO 38849
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38950: LD_VAR 0 12
38954: PUSH
38955: LD_INT 1
38957: ARRAY
38958: PPUSH
38959: CALL_OW 313
38963: PUSH
38964: LD_VAR 0 12
38968: PUSH
38969: LD_INT 1
38971: ARRAY
38972: PPUSH
38973: CALL_OW 266
38977: PUSH
38978: LD_INT 32
38980: PUSH
38981: LD_INT 31
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: IN
38988: AND
38989: PUSH
38990: LD_VAR 0 12
38994: PUSH
38995: LD_INT 1
38997: ARRAY
38998: PPUSH
38999: CALL_OW 313
39003: PUSH
39004: LD_INT 6
39006: EQUAL
39007: OR
39008: IFFALSE 39028
// f := Delete ( f , 1 ) ;
39010: LD_ADDR_VAR 0 12
39014: PUSH
39015: LD_VAR 0 12
39019: PPUSH
39020: LD_INT 1
39022: PPUSH
39023: CALL_OW 3
39027: ST_TO_ADDR
// if not f then
39028: LD_VAR 0 12
39032: NOT
39033: IFFALSE 39051
// begin x := x + 2 ;
39035: LD_ADDR_VAR 0 13
39039: PUSH
39040: LD_VAR 0 13
39044: PUSH
39045: LD_INT 2
39047: PLUS
39048: ST_TO_ADDR
// continue ;
39049: GO 38849
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39051: LD_VAR 0 12
39055: PUSH
39056: LD_INT 1
39058: ARRAY
39059: PPUSH
39060: CALL_OW 266
39064: PUSH
39065: LD_INT 5
39067: EQUAL
39068: IFFALSE 39142
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39070: LD_VAR 0 12
39074: PUSH
39075: LD_INT 1
39077: ARRAY
39078: PPUSH
39079: CALL_OW 313
39083: PUSH
39084: LD_INT 3
39086: LESS
39087: IFFALSE 39123
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39089: LD_INT 0
39091: PPUSH
39092: LD_INT 5
39094: PUSH
39095: LD_INT 8
39097: PUSH
39098: LD_INT 9
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: PUSH
39106: LD_VAR 0 17
39110: ARRAY
39111: PPUSH
39112: LD_VAR 0 4
39116: PPUSH
39117: CALL_OW 380
39121: GO 39140
// PrepareHuman ( false , i , skill ) ;
39123: LD_INT 0
39125: PPUSH
39126: LD_VAR 0 8
39130: PPUSH
39131: LD_VAR 0 4
39135: PPUSH
39136: CALL_OW 380
// end else
39140: GO 39159
// PrepareHuman ( false , i , skill ) ;
39142: LD_INT 0
39144: PPUSH
39145: LD_VAR 0 8
39149: PPUSH
39150: LD_VAR 0 4
39154: PPUSH
39155: CALL_OW 380
// un := CreateHuman ;
39159: LD_ADDR_VAR 0 14
39163: PUSH
39164: CALL_OW 44
39168: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39169: LD_ADDR_VAR 0 7
39173: PUSH
39174: LD_VAR 0 7
39178: PPUSH
39179: LD_INT 1
39181: PPUSH
39182: LD_VAR 0 14
39186: PPUSH
39187: CALL_OW 2
39191: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39192: LD_VAR 0 14
39196: PPUSH
39197: LD_VAR 0 12
39201: PUSH
39202: LD_INT 1
39204: ARRAY
39205: PPUSH
39206: CALL_OW 52
// end ;
39210: GO 38849
39212: POP
39213: POP
// end ;
39214: GO 38151
39216: POP
39217: POP
// result := result ^ buildings ;
39218: LD_ADDR_VAR 0 7
39222: PUSH
39223: LD_VAR 0 7
39227: PUSH
39228: LD_VAR 0 18
39232: ADD
39233: ST_TO_ADDR
// end else
39234: GO 39377
// begin for i = 1 to personel do
39236: LD_ADDR_VAR 0 8
39240: PUSH
39241: DOUBLE
39242: LD_INT 1
39244: DEC
39245: ST_TO_ADDR
39246: LD_VAR 0 6
39250: PUSH
39251: FOR_TO
39252: IFFALSE 39375
// begin if i > 4 then
39254: LD_VAR 0 8
39258: PUSH
39259: LD_INT 4
39261: GREATER
39262: IFFALSE 39266
// break ;
39264: GO 39375
// x := personel [ i ] ;
39266: LD_ADDR_VAR 0 13
39270: PUSH
39271: LD_VAR 0 6
39275: PUSH
39276: LD_VAR 0 8
39280: ARRAY
39281: ST_TO_ADDR
// if x = - 1 then
39282: LD_VAR 0 13
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: EQUAL
39291: IFFALSE 39295
// continue ;
39293: GO 39251
// PrepareHuman ( false , i , skill ) ;
39295: LD_INT 0
39297: PPUSH
39298: LD_VAR 0 8
39302: PPUSH
39303: LD_VAR 0 4
39307: PPUSH
39308: CALL_OW 380
// un := CreateHuman ;
39312: LD_ADDR_VAR 0 14
39316: PUSH
39317: CALL_OW 44
39321: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39322: LD_VAR 0 14
39326: PPUSH
39327: LD_VAR 0 1
39331: PPUSH
39332: CALL_OW 250
39336: PPUSH
39337: LD_VAR 0 1
39341: PPUSH
39342: CALL_OW 251
39346: PPUSH
39347: LD_INT 10
39349: PPUSH
39350: LD_INT 0
39352: PPUSH
39353: CALL_OW 50
// result := result ^ un ;
39357: LD_ADDR_VAR 0 7
39361: PUSH
39362: LD_VAR 0 7
39366: PUSH
39367: LD_VAR 0 14
39371: ADD
39372: ST_TO_ADDR
// end ;
39373: GO 39251
39375: POP
39376: POP
// end ; end ;
39377: LD_VAR 0 7
39381: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39382: LD_INT 0
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
39395: PPUSH
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
// result := false ;
39400: LD_ADDR_VAR 0 3
39404: PUSH
39405: LD_INT 0
39407: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39408: LD_VAR 0 1
39412: NOT
39413: PUSH
39414: LD_VAR 0 1
39418: PPUSH
39419: CALL_OW 266
39423: PUSH
39424: LD_INT 32
39426: PUSH
39427: LD_INT 33
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: IN
39434: NOT
39435: OR
39436: IFFALSE 39440
// exit ;
39438: GO 40549
// nat := GetNation ( tower ) ;
39440: LD_ADDR_VAR 0 12
39444: PUSH
39445: LD_VAR 0 1
39449: PPUSH
39450: CALL_OW 248
39454: ST_TO_ADDR
// side := GetSide ( tower ) ;
39455: LD_ADDR_VAR 0 16
39459: PUSH
39460: LD_VAR 0 1
39464: PPUSH
39465: CALL_OW 255
39469: ST_TO_ADDR
// x := GetX ( tower ) ;
39470: LD_ADDR_VAR 0 10
39474: PUSH
39475: LD_VAR 0 1
39479: PPUSH
39480: CALL_OW 250
39484: ST_TO_ADDR
// y := GetY ( tower ) ;
39485: LD_ADDR_VAR 0 11
39489: PUSH
39490: LD_VAR 0 1
39494: PPUSH
39495: CALL_OW 251
39499: ST_TO_ADDR
// if not x or not y then
39500: LD_VAR 0 10
39504: NOT
39505: PUSH
39506: LD_VAR 0 11
39510: NOT
39511: OR
39512: IFFALSE 39516
// exit ;
39514: GO 40549
// weapon := 0 ;
39516: LD_ADDR_VAR 0 18
39520: PUSH
39521: LD_INT 0
39523: ST_TO_ADDR
// fac_list := [ ] ;
39524: LD_ADDR_VAR 0 17
39528: PUSH
39529: EMPTY
39530: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39531: LD_ADDR_VAR 0 6
39535: PUSH
39536: LD_VAR 0 1
39540: PPUSH
39541: CALL_OW 274
39545: PPUSH
39546: LD_VAR 0 2
39550: PPUSH
39551: LD_INT 0
39553: PPUSH
39554: CALL 37120 0 3
39558: PPUSH
39559: LD_INT 30
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PPUSH
39569: CALL_OW 72
39573: ST_TO_ADDR
// if not factories then
39574: LD_VAR 0 6
39578: NOT
39579: IFFALSE 39583
// exit ;
39581: GO 40549
// for i in factories do
39583: LD_ADDR_VAR 0 8
39587: PUSH
39588: LD_VAR 0 6
39592: PUSH
39593: FOR_IN
39594: IFFALSE 39619
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39596: LD_ADDR_VAR 0 17
39600: PUSH
39601: LD_VAR 0 17
39605: PUSH
39606: LD_VAR 0 8
39610: PPUSH
39611: CALL_OW 478
39615: UNION
39616: ST_TO_ADDR
39617: GO 39593
39619: POP
39620: POP
// if not fac_list then
39621: LD_VAR 0 17
39625: NOT
39626: IFFALSE 39630
// exit ;
39628: GO 40549
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39630: LD_ADDR_VAR 0 5
39634: PUSH
39635: LD_INT 4
39637: PUSH
39638: LD_INT 5
39640: PUSH
39641: LD_INT 9
39643: PUSH
39644: LD_INT 10
39646: PUSH
39647: LD_INT 6
39649: PUSH
39650: LD_INT 7
39652: PUSH
39653: LD_INT 11
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 27
39667: PUSH
39668: LD_INT 28
39670: PUSH
39671: LD_INT 26
39673: PUSH
39674: LD_INT 30
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 43
39685: PUSH
39686: LD_INT 44
39688: PUSH
39689: LD_INT 46
39691: PUSH
39692: LD_INT 45
39694: PUSH
39695: LD_INT 47
39697: PUSH
39698: LD_INT 49
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: PUSH
39714: LD_VAR 0 12
39718: ARRAY
39719: ST_TO_ADDR
// list := list isect fac_list ;
39720: LD_ADDR_VAR 0 5
39724: PUSH
39725: LD_VAR 0 5
39729: PUSH
39730: LD_VAR 0 17
39734: ISECT
39735: ST_TO_ADDR
// if not list then
39736: LD_VAR 0 5
39740: NOT
39741: IFFALSE 39745
// exit ;
39743: GO 40549
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39745: LD_VAR 0 12
39749: PUSH
39750: LD_INT 3
39752: EQUAL
39753: PUSH
39754: LD_INT 49
39756: PUSH
39757: LD_VAR 0 5
39761: IN
39762: AND
39763: PUSH
39764: LD_INT 31
39766: PPUSH
39767: LD_VAR 0 16
39771: PPUSH
39772: CALL_OW 321
39776: PUSH
39777: LD_INT 2
39779: EQUAL
39780: AND
39781: IFFALSE 39841
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39783: LD_INT 22
39785: PUSH
39786: LD_VAR 0 16
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 35
39797: PUSH
39798: LD_INT 49
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 91
39807: PUSH
39808: LD_VAR 0 1
39812: PUSH
39813: LD_INT 10
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: LIST
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: LIST
39825: PPUSH
39826: CALL_OW 69
39830: NOT
39831: IFFALSE 39841
// weapon := ru_time_lapser ;
39833: LD_ADDR_VAR 0 18
39837: PUSH
39838: LD_INT 49
39840: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39841: LD_VAR 0 12
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: LD_INT 2
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: IN
39856: PUSH
39857: LD_INT 11
39859: PUSH
39860: LD_VAR 0 5
39864: IN
39865: PUSH
39866: LD_INT 30
39868: PUSH
39869: LD_VAR 0 5
39873: IN
39874: OR
39875: AND
39876: PUSH
39877: LD_INT 6
39879: PPUSH
39880: LD_VAR 0 16
39884: PPUSH
39885: CALL_OW 321
39889: PUSH
39890: LD_INT 2
39892: EQUAL
39893: AND
39894: IFFALSE 40059
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39896: LD_INT 22
39898: PUSH
39899: LD_VAR 0 16
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 35
39913: PUSH
39914: LD_INT 11
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 35
39923: PUSH
39924: LD_INT 30
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 91
39938: PUSH
39939: LD_VAR 0 1
39943: PUSH
39944: LD_INT 18
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: LIST
39956: PPUSH
39957: CALL_OW 69
39961: NOT
39962: PUSH
39963: LD_INT 22
39965: PUSH
39966: LD_VAR 0 16
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: LD_INT 30
39980: PUSH
39981: LD_INT 32
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 30
39990: PUSH
39991: LD_INT 33
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 91
40005: PUSH
40006: LD_VAR 0 1
40010: PUSH
40011: LD_INT 12
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: LIST
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: PUSH
40024: EMPTY
40025: LIST
40026: PPUSH
40027: CALL_OW 69
40031: PUSH
40032: LD_INT 2
40034: GREATER
40035: AND
40036: IFFALSE 40059
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40038: LD_ADDR_VAR 0 18
40042: PUSH
40043: LD_INT 11
40045: PUSH
40046: LD_INT 30
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_VAR 0 12
40057: ARRAY
40058: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40059: LD_VAR 0 18
40063: NOT
40064: PUSH
40065: LD_INT 40
40067: PPUSH
40068: LD_VAR 0 16
40072: PPUSH
40073: CALL_OW 321
40077: PUSH
40078: LD_INT 2
40080: EQUAL
40081: AND
40082: PUSH
40083: LD_INT 7
40085: PUSH
40086: LD_VAR 0 5
40090: IN
40091: PUSH
40092: LD_INT 28
40094: PUSH
40095: LD_VAR 0 5
40099: IN
40100: OR
40101: PUSH
40102: LD_INT 45
40104: PUSH
40105: LD_VAR 0 5
40109: IN
40110: OR
40111: AND
40112: IFFALSE 40366
// begin hex := GetHexInfo ( x , y ) ;
40114: LD_ADDR_VAR 0 4
40118: PUSH
40119: LD_VAR 0 10
40123: PPUSH
40124: LD_VAR 0 11
40128: PPUSH
40129: CALL_OW 546
40133: ST_TO_ADDR
// if hex [ 1 ] then
40134: LD_VAR 0 4
40138: PUSH
40139: LD_INT 1
40141: ARRAY
40142: IFFALSE 40146
// exit ;
40144: GO 40549
// height := hex [ 2 ] ;
40146: LD_ADDR_VAR 0 15
40150: PUSH
40151: LD_VAR 0 4
40155: PUSH
40156: LD_INT 2
40158: ARRAY
40159: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40160: LD_ADDR_VAR 0 14
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 3
40173: PUSH
40174: LD_INT 5
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: ST_TO_ADDR
// for i in tmp do
40183: LD_ADDR_VAR 0 8
40187: PUSH
40188: LD_VAR 0 14
40192: PUSH
40193: FOR_IN
40194: IFFALSE 40364
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40196: LD_ADDR_VAR 0 9
40200: PUSH
40201: LD_VAR 0 10
40205: PPUSH
40206: LD_VAR 0 8
40210: PPUSH
40211: LD_INT 5
40213: PPUSH
40214: CALL_OW 272
40218: PUSH
40219: LD_VAR 0 11
40223: PPUSH
40224: LD_VAR 0 8
40228: PPUSH
40229: LD_INT 5
40231: PPUSH
40232: CALL_OW 273
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40241: LD_VAR 0 9
40245: PUSH
40246: LD_INT 1
40248: ARRAY
40249: PPUSH
40250: LD_VAR 0 9
40254: PUSH
40255: LD_INT 2
40257: ARRAY
40258: PPUSH
40259: CALL_OW 488
40263: IFFALSE 40362
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40265: LD_ADDR_VAR 0 4
40269: PUSH
40270: LD_VAR 0 9
40274: PUSH
40275: LD_INT 1
40277: ARRAY
40278: PPUSH
40279: LD_VAR 0 9
40283: PUSH
40284: LD_INT 2
40286: ARRAY
40287: PPUSH
40288: CALL_OW 546
40292: ST_TO_ADDR
// if hex [ 1 ] then
40293: LD_VAR 0 4
40297: PUSH
40298: LD_INT 1
40300: ARRAY
40301: IFFALSE 40305
// continue ;
40303: GO 40193
// h := hex [ 2 ] ;
40305: LD_ADDR_VAR 0 13
40309: PUSH
40310: LD_VAR 0 4
40314: PUSH
40315: LD_INT 2
40317: ARRAY
40318: ST_TO_ADDR
// if h + 7 < height then
40319: LD_VAR 0 13
40323: PUSH
40324: LD_INT 7
40326: PLUS
40327: PUSH
40328: LD_VAR 0 15
40332: LESS
40333: IFFALSE 40362
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40335: LD_ADDR_VAR 0 18
40339: PUSH
40340: LD_INT 7
40342: PUSH
40343: LD_INT 28
40345: PUSH
40346: LD_INT 45
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: PUSH
40354: LD_VAR 0 12
40358: ARRAY
40359: ST_TO_ADDR
// break ;
40360: GO 40364
// end ; end ; end ;
40362: GO 40193
40364: POP
40365: POP
// end ; if not weapon then
40366: LD_VAR 0 18
40370: NOT
40371: IFFALSE 40431
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40373: LD_ADDR_VAR 0 5
40377: PUSH
40378: LD_VAR 0 5
40382: PUSH
40383: LD_INT 11
40385: PUSH
40386: LD_INT 30
40388: PUSH
40389: LD_INT 49
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: LIST
40396: DIFF
40397: ST_TO_ADDR
// if not list then
40398: LD_VAR 0 5
40402: NOT
40403: IFFALSE 40407
// exit ;
40405: GO 40549
// weapon := list [ rand ( 1 , list ) ] ;
40407: LD_ADDR_VAR 0 18
40411: PUSH
40412: LD_VAR 0 5
40416: PUSH
40417: LD_INT 1
40419: PPUSH
40420: LD_VAR 0 5
40424: PPUSH
40425: CALL_OW 12
40429: ARRAY
40430: ST_TO_ADDR
// end ; if weapon then
40431: LD_VAR 0 18
40435: IFFALSE 40549
// begin tmp := CostOfWeapon ( weapon ) ;
40437: LD_ADDR_VAR 0 14
40441: PUSH
40442: LD_VAR 0 18
40446: PPUSH
40447: CALL_OW 451
40451: ST_TO_ADDR
// j := GetBase ( tower ) ;
40452: LD_ADDR_VAR 0 9
40456: PUSH
40457: LD_VAR 0 1
40461: PPUSH
40462: CALL_OW 274
40466: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40467: LD_VAR 0 9
40471: PPUSH
40472: LD_INT 1
40474: PPUSH
40475: CALL_OW 275
40479: PUSH
40480: LD_VAR 0 14
40484: PUSH
40485: LD_INT 1
40487: ARRAY
40488: GREATEREQUAL
40489: PUSH
40490: LD_VAR 0 9
40494: PPUSH
40495: LD_INT 2
40497: PPUSH
40498: CALL_OW 275
40502: PUSH
40503: LD_VAR 0 14
40507: PUSH
40508: LD_INT 2
40510: ARRAY
40511: GREATEREQUAL
40512: AND
40513: PUSH
40514: LD_VAR 0 9
40518: PPUSH
40519: LD_INT 3
40521: PPUSH
40522: CALL_OW 275
40526: PUSH
40527: LD_VAR 0 14
40531: PUSH
40532: LD_INT 3
40534: ARRAY
40535: GREATEREQUAL
40536: AND
40537: IFFALSE 40549
// result := weapon ;
40539: LD_ADDR_VAR 0 3
40543: PUSH
40544: LD_VAR 0 18
40548: ST_TO_ADDR
// end ; end ;
40549: LD_VAR 0 3
40553: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40554: LD_INT 0
40556: PPUSH
40557: PPUSH
// result := true ;
40558: LD_ADDR_VAR 0 3
40562: PUSH
40563: LD_INT 1
40565: ST_TO_ADDR
// if array1 = array2 then
40566: LD_VAR 0 1
40570: PUSH
40571: LD_VAR 0 2
40575: EQUAL
40576: IFFALSE 40636
// begin for i = 1 to array1 do
40578: LD_ADDR_VAR 0 4
40582: PUSH
40583: DOUBLE
40584: LD_INT 1
40586: DEC
40587: ST_TO_ADDR
40588: LD_VAR 0 1
40592: PUSH
40593: FOR_TO
40594: IFFALSE 40632
// if array1 [ i ] <> array2 [ i ] then
40596: LD_VAR 0 1
40600: PUSH
40601: LD_VAR 0 4
40605: ARRAY
40606: PUSH
40607: LD_VAR 0 2
40611: PUSH
40612: LD_VAR 0 4
40616: ARRAY
40617: NONEQUAL
40618: IFFALSE 40630
// begin result := false ;
40620: LD_ADDR_VAR 0 3
40624: PUSH
40625: LD_INT 0
40627: ST_TO_ADDR
// break ;
40628: GO 40632
// end ;
40630: GO 40593
40632: POP
40633: POP
// end else
40634: GO 40644
// result := false ;
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_INT 0
40643: ST_TO_ADDR
// end ;
40644: LD_VAR 0 3
40648: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40649: LD_INT 0
40651: PPUSH
40652: PPUSH
// if not array1 or not array2 then
40653: LD_VAR 0 1
40657: NOT
40658: PUSH
40659: LD_VAR 0 2
40663: NOT
40664: OR
40665: IFFALSE 40669
// exit ;
40667: GO 40733
// result := true ;
40669: LD_ADDR_VAR 0 3
40673: PUSH
40674: LD_INT 1
40676: ST_TO_ADDR
// for i = 1 to array1 do
40677: LD_ADDR_VAR 0 4
40681: PUSH
40682: DOUBLE
40683: LD_INT 1
40685: DEC
40686: ST_TO_ADDR
40687: LD_VAR 0 1
40691: PUSH
40692: FOR_TO
40693: IFFALSE 40731
// if array1 [ i ] <> array2 [ i ] then
40695: LD_VAR 0 1
40699: PUSH
40700: LD_VAR 0 4
40704: ARRAY
40705: PUSH
40706: LD_VAR 0 2
40710: PUSH
40711: LD_VAR 0 4
40715: ARRAY
40716: NONEQUAL
40717: IFFALSE 40729
// begin result := false ;
40719: LD_ADDR_VAR 0 3
40723: PUSH
40724: LD_INT 0
40726: ST_TO_ADDR
// break ;
40727: GO 40731
// end ;
40729: GO 40692
40731: POP
40732: POP
// end ;
40733: LD_VAR 0 3
40737: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40738: LD_INT 0
40740: PPUSH
40741: PPUSH
40742: PPUSH
// pom := GetBase ( fac ) ;
40743: LD_ADDR_VAR 0 5
40747: PUSH
40748: LD_VAR 0 1
40752: PPUSH
40753: CALL_OW 274
40757: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40758: LD_ADDR_VAR 0 4
40762: PUSH
40763: LD_VAR 0 2
40767: PUSH
40768: LD_INT 1
40770: ARRAY
40771: PPUSH
40772: LD_VAR 0 2
40776: PUSH
40777: LD_INT 2
40779: ARRAY
40780: PPUSH
40781: LD_VAR 0 2
40785: PUSH
40786: LD_INT 3
40788: ARRAY
40789: PPUSH
40790: LD_VAR 0 2
40794: PUSH
40795: LD_INT 4
40797: ARRAY
40798: PPUSH
40799: CALL_OW 449
40803: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: LD_VAR 0 5
40813: PPUSH
40814: LD_INT 1
40816: PPUSH
40817: CALL_OW 275
40821: PUSH
40822: LD_VAR 0 4
40826: PUSH
40827: LD_INT 1
40829: ARRAY
40830: GREATEREQUAL
40831: PUSH
40832: LD_VAR 0 5
40836: PPUSH
40837: LD_INT 2
40839: PPUSH
40840: CALL_OW 275
40844: PUSH
40845: LD_VAR 0 4
40849: PUSH
40850: LD_INT 2
40852: ARRAY
40853: GREATEREQUAL
40854: AND
40855: PUSH
40856: LD_VAR 0 5
40860: PPUSH
40861: LD_INT 3
40863: PPUSH
40864: CALL_OW 275
40868: PUSH
40869: LD_VAR 0 4
40873: PUSH
40874: LD_INT 3
40876: ARRAY
40877: GREATEREQUAL
40878: AND
40879: ST_TO_ADDR
// end ;
40880: LD_VAR 0 3
40884: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40885: LD_INT 0
40887: PPUSH
40888: PPUSH
40889: PPUSH
40890: PPUSH
// pom := GetBase ( building ) ;
40891: LD_ADDR_VAR 0 3
40895: PUSH
40896: LD_VAR 0 1
40900: PPUSH
40901: CALL_OW 274
40905: ST_TO_ADDR
// if not pom then
40906: LD_VAR 0 3
40910: NOT
40911: IFFALSE 40915
// exit ;
40913: GO 41085
// btype := GetBType ( building ) ;
40915: LD_ADDR_VAR 0 5
40919: PUSH
40920: LD_VAR 0 1
40924: PPUSH
40925: CALL_OW 266
40929: ST_TO_ADDR
// if btype = b_armoury then
40930: LD_VAR 0 5
40934: PUSH
40935: LD_INT 4
40937: EQUAL
40938: IFFALSE 40948
// btype := b_barracks ;
40940: LD_ADDR_VAR 0 5
40944: PUSH
40945: LD_INT 5
40947: ST_TO_ADDR
// if btype = b_depot then
40948: LD_VAR 0 5
40952: PUSH
40953: LD_INT 0
40955: EQUAL
40956: IFFALSE 40966
// btype := b_warehouse ;
40958: LD_ADDR_VAR 0 5
40962: PUSH
40963: LD_INT 1
40965: ST_TO_ADDR
// if btype = b_workshop then
40966: LD_VAR 0 5
40970: PUSH
40971: LD_INT 2
40973: EQUAL
40974: IFFALSE 40984
// btype := b_factory ;
40976: LD_ADDR_VAR 0 5
40980: PUSH
40981: LD_INT 3
40983: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40984: LD_ADDR_VAR 0 4
40988: PUSH
40989: LD_VAR 0 5
40993: PPUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: CALL_OW 248
41003: PPUSH
41004: CALL_OW 450
41008: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41009: LD_ADDR_VAR 0 2
41013: PUSH
41014: LD_VAR 0 3
41018: PPUSH
41019: LD_INT 1
41021: PPUSH
41022: CALL_OW 275
41026: PUSH
41027: LD_VAR 0 4
41031: PUSH
41032: LD_INT 1
41034: ARRAY
41035: GREATEREQUAL
41036: PUSH
41037: LD_VAR 0 3
41041: PPUSH
41042: LD_INT 2
41044: PPUSH
41045: CALL_OW 275
41049: PUSH
41050: LD_VAR 0 4
41054: PUSH
41055: LD_INT 2
41057: ARRAY
41058: GREATEREQUAL
41059: AND
41060: PUSH
41061: LD_VAR 0 3
41065: PPUSH
41066: LD_INT 3
41068: PPUSH
41069: CALL_OW 275
41073: PUSH
41074: LD_VAR 0 4
41078: PUSH
41079: LD_INT 3
41081: ARRAY
41082: GREATEREQUAL
41083: AND
41084: ST_TO_ADDR
// end ;
41085: LD_VAR 0 2
41089: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41090: LD_INT 0
41092: PPUSH
41093: PPUSH
41094: PPUSH
// pom := GetBase ( building ) ;
41095: LD_ADDR_VAR 0 4
41099: PUSH
41100: LD_VAR 0 1
41104: PPUSH
41105: CALL_OW 274
41109: ST_TO_ADDR
// if not pom then
41110: LD_VAR 0 4
41114: NOT
41115: IFFALSE 41119
// exit ;
41117: GO 41220
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41119: LD_ADDR_VAR 0 5
41123: PUSH
41124: LD_VAR 0 2
41128: PPUSH
41129: LD_VAR 0 1
41133: PPUSH
41134: CALL_OW 248
41138: PPUSH
41139: CALL_OW 450
41143: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41144: LD_ADDR_VAR 0 3
41148: PUSH
41149: LD_VAR 0 4
41153: PPUSH
41154: LD_INT 1
41156: PPUSH
41157: CALL_OW 275
41161: PUSH
41162: LD_VAR 0 5
41166: PUSH
41167: LD_INT 1
41169: ARRAY
41170: GREATEREQUAL
41171: PUSH
41172: LD_VAR 0 4
41176: PPUSH
41177: LD_INT 2
41179: PPUSH
41180: CALL_OW 275
41184: PUSH
41185: LD_VAR 0 5
41189: PUSH
41190: LD_INT 2
41192: ARRAY
41193: GREATEREQUAL
41194: AND
41195: PUSH
41196: LD_VAR 0 4
41200: PPUSH
41201: LD_INT 3
41203: PPUSH
41204: CALL_OW 275
41208: PUSH
41209: LD_VAR 0 5
41213: PUSH
41214: LD_INT 3
41216: ARRAY
41217: GREATEREQUAL
41218: AND
41219: ST_TO_ADDR
// end ;
41220: LD_VAR 0 3
41224: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41225: LD_INT 0
41227: PPUSH
41228: PPUSH
41229: PPUSH
41230: PPUSH
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
// result := false ;
41238: LD_ADDR_VAR 0 8
41242: PUSH
41243: LD_INT 0
41245: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41246: LD_VAR 0 5
41250: NOT
41251: PUSH
41252: LD_VAR 0 1
41256: NOT
41257: OR
41258: PUSH
41259: LD_VAR 0 2
41263: NOT
41264: OR
41265: PUSH
41266: LD_VAR 0 3
41270: NOT
41271: OR
41272: IFFALSE 41276
// exit ;
41274: GO 42090
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41276: LD_ADDR_VAR 0 14
41280: PUSH
41281: LD_VAR 0 1
41285: PPUSH
41286: LD_VAR 0 2
41290: PPUSH
41291: LD_VAR 0 3
41295: PPUSH
41296: LD_VAR 0 4
41300: PPUSH
41301: LD_VAR 0 5
41305: PUSH
41306: LD_INT 1
41308: ARRAY
41309: PPUSH
41310: CALL_OW 248
41314: PPUSH
41315: LD_INT 0
41317: PPUSH
41318: CALL 43327 0 6
41322: ST_TO_ADDR
// if not hexes then
41323: LD_VAR 0 14
41327: NOT
41328: IFFALSE 41332
// exit ;
41330: GO 42090
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41332: LD_ADDR_VAR 0 17
41336: PUSH
41337: LD_VAR 0 5
41341: PPUSH
41342: LD_INT 22
41344: PUSH
41345: LD_VAR 0 13
41349: PPUSH
41350: CALL_OW 255
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: LD_INT 30
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 30
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PPUSH
41391: CALL_OW 72
41395: ST_TO_ADDR
// for i = 1 to hexes do
41396: LD_ADDR_VAR 0 9
41400: PUSH
41401: DOUBLE
41402: LD_INT 1
41404: DEC
41405: ST_TO_ADDR
41406: LD_VAR 0 14
41410: PUSH
41411: FOR_TO
41412: IFFALSE 42088
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41414: LD_ADDR_VAR 0 13
41418: PUSH
41419: LD_VAR 0 14
41423: PUSH
41424: LD_VAR 0 9
41428: ARRAY
41429: PUSH
41430: LD_INT 1
41432: ARRAY
41433: PPUSH
41434: LD_VAR 0 14
41438: PUSH
41439: LD_VAR 0 9
41443: ARRAY
41444: PUSH
41445: LD_INT 2
41447: ARRAY
41448: PPUSH
41449: CALL_OW 428
41453: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41454: LD_VAR 0 14
41458: PUSH
41459: LD_VAR 0 9
41463: ARRAY
41464: PUSH
41465: LD_INT 1
41467: ARRAY
41468: PPUSH
41469: LD_VAR 0 14
41473: PUSH
41474: LD_VAR 0 9
41478: ARRAY
41479: PUSH
41480: LD_INT 2
41482: ARRAY
41483: PPUSH
41484: CALL_OW 351
41488: PUSH
41489: LD_VAR 0 14
41493: PUSH
41494: LD_VAR 0 9
41498: ARRAY
41499: PUSH
41500: LD_INT 1
41502: ARRAY
41503: PPUSH
41504: LD_VAR 0 14
41508: PUSH
41509: LD_VAR 0 9
41513: ARRAY
41514: PUSH
41515: LD_INT 2
41517: ARRAY
41518: PPUSH
41519: CALL_OW 488
41523: NOT
41524: OR
41525: PUSH
41526: LD_VAR 0 13
41530: PPUSH
41531: CALL_OW 247
41535: PUSH
41536: LD_INT 3
41538: EQUAL
41539: OR
41540: IFFALSE 41546
// exit ;
41542: POP
41543: POP
41544: GO 42090
// if not tmp then
41546: LD_VAR 0 13
41550: NOT
41551: IFFALSE 41555
// continue ;
41553: GO 41411
// result := true ;
41555: LD_ADDR_VAR 0 8
41559: PUSH
41560: LD_INT 1
41562: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41563: LD_VAR 0 6
41567: PUSH
41568: LD_VAR 0 13
41572: PPUSH
41573: CALL_OW 247
41577: PUSH
41578: LD_INT 2
41580: EQUAL
41581: AND
41582: PUSH
41583: LD_VAR 0 13
41587: PPUSH
41588: CALL_OW 263
41592: PUSH
41593: LD_INT 1
41595: EQUAL
41596: AND
41597: IFFALSE 41761
// begin if IsDrivenBy ( tmp ) then
41599: LD_VAR 0 13
41603: PPUSH
41604: CALL_OW 311
41608: IFFALSE 41612
// continue ;
41610: GO 41411
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41612: LD_VAR 0 6
41616: PPUSH
41617: LD_INT 3
41619: PUSH
41620: LD_INT 60
41622: PUSH
41623: EMPTY
41624: LIST
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 3
41632: PUSH
41633: LD_INT 55
41635: PUSH
41636: EMPTY
41637: LIST
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PPUSH
41647: CALL_OW 72
41651: IFFALSE 41759
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41653: LD_ADDR_VAR 0 18
41657: PUSH
41658: LD_VAR 0 6
41662: PPUSH
41663: LD_INT 3
41665: PUSH
41666: LD_INT 60
41668: PUSH
41669: EMPTY
41670: LIST
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 3
41678: PUSH
41679: LD_INT 55
41681: PUSH
41682: EMPTY
41683: LIST
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PPUSH
41693: CALL_OW 72
41697: PUSH
41698: LD_INT 1
41700: ARRAY
41701: ST_TO_ADDR
// if IsInUnit ( driver ) then
41702: LD_VAR 0 18
41706: PPUSH
41707: CALL_OW 310
41711: IFFALSE 41722
// ComExit ( driver ) ;
41713: LD_VAR 0 18
41717: PPUSH
41718: CALL 66511 0 1
// AddComEnterUnit ( driver , tmp ) ;
41722: LD_VAR 0 18
41726: PPUSH
41727: LD_VAR 0 13
41731: PPUSH
41732: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41736: LD_VAR 0 18
41740: PPUSH
41741: LD_VAR 0 7
41745: PPUSH
41746: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41750: LD_VAR 0 18
41754: PPUSH
41755: CALL_OW 181
// end ; continue ;
41759: GO 41411
// end ; if not cleaners or not tmp in cleaners then
41761: LD_VAR 0 6
41765: NOT
41766: PUSH
41767: LD_VAR 0 13
41771: PUSH
41772: LD_VAR 0 6
41776: IN
41777: NOT
41778: OR
41779: IFFALSE 42086
// begin if dep then
41781: LD_VAR 0 17
41785: IFFALSE 41921
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41787: LD_ADDR_VAR 0 16
41791: PUSH
41792: LD_VAR 0 17
41796: PUSH
41797: LD_INT 1
41799: ARRAY
41800: PPUSH
41801: CALL_OW 250
41805: PPUSH
41806: LD_VAR 0 17
41810: PUSH
41811: LD_INT 1
41813: ARRAY
41814: PPUSH
41815: CALL_OW 254
41819: PPUSH
41820: LD_INT 5
41822: PPUSH
41823: CALL_OW 272
41827: PUSH
41828: LD_VAR 0 17
41832: PUSH
41833: LD_INT 1
41835: ARRAY
41836: PPUSH
41837: CALL_OW 251
41841: PPUSH
41842: LD_VAR 0 17
41846: PUSH
41847: LD_INT 1
41849: ARRAY
41850: PPUSH
41851: CALL_OW 254
41855: PPUSH
41856: LD_INT 5
41858: PPUSH
41859: CALL_OW 273
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41868: LD_VAR 0 16
41872: PUSH
41873: LD_INT 1
41875: ARRAY
41876: PPUSH
41877: LD_VAR 0 16
41881: PUSH
41882: LD_INT 2
41884: ARRAY
41885: PPUSH
41886: CALL_OW 488
41890: IFFALSE 41921
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41892: LD_VAR 0 13
41896: PPUSH
41897: LD_VAR 0 16
41901: PUSH
41902: LD_INT 1
41904: ARRAY
41905: PPUSH
41906: LD_VAR 0 16
41910: PUSH
41911: LD_INT 2
41913: ARRAY
41914: PPUSH
41915: CALL_OW 111
// continue ;
41919: GO 41411
// end ; end ; r := GetDir ( tmp ) ;
41921: LD_ADDR_VAR 0 15
41925: PUSH
41926: LD_VAR 0 13
41930: PPUSH
41931: CALL_OW 254
41935: ST_TO_ADDR
// if r = 5 then
41936: LD_VAR 0 15
41940: PUSH
41941: LD_INT 5
41943: EQUAL
41944: IFFALSE 41954
// r := 0 ;
41946: LD_ADDR_VAR 0 15
41950: PUSH
41951: LD_INT 0
41953: ST_TO_ADDR
// for j = r to 5 do
41954: LD_ADDR_VAR 0 10
41958: PUSH
41959: DOUBLE
41960: LD_VAR 0 15
41964: DEC
41965: ST_TO_ADDR
41966: LD_INT 5
41968: PUSH
41969: FOR_TO
41970: IFFALSE 42084
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41972: LD_ADDR_VAR 0 11
41976: PUSH
41977: LD_VAR 0 13
41981: PPUSH
41982: CALL_OW 250
41986: PPUSH
41987: LD_VAR 0 10
41991: PPUSH
41992: LD_INT 2
41994: PPUSH
41995: CALL_OW 272
41999: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42000: LD_ADDR_VAR 0 12
42004: PUSH
42005: LD_VAR 0 13
42009: PPUSH
42010: CALL_OW 251
42014: PPUSH
42015: LD_VAR 0 10
42019: PPUSH
42020: LD_INT 2
42022: PPUSH
42023: CALL_OW 273
42027: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42028: LD_VAR 0 11
42032: PPUSH
42033: LD_VAR 0 12
42037: PPUSH
42038: CALL_OW 488
42042: PUSH
42043: LD_VAR 0 11
42047: PPUSH
42048: LD_VAR 0 12
42052: PPUSH
42053: CALL_OW 428
42057: NOT
42058: AND
42059: IFFALSE 42082
// begin ComMoveXY ( tmp , _x , _y ) ;
42061: LD_VAR 0 13
42065: PPUSH
42066: LD_VAR 0 11
42070: PPUSH
42071: LD_VAR 0 12
42075: PPUSH
42076: CALL_OW 111
// break ;
42080: GO 42084
// end ; end ;
42082: GO 41969
42084: POP
42085: POP
// end ; end ;
42086: GO 41411
42088: POP
42089: POP
// end ;
42090: LD_VAR 0 8
42094: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42095: LD_INT 0
42097: PPUSH
// result := true ;
42098: LD_ADDR_VAR 0 3
42102: PUSH
42103: LD_INT 1
42105: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42106: LD_VAR 0 2
42110: PUSH
42111: LD_INT 24
42113: DOUBLE
42114: EQUAL
42115: IFTRUE 42125
42117: LD_INT 33
42119: DOUBLE
42120: EQUAL
42121: IFTRUE 42125
42123: GO 42150
42125: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42126: LD_ADDR_VAR 0 3
42130: PUSH
42131: LD_INT 32
42133: PPUSH
42134: LD_VAR 0 1
42138: PPUSH
42139: CALL_OW 321
42143: PUSH
42144: LD_INT 2
42146: EQUAL
42147: ST_TO_ADDR
42148: GO 42470
42150: LD_INT 20
42152: DOUBLE
42153: EQUAL
42154: IFTRUE 42158
42156: GO 42183
42158: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42159: LD_ADDR_VAR 0 3
42163: PUSH
42164: LD_INT 6
42166: PPUSH
42167: LD_VAR 0 1
42171: PPUSH
42172: CALL_OW 321
42176: PUSH
42177: LD_INT 2
42179: EQUAL
42180: ST_TO_ADDR
42181: GO 42470
42183: LD_INT 22
42185: DOUBLE
42186: EQUAL
42187: IFTRUE 42197
42189: LD_INT 36
42191: DOUBLE
42192: EQUAL
42193: IFTRUE 42197
42195: GO 42222
42197: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42198: LD_ADDR_VAR 0 3
42202: PUSH
42203: LD_INT 15
42205: PPUSH
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 321
42215: PUSH
42216: LD_INT 2
42218: EQUAL
42219: ST_TO_ADDR
42220: GO 42470
42222: LD_INT 30
42224: DOUBLE
42225: EQUAL
42226: IFTRUE 42230
42228: GO 42255
42230: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_INT 20
42238: PPUSH
42239: LD_VAR 0 1
42243: PPUSH
42244: CALL_OW 321
42248: PUSH
42249: LD_INT 2
42251: EQUAL
42252: ST_TO_ADDR
42253: GO 42470
42255: LD_INT 28
42257: DOUBLE
42258: EQUAL
42259: IFTRUE 42269
42261: LD_INT 21
42263: DOUBLE
42264: EQUAL
42265: IFTRUE 42269
42267: GO 42294
42269: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42270: LD_ADDR_VAR 0 3
42274: PUSH
42275: LD_INT 21
42277: PPUSH
42278: LD_VAR 0 1
42282: PPUSH
42283: CALL_OW 321
42287: PUSH
42288: LD_INT 2
42290: EQUAL
42291: ST_TO_ADDR
42292: GO 42470
42294: LD_INT 16
42296: DOUBLE
42297: EQUAL
42298: IFTRUE 42302
42300: GO 42329
42302: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42303: LD_ADDR_VAR 0 3
42307: PUSH
42308: LD_EXP 33
42312: PPUSH
42313: LD_VAR 0 1
42317: PPUSH
42318: CALL_OW 321
42322: PUSH
42323: LD_INT 2
42325: EQUAL
42326: ST_TO_ADDR
42327: GO 42470
42329: LD_INT 19
42331: DOUBLE
42332: EQUAL
42333: IFTRUE 42343
42335: LD_INT 23
42337: DOUBLE
42338: EQUAL
42339: IFTRUE 42343
42341: GO 42370
42343: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42344: LD_ADDR_VAR 0 3
42348: PUSH
42349: LD_EXP 32
42353: PPUSH
42354: LD_VAR 0 1
42358: PPUSH
42359: CALL_OW 321
42363: PUSH
42364: LD_INT 2
42366: EQUAL
42367: ST_TO_ADDR
42368: GO 42470
42370: LD_INT 17
42372: DOUBLE
42373: EQUAL
42374: IFTRUE 42378
42376: GO 42403
42378: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42379: LD_ADDR_VAR 0 3
42383: PUSH
42384: LD_INT 39
42386: PPUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: CALL_OW 321
42396: PUSH
42397: LD_INT 2
42399: EQUAL
42400: ST_TO_ADDR
42401: GO 42470
42403: LD_INT 18
42405: DOUBLE
42406: EQUAL
42407: IFTRUE 42411
42409: GO 42436
42411: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42412: LD_ADDR_VAR 0 3
42416: PUSH
42417: LD_INT 40
42419: PPUSH
42420: LD_VAR 0 1
42424: PPUSH
42425: CALL_OW 321
42429: PUSH
42430: LD_INT 2
42432: EQUAL
42433: ST_TO_ADDR
42434: GO 42470
42436: LD_INT 27
42438: DOUBLE
42439: EQUAL
42440: IFTRUE 42444
42442: GO 42469
42444: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42445: LD_ADDR_VAR 0 3
42449: PUSH
42450: LD_INT 35
42452: PPUSH
42453: LD_VAR 0 1
42457: PPUSH
42458: CALL_OW 321
42462: PUSH
42463: LD_INT 2
42465: EQUAL
42466: ST_TO_ADDR
42467: GO 42470
42469: POP
// end ;
42470: LD_VAR 0 3
42474: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42475: LD_INT 0
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
// result := false ;
42488: LD_ADDR_VAR 0 6
42492: PUSH
42493: LD_INT 0
42495: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42496: LD_VAR 0 1
42500: NOT
42501: PUSH
42502: LD_VAR 0 1
42506: PPUSH
42507: CALL_OW 266
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: IN
42522: NOT
42523: OR
42524: PUSH
42525: LD_VAR 0 2
42529: NOT
42530: OR
42531: PUSH
42532: LD_VAR 0 5
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 3
42548: PUSH
42549: LD_INT 4
42551: PUSH
42552: LD_INT 5
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: IN
42563: NOT
42564: OR
42565: PUSH
42566: LD_VAR 0 3
42570: PPUSH
42571: LD_VAR 0 4
42575: PPUSH
42576: CALL_OW 488
42580: NOT
42581: OR
42582: IFFALSE 42586
// exit ;
42584: GO 43322
// side := GetSide ( depot ) ;
42586: LD_ADDR_VAR 0 9
42590: PUSH
42591: LD_VAR 0 1
42595: PPUSH
42596: CALL_OW 255
42600: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42601: LD_VAR 0 9
42605: PPUSH
42606: LD_VAR 0 2
42610: PPUSH
42611: CALL 42095 0 2
42615: NOT
42616: IFFALSE 42620
// exit ;
42618: GO 43322
// pom := GetBase ( depot ) ;
42620: LD_ADDR_VAR 0 10
42624: PUSH
42625: LD_VAR 0 1
42629: PPUSH
42630: CALL_OW 274
42634: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42635: LD_ADDR_VAR 0 11
42639: PUSH
42640: LD_VAR 0 2
42644: PPUSH
42645: LD_VAR 0 1
42649: PPUSH
42650: CALL_OW 248
42654: PPUSH
42655: CALL_OW 450
42659: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42660: LD_VAR 0 10
42664: PPUSH
42665: LD_INT 1
42667: PPUSH
42668: CALL_OW 275
42672: PUSH
42673: LD_VAR 0 11
42677: PUSH
42678: LD_INT 1
42680: ARRAY
42681: GREATEREQUAL
42682: PUSH
42683: LD_VAR 0 10
42687: PPUSH
42688: LD_INT 2
42690: PPUSH
42691: CALL_OW 275
42695: PUSH
42696: LD_VAR 0 11
42700: PUSH
42701: LD_INT 2
42703: ARRAY
42704: GREATEREQUAL
42705: AND
42706: PUSH
42707: LD_VAR 0 10
42711: PPUSH
42712: LD_INT 3
42714: PPUSH
42715: CALL_OW 275
42719: PUSH
42720: LD_VAR 0 11
42724: PUSH
42725: LD_INT 3
42727: ARRAY
42728: GREATEREQUAL
42729: AND
42730: NOT
42731: IFFALSE 42735
// exit ;
42733: GO 43322
// if GetBType ( depot ) = b_depot then
42735: LD_VAR 0 1
42739: PPUSH
42740: CALL_OW 266
42744: PUSH
42745: LD_INT 0
42747: EQUAL
42748: IFFALSE 42760
// dist := 28 else
42750: LD_ADDR_VAR 0 14
42754: PUSH
42755: LD_INT 28
42757: ST_TO_ADDR
42758: GO 42768
// dist := 36 ;
42760: LD_ADDR_VAR 0 14
42764: PUSH
42765: LD_INT 36
42767: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42768: LD_VAR 0 1
42772: PPUSH
42773: LD_VAR 0 3
42777: PPUSH
42778: LD_VAR 0 4
42782: PPUSH
42783: CALL_OW 297
42787: PUSH
42788: LD_VAR 0 14
42792: GREATER
42793: IFFALSE 42797
// exit ;
42795: GO 43322
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42797: LD_ADDR_VAR 0 12
42801: PUSH
42802: LD_VAR 0 2
42806: PPUSH
42807: LD_VAR 0 3
42811: PPUSH
42812: LD_VAR 0 4
42816: PPUSH
42817: LD_VAR 0 5
42821: PPUSH
42822: LD_VAR 0 1
42826: PPUSH
42827: CALL_OW 248
42831: PPUSH
42832: LD_INT 0
42834: PPUSH
42835: CALL 43327 0 6
42839: ST_TO_ADDR
// if not hexes then
42840: LD_VAR 0 12
42844: NOT
42845: IFFALSE 42849
// exit ;
42847: GO 43322
// hex := GetHexInfo ( x , y ) ;
42849: LD_ADDR_VAR 0 15
42853: PUSH
42854: LD_VAR 0 3
42858: PPUSH
42859: LD_VAR 0 4
42863: PPUSH
42864: CALL_OW 546
42868: ST_TO_ADDR
// if hex [ 1 ] then
42869: LD_VAR 0 15
42873: PUSH
42874: LD_INT 1
42876: ARRAY
42877: IFFALSE 42881
// exit ;
42879: GO 43322
// height := hex [ 2 ] ;
42881: LD_ADDR_VAR 0 13
42885: PUSH
42886: LD_VAR 0 15
42890: PUSH
42891: LD_INT 2
42893: ARRAY
42894: ST_TO_ADDR
// for i = 1 to hexes do
42895: LD_ADDR_VAR 0 7
42899: PUSH
42900: DOUBLE
42901: LD_INT 1
42903: DEC
42904: ST_TO_ADDR
42905: LD_VAR 0 12
42909: PUSH
42910: FOR_TO
42911: IFFALSE 43241
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42913: LD_VAR 0 12
42917: PUSH
42918: LD_VAR 0 7
42922: ARRAY
42923: PUSH
42924: LD_INT 1
42926: ARRAY
42927: PPUSH
42928: LD_VAR 0 12
42932: PUSH
42933: LD_VAR 0 7
42937: ARRAY
42938: PUSH
42939: LD_INT 2
42941: ARRAY
42942: PPUSH
42943: CALL_OW 488
42947: NOT
42948: PUSH
42949: LD_VAR 0 12
42953: PUSH
42954: LD_VAR 0 7
42958: ARRAY
42959: PUSH
42960: LD_INT 1
42962: ARRAY
42963: PPUSH
42964: LD_VAR 0 12
42968: PUSH
42969: LD_VAR 0 7
42973: ARRAY
42974: PUSH
42975: LD_INT 2
42977: ARRAY
42978: PPUSH
42979: CALL_OW 428
42983: PUSH
42984: LD_INT 0
42986: GREATER
42987: OR
42988: PUSH
42989: LD_VAR 0 12
42993: PUSH
42994: LD_VAR 0 7
42998: ARRAY
42999: PUSH
43000: LD_INT 1
43002: ARRAY
43003: PPUSH
43004: LD_VAR 0 12
43008: PUSH
43009: LD_VAR 0 7
43013: ARRAY
43014: PUSH
43015: LD_INT 2
43017: ARRAY
43018: PPUSH
43019: CALL_OW 351
43023: OR
43024: IFFALSE 43030
// exit ;
43026: POP
43027: POP
43028: GO 43322
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43030: LD_ADDR_VAR 0 8
43034: PUSH
43035: LD_VAR 0 12
43039: PUSH
43040: LD_VAR 0 7
43044: ARRAY
43045: PUSH
43046: LD_INT 1
43048: ARRAY
43049: PPUSH
43050: LD_VAR 0 12
43054: PUSH
43055: LD_VAR 0 7
43059: ARRAY
43060: PUSH
43061: LD_INT 2
43063: ARRAY
43064: PPUSH
43065: CALL_OW 546
43069: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43070: LD_VAR 0 8
43074: PUSH
43075: LD_INT 1
43077: ARRAY
43078: PUSH
43079: LD_VAR 0 8
43083: PUSH
43084: LD_INT 2
43086: ARRAY
43087: PUSH
43088: LD_VAR 0 13
43092: PUSH
43093: LD_INT 2
43095: PLUS
43096: GREATER
43097: OR
43098: PUSH
43099: LD_VAR 0 8
43103: PUSH
43104: LD_INT 2
43106: ARRAY
43107: PUSH
43108: LD_VAR 0 13
43112: PUSH
43113: LD_INT 2
43115: MINUS
43116: LESS
43117: OR
43118: PUSH
43119: LD_VAR 0 8
43123: PUSH
43124: LD_INT 3
43126: ARRAY
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 8
43133: PUSH
43134: LD_INT 9
43136: PUSH
43137: LD_INT 10
43139: PUSH
43140: LD_INT 11
43142: PUSH
43143: LD_INT 12
43145: PUSH
43146: LD_INT 13
43148: PUSH
43149: LD_INT 16
43151: PUSH
43152: LD_INT 17
43154: PUSH
43155: LD_INT 18
43157: PUSH
43158: LD_INT 19
43160: PUSH
43161: LD_INT 20
43163: PUSH
43164: LD_INT 21
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: IN
43182: NOT
43183: OR
43184: PUSH
43185: LD_VAR 0 8
43189: PUSH
43190: LD_INT 5
43192: ARRAY
43193: NOT
43194: OR
43195: PUSH
43196: LD_VAR 0 8
43200: PUSH
43201: LD_INT 6
43203: ARRAY
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 7
43213: PUSH
43214: LD_INT 9
43216: PUSH
43217: LD_INT 10
43219: PUSH
43220: LD_INT 11
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: IN
43231: NOT
43232: OR
43233: IFFALSE 43239
// exit ;
43235: POP
43236: POP
43237: GO 43322
// end ;
43239: GO 42910
43241: POP
43242: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43243: LD_VAR 0 9
43247: PPUSH
43248: LD_VAR 0 3
43252: PPUSH
43253: LD_VAR 0 4
43257: PPUSH
43258: LD_INT 20
43260: PPUSH
43261: CALL 35268 0 4
43265: PUSH
43266: LD_INT 4
43268: ARRAY
43269: IFFALSE 43273
// exit ;
43271: GO 43322
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43273: LD_VAR 0 2
43277: PUSH
43278: LD_INT 29
43280: PUSH
43281: LD_INT 30
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: IN
43288: PUSH
43289: LD_VAR 0 3
43293: PPUSH
43294: LD_VAR 0 4
43298: PPUSH
43299: LD_VAR 0 9
43303: PPUSH
43304: CALL_OW 440
43308: NOT
43309: AND
43310: IFFALSE 43314
// exit ;
43312: GO 43322
// result := true ;
43314: LD_ADDR_VAR 0 6
43318: PUSH
43319: LD_INT 1
43321: ST_TO_ADDR
// end ;
43322: LD_VAR 0 6
43326: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43327: LD_INT 0
43329: PPUSH
43330: PPUSH
43331: PPUSH
43332: PPUSH
43333: PPUSH
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
43345: PPUSH
43346: PPUSH
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
43351: PPUSH
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
43357: PPUSH
43358: PPUSH
43359: PPUSH
43360: PPUSH
43361: PPUSH
43362: PPUSH
43363: PPUSH
43364: PPUSH
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
43372: PPUSH
43373: PPUSH
43374: PPUSH
43375: PPUSH
43376: PPUSH
43377: PPUSH
43378: PPUSH
43379: PPUSH
43380: PPUSH
43381: PPUSH
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
// result = [ ] ;
43387: LD_ADDR_VAR 0 7
43391: PUSH
43392: EMPTY
43393: ST_TO_ADDR
// temp_list = [ ] ;
43394: LD_ADDR_VAR 0 9
43398: PUSH
43399: EMPTY
43400: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43401: LD_VAR 0 4
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: LD_INT 3
43417: PUSH
43418: LD_INT 4
43420: PUSH
43421: LD_INT 5
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: IN
43432: NOT
43433: PUSH
43434: LD_VAR 0 1
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: IN
43449: PUSH
43450: LD_VAR 0 5
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: LD_INT 3
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: LIST
43468: IN
43469: NOT
43470: AND
43471: OR
43472: IFFALSE 43476
// exit ;
43474: GO 61867
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43476: LD_VAR 0 1
43480: PUSH
43481: LD_INT 6
43483: PUSH
43484: LD_INT 7
43486: PUSH
43487: LD_INT 8
43489: PUSH
43490: LD_INT 13
43492: PUSH
43493: LD_INT 12
43495: PUSH
43496: LD_INT 15
43498: PUSH
43499: LD_INT 11
43501: PUSH
43502: LD_INT 14
43504: PUSH
43505: LD_INT 10
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: IN
43519: IFFALSE 43529
// btype = b_lab ;
43521: LD_ADDR_VAR 0 1
43525: PUSH
43526: LD_INT 6
43528: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43529: LD_VAR 0 6
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: LIST
43547: IN
43548: NOT
43549: PUSH
43550: LD_VAR 0 1
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: LD_INT 3
43566: PUSH
43567: LD_INT 6
43569: PUSH
43570: LD_INT 36
43572: PUSH
43573: LD_INT 4
43575: PUSH
43576: LD_INT 5
43578: PUSH
43579: LD_INT 31
43581: PUSH
43582: LD_INT 32
43584: PUSH
43585: LD_INT 33
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: IN
43601: NOT
43602: PUSH
43603: LD_VAR 0 6
43607: PUSH
43608: LD_INT 1
43610: EQUAL
43611: AND
43612: OR
43613: PUSH
43614: LD_VAR 0 1
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 3
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: IN
43629: NOT
43630: PUSH
43631: LD_VAR 0 6
43635: PUSH
43636: LD_INT 2
43638: EQUAL
43639: AND
43640: OR
43641: IFFALSE 43651
// mode = 0 ;
43643: LD_ADDR_VAR 0 6
43647: PUSH
43648: LD_INT 0
43650: ST_TO_ADDR
// case mode of 0 :
43651: LD_VAR 0 6
43655: PUSH
43656: LD_INT 0
43658: DOUBLE
43659: EQUAL
43660: IFTRUE 43664
43662: GO 55117
43664: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43665: LD_ADDR_VAR 0 11
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 3
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 2
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43858: LD_ADDR_VAR 0 12
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 3
44015: NEG
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 3
44026: NEG
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44054: LD_ADDR_VAR 0 13
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 2
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: LD_INT 3
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 3
44213: NEG
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 3
44225: NEG
44226: PUSH
44227: LD_INT 3
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44253: LD_ADDR_VAR 0 14
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 3
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 3
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44449: LD_ADDR_VAR 0 15
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 3
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 3
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44642: LD_ADDR_VAR 0 16
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 3
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 3
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 3
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44835: LD_ADDR_VAR 0 17
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45065: LD_ADDR_VAR 0 18
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45295: LD_ADDR_VAR 0 19
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45525: LD_ADDR_VAR 0 20
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 2
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45755: LD_ADDR_VAR 0 21
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45985: LD_ADDR_VAR 0 22
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46215: LD_ADDR_VAR 0 23
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: LD_INT 3
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 3
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46495: LD_ADDR_VAR 0 24
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 3
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 3
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46771: LD_ADDR_VAR 0 25
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 3
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 3
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 3
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 3
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47045: LD_ADDR_VAR 0 26
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: LD_INT 3
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47321: LD_ADDR_VAR 0 27
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 3
47566: NEG
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47601: LD_ADDR_VAR 0 28
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: LD_INT 3
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 3
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 3
47848: NEG
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47883: LD_ADDR_VAR 0 29
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: LD_INT 3
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 3
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48162: LD_ADDR_VAR 0 30
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 3
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 3
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48440: LD_ADDR_VAR 0 31
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: LD_INT 2
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48718: LD_ADDR_VAR 0 32
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 3
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 3
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 3
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 3
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48996: LD_ADDR_VAR 0 33
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 2
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 2
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: LD_INT 3
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 3
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 3
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49275: LD_ADDR_VAR 0 34
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: PUSH
49490: LD_INT 2
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: LD_INT 3
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49555: LD_ADDR_VAR 0 35
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49667: LD_ADDR_VAR 0 36
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49779: LD_ADDR_VAR 0 37
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49891: LD_ADDR_VAR 0 38
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50003: LD_ADDR_VAR 0 39
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50115: LD_ADDR_VAR 0 40
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50227: LD_ADDR_VAR 0 41
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 3
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 3
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 3
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: LD_INT 3
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 3
50501: NEG
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50577: LD_ADDR_VAR 0 42
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: LD_INT 3
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 3
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 3
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 3
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 3
50823: PUSH
50824: LD_INT 3
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 3
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 3
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 3
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: NEG
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50927: LD_ADDR_VAR 0 43
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 3
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 3
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51275: LD_ADDR_VAR 0 44
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: LD_INT 3
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 3
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 3
51518: PUSH
51519: LD_INT 3
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: LD_INT 3
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 3
51572: NEG
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51625: LD_ADDR_VAR 0 45
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: NEG
51816: PUSH
51817: LD_INT 3
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: LD_INT 3
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 3
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 3
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 3
51922: NEG
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51975: LD_ADDR_VAR 0 46
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 3
52282: NEG
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52323: LD_ADDR_VAR 0 47
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: NEG
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52474: LD_ADDR_VAR 0 48
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52621: LD_ADDR_VAR 0 49
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52765: LD_ADDR_VAR 0 50
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52909: LD_ADDR_VAR 0 51
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53056: LD_ADDR_VAR 0 52
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53207: LD_ADDR_VAR 0 53
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53437: LD_ADDR_VAR 0 54
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53667: LD_ADDR_VAR 0 55
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53897: LD_ADDR_VAR 0 56
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 2
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54127: LD_ADDR_VAR 0 57
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54357: LD_ADDR_VAR 0 58
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54587: LD_ADDR_VAR 0 59
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54675: LD_ADDR_VAR 0 60
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54763: LD_ADDR_VAR 0 61
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54851: LD_ADDR_VAR 0 62
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54939: LD_ADDR_VAR 0 63
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55027: LD_ADDR_VAR 0 64
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: ST_TO_ADDR
// end ; 1 :
55115: GO 61012
55117: LD_INT 1
55119: DOUBLE
55120: EQUAL
55121: IFTRUE 55125
55123: GO 57748
55125: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55126: LD_ADDR_VAR 0 11
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 3
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: LIST
55169: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55170: LD_ADDR_VAR 0 12
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 3
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 3
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55211: LD_ADDR_VAR 0 13
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55251: LD_ADDR_VAR 0 14
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: LIST
55291: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55292: LD_ADDR_VAR 0 15
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55336: LD_ADDR_VAR 0 16
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 3
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 3
55367: NEG
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: LIST
55381: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55382: LD_ADDR_VAR 0 17
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: LD_INT 3
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: LIST
55425: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55426: LD_ADDR_VAR 0 18
55430: PUSH
55431: LD_INT 2
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55467: LD_ADDR_VAR 0 19
55471: PUSH
55472: LD_INT 3
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: LIST
55506: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55507: LD_ADDR_VAR 0 20
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: LIST
55547: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55548: LD_ADDR_VAR 0 21
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55592: LD_ADDR_VAR 0 22
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 3
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 3
55623: NEG
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55638: LD_ADDR_VAR 0 23
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 3
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: LD_INT 4
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 3
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: LIST
55681: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55682: LD_ADDR_VAR 0 24
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 4
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55723: LD_ADDR_VAR 0 25
55727: PUSH
55728: LD_INT 3
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 4
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: LD_INT 4
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: LIST
55762: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55763: LD_ADDR_VAR 0 26
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 3
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 4
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 3
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: LIST
55803: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55804: LD_ADDR_VAR 0 27
55808: PUSH
55809: LD_INT 3
55811: NEG
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 4
55833: NEG
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55848: LD_ADDR_VAR 0 28
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: LD_INT 3
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: LD_INT 4
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 4
55879: NEG
55880: PUSH
55881: LD_INT 3
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55894: LD_ADDR_VAR 0 29
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 3
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 4
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 4
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 3
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: LD_INT 5
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 5
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 4
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 6
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 6
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 5
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56049: LD_ADDR_VAR 0 30
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 3
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 3
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 4
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 4
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 4
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 5
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 5
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 5
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 6
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 6
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56192: LD_ADDR_VAR 0 31
56196: PUSH
56197: LD_INT 3
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 4
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: LD_INT 4
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: LD_INT 4
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 5
56259: PUSH
56260: LD_INT 4
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 5
56269: PUSH
56270: LD_INT 5
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 4
56279: PUSH
56280: LD_INT 5
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 6
56289: PUSH
56290: LD_INT 5
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 6
56299: PUSH
56300: LD_INT 6
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 5
56309: PUSH
56310: LD_INT 6
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56331: LD_ADDR_VAR 0 32
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 3
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 3
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 4
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 4
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 3
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 5
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 5
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: LD_INT 4
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 6
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 6
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 5
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56474: LD_ADDR_VAR 0 33
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: NEG
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 4
56526: NEG
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 4
56537: NEG
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 4
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 5
56560: NEG
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 5
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 5
56583: NEG
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 6
56594: NEG
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 6
56605: NEG
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56629: LD_ADDR_VAR 0 34
56633: PUSH
56634: LD_INT 2
56636: NEG
56637: PUSH
56638: LD_INT 3
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 3
56648: NEG
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: LD_INT 3
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: LD_INT 4
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 4
56684: NEG
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 4
56696: NEG
56697: PUSH
56698: LD_INT 4
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 4
56708: NEG
56709: PUSH
56710: LD_INT 5
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 5
56720: NEG
56721: PUSH
56722: LD_INT 4
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 5
56732: NEG
56733: PUSH
56734: LD_INT 5
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 5
56744: NEG
56745: PUSH
56746: LD_INT 6
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 6
56756: NEG
56757: PUSH
56758: LD_INT 5
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 6
56768: NEG
56769: PUSH
56770: LD_INT 6
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56792: LD_ADDR_VAR 0 41
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: LIST
56835: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56836: LD_ADDR_VAR 0 42
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56877: LD_ADDR_VAR 0 43
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 3
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: LD_INT 3
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: LIST
56916: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56917: LD_ADDR_VAR 0 44
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56958: LD_ADDR_VAR 0 45
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57002: LD_ADDR_VAR 0 46
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: LD_INT 3
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 3
57033: NEG
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57048: LD_ADDR_VAR 0 47
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: LD_INT 3
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57081: LD_ADDR_VAR 0 48
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57112: LD_ADDR_VAR 0 49
57116: PUSH
57117: LD_INT 3
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57141: LD_ADDR_VAR 0 50
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 3
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57170: LD_ADDR_VAR 0 51
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57201: LD_ADDR_VAR 0 52
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 3
57220: NEG
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57234: LD_ADDR_VAR 0 53
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57278: LD_ADDR_VAR 0 54
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 3
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57319: LD_ADDR_VAR 0 55
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: LIST
57358: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57359: LD_ADDR_VAR 0 56
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: LIST
57399: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57400: LD_ADDR_VAR 0 57
57404: PUSH
57405: LD_INT 2
57407: NEG
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57444: LD_ADDR_VAR 0 58
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: LD_INT 3
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: NEG
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57490: LD_ADDR_VAR 0 59
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57534: LD_ADDR_VAR 0 60
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57575: LD_ADDR_VAR 0 61
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57615: LD_ADDR_VAR 0 62
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: LIST
57655: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57656: LD_ADDR_VAR 0 63
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: LIST
57699: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57700: LD_ADDR_VAR 0 64
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: LD_INT 2
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: ST_TO_ADDR
// end ; 2 :
57746: GO 61012
57748: LD_INT 2
57750: DOUBLE
57751: EQUAL
57752: IFTRUE 57756
57754: GO 61011
57756: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57757: LD_ADDR_VAR 0 29
57761: PUSH
57762: LD_INT 4
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 4
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 5
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 5
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 4
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 5
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 3
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 4
57877: PUSH
57878: LD_INT 3
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 4
57887: PUSH
57888: LD_INT 4
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: LD_INT 4
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 4
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 4
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 3
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: LD_INT 4
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: LD_INT 5
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 5
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: LD_INT 4
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 5
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 3
58040: NEG
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 3
58085: NEG
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 4
58096: NEG
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 4
58107: NEG
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 4
58119: NEG
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 4
58142: NEG
58143: PUSH
58144: LD_INT 4
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 4
58154: NEG
58155: PUSH
58156: LD_INT 5
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: LD_INT 4
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 4
58190: NEG
58191: PUSH
58192: LD_INT 3
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 5
58202: NEG
58203: PUSH
58204: LD_INT 4
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 5
58214: NEG
58215: PUSH
58216: LD_INT 5
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: NEG
58227: PUSH
58228: LD_INT 5
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 5
58238: NEG
58239: PUSH
58240: LD_INT 3
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58295: LD_ADDR_VAR 0 30
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: LD_INT 4
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 4
58312: PUSH
58313: LD_INT 3
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 5
58322: PUSH
58323: LD_INT 4
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: LD_INT 5
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 4
58342: PUSH
58343: LD_INT 5
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: LD_INT 4
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 5
58372: PUSH
58373: LD_INT 3
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: LD_INT 5
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 4
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 4
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: LD_INT 4
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 4
58485: NEG
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 4
58496: NEG
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 3
58519: NEG
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 4
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 5
58541: NEG
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 5
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 5
58564: NEG
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 3
58587: NEG
58588: PUSH
58589: LD_INT 3
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: LD_INT 4
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: LD_INT 3
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 4
58647: NEG
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 4
58659: NEG
58660: PUSH
58661: LD_INT 4
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: LD_INT 4
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 4
58683: NEG
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 4
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 5
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 4
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: LD_INT 4
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 5
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 3
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: LD_INT 5
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58842: LD_ADDR_VAR 0 31
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: LD_INT 4
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 4
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 5
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 5
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 4
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: LD_INT 5
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: NEG
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 4
58998: NEG
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 4
59009: NEG
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 4
59044: NEG
59045: PUSH
59046: LD_INT 4
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 4
59056: NEG
59057: PUSH
59058: LD_INT 5
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 3
59068: NEG
59069: PUSH
59070: LD_INT 4
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: LD_INT 3
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 4
59092: NEG
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 5
59104: NEG
59105: PUSH
59106: LD_INT 4
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 5
59116: NEG
59117: PUSH
59118: LD_INT 5
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: LD_INT 5
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 5
59140: NEG
59141: PUSH
59142: LD_INT 3
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: LD_INT 4
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: LD_INT 3
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: LD_INT 3
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 4
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 4
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 4
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 4
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 5
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 5
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 4
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 3
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 5
59337: PUSH
59338: LD_INT 2
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59392: LD_ADDR_VAR 0 32
59396: PUSH
59397: LD_INT 4
59399: NEG
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 4
59410: NEG
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: NEG
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 4
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 5
59455: NEG
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 5
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 5
59478: NEG
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 3
59490: NEG
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 3
59501: NEG
59502: PUSH
59503: LD_INT 3
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: LD_INT 4
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: LD_INT 3
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 3
59549: NEG
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 4
59561: NEG
59562: PUSH
59563: LD_INT 3
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 4
59573: NEG
59574: PUSH
59575: LD_INT 4
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: LD_INT 4
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 4
59597: NEG
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: LD_INT 4
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 5
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: LD_INT 4
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 4
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 5
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: LD_INT 3
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: LD_INT 5
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 3
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 4
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 4
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 2
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 4
59794: PUSH
59795: LD_INT 2
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 4
59804: PUSH
59805: LD_INT 4
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 4
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 5
59824: PUSH
59825: LD_INT 4
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 5
59834: PUSH
59835: LD_INT 5
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 4
59844: PUSH
59845: LD_INT 5
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 3
59854: PUSH
59855: LD_INT 4
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 5
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 3
59884: PUSH
59885: LD_INT 5
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59939: LD_ADDR_VAR 0 33
59943: PUSH
59944: LD_INT 4
59946: NEG
59947: PUSH
59948: LD_INT 4
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 4
59958: NEG
59959: PUSH
59960: LD_INT 5
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: LD_INT 4
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: LD_INT 3
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 4
59994: NEG
59995: PUSH
59996: LD_INT 3
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 5
60006: NEG
60007: PUSH
60008: LD_INT 4
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 5
60018: NEG
60019: PUSH
60020: LD_INT 5
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 3
60030: NEG
60031: PUSH
60032: LD_INT 5
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 5
60042: NEG
60043: PUSH
60044: LD_INT 3
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 3
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 4
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 4
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 2
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: LD_INT 4
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 4
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 4
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 5
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 5
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 4
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 5
60239: PUSH
60240: LD_INT 2
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: LD_INT 3
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 4
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 4
60279: PUSH
60280: LD_INT 4
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 3
60289: PUSH
60290: LD_INT 4
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: LD_INT 2
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 4
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: LD_INT 4
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: LD_INT 4
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 4
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: LD_INT 5
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: LD_INT 5
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 4
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 3
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: LD_INT 5
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60477: LD_ADDR_VAR 0 34
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 4
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 5
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 4
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: LD_INT 4
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: NEG
60552: PUSH
60553: LD_INT 5
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: LD_INT 3
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: LD_INT 5
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 4
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 4
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 4
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 4
60679: PUSH
60680: LD_INT 4
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 4
60689: PUSH
60690: LD_INT 3
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 5
60699: PUSH
60700: LD_INT 4
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 5
60709: PUSH
60710: LD_INT 5
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 4
60719: PUSH
60720: LD_INT 5
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 3
60729: PUSH
60730: LD_INT 4
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 3
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 5
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: LD_INT 5
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 3
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: LD_INT 4
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 4
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 3
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: LD_INT 4
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 4
60862: NEG
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 4
60873: NEG
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: NEG
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 3
60896: NEG
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 4
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 5
60918: NEG
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 5
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 5
60941: NEG
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: ST_TO_ADDR
// end ; end ;
61009: GO 61012
61011: POP
// case btype of b_depot , b_warehouse :
61012: LD_VAR 0 1
61016: PUSH
61017: LD_INT 0
61019: DOUBLE
61020: EQUAL
61021: IFTRUE 61031
61023: LD_INT 1
61025: DOUBLE
61026: EQUAL
61027: IFTRUE 61031
61029: GO 61232
61031: POP
// case nation of nation_american :
61032: LD_VAR 0 5
61036: PUSH
61037: LD_INT 1
61039: DOUBLE
61040: EQUAL
61041: IFTRUE 61045
61043: GO 61101
61045: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61046: LD_ADDR_VAR 0 9
61050: PUSH
61051: LD_VAR 0 11
61055: PUSH
61056: LD_VAR 0 12
61060: PUSH
61061: LD_VAR 0 13
61065: PUSH
61066: LD_VAR 0 14
61070: PUSH
61071: LD_VAR 0 15
61075: PUSH
61076: LD_VAR 0 16
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: PUSH
61089: LD_VAR 0 4
61093: PUSH
61094: LD_INT 1
61096: PLUS
61097: ARRAY
61098: ST_TO_ADDR
61099: GO 61230
61101: LD_INT 2
61103: DOUBLE
61104: EQUAL
61105: IFTRUE 61109
61107: GO 61165
61109: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61110: LD_ADDR_VAR 0 9
61114: PUSH
61115: LD_VAR 0 17
61119: PUSH
61120: LD_VAR 0 18
61124: PUSH
61125: LD_VAR 0 19
61129: PUSH
61130: LD_VAR 0 20
61134: PUSH
61135: LD_VAR 0 21
61139: PUSH
61140: LD_VAR 0 22
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: PUSH
61153: LD_VAR 0 4
61157: PUSH
61158: LD_INT 1
61160: PLUS
61161: ARRAY
61162: ST_TO_ADDR
61163: GO 61230
61165: LD_INT 3
61167: DOUBLE
61168: EQUAL
61169: IFTRUE 61173
61171: GO 61229
61173: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61174: LD_ADDR_VAR 0 9
61178: PUSH
61179: LD_VAR 0 23
61183: PUSH
61184: LD_VAR 0 24
61188: PUSH
61189: LD_VAR 0 25
61193: PUSH
61194: LD_VAR 0 26
61198: PUSH
61199: LD_VAR 0 27
61203: PUSH
61204: LD_VAR 0 28
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: PUSH
61217: LD_VAR 0 4
61221: PUSH
61222: LD_INT 1
61224: PLUS
61225: ARRAY
61226: ST_TO_ADDR
61227: GO 61230
61229: POP
61230: GO 61785
61232: LD_INT 2
61234: DOUBLE
61235: EQUAL
61236: IFTRUE 61246
61238: LD_INT 3
61240: DOUBLE
61241: EQUAL
61242: IFTRUE 61246
61244: GO 61302
61246: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61247: LD_ADDR_VAR 0 9
61251: PUSH
61252: LD_VAR 0 29
61256: PUSH
61257: LD_VAR 0 30
61261: PUSH
61262: LD_VAR 0 31
61266: PUSH
61267: LD_VAR 0 32
61271: PUSH
61272: LD_VAR 0 33
61276: PUSH
61277: LD_VAR 0 34
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: PUSH
61290: LD_VAR 0 4
61294: PUSH
61295: LD_INT 1
61297: PLUS
61298: ARRAY
61299: ST_TO_ADDR
61300: GO 61785
61302: LD_INT 16
61304: DOUBLE
61305: EQUAL
61306: IFTRUE 61364
61308: LD_INT 17
61310: DOUBLE
61311: EQUAL
61312: IFTRUE 61364
61314: LD_INT 18
61316: DOUBLE
61317: EQUAL
61318: IFTRUE 61364
61320: LD_INT 19
61322: DOUBLE
61323: EQUAL
61324: IFTRUE 61364
61326: LD_INT 22
61328: DOUBLE
61329: EQUAL
61330: IFTRUE 61364
61332: LD_INT 20
61334: DOUBLE
61335: EQUAL
61336: IFTRUE 61364
61338: LD_INT 21
61340: DOUBLE
61341: EQUAL
61342: IFTRUE 61364
61344: LD_INT 23
61346: DOUBLE
61347: EQUAL
61348: IFTRUE 61364
61350: LD_INT 24
61352: DOUBLE
61353: EQUAL
61354: IFTRUE 61364
61356: LD_INT 25
61358: DOUBLE
61359: EQUAL
61360: IFTRUE 61364
61362: GO 61420
61364: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61365: LD_ADDR_VAR 0 9
61369: PUSH
61370: LD_VAR 0 35
61374: PUSH
61375: LD_VAR 0 36
61379: PUSH
61380: LD_VAR 0 37
61384: PUSH
61385: LD_VAR 0 38
61389: PUSH
61390: LD_VAR 0 39
61394: PUSH
61395: LD_VAR 0 40
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: PUSH
61408: LD_VAR 0 4
61412: PUSH
61413: LD_INT 1
61415: PLUS
61416: ARRAY
61417: ST_TO_ADDR
61418: GO 61785
61420: LD_INT 6
61422: DOUBLE
61423: EQUAL
61424: IFTRUE 61476
61426: LD_INT 7
61428: DOUBLE
61429: EQUAL
61430: IFTRUE 61476
61432: LD_INT 8
61434: DOUBLE
61435: EQUAL
61436: IFTRUE 61476
61438: LD_INT 13
61440: DOUBLE
61441: EQUAL
61442: IFTRUE 61476
61444: LD_INT 12
61446: DOUBLE
61447: EQUAL
61448: IFTRUE 61476
61450: LD_INT 15
61452: DOUBLE
61453: EQUAL
61454: IFTRUE 61476
61456: LD_INT 11
61458: DOUBLE
61459: EQUAL
61460: IFTRUE 61476
61462: LD_INT 14
61464: DOUBLE
61465: EQUAL
61466: IFTRUE 61476
61468: LD_INT 10
61470: DOUBLE
61471: EQUAL
61472: IFTRUE 61476
61474: GO 61532
61476: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61477: LD_ADDR_VAR 0 9
61481: PUSH
61482: LD_VAR 0 41
61486: PUSH
61487: LD_VAR 0 42
61491: PUSH
61492: LD_VAR 0 43
61496: PUSH
61497: LD_VAR 0 44
61501: PUSH
61502: LD_VAR 0 45
61506: PUSH
61507: LD_VAR 0 46
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: PUSH
61520: LD_VAR 0 4
61524: PUSH
61525: LD_INT 1
61527: PLUS
61528: ARRAY
61529: ST_TO_ADDR
61530: GO 61785
61532: LD_INT 36
61534: DOUBLE
61535: EQUAL
61536: IFTRUE 61540
61538: GO 61596
61540: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61541: LD_ADDR_VAR 0 9
61545: PUSH
61546: LD_VAR 0 47
61550: PUSH
61551: LD_VAR 0 48
61555: PUSH
61556: LD_VAR 0 49
61560: PUSH
61561: LD_VAR 0 50
61565: PUSH
61566: LD_VAR 0 51
61570: PUSH
61571: LD_VAR 0 52
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: PUSH
61584: LD_VAR 0 4
61588: PUSH
61589: LD_INT 1
61591: PLUS
61592: ARRAY
61593: ST_TO_ADDR
61594: GO 61785
61596: LD_INT 4
61598: DOUBLE
61599: EQUAL
61600: IFTRUE 61622
61602: LD_INT 5
61604: DOUBLE
61605: EQUAL
61606: IFTRUE 61622
61608: LD_INT 34
61610: DOUBLE
61611: EQUAL
61612: IFTRUE 61622
61614: LD_INT 37
61616: DOUBLE
61617: EQUAL
61618: IFTRUE 61622
61620: GO 61678
61622: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61623: LD_ADDR_VAR 0 9
61627: PUSH
61628: LD_VAR 0 53
61632: PUSH
61633: LD_VAR 0 54
61637: PUSH
61638: LD_VAR 0 55
61642: PUSH
61643: LD_VAR 0 56
61647: PUSH
61648: LD_VAR 0 57
61652: PUSH
61653: LD_VAR 0 58
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: PUSH
61666: LD_VAR 0 4
61670: PUSH
61671: LD_INT 1
61673: PLUS
61674: ARRAY
61675: ST_TO_ADDR
61676: GO 61785
61678: LD_INT 31
61680: DOUBLE
61681: EQUAL
61682: IFTRUE 61728
61684: LD_INT 32
61686: DOUBLE
61687: EQUAL
61688: IFTRUE 61728
61690: LD_INT 33
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61728
61696: LD_INT 27
61698: DOUBLE
61699: EQUAL
61700: IFTRUE 61728
61702: LD_INT 26
61704: DOUBLE
61705: EQUAL
61706: IFTRUE 61728
61708: LD_INT 28
61710: DOUBLE
61711: EQUAL
61712: IFTRUE 61728
61714: LD_INT 29
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61728
61720: LD_INT 30
61722: DOUBLE
61723: EQUAL
61724: IFTRUE 61728
61726: GO 61784
61728: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61729: LD_ADDR_VAR 0 9
61733: PUSH
61734: LD_VAR 0 59
61738: PUSH
61739: LD_VAR 0 60
61743: PUSH
61744: LD_VAR 0 61
61748: PUSH
61749: LD_VAR 0 62
61753: PUSH
61754: LD_VAR 0 63
61758: PUSH
61759: LD_VAR 0 64
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: PUSH
61772: LD_VAR 0 4
61776: PUSH
61777: LD_INT 1
61779: PLUS
61780: ARRAY
61781: ST_TO_ADDR
61782: GO 61785
61784: POP
// temp_list2 = [ ] ;
61785: LD_ADDR_VAR 0 10
61789: PUSH
61790: EMPTY
61791: ST_TO_ADDR
// for i in temp_list do
61792: LD_ADDR_VAR 0 8
61796: PUSH
61797: LD_VAR 0 9
61801: PUSH
61802: FOR_IN
61803: IFFALSE 61855
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61805: LD_ADDR_VAR 0 10
61809: PUSH
61810: LD_VAR 0 10
61814: PUSH
61815: LD_VAR 0 8
61819: PUSH
61820: LD_INT 1
61822: ARRAY
61823: PUSH
61824: LD_VAR 0 2
61828: PLUS
61829: PUSH
61830: LD_VAR 0 8
61834: PUSH
61835: LD_INT 2
61837: ARRAY
61838: PUSH
61839: LD_VAR 0 3
61843: PLUS
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: EMPTY
61850: LIST
61851: ADD
61852: ST_TO_ADDR
61853: GO 61802
61855: POP
61856: POP
// result = temp_list2 ;
61857: LD_ADDR_VAR 0 7
61861: PUSH
61862: LD_VAR 0 10
61866: ST_TO_ADDR
// end ;
61867: LD_VAR 0 7
61871: RET
// export function EnemyInRange ( unit , dist ) ; begin
61872: LD_INT 0
61874: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61875: LD_ADDR_VAR 0 3
61879: PUSH
61880: LD_VAR 0 1
61884: PPUSH
61885: CALL_OW 255
61889: PPUSH
61890: LD_VAR 0 1
61894: PPUSH
61895: CALL_OW 250
61899: PPUSH
61900: LD_VAR 0 1
61904: PPUSH
61905: CALL_OW 251
61909: PPUSH
61910: LD_VAR 0 2
61914: PPUSH
61915: CALL 35268 0 4
61919: PUSH
61920: LD_INT 4
61922: ARRAY
61923: ST_TO_ADDR
// end ;
61924: LD_VAR 0 3
61928: RET
// export function PlayerSeeMe ( unit ) ; begin
61929: LD_INT 0
61931: PPUSH
// result := See ( your_side , unit ) ;
61932: LD_ADDR_VAR 0 2
61936: PUSH
61937: LD_OWVAR 2
61941: PPUSH
61942: LD_VAR 0 1
61946: PPUSH
61947: CALL_OW 292
61951: ST_TO_ADDR
// end ;
61952: LD_VAR 0 2
61956: RET
// export function ReverseDir ( unit ) ; begin
61957: LD_INT 0
61959: PPUSH
// if not unit then
61960: LD_VAR 0 1
61964: NOT
61965: IFFALSE 61969
// exit ;
61967: GO 61992
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61969: LD_ADDR_VAR 0 2
61973: PUSH
61974: LD_VAR 0 1
61978: PPUSH
61979: CALL_OW 254
61983: PUSH
61984: LD_INT 3
61986: PLUS
61987: PUSH
61988: LD_INT 6
61990: MOD
61991: ST_TO_ADDR
// end ;
61992: LD_VAR 0 2
61996: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61997: LD_INT 0
61999: PPUSH
62000: PPUSH
62001: PPUSH
62002: PPUSH
62003: PPUSH
// if not hexes then
62004: LD_VAR 0 2
62008: NOT
62009: IFFALSE 62013
// exit ;
62011: GO 62161
// dist := 9999 ;
62013: LD_ADDR_VAR 0 5
62017: PUSH
62018: LD_INT 9999
62020: ST_TO_ADDR
// for i = 1 to hexes do
62021: LD_ADDR_VAR 0 4
62025: PUSH
62026: DOUBLE
62027: LD_INT 1
62029: DEC
62030: ST_TO_ADDR
62031: LD_VAR 0 2
62035: PUSH
62036: FOR_TO
62037: IFFALSE 62149
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62039: LD_VAR 0 1
62043: PPUSH
62044: LD_VAR 0 2
62048: PUSH
62049: LD_VAR 0 4
62053: ARRAY
62054: PUSH
62055: LD_INT 1
62057: ARRAY
62058: PPUSH
62059: LD_VAR 0 2
62063: PUSH
62064: LD_VAR 0 4
62068: ARRAY
62069: PUSH
62070: LD_INT 2
62072: ARRAY
62073: PPUSH
62074: CALL_OW 297
62078: PUSH
62079: LD_VAR 0 5
62083: LESS
62084: IFFALSE 62147
// begin hex := hexes [ i ] ;
62086: LD_ADDR_VAR 0 7
62090: PUSH
62091: LD_VAR 0 2
62095: PUSH
62096: LD_VAR 0 4
62100: ARRAY
62101: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62102: LD_ADDR_VAR 0 5
62106: PUSH
62107: LD_VAR 0 1
62111: PPUSH
62112: LD_VAR 0 2
62116: PUSH
62117: LD_VAR 0 4
62121: ARRAY
62122: PUSH
62123: LD_INT 1
62125: ARRAY
62126: PPUSH
62127: LD_VAR 0 2
62131: PUSH
62132: LD_VAR 0 4
62136: ARRAY
62137: PUSH
62138: LD_INT 2
62140: ARRAY
62141: PPUSH
62142: CALL_OW 297
62146: ST_TO_ADDR
// end ; end ;
62147: GO 62036
62149: POP
62150: POP
// result := hex ;
62151: LD_ADDR_VAR 0 3
62155: PUSH
62156: LD_VAR 0 7
62160: ST_TO_ADDR
// end ;
62161: LD_VAR 0 3
62165: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62166: LD_INT 0
62168: PPUSH
62169: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62170: LD_VAR 0 1
62174: NOT
62175: PUSH
62176: LD_VAR 0 1
62180: PUSH
62181: LD_INT 21
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 23
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PPUSH
62205: CALL_OW 69
62209: IN
62210: NOT
62211: OR
62212: IFFALSE 62216
// exit ;
62214: GO 62263
// for i = 1 to 3 do
62216: LD_ADDR_VAR 0 3
62220: PUSH
62221: DOUBLE
62222: LD_INT 1
62224: DEC
62225: ST_TO_ADDR
62226: LD_INT 3
62228: PUSH
62229: FOR_TO
62230: IFFALSE 62261
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62232: LD_VAR 0 1
62236: PPUSH
62237: CALL_OW 250
62241: PPUSH
62242: LD_VAR 0 1
62246: PPUSH
62247: CALL_OW 251
62251: PPUSH
62252: LD_INT 1
62254: PPUSH
62255: CALL_OW 453
62259: GO 62229
62261: POP
62262: POP
// end ;
62263: LD_VAR 0 2
62267: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62268: LD_INT 0
62270: PPUSH
62271: PPUSH
62272: PPUSH
62273: PPUSH
62274: PPUSH
62275: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62276: LD_VAR 0 1
62280: NOT
62281: PUSH
62282: LD_VAR 0 2
62286: NOT
62287: OR
62288: PUSH
62289: LD_VAR 0 1
62293: PPUSH
62294: CALL_OW 314
62298: OR
62299: IFFALSE 62303
// exit ;
62301: GO 62744
// x := GetX ( enemy_unit ) ;
62303: LD_ADDR_VAR 0 7
62307: PUSH
62308: LD_VAR 0 2
62312: PPUSH
62313: CALL_OW 250
62317: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62318: LD_ADDR_VAR 0 8
62322: PUSH
62323: LD_VAR 0 2
62327: PPUSH
62328: CALL_OW 251
62332: ST_TO_ADDR
// if not x or not y then
62333: LD_VAR 0 7
62337: NOT
62338: PUSH
62339: LD_VAR 0 8
62343: NOT
62344: OR
62345: IFFALSE 62349
// exit ;
62347: GO 62744
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62349: LD_ADDR_VAR 0 6
62353: PUSH
62354: LD_VAR 0 7
62358: PPUSH
62359: LD_INT 0
62361: PPUSH
62362: LD_INT 4
62364: PPUSH
62365: CALL_OW 272
62369: PUSH
62370: LD_VAR 0 8
62374: PPUSH
62375: LD_INT 0
62377: PPUSH
62378: LD_INT 4
62380: PPUSH
62381: CALL_OW 273
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_VAR 0 7
62394: PPUSH
62395: LD_INT 1
62397: PPUSH
62398: LD_INT 4
62400: PPUSH
62401: CALL_OW 272
62405: PUSH
62406: LD_VAR 0 8
62410: PPUSH
62411: LD_INT 1
62413: PPUSH
62414: LD_INT 4
62416: PPUSH
62417: CALL_OW 273
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_VAR 0 7
62430: PPUSH
62431: LD_INT 2
62433: PPUSH
62434: LD_INT 4
62436: PPUSH
62437: CALL_OW 272
62441: PUSH
62442: LD_VAR 0 8
62446: PPUSH
62447: LD_INT 2
62449: PPUSH
62450: LD_INT 4
62452: PPUSH
62453: CALL_OW 273
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_VAR 0 7
62466: PPUSH
62467: LD_INT 3
62469: PPUSH
62470: LD_INT 4
62472: PPUSH
62473: CALL_OW 272
62477: PUSH
62478: LD_VAR 0 8
62482: PPUSH
62483: LD_INT 3
62485: PPUSH
62486: LD_INT 4
62488: PPUSH
62489: CALL_OW 273
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_VAR 0 7
62502: PPUSH
62503: LD_INT 4
62505: PPUSH
62506: LD_INT 4
62508: PPUSH
62509: CALL_OW 272
62513: PUSH
62514: LD_VAR 0 8
62518: PPUSH
62519: LD_INT 4
62521: PPUSH
62522: LD_INT 4
62524: PPUSH
62525: CALL_OW 273
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_VAR 0 7
62538: PPUSH
62539: LD_INT 5
62541: PPUSH
62542: LD_INT 4
62544: PPUSH
62545: CALL_OW 272
62549: PUSH
62550: LD_VAR 0 8
62554: PPUSH
62555: LD_INT 5
62557: PPUSH
62558: LD_INT 4
62560: PPUSH
62561: CALL_OW 273
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: ST_TO_ADDR
// for i = tmp downto 1 do
62578: LD_ADDR_VAR 0 4
62582: PUSH
62583: DOUBLE
62584: LD_VAR 0 6
62588: INC
62589: ST_TO_ADDR
62590: LD_INT 1
62592: PUSH
62593: FOR_DOWNTO
62594: IFFALSE 62695
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62596: LD_VAR 0 6
62600: PUSH
62601: LD_VAR 0 4
62605: ARRAY
62606: PUSH
62607: LD_INT 1
62609: ARRAY
62610: PPUSH
62611: LD_VAR 0 6
62615: PUSH
62616: LD_VAR 0 4
62620: ARRAY
62621: PUSH
62622: LD_INT 2
62624: ARRAY
62625: PPUSH
62626: CALL_OW 488
62630: NOT
62631: PUSH
62632: LD_VAR 0 6
62636: PUSH
62637: LD_VAR 0 4
62641: ARRAY
62642: PUSH
62643: LD_INT 1
62645: ARRAY
62646: PPUSH
62647: LD_VAR 0 6
62651: PUSH
62652: LD_VAR 0 4
62656: ARRAY
62657: PUSH
62658: LD_INT 2
62660: ARRAY
62661: PPUSH
62662: CALL_OW 428
62666: PUSH
62667: LD_INT 0
62669: NONEQUAL
62670: OR
62671: IFFALSE 62693
// tmp := Delete ( tmp , i ) ;
62673: LD_ADDR_VAR 0 6
62677: PUSH
62678: LD_VAR 0 6
62682: PPUSH
62683: LD_VAR 0 4
62687: PPUSH
62688: CALL_OW 3
62692: ST_TO_ADDR
62693: GO 62593
62695: POP
62696: POP
// j := GetClosestHex ( unit , tmp ) ;
62697: LD_ADDR_VAR 0 5
62701: PUSH
62702: LD_VAR 0 1
62706: PPUSH
62707: LD_VAR 0 6
62711: PPUSH
62712: CALL 61997 0 2
62716: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62717: LD_VAR 0 1
62721: PPUSH
62722: LD_VAR 0 5
62726: PUSH
62727: LD_INT 1
62729: ARRAY
62730: PPUSH
62731: LD_VAR 0 5
62735: PUSH
62736: LD_INT 2
62738: ARRAY
62739: PPUSH
62740: CALL_OW 111
// end ;
62744: LD_VAR 0 3
62748: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62749: LD_INT 0
62751: PPUSH
62752: PPUSH
62753: PPUSH
// uc_side = 0 ;
62754: LD_ADDR_OWVAR 20
62758: PUSH
62759: LD_INT 0
62761: ST_TO_ADDR
// uc_nation = 0 ;
62762: LD_ADDR_OWVAR 21
62766: PUSH
62767: LD_INT 0
62769: ST_TO_ADDR
// InitHc_All ( ) ;
62770: CALL_OW 584
// InitVc ;
62774: CALL_OW 20
// if mastodonts then
62778: LD_VAR 0 6
62782: IFFALSE 62849
// for i = 1 to mastodonts do
62784: LD_ADDR_VAR 0 11
62788: PUSH
62789: DOUBLE
62790: LD_INT 1
62792: DEC
62793: ST_TO_ADDR
62794: LD_VAR 0 6
62798: PUSH
62799: FOR_TO
62800: IFFALSE 62847
// begin vc_chassis := 31 ;
62802: LD_ADDR_OWVAR 37
62806: PUSH
62807: LD_INT 31
62809: ST_TO_ADDR
// vc_control := control_rider ;
62810: LD_ADDR_OWVAR 38
62814: PUSH
62815: LD_INT 4
62817: ST_TO_ADDR
// animal := CreateVehicle ;
62818: LD_ADDR_VAR 0 12
62822: PUSH
62823: CALL_OW 45
62827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62828: LD_VAR 0 12
62832: PPUSH
62833: LD_VAR 0 8
62837: PPUSH
62838: LD_INT 0
62840: PPUSH
62841: CALL 65037 0 3
// end ;
62845: GO 62799
62847: POP
62848: POP
// if horses then
62849: LD_VAR 0 5
62853: IFFALSE 62920
// for i = 1 to horses do
62855: LD_ADDR_VAR 0 11
62859: PUSH
62860: DOUBLE
62861: LD_INT 1
62863: DEC
62864: ST_TO_ADDR
62865: LD_VAR 0 5
62869: PUSH
62870: FOR_TO
62871: IFFALSE 62918
// begin hc_class := 21 ;
62873: LD_ADDR_OWVAR 28
62877: PUSH
62878: LD_INT 21
62880: ST_TO_ADDR
// hc_gallery :=  ;
62881: LD_ADDR_OWVAR 33
62885: PUSH
62886: LD_STRING 
62888: ST_TO_ADDR
// animal := CreateHuman ;
62889: LD_ADDR_VAR 0 12
62893: PUSH
62894: CALL_OW 44
62898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62899: LD_VAR 0 12
62903: PPUSH
62904: LD_VAR 0 8
62908: PPUSH
62909: LD_INT 0
62911: PPUSH
62912: CALL 65037 0 3
// end ;
62916: GO 62870
62918: POP
62919: POP
// if birds then
62920: LD_VAR 0 1
62924: IFFALSE 62991
// for i = 1 to birds do
62926: LD_ADDR_VAR 0 11
62930: PUSH
62931: DOUBLE
62932: LD_INT 1
62934: DEC
62935: ST_TO_ADDR
62936: LD_VAR 0 1
62940: PUSH
62941: FOR_TO
62942: IFFALSE 62989
// begin hc_class = 18 ;
62944: LD_ADDR_OWVAR 28
62948: PUSH
62949: LD_INT 18
62951: ST_TO_ADDR
// hc_gallery =  ;
62952: LD_ADDR_OWVAR 33
62956: PUSH
62957: LD_STRING 
62959: ST_TO_ADDR
// animal := CreateHuman ;
62960: LD_ADDR_VAR 0 12
62964: PUSH
62965: CALL_OW 44
62969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62970: LD_VAR 0 12
62974: PPUSH
62975: LD_VAR 0 8
62979: PPUSH
62980: LD_INT 0
62982: PPUSH
62983: CALL 65037 0 3
// end ;
62987: GO 62941
62989: POP
62990: POP
// if tigers then
62991: LD_VAR 0 2
62995: IFFALSE 63079
// for i = 1 to tigers do
62997: LD_ADDR_VAR 0 11
63001: PUSH
63002: DOUBLE
63003: LD_INT 1
63005: DEC
63006: ST_TO_ADDR
63007: LD_VAR 0 2
63011: PUSH
63012: FOR_TO
63013: IFFALSE 63077
// begin hc_class = class_tiger ;
63015: LD_ADDR_OWVAR 28
63019: PUSH
63020: LD_INT 14
63022: ST_TO_ADDR
// hc_gallery =  ;
63023: LD_ADDR_OWVAR 33
63027: PUSH
63028: LD_STRING 
63030: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63031: LD_ADDR_OWVAR 35
63035: PUSH
63036: LD_INT 7
63038: NEG
63039: PPUSH
63040: LD_INT 7
63042: PPUSH
63043: CALL_OW 12
63047: ST_TO_ADDR
// animal := CreateHuman ;
63048: LD_ADDR_VAR 0 12
63052: PUSH
63053: CALL_OW 44
63057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63058: LD_VAR 0 12
63062: PPUSH
63063: LD_VAR 0 8
63067: PPUSH
63068: LD_INT 0
63070: PPUSH
63071: CALL 65037 0 3
// end ;
63075: GO 63012
63077: POP
63078: POP
// if apemans then
63079: LD_VAR 0 3
63083: IFFALSE 63206
// for i = 1 to apemans do
63085: LD_ADDR_VAR 0 11
63089: PUSH
63090: DOUBLE
63091: LD_INT 1
63093: DEC
63094: ST_TO_ADDR
63095: LD_VAR 0 3
63099: PUSH
63100: FOR_TO
63101: IFFALSE 63204
// begin hc_class = class_apeman ;
63103: LD_ADDR_OWVAR 28
63107: PUSH
63108: LD_INT 12
63110: ST_TO_ADDR
// hc_gallery =  ;
63111: LD_ADDR_OWVAR 33
63115: PUSH
63116: LD_STRING 
63118: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63119: LD_ADDR_OWVAR 35
63123: PUSH
63124: LD_INT 2
63126: NEG
63127: PPUSH
63128: LD_INT 2
63130: PPUSH
63131: CALL_OW 12
63135: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63136: LD_ADDR_OWVAR 31
63140: PUSH
63141: LD_INT 1
63143: PPUSH
63144: LD_INT 3
63146: PPUSH
63147: CALL_OW 12
63151: PUSH
63152: LD_INT 1
63154: PPUSH
63155: LD_INT 3
63157: PPUSH
63158: CALL_OW 12
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: ST_TO_ADDR
// animal := CreateHuman ;
63175: LD_ADDR_VAR 0 12
63179: PUSH
63180: CALL_OW 44
63184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63185: LD_VAR 0 12
63189: PPUSH
63190: LD_VAR 0 8
63194: PPUSH
63195: LD_INT 0
63197: PPUSH
63198: CALL 65037 0 3
// end ;
63202: GO 63100
63204: POP
63205: POP
// if enchidnas then
63206: LD_VAR 0 4
63210: IFFALSE 63277
// for i = 1 to enchidnas do
63212: LD_ADDR_VAR 0 11
63216: PUSH
63217: DOUBLE
63218: LD_INT 1
63220: DEC
63221: ST_TO_ADDR
63222: LD_VAR 0 4
63226: PUSH
63227: FOR_TO
63228: IFFALSE 63275
// begin hc_class = 13 ;
63230: LD_ADDR_OWVAR 28
63234: PUSH
63235: LD_INT 13
63237: ST_TO_ADDR
// hc_gallery =  ;
63238: LD_ADDR_OWVAR 33
63242: PUSH
63243: LD_STRING 
63245: ST_TO_ADDR
// animal := CreateHuman ;
63246: LD_ADDR_VAR 0 12
63250: PUSH
63251: CALL_OW 44
63255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63256: LD_VAR 0 12
63260: PPUSH
63261: LD_VAR 0 8
63265: PPUSH
63266: LD_INT 0
63268: PPUSH
63269: CALL 65037 0 3
// end ;
63273: GO 63227
63275: POP
63276: POP
// if fishes then
63277: LD_VAR 0 7
63281: IFFALSE 63348
// for i = 1 to fishes do
63283: LD_ADDR_VAR 0 11
63287: PUSH
63288: DOUBLE
63289: LD_INT 1
63291: DEC
63292: ST_TO_ADDR
63293: LD_VAR 0 7
63297: PUSH
63298: FOR_TO
63299: IFFALSE 63346
// begin hc_class = 20 ;
63301: LD_ADDR_OWVAR 28
63305: PUSH
63306: LD_INT 20
63308: ST_TO_ADDR
// hc_gallery =  ;
63309: LD_ADDR_OWVAR 33
63313: PUSH
63314: LD_STRING 
63316: ST_TO_ADDR
// animal := CreateHuman ;
63317: LD_ADDR_VAR 0 12
63321: PUSH
63322: CALL_OW 44
63326: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63327: LD_VAR 0 12
63331: PPUSH
63332: LD_VAR 0 9
63336: PPUSH
63337: LD_INT 0
63339: PPUSH
63340: CALL 65037 0 3
// end ;
63344: GO 63298
63346: POP
63347: POP
// end ;
63348: LD_VAR 0 10
63352: RET
// export function WantHeal ( sci , unit ) ; begin
63353: LD_INT 0
63355: PPUSH
// if GetTaskList ( sci ) > 0 then
63356: LD_VAR 0 1
63360: PPUSH
63361: CALL_OW 437
63365: PUSH
63366: LD_INT 0
63368: GREATER
63369: IFFALSE 63439
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63371: LD_VAR 0 1
63375: PPUSH
63376: CALL_OW 437
63380: PUSH
63381: LD_INT 1
63383: ARRAY
63384: PUSH
63385: LD_INT 1
63387: ARRAY
63388: PUSH
63389: LD_STRING l
63391: EQUAL
63392: PUSH
63393: LD_VAR 0 1
63397: PPUSH
63398: CALL_OW 437
63402: PUSH
63403: LD_INT 1
63405: ARRAY
63406: PUSH
63407: LD_INT 4
63409: ARRAY
63410: PUSH
63411: LD_VAR 0 2
63415: EQUAL
63416: AND
63417: IFFALSE 63429
// result := true else
63419: LD_ADDR_VAR 0 3
63423: PUSH
63424: LD_INT 1
63426: ST_TO_ADDR
63427: GO 63437
// result := false ;
63429: LD_ADDR_VAR 0 3
63433: PUSH
63434: LD_INT 0
63436: ST_TO_ADDR
// end else
63437: GO 63447
// result := false ;
63439: LD_ADDR_VAR 0 3
63443: PUSH
63444: LD_INT 0
63446: ST_TO_ADDR
// end ;
63447: LD_VAR 0 3
63451: RET
// export function HealTarget ( sci ) ; begin
63452: LD_INT 0
63454: PPUSH
// if not sci then
63455: LD_VAR 0 1
63459: NOT
63460: IFFALSE 63464
// exit ;
63462: GO 63529
// result := 0 ;
63464: LD_ADDR_VAR 0 2
63468: PUSH
63469: LD_INT 0
63471: ST_TO_ADDR
// if GetTaskList ( sci ) then
63472: LD_VAR 0 1
63476: PPUSH
63477: CALL_OW 437
63481: IFFALSE 63529
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63483: LD_VAR 0 1
63487: PPUSH
63488: CALL_OW 437
63492: PUSH
63493: LD_INT 1
63495: ARRAY
63496: PUSH
63497: LD_INT 1
63499: ARRAY
63500: PUSH
63501: LD_STRING l
63503: EQUAL
63504: IFFALSE 63529
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63506: LD_ADDR_VAR 0 2
63510: PUSH
63511: LD_VAR 0 1
63515: PPUSH
63516: CALL_OW 437
63520: PUSH
63521: LD_INT 1
63523: ARRAY
63524: PUSH
63525: LD_INT 4
63527: ARRAY
63528: ST_TO_ADDR
// end ;
63529: LD_VAR 0 2
63533: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63534: LD_INT 0
63536: PPUSH
63537: PPUSH
63538: PPUSH
63539: PPUSH
// if not base_units then
63540: LD_VAR 0 1
63544: NOT
63545: IFFALSE 63549
// exit ;
63547: GO 63636
// result := false ;
63549: LD_ADDR_VAR 0 2
63553: PUSH
63554: LD_INT 0
63556: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63557: LD_ADDR_VAR 0 5
63561: PUSH
63562: LD_VAR 0 1
63566: PPUSH
63567: LD_INT 21
63569: PUSH
63570: LD_INT 3
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PPUSH
63577: CALL_OW 72
63581: ST_TO_ADDR
// if not tmp then
63582: LD_VAR 0 5
63586: NOT
63587: IFFALSE 63591
// exit ;
63589: GO 63636
// for i in tmp do
63591: LD_ADDR_VAR 0 3
63595: PUSH
63596: LD_VAR 0 5
63600: PUSH
63601: FOR_IN
63602: IFFALSE 63634
// begin result := EnemyInRange ( i , 22 ) ;
63604: LD_ADDR_VAR 0 2
63608: PUSH
63609: LD_VAR 0 3
63613: PPUSH
63614: LD_INT 22
63616: PPUSH
63617: CALL 61872 0 2
63621: ST_TO_ADDR
// if result then
63622: LD_VAR 0 2
63626: IFFALSE 63632
// exit ;
63628: POP
63629: POP
63630: GO 63636
// end ;
63632: GO 63601
63634: POP
63635: POP
// end ;
63636: LD_VAR 0 2
63640: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63641: LD_INT 0
63643: PPUSH
63644: PPUSH
// if not units then
63645: LD_VAR 0 1
63649: NOT
63650: IFFALSE 63654
// exit ;
63652: GO 63724
// result := [ ] ;
63654: LD_ADDR_VAR 0 3
63658: PUSH
63659: EMPTY
63660: ST_TO_ADDR
// for i in units do
63661: LD_ADDR_VAR 0 4
63665: PUSH
63666: LD_VAR 0 1
63670: PUSH
63671: FOR_IN
63672: IFFALSE 63722
// if GetTag ( i ) = tag then
63674: LD_VAR 0 4
63678: PPUSH
63679: CALL_OW 110
63683: PUSH
63684: LD_VAR 0 2
63688: EQUAL
63689: IFFALSE 63720
// result := Replace ( result , result + 1 , i ) ;
63691: LD_ADDR_VAR 0 3
63695: PUSH
63696: LD_VAR 0 3
63700: PPUSH
63701: LD_VAR 0 3
63705: PUSH
63706: LD_INT 1
63708: PLUS
63709: PPUSH
63710: LD_VAR 0 4
63714: PPUSH
63715: CALL_OW 1
63719: ST_TO_ADDR
63720: GO 63671
63722: POP
63723: POP
// end ;
63724: LD_VAR 0 3
63728: RET
// export function IsDriver ( un ) ; begin
63729: LD_INT 0
63731: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63732: LD_ADDR_VAR 0 2
63736: PUSH
63737: LD_VAR 0 1
63741: PUSH
63742: LD_INT 55
63744: PUSH
63745: EMPTY
63746: LIST
63747: PPUSH
63748: CALL_OW 69
63752: IN
63753: ST_TO_ADDR
// end ;
63754: LD_VAR 0 2
63758: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63759: LD_INT 0
63761: PPUSH
63762: PPUSH
// list := [ ] ;
63763: LD_ADDR_VAR 0 5
63767: PUSH
63768: EMPTY
63769: ST_TO_ADDR
// case d of 0 :
63770: LD_VAR 0 3
63774: PUSH
63775: LD_INT 0
63777: DOUBLE
63778: EQUAL
63779: IFTRUE 63783
63781: GO 63916
63783: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63784: LD_ADDR_VAR 0 5
63788: PUSH
63789: LD_VAR 0 1
63793: PUSH
63794: LD_INT 4
63796: MINUS
63797: PUSH
63798: LD_VAR 0 2
63802: PUSH
63803: LD_INT 4
63805: MINUS
63806: PUSH
63807: LD_INT 2
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: LIST
63814: PUSH
63815: LD_VAR 0 1
63819: PUSH
63820: LD_INT 3
63822: MINUS
63823: PUSH
63824: LD_VAR 0 2
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: LIST
63836: PUSH
63837: LD_VAR 0 1
63841: PUSH
63842: LD_INT 4
63844: PLUS
63845: PUSH
63846: LD_VAR 0 2
63850: PUSH
63851: LD_INT 4
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: PUSH
63859: LD_VAR 0 1
63863: PUSH
63864: LD_INT 3
63866: PLUS
63867: PUSH
63868: LD_VAR 0 2
63872: PUSH
63873: LD_INT 3
63875: PLUS
63876: PUSH
63877: LD_INT 5
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: PUSH
63885: LD_VAR 0 1
63889: PUSH
63890: LD_VAR 0 2
63894: PUSH
63895: LD_INT 4
63897: PLUS
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: LIST
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: ST_TO_ADDR
// end ; 1 :
63914: GO 64614
63916: LD_INT 1
63918: DOUBLE
63919: EQUAL
63920: IFTRUE 63924
63922: GO 64057
63924: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63925: LD_ADDR_VAR 0 5
63929: PUSH
63930: LD_VAR 0 1
63934: PUSH
63935: LD_VAR 0 2
63939: PUSH
63940: LD_INT 4
63942: MINUS
63943: PUSH
63944: LD_INT 3
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: LIST
63951: PUSH
63952: LD_VAR 0 1
63956: PUSH
63957: LD_INT 3
63959: MINUS
63960: PUSH
63961: LD_VAR 0 2
63965: PUSH
63966: LD_INT 3
63968: MINUS
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: LIST
63977: PUSH
63978: LD_VAR 0 1
63982: PUSH
63983: LD_INT 4
63985: MINUS
63986: PUSH
63987: LD_VAR 0 2
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: LIST
63999: PUSH
64000: LD_VAR 0 1
64004: PUSH
64005: LD_VAR 0 2
64009: PUSH
64010: LD_INT 3
64012: PLUS
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: LIST
64021: PUSH
64022: LD_VAR 0 1
64026: PUSH
64027: LD_INT 4
64029: PLUS
64030: PUSH
64031: LD_VAR 0 2
64035: PUSH
64036: LD_INT 4
64038: PLUS
64039: PUSH
64040: LD_INT 5
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: ST_TO_ADDR
// end ; 2 :
64055: GO 64614
64057: LD_INT 2
64059: DOUBLE
64060: EQUAL
64061: IFTRUE 64065
64063: GO 64194
64065: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64066: LD_ADDR_VAR 0 5
64070: PUSH
64071: LD_VAR 0 1
64075: PUSH
64076: LD_VAR 0 2
64080: PUSH
64081: LD_INT 3
64083: MINUS
64084: PUSH
64085: LD_INT 3
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: PUSH
64093: LD_VAR 0 1
64097: PUSH
64098: LD_INT 4
64100: PLUS
64101: PUSH
64102: LD_VAR 0 2
64106: PUSH
64107: LD_INT 4
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: PUSH
64115: LD_VAR 0 1
64119: PUSH
64120: LD_VAR 0 2
64124: PUSH
64125: LD_INT 4
64127: PLUS
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: PUSH
64137: LD_VAR 0 1
64141: PUSH
64142: LD_INT 3
64144: MINUS
64145: PUSH
64146: LD_VAR 0 2
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: PUSH
64159: LD_VAR 0 1
64163: PUSH
64164: LD_INT 4
64166: MINUS
64167: PUSH
64168: LD_VAR 0 2
64172: PUSH
64173: LD_INT 4
64175: MINUS
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: LIST
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: ST_TO_ADDR
// end ; 3 :
64192: GO 64614
64194: LD_INT 3
64196: DOUBLE
64197: EQUAL
64198: IFTRUE 64202
64200: GO 64335
64202: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64203: LD_ADDR_VAR 0 5
64207: PUSH
64208: LD_VAR 0 1
64212: PUSH
64213: LD_INT 3
64215: PLUS
64216: PUSH
64217: LD_VAR 0 2
64221: PUSH
64222: LD_INT 4
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: LIST
64229: PUSH
64230: LD_VAR 0 1
64234: PUSH
64235: LD_INT 4
64237: PLUS
64238: PUSH
64239: LD_VAR 0 2
64243: PUSH
64244: LD_INT 4
64246: PLUS
64247: PUSH
64248: LD_INT 5
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: LIST
64255: PUSH
64256: LD_VAR 0 1
64260: PUSH
64261: LD_INT 4
64263: MINUS
64264: PUSH
64265: LD_VAR 0 2
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: LIST
64277: PUSH
64278: LD_VAR 0 1
64282: PUSH
64283: LD_VAR 0 2
64287: PUSH
64288: LD_INT 4
64290: MINUS
64291: PUSH
64292: LD_INT 3
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: LIST
64299: PUSH
64300: LD_VAR 0 1
64304: PUSH
64305: LD_INT 3
64307: MINUS
64308: PUSH
64309: LD_VAR 0 2
64313: PUSH
64314: LD_INT 3
64316: MINUS
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: LIST
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: ST_TO_ADDR
// end ; 4 :
64333: GO 64614
64335: LD_INT 4
64337: DOUBLE
64338: EQUAL
64339: IFTRUE 64343
64341: GO 64476
64343: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64344: LD_ADDR_VAR 0 5
64348: PUSH
64349: LD_VAR 0 1
64353: PUSH
64354: LD_VAR 0 2
64358: PUSH
64359: LD_INT 4
64361: PLUS
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: PUSH
64371: LD_VAR 0 1
64375: PUSH
64376: LD_INT 3
64378: PLUS
64379: PUSH
64380: LD_VAR 0 2
64384: PUSH
64385: LD_INT 3
64387: PLUS
64388: PUSH
64389: LD_INT 5
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: LIST
64396: PUSH
64397: LD_VAR 0 1
64401: PUSH
64402: LD_INT 4
64404: PLUS
64405: PUSH
64406: LD_VAR 0 2
64410: PUSH
64411: LD_INT 4
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: PUSH
64419: LD_VAR 0 1
64423: PUSH
64424: LD_VAR 0 2
64428: PUSH
64429: LD_INT 3
64431: MINUS
64432: PUSH
64433: LD_INT 3
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: LIST
64440: PUSH
64441: LD_VAR 0 1
64445: PUSH
64446: LD_INT 4
64448: MINUS
64449: PUSH
64450: LD_VAR 0 2
64454: PUSH
64455: LD_INT 4
64457: MINUS
64458: PUSH
64459: LD_INT 2
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: ST_TO_ADDR
// end ; 5 :
64474: GO 64614
64476: LD_INT 5
64478: DOUBLE
64479: EQUAL
64480: IFTRUE 64484
64482: GO 64613
64484: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64485: LD_ADDR_VAR 0 5
64489: PUSH
64490: LD_VAR 0 1
64494: PUSH
64495: LD_INT 4
64497: MINUS
64498: PUSH
64499: LD_VAR 0 2
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: LIST
64511: PUSH
64512: LD_VAR 0 1
64516: PUSH
64517: LD_VAR 0 2
64521: PUSH
64522: LD_INT 4
64524: MINUS
64525: PUSH
64526: LD_INT 3
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: PUSH
64534: LD_VAR 0 1
64538: PUSH
64539: LD_INT 4
64541: PLUS
64542: PUSH
64543: LD_VAR 0 2
64547: PUSH
64548: LD_INT 4
64550: PLUS
64551: PUSH
64552: LD_INT 5
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: PUSH
64560: LD_VAR 0 1
64564: PUSH
64565: LD_INT 3
64567: PLUS
64568: PUSH
64569: LD_VAR 0 2
64573: PUSH
64574: LD_INT 4
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: PUSH
64582: LD_VAR 0 1
64586: PUSH
64587: LD_VAR 0 2
64591: PUSH
64592: LD_INT 3
64594: PLUS
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: LIST
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: ST_TO_ADDR
// end ; end ;
64611: GO 64614
64613: POP
// result := list ;
64614: LD_ADDR_VAR 0 4
64618: PUSH
64619: LD_VAR 0 5
64623: ST_TO_ADDR
// end ;
64624: LD_VAR 0 4
64628: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64629: LD_INT 0
64631: PPUSH
64632: PPUSH
64633: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64634: LD_VAR 0 1
64638: NOT
64639: PUSH
64640: LD_VAR 0 2
64644: PUSH
64645: LD_INT 1
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: LD_INT 3
64653: PUSH
64654: LD_INT 4
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: IN
64663: NOT
64664: OR
64665: IFFALSE 64669
// exit ;
64667: GO 64761
// tmp := [ ] ;
64669: LD_ADDR_VAR 0 5
64673: PUSH
64674: EMPTY
64675: ST_TO_ADDR
// for i in units do
64676: LD_ADDR_VAR 0 4
64680: PUSH
64681: LD_VAR 0 1
64685: PUSH
64686: FOR_IN
64687: IFFALSE 64730
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64689: LD_ADDR_VAR 0 5
64693: PUSH
64694: LD_VAR 0 5
64698: PPUSH
64699: LD_VAR 0 5
64703: PUSH
64704: LD_INT 1
64706: PLUS
64707: PPUSH
64708: LD_VAR 0 4
64712: PPUSH
64713: LD_VAR 0 2
64717: PPUSH
64718: CALL_OW 259
64722: PPUSH
64723: CALL_OW 2
64727: ST_TO_ADDR
64728: GO 64686
64730: POP
64731: POP
// if not tmp then
64732: LD_VAR 0 5
64736: NOT
64737: IFFALSE 64741
// exit ;
64739: GO 64761
// result := SortListByListDesc ( units , tmp ) ;
64741: LD_ADDR_VAR 0 3
64745: PUSH
64746: LD_VAR 0 1
64750: PPUSH
64751: LD_VAR 0 5
64755: PPUSH
64756: CALL_OW 77
64760: ST_TO_ADDR
// end ;
64761: LD_VAR 0 3
64765: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64766: LD_INT 0
64768: PPUSH
64769: PPUSH
64770: PPUSH
// result := false ;
64771: LD_ADDR_VAR 0 3
64775: PUSH
64776: LD_INT 0
64778: ST_TO_ADDR
// x := GetX ( building ) ;
64779: LD_ADDR_VAR 0 4
64783: PUSH
64784: LD_VAR 0 2
64788: PPUSH
64789: CALL_OW 250
64793: ST_TO_ADDR
// y := GetY ( building ) ;
64794: LD_ADDR_VAR 0 5
64798: PUSH
64799: LD_VAR 0 2
64803: PPUSH
64804: CALL_OW 251
64808: ST_TO_ADDR
// if not building or not x or not y then
64809: LD_VAR 0 2
64813: NOT
64814: PUSH
64815: LD_VAR 0 4
64819: NOT
64820: OR
64821: PUSH
64822: LD_VAR 0 5
64826: NOT
64827: OR
64828: IFFALSE 64832
// exit ;
64830: GO 64924
// if GetTaskList ( unit ) then
64832: LD_VAR 0 1
64836: PPUSH
64837: CALL_OW 437
64841: IFFALSE 64924
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64843: LD_STRING e
64845: PUSH
64846: LD_VAR 0 1
64850: PPUSH
64851: CALL_OW 437
64855: PUSH
64856: LD_INT 1
64858: ARRAY
64859: PUSH
64860: LD_INT 1
64862: ARRAY
64863: EQUAL
64864: PUSH
64865: LD_VAR 0 4
64869: PUSH
64870: LD_VAR 0 1
64874: PPUSH
64875: CALL_OW 437
64879: PUSH
64880: LD_INT 1
64882: ARRAY
64883: PUSH
64884: LD_INT 2
64886: ARRAY
64887: EQUAL
64888: AND
64889: PUSH
64890: LD_VAR 0 5
64894: PUSH
64895: LD_VAR 0 1
64899: PPUSH
64900: CALL_OW 437
64904: PUSH
64905: LD_INT 1
64907: ARRAY
64908: PUSH
64909: LD_INT 3
64911: ARRAY
64912: EQUAL
64913: AND
64914: IFFALSE 64924
// result := true end ;
64916: LD_ADDR_VAR 0 3
64920: PUSH
64921: LD_INT 1
64923: ST_TO_ADDR
// end ;
64924: LD_VAR 0 3
64928: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64929: LD_INT 0
64931: PPUSH
// result := false ;
64932: LD_ADDR_VAR 0 4
64936: PUSH
64937: LD_INT 0
64939: ST_TO_ADDR
// if GetTaskList ( unit ) then
64940: LD_VAR 0 1
64944: PPUSH
64945: CALL_OW 437
64949: IFFALSE 65032
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64951: LD_STRING M
64953: PUSH
64954: LD_VAR 0 1
64958: PPUSH
64959: CALL_OW 437
64963: PUSH
64964: LD_INT 1
64966: ARRAY
64967: PUSH
64968: LD_INT 1
64970: ARRAY
64971: EQUAL
64972: PUSH
64973: LD_VAR 0 2
64977: PUSH
64978: LD_VAR 0 1
64982: PPUSH
64983: CALL_OW 437
64987: PUSH
64988: LD_INT 1
64990: ARRAY
64991: PUSH
64992: LD_INT 2
64994: ARRAY
64995: EQUAL
64996: AND
64997: PUSH
64998: LD_VAR 0 3
65002: PUSH
65003: LD_VAR 0 1
65007: PPUSH
65008: CALL_OW 437
65012: PUSH
65013: LD_INT 1
65015: ARRAY
65016: PUSH
65017: LD_INT 3
65019: ARRAY
65020: EQUAL
65021: AND
65022: IFFALSE 65032
// result := true ;
65024: LD_ADDR_VAR 0 4
65028: PUSH
65029: LD_INT 1
65031: ST_TO_ADDR
// end ; end ;
65032: LD_VAR 0 4
65036: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65037: LD_INT 0
65039: PPUSH
65040: PPUSH
65041: PPUSH
65042: PPUSH
// if not unit or not area then
65043: LD_VAR 0 1
65047: NOT
65048: PUSH
65049: LD_VAR 0 2
65053: NOT
65054: OR
65055: IFFALSE 65059
// exit ;
65057: GO 65223
// tmp := AreaToList ( area , i ) ;
65059: LD_ADDR_VAR 0 6
65063: PUSH
65064: LD_VAR 0 2
65068: PPUSH
65069: LD_VAR 0 5
65073: PPUSH
65074: CALL_OW 517
65078: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65079: LD_ADDR_VAR 0 5
65083: PUSH
65084: DOUBLE
65085: LD_INT 1
65087: DEC
65088: ST_TO_ADDR
65089: LD_VAR 0 6
65093: PUSH
65094: LD_INT 1
65096: ARRAY
65097: PUSH
65098: FOR_TO
65099: IFFALSE 65221
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65101: LD_ADDR_VAR 0 7
65105: PUSH
65106: LD_VAR 0 6
65110: PUSH
65111: LD_INT 1
65113: ARRAY
65114: PUSH
65115: LD_VAR 0 5
65119: ARRAY
65120: PUSH
65121: LD_VAR 0 6
65125: PUSH
65126: LD_INT 2
65128: ARRAY
65129: PUSH
65130: LD_VAR 0 5
65134: ARRAY
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65140: LD_VAR 0 7
65144: PUSH
65145: LD_INT 1
65147: ARRAY
65148: PPUSH
65149: LD_VAR 0 7
65153: PUSH
65154: LD_INT 2
65156: ARRAY
65157: PPUSH
65158: CALL_OW 428
65162: PUSH
65163: LD_INT 0
65165: EQUAL
65166: IFFALSE 65219
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65168: LD_VAR 0 1
65172: PPUSH
65173: LD_VAR 0 7
65177: PUSH
65178: LD_INT 1
65180: ARRAY
65181: PPUSH
65182: LD_VAR 0 7
65186: PUSH
65187: LD_INT 2
65189: ARRAY
65190: PPUSH
65191: LD_VAR 0 3
65195: PPUSH
65196: CALL_OW 48
// result := IsPlaced ( unit ) ;
65200: LD_ADDR_VAR 0 4
65204: PUSH
65205: LD_VAR 0 1
65209: PPUSH
65210: CALL_OW 305
65214: ST_TO_ADDR
// exit ;
65215: POP
65216: POP
65217: GO 65223
// end ; end ;
65219: GO 65098
65221: POP
65222: POP
// end ;
65223: LD_VAR 0 4
65227: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65228: LD_INT 0
65230: PPUSH
65231: PPUSH
65232: PPUSH
// if not side or side > 8 then
65233: LD_VAR 0 1
65237: NOT
65238: PUSH
65239: LD_VAR 0 1
65243: PUSH
65244: LD_INT 8
65246: GREATER
65247: OR
65248: IFFALSE 65252
// exit ;
65250: GO 65439
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65252: LD_ADDR_VAR 0 4
65256: PUSH
65257: LD_INT 22
65259: PUSH
65260: LD_VAR 0 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 21
65271: PUSH
65272: LD_INT 3
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PPUSH
65283: CALL_OW 69
65287: ST_TO_ADDR
// if not tmp then
65288: LD_VAR 0 4
65292: NOT
65293: IFFALSE 65297
// exit ;
65295: GO 65439
// enable_addtolog := true ;
65297: LD_ADDR_OWVAR 81
65301: PUSH
65302: LD_INT 1
65304: ST_TO_ADDR
// AddToLog ( [ ) ;
65305: LD_STRING [
65307: PPUSH
65308: CALL_OW 561
// for i in tmp do
65312: LD_ADDR_VAR 0 3
65316: PUSH
65317: LD_VAR 0 4
65321: PUSH
65322: FOR_IN
65323: IFFALSE 65430
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65325: LD_STRING [
65327: PUSH
65328: LD_VAR 0 3
65332: PPUSH
65333: CALL_OW 266
65337: STR
65338: PUSH
65339: LD_STRING , 
65341: STR
65342: PUSH
65343: LD_VAR 0 3
65347: PPUSH
65348: CALL_OW 250
65352: STR
65353: PUSH
65354: LD_STRING , 
65356: STR
65357: PUSH
65358: LD_VAR 0 3
65362: PPUSH
65363: CALL_OW 251
65367: STR
65368: PUSH
65369: LD_STRING , 
65371: STR
65372: PUSH
65373: LD_VAR 0 3
65377: PPUSH
65378: CALL_OW 254
65382: STR
65383: PUSH
65384: LD_STRING , 
65386: STR
65387: PUSH
65388: LD_VAR 0 3
65392: PPUSH
65393: LD_INT 1
65395: PPUSH
65396: CALL_OW 268
65400: STR
65401: PUSH
65402: LD_STRING , 
65404: STR
65405: PUSH
65406: LD_VAR 0 3
65410: PPUSH
65411: LD_INT 2
65413: PPUSH
65414: CALL_OW 268
65418: STR
65419: PUSH
65420: LD_STRING ],
65422: STR
65423: PPUSH
65424: CALL_OW 561
// end ;
65428: GO 65322
65430: POP
65431: POP
// AddToLog ( ]; ) ;
65432: LD_STRING ];
65434: PPUSH
65435: CALL_OW 561
// end ;
65439: LD_VAR 0 2
65443: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65444: LD_INT 0
65446: PPUSH
65447: PPUSH
65448: PPUSH
65449: PPUSH
65450: PPUSH
// if not area or not rate or not max then
65451: LD_VAR 0 1
65455: NOT
65456: PUSH
65457: LD_VAR 0 2
65461: NOT
65462: OR
65463: PUSH
65464: LD_VAR 0 4
65468: NOT
65469: OR
65470: IFFALSE 65474
// exit ;
65472: GO 65666
// while 1 do
65474: LD_INT 1
65476: IFFALSE 65666
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65478: LD_ADDR_VAR 0 9
65482: PUSH
65483: LD_VAR 0 1
65487: PPUSH
65488: LD_INT 1
65490: PPUSH
65491: CALL_OW 287
65495: PUSH
65496: LD_INT 10
65498: MUL
65499: ST_TO_ADDR
// r := rate / 10 ;
65500: LD_ADDR_VAR 0 7
65504: PUSH
65505: LD_VAR 0 2
65509: PUSH
65510: LD_INT 10
65512: DIVREAL
65513: ST_TO_ADDR
// time := 1 1$00 ;
65514: LD_ADDR_VAR 0 8
65518: PUSH
65519: LD_INT 2100
65521: ST_TO_ADDR
// if amount < min then
65522: LD_VAR 0 9
65526: PUSH
65527: LD_VAR 0 3
65531: LESS
65532: IFFALSE 65550
// r := r * 2 else
65534: LD_ADDR_VAR 0 7
65538: PUSH
65539: LD_VAR 0 7
65543: PUSH
65544: LD_INT 2
65546: MUL
65547: ST_TO_ADDR
65548: GO 65576
// if amount > max then
65550: LD_VAR 0 9
65554: PUSH
65555: LD_VAR 0 4
65559: GREATER
65560: IFFALSE 65576
// r := r / 2 ;
65562: LD_ADDR_VAR 0 7
65566: PUSH
65567: LD_VAR 0 7
65571: PUSH
65572: LD_INT 2
65574: DIVREAL
65575: ST_TO_ADDR
// time := time / r ;
65576: LD_ADDR_VAR 0 8
65580: PUSH
65581: LD_VAR 0 8
65585: PUSH
65586: LD_VAR 0 7
65590: DIVREAL
65591: ST_TO_ADDR
// if time < 0 then
65592: LD_VAR 0 8
65596: PUSH
65597: LD_INT 0
65599: LESS
65600: IFFALSE 65617
// time := time * - 1 ;
65602: LD_ADDR_VAR 0 8
65606: PUSH
65607: LD_VAR 0 8
65611: PUSH
65612: LD_INT 1
65614: NEG
65615: MUL
65616: ST_TO_ADDR
// wait ( time ) ;
65617: LD_VAR 0 8
65621: PPUSH
65622: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65626: LD_INT 35
65628: PPUSH
65629: LD_INT 875
65631: PPUSH
65632: CALL_OW 12
65636: PPUSH
65637: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65641: LD_INT 1
65643: PPUSH
65644: LD_INT 5
65646: PPUSH
65647: CALL_OW 12
65651: PPUSH
65652: LD_VAR 0 1
65656: PPUSH
65657: LD_INT 1
65659: PPUSH
65660: CALL_OW 55
// end ;
65664: GO 65474
// end ;
65666: LD_VAR 0 5
65670: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65671: LD_INT 0
65673: PPUSH
65674: PPUSH
65675: PPUSH
65676: PPUSH
65677: PPUSH
65678: PPUSH
65679: PPUSH
65680: PPUSH
// if not turrets or not factories then
65681: LD_VAR 0 1
65685: NOT
65686: PUSH
65687: LD_VAR 0 2
65691: NOT
65692: OR
65693: IFFALSE 65697
// exit ;
65695: GO 66004
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65697: LD_ADDR_VAR 0 10
65701: PUSH
65702: LD_INT 5
65704: PUSH
65705: LD_INT 6
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: LD_INT 4
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 3
65724: PUSH
65725: LD_INT 5
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 24
65739: PUSH
65740: LD_INT 25
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 23
65749: PUSH
65750: LD_INT 27
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 42
65763: PUSH
65764: LD_INT 43
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 44
65773: PUSH
65774: LD_INT 46
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 45
65783: PUSH
65784: LD_INT 47
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: LIST
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: ST_TO_ADDR
// result := [ ] ;
65801: LD_ADDR_VAR 0 3
65805: PUSH
65806: EMPTY
65807: ST_TO_ADDR
// for i in turrets do
65808: LD_ADDR_VAR 0 4
65812: PUSH
65813: LD_VAR 0 1
65817: PUSH
65818: FOR_IN
65819: IFFALSE 66002
// begin nat := GetNation ( i ) ;
65821: LD_ADDR_VAR 0 7
65825: PUSH
65826: LD_VAR 0 4
65830: PPUSH
65831: CALL_OW 248
65835: ST_TO_ADDR
// weapon := 0 ;
65836: LD_ADDR_VAR 0 8
65840: PUSH
65841: LD_INT 0
65843: ST_TO_ADDR
// if not nat then
65844: LD_VAR 0 7
65848: NOT
65849: IFFALSE 65853
// continue ;
65851: GO 65818
// for j in list [ nat ] do
65853: LD_ADDR_VAR 0 5
65857: PUSH
65858: LD_VAR 0 10
65862: PUSH
65863: LD_VAR 0 7
65867: ARRAY
65868: PUSH
65869: FOR_IN
65870: IFFALSE 65911
// if GetBWeapon ( i ) = j [ 1 ] then
65872: LD_VAR 0 4
65876: PPUSH
65877: CALL_OW 269
65881: PUSH
65882: LD_VAR 0 5
65886: PUSH
65887: LD_INT 1
65889: ARRAY
65890: EQUAL
65891: IFFALSE 65909
// begin weapon := j [ 2 ] ;
65893: LD_ADDR_VAR 0 8
65897: PUSH
65898: LD_VAR 0 5
65902: PUSH
65903: LD_INT 2
65905: ARRAY
65906: ST_TO_ADDR
// break ;
65907: GO 65911
// end ;
65909: GO 65869
65911: POP
65912: POP
// if not weapon then
65913: LD_VAR 0 8
65917: NOT
65918: IFFALSE 65922
// continue ;
65920: GO 65818
// for k in factories do
65922: LD_ADDR_VAR 0 6
65926: PUSH
65927: LD_VAR 0 2
65931: PUSH
65932: FOR_IN
65933: IFFALSE 65998
// begin weapons := AvailableWeaponList ( k ) ;
65935: LD_ADDR_VAR 0 9
65939: PUSH
65940: LD_VAR 0 6
65944: PPUSH
65945: CALL_OW 478
65949: ST_TO_ADDR
// if not weapons then
65950: LD_VAR 0 9
65954: NOT
65955: IFFALSE 65959
// continue ;
65957: GO 65932
// if weapon in weapons then
65959: LD_VAR 0 8
65963: PUSH
65964: LD_VAR 0 9
65968: IN
65969: IFFALSE 65996
// begin result := [ i , weapon ] ;
65971: LD_ADDR_VAR 0 3
65975: PUSH
65976: LD_VAR 0 4
65980: PUSH
65981: LD_VAR 0 8
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: ST_TO_ADDR
// exit ;
65990: POP
65991: POP
65992: POP
65993: POP
65994: GO 66004
// end ; end ;
65996: GO 65932
65998: POP
65999: POP
// end ;
66000: GO 65818
66002: POP
66003: POP
// end ;
66004: LD_VAR 0 3
66008: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66009: LD_INT 0
66011: PPUSH
// if not side or side > 8 then
66012: LD_VAR 0 3
66016: NOT
66017: PUSH
66018: LD_VAR 0 3
66022: PUSH
66023: LD_INT 8
66025: GREATER
66026: OR
66027: IFFALSE 66031
// exit ;
66029: GO 66090
// if not range then
66031: LD_VAR 0 4
66035: NOT
66036: IFFALSE 66047
// range := - 12 ;
66038: LD_ADDR_VAR 0 4
66042: PUSH
66043: LD_INT 12
66045: NEG
66046: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66047: LD_VAR 0 1
66051: PPUSH
66052: LD_VAR 0 2
66056: PPUSH
66057: LD_VAR 0 3
66061: PPUSH
66062: LD_VAR 0 4
66066: PPUSH
66067: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66071: LD_VAR 0 1
66075: PPUSH
66076: LD_VAR 0 2
66080: PPUSH
66081: LD_VAR 0 3
66085: PPUSH
66086: CALL_OW 331
// end ;
66090: LD_VAR 0 5
66094: RET
// export function Video ( mode ) ; begin
66095: LD_INT 0
66097: PPUSH
// ingame_video = mode ;
66098: LD_ADDR_OWVAR 52
66102: PUSH
66103: LD_VAR 0 1
66107: ST_TO_ADDR
// interface_hidden = mode ;
66108: LD_ADDR_OWVAR 54
66112: PUSH
66113: LD_VAR 0 1
66117: ST_TO_ADDR
// end ;
66118: LD_VAR 0 2
66122: RET
// export function Join ( array , element ) ; begin
66123: LD_INT 0
66125: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66126: LD_ADDR_VAR 0 3
66130: PUSH
66131: LD_VAR 0 1
66135: PPUSH
66136: LD_VAR 0 1
66140: PUSH
66141: LD_INT 1
66143: PLUS
66144: PPUSH
66145: LD_VAR 0 2
66149: PPUSH
66150: CALL_OW 1
66154: ST_TO_ADDR
// end ;
66155: LD_VAR 0 3
66159: RET
// export function JoinUnion ( array , element ) ; begin
66160: LD_INT 0
66162: PPUSH
// result := array union element ;
66163: LD_ADDR_VAR 0 3
66167: PUSH
66168: LD_VAR 0 1
66172: PUSH
66173: LD_VAR 0 2
66177: UNION
66178: ST_TO_ADDR
// end ;
66179: LD_VAR 0 3
66183: RET
// export function GetBehemoths ( side ) ; begin
66184: LD_INT 0
66186: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66187: LD_ADDR_VAR 0 2
66191: PUSH
66192: LD_INT 22
66194: PUSH
66195: LD_VAR 0 1
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 31
66206: PUSH
66207: LD_INT 25
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PPUSH
66218: CALL_OW 69
66222: ST_TO_ADDR
// end ;
66223: LD_VAR 0 2
66227: RET
// export function Shuffle ( array ) ; var i , index ; begin
66228: LD_INT 0
66230: PPUSH
66231: PPUSH
66232: PPUSH
// result := [ ] ;
66233: LD_ADDR_VAR 0 2
66237: PUSH
66238: EMPTY
66239: ST_TO_ADDR
// if not array then
66240: LD_VAR 0 1
66244: NOT
66245: IFFALSE 66249
// exit ;
66247: GO 66348
// Randomize ;
66249: CALL_OW 10
// for i = array downto 1 do
66253: LD_ADDR_VAR 0 3
66257: PUSH
66258: DOUBLE
66259: LD_VAR 0 1
66263: INC
66264: ST_TO_ADDR
66265: LD_INT 1
66267: PUSH
66268: FOR_DOWNTO
66269: IFFALSE 66346
// begin index := rand ( 1 , array ) ;
66271: LD_ADDR_VAR 0 4
66275: PUSH
66276: LD_INT 1
66278: PPUSH
66279: LD_VAR 0 1
66283: PPUSH
66284: CALL_OW 12
66288: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66289: LD_ADDR_VAR 0 2
66293: PUSH
66294: LD_VAR 0 2
66298: PPUSH
66299: LD_VAR 0 2
66303: PUSH
66304: LD_INT 1
66306: PLUS
66307: PPUSH
66308: LD_VAR 0 1
66312: PUSH
66313: LD_VAR 0 4
66317: ARRAY
66318: PPUSH
66319: CALL_OW 2
66323: ST_TO_ADDR
// array := Delete ( array , index ) ;
66324: LD_ADDR_VAR 0 1
66328: PUSH
66329: LD_VAR 0 1
66333: PPUSH
66334: LD_VAR 0 4
66338: PPUSH
66339: CALL_OW 3
66343: ST_TO_ADDR
// end ;
66344: GO 66268
66346: POP
66347: POP
// end ;
66348: LD_VAR 0 2
66352: RET
// export function GetBaseMaterials ( base ) ; begin
66353: LD_INT 0
66355: PPUSH
// result := [ 0 , 0 , 0 ] ;
66356: LD_ADDR_VAR 0 2
66360: PUSH
66361: LD_INT 0
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: LIST
66374: ST_TO_ADDR
// if not base then
66375: LD_VAR 0 1
66379: NOT
66380: IFFALSE 66384
// exit ;
66382: GO 66433
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66384: LD_ADDR_VAR 0 2
66388: PUSH
66389: LD_VAR 0 1
66393: PPUSH
66394: LD_INT 1
66396: PPUSH
66397: CALL_OW 275
66401: PUSH
66402: LD_VAR 0 1
66406: PPUSH
66407: LD_INT 2
66409: PPUSH
66410: CALL_OW 275
66414: PUSH
66415: LD_VAR 0 1
66419: PPUSH
66420: LD_INT 3
66422: PPUSH
66423: CALL_OW 275
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: LIST
66432: ST_TO_ADDR
// end ;
66433: LD_VAR 0 2
66437: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66438: LD_INT 0
66440: PPUSH
66441: PPUSH
// result := array ;
66442: LD_ADDR_VAR 0 3
66446: PUSH
66447: LD_VAR 0 1
66451: ST_TO_ADDR
// if size > 0 then
66452: LD_VAR 0 2
66456: PUSH
66457: LD_INT 0
66459: GREATER
66460: IFFALSE 66506
// for i := array downto size do
66462: LD_ADDR_VAR 0 4
66466: PUSH
66467: DOUBLE
66468: LD_VAR 0 1
66472: INC
66473: ST_TO_ADDR
66474: LD_VAR 0 2
66478: PUSH
66479: FOR_DOWNTO
66480: IFFALSE 66504
// result := Delete ( result , result ) ;
66482: LD_ADDR_VAR 0 3
66486: PUSH
66487: LD_VAR 0 3
66491: PPUSH
66492: LD_VAR 0 3
66496: PPUSH
66497: CALL_OW 3
66501: ST_TO_ADDR
66502: GO 66479
66504: POP
66505: POP
// end ;
66506: LD_VAR 0 3
66510: RET
// export function ComExit ( unit ) ; var tmp ; begin
66511: LD_INT 0
66513: PPUSH
66514: PPUSH
// if not IsInUnit ( unit ) then
66515: LD_VAR 0 1
66519: PPUSH
66520: CALL_OW 310
66524: NOT
66525: IFFALSE 66529
// exit ;
66527: GO 66589
// tmp := IsInUnit ( unit ) ;
66529: LD_ADDR_VAR 0 3
66533: PUSH
66534: LD_VAR 0 1
66538: PPUSH
66539: CALL_OW 310
66543: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66544: LD_VAR 0 3
66548: PPUSH
66549: CALL_OW 247
66553: PUSH
66554: LD_INT 2
66556: EQUAL
66557: IFFALSE 66570
// ComExitVehicle ( unit ) else
66559: LD_VAR 0 1
66563: PPUSH
66564: CALL_OW 121
66568: GO 66579
// ComExitBuilding ( unit ) ;
66570: LD_VAR 0 1
66574: PPUSH
66575: CALL_OW 122
// result := tmp ;
66579: LD_ADDR_VAR 0 2
66583: PUSH
66584: LD_VAR 0 3
66588: ST_TO_ADDR
// end ;
66589: LD_VAR 0 2
66593: RET
// export function ComExitAll ( units ) ; var i ; begin
66594: LD_INT 0
66596: PPUSH
66597: PPUSH
// if not units then
66598: LD_VAR 0 1
66602: NOT
66603: IFFALSE 66607
// exit ;
66605: GO 66633
// for i in units do
66607: LD_ADDR_VAR 0 3
66611: PUSH
66612: LD_VAR 0 1
66616: PUSH
66617: FOR_IN
66618: IFFALSE 66631
// ComExit ( i ) ;
66620: LD_VAR 0 3
66624: PPUSH
66625: CALL 66511 0 1
66629: GO 66617
66631: POP
66632: POP
// end ;
66633: LD_VAR 0 2
66637: RET
// export function ResetHc ; begin
66638: LD_INT 0
66640: PPUSH
// InitHc ;
66641: CALL_OW 19
// hc_importance := 0 ;
66645: LD_ADDR_OWVAR 32
66649: PUSH
66650: LD_INT 0
66652: ST_TO_ADDR
// end ;
66653: LD_VAR 0 1
66657: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66658: LD_INT 0
66660: PPUSH
66661: PPUSH
66662: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66663: LD_ADDR_VAR 0 6
66667: PUSH
66668: LD_VAR 0 1
66672: PUSH
66673: LD_VAR 0 3
66677: PLUS
66678: PUSH
66679: LD_INT 2
66681: DIV
66682: ST_TO_ADDR
// if _x < 0 then
66683: LD_VAR 0 6
66687: PUSH
66688: LD_INT 0
66690: LESS
66691: IFFALSE 66708
// _x := _x * - 1 ;
66693: LD_ADDR_VAR 0 6
66697: PUSH
66698: LD_VAR 0 6
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: MUL
66707: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66708: LD_ADDR_VAR 0 7
66712: PUSH
66713: LD_VAR 0 2
66717: PUSH
66718: LD_VAR 0 4
66722: PLUS
66723: PUSH
66724: LD_INT 2
66726: DIV
66727: ST_TO_ADDR
// if _y < 0 then
66728: LD_VAR 0 7
66732: PUSH
66733: LD_INT 0
66735: LESS
66736: IFFALSE 66753
// _y := _y * - 1 ;
66738: LD_ADDR_VAR 0 7
66742: PUSH
66743: LD_VAR 0 7
66747: PUSH
66748: LD_INT 1
66750: NEG
66751: MUL
66752: ST_TO_ADDR
// result := [ _x , _y ] ;
66753: LD_ADDR_VAR 0 5
66757: PUSH
66758: LD_VAR 0 6
66762: PUSH
66763: LD_VAR 0 7
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: ST_TO_ADDR
// end ;
66772: LD_VAR 0 5
66776: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66777: LD_INT 0
66779: PPUSH
66780: PPUSH
66781: PPUSH
66782: PPUSH
// task := GetTaskList ( unit ) ;
66783: LD_ADDR_VAR 0 7
66787: PUSH
66788: LD_VAR 0 1
66792: PPUSH
66793: CALL_OW 437
66797: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66798: LD_VAR 0 7
66802: NOT
66803: PUSH
66804: LD_VAR 0 1
66808: PPUSH
66809: LD_VAR 0 2
66813: PPUSH
66814: CALL_OW 308
66818: NOT
66819: AND
66820: IFFALSE 66824
// exit ;
66822: GO 66942
// if IsInArea ( unit , area ) then
66824: LD_VAR 0 1
66828: PPUSH
66829: LD_VAR 0 2
66833: PPUSH
66834: CALL_OW 308
66838: IFFALSE 66856
// begin ComMoveToArea ( unit , goAway ) ;
66840: LD_VAR 0 1
66844: PPUSH
66845: LD_VAR 0 3
66849: PPUSH
66850: CALL_OW 113
// exit ;
66854: GO 66942
// end ; if task [ 1 ] [ 1 ] <> M then
66856: LD_VAR 0 7
66860: PUSH
66861: LD_INT 1
66863: ARRAY
66864: PUSH
66865: LD_INT 1
66867: ARRAY
66868: PUSH
66869: LD_STRING M
66871: NONEQUAL
66872: IFFALSE 66876
// exit ;
66874: GO 66942
// x := task [ 1 ] [ 2 ] ;
66876: LD_ADDR_VAR 0 5
66880: PUSH
66881: LD_VAR 0 7
66885: PUSH
66886: LD_INT 1
66888: ARRAY
66889: PUSH
66890: LD_INT 2
66892: ARRAY
66893: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66894: LD_ADDR_VAR 0 6
66898: PUSH
66899: LD_VAR 0 7
66903: PUSH
66904: LD_INT 1
66906: ARRAY
66907: PUSH
66908: LD_INT 3
66910: ARRAY
66911: ST_TO_ADDR
// if InArea ( x , y , area ) then
66912: LD_VAR 0 5
66916: PPUSH
66917: LD_VAR 0 6
66921: PPUSH
66922: LD_VAR 0 2
66926: PPUSH
66927: CALL_OW 309
66931: IFFALSE 66942
// ComStop ( unit ) ;
66933: LD_VAR 0 1
66937: PPUSH
66938: CALL_OW 141
// end ;
66942: LD_VAR 0 4
66946: RET
// export function Abs ( value ) ; begin
66947: LD_INT 0
66949: PPUSH
// result := value ;
66950: LD_ADDR_VAR 0 2
66954: PUSH
66955: LD_VAR 0 1
66959: ST_TO_ADDR
// if value < 0 then
66960: LD_VAR 0 1
66964: PUSH
66965: LD_INT 0
66967: LESS
66968: IFFALSE 66985
// result := value * - 1 ;
66970: LD_ADDR_VAR 0 2
66974: PUSH
66975: LD_VAR 0 1
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: MUL
66984: ST_TO_ADDR
// end ;
66985: LD_VAR 0 2
66989: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66990: LD_INT 0
66992: PPUSH
66993: PPUSH
66994: PPUSH
66995: PPUSH
66996: PPUSH
66997: PPUSH
66998: PPUSH
66999: PPUSH
// if not unit or not building then
67000: LD_VAR 0 1
67004: NOT
67005: PUSH
67006: LD_VAR 0 2
67010: NOT
67011: OR
67012: IFFALSE 67016
// exit ;
67014: GO 67242
// x := GetX ( building ) ;
67016: LD_ADDR_VAR 0 4
67020: PUSH
67021: LD_VAR 0 2
67025: PPUSH
67026: CALL_OW 250
67030: ST_TO_ADDR
// y := GetY ( building ) ;
67031: LD_ADDR_VAR 0 6
67035: PUSH
67036: LD_VAR 0 2
67040: PPUSH
67041: CALL_OW 251
67045: ST_TO_ADDR
// d := GetDir ( building ) ;
67046: LD_ADDR_VAR 0 8
67050: PUSH
67051: LD_VAR 0 2
67055: PPUSH
67056: CALL_OW 254
67060: ST_TO_ADDR
// r := 4 ;
67061: LD_ADDR_VAR 0 9
67065: PUSH
67066: LD_INT 4
67068: ST_TO_ADDR
// for i := 1 to 5 do
67069: LD_ADDR_VAR 0 10
67073: PUSH
67074: DOUBLE
67075: LD_INT 1
67077: DEC
67078: ST_TO_ADDR
67079: LD_INT 5
67081: PUSH
67082: FOR_TO
67083: IFFALSE 67240
// begin _x := ShiftX ( x , d , r + i ) ;
67085: LD_ADDR_VAR 0 5
67089: PUSH
67090: LD_VAR 0 4
67094: PPUSH
67095: LD_VAR 0 8
67099: PPUSH
67100: LD_VAR 0 9
67104: PUSH
67105: LD_VAR 0 10
67109: PLUS
67110: PPUSH
67111: CALL_OW 272
67115: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67116: LD_ADDR_VAR 0 7
67120: PUSH
67121: LD_VAR 0 6
67125: PPUSH
67126: LD_VAR 0 8
67130: PPUSH
67131: LD_VAR 0 9
67135: PUSH
67136: LD_VAR 0 10
67140: PLUS
67141: PPUSH
67142: CALL_OW 273
67146: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67147: LD_VAR 0 5
67151: PPUSH
67152: LD_VAR 0 7
67156: PPUSH
67157: CALL_OW 488
67161: PUSH
67162: LD_VAR 0 5
67166: PPUSH
67167: LD_VAR 0 7
67171: PPUSH
67172: CALL_OW 428
67176: PPUSH
67177: CALL_OW 247
67181: PUSH
67182: LD_INT 3
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: IN
67192: NOT
67193: AND
67194: IFFALSE 67238
// begin ComMoveXY ( unit , _x , _y ) ;
67196: LD_VAR 0 1
67200: PPUSH
67201: LD_VAR 0 5
67205: PPUSH
67206: LD_VAR 0 7
67210: PPUSH
67211: CALL_OW 111
// result := [ _x , _y ] ;
67215: LD_ADDR_VAR 0 3
67219: PUSH
67220: LD_VAR 0 5
67224: PUSH
67225: LD_VAR 0 7
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: ST_TO_ADDR
// exit ;
67234: POP
67235: POP
67236: GO 67242
// end ; end ;
67238: GO 67082
67240: POP
67241: POP
// end ;
67242: LD_VAR 0 3
67246: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67247: LD_INT 0
67249: PPUSH
67250: PPUSH
67251: PPUSH
// result := 0 ;
67252: LD_ADDR_VAR 0 3
67256: PUSH
67257: LD_INT 0
67259: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67260: LD_VAR 0 1
67264: PUSH
67265: LD_INT 0
67267: LESS
67268: PUSH
67269: LD_VAR 0 1
67273: PUSH
67274: LD_INT 8
67276: GREATER
67277: OR
67278: PUSH
67279: LD_VAR 0 2
67283: PUSH
67284: LD_INT 0
67286: LESS
67287: OR
67288: PUSH
67289: LD_VAR 0 2
67293: PUSH
67294: LD_INT 8
67296: GREATER
67297: OR
67298: IFFALSE 67302
// exit ;
67300: GO 67377
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67302: LD_ADDR_VAR 0 4
67306: PUSH
67307: LD_INT 22
67309: PUSH
67310: LD_VAR 0 2
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PPUSH
67319: CALL_OW 69
67323: PUSH
67324: FOR_IN
67325: IFFALSE 67375
// begin un := UnitShoot ( i ) ;
67327: LD_ADDR_VAR 0 5
67331: PUSH
67332: LD_VAR 0 4
67336: PPUSH
67337: CALL_OW 504
67341: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67342: LD_VAR 0 5
67346: PPUSH
67347: CALL_OW 255
67351: PUSH
67352: LD_VAR 0 1
67356: EQUAL
67357: IFFALSE 67373
// begin result := un ;
67359: LD_ADDR_VAR 0 3
67363: PUSH
67364: LD_VAR 0 5
67368: ST_TO_ADDR
// exit ;
67369: POP
67370: POP
67371: GO 67377
// end ; end ;
67373: GO 67324
67375: POP
67376: POP
// end ;
67377: LD_VAR 0 3
67381: RET
// export function GetCargoBay ( units ) ; begin
67382: LD_INT 0
67384: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67385: LD_ADDR_VAR 0 2
67389: PUSH
67390: LD_VAR 0 1
67394: PPUSH
67395: LD_INT 2
67397: PUSH
67398: LD_INT 34
67400: PUSH
67401: LD_INT 12
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 34
67410: PUSH
67411: LD_INT 51
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 34
67420: PUSH
67421: LD_INT 32
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 34
67430: PUSH
67431: LD_EXP 22
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: PPUSH
67447: CALL_OW 72
67451: ST_TO_ADDR
// end ;
67452: LD_VAR 0 2
67456: RET
// export function Negate ( value ) ; begin
67457: LD_INT 0
67459: PPUSH
// result := not value ;
67460: LD_ADDR_VAR 0 2
67464: PUSH
67465: LD_VAR 0 1
67469: NOT
67470: ST_TO_ADDR
// end ;
67471: LD_VAR 0 2
67475: RET
// export function Inc ( value ) ; begin
67476: LD_INT 0
67478: PPUSH
// result := value + 1 ;
67479: LD_ADDR_VAR 0 2
67483: PUSH
67484: LD_VAR 0 1
67488: PUSH
67489: LD_INT 1
67491: PLUS
67492: ST_TO_ADDR
// end ;
67493: LD_VAR 0 2
67497: RET
// export function Dec ( value ) ; begin
67498: LD_INT 0
67500: PPUSH
// result := value - 1 ;
67501: LD_ADDR_VAR 0 2
67505: PUSH
67506: LD_VAR 0 1
67510: PUSH
67511: LD_INT 1
67513: MINUS
67514: ST_TO_ADDR
// end ;
67515: LD_VAR 0 2
67519: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67520: LD_INT 0
67522: PPUSH
67523: PPUSH
67524: PPUSH
67525: PPUSH
67526: PPUSH
67527: PPUSH
67528: PPUSH
67529: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67530: LD_VAR 0 1
67534: PPUSH
67535: LD_VAR 0 2
67539: PPUSH
67540: CALL_OW 488
67544: NOT
67545: PUSH
67546: LD_VAR 0 3
67550: PPUSH
67551: LD_VAR 0 4
67555: PPUSH
67556: CALL_OW 488
67560: NOT
67561: OR
67562: IFFALSE 67575
// begin result := - 1 ;
67564: LD_ADDR_VAR 0 5
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: ST_TO_ADDR
// exit ;
67573: GO 67810
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67575: LD_ADDR_VAR 0 12
67579: PUSH
67580: LD_VAR 0 1
67584: PPUSH
67585: LD_VAR 0 2
67589: PPUSH
67590: LD_VAR 0 3
67594: PPUSH
67595: LD_VAR 0 4
67599: PPUSH
67600: CALL 66658 0 4
67604: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67605: LD_ADDR_VAR 0 11
67609: PUSH
67610: LD_VAR 0 1
67614: PPUSH
67615: LD_VAR 0 2
67619: PPUSH
67620: LD_VAR 0 12
67624: PUSH
67625: LD_INT 1
67627: ARRAY
67628: PPUSH
67629: LD_VAR 0 12
67633: PUSH
67634: LD_INT 2
67636: ARRAY
67637: PPUSH
67638: CALL_OW 298
67642: ST_TO_ADDR
// distance := 9999 ;
67643: LD_ADDR_VAR 0 10
67647: PUSH
67648: LD_INT 9999
67650: ST_TO_ADDR
// for i := 0 to 5 do
67651: LD_ADDR_VAR 0 6
67655: PUSH
67656: DOUBLE
67657: LD_INT 0
67659: DEC
67660: ST_TO_ADDR
67661: LD_INT 5
67663: PUSH
67664: FOR_TO
67665: IFFALSE 67808
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67667: LD_ADDR_VAR 0 7
67671: PUSH
67672: LD_VAR 0 1
67676: PPUSH
67677: LD_VAR 0 6
67681: PPUSH
67682: LD_VAR 0 11
67686: PPUSH
67687: CALL_OW 272
67691: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67692: LD_ADDR_VAR 0 8
67696: PUSH
67697: LD_VAR 0 2
67701: PPUSH
67702: LD_VAR 0 6
67706: PPUSH
67707: LD_VAR 0 11
67711: PPUSH
67712: CALL_OW 273
67716: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67717: LD_VAR 0 7
67721: PPUSH
67722: LD_VAR 0 8
67726: PPUSH
67727: CALL_OW 488
67731: NOT
67732: IFFALSE 67736
// continue ;
67734: GO 67664
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67736: LD_ADDR_VAR 0 9
67740: PUSH
67741: LD_VAR 0 12
67745: PUSH
67746: LD_INT 1
67748: ARRAY
67749: PPUSH
67750: LD_VAR 0 12
67754: PUSH
67755: LD_INT 2
67757: ARRAY
67758: PPUSH
67759: LD_VAR 0 7
67763: PPUSH
67764: LD_VAR 0 8
67768: PPUSH
67769: CALL_OW 298
67773: ST_TO_ADDR
// if tmp < distance then
67774: LD_VAR 0 9
67778: PUSH
67779: LD_VAR 0 10
67783: LESS
67784: IFFALSE 67806
// begin result := i ;
67786: LD_ADDR_VAR 0 5
67790: PUSH
67791: LD_VAR 0 6
67795: ST_TO_ADDR
// distance := tmp ;
67796: LD_ADDR_VAR 0 10
67800: PUSH
67801: LD_VAR 0 9
67805: ST_TO_ADDR
// end ; end ;
67806: GO 67664
67808: POP
67809: POP
// end ;
67810: LD_VAR 0 5
67814: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67815: LD_INT 0
67817: PPUSH
67818: PPUSH
// if not driver or not IsInUnit ( driver ) then
67819: LD_VAR 0 1
67823: NOT
67824: PUSH
67825: LD_VAR 0 1
67829: PPUSH
67830: CALL_OW 310
67834: NOT
67835: OR
67836: IFFALSE 67840
// exit ;
67838: GO 67930
// vehicle := IsInUnit ( driver ) ;
67840: LD_ADDR_VAR 0 3
67844: PUSH
67845: LD_VAR 0 1
67849: PPUSH
67850: CALL_OW 310
67854: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67855: LD_VAR 0 1
67859: PPUSH
67860: LD_STRING \
67862: PUSH
67863: LD_INT 0
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: LD_INT 0
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: LD_INT 0
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: PUSH
67890: LD_STRING E
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: LD_VAR 0 3
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 0
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PPUSH
67926: CALL_OW 446
// end ;
67930: LD_VAR 0 2
67934: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67935: LD_INT 0
67937: PPUSH
67938: PPUSH
// if not driver or not IsInUnit ( driver ) then
67939: LD_VAR 0 1
67943: NOT
67944: PUSH
67945: LD_VAR 0 1
67949: PPUSH
67950: CALL_OW 310
67954: NOT
67955: OR
67956: IFFALSE 67960
// exit ;
67958: GO 68050
// vehicle := IsInUnit ( driver ) ;
67960: LD_ADDR_VAR 0 3
67964: PUSH
67965: LD_VAR 0 1
67969: PPUSH
67970: CALL_OW 310
67974: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67975: LD_VAR 0 1
67979: PPUSH
67980: LD_STRING \
67982: PUSH
67983: LD_INT 0
67985: PUSH
67986: LD_INT 0
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: PUSH
68010: LD_STRING E
68012: PUSH
68013: LD_INT 0
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: LD_VAR 0 3
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: LD_INT 0
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PPUSH
68046: CALL_OW 447
// end ;
68050: LD_VAR 0 2
68054: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68055: LD_INT 0
68057: PPUSH
68058: PPUSH
68059: PPUSH
// tmp := [ ] ;
68060: LD_ADDR_VAR 0 5
68064: PUSH
68065: EMPTY
68066: ST_TO_ADDR
// for i in units do
68067: LD_ADDR_VAR 0 4
68071: PUSH
68072: LD_VAR 0 1
68076: PUSH
68077: FOR_IN
68078: IFFALSE 68116
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68080: LD_ADDR_VAR 0 5
68084: PUSH
68085: LD_VAR 0 5
68089: PPUSH
68090: LD_VAR 0 5
68094: PUSH
68095: LD_INT 1
68097: PLUS
68098: PPUSH
68099: LD_VAR 0 4
68103: PPUSH
68104: CALL_OW 256
68108: PPUSH
68109: CALL_OW 2
68113: ST_TO_ADDR
68114: GO 68077
68116: POP
68117: POP
// if not tmp then
68118: LD_VAR 0 5
68122: NOT
68123: IFFALSE 68127
// exit ;
68125: GO 68175
// if asc then
68127: LD_VAR 0 2
68131: IFFALSE 68155
// result := SortListByListAsc ( units , tmp ) else
68133: LD_ADDR_VAR 0 3
68137: PUSH
68138: LD_VAR 0 1
68142: PPUSH
68143: LD_VAR 0 5
68147: PPUSH
68148: CALL_OW 76
68152: ST_TO_ADDR
68153: GO 68175
// result := SortListByListDesc ( units , tmp ) ;
68155: LD_ADDR_VAR 0 3
68159: PUSH
68160: LD_VAR 0 1
68164: PPUSH
68165: LD_VAR 0 5
68169: PPUSH
68170: CALL_OW 77
68174: ST_TO_ADDR
// end ;
68175: LD_VAR 0 3
68179: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68180: LD_INT 0
68182: PPUSH
68183: PPUSH
// task := GetTaskList ( mech ) ;
68184: LD_ADDR_VAR 0 4
68188: PUSH
68189: LD_VAR 0 1
68193: PPUSH
68194: CALL_OW 437
68198: ST_TO_ADDR
// if not task then
68199: LD_VAR 0 4
68203: NOT
68204: IFFALSE 68208
// exit ;
68206: GO 68250
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68208: LD_ADDR_VAR 0 3
68212: PUSH
68213: LD_VAR 0 4
68217: PUSH
68218: LD_INT 1
68220: ARRAY
68221: PUSH
68222: LD_INT 1
68224: ARRAY
68225: PUSH
68226: LD_STRING r
68228: EQUAL
68229: PUSH
68230: LD_VAR 0 4
68234: PUSH
68235: LD_INT 1
68237: ARRAY
68238: PUSH
68239: LD_INT 4
68241: ARRAY
68242: PUSH
68243: LD_VAR 0 2
68247: EQUAL
68248: AND
68249: ST_TO_ADDR
// end ;
68250: LD_VAR 0 3
68254: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68255: LD_INT 0
68257: PPUSH
// SetDir ( unit , d ) ;
68258: LD_VAR 0 1
68262: PPUSH
68263: LD_VAR 0 4
68267: PPUSH
68268: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68272: LD_VAR 0 1
68276: PPUSH
68277: LD_VAR 0 2
68281: PPUSH
68282: LD_VAR 0 3
68286: PPUSH
68287: LD_VAR 0 5
68291: PPUSH
68292: CALL_OW 48
// end ;
68296: LD_VAR 0 6
68300: RET
// export function ToNaturalNumber ( number ) ; begin
68301: LD_INT 0
68303: PPUSH
// result := number div 1 ;
68304: LD_ADDR_VAR 0 2
68308: PUSH
68309: LD_VAR 0 1
68313: PUSH
68314: LD_INT 1
68316: DIV
68317: ST_TO_ADDR
// if number < 0 then
68318: LD_VAR 0 1
68322: PUSH
68323: LD_INT 0
68325: LESS
68326: IFFALSE 68336
// result := 0 ;
68328: LD_ADDR_VAR 0 2
68332: PUSH
68333: LD_INT 0
68335: ST_TO_ADDR
// end ;
68336: LD_VAR 0 2
68340: RET
// export function SortByClass ( units , class ) ; var un ; begin
68341: LD_INT 0
68343: PPUSH
68344: PPUSH
// if not units or not class then
68345: LD_VAR 0 1
68349: NOT
68350: PUSH
68351: LD_VAR 0 2
68355: NOT
68356: OR
68357: IFFALSE 68361
// exit ;
68359: GO 68456
// result := [ ] ;
68361: LD_ADDR_VAR 0 3
68365: PUSH
68366: EMPTY
68367: ST_TO_ADDR
// for un in units do
68368: LD_ADDR_VAR 0 4
68372: PUSH
68373: LD_VAR 0 1
68377: PUSH
68378: FOR_IN
68379: IFFALSE 68454
// if GetClass ( un ) = class then
68381: LD_VAR 0 4
68385: PPUSH
68386: CALL_OW 257
68390: PUSH
68391: LD_VAR 0 2
68395: EQUAL
68396: IFFALSE 68423
// result := Insert ( result , 1 , un ) else
68398: LD_ADDR_VAR 0 3
68402: PUSH
68403: LD_VAR 0 3
68407: PPUSH
68408: LD_INT 1
68410: PPUSH
68411: LD_VAR 0 4
68415: PPUSH
68416: CALL_OW 2
68420: ST_TO_ADDR
68421: GO 68452
// result := Replace ( result , result + 1 , un ) ;
68423: LD_ADDR_VAR 0 3
68427: PUSH
68428: LD_VAR 0 3
68432: PPUSH
68433: LD_VAR 0 3
68437: PUSH
68438: LD_INT 1
68440: PLUS
68441: PPUSH
68442: LD_VAR 0 4
68446: PPUSH
68447: CALL_OW 1
68451: ST_TO_ADDR
68452: GO 68378
68454: POP
68455: POP
// end ;
68456: LD_VAR 0 3
68460: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68461: LD_INT 0
68463: PPUSH
68464: PPUSH
68465: PPUSH
68466: PPUSH
68467: PPUSH
68468: PPUSH
68469: PPUSH
// result := [ ] ;
68470: LD_ADDR_VAR 0 4
68474: PUSH
68475: EMPTY
68476: ST_TO_ADDR
// if x - r < 0 then
68477: LD_VAR 0 1
68481: PUSH
68482: LD_VAR 0 3
68486: MINUS
68487: PUSH
68488: LD_INT 0
68490: LESS
68491: IFFALSE 68503
// min_x := 0 else
68493: LD_ADDR_VAR 0 8
68497: PUSH
68498: LD_INT 0
68500: ST_TO_ADDR
68501: GO 68519
// min_x := x - r ;
68503: LD_ADDR_VAR 0 8
68507: PUSH
68508: LD_VAR 0 1
68512: PUSH
68513: LD_VAR 0 3
68517: MINUS
68518: ST_TO_ADDR
// if y - r < 0 then
68519: LD_VAR 0 2
68523: PUSH
68524: LD_VAR 0 3
68528: MINUS
68529: PUSH
68530: LD_INT 0
68532: LESS
68533: IFFALSE 68545
// min_y := 0 else
68535: LD_ADDR_VAR 0 7
68539: PUSH
68540: LD_INT 0
68542: ST_TO_ADDR
68543: GO 68561
// min_y := y - r ;
68545: LD_ADDR_VAR 0 7
68549: PUSH
68550: LD_VAR 0 2
68554: PUSH
68555: LD_VAR 0 3
68559: MINUS
68560: ST_TO_ADDR
// max_x := x + r ;
68561: LD_ADDR_VAR 0 9
68565: PUSH
68566: LD_VAR 0 1
68570: PUSH
68571: LD_VAR 0 3
68575: PLUS
68576: ST_TO_ADDR
// max_y := y + r ;
68577: LD_ADDR_VAR 0 10
68581: PUSH
68582: LD_VAR 0 2
68586: PUSH
68587: LD_VAR 0 3
68591: PLUS
68592: ST_TO_ADDR
// for _x = min_x to max_x do
68593: LD_ADDR_VAR 0 5
68597: PUSH
68598: DOUBLE
68599: LD_VAR 0 8
68603: DEC
68604: ST_TO_ADDR
68605: LD_VAR 0 9
68609: PUSH
68610: FOR_TO
68611: IFFALSE 68712
// for _y = min_y to max_y do
68613: LD_ADDR_VAR 0 6
68617: PUSH
68618: DOUBLE
68619: LD_VAR 0 7
68623: DEC
68624: ST_TO_ADDR
68625: LD_VAR 0 10
68629: PUSH
68630: FOR_TO
68631: IFFALSE 68708
// begin if not ValidHex ( _x , _y ) then
68633: LD_VAR 0 5
68637: PPUSH
68638: LD_VAR 0 6
68642: PPUSH
68643: CALL_OW 488
68647: NOT
68648: IFFALSE 68652
// continue ;
68650: GO 68630
// if GetResourceTypeXY ( _x , _y ) then
68652: LD_VAR 0 5
68656: PPUSH
68657: LD_VAR 0 6
68661: PPUSH
68662: CALL_OW 283
68666: IFFALSE 68706
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68668: LD_ADDR_VAR 0 4
68672: PUSH
68673: LD_VAR 0 4
68677: PPUSH
68678: LD_VAR 0 4
68682: PUSH
68683: LD_INT 1
68685: PLUS
68686: PPUSH
68687: LD_VAR 0 5
68691: PUSH
68692: LD_VAR 0 6
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PPUSH
68701: CALL_OW 1
68705: ST_TO_ADDR
// end ;
68706: GO 68630
68708: POP
68709: POP
68710: GO 68610
68712: POP
68713: POP
// end ;
68714: LD_VAR 0 4
68718: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68719: LD_INT 0
68721: PPUSH
68722: PPUSH
68723: PPUSH
68724: PPUSH
68725: PPUSH
68726: PPUSH
68727: PPUSH
68728: PPUSH
// if not units then
68729: LD_VAR 0 1
68733: NOT
68734: IFFALSE 68738
// exit ;
68736: GO 69163
// result := UnitFilter ( units , [ f_ok ] ) ;
68738: LD_ADDR_VAR 0 3
68742: PUSH
68743: LD_VAR 0 1
68747: PPUSH
68748: LD_INT 50
68750: PUSH
68751: EMPTY
68752: LIST
68753: PPUSH
68754: CALL_OW 72
68758: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68759: LD_ADDR_VAR 0 8
68763: PUSH
68764: LD_VAR 0 1
68768: PUSH
68769: LD_INT 1
68771: ARRAY
68772: PPUSH
68773: CALL_OW 255
68777: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
68778: LD_ADDR_VAR 0 10
68782: PUSH
68783: LD_INT 29
68785: PUSH
68786: LD_EXP 25
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: ST_TO_ADDR
// if not result then
68795: LD_VAR 0 3
68799: NOT
68800: IFFALSE 68804
// exit ;
68802: GO 69163
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68804: LD_ADDR_VAR 0 5
68808: PUSH
68809: LD_INT 81
68811: PUSH
68812: LD_VAR 0 8
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PPUSH
68821: CALL_OW 69
68825: ST_TO_ADDR
// for i in result do
68826: LD_ADDR_VAR 0 4
68830: PUSH
68831: LD_VAR 0 3
68835: PUSH
68836: FOR_IN
68837: IFFALSE 69161
// begin tag := GetTag ( i ) + 1 ;
68839: LD_ADDR_VAR 0 9
68843: PUSH
68844: LD_VAR 0 4
68848: PPUSH
68849: CALL_OW 110
68853: PUSH
68854: LD_INT 1
68856: PLUS
68857: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68858: LD_ADDR_VAR 0 7
68862: PUSH
68863: LD_VAR 0 4
68867: PPUSH
68868: CALL_OW 250
68872: PPUSH
68873: LD_VAR 0 4
68877: PPUSH
68878: CALL_OW 251
68882: PPUSH
68883: LD_INT 6
68885: PPUSH
68886: CALL 68461 0 3
68890: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68891: LD_VAR 0 7
68895: PUSH
68896: LD_VAR 0 4
68900: PPUSH
68901: CALL_OW 264
68905: PUSH
68906: LD_VAR 0 10
68910: IN
68911: NOT
68912: AND
68913: IFFALSE 68952
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68915: LD_VAR 0 4
68919: PPUSH
68920: LD_VAR 0 7
68924: PUSH
68925: LD_INT 1
68927: ARRAY
68928: PUSH
68929: LD_INT 1
68931: ARRAY
68932: PPUSH
68933: LD_VAR 0 7
68937: PUSH
68938: LD_INT 1
68940: ARRAY
68941: PUSH
68942: LD_INT 2
68944: ARRAY
68945: PPUSH
68946: CALL_OW 116
68950: GO 69159
// if path > tag then
68952: LD_VAR 0 2
68956: PUSH
68957: LD_VAR 0 9
68961: GREATER
68962: IFFALSE 69129
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68964: LD_ADDR_VAR 0 6
68968: PUSH
68969: LD_VAR 0 5
68973: PPUSH
68974: LD_INT 91
68976: PUSH
68977: LD_VAR 0 4
68981: PUSH
68982: LD_INT 12
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: LIST
68989: PPUSH
68990: CALL_OW 72
68994: ST_TO_ADDR
// if nearEnemy then
68995: LD_VAR 0 6
68999: IFFALSE 69027
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69001: LD_VAR 0 4
69005: PPUSH
69006: LD_VAR 0 6
69010: PPUSH
69011: LD_VAR 0 4
69015: PPUSH
69016: CALL_OW 74
69020: PPUSH
69021: CALL_OW 115
69025: GO 69127
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69027: LD_VAR 0 4
69031: PPUSH
69032: LD_VAR 0 2
69036: PUSH
69037: LD_VAR 0 9
69041: ARRAY
69042: PUSH
69043: LD_INT 1
69045: ARRAY
69046: PPUSH
69047: LD_VAR 0 2
69051: PUSH
69052: LD_VAR 0 9
69056: ARRAY
69057: PUSH
69058: LD_INT 2
69060: ARRAY
69061: PPUSH
69062: CALL_OW 297
69066: PUSH
69067: LD_INT 6
69069: GREATER
69070: IFFALSE 69113
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69072: LD_VAR 0 4
69076: PPUSH
69077: LD_VAR 0 2
69081: PUSH
69082: LD_VAR 0 9
69086: ARRAY
69087: PUSH
69088: LD_INT 1
69090: ARRAY
69091: PPUSH
69092: LD_VAR 0 2
69096: PUSH
69097: LD_VAR 0 9
69101: ARRAY
69102: PUSH
69103: LD_INT 2
69105: ARRAY
69106: PPUSH
69107: CALL_OW 114
69111: GO 69127
// SetTag ( i , tag ) ;
69113: LD_VAR 0 4
69117: PPUSH
69118: LD_VAR 0 9
69122: PPUSH
69123: CALL_OW 109
// end else
69127: GO 69159
// if enemy then
69129: LD_VAR 0 5
69133: IFFALSE 69159
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69135: LD_VAR 0 4
69139: PPUSH
69140: LD_VAR 0 5
69144: PPUSH
69145: LD_VAR 0 4
69149: PPUSH
69150: CALL_OW 74
69154: PPUSH
69155: CALL_OW 115
// end ;
69159: GO 68836
69161: POP
69162: POP
// end ;
69163: LD_VAR 0 3
69167: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69168: LD_INT 0
69170: PPUSH
69171: PPUSH
69172: PPUSH
// if not unit or IsInUnit ( unit ) then
69173: LD_VAR 0 1
69177: NOT
69178: PUSH
69179: LD_VAR 0 1
69183: PPUSH
69184: CALL_OW 310
69188: OR
69189: IFFALSE 69193
// exit ;
69191: GO 69284
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69193: LD_ADDR_VAR 0 4
69197: PUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: CALL_OW 250
69207: PPUSH
69208: LD_VAR 0 2
69212: PPUSH
69213: LD_INT 1
69215: PPUSH
69216: CALL_OW 272
69220: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69221: LD_ADDR_VAR 0 5
69225: PUSH
69226: LD_VAR 0 1
69230: PPUSH
69231: CALL_OW 251
69235: PPUSH
69236: LD_VAR 0 2
69240: PPUSH
69241: LD_INT 1
69243: PPUSH
69244: CALL_OW 273
69248: ST_TO_ADDR
// if ValidHex ( x , y ) then
69249: LD_VAR 0 4
69253: PPUSH
69254: LD_VAR 0 5
69258: PPUSH
69259: CALL_OW 488
69263: IFFALSE 69284
// ComTurnXY ( unit , x , y ) ;
69265: LD_VAR 0 1
69269: PPUSH
69270: LD_VAR 0 4
69274: PPUSH
69275: LD_VAR 0 5
69279: PPUSH
69280: CALL_OW 118
// end ;
69284: LD_VAR 0 3
69288: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69289: LD_INT 0
69291: PPUSH
69292: PPUSH
// result := false ;
69293: LD_ADDR_VAR 0 3
69297: PUSH
69298: LD_INT 0
69300: ST_TO_ADDR
// if not units then
69301: LD_VAR 0 2
69305: NOT
69306: IFFALSE 69310
// exit ;
69308: GO 69355
// for i in units do
69310: LD_ADDR_VAR 0 4
69314: PUSH
69315: LD_VAR 0 2
69319: PUSH
69320: FOR_IN
69321: IFFALSE 69353
// if See ( side , i ) then
69323: LD_VAR 0 1
69327: PPUSH
69328: LD_VAR 0 4
69332: PPUSH
69333: CALL_OW 292
69337: IFFALSE 69351
// begin result := true ;
69339: LD_ADDR_VAR 0 3
69343: PUSH
69344: LD_INT 1
69346: ST_TO_ADDR
// exit ;
69347: POP
69348: POP
69349: GO 69355
// end ;
69351: GO 69320
69353: POP
69354: POP
// end ;
69355: LD_VAR 0 3
69359: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69360: LD_INT 0
69362: PPUSH
69363: PPUSH
69364: PPUSH
69365: PPUSH
// if not unit or not points then
69366: LD_VAR 0 1
69370: NOT
69371: PUSH
69372: LD_VAR 0 2
69376: NOT
69377: OR
69378: IFFALSE 69382
// exit ;
69380: GO 69472
// dist := 99999 ;
69382: LD_ADDR_VAR 0 5
69386: PUSH
69387: LD_INT 99999
69389: ST_TO_ADDR
// for i in points do
69390: LD_ADDR_VAR 0 4
69394: PUSH
69395: LD_VAR 0 2
69399: PUSH
69400: FOR_IN
69401: IFFALSE 69470
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69403: LD_ADDR_VAR 0 6
69407: PUSH
69408: LD_VAR 0 1
69412: PPUSH
69413: LD_VAR 0 4
69417: PUSH
69418: LD_INT 1
69420: ARRAY
69421: PPUSH
69422: LD_VAR 0 4
69426: PUSH
69427: LD_INT 2
69429: ARRAY
69430: PPUSH
69431: CALL_OW 297
69435: ST_TO_ADDR
// if tmpDist < dist then
69436: LD_VAR 0 6
69440: PUSH
69441: LD_VAR 0 5
69445: LESS
69446: IFFALSE 69468
// begin result := i ;
69448: LD_ADDR_VAR 0 3
69452: PUSH
69453: LD_VAR 0 4
69457: ST_TO_ADDR
// dist := tmpDist ;
69458: LD_ADDR_VAR 0 5
69462: PUSH
69463: LD_VAR 0 6
69467: ST_TO_ADDR
// end ; end ;
69468: GO 69400
69470: POP
69471: POP
// end ; end_of_file
69472: LD_VAR 0 3
69476: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69477: LD_VAR 0 1
69481: PUSH
69482: LD_INT 200
69484: DOUBLE
69485: GREATEREQUAL
69486: IFFALSE 69494
69488: LD_INT 299
69490: DOUBLE
69491: LESSEQUAL
69492: IFTRUE 69496
69494: GO 69528
69496: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69497: LD_VAR 0 1
69501: PPUSH
69502: LD_VAR 0 2
69506: PPUSH
69507: LD_VAR 0 3
69511: PPUSH
69512: LD_VAR 0 4
69516: PPUSH
69517: LD_VAR 0 5
69521: PPUSH
69522: CALL 25503 0 5
69526: GO 69605
69528: LD_INT 300
69530: DOUBLE
69531: GREATEREQUAL
69532: IFFALSE 69540
69534: LD_INT 399
69536: DOUBLE
69537: LESSEQUAL
69538: IFTRUE 69542
69540: GO 69604
69542: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69543: LD_VAR 0 1
69547: PPUSH
69548: LD_VAR 0 2
69552: PPUSH
69553: LD_VAR 0 3
69557: PPUSH
69558: LD_VAR 0 4
69562: PPUSH
69563: LD_VAR 0 5
69567: PPUSH
69568: LD_VAR 0 6
69572: PPUSH
69573: LD_VAR 0 7
69577: PPUSH
69578: LD_VAR 0 8
69582: PPUSH
69583: LD_VAR 0 9
69587: PPUSH
69588: LD_VAR 0 10
69592: PPUSH
69593: LD_VAR 0 11
69597: PPUSH
69598: CALL 23401 0 11
69602: GO 69605
69604: POP
// end ;
69605: PPOPN 11
69607: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69608: LD_VAR 0 1
69612: PPUSH
69613: LD_VAR 0 2
69617: PPUSH
69618: LD_VAR 0 3
69622: PPUSH
69623: LD_VAR 0 4
69627: PPUSH
69628: LD_VAR 0 5
69632: PPUSH
69633: CALL 25495 0 5
// end ; end_of_file
69637: PPOPN 5
69639: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69640: LD_VAR 0 1
69644: PPUSH
69645: LD_VAR 0 2
69649: PPUSH
69650: LD_VAR 0 3
69654: PPUSH
69655: LD_VAR 0 4
69659: PPUSH
69660: LD_VAR 0 5
69664: PPUSH
69665: LD_VAR 0 6
69669: PPUSH
69670: CALL 11596 0 6
// end ;
69674: PPOPN 6
69676: END
