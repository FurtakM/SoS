// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 684 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6959 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10486 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 1 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// SetWeather ( 2 , 300 , 30 ) ;
 666: LD_INT 2
 668: PPUSH
 669: LD_INT 300
 671: PPUSH
 672: LD_INT 30
 674: PPUSH
 675: CALL_OW 550
// end ; end_of_file
 679: LD_VAR 0 1
 683: RET
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 684: LD_INT 0
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// SetBName ( jota_base , jota ) ;
 692: LD_INT 1
 694: PPUSH
 695: LD_STRING jota
 697: PPUSH
 698: CALL_OW 500
// if game_type = 1 then
 702: LD_EXP 1
 706: PUSH
 707: LD_INT 1
 709: EQUAL
 710: IFFALSE 1230
// begin your_side := 1 ;
 712: LD_ADDR_OWVAR 2
 716: PUSH
 717: LD_INT 1
 719: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 720: LD_ADDR_VAR 0 5
 724: PUSH
 725: LD_INT 29
 727: PUSH
 728: LD_INT 35
 730: PUSH
 731: LD_INT 21
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: ST_TO_ADDR
// if game_diff = 1 then
 739: LD_EXP 2
 743: PUSH
 744: LD_INT 1
 746: EQUAL
 747: IFFALSE 762
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 749: LD_INT 57
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_INT 2
 757: PPUSH
 758: CALL_OW 322
// if game_diff = 2 then
 762: LD_EXP 2
 766: PUSH
 767: LD_INT 2
 769: EQUAL
 770: IFFALSE 785
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 772: LD_INT 58
 774: PPUSH
 775: LD_INT 3
 777: PPUSH
 778: LD_INT 2
 780: PPUSH
 781: CALL_OW 322
// if game_diff = 3 then
 785: LD_EXP 2
 789: PUSH
 790: LD_INT 3
 792: EQUAL
 793: IFFALSE 808
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 795: LD_INT 59
 797: PPUSH
 798: LD_INT 3
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: CALL_OW 322
// for i = 1 to list do
 808: LD_ADDR_VAR 0 2
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 5
 822: PUSH
 823: FOR_TO
 824: IFFALSE 843
// RemoveUnit ( list [ i ] ) ;
 826: LD_VAR 0 5
 830: PUSH
 831: LD_VAR 0 2
 835: ARRAY
 836: PPUSH
 837: CALL_OW 64
 841: GO 823
 843: POP
 844: POP
// ResetFog ;
 845: CALL_OW 335
// uc_side := 1 ;
 849: LD_ADDR_OWVAR 20
 853: PUSH
 854: LD_INT 1
 856: ST_TO_ADDR
// uc_nation := 1 ;
 857: LD_ADDR_OWVAR 21
 861: PUSH
 862: LD_INT 1
 864: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 865: LD_ADDR_VAR 0 2
 869: PUSH
 870: DOUBLE
 871: LD_INT 1
 873: DEC
 874: ST_TO_ADDR
 875: LD_INT 4
 877: PUSH
 878: LD_EXP 2
 882: MINUS
 883: PUSH
 884: FOR_TO
 885: IFFALSE 938
// begin uc_side := 1 ;
 887: LD_ADDR_OWVAR 20
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
// uc_nation := 1 ;
 895: LD_ADDR_OWVAR 21
 899: PUSH
 900: LD_INT 1
 902: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 903: LD_ADDR_VAR 0 3
 907: PUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 3
 915: PPUSH
 916: CALL 9241 0 2
 920: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 921: LD_VAR 0 3
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// end ;
 936: GO 884
 938: POP
 939: POP
// for i = 1 to 5 - ( game_diff ) do
 940: LD_ADDR_VAR 0 2
 944: PUSH
 945: DOUBLE
 946: LD_INT 1
 948: DEC
 949: ST_TO_ADDR
 950: LD_INT 5
 952: PUSH
 953: LD_EXP 2
 957: MINUS
 958: PUSH
 959: FOR_TO
 960: IFFALSE 1013
// begin uc_side := 1 ;
 962: LD_ADDR_OWVAR 20
 966: PUSH
 967: LD_INT 1
 969: ST_TO_ADDR
// uc_nation := 1 ;
 970: LD_ADDR_OWVAR 21
 974: PUSH
 975: LD_INT 1
 977: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
 978: LD_ADDR_VAR 0 3
 982: PUSH
 983: LD_INT 2
 985: PPUSH
 986: LD_EXP 3
 990: PPUSH
 991: CALL 9241 0 2
 995: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 996: LD_VAR 0 3
1000: PPUSH
1001: LD_INT 1
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 49
// end ;
1011: GO 959
1013: POP
1014: POP
// for i = 1 to 5 - ( game_diff ) do
1015: LD_ADDR_VAR 0 2
1019: PUSH
1020: DOUBLE
1021: LD_INT 1
1023: DEC
1024: ST_TO_ADDR
1025: LD_INT 5
1027: PUSH
1028: LD_EXP 2
1032: MINUS
1033: PUSH
1034: FOR_TO
1035: IFFALSE 1088
// begin uc_side := 1 ;
1037: LD_ADDR_OWVAR 20
1041: PUSH
1042: LD_INT 1
1044: ST_TO_ADDR
// uc_nation := 1 ;
1045: LD_ADDR_OWVAR 21
1049: PUSH
1050: LD_INT 1
1052: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1053: LD_ADDR_VAR 0 3
1057: PUSH
1058: LD_INT 3
1060: PPUSH
1061: LD_EXP 3
1065: PPUSH
1066: CALL 9241 0 2
1070: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1071: LD_VAR 0 3
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_INT 0
1081: PPUSH
1082: CALL_OW 49
// end ;
1086: GO 1034
1088: POP
1089: POP
// for i = 1 to 5 - ( game_diff ) do
1090: LD_ADDR_VAR 0 2
1094: PUSH
1095: DOUBLE
1096: LD_INT 1
1098: DEC
1099: ST_TO_ADDR
1100: LD_INT 5
1102: PUSH
1103: LD_EXP 2
1107: MINUS
1108: PUSH
1109: FOR_TO
1110: IFFALSE 1163
// begin uc_side := 1 ;
1112: LD_ADDR_OWVAR 20
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// uc_nation := 1 ;
1120: LD_ADDR_OWVAR 21
1124: PUSH
1125: LD_INT 1
1127: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1128: LD_ADDR_VAR 0 3
1132: PUSH
1133: LD_INT 4
1135: PPUSH
1136: LD_EXP 3
1140: PPUSH
1141: CALL 9241 0 2
1145: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1146: LD_VAR 0 3
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: CALL_OW 49
// end ;
1161: GO 1109
1163: POP
1164: POP
// hc_importance := 100 ;
1165: LD_ADDR_OWVAR 32
1169: PUSH
1170: LD_INT 100
1172: ST_TO_ADDR
// uc_side := 1 ;
1173: LD_ADDR_OWVAR 20
1177: PUSH
1178: LD_INT 1
1180: ST_TO_ADDR
// uc_nation := 1 ;
1181: LD_ADDR_OWVAR 21
1185: PUSH
1186: LD_INT 1
1188: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1189: LD_ADDR_EXP 9
1193: PUSH
1194: LD_INT 1
1196: PPUSH
1197: LD_EXP 3
1201: PPUSH
1202: CALL 9241 0 2
1206: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1207: LD_EXP 9
1211: PPUSH
1212: LD_INT 1
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 49
// hc_importance := 0 ;
1222: LD_ADDR_OWVAR 32
1226: PUSH
1227: LD_INT 0
1229: ST_TO_ADDR
// end ; if game_type = 2 then
1230: LD_EXP 1
1234: PUSH
1235: LD_INT 2
1237: EQUAL
1238: IFFALSE 2403
// begin uc_side := 1 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 1
1247: ST_TO_ADDR
// uc_nation := 1 ;
1248: LD_ADDR_OWVAR 21
1252: PUSH
1253: LD_INT 1
1255: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1256: LD_INT 1
1258: PPUSH
1259: CALL_OW 274
1263: PPUSH
1264: LD_INT 1
1266: PPUSH
1267: LD_INT 1000
1269: PPUSH
1270: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1274: LD_INT 20
1276: PPUSH
1277: LD_INT 1
1279: PPUSH
1280: LD_INT 2
1282: PPUSH
1283: CALL_OW 322
// for i = 1 to 4 do
1287: LD_ADDR_VAR 0 2
1291: PUSH
1292: DOUBLE
1293: LD_INT 1
1295: DEC
1296: ST_TO_ADDR
1297: LD_INT 4
1299: PUSH
1300: FOR_TO
1301: IFFALSE 1360
// begin for p = 1 to 5 do
1303: LD_ADDR_VAR 0 6
1307: PUSH
1308: DOUBLE
1309: LD_INT 1
1311: DEC
1312: ST_TO_ADDR
1313: LD_INT 5
1315: PUSH
1316: FOR_TO
1317: IFFALSE 1356
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1319: LD_ADDR_VAR 0 3
1323: PUSH
1324: LD_VAR 0 2
1328: PPUSH
1329: LD_EXP 4
1333: PPUSH
1334: CALL 9241 0 2
1338: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1339: LD_VAR 0 3
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL_OW 49
// end ;
1354: GO 1316
1356: POP
1357: POP
// end ;
1358: GO 1300
1360: POP
1361: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1362: LD_ADDR_VAR 0 3
1366: PUSH
1367: LD_INT 5
1369: PPUSH
1370: LD_EXP 4
1374: PPUSH
1375: CALL 9241 0 2
1379: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1380: LD_VAR 0 3
1384: PPUSH
1385: LD_INT 2
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1395: LD_VAR 0 3
1399: PPUSH
1400: LD_INT 29
1402: PPUSH
1403: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1407: LD_ADDR_VAR 0 3
1411: PUSH
1412: LD_INT 5
1414: PPUSH
1415: LD_EXP 4
1419: PPUSH
1420: CALL 9241 0 2
1424: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1425: LD_VAR 0 3
1429: PPUSH
1430: LD_INT 4
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1440: LD_VAR 0 3
1444: PPUSH
1445: LD_INT 20
1447: PPUSH
1448: CALL_OW 120
// if game_diff > 1 then
1452: LD_EXP 2
1456: PUSH
1457: LD_INT 1
1459: GREATER
1460: IFFALSE 1604
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1462: LD_ADDR_VAR 0 3
1466: PUSH
1467: LD_INT 5
1469: PPUSH
1470: LD_EXP 4
1474: PPUSH
1475: CALL 9241 0 2
1479: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1480: LD_VAR 0 3
1484: PPUSH
1485: LD_INT 3
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL_OW 49
// for i = 1 to 2 do
1495: LD_ADDR_VAR 0 2
1499: PUSH
1500: DOUBLE
1501: LD_INT 1
1503: DEC
1504: ST_TO_ADDR
1505: LD_INT 2
1507: PUSH
1508: FOR_TO
1509: IFFALSE 1602
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_INT 5
1518: PPUSH
1519: LD_EXP 4
1523: PPUSH
1524: CALL 9241 0 2
1528: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1529: LD_VAR 0 3
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1544: LD_VAR 0 3
1548: PPUSH
1549: LD_INT 22
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 30
1561: PUSH
1562: LD_INT 4
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 24
1571: PUSH
1572: LD_INT 251
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: EMPTY
1585: LIST
1586: PPUSH
1587: CALL_OW 69
1591: PUSH
1592: LD_INT 1
1594: ARRAY
1595: PPUSH
1596: CALL_OW 120
// end ;
1600: GO 1508
1602: POP
1603: POP
// end ; if game_diff > 1 then
1604: LD_EXP 2
1608: PUSH
1609: LD_INT 1
1611: GREATER
1612: IFFALSE 1650
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1614: LD_ADDR_VAR 0 3
1618: PUSH
1619: LD_INT 5
1621: PPUSH
1622: LD_EXP 4
1626: PPUSH
1627: CALL 9241 0 2
1631: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1632: LD_VAR 0 3
1636: PPUSH
1637: LD_INT 37
1639: PPUSH
1640: LD_INT 44
1642: PPUSH
1643: LD_INT 0
1645: PPUSH
1646: CALL_OW 48
// end ; if game_diff > 2 then
1650: LD_EXP 2
1654: PUSH
1655: LD_INT 2
1657: GREATER
1658: IFFALSE 1708
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1660: LD_ADDR_VAR 0 3
1664: PUSH
1665: LD_INT 5
1667: PPUSH
1668: LD_EXP 4
1672: PPUSH
1673: CALL 9241 0 2
1677: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1678: LD_VAR 0 3
1682: PPUSH
1683: LD_INT 106
1685: PPUSH
1686: LD_INT 45
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1696: LD_VAR 0 3
1700: PPUSH
1701: LD_INT 35
1703: PPUSH
1704: CALL_OW 120
// end ; if game_diff < 3 then
1708: LD_EXP 2
1712: PUSH
1713: LD_INT 3
1715: LESS
1716: IFFALSE 1725
// RemoveUnit ( east_bun ) ;
1718: LD_INT 35
1720: PPUSH
1721: CALL_OW 64
// if game_diff > 1 then
1725: LD_EXP 2
1729: PUSH
1730: LD_INT 1
1732: GREATER
1733: IFFALSE 1748
// SetTech ( tech_rocket , 1 , state_researched ) ;
1735: LD_INT 40
1737: PPUSH
1738: LD_INT 1
1740: PPUSH
1741: LD_INT 2
1743: PPUSH
1744: CALL_OW 322
// case game_diff of 1 :
1748: LD_EXP 2
1752: PUSH
1753: LD_INT 1
1755: DOUBLE
1756: EQUAL
1757: IFTRUE 1761
1759: GO 1835
1761: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1762: LD_ADDR_EXP 10
1766: PUSH
1767: LD_INT 26
1769: PUSH
1770: LD_INT 78
1772: PUSH
1773: LD_INT 52
1775: PUSH
1776: LD_INT 3
1778: PUSH
1779: LD_INT 26
1781: PUSH
1782: LD_INT 96
1784: PUSH
1785: LD_INT 58
1787: PUSH
1788: LD_INT 0
1790: PUSH
1791: LD_INT 32
1793: PUSH
1794: LD_INT 72
1796: PUSH
1797: LD_INT 34
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 32
1805: PUSH
1806: LD_INT 83
1808: PUSH
1809: LD_INT 54
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: ST_TO_ADDR
// end ; 2 :
1833: GO 2112
1835: LD_INT 2
1837: DOUBLE
1838: EQUAL
1839: IFTRUE 1843
1841: GO 1965
1843: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1844: LD_ADDR_EXP 10
1848: PUSH
1849: LD_INT 18
1851: PUSH
1852: LD_INT 73
1854: PUSH
1855: LD_INT 42
1857: PUSH
1858: LD_INT 2
1860: PUSH
1861: LD_INT 26
1863: PUSH
1864: LD_INT 78
1866: PUSH
1867: LD_INT 52
1869: PUSH
1870: LD_INT 3
1872: PUSH
1873: LD_INT 26
1875: PUSH
1876: LD_INT 96
1878: PUSH
1879: LD_INT 58
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: LD_INT 32
1887: PUSH
1888: LD_INT 72
1890: PUSH
1891: LD_INT 34
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 32
1899: PUSH
1900: LD_INT 83
1902: PUSH
1903: LD_INT 54
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 82
1914: PUSH
1915: LD_INT 38
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 26
1923: PUSH
1924: LD_INT 69
1926: PUSH
1927: LD_INT 39
1929: PUSH
1930: LD_INT 3
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: ST_TO_ADDR
// end ; 3 :
1963: GO 2112
1965: LD_INT 3
1967: DOUBLE
1968: EQUAL
1969: IFTRUE 1973
1971: GO 2111
1973: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1974: LD_ADDR_EXP 10
1978: PUSH
1979: LD_INT 18
1981: PUSH
1982: LD_INT 73
1984: PUSH
1985: LD_INT 42
1987: PUSH
1988: LD_INT 2
1990: PUSH
1991: LD_INT 26
1993: PUSH
1994: LD_INT 78
1996: PUSH
1997: LD_INT 52
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: LD_INT 26
2005: PUSH
2006: LD_INT 96
2008: PUSH
2009: LD_INT 58
2011: PUSH
2012: LD_INT 0
2014: PUSH
2015: LD_INT 32
2017: PUSH
2018: LD_INT 72
2020: PUSH
2021: LD_INT 34
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 32
2029: PUSH
2030: LD_INT 83
2032: PUSH
2033: LD_INT 54
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 82
2044: PUSH
2045: LD_INT 38
2047: PUSH
2048: LD_INT 2
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 103
2056: PUSH
2057: LD_INT 59
2059: PUSH
2060: LD_INT 3
2062: PUSH
2063: LD_INT 26
2065: PUSH
2066: LD_INT 69
2068: PUSH
2069: LD_INT 39
2071: PUSH
2072: LD_INT 3
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: ST_TO_ADDR
// end ; end ;
2109: GO 2112
2111: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2112: LD_ADDR_EXP 12
2116: PUSH
2117: LD_INT 48
2119: PUSH
2120: LD_INT 47
2122: PUSH
2123: LD_INT 49
2125: PUSH
2126: LD_INT 51
2128: PUSH
2129: LD_INT 69
2131: PUSH
2132: LD_INT 52
2134: PUSH
2135: LD_INT 39
2137: PUSH
2138: LD_INT 50
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: ST_TO_ADDR
// case game_diff of 1 :
2151: LD_EXP 2
2155: PUSH
2156: LD_INT 1
2158: DOUBLE
2159: EQUAL
2160: IFTRUE 2164
2162: GO 2238
2164: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2165: LD_ADDR_EXP 11
2169: PUSH
2170: LD_INT 3
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: LD_INT 1
2178: PUSH
2179: LD_INT 12
2181: PUSH
2182: LD_INT 4
2184: PUSH
2185: LD_INT 1
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: LD_INT 4
2193: PUSH
2194: LD_INT 4
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 5
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: LIST
2235: ST_TO_ADDR
// end ; 2 :
2236: GO 2403
2238: LD_INT 2
2240: DOUBLE
2241: EQUAL
2242: IFTRUE 2246
2244: GO 2320
2246: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2247: LD_ADDR_EXP 11
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: LD_INT 12
2263: PUSH
2264: LD_INT 4
2266: PUSH
2267: LD_INT 1
2269: PUSH
2270: LD_INT 1
2272: PUSH
2273: LD_INT 7
2275: PUSH
2276: LD_INT 4
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: ST_TO_ADDR
// end ; 3 :
2318: GO 2403
2320: LD_INT 3
2322: DOUBLE
2323: EQUAL
2324: IFTRUE 2328
2326: GO 2402
2328: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2329: LD_ADDR_EXP 11
2333: PUSH
2334: LD_INT 3
2336: PUSH
2337: LD_INT 1
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: LD_INT 12
2345: PUSH
2346: LD_INT 4
2348: PUSH
2349: LD_INT 1
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: LD_INT 7
2357: PUSH
2358: LD_INT 4
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 7
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: ST_TO_ADDR
// end ; end ;
2400: GO 2403
2402: POP
// end ; end ;
2403: LD_VAR 0 1
2407: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2408: GO 2410
2410: DISABLE
// begin sold_ocp := [ ] ;
2411: LD_ADDR_EXP 13
2415: PUSH
2416: EMPTY
2417: ST_TO_ADDR
// tower_list := [ ] ;
2418: LD_ADDR_EXP 14
2422: PUSH
2423: EMPTY
2424: ST_TO_ADDR
// end ;
2425: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2426: LD_EXP 1
2430: PUSH
2431: LD_INT 2
2433: EQUAL
2434: PUSH
2435: LD_EXP 8
2439: PUSH
2440: LD_INT 0
2442: EQUAL
2443: AND
2444: IFFALSE 4121
2446: GO 2448
2448: DISABLE
2449: LD_INT 0
2451: PPUSH
2452: PPUSH
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
2458: PPUSH
2459: PPUSH
2460: PPUSH
2461: PPUSH
2462: PPUSH
2463: PPUSH
// begin enable ;
2464: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2465: LD_ADDR_VAR 0 3
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 1
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 25
2482: PUSH
2483: LD_INT 1
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: PUSH
2490: LD_INT 24
2492: PUSH
2493: LD_INT 650
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: LIST
2504: PUSH
2505: EMPTY
2506: LIST
2507: PPUSH
2508: CALL_OW 69
2512: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2513: LD_ADDR_VAR 0 6
2517: PUSH
2518: LD_INT 22
2520: PUSH
2521: LD_INT 1
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PUSH
2528: LD_INT 25
2530: PUSH
2531: LD_INT 2
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: PUSH
2538: LD_INT 24
2540: PUSH
2541: LD_INT 650
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: PUSH
2553: EMPTY
2554: LIST
2555: PPUSH
2556: CALL_OW 69
2560: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2561: LD_ADDR_VAR 0 7
2565: PUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 1
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 25
2578: PUSH
2579: LD_INT 3
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: LD_INT 24
2588: PUSH
2589: LD_INT 650
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: LIST
2600: PUSH
2601: EMPTY
2602: LIST
2603: PPUSH
2604: CALL_OW 69
2608: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2609: LD_ADDR_VAR 0 8
2613: PUSH
2614: LD_INT 22
2616: PUSH
2617: LD_INT 1
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 25
2626: PUSH
2627: LD_INT 4
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_INT 24
2636: PUSH
2637: LD_INT 650
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: PUSH
2649: EMPTY
2650: LIST
2651: PPUSH
2652: CALL_OW 69
2656: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2657: LD_ADDR_VAR 0 9
2661: PUSH
2662: LD_INT 22
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 30
2674: PUSH
2675: LD_INT 32
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 58
2684: PUSH
2685: EMPTY
2686: LIST
2687: PUSH
2688: LD_INT 24
2690: PUSH
2691: LD_INT 251
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PPUSH
2704: CALL_OW 69
2708: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2709: LD_ADDR_VAR 0 10
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 1
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 2
2736: PUSH
2737: LD_INT 35
2739: PUSH
2740: LD_INT 7
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: LD_INT 35
2749: PUSH
2750: LD_INT 4
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 24
2764: PUSH
2765: LD_INT 251
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2786: LD_ADDR_VAR 0 11
2790: PUSH
2791: LD_INT 22
2793: PUSH
2794: LD_INT 1
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: LD_INT 21
2803: PUSH
2804: LD_INT 1
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 3
2813: PUSH
2814: LD_INT 24
2816: PUSH
2817: LD_INT 650
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: EMPTY
2834: LIST
2835: PPUSH
2836: CALL_OW 69
2840: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2841: LD_ADDR_VAR 0 12
2845: PUSH
2846: LD_INT 11
2848: PPUSH
2849: LD_INT 22
2851: PUSH
2852: LD_INT 1
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 21
2861: PUSH
2862: LD_INT 3
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PUSH
2869: LD_INT 3
2871: PUSH
2872: LD_INT 24
2874: PUSH
2875: LD_INT 1000
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: LIST
2890: PUSH
2891: EMPTY
2892: LIST
2893: PPUSH
2894: CALL_OW 70
2898: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2899: LD_ADDR_VAR 0 13
2903: PUSH
2904: LD_INT 22
2906: PUSH
2907: LD_INT 1
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 21
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 24
2929: PUSH
2930: LD_INT 650
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: PPUSH
2949: CALL_OW 69
2953: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2954: LD_INT 1
2956: PPUSH
2957: CALL_OW 274
2961: PPUSH
2962: LD_INT 2
2964: PPUSH
2965: CALL_OW 275
2969: PUSH
2970: LD_INT 30
2972: LESSEQUAL
2973: IFFALSE 2993
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2975: LD_INT 1
2977: PPUSH
2978: CALL_OW 274
2982: PPUSH
2983: LD_INT 2
2985: PPUSH
2986: LD_INT 100
2988: PPUSH
2989: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
2993: LD_ADDR_VAR 0 5
2997: PUSH
2998: LD_VAR 0 3
3002: PUSH
3003: LD_EXP 13
3007: DIFF
3008: ST_TO_ADDR
// if sold > 0 then
3009: LD_VAR 0 3
3013: PUSH
3014: LD_INT 0
3016: GREATER
3017: IFFALSE 3139
// for i = 1 to sold_em do
3019: LD_ADDR_VAR 0 1
3023: PUSH
3024: DOUBLE
3025: LD_INT 1
3027: DEC
3028: ST_TO_ADDR
3029: LD_VAR 0 5
3033: PUSH
3034: FOR_TO
3035: IFFALSE 3137
// if empty_towers > 0 then
3037: LD_VAR 0 9
3041: PUSH
3042: LD_INT 0
3044: GREATER
3045: IFFALSE 3073
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3047: LD_VAR 0 5
3051: PUSH
3052: LD_VAR 0 1
3056: ARRAY
3057: PPUSH
3058: LD_VAR 0 9
3062: PUSH
3063: LD_INT 1
3065: ARRAY
3066: PPUSH
3067: CALL_OW 120
3071: GO 3135
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3073: LD_VAR 0 5
3077: PUSH
3078: LD_VAR 0 1
3082: ARRAY
3083: PPUSH
3084: LD_INT 22
3086: PUSH
3087: LD_INT 1
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 30
3096: PUSH
3097: LD_INT 4
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 24
3106: PUSH
3107: LD_INT 251
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: LIST
3118: PUSH
3119: EMPTY
3120: LIST
3121: PPUSH
3122: CALL_OW 69
3126: PUSH
3127: LD_INT 1
3129: ARRAY
3130: PPUSH
3131: CALL_OW 120
3135: GO 3034
3137: POP
3138: POP
// if mechs > 0 then
3139: LD_VAR 0 7
3143: PUSH
3144: LD_INT 0
3146: GREATER
3147: IFFALSE 3225
// for i = 1 to mechs do
3149: LD_ADDR_VAR 0 1
3153: PUSH
3154: DOUBLE
3155: LD_INT 1
3157: DEC
3158: ST_TO_ADDR
3159: LD_VAR 0 7
3163: PUSH
3164: FOR_TO
3165: IFFALSE 3223
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3167: LD_VAR 0 7
3171: PUSH
3172: LD_VAR 0 1
3176: ARRAY
3177: PPUSH
3178: CALL_OW 310
3182: NOT
3183: PUSH
3184: LD_VAR 0 7
3188: PUSH
3189: LD_VAR 0 1
3193: ARRAY
3194: PPUSH
3195: CALL_OW 314
3199: NOT
3200: AND
3201: IFFALSE 3221
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3203: LD_VAR 0 7
3207: PUSH
3208: LD_VAR 0 1
3212: ARRAY
3213: PPUSH
3214: LD_INT 14
3216: PPUSH
3217: CALL_OW 120
3221: GO 3164
3223: POP
3224: POP
// if sci > 0 then
3225: LD_VAR 0 8
3229: PUSH
3230: LD_INT 0
3232: GREATER
3233: IFFALSE 3303
// for i = 1 to sci do
3235: LD_ADDR_VAR 0 1
3239: PUSH
3240: DOUBLE
3241: LD_INT 1
3243: DEC
3244: ST_TO_ADDR
3245: LD_VAR 0 8
3249: PUSH
3250: FOR_TO
3251: IFFALSE 3301
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3253: LD_VAR 0 11
3257: PUSH
3258: LD_INT 0
3260: EQUAL
3261: PUSH
3262: LD_VAR 0 8
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: CALL_OW 314
3277: NOT
3278: AND
3279: IFFALSE 3299
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3281: LD_VAR 0 8
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_INT 9
3294: PPUSH
3295: CALL_OW 120
3299: GO 3250
3301: POP
3302: POP
// if damage_build > 0 then
3303: LD_VAR 0 12
3307: PUSH
3308: LD_INT 0
3310: GREATER
3311: IFFALSE 3359
// for i = 1 to engs do
3313: LD_ADDR_VAR 0 1
3317: PUSH
3318: DOUBLE
3319: LD_INT 1
3321: DEC
3322: ST_TO_ADDR
3323: LD_VAR 0 6
3327: PUSH
3328: FOR_TO
3329: IFFALSE 3357
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3331: LD_VAR 0 6
3335: PUSH
3336: LD_VAR 0 1
3340: ARRAY
3341: PPUSH
3342: LD_VAR 0 12
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PPUSH
3351: CALL_OW 130
3355: GO 3328
3357: POP
3358: POP
// if ai_build > 0 then
3359: LD_EXP 10
3363: PUSH
3364: LD_INT 0
3366: GREATER
3367: IFFALSE 3460
// for i = 1 to engs do
3369: LD_ADDR_VAR 0 1
3373: PUSH
3374: DOUBLE
3375: LD_INT 1
3377: DEC
3378: ST_TO_ADDR
3379: LD_VAR 0 6
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3458
// if not HasTask ( engs [ i ] ) then
3387: LD_VAR 0 6
3391: PUSH
3392: LD_VAR 0 1
3396: ARRAY
3397: PPUSH
3398: CALL_OW 314
3402: NOT
3403: IFFALSE 3456
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3405: LD_VAR 0 6
3409: PUSH
3410: LD_VAR 0 1
3414: ARRAY
3415: PPUSH
3416: LD_EXP 10
3420: PUSH
3421: LD_INT 1
3423: ARRAY
3424: PPUSH
3425: LD_EXP 10
3429: PUSH
3430: LD_INT 2
3432: ARRAY
3433: PPUSH
3434: LD_EXP 10
3438: PUSH
3439: LD_INT 3
3441: ARRAY
3442: PPUSH
3443: LD_EXP 10
3447: PUSH
3448: LD_INT 4
3450: ARRAY
3451: PPUSH
3452: CALL_OW 145
3456: GO 3384
3458: POP
3459: POP
// if damage_pep > 0 and sci > 0 then
3460: LD_VAR 0 11
3464: PUSH
3465: LD_INT 0
3467: GREATER
3468: PUSH
3469: LD_VAR 0 8
3473: PUSH
3474: LD_INT 0
3476: GREATER
3477: AND
3478: IFFALSE 3664
// begin for i = 1 to sci do
3480: LD_ADDR_VAR 0 1
3484: PUSH
3485: DOUBLE
3486: LD_INT 1
3488: DEC
3489: ST_TO_ADDR
3490: LD_VAR 0 8
3494: PUSH
3495: FOR_TO
3496: IFFALSE 3515
// ComExitBuilding ( sci [ i ] ) ;
3498: LD_VAR 0 8
3502: PUSH
3503: LD_VAR 0 1
3507: ARRAY
3508: PPUSH
3509: CALL_OW 122
3513: GO 3495
3515: POP
3516: POP
// for i = 1 to damage_pep do
3517: LD_ADDR_VAR 0 1
3521: PUSH
3522: DOUBLE
3523: LD_INT 1
3525: DEC
3526: ST_TO_ADDR
3527: LD_VAR 0 11
3531: PUSH
3532: FOR_TO
3533: IFFALSE 3612
// begin if not IsInUnit ( damage_pep [ i ] ) then
3535: LD_VAR 0 11
3539: PUSH
3540: LD_VAR 0 1
3544: ARRAY
3545: PPUSH
3546: CALL_OW 310
3550: NOT
3551: IFFALSE 3568
// ComExitBuilding ( damage_pep [ i ] ) ;
3553: LD_VAR 0 11
3557: PUSH
3558: LD_VAR 0 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3568: LD_VAR 0 11
3572: PUSH
3573: LD_VAR 0 1
3577: ARRAY
3578: PPUSH
3579: LD_INT 9
3581: PPUSH
3582: CALL_OW 308
3586: NOT
3587: IFFALSE 3610
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3589: LD_VAR 0 11
3593: PUSH
3594: LD_VAR 0 1
3598: ARRAY
3599: PPUSH
3600: LD_INT 96
3602: PPUSH
3603: LD_INT 52
3605: PPUSH
3606: CALL_OW 111
// end ;
3610: GO 3532
3612: POP
3613: POP
// if damage_pep = 0 then
3614: LD_VAR 0 11
3618: PUSH
3619: LD_INT 0
3621: EQUAL
3622: IFFALSE 3664
// for i = 1 to sci do
3624: LD_ADDR_VAR 0 1
3628: PUSH
3629: DOUBLE
3630: LD_INT 1
3632: DEC
3633: ST_TO_ADDR
3634: LD_VAR 0 8
3638: PUSH
3639: FOR_TO
3640: IFFALSE 3662
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3642: LD_VAR 0 8
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: LD_INT 9
3655: PPUSH
3656: CALL_OW 120
3660: GO 3639
3662: POP
3663: POP
// end ; if ai_tech > 0 then
3664: LD_EXP 12
3668: PUSH
3669: LD_INT 0
3671: GREATER
3672: IFFALSE 3690
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3674: LD_INT 9
3676: PPUSH
3677: LD_EXP 12
3681: PUSH
3682: LD_INT 1
3684: ARRAY
3685: PPUSH
3686: CALL_OW 124
// if ai_vehs > 0 then
3690: LD_EXP 11
3694: PUSH
3695: LD_INT 0
3697: GREATER
3698: IFFALSE 3826
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3700: LD_INT 14
3702: PPUSH
3703: LD_EXP 11
3707: PUSH
3708: LD_INT 1
3710: ARRAY
3711: PPUSH
3712: LD_EXP 11
3716: PUSH
3717: LD_INT 2
3719: ARRAY
3720: PPUSH
3721: LD_EXP 11
3725: PUSH
3726: LD_INT 3
3728: ARRAY
3729: PPUSH
3730: LD_EXP 11
3734: PUSH
3735: LD_INT 4
3737: ARRAY
3738: PPUSH
3739: CALL_OW 448
3743: IFFALSE 3826
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3745: LD_INT 14
3747: PPUSH
3748: LD_EXP 11
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_EXP 11
3761: PUSH
3762: LD_INT 2
3764: ARRAY
3765: PPUSH
3766: LD_EXP 11
3770: PUSH
3771: LD_INT 3
3773: ARRAY
3774: PPUSH
3775: LD_EXP 11
3779: PUSH
3780: LD_INT 4
3782: ARRAY
3783: PPUSH
3784: CALL_OW 125
// for i = 1 to 4 do
3788: LD_ADDR_VAR 0 1
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_INT 4
3800: PUSH
3801: FOR_TO
3802: IFFALSE 3824
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3804: LD_ADDR_EXP 11
3808: PUSH
3809: LD_EXP 11
3813: PPUSH
3814: LD_INT 1
3816: PPUSH
3817: CALL_OW 3
3821: ST_TO_ADDR
3822: GO 3801
3824: POP
3825: POP
// end ; if tower_list > 0 then
3826: LD_EXP 14
3830: PUSH
3831: LD_INT 0
3833: GREATER
3834: IFFALSE 3938
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3836: LD_INT 40
3838: PPUSH
3839: LD_INT 1
3841: PPUSH
3842: CALL_OW 321
3846: PUSH
3847: LD_INT 2
3849: EQUAL
3850: IFFALSE 3888
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3852: LD_EXP 14
3856: PUSH
3857: LD_INT 1
3859: ARRAY
3860: PPUSH
3861: LD_INT 7
3863: PPUSH
3864: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3868: LD_ADDR_EXP 14
3872: PUSH
3873: LD_EXP 14
3877: PPUSH
3878: LD_INT 1
3880: PPUSH
3881: CALL_OW 3
3885: ST_TO_ADDR
// end else
3886: GO 3938
// if GetTech ( tech_gatling , 1 ) = state_researched then
3888: LD_INT 69
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: CALL_OW 321
3898: PUSH
3899: LD_INT 2
3901: EQUAL
3902: IFFALSE 3938
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3904: LD_EXP 14
3908: PUSH
3909: LD_INT 1
3911: ARRAY
3912: PPUSH
3913: LD_INT 4
3915: PPUSH
3916: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3920: LD_ADDR_EXP 14
3924: PUSH
3925: LD_EXP 14
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: CALL_OW 3
3937: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3938: LD_VAR 0 13
3942: PUSH
3943: LD_INT 0
3945: GREATER
3946: IFFALSE 4121
// begin for i = 1 to damage_vehs do
3948: LD_ADDR_VAR 0 1
3952: PUSH
3953: DOUBLE
3954: LD_INT 1
3956: DEC
3957: ST_TO_ADDR
3958: LD_VAR 0 13
3962: PUSH
3963: FOR_TO
3964: IFFALSE 4119
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3966: LD_ADDR_VAR 0 2
3970: PUSH
3971: LD_VAR 0 13
3975: PUSH
3976: LD_VAR 0 1
3980: ARRAY
3981: PPUSH
3982: CALL_OW 311
3986: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
3987: LD_VAR 0 13
3991: PUSH
3992: LD_VAR 0 1
3996: ARRAY
3997: PPUSH
3998: LD_INT 10
4000: PPUSH
4001: CALL_OW 308
4005: NOT
4006: IFFALSE 4022
// ComMoveToArea ( un , repair_area ) else
4008: LD_VAR 0 2
4012: PPUSH
4013: LD_INT 10
4015: PPUSH
4016: CALL_OW 113
4020: GO 4117
// begin if IsInUnit ( un ) then
4022: LD_VAR 0 2
4026: PPUSH
4027: CALL_OW 310
4031: IFFALSE 4042
// ComExitVehicle ( un ) ;
4033: LD_VAR 0 2
4037: PPUSH
4038: CALL_OW 121
// Wait ( 0 0$01 ) ;
4042: LD_INT 35
4044: PPUSH
4045: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4049: LD_VAR 0 2
4053: PPUSH
4054: LD_VAR 0 13
4058: PUSH
4059: LD_VAR 0 1
4063: ARRAY
4064: PPUSH
4065: CALL_OW 129
// Wait ( 0 0$01 ) ;
4069: LD_INT 35
4071: PPUSH
4072: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4076: LD_VAR 0 13
4080: PUSH
4081: LD_VAR 0 1
4085: ARRAY
4086: PPUSH
4087: CALL_OW 256
4091: PUSH
4092: LD_INT 1000
4094: EQUAL
4095: IFFALSE 4049
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_VAR 0 13
4106: PUSH
4107: LD_VAR 0 1
4111: ARRAY
4112: PPUSH
4113: CALL_OW 120
// end ; end ;
4117: GO 3963
4119: POP
4120: POP
// end ; end ;
4121: PPOPN 13
4123: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4124: LD_EXP 1
4128: PUSH
4129: LD_INT 2
4131: EQUAL
4132: PUSH
4133: LD_EXP 8
4137: PUSH
4138: LD_INT 0
4140: EQUAL
4141: AND
4142: IFFALSE 4321
4144: GO 4146
4146: DISABLE
4147: LD_INT 0
4149: PPUSH
4150: PPUSH
4151: PPUSH
4152: PPUSH
// begin enable ;
4153: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4154: LD_ADDR_VAR 0 3
4158: PUSH
4159: LD_INT 22
4161: PUSH
4162: LD_INT 1
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 24
4181: PUSH
4182: LD_INT 650
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: LD_INT 34
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: EMPTY
4213: LIST
4214: PPUSH
4215: CALL_OW 69
4219: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4220: LD_ADDR_VAR 0 4
4224: PUSH
4225: LD_INT 11
4227: PPUSH
4228: LD_INT 22
4230: PUSH
4231: LD_INT 3
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 70
4242: ST_TO_ADDR
// if filter > 0 then
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 0
4250: GREATER
4251: IFFALSE 4321
// for i = 1 to filter do
4253: LD_ADDR_VAR 0 1
4257: PUSH
4258: DOUBLE
4259: LD_INT 1
4261: DEC
4262: ST_TO_ADDR
4263: LD_VAR 0 3
4267: PUSH
4268: FOR_TO
4269: IFFALSE 4319
// if enemy > 0 then
4271: LD_VAR 0 4
4275: PUSH
4276: LD_INT 0
4278: GREATER
4279: IFFALSE 4317
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4281: LD_VAR 0 3
4285: PUSH
4286: LD_VAR 0 1
4290: ARRAY
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: LD_VAR 0 3
4301: PUSH
4302: LD_VAR 0 1
4306: ARRAY
4307: PPUSH
4308: CALL_OW 74
4312: PPUSH
4313: CALL_OW 115
4317: GO 4268
4319: POP
4320: POP
// end ;
4321: PPOPN 4
4323: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4324: LD_EXP 1
4328: PUSH
4329: LD_INT 2
4331: EQUAL
4332: PUSH
4333: LD_EXP 8
4337: PUSH
4338: LD_INT 0
4340: EQUAL
4341: AND
4342: IFFALSE 4789
4344: GO 4346
4346: DISABLE
4347: LD_INT 0
4349: PPUSH
4350: PPUSH
4351: PPUSH
4352: PPUSH
4353: PPUSH
4354: PPUSH
4355: PPUSH
// begin enable ;
4356: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4357: LD_ADDR_VAR 0 5
4361: PUSH
4362: LD_INT 50
4364: PUSH
4365: EMPTY
4366: LIST
4367: PUSH
4368: LD_INT 22
4370: PUSH
4371: LD_INT 1
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: PUSH
4378: LD_INT 2
4380: PUSH
4381: LD_INT 25
4383: PUSH
4384: LD_INT 2
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 25
4393: PUSH
4394: LD_INT 16
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: LIST
4410: PPUSH
4411: CALL_OW 69
4415: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4416: LD_ADDR_VAR 0 6
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 34
4433: PUSH
4434: LD_INT 12
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 650
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PPUSH
4456: CALL_OW 69
4460: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4461: LD_ADDR_VAR 0 7
4465: PUSH
4466: LD_INT 22
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 2
4478: PUSH
4479: LD_INT 30
4481: PUSH
4482: LD_INT 0
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PUSH
4489: LD_INT 30
4491: PUSH
4492: LD_INT 1
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PPUSH
4508: CALL_OW 69
4512: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4513: LD_ADDR_VAR 0 4
4517: PUSH
4518: LD_INT 7
4520: PPUSH
4521: CALL_OW 435
4525: ST_TO_ADDR
// c = 1 ;
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// if cargo > 0 then
4534: LD_VAR 0 6
4538: PUSH
4539: LD_INT 0
4541: GREATER
4542: IFFALSE 4789
// while c < skr do
4544: LD_VAR 0 2
4548: PUSH
4549: LD_VAR 0 4
4553: LESS
4554: IFFALSE 4789
// begin if cargo > 0 then
4556: LD_VAR 0 6
4560: PUSH
4561: LD_INT 0
4563: GREATER
4564: IFFALSE 4787
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4566: LD_VAR 0 6
4570: PUSH
4571: LD_INT 1
4573: ARRAY
4574: PPUSH
4575: CALL_OW 261
4579: PUSH
4580: LD_INT 40
4582: GREATER
4583: IFFALSE 4681
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4585: LD_VAR 0 4
4589: PUSH
4590: LD_VAR 0 2
4594: ARRAY
4595: PPUSH
4596: LD_VAR 0 4
4600: PUSH
4601: LD_VAR 0 2
4605: PUSH
4606: LD_INT 1
4608: PLUS
4609: ARRAY
4610: PPUSH
4611: LD_INT 3
4613: PPUSH
4614: CALL 10404 0 3
4618: PUSH
4619: LD_INT 15
4621: GREATER
4622: PUSH
4623: LD_VAR 0 6
4627: PUSH
4628: LD_INT 1
4630: ARRAY
4631: PPUSH
4632: CALL_OW 314
4636: NOT
4637: AND
4638: IFFALSE 4679
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4640: LD_VAR 0 6
4644: PUSH
4645: LD_INT 1
4647: ARRAY
4648: PPUSH
4649: LD_VAR 0 4
4653: PUSH
4654: LD_VAR 0 2
4658: ARRAY
4659: PPUSH
4660: LD_VAR 0 4
4664: PUSH
4665: LD_VAR 0 2
4669: PUSH
4670: LD_INT 1
4672: PLUS
4673: ARRAY
4674: PPUSH
4675: CALL_OW 117
// end else
4679: GO 4773
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4681: LD_VAR 0 6
4685: PUSH
4686: LD_INT 1
4688: ARRAY
4689: PPUSH
4690: LD_VAR 0 7
4694: PUSH
4695: LD_INT 1
4697: ARRAY
4698: PPUSH
4699: CALL_OW 250
4703: PPUSH
4704: LD_VAR 0 7
4708: PUSH
4709: LD_INT 1
4711: ARRAY
4712: PPUSH
4713: CALL_OW 251
4717: PPUSH
4718: CALL_OW 111
// Wait ( 0 0$01 ) ;
4722: LD_INT 35
4724: PPUSH
4725: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4729: LD_VAR 0 6
4733: PUSH
4734: LD_INT 1
4736: ARRAY
4737: PPUSH
4738: LD_VAR 0 7
4742: PUSH
4743: LD_INT 1
4745: ARRAY
4746: PPUSH
4747: CALL_OW 296
4751: PUSH
4752: LD_INT 7
4754: LESS
4755: IFFALSE 4681
// SetFuel ( cargo [ 1 ] , 100 ) ;
4757: LD_VAR 0 6
4761: PUSH
4762: LD_INT 1
4764: ARRAY
4765: PPUSH
4766: LD_INT 100
4768: PPUSH
4769: CALL_OW 240
// end ; c = c + 2 ;
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: LD_VAR 0 2
4782: PUSH
4783: LD_INT 2
4785: PLUS
4786: ST_TO_ADDR
// end ; end ;
4787: GO 4544
// end ;
4789: PPOPN 7
4791: END
// on EnterBuilding ( b , un ) do var i , filter ;
4792: LD_INT 0
4794: PPUSH
4795: PPUSH
// begin if game_type = 2 and depot_captured = false then
4796: LD_EXP 1
4800: PUSH
4801: LD_INT 2
4803: EQUAL
4804: PUSH
4805: LD_EXP 8
4809: PUSH
4810: LD_INT 0
4812: EQUAL
4813: AND
4814: IFFALSE 4868
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4816: LD_VAR 0 1
4820: PUSH
4821: LD_INT 22
4823: PUSH
4824: LD_INT 1
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 30
4833: PUSH
4834: LD_INT 32
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PPUSH
4845: CALL_OW 69
4849: IN
4850: IFFALSE 4868
// sold_ocp := sold_ocp ^ un ;
4852: LD_ADDR_EXP 13
4856: PUSH
4857: LD_EXP 13
4861: PUSH
4862: LD_VAR 0 2
4866: ADD
4867: ST_TO_ADDR
// end ; end ;
4868: PPOPN 4
4870: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4871: LD_INT 0
4873: PPUSH
4874: PPUSH
// begin if un in sold_ocp then
4875: LD_VAR 0 2
4879: PUSH
4880: LD_EXP 13
4884: IN
4885: IFFALSE 4907
// sold_ocp := Delete ( sold_ocp , un ) ;
4887: LD_ADDR_EXP 13
4891: PUSH
4892: LD_EXP 13
4896: PPUSH
4897: LD_VAR 0 2
4901: PPUSH
4902: CALL_OW 3
4906: ST_TO_ADDR
// end ;
4907: PPOPN 4
4909: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4910: LD_INT 0
4912: PPUSH
4913: PPUSH
4914: PPUSH
// begin if game_type = 2 then
4915: LD_EXP 1
4919: PUSH
4920: LD_INT 2
4922: EQUAL
4923: IFFALSE 4970
// begin if GetSide ( lab ) = 1 then
4925: LD_VAR 0 2
4929: PPUSH
4930: CALL_OW 255
4934: PUSH
4935: LD_INT 1
4937: EQUAL
4938: IFFALSE 4970
// if tech in ai_tech then
4940: LD_VAR 0 1
4944: PUSH
4945: LD_EXP 12
4949: IN
4950: IFFALSE 4970
// ai_tech := Delete ( ai_tech , 1 ) ;
4952: LD_ADDR_EXP 12
4956: PUSH
4957: LD_EXP 12
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: CALL_OW 3
4969: ST_TO_ADDR
// end ; end ;
4970: PPOPN 5
4972: END
// on BuildingComplete ( b ) do var i , side , un ;
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin if game_type = 2 and depot_captured = false then
4978: LD_EXP 1
4982: PUSH
4983: LD_INT 2
4985: EQUAL
4986: PUSH
4987: LD_EXP 8
4991: PUSH
4992: LD_INT 0
4994: EQUAL
4995: AND
4996: IFFALSE 5103
// begin if GetSide ( b ) = 1 then
4998: LD_VAR 0 1
5002: PPUSH
5003: CALL_OW 255
5007: PUSH
5008: LD_INT 1
5010: EQUAL
5011: IFFALSE 5051
// for i = 1 to 4 do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_INT 4
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5049
// ai_build := Delete ( ai_build , 1 ) ;
5029: LD_ADDR_EXP 10
5033: PUSH
5034: LD_EXP 10
5038: PPUSH
5039: LD_INT 1
5041: PPUSH
5042: CALL_OW 3
5046: ST_TO_ADDR
5047: GO 5026
5049: POP
5050: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5051: LD_VAR 0 1
5055: PUSH
5056: LD_INT 22
5058: PUSH
5059: LD_INT 1
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: PUSH
5066: LD_INT 30
5068: PUSH
5069: LD_INT 32
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PPUSH
5080: CALL_OW 69
5084: IN
5085: IFFALSE 5103
// tower_list := tower_list ^ b ;
5087: LD_ADDR_EXP 14
5091: PUSH
5092: LD_EXP 14
5096: PUSH
5097: LD_VAR 0 1
5101: ADD
5102: ST_TO_ADDR
// end ; end ;
5103: PPOPN 4
5105: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5106: LD_EXP 1
5110: PUSH
5111: LD_INT 1
5113: EQUAL
5114: IFFALSE 5312
5116: GO 5118
5118: DISABLE
// begin enable ;
5119: ENABLE
// if timer <= 20 20$00 then
5120: LD_EXP 6
5124: PUSH
5125: LD_INT 42000
5127: LESSEQUAL
5128: IFFALSE 5163
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5130: LD_ADDR_EXP 15
5134: PUSH
5135: LD_INT 5
5137: PUSH
5138: LD_INT 6
5140: PUSH
5141: LD_INT 7
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: LD_EXP 2
5153: ARRAY
5154: ST_TO_ADDR
// enemy_typ := 1 ;
5155: LD_ADDR_EXP 16
5159: PUSH
5160: LD_INT 1
5162: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5163: LD_EXP 6
5167: PUSH
5168: LD_INT 42000
5170: GREATER
5171: PUSH
5172: LD_EXP 6
5176: PUSH
5177: LD_INT 84000
5179: LESSEQUAL
5180: AND
5181: IFFALSE 5216
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5183: LD_ADDR_EXP 15
5187: PUSH
5188: LD_INT 6
5190: PUSH
5191: LD_INT 8
5193: PUSH
5194: LD_INT 9
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: PUSH
5202: LD_EXP 2
5206: ARRAY
5207: ST_TO_ADDR
// enemy_typ := 2 ;
5208: LD_ADDR_EXP 16
5212: PUSH
5213: LD_INT 2
5215: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5216: LD_EXP 6
5220: PUSH
5221: LD_INT 84000
5223: GREATER
5224: PUSH
5225: LD_EXP 6
5229: PUSH
5230: LD_INT 126000
5232: LESSEQUAL
5233: AND
5234: IFFALSE 5269
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5236: LD_ADDR_EXP 15
5240: PUSH
5241: LD_INT 8
5243: PUSH
5244: LD_INT 9
5246: PUSH
5247: LD_INT 10
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: PUSH
5255: LD_EXP 2
5259: ARRAY
5260: ST_TO_ADDR
// enemy_typ := 3 ;
5261: LD_ADDR_EXP 16
5265: PUSH
5266: LD_INT 3
5268: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5269: LD_EXP 6
5273: PUSH
5274: LD_INT 126000
5276: GREATER
5277: IFFALSE 5312
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5279: LD_ADDR_EXP 15
5283: PUSH
5284: LD_INT 10
5286: PUSH
5287: LD_INT 12
5289: PUSH
5290: LD_INT 14
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: LD_EXP 2
5302: ARRAY
5303: ST_TO_ADDR
// enemy_typ := 3 ;
5304: LD_ADDR_EXP 16
5308: PUSH
5309: LD_INT 3
5311: ST_TO_ADDR
// end ; end ;
5312: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5313: LD_EXP 6
5317: PUSH
5318: LD_INT 16800
5320: PUSH
5321: LD_INT 17850
5323: PUSH
5324: LD_INT 18900
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: LIST
5331: PUSH
5332: LD_EXP 2
5336: ARRAY
5337: GREATEREQUAL
5338: PUSH
5339: LD_EXP 1
5343: PUSH
5344: LD_INT 1
5346: EQUAL
5347: AND
5348: IFFALSE 5552
5350: GO 5352
5352: DISABLE
5353: LD_INT 0
5355: PPUSH
// begin uc_nation := 1 ;
5356: LD_ADDR_OWVAR 21
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// uc_side := 4 ;
5364: LD_ADDR_OWVAR 20
5368: PUSH
5369: LD_INT 4
5371: ST_TO_ADDR
// hc_sex := sex_male ;
5372: LD_ADDR_OWVAR 27
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// hc_class := 1 ;
5380: LD_ADDR_OWVAR 28
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// hc_gallery :=  ;
5388: LD_ADDR_OWVAR 33
5392: PUSH
5393: LD_STRING 
5395: ST_TO_ADDR
// hc_name :=  ;
5396: LD_ADDR_OWVAR 26
5400: PUSH
5401: LD_STRING 
5403: ST_TO_ADDR
// am_com2 := CreateHuman ;
5404: LD_ADDR_EXP 17
5408: PUSH
5409: CALL_OW 44
5413: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5414: LD_EXP 17
5418: PPUSH
5419: LD_STRING D-rus
5421: PPUSH
5422: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5426: LD_ADDR_VAR 0 1
5430: PUSH
5431: LD_INT 6
5433: PUSH
5434: LD_INT 5
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: ST_TO_ADDR
// while ( true ) do
5441: LD_INT 1
5443: IFFALSE 5552
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5445: LD_INT 13650
5447: PPUSH
5448: LD_INT 17920
5450: PPUSH
5451: CALL_OW 12
5455: PPUSH
5456: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5460: LD_INT 3
5462: PPUSH
5463: LD_EXP 15
5467: PPUSH
5468: LD_EXP 16
5472: PPUSH
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL 7986 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5482: LD_EXP 6
5486: PUSH
5487: LD_INT 115500
5489: PUSH
5490: LD_INT 94500
5492: PUSH
5493: LD_INT 73500
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: LD_OWVAR 67
5505: ARRAY
5506: GREATER
5507: IFFALSE 5550
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5509: LD_INT 1050
5511: PPUSH
5512: LD_INT 3150
5514: PPUSH
5515: CALL_OW 12
5519: PPUSH
5520: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5524: LD_INT 3
5526: PPUSH
5527: LD_EXP 15
5531: PUSH
5532: LD_INT 2
5534: DIVREAL
5535: PPUSH
5536: LD_EXP 16
5540: PPUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL 7986 0 4
// end ; end ;
5550: GO 5441
// end ;
5552: PPOPN 1
5554: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5555: LD_INT 1
5557: PPUSH
5558: CALL_OW 274
5562: PPUSH
5563: LD_INT 3
5565: PPUSH
5566: CALL_OW 275
5570: PUSH
5571: LD_EXP 7
5575: EQUAL
5576: IFFALSE 5858
5578: GO 5580
5580: DISABLE
5581: LD_INT 0
5583: PPUSH
5584: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5585: LD_EXP 17
5589: PPUSH
5590: LD_STRING D-help
5592: PPUSH
5593: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5597: LD_INT 7035
5599: PPUSH
5600: LD_INT 16065
5602: PPUSH
5603: CALL_OW 12
5607: PPUSH
5608: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5612: LD_INT 35
5614: PPUSH
5615: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5619: LD_INT 22
5621: PUSH
5622: LD_INT 3
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: CALL_OW 69
5633: PUSH
5634: LD_INT 0
5636: EQUAL
5637: IFFALSE 5612
// uc_side := 1 ;
5639: LD_ADDR_OWVAR 20
5643: PUSH
5644: LD_INT 1
5646: ST_TO_ADDR
// uc_nation := 1 ;
5647: LD_ADDR_OWVAR 21
5651: PUSH
5652: LD_INT 1
5654: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5655: LD_ADDR_VAR 0 1
5659: PUSH
5660: DOUBLE
5661: LD_INT 1
5663: DEC
5664: ST_TO_ADDR
5665: LD_INT 3
5667: PUSH
5668: LD_EXP 2
5672: PLUS
5673: PUSH
5674: FOR_TO
5675: IFFALSE 5720
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5677: LD_ADDR_VAR 0 2
5681: PUSH
5682: LD_INT 1
5684: PPUSH
5685: LD_INT 4
5687: PPUSH
5688: CALL_OW 12
5692: PPUSH
5693: LD_EXP 3
5697: PPUSH
5698: CALL 9241 0 2
5702: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5703: LD_VAR 0 2
5707: PPUSH
5708: LD_INT 5
5710: PPUSH
5711: LD_INT 0
5713: PPUSH
5714: CALL_OW 49
// end ;
5718: GO 5674
5720: POP
5721: POP
// case game_diff of 1 :
5722: LD_EXP 2
5726: PUSH
5727: LD_INT 1
5729: DOUBLE
5730: EQUAL
5731: IFTRUE 5735
5733: GO 5762
5735: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5736: LD_INT 4
5738: PPUSH
5739: LD_INT 1
5741: PPUSH
5742: LD_INT 5
5744: PPUSH
5745: LD_INT 5
5747: PPUSH
5748: LD_INT 0
5750: PPUSH
5751: LD_EXP 3
5755: PPUSH
5756: CALL 9780 0 6
5760: GO 5833
5762: LD_INT 2
5764: DOUBLE
5765: EQUAL
5766: IFTRUE 5770
5768: GO 5797
5770: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5771: LD_INT 3
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: LD_INT 5
5779: PPUSH
5780: LD_INT 5
5782: PPUSH
5783: LD_INT 0
5785: PPUSH
5786: LD_EXP 3
5790: PPUSH
5791: CALL 9780 0 6
5795: GO 5833
5797: LD_INT 3
5799: DOUBLE
5800: EQUAL
5801: IFTRUE 5805
5803: GO 5832
5805: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5806: LD_INT 3
5808: PPUSH
5809: LD_INT 1
5811: PPUSH
5812: LD_INT 3
5814: PPUSH
5815: LD_INT 5
5817: PPUSH
5818: LD_INT 0
5820: PPUSH
5821: LD_EXP 3
5825: PPUSH
5826: CALL 9780 0 6
5830: GO 5833
5832: POP
// DialogueOn ;
5833: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5837: LD_INT 91
5839: PPUSH
5840: LD_INT 115
5842: PPUSH
5843: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5847: LD_INT 10
5849: PPUSH
5850: CALL_OW 67
// DialogueOff ;
5854: CALL_OW 7
// end ;
5858: PPOPN 2
5860: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5861: LD_INT 0
5863: PPUSH
5864: PPUSH
5865: PPUSH
5866: PPUSH
5867: PPUSH
5868: PPUSH
5869: PPUSH
5870: PPUSH
// uc_side := side ;
5871: LD_ADDR_OWVAR 20
5875: PUSH
5876: LD_VAR 0 1
5880: ST_TO_ADDR
// uc_nation := nation_american ;
5881: LD_ADDR_OWVAR 21
5885: PUSH
5886: LD_INT 1
5888: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5889: LD_ADDR_VAR 0 10
5893: PUSH
5894: LD_INT 3
5896: PUSH
5897: LD_INT 4
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5904: LD_ADDR_VAR 0 11
5908: PUSH
5909: LD_INT 2
5911: PUSH
5912: LD_INT 4
5914: PUSH
5915: LD_INT 5
5917: PUSH
5918: LD_INT 6
5920: PUSH
5921: LD_INT 7
5923: PUSH
5924: LD_INT 97
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: ST_TO_ADDR
// case typ of 1 :
5935: LD_VAR 0 3
5939: PUSH
5940: LD_INT 1
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5948
5946: GO 6142
5948: POP
// begin for i = 1 to num do
5949: LD_ADDR_VAR 0 6
5953: PUSH
5954: DOUBLE
5955: LD_INT 1
5957: DEC
5958: ST_TO_ADDR
5959: LD_VAR 0 2
5963: PUSH
5964: FOR_TO
5965: IFFALSE 6138
// begin vc_chassis := chassis [ 1 ] ;
5967: LD_ADDR_OWVAR 37
5971: PUSH
5972: LD_VAR 0 10
5976: PUSH
5977: LD_INT 1
5979: ARRAY
5980: ST_TO_ADDR
// vc_engine := engine_combustion ;
5981: LD_ADDR_OWVAR 39
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
// vc_control := control_manual ;
5989: LD_ADDR_OWVAR 38
5993: PUSH
5994: LD_INT 1
5996: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
5997: LD_ADDR_OWVAR 40
6001: PUSH
6002: LD_VAR 0 11
6006: PUSH
6007: LD_INT 1
6009: PPUSH
6010: LD_INT 3
6012: PPUSH
6013: CALL_OW 12
6017: ARRAY
6018: ST_TO_ADDR
// veh := CreateVehicle ;
6019: LD_ADDR_VAR 0 9
6023: PUSH
6024: CALL_OW 45
6028: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6029: LD_ADDR_VAR 0 12
6033: PUSH
6034: LD_INT 1
6036: PPUSH
6037: LD_INT 2
6039: PPUSH
6040: CALL_OW 12
6044: ST_TO_ADDR
// if f = 1 then
6045: LD_VAR 0 12
6049: PUSH
6050: LD_INT 1
6052: EQUAL
6053: IFFALSE 6069
// SetDir ( veh , 3 ) else
6055: LD_VAR 0 9
6059: PPUSH
6060: LD_INT 3
6062: PPUSH
6063: CALL_OW 233
6067: GO 6081
// SetDir ( veh , 1 ) ;
6069: LD_VAR 0 9
6073: PPUSH
6074: LD_INT 1
6076: PPUSH
6077: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6081: LD_VAR 0 9
6085: PPUSH
6086: LD_VAR 0 4
6090: PUSH
6091: LD_VAR 0 12
6095: ARRAY
6096: PPUSH
6097: LD_INT 0
6099: PPUSH
6100: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6104: LD_ADDR_VAR 0 7
6108: PUSH
6109: LD_INT 1
6111: PPUSH
6112: LD_EXP 4
6116: PPUSH
6117: CALL 9241 0 2
6121: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6122: LD_VAR 0 7
6126: PPUSH
6127: LD_VAR 0 9
6131: PPUSH
6132: CALL_OW 52
// end ;
6136: GO 5964
6138: POP
6139: POP
// end ; 2 :
6140: GO 6616
6142: LD_INT 2
6144: DOUBLE
6145: EQUAL
6146: IFTRUE 6150
6148: GO 6413
6150: POP
// begin for i = 1 to num do
6151: LD_ADDR_VAR 0 6
6155: PUSH
6156: DOUBLE
6157: LD_INT 1
6159: DEC
6160: ST_TO_ADDR
6161: LD_VAR 0 2
6165: PUSH
6166: FOR_TO
6167: IFFALSE 6348
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6169: LD_ADDR_OWVAR 37
6173: PUSH
6174: LD_VAR 0 10
6178: PUSH
6179: LD_INT 1
6181: PPUSH
6182: LD_INT 2
6184: PPUSH
6185: CALL_OW 12
6189: ARRAY
6190: ST_TO_ADDR
// vc_engine := engine_combustion ;
6191: LD_ADDR_OWVAR 39
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// vc_control := control_manual ;
6199: LD_ADDR_OWVAR 38
6203: PUSH
6204: LD_INT 1
6206: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6207: LD_ADDR_OWVAR 40
6211: PUSH
6212: LD_VAR 0 11
6216: PUSH
6217: LD_INT 1
6219: PPUSH
6220: LD_INT 3
6222: PPUSH
6223: CALL_OW 12
6227: ARRAY
6228: ST_TO_ADDR
// veh := CreateVehicle ;
6229: LD_ADDR_VAR 0 9
6233: PUSH
6234: CALL_OW 45
6238: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6239: LD_ADDR_VAR 0 12
6243: PUSH
6244: LD_INT 1
6246: PPUSH
6247: LD_INT 2
6249: PPUSH
6250: CALL_OW 12
6254: ST_TO_ADDR
// if f = 1 then
6255: LD_VAR 0 12
6259: PUSH
6260: LD_INT 1
6262: EQUAL
6263: IFFALSE 6279
// SetDir ( veh , 3 ) else
6265: LD_VAR 0 9
6269: PPUSH
6270: LD_INT 3
6272: PPUSH
6273: CALL_OW 233
6277: GO 6291
// SetDir ( veh , 1 ) ;
6279: LD_VAR 0 9
6283: PPUSH
6284: LD_INT 1
6286: PPUSH
6287: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6291: LD_VAR 0 9
6295: PPUSH
6296: LD_VAR 0 4
6300: PUSH
6301: LD_VAR 0 12
6305: ARRAY
6306: PPUSH
6307: LD_INT 0
6309: PPUSH
6310: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6314: LD_ADDR_VAR 0 7
6318: PUSH
6319: LD_INT 1
6321: PPUSH
6322: LD_EXP 4
6326: PPUSH
6327: CALL 9241 0 2
6331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6332: LD_VAR 0 7
6336: PPUSH
6337: LD_VAR 0 9
6341: PPUSH
6342: CALL_OW 52
// end ;
6346: GO 6166
6348: POP
6349: POP
// for i = 1 to 3 do
6350: LD_ADDR_VAR 0 6
6354: PUSH
6355: DOUBLE
6356: LD_INT 1
6358: DEC
6359: ST_TO_ADDR
6360: LD_INT 3
6362: PUSH
6363: FOR_TO
6364: IFFALSE 6409
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6366: LD_ADDR_VAR 0 7
6370: PUSH
6371: LD_INT 5
6373: PPUSH
6374: LD_EXP 4
6378: PPUSH
6379: CALL 9241 0 2
6383: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6384: LD_VAR 0 7
6388: PPUSH
6389: LD_VAR 0 4
6393: PUSH
6394: LD_VAR 0 12
6398: ARRAY
6399: PPUSH
6400: LD_INT 0
6402: PPUSH
6403: CALL_OW 49
// end ;
6407: GO 6363
6409: POP
6410: POP
// end ; 3 :
6411: GO 6616
6413: LD_INT 3
6415: DOUBLE
6416: EQUAL
6417: IFTRUE 6421
6419: GO 6615
6421: POP
// begin for i = 1 to num do
6422: LD_ADDR_VAR 0 6
6426: PUSH
6427: DOUBLE
6428: LD_INT 1
6430: DEC
6431: ST_TO_ADDR
6432: LD_VAR 0 2
6436: PUSH
6437: FOR_TO
6438: IFFALSE 6611
// begin vc_chassis := chassis [ 2 ] ;
6440: LD_ADDR_OWVAR 37
6444: PUSH
6445: LD_VAR 0 10
6449: PUSH
6450: LD_INT 2
6452: ARRAY
6453: ST_TO_ADDR
// vc_engine := engine_combustion ;
6454: LD_ADDR_OWVAR 39
6458: PUSH
6459: LD_INT 1
6461: ST_TO_ADDR
// vc_control := control_manual ;
6462: LD_ADDR_OWVAR 38
6466: PUSH
6467: LD_INT 1
6469: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6470: LD_ADDR_OWVAR 40
6474: PUSH
6475: LD_VAR 0 11
6479: PUSH
6480: LD_INT 3
6482: PPUSH
6483: LD_INT 6
6485: PPUSH
6486: CALL_OW 12
6490: ARRAY
6491: ST_TO_ADDR
// veh := CreateVehicle ;
6492: LD_ADDR_VAR 0 9
6496: PUSH
6497: CALL_OW 45
6501: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6502: LD_ADDR_VAR 0 12
6506: PUSH
6507: LD_INT 1
6509: PPUSH
6510: LD_INT 2
6512: PPUSH
6513: CALL_OW 12
6517: ST_TO_ADDR
// if f = 1 then
6518: LD_VAR 0 12
6522: PUSH
6523: LD_INT 1
6525: EQUAL
6526: IFFALSE 6542
// SetDir ( veh , 3 ) else
6528: LD_VAR 0 9
6532: PPUSH
6533: LD_INT 3
6535: PPUSH
6536: CALL_OW 233
6540: GO 6554
// SetDir ( veh , 1 ) ;
6542: LD_VAR 0 9
6546: PPUSH
6547: LD_INT 1
6549: PPUSH
6550: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6554: LD_VAR 0 9
6558: PPUSH
6559: LD_VAR 0 4
6563: PUSH
6564: LD_VAR 0 12
6568: ARRAY
6569: PPUSH
6570: LD_INT 0
6572: PPUSH
6573: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6577: LD_ADDR_VAR 0 7
6581: PUSH
6582: LD_INT 1
6584: PPUSH
6585: LD_EXP 4
6589: PPUSH
6590: CALL 9241 0 2
6594: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6595: LD_VAR 0 7
6599: PPUSH
6600: LD_VAR 0 9
6604: PPUSH
6605: CALL_OW 52
// end ;
6609: GO 6437
6611: POP
6612: POP
// end ; end ;
6613: GO 6616
6615: POP
// end ;
6616: LD_VAR 0 5
6620: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6621: LD_EXP 1
6625: PUSH
6626: LD_INT 2
6628: EQUAL
6629: PUSH
6630: LD_EXP 8
6634: AND
6635: IFFALSE 6790
6637: GO 6639
6639: DISABLE
6640: LD_INT 0
6642: PPUSH
6643: PPUSH
6644: PPUSH
// begin enable ;
6645: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6646: LD_ADDR_VAR 0 1
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 1
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 69
6665: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6666: LD_ADDR_VAR 0 2
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: LD_INT 22
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: LD_INT 22
6686: PUSH
6687: LD_INT 6
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL_OW 69
6703: ST_TO_ADDR
// if filter > 0 then
6704: LD_VAR 0 1
6708: PUSH
6709: LD_INT 0
6711: GREATER
6712: IFFALSE 6790
// for i = 1 to filter do
6714: LD_ADDR_VAR 0 3
6718: PUSH
6719: DOUBLE
6720: LD_INT 1
6722: DEC
6723: ST_TO_ADDR
6724: LD_VAR 0 1
6728: PUSH
6729: FOR_TO
6730: IFFALSE 6788
// if not HasTask ( filter [ i ] ) then
6732: LD_VAR 0 1
6736: PUSH
6737: LD_VAR 0 3
6741: ARRAY
6742: PPUSH
6743: CALL_OW 314
6747: NOT
6748: IFFALSE 6786
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6750: LD_VAR 0 1
6754: PUSH
6755: LD_VAR 0 3
6759: ARRAY
6760: PPUSH
6761: LD_VAR 0 2
6765: PPUSH
6766: LD_VAR 0 1
6770: PUSH
6771: LD_VAR 0 3
6775: ARRAY
6776: PPUSH
6777: CALL_OW 74
6781: PPUSH
6782: CALL_OW 115
6786: GO 6729
6788: POP
6789: POP
// end ;
6790: PPOPN 3
6792: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6793: LD_EXP 1
6797: PUSH
6798: LD_INT 2
6800: EQUAL
6801: IFFALSE 6956
6803: GO 6805
6805: DISABLE
6806: LD_INT 0
6808: PPUSH
6809: PPUSH
6810: PPUSH
// begin enable ;
6811: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6812: LD_ADDR_VAR 0 1
6816: PUSH
6817: LD_INT 22
6819: PUSH
6820: LD_INT 8
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6832: LD_ADDR_VAR 0 2
6836: PUSH
6837: LD_INT 2
6839: PUSH
6840: LD_INT 22
6842: PUSH
6843: LD_INT 3
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 22
6852: PUSH
6853: LD_INT 6
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: PPUSH
6865: CALL_OW 69
6869: ST_TO_ADDR
// if filter > 0 then
6870: LD_VAR 0 1
6874: PUSH
6875: LD_INT 0
6877: GREATER
6878: IFFALSE 6956
// for i = 1 to filter do
6880: LD_ADDR_VAR 0 3
6884: PUSH
6885: DOUBLE
6886: LD_INT 1
6888: DEC
6889: ST_TO_ADDR
6890: LD_VAR 0 1
6894: PUSH
6895: FOR_TO
6896: IFFALSE 6954
// if not HasTask ( filter [ i ] ) then
6898: LD_VAR 0 1
6902: PUSH
6903: LD_VAR 0 3
6907: ARRAY
6908: PPUSH
6909: CALL_OW 314
6913: NOT
6914: IFFALSE 6952
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6916: LD_VAR 0 1
6920: PUSH
6921: LD_VAR 0 3
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 2
6931: PPUSH
6932: LD_VAR 0 1
6936: PUSH
6937: LD_VAR 0 3
6941: ARRAY
6942: PPUSH
6943: CALL_OW 74
6947: PPUSH
6948: CALL_OW 115
6952: GO 6895
6954: POP
6955: POP
// end ; end_of_file
6956: PPOPN 3
6958: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
// Your_Side := 3 ;
6966: LD_ADDR_OWVAR 2
6970: PUSH
6971: LD_INT 3
6973: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6974: LD_INT 3
6976: PPUSH
6977: LD_INT 3
6979: PPUSH
6980: CALL_OW 343
// ResetFog ;
6984: CALL_OW 335
// uc_side := 6 ;
6988: LD_ADDR_OWVAR 20
6992: PUSH
6993: LD_INT 6
6995: ST_TO_ADDR
// uc_nation := 3 ;
6996: LD_ADDR_OWVAR 21
7000: PUSH
7001: LD_INT 3
7003: ST_TO_ADDR
// hc_gallery := ru ;
7004: LD_ADDR_OWVAR 33
7008: PUSH
7009: LD_STRING ru
7011: ST_TO_ADDR
// hc_face_number := 1 ;
7012: LD_ADDR_OWVAR 34
7016: PUSH
7017: LD_INT 1
7019: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7020: LD_ADDR_OWVAR 26
7024: PUSH
7025: LD_STRING J. I. Gorki
7027: ST_TO_ADDR
// hc_class := 3 ;
7028: LD_ADDR_OWVAR 28
7032: PUSH
7033: LD_INT 3
7035: ST_TO_ADDR
// hc_sex := sex_male ;
7036: LD_ADDR_OWVAR 27
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// gorki := CreateHuman ;
7044: LD_ADDR_EXP 19
7048: PUSH
7049: CALL_OW 44
7053: ST_TO_ADDR
// uc_side := 3 ;
7054: LD_ADDR_OWVAR 20
7058: PUSH
7059: LD_INT 3
7061: ST_TO_ADDR
// uc_nation := 3 ;
7062: LD_ADDR_OWVAR 21
7066: PUSH
7067: LD_INT 3
7069: ST_TO_ADDR
// hc_importance := 100 ;
7070: LD_ADDR_OWVAR 32
7074: PUSH
7075: LD_INT 100
7077: ST_TO_ADDR
// hc_name :=  ;
7078: LD_ADDR_OWVAR 26
7082: PUSH
7083: LD_STRING 
7085: ST_TO_ADDR
// hc_gallery :=  ;
7086: LD_ADDR_OWVAR 33
7090: PUSH
7091: LD_STRING 
7093: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7094: LD_INT 1
7096: PPUSH
7097: LD_INT 1
7099: PPUSH
7100: LD_EXP 3
7104: PUSH
7105: LD_INT 3
7107: PLUS
7108: PPUSH
7109: CALL_OW 380
// ru_dow := CreateHuman ;
7113: LD_ADDR_EXP 18
7117: PUSH
7118: CALL_OW 44
7122: ST_TO_ADDR
// hc_importance := 0 ;
7123: LD_ADDR_OWVAR 32
7127: PUSH
7128: LD_INT 0
7130: ST_TO_ADDR
// for i = 1 to 20 do
7131: LD_ADDR_VAR 0 3
7135: PUSH
7136: DOUBLE
7137: LD_INT 1
7139: DEC
7140: ST_TO_ADDR
7141: LD_INT 20
7143: PUSH
7144: FOR_TO
7145: IFFALSE 7207
// begin uc_side := 3 ;
7147: LD_ADDR_OWVAR 20
7151: PUSH
7152: LD_INT 3
7154: ST_TO_ADDR
// uc_nation := 3 ;
7155: LD_ADDR_OWVAR 21
7159: PUSH
7160: LD_INT 3
7162: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7163: LD_ADDR_VAR 0 2
7167: PUSH
7168: LD_INT 1
7170: PPUSH
7171: LD_INT 4
7173: PPUSH
7174: CALL_OW 12
7178: PPUSH
7179: LD_EXP 3
7183: PPUSH
7184: CALL 9241 0 2
7188: ST_TO_ADDR
// filter := filter ^ un ;
7189: LD_ADDR_VAR 0 4
7193: PUSH
7194: LD_VAR 0 4
7198: PUSH
7199: LD_VAR 0 2
7203: ADD
7204: ST_TO_ADDR
// end ;
7205: GO 7144
7207: POP
7208: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7209: LD_ADDR_VAR 0 5
7213: PUSH
7214: LD_STRING text
7216: PPUSH
7217: LD_INT 9
7219: PUSH
7220: LD_INT 8
7222: PUSH
7223: LD_INT 7
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: LD_EXP 2
7235: ARRAY
7236: PPUSH
7237: LD_INT 9
7239: PUSH
7240: LD_INT 8
7242: PUSH
7243: LD_INT 7
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PUSH
7251: LD_EXP 2
7255: ARRAY
7256: PPUSH
7257: LD_INT -5
7259: PUSH
7260: LD_EXP 18
7264: PUSH
7265: LD_INT -3
7267: PUSH
7268: LD_INT -2
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: PUSH
7277: LD_VAR 0 4
7281: ADD
7282: PPUSH
7283: LD_INT 1
7285: PUSH
7286: LD_INT 3
7288: PUSH
7289: LD_INT 2
7291: PUSH
7292: LD_INT 1
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: LD_INT 4
7301: PUSH
7302: LD_INT 1
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 9
7311: PUSH
7312: LD_INT 0
7314: PUSH
7315: LD_INT 6
7317: PUSH
7318: LD_INT 4
7320: PUSH
7321: LD_INT 3
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: PUSH
7329: LD_EXP 2
7333: ARRAY
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: PPUSH
7347: CALL_OW 42
7351: ST_TO_ADDR
// team := team ^ ru_dow ;
7352: LD_ADDR_VAR 0 5
7356: PUSH
7357: LD_VAR 0 5
7361: PUSH
7362: LD_EXP 18
7366: ADD
7367: ST_TO_ADDR
// for i = 1 to team do
7368: LD_ADDR_VAR 0 3
7372: PUSH
7373: DOUBLE
7374: LD_INT 1
7376: DEC
7377: ST_TO_ADDR
7378: LD_VAR 0 5
7382: PUSH
7383: FOR_TO
7384: IFFALSE 7409
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7386: LD_VAR 0 5
7390: PUSH
7391: LD_VAR 0 3
7395: ARRAY
7396: PPUSH
7397: LD_INT 5
7399: PPUSH
7400: LD_INT 0
7402: PPUSH
7403: CALL_OW 49
7407: GO 7383
7409: POP
7410: POP
// end ;
7411: LD_VAR 0 1
7415: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7416: LD_INT 1
7418: PPUSH
7419: CALL_OW 255
7423: PUSH
7424: LD_INT 3
7426: EQUAL
7427: IFFALSE 7537
7429: GO 7431
7431: DISABLE
7432: LD_INT 0
7434: PPUSH
// begin depot_captured := true ;
7435: LD_ADDR_EXP 8
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7443: LD_STRING GType2b
7445: PPUSH
7446: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7450: LD_EXP 18
7454: PPUSH
7455: LD_STRING D-rudow2
7457: PPUSH
7458: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7462: LD_EXP 19
7466: PPUSH
7467: LD_STRING D-gorky2
7469: PPUSH
7470: CALL_OW 94
// while ( true ) do
7474: LD_INT 1
7476: IFFALSE 7537
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7478: LD_INT 13300
7480: PPUSH
7481: LD_INT 19985
7483: PPUSH
7484: CALL_OW 12
7488: PPUSH
7489: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7493: LD_ADDR_VAR 0 1
7497: PUSH
7498: LD_INT 6
7500: PUSH
7501: LD_INT 5
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7508: LD_INT 1
7510: PPUSH
7511: LD_EXP 15
7515: PPUSH
7516: LD_EXP 16
7520: PPUSH
7521: LD_INT 6
7523: PUSH
7524: LD_INT 5
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL 5861 0 4
// end ;
7535: GO 7474
// end ;
7537: PPOPN 1
7539: END
// every 1 1$30 trigger game_type = 2 do
7540: LD_EXP 1
7544: PUSH
7545: LD_INT 2
7547: EQUAL
7548: IFFALSE 7693
7550: GO 7552
7552: DISABLE
// begin enable ;
7553: ENABLE
// if timer <= 45 45$00 then
7554: LD_EXP 6
7558: PUSH
7559: LD_INT 94500
7561: LESSEQUAL
7562: IFFALSE 7597
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7564: LD_ADDR_EXP 15
7568: PUSH
7569: LD_INT 5
7571: PUSH
7572: LD_INT 6
7574: PUSH
7575: LD_INT 7
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: PUSH
7583: LD_EXP 2
7587: ARRAY
7588: ST_TO_ADDR
// enemy_typ := 1 ;
7589: LD_ADDR_EXP 16
7593: PUSH
7594: LD_INT 1
7596: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7597: LD_EXP 6
7601: PUSH
7602: LD_INT 126000
7604: GREATER
7605: PUSH
7606: LD_EXP 6
7610: PUSH
7611: LD_INT 168000
7613: LESSEQUAL
7614: AND
7615: IFFALSE 7650
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7617: LD_ADDR_EXP 15
7621: PUSH
7622: LD_INT 6
7624: PUSH
7625: LD_INT 8
7627: PUSH
7628: LD_INT 9
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_EXP 2
7640: ARRAY
7641: ST_TO_ADDR
// enemy_typ := 2 ;
7642: LD_ADDR_EXP 16
7646: PUSH
7647: LD_INT 2
7649: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7650: LD_EXP 6
7654: PUSH
7655: LD_INT 168000
7657: GREATER
7658: IFFALSE 7693
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7660: LD_ADDR_EXP 15
7664: PUSH
7665: LD_INT 8
7667: PUSH
7668: LD_INT 9
7670: PUSH
7671: LD_INT 10
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: PUSH
7679: LD_EXP 2
7683: ARRAY
7684: ST_TO_ADDR
// enemy_typ := 3 ;
7685: LD_ADDR_EXP 16
7689: PUSH
7690: LD_INT 3
7692: ST_TO_ADDR
// end ; end ;
7693: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7694: LD_EXP 1
7698: PUSH
7699: LD_INT 2
7701: EQUAL
7702: IFFALSE 7819
7704: GO 7706
7706: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7707: LD_INT 8
7709: PPUSH
7710: LD_EXP 15
7714: PPUSH
7715: LD_INT 1
7717: PPUSH
7718: LD_INT 6
7720: PPUSH
7721: CALL 9890 0 4
// Wait ( 20 20$00 ) ;
7725: LD_INT 42000
7727: PPUSH
7728: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7732: LD_INT 8
7734: PPUSH
7735: LD_EXP 15
7739: PPUSH
7740: LD_INT 2
7742: PPUSH
7743: LD_INT 6
7745: PPUSH
7746: CALL 9890 0 4
// Wait ( 4 4$00 ) ;
7750: LD_INT 8400
7752: PPUSH
7753: CALL_OW 67
// uc_side := 8 ;
7757: LD_ADDR_OWVAR 20
7761: PUSH
7762: LD_INT 8
7764: ST_TO_ADDR
// uc_nation := 2 ;
7765: LD_ADDR_OWVAR 21
7769: PUSH
7770: LD_INT 2
7772: ST_TO_ADDR
// hc_class := 1 ;
7773: LD_ADDR_OWVAR 28
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// hc_gallery :=  ;
7781: LD_ADDR_OWVAR 33
7785: PUSH
7786: LD_STRING 
7788: ST_TO_ADDR
// hc_sex := sex_male ;
7789: LD_ADDR_OWVAR 27
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// farmer := CreateHuman ;
7797: LD_ADDR_EXP 20
7801: PUSH
7802: CALL_OW 44
7806: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7807: LD_EXP 20
7811: PPUSH
7812: LD_STRING D-farmer
7814: PPUSH
7815: CALL_OW 94
// end ;
7819: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7820: LD_EXP 1
7824: PUSH
7825: LD_INT 1
7827: EQUAL
7828: IFFALSE 7983
7830: GO 7832
7832: DISABLE
7833: LD_INT 0
7835: PPUSH
7836: PPUSH
7837: PPUSH
// begin enable ;
7838: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7839: LD_ADDR_VAR 0 1
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: LD_INT 22
7849: PUSH
7850: LD_INT 3
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 22
7859: PUSH
7860: LD_INT 6
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: LIST
7871: PPUSH
7872: CALL_OW 69
7876: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7877: LD_ADDR_VAR 0 2
7881: PUSH
7882: LD_INT 2
7884: PUSH
7885: LD_INT 22
7887: PUSH
7888: LD_INT 1
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: LD_INT 22
7897: PUSH
7898: LD_INT 2
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: PPUSH
7910: CALL_OW 69
7914: ST_TO_ADDR
// if filter > 0 then
7915: LD_VAR 0 1
7919: PUSH
7920: LD_INT 0
7922: GREATER
7923: IFFALSE 7983
// for i = 1 to filter do
7925: LD_ADDR_VAR 0 3
7929: PUSH
7930: DOUBLE
7931: LD_INT 1
7933: DEC
7934: ST_TO_ADDR
7935: LD_VAR 0 1
7939: PUSH
7940: FOR_TO
7941: IFFALSE 7981
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7943: LD_VAR 0 1
7947: PUSH
7948: LD_VAR 0 3
7952: ARRAY
7953: PPUSH
7954: LD_VAR 0 2
7958: PPUSH
7959: LD_VAR 0 1
7963: PUSH
7964: LD_VAR 0 3
7968: ARRAY
7969: PPUSH
7970: CALL_OW 74
7974: PPUSH
7975: CALL_OW 115
7979: GO 7940
7981: POP
7982: POP
// end ;
7983: PPOPN 3
7985: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
7986: LD_INT 0
7988: PPUSH
7989: PPUSH
7990: PPUSH
7991: PPUSH
7992: PPUSH
7993: PPUSH
7994: PPUSH
7995: PPUSH
// Randomize ;
7996: CALL_OW 10
// uc_side := side ;
8000: LD_ADDR_OWVAR 20
8004: PUSH
8005: LD_VAR 0 1
8009: ST_TO_ADDR
// uc_nation := nation_russian ;
8010: LD_ADDR_OWVAR 21
8014: PUSH
8015: LD_INT 3
8017: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8018: LD_ADDR_VAR 0 10
8022: PUSH
8023: LD_INT 22
8025: PUSH
8026: LD_INT 24
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8033: LD_ADDR_VAR 0 11
8037: PUSH
8038: LD_INT 42
8040: PUSH
8041: LD_INT 43
8043: PUSH
8044: LD_INT 44
8046: PUSH
8047: LD_INT 46
8049: PUSH
8050: LD_INT 45
8052: PUSH
8053: LD_INT 47
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: ST_TO_ADDR
// case typ of 1 :
8064: LD_VAR 0 3
8068: PUSH
8069: LD_INT 1
8071: DOUBLE
8072: EQUAL
8073: IFTRUE 8077
8075: GO 8271
8077: POP
// begin for i = 1 to num do
8078: LD_ADDR_VAR 0 6
8082: PUSH
8083: DOUBLE
8084: LD_INT 1
8086: DEC
8087: ST_TO_ADDR
8088: LD_VAR 0 2
8092: PUSH
8093: FOR_TO
8094: IFFALSE 8267
// begin vc_chassis := chassis [ 1 ] ;
8096: LD_ADDR_OWVAR 37
8100: PUSH
8101: LD_VAR 0 10
8105: PUSH
8106: LD_INT 1
8108: ARRAY
8109: ST_TO_ADDR
// vc_engine := engine_combustion ;
8110: LD_ADDR_OWVAR 39
8114: PUSH
8115: LD_INT 1
8117: ST_TO_ADDR
// vc_control := control_manual ;
8118: LD_ADDR_OWVAR 38
8122: PUSH
8123: LD_INT 1
8125: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8126: LD_ADDR_OWVAR 40
8130: PUSH
8131: LD_VAR 0 11
8135: PUSH
8136: LD_INT 1
8138: PPUSH
8139: LD_INT 3
8141: PPUSH
8142: CALL_OW 12
8146: ARRAY
8147: ST_TO_ADDR
// veh := CreateVehicle ;
8148: LD_ADDR_VAR 0 9
8152: PUSH
8153: CALL_OW 45
8157: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8158: LD_ADDR_VAR 0 12
8162: PUSH
8163: LD_INT 1
8165: PPUSH
8166: LD_INT 2
8168: PPUSH
8169: CALL_OW 12
8173: ST_TO_ADDR
// if f = 1 then
8174: LD_VAR 0 12
8178: PUSH
8179: LD_INT 1
8181: EQUAL
8182: IFFALSE 8198
// SetDir ( veh , 3 ) else
8184: LD_VAR 0 9
8188: PPUSH
8189: LD_INT 3
8191: PPUSH
8192: CALL_OW 233
8196: GO 8210
// SetDir ( veh , 1 ) ;
8198: LD_VAR 0 9
8202: PPUSH
8203: LD_INT 1
8205: PPUSH
8206: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8210: LD_VAR 0 9
8214: PPUSH
8215: LD_VAR 0 4
8219: PUSH
8220: LD_VAR 0 12
8224: ARRAY
8225: PPUSH
8226: LD_INT 0
8228: PPUSH
8229: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8233: LD_ADDR_VAR 0 7
8237: PUSH
8238: LD_INT 1
8240: PPUSH
8241: LD_EXP 4
8245: PPUSH
8246: CALL 9241 0 2
8250: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8251: LD_VAR 0 7
8255: PPUSH
8256: LD_VAR 0 9
8260: PPUSH
8261: CALL_OW 52
// end ;
8265: GO 8093
8267: POP
8268: POP
// end ; 2 :
8269: GO 8813
8271: LD_INT 2
8273: DOUBLE
8274: EQUAL
8275: IFTRUE 8279
8277: GO 8576
8279: POP
// begin for i = 1 to num do
8280: LD_ADDR_VAR 0 6
8284: PUSH
8285: DOUBLE
8286: LD_INT 1
8288: DEC
8289: ST_TO_ADDR
8290: LD_VAR 0 2
8294: PUSH
8295: FOR_TO
8296: IFFALSE 8511
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8298: LD_ADDR_OWVAR 37
8302: PUSH
8303: LD_VAR 0 10
8307: PUSH
8308: LD_INT 1
8310: PPUSH
8311: LD_INT 2
8313: PPUSH
8314: CALL_OW 12
8318: ARRAY
8319: ST_TO_ADDR
// vc_engine := engine_combustion ;
8320: LD_ADDR_OWVAR 39
8324: PUSH
8325: LD_INT 1
8327: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8328: LD_ADDR_OWVAR 38
8332: PUSH
8333: LD_INT 1
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 1
8345: PPUSH
8346: LD_INT 2
8348: PPUSH
8349: CALL_OW 12
8353: ARRAY
8354: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8355: LD_ADDR_OWVAR 40
8359: PUSH
8360: LD_VAR 0 11
8364: PUSH
8365: LD_INT 1
8367: PPUSH
8368: LD_INT 3
8370: PPUSH
8371: CALL_OW 12
8375: ARRAY
8376: ST_TO_ADDR
// veh := CreateVehicle ;
8377: LD_ADDR_VAR 0 9
8381: PUSH
8382: CALL_OW 45
8386: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8387: LD_ADDR_VAR 0 12
8391: PUSH
8392: LD_INT 1
8394: PPUSH
8395: LD_INT 2
8397: PPUSH
8398: CALL_OW 12
8402: ST_TO_ADDR
// if f = 1 then
8403: LD_VAR 0 12
8407: PUSH
8408: LD_INT 1
8410: EQUAL
8411: IFFALSE 8427
// SetDir ( veh , 3 ) else
8413: LD_VAR 0 9
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: CALL_OW 233
8425: GO 8439
// SetDir ( veh , 1 ) ;
8427: LD_VAR 0 9
8431: PPUSH
8432: LD_INT 1
8434: PPUSH
8435: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8439: LD_VAR 0 9
8443: PPUSH
8444: LD_VAR 0 4
8448: PUSH
8449: LD_VAR 0 12
8453: ARRAY
8454: PPUSH
8455: LD_INT 0
8457: PPUSH
8458: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8462: LD_VAR 0 9
8466: PPUSH
8467: CALL_OW 263
8471: PUSH
8472: LD_INT 1
8474: EQUAL
8475: IFFALSE 8509
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8477: LD_ADDR_VAR 0 7
8481: PUSH
8482: LD_INT 1
8484: PPUSH
8485: LD_EXP 4
8489: PPUSH
8490: CALL 9241 0 2
8494: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8495: LD_VAR 0 7
8499: PPUSH
8500: LD_VAR 0 9
8504: PPUSH
8505: CALL_OW 52
// end ; end ;
8509: GO 8295
8511: POP
8512: POP
// for i = 1 to 2 do
8513: LD_ADDR_VAR 0 6
8517: PUSH
8518: DOUBLE
8519: LD_INT 1
8521: DEC
8522: ST_TO_ADDR
8523: LD_INT 2
8525: PUSH
8526: FOR_TO
8527: IFFALSE 8572
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8529: LD_ADDR_VAR 0 7
8533: PUSH
8534: LD_INT 9
8536: PPUSH
8537: LD_EXP 4
8541: PPUSH
8542: CALL 9241 0 2
8546: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8547: LD_VAR 0 7
8551: PPUSH
8552: LD_VAR 0 4
8556: PUSH
8557: LD_VAR 0 12
8561: ARRAY
8562: PPUSH
8563: LD_INT 0
8565: PPUSH
8566: CALL_OW 49
// end ;
8570: GO 8526
8572: POP
8573: POP
// end ; 3 :
8574: GO 8813
8576: LD_INT 3
8578: DOUBLE
8579: EQUAL
8580: IFTRUE 8584
8582: GO 8812
8584: POP
// begin for i = 1 to num do
8585: LD_ADDR_VAR 0 6
8589: PUSH
8590: DOUBLE
8591: LD_INT 1
8593: DEC
8594: ST_TO_ADDR
8595: LD_VAR 0 2
8599: PUSH
8600: FOR_TO
8601: IFFALSE 8808
// begin vc_chassis := chassis [ 2 ] ;
8603: LD_ADDR_OWVAR 37
8607: PUSH
8608: LD_VAR 0 10
8612: PUSH
8613: LD_INT 2
8615: ARRAY
8616: ST_TO_ADDR
// vc_engine := engine_combustion ;
8617: LD_ADDR_OWVAR 39
8621: PUSH
8622: LD_INT 1
8624: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8625: LD_ADDR_OWVAR 38
8629: PUSH
8630: LD_INT 3
8632: PUSH
8633: LD_INT 1
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 1
8642: PPUSH
8643: LD_INT 2
8645: PPUSH
8646: CALL_OW 12
8650: ARRAY
8651: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8652: LD_ADDR_OWVAR 40
8656: PUSH
8657: LD_VAR 0 11
8661: PUSH
8662: LD_INT 3
8664: PPUSH
8665: LD_INT 6
8667: PPUSH
8668: CALL_OW 12
8672: ARRAY
8673: ST_TO_ADDR
// veh := CreateVehicle ;
8674: LD_ADDR_VAR 0 9
8678: PUSH
8679: CALL_OW 45
8683: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8684: LD_ADDR_VAR 0 12
8688: PUSH
8689: LD_INT 1
8691: PPUSH
8692: LD_INT 2
8694: PPUSH
8695: CALL_OW 12
8699: ST_TO_ADDR
// if f = 1 then
8700: LD_VAR 0 12
8704: PUSH
8705: LD_INT 1
8707: EQUAL
8708: IFFALSE 8724
// SetDir ( veh , 3 ) else
8710: LD_VAR 0 9
8714: PPUSH
8715: LD_INT 3
8717: PPUSH
8718: CALL_OW 233
8722: GO 8736
// SetDir ( veh , 1 ) ;
8724: LD_VAR 0 9
8728: PPUSH
8729: LD_INT 1
8731: PPUSH
8732: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8736: LD_VAR 0 9
8740: PPUSH
8741: LD_VAR 0 4
8745: PUSH
8746: LD_VAR 0 12
8750: ARRAY
8751: PPUSH
8752: LD_INT 0
8754: PPUSH
8755: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8759: LD_VAR 0 9
8763: PPUSH
8764: CALL_OW 263
8768: PUSH
8769: LD_INT 1
8771: EQUAL
8772: IFFALSE 8806
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8774: LD_ADDR_VAR 0 7
8778: PUSH
8779: LD_INT 1
8781: PPUSH
8782: LD_EXP 4
8786: PPUSH
8787: CALL 9241 0 2
8791: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8792: LD_VAR 0 7
8796: PPUSH
8797: LD_VAR 0 9
8801: PPUSH
8802: CALL_OW 52
// end ; end ;
8806: GO 8600
8808: POP
8809: POP
// end ; end ;
8810: GO 8813
8812: POP
// end ; end_of_file
8813: LD_VAR 0 5
8817: RET
// every 0 0$01 do
8818: GO 8820
8820: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8821: LD_INT 6
8823: PUSH
8824: LD_EXP 2
8828: PLUS
8829: PPUSH
8830: LD_INT 5
8832: PPUSH
8833: LD_INT 4
8835: PPUSH
8836: LD_INT 8
8838: PPUSH
8839: CALL 8844 0 4
8843: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8844: LD_INT 0
8846: PPUSH
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
// uc_nation = nation_nature ;
8851: LD_ADDR_OWVAR 21
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// uc_side = 0 ;
8859: LD_ADDR_OWVAR 20
8863: PUSH
8864: LD_INT 0
8866: ST_TO_ADDR
// l = 0 ;
8867: LD_ADDR_VAR 0 6
8871: PUSH
8872: LD_INT 0
8874: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8875: LD_ADDR_OWVAR 24
8879: PUSH
8880: LD_INT 0
8882: PPUSH
8883: LD_INT 5
8885: PPUSH
8886: CALL_OW 12
8890: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8891: LD_ADDR_OWVAR 35
8895: PUSH
8896: LD_INT 5
8898: NEG
8899: PPUSH
8900: LD_INT 5
8902: PPUSH
8903: CALL_OW 12
8907: ST_TO_ADDR
// hc_gallery =  ;
8908: LD_ADDR_OWVAR 33
8912: PUSH
8913: LD_STRING 
8915: ST_TO_ADDR
// hc_class = class_apeman ;
8916: LD_ADDR_OWVAR 28
8920: PUSH
8921: LD_INT 12
8923: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8924: LD_ADDR_OWVAR 29
8928: PUSH
8929: LD_INT 11
8931: PPUSH
8932: LD_INT 13
8934: PPUSH
8935: CALL_OW 12
8939: PUSH
8940: LD_INT 10
8942: PPUSH
8943: LD_INT 11
8945: PPUSH
8946: CALL_OW 12
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: ST_TO_ADDR
// hc_sex = sex_male ;
8955: LD_ADDR_OWVAR 27
8959: PUSH
8960: LD_INT 1
8962: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8963: LD_ADDR_OWVAR 31
8967: PUSH
8968: LD_INT 0
8970: PPUSH
8971: LD_INT 2
8973: PPUSH
8974: CALL_OW 12
8978: PUSH
8979: LD_INT 0
8981: PUSH
8982: LD_INT 0
8984: PUSH
8985: LD_INT 0
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: ST_TO_ADDR
// apeman = CreateHuman ;
8994: LD_ADDR_VAR 0 7
8998: PUSH
8999: CALL_OW 44
9003: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9004: LD_VAR 0 7
9008: PPUSH
9009: LD_VAR 0 4
9013: PPUSH
9014: LD_INT 0
9016: PPUSH
9017: CALL_OW 49
// l = l + 1 ;
9021: LD_ADDR_VAR 0 6
9025: PUSH
9026: LD_VAR 0 6
9030: PUSH
9031: LD_INT 1
9033: PLUS
9034: ST_TO_ADDR
// end until l = num1 ;
9035: LD_VAR 0 6
9039: PUSH
9040: LD_VAR 0 1
9044: EQUAL
9045: IFFALSE 8875
// l = 0 ;
9047: LD_ADDR_VAR 0 6
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9055: LD_ADDR_OWVAR 35
9059: PUSH
9060: LD_INT 0
9062: PPUSH
9063: LD_INT 25
9065: PPUSH
9066: CALL_OW 12
9070: ST_TO_ADDR
// hc_class = class_tiger ;
9071: LD_ADDR_OWVAR 28
9075: PUSH
9076: LD_INT 14
9078: ST_TO_ADDR
// hc_sex = sex_male ;
9079: LD_ADDR_OWVAR 27
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// hc_gallery = sandnature ;
9087: LD_ADDR_OWVAR 33
9091: PUSH
9092: LD_STRING sandnature
9094: ST_TO_ADDR
// hc_face_number = 3 ;
9095: LD_ADDR_OWVAR 34
9099: PUSH
9100: LD_INT 3
9102: ST_TO_ADDR
// tiger = CreateHuman ;
9103: LD_ADDR_VAR 0 8
9107: PUSH
9108: CALL_OW 44
9112: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9113: LD_VAR 0 8
9117: PPUSH
9118: LD_VAR 0 4
9122: PPUSH
9123: LD_INT 0
9125: PPUSH
9126: CALL_OW 49
// l = l + 1 ;
9130: LD_ADDR_VAR 0 6
9134: PUSH
9135: LD_VAR 0 6
9139: PUSH
9140: LD_INT 1
9142: PLUS
9143: ST_TO_ADDR
// end until l = num2 ;
9144: LD_VAR 0 6
9148: PUSH
9149: LD_VAR 0 2
9153: EQUAL
9154: IFFALSE 9055
// l = 0 ;
9156: LD_ADDR_VAR 0 6
9160: PUSH
9161: LD_INT 0
9163: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9164: LD_ADDR_OWVAR 28
9168: PUSH
9169: LD_INT 18
9171: ST_TO_ADDR
// hc_gallery = sandnature ;
9172: LD_ADDR_OWVAR 33
9176: PUSH
9177: LD_STRING sandnature
9179: ST_TO_ADDR
// hc_face_number = 1 ;
9180: LD_ADDR_OWVAR 34
9184: PUSH
9185: LD_INT 1
9187: ST_TO_ADDR
// bird = CreateHuman ;
9188: LD_ADDR_VAR 0 9
9192: PUSH
9193: CALL_OW 44
9197: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9198: LD_VAR 0 9
9202: PPUSH
9203: LD_INT 0
9205: PPUSH
9206: CALL_OW 51
// l = l + 1 ;
9210: LD_ADDR_VAR 0 6
9214: PUSH
9215: LD_VAR 0 6
9219: PUSH
9220: LD_INT 1
9222: PLUS
9223: ST_TO_ADDR
// end until l = num3 ;
9224: LD_VAR 0 6
9228: PUSH
9229: LD_VAR 0 3
9233: EQUAL
9234: IFFALSE 9164
// end ;
9236: LD_VAR 0 5
9240: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9241: LD_INT 0
9243: PPUSH
9244: PPUSH
9245: PPUSH
9246: PPUSH
9247: PPUSH
9248: PPUSH
// hc_class := clas ;
9249: LD_ADDR_OWVAR 28
9253: PUSH
9254: LD_VAR 0 1
9258: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9259: LD_ADDR_VAR 0 4
9263: PUSH
9264: LD_VAR 0 2
9268: PUSH
9269: LD_INT 1
9271: NEG
9272: PPUSH
9273: LD_INT 1
9275: PPUSH
9276: CALL_OW 12
9280: PLUS
9281: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9282: LD_ADDR_VAR 0 5
9286: PUSH
9287: LD_VAR 0 2
9291: PUSH
9292: LD_INT 1
9294: NEG
9295: PPUSH
9296: LD_INT 1
9298: PPUSH
9299: CALL_OW 12
9303: PLUS
9304: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9305: LD_ADDR_VAR 0 6
9309: PUSH
9310: LD_VAR 0 2
9314: PUSH
9315: LD_INT 1
9317: NEG
9318: PPUSH
9319: LD_INT 1
9321: PPUSH
9322: CALL_OW 12
9326: PLUS
9327: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9328: LD_ADDR_VAR 0 7
9332: PUSH
9333: LD_VAR 0 2
9337: PUSH
9338: LD_INT 1
9340: NEG
9341: PPUSH
9342: LD_INT 1
9344: PPUSH
9345: CALL_OW 12
9349: PLUS
9350: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9351: LD_VAR 0 1
9355: PUSH
9356: LD_INT 1
9358: EQUAL
9359: PUSH
9360: LD_VAR 0 1
9364: PUSH
9365: LD_INT 9
9367: EQUAL
9368: OR
9369: PUSH
9370: LD_VAR 0 1
9374: PUSH
9375: LD_INT 5
9377: EQUAL
9378: OR
9379: PUSH
9380: LD_VAR 0 1
9384: PUSH
9385: LD_INT 8
9387: EQUAL
9388: OR
9389: IFFALSE 9414
// bonus := [ 2 , 0 , 0 , 0 ] ;
9391: LD_ADDR_VAR 0 8
9395: PUSH
9396: LD_INT 2
9398: PUSH
9399: LD_INT 0
9401: PUSH
9402: LD_INT 0
9404: PUSH
9405: LD_INT 0
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: ST_TO_ADDR
// if clas = 2 then
9414: LD_VAR 0 1
9418: PUSH
9419: LD_INT 2
9421: EQUAL
9422: IFFALSE 9447
// bonus := [ 0 , 2 , 0 , 0 ] ;
9424: LD_ADDR_VAR 0 8
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: LD_INT 2
9434: PUSH
9435: LD_INT 0
9437: PUSH
9438: LD_INT 0
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: ST_TO_ADDR
// if clas = 3 then
9447: LD_VAR 0 1
9451: PUSH
9452: LD_INT 3
9454: EQUAL
9455: IFFALSE 9480
// bonus := [ 0 , 0 , 2 , 0 ] ;
9457: LD_ADDR_VAR 0 8
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: LD_INT 0
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: LD_INT 0
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: ST_TO_ADDR
// if clas = 4 then
9480: LD_VAR 0 1
9484: PUSH
9485: LD_INT 4
9487: EQUAL
9488: IFFALSE 9513
// bonus := [ 0 , 0 , 0 , 2 ] ;
9490: LD_ADDR_VAR 0 8
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: LD_INT 0
9500: PUSH
9501: LD_INT 0
9503: PUSH
9504: LD_INT 2
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9513: LD_VAR 0 1
9517: PUSH
9518: LD_INT 4
9520: GREATER
9521: PUSH
9522: LD_VAR 0 1
9526: PUSH
9527: LD_INT 9
9529: NONEQUAL
9530: AND
9531: PUSH
9532: LD_VAR 0 1
9536: PUSH
9537: LD_INT 5
9539: NONEQUAL
9540: AND
9541: PUSH
9542: LD_VAR 0 1
9546: PUSH
9547: LD_INT 8
9549: NONEQUAL
9550: AND
9551: IFFALSE 9576
// bonus := [ 0 , 0 , 0 , 0 ] ;
9553: LD_ADDR_VAR 0 8
9557: PUSH
9558: LD_INT 0
9560: PUSH
9561: LD_INT 0
9563: PUSH
9564: LD_INT 0
9566: PUSH
9567: LD_INT 0
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9576: LD_ADDR_OWVAR 30
9580: PUSH
9581: LD_INT 0
9583: PPUSH
9584: LD_INT 2
9586: PPUSH
9587: CALL_OW 12
9591: PUSH
9592: LD_INT 0
9594: PPUSH
9595: LD_INT 2
9597: PPUSH
9598: CALL_OW 12
9602: PUSH
9603: LD_INT 0
9605: PPUSH
9606: LD_INT 2
9608: PPUSH
9609: CALL_OW 12
9613: PUSH
9614: LD_INT 0
9616: PPUSH
9617: LD_INT 2
9619: PPUSH
9620: CALL_OW 12
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9631: LD_ADDR_OWVAR 31
9635: PUSH
9636: LD_VAR 0 4
9640: PUSH
9641: LD_VAR 0 8
9645: PUSH
9646: LD_INT 1
9648: ARRAY
9649: PLUS
9650: PUSH
9651: LD_VAR 0 5
9655: PUSH
9656: LD_VAR 0 8
9660: PUSH
9661: LD_INT 2
9663: ARRAY
9664: PLUS
9665: PUSH
9666: LD_VAR 0 6
9670: PUSH
9671: LD_VAR 0 8
9675: PUSH
9676: LD_INT 3
9678: ARRAY
9679: PLUS
9680: PUSH
9681: LD_VAR 0 7
9685: PUSH
9686: LD_VAR 0 8
9690: PUSH
9691: LD_INT 4
9693: ARRAY
9694: PLUS
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9702: LD_ADDR_OWVAR 27
9706: PUSH
9707: LD_INT 1
9709: PPUSH
9710: LD_INT 2
9712: PPUSH
9713: CALL_OW 12
9717: ST_TO_ADDR
// hc_gallery :=  ;
9718: LD_ADDR_OWVAR 33
9722: PUSH
9723: LD_STRING 
9725: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9726: LD_ADDR_OWVAR 29
9730: PUSH
9731: LD_INT 8
9733: PPUSH
9734: LD_INT 12
9736: PPUSH
9737: CALL_OW 12
9741: PUSH
9742: LD_INT 9
9744: PPUSH
9745: LD_INT 11
9747: PPUSH
9748: CALL_OW 12
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: ST_TO_ADDR
// hc_name :=  ;
9757: LD_ADDR_OWVAR 26
9761: PUSH
9762: LD_STRING 
9764: ST_TO_ADDR
// result := CreateHuman ;
9765: LD_ADDR_VAR 0 3
9769: PUSH
9770: CALL_OW 44
9774: ST_TO_ADDR
// end ;
9775: LD_VAR 0 3
9779: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9780: LD_INT 0
9782: PPUSH
9783: PPUSH
// vc_chassis := chassis ;
9784: LD_ADDR_OWVAR 37
9788: PUSH
9789: LD_VAR 0 1
9793: ST_TO_ADDR
// vc_engine := engine ;
9794: LD_ADDR_OWVAR 39
9798: PUSH
9799: LD_VAR 0 2
9803: ST_TO_ADDR
// vc_weapon := weapon ;
9804: LD_ADDR_OWVAR 40
9808: PUSH
9809: LD_VAR 0 3
9813: ST_TO_ADDR
// vc_control := control_manual ;
9814: LD_ADDR_OWVAR 38
9818: PUSH
9819: LD_INT 1
9821: ST_TO_ADDR
// veh := CreateVehicle ;
9822: LD_ADDR_VAR 0 8
9826: PUSH
9827: CALL_OW 45
9831: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9832: LD_VAR 0 8
9836: PPUSH
9837: LD_VAR 0 5
9841: PPUSH
9842: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9846: LD_VAR 0 8
9850: PPUSH
9851: LD_VAR 0 4
9855: PPUSH
9856: LD_INT 0
9858: PPUSH
9859: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9863: LD_INT 3
9865: PPUSH
9866: LD_VAR 0 6
9870: PPUSH
9871: CALL 9241 0 2
9875: PPUSH
9876: LD_VAR 0 8
9880: PPUSH
9881: CALL_OW 52
// end ;
9885: LD_VAR 0 7
9889: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9890: LD_INT 0
9892: PPUSH
9893: PPUSH
9894: PPUSH
9895: PPUSH
9896: PPUSH
9897: PPUSH
9898: PPUSH
// uc_side := side ;
9899: LD_ADDR_OWVAR 20
9903: PUSH
9904: LD_VAR 0 1
9908: ST_TO_ADDR
// uc_nation := nation_arabian ;
9909: LD_ADDR_OWVAR 21
9913: PUSH
9914: LD_INT 2
9916: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9917: LD_ADDR_VAR 0 10
9921: PUSH
9922: LD_INT 14
9924: PUSH
9925: EMPTY
9926: LIST
9927: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9928: LD_ADDR_VAR 0 11
9932: PUSH
9933: LD_INT 24
9935: PUSH
9936: LD_INT 25
9938: PUSH
9939: LD_INT 27
9941: PUSH
9942: LD_INT 28
9944: PUSH
9945: LD_INT 29
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: ST_TO_ADDR
// case typ of 1 :
9955: LD_VAR 0 3
9959: PUSH
9960: LD_INT 1
9962: DOUBLE
9963: EQUAL
9964: IFTRUE 9968
9966: GO 10140
9968: POP
// begin for i = 1 to num do
9969: LD_ADDR_VAR 0 6
9973: PUSH
9974: DOUBLE
9975: LD_INT 1
9977: DEC
9978: ST_TO_ADDR
9979: LD_VAR 0 2
9983: PUSH
9984: FOR_TO
9985: IFFALSE 10136
// begin vc_chassis := chassis [ 1 ] ;
9987: LD_ADDR_OWVAR 37
9991: PUSH
9992: LD_VAR 0 10
9996: PUSH
9997: LD_INT 1
9999: ARRAY
10000: ST_TO_ADDR
// vc_engine := engine_combustion ;
10001: LD_ADDR_OWVAR 39
10005: PUSH
10006: LD_INT 1
10008: ST_TO_ADDR
// vc_control := control_manual ;
10009: LD_ADDR_OWVAR 38
10013: PUSH
10014: LD_INT 1
10016: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10017: LD_ADDR_OWVAR 40
10021: PUSH
10022: LD_VAR 0 11
10026: PUSH
10027: LD_INT 1
10029: PPUSH
10030: LD_INT 3
10032: PPUSH
10033: CALL_OW 12
10037: ARRAY
10038: ST_TO_ADDR
// veh := CreateVehicle ;
10039: LD_ADDR_VAR 0 9
10043: PUSH
10044: CALL_OW 45
10048: ST_TO_ADDR
// if area = north_spawn then
10049: LD_VAR 0 4
10053: PUSH
10054: LD_INT 6
10056: EQUAL
10057: IFFALSE 10073
// SetDir ( veh , 3 ) else
10059: LD_VAR 0 9
10063: PPUSH
10064: LD_INT 3
10066: PPUSH
10067: CALL_OW 233
10071: GO 10085
// SetDir ( veh , 1 ) ;
10073: LD_VAR 0 9
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10085: LD_VAR 0 9
10089: PPUSH
10090: LD_VAR 0 4
10094: PPUSH
10095: LD_INT 0
10097: PPUSH
10098: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10102: LD_ADDR_VAR 0 7
10106: PUSH
10107: LD_INT 1
10109: PPUSH
10110: LD_EXP 4
10114: PPUSH
10115: CALL 9241 0 2
10119: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10120: LD_VAR 0 7
10124: PPUSH
10125: LD_VAR 0 9
10129: PPUSH
10130: CALL_OW 52
// end ;
10134: GO 9984
10136: POP
10137: POP
// end ; 2 :
10138: GO 10399
10140: LD_INT 2
10142: DOUBLE
10143: EQUAL
10144: IFTRUE 10148
10146: GO 10398
10148: POP
// begin for i = 1 to num do
10149: LD_ADDR_VAR 0 6
10153: PUSH
10154: DOUBLE
10155: LD_INT 1
10157: DEC
10158: ST_TO_ADDR
10159: LD_VAR 0 2
10163: PUSH
10164: FOR_TO
10165: IFFALSE 10316
// begin vc_chassis := chassis [ 1 ] ;
10167: LD_ADDR_OWVAR 37
10171: PUSH
10172: LD_VAR 0 10
10176: PUSH
10177: LD_INT 1
10179: ARRAY
10180: ST_TO_ADDR
// vc_engine := engine_combustion ;
10181: LD_ADDR_OWVAR 39
10185: PUSH
10186: LD_INT 1
10188: ST_TO_ADDR
// vc_control := control_manual ;
10189: LD_ADDR_OWVAR 38
10193: PUSH
10194: LD_INT 1
10196: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10197: LD_ADDR_OWVAR 40
10201: PUSH
10202: LD_VAR 0 11
10206: PUSH
10207: LD_INT 3
10209: PPUSH
10210: LD_INT 5
10212: PPUSH
10213: CALL_OW 12
10217: ARRAY
10218: ST_TO_ADDR
// veh := CreateVehicle ;
10219: LD_ADDR_VAR 0 9
10223: PUSH
10224: CALL_OW 45
10228: ST_TO_ADDR
// if area = north_spawn then
10229: LD_VAR 0 4
10233: PUSH
10234: LD_INT 6
10236: EQUAL
10237: IFFALSE 10253
// SetDir ( veh , 3 ) else
10239: LD_VAR 0 9
10243: PPUSH
10244: LD_INT 3
10246: PPUSH
10247: CALL_OW 233
10251: GO 10265
// SetDir ( veh , 1 ) ;
10253: LD_VAR 0 9
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10265: LD_VAR 0 9
10269: PPUSH
10270: LD_VAR 0 4
10274: PPUSH
10275: LD_INT 0
10277: PPUSH
10278: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10282: LD_ADDR_VAR 0 7
10286: PUSH
10287: LD_INT 1
10289: PPUSH
10290: LD_EXP 4
10294: PPUSH
10295: CALL 9241 0 2
10299: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10300: LD_VAR 0 7
10304: PPUSH
10305: LD_VAR 0 9
10309: PPUSH
10310: CALL_OW 52
// end ;
10314: GO 10164
10316: POP
10317: POP
// for i = 1 to 4 do
10318: LD_ADDR_VAR 0 6
10322: PUSH
10323: DOUBLE
10324: LD_INT 1
10326: DEC
10327: ST_TO_ADDR
10328: LD_INT 4
10330: PUSH
10331: FOR_TO
10332: IFFALSE 10394
// begin uc_nation := 0 ;
10334: LD_ADDR_OWVAR 21
10338: PUSH
10339: LD_INT 0
10341: ST_TO_ADDR
// hc_class := 17 ;
10342: LD_ADDR_OWVAR 28
10346: PUSH
10347: LD_INT 17
10349: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10350: LD_ADDR_OWVAR 29
10354: PUSH
10355: LD_INT 11
10357: PUSH
10358: LD_INT 13
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: ST_TO_ADDR
// un := CreateHuman ;
10365: LD_ADDR_VAR 0 7
10369: PUSH
10370: CALL_OW 44
10374: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10375: LD_VAR 0 7
10379: PPUSH
10380: LD_VAR 0 4
10384: PPUSH
10385: LD_INT 0
10387: PPUSH
10388: CALL_OW 49
// end ;
10392: GO 10331
10394: POP
10395: POP
// end ; end ;
10396: GO 10399
10398: POP
// end ;
10399: LD_VAR 0 5
10403: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10404: LD_INT 0
10406: PPUSH
10407: PPUSH
10408: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10409: LD_ADDR_VAR 0 5
10413: PUSH
10414: LD_INT 22
10416: PUSH
10417: LD_VAR 0 3
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PPUSH
10431: LD_VAR 0 1
10435: PPUSH
10436: LD_VAR 0 2
10440: PPUSH
10441: CALL_OW 73
10445: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10446: LD_ADDR_VAR 0 6
10450: PUSH
10451: LD_VAR 0 5
10455: PPUSH
10456: LD_VAR 0 1
10460: PPUSH
10461: LD_VAR 0 2
10465: PPUSH
10466: CALL_OW 297
10470: ST_TO_ADDR
// result := dist ;
10471: LD_ADDR_VAR 0 4
10475: PUSH
10476: LD_VAR 0 6
10480: ST_TO_ADDR
// end ;
10481: LD_VAR 0 4
10485: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10486: LD_INT 0
10488: PPUSH
10489: PPUSH
10490: PPUSH
// result := 0 ;
10491: LD_ADDR_VAR 0 2
10495: PUSH
10496: LD_INT 0
10498: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10499: LD_ADDR_VAR 0 4
10503: PUSH
10504: LD_INT 22
10506: PUSH
10507: LD_VAR 0 1
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: LD_INT 2
10518: PUSH
10519: LD_INT 30
10521: PUSH
10522: LD_INT 0
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 30
10531: PUSH
10532: LD_INT 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PPUSH
10548: CALL_OW 69
10552: ST_TO_ADDR
// if not bases then
10553: LD_VAR 0 4
10557: NOT
10558: IFFALSE 10562
// exit ;
10560: GO 10608
// for i in bases do
10562: LD_ADDR_VAR 0 3
10566: PUSH
10567: LD_VAR 0 4
10571: PUSH
10572: FOR_IN
10573: IFFALSE 10606
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_VAR 0 2
10584: PUSH
10585: LD_VAR 0 3
10589: PPUSH
10590: CALL_OW 274
10594: PPUSH
10595: LD_INT 3
10597: PPUSH
10598: CALL_OW 275
10602: PLUS
10603: ST_TO_ADDR
10604: GO 10572
10606: POP
10607: POP
// end ; end_of_file
10608: LD_VAR 0 2
10612: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10613: LD_VAR 0 1
10617: PUSH
10618: LD_INT 1
10620: EQUAL
10621: IFFALSE 10630
// YouLost ( jota-lose ) ;
10623: LD_STRING jota-lose
10625: PPUSH
10626: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10630: LD_EXP 1
10634: PUSH
10635: LD_INT 2
10637: EQUAL
10638: PUSH
10639: LD_EXP 8
10643: PUSH
10644: LD_INT 0
10646: EQUAL
10647: AND
10648: IFFALSE 10963
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10650: LD_VAR 0 1
10654: PPUSH
10655: CALL_OW 255
10659: PUSH
10660: LD_INT 1
10662: EQUAL
10663: PUSH
10664: LD_VAR 0 1
10668: PUSH
10669: LD_INT 11
10671: PPUSH
10672: LD_INT 21
10674: PUSH
10675: LD_INT 3
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PPUSH
10682: CALL_OW 70
10686: PUSH
10687: LD_INT 2
10689: PUSH
10690: LD_INT 30
10692: PUSH
10693: LD_INT 6
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 30
10702: PUSH
10703: LD_INT 10
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 30
10712: PUSH
10713: LD_INT 7
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 30
10722: PUSH
10723: LD_INT 8
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: PUSH
10737: EMPTY
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: PUSH
10746: EMPTY
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: DIFF
10754: IN
10755: AND
10756: IFFALSE 10842
// begin ai_build := ai_build ^ GetBType ( un ) ;
10758: LD_ADDR_EXP 10
10762: PUSH
10763: LD_EXP 10
10767: PUSH
10768: LD_VAR 0 1
10772: PPUSH
10773: CALL_OW 266
10777: ADD
10778: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10779: LD_ADDR_EXP 10
10783: PUSH
10784: LD_EXP 10
10788: PUSH
10789: LD_VAR 0 1
10793: PPUSH
10794: CALL_OW 250
10798: ADD
10799: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10800: LD_ADDR_EXP 10
10804: PUSH
10805: LD_EXP 10
10809: PUSH
10810: LD_VAR 0 1
10814: PPUSH
10815: CALL_OW 251
10819: ADD
10820: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10821: LD_ADDR_EXP 10
10825: PUSH
10826: LD_EXP 10
10830: PUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 254
10840: ADD
10841: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10842: LD_VAR 0 1
10846: PPUSH
10847: CALL_OW 255
10851: PUSH
10852: LD_INT 1
10854: EQUAL
10855: PUSH
10856: LD_VAR 0 1
10860: PUSH
10861: LD_INT 21
10863: PUSH
10864: LD_INT 2
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PPUSH
10871: CALL_OW 69
10875: IN
10876: AND
10877: IFFALSE 10963
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10879: LD_ADDR_EXP 11
10883: PUSH
10884: LD_EXP 11
10888: PUSH
10889: LD_VAR 0 1
10893: PPUSH
10894: CALL_OW 265
10898: ADD
10899: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10900: LD_ADDR_EXP 11
10904: PUSH
10905: LD_EXP 11
10909: PUSH
10910: LD_VAR 0 1
10914: PPUSH
10915: CALL_OW 262
10919: ADD
10920: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10921: LD_ADDR_EXP 11
10925: PUSH
10926: LD_EXP 11
10930: PUSH
10931: LD_VAR 0 1
10935: PPUSH
10936: CALL_OW 263
10940: ADD
10941: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10942: LD_ADDR_EXP 11
10946: PUSH
10947: LD_EXP 11
10951: PUSH
10952: LD_VAR 0 1
10956: PPUSH
10957: CALL_OW 264
10961: ADD
10962: ST_TO_ADDR
// end ; end ; end ;
10963: PPOPN 1
10965: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10966: LD_EXP 1
10970: PUSH
10971: LD_INT 1
10973: EQUAL
10974: PUSH
10975: LD_INT 22
10977: PUSH
10978: LD_INT 1
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 21
10987: PUSH
10988: LD_INT 1
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 69
11003: PUSH
11004: LD_INT 0
11006: EQUAL
11007: AND
11008: IFFALSE 11020
11010: GO 11012
11012: DISABLE
// YouLost ( peo-lose ) ;
11013: LD_STRING peo-lose
11015: PPUSH
11016: CALL_OW 104
11020: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11021: LD_EXP 1
11025: PUSH
11026: LD_INT 2
11028: EQUAL
11029: PUSH
11030: LD_INT 22
11032: PUSH
11033: LD_INT 3
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 21
11042: PUSH
11043: LD_INT 1
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: PUSH
11059: LD_INT 0
11061: EQUAL
11062: AND
11063: IFFALSE 11075
11065: GO 11067
11067: DISABLE
// YouLost ( peo-lose ) ;
11068: LD_STRING peo-lose
11070: PPUSH
11071: CALL_OW 104
11075: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
11076: LD_OWVAR 2
11080: PPUSH
11081: CALL 10486 0 1
11085: PUSH
11086: LD_EXP 5
11090: GREATEREQUAL
11091: IFFALSE 11177
11093: GO 11095
11095: DISABLE
11096: LD_INT 0
11098: PPUSH
// begin if GetSide ( jota_base ) = your_side then
11099: LD_INT 1
11101: PPUSH
11102: CALL_OW 255
11106: PUSH
11107: LD_OWVAR 2
11111: EQUAL
11112: IFFALSE 11155
// begin for i = 1 to 3 do
11114: LD_ADDR_VAR 0 1
11118: PUSH
11119: DOUBLE
11120: LD_INT 1
11122: DEC
11123: ST_TO_ADDR
11124: LD_INT 3
11126: PUSH
11127: FOR_TO
11128: IFFALSE 11142
// AddMedal ( med , 1 ) ;
11130: LD_STRING med
11132: PPUSH
11133: LD_INT 1
11135: PPUSH
11136: CALL_OW 101
11140: GO 11127
11142: POP
11143: POP
// GiveMedals ( MAIN ) ;
11144: LD_STRING MAIN
11146: PPUSH
11147: CALL_OW 102
// YouWin ;
11151: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
11155: LD_INT 1
11157: PPUSH
11158: CALL_OW 255
11162: PUSH
11163: LD_OWVAR 2
11167: NONEQUAL
11168: IFFALSE 11177
// YouLost ( source ) ;
11170: LD_STRING source
11172: PPUSH
11173: CALL_OW 104
// end ; end_of_file
11177: PPOPN 1
11179: END
// every 2 2$05 + 0 0$11 do
11180: GO 11182
11182: DISABLE
// begin enable ;
11183: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11184: LD_INT 1
11186: PPUSH
11187: LD_INT 5
11189: PPUSH
11190: CALL_OW 12
11194: PPUSH
11195: LD_INT 7
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11205: LD_INT 350
11207: PPUSH
11208: LD_INT 1295
11210: PPUSH
11211: CALL_OW 12
11215: PPUSH
11216: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11220: LD_INT 1
11222: PPUSH
11223: LD_INT 5
11225: PPUSH
11226: CALL_OW 12
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: CALL_OW 57
// end ;
11238: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11239: LD_EXP 1
11243: PUSH
11244: LD_INT 2
11246: EQUAL
11247: PUSH
11248: LD_EXP 8
11252: PUSH
11253: LD_INT 0
11255: EQUAL
11256: AND
11257: IFFALSE 11347
11259: GO 11261
11261: DISABLE
// begin enable ;
11262: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11263: LD_INT 1
11265: PPUSH
11266: LD_INT 5
11268: PPUSH
11269: CALL_OW 12
11273: PPUSH
11274: LD_INT 7
11276: PPUSH
11277: LD_INT 1
11279: PPUSH
11280: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11284: LD_INT 350
11286: PPUSH
11287: LD_INT 1750
11289: PPUSH
11290: CALL_OW 12
11294: PPUSH
11295: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11299: LD_EXP 6
11303: PUSH
11304: LD_INT 73500
11306: PUSH
11307: LD_INT 63000
11309: PUSH
11310: LD_INT 52500
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: PUSH
11318: LD_EXP 2
11322: ARRAY
11323: LESSEQUAL
11324: IFFALSE 11347
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11326: LD_INT 1
11328: PPUSH
11329: LD_INT 5
11331: PPUSH
11332: CALL_OW 12
11336: PPUSH
11337: LD_INT 12
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: CALL_OW 55
// end ; end_of_file
11347: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11348: LD_VAR 0 1
11352: PPUSH
11353: LD_VAR 0 2
11357: PPUSH
11358: LD_VAR 0 3
11362: PPUSH
11363: CALL 22150 0 3
// end ;
11367: PPOPN 3
11369: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11370: LD_VAR 0 1
11374: PPUSH
11375: CALL 22248 0 1
// end ; end_of_file
11379: PPOPN 1
11381: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
11382: GO 11384
11384: DISABLE
// begin ru_radar := 98 ;
11385: LD_ADDR_EXP 21
11389: PUSH
11390: LD_INT 98
11392: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11393: LD_ADDR_EXP 22
11397: PUSH
11398: LD_INT 89
11400: ST_TO_ADDR
// us_hack := 99 ;
11401: LD_ADDR_EXP 23
11405: PUSH
11406: LD_INT 99
11408: ST_TO_ADDR
// us_artillery := 97 ;
11409: LD_ADDR_EXP 24
11413: PUSH
11414: LD_INT 97
11416: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11417: LD_ADDR_EXP 25
11421: PUSH
11422: LD_INT 91
11424: ST_TO_ADDR
// end ; end_of_file end_of_file
11425: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11426: GO 11428
11428: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11429: LD_STRING initStreamRollete();
11431: PPUSH
11432: CALL_OW 559
// InitStreamMode ;
11436: CALL 11445 0 0
// DefineStreamItems ( ) ;
11440: CALL 11885 0 0
// end ;
11444: END
// function InitStreamMode ; begin
11445: LD_INT 0
11447: PPUSH
// streamModeActive := false ;
11448: LD_ADDR_EXP 26
11452: PUSH
11453: LD_INT 0
11455: ST_TO_ADDR
// normalCounter := 26 ;
11456: LD_ADDR_EXP 27
11460: PUSH
11461: LD_INT 26
11463: ST_TO_ADDR
// hardcoreCounter := 12 ;
11464: LD_ADDR_EXP 28
11468: PUSH
11469: LD_INT 12
11471: ST_TO_ADDR
// sRocket := false ;
11472: LD_ADDR_EXP 31
11476: PUSH
11477: LD_INT 0
11479: ST_TO_ADDR
// sSpeed := false ;
11480: LD_ADDR_EXP 30
11484: PUSH
11485: LD_INT 0
11487: ST_TO_ADDR
// sEngine := false ;
11488: LD_ADDR_EXP 32
11492: PUSH
11493: LD_INT 0
11495: ST_TO_ADDR
// sSpec := false ;
11496: LD_ADDR_EXP 29
11500: PUSH
11501: LD_INT 0
11503: ST_TO_ADDR
// sLevel := false ;
11504: LD_ADDR_EXP 33
11508: PUSH
11509: LD_INT 0
11511: ST_TO_ADDR
// sArmoury := false ;
11512: LD_ADDR_EXP 34
11516: PUSH
11517: LD_INT 0
11519: ST_TO_ADDR
// sRadar := false ;
11520: LD_ADDR_EXP 35
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
// sBunker := false ;
11528: LD_ADDR_EXP 36
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// sHack := false ;
11536: LD_ADDR_EXP 37
11540: PUSH
11541: LD_INT 0
11543: ST_TO_ADDR
// sFire := false ;
11544: LD_ADDR_EXP 38
11548: PUSH
11549: LD_INT 0
11551: ST_TO_ADDR
// sRefresh := false ;
11552: LD_ADDR_EXP 39
11556: PUSH
11557: LD_INT 0
11559: ST_TO_ADDR
// sExp := false ;
11560: LD_ADDR_EXP 40
11564: PUSH
11565: LD_INT 0
11567: ST_TO_ADDR
// sDepot := false ;
11568: LD_ADDR_EXP 41
11572: PUSH
11573: LD_INT 0
11575: ST_TO_ADDR
// sFlag := false ;
11576: LD_ADDR_EXP 42
11580: PUSH
11581: LD_INT 0
11583: ST_TO_ADDR
// sKamikadze := false ;
11584: LD_ADDR_EXP 50
11588: PUSH
11589: LD_INT 0
11591: ST_TO_ADDR
// sTroll := false ;
11592: LD_ADDR_EXP 51
11596: PUSH
11597: LD_INT 0
11599: ST_TO_ADDR
// sSlow := false ;
11600: LD_ADDR_EXP 52
11604: PUSH
11605: LD_INT 0
11607: ST_TO_ADDR
// sLack := false ;
11608: LD_ADDR_EXP 53
11612: PUSH
11613: LD_INT 0
11615: ST_TO_ADDR
// sTank := false ;
11616: LD_ADDR_EXP 55
11620: PUSH
11621: LD_INT 0
11623: ST_TO_ADDR
// sRemote := false ;
11624: LD_ADDR_EXP 56
11628: PUSH
11629: LD_INT 0
11631: ST_TO_ADDR
// sPowell := false ;
11632: LD_ADDR_EXP 57
11636: PUSH
11637: LD_INT 0
11639: ST_TO_ADDR
// sTeleport := false ;
11640: LD_ADDR_EXP 60
11644: PUSH
11645: LD_INT 0
11647: ST_TO_ADDR
// sOilTower := false ;
11648: LD_ADDR_EXP 62
11652: PUSH
11653: LD_INT 0
11655: ST_TO_ADDR
// sShovel := false ;
11656: LD_ADDR_EXP 63
11660: PUSH
11661: LD_INT 0
11663: ST_TO_ADDR
// sSheik := false ;
11664: LD_ADDR_EXP 64
11668: PUSH
11669: LD_INT 0
11671: ST_TO_ADDR
// sEarthquake := false ;
11672: LD_ADDR_EXP 66
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// sAI := false ;
11680: LD_ADDR_EXP 67
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// sCargo := false ;
11688: LD_ADDR_EXP 70
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// sDLaser := false ;
11696: LD_ADDR_EXP 71
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// sExchange := false ;
11704: LD_ADDR_EXP 72
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// sFac := false ;
11712: LD_ADDR_EXP 73
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// sPower := false ;
11720: LD_ADDR_EXP 74
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sRandom := false ;
11728: LD_ADDR_EXP 75
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// sShield := false ;
11736: LD_ADDR_EXP 76
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// sTime := false ;
11744: LD_ADDR_EXP 77
11748: PUSH
11749: LD_INT 0
11751: ST_TO_ADDR
// sTools := false ;
11752: LD_ADDR_EXP 78
11756: PUSH
11757: LD_INT 0
11759: ST_TO_ADDR
// sSold := false ;
11760: LD_ADDR_EXP 43
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// sDiff := false ;
11768: LD_ADDR_EXP 44
11772: PUSH
11773: LD_INT 0
11775: ST_TO_ADDR
// sFog := false ;
11776: LD_ADDR_EXP 47
11780: PUSH
11781: LD_INT 0
11783: ST_TO_ADDR
// sReset := false ;
11784: LD_ADDR_EXP 48
11788: PUSH
11789: LD_INT 0
11791: ST_TO_ADDR
// sSun := false ;
11792: LD_ADDR_EXP 49
11796: PUSH
11797: LD_INT 0
11799: ST_TO_ADDR
// sTiger := false ;
11800: LD_ADDR_EXP 45
11804: PUSH
11805: LD_INT 0
11807: ST_TO_ADDR
// sBomb := false ;
11808: LD_ADDR_EXP 46
11812: PUSH
11813: LD_INT 0
11815: ST_TO_ADDR
// sWound := false ;
11816: LD_ADDR_EXP 54
11820: PUSH
11821: LD_INT 0
11823: ST_TO_ADDR
// sBetray := false ;
11824: LD_ADDR_EXP 58
11828: PUSH
11829: LD_INT 0
11831: ST_TO_ADDR
// sContamin := false ;
11832: LD_ADDR_EXP 59
11836: PUSH
11837: LD_INT 0
11839: ST_TO_ADDR
// sOil := false ;
11840: LD_ADDR_EXP 61
11844: PUSH
11845: LD_INT 0
11847: ST_TO_ADDR
// sStu := false ;
11848: LD_ADDR_EXP 65
11852: PUSH
11853: LD_INT 0
11855: ST_TO_ADDR
// sBazooka := false ;
11856: LD_ADDR_EXP 68
11860: PUSH
11861: LD_INT 0
11863: ST_TO_ADDR
// sMortar := false ;
11864: LD_ADDR_EXP 69
11868: PUSH
11869: LD_INT 0
11871: ST_TO_ADDR
// sRanger := false ;
11872: LD_ADDR_EXP 79
11876: PUSH
11877: LD_INT 0
11879: ST_TO_ADDR
// end ;
11880: LD_VAR 0 1
11884: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11885: LD_INT 0
11887: PPUSH
11888: PPUSH
11889: PPUSH
11890: PPUSH
11891: PPUSH
// result := [ ] ;
11892: LD_ADDR_VAR 0 1
11896: PUSH
11897: EMPTY
11898: ST_TO_ADDR
// if campaign_id = 1 then
11899: LD_OWVAR 69
11903: PUSH
11904: LD_INT 1
11906: EQUAL
11907: IFFALSE 14855
// begin case mission_number of 1 :
11909: LD_OWVAR 70
11913: PUSH
11914: LD_INT 1
11916: DOUBLE
11917: EQUAL
11918: IFTRUE 11922
11920: GO 11986
11922: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11923: LD_ADDR_VAR 0 1
11927: PUSH
11928: LD_INT 2
11930: PUSH
11931: LD_INT 4
11933: PUSH
11934: LD_INT 11
11936: PUSH
11937: LD_INT 12
11939: PUSH
11940: LD_INT 15
11942: PUSH
11943: LD_INT 16
11945: PUSH
11946: LD_INT 22
11948: PUSH
11949: LD_INT 23
11951: PUSH
11952: LD_INT 26
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 101
11968: PUSH
11969: LD_INT 102
11971: PUSH
11972: LD_INT 106
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: ST_TO_ADDR
11984: GO 14855
11986: LD_INT 2
11988: DOUBLE
11989: EQUAL
11990: IFTRUE 11994
11992: GO 12066
11994: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11995: LD_ADDR_VAR 0 1
11999: PUSH
12000: LD_INT 2
12002: PUSH
12003: LD_INT 4
12005: PUSH
12006: LD_INT 11
12008: PUSH
12009: LD_INT 12
12011: PUSH
12012: LD_INT 15
12014: PUSH
12015: LD_INT 16
12017: PUSH
12018: LD_INT 22
12020: PUSH
12021: LD_INT 23
12023: PUSH
12024: LD_INT 26
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 101
12040: PUSH
12041: LD_INT 102
12043: PUSH
12044: LD_INT 105
12046: PUSH
12047: LD_INT 106
12049: PUSH
12050: LD_INT 108
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: ST_TO_ADDR
12064: GO 14855
12066: LD_INT 3
12068: DOUBLE
12069: EQUAL
12070: IFTRUE 12074
12072: GO 12150
12074: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12075: LD_ADDR_VAR 0 1
12079: PUSH
12080: LD_INT 2
12082: PUSH
12083: LD_INT 4
12085: PUSH
12086: LD_INT 5
12088: PUSH
12089: LD_INT 11
12091: PUSH
12092: LD_INT 12
12094: PUSH
12095: LD_INT 15
12097: PUSH
12098: LD_INT 16
12100: PUSH
12101: LD_INT 22
12103: PUSH
12104: LD_INT 26
12106: PUSH
12107: LD_INT 36
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 101
12124: PUSH
12125: LD_INT 102
12127: PUSH
12128: LD_INT 105
12130: PUSH
12131: LD_INT 106
12133: PUSH
12134: LD_INT 108
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: ST_TO_ADDR
12148: GO 14855
12150: LD_INT 4
12152: DOUBLE
12153: EQUAL
12154: IFTRUE 12158
12156: GO 12242
12158: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12159: LD_ADDR_VAR 0 1
12163: PUSH
12164: LD_INT 2
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: LD_INT 5
12172: PUSH
12173: LD_INT 8
12175: PUSH
12176: LD_INT 11
12178: PUSH
12179: LD_INT 12
12181: PUSH
12182: LD_INT 15
12184: PUSH
12185: LD_INT 16
12187: PUSH
12188: LD_INT 22
12190: PUSH
12191: LD_INT 23
12193: PUSH
12194: LD_INT 26
12196: PUSH
12197: LD_INT 36
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 101
12216: PUSH
12217: LD_INT 102
12219: PUSH
12220: LD_INT 105
12222: PUSH
12223: LD_INT 106
12225: PUSH
12226: LD_INT 108
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: ST_TO_ADDR
12240: GO 14855
12242: LD_INT 5
12244: DOUBLE
12245: EQUAL
12246: IFTRUE 12250
12248: GO 12350
12250: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12251: LD_ADDR_VAR 0 1
12255: PUSH
12256: LD_INT 2
12258: PUSH
12259: LD_INT 4
12261: PUSH
12262: LD_INT 5
12264: PUSH
12265: LD_INT 6
12267: PUSH
12268: LD_INT 8
12270: PUSH
12271: LD_INT 11
12273: PUSH
12274: LD_INT 12
12276: PUSH
12277: LD_INT 15
12279: PUSH
12280: LD_INT 16
12282: PUSH
12283: LD_INT 22
12285: PUSH
12286: LD_INT 23
12288: PUSH
12289: LD_INT 25
12291: PUSH
12292: LD_INT 26
12294: PUSH
12295: LD_INT 36
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 101
12316: PUSH
12317: LD_INT 102
12319: PUSH
12320: LD_INT 105
12322: PUSH
12323: LD_INT 106
12325: PUSH
12326: LD_INT 108
12328: PUSH
12329: LD_INT 109
12331: PUSH
12332: LD_INT 112
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: ST_TO_ADDR
12348: GO 14855
12350: LD_INT 6
12352: DOUBLE
12353: EQUAL
12354: IFTRUE 12358
12356: GO 12478
12358: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12359: LD_ADDR_VAR 0 1
12363: PUSH
12364: LD_INT 2
12366: PUSH
12367: LD_INT 4
12369: PUSH
12370: LD_INT 5
12372: PUSH
12373: LD_INT 6
12375: PUSH
12376: LD_INT 8
12378: PUSH
12379: LD_INT 11
12381: PUSH
12382: LD_INT 12
12384: PUSH
12385: LD_INT 15
12387: PUSH
12388: LD_INT 16
12390: PUSH
12391: LD_INT 20
12393: PUSH
12394: LD_INT 21
12396: PUSH
12397: LD_INT 22
12399: PUSH
12400: LD_INT 23
12402: PUSH
12403: LD_INT 25
12405: PUSH
12406: LD_INT 26
12408: PUSH
12409: LD_INT 30
12411: PUSH
12412: LD_INT 31
12414: PUSH
12415: LD_INT 32
12417: PUSH
12418: LD_INT 36
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 101
12444: PUSH
12445: LD_INT 102
12447: PUSH
12448: LD_INT 105
12450: PUSH
12451: LD_INT 106
12453: PUSH
12454: LD_INT 108
12456: PUSH
12457: LD_INT 109
12459: PUSH
12460: LD_INT 112
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: ST_TO_ADDR
12476: GO 14855
12478: LD_INT 7
12480: DOUBLE
12481: EQUAL
12482: IFTRUE 12486
12484: GO 12586
12486: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12487: LD_ADDR_VAR 0 1
12491: PUSH
12492: LD_INT 2
12494: PUSH
12495: LD_INT 4
12497: PUSH
12498: LD_INT 5
12500: PUSH
12501: LD_INT 7
12503: PUSH
12504: LD_INT 11
12506: PUSH
12507: LD_INT 12
12509: PUSH
12510: LD_INT 15
12512: PUSH
12513: LD_INT 16
12515: PUSH
12516: LD_INT 20
12518: PUSH
12519: LD_INT 21
12521: PUSH
12522: LD_INT 22
12524: PUSH
12525: LD_INT 23
12527: PUSH
12528: LD_INT 25
12530: PUSH
12531: LD_INT 26
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 101
12552: PUSH
12553: LD_INT 102
12555: PUSH
12556: LD_INT 103
12558: PUSH
12559: LD_INT 105
12561: PUSH
12562: LD_INT 106
12564: PUSH
12565: LD_INT 108
12567: PUSH
12568: LD_INT 112
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: ST_TO_ADDR
12584: GO 14855
12586: LD_INT 8
12588: DOUBLE
12589: EQUAL
12590: IFTRUE 12594
12592: GO 12722
12594: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12595: LD_ADDR_VAR 0 1
12599: PUSH
12600: LD_INT 2
12602: PUSH
12603: LD_INT 4
12605: PUSH
12606: LD_INT 5
12608: PUSH
12609: LD_INT 6
12611: PUSH
12612: LD_INT 7
12614: PUSH
12615: LD_INT 8
12617: PUSH
12618: LD_INT 11
12620: PUSH
12621: LD_INT 12
12623: PUSH
12624: LD_INT 15
12626: PUSH
12627: LD_INT 16
12629: PUSH
12630: LD_INT 20
12632: PUSH
12633: LD_INT 21
12635: PUSH
12636: LD_INT 22
12638: PUSH
12639: LD_INT 23
12641: PUSH
12642: LD_INT 25
12644: PUSH
12645: LD_INT 26
12647: PUSH
12648: LD_INT 30
12650: PUSH
12651: LD_INT 31
12653: PUSH
12654: LD_INT 32
12656: PUSH
12657: LD_INT 36
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 101
12684: PUSH
12685: LD_INT 102
12687: PUSH
12688: LD_INT 103
12690: PUSH
12691: LD_INT 105
12693: PUSH
12694: LD_INT 106
12696: PUSH
12697: LD_INT 108
12699: PUSH
12700: LD_INT 109
12702: PUSH
12703: LD_INT 112
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: ST_TO_ADDR
12720: GO 14855
12722: LD_INT 9
12724: DOUBLE
12725: EQUAL
12726: IFTRUE 12730
12728: GO 12866
12730: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12731: LD_ADDR_VAR 0 1
12735: PUSH
12736: LD_INT 2
12738: PUSH
12739: LD_INT 4
12741: PUSH
12742: LD_INT 5
12744: PUSH
12745: LD_INT 6
12747: PUSH
12748: LD_INT 7
12750: PUSH
12751: LD_INT 8
12753: PUSH
12754: LD_INT 11
12756: PUSH
12757: LD_INT 12
12759: PUSH
12760: LD_INT 15
12762: PUSH
12763: LD_INT 16
12765: PUSH
12766: LD_INT 20
12768: PUSH
12769: LD_INT 21
12771: PUSH
12772: LD_INT 22
12774: PUSH
12775: LD_INT 23
12777: PUSH
12778: LD_INT 25
12780: PUSH
12781: LD_INT 26
12783: PUSH
12784: LD_INT 28
12786: PUSH
12787: LD_INT 30
12789: PUSH
12790: LD_INT 31
12792: PUSH
12793: LD_INT 32
12795: PUSH
12796: LD_INT 36
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 101
12824: PUSH
12825: LD_INT 102
12827: PUSH
12828: LD_INT 103
12830: PUSH
12831: LD_INT 105
12833: PUSH
12834: LD_INT 106
12836: PUSH
12837: LD_INT 108
12839: PUSH
12840: LD_INT 109
12842: PUSH
12843: LD_INT 112
12845: PUSH
12846: LD_INT 114
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: ST_TO_ADDR
12864: GO 14855
12866: LD_INT 10
12868: DOUBLE
12869: EQUAL
12870: IFTRUE 12874
12872: GO 13058
12874: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 2
12882: PUSH
12883: LD_INT 4
12885: PUSH
12886: LD_INT 5
12888: PUSH
12889: LD_INT 6
12891: PUSH
12892: LD_INT 7
12894: PUSH
12895: LD_INT 8
12897: PUSH
12898: LD_INT 9
12900: PUSH
12901: LD_INT 10
12903: PUSH
12904: LD_INT 11
12906: PUSH
12907: LD_INT 12
12909: PUSH
12910: LD_INT 13
12912: PUSH
12913: LD_INT 14
12915: PUSH
12916: LD_INT 15
12918: PUSH
12919: LD_INT 16
12921: PUSH
12922: LD_INT 17
12924: PUSH
12925: LD_INT 18
12927: PUSH
12928: LD_INT 19
12930: PUSH
12931: LD_INT 20
12933: PUSH
12934: LD_INT 21
12936: PUSH
12937: LD_INT 22
12939: PUSH
12940: LD_INT 23
12942: PUSH
12943: LD_INT 24
12945: PUSH
12946: LD_INT 25
12948: PUSH
12949: LD_INT 26
12951: PUSH
12952: LD_INT 28
12954: PUSH
12955: LD_INT 30
12957: PUSH
12958: LD_INT 31
12960: PUSH
12961: LD_INT 32
12963: PUSH
12964: LD_INT 36
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 101
13000: PUSH
13001: LD_INT 102
13003: PUSH
13004: LD_INT 103
13006: PUSH
13007: LD_INT 104
13009: PUSH
13010: LD_INT 105
13012: PUSH
13013: LD_INT 106
13015: PUSH
13016: LD_INT 107
13018: PUSH
13019: LD_INT 108
13021: PUSH
13022: LD_INT 109
13024: PUSH
13025: LD_INT 110
13027: PUSH
13028: LD_INT 111
13030: PUSH
13031: LD_INT 112
13033: PUSH
13034: LD_INT 114
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: ST_TO_ADDR
13056: GO 14855
13058: LD_INT 11
13060: DOUBLE
13061: EQUAL
13062: IFTRUE 13066
13064: GO 13258
13066: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13067: LD_ADDR_VAR 0 1
13071: PUSH
13072: LD_INT 2
13074: PUSH
13075: LD_INT 3
13077: PUSH
13078: LD_INT 4
13080: PUSH
13081: LD_INT 5
13083: PUSH
13084: LD_INT 6
13086: PUSH
13087: LD_INT 7
13089: PUSH
13090: LD_INT 8
13092: PUSH
13093: LD_INT 9
13095: PUSH
13096: LD_INT 10
13098: PUSH
13099: LD_INT 11
13101: PUSH
13102: LD_INT 12
13104: PUSH
13105: LD_INT 13
13107: PUSH
13108: LD_INT 14
13110: PUSH
13111: LD_INT 15
13113: PUSH
13114: LD_INT 16
13116: PUSH
13117: LD_INT 17
13119: PUSH
13120: LD_INT 18
13122: PUSH
13123: LD_INT 19
13125: PUSH
13126: LD_INT 20
13128: PUSH
13129: LD_INT 21
13131: PUSH
13132: LD_INT 22
13134: PUSH
13135: LD_INT 23
13137: PUSH
13138: LD_INT 24
13140: PUSH
13141: LD_INT 25
13143: PUSH
13144: LD_INT 26
13146: PUSH
13147: LD_INT 28
13149: PUSH
13150: LD_INT 30
13152: PUSH
13153: LD_INT 31
13155: PUSH
13156: LD_INT 32
13158: PUSH
13159: LD_INT 34
13161: PUSH
13162: LD_INT 36
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 101
13200: PUSH
13201: LD_INT 102
13203: PUSH
13204: LD_INT 103
13206: PUSH
13207: LD_INT 104
13209: PUSH
13210: LD_INT 105
13212: PUSH
13213: LD_INT 106
13215: PUSH
13216: LD_INT 107
13218: PUSH
13219: LD_INT 108
13221: PUSH
13222: LD_INT 109
13224: PUSH
13225: LD_INT 110
13227: PUSH
13228: LD_INT 111
13230: PUSH
13231: LD_INT 112
13233: PUSH
13234: LD_INT 114
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: ST_TO_ADDR
13256: GO 14855
13258: LD_INT 12
13260: DOUBLE
13261: EQUAL
13262: IFTRUE 13266
13264: GO 13474
13266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13267: LD_ADDR_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: PUSH
13275: LD_INT 2
13277: PUSH
13278: LD_INT 3
13280: PUSH
13281: LD_INT 4
13283: PUSH
13284: LD_INT 5
13286: PUSH
13287: LD_INT 6
13289: PUSH
13290: LD_INT 7
13292: PUSH
13293: LD_INT 8
13295: PUSH
13296: LD_INT 9
13298: PUSH
13299: LD_INT 10
13301: PUSH
13302: LD_INT 11
13304: PUSH
13305: LD_INT 12
13307: PUSH
13308: LD_INT 13
13310: PUSH
13311: LD_INT 14
13313: PUSH
13314: LD_INT 15
13316: PUSH
13317: LD_INT 16
13319: PUSH
13320: LD_INT 17
13322: PUSH
13323: LD_INT 18
13325: PUSH
13326: LD_INT 19
13328: PUSH
13329: LD_INT 20
13331: PUSH
13332: LD_INT 21
13334: PUSH
13335: LD_INT 22
13337: PUSH
13338: LD_INT 23
13340: PUSH
13341: LD_INT 24
13343: PUSH
13344: LD_INT 25
13346: PUSH
13347: LD_INT 26
13349: PUSH
13350: LD_INT 27
13352: PUSH
13353: LD_INT 28
13355: PUSH
13356: LD_INT 30
13358: PUSH
13359: LD_INT 31
13361: PUSH
13362: LD_INT 32
13364: PUSH
13365: LD_INT 33
13367: PUSH
13368: LD_INT 34
13370: PUSH
13371: LD_INT 36
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 101
13412: PUSH
13413: LD_INT 102
13415: PUSH
13416: LD_INT 103
13418: PUSH
13419: LD_INT 104
13421: PUSH
13422: LD_INT 105
13424: PUSH
13425: LD_INT 106
13427: PUSH
13428: LD_INT 107
13430: PUSH
13431: LD_INT 108
13433: PUSH
13434: LD_INT 109
13436: PUSH
13437: LD_INT 110
13439: PUSH
13440: LD_INT 111
13442: PUSH
13443: LD_INT 112
13445: PUSH
13446: LD_INT 113
13448: PUSH
13449: LD_INT 114
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: ST_TO_ADDR
13472: GO 14855
13474: LD_INT 13
13476: DOUBLE
13477: EQUAL
13478: IFTRUE 13482
13480: GO 13690
13482: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13483: LD_ADDR_VAR 0 1
13487: PUSH
13488: LD_INT 1
13490: PUSH
13491: LD_INT 2
13493: PUSH
13494: LD_INT 3
13496: PUSH
13497: LD_INT 4
13499: PUSH
13500: LD_INT 5
13502: PUSH
13503: LD_INT 6
13505: PUSH
13506: LD_INT 7
13508: PUSH
13509: LD_INT 8
13511: PUSH
13512: LD_INT 9
13514: PUSH
13515: LD_INT 10
13517: PUSH
13518: LD_INT 11
13520: PUSH
13521: LD_INT 12
13523: PUSH
13524: LD_INT 13
13526: PUSH
13527: LD_INT 14
13529: PUSH
13530: LD_INT 15
13532: PUSH
13533: LD_INT 16
13535: PUSH
13536: LD_INT 17
13538: PUSH
13539: LD_INT 18
13541: PUSH
13542: LD_INT 19
13544: PUSH
13545: LD_INT 20
13547: PUSH
13548: LD_INT 21
13550: PUSH
13551: LD_INT 22
13553: PUSH
13554: LD_INT 23
13556: PUSH
13557: LD_INT 24
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 26
13565: PUSH
13566: LD_INT 27
13568: PUSH
13569: LD_INT 28
13571: PUSH
13572: LD_INT 30
13574: PUSH
13575: LD_INT 31
13577: PUSH
13578: LD_INT 32
13580: PUSH
13581: LD_INT 33
13583: PUSH
13584: LD_INT 34
13586: PUSH
13587: LD_INT 36
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 101
13628: PUSH
13629: LD_INT 102
13631: PUSH
13632: LD_INT 103
13634: PUSH
13635: LD_INT 104
13637: PUSH
13638: LD_INT 105
13640: PUSH
13641: LD_INT 106
13643: PUSH
13644: LD_INT 107
13646: PUSH
13647: LD_INT 108
13649: PUSH
13650: LD_INT 109
13652: PUSH
13653: LD_INT 110
13655: PUSH
13656: LD_INT 111
13658: PUSH
13659: LD_INT 112
13661: PUSH
13662: LD_INT 113
13664: PUSH
13665: LD_INT 114
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: ST_TO_ADDR
13688: GO 14855
13690: LD_INT 14
13692: DOUBLE
13693: EQUAL
13694: IFTRUE 13698
13696: GO 13910
13698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_INT 1
13706: PUSH
13707: LD_INT 2
13709: PUSH
13710: LD_INT 3
13712: PUSH
13713: LD_INT 4
13715: PUSH
13716: LD_INT 5
13718: PUSH
13719: LD_INT 6
13721: PUSH
13722: LD_INT 7
13724: PUSH
13725: LD_INT 8
13727: PUSH
13728: LD_INT 9
13730: PUSH
13731: LD_INT 10
13733: PUSH
13734: LD_INT 11
13736: PUSH
13737: LD_INT 12
13739: PUSH
13740: LD_INT 13
13742: PUSH
13743: LD_INT 14
13745: PUSH
13746: LD_INT 15
13748: PUSH
13749: LD_INT 16
13751: PUSH
13752: LD_INT 17
13754: PUSH
13755: LD_INT 18
13757: PUSH
13758: LD_INT 19
13760: PUSH
13761: LD_INT 20
13763: PUSH
13764: LD_INT 21
13766: PUSH
13767: LD_INT 22
13769: PUSH
13770: LD_INT 23
13772: PUSH
13773: LD_INT 24
13775: PUSH
13776: LD_INT 25
13778: PUSH
13779: LD_INT 26
13781: PUSH
13782: LD_INT 27
13784: PUSH
13785: LD_INT 28
13787: PUSH
13788: LD_INT 29
13790: PUSH
13791: LD_INT 30
13793: PUSH
13794: LD_INT 31
13796: PUSH
13797: LD_INT 32
13799: PUSH
13800: LD_INT 33
13802: PUSH
13803: LD_INT 34
13805: PUSH
13806: LD_INT 36
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 101
13848: PUSH
13849: LD_INT 102
13851: PUSH
13852: LD_INT 103
13854: PUSH
13855: LD_INT 104
13857: PUSH
13858: LD_INT 105
13860: PUSH
13861: LD_INT 106
13863: PUSH
13864: LD_INT 107
13866: PUSH
13867: LD_INT 108
13869: PUSH
13870: LD_INT 109
13872: PUSH
13873: LD_INT 110
13875: PUSH
13876: LD_INT 111
13878: PUSH
13879: LD_INT 112
13881: PUSH
13882: LD_INT 113
13884: PUSH
13885: LD_INT 114
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: ST_TO_ADDR
13908: GO 14855
13910: LD_INT 15
13912: DOUBLE
13913: EQUAL
13914: IFTRUE 13918
13916: GO 14130
13918: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13919: LD_ADDR_VAR 0 1
13923: PUSH
13924: LD_INT 1
13926: PUSH
13927: LD_INT 2
13929: PUSH
13930: LD_INT 3
13932: PUSH
13933: LD_INT 4
13935: PUSH
13936: LD_INT 5
13938: PUSH
13939: LD_INT 6
13941: PUSH
13942: LD_INT 7
13944: PUSH
13945: LD_INT 8
13947: PUSH
13948: LD_INT 9
13950: PUSH
13951: LD_INT 10
13953: PUSH
13954: LD_INT 11
13956: PUSH
13957: LD_INT 12
13959: PUSH
13960: LD_INT 13
13962: PUSH
13963: LD_INT 14
13965: PUSH
13966: LD_INT 15
13968: PUSH
13969: LD_INT 16
13971: PUSH
13972: LD_INT 17
13974: PUSH
13975: LD_INT 18
13977: PUSH
13978: LD_INT 19
13980: PUSH
13981: LD_INT 20
13983: PUSH
13984: LD_INT 21
13986: PUSH
13987: LD_INT 22
13989: PUSH
13990: LD_INT 23
13992: PUSH
13993: LD_INT 24
13995: PUSH
13996: LD_INT 25
13998: PUSH
13999: LD_INT 26
14001: PUSH
14002: LD_INT 27
14004: PUSH
14005: LD_INT 28
14007: PUSH
14008: LD_INT 29
14010: PUSH
14011: LD_INT 30
14013: PUSH
14014: LD_INT 31
14016: PUSH
14017: LD_INT 32
14019: PUSH
14020: LD_INT 33
14022: PUSH
14023: LD_INT 34
14025: PUSH
14026: LD_INT 36
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 101
14068: PUSH
14069: LD_INT 102
14071: PUSH
14072: LD_INT 103
14074: PUSH
14075: LD_INT 104
14077: PUSH
14078: LD_INT 105
14080: PUSH
14081: LD_INT 106
14083: PUSH
14084: LD_INT 107
14086: PUSH
14087: LD_INT 108
14089: PUSH
14090: LD_INT 109
14092: PUSH
14093: LD_INT 110
14095: PUSH
14096: LD_INT 111
14098: PUSH
14099: LD_INT 112
14101: PUSH
14102: LD_INT 113
14104: PUSH
14105: LD_INT 114
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: ST_TO_ADDR
14128: GO 14855
14130: LD_INT 16
14132: DOUBLE
14133: EQUAL
14134: IFTRUE 14138
14136: GO 14262
14138: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14139: LD_ADDR_VAR 0 1
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: LD_INT 4
14149: PUSH
14150: LD_INT 5
14152: PUSH
14153: LD_INT 7
14155: PUSH
14156: LD_INT 11
14158: PUSH
14159: LD_INT 12
14161: PUSH
14162: LD_INT 15
14164: PUSH
14165: LD_INT 16
14167: PUSH
14168: LD_INT 20
14170: PUSH
14171: LD_INT 21
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_INT 23
14179: PUSH
14180: LD_INT 25
14182: PUSH
14183: LD_INT 26
14185: PUSH
14186: LD_INT 30
14188: PUSH
14189: LD_INT 31
14191: PUSH
14192: LD_INT 32
14194: PUSH
14195: LD_INT 33
14197: PUSH
14198: LD_INT 34
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 101
14224: PUSH
14225: LD_INT 102
14227: PUSH
14228: LD_INT 103
14230: PUSH
14231: LD_INT 106
14233: PUSH
14234: LD_INT 108
14236: PUSH
14237: LD_INT 112
14239: PUSH
14240: LD_INT 113
14242: PUSH
14243: LD_INT 114
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: ST_TO_ADDR
14260: GO 14855
14262: LD_INT 17
14264: DOUBLE
14265: EQUAL
14266: IFTRUE 14270
14268: GO 14482
14270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: LD_INT 1
14278: PUSH
14279: LD_INT 2
14281: PUSH
14282: LD_INT 3
14284: PUSH
14285: LD_INT 4
14287: PUSH
14288: LD_INT 5
14290: PUSH
14291: LD_INT 6
14293: PUSH
14294: LD_INT 7
14296: PUSH
14297: LD_INT 8
14299: PUSH
14300: LD_INT 9
14302: PUSH
14303: LD_INT 10
14305: PUSH
14306: LD_INT 11
14308: PUSH
14309: LD_INT 12
14311: PUSH
14312: LD_INT 13
14314: PUSH
14315: LD_INT 14
14317: PUSH
14318: LD_INT 15
14320: PUSH
14321: LD_INT 16
14323: PUSH
14324: LD_INT 17
14326: PUSH
14327: LD_INT 18
14329: PUSH
14330: LD_INT 19
14332: PUSH
14333: LD_INT 20
14335: PUSH
14336: LD_INT 21
14338: PUSH
14339: LD_INT 22
14341: PUSH
14342: LD_INT 23
14344: PUSH
14345: LD_INT 24
14347: PUSH
14348: LD_INT 25
14350: PUSH
14351: LD_INT 26
14353: PUSH
14354: LD_INT 27
14356: PUSH
14357: LD_INT 28
14359: PUSH
14360: LD_INT 29
14362: PUSH
14363: LD_INT 30
14365: PUSH
14366: LD_INT 31
14368: PUSH
14369: LD_INT 32
14371: PUSH
14372: LD_INT 33
14374: PUSH
14375: LD_INT 34
14377: PUSH
14378: LD_INT 36
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 101
14420: PUSH
14421: LD_INT 102
14423: PUSH
14424: LD_INT 103
14426: PUSH
14427: LD_INT 104
14429: PUSH
14430: LD_INT 105
14432: PUSH
14433: LD_INT 106
14435: PUSH
14436: LD_INT 107
14438: PUSH
14439: LD_INT 108
14441: PUSH
14442: LD_INT 109
14444: PUSH
14445: LD_INT 110
14447: PUSH
14448: LD_INT 111
14450: PUSH
14451: LD_INT 112
14453: PUSH
14454: LD_INT 113
14456: PUSH
14457: LD_INT 114
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: ST_TO_ADDR
14480: GO 14855
14482: LD_INT 18
14484: DOUBLE
14485: EQUAL
14486: IFTRUE 14490
14488: GO 14626
14490: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14491: LD_ADDR_VAR 0 1
14495: PUSH
14496: LD_INT 2
14498: PUSH
14499: LD_INT 4
14501: PUSH
14502: LD_INT 5
14504: PUSH
14505: LD_INT 7
14507: PUSH
14508: LD_INT 11
14510: PUSH
14511: LD_INT 12
14513: PUSH
14514: LD_INT 15
14516: PUSH
14517: LD_INT 16
14519: PUSH
14520: LD_INT 20
14522: PUSH
14523: LD_INT 21
14525: PUSH
14526: LD_INT 22
14528: PUSH
14529: LD_INT 23
14531: PUSH
14532: LD_INT 25
14534: PUSH
14535: LD_INT 26
14537: PUSH
14538: LD_INT 30
14540: PUSH
14541: LD_INT 31
14543: PUSH
14544: LD_INT 32
14546: PUSH
14547: LD_INT 33
14549: PUSH
14550: LD_INT 34
14552: PUSH
14553: LD_INT 35
14555: PUSH
14556: LD_INT 36
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 101
14584: PUSH
14585: LD_INT 102
14587: PUSH
14588: LD_INT 103
14590: PUSH
14591: LD_INT 106
14593: PUSH
14594: LD_INT 108
14596: PUSH
14597: LD_INT 112
14599: PUSH
14600: LD_INT 113
14602: PUSH
14603: LD_INT 114
14605: PUSH
14606: LD_INT 115
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: ST_TO_ADDR
14624: GO 14855
14626: LD_INT 19
14628: DOUBLE
14629: EQUAL
14630: IFTRUE 14634
14632: GO 14854
14634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14635: LD_ADDR_VAR 0 1
14639: PUSH
14640: LD_INT 1
14642: PUSH
14643: LD_INT 2
14645: PUSH
14646: LD_INT 3
14648: PUSH
14649: LD_INT 4
14651: PUSH
14652: LD_INT 5
14654: PUSH
14655: LD_INT 6
14657: PUSH
14658: LD_INT 7
14660: PUSH
14661: LD_INT 8
14663: PUSH
14664: LD_INT 9
14666: PUSH
14667: LD_INT 10
14669: PUSH
14670: LD_INT 11
14672: PUSH
14673: LD_INT 12
14675: PUSH
14676: LD_INT 13
14678: PUSH
14679: LD_INT 14
14681: PUSH
14682: LD_INT 15
14684: PUSH
14685: LD_INT 16
14687: PUSH
14688: LD_INT 17
14690: PUSH
14691: LD_INT 18
14693: PUSH
14694: LD_INT 19
14696: PUSH
14697: LD_INT 20
14699: PUSH
14700: LD_INT 21
14702: PUSH
14703: LD_INT 22
14705: PUSH
14706: LD_INT 23
14708: PUSH
14709: LD_INT 24
14711: PUSH
14712: LD_INT 25
14714: PUSH
14715: LD_INT 26
14717: PUSH
14718: LD_INT 27
14720: PUSH
14721: LD_INT 28
14723: PUSH
14724: LD_INT 29
14726: PUSH
14727: LD_INT 30
14729: PUSH
14730: LD_INT 31
14732: PUSH
14733: LD_INT 32
14735: PUSH
14736: LD_INT 33
14738: PUSH
14739: LD_INT 34
14741: PUSH
14742: LD_INT 35
14744: PUSH
14745: LD_INT 36
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 101
14788: PUSH
14789: LD_INT 102
14791: PUSH
14792: LD_INT 103
14794: PUSH
14795: LD_INT 104
14797: PUSH
14798: LD_INT 105
14800: PUSH
14801: LD_INT 106
14803: PUSH
14804: LD_INT 107
14806: PUSH
14807: LD_INT 108
14809: PUSH
14810: LD_INT 109
14812: PUSH
14813: LD_INT 110
14815: PUSH
14816: LD_INT 111
14818: PUSH
14819: LD_INT 112
14821: PUSH
14822: LD_INT 113
14824: PUSH
14825: LD_INT 114
14827: PUSH
14828: LD_INT 115
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: ST_TO_ADDR
14852: GO 14855
14854: POP
// end ; if result then
14855: LD_VAR 0 1
14859: IFFALSE 15148
// begin normal :=  ;
14861: LD_ADDR_VAR 0 3
14865: PUSH
14866: LD_STRING 
14868: ST_TO_ADDR
// hardcore :=  ;
14869: LD_ADDR_VAR 0 4
14873: PUSH
14874: LD_STRING 
14876: ST_TO_ADDR
// for i = 1 to normalCounter do
14877: LD_ADDR_VAR 0 5
14881: PUSH
14882: DOUBLE
14883: LD_INT 1
14885: DEC
14886: ST_TO_ADDR
14887: LD_EXP 27
14891: PUSH
14892: FOR_TO
14893: IFFALSE 14994
// begin tmp := 0 ;
14895: LD_ADDR_VAR 0 2
14899: PUSH
14900: LD_STRING 0
14902: ST_TO_ADDR
// if result [ 1 ] then
14903: LD_VAR 0 1
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: IFFALSE 14976
// if result [ 1 ] [ 1 ] = i then
14913: LD_VAR 0 1
14917: PUSH
14918: LD_INT 1
14920: ARRAY
14921: PUSH
14922: LD_INT 1
14924: ARRAY
14925: PUSH
14926: LD_VAR 0 5
14930: EQUAL
14931: IFFALSE 14976
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14933: LD_ADDR_VAR 0 1
14937: PUSH
14938: LD_VAR 0 1
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: LD_VAR 0 1
14950: PUSH
14951: LD_INT 1
14953: ARRAY
14954: PPUSH
14955: LD_INT 1
14957: PPUSH
14958: CALL_OW 3
14962: PPUSH
14963: CALL_OW 1
14967: ST_TO_ADDR
// tmp := 1 ;
14968: LD_ADDR_VAR 0 2
14972: PUSH
14973: LD_STRING 1
14975: ST_TO_ADDR
// end ; normal := normal & tmp ;
14976: LD_ADDR_VAR 0 3
14980: PUSH
14981: LD_VAR 0 3
14985: PUSH
14986: LD_VAR 0 2
14990: STR
14991: ST_TO_ADDR
// end ;
14992: GO 14892
14994: POP
14995: POP
// for i = 1 to hardcoreCounter do
14996: LD_ADDR_VAR 0 5
15000: PUSH
15001: DOUBLE
15002: LD_INT 1
15004: DEC
15005: ST_TO_ADDR
15006: LD_EXP 28
15010: PUSH
15011: FOR_TO
15012: IFFALSE 15117
// begin tmp := 0 ;
15014: LD_ADDR_VAR 0 2
15018: PUSH
15019: LD_STRING 0
15021: ST_TO_ADDR
// if result [ 2 ] then
15022: LD_VAR 0 1
15026: PUSH
15027: LD_INT 2
15029: ARRAY
15030: IFFALSE 15099
// if result [ 2 ] [ 1 ] = 100 + i then
15032: LD_VAR 0 1
15036: PUSH
15037: LD_INT 2
15039: ARRAY
15040: PUSH
15041: LD_INT 1
15043: ARRAY
15044: PUSH
15045: LD_INT 100
15047: PUSH
15048: LD_VAR 0 5
15052: PLUS
15053: EQUAL
15054: IFFALSE 15099
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15056: LD_ADDR_VAR 0 1
15060: PUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: LD_INT 2
15068: PPUSH
15069: LD_VAR 0 1
15073: PUSH
15074: LD_INT 2
15076: ARRAY
15077: PPUSH
15078: LD_INT 1
15080: PPUSH
15081: CALL_OW 3
15085: PPUSH
15086: CALL_OW 1
15090: ST_TO_ADDR
// tmp := 1 ;
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: LD_STRING 1
15098: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15099: LD_ADDR_VAR 0 4
15103: PUSH
15104: LD_VAR 0 4
15108: PUSH
15109: LD_VAR 0 2
15113: STR
15114: ST_TO_ADDR
// end ;
15115: GO 15011
15117: POP
15118: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15119: LD_STRING getStreamItemsFromMission("
15121: PUSH
15122: LD_VAR 0 3
15126: STR
15127: PUSH
15128: LD_STRING ","
15130: STR
15131: PUSH
15132: LD_VAR 0 4
15136: STR
15137: PUSH
15138: LD_STRING ")
15140: STR
15141: PPUSH
15142: CALL_OW 559
// end else
15146: GO 15155
// ToLua ( getStreamItemsFromMission("","") ) ;
15148: LD_STRING getStreamItemsFromMission("","")
15150: PPUSH
15151: CALL_OW 559
// end ;
15155: LD_VAR 0 1
15159: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15160: LD_VAR 0 2
15164: PUSH
15165: LD_INT 100
15167: EQUAL
15168: IFFALSE 16117
// begin if not StreamModeActive then
15170: LD_EXP 26
15174: NOT
15175: IFFALSE 15185
// StreamModeActive := true ;
15177: LD_ADDR_EXP 26
15181: PUSH
15182: LD_INT 1
15184: ST_TO_ADDR
// if p3 = 0 then
15185: LD_VAR 0 3
15189: PUSH
15190: LD_INT 0
15192: EQUAL
15193: IFFALSE 15199
// InitStreamMode ;
15195: CALL 11445 0 0
// if p3 = 1 then
15199: LD_VAR 0 3
15203: PUSH
15204: LD_INT 1
15206: EQUAL
15207: IFFALSE 15217
// sRocket := true ;
15209: LD_ADDR_EXP 31
15213: PUSH
15214: LD_INT 1
15216: ST_TO_ADDR
// if p3 = 2 then
15217: LD_VAR 0 3
15221: PUSH
15222: LD_INT 2
15224: EQUAL
15225: IFFALSE 15235
// sSpeed := true ;
15227: LD_ADDR_EXP 30
15231: PUSH
15232: LD_INT 1
15234: ST_TO_ADDR
// if p3 = 3 then
15235: LD_VAR 0 3
15239: PUSH
15240: LD_INT 3
15242: EQUAL
15243: IFFALSE 15253
// sEngine := true ;
15245: LD_ADDR_EXP 32
15249: PUSH
15250: LD_INT 1
15252: ST_TO_ADDR
// if p3 = 4 then
15253: LD_VAR 0 3
15257: PUSH
15258: LD_INT 4
15260: EQUAL
15261: IFFALSE 15271
// sSpec := true ;
15263: LD_ADDR_EXP 29
15267: PUSH
15268: LD_INT 1
15270: ST_TO_ADDR
// if p3 = 5 then
15271: LD_VAR 0 3
15275: PUSH
15276: LD_INT 5
15278: EQUAL
15279: IFFALSE 15289
// sLevel := true ;
15281: LD_ADDR_EXP 33
15285: PUSH
15286: LD_INT 1
15288: ST_TO_ADDR
// if p3 = 6 then
15289: LD_VAR 0 3
15293: PUSH
15294: LD_INT 6
15296: EQUAL
15297: IFFALSE 15307
// sArmoury := true ;
15299: LD_ADDR_EXP 34
15303: PUSH
15304: LD_INT 1
15306: ST_TO_ADDR
// if p3 = 7 then
15307: LD_VAR 0 3
15311: PUSH
15312: LD_INT 7
15314: EQUAL
15315: IFFALSE 15325
// sRadar := true ;
15317: LD_ADDR_EXP 35
15321: PUSH
15322: LD_INT 1
15324: ST_TO_ADDR
// if p3 = 8 then
15325: LD_VAR 0 3
15329: PUSH
15330: LD_INT 8
15332: EQUAL
15333: IFFALSE 15343
// sBunker := true ;
15335: LD_ADDR_EXP 36
15339: PUSH
15340: LD_INT 1
15342: ST_TO_ADDR
// if p3 = 9 then
15343: LD_VAR 0 3
15347: PUSH
15348: LD_INT 9
15350: EQUAL
15351: IFFALSE 15361
// sHack := true ;
15353: LD_ADDR_EXP 37
15357: PUSH
15358: LD_INT 1
15360: ST_TO_ADDR
// if p3 = 10 then
15361: LD_VAR 0 3
15365: PUSH
15366: LD_INT 10
15368: EQUAL
15369: IFFALSE 15379
// sFire := true ;
15371: LD_ADDR_EXP 38
15375: PUSH
15376: LD_INT 1
15378: ST_TO_ADDR
// if p3 = 11 then
15379: LD_VAR 0 3
15383: PUSH
15384: LD_INT 11
15386: EQUAL
15387: IFFALSE 15397
// sRefresh := true ;
15389: LD_ADDR_EXP 39
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// if p3 = 12 then
15397: LD_VAR 0 3
15401: PUSH
15402: LD_INT 12
15404: EQUAL
15405: IFFALSE 15415
// sExp := true ;
15407: LD_ADDR_EXP 40
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
// if p3 = 13 then
15415: LD_VAR 0 3
15419: PUSH
15420: LD_INT 13
15422: EQUAL
15423: IFFALSE 15433
// sDepot := true ;
15425: LD_ADDR_EXP 41
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// if p3 = 14 then
15433: LD_VAR 0 3
15437: PUSH
15438: LD_INT 14
15440: EQUAL
15441: IFFALSE 15451
// sFlag := true ;
15443: LD_ADDR_EXP 42
15447: PUSH
15448: LD_INT 1
15450: ST_TO_ADDR
// if p3 = 15 then
15451: LD_VAR 0 3
15455: PUSH
15456: LD_INT 15
15458: EQUAL
15459: IFFALSE 15469
// sKamikadze := true ;
15461: LD_ADDR_EXP 50
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// if p3 = 16 then
15469: LD_VAR 0 3
15473: PUSH
15474: LD_INT 16
15476: EQUAL
15477: IFFALSE 15487
// sTroll := true ;
15479: LD_ADDR_EXP 51
15483: PUSH
15484: LD_INT 1
15486: ST_TO_ADDR
// if p3 = 17 then
15487: LD_VAR 0 3
15491: PUSH
15492: LD_INT 17
15494: EQUAL
15495: IFFALSE 15505
// sSlow := true ;
15497: LD_ADDR_EXP 52
15501: PUSH
15502: LD_INT 1
15504: ST_TO_ADDR
// if p3 = 18 then
15505: LD_VAR 0 3
15509: PUSH
15510: LD_INT 18
15512: EQUAL
15513: IFFALSE 15523
// sLack := true ;
15515: LD_ADDR_EXP 53
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// if p3 = 19 then
15523: LD_VAR 0 3
15527: PUSH
15528: LD_INT 19
15530: EQUAL
15531: IFFALSE 15541
// sTank := true ;
15533: LD_ADDR_EXP 55
15537: PUSH
15538: LD_INT 1
15540: ST_TO_ADDR
// if p3 = 20 then
15541: LD_VAR 0 3
15545: PUSH
15546: LD_INT 20
15548: EQUAL
15549: IFFALSE 15559
// sRemote := true ;
15551: LD_ADDR_EXP 56
15555: PUSH
15556: LD_INT 1
15558: ST_TO_ADDR
// if p3 = 21 then
15559: LD_VAR 0 3
15563: PUSH
15564: LD_INT 21
15566: EQUAL
15567: IFFALSE 15577
// sPowell := true ;
15569: LD_ADDR_EXP 57
15573: PUSH
15574: LD_INT 1
15576: ST_TO_ADDR
// if p3 = 22 then
15577: LD_VAR 0 3
15581: PUSH
15582: LD_INT 22
15584: EQUAL
15585: IFFALSE 15595
// sTeleport := true ;
15587: LD_ADDR_EXP 60
15591: PUSH
15592: LD_INT 1
15594: ST_TO_ADDR
// if p3 = 23 then
15595: LD_VAR 0 3
15599: PUSH
15600: LD_INT 23
15602: EQUAL
15603: IFFALSE 15613
// sOilTower := true ;
15605: LD_ADDR_EXP 62
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// if p3 = 24 then
15613: LD_VAR 0 3
15617: PUSH
15618: LD_INT 24
15620: EQUAL
15621: IFFALSE 15631
// sShovel := true ;
15623: LD_ADDR_EXP 63
15627: PUSH
15628: LD_INT 1
15630: ST_TO_ADDR
// if p3 = 25 then
15631: LD_VAR 0 3
15635: PUSH
15636: LD_INT 25
15638: EQUAL
15639: IFFALSE 15649
// sSheik := true ;
15641: LD_ADDR_EXP 64
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// if p3 = 26 then
15649: LD_VAR 0 3
15653: PUSH
15654: LD_INT 26
15656: EQUAL
15657: IFFALSE 15667
// sEarthquake := true ;
15659: LD_ADDR_EXP 66
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// if p3 = 27 then
15667: LD_VAR 0 3
15671: PUSH
15672: LD_INT 27
15674: EQUAL
15675: IFFALSE 15685
// sAI := true ;
15677: LD_ADDR_EXP 67
15681: PUSH
15682: LD_INT 1
15684: ST_TO_ADDR
// if p3 = 28 then
15685: LD_VAR 0 3
15689: PUSH
15690: LD_INT 28
15692: EQUAL
15693: IFFALSE 15703
// sCargo := true ;
15695: LD_ADDR_EXP 70
15699: PUSH
15700: LD_INT 1
15702: ST_TO_ADDR
// if p3 = 29 then
15703: LD_VAR 0 3
15707: PUSH
15708: LD_INT 29
15710: EQUAL
15711: IFFALSE 15721
// sDLaser := true ;
15713: LD_ADDR_EXP 71
15717: PUSH
15718: LD_INT 1
15720: ST_TO_ADDR
// if p3 = 30 then
15721: LD_VAR 0 3
15725: PUSH
15726: LD_INT 30
15728: EQUAL
15729: IFFALSE 15739
// sExchange := true ;
15731: LD_ADDR_EXP 72
15735: PUSH
15736: LD_INT 1
15738: ST_TO_ADDR
// if p3 = 31 then
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 31
15746: EQUAL
15747: IFFALSE 15757
// sFac := true ;
15749: LD_ADDR_EXP 73
15753: PUSH
15754: LD_INT 1
15756: ST_TO_ADDR
// if p3 = 32 then
15757: LD_VAR 0 3
15761: PUSH
15762: LD_INT 32
15764: EQUAL
15765: IFFALSE 15775
// sPower := true ;
15767: LD_ADDR_EXP 74
15771: PUSH
15772: LD_INT 1
15774: ST_TO_ADDR
// if p3 = 33 then
15775: LD_VAR 0 3
15779: PUSH
15780: LD_INT 33
15782: EQUAL
15783: IFFALSE 15793
// sRandom := true ;
15785: LD_ADDR_EXP 75
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// if p3 = 34 then
15793: LD_VAR 0 3
15797: PUSH
15798: LD_INT 34
15800: EQUAL
15801: IFFALSE 15811
// sShield := true ;
15803: LD_ADDR_EXP 76
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// if p3 = 35 then
15811: LD_VAR 0 3
15815: PUSH
15816: LD_INT 35
15818: EQUAL
15819: IFFALSE 15829
// sTime := true ;
15821: LD_ADDR_EXP 77
15825: PUSH
15826: LD_INT 1
15828: ST_TO_ADDR
// if p3 = 36 then
15829: LD_VAR 0 3
15833: PUSH
15834: LD_INT 36
15836: EQUAL
15837: IFFALSE 15847
// sTools := true ;
15839: LD_ADDR_EXP 78
15843: PUSH
15844: LD_INT 1
15846: ST_TO_ADDR
// if p3 = 101 then
15847: LD_VAR 0 3
15851: PUSH
15852: LD_INT 101
15854: EQUAL
15855: IFFALSE 15865
// sSold := true ;
15857: LD_ADDR_EXP 43
15861: PUSH
15862: LD_INT 1
15864: ST_TO_ADDR
// if p3 = 102 then
15865: LD_VAR 0 3
15869: PUSH
15870: LD_INT 102
15872: EQUAL
15873: IFFALSE 15883
// sDiff := true ;
15875: LD_ADDR_EXP 44
15879: PUSH
15880: LD_INT 1
15882: ST_TO_ADDR
// if p3 = 103 then
15883: LD_VAR 0 3
15887: PUSH
15888: LD_INT 103
15890: EQUAL
15891: IFFALSE 15901
// sFog := true ;
15893: LD_ADDR_EXP 47
15897: PUSH
15898: LD_INT 1
15900: ST_TO_ADDR
// if p3 = 104 then
15901: LD_VAR 0 3
15905: PUSH
15906: LD_INT 104
15908: EQUAL
15909: IFFALSE 15919
// sReset := true ;
15911: LD_ADDR_EXP 48
15915: PUSH
15916: LD_INT 1
15918: ST_TO_ADDR
// if p3 = 105 then
15919: LD_VAR 0 3
15923: PUSH
15924: LD_INT 105
15926: EQUAL
15927: IFFALSE 15937
// sSun := true ;
15929: LD_ADDR_EXP 49
15933: PUSH
15934: LD_INT 1
15936: ST_TO_ADDR
// if p3 = 106 then
15937: LD_VAR 0 3
15941: PUSH
15942: LD_INT 106
15944: EQUAL
15945: IFFALSE 15955
// sTiger := true ;
15947: LD_ADDR_EXP 45
15951: PUSH
15952: LD_INT 1
15954: ST_TO_ADDR
// if p3 = 107 then
15955: LD_VAR 0 3
15959: PUSH
15960: LD_INT 107
15962: EQUAL
15963: IFFALSE 15973
// sBomb := true ;
15965: LD_ADDR_EXP 46
15969: PUSH
15970: LD_INT 1
15972: ST_TO_ADDR
// if p3 = 108 then
15973: LD_VAR 0 3
15977: PUSH
15978: LD_INT 108
15980: EQUAL
15981: IFFALSE 15991
// sWound := true ;
15983: LD_ADDR_EXP 54
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// if p3 = 109 then
15991: LD_VAR 0 3
15995: PUSH
15996: LD_INT 109
15998: EQUAL
15999: IFFALSE 16009
// sBetray := true ;
16001: LD_ADDR_EXP 58
16005: PUSH
16006: LD_INT 1
16008: ST_TO_ADDR
// if p3 = 110 then
16009: LD_VAR 0 3
16013: PUSH
16014: LD_INT 110
16016: EQUAL
16017: IFFALSE 16027
// sContamin := true ;
16019: LD_ADDR_EXP 59
16023: PUSH
16024: LD_INT 1
16026: ST_TO_ADDR
// if p3 = 111 then
16027: LD_VAR 0 3
16031: PUSH
16032: LD_INT 111
16034: EQUAL
16035: IFFALSE 16045
// sOil := true ;
16037: LD_ADDR_EXP 61
16041: PUSH
16042: LD_INT 1
16044: ST_TO_ADDR
// if p3 = 112 then
16045: LD_VAR 0 3
16049: PUSH
16050: LD_INT 112
16052: EQUAL
16053: IFFALSE 16063
// sStu := true ;
16055: LD_ADDR_EXP 65
16059: PUSH
16060: LD_INT 1
16062: ST_TO_ADDR
// if p3 = 113 then
16063: LD_VAR 0 3
16067: PUSH
16068: LD_INT 113
16070: EQUAL
16071: IFFALSE 16081
// sBazooka := true ;
16073: LD_ADDR_EXP 68
16077: PUSH
16078: LD_INT 1
16080: ST_TO_ADDR
// if p3 = 114 then
16081: LD_VAR 0 3
16085: PUSH
16086: LD_INT 114
16088: EQUAL
16089: IFFALSE 16099
// sMortar := true ;
16091: LD_ADDR_EXP 69
16095: PUSH
16096: LD_INT 1
16098: ST_TO_ADDR
// if p3 = 115 then
16099: LD_VAR 0 3
16103: PUSH
16104: LD_INT 115
16106: EQUAL
16107: IFFALSE 16117
// sRanger := true ;
16109: LD_ADDR_EXP 79
16113: PUSH
16114: LD_INT 1
16116: ST_TO_ADDR
// end ; end ;
16117: PPOPN 6
16119: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16120: LD_EXP 26
16124: PUSH
16125: LD_EXP 31
16129: AND
16130: IFFALSE 16254
16132: GO 16134
16134: DISABLE
16135: LD_INT 0
16137: PPUSH
16138: PPUSH
// begin enable ;
16139: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16140: LD_ADDR_VAR 0 2
16144: PUSH
16145: LD_INT 22
16147: PUSH
16148: LD_OWVAR 2
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 2
16159: PUSH
16160: LD_INT 34
16162: PUSH
16163: LD_INT 7
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 34
16172: PUSH
16173: LD_INT 45
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 34
16182: PUSH
16183: LD_INT 28
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 34
16192: PUSH
16193: LD_INT 47
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PPUSH
16211: CALL_OW 69
16215: ST_TO_ADDR
// if not tmp then
16216: LD_VAR 0 2
16220: NOT
16221: IFFALSE 16225
// exit ;
16223: GO 16254
// for i in tmp do
16225: LD_ADDR_VAR 0 1
16229: PUSH
16230: LD_VAR 0 2
16234: PUSH
16235: FOR_IN
16236: IFFALSE 16252
// begin SetLives ( i , 0 ) ;
16238: LD_VAR 0 1
16242: PPUSH
16243: LD_INT 0
16245: PPUSH
16246: CALL_OW 234
// end ;
16250: GO 16235
16252: POP
16253: POP
// end ;
16254: PPOPN 2
16256: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16257: LD_EXP 26
16261: PUSH
16262: LD_EXP 32
16266: AND
16267: IFFALSE 16351
16269: GO 16271
16271: DISABLE
16272: LD_INT 0
16274: PPUSH
16275: PPUSH
// begin enable ;
16276: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16277: LD_ADDR_VAR 0 2
16281: PUSH
16282: LD_INT 22
16284: PUSH
16285: LD_OWVAR 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 32
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PPUSH
16308: CALL_OW 69
16312: ST_TO_ADDR
// if not tmp then
16313: LD_VAR 0 2
16317: NOT
16318: IFFALSE 16322
// exit ;
16320: GO 16351
// for i in tmp do
16322: LD_ADDR_VAR 0 1
16326: PUSH
16327: LD_VAR 0 2
16331: PUSH
16332: FOR_IN
16333: IFFALSE 16349
// begin SetLives ( i , 0 ) ;
16335: LD_VAR 0 1
16339: PPUSH
16340: LD_INT 0
16342: PPUSH
16343: CALL_OW 234
// end ;
16347: GO 16332
16349: POP
16350: POP
// end ;
16351: PPOPN 2
16353: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16354: LD_EXP 26
16358: PUSH
16359: LD_EXP 29
16363: AND
16364: IFFALSE 16457
16366: GO 16368
16368: DISABLE
16369: LD_INT 0
16371: PPUSH
// begin enable ;
16372: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16373: LD_ADDR_VAR 0 1
16377: PUSH
16378: LD_INT 22
16380: PUSH
16381: LD_OWVAR 2
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 2
16392: PUSH
16393: LD_INT 25
16395: PUSH
16396: LD_INT 5
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 25
16405: PUSH
16406: LD_INT 9
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 25
16415: PUSH
16416: LD_INT 8
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PPUSH
16433: CALL_OW 69
16437: PUSH
16438: FOR_IN
16439: IFFALSE 16455
// begin SetClass ( i , 1 ) ;
16441: LD_VAR 0 1
16445: PPUSH
16446: LD_INT 1
16448: PPUSH
16449: CALL_OW 336
// end ;
16453: GO 16438
16455: POP
16456: POP
// end ;
16457: PPOPN 1
16459: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16460: LD_EXP 26
16464: PUSH
16465: LD_EXP 30
16469: AND
16470: PUSH
16471: LD_OWVAR 65
16475: PUSH
16476: LD_INT 7
16478: LESS
16479: AND
16480: IFFALSE 16494
16482: GO 16484
16484: DISABLE
// begin enable ;
16485: ENABLE
// game_speed := 7 ;
16486: LD_ADDR_OWVAR 65
16490: PUSH
16491: LD_INT 7
16493: ST_TO_ADDR
// end ;
16494: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16495: LD_EXP 26
16499: PUSH
16500: LD_EXP 33
16504: AND
16505: IFFALSE 16707
16507: GO 16509
16509: DISABLE
16510: LD_INT 0
16512: PPUSH
16513: PPUSH
16514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16515: LD_ADDR_VAR 0 3
16519: PUSH
16520: LD_INT 81
16522: PUSH
16523: LD_OWVAR 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 21
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PPUSH
16546: CALL_OW 69
16550: ST_TO_ADDR
// if not tmp then
16551: LD_VAR 0 3
16555: NOT
16556: IFFALSE 16560
// exit ;
16558: GO 16707
// if tmp > 5 then
16560: LD_VAR 0 3
16564: PUSH
16565: LD_INT 5
16567: GREATER
16568: IFFALSE 16580
// k := 5 else
16570: LD_ADDR_VAR 0 2
16574: PUSH
16575: LD_INT 5
16577: ST_TO_ADDR
16578: GO 16590
// k := tmp ;
16580: LD_ADDR_VAR 0 2
16584: PUSH
16585: LD_VAR 0 3
16589: ST_TO_ADDR
// for i := 1 to k do
16590: LD_ADDR_VAR 0 1
16594: PUSH
16595: DOUBLE
16596: LD_INT 1
16598: DEC
16599: ST_TO_ADDR
16600: LD_VAR 0 2
16604: PUSH
16605: FOR_TO
16606: IFFALSE 16705
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16608: LD_VAR 0 3
16612: PUSH
16613: LD_VAR 0 1
16617: ARRAY
16618: PPUSH
16619: LD_VAR 0 1
16623: PUSH
16624: LD_INT 4
16626: MOD
16627: PUSH
16628: LD_INT 1
16630: PLUS
16631: PPUSH
16632: CALL_OW 259
16636: PUSH
16637: LD_INT 10
16639: LESS
16640: IFFALSE 16703
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16642: LD_VAR 0 3
16646: PUSH
16647: LD_VAR 0 1
16651: ARRAY
16652: PPUSH
16653: LD_VAR 0 1
16657: PUSH
16658: LD_INT 4
16660: MOD
16661: PUSH
16662: LD_INT 1
16664: PLUS
16665: PPUSH
16666: LD_VAR 0 3
16670: PUSH
16671: LD_VAR 0 1
16675: ARRAY
16676: PPUSH
16677: LD_VAR 0 1
16681: PUSH
16682: LD_INT 4
16684: MOD
16685: PUSH
16686: LD_INT 1
16688: PLUS
16689: PPUSH
16690: CALL_OW 259
16694: PUSH
16695: LD_INT 1
16697: PLUS
16698: PPUSH
16699: CALL_OW 237
16703: GO 16605
16705: POP
16706: POP
// end ;
16707: PPOPN 3
16709: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16710: LD_EXP 26
16714: PUSH
16715: LD_EXP 34
16719: AND
16720: IFFALSE 16740
16722: GO 16724
16724: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16725: LD_INT 4
16727: PPUSH
16728: LD_OWVAR 2
16732: PPUSH
16733: LD_INT 0
16735: PPUSH
16736: CALL_OW 324
16740: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16741: LD_EXP 26
16745: PUSH
16746: LD_EXP 63
16750: AND
16751: IFFALSE 16771
16753: GO 16755
16755: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16756: LD_INT 19
16758: PPUSH
16759: LD_OWVAR 2
16763: PPUSH
16764: LD_INT 0
16766: PPUSH
16767: CALL_OW 324
16771: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16772: LD_EXP 26
16776: PUSH
16777: LD_EXP 35
16781: AND
16782: IFFALSE 16884
16784: GO 16786
16786: DISABLE
16787: LD_INT 0
16789: PPUSH
16790: PPUSH
// begin enable ;
16791: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16792: LD_ADDR_VAR 0 2
16796: PUSH
16797: LD_INT 22
16799: PUSH
16800: LD_OWVAR 2
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 2
16811: PUSH
16812: LD_INT 34
16814: PUSH
16815: LD_INT 11
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 34
16824: PUSH
16825: LD_INT 30
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PPUSH
16841: CALL_OW 69
16845: ST_TO_ADDR
// if not tmp then
16846: LD_VAR 0 2
16850: NOT
16851: IFFALSE 16855
// exit ;
16853: GO 16884
// for i in tmp do
16855: LD_ADDR_VAR 0 1
16859: PUSH
16860: LD_VAR 0 2
16864: PUSH
16865: FOR_IN
16866: IFFALSE 16882
// begin SetLives ( i , 0 ) ;
16868: LD_VAR 0 1
16872: PPUSH
16873: LD_INT 0
16875: PPUSH
16876: CALL_OW 234
// end ;
16880: GO 16865
16882: POP
16883: POP
// end ;
16884: PPOPN 2
16886: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16887: LD_EXP 26
16891: PUSH
16892: LD_EXP 36
16896: AND
16897: IFFALSE 16917
16899: GO 16901
16901: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16902: LD_INT 32
16904: PPUSH
16905: LD_OWVAR 2
16909: PPUSH
16910: LD_INT 0
16912: PPUSH
16913: CALL_OW 324
16917: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16918: LD_EXP 26
16922: PUSH
16923: LD_EXP 37
16927: AND
16928: IFFALSE 17109
16930: GO 16932
16932: DISABLE
16933: LD_INT 0
16935: PPUSH
16936: PPUSH
16937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16938: LD_ADDR_VAR 0 2
16942: PUSH
16943: LD_INT 22
16945: PUSH
16946: LD_OWVAR 2
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 33
16957: PUSH
16958: LD_INT 3
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PPUSH
16969: CALL_OW 69
16973: ST_TO_ADDR
// if not tmp then
16974: LD_VAR 0 2
16978: NOT
16979: IFFALSE 16983
// exit ;
16981: GO 17109
// side := 0 ;
16983: LD_ADDR_VAR 0 3
16987: PUSH
16988: LD_INT 0
16990: ST_TO_ADDR
// for i := 1 to 8 do
16991: LD_ADDR_VAR 0 1
16995: PUSH
16996: DOUBLE
16997: LD_INT 1
16999: DEC
17000: ST_TO_ADDR
17001: LD_INT 8
17003: PUSH
17004: FOR_TO
17005: IFFALSE 17053
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17007: LD_OWVAR 2
17011: PUSH
17012: LD_VAR 0 1
17016: NONEQUAL
17017: PUSH
17018: LD_OWVAR 2
17022: PPUSH
17023: LD_VAR 0 1
17027: PPUSH
17028: CALL_OW 81
17032: PUSH
17033: LD_INT 2
17035: EQUAL
17036: AND
17037: IFFALSE 17051
// begin side := i ;
17039: LD_ADDR_VAR 0 3
17043: PUSH
17044: LD_VAR 0 1
17048: ST_TO_ADDR
// break ;
17049: GO 17053
// end ;
17051: GO 17004
17053: POP
17054: POP
// if not side then
17055: LD_VAR 0 3
17059: NOT
17060: IFFALSE 17064
// exit ;
17062: GO 17109
// for i := 1 to tmp do
17064: LD_ADDR_VAR 0 1
17068: PUSH
17069: DOUBLE
17070: LD_INT 1
17072: DEC
17073: ST_TO_ADDR
17074: LD_VAR 0 2
17078: PUSH
17079: FOR_TO
17080: IFFALSE 17107
// if Prob ( 30 ) then
17082: LD_INT 30
17084: PPUSH
17085: CALL_OW 13
17089: IFFALSE 17105
// SetSide ( i , side ) ;
17091: LD_VAR 0 1
17095: PPUSH
17096: LD_VAR 0 3
17100: PPUSH
17101: CALL_OW 235
17105: GO 17079
17107: POP
17108: POP
// end ;
17109: PPOPN 3
17111: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17112: LD_EXP 26
17116: PUSH
17117: LD_EXP 39
17121: AND
17122: IFFALSE 17241
17124: GO 17126
17126: DISABLE
17127: LD_INT 0
17129: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17130: LD_ADDR_VAR 0 1
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_OWVAR 2
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 21
17149: PUSH
17150: LD_INT 1
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 3
17159: PUSH
17160: LD_INT 23
17162: PUSH
17163: LD_INT 0
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: LIST
17178: PPUSH
17179: CALL_OW 69
17183: PUSH
17184: FOR_IN
17185: IFFALSE 17239
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 257
17196: PUSH
17197: LD_INT 1
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 3
17205: PUSH
17206: LD_INT 4
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: IN
17215: IFFALSE 17237
// SetClass ( un , rand ( 1 , 4 ) ) ;
17217: LD_VAR 0 1
17221: PPUSH
17222: LD_INT 1
17224: PPUSH
17225: LD_INT 4
17227: PPUSH
17228: CALL_OW 12
17232: PPUSH
17233: CALL_OW 336
17237: GO 17184
17239: POP
17240: POP
// end ;
17241: PPOPN 1
17243: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17244: LD_EXP 26
17248: PUSH
17249: LD_EXP 38
17253: AND
17254: IFFALSE 17333
17256: GO 17258
17258: DISABLE
17259: LD_INT 0
17261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17262: LD_ADDR_VAR 0 1
17266: PUSH
17267: LD_INT 22
17269: PUSH
17270: LD_OWVAR 2
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 21
17281: PUSH
17282: LD_INT 3
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PPUSH
17293: CALL_OW 69
17297: ST_TO_ADDR
// if not tmp then
17298: LD_VAR 0 1
17302: NOT
17303: IFFALSE 17307
// exit ;
17305: GO 17333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17307: LD_VAR 0 1
17311: PUSH
17312: LD_INT 1
17314: PPUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 12
17324: ARRAY
17325: PPUSH
17326: LD_INT 100
17328: PPUSH
17329: CALL_OW 234
// end ;
17333: PPOPN 1
17335: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17336: LD_EXP 26
17340: PUSH
17341: LD_EXP 40
17345: AND
17346: IFFALSE 17444
17348: GO 17350
17350: DISABLE
17351: LD_INT 0
17353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17354: LD_ADDR_VAR 0 1
17358: PUSH
17359: LD_INT 22
17361: PUSH
17362: LD_OWVAR 2
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 21
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PPUSH
17385: CALL_OW 69
17389: ST_TO_ADDR
// if not tmp then
17390: LD_VAR 0 1
17394: NOT
17395: IFFALSE 17399
// exit ;
17397: GO 17444
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17399: LD_VAR 0 1
17403: PUSH
17404: LD_INT 1
17406: PPUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 12
17416: ARRAY
17417: PPUSH
17418: LD_INT 1
17420: PPUSH
17421: LD_INT 4
17423: PPUSH
17424: CALL_OW 12
17428: PPUSH
17429: LD_INT 3000
17431: PPUSH
17432: LD_INT 9000
17434: PPUSH
17435: CALL_OW 12
17439: PPUSH
17440: CALL_OW 492
// end ;
17444: PPOPN 1
17446: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17447: LD_EXP 26
17451: PUSH
17452: LD_EXP 41
17456: AND
17457: IFFALSE 17477
17459: GO 17461
17461: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17462: LD_INT 1
17464: PPUSH
17465: LD_OWVAR 2
17469: PPUSH
17470: LD_INT 0
17472: PPUSH
17473: CALL_OW 324
17477: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17478: LD_EXP 26
17482: PUSH
17483: LD_EXP 42
17487: AND
17488: IFFALSE 17571
17490: GO 17492
17492: DISABLE
17493: LD_INT 0
17495: PPUSH
17496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17497: LD_ADDR_VAR 0 2
17501: PUSH
17502: LD_INT 22
17504: PUSH
17505: LD_OWVAR 2
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 21
17516: PUSH
17517: LD_INT 3
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PPUSH
17528: CALL_OW 69
17532: ST_TO_ADDR
// if not tmp then
17533: LD_VAR 0 2
17537: NOT
17538: IFFALSE 17542
// exit ;
17540: GO 17571
// for i in tmp do
17542: LD_ADDR_VAR 0 1
17546: PUSH
17547: LD_VAR 0 2
17551: PUSH
17552: FOR_IN
17553: IFFALSE 17569
// SetBLevel ( i , 10 ) ;
17555: LD_VAR 0 1
17559: PPUSH
17560: LD_INT 10
17562: PPUSH
17563: CALL_OW 241
17567: GO 17552
17569: POP
17570: POP
// end ;
17571: PPOPN 2
17573: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17574: LD_EXP 26
17578: PUSH
17579: LD_EXP 43
17583: AND
17584: IFFALSE 17695
17586: GO 17588
17588: DISABLE
17589: LD_INT 0
17591: PPUSH
17592: PPUSH
17593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17594: LD_ADDR_VAR 0 3
17598: PUSH
17599: LD_INT 22
17601: PUSH
17602: LD_OWVAR 2
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 25
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PPUSH
17625: CALL_OW 69
17629: ST_TO_ADDR
// if not tmp then
17630: LD_VAR 0 3
17634: NOT
17635: IFFALSE 17639
// exit ;
17637: GO 17695
// un := tmp [ rand ( 1 , tmp ) ] ;
17639: LD_ADDR_VAR 0 2
17643: PUSH
17644: LD_VAR 0 3
17648: PUSH
17649: LD_INT 1
17651: PPUSH
17652: LD_VAR 0 3
17656: PPUSH
17657: CALL_OW 12
17661: ARRAY
17662: ST_TO_ADDR
// if Crawls ( un ) then
17663: LD_VAR 0 2
17667: PPUSH
17668: CALL_OW 318
17672: IFFALSE 17683
// ComWalk ( un ) ;
17674: LD_VAR 0 2
17678: PPUSH
17679: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17683: LD_VAR 0 2
17687: PPUSH
17688: LD_INT 5
17690: PPUSH
17691: CALL_OW 336
// end ;
17695: PPOPN 3
17697: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17698: LD_EXP 26
17702: PUSH
17703: LD_EXP 44
17707: AND
17708: PUSH
17709: LD_OWVAR 67
17713: PUSH
17714: LD_INT 3
17716: LESS
17717: AND
17718: IFFALSE 17737
17720: GO 17722
17722: DISABLE
// Difficulty := Difficulty + 1 ;
17723: LD_ADDR_OWVAR 67
17727: PUSH
17728: LD_OWVAR 67
17732: PUSH
17733: LD_INT 1
17735: PLUS
17736: ST_TO_ADDR
17737: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17738: LD_EXP 26
17742: PUSH
17743: LD_EXP 45
17747: AND
17748: IFFALSE 17851
17750: GO 17752
17752: DISABLE
17753: LD_INT 0
17755: PPUSH
// begin for i := 1 to 5 do
17756: LD_ADDR_VAR 0 1
17760: PUSH
17761: DOUBLE
17762: LD_INT 1
17764: DEC
17765: ST_TO_ADDR
17766: LD_INT 5
17768: PUSH
17769: FOR_TO
17770: IFFALSE 17849
// begin uc_nation := nation_nature ;
17772: LD_ADDR_OWVAR 21
17776: PUSH
17777: LD_INT 0
17779: ST_TO_ADDR
// uc_side := 0 ;
17780: LD_ADDR_OWVAR 20
17784: PUSH
17785: LD_INT 0
17787: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17788: LD_ADDR_OWVAR 29
17792: PUSH
17793: LD_INT 12
17795: PUSH
17796: LD_INT 12
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: ST_TO_ADDR
// hc_agressivity := 20 ;
17803: LD_ADDR_OWVAR 35
17807: PUSH
17808: LD_INT 20
17810: ST_TO_ADDR
// hc_class := class_tiger ;
17811: LD_ADDR_OWVAR 28
17815: PUSH
17816: LD_INT 14
17818: ST_TO_ADDR
// hc_gallery :=  ;
17819: LD_ADDR_OWVAR 33
17823: PUSH
17824: LD_STRING 
17826: ST_TO_ADDR
// hc_name :=  ;
17827: LD_ADDR_OWVAR 26
17831: PUSH
17832: LD_STRING 
17834: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17835: CALL_OW 44
17839: PPUSH
17840: LD_INT 0
17842: PPUSH
17843: CALL_OW 51
// end ;
17847: GO 17769
17849: POP
17850: POP
// end ;
17851: PPOPN 1
17853: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17854: LD_EXP 26
17858: PUSH
17859: LD_EXP 46
17863: AND
17864: IFFALSE 17873
17866: GO 17868
17868: DISABLE
// StreamSibBomb ;
17869: CALL 17874 0 0
17873: END
// export function StreamSibBomb ; var i , x , y ; begin
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
17878: PPUSH
17879: PPUSH
// result := false ;
17880: LD_ADDR_VAR 0 1
17884: PUSH
17885: LD_INT 0
17887: ST_TO_ADDR
// for i := 1 to 16 do
17888: LD_ADDR_VAR 0 2
17892: PUSH
17893: DOUBLE
17894: LD_INT 1
17896: DEC
17897: ST_TO_ADDR
17898: LD_INT 16
17900: PUSH
17901: FOR_TO
17902: IFFALSE 18101
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17904: LD_ADDR_VAR 0 3
17908: PUSH
17909: LD_INT 10
17911: PUSH
17912: LD_INT 20
17914: PUSH
17915: LD_INT 30
17917: PUSH
17918: LD_INT 40
17920: PUSH
17921: LD_INT 50
17923: PUSH
17924: LD_INT 60
17926: PUSH
17927: LD_INT 70
17929: PUSH
17930: LD_INT 80
17932: PUSH
17933: LD_INT 90
17935: PUSH
17936: LD_INT 100
17938: PUSH
17939: LD_INT 110
17941: PUSH
17942: LD_INT 120
17944: PUSH
17945: LD_INT 130
17947: PUSH
17948: LD_INT 140
17950: PUSH
17951: LD_INT 150
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 1
17973: PPUSH
17974: LD_INT 15
17976: PPUSH
17977: CALL_OW 12
17981: ARRAY
17982: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17983: LD_ADDR_VAR 0 4
17987: PUSH
17988: LD_INT 10
17990: PUSH
17991: LD_INT 20
17993: PUSH
17994: LD_INT 30
17996: PUSH
17997: LD_INT 40
17999: PUSH
18000: LD_INT 50
18002: PUSH
18003: LD_INT 60
18005: PUSH
18006: LD_INT 70
18008: PUSH
18009: LD_INT 80
18011: PUSH
18012: LD_INT 90
18014: PUSH
18015: LD_INT 100
18017: PUSH
18018: LD_INT 110
18020: PUSH
18021: LD_INT 120
18023: PUSH
18024: LD_INT 130
18026: PUSH
18027: LD_INT 140
18029: PUSH
18030: LD_INT 150
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 1
18052: PPUSH
18053: LD_INT 15
18055: PPUSH
18056: CALL_OW 12
18060: ARRAY
18061: ST_TO_ADDR
// if ValidHex ( x , y ) then
18062: LD_VAR 0 3
18066: PPUSH
18067: LD_VAR 0 4
18071: PPUSH
18072: CALL_OW 488
18076: IFFALSE 18099
// begin result := [ x , y ] ;
18078: LD_ADDR_VAR 0 1
18082: PUSH
18083: LD_VAR 0 3
18087: PUSH
18088: LD_VAR 0 4
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: ST_TO_ADDR
// break ;
18097: GO 18101
// end ; end ;
18099: GO 17901
18101: POP
18102: POP
// if result then
18103: LD_VAR 0 1
18107: IFFALSE 18167
// begin ToLua ( playSibBomb() ) ;
18109: LD_STRING playSibBomb()
18111: PPUSH
18112: CALL_OW 559
// wait ( 0 0$14 ) ;
18116: LD_INT 490
18118: PPUSH
18119: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18123: LD_VAR 0 1
18127: PUSH
18128: LD_INT 1
18130: ARRAY
18131: PPUSH
18132: LD_VAR 0 1
18136: PUSH
18137: LD_INT 2
18139: ARRAY
18140: PPUSH
18141: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18145: LD_VAR 0 1
18149: PUSH
18150: LD_INT 1
18152: ARRAY
18153: PPUSH
18154: LD_VAR 0 1
18158: PUSH
18159: LD_INT 2
18161: ARRAY
18162: PPUSH
18163: CALL_OW 429
// end ; end ;
18167: LD_VAR 0 1
18171: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18172: LD_EXP 26
18176: PUSH
18177: LD_EXP 48
18181: AND
18182: IFFALSE 18194
18184: GO 18186
18186: DISABLE
// YouLost (  ) ;
18187: LD_STRING 
18189: PPUSH
18190: CALL_OW 104
18194: END
// every 0 0$1 trigger StreamModeActive and sFog do
18195: LD_EXP 26
18199: PUSH
18200: LD_EXP 47
18204: AND
18205: IFFALSE 18219
18207: GO 18209
18209: DISABLE
// FogOff ( your_side ) ;
18210: LD_OWVAR 2
18214: PPUSH
18215: CALL_OW 344
18219: END
// every 0 0$1 trigger StreamModeActive and sSun do
18220: LD_EXP 26
18224: PUSH
18225: LD_EXP 49
18229: AND
18230: IFFALSE 18258
18232: GO 18234
18234: DISABLE
// begin solar_recharge_percent := 0 ;
18235: LD_ADDR_OWVAR 79
18239: PUSH
18240: LD_INT 0
18242: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18243: LD_INT 10500
18245: PPUSH
18246: CALL_OW 67
// solar_recharge_percent := 100 ;
18250: LD_ADDR_OWVAR 79
18254: PUSH
18255: LD_INT 100
18257: ST_TO_ADDR
// end ;
18258: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18259: LD_EXP 26
18263: PUSH
18264: LD_EXP 50
18268: AND
18269: IFFALSE 18508
18271: GO 18273
18273: DISABLE
18274: LD_INT 0
18276: PPUSH
18277: PPUSH
18278: PPUSH
// begin tmp := [ ] ;
18279: LD_ADDR_VAR 0 3
18283: PUSH
18284: EMPTY
18285: ST_TO_ADDR
// for i := 1 to 6 do
18286: LD_ADDR_VAR 0 1
18290: PUSH
18291: DOUBLE
18292: LD_INT 1
18294: DEC
18295: ST_TO_ADDR
18296: LD_INT 6
18298: PUSH
18299: FOR_TO
18300: IFFALSE 18405
// begin uc_nation := nation_nature ;
18302: LD_ADDR_OWVAR 21
18306: PUSH
18307: LD_INT 0
18309: ST_TO_ADDR
// uc_side := 0 ;
18310: LD_ADDR_OWVAR 20
18314: PUSH
18315: LD_INT 0
18317: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18318: LD_ADDR_OWVAR 29
18322: PUSH
18323: LD_INT 12
18325: PUSH
18326: LD_INT 12
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: ST_TO_ADDR
// hc_agressivity := 20 ;
18333: LD_ADDR_OWVAR 35
18337: PUSH
18338: LD_INT 20
18340: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18341: LD_ADDR_OWVAR 28
18345: PUSH
18346: LD_INT 17
18348: ST_TO_ADDR
// hc_gallery :=  ;
18349: LD_ADDR_OWVAR 33
18353: PUSH
18354: LD_STRING 
18356: ST_TO_ADDR
// hc_name :=  ;
18357: LD_ADDR_OWVAR 26
18361: PUSH
18362: LD_STRING 
18364: ST_TO_ADDR
// un := CreateHuman ;
18365: LD_ADDR_VAR 0 2
18369: PUSH
18370: CALL_OW 44
18374: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18375: LD_VAR 0 2
18379: PPUSH
18380: LD_INT 1
18382: PPUSH
18383: CALL_OW 51
// tmp := tmp ^ un ;
18387: LD_ADDR_VAR 0 3
18391: PUSH
18392: LD_VAR 0 3
18396: PUSH
18397: LD_VAR 0 2
18401: ADD
18402: ST_TO_ADDR
// end ;
18403: GO 18299
18405: POP
18406: POP
// repeat wait ( 0 0$1 ) ;
18407: LD_INT 35
18409: PPUSH
18410: CALL_OW 67
// for un in tmp do
18414: LD_ADDR_VAR 0 2
18418: PUSH
18419: LD_VAR 0 3
18423: PUSH
18424: FOR_IN
18425: IFFALSE 18499
// begin if IsDead ( un ) then
18427: LD_VAR 0 2
18431: PPUSH
18432: CALL_OW 301
18436: IFFALSE 18456
// begin tmp := tmp diff un ;
18438: LD_ADDR_VAR 0 3
18442: PUSH
18443: LD_VAR 0 3
18447: PUSH
18448: LD_VAR 0 2
18452: DIFF
18453: ST_TO_ADDR
// continue ;
18454: GO 18424
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18456: LD_VAR 0 2
18460: PPUSH
18461: LD_INT 3
18463: PUSH
18464: LD_INT 22
18466: PUSH
18467: LD_INT 0
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PPUSH
18478: CALL_OW 69
18482: PPUSH
18483: LD_VAR 0 2
18487: PPUSH
18488: CALL_OW 74
18492: PPUSH
18493: CALL_OW 115
// end ;
18497: GO 18424
18499: POP
18500: POP
// until not tmp ;
18501: LD_VAR 0 3
18505: NOT
18506: IFFALSE 18407
// end ;
18508: PPOPN 3
18510: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18511: LD_EXP 26
18515: PUSH
18516: LD_EXP 51
18520: AND
18521: IFFALSE 18575
18523: GO 18525
18525: DISABLE
// begin ToLua ( displayTroll(); ) ;
18526: LD_STRING displayTroll();
18528: PPUSH
18529: CALL_OW 559
// wait ( 3 3$00 ) ;
18533: LD_INT 6300
18535: PPUSH
18536: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18540: LD_STRING hideTroll();
18542: PPUSH
18543: CALL_OW 559
// wait ( 1 1$00 ) ;
18547: LD_INT 2100
18549: PPUSH
18550: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18554: LD_STRING displayTroll();
18556: PPUSH
18557: CALL_OW 559
// wait ( 1 1$00 ) ;
18561: LD_INT 2100
18563: PPUSH
18564: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18568: LD_STRING hideTroll();
18570: PPUSH
18571: CALL_OW 559
// end ;
18575: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18576: LD_EXP 26
18580: PUSH
18581: LD_EXP 52
18585: AND
18586: IFFALSE 18649
18588: GO 18590
18590: DISABLE
18591: LD_INT 0
18593: PPUSH
// begin p := 0 ;
18594: LD_ADDR_VAR 0 1
18598: PUSH
18599: LD_INT 0
18601: ST_TO_ADDR
// repeat game_speed := 1 ;
18602: LD_ADDR_OWVAR 65
18606: PUSH
18607: LD_INT 1
18609: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18610: LD_INT 35
18612: PPUSH
18613: CALL_OW 67
// p := p + 1 ;
18617: LD_ADDR_VAR 0 1
18621: PUSH
18622: LD_VAR 0 1
18626: PUSH
18627: LD_INT 1
18629: PLUS
18630: ST_TO_ADDR
// until p >= 60 ;
18631: LD_VAR 0 1
18635: PUSH
18636: LD_INT 60
18638: GREATEREQUAL
18639: IFFALSE 18602
// game_speed := 4 ;
18641: LD_ADDR_OWVAR 65
18645: PUSH
18646: LD_INT 4
18648: ST_TO_ADDR
// end ;
18649: PPOPN 1
18651: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18652: LD_EXP 26
18656: PUSH
18657: LD_EXP 53
18661: AND
18662: IFFALSE 18808
18664: GO 18666
18666: DISABLE
18667: LD_INT 0
18669: PPUSH
18670: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18671: LD_ADDR_VAR 0 1
18675: PUSH
18676: LD_INT 22
18678: PUSH
18679: LD_OWVAR 2
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 2
18690: PUSH
18691: LD_INT 30
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 30
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PPUSH
18720: CALL_OW 69
18724: ST_TO_ADDR
// if not depot then
18725: LD_VAR 0 1
18729: NOT
18730: IFFALSE 18734
// exit ;
18732: GO 18808
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18734: LD_ADDR_VAR 0 2
18738: PUSH
18739: LD_VAR 0 1
18743: PUSH
18744: LD_INT 1
18746: PPUSH
18747: LD_VAR 0 1
18751: PPUSH
18752: CALL_OW 12
18756: ARRAY
18757: PPUSH
18758: CALL_OW 274
18762: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18763: LD_VAR 0 2
18767: PPUSH
18768: LD_INT 1
18770: PPUSH
18771: LD_INT 0
18773: PPUSH
18774: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18778: LD_VAR 0 2
18782: PPUSH
18783: LD_INT 2
18785: PPUSH
18786: LD_INT 0
18788: PPUSH
18789: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18793: LD_VAR 0 2
18797: PPUSH
18798: LD_INT 3
18800: PPUSH
18801: LD_INT 0
18803: PPUSH
18804: CALL_OW 277
// end ;
18808: PPOPN 2
18810: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18811: LD_EXP 26
18815: PUSH
18816: LD_EXP 54
18820: AND
18821: IFFALSE 18918
18823: GO 18825
18825: DISABLE
18826: LD_INT 0
18828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18829: LD_ADDR_VAR 0 1
18833: PUSH
18834: LD_INT 22
18836: PUSH
18837: LD_OWVAR 2
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 21
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 3
18858: PUSH
18859: LD_INT 23
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: LIST
18877: PPUSH
18878: CALL_OW 69
18882: ST_TO_ADDR
// if not tmp then
18883: LD_VAR 0 1
18887: NOT
18888: IFFALSE 18892
// exit ;
18890: GO 18918
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18892: LD_VAR 0 1
18896: PUSH
18897: LD_INT 1
18899: PPUSH
18900: LD_VAR 0 1
18904: PPUSH
18905: CALL_OW 12
18909: ARRAY
18910: PPUSH
18911: LD_INT 200
18913: PPUSH
18914: CALL_OW 234
// end ;
18918: PPOPN 1
18920: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18921: LD_EXP 26
18925: PUSH
18926: LD_EXP 55
18930: AND
18931: IFFALSE 19010
18933: GO 18935
18935: DISABLE
18936: LD_INT 0
18938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18939: LD_ADDR_VAR 0 1
18943: PUSH
18944: LD_INT 22
18946: PUSH
18947: LD_OWVAR 2
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 21
18958: PUSH
18959: LD_INT 2
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 69
18974: ST_TO_ADDR
// if not tmp then
18975: LD_VAR 0 1
18979: NOT
18980: IFFALSE 18984
// exit ;
18982: GO 19010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18984: LD_VAR 0 1
18988: PUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL_OW 12
19001: ARRAY
19002: PPUSH
19003: LD_INT 60
19005: PPUSH
19006: CALL_OW 234
// end ;
19010: PPOPN 1
19012: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19013: LD_EXP 26
19017: PUSH
19018: LD_EXP 56
19022: AND
19023: IFFALSE 19122
19025: GO 19027
19027: DISABLE
19028: LD_INT 0
19030: PPUSH
19031: PPUSH
// begin enable ;
19032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19033: LD_ADDR_VAR 0 1
19037: PUSH
19038: LD_INT 22
19040: PUSH
19041: LD_OWVAR 2
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 61
19052: PUSH
19053: EMPTY
19054: LIST
19055: PUSH
19056: LD_INT 33
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: LIST
19070: PPUSH
19071: CALL_OW 69
19075: ST_TO_ADDR
// if not tmp then
19076: LD_VAR 0 1
19080: NOT
19081: IFFALSE 19085
// exit ;
19083: GO 19122
// for i in tmp do
19085: LD_ADDR_VAR 0 2
19089: PUSH
19090: LD_VAR 0 1
19094: PUSH
19095: FOR_IN
19096: IFFALSE 19120
// if IsControledBy ( i ) then
19098: LD_VAR 0 2
19102: PPUSH
19103: CALL_OW 312
19107: IFFALSE 19118
// ComUnlink ( i ) ;
19109: LD_VAR 0 2
19113: PPUSH
19114: CALL_OW 136
19118: GO 19095
19120: POP
19121: POP
// end ;
19122: PPOPN 2
19124: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19125: LD_EXP 26
19129: PUSH
19130: LD_EXP 57
19134: AND
19135: IFFALSE 19269
19137: GO 19139
19139: DISABLE
19140: LD_INT 0
19142: PPUSH
19143: PPUSH
// begin ToLua ( displayPowell(); ) ;
19144: LD_STRING displayPowell();
19146: PPUSH
19147: CALL_OW 559
// uc_side := 0 ;
19151: LD_ADDR_OWVAR 20
19155: PUSH
19156: LD_INT 0
19158: ST_TO_ADDR
// uc_nation := 2 ;
19159: LD_ADDR_OWVAR 21
19163: PUSH
19164: LD_INT 2
19166: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19167: LD_ADDR_OWVAR 37
19171: PUSH
19172: LD_INT 14
19174: ST_TO_ADDR
// vc_engine := engine_siberite ;
19175: LD_ADDR_OWVAR 39
19179: PUSH
19180: LD_INT 3
19182: ST_TO_ADDR
// vc_control := control_apeman ;
19183: LD_ADDR_OWVAR 38
19187: PUSH
19188: LD_INT 5
19190: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19191: LD_ADDR_OWVAR 40
19195: PUSH
19196: LD_INT 29
19198: ST_TO_ADDR
// un := CreateVehicle ;
19199: LD_ADDR_VAR 0 2
19203: PUSH
19204: CALL_OW 45
19208: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19209: LD_VAR 0 2
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19221: LD_INT 35
19223: PPUSH
19224: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19228: LD_VAR 0 2
19232: PPUSH
19233: LD_OWVAR 3
19237: PUSH
19238: LD_VAR 0 2
19242: DIFF
19243: PPUSH
19244: LD_VAR 0 2
19248: PPUSH
19249: CALL_OW 74
19253: PPUSH
19254: CALL_OW 115
// until IsOk ( un ) ;
19258: LD_VAR 0 2
19262: PPUSH
19263: CALL_OW 302
19267: IFFALSE 19221
// end ;
19269: PPOPN 2
19271: END
// every 0 0$1 trigger StreamModeActive and sStu do
19272: LD_EXP 26
19276: PUSH
19277: LD_EXP 65
19281: AND
19282: IFFALSE 19294
19284: GO 19286
19286: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19287: LD_STRING displayStucuk();
19289: PPUSH
19290: CALL_OW 559
// end ;
19294: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19295: LD_EXP 26
19299: PUSH
19300: LD_EXP 58
19304: AND
19305: IFFALSE 19446
19307: GO 19309
19309: DISABLE
19310: LD_INT 0
19312: PPUSH
19313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19314: LD_ADDR_VAR 0 2
19318: PUSH
19319: LD_INT 22
19321: PUSH
19322: LD_OWVAR 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 21
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 69
19349: ST_TO_ADDR
// if not tmp then
19350: LD_VAR 0 2
19354: NOT
19355: IFFALSE 19359
// exit ;
19357: GO 19446
// un := tmp [ rand ( 1 , tmp ) ] ;
19359: LD_ADDR_VAR 0 1
19363: PUSH
19364: LD_VAR 0 2
19368: PUSH
19369: LD_INT 1
19371: PPUSH
19372: LD_VAR 0 2
19376: PPUSH
19377: CALL_OW 12
19381: ARRAY
19382: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19383: LD_VAR 0 1
19387: PPUSH
19388: LD_INT 0
19390: PPUSH
19391: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19395: LD_VAR 0 1
19399: PPUSH
19400: LD_OWVAR 3
19404: PUSH
19405: LD_VAR 0 1
19409: DIFF
19410: PPUSH
19411: LD_VAR 0 1
19415: PPUSH
19416: CALL_OW 74
19420: PPUSH
19421: CALL_OW 115
// wait ( 0 0$20 ) ;
19425: LD_INT 700
19427: PPUSH
19428: CALL_OW 67
// SetSide ( un , your_side ) ;
19432: LD_VAR 0 1
19436: PPUSH
19437: LD_OWVAR 2
19441: PPUSH
19442: CALL_OW 235
// end ;
19446: PPOPN 2
19448: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19449: LD_EXP 26
19453: PUSH
19454: LD_EXP 59
19458: AND
19459: IFFALSE 19565
19461: GO 19463
19463: DISABLE
19464: LD_INT 0
19466: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19467: LD_ADDR_VAR 0 1
19471: PUSH
19472: LD_INT 22
19474: PUSH
19475: LD_OWVAR 2
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 30
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 30
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PPUSH
19516: CALL_OW 69
19520: ST_TO_ADDR
// if not depot then
19521: LD_VAR 0 1
19525: NOT
19526: IFFALSE 19530
// exit ;
19528: GO 19565
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19530: LD_VAR 0 1
19534: PUSH
19535: LD_INT 1
19537: ARRAY
19538: PPUSH
19539: CALL_OW 250
19543: PPUSH
19544: LD_VAR 0 1
19548: PUSH
19549: LD_INT 1
19551: ARRAY
19552: PPUSH
19553: CALL_OW 251
19557: PPUSH
19558: LD_INT 70
19560: PPUSH
19561: CALL_OW 495
// end ;
19565: PPOPN 1
19567: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19568: LD_EXP 26
19572: PUSH
19573: LD_EXP 60
19577: AND
19578: IFFALSE 19789
19580: GO 19582
19582: DISABLE
19583: LD_INT 0
19585: PPUSH
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19590: LD_ADDR_VAR 0 5
19594: PUSH
19595: LD_INT 22
19597: PUSH
19598: LD_OWVAR 2
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 21
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PPUSH
19621: CALL_OW 69
19625: ST_TO_ADDR
// if not tmp then
19626: LD_VAR 0 5
19630: NOT
19631: IFFALSE 19635
// exit ;
19633: GO 19789
// for i in tmp do
19635: LD_ADDR_VAR 0 1
19639: PUSH
19640: LD_VAR 0 5
19644: PUSH
19645: FOR_IN
19646: IFFALSE 19787
// begin d := rand ( 0 , 5 ) ;
19648: LD_ADDR_VAR 0 4
19652: PUSH
19653: LD_INT 0
19655: PPUSH
19656: LD_INT 5
19658: PPUSH
19659: CALL_OW 12
19663: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19664: LD_ADDR_VAR 0 2
19668: PUSH
19669: LD_VAR 0 1
19673: PPUSH
19674: CALL_OW 250
19678: PPUSH
19679: LD_VAR 0 4
19683: PPUSH
19684: LD_INT 3
19686: PPUSH
19687: LD_INT 12
19689: PPUSH
19690: CALL_OW 12
19694: PPUSH
19695: CALL_OW 272
19699: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19700: LD_ADDR_VAR 0 3
19704: PUSH
19705: LD_VAR 0 1
19709: PPUSH
19710: CALL_OW 251
19714: PPUSH
19715: LD_VAR 0 4
19719: PPUSH
19720: LD_INT 3
19722: PPUSH
19723: LD_INT 12
19725: PPUSH
19726: CALL_OW 12
19730: PPUSH
19731: CALL_OW 273
19735: ST_TO_ADDR
// if ValidHex ( x , y ) then
19736: LD_VAR 0 2
19740: PPUSH
19741: LD_VAR 0 3
19745: PPUSH
19746: CALL_OW 488
19750: IFFALSE 19785
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19752: LD_VAR 0 1
19756: PPUSH
19757: LD_VAR 0 2
19761: PPUSH
19762: LD_VAR 0 3
19766: PPUSH
19767: LD_INT 3
19769: PPUSH
19770: LD_INT 6
19772: PPUSH
19773: CALL_OW 12
19777: PPUSH
19778: LD_INT 1
19780: PPUSH
19781: CALL_OW 483
// end ;
19785: GO 19645
19787: POP
19788: POP
// end ;
19789: PPOPN 5
19791: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19792: LD_EXP 26
19796: PUSH
19797: LD_EXP 61
19801: AND
19802: IFFALSE 19896
19804: GO 19806
19806: DISABLE
19807: LD_INT 0
19809: PPUSH
19810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19811: LD_ADDR_VAR 0 2
19815: PUSH
19816: LD_INT 22
19818: PUSH
19819: LD_OWVAR 2
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 32
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 21
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: PPUSH
19853: CALL_OW 69
19857: ST_TO_ADDR
// if not tmp then
19858: LD_VAR 0 2
19862: NOT
19863: IFFALSE 19867
// exit ;
19865: GO 19896
// for i in tmp do
19867: LD_ADDR_VAR 0 1
19871: PUSH
19872: LD_VAR 0 2
19876: PUSH
19877: FOR_IN
19878: IFFALSE 19894
// SetFuel ( i , 0 ) ;
19880: LD_VAR 0 1
19884: PPUSH
19885: LD_INT 0
19887: PPUSH
19888: CALL_OW 240
19892: GO 19877
19894: POP
19895: POP
// end ;
19896: PPOPN 2
19898: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19899: LD_EXP 26
19903: PUSH
19904: LD_EXP 62
19908: AND
19909: IFFALSE 19975
19911: GO 19913
19913: DISABLE
19914: LD_INT 0
19916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19917: LD_ADDR_VAR 0 1
19921: PUSH
19922: LD_INT 22
19924: PUSH
19925: LD_OWVAR 2
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 30
19936: PUSH
19937: LD_INT 29
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PPUSH
19948: CALL_OW 69
19952: ST_TO_ADDR
// if not tmp then
19953: LD_VAR 0 1
19957: NOT
19958: IFFALSE 19962
// exit ;
19960: GO 19975
// DestroyUnit ( tmp [ 1 ] ) ;
19962: LD_VAR 0 1
19966: PUSH
19967: LD_INT 1
19969: ARRAY
19970: PPUSH
19971: CALL_OW 65
// end ;
19975: PPOPN 1
19977: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19978: LD_EXP 26
19982: PUSH
19983: LD_EXP 64
19987: AND
19988: IFFALSE 20117
19990: GO 19992
19992: DISABLE
19993: LD_INT 0
19995: PPUSH
// begin uc_side := 0 ;
19996: LD_ADDR_OWVAR 20
20000: PUSH
20001: LD_INT 0
20003: ST_TO_ADDR
// uc_nation := nation_arabian ;
20004: LD_ADDR_OWVAR 21
20008: PUSH
20009: LD_INT 2
20011: ST_TO_ADDR
// hc_gallery :=  ;
20012: LD_ADDR_OWVAR 33
20016: PUSH
20017: LD_STRING 
20019: ST_TO_ADDR
// hc_name :=  ;
20020: LD_ADDR_OWVAR 26
20024: PUSH
20025: LD_STRING 
20027: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20028: LD_INT 1
20030: PPUSH
20031: LD_INT 11
20033: PPUSH
20034: LD_INT 10
20036: PPUSH
20037: CALL_OW 380
// un := CreateHuman ;
20041: LD_ADDR_VAR 0 1
20045: PUSH
20046: CALL_OW 44
20050: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20051: LD_VAR 0 1
20055: PPUSH
20056: LD_INT 1
20058: PPUSH
20059: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20063: LD_INT 35
20065: PPUSH
20066: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20070: LD_VAR 0 1
20074: PPUSH
20075: LD_INT 22
20077: PUSH
20078: LD_OWVAR 2
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PPUSH
20087: CALL_OW 69
20091: PPUSH
20092: LD_VAR 0 1
20096: PPUSH
20097: CALL_OW 74
20101: PPUSH
20102: CALL_OW 115
// until IsDead ( un ) ;
20106: LD_VAR 0 1
20110: PPUSH
20111: CALL_OW 301
20115: IFFALSE 20063
// end ;
20117: PPOPN 1
20119: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20120: LD_EXP 26
20124: PUSH
20125: LD_EXP 66
20129: AND
20130: IFFALSE 20142
20132: GO 20134
20134: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20135: LD_STRING earthquake(getX(game), 0, 32)
20137: PPUSH
20138: CALL_OW 559
20142: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20143: LD_EXP 26
20147: PUSH
20148: LD_EXP 67
20152: AND
20153: IFFALSE 20244
20155: GO 20157
20157: DISABLE
20158: LD_INT 0
20160: PPUSH
// begin enable ;
20161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20162: LD_ADDR_VAR 0 1
20166: PUSH
20167: LD_INT 22
20169: PUSH
20170: LD_OWVAR 2
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 21
20181: PUSH
20182: LD_INT 2
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 33
20191: PUSH
20192: LD_INT 3
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: LIST
20203: PPUSH
20204: CALL_OW 69
20208: ST_TO_ADDR
// if not tmp then
20209: LD_VAR 0 1
20213: NOT
20214: IFFALSE 20218
// exit ;
20216: GO 20244
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20218: LD_VAR 0 1
20222: PUSH
20223: LD_INT 1
20225: PPUSH
20226: LD_VAR 0 1
20230: PPUSH
20231: CALL_OW 12
20235: ARRAY
20236: PPUSH
20237: LD_INT 1
20239: PPUSH
20240: CALL_OW 234
// end ;
20244: PPOPN 1
20246: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20247: LD_EXP 26
20251: PUSH
20252: LD_EXP 68
20256: AND
20257: IFFALSE 20398
20259: GO 20261
20261: DISABLE
20262: LD_INT 0
20264: PPUSH
20265: PPUSH
20266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20267: LD_ADDR_VAR 0 3
20271: PUSH
20272: LD_INT 22
20274: PUSH
20275: LD_OWVAR 2
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 25
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PPUSH
20298: CALL_OW 69
20302: ST_TO_ADDR
// if not tmp then
20303: LD_VAR 0 3
20307: NOT
20308: IFFALSE 20312
// exit ;
20310: GO 20398
// un := tmp [ rand ( 1 , tmp ) ] ;
20312: LD_ADDR_VAR 0 2
20316: PUSH
20317: LD_VAR 0 3
20321: PUSH
20322: LD_INT 1
20324: PPUSH
20325: LD_VAR 0 3
20329: PPUSH
20330: CALL_OW 12
20334: ARRAY
20335: ST_TO_ADDR
// if Crawls ( un ) then
20336: LD_VAR 0 2
20340: PPUSH
20341: CALL_OW 318
20345: IFFALSE 20356
// ComWalk ( un ) ;
20347: LD_VAR 0 2
20351: PPUSH
20352: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20356: LD_VAR 0 2
20360: PPUSH
20361: LD_INT 9
20363: PPUSH
20364: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20368: LD_INT 28
20370: PPUSH
20371: LD_OWVAR 2
20375: PPUSH
20376: LD_INT 2
20378: PPUSH
20379: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20383: LD_INT 29
20385: PPUSH
20386: LD_OWVAR 2
20390: PPUSH
20391: LD_INT 2
20393: PPUSH
20394: CALL_OW 322
// end ;
20398: PPOPN 3
20400: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20401: LD_EXP 26
20405: PUSH
20406: LD_EXP 69
20410: AND
20411: IFFALSE 20522
20413: GO 20415
20415: DISABLE
20416: LD_INT 0
20418: PPUSH
20419: PPUSH
20420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20421: LD_ADDR_VAR 0 3
20425: PUSH
20426: LD_INT 22
20428: PUSH
20429: LD_OWVAR 2
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 25
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PPUSH
20452: CALL_OW 69
20456: ST_TO_ADDR
// if not tmp then
20457: LD_VAR 0 3
20461: NOT
20462: IFFALSE 20466
// exit ;
20464: GO 20522
// un := tmp [ rand ( 1 , tmp ) ] ;
20466: LD_ADDR_VAR 0 2
20470: PUSH
20471: LD_VAR 0 3
20475: PUSH
20476: LD_INT 1
20478: PPUSH
20479: LD_VAR 0 3
20483: PPUSH
20484: CALL_OW 12
20488: ARRAY
20489: ST_TO_ADDR
// if Crawls ( un ) then
20490: LD_VAR 0 2
20494: PPUSH
20495: CALL_OW 318
20499: IFFALSE 20510
// ComWalk ( un ) ;
20501: LD_VAR 0 2
20505: PPUSH
20506: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20510: LD_VAR 0 2
20514: PPUSH
20515: LD_INT 8
20517: PPUSH
20518: CALL_OW 336
// end ;
20522: PPOPN 3
20524: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20525: LD_EXP 26
20529: PUSH
20530: LD_EXP 70
20534: AND
20535: IFFALSE 20679
20537: GO 20539
20539: DISABLE
20540: LD_INT 0
20542: PPUSH
20543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20544: LD_ADDR_VAR 0 2
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_OWVAR 2
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 21
20563: PUSH
20564: LD_INT 2
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 2
20573: PUSH
20574: LD_INT 34
20576: PUSH
20577: LD_INT 12
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 34
20586: PUSH
20587: LD_INT 51
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 34
20596: PUSH
20597: LD_INT 32
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: PPUSH
20615: CALL_OW 69
20619: ST_TO_ADDR
// if not tmp then
20620: LD_VAR 0 2
20624: NOT
20625: IFFALSE 20629
// exit ;
20627: GO 20679
// for i in tmp do
20629: LD_ADDR_VAR 0 1
20633: PUSH
20634: LD_VAR 0 2
20638: PUSH
20639: FOR_IN
20640: IFFALSE 20677
// if GetCargo ( i , mat_artifact ) = 0 then
20642: LD_VAR 0 1
20646: PPUSH
20647: LD_INT 4
20649: PPUSH
20650: CALL_OW 289
20654: PUSH
20655: LD_INT 0
20657: EQUAL
20658: IFFALSE 20675
// SetCargo ( i , mat_siberit , 100 ) ;
20660: LD_VAR 0 1
20664: PPUSH
20665: LD_INT 3
20667: PPUSH
20668: LD_INT 100
20670: PPUSH
20671: CALL_OW 290
20675: GO 20639
20677: POP
20678: POP
// end ;
20679: PPOPN 2
20681: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20682: LD_EXP 26
20686: PUSH
20687: LD_EXP 71
20691: AND
20692: IFFALSE 20845
20694: GO 20696
20696: DISABLE
20697: LD_INT 0
20699: PPUSH
20700: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20701: LD_ADDR_VAR 0 2
20705: PUSH
20706: LD_INT 22
20708: PUSH
20709: LD_OWVAR 2
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PPUSH
20718: CALL_OW 69
20722: ST_TO_ADDR
// if not tmp then
20723: LD_VAR 0 2
20727: NOT
20728: IFFALSE 20732
// exit ;
20730: GO 20845
// for i := 1 to 2 do
20732: LD_ADDR_VAR 0 1
20736: PUSH
20737: DOUBLE
20738: LD_INT 1
20740: DEC
20741: ST_TO_ADDR
20742: LD_INT 2
20744: PUSH
20745: FOR_TO
20746: IFFALSE 20843
// begin uc_side := your_side ;
20748: LD_ADDR_OWVAR 20
20752: PUSH
20753: LD_OWVAR 2
20757: ST_TO_ADDR
// uc_nation := nation_american ;
20758: LD_ADDR_OWVAR 21
20762: PUSH
20763: LD_INT 1
20765: ST_TO_ADDR
// vc_chassis := us_morphling ;
20766: LD_ADDR_OWVAR 37
20770: PUSH
20771: LD_INT 5
20773: ST_TO_ADDR
// vc_engine := engine_siberite ;
20774: LD_ADDR_OWVAR 39
20778: PUSH
20779: LD_INT 3
20781: ST_TO_ADDR
// vc_control := control_computer ;
20782: LD_ADDR_OWVAR 38
20786: PUSH
20787: LD_INT 3
20789: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20790: LD_ADDR_OWVAR 40
20794: PUSH
20795: LD_INT 10
20797: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
20798: CALL_OW 45
20802: PPUSH
20803: LD_VAR 0 2
20807: PUSH
20808: LD_INT 1
20810: ARRAY
20811: PPUSH
20812: CALL_OW 250
20816: PPUSH
20817: LD_VAR 0 2
20821: PUSH
20822: LD_INT 1
20824: ARRAY
20825: PPUSH
20826: CALL_OW 251
20830: PPUSH
20831: LD_INT 12
20833: PPUSH
20834: LD_INT 1
20836: PPUSH
20837: CALL_OW 50
// end ;
20841: GO 20745
20843: POP
20844: POP
// end ;
20845: PPOPN 2
20847: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20848: LD_EXP 26
20852: PUSH
20853: LD_EXP 72
20857: AND
20858: IFFALSE 21080
20860: GO 20862
20862: DISABLE
20863: LD_INT 0
20865: PPUSH
20866: PPUSH
20867: PPUSH
20868: PPUSH
20869: PPUSH
20870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20871: LD_ADDR_VAR 0 6
20875: PUSH
20876: LD_INT 22
20878: PUSH
20879: LD_OWVAR 2
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 21
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 3
20900: PUSH
20901: LD_INT 23
20903: PUSH
20904: LD_INT 0
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: PPUSH
20920: CALL_OW 69
20924: ST_TO_ADDR
// if not tmp then
20925: LD_VAR 0 6
20929: NOT
20930: IFFALSE 20934
// exit ;
20932: GO 21080
// s1 := rand ( 1 , 4 ) ;
20934: LD_ADDR_VAR 0 2
20938: PUSH
20939: LD_INT 1
20941: PPUSH
20942: LD_INT 4
20944: PPUSH
20945: CALL_OW 12
20949: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20950: LD_ADDR_VAR 0 4
20954: PUSH
20955: LD_VAR 0 6
20959: PUSH
20960: LD_INT 1
20962: ARRAY
20963: PPUSH
20964: LD_VAR 0 2
20968: PPUSH
20969: CALL_OW 259
20973: ST_TO_ADDR
// if s1 = 1 then
20974: LD_VAR 0 2
20978: PUSH
20979: LD_INT 1
20981: EQUAL
20982: IFFALSE 21002
// s2 := rand ( 2 , 4 ) else
20984: LD_ADDR_VAR 0 3
20988: PUSH
20989: LD_INT 2
20991: PPUSH
20992: LD_INT 4
20994: PPUSH
20995: CALL_OW 12
20999: ST_TO_ADDR
21000: GO 21010
// s2 := 1 ;
21002: LD_ADDR_VAR 0 3
21006: PUSH
21007: LD_INT 1
21009: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21010: LD_ADDR_VAR 0 5
21014: PUSH
21015: LD_VAR 0 6
21019: PUSH
21020: LD_INT 1
21022: ARRAY
21023: PPUSH
21024: LD_VAR 0 3
21028: PPUSH
21029: CALL_OW 259
21033: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21034: LD_VAR 0 6
21038: PUSH
21039: LD_INT 1
21041: ARRAY
21042: PPUSH
21043: LD_VAR 0 2
21047: PPUSH
21048: LD_VAR 0 5
21052: PPUSH
21053: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21057: LD_VAR 0 6
21061: PUSH
21062: LD_INT 1
21064: ARRAY
21065: PPUSH
21066: LD_VAR 0 3
21070: PPUSH
21071: LD_VAR 0 4
21075: PPUSH
21076: CALL_OW 237
// end ;
21080: PPOPN 6
21082: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21083: LD_EXP 26
21087: PUSH
21088: LD_EXP 73
21092: AND
21093: IFFALSE 21172
21095: GO 21097
21097: DISABLE
21098: LD_INT 0
21100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21101: LD_ADDR_VAR 0 1
21105: PUSH
21106: LD_INT 22
21108: PUSH
21109: LD_OWVAR 2
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 30
21120: PUSH
21121: LD_INT 3
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PPUSH
21132: CALL_OW 69
21136: ST_TO_ADDR
// if not tmp then
21137: LD_VAR 0 1
21141: NOT
21142: IFFALSE 21146
// exit ;
21144: GO 21172
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21146: LD_VAR 0 1
21150: PUSH
21151: LD_INT 1
21153: PPUSH
21154: LD_VAR 0 1
21158: PPUSH
21159: CALL_OW 12
21163: ARRAY
21164: PPUSH
21165: LD_INT 1
21167: PPUSH
21168: CALL_OW 234
// end ;
21172: PPOPN 1
21174: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21175: LD_EXP 26
21179: PUSH
21180: LD_EXP 74
21184: AND
21185: IFFALSE 21297
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21194: LD_ADDR_VAR 0 2
21198: PUSH
21199: LD_INT 22
21201: PUSH
21202: LD_OWVAR 2
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 2
21213: PUSH
21214: LD_INT 30
21216: PUSH
21217: LD_INT 27
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 30
21226: PUSH
21227: LD_INT 26
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 30
21236: PUSH
21237: LD_INT 28
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PPUSH
21254: CALL_OW 69
21258: ST_TO_ADDR
// if not tmp then
21259: LD_VAR 0 2
21263: NOT
21264: IFFALSE 21268
// exit ;
21266: GO 21297
// for i in tmp do
21268: LD_ADDR_VAR 0 1
21272: PUSH
21273: LD_VAR 0 2
21277: PUSH
21278: FOR_IN
21279: IFFALSE 21295
// SetLives ( i , 1 ) ;
21281: LD_VAR 0 1
21285: PPUSH
21286: LD_INT 1
21288: PPUSH
21289: CALL_OW 234
21293: GO 21278
21295: POP
21296: POP
// end ;
21297: PPOPN 2
21299: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21300: LD_EXP 26
21304: PUSH
21305: LD_EXP 75
21309: AND
21310: IFFALSE 21580
21312: GO 21314
21314: DISABLE
21315: LD_INT 0
21317: PPUSH
21318: PPUSH
21319: PPUSH
// begin i := rand ( 1 , 7 ) ;
21320: LD_ADDR_VAR 0 1
21324: PUSH
21325: LD_INT 1
21327: PPUSH
21328: LD_INT 7
21330: PPUSH
21331: CALL_OW 12
21335: ST_TO_ADDR
// case i of 1 :
21336: LD_VAR 0 1
21340: PUSH
21341: LD_INT 1
21343: DOUBLE
21344: EQUAL
21345: IFTRUE 21349
21347: GO 21359
21349: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21350: LD_STRING earthquake(getX(game), 0, 32)
21352: PPUSH
21353: CALL_OW 559
21357: GO 21580
21359: LD_INT 2
21361: DOUBLE
21362: EQUAL
21363: IFTRUE 21367
21365: GO 21377
21367: POP
// ToLua ( displayStucuk(); ) ; 3 :
21368: LD_STRING displayStucuk();
21370: PPUSH
21371: CALL_OW 559
21375: GO 21580
21377: LD_INT 3
21379: DOUBLE
21380: EQUAL
21381: IFTRUE 21385
21383: GO 21489
21385: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21386: LD_ADDR_VAR 0 2
21390: PUSH
21391: LD_INT 22
21393: PUSH
21394: LD_OWVAR 2
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 25
21405: PUSH
21406: LD_INT 1
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PPUSH
21417: CALL_OW 69
21421: ST_TO_ADDR
// if not tmp then
21422: LD_VAR 0 2
21426: NOT
21427: IFFALSE 21431
// exit ;
21429: GO 21580
// un := tmp [ rand ( 1 , tmp ) ] ;
21431: LD_ADDR_VAR 0 3
21435: PUSH
21436: LD_VAR 0 2
21440: PUSH
21441: LD_INT 1
21443: PPUSH
21444: LD_VAR 0 2
21448: PPUSH
21449: CALL_OW 12
21453: ARRAY
21454: ST_TO_ADDR
// if Crawls ( un ) then
21455: LD_VAR 0 3
21459: PPUSH
21460: CALL_OW 318
21464: IFFALSE 21475
// ComWalk ( un ) ;
21466: LD_VAR 0 3
21470: PPUSH
21471: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21475: LD_VAR 0 3
21479: PPUSH
21480: LD_INT 8
21482: PPUSH
21483: CALL_OW 336
// end ; 4 :
21487: GO 21580
21489: LD_INT 4
21491: DOUBLE
21492: EQUAL
21493: IFTRUE 21497
21495: GO 21558
21497: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21498: LD_ADDR_VAR 0 2
21502: PUSH
21503: LD_INT 22
21505: PUSH
21506: LD_OWVAR 2
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 30
21517: PUSH
21518: LD_INT 29
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PPUSH
21529: CALL_OW 69
21533: ST_TO_ADDR
// if not tmp then
21534: LD_VAR 0 2
21538: NOT
21539: IFFALSE 21543
// exit ;
21541: GO 21580
// DestroyUnit ( tmp [ 1 ] ) ;
21543: LD_VAR 0 2
21547: PUSH
21548: LD_INT 1
21550: ARRAY
21551: PPUSH
21552: CALL_OW 65
// end ; 5 .. 7 :
21556: GO 21580
21558: LD_INT 5
21560: DOUBLE
21561: GREATEREQUAL
21562: IFFALSE 21570
21564: LD_INT 7
21566: DOUBLE
21567: LESSEQUAL
21568: IFTRUE 21572
21570: GO 21579
21572: POP
// StreamSibBomb ; end ;
21573: CALL 17874 0 0
21577: GO 21580
21579: POP
// end ;
21580: PPOPN 3
21582: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21583: LD_EXP 26
21587: PUSH
21588: LD_EXP 76
21592: AND
21593: IFFALSE 21749
21595: GO 21597
21597: DISABLE
21598: LD_INT 0
21600: PPUSH
21601: PPUSH
21602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21603: LD_ADDR_VAR 0 2
21607: PUSH
21608: LD_INT 81
21610: PUSH
21611: LD_OWVAR 2
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 21
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 21
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: LIST
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PPUSH
21652: CALL_OW 69
21656: ST_TO_ADDR
// if not tmp then
21657: LD_VAR 0 2
21661: NOT
21662: IFFALSE 21666
// exit ;
21664: GO 21749
// p := 0 ;
21666: LD_ADDR_VAR 0 3
21670: PUSH
21671: LD_INT 0
21673: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21674: LD_INT 35
21676: PPUSH
21677: CALL_OW 67
// p := p + 1 ;
21681: LD_ADDR_VAR 0 3
21685: PUSH
21686: LD_VAR 0 3
21690: PUSH
21691: LD_INT 1
21693: PLUS
21694: ST_TO_ADDR
// for i in tmp do
21695: LD_ADDR_VAR 0 1
21699: PUSH
21700: LD_VAR 0 2
21704: PUSH
21705: FOR_IN
21706: IFFALSE 21737
// if GetLives ( i ) < 1000 then
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 256
21717: PUSH
21718: LD_INT 1000
21720: LESS
21721: IFFALSE 21735
// SetLives ( i , 1000 ) ;
21723: LD_VAR 0 1
21727: PPUSH
21728: LD_INT 1000
21730: PPUSH
21731: CALL_OW 234
21735: GO 21705
21737: POP
21738: POP
// until p > 20 ;
21739: LD_VAR 0 3
21743: PUSH
21744: LD_INT 20
21746: GREATER
21747: IFFALSE 21674
// end ;
21749: PPOPN 3
21751: END
// every 0 0$1 trigger StreamModeActive and sTime do
21752: LD_EXP 26
21756: PUSH
21757: LD_EXP 77
21761: AND
21762: IFFALSE 21797
21764: GO 21766
21766: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21767: LD_INT 28
21769: PPUSH
21770: LD_OWVAR 2
21774: PPUSH
21775: LD_INT 2
21777: PPUSH
21778: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21782: LD_INT 30
21784: PPUSH
21785: LD_OWVAR 2
21789: PPUSH
21790: LD_INT 2
21792: PPUSH
21793: CALL_OW 322
// end ;
21797: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21798: LD_EXP 26
21802: PUSH
21803: LD_EXP 78
21807: AND
21808: IFFALSE 21929
21810: GO 21812
21812: DISABLE
21813: LD_INT 0
21815: PPUSH
21816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21817: LD_ADDR_VAR 0 2
21821: PUSH
21822: LD_INT 22
21824: PUSH
21825: LD_OWVAR 2
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 21
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 3
21846: PUSH
21847: LD_INT 23
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: PPUSH
21866: CALL_OW 69
21870: ST_TO_ADDR
// if not tmp then
21871: LD_VAR 0 2
21875: NOT
21876: IFFALSE 21880
// exit ;
21878: GO 21929
// for i in tmp do
21880: LD_ADDR_VAR 0 1
21884: PUSH
21885: LD_VAR 0 2
21889: PUSH
21890: FOR_IN
21891: IFFALSE 21927
// begin if Crawls ( i ) then
21893: LD_VAR 0 1
21897: PPUSH
21898: CALL_OW 318
21902: IFFALSE 21913
// ComWalk ( i ) ;
21904: LD_VAR 0 1
21908: PPUSH
21909: CALL_OW 138
// SetClass ( i , 2 ) ;
21913: LD_VAR 0 1
21917: PPUSH
21918: LD_INT 2
21920: PPUSH
21921: CALL_OW 336
// end ;
21925: GO 21890
21927: POP
21928: POP
// end ;
21929: PPOPN 2
21931: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21932: LD_EXP 26
21936: PUSH
21937: LD_EXP 79
21941: AND
21942: IFFALSE 22147
21944: GO 21946
21946: DISABLE
21947: LD_INT 0
21949: PPUSH
21950: PPUSH
21951: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21952: LD_OWVAR 2
21956: PPUSH
21957: LD_INT 9
21959: PPUSH
21960: LD_INT 1
21962: PPUSH
21963: LD_INT 1
21965: PPUSH
21966: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21970: LD_INT 9
21972: PPUSH
21973: LD_OWVAR 2
21977: PPUSH
21978: CALL_OW 343
// hc_name := Dark Warrior ;
21982: LD_ADDR_OWVAR 26
21986: PUSH
21987: LD_STRING Dark Warrior
21989: ST_TO_ADDR
// hc_gallery :=  ;
21990: LD_ADDR_OWVAR 33
21994: PUSH
21995: LD_STRING 
21997: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
21998: LD_INT 1
22000: PPUSH
22001: LD_INT 1
22003: PPUSH
22004: LD_INT 10
22006: PPUSH
22007: CALL_OW 380
// un := CreateHuman ;
22011: LD_ADDR_VAR 0 3
22015: PUSH
22016: CALL_OW 44
22020: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22021: LD_VAR 0 3
22025: PPUSH
22026: LD_INT 1
22028: PPUSH
22029: CALL_OW 51
// p := 0 ;
22033: LD_ADDR_VAR 0 2
22037: PUSH
22038: LD_INT 0
22040: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22041: LD_INT 35
22043: PPUSH
22044: CALL_OW 67
// if GetLives ( un ) < 1000 then
22048: LD_VAR 0 3
22052: PPUSH
22053: CALL_OW 256
22057: PUSH
22058: LD_INT 1000
22060: LESS
22061: IFFALSE 22075
// SetLives ( un , 1000 ) ;
22063: LD_VAR 0 3
22067: PPUSH
22068: LD_INT 1000
22070: PPUSH
22071: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
22075: LD_VAR 0 3
22079: PPUSH
22080: LD_INT 81
22082: PUSH
22083: LD_OWVAR 2
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PPUSH
22092: CALL_OW 69
22096: PPUSH
22097: LD_VAR 0 3
22101: PPUSH
22102: CALL_OW 74
22106: PPUSH
22107: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22111: LD_VAR 0 2
22115: PUSH
22116: LD_INT 60
22118: GREATER
22119: PUSH
22120: LD_VAR 0 3
22124: PPUSH
22125: CALL_OW 301
22129: OR
22130: IFFALSE 22041
// if un then
22132: LD_VAR 0 3
22136: IFFALSE 22147
// RemoveUnit ( un ) ;
22138: LD_VAR 0 3
22142: PPUSH
22143: CALL_OW 64
// end ; end_of_file
22147: PPOPN 3
22149: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
22150: LD_INT 0
22152: PPUSH
22153: PPUSH
22154: PPUSH
22155: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22156: LD_VAR 0 1
22160: PPUSH
22161: CALL_OW 264
22165: PUSH
22166: LD_EXP 25
22170: EQUAL
22171: IFFALSE 22243
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22173: LD_INT 68
22175: PPUSH
22176: LD_VAR 0 1
22180: PPUSH
22181: CALL_OW 255
22185: PPUSH
22186: CALL_OW 321
22190: PUSH
22191: LD_INT 2
22193: EQUAL
22194: IFFALSE 22206
// eff := 70 else
22196: LD_ADDR_VAR 0 6
22200: PUSH
22201: LD_INT 70
22203: ST_TO_ADDR
22204: GO 22214
// eff := 30 ;
22206: LD_ADDR_VAR 0 6
22210: PUSH
22211: LD_INT 30
22213: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22214: LD_VAR 0 1
22218: PPUSH
22219: CALL_OW 250
22223: PPUSH
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL_OW 251
22233: PPUSH
22234: LD_VAR 0 6
22238: PPUSH
22239: CALL_OW 495
// end ; end ;
22243: LD_VAR 0 4
22247: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
22248: LD_INT 0
22250: PPUSH
22251: PPUSH
22252: PPUSH
22253: PPUSH
22254: PPUSH
22255: PPUSH
// if cmd = 124 then
22256: LD_VAR 0 1
22260: PUSH
22261: LD_INT 124
22263: EQUAL
22264: IFFALSE 22470
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
22266: LD_ADDR_VAR 0 5
22270: PUSH
22271: LD_INT 2
22273: PUSH
22274: LD_INT 34
22276: PUSH
22277: LD_INT 53
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 34
22286: PUSH
22287: LD_INT 14
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: LIST
22298: PPUSH
22299: CALL_OW 69
22303: ST_TO_ADDR
// if not tmp then
22304: LD_VAR 0 5
22308: NOT
22309: IFFALSE 22313
// exit ;
22311: GO 22470
// for i in tmp do
22313: LD_ADDR_VAR 0 3
22317: PUSH
22318: LD_VAR 0 5
22322: PUSH
22323: FOR_IN
22324: IFFALSE 22468
// begin taskList := GetTaskList ( i ) ;
22326: LD_ADDR_VAR 0 6
22330: PUSH
22331: LD_VAR 0 3
22335: PPUSH
22336: CALL_OW 437
22340: ST_TO_ADDR
// if not taskList then
22341: LD_VAR 0 6
22345: NOT
22346: IFFALSE 22350
// continue ;
22348: GO 22323
// for j = 1 to taskList do
22350: LD_ADDR_VAR 0 4
22354: PUSH
22355: DOUBLE
22356: LD_INT 1
22358: DEC
22359: ST_TO_ADDR
22360: LD_VAR 0 6
22364: PUSH
22365: FOR_TO
22366: IFFALSE 22464
// if taskList [ j ] [ 1 ] = | then
22368: LD_VAR 0 6
22372: PUSH
22373: LD_VAR 0 4
22377: ARRAY
22378: PUSH
22379: LD_INT 1
22381: ARRAY
22382: PUSH
22383: LD_STRING |
22385: EQUAL
22386: IFFALSE 22462
// begin _taskList := Delete ( taskList , 1 ) ;
22388: LD_ADDR_VAR 0 7
22392: PUSH
22393: LD_VAR 0 6
22397: PPUSH
22398: LD_INT 1
22400: PPUSH
22401: CALL_OW 3
22405: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
22406: LD_VAR 0 3
22410: PPUSH
22411: LD_VAR 0 7
22415: PPUSH
22416: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
22420: LD_VAR 0 3
22424: PPUSH
22425: LD_VAR 0 6
22429: PUSH
22430: LD_VAR 0 4
22434: ARRAY
22435: PUSH
22436: LD_INT 2
22438: ARRAY
22439: PPUSH
22440: LD_VAR 0 6
22444: PUSH
22445: LD_VAR 0 4
22449: ARRAY
22450: PUSH
22451: LD_INT 3
22453: ARRAY
22454: PPUSH
22455: LD_INT 8
22457: PPUSH
22458: CALL 22475 0 4
// end ;
22462: GO 22365
22464: POP
22465: POP
// end ;
22466: GO 22323
22468: POP
22469: POP
// end ; end ;
22470: LD_VAR 0 2
22474: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22475: LD_INT 0
22477: PPUSH
22478: PPUSH
22479: PPUSH
22480: PPUSH
22481: PPUSH
22482: PPUSH
22483: PPUSH
22484: PPUSH
22485: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22486: LD_VAR 0 1
22490: NOT
22491: PUSH
22492: LD_VAR 0 2
22496: PPUSH
22497: LD_VAR 0 3
22501: PPUSH
22502: CALL_OW 488
22506: NOT
22507: OR
22508: PUSH
22509: LD_VAR 0 4
22513: NOT
22514: OR
22515: IFFALSE 22519
// exit ;
22517: GO 22859
// list := [ ] ;
22519: LD_ADDR_VAR 0 13
22523: PUSH
22524: EMPTY
22525: ST_TO_ADDR
// if x - r < 0 then
22526: LD_VAR 0 2
22530: PUSH
22531: LD_VAR 0 4
22535: MINUS
22536: PUSH
22537: LD_INT 0
22539: LESS
22540: IFFALSE 22552
// min_x := 0 else
22542: LD_ADDR_VAR 0 7
22546: PUSH
22547: LD_INT 0
22549: ST_TO_ADDR
22550: GO 22568
// min_x := x - r ;
22552: LD_ADDR_VAR 0 7
22556: PUSH
22557: LD_VAR 0 2
22561: PUSH
22562: LD_VAR 0 4
22566: MINUS
22567: ST_TO_ADDR
// if y - r < 0 then
22568: LD_VAR 0 3
22572: PUSH
22573: LD_VAR 0 4
22577: MINUS
22578: PUSH
22579: LD_INT 0
22581: LESS
22582: IFFALSE 22594
// min_y := 0 else
22584: LD_ADDR_VAR 0 8
22588: PUSH
22589: LD_INT 0
22591: ST_TO_ADDR
22592: GO 22610
// min_y := y - r ;
22594: LD_ADDR_VAR 0 8
22598: PUSH
22599: LD_VAR 0 3
22603: PUSH
22604: LD_VAR 0 4
22608: MINUS
22609: ST_TO_ADDR
// max_x := x + r ;
22610: LD_ADDR_VAR 0 9
22614: PUSH
22615: LD_VAR 0 2
22619: PUSH
22620: LD_VAR 0 4
22624: PLUS
22625: ST_TO_ADDR
// max_y := y + r ;
22626: LD_ADDR_VAR 0 10
22630: PUSH
22631: LD_VAR 0 3
22635: PUSH
22636: LD_VAR 0 4
22640: PLUS
22641: ST_TO_ADDR
// for _x = min_x to max_x do
22642: LD_ADDR_VAR 0 11
22646: PUSH
22647: DOUBLE
22648: LD_VAR 0 7
22652: DEC
22653: ST_TO_ADDR
22654: LD_VAR 0 9
22658: PUSH
22659: FOR_TO
22660: IFFALSE 22777
// for _y = min_y to max_y do
22662: LD_ADDR_VAR 0 12
22666: PUSH
22667: DOUBLE
22668: LD_VAR 0 8
22672: DEC
22673: ST_TO_ADDR
22674: LD_VAR 0 10
22678: PUSH
22679: FOR_TO
22680: IFFALSE 22773
// begin if not ValidHex ( _x , _y ) then
22682: LD_VAR 0 11
22686: PPUSH
22687: LD_VAR 0 12
22691: PPUSH
22692: CALL_OW 488
22696: NOT
22697: IFFALSE 22701
// continue ;
22699: GO 22679
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22701: LD_VAR 0 11
22705: PPUSH
22706: LD_VAR 0 12
22710: PPUSH
22711: CALL_OW 351
22715: PUSH
22716: LD_VAR 0 11
22720: PPUSH
22721: LD_VAR 0 12
22725: PPUSH
22726: CALL_OW 554
22730: AND
22731: IFFALSE 22771
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22733: LD_ADDR_VAR 0 13
22737: PUSH
22738: LD_VAR 0 13
22742: PPUSH
22743: LD_VAR 0 13
22747: PUSH
22748: LD_INT 1
22750: PLUS
22751: PPUSH
22752: LD_VAR 0 11
22756: PUSH
22757: LD_VAR 0 12
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PPUSH
22766: CALL_OW 2
22770: ST_TO_ADDR
// end ;
22771: GO 22679
22773: POP
22774: POP
22775: GO 22659
22777: POP
22778: POP
// if not list then
22779: LD_VAR 0 13
22783: NOT
22784: IFFALSE 22788
// exit ;
22786: GO 22859
// for i in list do
22788: LD_ADDR_VAR 0 6
22792: PUSH
22793: LD_VAR 0 13
22797: PUSH
22798: FOR_IN
22799: IFFALSE 22857
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22801: LD_VAR 0 1
22805: PPUSH
22806: LD_STRING M
22808: PUSH
22809: LD_VAR 0 6
22813: PUSH
22814: LD_INT 1
22816: ARRAY
22817: PUSH
22818: LD_VAR 0 6
22822: PUSH
22823: LD_INT 2
22825: ARRAY
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: PPUSH
22851: CALL_OW 447
22855: GO 22798
22857: POP
22858: POP
// end ;
22859: LD_VAR 0 5
22863: RET
