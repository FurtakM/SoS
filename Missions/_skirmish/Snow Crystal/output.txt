// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10637: LD_EXP 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: PUSH
10646: LD_INT 22
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: PUSH
10675: LD_INT 0
10677: EQUAL
10678: AND
10679: IFFALSE 10691
10681: GO 10683
10683: DISABLE
// YouLost ( peo-lose ) ;
10684: LD_STRING peo-lose
10686: PPUSH
10687: CALL_OW 104
10691: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10692: LD_EXP 1
10696: PUSH
10697: LD_INT 2
10699: EQUAL
10700: PUSH
10701: LD_INT 22
10703: PUSH
10704: LD_INT 3
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 21
10713: PUSH
10714: LD_INT 1
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PPUSH
10725: CALL_OW 69
10729: PUSH
10730: LD_INT 0
10732: EQUAL
10733: AND
10734: IFFALSE 10746
10736: GO 10738
10738: DISABLE
// YouLost ( peo-lose ) ;
10739: LD_STRING peo-lose
10741: PPUSH
10742: CALL_OW 104
10746: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
10747: LD_OWVAR 2
10751: PPUSH
10752: CALL 10510 0 1
10756: PUSH
10757: LD_EXP 5
10761: GREATEREQUAL
10762: IFFALSE 10848
10764: GO 10766
10766: DISABLE
10767: LD_INT 0
10769: PPUSH
// begin if GetSide ( jota_base ) = your_side then
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 255
10777: PUSH
10778: LD_OWVAR 2
10782: EQUAL
10783: IFFALSE 10826
// begin for i = 1 to 3 do
10785: LD_ADDR_VAR 0 1
10789: PUSH
10790: DOUBLE
10791: LD_INT 1
10793: DEC
10794: ST_TO_ADDR
10795: LD_INT 3
10797: PUSH
10798: FOR_TO
10799: IFFALSE 10813
// AddMedal ( med , 1 ) ;
10801: LD_STRING med
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 101
10811: GO 10798
10813: POP
10814: POP
// GiveMedals ( MAIN ) ;
10815: LD_STRING MAIN
10817: PPUSH
10818: CALL_OW 102
// YouWin ;
10822: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 255
10833: PUSH
10834: LD_OWVAR 2
10838: NONEQUAL
10839: IFFALSE 10848
// YouLost ( source ) ;
10841: LD_STRING source
10843: PPUSH
10844: CALL_OW 104
// end ; end_of_file
10848: PPOPN 1
10850: END
// every 2 2$05 + 0 0$11 do
10851: GO 10853
10853: DISABLE
// begin enable ;
10854: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10855: LD_INT 1
10857: PPUSH
10858: LD_INT 5
10860: PPUSH
10861: CALL_OW 12
10865: PPUSH
10866: LD_INT 7
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
10876: LD_INT 350
10878: PPUSH
10879: LD_INT 1295
10881: PPUSH
10882: CALL_OW 12
10886: PPUSH
10887: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
10891: LD_INT 1
10893: PPUSH
10894: LD_INT 5
10896: PPUSH
10897: CALL_OW 12
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 57
// end ;
10909: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
10910: LD_EXP 1
10914: PUSH
10915: LD_INT 2
10917: EQUAL
10918: PUSH
10919: LD_EXP 8
10923: PUSH
10924: LD_INT 0
10926: EQUAL
10927: AND
10928: IFFALSE 11018
10930: GO 10932
10932: DISABLE
// begin enable ;
10933: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10934: LD_INT 1
10936: PPUSH
10937: LD_INT 5
10939: PPUSH
10940: CALL_OW 12
10944: PPUSH
10945: LD_INT 7
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
10955: LD_INT 350
10957: PPUSH
10958: LD_INT 1750
10960: PPUSH
10961: CALL_OW 12
10965: PPUSH
10966: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
10970: LD_EXP 6
10974: PUSH
10975: LD_INT 73500
10977: PUSH
10978: LD_INT 63000
10980: PUSH
10981: LD_INT 52500
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_EXP 2
10993: ARRAY
10994: LESSEQUAL
10995: IFFALSE 11018
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
10997: LD_INT 1
10999: PPUSH
11000: LD_INT 5
11002: PPUSH
11003: CALL_OW 12
11007: PPUSH
11008: LD_INT 12
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 55
// end ; end_of_file
11018: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11019: LD_VAR 0 1
11023: PPUSH
11024: LD_VAR 0 2
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: CALL 27322 0 3
// end ;
11038: PPOPN 3
11040: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: CALL 27226 0 1
// if un = jota_base then
11050: LD_VAR 0 1
11054: PUSH
11055: LD_INT 1
11057: EQUAL
11058: IFFALSE 11067
// YouLost ( jota-lose ) ;
11060: LD_STRING jota-lose
11062: PPUSH
11063: CALL_OW 104
// if game_type = 2 and depot_captured = false then
11067: LD_EXP 1
11071: PUSH
11072: LD_INT 2
11074: EQUAL
11075: PUSH
11076: LD_EXP 8
11080: PUSH
11081: LD_INT 0
11083: EQUAL
11084: AND
11085: IFFALSE 11400
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL_OW 255
11096: PUSH
11097: LD_INT 1
11099: EQUAL
11100: PUSH
11101: LD_VAR 0 1
11105: PUSH
11106: LD_INT 11
11108: PPUSH
11109: LD_INT 21
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PPUSH
11119: CALL_OW 70
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 30
11129: PUSH
11130: LD_INT 6
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 30
11139: PUSH
11140: LD_INT 10
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 30
11149: PUSH
11150: LD_INT 7
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 30
11159: PUSH
11160: LD_INT 8
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: PPUSH
11186: CALL_OW 69
11190: DIFF
11191: IN
11192: AND
11193: IFFALSE 11279
// begin ai_build := ai_build ^ GetBType ( un ) ;
11195: LD_ADDR_EXP 10
11199: PUSH
11200: LD_EXP 10
11204: PUSH
11205: LD_VAR 0 1
11209: PPUSH
11210: CALL_OW 266
11214: ADD
11215: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
11216: LD_ADDR_EXP 10
11220: PUSH
11221: LD_EXP 10
11225: PUSH
11226: LD_VAR 0 1
11230: PPUSH
11231: CALL_OW 250
11235: ADD
11236: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
11237: LD_ADDR_EXP 10
11241: PUSH
11242: LD_EXP 10
11246: PUSH
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 251
11256: ADD
11257: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
11258: LD_ADDR_EXP 10
11262: PUSH
11263: LD_EXP 10
11267: PUSH
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL_OW 254
11277: ADD
11278: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL_OW 255
11288: PUSH
11289: LD_INT 1
11291: EQUAL
11292: PUSH
11293: LD_VAR 0 1
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PPUSH
11308: CALL_OW 69
11312: IN
11313: AND
11314: IFFALSE 11400
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
11316: LD_ADDR_EXP 11
11320: PUSH
11321: LD_EXP 11
11325: PUSH
11326: LD_VAR 0 1
11330: PPUSH
11331: CALL_OW 265
11335: ADD
11336: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
11337: LD_ADDR_EXP 11
11341: PUSH
11342: LD_EXP 11
11346: PUSH
11347: LD_VAR 0 1
11351: PPUSH
11352: CALL_OW 262
11356: ADD
11357: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
11358: LD_ADDR_EXP 11
11362: PUSH
11363: LD_EXP 11
11367: PUSH
11368: LD_VAR 0 1
11372: PPUSH
11373: CALL_OW 263
11377: ADD
11378: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
11379: LD_ADDR_EXP 11
11383: PUSH
11384: LD_EXP 11
11388: PUSH
11389: LD_VAR 0 1
11393: PPUSH
11394: CALL_OW 264
11398: ADD
11399: ST_TO_ADDR
// end ; end ; end ;
11400: PPOPN 1
11402: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11403: LD_VAR 0 1
11407: PPUSH
11408: LD_VAR 0 2
11412: PPUSH
11413: CALL 27346 0 2
// end ;
11417: PPOPN 2
11419: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL 27330 0 1
// end ; end_of_file end_of_file
11429: PPOPN 1
11431: END
// export globalGameSaveCounter ; every 0 0$1 do
11432: GO 11434
11434: DISABLE
// begin enable ;
11435: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11436: LD_STRING updateTimer(
11438: PUSH
11439: LD_OWVAR 1
11443: STR
11444: PUSH
11445: LD_STRING );
11447: STR
11448: PPUSH
11449: CALL_OW 559
// end ;
11453: END
// every 0 0$1 do
11454: GO 11456
11456: DISABLE
// begin globalGameSaveCounter := 0 ;
11457: LD_ADDR_EXP 21
11461: PUSH
11462: LD_INT 0
11464: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11465: LD_STRING setGameSaveCounter(0)
11467: PPUSH
11468: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11472: LD_STRING initStreamRollete();
11474: PPUSH
11475: CALL_OW 559
// InitStreamMode ;
11479: CALL 12805 0 0
// DefineStreamItems ( false ) ;
11483: LD_INT 0
11485: PPUSH
11486: CALL 13269 0 1
// end ;
11490: END
// export function SOS_MapStart ( ) ; begin
11491: LD_INT 0
11493: PPUSH
// if streamModeActive then
11494: LD_EXP 22
11498: IFFALSE 11507
// DefineStreamItems ( true ) ;
11500: LD_INT 1
11502: PPUSH
11503: CALL 13269 0 1
// UpdateLuaVariables ( ) ;
11507: CALL 11524 0 0
// UpdateFactoryWaypoints ( ) ;
11511: CALL 26130 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11515: CALL 26387 0 0
// end ;
11519: LD_VAR 0 1
11523: RET
// function UpdateLuaVariables ( ) ; begin
11524: LD_INT 0
11526: PPUSH
// if globalGameSaveCounter then
11527: LD_EXP 21
11531: IFFALSE 11565
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11533: LD_ADDR_EXP 21
11537: PUSH
11538: LD_EXP 21
11542: PPUSH
11543: CALL 70344 0 1
11547: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11548: LD_STRING setGameSaveCounter(
11550: PUSH
11551: LD_EXP 21
11555: STR
11556: PUSH
11557: LD_STRING )
11559: STR
11560: PPUSH
11561: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11565: LD_STRING setGameDifficulty(
11567: PUSH
11568: LD_OWVAR 67
11572: STR
11573: PUSH
11574: LD_STRING )
11576: STR
11577: PPUSH
11578: CALL_OW 559
// end ;
11582: LD_VAR 0 1
11586: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11587: LD_INT 0
11589: PPUSH
// if p2 = stream_mode then
11590: LD_VAR 0 2
11594: PUSH
11595: LD_INT 100
11597: EQUAL
11598: IFFALSE 12601
// begin if not StreamModeActive then
11600: LD_EXP 22
11604: NOT
11605: IFFALSE 11615
// StreamModeActive := true ;
11607: LD_ADDR_EXP 22
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// if p3 = 0 then
11615: LD_VAR 0 3
11619: PUSH
11620: LD_INT 0
11622: EQUAL
11623: IFFALSE 11629
// InitStreamMode ;
11625: CALL 12805 0 0
// if p3 = 1 then
11629: LD_VAR 0 3
11633: PUSH
11634: LD_INT 1
11636: EQUAL
11637: IFFALSE 11647
// sRocket := true ;
11639: LD_ADDR_EXP 27
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// if p3 = 2 then
11647: LD_VAR 0 3
11651: PUSH
11652: LD_INT 2
11654: EQUAL
11655: IFFALSE 11665
// sSpeed := true ;
11657: LD_ADDR_EXP 26
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// if p3 = 3 then
11665: LD_VAR 0 3
11669: PUSH
11670: LD_INT 3
11672: EQUAL
11673: IFFALSE 11683
// sEngine := true ;
11675: LD_ADDR_EXP 28
11679: PUSH
11680: LD_INT 1
11682: ST_TO_ADDR
// if p3 = 4 then
11683: LD_VAR 0 3
11687: PUSH
11688: LD_INT 4
11690: EQUAL
11691: IFFALSE 11701
// sSpec := true ;
11693: LD_ADDR_EXP 25
11697: PUSH
11698: LD_INT 1
11700: ST_TO_ADDR
// if p3 = 5 then
11701: LD_VAR 0 3
11705: PUSH
11706: LD_INT 5
11708: EQUAL
11709: IFFALSE 11719
// sLevel := true ;
11711: LD_ADDR_EXP 29
11715: PUSH
11716: LD_INT 1
11718: ST_TO_ADDR
// if p3 = 6 then
11719: LD_VAR 0 3
11723: PUSH
11724: LD_INT 6
11726: EQUAL
11727: IFFALSE 11737
// sArmoury := true ;
11729: LD_ADDR_EXP 30
11733: PUSH
11734: LD_INT 1
11736: ST_TO_ADDR
// if p3 = 7 then
11737: LD_VAR 0 3
11741: PUSH
11742: LD_INT 7
11744: EQUAL
11745: IFFALSE 11755
// sRadar := true ;
11747: LD_ADDR_EXP 31
11751: PUSH
11752: LD_INT 1
11754: ST_TO_ADDR
// if p3 = 8 then
11755: LD_VAR 0 3
11759: PUSH
11760: LD_INT 8
11762: EQUAL
11763: IFFALSE 11773
// sBunker := true ;
11765: LD_ADDR_EXP 32
11769: PUSH
11770: LD_INT 1
11772: ST_TO_ADDR
// if p3 = 9 then
11773: LD_VAR 0 3
11777: PUSH
11778: LD_INT 9
11780: EQUAL
11781: IFFALSE 11791
// sHack := true ;
11783: LD_ADDR_EXP 33
11787: PUSH
11788: LD_INT 1
11790: ST_TO_ADDR
// if p3 = 10 then
11791: LD_VAR 0 3
11795: PUSH
11796: LD_INT 10
11798: EQUAL
11799: IFFALSE 11809
// sFire := true ;
11801: LD_ADDR_EXP 34
11805: PUSH
11806: LD_INT 1
11808: ST_TO_ADDR
// if p3 = 11 then
11809: LD_VAR 0 3
11813: PUSH
11814: LD_INT 11
11816: EQUAL
11817: IFFALSE 11827
// sRefresh := true ;
11819: LD_ADDR_EXP 35
11823: PUSH
11824: LD_INT 1
11826: ST_TO_ADDR
// if p3 = 12 then
11827: LD_VAR 0 3
11831: PUSH
11832: LD_INT 12
11834: EQUAL
11835: IFFALSE 11845
// sExp := true ;
11837: LD_ADDR_EXP 36
11841: PUSH
11842: LD_INT 1
11844: ST_TO_ADDR
// if p3 = 13 then
11845: LD_VAR 0 3
11849: PUSH
11850: LD_INT 13
11852: EQUAL
11853: IFFALSE 11863
// sDepot := true ;
11855: LD_ADDR_EXP 37
11859: PUSH
11860: LD_INT 1
11862: ST_TO_ADDR
// if p3 = 14 then
11863: LD_VAR 0 3
11867: PUSH
11868: LD_INT 14
11870: EQUAL
11871: IFFALSE 11881
// sFlag := true ;
11873: LD_ADDR_EXP 38
11877: PUSH
11878: LD_INT 1
11880: ST_TO_ADDR
// if p3 = 15 then
11881: LD_VAR 0 3
11885: PUSH
11886: LD_INT 15
11888: EQUAL
11889: IFFALSE 11899
// sKamikadze := true ;
11891: LD_ADDR_EXP 46
11895: PUSH
11896: LD_INT 1
11898: ST_TO_ADDR
// if p3 = 16 then
11899: LD_VAR 0 3
11903: PUSH
11904: LD_INT 16
11906: EQUAL
11907: IFFALSE 11917
// sTroll := true ;
11909: LD_ADDR_EXP 47
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// if p3 = 17 then
11917: LD_VAR 0 3
11921: PUSH
11922: LD_INT 17
11924: EQUAL
11925: IFFALSE 11935
// sSlow := true ;
11927: LD_ADDR_EXP 48
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// if p3 = 18 then
11935: LD_VAR 0 3
11939: PUSH
11940: LD_INT 18
11942: EQUAL
11943: IFFALSE 11953
// sLack := true ;
11945: LD_ADDR_EXP 49
11949: PUSH
11950: LD_INT 1
11952: ST_TO_ADDR
// if p3 = 19 then
11953: LD_VAR 0 3
11957: PUSH
11958: LD_INT 19
11960: EQUAL
11961: IFFALSE 11971
// sTank := true ;
11963: LD_ADDR_EXP 51
11967: PUSH
11968: LD_INT 1
11970: ST_TO_ADDR
// if p3 = 20 then
11971: LD_VAR 0 3
11975: PUSH
11976: LD_INT 20
11978: EQUAL
11979: IFFALSE 11989
// sRemote := true ;
11981: LD_ADDR_EXP 52
11985: PUSH
11986: LD_INT 1
11988: ST_TO_ADDR
// if p3 = 21 then
11989: LD_VAR 0 3
11993: PUSH
11994: LD_INT 21
11996: EQUAL
11997: IFFALSE 12007
// sPowell := true ;
11999: LD_ADDR_EXP 53
12003: PUSH
12004: LD_INT 1
12006: ST_TO_ADDR
// if p3 = 22 then
12007: LD_VAR 0 3
12011: PUSH
12012: LD_INT 22
12014: EQUAL
12015: IFFALSE 12025
// sTeleport := true ;
12017: LD_ADDR_EXP 56
12021: PUSH
12022: LD_INT 1
12024: ST_TO_ADDR
// if p3 = 23 then
12025: LD_VAR 0 3
12029: PUSH
12030: LD_INT 23
12032: EQUAL
12033: IFFALSE 12043
// sOilTower := true ;
12035: LD_ADDR_EXP 58
12039: PUSH
12040: LD_INT 1
12042: ST_TO_ADDR
// if p3 = 24 then
12043: LD_VAR 0 3
12047: PUSH
12048: LD_INT 24
12050: EQUAL
12051: IFFALSE 12061
// sShovel := true ;
12053: LD_ADDR_EXP 59
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// if p3 = 25 then
12061: LD_VAR 0 3
12065: PUSH
12066: LD_INT 25
12068: EQUAL
12069: IFFALSE 12079
// sSheik := true ;
12071: LD_ADDR_EXP 60
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// if p3 = 26 then
12079: LD_VAR 0 3
12083: PUSH
12084: LD_INT 26
12086: EQUAL
12087: IFFALSE 12097
// sEarthquake := true ;
12089: LD_ADDR_EXP 62
12093: PUSH
12094: LD_INT 1
12096: ST_TO_ADDR
// if p3 = 27 then
12097: LD_VAR 0 3
12101: PUSH
12102: LD_INT 27
12104: EQUAL
12105: IFFALSE 12115
// sAI := true ;
12107: LD_ADDR_EXP 63
12111: PUSH
12112: LD_INT 1
12114: ST_TO_ADDR
// if p3 = 28 then
12115: LD_VAR 0 3
12119: PUSH
12120: LD_INT 28
12122: EQUAL
12123: IFFALSE 12133
// sCargo := true ;
12125: LD_ADDR_EXP 66
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
// if p3 = 29 then
12133: LD_VAR 0 3
12137: PUSH
12138: LD_INT 29
12140: EQUAL
12141: IFFALSE 12151
// sDLaser := true ;
12143: LD_ADDR_EXP 67
12147: PUSH
12148: LD_INT 1
12150: ST_TO_ADDR
// if p3 = 30 then
12151: LD_VAR 0 3
12155: PUSH
12156: LD_INT 30
12158: EQUAL
12159: IFFALSE 12169
// sExchange := true ;
12161: LD_ADDR_EXP 68
12165: PUSH
12166: LD_INT 1
12168: ST_TO_ADDR
// if p3 = 31 then
12169: LD_VAR 0 3
12173: PUSH
12174: LD_INT 31
12176: EQUAL
12177: IFFALSE 12187
// sFac := true ;
12179: LD_ADDR_EXP 69
12183: PUSH
12184: LD_INT 1
12186: ST_TO_ADDR
// if p3 = 32 then
12187: LD_VAR 0 3
12191: PUSH
12192: LD_INT 32
12194: EQUAL
12195: IFFALSE 12205
// sPower := true ;
12197: LD_ADDR_EXP 70
12201: PUSH
12202: LD_INT 1
12204: ST_TO_ADDR
// if p3 = 33 then
12205: LD_VAR 0 3
12209: PUSH
12210: LD_INT 33
12212: EQUAL
12213: IFFALSE 12223
// sRandom := true ;
12215: LD_ADDR_EXP 71
12219: PUSH
12220: LD_INT 1
12222: ST_TO_ADDR
// if p3 = 34 then
12223: LD_VAR 0 3
12227: PUSH
12228: LD_INT 34
12230: EQUAL
12231: IFFALSE 12241
// sShield := true ;
12233: LD_ADDR_EXP 72
12237: PUSH
12238: LD_INT 1
12240: ST_TO_ADDR
// if p3 = 35 then
12241: LD_VAR 0 3
12245: PUSH
12246: LD_INT 35
12248: EQUAL
12249: IFFALSE 12259
// sTime := true ;
12251: LD_ADDR_EXP 73
12255: PUSH
12256: LD_INT 1
12258: ST_TO_ADDR
// if p3 = 36 then
12259: LD_VAR 0 3
12263: PUSH
12264: LD_INT 36
12266: EQUAL
12267: IFFALSE 12277
// sTools := true ;
12269: LD_ADDR_EXP 74
12273: PUSH
12274: LD_INT 1
12276: ST_TO_ADDR
// if p3 = 101 then
12277: LD_VAR 0 3
12281: PUSH
12282: LD_INT 101
12284: EQUAL
12285: IFFALSE 12295
// sSold := true ;
12287: LD_ADDR_EXP 39
12291: PUSH
12292: LD_INT 1
12294: ST_TO_ADDR
// if p3 = 102 then
12295: LD_VAR 0 3
12299: PUSH
12300: LD_INT 102
12302: EQUAL
12303: IFFALSE 12313
// sDiff := true ;
12305: LD_ADDR_EXP 40
12309: PUSH
12310: LD_INT 1
12312: ST_TO_ADDR
// if p3 = 103 then
12313: LD_VAR 0 3
12317: PUSH
12318: LD_INT 103
12320: EQUAL
12321: IFFALSE 12331
// sFog := true ;
12323: LD_ADDR_EXP 43
12327: PUSH
12328: LD_INT 1
12330: ST_TO_ADDR
// if p3 = 104 then
12331: LD_VAR 0 3
12335: PUSH
12336: LD_INT 104
12338: EQUAL
12339: IFFALSE 12349
// sReset := true ;
12341: LD_ADDR_EXP 44
12345: PUSH
12346: LD_INT 1
12348: ST_TO_ADDR
// if p3 = 105 then
12349: LD_VAR 0 3
12353: PUSH
12354: LD_INT 105
12356: EQUAL
12357: IFFALSE 12367
// sSun := true ;
12359: LD_ADDR_EXP 45
12363: PUSH
12364: LD_INT 1
12366: ST_TO_ADDR
// if p3 = 106 then
12367: LD_VAR 0 3
12371: PUSH
12372: LD_INT 106
12374: EQUAL
12375: IFFALSE 12385
// sTiger := true ;
12377: LD_ADDR_EXP 41
12381: PUSH
12382: LD_INT 1
12384: ST_TO_ADDR
// if p3 = 107 then
12385: LD_VAR 0 3
12389: PUSH
12390: LD_INT 107
12392: EQUAL
12393: IFFALSE 12403
// sBomb := true ;
12395: LD_ADDR_EXP 42
12399: PUSH
12400: LD_INT 1
12402: ST_TO_ADDR
// if p3 = 108 then
12403: LD_VAR 0 3
12407: PUSH
12408: LD_INT 108
12410: EQUAL
12411: IFFALSE 12421
// sWound := true ;
12413: LD_ADDR_EXP 50
12417: PUSH
12418: LD_INT 1
12420: ST_TO_ADDR
// if p3 = 109 then
12421: LD_VAR 0 3
12425: PUSH
12426: LD_INT 109
12428: EQUAL
12429: IFFALSE 12439
// sBetray := true ;
12431: LD_ADDR_EXP 54
12435: PUSH
12436: LD_INT 1
12438: ST_TO_ADDR
// if p3 = 110 then
12439: LD_VAR 0 3
12443: PUSH
12444: LD_INT 110
12446: EQUAL
12447: IFFALSE 12457
// sContamin := true ;
12449: LD_ADDR_EXP 55
12453: PUSH
12454: LD_INT 1
12456: ST_TO_ADDR
// if p3 = 111 then
12457: LD_VAR 0 3
12461: PUSH
12462: LD_INT 111
12464: EQUAL
12465: IFFALSE 12475
// sOil := true ;
12467: LD_ADDR_EXP 57
12471: PUSH
12472: LD_INT 1
12474: ST_TO_ADDR
// if p3 = 112 then
12475: LD_VAR 0 3
12479: PUSH
12480: LD_INT 112
12482: EQUAL
12483: IFFALSE 12493
// sStu := true ;
12485: LD_ADDR_EXP 61
12489: PUSH
12490: LD_INT 1
12492: ST_TO_ADDR
// if p3 = 113 then
12493: LD_VAR 0 3
12497: PUSH
12498: LD_INT 113
12500: EQUAL
12501: IFFALSE 12511
// sBazooka := true ;
12503: LD_ADDR_EXP 64
12507: PUSH
12508: LD_INT 1
12510: ST_TO_ADDR
// if p3 = 114 then
12511: LD_VAR 0 3
12515: PUSH
12516: LD_INT 114
12518: EQUAL
12519: IFFALSE 12529
// sMortar := true ;
12521: LD_ADDR_EXP 65
12525: PUSH
12526: LD_INT 1
12528: ST_TO_ADDR
// if p3 = 115 then
12529: LD_VAR 0 3
12533: PUSH
12534: LD_INT 115
12536: EQUAL
12537: IFFALSE 12547
// sRanger := true ;
12539: LD_ADDR_EXP 75
12543: PUSH
12544: LD_INT 1
12546: ST_TO_ADDR
// if p3 = 116 then
12547: LD_VAR 0 3
12551: PUSH
12552: LD_INT 116
12554: EQUAL
12555: IFFALSE 12565
// sComputer := true ;
12557: LD_ADDR_EXP 76
12561: PUSH
12562: LD_INT 1
12564: ST_TO_ADDR
// if p3 = 117 then
12565: LD_VAR 0 3
12569: PUSH
12570: LD_INT 117
12572: EQUAL
12573: IFFALSE 12583
// s30 := true ;
12575: LD_ADDR_EXP 77
12579: PUSH
12580: LD_INT 1
12582: ST_TO_ADDR
// if p3 = 118 then
12583: LD_VAR 0 3
12587: PUSH
12588: LD_INT 118
12590: EQUAL
12591: IFFALSE 12601
// s60 := true ;
12593: LD_ADDR_EXP 78
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// end ; if p2 = hack_mode then
12601: LD_VAR 0 2
12605: PUSH
12606: LD_INT 101
12608: EQUAL
12609: IFFALSE 12737
// begin case p3 of 1 :
12611: LD_VAR 0 3
12615: PUSH
12616: LD_INT 1
12618: DOUBLE
12619: EQUAL
12620: IFTRUE 12624
12622: GO 12631
12624: POP
// hHackUnlimitedResources ; 2 :
12625: CALL 24876 0 0
12629: GO 12737
12631: LD_INT 2
12633: DOUBLE
12634: EQUAL
12635: IFTRUE 12639
12637: GO 12646
12639: POP
// hHackSetLevel10 ; 3 :
12640: CALL 25009 0 0
12644: GO 12737
12646: LD_INT 3
12648: DOUBLE
12649: EQUAL
12650: IFTRUE 12654
12652: GO 12661
12654: POP
// hHackSetLevel10YourUnits ; 4 :
12655: CALL 25094 0 0
12659: GO 12737
12661: LD_INT 4
12663: DOUBLE
12664: EQUAL
12665: IFTRUE 12669
12667: GO 12676
12669: POP
// hHackInvincible ; 5 :
12670: CALL 25542 0 0
12674: GO 12737
12676: LD_INT 5
12678: DOUBLE
12679: EQUAL
12680: IFTRUE 12684
12682: GO 12691
12684: POP
// hHackInvisible ; 6 :
12685: CALL 25653 0 0
12689: GO 12737
12691: LD_INT 6
12693: DOUBLE
12694: EQUAL
12695: IFTRUE 12699
12697: GO 12706
12699: POP
// hHackChangeYourSide ; 7 :
12700: CALL 25710 0 0
12704: GO 12737
12706: LD_INT 7
12708: DOUBLE
12709: EQUAL
12710: IFTRUE 12714
12712: GO 12721
12714: POP
// hHackChangeUnitSide ; 8 :
12715: CALL 25752 0 0
12719: GO 12737
12721: LD_INT 8
12723: DOUBLE
12724: EQUAL
12725: IFTRUE 12729
12727: GO 12736
12729: POP
// hHackFog ; end ;
12730: CALL 25853 0 0
12734: GO 12737
12736: POP
// end ; if p2 = game_save_mode then
12737: LD_VAR 0 2
12741: PUSH
12742: LD_INT 102
12744: EQUAL
12745: IFFALSE 12800
// begin if p3 = 1 then
12747: LD_VAR 0 3
12751: PUSH
12752: LD_INT 1
12754: EQUAL
12755: IFFALSE 12767
// globalGameSaveCounter := p4 ;
12757: LD_ADDR_EXP 21
12761: PUSH
12762: LD_VAR 0 4
12766: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12767: LD_VAR 0 3
12771: PUSH
12772: LD_INT 2
12774: EQUAL
12775: PUSH
12776: LD_EXP 21
12780: AND
12781: IFFALSE 12800
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12783: LD_STRING setGameSaveCounter(
12785: PUSH
12786: LD_EXP 21
12790: STR
12791: PUSH
12792: LD_STRING )
12794: STR
12795: PPUSH
12796: CALL_OW 559
// end ; end ;
12800: LD_VAR 0 7
12804: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12805: LD_INT 0
12807: PPUSH
// streamModeActive := false ;
12808: LD_ADDR_EXP 22
12812: PUSH
12813: LD_INT 0
12815: ST_TO_ADDR
// normalCounter := 36 ;
12816: LD_ADDR_EXP 23
12820: PUSH
12821: LD_INT 36
12823: ST_TO_ADDR
// hardcoreCounter := 18 ;
12824: LD_ADDR_EXP 24
12828: PUSH
12829: LD_INT 18
12831: ST_TO_ADDR
// sRocket := false ;
12832: LD_ADDR_EXP 27
12836: PUSH
12837: LD_INT 0
12839: ST_TO_ADDR
// sSpeed := false ;
12840: LD_ADDR_EXP 26
12844: PUSH
12845: LD_INT 0
12847: ST_TO_ADDR
// sEngine := false ;
12848: LD_ADDR_EXP 28
12852: PUSH
12853: LD_INT 0
12855: ST_TO_ADDR
// sSpec := false ;
12856: LD_ADDR_EXP 25
12860: PUSH
12861: LD_INT 0
12863: ST_TO_ADDR
// sLevel := false ;
12864: LD_ADDR_EXP 29
12868: PUSH
12869: LD_INT 0
12871: ST_TO_ADDR
// sArmoury := false ;
12872: LD_ADDR_EXP 30
12876: PUSH
12877: LD_INT 0
12879: ST_TO_ADDR
// sRadar := false ;
12880: LD_ADDR_EXP 31
12884: PUSH
12885: LD_INT 0
12887: ST_TO_ADDR
// sBunker := false ;
12888: LD_ADDR_EXP 32
12892: PUSH
12893: LD_INT 0
12895: ST_TO_ADDR
// sHack := false ;
12896: LD_ADDR_EXP 33
12900: PUSH
12901: LD_INT 0
12903: ST_TO_ADDR
// sFire := false ;
12904: LD_ADDR_EXP 34
12908: PUSH
12909: LD_INT 0
12911: ST_TO_ADDR
// sRefresh := false ;
12912: LD_ADDR_EXP 35
12916: PUSH
12917: LD_INT 0
12919: ST_TO_ADDR
// sExp := false ;
12920: LD_ADDR_EXP 36
12924: PUSH
12925: LD_INT 0
12927: ST_TO_ADDR
// sDepot := false ;
12928: LD_ADDR_EXP 37
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// sFlag := false ;
12936: LD_ADDR_EXP 38
12940: PUSH
12941: LD_INT 0
12943: ST_TO_ADDR
// sKamikadze := false ;
12944: LD_ADDR_EXP 46
12948: PUSH
12949: LD_INT 0
12951: ST_TO_ADDR
// sTroll := false ;
12952: LD_ADDR_EXP 47
12956: PUSH
12957: LD_INT 0
12959: ST_TO_ADDR
// sSlow := false ;
12960: LD_ADDR_EXP 48
12964: PUSH
12965: LD_INT 0
12967: ST_TO_ADDR
// sLack := false ;
12968: LD_ADDR_EXP 49
12972: PUSH
12973: LD_INT 0
12975: ST_TO_ADDR
// sTank := false ;
12976: LD_ADDR_EXP 51
12980: PUSH
12981: LD_INT 0
12983: ST_TO_ADDR
// sRemote := false ;
12984: LD_ADDR_EXP 52
12988: PUSH
12989: LD_INT 0
12991: ST_TO_ADDR
// sPowell := false ;
12992: LD_ADDR_EXP 53
12996: PUSH
12997: LD_INT 0
12999: ST_TO_ADDR
// sTeleport := false ;
13000: LD_ADDR_EXP 56
13004: PUSH
13005: LD_INT 0
13007: ST_TO_ADDR
// sOilTower := false ;
13008: LD_ADDR_EXP 58
13012: PUSH
13013: LD_INT 0
13015: ST_TO_ADDR
// sShovel := false ;
13016: LD_ADDR_EXP 59
13020: PUSH
13021: LD_INT 0
13023: ST_TO_ADDR
// sSheik := false ;
13024: LD_ADDR_EXP 60
13028: PUSH
13029: LD_INT 0
13031: ST_TO_ADDR
// sEarthquake := false ;
13032: LD_ADDR_EXP 62
13036: PUSH
13037: LD_INT 0
13039: ST_TO_ADDR
// sAI := false ;
13040: LD_ADDR_EXP 63
13044: PUSH
13045: LD_INT 0
13047: ST_TO_ADDR
// sCargo := false ;
13048: LD_ADDR_EXP 66
13052: PUSH
13053: LD_INT 0
13055: ST_TO_ADDR
// sDLaser := false ;
13056: LD_ADDR_EXP 67
13060: PUSH
13061: LD_INT 0
13063: ST_TO_ADDR
// sExchange := false ;
13064: LD_ADDR_EXP 68
13068: PUSH
13069: LD_INT 0
13071: ST_TO_ADDR
// sFac := false ;
13072: LD_ADDR_EXP 69
13076: PUSH
13077: LD_INT 0
13079: ST_TO_ADDR
// sPower := false ;
13080: LD_ADDR_EXP 70
13084: PUSH
13085: LD_INT 0
13087: ST_TO_ADDR
// sRandom := false ;
13088: LD_ADDR_EXP 71
13092: PUSH
13093: LD_INT 0
13095: ST_TO_ADDR
// sShield := false ;
13096: LD_ADDR_EXP 72
13100: PUSH
13101: LD_INT 0
13103: ST_TO_ADDR
// sTime := false ;
13104: LD_ADDR_EXP 73
13108: PUSH
13109: LD_INT 0
13111: ST_TO_ADDR
// sTools := false ;
13112: LD_ADDR_EXP 74
13116: PUSH
13117: LD_INT 0
13119: ST_TO_ADDR
// sSold := false ;
13120: LD_ADDR_EXP 39
13124: PUSH
13125: LD_INT 0
13127: ST_TO_ADDR
// sDiff := false ;
13128: LD_ADDR_EXP 40
13132: PUSH
13133: LD_INT 0
13135: ST_TO_ADDR
// sFog := false ;
13136: LD_ADDR_EXP 43
13140: PUSH
13141: LD_INT 0
13143: ST_TO_ADDR
// sReset := false ;
13144: LD_ADDR_EXP 44
13148: PUSH
13149: LD_INT 0
13151: ST_TO_ADDR
// sSun := false ;
13152: LD_ADDR_EXP 45
13156: PUSH
13157: LD_INT 0
13159: ST_TO_ADDR
// sTiger := false ;
13160: LD_ADDR_EXP 41
13164: PUSH
13165: LD_INT 0
13167: ST_TO_ADDR
// sBomb := false ;
13168: LD_ADDR_EXP 42
13172: PUSH
13173: LD_INT 0
13175: ST_TO_ADDR
// sWound := false ;
13176: LD_ADDR_EXP 50
13180: PUSH
13181: LD_INT 0
13183: ST_TO_ADDR
// sBetray := false ;
13184: LD_ADDR_EXP 54
13188: PUSH
13189: LD_INT 0
13191: ST_TO_ADDR
// sContamin := false ;
13192: LD_ADDR_EXP 55
13196: PUSH
13197: LD_INT 0
13199: ST_TO_ADDR
// sOil := false ;
13200: LD_ADDR_EXP 57
13204: PUSH
13205: LD_INT 0
13207: ST_TO_ADDR
// sStu := false ;
13208: LD_ADDR_EXP 61
13212: PUSH
13213: LD_INT 0
13215: ST_TO_ADDR
// sBazooka := false ;
13216: LD_ADDR_EXP 64
13220: PUSH
13221: LD_INT 0
13223: ST_TO_ADDR
// sMortar := false ;
13224: LD_ADDR_EXP 65
13228: PUSH
13229: LD_INT 0
13231: ST_TO_ADDR
// sRanger := false ;
13232: LD_ADDR_EXP 75
13236: PUSH
13237: LD_INT 0
13239: ST_TO_ADDR
// sComputer := false ;
13240: LD_ADDR_EXP 76
13244: PUSH
13245: LD_INT 0
13247: ST_TO_ADDR
// s30 := false ;
13248: LD_ADDR_EXP 77
13252: PUSH
13253: LD_INT 0
13255: ST_TO_ADDR
// s60 := false ;
13256: LD_ADDR_EXP 78
13260: PUSH
13261: LD_INT 0
13263: ST_TO_ADDR
// end ;
13264: LD_VAR 0 1
13268: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13269: LD_INT 0
13271: PPUSH
13272: PPUSH
13273: PPUSH
13274: PPUSH
13275: PPUSH
13276: PPUSH
13277: PPUSH
// result := [ ] ;
13278: LD_ADDR_VAR 0 2
13282: PUSH
13283: EMPTY
13284: ST_TO_ADDR
// if campaign_id = 1 then
13285: LD_OWVAR 69
13289: PUSH
13290: LD_INT 1
13292: EQUAL
13293: IFFALSE 16459
// begin case mission_number of 1 :
13295: LD_OWVAR 70
13299: PUSH
13300: LD_INT 1
13302: DOUBLE
13303: EQUAL
13304: IFTRUE 13308
13306: GO 13384
13308: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13309: LD_ADDR_VAR 0 2
13313: PUSH
13314: LD_INT 2
13316: PUSH
13317: LD_INT 4
13319: PUSH
13320: LD_INT 11
13322: PUSH
13323: LD_INT 12
13325: PUSH
13326: LD_INT 15
13328: PUSH
13329: LD_INT 16
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 23
13337: PUSH
13338: LD_INT 26
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 101
13354: PUSH
13355: LD_INT 102
13357: PUSH
13358: LD_INT 106
13360: PUSH
13361: LD_INT 116
13363: PUSH
13364: LD_INT 117
13366: PUSH
13367: LD_INT 118
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: ST_TO_ADDR
13382: GO 16457
13384: LD_INT 2
13386: DOUBLE
13387: EQUAL
13388: IFTRUE 13392
13390: GO 13476
13392: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13393: LD_ADDR_VAR 0 2
13397: PUSH
13398: LD_INT 2
13400: PUSH
13401: LD_INT 4
13403: PUSH
13404: LD_INT 11
13406: PUSH
13407: LD_INT 12
13409: PUSH
13410: LD_INT 15
13412: PUSH
13413: LD_INT 16
13415: PUSH
13416: LD_INT 22
13418: PUSH
13419: LD_INT 23
13421: PUSH
13422: LD_INT 26
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PUSH
13436: LD_INT 101
13438: PUSH
13439: LD_INT 102
13441: PUSH
13442: LD_INT 105
13444: PUSH
13445: LD_INT 106
13447: PUSH
13448: LD_INT 108
13450: PUSH
13451: LD_INT 116
13453: PUSH
13454: LD_INT 117
13456: PUSH
13457: LD_INT 118
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: ST_TO_ADDR
13474: GO 16457
13476: LD_INT 3
13478: DOUBLE
13479: EQUAL
13480: IFTRUE 13484
13482: GO 13572
13484: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13485: LD_ADDR_VAR 0 2
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: LD_INT 4
13495: PUSH
13496: LD_INT 5
13498: PUSH
13499: LD_INT 11
13501: PUSH
13502: LD_INT 12
13504: PUSH
13505: LD_INT 15
13507: PUSH
13508: LD_INT 16
13510: PUSH
13511: LD_INT 22
13513: PUSH
13514: LD_INT 26
13516: PUSH
13517: LD_INT 36
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 101
13534: PUSH
13535: LD_INT 102
13537: PUSH
13538: LD_INT 105
13540: PUSH
13541: LD_INT 106
13543: PUSH
13544: LD_INT 108
13546: PUSH
13547: LD_INT 116
13549: PUSH
13550: LD_INT 117
13552: PUSH
13553: LD_INT 118
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: ST_TO_ADDR
13570: GO 16457
13572: LD_INT 4
13574: DOUBLE
13575: EQUAL
13576: IFTRUE 13580
13578: GO 13676
13580: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13581: LD_ADDR_VAR 0 2
13585: PUSH
13586: LD_INT 2
13588: PUSH
13589: LD_INT 4
13591: PUSH
13592: LD_INT 5
13594: PUSH
13595: LD_INT 8
13597: PUSH
13598: LD_INT 11
13600: PUSH
13601: LD_INT 12
13603: PUSH
13604: LD_INT 15
13606: PUSH
13607: LD_INT 16
13609: PUSH
13610: LD_INT 22
13612: PUSH
13613: LD_INT 23
13615: PUSH
13616: LD_INT 26
13618: PUSH
13619: LD_INT 36
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 101
13638: PUSH
13639: LD_INT 102
13641: PUSH
13642: LD_INT 105
13644: PUSH
13645: LD_INT 106
13647: PUSH
13648: LD_INT 108
13650: PUSH
13651: LD_INT 116
13653: PUSH
13654: LD_INT 117
13656: PUSH
13657: LD_INT 118
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: ST_TO_ADDR
13674: GO 16457
13676: LD_INT 5
13678: DOUBLE
13679: EQUAL
13680: IFTRUE 13684
13682: GO 13796
13684: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13685: LD_ADDR_VAR 0 2
13689: PUSH
13690: LD_INT 2
13692: PUSH
13693: LD_INT 4
13695: PUSH
13696: LD_INT 5
13698: PUSH
13699: LD_INT 6
13701: PUSH
13702: LD_INT 8
13704: PUSH
13705: LD_INT 11
13707: PUSH
13708: LD_INT 12
13710: PUSH
13711: LD_INT 15
13713: PUSH
13714: LD_INT 16
13716: PUSH
13717: LD_INT 22
13719: PUSH
13720: LD_INT 23
13722: PUSH
13723: LD_INT 25
13725: PUSH
13726: LD_INT 26
13728: PUSH
13729: LD_INT 36
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 101
13750: PUSH
13751: LD_INT 102
13753: PUSH
13754: LD_INT 105
13756: PUSH
13757: LD_INT 106
13759: PUSH
13760: LD_INT 108
13762: PUSH
13763: LD_INT 109
13765: PUSH
13766: LD_INT 112
13768: PUSH
13769: LD_INT 116
13771: PUSH
13772: LD_INT 117
13774: PUSH
13775: LD_INT 118
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: ST_TO_ADDR
13794: GO 16457
13796: LD_INT 6
13798: DOUBLE
13799: EQUAL
13800: IFTRUE 13804
13802: GO 13936
13804: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13805: LD_ADDR_VAR 0 2
13809: PUSH
13810: LD_INT 2
13812: PUSH
13813: LD_INT 4
13815: PUSH
13816: LD_INT 5
13818: PUSH
13819: LD_INT 6
13821: PUSH
13822: LD_INT 8
13824: PUSH
13825: LD_INT 11
13827: PUSH
13828: LD_INT 12
13830: PUSH
13831: LD_INT 15
13833: PUSH
13834: LD_INT 16
13836: PUSH
13837: LD_INT 20
13839: PUSH
13840: LD_INT 21
13842: PUSH
13843: LD_INT 22
13845: PUSH
13846: LD_INT 23
13848: PUSH
13849: LD_INT 25
13851: PUSH
13852: LD_INT 26
13854: PUSH
13855: LD_INT 30
13857: PUSH
13858: LD_INT 31
13860: PUSH
13861: LD_INT 32
13863: PUSH
13864: LD_INT 36
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 101
13890: PUSH
13891: LD_INT 102
13893: PUSH
13894: LD_INT 105
13896: PUSH
13897: LD_INT 106
13899: PUSH
13900: LD_INT 108
13902: PUSH
13903: LD_INT 109
13905: PUSH
13906: LD_INT 112
13908: PUSH
13909: LD_INT 116
13911: PUSH
13912: LD_INT 117
13914: PUSH
13915: LD_INT 118
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: ST_TO_ADDR
13934: GO 16457
13936: LD_INT 7
13938: DOUBLE
13939: EQUAL
13940: IFTRUE 13944
13942: GO 14056
13944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13945: LD_ADDR_VAR 0 2
13949: PUSH
13950: LD_INT 2
13952: PUSH
13953: LD_INT 4
13955: PUSH
13956: LD_INT 5
13958: PUSH
13959: LD_INT 7
13961: PUSH
13962: LD_INT 11
13964: PUSH
13965: LD_INT 12
13967: PUSH
13968: LD_INT 15
13970: PUSH
13971: LD_INT 16
13973: PUSH
13974: LD_INT 20
13976: PUSH
13977: LD_INT 21
13979: PUSH
13980: LD_INT 22
13982: PUSH
13983: LD_INT 23
13985: PUSH
13986: LD_INT 25
13988: PUSH
13989: LD_INT 26
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 101
14010: PUSH
14011: LD_INT 102
14013: PUSH
14014: LD_INT 103
14016: PUSH
14017: LD_INT 105
14019: PUSH
14020: LD_INT 106
14022: PUSH
14023: LD_INT 108
14025: PUSH
14026: LD_INT 112
14028: PUSH
14029: LD_INT 116
14031: PUSH
14032: LD_INT 117
14034: PUSH
14035: LD_INT 118
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: ST_TO_ADDR
14054: GO 16457
14056: LD_INT 8
14058: DOUBLE
14059: EQUAL
14060: IFTRUE 14064
14062: GO 14204
14064: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14065: LD_ADDR_VAR 0 2
14069: PUSH
14070: LD_INT 2
14072: PUSH
14073: LD_INT 4
14075: PUSH
14076: LD_INT 5
14078: PUSH
14079: LD_INT 6
14081: PUSH
14082: LD_INT 7
14084: PUSH
14085: LD_INT 8
14087: PUSH
14088: LD_INT 11
14090: PUSH
14091: LD_INT 12
14093: PUSH
14094: LD_INT 15
14096: PUSH
14097: LD_INT 16
14099: PUSH
14100: LD_INT 20
14102: PUSH
14103: LD_INT 21
14105: PUSH
14106: LD_INT 22
14108: PUSH
14109: LD_INT 23
14111: PUSH
14112: LD_INT 25
14114: PUSH
14115: LD_INT 26
14117: PUSH
14118: LD_INT 30
14120: PUSH
14121: LD_INT 31
14123: PUSH
14124: LD_INT 32
14126: PUSH
14127: LD_INT 36
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 101
14154: PUSH
14155: LD_INT 102
14157: PUSH
14158: LD_INT 103
14160: PUSH
14161: LD_INT 105
14163: PUSH
14164: LD_INT 106
14166: PUSH
14167: LD_INT 108
14169: PUSH
14170: LD_INT 109
14172: PUSH
14173: LD_INT 112
14175: PUSH
14176: LD_INT 116
14178: PUSH
14179: LD_INT 117
14181: PUSH
14182: LD_INT 118
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: ST_TO_ADDR
14202: GO 16457
14204: LD_INT 9
14206: DOUBLE
14207: EQUAL
14208: IFTRUE 14212
14210: GO 14360
14212: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: LD_INT 2
14220: PUSH
14221: LD_INT 4
14223: PUSH
14224: LD_INT 5
14226: PUSH
14227: LD_INT 6
14229: PUSH
14230: LD_INT 7
14232: PUSH
14233: LD_INT 8
14235: PUSH
14236: LD_INT 11
14238: PUSH
14239: LD_INT 12
14241: PUSH
14242: LD_INT 15
14244: PUSH
14245: LD_INT 16
14247: PUSH
14248: LD_INT 20
14250: PUSH
14251: LD_INT 21
14253: PUSH
14254: LD_INT 22
14256: PUSH
14257: LD_INT 23
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 26
14265: PUSH
14266: LD_INT 28
14268: PUSH
14269: LD_INT 30
14271: PUSH
14272: LD_INT 31
14274: PUSH
14275: LD_INT 32
14277: PUSH
14278: LD_INT 36
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: PUSH
14304: LD_INT 101
14306: PUSH
14307: LD_INT 102
14309: PUSH
14310: LD_INT 103
14312: PUSH
14313: LD_INT 105
14315: PUSH
14316: LD_INT 106
14318: PUSH
14319: LD_INT 108
14321: PUSH
14322: LD_INT 109
14324: PUSH
14325: LD_INT 112
14327: PUSH
14328: LD_INT 114
14330: PUSH
14331: LD_INT 116
14333: PUSH
14334: LD_INT 117
14336: PUSH
14337: LD_INT 118
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: ST_TO_ADDR
14358: GO 16457
14360: LD_INT 10
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14368
14366: GO 14564
14368: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14369: LD_ADDR_VAR 0 2
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: LD_INT 4
14379: PUSH
14380: LD_INT 5
14382: PUSH
14383: LD_INT 6
14385: PUSH
14386: LD_INT 7
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: LD_INT 9
14394: PUSH
14395: LD_INT 10
14397: PUSH
14398: LD_INT 11
14400: PUSH
14401: LD_INT 12
14403: PUSH
14404: LD_INT 13
14406: PUSH
14407: LD_INT 14
14409: PUSH
14410: LD_INT 15
14412: PUSH
14413: LD_INT 16
14415: PUSH
14416: LD_INT 17
14418: PUSH
14419: LD_INT 18
14421: PUSH
14422: LD_INT 19
14424: PUSH
14425: LD_INT 20
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 22
14433: PUSH
14434: LD_INT 23
14436: PUSH
14437: LD_INT 24
14439: PUSH
14440: LD_INT 25
14442: PUSH
14443: LD_INT 26
14445: PUSH
14446: LD_INT 28
14448: PUSH
14449: LD_INT 30
14451: PUSH
14452: LD_INT 31
14454: PUSH
14455: LD_INT 32
14457: PUSH
14458: LD_INT 36
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: LD_INT 101
14494: PUSH
14495: LD_INT 102
14497: PUSH
14498: LD_INT 103
14500: PUSH
14501: LD_INT 104
14503: PUSH
14504: LD_INT 105
14506: PUSH
14507: LD_INT 106
14509: PUSH
14510: LD_INT 107
14512: PUSH
14513: LD_INT 108
14515: PUSH
14516: LD_INT 109
14518: PUSH
14519: LD_INT 110
14521: PUSH
14522: LD_INT 111
14524: PUSH
14525: LD_INT 112
14527: PUSH
14528: LD_INT 114
14530: PUSH
14531: LD_INT 116
14533: PUSH
14534: LD_INT 117
14536: PUSH
14537: LD_INT 118
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: ST_TO_ADDR
14562: GO 16457
14564: LD_INT 11
14566: DOUBLE
14567: EQUAL
14568: IFTRUE 14572
14570: GO 14776
14572: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14573: LD_ADDR_VAR 0 2
14577: PUSH
14578: LD_INT 2
14580: PUSH
14581: LD_INT 3
14583: PUSH
14584: LD_INT 4
14586: PUSH
14587: LD_INT 5
14589: PUSH
14590: LD_INT 6
14592: PUSH
14593: LD_INT 7
14595: PUSH
14596: LD_INT 8
14598: PUSH
14599: LD_INT 9
14601: PUSH
14602: LD_INT 10
14604: PUSH
14605: LD_INT 11
14607: PUSH
14608: LD_INT 12
14610: PUSH
14611: LD_INT 13
14613: PUSH
14614: LD_INT 14
14616: PUSH
14617: LD_INT 15
14619: PUSH
14620: LD_INT 16
14622: PUSH
14623: LD_INT 17
14625: PUSH
14626: LD_INT 18
14628: PUSH
14629: LD_INT 19
14631: PUSH
14632: LD_INT 20
14634: PUSH
14635: LD_INT 21
14637: PUSH
14638: LD_INT 22
14640: PUSH
14641: LD_INT 23
14643: PUSH
14644: LD_INT 24
14646: PUSH
14647: LD_INT 25
14649: PUSH
14650: LD_INT 26
14652: PUSH
14653: LD_INT 28
14655: PUSH
14656: LD_INT 30
14658: PUSH
14659: LD_INT 31
14661: PUSH
14662: LD_INT 32
14664: PUSH
14665: LD_INT 34
14667: PUSH
14668: LD_INT 36
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 101
14706: PUSH
14707: LD_INT 102
14709: PUSH
14710: LD_INT 103
14712: PUSH
14713: LD_INT 104
14715: PUSH
14716: LD_INT 105
14718: PUSH
14719: LD_INT 106
14721: PUSH
14722: LD_INT 107
14724: PUSH
14725: LD_INT 108
14727: PUSH
14728: LD_INT 109
14730: PUSH
14731: LD_INT 110
14733: PUSH
14734: LD_INT 111
14736: PUSH
14737: LD_INT 112
14739: PUSH
14740: LD_INT 114
14742: PUSH
14743: LD_INT 116
14745: PUSH
14746: LD_INT 117
14748: PUSH
14749: LD_INT 118
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: ST_TO_ADDR
14774: GO 16457
14776: LD_INT 12
14778: DOUBLE
14779: EQUAL
14780: IFTRUE 14784
14782: GO 15004
14784: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14785: LD_ADDR_VAR 0 2
14789: PUSH
14790: LD_INT 1
14792: PUSH
14793: LD_INT 2
14795: PUSH
14796: LD_INT 3
14798: PUSH
14799: LD_INT 4
14801: PUSH
14802: LD_INT 5
14804: PUSH
14805: LD_INT 6
14807: PUSH
14808: LD_INT 7
14810: PUSH
14811: LD_INT 8
14813: PUSH
14814: LD_INT 9
14816: PUSH
14817: LD_INT 10
14819: PUSH
14820: LD_INT 11
14822: PUSH
14823: LD_INT 12
14825: PUSH
14826: LD_INT 13
14828: PUSH
14829: LD_INT 14
14831: PUSH
14832: LD_INT 15
14834: PUSH
14835: LD_INT 16
14837: PUSH
14838: LD_INT 17
14840: PUSH
14841: LD_INT 18
14843: PUSH
14844: LD_INT 19
14846: PUSH
14847: LD_INT 20
14849: PUSH
14850: LD_INT 21
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_INT 23
14858: PUSH
14859: LD_INT 24
14861: PUSH
14862: LD_INT 25
14864: PUSH
14865: LD_INT 26
14867: PUSH
14868: LD_INT 27
14870: PUSH
14871: LD_INT 28
14873: PUSH
14874: LD_INT 30
14876: PUSH
14877: LD_INT 31
14879: PUSH
14880: LD_INT 32
14882: PUSH
14883: LD_INT 33
14885: PUSH
14886: LD_INT 34
14888: PUSH
14889: LD_INT 36
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 101
14930: PUSH
14931: LD_INT 102
14933: PUSH
14934: LD_INT 103
14936: PUSH
14937: LD_INT 104
14939: PUSH
14940: LD_INT 105
14942: PUSH
14943: LD_INT 106
14945: PUSH
14946: LD_INT 107
14948: PUSH
14949: LD_INT 108
14951: PUSH
14952: LD_INT 109
14954: PUSH
14955: LD_INT 110
14957: PUSH
14958: LD_INT 111
14960: PUSH
14961: LD_INT 112
14963: PUSH
14964: LD_INT 113
14966: PUSH
14967: LD_INT 114
14969: PUSH
14970: LD_INT 116
14972: PUSH
14973: LD_INT 117
14975: PUSH
14976: LD_INT 118
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: ST_TO_ADDR
15002: GO 16457
15004: LD_INT 13
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15220
15012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: LD_INT 2
15023: PUSH
15024: LD_INT 3
15026: PUSH
15027: LD_INT 4
15029: PUSH
15030: LD_INT 5
15032: PUSH
15033: LD_INT 8
15035: PUSH
15036: LD_INT 9
15038: PUSH
15039: LD_INT 10
15041: PUSH
15042: LD_INT 11
15044: PUSH
15045: LD_INT 12
15047: PUSH
15048: LD_INT 14
15050: PUSH
15051: LD_INT 15
15053: PUSH
15054: LD_INT 16
15056: PUSH
15057: LD_INT 17
15059: PUSH
15060: LD_INT 18
15062: PUSH
15063: LD_INT 19
15065: PUSH
15066: LD_INT 20
15068: PUSH
15069: LD_INT 21
15071: PUSH
15072: LD_INT 22
15074: PUSH
15075: LD_INT 23
15077: PUSH
15078: LD_INT 24
15080: PUSH
15081: LD_INT 25
15083: PUSH
15084: LD_INT 26
15086: PUSH
15087: LD_INT 27
15089: PUSH
15090: LD_INT 28
15092: PUSH
15093: LD_INT 30
15095: PUSH
15096: LD_INT 31
15098: PUSH
15099: LD_INT 32
15101: PUSH
15102: LD_INT 33
15104: PUSH
15105: LD_INT 34
15107: PUSH
15108: LD_INT 36
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 101
15146: PUSH
15147: LD_INT 102
15149: PUSH
15150: LD_INT 103
15152: PUSH
15153: LD_INT 104
15155: PUSH
15156: LD_INT 105
15158: PUSH
15159: LD_INT 106
15161: PUSH
15162: LD_INT 107
15164: PUSH
15165: LD_INT 108
15167: PUSH
15168: LD_INT 109
15170: PUSH
15171: LD_INT 110
15173: PUSH
15174: LD_INT 111
15176: PUSH
15177: LD_INT 112
15179: PUSH
15180: LD_INT 113
15182: PUSH
15183: LD_INT 114
15185: PUSH
15186: LD_INT 116
15188: PUSH
15189: LD_INT 117
15191: PUSH
15192: LD_INT 118
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: ST_TO_ADDR
15218: GO 16457
15220: LD_INT 14
15222: DOUBLE
15223: EQUAL
15224: IFTRUE 15228
15226: GO 15452
15228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15229: LD_ADDR_VAR 0 2
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: LD_INT 2
15239: PUSH
15240: LD_INT 3
15242: PUSH
15243: LD_INT 4
15245: PUSH
15246: LD_INT 5
15248: PUSH
15249: LD_INT 6
15251: PUSH
15252: LD_INT 7
15254: PUSH
15255: LD_INT 8
15257: PUSH
15258: LD_INT 9
15260: PUSH
15261: LD_INT 10
15263: PUSH
15264: LD_INT 11
15266: PUSH
15267: LD_INT 12
15269: PUSH
15270: LD_INT 13
15272: PUSH
15273: LD_INT 14
15275: PUSH
15276: LD_INT 15
15278: PUSH
15279: LD_INT 16
15281: PUSH
15282: LD_INT 17
15284: PUSH
15285: LD_INT 18
15287: PUSH
15288: LD_INT 19
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 24
15305: PUSH
15306: LD_INT 25
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 27
15314: PUSH
15315: LD_INT 28
15317: PUSH
15318: LD_INT 29
15320: PUSH
15321: LD_INT 30
15323: PUSH
15324: LD_INT 31
15326: PUSH
15327: LD_INT 32
15329: PUSH
15330: LD_INT 33
15332: PUSH
15333: LD_INT 34
15335: PUSH
15336: LD_INT 36
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 101
15378: PUSH
15379: LD_INT 102
15381: PUSH
15382: LD_INT 103
15384: PUSH
15385: LD_INT 104
15387: PUSH
15388: LD_INT 105
15390: PUSH
15391: LD_INT 106
15393: PUSH
15394: LD_INT 107
15396: PUSH
15397: LD_INT 108
15399: PUSH
15400: LD_INT 109
15402: PUSH
15403: LD_INT 110
15405: PUSH
15406: LD_INT 111
15408: PUSH
15409: LD_INT 112
15411: PUSH
15412: LD_INT 113
15414: PUSH
15415: LD_INT 114
15417: PUSH
15418: LD_INT 116
15420: PUSH
15421: LD_INT 117
15423: PUSH
15424: LD_INT 118
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: ST_TO_ADDR
15450: GO 16457
15452: LD_INT 15
15454: DOUBLE
15455: EQUAL
15456: IFTRUE 15460
15458: GO 15684
15460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15461: LD_ADDR_VAR 0 2
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: LD_INT 2
15471: PUSH
15472: LD_INT 3
15474: PUSH
15475: LD_INT 4
15477: PUSH
15478: LD_INT 5
15480: PUSH
15481: LD_INT 6
15483: PUSH
15484: LD_INT 7
15486: PUSH
15487: LD_INT 8
15489: PUSH
15490: LD_INT 9
15492: PUSH
15493: LD_INT 10
15495: PUSH
15496: LD_INT 11
15498: PUSH
15499: LD_INT 12
15501: PUSH
15502: LD_INT 13
15504: PUSH
15505: LD_INT 14
15507: PUSH
15508: LD_INT 15
15510: PUSH
15511: LD_INT 16
15513: PUSH
15514: LD_INT 17
15516: PUSH
15517: LD_INT 18
15519: PUSH
15520: LD_INT 19
15522: PUSH
15523: LD_INT 20
15525: PUSH
15526: LD_INT 21
15528: PUSH
15529: LD_INT 22
15531: PUSH
15532: LD_INT 23
15534: PUSH
15535: LD_INT 24
15537: PUSH
15538: LD_INT 25
15540: PUSH
15541: LD_INT 26
15543: PUSH
15544: LD_INT 27
15546: PUSH
15547: LD_INT 28
15549: PUSH
15550: LD_INT 29
15552: PUSH
15553: LD_INT 30
15555: PUSH
15556: LD_INT 31
15558: PUSH
15559: LD_INT 32
15561: PUSH
15562: LD_INT 33
15564: PUSH
15565: LD_INT 34
15567: PUSH
15568: LD_INT 36
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 101
15610: PUSH
15611: LD_INT 102
15613: PUSH
15614: LD_INT 103
15616: PUSH
15617: LD_INT 104
15619: PUSH
15620: LD_INT 105
15622: PUSH
15623: LD_INT 106
15625: PUSH
15626: LD_INT 107
15628: PUSH
15629: LD_INT 108
15631: PUSH
15632: LD_INT 109
15634: PUSH
15635: LD_INT 110
15637: PUSH
15638: LD_INT 111
15640: PUSH
15641: LD_INT 112
15643: PUSH
15644: LD_INT 113
15646: PUSH
15647: LD_INT 114
15649: PUSH
15650: LD_INT 116
15652: PUSH
15653: LD_INT 117
15655: PUSH
15656: LD_INT 118
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: ST_TO_ADDR
15682: GO 16457
15684: LD_INT 16
15686: DOUBLE
15687: EQUAL
15688: IFTRUE 15692
15690: GO 15828
15692: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15693: LD_ADDR_VAR 0 2
15697: PUSH
15698: LD_INT 2
15700: PUSH
15701: LD_INT 4
15703: PUSH
15704: LD_INT 5
15706: PUSH
15707: LD_INT 7
15709: PUSH
15710: LD_INT 11
15712: PUSH
15713: LD_INT 12
15715: PUSH
15716: LD_INT 15
15718: PUSH
15719: LD_INT 16
15721: PUSH
15722: LD_INT 20
15724: PUSH
15725: LD_INT 21
15727: PUSH
15728: LD_INT 22
15730: PUSH
15731: LD_INT 23
15733: PUSH
15734: LD_INT 25
15736: PUSH
15737: LD_INT 26
15739: PUSH
15740: LD_INT 30
15742: PUSH
15743: LD_INT 31
15745: PUSH
15746: LD_INT 32
15748: PUSH
15749: LD_INT 33
15751: PUSH
15752: LD_INT 34
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 101
15778: PUSH
15779: LD_INT 102
15781: PUSH
15782: LD_INT 103
15784: PUSH
15785: LD_INT 106
15787: PUSH
15788: LD_INT 108
15790: PUSH
15791: LD_INT 112
15793: PUSH
15794: LD_INT 113
15796: PUSH
15797: LD_INT 114
15799: PUSH
15800: LD_INT 116
15802: PUSH
15803: LD_INT 117
15805: PUSH
15806: LD_INT 118
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: ST_TO_ADDR
15826: GO 16457
15828: LD_INT 17
15830: DOUBLE
15831: EQUAL
15832: IFTRUE 15836
15834: GO 16060
15836: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15837: LD_ADDR_VAR 0 2
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: LD_INT 3
15850: PUSH
15851: LD_INT 4
15853: PUSH
15854: LD_INT 5
15856: PUSH
15857: LD_INT 6
15859: PUSH
15860: LD_INT 7
15862: PUSH
15863: LD_INT 8
15865: PUSH
15866: LD_INT 9
15868: PUSH
15869: LD_INT 10
15871: PUSH
15872: LD_INT 11
15874: PUSH
15875: LD_INT 12
15877: PUSH
15878: LD_INT 13
15880: PUSH
15881: LD_INT 14
15883: PUSH
15884: LD_INT 15
15886: PUSH
15887: LD_INT 16
15889: PUSH
15890: LD_INT 17
15892: PUSH
15893: LD_INT 18
15895: PUSH
15896: LD_INT 19
15898: PUSH
15899: LD_INT 20
15901: PUSH
15902: LD_INT 21
15904: PUSH
15905: LD_INT 22
15907: PUSH
15908: LD_INT 23
15910: PUSH
15911: LD_INT 24
15913: PUSH
15914: LD_INT 25
15916: PUSH
15917: LD_INT 26
15919: PUSH
15920: LD_INT 27
15922: PUSH
15923: LD_INT 28
15925: PUSH
15926: LD_INT 29
15928: PUSH
15929: LD_INT 30
15931: PUSH
15932: LD_INT 31
15934: PUSH
15935: LD_INT 32
15937: PUSH
15938: LD_INT 33
15940: PUSH
15941: LD_INT 34
15943: PUSH
15944: LD_INT 36
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 101
15986: PUSH
15987: LD_INT 102
15989: PUSH
15990: LD_INT 103
15992: PUSH
15993: LD_INT 104
15995: PUSH
15996: LD_INT 105
15998: PUSH
15999: LD_INT 106
16001: PUSH
16002: LD_INT 107
16004: PUSH
16005: LD_INT 108
16007: PUSH
16008: LD_INT 109
16010: PUSH
16011: LD_INT 110
16013: PUSH
16014: LD_INT 111
16016: PUSH
16017: LD_INT 112
16019: PUSH
16020: LD_INT 113
16022: PUSH
16023: LD_INT 114
16025: PUSH
16026: LD_INT 116
16028: PUSH
16029: LD_INT 117
16031: PUSH
16032: LD_INT 118
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: ST_TO_ADDR
16058: GO 16457
16060: LD_INT 18
16062: DOUBLE
16063: EQUAL
16064: IFTRUE 16068
16066: GO 16216
16068: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_INT 2
16076: PUSH
16077: LD_INT 4
16079: PUSH
16080: LD_INT 5
16082: PUSH
16083: LD_INT 7
16085: PUSH
16086: LD_INT 11
16088: PUSH
16089: LD_INT 12
16091: PUSH
16092: LD_INT 15
16094: PUSH
16095: LD_INT 16
16097: PUSH
16098: LD_INT 20
16100: PUSH
16101: LD_INT 21
16103: PUSH
16104: LD_INT 22
16106: PUSH
16107: LD_INT 23
16109: PUSH
16110: LD_INT 25
16112: PUSH
16113: LD_INT 26
16115: PUSH
16116: LD_INT 30
16118: PUSH
16119: LD_INT 31
16121: PUSH
16122: LD_INT 32
16124: PUSH
16125: LD_INT 33
16127: PUSH
16128: LD_INT 34
16130: PUSH
16131: LD_INT 35
16133: PUSH
16134: LD_INT 36
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 101
16162: PUSH
16163: LD_INT 102
16165: PUSH
16166: LD_INT 103
16168: PUSH
16169: LD_INT 106
16171: PUSH
16172: LD_INT 108
16174: PUSH
16175: LD_INT 112
16177: PUSH
16178: LD_INT 113
16180: PUSH
16181: LD_INT 114
16183: PUSH
16184: LD_INT 115
16186: PUSH
16187: LD_INT 116
16189: PUSH
16190: LD_INT 117
16192: PUSH
16193: LD_INT 118
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: ST_TO_ADDR
16214: GO 16457
16216: LD_INT 19
16218: DOUBLE
16219: EQUAL
16220: IFTRUE 16224
16222: GO 16456
16224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16225: LD_ADDR_VAR 0 2
16229: PUSH
16230: LD_INT 1
16232: PUSH
16233: LD_INT 2
16235: PUSH
16236: LD_INT 3
16238: PUSH
16239: LD_INT 4
16241: PUSH
16242: LD_INT 5
16244: PUSH
16245: LD_INT 6
16247: PUSH
16248: LD_INT 7
16250: PUSH
16251: LD_INT 8
16253: PUSH
16254: LD_INT 9
16256: PUSH
16257: LD_INT 10
16259: PUSH
16260: LD_INT 11
16262: PUSH
16263: LD_INT 12
16265: PUSH
16266: LD_INT 13
16268: PUSH
16269: LD_INT 14
16271: PUSH
16272: LD_INT 15
16274: PUSH
16275: LD_INT 16
16277: PUSH
16278: LD_INT 17
16280: PUSH
16281: LD_INT 18
16283: PUSH
16284: LD_INT 19
16286: PUSH
16287: LD_INT 20
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 22
16295: PUSH
16296: LD_INT 23
16298: PUSH
16299: LD_INT 24
16301: PUSH
16302: LD_INT 25
16304: PUSH
16305: LD_INT 26
16307: PUSH
16308: LD_INT 27
16310: PUSH
16311: LD_INT 28
16313: PUSH
16314: LD_INT 29
16316: PUSH
16317: LD_INT 30
16319: PUSH
16320: LD_INT 31
16322: PUSH
16323: LD_INT 32
16325: PUSH
16326: LD_INT 33
16328: PUSH
16329: LD_INT 34
16331: PUSH
16332: LD_INT 35
16334: PUSH
16335: LD_INT 36
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 101
16378: PUSH
16379: LD_INT 102
16381: PUSH
16382: LD_INT 103
16384: PUSH
16385: LD_INT 104
16387: PUSH
16388: LD_INT 105
16390: PUSH
16391: LD_INT 106
16393: PUSH
16394: LD_INT 107
16396: PUSH
16397: LD_INT 108
16399: PUSH
16400: LD_INT 109
16402: PUSH
16403: LD_INT 110
16405: PUSH
16406: LD_INT 111
16408: PUSH
16409: LD_INT 112
16411: PUSH
16412: LD_INT 113
16414: PUSH
16415: LD_INT 114
16417: PUSH
16418: LD_INT 115
16420: PUSH
16421: LD_INT 116
16423: PUSH
16424: LD_INT 117
16426: PUSH
16427: LD_INT 118
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: ST_TO_ADDR
16454: GO 16457
16456: POP
// end else
16457: GO 16688
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16459: LD_ADDR_VAR 0 2
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 2
16469: PUSH
16470: LD_INT 3
16472: PUSH
16473: LD_INT 4
16475: PUSH
16476: LD_INT 5
16478: PUSH
16479: LD_INT 6
16481: PUSH
16482: LD_INT 7
16484: PUSH
16485: LD_INT 8
16487: PUSH
16488: LD_INT 9
16490: PUSH
16491: LD_INT 10
16493: PUSH
16494: LD_INT 11
16496: PUSH
16497: LD_INT 12
16499: PUSH
16500: LD_INT 13
16502: PUSH
16503: LD_INT 14
16505: PUSH
16506: LD_INT 15
16508: PUSH
16509: LD_INT 16
16511: PUSH
16512: LD_INT 17
16514: PUSH
16515: LD_INT 18
16517: PUSH
16518: LD_INT 19
16520: PUSH
16521: LD_INT 20
16523: PUSH
16524: LD_INT 21
16526: PUSH
16527: LD_INT 22
16529: PUSH
16530: LD_INT 23
16532: PUSH
16533: LD_INT 24
16535: PUSH
16536: LD_INT 25
16538: PUSH
16539: LD_INT 26
16541: PUSH
16542: LD_INT 27
16544: PUSH
16545: LD_INT 28
16547: PUSH
16548: LD_INT 29
16550: PUSH
16551: LD_INT 30
16553: PUSH
16554: LD_INT 31
16556: PUSH
16557: LD_INT 32
16559: PUSH
16560: LD_INT 33
16562: PUSH
16563: LD_INT 34
16565: PUSH
16566: LD_INT 35
16568: PUSH
16569: LD_INT 36
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 101
16612: PUSH
16613: LD_INT 102
16615: PUSH
16616: LD_INT 103
16618: PUSH
16619: LD_INT 104
16621: PUSH
16622: LD_INT 105
16624: PUSH
16625: LD_INT 106
16627: PUSH
16628: LD_INT 107
16630: PUSH
16631: LD_INT 108
16633: PUSH
16634: LD_INT 109
16636: PUSH
16637: LD_INT 110
16639: PUSH
16640: LD_INT 111
16642: PUSH
16643: LD_INT 112
16645: PUSH
16646: LD_INT 113
16648: PUSH
16649: LD_INT 114
16651: PUSH
16652: LD_INT 115
16654: PUSH
16655: LD_INT 116
16657: PUSH
16658: LD_INT 117
16660: PUSH
16661: LD_INT 118
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: ST_TO_ADDR
// if result then
16688: LD_VAR 0 2
16692: IFFALSE 17478
// begin normal :=  ;
16694: LD_ADDR_VAR 0 5
16698: PUSH
16699: LD_STRING 
16701: ST_TO_ADDR
// hardcore :=  ;
16702: LD_ADDR_VAR 0 6
16706: PUSH
16707: LD_STRING 
16709: ST_TO_ADDR
// active :=  ;
16710: LD_ADDR_VAR 0 7
16714: PUSH
16715: LD_STRING 
16717: ST_TO_ADDR
// for i = 1 to normalCounter do
16718: LD_ADDR_VAR 0 8
16722: PUSH
16723: DOUBLE
16724: LD_INT 1
16726: DEC
16727: ST_TO_ADDR
16728: LD_EXP 23
16732: PUSH
16733: FOR_TO
16734: IFFALSE 16835
// begin tmp := 0 ;
16736: LD_ADDR_VAR 0 3
16740: PUSH
16741: LD_STRING 0
16743: ST_TO_ADDR
// if result [ 1 ] then
16744: LD_VAR 0 2
16748: PUSH
16749: LD_INT 1
16751: ARRAY
16752: IFFALSE 16817
// if result [ 1 ] [ 1 ] = i then
16754: LD_VAR 0 2
16758: PUSH
16759: LD_INT 1
16761: ARRAY
16762: PUSH
16763: LD_INT 1
16765: ARRAY
16766: PUSH
16767: LD_VAR 0 8
16771: EQUAL
16772: IFFALSE 16817
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16774: LD_ADDR_VAR 0 2
16778: PUSH
16779: LD_VAR 0 2
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: LD_VAR 0 2
16791: PUSH
16792: LD_INT 1
16794: ARRAY
16795: PPUSH
16796: LD_INT 1
16798: PPUSH
16799: CALL_OW 3
16803: PPUSH
16804: CALL_OW 1
16808: ST_TO_ADDR
// tmp := 1 ;
16809: LD_ADDR_VAR 0 3
16813: PUSH
16814: LD_STRING 1
16816: ST_TO_ADDR
// end ; normal := normal & tmp ;
16817: LD_ADDR_VAR 0 5
16821: PUSH
16822: LD_VAR 0 5
16826: PUSH
16827: LD_VAR 0 3
16831: STR
16832: ST_TO_ADDR
// end ;
16833: GO 16733
16835: POP
16836: POP
// for i = 1 to hardcoreCounter do
16837: LD_ADDR_VAR 0 8
16841: PUSH
16842: DOUBLE
16843: LD_INT 1
16845: DEC
16846: ST_TO_ADDR
16847: LD_EXP 24
16851: PUSH
16852: FOR_TO
16853: IFFALSE 16958
// begin tmp := 0 ;
16855: LD_ADDR_VAR 0 3
16859: PUSH
16860: LD_STRING 0
16862: ST_TO_ADDR
// if result [ 2 ] then
16863: LD_VAR 0 2
16867: PUSH
16868: LD_INT 2
16870: ARRAY
16871: IFFALSE 16940
// if result [ 2 ] [ 1 ] = 100 + i then
16873: LD_VAR 0 2
16877: PUSH
16878: LD_INT 2
16880: ARRAY
16881: PUSH
16882: LD_INT 1
16884: ARRAY
16885: PUSH
16886: LD_INT 100
16888: PUSH
16889: LD_VAR 0 8
16893: PLUS
16894: EQUAL
16895: IFFALSE 16940
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16897: LD_ADDR_VAR 0 2
16901: PUSH
16902: LD_VAR 0 2
16906: PPUSH
16907: LD_INT 2
16909: PPUSH
16910: LD_VAR 0 2
16914: PUSH
16915: LD_INT 2
16917: ARRAY
16918: PPUSH
16919: LD_INT 1
16921: PPUSH
16922: CALL_OW 3
16926: PPUSH
16927: CALL_OW 1
16931: ST_TO_ADDR
// tmp := 1 ;
16932: LD_ADDR_VAR 0 3
16936: PUSH
16937: LD_STRING 1
16939: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16940: LD_ADDR_VAR 0 6
16944: PUSH
16945: LD_VAR 0 6
16949: PUSH
16950: LD_VAR 0 3
16954: STR
16955: ST_TO_ADDR
// end ;
16956: GO 16852
16958: POP
16959: POP
// if isGameLoad then
16960: LD_VAR 0 1
16964: IFFALSE 17439
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16966: LD_ADDR_VAR 0 4
16970: PUSH
16971: LD_EXP 27
16975: PUSH
16976: LD_EXP 26
16980: PUSH
16981: LD_EXP 28
16985: PUSH
16986: LD_EXP 25
16990: PUSH
16991: LD_EXP 29
16995: PUSH
16996: LD_EXP 30
17000: PUSH
17001: LD_EXP 31
17005: PUSH
17006: LD_EXP 32
17010: PUSH
17011: LD_EXP 33
17015: PUSH
17016: LD_EXP 34
17020: PUSH
17021: LD_EXP 35
17025: PUSH
17026: LD_EXP 36
17030: PUSH
17031: LD_EXP 37
17035: PUSH
17036: LD_EXP 38
17040: PUSH
17041: LD_EXP 46
17045: PUSH
17046: LD_EXP 47
17050: PUSH
17051: LD_EXP 48
17055: PUSH
17056: LD_EXP 49
17060: PUSH
17061: LD_EXP 51
17065: PUSH
17066: LD_EXP 52
17070: PUSH
17071: LD_EXP 53
17075: PUSH
17076: LD_EXP 56
17080: PUSH
17081: LD_EXP 58
17085: PUSH
17086: LD_EXP 59
17090: PUSH
17091: LD_EXP 60
17095: PUSH
17096: LD_EXP 62
17100: PUSH
17101: LD_EXP 63
17105: PUSH
17106: LD_EXP 66
17110: PUSH
17111: LD_EXP 67
17115: PUSH
17116: LD_EXP 68
17120: PUSH
17121: LD_EXP 69
17125: PUSH
17126: LD_EXP 70
17130: PUSH
17131: LD_EXP 71
17135: PUSH
17136: LD_EXP 72
17140: PUSH
17141: LD_EXP 73
17145: PUSH
17146: LD_EXP 74
17150: PUSH
17151: LD_EXP 39
17155: PUSH
17156: LD_EXP 40
17160: PUSH
17161: LD_EXP 43
17165: PUSH
17166: LD_EXP 44
17170: PUSH
17171: LD_EXP 45
17175: PUSH
17176: LD_EXP 41
17180: PUSH
17181: LD_EXP 42
17185: PUSH
17186: LD_EXP 50
17190: PUSH
17191: LD_EXP 54
17195: PUSH
17196: LD_EXP 55
17200: PUSH
17201: LD_EXP 57
17205: PUSH
17206: LD_EXP 61
17210: PUSH
17211: LD_EXP 64
17215: PUSH
17216: LD_EXP 65
17220: PUSH
17221: LD_EXP 75
17225: PUSH
17226: LD_EXP 76
17230: PUSH
17231: LD_EXP 77
17235: PUSH
17236: LD_EXP 78
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: ST_TO_ADDR
// tmp :=  ;
17297: LD_ADDR_VAR 0 3
17301: PUSH
17302: LD_STRING 
17304: ST_TO_ADDR
// for i = 1 to normalCounter do
17305: LD_ADDR_VAR 0 8
17309: PUSH
17310: DOUBLE
17311: LD_INT 1
17313: DEC
17314: ST_TO_ADDR
17315: LD_EXP 23
17319: PUSH
17320: FOR_TO
17321: IFFALSE 17357
// begin if flags [ i ] then
17323: LD_VAR 0 4
17327: PUSH
17328: LD_VAR 0 8
17332: ARRAY
17333: IFFALSE 17355
// tmp := tmp & i & ; ;
17335: LD_ADDR_VAR 0 3
17339: PUSH
17340: LD_VAR 0 3
17344: PUSH
17345: LD_VAR 0 8
17349: STR
17350: PUSH
17351: LD_STRING ;
17353: STR
17354: ST_TO_ADDR
// end ;
17355: GO 17320
17357: POP
17358: POP
// for i = 1 to hardcoreCounter do
17359: LD_ADDR_VAR 0 8
17363: PUSH
17364: DOUBLE
17365: LD_INT 1
17367: DEC
17368: ST_TO_ADDR
17369: LD_EXP 24
17373: PUSH
17374: FOR_TO
17375: IFFALSE 17421
// begin if flags [ normalCounter + i ] then
17377: LD_VAR 0 4
17381: PUSH
17382: LD_EXP 23
17386: PUSH
17387: LD_VAR 0 8
17391: PLUS
17392: ARRAY
17393: IFFALSE 17419
// tmp := tmp & ( 100 + i ) & ; ;
17395: LD_ADDR_VAR 0 3
17399: PUSH
17400: LD_VAR 0 3
17404: PUSH
17405: LD_INT 100
17407: PUSH
17408: LD_VAR 0 8
17412: PLUS
17413: STR
17414: PUSH
17415: LD_STRING ;
17417: STR
17418: ST_TO_ADDR
// end ;
17419: GO 17374
17421: POP
17422: POP
// if tmp then
17423: LD_VAR 0 3
17427: IFFALSE 17439
// active := tmp ;
17429: LD_ADDR_VAR 0 7
17433: PUSH
17434: LD_VAR 0 3
17438: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17439: LD_STRING getStreamItemsFromMission("
17441: PUSH
17442: LD_VAR 0 5
17446: STR
17447: PUSH
17448: LD_STRING ","
17450: STR
17451: PUSH
17452: LD_VAR 0 6
17456: STR
17457: PUSH
17458: LD_STRING ","
17460: STR
17461: PUSH
17462: LD_VAR 0 7
17466: STR
17467: PUSH
17468: LD_STRING ")
17470: STR
17471: PPUSH
17472: CALL_OW 559
// end else
17476: GO 17485
// ToLua ( getStreamItemsFromMission("","","") ) ;
17478: LD_STRING getStreamItemsFromMission("","","")
17480: PPUSH
17481: CALL_OW 559
// end ;
17485: LD_VAR 0 2
17489: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17490: LD_EXP 22
17494: PUSH
17495: LD_EXP 27
17499: AND
17500: IFFALSE 17624
17502: GO 17504
17504: DISABLE
17505: LD_INT 0
17507: PPUSH
17508: PPUSH
// begin enable ;
17509: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17510: LD_ADDR_VAR 0 2
17514: PUSH
17515: LD_INT 22
17517: PUSH
17518: LD_OWVAR 2
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 2
17529: PUSH
17530: LD_INT 34
17532: PUSH
17533: LD_INT 7
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 34
17542: PUSH
17543: LD_INT 45
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 34
17552: PUSH
17553: LD_INT 28
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 34
17562: PUSH
17563: LD_INT 47
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PPUSH
17581: CALL_OW 69
17585: ST_TO_ADDR
// if not tmp then
17586: LD_VAR 0 2
17590: NOT
17591: IFFALSE 17595
// exit ;
17593: GO 17624
// for i in tmp do
17595: LD_ADDR_VAR 0 1
17599: PUSH
17600: LD_VAR 0 2
17604: PUSH
17605: FOR_IN
17606: IFFALSE 17622
// begin SetLives ( i , 0 ) ;
17608: LD_VAR 0 1
17612: PPUSH
17613: LD_INT 0
17615: PPUSH
17616: CALL_OW 234
// end ;
17620: GO 17605
17622: POP
17623: POP
// end ;
17624: PPOPN 2
17626: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17627: LD_EXP 22
17631: PUSH
17632: LD_EXP 28
17636: AND
17637: IFFALSE 17721
17639: GO 17641
17641: DISABLE
17642: LD_INT 0
17644: PPUSH
17645: PPUSH
// begin enable ;
17646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17647: LD_ADDR_VAR 0 2
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_OWVAR 2
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 32
17666: PUSH
17667: LD_INT 3
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PPUSH
17678: CALL_OW 69
17682: ST_TO_ADDR
// if not tmp then
17683: LD_VAR 0 2
17687: NOT
17688: IFFALSE 17692
// exit ;
17690: GO 17721
// for i in tmp do
17692: LD_ADDR_VAR 0 1
17696: PUSH
17697: LD_VAR 0 2
17701: PUSH
17702: FOR_IN
17703: IFFALSE 17719
// begin SetLives ( i , 0 ) ;
17705: LD_VAR 0 1
17709: PPUSH
17710: LD_INT 0
17712: PPUSH
17713: CALL_OW 234
// end ;
17717: GO 17702
17719: POP
17720: POP
// end ;
17721: PPOPN 2
17723: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17724: LD_EXP 22
17728: PUSH
17729: LD_EXP 25
17733: AND
17734: IFFALSE 17827
17736: GO 17738
17738: DISABLE
17739: LD_INT 0
17741: PPUSH
// begin enable ;
17742: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17743: LD_ADDR_VAR 0 1
17747: PUSH
17748: LD_INT 22
17750: PUSH
17751: LD_OWVAR 2
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 2
17762: PUSH
17763: LD_INT 25
17765: PUSH
17766: LD_INT 5
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 25
17775: PUSH
17776: LD_INT 9
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 25
17785: PUSH
17786: LD_INT 8
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PPUSH
17803: CALL_OW 69
17807: PUSH
17808: FOR_IN
17809: IFFALSE 17825
// begin SetClass ( i , 1 ) ;
17811: LD_VAR 0 1
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: CALL_OW 336
// end ;
17823: GO 17808
17825: POP
17826: POP
// end ;
17827: PPOPN 1
17829: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17830: LD_EXP 22
17834: PUSH
17835: LD_EXP 26
17839: AND
17840: PUSH
17841: LD_OWVAR 65
17845: PUSH
17846: LD_INT 7
17848: LESS
17849: AND
17850: IFFALSE 17864
17852: GO 17854
17854: DISABLE
// begin enable ;
17855: ENABLE
// game_speed := 7 ;
17856: LD_ADDR_OWVAR 65
17860: PUSH
17861: LD_INT 7
17863: ST_TO_ADDR
// end ;
17864: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17865: LD_EXP 22
17869: PUSH
17870: LD_EXP 29
17874: AND
17875: IFFALSE 18077
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
17884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17885: LD_ADDR_VAR 0 3
17889: PUSH
17890: LD_INT 81
17892: PUSH
17893: LD_OWVAR 2
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 21
17904: PUSH
17905: LD_INT 1
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 69
17920: ST_TO_ADDR
// if not tmp then
17921: LD_VAR 0 3
17925: NOT
17926: IFFALSE 17930
// exit ;
17928: GO 18077
// if tmp > 5 then
17930: LD_VAR 0 3
17934: PUSH
17935: LD_INT 5
17937: GREATER
17938: IFFALSE 17950
// k := 5 else
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: LD_INT 5
17947: ST_TO_ADDR
17948: GO 17960
// k := tmp ;
17950: LD_ADDR_VAR 0 2
17954: PUSH
17955: LD_VAR 0 3
17959: ST_TO_ADDR
// for i := 1 to k do
17960: LD_ADDR_VAR 0 1
17964: PUSH
17965: DOUBLE
17966: LD_INT 1
17968: DEC
17969: ST_TO_ADDR
17970: LD_VAR 0 2
17974: PUSH
17975: FOR_TO
17976: IFFALSE 18075
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17978: LD_VAR 0 3
17982: PUSH
17983: LD_VAR 0 1
17987: ARRAY
17988: PPUSH
17989: LD_VAR 0 1
17993: PUSH
17994: LD_INT 4
17996: MOD
17997: PUSH
17998: LD_INT 1
18000: PLUS
18001: PPUSH
18002: CALL_OW 259
18006: PUSH
18007: LD_INT 10
18009: LESS
18010: IFFALSE 18073
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18012: LD_VAR 0 3
18016: PUSH
18017: LD_VAR 0 1
18021: ARRAY
18022: PPUSH
18023: LD_VAR 0 1
18027: PUSH
18028: LD_INT 4
18030: MOD
18031: PUSH
18032: LD_INT 1
18034: PLUS
18035: PPUSH
18036: LD_VAR 0 3
18040: PUSH
18041: LD_VAR 0 1
18045: ARRAY
18046: PPUSH
18047: LD_VAR 0 1
18051: PUSH
18052: LD_INT 4
18054: MOD
18055: PUSH
18056: LD_INT 1
18058: PLUS
18059: PPUSH
18060: CALL_OW 259
18064: PUSH
18065: LD_INT 1
18067: PLUS
18068: PPUSH
18069: CALL_OW 237
18073: GO 17975
18075: POP
18076: POP
// end ;
18077: PPOPN 3
18079: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18080: LD_EXP 22
18084: PUSH
18085: LD_EXP 30
18089: AND
18090: IFFALSE 18110
18092: GO 18094
18094: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18095: LD_INT 4
18097: PPUSH
18098: LD_OWVAR 2
18102: PPUSH
18103: LD_INT 0
18105: PPUSH
18106: CALL_OW 324
18110: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18111: LD_EXP 22
18115: PUSH
18116: LD_EXP 59
18120: AND
18121: IFFALSE 18141
18123: GO 18125
18125: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18126: LD_INT 19
18128: PPUSH
18129: LD_OWVAR 2
18133: PPUSH
18134: LD_INT 0
18136: PPUSH
18137: CALL_OW 324
18141: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18142: LD_EXP 22
18146: PUSH
18147: LD_EXP 31
18151: AND
18152: IFFALSE 18254
18154: GO 18156
18156: DISABLE
18157: LD_INT 0
18159: PPUSH
18160: PPUSH
// begin enable ;
18161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18162: LD_ADDR_VAR 0 2
18166: PUSH
18167: LD_INT 22
18169: PUSH
18170: LD_OWVAR 2
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 2
18181: PUSH
18182: LD_INT 34
18184: PUSH
18185: LD_INT 11
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 34
18194: PUSH
18195: LD_INT 30
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PPUSH
18211: CALL_OW 69
18215: ST_TO_ADDR
// if not tmp then
18216: LD_VAR 0 2
18220: NOT
18221: IFFALSE 18225
// exit ;
18223: GO 18254
// for i in tmp do
18225: LD_ADDR_VAR 0 1
18229: PUSH
18230: LD_VAR 0 2
18234: PUSH
18235: FOR_IN
18236: IFFALSE 18252
// begin SetLives ( i , 0 ) ;
18238: LD_VAR 0 1
18242: PPUSH
18243: LD_INT 0
18245: PPUSH
18246: CALL_OW 234
// end ;
18250: GO 18235
18252: POP
18253: POP
// end ;
18254: PPOPN 2
18256: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18257: LD_EXP 22
18261: PUSH
18262: LD_EXP 32
18266: AND
18267: IFFALSE 18287
18269: GO 18271
18271: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18272: LD_INT 32
18274: PPUSH
18275: LD_OWVAR 2
18279: PPUSH
18280: LD_INT 0
18282: PPUSH
18283: CALL_OW 324
18287: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18288: LD_EXP 22
18292: PUSH
18293: LD_EXP 33
18297: AND
18298: IFFALSE 18479
18300: GO 18302
18302: DISABLE
18303: LD_INT 0
18305: PPUSH
18306: PPUSH
18307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18308: LD_ADDR_VAR 0 2
18312: PUSH
18313: LD_INT 22
18315: PUSH
18316: LD_OWVAR 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 33
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PPUSH
18339: CALL_OW 69
18343: ST_TO_ADDR
// if not tmp then
18344: LD_VAR 0 2
18348: NOT
18349: IFFALSE 18353
// exit ;
18351: GO 18479
// side := 0 ;
18353: LD_ADDR_VAR 0 3
18357: PUSH
18358: LD_INT 0
18360: ST_TO_ADDR
// for i := 1 to 8 do
18361: LD_ADDR_VAR 0 1
18365: PUSH
18366: DOUBLE
18367: LD_INT 1
18369: DEC
18370: ST_TO_ADDR
18371: LD_INT 8
18373: PUSH
18374: FOR_TO
18375: IFFALSE 18423
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18377: LD_OWVAR 2
18381: PUSH
18382: LD_VAR 0 1
18386: NONEQUAL
18387: PUSH
18388: LD_OWVAR 2
18392: PPUSH
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 81
18402: PUSH
18403: LD_INT 2
18405: EQUAL
18406: AND
18407: IFFALSE 18421
// begin side := i ;
18409: LD_ADDR_VAR 0 3
18413: PUSH
18414: LD_VAR 0 1
18418: ST_TO_ADDR
// break ;
18419: GO 18423
// end ;
18421: GO 18374
18423: POP
18424: POP
// if not side then
18425: LD_VAR 0 3
18429: NOT
18430: IFFALSE 18434
// exit ;
18432: GO 18479
// for i := 1 to tmp do
18434: LD_ADDR_VAR 0 1
18438: PUSH
18439: DOUBLE
18440: LD_INT 1
18442: DEC
18443: ST_TO_ADDR
18444: LD_VAR 0 2
18448: PUSH
18449: FOR_TO
18450: IFFALSE 18477
// if Prob ( 60 ) then
18452: LD_INT 60
18454: PPUSH
18455: CALL_OW 13
18459: IFFALSE 18475
// SetSide ( i , side ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_VAR 0 3
18470: PPUSH
18471: CALL_OW 235
18475: GO 18449
18477: POP
18478: POP
// end ;
18479: PPOPN 3
18481: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18482: LD_EXP 22
18486: PUSH
18487: LD_EXP 35
18491: AND
18492: IFFALSE 18611
18494: GO 18496
18496: DISABLE
18497: LD_INT 0
18499: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18500: LD_ADDR_VAR 0 1
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_OWVAR 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 21
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 3
18529: PUSH
18530: LD_INT 23
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 69
18553: PUSH
18554: FOR_IN
18555: IFFALSE 18609
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18557: LD_VAR 0 1
18561: PPUSH
18562: CALL_OW 257
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 3
18575: PUSH
18576: LD_INT 4
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: IN
18585: IFFALSE 18607
// SetClass ( un , rand ( 1 , 4 ) ) ;
18587: LD_VAR 0 1
18591: PPUSH
18592: LD_INT 1
18594: PPUSH
18595: LD_INT 4
18597: PPUSH
18598: CALL_OW 12
18602: PPUSH
18603: CALL_OW 336
18607: GO 18554
18609: POP
18610: POP
// end ;
18611: PPOPN 1
18613: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18614: LD_EXP 22
18618: PUSH
18619: LD_EXP 34
18623: AND
18624: IFFALSE 18703
18626: GO 18628
18628: DISABLE
18629: LD_INT 0
18631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18632: LD_ADDR_VAR 0 1
18636: PUSH
18637: LD_INT 22
18639: PUSH
18640: LD_OWVAR 2
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 21
18651: PUSH
18652: LD_INT 3
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PPUSH
18663: CALL_OW 69
18667: ST_TO_ADDR
// if not tmp then
18668: LD_VAR 0 1
18672: NOT
18673: IFFALSE 18677
// exit ;
18675: GO 18703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18677: LD_VAR 0 1
18681: PUSH
18682: LD_INT 1
18684: PPUSH
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 12
18694: ARRAY
18695: PPUSH
18696: LD_INT 100
18698: PPUSH
18699: CALL_OW 234
// end ;
18703: PPOPN 1
18705: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18706: LD_EXP 22
18710: PUSH
18711: LD_EXP 36
18715: AND
18716: IFFALSE 18814
18718: GO 18720
18720: DISABLE
18721: LD_INT 0
18723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18724: LD_ADDR_VAR 0 1
18728: PUSH
18729: LD_INT 22
18731: PUSH
18732: LD_OWVAR 2
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 21
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PPUSH
18755: CALL_OW 69
18759: ST_TO_ADDR
// if not tmp then
18760: LD_VAR 0 1
18764: NOT
18765: IFFALSE 18769
// exit ;
18767: GO 18814
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18769: LD_VAR 0 1
18773: PUSH
18774: LD_INT 1
18776: PPUSH
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 12
18786: ARRAY
18787: PPUSH
18788: LD_INT 1
18790: PPUSH
18791: LD_INT 4
18793: PPUSH
18794: CALL_OW 12
18798: PPUSH
18799: LD_INT 3000
18801: PPUSH
18802: LD_INT 9000
18804: PPUSH
18805: CALL_OW 12
18809: PPUSH
18810: CALL_OW 492
// end ;
18814: PPOPN 1
18816: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18817: LD_EXP 22
18821: PUSH
18822: LD_EXP 37
18826: AND
18827: IFFALSE 18847
18829: GO 18831
18831: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18832: LD_INT 1
18834: PPUSH
18835: LD_OWVAR 2
18839: PPUSH
18840: LD_INT 0
18842: PPUSH
18843: CALL_OW 324
18847: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18848: LD_EXP 22
18852: PUSH
18853: LD_EXP 38
18857: AND
18858: IFFALSE 18941
18860: GO 18862
18862: DISABLE
18863: LD_INT 0
18865: PPUSH
18866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18867: LD_ADDR_VAR 0 2
18871: PUSH
18872: LD_INT 22
18874: PUSH
18875: LD_OWVAR 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 21
18886: PUSH
18887: LD_INT 3
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PPUSH
18898: CALL_OW 69
18902: ST_TO_ADDR
// if not tmp then
18903: LD_VAR 0 2
18907: NOT
18908: IFFALSE 18912
// exit ;
18910: GO 18941
// for i in tmp do
18912: LD_ADDR_VAR 0 1
18916: PUSH
18917: LD_VAR 0 2
18921: PUSH
18922: FOR_IN
18923: IFFALSE 18939
// SetBLevel ( i , 10 ) ;
18925: LD_VAR 0 1
18929: PPUSH
18930: LD_INT 10
18932: PPUSH
18933: CALL_OW 241
18937: GO 18922
18939: POP
18940: POP
// end ;
18941: PPOPN 2
18943: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18944: LD_EXP 22
18948: PUSH
18949: LD_EXP 39
18953: AND
18954: IFFALSE 19065
18956: GO 18958
18958: DISABLE
18959: LD_INT 0
18961: PPUSH
18962: PPUSH
18963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18964: LD_ADDR_VAR 0 3
18968: PUSH
18969: LD_INT 22
18971: PUSH
18972: LD_OWVAR 2
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 25
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PPUSH
18995: CALL_OW 69
18999: ST_TO_ADDR
// if not tmp then
19000: LD_VAR 0 3
19004: NOT
19005: IFFALSE 19009
// exit ;
19007: GO 19065
// un := tmp [ rand ( 1 , tmp ) ] ;
19009: LD_ADDR_VAR 0 2
19013: PUSH
19014: LD_VAR 0 3
19018: PUSH
19019: LD_INT 1
19021: PPUSH
19022: LD_VAR 0 3
19026: PPUSH
19027: CALL_OW 12
19031: ARRAY
19032: ST_TO_ADDR
// if Crawls ( un ) then
19033: LD_VAR 0 2
19037: PPUSH
19038: CALL_OW 318
19042: IFFALSE 19053
// ComWalk ( un ) ;
19044: LD_VAR 0 2
19048: PPUSH
19049: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19053: LD_VAR 0 2
19057: PPUSH
19058: LD_INT 5
19060: PPUSH
19061: CALL_OW 336
// end ;
19065: PPOPN 3
19067: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19068: LD_EXP 22
19072: PUSH
19073: LD_EXP 40
19077: AND
19078: PUSH
19079: LD_OWVAR 67
19083: PUSH
19084: LD_INT 4
19086: LESS
19087: AND
19088: IFFALSE 19107
19090: GO 19092
19092: DISABLE
// begin Difficulty := Difficulty + 1 ;
19093: LD_ADDR_OWVAR 67
19097: PUSH
19098: LD_OWVAR 67
19102: PUSH
19103: LD_INT 1
19105: PLUS
19106: ST_TO_ADDR
// end ;
19107: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19108: LD_EXP 22
19112: PUSH
19113: LD_EXP 41
19117: AND
19118: IFFALSE 19221
19120: GO 19122
19122: DISABLE
19123: LD_INT 0
19125: PPUSH
// begin for i := 1 to 5 do
19126: LD_ADDR_VAR 0 1
19130: PUSH
19131: DOUBLE
19132: LD_INT 1
19134: DEC
19135: ST_TO_ADDR
19136: LD_INT 5
19138: PUSH
19139: FOR_TO
19140: IFFALSE 19219
// begin uc_nation := nation_nature ;
19142: LD_ADDR_OWVAR 21
19146: PUSH
19147: LD_INT 0
19149: ST_TO_ADDR
// uc_side := 0 ;
19150: LD_ADDR_OWVAR 20
19154: PUSH
19155: LD_INT 0
19157: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19158: LD_ADDR_OWVAR 29
19162: PUSH
19163: LD_INT 12
19165: PUSH
19166: LD_INT 12
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: ST_TO_ADDR
// hc_agressivity := 20 ;
19173: LD_ADDR_OWVAR 35
19177: PUSH
19178: LD_INT 20
19180: ST_TO_ADDR
// hc_class := class_tiger ;
19181: LD_ADDR_OWVAR 28
19185: PUSH
19186: LD_INT 14
19188: ST_TO_ADDR
// hc_gallery :=  ;
19189: LD_ADDR_OWVAR 33
19193: PUSH
19194: LD_STRING 
19196: ST_TO_ADDR
// hc_name :=  ;
19197: LD_ADDR_OWVAR 26
19201: PUSH
19202: LD_STRING 
19204: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19205: CALL_OW 44
19209: PPUSH
19210: LD_INT 0
19212: PPUSH
19213: CALL_OW 51
// end ;
19217: GO 19139
19219: POP
19220: POP
// end ;
19221: PPOPN 1
19223: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19224: LD_EXP 22
19228: PUSH
19229: LD_EXP 42
19233: AND
19234: IFFALSE 19243
19236: GO 19238
19238: DISABLE
// StreamSibBomb ;
19239: CALL 19244 0 0
19243: END
// export function StreamSibBomb ; var i , x , y ; begin
19244: LD_INT 0
19246: PPUSH
19247: PPUSH
19248: PPUSH
19249: PPUSH
// result := false ;
19250: LD_ADDR_VAR 0 1
19254: PUSH
19255: LD_INT 0
19257: ST_TO_ADDR
// for i := 1 to 16 do
19258: LD_ADDR_VAR 0 2
19262: PUSH
19263: DOUBLE
19264: LD_INT 1
19266: DEC
19267: ST_TO_ADDR
19268: LD_INT 16
19270: PUSH
19271: FOR_TO
19272: IFFALSE 19471
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19274: LD_ADDR_VAR 0 3
19278: PUSH
19279: LD_INT 10
19281: PUSH
19282: LD_INT 20
19284: PUSH
19285: LD_INT 30
19287: PUSH
19288: LD_INT 40
19290: PUSH
19291: LD_INT 50
19293: PUSH
19294: LD_INT 60
19296: PUSH
19297: LD_INT 70
19299: PUSH
19300: LD_INT 80
19302: PUSH
19303: LD_INT 90
19305: PUSH
19306: LD_INT 100
19308: PUSH
19309: LD_INT 110
19311: PUSH
19312: LD_INT 120
19314: PUSH
19315: LD_INT 130
19317: PUSH
19318: LD_INT 140
19320: PUSH
19321: LD_INT 150
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 1
19343: PPUSH
19344: LD_INT 15
19346: PPUSH
19347: CALL_OW 12
19351: ARRAY
19352: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19353: LD_ADDR_VAR 0 4
19357: PUSH
19358: LD_INT 10
19360: PUSH
19361: LD_INT 20
19363: PUSH
19364: LD_INT 30
19366: PUSH
19367: LD_INT 40
19369: PUSH
19370: LD_INT 50
19372: PUSH
19373: LD_INT 60
19375: PUSH
19376: LD_INT 70
19378: PUSH
19379: LD_INT 80
19381: PUSH
19382: LD_INT 90
19384: PUSH
19385: LD_INT 100
19387: PUSH
19388: LD_INT 110
19390: PUSH
19391: LD_INT 120
19393: PUSH
19394: LD_INT 130
19396: PUSH
19397: LD_INT 140
19399: PUSH
19400: LD_INT 150
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 1
19422: PPUSH
19423: LD_INT 15
19425: PPUSH
19426: CALL_OW 12
19430: ARRAY
19431: ST_TO_ADDR
// if ValidHex ( x , y ) then
19432: LD_VAR 0 3
19436: PPUSH
19437: LD_VAR 0 4
19441: PPUSH
19442: CALL_OW 488
19446: IFFALSE 19469
// begin result := [ x , y ] ;
19448: LD_ADDR_VAR 0 1
19452: PUSH
19453: LD_VAR 0 3
19457: PUSH
19458: LD_VAR 0 4
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: ST_TO_ADDR
// break ;
19467: GO 19471
// end ; end ;
19469: GO 19271
19471: POP
19472: POP
// if result then
19473: LD_VAR 0 1
19477: IFFALSE 19537
// begin ToLua ( playSibBomb() ) ;
19479: LD_STRING playSibBomb()
19481: PPUSH
19482: CALL_OW 559
// wait ( 0 0$14 ) ;
19486: LD_INT 490
19488: PPUSH
19489: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19493: LD_VAR 0 1
19497: PUSH
19498: LD_INT 1
19500: ARRAY
19501: PPUSH
19502: LD_VAR 0 1
19506: PUSH
19507: LD_INT 2
19509: ARRAY
19510: PPUSH
19511: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19515: LD_VAR 0 1
19519: PUSH
19520: LD_INT 1
19522: ARRAY
19523: PPUSH
19524: LD_VAR 0 1
19528: PUSH
19529: LD_INT 2
19531: ARRAY
19532: PPUSH
19533: CALL_OW 429
// end ; end ;
19537: LD_VAR 0 1
19541: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19542: LD_EXP 22
19546: PUSH
19547: LD_EXP 44
19551: AND
19552: IFFALSE 19564
19554: GO 19556
19556: DISABLE
// YouLost (  ) ;
19557: LD_STRING 
19559: PPUSH
19560: CALL_OW 104
19564: END
// every 0 0$1 trigger StreamModeActive and sFog do
19565: LD_EXP 22
19569: PUSH
19570: LD_EXP 43
19574: AND
19575: IFFALSE 19589
19577: GO 19579
19579: DISABLE
// FogOff ( your_side ) ;
19580: LD_OWVAR 2
19584: PPUSH
19585: CALL_OW 344
19589: END
// every 0 0$1 trigger StreamModeActive and sSun do
19590: LD_EXP 22
19594: PUSH
19595: LD_EXP 45
19599: AND
19600: IFFALSE 19628
19602: GO 19604
19604: DISABLE
// begin solar_recharge_percent := 0 ;
19605: LD_ADDR_OWVAR 79
19609: PUSH
19610: LD_INT 0
19612: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19613: LD_INT 10500
19615: PPUSH
19616: CALL_OW 67
// solar_recharge_percent := 100 ;
19620: LD_ADDR_OWVAR 79
19624: PUSH
19625: LD_INT 100
19627: ST_TO_ADDR
// end ;
19628: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19629: LD_EXP 22
19633: PUSH
19634: LD_EXP 46
19638: AND
19639: IFFALSE 19878
19641: GO 19643
19643: DISABLE
19644: LD_INT 0
19646: PPUSH
19647: PPUSH
19648: PPUSH
// begin tmp := [ ] ;
19649: LD_ADDR_VAR 0 3
19653: PUSH
19654: EMPTY
19655: ST_TO_ADDR
// for i := 1 to 6 do
19656: LD_ADDR_VAR 0 1
19660: PUSH
19661: DOUBLE
19662: LD_INT 1
19664: DEC
19665: ST_TO_ADDR
19666: LD_INT 6
19668: PUSH
19669: FOR_TO
19670: IFFALSE 19775
// begin uc_nation := nation_nature ;
19672: LD_ADDR_OWVAR 21
19676: PUSH
19677: LD_INT 0
19679: ST_TO_ADDR
// uc_side := 0 ;
19680: LD_ADDR_OWVAR 20
19684: PUSH
19685: LD_INT 0
19687: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19688: LD_ADDR_OWVAR 29
19692: PUSH
19693: LD_INT 12
19695: PUSH
19696: LD_INT 12
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: ST_TO_ADDR
// hc_agressivity := 20 ;
19703: LD_ADDR_OWVAR 35
19707: PUSH
19708: LD_INT 20
19710: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19711: LD_ADDR_OWVAR 28
19715: PUSH
19716: LD_INT 17
19718: ST_TO_ADDR
// hc_gallery :=  ;
19719: LD_ADDR_OWVAR 33
19723: PUSH
19724: LD_STRING 
19726: ST_TO_ADDR
// hc_name :=  ;
19727: LD_ADDR_OWVAR 26
19731: PUSH
19732: LD_STRING 
19734: ST_TO_ADDR
// un := CreateHuman ;
19735: LD_ADDR_VAR 0 2
19739: PUSH
19740: CALL_OW 44
19744: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19745: LD_VAR 0 2
19749: PPUSH
19750: LD_INT 1
19752: PPUSH
19753: CALL_OW 51
// tmp := tmp ^ un ;
19757: LD_ADDR_VAR 0 3
19761: PUSH
19762: LD_VAR 0 3
19766: PUSH
19767: LD_VAR 0 2
19771: ADD
19772: ST_TO_ADDR
// end ;
19773: GO 19669
19775: POP
19776: POP
// repeat wait ( 0 0$1 ) ;
19777: LD_INT 35
19779: PPUSH
19780: CALL_OW 67
// for un in tmp do
19784: LD_ADDR_VAR 0 2
19788: PUSH
19789: LD_VAR 0 3
19793: PUSH
19794: FOR_IN
19795: IFFALSE 19869
// begin if IsDead ( un ) then
19797: LD_VAR 0 2
19801: PPUSH
19802: CALL_OW 301
19806: IFFALSE 19826
// begin tmp := tmp diff un ;
19808: LD_ADDR_VAR 0 3
19812: PUSH
19813: LD_VAR 0 3
19817: PUSH
19818: LD_VAR 0 2
19822: DIFF
19823: ST_TO_ADDR
// continue ;
19824: GO 19794
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19826: LD_VAR 0 2
19830: PPUSH
19831: LD_INT 3
19833: PUSH
19834: LD_INT 22
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PPUSH
19848: CALL_OW 69
19852: PPUSH
19853: LD_VAR 0 2
19857: PPUSH
19858: CALL_OW 74
19862: PPUSH
19863: CALL_OW 115
// end ;
19867: GO 19794
19869: POP
19870: POP
// until not tmp ;
19871: LD_VAR 0 3
19875: NOT
19876: IFFALSE 19777
// end ;
19878: PPOPN 3
19880: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19881: LD_EXP 22
19885: PUSH
19886: LD_EXP 47
19890: AND
19891: IFFALSE 19945
19893: GO 19895
19895: DISABLE
// begin ToLua ( displayTroll(); ) ;
19896: LD_STRING displayTroll();
19898: PPUSH
19899: CALL_OW 559
// wait ( 3 3$00 ) ;
19903: LD_INT 6300
19905: PPUSH
19906: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19910: LD_STRING hideTroll();
19912: PPUSH
19913: CALL_OW 559
// wait ( 1 1$00 ) ;
19917: LD_INT 2100
19919: PPUSH
19920: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19924: LD_STRING displayTroll();
19926: PPUSH
19927: CALL_OW 559
// wait ( 1 1$00 ) ;
19931: LD_INT 2100
19933: PPUSH
19934: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19938: LD_STRING hideTroll();
19940: PPUSH
19941: CALL_OW 559
// end ;
19945: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19946: LD_EXP 22
19950: PUSH
19951: LD_EXP 48
19955: AND
19956: IFFALSE 20019
19958: GO 19960
19960: DISABLE
19961: LD_INT 0
19963: PPUSH
// begin p := 0 ;
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// repeat game_speed := 1 ;
19972: LD_ADDR_OWVAR 65
19976: PUSH
19977: LD_INT 1
19979: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19980: LD_INT 35
19982: PPUSH
19983: CALL_OW 67
// p := p + 1 ;
19987: LD_ADDR_VAR 0 1
19991: PUSH
19992: LD_VAR 0 1
19996: PUSH
19997: LD_INT 1
19999: PLUS
20000: ST_TO_ADDR
// until p >= 60 ;
20001: LD_VAR 0 1
20005: PUSH
20006: LD_INT 60
20008: GREATEREQUAL
20009: IFFALSE 19972
// game_speed := 4 ;
20011: LD_ADDR_OWVAR 65
20015: PUSH
20016: LD_INT 4
20018: ST_TO_ADDR
// end ;
20019: PPOPN 1
20021: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20022: LD_EXP 22
20026: PUSH
20027: LD_EXP 49
20031: AND
20032: IFFALSE 20178
20034: GO 20036
20036: DISABLE
20037: LD_INT 0
20039: PPUSH
20040: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20041: LD_ADDR_VAR 0 1
20045: PUSH
20046: LD_INT 22
20048: PUSH
20049: LD_OWVAR 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: LD_INT 30
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 30
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PPUSH
20090: CALL_OW 69
20094: ST_TO_ADDR
// if not depot then
20095: LD_VAR 0 1
20099: NOT
20100: IFFALSE 20104
// exit ;
20102: GO 20178
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20104: LD_ADDR_VAR 0 2
20108: PUSH
20109: LD_VAR 0 1
20113: PUSH
20114: LD_INT 1
20116: PPUSH
20117: LD_VAR 0 1
20121: PPUSH
20122: CALL_OW 12
20126: ARRAY
20127: PPUSH
20128: CALL_OW 274
20132: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20133: LD_VAR 0 2
20137: PPUSH
20138: LD_INT 1
20140: PPUSH
20141: LD_INT 0
20143: PPUSH
20144: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20148: LD_VAR 0 2
20152: PPUSH
20153: LD_INT 2
20155: PPUSH
20156: LD_INT 0
20158: PPUSH
20159: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20163: LD_VAR 0 2
20167: PPUSH
20168: LD_INT 3
20170: PPUSH
20171: LD_INT 0
20173: PPUSH
20174: CALL_OW 277
// end ;
20178: PPOPN 2
20180: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20181: LD_EXP 22
20185: PUSH
20186: LD_EXP 50
20190: AND
20191: IFFALSE 20288
20193: GO 20195
20195: DISABLE
20196: LD_INT 0
20198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20199: LD_ADDR_VAR 0 1
20203: PUSH
20204: LD_INT 22
20206: PUSH
20207: LD_OWVAR 2
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 21
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 3
20228: PUSH
20229: LD_INT 23
20231: PUSH
20232: LD_INT 0
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: LIST
20247: PPUSH
20248: CALL_OW 69
20252: ST_TO_ADDR
// if not tmp then
20253: LD_VAR 0 1
20257: NOT
20258: IFFALSE 20262
// exit ;
20260: GO 20288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20262: LD_VAR 0 1
20266: PUSH
20267: LD_INT 1
20269: PPUSH
20270: LD_VAR 0 1
20274: PPUSH
20275: CALL_OW 12
20279: ARRAY
20280: PPUSH
20281: LD_INT 200
20283: PPUSH
20284: CALL_OW 234
// end ;
20288: PPOPN 1
20290: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20291: LD_EXP 22
20295: PUSH
20296: LD_EXP 51
20300: AND
20301: IFFALSE 20380
20303: GO 20305
20305: DISABLE
20306: LD_INT 0
20308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20309: LD_ADDR_VAR 0 1
20313: PUSH
20314: LD_INT 22
20316: PUSH
20317: LD_OWVAR 2
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 21
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PPUSH
20340: CALL_OW 69
20344: ST_TO_ADDR
// if not tmp then
20345: LD_VAR 0 1
20349: NOT
20350: IFFALSE 20354
// exit ;
20352: GO 20380
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20354: LD_VAR 0 1
20358: PUSH
20359: LD_INT 1
20361: PPUSH
20362: LD_VAR 0 1
20366: PPUSH
20367: CALL_OW 12
20371: ARRAY
20372: PPUSH
20373: LD_INT 60
20375: PPUSH
20376: CALL_OW 234
// end ;
20380: PPOPN 1
20382: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20383: LD_EXP 22
20387: PUSH
20388: LD_EXP 52
20392: AND
20393: IFFALSE 20492
20395: GO 20397
20397: DISABLE
20398: LD_INT 0
20400: PPUSH
20401: PPUSH
// begin enable ;
20402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20403: LD_ADDR_VAR 0 1
20407: PUSH
20408: LD_INT 22
20410: PUSH
20411: LD_OWVAR 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 61
20422: PUSH
20423: EMPTY
20424: LIST
20425: PUSH
20426: LD_INT 33
20428: PUSH
20429: LD_INT 2
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: LIST
20440: PPUSH
20441: CALL_OW 69
20445: ST_TO_ADDR
// if not tmp then
20446: LD_VAR 0 1
20450: NOT
20451: IFFALSE 20455
// exit ;
20453: GO 20492
// for i in tmp do
20455: LD_ADDR_VAR 0 2
20459: PUSH
20460: LD_VAR 0 1
20464: PUSH
20465: FOR_IN
20466: IFFALSE 20490
// if IsControledBy ( i ) then
20468: LD_VAR 0 2
20472: PPUSH
20473: CALL_OW 312
20477: IFFALSE 20488
// ComUnlink ( i ) ;
20479: LD_VAR 0 2
20483: PPUSH
20484: CALL_OW 136
20488: GO 20465
20490: POP
20491: POP
// end ;
20492: PPOPN 2
20494: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20495: LD_EXP 22
20499: PUSH
20500: LD_EXP 53
20504: AND
20505: IFFALSE 20645
20507: GO 20509
20509: DISABLE
20510: LD_INT 0
20512: PPUSH
20513: PPUSH
// begin ToLua ( displayPowell(); ) ;
20514: LD_STRING displayPowell();
20516: PPUSH
20517: CALL_OW 559
// uc_side := 0 ;
20521: LD_ADDR_OWVAR 20
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// uc_nation := 2 ;
20529: LD_ADDR_OWVAR 21
20533: PUSH
20534: LD_INT 2
20536: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20537: LD_ADDR_OWVAR 37
20541: PUSH
20542: LD_INT 14
20544: ST_TO_ADDR
// vc_engine := engine_siberite ;
20545: LD_ADDR_OWVAR 39
20549: PUSH
20550: LD_INT 3
20552: ST_TO_ADDR
// vc_control := control_apeman ;
20553: LD_ADDR_OWVAR 38
20557: PUSH
20558: LD_INT 5
20560: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20561: LD_ADDR_OWVAR 40
20565: PUSH
20566: LD_INT 29
20568: ST_TO_ADDR
// un := CreateVehicle ;
20569: LD_ADDR_VAR 0 2
20573: PUSH
20574: CALL_OW 45
20578: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20579: LD_VAR 0 2
20583: PPUSH
20584: LD_INT 1
20586: PPUSH
20587: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20591: LD_INT 35
20593: PPUSH
20594: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: LD_INT 22
20605: PUSH
20606: LD_OWVAR 2
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PPUSH
20615: CALL_OW 69
20619: PPUSH
20620: LD_VAR 0 2
20624: PPUSH
20625: CALL_OW 74
20629: PPUSH
20630: CALL_OW 115
// until IsDead ( un ) ;
20634: LD_VAR 0 2
20638: PPUSH
20639: CALL_OW 301
20643: IFFALSE 20591
// end ;
20645: PPOPN 2
20647: END
// every 0 0$1 trigger StreamModeActive and sStu do
20648: LD_EXP 22
20652: PUSH
20653: LD_EXP 61
20657: AND
20658: IFFALSE 20674
20660: GO 20662
20662: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20663: LD_STRING displayStucuk();
20665: PPUSH
20666: CALL_OW 559
// ResetFog ;
20670: CALL_OW 335
// end ;
20674: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20675: LD_EXP 22
20679: PUSH
20680: LD_EXP 54
20684: AND
20685: IFFALSE 20826
20687: GO 20689
20689: DISABLE
20690: LD_INT 0
20692: PPUSH
20693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20694: LD_ADDR_VAR 0 2
20698: PUSH
20699: LD_INT 22
20701: PUSH
20702: LD_OWVAR 2
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 21
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PPUSH
20725: CALL_OW 69
20729: ST_TO_ADDR
// if not tmp then
20730: LD_VAR 0 2
20734: NOT
20735: IFFALSE 20739
// exit ;
20737: GO 20826
// un := tmp [ rand ( 1 , tmp ) ] ;
20739: LD_ADDR_VAR 0 1
20743: PUSH
20744: LD_VAR 0 2
20748: PUSH
20749: LD_INT 1
20751: PPUSH
20752: LD_VAR 0 2
20756: PPUSH
20757: CALL_OW 12
20761: ARRAY
20762: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20763: LD_VAR 0 1
20767: PPUSH
20768: LD_INT 0
20770: PPUSH
20771: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20775: LD_VAR 0 1
20779: PPUSH
20780: LD_OWVAR 3
20784: PUSH
20785: LD_VAR 0 1
20789: DIFF
20790: PPUSH
20791: LD_VAR 0 1
20795: PPUSH
20796: CALL_OW 74
20800: PPUSH
20801: CALL_OW 115
// wait ( 0 0$20 ) ;
20805: LD_INT 700
20807: PPUSH
20808: CALL_OW 67
// SetSide ( un , your_side ) ;
20812: LD_VAR 0 1
20816: PPUSH
20817: LD_OWVAR 2
20821: PPUSH
20822: CALL_OW 235
// end ;
20826: PPOPN 2
20828: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20829: LD_EXP 22
20833: PUSH
20834: LD_EXP 55
20838: AND
20839: IFFALSE 20945
20841: GO 20843
20843: DISABLE
20844: LD_INT 0
20846: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20847: LD_ADDR_VAR 0 1
20851: PUSH
20852: LD_INT 22
20854: PUSH
20855: LD_OWVAR 2
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: LD_INT 30
20869: PUSH
20870: LD_INT 0
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 30
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PPUSH
20896: CALL_OW 69
20900: ST_TO_ADDR
// if not depot then
20901: LD_VAR 0 1
20905: NOT
20906: IFFALSE 20910
// exit ;
20908: GO 20945
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20910: LD_VAR 0 1
20914: PUSH
20915: LD_INT 1
20917: ARRAY
20918: PPUSH
20919: CALL_OW 250
20923: PPUSH
20924: LD_VAR 0 1
20928: PUSH
20929: LD_INT 1
20931: ARRAY
20932: PPUSH
20933: CALL_OW 251
20937: PPUSH
20938: LD_INT 70
20940: PPUSH
20941: CALL_OW 495
// end ;
20945: PPOPN 1
20947: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20948: LD_EXP 22
20952: PUSH
20953: LD_EXP 56
20957: AND
20958: IFFALSE 21169
20960: GO 20962
20962: DISABLE
20963: LD_INT 0
20965: PPUSH
20966: PPUSH
20967: PPUSH
20968: PPUSH
20969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20970: LD_ADDR_VAR 0 5
20974: PUSH
20975: LD_INT 22
20977: PUSH
20978: LD_OWVAR 2
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 21
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PPUSH
21001: CALL_OW 69
21005: ST_TO_ADDR
// if not tmp then
21006: LD_VAR 0 5
21010: NOT
21011: IFFALSE 21015
// exit ;
21013: GO 21169
// for i in tmp do
21015: LD_ADDR_VAR 0 1
21019: PUSH
21020: LD_VAR 0 5
21024: PUSH
21025: FOR_IN
21026: IFFALSE 21167
// begin d := rand ( 0 , 5 ) ;
21028: LD_ADDR_VAR 0 4
21032: PUSH
21033: LD_INT 0
21035: PPUSH
21036: LD_INT 5
21038: PPUSH
21039: CALL_OW 12
21043: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21044: LD_ADDR_VAR 0 2
21048: PUSH
21049: LD_VAR 0 1
21053: PPUSH
21054: CALL_OW 250
21058: PPUSH
21059: LD_VAR 0 4
21063: PPUSH
21064: LD_INT 3
21066: PPUSH
21067: LD_INT 12
21069: PPUSH
21070: CALL_OW 12
21074: PPUSH
21075: CALL_OW 272
21079: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21080: LD_ADDR_VAR 0 3
21084: PUSH
21085: LD_VAR 0 1
21089: PPUSH
21090: CALL_OW 251
21094: PPUSH
21095: LD_VAR 0 4
21099: PPUSH
21100: LD_INT 3
21102: PPUSH
21103: LD_INT 12
21105: PPUSH
21106: CALL_OW 12
21110: PPUSH
21111: CALL_OW 273
21115: ST_TO_ADDR
// if ValidHex ( x , y ) then
21116: LD_VAR 0 2
21120: PPUSH
21121: LD_VAR 0 3
21125: PPUSH
21126: CALL_OW 488
21130: IFFALSE 21165
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21132: LD_VAR 0 1
21136: PPUSH
21137: LD_VAR 0 2
21141: PPUSH
21142: LD_VAR 0 3
21146: PPUSH
21147: LD_INT 3
21149: PPUSH
21150: LD_INT 6
21152: PPUSH
21153: CALL_OW 12
21157: PPUSH
21158: LD_INT 1
21160: PPUSH
21161: CALL_OW 483
// end ;
21165: GO 21025
21167: POP
21168: POP
// end ;
21169: PPOPN 5
21171: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21172: LD_EXP 22
21176: PUSH
21177: LD_EXP 57
21181: AND
21182: IFFALSE 21276
21184: GO 21186
21186: DISABLE
21187: LD_INT 0
21189: PPUSH
21190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21191: LD_ADDR_VAR 0 2
21195: PUSH
21196: LD_INT 22
21198: PUSH
21199: LD_OWVAR 2
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 32
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 21
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: PPUSH
21233: CALL_OW 69
21237: ST_TO_ADDR
// if not tmp then
21238: LD_VAR 0 2
21242: NOT
21243: IFFALSE 21247
// exit ;
21245: GO 21276
// for i in tmp do
21247: LD_ADDR_VAR 0 1
21251: PUSH
21252: LD_VAR 0 2
21256: PUSH
21257: FOR_IN
21258: IFFALSE 21274
// SetFuel ( i , 0 ) ;
21260: LD_VAR 0 1
21264: PPUSH
21265: LD_INT 0
21267: PPUSH
21268: CALL_OW 240
21272: GO 21257
21274: POP
21275: POP
// end ;
21276: PPOPN 2
21278: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21279: LD_EXP 22
21283: PUSH
21284: LD_EXP 58
21288: AND
21289: IFFALSE 21355
21291: GO 21293
21293: DISABLE
21294: LD_INT 0
21296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21297: LD_ADDR_VAR 0 1
21301: PUSH
21302: LD_INT 22
21304: PUSH
21305: LD_OWVAR 2
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 30
21316: PUSH
21317: LD_INT 29
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PPUSH
21328: CALL_OW 69
21332: ST_TO_ADDR
// if not tmp then
21333: LD_VAR 0 1
21337: NOT
21338: IFFALSE 21342
// exit ;
21340: GO 21355
// DestroyUnit ( tmp [ 1 ] ) ;
21342: LD_VAR 0 1
21346: PUSH
21347: LD_INT 1
21349: ARRAY
21350: PPUSH
21351: CALL_OW 65
// end ;
21355: PPOPN 1
21357: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21358: LD_EXP 22
21362: PUSH
21363: LD_EXP 60
21367: AND
21368: IFFALSE 21497
21370: GO 21372
21372: DISABLE
21373: LD_INT 0
21375: PPUSH
// begin uc_side := 0 ;
21376: LD_ADDR_OWVAR 20
21380: PUSH
21381: LD_INT 0
21383: ST_TO_ADDR
// uc_nation := nation_arabian ;
21384: LD_ADDR_OWVAR 21
21388: PUSH
21389: LD_INT 2
21391: ST_TO_ADDR
// hc_gallery :=  ;
21392: LD_ADDR_OWVAR 33
21396: PUSH
21397: LD_STRING 
21399: ST_TO_ADDR
// hc_name :=  ;
21400: LD_ADDR_OWVAR 26
21404: PUSH
21405: LD_STRING 
21407: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21408: LD_INT 1
21410: PPUSH
21411: LD_INT 11
21413: PPUSH
21414: LD_INT 10
21416: PPUSH
21417: CALL_OW 380
// un := CreateHuman ;
21421: LD_ADDR_VAR 0 1
21425: PUSH
21426: CALL_OW 44
21430: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21431: LD_VAR 0 1
21435: PPUSH
21436: LD_INT 1
21438: PPUSH
21439: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21443: LD_INT 35
21445: PPUSH
21446: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21450: LD_VAR 0 1
21454: PPUSH
21455: LD_INT 22
21457: PUSH
21458: LD_OWVAR 2
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PPUSH
21467: CALL_OW 69
21471: PPUSH
21472: LD_VAR 0 1
21476: PPUSH
21477: CALL_OW 74
21481: PPUSH
21482: CALL_OW 115
// until IsDead ( un ) ;
21486: LD_VAR 0 1
21490: PPUSH
21491: CALL_OW 301
21495: IFFALSE 21443
// end ;
21497: PPOPN 1
21499: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21500: LD_EXP 22
21504: PUSH
21505: LD_EXP 62
21509: AND
21510: IFFALSE 21522
21512: GO 21514
21514: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21515: LD_STRING earthquake(getX(game), 0, 32)
21517: PPUSH
21518: CALL_OW 559
21522: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21523: LD_EXP 22
21527: PUSH
21528: LD_EXP 63
21532: AND
21533: IFFALSE 21624
21535: GO 21537
21537: DISABLE
21538: LD_INT 0
21540: PPUSH
// begin enable ;
21541: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21542: LD_ADDR_VAR 0 1
21546: PUSH
21547: LD_INT 22
21549: PUSH
21550: LD_OWVAR 2
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 21
21561: PUSH
21562: LD_INT 2
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 33
21571: PUSH
21572: LD_INT 3
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: LIST
21583: PPUSH
21584: CALL_OW 69
21588: ST_TO_ADDR
// if not tmp then
21589: LD_VAR 0 1
21593: NOT
21594: IFFALSE 21598
// exit ;
21596: GO 21624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21598: LD_VAR 0 1
21602: PUSH
21603: LD_INT 1
21605: PPUSH
21606: LD_VAR 0 1
21610: PPUSH
21611: CALL_OW 12
21615: ARRAY
21616: PPUSH
21617: LD_INT 1
21619: PPUSH
21620: CALL_OW 234
// end ;
21624: PPOPN 1
21626: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21627: LD_EXP 22
21631: PUSH
21632: LD_EXP 64
21636: AND
21637: IFFALSE 21778
21639: GO 21641
21641: DISABLE
21642: LD_INT 0
21644: PPUSH
21645: PPUSH
21646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21647: LD_ADDR_VAR 0 3
21651: PUSH
21652: LD_INT 22
21654: PUSH
21655: LD_OWVAR 2
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 25
21666: PUSH
21667: LD_INT 1
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PPUSH
21678: CALL_OW 69
21682: ST_TO_ADDR
// if not tmp then
21683: LD_VAR 0 3
21687: NOT
21688: IFFALSE 21692
// exit ;
21690: GO 21778
// un := tmp [ rand ( 1 , tmp ) ] ;
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: LD_VAR 0 3
21701: PUSH
21702: LD_INT 1
21704: PPUSH
21705: LD_VAR 0 3
21709: PPUSH
21710: CALL_OW 12
21714: ARRAY
21715: ST_TO_ADDR
// if Crawls ( un ) then
21716: LD_VAR 0 2
21720: PPUSH
21721: CALL_OW 318
21725: IFFALSE 21736
// ComWalk ( un ) ;
21727: LD_VAR 0 2
21731: PPUSH
21732: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21736: LD_VAR 0 2
21740: PPUSH
21741: LD_INT 9
21743: PPUSH
21744: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21748: LD_INT 28
21750: PPUSH
21751: LD_OWVAR 2
21755: PPUSH
21756: LD_INT 2
21758: PPUSH
21759: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21763: LD_INT 29
21765: PPUSH
21766: LD_OWVAR 2
21770: PPUSH
21771: LD_INT 2
21773: PPUSH
21774: CALL_OW 322
// end ;
21778: PPOPN 3
21780: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21781: LD_EXP 22
21785: PUSH
21786: LD_EXP 65
21790: AND
21791: IFFALSE 21902
21793: GO 21795
21795: DISABLE
21796: LD_INT 0
21798: PPUSH
21799: PPUSH
21800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21801: LD_ADDR_VAR 0 3
21805: PUSH
21806: LD_INT 22
21808: PUSH
21809: LD_OWVAR 2
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 25
21820: PUSH
21821: LD_INT 1
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PPUSH
21832: CALL_OW 69
21836: ST_TO_ADDR
// if not tmp then
21837: LD_VAR 0 3
21841: NOT
21842: IFFALSE 21846
// exit ;
21844: GO 21902
// un := tmp [ rand ( 1 , tmp ) ] ;
21846: LD_ADDR_VAR 0 2
21850: PUSH
21851: LD_VAR 0 3
21855: PUSH
21856: LD_INT 1
21858: PPUSH
21859: LD_VAR 0 3
21863: PPUSH
21864: CALL_OW 12
21868: ARRAY
21869: ST_TO_ADDR
// if Crawls ( un ) then
21870: LD_VAR 0 2
21874: PPUSH
21875: CALL_OW 318
21879: IFFALSE 21890
// ComWalk ( un ) ;
21881: LD_VAR 0 2
21885: PPUSH
21886: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21890: LD_VAR 0 2
21894: PPUSH
21895: LD_INT 8
21897: PPUSH
21898: CALL_OW 336
// end ;
21902: PPOPN 3
21904: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21905: LD_EXP 22
21909: PUSH
21910: LD_EXP 66
21914: AND
21915: IFFALSE 22059
21917: GO 21919
21919: DISABLE
21920: LD_INT 0
21922: PPUSH
21923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21924: LD_ADDR_VAR 0 2
21928: PUSH
21929: LD_INT 22
21931: PUSH
21932: LD_OWVAR 2
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 21
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 2
21953: PUSH
21954: LD_INT 34
21956: PUSH
21957: LD_INT 12
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 34
21966: PUSH
21967: LD_INT 51
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 34
21976: PUSH
21977: LD_INT 32
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: PPUSH
21995: CALL_OW 69
21999: ST_TO_ADDR
// if not tmp then
22000: LD_VAR 0 2
22004: NOT
22005: IFFALSE 22009
// exit ;
22007: GO 22059
// for i in tmp do
22009: LD_ADDR_VAR 0 1
22013: PUSH
22014: LD_VAR 0 2
22018: PUSH
22019: FOR_IN
22020: IFFALSE 22057
// if GetCargo ( i , mat_artifact ) = 0 then
22022: LD_VAR 0 1
22026: PPUSH
22027: LD_INT 4
22029: PPUSH
22030: CALL_OW 289
22034: PUSH
22035: LD_INT 0
22037: EQUAL
22038: IFFALSE 22055
// SetCargo ( i , mat_siberit , 100 ) ;
22040: LD_VAR 0 1
22044: PPUSH
22045: LD_INT 3
22047: PPUSH
22048: LD_INT 100
22050: PPUSH
22051: CALL_OW 290
22055: GO 22019
22057: POP
22058: POP
// end ;
22059: PPOPN 2
22061: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22062: LD_EXP 22
22066: PUSH
22067: LD_EXP 67
22071: AND
22072: IFFALSE 22255
22074: GO 22076
22076: DISABLE
22077: LD_INT 0
22079: PPUSH
22080: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22081: LD_ADDR_VAR 0 2
22085: PUSH
22086: LD_INT 22
22088: PUSH
22089: LD_OWVAR 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 69
22102: ST_TO_ADDR
// if not tmp then
22103: LD_VAR 0 2
22107: NOT
22108: IFFALSE 22112
// exit ;
22110: GO 22255
// for i := 1 to 2 do
22112: LD_ADDR_VAR 0 1
22116: PUSH
22117: DOUBLE
22118: LD_INT 1
22120: DEC
22121: ST_TO_ADDR
22122: LD_INT 2
22124: PUSH
22125: FOR_TO
22126: IFFALSE 22253
// begin uc_side := your_side ;
22128: LD_ADDR_OWVAR 20
22132: PUSH
22133: LD_OWVAR 2
22137: ST_TO_ADDR
// uc_nation := nation_american ;
22138: LD_ADDR_OWVAR 21
22142: PUSH
22143: LD_INT 1
22145: ST_TO_ADDR
// vc_chassis := us_morphling ;
22146: LD_ADDR_OWVAR 37
22150: PUSH
22151: LD_INT 5
22153: ST_TO_ADDR
// vc_engine := engine_siberite ;
22154: LD_ADDR_OWVAR 39
22158: PUSH
22159: LD_INT 3
22161: ST_TO_ADDR
// vc_control := control_computer ;
22162: LD_ADDR_OWVAR 38
22166: PUSH
22167: LD_INT 3
22169: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22170: LD_ADDR_OWVAR 40
22174: PUSH
22175: LD_INT 10
22177: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22178: LD_VAR 0 2
22182: PUSH
22183: LD_INT 1
22185: ARRAY
22186: PPUSH
22187: CALL_OW 310
22191: NOT
22192: IFFALSE 22239
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22194: CALL_OW 45
22198: PPUSH
22199: LD_VAR 0 2
22203: PUSH
22204: LD_INT 1
22206: ARRAY
22207: PPUSH
22208: CALL_OW 250
22212: PPUSH
22213: LD_VAR 0 2
22217: PUSH
22218: LD_INT 1
22220: ARRAY
22221: PPUSH
22222: CALL_OW 251
22226: PPUSH
22227: LD_INT 12
22229: PPUSH
22230: LD_INT 1
22232: PPUSH
22233: CALL_OW 50
22237: GO 22251
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22239: CALL_OW 45
22243: PPUSH
22244: LD_INT 1
22246: PPUSH
22247: CALL_OW 51
// end ;
22251: GO 22125
22253: POP
22254: POP
// end ;
22255: PPOPN 2
22257: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22258: LD_EXP 22
22262: PUSH
22263: LD_EXP 68
22267: AND
22268: IFFALSE 22490
22270: GO 22272
22272: DISABLE
22273: LD_INT 0
22275: PPUSH
22276: PPUSH
22277: PPUSH
22278: PPUSH
22279: PPUSH
22280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22281: LD_ADDR_VAR 0 6
22285: PUSH
22286: LD_INT 22
22288: PUSH
22289: LD_OWVAR 2
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 21
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 3
22310: PUSH
22311: LD_INT 23
22313: PUSH
22314: LD_INT 0
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: LIST
22329: PPUSH
22330: CALL_OW 69
22334: ST_TO_ADDR
// if not tmp then
22335: LD_VAR 0 6
22339: NOT
22340: IFFALSE 22344
// exit ;
22342: GO 22490
// s1 := rand ( 1 , 4 ) ;
22344: LD_ADDR_VAR 0 2
22348: PUSH
22349: LD_INT 1
22351: PPUSH
22352: LD_INT 4
22354: PPUSH
22355: CALL_OW 12
22359: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22360: LD_ADDR_VAR 0 4
22364: PUSH
22365: LD_VAR 0 6
22369: PUSH
22370: LD_INT 1
22372: ARRAY
22373: PPUSH
22374: LD_VAR 0 2
22378: PPUSH
22379: CALL_OW 259
22383: ST_TO_ADDR
// if s1 = 1 then
22384: LD_VAR 0 2
22388: PUSH
22389: LD_INT 1
22391: EQUAL
22392: IFFALSE 22412
// s2 := rand ( 2 , 4 ) else
22394: LD_ADDR_VAR 0 3
22398: PUSH
22399: LD_INT 2
22401: PPUSH
22402: LD_INT 4
22404: PPUSH
22405: CALL_OW 12
22409: ST_TO_ADDR
22410: GO 22420
// s2 := 1 ;
22412: LD_ADDR_VAR 0 3
22416: PUSH
22417: LD_INT 1
22419: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22420: LD_ADDR_VAR 0 5
22424: PUSH
22425: LD_VAR 0 6
22429: PUSH
22430: LD_INT 1
22432: ARRAY
22433: PPUSH
22434: LD_VAR 0 3
22438: PPUSH
22439: CALL_OW 259
22443: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22444: LD_VAR 0 6
22448: PUSH
22449: LD_INT 1
22451: ARRAY
22452: PPUSH
22453: LD_VAR 0 2
22457: PPUSH
22458: LD_VAR 0 5
22462: PPUSH
22463: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22467: LD_VAR 0 6
22471: PUSH
22472: LD_INT 1
22474: ARRAY
22475: PPUSH
22476: LD_VAR 0 3
22480: PPUSH
22481: LD_VAR 0 4
22485: PPUSH
22486: CALL_OW 237
// end ;
22490: PPOPN 6
22492: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22493: LD_EXP 22
22497: PUSH
22498: LD_EXP 69
22502: AND
22503: IFFALSE 22582
22505: GO 22507
22507: DISABLE
22508: LD_INT 0
22510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22511: LD_ADDR_VAR 0 1
22515: PUSH
22516: LD_INT 22
22518: PUSH
22519: LD_OWVAR 2
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 30
22530: PUSH
22531: LD_INT 3
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PPUSH
22542: CALL_OW 69
22546: ST_TO_ADDR
// if not tmp then
22547: LD_VAR 0 1
22551: NOT
22552: IFFALSE 22556
// exit ;
22554: GO 22582
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22556: LD_VAR 0 1
22560: PUSH
22561: LD_INT 1
22563: PPUSH
22564: LD_VAR 0 1
22568: PPUSH
22569: CALL_OW 12
22573: ARRAY
22574: PPUSH
22575: LD_INT 1
22577: PPUSH
22578: CALL_OW 234
// end ;
22582: PPOPN 1
22584: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22585: LD_EXP 22
22589: PUSH
22590: LD_EXP 70
22594: AND
22595: IFFALSE 22707
22597: GO 22599
22599: DISABLE
22600: LD_INT 0
22602: PPUSH
22603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22604: LD_ADDR_VAR 0 2
22608: PUSH
22609: LD_INT 22
22611: PUSH
22612: LD_OWVAR 2
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 2
22623: PUSH
22624: LD_INT 30
22626: PUSH
22627: LD_INT 27
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 30
22636: PUSH
22637: LD_INT 26
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 30
22646: PUSH
22647: LD_INT 28
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 69
22668: ST_TO_ADDR
// if not tmp then
22669: LD_VAR 0 2
22673: NOT
22674: IFFALSE 22678
// exit ;
22676: GO 22707
// for i in tmp do
22678: LD_ADDR_VAR 0 1
22682: PUSH
22683: LD_VAR 0 2
22687: PUSH
22688: FOR_IN
22689: IFFALSE 22705
// SetLives ( i , 1 ) ;
22691: LD_VAR 0 1
22695: PPUSH
22696: LD_INT 1
22698: PPUSH
22699: CALL_OW 234
22703: GO 22688
22705: POP
22706: POP
// end ;
22707: PPOPN 2
22709: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22710: LD_EXP 22
22714: PUSH
22715: LD_EXP 71
22719: AND
22720: IFFALSE 23007
22722: GO 22724
22724: DISABLE
22725: LD_INT 0
22727: PPUSH
22728: PPUSH
22729: PPUSH
// begin i := rand ( 1 , 7 ) ;
22730: LD_ADDR_VAR 0 1
22734: PUSH
22735: LD_INT 1
22737: PPUSH
22738: LD_INT 7
22740: PPUSH
22741: CALL_OW 12
22745: ST_TO_ADDR
// case i of 1 :
22746: LD_VAR 0 1
22750: PUSH
22751: LD_INT 1
22753: DOUBLE
22754: EQUAL
22755: IFTRUE 22759
22757: GO 22769
22759: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22760: LD_STRING earthquake(getX(game), 0, 32)
22762: PPUSH
22763: CALL_OW 559
22767: GO 23007
22769: LD_INT 2
22771: DOUBLE
22772: EQUAL
22773: IFTRUE 22777
22775: GO 22791
22777: POP
// begin ToLua ( displayStucuk(); ) ;
22778: LD_STRING displayStucuk();
22780: PPUSH
22781: CALL_OW 559
// ResetFog ;
22785: CALL_OW 335
// end ; 3 :
22789: GO 23007
22791: LD_INT 3
22793: DOUBLE
22794: EQUAL
22795: IFTRUE 22799
22797: GO 22903
22799: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22800: LD_ADDR_VAR 0 2
22804: PUSH
22805: LD_INT 22
22807: PUSH
22808: LD_OWVAR 2
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 25
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PPUSH
22831: CALL_OW 69
22835: ST_TO_ADDR
// if not tmp then
22836: LD_VAR 0 2
22840: NOT
22841: IFFALSE 22845
// exit ;
22843: GO 23007
// un := tmp [ rand ( 1 , tmp ) ] ;
22845: LD_ADDR_VAR 0 3
22849: PUSH
22850: LD_VAR 0 2
22854: PUSH
22855: LD_INT 1
22857: PPUSH
22858: LD_VAR 0 2
22862: PPUSH
22863: CALL_OW 12
22867: ARRAY
22868: ST_TO_ADDR
// if Crawls ( un ) then
22869: LD_VAR 0 3
22873: PPUSH
22874: CALL_OW 318
22878: IFFALSE 22889
// ComWalk ( un ) ;
22880: LD_VAR 0 3
22884: PPUSH
22885: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22889: LD_VAR 0 3
22893: PPUSH
22894: LD_INT 8
22896: PPUSH
22897: CALL_OW 336
// end ; 4 :
22901: GO 23007
22903: LD_INT 4
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22911
22909: GO 22985
22911: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22912: LD_ADDR_VAR 0 2
22916: PUSH
22917: LD_INT 22
22919: PUSH
22920: LD_OWVAR 2
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 30
22931: PUSH
22932: LD_INT 29
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PPUSH
22943: CALL_OW 69
22947: ST_TO_ADDR
// if not tmp then
22948: LD_VAR 0 2
22952: NOT
22953: IFFALSE 22957
// exit ;
22955: GO 23007
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22957: LD_VAR 0 2
22961: PUSH
22962: LD_INT 1
22964: ARRAY
22965: PPUSH
22966: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22970: LD_VAR 0 2
22974: PUSH
22975: LD_INT 1
22977: ARRAY
22978: PPUSH
22979: CALL_OW 65
// end ; 5 .. 7 :
22983: GO 23007
22985: LD_INT 5
22987: DOUBLE
22988: GREATEREQUAL
22989: IFFALSE 22997
22991: LD_INT 7
22993: DOUBLE
22994: LESSEQUAL
22995: IFTRUE 22999
22997: GO 23006
22999: POP
// StreamSibBomb ; end ;
23000: CALL 19244 0 0
23004: GO 23007
23006: POP
// end ;
23007: PPOPN 3
23009: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23010: LD_EXP 22
23014: PUSH
23015: LD_EXP 72
23019: AND
23020: IFFALSE 23176
23022: GO 23024
23024: DISABLE
23025: LD_INT 0
23027: PPUSH
23028: PPUSH
23029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23030: LD_ADDR_VAR 0 2
23034: PUSH
23035: LD_INT 81
23037: PUSH
23038: LD_OWVAR 2
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 21
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 21
23062: PUSH
23063: LD_INT 2
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: LIST
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PPUSH
23079: CALL_OW 69
23083: ST_TO_ADDR
// if not tmp then
23084: LD_VAR 0 2
23088: NOT
23089: IFFALSE 23093
// exit ;
23091: GO 23176
// p := 0 ;
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: LD_INT 0
23100: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23101: LD_INT 35
23103: PPUSH
23104: CALL_OW 67
// p := p + 1 ;
23108: LD_ADDR_VAR 0 3
23112: PUSH
23113: LD_VAR 0 3
23117: PUSH
23118: LD_INT 1
23120: PLUS
23121: ST_TO_ADDR
// for i in tmp do
23122: LD_ADDR_VAR 0 1
23126: PUSH
23127: LD_VAR 0 2
23131: PUSH
23132: FOR_IN
23133: IFFALSE 23164
// if GetLives ( i ) < 1000 then
23135: LD_VAR 0 1
23139: PPUSH
23140: CALL_OW 256
23144: PUSH
23145: LD_INT 1000
23147: LESS
23148: IFFALSE 23162
// SetLives ( i , 1000 ) ;
23150: LD_VAR 0 1
23154: PPUSH
23155: LD_INT 1000
23157: PPUSH
23158: CALL_OW 234
23162: GO 23132
23164: POP
23165: POP
// until p > 20 ;
23166: LD_VAR 0 3
23170: PUSH
23171: LD_INT 20
23173: GREATER
23174: IFFALSE 23101
// end ;
23176: PPOPN 3
23178: END
// every 0 0$1 trigger StreamModeActive and sTime do
23179: LD_EXP 22
23183: PUSH
23184: LD_EXP 73
23188: AND
23189: IFFALSE 23224
23191: GO 23193
23193: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23194: LD_INT 28
23196: PPUSH
23197: LD_OWVAR 2
23201: PPUSH
23202: LD_INT 2
23204: PPUSH
23205: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23209: LD_INT 30
23211: PPUSH
23212: LD_OWVAR 2
23216: PPUSH
23217: LD_INT 2
23219: PPUSH
23220: CALL_OW 322
// end ;
23224: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23225: LD_EXP 22
23229: PUSH
23230: LD_EXP 74
23234: AND
23235: IFFALSE 23356
23237: GO 23239
23239: DISABLE
23240: LD_INT 0
23242: PPUSH
23243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23244: LD_ADDR_VAR 0 2
23248: PUSH
23249: LD_INT 22
23251: PUSH
23252: LD_OWVAR 2
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 21
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 3
23273: PUSH
23274: LD_INT 23
23276: PUSH
23277: LD_INT 0
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: PPUSH
23293: CALL_OW 69
23297: ST_TO_ADDR
// if not tmp then
23298: LD_VAR 0 2
23302: NOT
23303: IFFALSE 23307
// exit ;
23305: GO 23356
// for i in tmp do
23307: LD_ADDR_VAR 0 1
23311: PUSH
23312: LD_VAR 0 2
23316: PUSH
23317: FOR_IN
23318: IFFALSE 23354
// begin if Crawls ( i ) then
23320: LD_VAR 0 1
23324: PPUSH
23325: CALL_OW 318
23329: IFFALSE 23340
// ComWalk ( i ) ;
23331: LD_VAR 0 1
23335: PPUSH
23336: CALL_OW 138
// SetClass ( i , 2 ) ;
23340: LD_VAR 0 1
23344: PPUSH
23345: LD_INT 2
23347: PPUSH
23348: CALL_OW 336
// end ;
23352: GO 23317
23354: POP
23355: POP
// end ;
23356: PPOPN 2
23358: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23359: LD_EXP 22
23363: PUSH
23364: LD_EXP 75
23368: AND
23369: IFFALSE 23657
23371: GO 23373
23373: DISABLE
23374: LD_INT 0
23376: PPUSH
23377: PPUSH
23378: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23379: LD_OWVAR 2
23383: PPUSH
23384: LD_INT 9
23386: PPUSH
23387: LD_INT 1
23389: PPUSH
23390: LD_INT 1
23392: PPUSH
23393: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23397: LD_INT 9
23399: PPUSH
23400: LD_OWVAR 2
23404: PPUSH
23405: CALL_OW 343
// uc_side := 9 ;
23409: LD_ADDR_OWVAR 20
23413: PUSH
23414: LD_INT 9
23416: ST_TO_ADDR
// uc_nation := 2 ;
23417: LD_ADDR_OWVAR 21
23421: PUSH
23422: LD_INT 2
23424: ST_TO_ADDR
// hc_name := Dark Warrior ;
23425: LD_ADDR_OWVAR 26
23429: PUSH
23430: LD_STRING Dark Warrior
23432: ST_TO_ADDR
// hc_gallery :=  ;
23433: LD_ADDR_OWVAR 33
23437: PUSH
23438: LD_STRING 
23440: ST_TO_ADDR
// hc_noskilllimit := true ;
23441: LD_ADDR_OWVAR 76
23445: PUSH
23446: LD_INT 1
23448: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23449: LD_ADDR_OWVAR 31
23453: PUSH
23454: LD_INT 30
23456: PUSH
23457: LD_INT 30
23459: PUSH
23460: LD_INT 30
23462: PUSH
23463: LD_INT 30
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: ST_TO_ADDR
// un := CreateHuman ;
23472: LD_ADDR_VAR 0 3
23476: PUSH
23477: CALL_OW 44
23481: ST_TO_ADDR
// hc_noskilllimit := false ;
23482: LD_ADDR_OWVAR 76
23486: PUSH
23487: LD_INT 0
23489: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23490: LD_VAR 0 3
23494: PPUSH
23495: LD_INT 1
23497: PPUSH
23498: CALL_OW 51
// ToLua ( playRanger() ) ;
23502: LD_STRING playRanger()
23504: PPUSH
23505: CALL_OW 559
// p := 0 ;
23509: LD_ADDR_VAR 0 2
23513: PUSH
23514: LD_INT 0
23516: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23517: LD_INT 35
23519: PPUSH
23520: CALL_OW 67
// p := p + 1 ;
23524: LD_ADDR_VAR 0 2
23528: PUSH
23529: LD_VAR 0 2
23533: PUSH
23534: LD_INT 1
23536: PLUS
23537: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23538: LD_VAR 0 3
23542: PPUSH
23543: CALL_OW 256
23547: PUSH
23548: LD_INT 1000
23550: LESS
23551: IFFALSE 23565
// SetLives ( un , 1000 ) ;
23553: LD_VAR 0 3
23557: PPUSH
23558: LD_INT 1000
23560: PPUSH
23561: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23565: LD_VAR 0 3
23569: PPUSH
23570: LD_INT 81
23572: PUSH
23573: LD_OWVAR 2
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 91
23584: PUSH
23585: LD_VAR 0 3
23589: PUSH
23590: LD_INT 30
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: LIST
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PPUSH
23602: CALL_OW 69
23606: PPUSH
23607: LD_VAR 0 3
23611: PPUSH
23612: CALL_OW 74
23616: PPUSH
23617: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23621: LD_VAR 0 2
23625: PUSH
23626: LD_INT 80
23628: GREATER
23629: PUSH
23630: LD_VAR 0 3
23634: PPUSH
23635: CALL_OW 301
23639: OR
23640: IFFALSE 23517
// if un then
23642: LD_VAR 0 3
23646: IFFALSE 23657
// RemoveUnit ( un ) ;
23648: LD_VAR 0 3
23652: PPUSH
23653: CALL_OW 64
// end ;
23657: PPOPN 3
23659: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23660: LD_EXP 76
23664: IFFALSE 23780
23666: GO 23668
23668: DISABLE
23669: LD_INT 0
23671: PPUSH
23672: PPUSH
23673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23674: LD_ADDR_VAR 0 2
23678: PUSH
23679: LD_INT 81
23681: PUSH
23682: LD_OWVAR 2
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 21
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PPUSH
23705: CALL_OW 69
23709: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23710: LD_STRING playComputer()
23712: PPUSH
23713: CALL_OW 559
// if not tmp then
23717: LD_VAR 0 2
23721: NOT
23722: IFFALSE 23726
// exit ;
23724: GO 23780
// for i in tmp do
23726: LD_ADDR_VAR 0 1
23730: PUSH
23731: LD_VAR 0 2
23735: PUSH
23736: FOR_IN
23737: IFFALSE 23778
// for j := 1 to 4 do
23739: LD_ADDR_VAR 0 3
23743: PUSH
23744: DOUBLE
23745: LD_INT 1
23747: DEC
23748: ST_TO_ADDR
23749: LD_INT 4
23751: PUSH
23752: FOR_TO
23753: IFFALSE 23774
// SetSkill ( i , j , 10 ) ;
23755: LD_VAR 0 1
23759: PPUSH
23760: LD_VAR 0 3
23764: PPUSH
23765: LD_INT 10
23767: PPUSH
23768: CALL_OW 237
23772: GO 23752
23774: POP
23775: POP
23776: GO 23736
23778: POP
23779: POP
// end ;
23780: PPOPN 3
23782: END
// every 0 0$1 trigger s30 do var i , tmp ;
23783: LD_EXP 77
23787: IFFALSE 23856
23789: GO 23791
23791: DISABLE
23792: LD_INT 0
23794: PPUSH
23795: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23796: LD_ADDR_VAR 0 2
23800: PUSH
23801: LD_INT 22
23803: PUSH
23804: LD_OWVAR 2
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PPUSH
23813: CALL_OW 69
23817: ST_TO_ADDR
// if not tmp then
23818: LD_VAR 0 2
23822: NOT
23823: IFFALSE 23827
// exit ;
23825: GO 23856
// for i in tmp do
23827: LD_ADDR_VAR 0 1
23831: PUSH
23832: LD_VAR 0 2
23836: PUSH
23837: FOR_IN
23838: IFFALSE 23854
// SetLives ( i , 300 ) ;
23840: LD_VAR 0 1
23844: PPUSH
23845: LD_INT 300
23847: PPUSH
23848: CALL_OW 234
23852: GO 23837
23854: POP
23855: POP
// end ;
23856: PPOPN 2
23858: END
// every 0 0$1 trigger s60 do var i , tmp ;
23859: LD_EXP 78
23863: IFFALSE 23932
23865: GO 23867
23867: DISABLE
23868: LD_INT 0
23870: PPUSH
23871: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23872: LD_ADDR_VAR 0 2
23876: PUSH
23877: LD_INT 22
23879: PUSH
23880: LD_OWVAR 2
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PPUSH
23889: CALL_OW 69
23893: ST_TO_ADDR
// if not tmp then
23894: LD_VAR 0 2
23898: NOT
23899: IFFALSE 23903
// exit ;
23901: GO 23932
// for i in tmp do
23903: LD_ADDR_VAR 0 1
23907: PUSH
23908: LD_VAR 0 2
23912: PUSH
23913: FOR_IN
23914: IFFALSE 23930
// SetLives ( i , 600 ) ;
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_INT 600
23923: PPUSH
23924: CALL_OW 234
23928: GO 23913
23930: POP
23931: POP
// end ;
23932: PPOPN 2
23934: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23935: LD_INT 0
23937: PPUSH
// case cmd of 301 :
23938: LD_VAR 0 1
23942: PUSH
23943: LD_INT 301
23945: DOUBLE
23946: EQUAL
23947: IFTRUE 23951
23949: GO 23983
23951: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23952: LD_VAR 0 6
23956: PPUSH
23957: LD_VAR 0 7
23961: PPUSH
23962: LD_VAR 0 8
23966: PPUSH
23967: LD_VAR 0 4
23971: PPUSH
23972: LD_VAR 0 5
23976: PPUSH
23977: CALL 25184 0 5
23981: GO 24104
23983: LD_INT 302
23985: DOUBLE
23986: EQUAL
23987: IFTRUE 23991
23989: GO 24028
23991: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23992: LD_VAR 0 6
23996: PPUSH
23997: LD_VAR 0 7
24001: PPUSH
24002: LD_VAR 0 8
24006: PPUSH
24007: LD_VAR 0 9
24011: PPUSH
24012: LD_VAR 0 4
24016: PPUSH
24017: LD_VAR 0 5
24021: PPUSH
24022: CALL 25275 0 6
24026: GO 24104
24028: LD_INT 303
24030: DOUBLE
24031: EQUAL
24032: IFTRUE 24036
24034: GO 24073
24036: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24037: LD_VAR 0 6
24041: PPUSH
24042: LD_VAR 0 7
24046: PPUSH
24047: LD_VAR 0 8
24051: PPUSH
24052: LD_VAR 0 9
24056: PPUSH
24057: LD_VAR 0 4
24061: PPUSH
24062: LD_VAR 0 5
24066: PPUSH
24067: CALL 24109 0 6
24071: GO 24104
24073: LD_INT 304
24075: DOUBLE
24076: EQUAL
24077: IFTRUE 24081
24079: GO 24103
24081: POP
// hHackTeleport ( unit , x , y ) ; end ;
24082: LD_VAR 0 2
24086: PPUSH
24087: LD_VAR 0 4
24091: PPUSH
24092: LD_VAR 0 5
24096: PPUSH
24097: CALL 25868 0 3
24101: GO 24104
24103: POP
// end ;
24104: LD_VAR 0 12
24108: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24109: LD_INT 0
24111: PPUSH
24112: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24113: LD_VAR 0 1
24117: PUSH
24118: LD_INT 1
24120: LESS
24121: PUSH
24122: LD_VAR 0 1
24126: PUSH
24127: LD_INT 3
24129: GREATER
24130: OR
24131: PUSH
24132: LD_VAR 0 5
24136: PPUSH
24137: LD_VAR 0 6
24141: PPUSH
24142: CALL_OW 428
24146: OR
24147: IFFALSE 24151
// exit ;
24149: GO 24871
// uc_side := your_side ;
24151: LD_ADDR_OWVAR 20
24155: PUSH
24156: LD_OWVAR 2
24160: ST_TO_ADDR
// uc_nation := nation ;
24161: LD_ADDR_OWVAR 21
24165: PUSH
24166: LD_VAR 0 1
24170: ST_TO_ADDR
// bc_level = 1 ;
24171: LD_ADDR_OWVAR 43
24175: PUSH
24176: LD_INT 1
24178: ST_TO_ADDR
// case btype of 1 :
24179: LD_VAR 0 2
24183: PUSH
24184: LD_INT 1
24186: DOUBLE
24187: EQUAL
24188: IFTRUE 24192
24190: GO 24203
24192: POP
// bc_type := b_depot ; 2 :
24193: LD_ADDR_OWVAR 42
24197: PUSH
24198: LD_INT 0
24200: ST_TO_ADDR
24201: GO 24815
24203: LD_INT 2
24205: DOUBLE
24206: EQUAL
24207: IFTRUE 24211
24209: GO 24222
24211: POP
// bc_type := b_warehouse ; 3 :
24212: LD_ADDR_OWVAR 42
24216: PUSH
24217: LD_INT 1
24219: ST_TO_ADDR
24220: GO 24815
24222: LD_INT 3
24224: DOUBLE
24225: EQUAL
24226: IFTRUE 24230
24228: GO 24241
24230: POP
// bc_type := b_lab ; 4 .. 9 :
24231: LD_ADDR_OWVAR 42
24235: PUSH
24236: LD_INT 6
24238: ST_TO_ADDR
24239: GO 24815
24241: LD_INT 4
24243: DOUBLE
24244: GREATEREQUAL
24245: IFFALSE 24253
24247: LD_INT 9
24249: DOUBLE
24250: LESSEQUAL
24251: IFTRUE 24255
24253: GO 24307
24255: POP
// begin bc_type := b_lab_half ;
24256: LD_ADDR_OWVAR 42
24260: PUSH
24261: LD_INT 7
24263: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24264: LD_ADDR_OWVAR 44
24268: PUSH
24269: LD_INT 10
24271: PUSH
24272: LD_INT 11
24274: PUSH
24275: LD_INT 12
24277: PUSH
24278: LD_INT 15
24280: PUSH
24281: LD_INT 14
24283: PUSH
24284: LD_INT 13
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: PUSH
24295: LD_VAR 0 2
24299: PUSH
24300: LD_INT 3
24302: MINUS
24303: ARRAY
24304: ST_TO_ADDR
// end ; 10 .. 13 :
24305: GO 24815
24307: LD_INT 10
24309: DOUBLE
24310: GREATEREQUAL
24311: IFFALSE 24319
24313: LD_INT 13
24315: DOUBLE
24316: LESSEQUAL
24317: IFTRUE 24321
24319: GO 24398
24321: POP
// begin bc_type := b_lab_full ;
24322: LD_ADDR_OWVAR 42
24326: PUSH
24327: LD_INT 8
24329: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24330: LD_ADDR_OWVAR 44
24334: PUSH
24335: LD_INT 10
24337: PUSH
24338: LD_INT 12
24340: PUSH
24341: LD_INT 14
24343: PUSH
24344: LD_INT 13
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: LD_VAR 0 2
24357: PUSH
24358: LD_INT 9
24360: MINUS
24361: ARRAY
24362: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24363: LD_ADDR_OWVAR 45
24367: PUSH
24368: LD_INT 11
24370: PUSH
24371: LD_INT 15
24373: PUSH
24374: LD_INT 12
24376: PUSH
24377: LD_INT 15
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: PUSH
24386: LD_VAR 0 2
24390: PUSH
24391: LD_INT 9
24393: MINUS
24394: ARRAY
24395: ST_TO_ADDR
// end ; 14 :
24396: GO 24815
24398: LD_INT 14
24400: DOUBLE
24401: EQUAL
24402: IFTRUE 24406
24404: GO 24417
24406: POP
// bc_type := b_workshop ; 15 :
24407: LD_ADDR_OWVAR 42
24411: PUSH
24412: LD_INT 2
24414: ST_TO_ADDR
24415: GO 24815
24417: LD_INT 15
24419: DOUBLE
24420: EQUAL
24421: IFTRUE 24425
24423: GO 24436
24425: POP
// bc_type := b_factory ; 16 :
24426: LD_ADDR_OWVAR 42
24430: PUSH
24431: LD_INT 3
24433: ST_TO_ADDR
24434: GO 24815
24436: LD_INT 16
24438: DOUBLE
24439: EQUAL
24440: IFTRUE 24444
24442: GO 24455
24444: POP
// bc_type := b_ext_gun ; 17 :
24445: LD_ADDR_OWVAR 42
24449: PUSH
24450: LD_INT 17
24452: ST_TO_ADDR
24453: GO 24815
24455: LD_INT 17
24457: DOUBLE
24458: EQUAL
24459: IFTRUE 24463
24461: GO 24491
24463: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24464: LD_ADDR_OWVAR 42
24468: PUSH
24469: LD_INT 19
24471: PUSH
24472: LD_INT 23
24474: PUSH
24475: LD_INT 19
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: LIST
24482: PUSH
24483: LD_VAR 0 1
24487: ARRAY
24488: ST_TO_ADDR
24489: GO 24815
24491: LD_INT 18
24493: DOUBLE
24494: EQUAL
24495: IFTRUE 24499
24497: GO 24510
24499: POP
// bc_type := b_ext_radar ; 19 :
24500: LD_ADDR_OWVAR 42
24504: PUSH
24505: LD_INT 20
24507: ST_TO_ADDR
24508: GO 24815
24510: LD_INT 19
24512: DOUBLE
24513: EQUAL
24514: IFTRUE 24518
24516: GO 24529
24518: POP
// bc_type := b_ext_radio ; 20 :
24519: LD_ADDR_OWVAR 42
24523: PUSH
24524: LD_INT 22
24526: ST_TO_ADDR
24527: GO 24815
24529: LD_INT 20
24531: DOUBLE
24532: EQUAL
24533: IFTRUE 24537
24535: GO 24548
24537: POP
// bc_type := b_ext_siberium ; 21 :
24538: LD_ADDR_OWVAR 42
24542: PUSH
24543: LD_INT 21
24545: ST_TO_ADDR
24546: GO 24815
24548: LD_INT 21
24550: DOUBLE
24551: EQUAL
24552: IFTRUE 24556
24554: GO 24567
24556: POP
// bc_type := b_ext_computer ; 22 :
24557: LD_ADDR_OWVAR 42
24561: PUSH
24562: LD_INT 24
24564: ST_TO_ADDR
24565: GO 24815
24567: LD_INT 22
24569: DOUBLE
24570: EQUAL
24571: IFTRUE 24575
24573: GO 24586
24575: POP
// bc_type := b_ext_track ; 23 :
24576: LD_ADDR_OWVAR 42
24580: PUSH
24581: LD_INT 16
24583: ST_TO_ADDR
24584: GO 24815
24586: LD_INT 23
24588: DOUBLE
24589: EQUAL
24590: IFTRUE 24594
24592: GO 24605
24594: POP
// bc_type := b_ext_laser ; 24 :
24595: LD_ADDR_OWVAR 42
24599: PUSH
24600: LD_INT 25
24602: ST_TO_ADDR
24603: GO 24815
24605: LD_INT 24
24607: DOUBLE
24608: EQUAL
24609: IFTRUE 24613
24611: GO 24624
24613: POP
// bc_type := b_control_tower ; 25 :
24614: LD_ADDR_OWVAR 42
24618: PUSH
24619: LD_INT 36
24621: ST_TO_ADDR
24622: GO 24815
24624: LD_INT 25
24626: DOUBLE
24627: EQUAL
24628: IFTRUE 24632
24630: GO 24643
24632: POP
// bc_type := b_breastwork ; 26 :
24633: LD_ADDR_OWVAR 42
24637: PUSH
24638: LD_INT 31
24640: ST_TO_ADDR
24641: GO 24815
24643: LD_INT 26
24645: DOUBLE
24646: EQUAL
24647: IFTRUE 24651
24649: GO 24662
24651: POP
// bc_type := b_bunker ; 27 :
24652: LD_ADDR_OWVAR 42
24656: PUSH
24657: LD_INT 32
24659: ST_TO_ADDR
24660: GO 24815
24662: LD_INT 27
24664: DOUBLE
24665: EQUAL
24666: IFTRUE 24670
24668: GO 24681
24670: POP
// bc_type := b_turret ; 28 :
24671: LD_ADDR_OWVAR 42
24675: PUSH
24676: LD_INT 33
24678: ST_TO_ADDR
24679: GO 24815
24681: LD_INT 28
24683: DOUBLE
24684: EQUAL
24685: IFTRUE 24689
24687: GO 24700
24689: POP
// bc_type := b_armoury ; 29 :
24690: LD_ADDR_OWVAR 42
24694: PUSH
24695: LD_INT 4
24697: ST_TO_ADDR
24698: GO 24815
24700: LD_INT 29
24702: DOUBLE
24703: EQUAL
24704: IFTRUE 24708
24706: GO 24719
24708: POP
// bc_type := b_barracks ; 30 :
24709: LD_ADDR_OWVAR 42
24713: PUSH
24714: LD_INT 5
24716: ST_TO_ADDR
24717: GO 24815
24719: LD_INT 30
24721: DOUBLE
24722: EQUAL
24723: IFTRUE 24727
24725: GO 24738
24727: POP
// bc_type := b_solar_power ; 31 :
24728: LD_ADDR_OWVAR 42
24732: PUSH
24733: LD_INT 27
24735: ST_TO_ADDR
24736: GO 24815
24738: LD_INT 31
24740: DOUBLE
24741: EQUAL
24742: IFTRUE 24746
24744: GO 24757
24746: POP
// bc_type := b_oil_power ; 32 :
24747: LD_ADDR_OWVAR 42
24751: PUSH
24752: LD_INT 26
24754: ST_TO_ADDR
24755: GO 24815
24757: LD_INT 32
24759: DOUBLE
24760: EQUAL
24761: IFTRUE 24765
24763: GO 24776
24765: POP
// bc_type := b_siberite_power ; 33 :
24766: LD_ADDR_OWVAR 42
24770: PUSH
24771: LD_INT 28
24773: ST_TO_ADDR
24774: GO 24815
24776: LD_INT 33
24778: DOUBLE
24779: EQUAL
24780: IFTRUE 24784
24782: GO 24795
24784: POP
// bc_type := b_oil_mine ; 34 :
24785: LD_ADDR_OWVAR 42
24789: PUSH
24790: LD_INT 29
24792: ST_TO_ADDR
24793: GO 24815
24795: LD_INT 34
24797: DOUBLE
24798: EQUAL
24799: IFTRUE 24803
24801: GO 24814
24803: POP
// bc_type := b_siberite_mine ; end ;
24804: LD_ADDR_OWVAR 42
24808: PUSH
24809: LD_INT 30
24811: ST_TO_ADDR
24812: GO 24815
24814: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24815: LD_ADDR_VAR 0 8
24819: PUSH
24820: LD_VAR 0 5
24824: PPUSH
24825: LD_VAR 0 6
24829: PPUSH
24830: LD_VAR 0 3
24834: PPUSH
24835: CALL_OW 47
24839: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24840: LD_OWVAR 42
24844: PUSH
24845: LD_INT 32
24847: PUSH
24848: LD_INT 33
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: IN
24855: IFFALSE 24871
// PlaceWeaponTurret ( b , weapon ) ;
24857: LD_VAR 0 8
24861: PPUSH
24862: LD_VAR 0 4
24866: PPUSH
24867: CALL_OW 431
// end ;
24871: LD_VAR 0 7
24875: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24876: LD_INT 0
24878: PPUSH
24879: PPUSH
24880: PPUSH
24881: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24882: LD_ADDR_VAR 0 4
24886: PUSH
24887: LD_INT 22
24889: PUSH
24890: LD_OWVAR 2
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: LD_INT 30
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 30
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PPUSH
24931: CALL_OW 69
24935: ST_TO_ADDR
// if not tmp then
24936: LD_VAR 0 4
24940: NOT
24941: IFFALSE 24945
// exit ;
24943: GO 25004
// for i in tmp do
24945: LD_ADDR_VAR 0 2
24949: PUSH
24950: LD_VAR 0 4
24954: PUSH
24955: FOR_IN
24956: IFFALSE 25002
// for j = 1 to 3 do
24958: LD_ADDR_VAR 0 3
24962: PUSH
24963: DOUBLE
24964: LD_INT 1
24966: DEC
24967: ST_TO_ADDR
24968: LD_INT 3
24970: PUSH
24971: FOR_TO
24972: IFFALSE 24998
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24974: LD_VAR 0 2
24978: PPUSH
24979: CALL_OW 274
24983: PPUSH
24984: LD_VAR 0 3
24988: PPUSH
24989: LD_INT 99999
24991: PPUSH
24992: CALL_OW 277
24996: GO 24971
24998: POP
24999: POP
25000: GO 24955
25002: POP
25003: POP
// end ;
25004: LD_VAR 0 1
25008: RET
// export function hHackSetLevel10 ; var i , j ; begin
25009: LD_INT 0
25011: PPUSH
25012: PPUSH
25013: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25014: LD_ADDR_VAR 0 2
25018: PUSH
25019: LD_INT 21
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PPUSH
25029: CALL_OW 69
25033: PUSH
25034: FOR_IN
25035: IFFALSE 25087
// if IsSelected ( i ) then
25037: LD_VAR 0 2
25041: PPUSH
25042: CALL_OW 306
25046: IFFALSE 25085
// begin for j := 1 to 4 do
25048: LD_ADDR_VAR 0 3
25052: PUSH
25053: DOUBLE
25054: LD_INT 1
25056: DEC
25057: ST_TO_ADDR
25058: LD_INT 4
25060: PUSH
25061: FOR_TO
25062: IFFALSE 25083
// SetSkill ( i , j , 10 ) ;
25064: LD_VAR 0 2
25068: PPUSH
25069: LD_VAR 0 3
25073: PPUSH
25074: LD_INT 10
25076: PPUSH
25077: CALL_OW 237
25081: GO 25061
25083: POP
25084: POP
// end ;
25085: GO 25034
25087: POP
25088: POP
// end ;
25089: LD_VAR 0 1
25093: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25094: LD_INT 0
25096: PPUSH
25097: PPUSH
25098: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25099: LD_ADDR_VAR 0 2
25103: PUSH
25104: LD_INT 22
25106: PUSH
25107: LD_OWVAR 2
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 21
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PPUSH
25130: CALL_OW 69
25134: PUSH
25135: FOR_IN
25136: IFFALSE 25177
// begin for j := 1 to 4 do
25138: LD_ADDR_VAR 0 3
25142: PUSH
25143: DOUBLE
25144: LD_INT 1
25146: DEC
25147: ST_TO_ADDR
25148: LD_INT 4
25150: PUSH
25151: FOR_TO
25152: IFFALSE 25173
// SetSkill ( i , j , 10 ) ;
25154: LD_VAR 0 2
25158: PPUSH
25159: LD_VAR 0 3
25163: PPUSH
25164: LD_INT 10
25166: PPUSH
25167: CALL_OW 237
25171: GO 25151
25173: POP
25174: POP
// end ;
25175: GO 25135
25177: POP
25178: POP
// end ;
25179: LD_VAR 0 1
25183: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25184: LD_INT 0
25186: PPUSH
// uc_side := your_side ;
25187: LD_ADDR_OWVAR 20
25191: PUSH
25192: LD_OWVAR 2
25196: ST_TO_ADDR
// uc_nation := nation ;
25197: LD_ADDR_OWVAR 21
25201: PUSH
25202: LD_VAR 0 1
25206: ST_TO_ADDR
// InitHc ;
25207: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25211: LD_INT 0
25213: PPUSH
25214: LD_VAR 0 2
25218: PPUSH
25219: LD_VAR 0 3
25223: PPUSH
25224: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25228: LD_VAR 0 4
25232: PPUSH
25233: LD_VAR 0 5
25237: PPUSH
25238: CALL_OW 428
25242: PUSH
25243: LD_INT 0
25245: EQUAL
25246: IFFALSE 25270
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25248: CALL_OW 44
25252: PPUSH
25253: LD_VAR 0 4
25257: PPUSH
25258: LD_VAR 0 5
25262: PPUSH
25263: LD_INT 1
25265: PPUSH
25266: CALL_OW 48
// end ;
25270: LD_VAR 0 6
25274: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25275: LD_INT 0
25277: PPUSH
25278: PPUSH
// uc_side := your_side ;
25279: LD_ADDR_OWVAR 20
25283: PUSH
25284: LD_OWVAR 2
25288: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25289: LD_VAR 0 1
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 3
25302: PUSH
25303: LD_INT 4
25305: PUSH
25306: LD_INT 5
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: IN
25316: IFFALSE 25328
// uc_nation := nation_american else
25318: LD_ADDR_OWVAR 21
25322: PUSH
25323: LD_INT 1
25325: ST_TO_ADDR
25326: GO 25371
// if chassis in [ 11 , 12 , 13 , 14 ] then
25328: LD_VAR 0 1
25332: PUSH
25333: LD_INT 11
25335: PUSH
25336: LD_INT 12
25338: PUSH
25339: LD_INT 13
25341: PUSH
25342: LD_INT 14
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: IN
25351: IFFALSE 25363
// uc_nation := nation_arabian else
25353: LD_ADDR_OWVAR 21
25357: PUSH
25358: LD_INT 2
25360: ST_TO_ADDR
25361: GO 25371
// uc_nation := nation_russian ;
25363: LD_ADDR_OWVAR 21
25367: PUSH
25368: LD_INT 3
25370: ST_TO_ADDR
// vc_chassis := chassis ;
25371: LD_ADDR_OWVAR 37
25375: PUSH
25376: LD_VAR 0 1
25380: ST_TO_ADDR
// vc_engine := engine ;
25381: LD_ADDR_OWVAR 39
25385: PUSH
25386: LD_VAR 0 2
25390: ST_TO_ADDR
// vc_control := control ;
25391: LD_ADDR_OWVAR 38
25395: PUSH
25396: LD_VAR 0 3
25400: ST_TO_ADDR
// vc_weapon := weapon ;
25401: LD_ADDR_OWVAR 40
25405: PUSH
25406: LD_VAR 0 4
25410: ST_TO_ADDR
// un := CreateVehicle ;
25411: LD_ADDR_VAR 0 8
25415: PUSH
25416: CALL_OW 45
25420: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25421: LD_VAR 0 8
25425: PPUSH
25426: LD_INT 0
25428: PPUSH
25429: LD_INT 5
25431: PPUSH
25432: CALL_OW 12
25436: PPUSH
25437: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25441: LD_VAR 0 8
25445: PPUSH
25446: LD_VAR 0 5
25450: PPUSH
25451: LD_VAR 0 6
25455: PPUSH
25456: LD_INT 1
25458: PPUSH
25459: CALL_OW 48
// end ;
25463: LD_VAR 0 7
25467: RET
// export hInvincible ; every 1 do
25468: GO 25470
25470: DISABLE
// hInvincible := [ ] ;
25471: LD_ADDR_EXP 79
25475: PUSH
25476: EMPTY
25477: ST_TO_ADDR
25478: END
// every 10 do var i ;
25479: GO 25481
25481: DISABLE
25482: LD_INT 0
25484: PPUSH
// begin enable ;
25485: ENABLE
// if not hInvincible then
25486: LD_EXP 79
25490: NOT
25491: IFFALSE 25495
// exit ;
25493: GO 25539
// for i in hInvincible do
25495: LD_ADDR_VAR 0 1
25499: PUSH
25500: LD_EXP 79
25504: PUSH
25505: FOR_IN
25506: IFFALSE 25537
// if GetLives ( i ) < 1000 then
25508: LD_VAR 0 1
25512: PPUSH
25513: CALL_OW 256
25517: PUSH
25518: LD_INT 1000
25520: LESS
25521: IFFALSE 25535
// SetLives ( i , 1000 ) ;
25523: LD_VAR 0 1
25527: PPUSH
25528: LD_INT 1000
25530: PPUSH
25531: CALL_OW 234
25535: GO 25505
25537: POP
25538: POP
// end ;
25539: PPOPN 1
25541: END
// export function hHackInvincible ; var i ; begin
25542: LD_INT 0
25544: PPUSH
25545: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25546: LD_ADDR_VAR 0 2
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: LD_INT 21
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 21
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: PPUSH
25579: CALL_OW 69
25583: PUSH
25584: FOR_IN
25585: IFFALSE 25646
// if IsSelected ( i ) then
25587: LD_VAR 0 2
25591: PPUSH
25592: CALL_OW 306
25596: IFFALSE 25644
// begin if i in hInvincible then
25598: LD_VAR 0 2
25602: PUSH
25603: LD_EXP 79
25607: IN
25608: IFFALSE 25628
// hInvincible := hInvincible diff i else
25610: LD_ADDR_EXP 79
25614: PUSH
25615: LD_EXP 79
25619: PUSH
25620: LD_VAR 0 2
25624: DIFF
25625: ST_TO_ADDR
25626: GO 25644
// hInvincible := hInvincible union i ;
25628: LD_ADDR_EXP 79
25632: PUSH
25633: LD_EXP 79
25637: PUSH
25638: LD_VAR 0 2
25642: UNION
25643: ST_TO_ADDR
// end ;
25644: GO 25584
25646: POP
25647: POP
// end ;
25648: LD_VAR 0 1
25652: RET
// export function hHackInvisible ; var i , j ; begin
25653: LD_INT 0
25655: PPUSH
25656: PPUSH
25657: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25658: LD_ADDR_VAR 0 2
25662: PUSH
25663: LD_INT 21
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PPUSH
25673: CALL_OW 69
25677: PUSH
25678: FOR_IN
25679: IFFALSE 25703
// if IsSelected ( i ) then
25681: LD_VAR 0 2
25685: PPUSH
25686: CALL_OW 306
25690: IFFALSE 25701
// ComForceInvisible ( i ) ;
25692: LD_VAR 0 2
25696: PPUSH
25697: CALL_OW 496
25701: GO 25678
25703: POP
25704: POP
// end ;
25705: LD_VAR 0 1
25709: RET
// export function hHackChangeYourSide ; begin
25710: LD_INT 0
25712: PPUSH
// if your_side = 8 then
25713: LD_OWVAR 2
25717: PUSH
25718: LD_INT 8
25720: EQUAL
25721: IFFALSE 25733
// your_side := 0 else
25723: LD_ADDR_OWVAR 2
25727: PUSH
25728: LD_INT 0
25730: ST_TO_ADDR
25731: GO 25747
// your_side := your_side + 1 ;
25733: LD_ADDR_OWVAR 2
25737: PUSH
25738: LD_OWVAR 2
25742: PUSH
25743: LD_INT 1
25745: PLUS
25746: ST_TO_ADDR
// end ;
25747: LD_VAR 0 1
25751: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
25756: PPUSH
// for i in all_units do
25757: LD_ADDR_VAR 0 2
25761: PUSH
25762: LD_OWVAR 3
25766: PUSH
25767: FOR_IN
25768: IFFALSE 25846
// if IsSelected ( i ) then
25770: LD_VAR 0 2
25774: PPUSH
25775: CALL_OW 306
25779: IFFALSE 25844
// begin j := GetSide ( i ) ;
25781: LD_ADDR_VAR 0 3
25785: PUSH
25786: LD_VAR 0 2
25790: PPUSH
25791: CALL_OW 255
25795: ST_TO_ADDR
// if j = 8 then
25796: LD_VAR 0 3
25800: PUSH
25801: LD_INT 8
25803: EQUAL
25804: IFFALSE 25816
// j := 0 else
25806: LD_ADDR_VAR 0 3
25810: PUSH
25811: LD_INT 0
25813: ST_TO_ADDR
25814: GO 25830
// j := j + 1 ;
25816: LD_ADDR_VAR 0 3
25820: PUSH
25821: LD_VAR 0 3
25825: PUSH
25826: LD_INT 1
25828: PLUS
25829: ST_TO_ADDR
// SetSide ( i , j ) ;
25830: LD_VAR 0 2
25834: PPUSH
25835: LD_VAR 0 3
25839: PPUSH
25840: CALL_OW 235
// end ;
25844: GO 25767
25846: POP
25847: POP
// end ;
25848: LD_VAR 0 1
25852: RET
// export function hHackFog ; begin
25853: LD_INT 0
25855: PPUSH
// FogOff ( true ) ;
25856: LD_INT 1
25858: PPUSH
25859: CALL_OW 344
// end ;
25863: LD_VAR 0 1
25867: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25868: LD_INT 0
25870: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25871: LD_VAR 0 1
25875: PPUSH
25876: LD_VAR 0 2
25880: PPUSH
25881: LD_VAR 0 3
25885: PPUSH
25886: LD_INT 1
25888: PPUSH
25889: LD_INT 1
25891: PPUSH
25892: CALL_OW 483
// CenterOnXY ( x , y ) ;
25896: LD_VAR 0 2
25900: PPUSH
25901: LD_VAR 0 3
25905: PPUSH
25906: CALL_OW 84
// end ;
25910: LD_VAR 0 4
25914: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25915: LD_INT 0
25917: PPUSH
25918: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25919: LD_VAR 0 1
25923: NOT
25924: PUSH
25925: LD_VAR 0 2
25929: PPUSH
25930: LD_VAR 0 3
25934: PPUSH
25935: CALL_OW 488
25939: NOT
25940: OR
25941: PUSH
25942: LD_VAR 0 1
25946: PPUSH
25947: CALL_OW 266
25951: PUSH
25952: LD_INT 3
25954: NONEQUAL
25955: PUSH
25956: LD_VAR 0 1
25960: PPUSH
25961: CALL_OW 247
25965: PUSH
25966: LD_INT 1
25968: EQUAL
25969: NOT
25970: AND
25971: OR
25972: IFFALSE 25976
// exit ;
25974: GO 26125
// if GetType ( factory ) = unit_human then
25976: LD_VAR 0 1
25980: PPUSH
25981: CALL_OW 247
25985: PUSH
25986: LD_INT 1
25988: EQUAL
25989: IFFALSE 26006
// factory := IsInUnit ( factory ) ;
25991: LD_ADDR_VAR 0 1
25995: PUSH
25996: LD_VAR 0 1
26000: PPUSH
26001: CALL_OW 310
26005: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26006: LD_VAR 0 1
26010: PPUSH
26011: CALL_OW 266
26015: PUSH
26016: LD_INT 3
26018: NONEQUAL
26019: IFFALSE 26023
// exit ;
26021: GO 26125
// if HexInfo ( x , y ) = factory then
26023: LD_VAR 0 2
26027: PPUSH
26028: LD_VAR 0 3
26032: PPUSH
26033: CALL_OW 428
26037: PUSH
26038: LD_VAR 0 1
26042: EQUAL
26043: IFFALSE 26070
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26045: LD_ADDR_EXP 80
26049: PUSH
26050: LD_EXP 80
26054: PPUSH
26055: LD_VAR 0 1
26059: PPUSH
26060: LD_INT 0
26062: PPUSH
26063: CALL_OW 1
26067: ST_TO_ADDR
26068: GO 26121
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26070: LD_ADDR_EXP 80
26074: PUSH
26075: LD_EXP 80
26079: PPUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: LD_VAR 0 1
26089: PPUSH
26090: CALL_OW 255
26094: PUSH
26095: LD_VAR 0 1
26099: PUSH
26100: LD_VAR 0 2
26104: PUSH
26105: LD_VAR 0 3
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: PPUSH
26116: CALL_OW 1
26120: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26121: CALL 26130 0 0
// end ;
26125: LD_VAR 0 4
26129: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26130: LD_INT 0
26132: PPUSH
26133: PPUSH
26134: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26135: LD_STRING resetFactoryWaypoint();
26137: PPUSH
26138: CALL_OW 559
// if factoryWaypoints then
26142: LD_EXP 80
26146: IFFALSE 26272
// begin list := PrepareArray ( factoryWaypoints ) ;
26148: LD_ADDR_VAR 0 3
26152: PUSH
26153: LD_EXP 80
26157: PPUSH
26158: CALL 72741 0 1
26162: ST_TO_ADDR
// for i := 1 to list do
26163: LD_ADDR_VAR 0 2
26167: PUSH
26168: DOUBLE
26169: LD_INT 1
26171: DEC
26172: ST_TO_ADDR
26173: LD_VAR 0 3
26177: PUSH
26178: FOR_TO
26179: IFFALSE 26270
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26181: LD_STRING setFactoryWaypointXY(
26183: PUSH
26184: LD_VAR 0 3
26188: PUSH
26189: LD_VAR 0 2
26193: ARRAY
26194: PUSH
26195: LD_INT 1
26197: ARRAY
26198: STR
26199: PUSH
26200: LD_STRING ,
26202: STR
26203: PUSH
26204: LD_VAR 0 3
26208: PUSH
26209: LD_VAR 0 2
26213: ARRAY
26214: PUSH
26215: LD_INT 2
26217: ARRAY
26218: STR
26219: PUSH
26220: LD_STRING ,
26222: STR
26223: PUSH
26224: LD_VAR 0 3
26228: PUSH
26229: LD_VAR 0 2
26233: ARRAY
26234: PUSH
26235: LD_INT 3
26237: ARRAY
26238: STR
26239: PUSH
26240: LD_STRING ,
26242: STR
26243: PUSH
26244: LD_VAR 0 3
26248: PUSH
26249: LD_VAR 0 2
26253: ARRAY
26254: PUSH
26255: LD_INT 4
26257: ARRAY
26258: STR
26259: PUSH
26260: LD_STRING )
26262: STR
26263: PPUSH
26264: CALL_OW 559
26268: GO 26178
26270: POP
26271: POP
// end ; end ;
26272: LD_VAR 0 1
26276: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26277: LD_INT 0
26279: PPUSH
// if HexInfo ( x , y ) = warehouse then
26280: LD_VAR 0 2
26284: PPUSH
26285: LD_VAR 0 3
26289: PPUSH
26290: CALL_OW 428
26294: PUSH
26295: LD_VAR 0 1
26299: EQUAL
26300: IFFALSE 26327
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26302: LD_ADDR_EXP 81
26306: PUSH
26307: LD_EXP 81
26311: PPUSH
26312: LD_VAR 0 1
26316: PPUSH
26317: LD_INT 0
26319: PPUSH
26320: CALL_OW 1
26324: ST_TO_ADDR
26325: GO 26378
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26327: LD_ADDR_EXP 81
26331: PUSH
26332: LD_EXP 81
26336: PPUSH
26337: LD_VAR 0 1
26341: PPUSH
26342: LD_VAR 0 1
26346: PPUSH
26347: CALL_OW 255
26351: PUSH
26352: LD_VAR 0 1
26356: PUSH
26357: LD_VAR 0 2
26361: PUSH
26362: LD_VAR 0 3
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: PPUSH
26373: CALL_OW 1
26377: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26378: CALL 26387 0 0
// end ;
26382: LD_VAR 0 4
26386: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26387: LD_INT 0
26389: PPUSH
26390: PPUSH
26391: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26392: LD_STRING resetWarehouseGatheringPoints();
26394: PPUSH
26395: CALL_OW 559
// if warehouseGatheringPoints then
26399: LD_EXP 81
26403: IFFALSE 26529
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26405: LD_ADDR_VAR 0 3
26409: PUSH
26410: LD_EXP 81
26414: PPUSH
26415: CALL 72741 0 1
26419: ST_TO_ADDR
// for i := 1 to list do
26420: LD_ADDR_VAR 0 2
26424: PUSH
26425: DOUBLE
26426: LD_INT 1
26428: DEC
26429: ST_TO_ADDR
26430: LD_VAR 0 3
26434: PUSH
26435: FOR_TO
26436: IFFALSE 26527
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26438: LD_STRING setWarehouseGatheringPointXY(
26440: PUSH
26441: LD_VAR 0 3
26445: PUSH
26446: LD_VAR 0 2
26450: ARRAY
26451: PUSH
26452: LD_INT 1
26454: ARRAY
26455: STR
26456: PUSH
26457: LD_STRING ,
26459: STR
26460: PUSH
26461: LD_VAR 0 3
26465: PUSH
26466: LD_VAR 0 2
26470: ARRAY
26471: PUSH
26472: LD_INT 2
26474: ARRAY
26475: STR
26476: PUSH
26477: LD_STRING ,
26479: STR
26480: PUSH
26481: LD_VAR 0 3
26485: PUSH
26486: LD_VAR 0 2
26490: ARRAY
26491: PUSH
26492: LD_INT 3
26494: ARRAY
26495: STR
26496: PUSH
26497: LD_STRING ,
26499: STR
26500: PUSH
26501: LD_VAR 0 3
26505: PUSH
26506: LD_VAR 0 2
26510: ARRAY
26511: PUSH
26512: LD_INT 4
26514: ARRAY
26515: STR
26516: PUSH
26517: LD_STRING )
26519: STR
26520: PPUSH
26521: CALL_OW 559
26525: GO 26435
26527: POP
26528: POP
// end ; end ;
26529: LD_VAR 0 1
26533: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26534: LD_EXP 81
26538: IFFALSE 27223
26540: GO 26542
26542: DISABLE
26543: LD_INT 0
26545: PPUSH
26546: PPUSH
26547: PPUSH
26548: PPUSH
26549: PPUSH
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
// begin enable ;
26554: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26555: LD_ADDR_VAR 0 3
26559: PUSH
26560: LD_EXP 81
26564: PPUSH
26565: CALL 72741 0 1
26569: ST_TO_ADDR
// if not list then
26570: LD_VAR 0 3
26574: NOT
26575: IFFALSE 26579
// exit ;
26577: GO 27223
// for i := 1 to list do
26579: LD_ADDR_VAR 0 1
26583: PUSH
26584: DOUBLE
26585: LD_INT 1
26587: DEC
26588: ST_TO_ADDR
26589: LD_VAR 0 3
26593: PUSH
26594: FOR_TO
26595: IFFALSE 27221
// begin depot := list [ i ] [ 2 ] ;
26597: LD_ADDR_VAR 0 8
26601: PUSH
26602: LD_VAR 0 3
26606: PUSH
26607: LD_VAR 0 1
26611: ARRAY
26612: PUSH
26613: LD_INT 2
26615: ARRAY
26616: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26617: LD_ADDR_VAR 0 5
26621: PUSH
26622: LD_VAR 0 3
26626: PUSH
26627: LD_VAR 0 1
26631: ARRAY
26632: PUSH
26633: LD_INT 1
26635: ARRAY
26636: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26637: LD_VAR 0 8
26641: PPUSH
26642: CALL_OW 301
26646: PUSH
26647: LD_VAR 0 5
26651: PUSH
26652: LD_VAR 0 8
26656: PPUSH
26657: CALL_OW 255
26661: NONEQUAL
26662: OR
26663: IFFALSE 26692
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26665: LD_ADDR_EXP 81
26669: PUSH
26670: LD_EXP 81
26674: PPUSH
26675: LD_VAR 0 8
26679: PPUSH
26680: LD_INT 0
26682: PPUSH
26683: CALL_OW 1
26687: ST_TO_ADDR
// exit ;
26688: POP
26689: POP
26690: GO 27223
// end ; x := list [ i ] [ 3 ] ;
26692: LD_ADDR_VAR 0 6
26696: PUSH
26697: LD_VAR 0 3
26701: PUSH
26702: LD_VAR 0 1
26706: ARRAY
26707: PUSH
26708: LD_INT 3
26710: ARRAY
26711: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26712: LD_ADDR_VAR 0 7
26716: PUSH
26717: LD_VAR 0 3
26721: PUSH
26722: LD_VAR 0 1
26726: ARRAY
26727: PUSH
26728: LD_INT 4
26730: ARRAY
26731: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26732: LD_ADDR_VAR 0 9
26736: PUSH
26737: LD_VAR 0 6
26741: PPUSH
26742: LD_VAR 0 7
26746: PPUSH
26747: LD_INT 16
26749: PPUSH
26750: CALL 71329 0 3
26754: ST_TO_ADDR
// if not cratesNearbyPoint then
26755: LD_VAR 0 9
26759: NOT
26760: IFFALSE 26766
// exit ;
26762: POP
26763: POP
26764: GO 27223
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26766: LD_ADDR_VAR 0 4
26770: PUSH
26771: LD_INT 22
26773: PUSH
26774: LD_VAR 0 5
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 3
26785: PUSH
26786: LD_INT 60
26788: PUSH
26789: EMPTY
26790: LIST
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 91
26798: PUSH
26799: LD_VAR 0 8
26803: PUSH
26804: LD_INT 6
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: LD_INT 25
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 25
26827: PUSH
26828: LD_INT 16
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: PPUSH
26846: CALL_OW 69
26850: PUSH
26851: LD_VAR 0 8
26855: PPUSH
26856: CALL_OW 313
26860: PPUSH
26861: LD_INT 3
26863: PUSH
26864: LD_INT 60
26866: PUSH
26867: EMPTY
26868: LIST
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 2
26876: PUSH
26877: LD_INT 25
26879: PUSH
26880: LD_INT 2
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 25
26889: PUSH
26890: LD_INT 16
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: LIST
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PPUSH
26906: CALL_OW 72
26910: UNION
26911: ST_TO_ADDR
// if tmp then
26912: LD_VAR 0 4
26916: IFFALSE 26996
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26918: LD_ADDR_VAR 0 4
26922: PUSH
26923: LD_VAR 0 4
26927: PPUSH
26928: LD_INT 3
26930: PPUSH
26931: CALL 69298 0 2
26935: ST_TO_ADDR
// for j in tmp do
26936: LD_ADDR_VAR 0 2
26940: PUSH
26941: LD_VAR 0 4
26945: PUSH
26946: FOR_IN
26947: IFFALSE 26990
// begin if IsInUnit ( j ) then
26949: LD_VAR 0 2
26953: PPUSH
26954: CALL_OW 310
26958: IFFALSE 26969
// ComExit ( j ) ;
26960: LD_VAR 0 2
26964: PPUSH
26965: CALL 69381 0 1
// AddComCollect ( j , x , y ) ;
26969: LD_VAR 0 2
26973: PPUSH
26974: LD_VAR 0 6
26978: PPUSH
26979: LD_VAR 0 7
26983: PPUSH
26984: CALL_OW 177
// end ;
26988: GO 26946
26990: POP
26991: POP
// exit ;
26992: POP
26993: POP
26994: GO 27223
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26996: LD_ADDR_VAR 0 4
27000: PUSH
27001: LD_INT 22
27003: PUSH
27004: LD_VAR 0 5
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 91
27015: PUSH
27016: LD_VAR 0 8
27020: PUSH
27021: LD_INT 8
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: LD_INT 34
27034: PUSH
27035: LD_INT 12
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 34
27044: PUSH
27045: LD_INT 51
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 34
27054: PUSH
27055: LD_INT 32
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 34
27064: PUSH
27065: LD_INT 89
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: LIST
27083: PPUSH
27084: CALL_OW 69
27088: ST_TO_ADDR
// if tmp then
27089: LD_VAR 0 4
27093: IFFALSE 27219
// begin for j in tmp do
27095: LD_ADDR_VAR 0 2
27099: PUSH
27100: LD_VAR 0 4
27104: PUSH
27105: FOR_IN
27106: IFFALSE 27217
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27108: LD_VAR 0 2
27112: PPUSH
27113: CALL_OW 262
27117: PUSH
27118: LD_INT 3
27120: EQUAL
27121: PUSH
27122: LD_VAR 0 2
27126: PPUSH
27127: CALL_OW 261
27131: PUSH
27132: LD_INT 20
27134: GREATER
27135: OR
27136: PUSH
27137: LD_VAR 0 2
27141: PPUSH
27142: CALL_OW 314
27146: NOT
27147: AND
27148: PUSH
27149: LD_VAR 0 2
27153: PPUSH
27154: CALL_OW 263
27158: PUSH
27159: LD_INT 1
27161: NONEQUAL
27162: PUSH
27163: LD_VAR 0 2
27167: PPUSH
27168: CALL_OW 311
27172: OR
27173: AND
27174: IFFALSE 27215
// begin ComCollect ( j , x , y ) ;
27176: LD_VAR 0 2
27180: PPUSH
27181: LD_VAR 0 6
27185: PPUSH
27186: LD_VAR 0 7
27190: PPUSH
27191: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27195: LD_VAR 0 2
27199: PPUSH
27200: LD_VAR 0 8
27204: PPUSH
27205: CALL_OW 172
// exit ;
27209: POP
27210: POP
27211: POP
27212: POP
27213: GO 27223
// end ;
27215: GO 27105
27217: POP
27218: POP
// end ; end ;
27219: GO 26594
27221: POP
27222: POP
// end ; end_of_file
27223: PPOPN 9
27225: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27226: LD_INT 0
27228: PPUSH
27229: PPUSH
27230: PPUSH
27231: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27232: LD_VAR 0 1
27236: PPUSH
27237: CALL_OW 264
27241: PUSH
27242: LD_INT 91
27244: EQUAL
27245: IFFALSE 27317
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27247: LD_INT 68
27249: PPUSH
27250: LD_VAR 0 1
27254: PPUSH
27255: CALL_OW 255
27259: PPUSH
27260: CALL_OW 321
27264: PUSH
27265: LD_INT 2
27267: EQUAL
27268: IFFALSE 27280
// eff := 70 else
27270: LD_ADDR_VAR 0 4
27274: PUSH
27275: LD_INT 70
27277: ST_TO_ADDR
27278: GO 27288
// eff := 30 ;
27280: LD_ADDR_VAR 0 4
27284: PUSH
27285: LD_INT 30
27287: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27288: LD_VAR 0 1
27292: PPUSH
27293: CALL_OW 250
27297: PPUSH
27298: LD_VAR 0 1
27302: PPUSH
27303: CALL_OW 251
27307: PPUSH
27308: LD_VAR 0 4
27312: PPUSH
27313: CALL_OW 495
// end ; end ;
27317: LD_VAR 0 2
27321: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27322: LD_INT 0
27324: PPUSH
// end ;
27325: LD_VAR 0 4
27329: RET
// export function SOS_Command ( cmd ) ; begin
27330: LD_INT 0
27332: PPUSH
// end ;
27333: LD_VAR 0 2
27337: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27338: LD_INT 0
27340: PPUSH
// end ;
27341: LD_VAR 0 6
27345: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27346: LD_INT 0
27348: PPUSH
27349: PPUSH
// if not vehicle or not factory then
27350: LD_VAR 0 1
27354: NOT
27355: PUSH
27356: LD_VAR 0 2
27360: NOT
27361: OR
27362: IFFALSE 27366
// exit ;
27364: GO 27597
// if factoryWaypoints >= factory then
27366: LD_EXP 80
27370: PUSH
27371: LD_VAR 0 2
27375: GREATEREQUAL
27376: IFFALSE 27597
// if factoryWaypoints [ factory ] then
27378: LD_EXP 80
27382: PUSH
27383: LD_VAR 0 2
27387: ARRAY
27388: IFFALSE 27597
// begin if GetControl ( vehicle ) = control_manual then
27390: LD_VAR 0 1
27394: PPUSH
27395: CALL_OW 263
27399: PUSH
27400: LD_INT 1
27402: EQUAL
27403: IFFALSE 27484
// begin driver := IsDrivenBy ( vehicle ) ;
27405: LD_ADDR_VAR 0 4
27409: PUSH
27410: LD_VAR 0 1
27414: PPUSH
27415: CALL_OW 311
27419: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27420: LD_VAR 0 4
27424: PPUSH
27425: LD_EXP 80
27429: PUSH
27430: LD_VAR 0 2
27434: ARRAY
27435: PUSH
27436: LD_INT 3
27438: ARRAY
27439: PPUSH
27440: LD_EXP 80
27444: PUSH
27445: LD_VAR 0 2
27449: ARRAY
27450: PUSH
27451: LD_INT 4
27453: ARRAY
27454: PPUSH
27455: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27459: LD_VAR 0 4
27463: PPUSH
27464: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27468: LD_VAR 0 4
27472: PPUSH
27473: LD_VAR 0 2
27477: PPUSH
27478: CALL_OW 180
// end else
27482: GO 27597
// if GetControl ( vehicle ) = control_remote then
27484: LD_VAR 0 1
27488: PPUSH
27489: CALL_OW 263
27493: PUSH
27494: LD_INT 2
27496: EQUAL
27497: IFFALSE 27558
// begin wait ( 0 0$2 ) ;
27499: LD_INT 70
27501: PPUSH
27502: CALL_OW 67
// if Connect ( vehicle ) then
27506: LD_VAR 0 1
27510: PPUSH
27511: CALL 39621 0 1
27515: IFFALSE 27556
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27517: LD_VAR 0 1
27521: PPUSH
27522: LD_EXP 80
27526: PUSH
27527: LD_VAR 0 2
27531: ARRAY
27532: PUSH
27533: LD_INT 3
27535: ARRAY
27536: PPUSH
27537: LD_EXP 80
27541: PUSH
27542: LD_VAR 0 2
27546: ARRAY
27547: PUSH
27548: LD_INT 4
27550: ARRAY
27551: PPUSH
27552: CALL_OW 171
// end else
27556: GO 27597
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27558: LD_VAR 0 1
27562: PPUSH
27563: LD_EXP 80
27567: PUSH
27568: LD_VAR 0 2
27572: ARRAY
27573: PUSH
27574: LD_INT 3
27576: ARRAY
27577: PPUSH
27578: LD_EXP 80
27582: PUSH
27583: LD_VAR 0 2
27587: ARRAY
27588: PUSH
27589: LD_INT 4
27591: ARRAY
27592: PPUSH
27593: CALL_OW 171
// end ; end ;
27597: LD_VAR 0 3
27601: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27602: LD_INT 0
27604: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27605: LD_VAR 0 1
27609: PUSH
27610: LD_INT 250
27612: EQUAL
27613: PUSH
27614: LD_VAR 0 2
27618: PPUSH
27619: CALL_OW 264
27623: PUSH
27624: LD_INT 81
27626: EQUAL
27627: AND
27628: IFFALSE 27649
// MinerPlaceMine ( unit , x , y ) ;
27630: LD_VAR 0 2
27634: PPUSH
27635: LD_VAR 0 4
27639: PPUSH
27640: LD_VAR 0 5
27644: PPUSH
27645: CALL 30034 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27649: LD_VAR 0 1
27653: PUSH
27654: LD_INT 251
27656: EQUAL
27657: PUSH
27658: LD_VAR 0 2
27662: PPUSH
27663: CALL_OW 264
27667: PUSH
27668: LD_INT 81
27670: EQUAL
27671: AND
27672: IFFALSE 27693
// MinerDetonateMine ( unit , x , y ) ;
27674: LD_VAR 0 2
27678: PPUSH
27679: LD_VAR 0 4
27683: PPUSH
27684: LD_VAR 0 5
27688: PPUSH
27689: CALL 30309 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27693: LD_VAR 0 1
27697: PUSH
27698: LD_INT 252
27700: EQUAL
27701: PUSH
27702: LD_VAR 0 2
27706: PPUSH
27707: CALL_OW 264
27711: PUSH
27712: LD_INT 81
27714: EQUAL
27715: AND
27716: IFFALSE 27737
// MinerCreateMinefield ( unit , x , y ) ;
27718: LD_VAR 0 2
27722: PPUSH
27723: LD_VAR 0 4
27727: PPUSH
27728: LD_VAR 0 5
27732: PPUSH
27733: CALL 30726 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27737: LD_VAR 0 1
27741: PUSH
27742: LD_INT 253
27744: EQUAL
27745: PUSH
27746: LD_VAR 0 2
27750: PPUSH
27751: CALL_OW 257
27755: PUSH
27756: LD_INT 5
27758: EQUAL
27759: AND
27760: IFFALSE 27781
// ComBinocular ( unit , x , y ) ;
27762: LD_VAR 0 2
27766: PPUSH
27767: LD_VAR 0 4
27771: PPUSH
27772: LD_VAR 0 5
27776: PPUSH
27777: CALL 31095 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27781: LD_VAR 0 1
27785: PUSH
27786: LD_INT 254
27788: EQUAL
27789: PUSH
27790: LD_VAR 0 2
27794: PPUSH
27795: CALL_OW 264
27799: PUSH
27800: LD_INT 99
27802: EQUAL
27803: AND
27804: PUSH
27805: LD_VAR 0 3
27809: PPUSH
27810: CALL_OW 263
27814: PUSH
27815: LD_INT 3
27817: EQUAL
27818: AND
27819: IFFALSE 27835
// HackDestroyVehicle ( unit , selectedUnit ) ;
27821: LD_VAR 0 2
27825: PPUSH
27826: LD_VAR 0 3
27830: PPUSH
27831: CALL 29398 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27835: LD_VAR 0 1
27839: PUSH
27840: LD_INT 255
27842: EQUAL
27843: PUSH
27844: LD_VAR 0 2
27848: PPUSH
27849: CALL_OW 264
27853: PUSH
27854: LD_INT 14
27856: PUSH
27857: LD_INT 53
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: IN
27864: AND
27865: PUSH
27866: LD_VAR 0 4
27870: PPUSH
27871: LD_VAR 0 5
27875: PPUSH
27876: CALL_OW 488
27880: AND
27881: IFFALSE 27905
// CutTreeXYR ( unit , x , y , 12 ) ;
27883: LD_VAR 0 2
27887: PPUSH
27888: LD_VAR 0 4
27892: PPUSH
27893: LD_VAR 0 5
27897: PPUSH
27898: LD_INT 12
27900: PPUSH
27901: CALL 27968 0 4
// if cmd = 256 then
27905: LD_VAR 0 1
27909: PUSH
27910: LD_INT 256
27912: EQUAL
27913: IFFALSE 27934
// SetFactoryWaypoint ( unit , x , y ) ;
27915: LD_VAR 0 2
27919: PPUSH
27920: LD_VAR 0 4
27924: PPUSH
27925: LD_VAR 0 5
27929: PPUSH
27930: CALL 25915 0 3
// if cmd = 257 then
27934: LD_VAR 0 1
27938: PUSH
27939: LD_INT 257
27941: EQUAL
27942: IFFALSE 27963
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27944: LD_VAR 0 2
27948: PPUSH
27949: LD_VAR 0 4
27953: PPUSH
27954: LD_VAR 0 5
27958: PPUSH
27959: CALL 26277 0 3
// end ;
27963: LD_VAR 0 6
27967: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27968: LD_INT 0
27970: PPUSH
27971: PPUSH
27972: PPUSH
27973: PPUSH
27974: PPUSH
27975: PPUSH
27976: PPUSH
27977: PPUSH
27978: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27979: LD_VAR 0 1
27983: NOT
27984: PUSH
27985: LD_VAR 0 2
27989: PPUSH
27990: LD_VAR 0 3
27994: PPUSH
27995: CALL_OW 488
27999: NOT
28000: OR
28001: PUSH
28002: LD_VAR 0 4
28006: NOT
28007: OR
28008: IFFALSE 28012
// exit ;
28010: GO 28352
// list := [ ] ;
28012: LD_ADDR_VAR 0 13
28016: PUSH
28017: EMPTY
28018: ST_TO_ADDR
// if x - r < 0 then
28019: LD_VAR 0 2
28023: PUSH
28024: LD_VAR 0 4
28028: MINUS
28029: PUSH
28030: LD_INT 0
28032: LESS
28033: IFFALSE 28045
// min_x := 0 else
28035: LD_ADDR_VAR 0 7
28039: PUSH
28040: LD_INT 0
28042: ST_TO_ADDR
28043: GO 28061
// min_x := x - r ;
28045: LD_ADDR_VAR 0 7
28049: PUSH
28050: LD_VAR 0 2
28054: PUSH
28055: LD_VAR 0 4
28059: MINUS
28060: ST_TO_ADDR
// if y - r < 0 then
28061: LD_VAR 0 3
28065: PUSH
28066: LD_VAR 0 4
28070: MINUS
28071: PUSH
28072: LD_INT 0
28074: LESS
28075: IFFALSE 28087
// min_y := 0 else
28077: LD_ADDR_VAR 0 8
28081: PUSH
28082: LD_INT 0
28084: ST_TO_ADDR
28085: GO 28103
// min_y := y - r ;
28087: LD_ADDR_VAR 0 8
28091: PUSH
28092: LD_VAR 0 3
28096: PUSH
28097: LD_VAR 0 4
28101: MINUS
28102: ST_TO_ADDR
// max_x := x + r ;
28103: LD_ADDR_VAR 0 9
28107: PUSH
28108: LD_VAR 0 2
28112: PUSH
28113: LD_VAR 0 4
28117: PLUS
28118: ST_TO_ADDR
// max_y := y + r ;
28119: LD_ADDR_VAR 0 10
28123: PUSH
28124: LD_VAR 0 3
28128: PUSH
28129: LD_VAR 0 4
28133: PLUS
28134: ST_TO_ADDR
// for _x = min_x to max_x do
28135: LD_ADDR_VAR 0 11
28139: PUSH
28140: DOUBLE
28141: LD_VAR 0 7
28145: DEC
28146: ST_TO_ADDR
28147: LD_VAR 0 9
28151: PUSH
28152: FOR_TO
28153: IFFALSE 28270
// for _y = min_y to max_y do
28155: LD_ADDR_VAR 0 12
28159: PUSH
28160: DOUBLE
28161: LD_VAR 0 8
28165: DEC
28166: ST_TO_ADDR
28167: LD_VAR 0 10
28171: PUSH
28172: FOR_TO
28173: IFFALSE 28266
// begin if not ValidHex ( _x , _y ) then
28175: LD_VAR 0 11
28179: PPUSH
28180: LD_VAR 0 12
28184: PPUSH
28185: CALL_OW 488
28189: NOT
28190: IFFALSE 28194
// continue ;
28192: GO 28172
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28194: LD_VAR 0 11
28198: PPUSH
28199: LD_VAR 0 12
28203: PPUSH
28204: CALL_OW 351
28208: PUSH
28209: LD_VAR 0 11
28213: PPUSH
28214: LD_VAR 0 12
28218: PPUSH
28219: CALL_OW 554
28223: AND
28224: IFFALSE 28264
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28226: LD_ADDR_VAR 0 13
28230: PUSH
28231: LD_VAR 0 13
28235: PPUSH
28236: LD_VAR 0 13
28240: PUSH
28241: LD_INT 1
28243: PLUS
28244: PPUSH
28245: LD_VAR 0 11
28249: PUSH
28250: LD_VAR 0 12
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PPUSH
28259: CALL_OW 2
28263: ST_TO_ADDR
// end ;
28264: GO 28172
28266: POP
28267: POP
28268: GO 28152
28270: POP
28271: POP
// if not list then
28272: LD_VAR 0 13
28276: NOT
28277: IFFALSE 28281
// exit ;
28279: GO 28352
// for i in list do
28281: LD_ADDR_VAR 0 6
28285: PUSH
28286: LD_VAR 0 13
28290: PUSH
28291: FOR_IN
28292: IFFALSE 28350
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28294: LD_VAR 0 1
28298: PPUSH
28299: LD_STRING M
28301: PUSH
28302: LD_VAR 0 6
28306: PUSH
28307: LD_INT 1
28309: ARRAY
28310: PUSH
28311: LD_VAR 0 6
28315: PUSH
28316: LD_INT 2
28318: ARRAY
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: PUSH
28341: EMPTY
28342: LIST
28343: PPUSH
28344: CALL_OW 447
28348: GO 28291
28350: POP
28351: POP
// end ;
28352: LD_VAR 0 5
28356: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28357: LD_EXP 83
28361: NOT
28362: IFFALSE 28412
28364: GO 28366
28366: DISABLE
// begin initHack := true ;
28367: LD_ADDR_EXP 83
28371: PUSH
28372: LD_INT 1
28374: ST_TO_ADDR
// hackTanks := [ ] ;
28375: LD_ADDR_EXP 84
28379: PUSH
28380: EMPTY
28381: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28382: LD_ADDR_EXP 85
28386: PUSH
28387: EMPTY
28388: ST_TO_ADDR
// hackLimit := 3 ;
28389: LD_ADDR_EXP 86
28393: PUSH
28394: LD_INT 3
28396: ST_TO_ADDR
// hackDist := 12 ;
28397: LD_ADDR_EXP 87
28401: PUSH
28402: LD_INT 12
28404: ST_TO_ADDR
// hackCounter := [ ] ;
28405: LD_ADDR_EXP 88
28409: PUSH
28410: EMPTY
28411: ST_TO_ADDR
// end ;
28412: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28413: LD_EXP 83
28417: PUSH
28418: LD_INT 34
28420: PUSH
28421: LD_INT 99
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PPUSH
28428: CALL_OW 69
28432: AND
28433: IFFALSE 28686
28435: GO 28437
28437: DISABLE
28438: LD_INT 0
28440: PPUSH
28441: PPUSH
// begin enable ;
28442: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28443: LD_ADDR_VAR 0 1
28447: PUSH
28448: LD_INT 34
28450: PUSH
28451: LD_INT 99
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PPUSH
28458: CALL_OW 69
28462: PUSH
28463: FOR_IN
28464: IFFALSE 28684
// begin if not i in hackTanks then
28466: LD_VAR 0 1
28470: PUSH
28471: LD_EXP 84
28475: IN
28476: NOT
28477: IFFALSE 28560
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28479: LD_ADDR_EXP 84
28483: PUSH
28484: LD_EXP 84
28488: PPUSH
28489: LD_EXP 84
28493: PUSH
28494: LD_INT 1
28496: PLUS
28497: PPUSH
28498: LD_VAR 0 1
28502: PPUSH
28503: CALL_OW 1
28507: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28508: LD_ADDR_EXP 85
28512: PUSH
28513: LD_EXP 85
28517: PPUSH
28518: LD_EXP 85
28522: PUSH
28523: LD_INT 1
28525: PLUS
28526: PPUSH
28527: EMPTY
28528: PPUSH
28529: CALL_OW 1
28533: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28534: LD_ADDR_EXP 88
28538: PUSH
28539: LD_EXP 88
28543: PPUSH
28544: LD_EXP 88
28548: PUSH
28549: LD_INT 1
28551: PLUS
28552: PPUSH
28553: EMPTY
28554: PPUSH
28555: CALL_OW 1
28559: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28560: LD_VAR 0 1
28564: PPUSH
28565: CALL_OW 302
28569: NOT
28570: IFFALSE 28583
// begin HackUnlinkAll ( i ) ;
28572: LD_VAR 0 1
28576: PPUSH
28577: CALL 28689 0 1
// continue ;
28581: GO 28463
// end ; HackCheckCapturedStatus ( i ) ;
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL 29132 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28592: LD_ADDR_VAR 0 2
28596: PUSH
28597: LD_INT 81
28599: PUSH
28600: LD_VAR 0 1
28604: PPUSH
28605: CALL_OW 255
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 33
28616: PUSH
28617: LD_INT 3
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 91
28626: PUSH
28627: LD_VAR 0 1
28631: PUSH
28632: LD_EXP 87
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 50
28644: PUSH
28645: EMPTY
28646: LIST
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: PPUSH
28654: CALL_OW 69
28658: ST_TO_ADDR
// if not tmp then
28659: LD_VAR 0 2
28663: NOT
28664: IFFALSE 28668
// continue ;
28666: GO 28463
// HackLink ( i , tmp ) ;
28668: LD_VAR 0 1
28672: PPUSH
28673: LD_VAR 0 2
28677: PPUSH
28678: CALL 28825 0 2
// end ;
28682: GO 28463
28684: POP
28685: POP
// end ;
28686: PPOPN 2
28688: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28689: LD_INT 0
28691: PPUSH
28692: PPUSH
28693: PPUSH
// if not hack in hackTanks then
28694: LD_VAR 0 1
28698: PUSH
28699: LD_EXP 84
28703: IN
28704: NOT
28705: IFFALSE 28709
// exit ;
28707: GO 28820
// index := GetElementIndex ( hackTanks , hack ) ;
28709: LD_ADDR_VAR 0 4
28713: PUSH
28714: LD_EXP 84
28718: PPUSH
28719: LD_VAR 0 1
28723: PPUSH
28724: CALL 36437 0 2
28728: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28729: LD_EXP 85
28733: PUSH
28734: LD_VAR 0 4
28738: ARRAY
28739: IFFALSE 28820
// begin for i in hackTanksCaptured [ index ] do
28741: LD_ADDR_VAR 0 3
28745: PUSH
28746: LD_EXP 85
28750: PUSH
28751: LD_VAR 0 4
28755: ARRAY
28756: PUSH
28757: FOR_IN
28758: IFFALSE 28784
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28760: LD_VAR 0 3
28764: PUSH
28765: LD_INT 1
28767: ARRAY
28768: PPUSH
28769: LD_VAR 0 3
28773: PUSH
28774: LD_INT 2
28776: ARRAY
28777: PPUSH
28778: CALL_OW 235
28782: GO 28757
28784: POP
28785: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28786: LD_ADDR_EXP 85
28790: PUSH
28791: LD_EXP 85
28795: PPUSH
28796: LD_VAR 0 4
28800: PPUSH
28801: EMPTY
28802: PPUSH
28803: CALL_OW 1
28807: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28808: LD_VAR 0 1
28812: PPUSH
28813: LD_INT 0
28815: PPUSH
28816: CALL_OW 505
// end ; end ;
28820: LD_VAR 0 2
28824: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28825: LD_INT 0
28827: PPUSH
28828: PPUSH
28829: PPUSH
// if not hack in hackTanks or not vehicles then
28830: LD_VAR 0 1
28834: PUSH
28835: LD_EXP 84
28839: IN
28840: NOT
28841: PUSH
28842: LD_VAR 0 2
28846: NOT
28847: OR
28848: IFFALSE 28852
// exit ;
28850: GO 29127
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28852: LD_ADDR_VAR 0 2
28856: PUSH
28857: LD_VAR 0 1
28861: PPUSH
28862: LD_VAR 0 2
28866: PPUSH
28867: LD_INT 1
28869: PPUSH
28870: LD_INT 1
28872: PPUSH
28873: CALL 37087 0 4
28877: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28878: LD_ADDR_VAR 0 5
28882: PUSH
28883: LD_EXP 84
28887: PPUSH
28888: LD_VAR 0 1
28892: PPUSH
28893: CALL 36437 0 2
28897: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28898: LD_EXP 85
28902: PUSH
28903: LD_VAR 0 5
28907: ARRAY
28908: PUSH
28909: LD_EXP 86
28913: LESS
28914: IFFALSE 29103
// begin for i := 1 to vehicles do
28916: LD_ADDR_VAR 0 4
28920: PUSH
28921: DOUBLE
28922: LD_INT 1
28924: DEC
28925: ST_TO_ADDR
28926: LD_VAR 0 2
28930: PUSH
28931: FOR_TO
28932: IFFALSE 29101
// begin if hackTanksCaptured [ index ] = hackLimit then
28934: LD_EXP 85
28938: PUSH
28939: LD_VAR 0 5
28943: ARRAY
28944: PUSH
28945: LD_EXP 86
28949: EQUAL
28950: IFFALSE 28954
// break ;
28952: GO 29101
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28954: LD_ADDR_EXP 88
28958: PUSH
28959: LD_EXP 88
28963: PPUSH
28964: LD_VAR 0 5
28968: PPUSH
28969: LD_EXP 88
28973: PUSH
28974: LD_VAR 0 5
28978: ARRAY
28979: PUSH
28980: LD_INT 1
28982: PLUS
28983: PPUSH
28984: CALL_OW 1
28988: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28989: LD_ADDR_EXP 85
28993: PUSH
28994: LD_EXP 85
28998: PPUSH
28999: LD_VAR 0 5
29003: PUSH
29004: LD_EXP 85
29008: PUSH
29009: LD_VAR 0 5
29013: ARRAY
29014: PUSH
29015: LD_INT 1
29017: PLUS
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PPUSH
29023: LD_VAR 0 2
29027: PUSH
29028: LD_VAR 0 4
29032: ARRAY
29033: PUSH
29034: LD_VAR 0 2
29038: PUSH
29039: LD_VAR 0 4
29043: ARRAY
29044: PPUSH
29045: CALL_OW 255
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PPUSH
29054: CALL 36652 0 3
29058: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29059: LD_VAR 0 2
29063: PUSH
29064: LD_VAR 0 4
29068: ARRAY
29069: PPUSH
29070: LD_VAR 0 1
29074: PPUSH
29075: CALL_OW 255
29079: PPUSH
29080: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29084: LD_VAR 0 2
29088: PUSH
29089: LD_VAR 0 4
29093: ARRAY
29094: PPUSH
29095: CALL_OW 141
// end ;
29099: GO 28931
29101: POP
29102: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29103: LD_VAR 0 1
29107: PPUSH
29108: LD_EXP 85
29112: PUSH
29113: LD_VAR 0 5
29117: ARRAY
29118: PUSH
29119: LD_INT 0
29121: PLUS
29122: PPUSH
29123: CALL_OW 505
// end ;
29127: LD_VAR 0 3
29131: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29132: LD_INT 0
29134: PPUSH
29135: PPUSH
29136: PPUSH
29137: PPUSH
// if not hack in hackTanks then
29138: LD_VAR 0 1
29142: PUSH
29143: LD_EXP 84
29147: IN
29148: NOT
29149: IFFALSE 29153
// exit ;
29151: GO 29393
// index := GetElementIndex ( hackTanks , hack ) ;
29153: LD_ADDR_VAR 0 4
29157: PUSH
29158: LD_EXP 84
29162: PPUSH
29163: LD_VAR 0 1
29167: PPUSH
29168: CALL 36437 0 2
29172: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: DOUBLE
29179: LD_EXP 85
29183: PUSH
29184: LD_VAR 0 4
29188: ARRAY
29189: INC
29190: ST_TO_ADDR
29191: LD_INT 1
29193: PUSH
29194: FOR_DOWNTO
29195: IFFALSE 29367
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29197: LD_ADDR_VAR 0 5
29201: PUSH
29202: LD_EXP 85
29206: PUSH
29207: LD_VAR 0 4
29211: ARRAY
29212: PUSH
29213: LD_VAR 0 3
29217: ARRAY
29218: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29219: LD_VAR 0 5
29223: PUSH
29224: LD_INT 1
29226: ARRAY
29227: PPUSH
29228: CALL_OW 302
29232: NOT
29233: PUSH
29234: LD_VAR 0 5
29238: PUSH
29239: LD_INT 1
29241: ARRAY
29242: PPUSH
29243: CALL_OW 255
29247: PUSH
29248: LD_VAR 0 1
29252: PPUSH
29253: CALL_OW 255
29257: NONEQUAL
29258: OR
29259: IFFALSE 29365
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29261: LD_VAR 0 5
29265: PUSH
29266: LD_INT 1
29268: ARRAY
29269: PPUSH
29270: CALL_OW 305
29274: PUSH
29275: LD_VAR 0 5
29279: PUSH
29280: LD_INT 1
29282: ARRAY
29283: PPUSH
29284: CALL_OW 255
29288: PUSH
29289: LD_VAR 0 1
29293: PPUSH
29294: CALL_OW 255
29298: EQUAL
29299: AND
29300: IFFALSE 29324
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29302: LD_VAR 0 5
29306: PUSH
29307: LD_INT 1
29309: ARRAY
29310: PPUSH
29311: LD_VAR 0 5
29315: PUSH
29316: LD_INT 2
29318: ARRAY
29319: PPUSH
29320: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29324: LD_ADDR_EXP 85
29328: PUSH
29329: LD_EXP 85
29333: PPUSH
29334: LD_VAR 0 4
29338: PPUSH
29339: LD_EXP 85
29343: PUSH
29344: LD_VAR 0 4
29348: ARRAY
29349: PPUSH
29350: LD_VAR 0 3
29354: PPUSH
29355: CALL_OW 3
29359: PPUSH
29360: CALL_OW 1
29364: ST_TO_ADDR
// end ; end ;
29365: GO 29194
29367: POP
29368: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29369: LD_VAR 0 1
29373: PPUSH
29374: LD_EXP 85
29378: PUSH
29379: LD_VAR 0 4
29383: ARRAY
29384: PUSH
29385: LD_INT 0
29387: PLUS
29388: PPUSH
29389: CALL_OW 505
// end ;
29393: LD_VAR 0 2
29397: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29398: LD_INT 0
29400: PPUSH
29401: PPUSH
29402: PPUSH
29403: PPUSH
// if not hack in hackTanks then
29404: LD_VAR 0 1
29408: PUSH
29409: LD_EXP 84
29413: IN
29414: NOT
29415: IFFALSE 29419
// exit ;
29417: GO 29504
// index := GetElementIndex ( hackTanks , hack ) ;
29419: LD_ADDR_VAR 0 5
29423: PUSH
29424: LD_EXP 84
29428: PPUSH
29429: LD_VAR 0 1
29433: PPUSH
29434: CALL 36437 0 2
29438: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29439: LD_ADDR_VAR 0 4
29443: PUSH
29444: DOUBLE
29445: LD_INT 1
29447: DEC
29448: ST_TO_ADDR
29449: LD_EXP 85
29453: PUSH
29454: LD_VAR 0 5
29458: ARRAY
29459: PUSH
29460: FOR_TO
29461: IFFALSE 29502
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29463: LD_EXP 85
29467: PUSH
29468: LD_VAR 0 5
29472: ARRAY
29473: PUSH
29474: LD_VAR 0 4
29478: ARRAY
29479: PUSH
29480: LD_INT 1
29482: ARRAY
29483: PUSH
29484: LD_VAR 0 2
29488: EQUAL
29489: IFFALSE 29500
// KillUnit ( vehicle ) ;
29491: LD_VAR 0 2
29495: PPUSH
29496: CALL_OW 66
29500: GO 29460
29502: POP
29503: POP
// end ;
29504: LD_VAR 0 3
29508: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29509: LD_EXP 89
29513: NOT
29514: IFFALSE 29549
29516: GO 29518
29518: DISABLE
// begin initMiner := true ;
29519: LD_ADDR_EXP 89
29523: PUSH
29524: LD_INT 1
29526: ST_TO_ADDR
// minersList := [ ] ;
29527: LD_ADDR_EXP 90
29531: PUSH
29532: EMPTY
29533: ST_TO_ADDR
// minerMinesList := [ ] ;
29534: LD_ADDR_EXP 91
29538: PUSH
29539: EMPTY
29540: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29541: LD_ADDR_EXP 92
29545: PUSH
29546: LD_INT 5
29548: ST_TO_ADDR
// end ;
29549: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29550: LD_EXP 89
29554: PUSH
29555: LD_INT 34
29557: PUSH
29558: LD_INT 81
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PPUSH
29565: CALL_OW 69
29569: AND
29570: IFFALSE 30031
29572: GO 29574
29574: DISABLE
29575: LD_INT 0
29577: PPUSH
29578: PPUSH
29579: PPUSH
29580: PPUSH
// begin enable ;
29581: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29582: LD_ADDR_VAR 0 1
29586: PUSH
29587: LD_INT 34
29589: PUSH
29590: LD_INT 81
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PPUSH
29597: CALL_OW 69
29601: PUSH
29602: FOR_IN
29603: IFFALSE 29675
// begin if not i in minersList then
29605: LD_VAR 0 1
29609: PUSH
29610: LD_EXP 90
29614: IN
29615: NOT
29616: IFFALSE 29673
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29618: LD_ADDR_EXP 90
29622: PUSH
29623: LD_EXP 90
29627: PPUSH
29628: LD_EXP 90
29632: PUSH
29633: LD_INT 1
29635: PLUS
29636: PPUSH
29637: LD_VAR 0 1
29641: PPUSH
29642: CALL_OW 1
29646: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29647: LD_ADDR_EXP 91
29651: PUSH
29652: LD_EXP 91
29656: PPUSH
29657: LD_EXP 91
29661: PUSH
29662: LD_INT 1
29664: PLUS
29665: PPUSH
29666: EMPTY
29667: PPUSH
29668: CALL_OW 1
29672: ST_TO_ADDR
// end end ;
29673: GO 29602
29675: POP
29676: POP
// for i := minerMinesList downto 1 do
29677: LD_ADDR_VAR 0 1
29681: PUSH
29682: DOUBLE
29683: LD_EXP 91
29687: INC
29688: ST_TO_ADDR
29689: LD_INT 1
29691: PUSH
29692: FOR_DOWNTO
29693: IFFALSE 30029
// begin if IsLive ( minersList [ i ] ) then
29695: LD_EXP 90
29699: PUSH
29700: LD_VAR 0 1
29704: ARRAY
29705: PPUSH
29706: CALL_OW 300
29710: IFFALSE 29738
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29712: LD_EXP 90
29716: PUSH
29717: LD_VAR 0 1
29721: ARRAY
29722: PPUSH
29723: LD_EXP 91
29727: PUSH
29728: LD_VAR 0 1
29732: ARRAY
29733: PPUSH
29734: CALL_OW 505
// if not minerMinesList [ i ] then
29738: LD_EXP 91
29742: PUSH
29743: LD_VAR 0 1
29747: ARRAY
29748: NOT
29749: IFFALSE 29753
// continue ;
29751: GO 29692
// for j := minerMinesList [ i ] downto 1 do
29753: LD_ADDR_VAR 0 2
29757: PUSH
29758: DOUBLE
29759: LD_EXP 91
29763: PUSH
29764: LD_VAR 0 1
29768: ARRAY
29769: INC
29770: ST_TO_ADDR
29771: LD_INT 1
29773: PUSH
29774: FOR_DOWNTO
29775: IFFALSE 30025
// begin side := GetSide ( minersList [ i ] ) ;
29777: LD_ADDR_VAR 0 3
29781: PUSH
29782: LD_EXP 90
29786: PUSH
29787: LD_VAR 0 1
29791: ARRAY
29792: PPUSH
29793: CALL_OW 255
29797: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29798: LD_ADDR_VAR 0 4
29802: PUSH
29803: LD_EXP 91
29807: PUSH
29808: LD_VAR 0 1
29812: ARRAY
29813: PUSH
29814: LD_VAR 0 2
29818: ARRAY
29819: PUSH
29820: LD_INT 1
29822: ARRAY
29823: PPUSH
29824: LD_EXP 91
29828: PUSH
29829: LD_VAR 0 1
29833: ARRAY
29834: PUSH
29835: LD_VAR 0 2
29839: ARRAY
29840: PUSH
29841: LD_INT 2
29843: ARRAY
29844: PPUSH
29845: CALL_OW 428
29849: ST_TO_ADDR
// if not tmp then
29850: LD_VAR 0 4
29854: NOT
29855: IFFALSE 29859
// continue ;
29857: GO 29774
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29859: LD_VAR 0 4
29863: PUSH
29864: LD_INT 81
29866: PUSH
29867: LD_VAR 0 3
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PPUSH
29876: CALL_OW 69
29880: IN
29881: PUSH
29882: LD_EXP 91
29886: PUSH
29887: LD_VAR 0 1
29891: ARRAY
29892: PUSH
29893: LD_VAR 0 2
29897: ARRAY
29898: PUSH
29899: LD_INT 1
29901: ARRAY
29902: PPUSH
29903: LD_EXP 91
29907: PUSH
29908: LD_VAR 0 1
29912: ARRAY
29913: PUSH
29914: LD_VAR 0 2
29918: ARRAY
29919: PUSH
29920: LD_INT 2
29922: ARRAY
29923: PPUSH
29924: CALL_OW 458
29928: AND
29929: IFFALSE 30023
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29931: LD_EXP 91
29935: PUSH
29936: LD_VAR 0 1
29940: ARRAY
29941: PUSH
29942: LD_VAR 0 2
29946: ARRAY
29947: PUSH
29948: LD_INT 1
29950: ARRAY
29951: PPUSH
29952: LD_EXP 91
29956: PUSH
29957: LD_VAR 0 1
29961: ARRAY
29962: PUSH
29963: LD_VAR 0 2
29967: ARRAY
29968: PUSH
29969: LD_INT 2
29971: ARRAY
29972: PPUSH
29973: LD_VAR 0 3
29977: PPUSH
29978: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29982: LD_ADDR_EXP 91
29986: PUSH
29987: LD_EXP 91
29991: PPUSH
29992: LD_VAR 0 1
29996: PPUSH
29997: LD_EXP 91
30001: PUSH
30002: LD_VAR 0 1
30006: ARRAY
30007: PPUSH
30008: LD_VAR 0 2
30012: PPUSH
30013: CALL_OW 3
30017: PPUSH
30018: CALL_OW 1
30022: ST_TO_ADDR
// end ; end ;
30023: GO 29774
30025: POP
30026: POP
// end ;
30027: GO 29692
30029: POP
30030: POP
// end ;
30031: PPOPN 4
30033: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30034: LD_INT 0
30036: PPUSH
30037: PPUSH
// result := false ;
30038: LD_ADDR_VAR 0 4
30042: PUSH
30043: LD_INT 0
30045: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL_OW 264
30055: PUSH
30056: LD_INT 81
30058: EQUAL
30059: NOT
30060: IFFALSE 30064
// exit ;
30062: GO 30304
// index := GetElementIndex ( minersList , unit ) ;
30064: LD_ADDR_VAR 0 5
30068: PUSH
30069: LD_EXP 90
30073: PPUSH
30074: LD_VAR 0 1
30078: PPUSH
30079: CALL 36437 0 2
30083: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30084: LD_EXP 91
30088: PUSH
30089: LD_VAR 0 5
30093: ARRAY
30094: PUSH
30095: LD_EXP 92
30099: GREATEREQUAL
30100: IFFALSE 30104
// exit ;
30102: GO 30304
// ComMoveXY ( unit , x , y ) ;
30104: LD_VAR 0 1
30108: PPUSH
30109: LD_VAR 0 2
30113: PPUSH
30114: LD_VAR 0 3
30118: PPUSH
30119: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30123: LD_INT 35
30125: PPUSH
30126: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30130: LD_VAR 0 1
30134: PPUSH
30135: LD_VAR 0 2
30139: PPUSH
30140: LD_VAR 0 3
30144: PPUSH
30145: CALL 67792 0 3
30149: NOT
30150: PUSH
30151: LD_VAR 0 1
30155: PPUSH
30156: CALL_OW 314
30160: AND
30161: IFFALSE 30165
// exit ;
30163: GO 30304
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30165: LD_VAR 0 2
30169: PPUSH
30170: LD_VAR 0 3
30174: PPUSH
30175: CALL_OW 428
30179: PUSH
30180: LD_VAR 0 1
30184: EQUAL
30185: PUSH
30186: LD_VAR 0 1
30190: PPUSH
30191: CALL_OW 314
30195: NOT
30196: AND
30197: IFFALSE 30123
// PlaySoundXY ( x , y , PlantMine ) ;
30199: LD_VAR 0 2
30203: PPUSH
30204: LD_VAR 0 3
30208: PPUSH
30209: LD_STRING PlantMine
30211: PPUSH
30212: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30216: LD_VAR 0 2
30220: PPUSH
30221: LD_VAR 0 3
30225: PPUSH
30226: LD_VAR 0 1
30230: PPUSH
30231: CALL_OW 255
30235: PPUSH
30236: LD_INT 0
30238: PPUSH
30239: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30243: LD_ADDR_EXP 91
30247: PUSH
30248: LD_EXP 91
30252: PPUSH
30253: LD_VAR 0 5
30257: PUSH
30258: LD_EXP 91
30262: PUSH
30263: LD_VAR 0 5
30267: ARRAY
30268: PUSH
30269: LD_INT 1
30271: PLUS
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PPUSH
30277: LD_VAR 0 2
30281: PUSH
30282: LD_VAR 0 3
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PPUSH
30291: CALL 36652 0 3
30295: ST_TO_ADDR
// result := true ;
30296: LD_ADDR_VAR 0 4
30300: PUSH
30301: LD_INT 1
30303: ST_TO_ADDR
// end ;
30304: LD_VAR 0 4
30308: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30309: LD_INT 0
30311: PPUSH
30312: PPUSH
30313: PPUSH
// if not unit in minersList then
30314: LD_VAR 0 1
30318: PUSH
30319: LD_EXP 90
30323: IN
30324: NOT
30325: IFFALSE 30329
// exit ;
30327: GO 30721
// index := GetElementIndex ( minersList , unit ) ;
30329: LD_ADDR_VAR 0 6
30333: PUSH
30334: LD_EXP 90
30338: PPUSH
30339: LD_VAR 0 1
30343: PPUSH
30344: CALL 36437 0 2
30348: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30349: LD_ADDR_VAR 0 5
30353: PUSH
30354: DOUBLE
30355: LD_EXP 91
30359: PUSH
30360: LD_VAR 0 6
30364: ARRAY
30365: INC
30366: ST_TO_ADDR
30367: LD_INT 1
30369: PUSH
30370: FOR_DOWNTO
30371: IFFALSE 30532
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30373: LD_EXP 91
30377: PUSH
30378: LD_VAR 0 6
30382: ARRAY
30383: PUSH
30384: LD_VAR 0 5
30388: ARRAY
30389: PUSH
30390: LD_INT 1
30392: ARRAY
30393: PUSH
30394: LD_VAR 0 2
30398: EQUAL
30399: PUSH
30400: LD_EXP 91
30404: PUSH
30405: LD_VAR 0 6
30409: ARRAY
30410: PUSH
30411: LD_VAR 0 5
30415: ARRAY
30416: PUSH
30417: LD_INT 2
30419: ARRAY
30420: PUSH
30421: LD_VAR 0 3
30425: EQUAL
30426: AND
30427: IFFALSE 30530
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30429: LD_EXP 91
30433: PUSH
30434: LD_VAR 0 6
30438: ARRAY
30439: PUSH
30440: LD_VAR 0 5
30444: ARRAY
30445: PUSH
30446: LD_INT 1
30448: ARRAY
30449: PPUSH
30450: LD_EXP 91
30454: PUSH
30455: LD_VAR 0 6
30459: ARRAY
30460: PUSH
30461: LD_VAR 0 5
30465: ARRAY
30466: PUSH
30467: LD_INT 2
30469: ARRAY
30470: PPUSH
30471: LD_VAR 0 1
30475: PPUSH
30476: CALL_OW 255
30480: PPUSH
30481: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30485: LD_ADDR_EXP 91
30489: PUSH
30490: LD_EXP 91
30494: PPUSH
30495: LD_VAR 0 6
30499: PPUSH
30500: LD_EXP 91
30504: PUSH
30505: LD_VAR 0 6
30509: ARRAY
30510: PPUSH
30511: LD_VAR 0 5
30515: PPUSH
30516: CALL_OW 3
30520: PPUSH
30521: CALL_OW 1
30525: ST_TO_ADDR
// exit ;
30526: POP
30527: POP
30528: GO 30721
// end ; end ;
30530: GO 30370
30532: POP
30533: POP
// for i := minerMinesList [ index ] downto 1 do
30534: LD_ADDR_VAR 0 5
30538: PUSH
30539: DOUBLE
30540: LD_EXP 91
30544: PUSH
30545: LD_VAR 0 6
30549: ARRAY
30550: INC
30551: ST_TO_ADDR
30552: LD_INT 1
30554: PUSH
30555: FOR_DOWNTO
30556: IFFALSE 30719
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30558: LD_EXP 91
30562: PUSH
30563: LD_VAR 0 6
30567: ARRAY
30568: PUSH
30569: LD_VAR 0 5
30573: ARRAY
30574: PUSH
30575: LD_INT 1
30577: ARRAY
30578: PPUSH
30579: LD_EXP 91
30583: PUSH
30584: LD_VAR 0 6
30588: ARRAY
30589: PUSH
30590: LD_VAR 0 5
30594: ARRAY
30595: PUSH
30596: LD_INT 2
30598: ARRAY
30599: PPUSH
30600: LD_VAR 0 2
30604: PPUSH
30605: LD_VAR 0 3
30609: PPUSH
30610: CALL_OW 298
30614: PUSH
30615: LD_INT 6
30617: LESS
30618: IFFALSE 30717
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30620: LD_EXP 91
30624: PUSH
30625: LD_VAR 0 6
30629: ARRAY
30630: PUSH
30631: LD_VAR 0 5
30635: ARRAY
30636: PUSH
30637: LD_INT 1
30639: ARRAY
30640: PPUSH
30641: LD_EXP 91
30645: PUSH
30646: LD_VAR 0 6
30650: ARRAY
30651: PUSH
30652: LD_VAR 0 5
30656: ARRAY
30657: PUSH
30658: LD_INT 2
30660: ARRAY
30661: PPUSH
30662: LD_VAR 0 1
30666: PPUSH
30667: CALL_OW 255
30671: PPUSH
30672: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30676: LD_ADDR_EXP 91
30680: PUSH
30681: LD_EXP 91
30685: PPUSH
30686: LD_VAR 0 6
30690: PPUSH
30691: LD_EXP 91
30695: PUSH
30696: LD_VAR 0 6
30700: ARRAY
30701: PPUSH
30702: LD_VAR 0 5
30706: PPUSH
30707: CALL_OW 3
30711: PPUSH
30712: CALL_OW 1
30716: ST_TO_ADDR
// end ; end ;
30717: GO 30555
30719: POP
30720: POP
// end ;
30721: LD_VAR 0 4
30725: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30726: LD_INT 0
30728: PPUSH
30729: PPUSH
30730: PPUSH
30731: PPUSH
30732: PPUSH
30733: PPUSH
30734: PPUSH
30735: PPUSH
30736: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30737: LD_VAR 0 1
30741: PPUSH
30742: CALL_OW 264
30746: PUSH
30747: LD_INT 81
30749: EQUAL
30750: NOT
30751: PUSH
30752: LD_VAR 0 1
30756: PUSH
30757: LD_EXP 90
30761: IN
30762: NOT
30763: OR
30764: IFFALSE 30768
// exit ;
30766: GO 31090
// index := GetElementIndex ( minersList , unit ) ;
30768: LD_ADDR_VAR 0 6
30772: PUSH
30773: LD_EXP 90
30777: PPUSH
30778: LD_VAR 0 1
30782: PPUSH
30783: CALL 36437 0 2
30787: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30788: LD_ADDR_VAR 0 8
30792: PUSH
30793: LD_EXP 92
30797: PUSH
30798: LD_EXP 91
30802: PUSH
30803: LD_VAR 0 6
30807: ARRAY
30808: MINUS
30809: ST_TO_ADDR
// if not minesFreeAmount then
30810: LD_VAR 0 8
30814: NOT
30815: IFFALSE 30819
// exit ;
30817: GO 31090
// tmp := [ ] ;
30819: LD_ADDR_VAR 0 7
30823: PUSH
30824: EMPTY
30825: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30826: LD_ADDR_VAR 0 5
30830: PUSH
30831: DOUBLE
30832: LD_INT 1
30834: DEC
30835: ST_TO_ADDR
30836: LD_VAR 0 8
30840: PUSH
30841: FOR_TO
30842: IFFALSE 31037
// begin _d := rand ( 0 , 5 ) ;
30844: LD_ADDR_VAR 0 11
30848: PUSH
30849: LD_INT 0
30851: PPUSH
30852: LD_INT 5
30854: PPUSH
30855: CALL_OW 12
30859: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30860: LD_ADDR_VAR 0 12
30864: PUSH
30865: LD_INT 2
30867: PPUSH
30868: LD_INT 6
30870: PPUSH
30871: CALL_OW 12
30875: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30876: LD_ADDR_VAR 0 9
30880: PUSH
30881: LD_VAR 0 2
30885: PPUSH
30886: LD_VAR 0 11
30890: PPUSH
30891: LD_VAR 0 12
30895: PPUSH
30896: CALL_OW 272
30900: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30901: LD_ADDR_VAR 0 10
30905: PUSH
30906: LD_VAR 0 3
30910: PPUSH
30911: LD_VAR 0 11
30915: PPUSH
30916: LD_VAR 0 12
30920: PPUSH
30921: CALL_OW 273
30925: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30926: LD_VAR 0 9
30930: PPUSH
30931: LD_VAR 0 10
30935: PPUSH
30936: CALL_OW 488
30940: PUSH
30941: LD_VAR 0 9
30945: PUSH
30946: LD_VAR 0 10
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_VAR 0 7
30959: IN
30960: NOT
30961: AND
30962: PUSH
30963: LD_VAR 0 9
30967: PPUSH
30968: LD_VAR 0 10
30972: PPUSH
30973: CALL_OW 458
30977: NOT
30978: AND
30979: IFFALSE 31021
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30981: LD_ADDR_VAR 0 7
30985: PUSH
30986: LD_VAR 0 7
30990: PPUSH
30991: LD_VAR 0 7
30995: PUSH
30996: LD_INT 1
30998: PLUS
30999: PPUSH
31000: LD_VAR 0 9
31004: PUSH
31005: LD_VAR 0 10
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PPUSH
31014: CALL_OW 1
31018: ST_TO_ADDR
31019: GO 31035
// i := i - 1 ;
31021: LD_ADDR_VAR 0 5
31025: PUSH
31026: LD_VAR 0 5
31030: PUSH
31031: LD_INT 1
31033: MINUS
31034: ST_TO_ADDR
// end ;
31035: GO 30841
31037: POP
31038: POP
// for i in tmp do
31039: LD_ADDR_VAR 0 5
31043: PUSH
31044: LD_VAR 0 7
31048: PUSH
31049: FOR_IN
31050: IFFALSE 31088
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31052: LD_VAR 0 1
31056: PPUSH
31057: LD_VAR 0 5
31061: PUSH
31062: LD_INT 1
31064: ARRAY
31065: PPUSH
31066: LD_VAR 0 5
31070: PUSH
31071: LD_INT 2
31073: ARRAY
31074: PPUSH
31075: CALL 30034 0 3
31079: NOT
31080: IFFALSE 31086
// exit ;
31082: POP
31083: POP
31084: GO 31090
31086: GO 31049
31088: POP
31089: POP
// end ;
31090: LD_VAR 0 4
31094: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31095: LD_INT 0
31097: PPUSH
31098: PPUSH
31099: PPUSH
31100: PPUSH
31101: PPUSH
31102: PPUSH
31103: PPUSH
// if not GetClass ( unit ) = class_sniper then
31104: LD_VAR 0 1
31108: PPUSH
31109: CALL_OW 257
31113: PUSH
31114: LD_INT 5
31116: EQUAL
31117: NOT
31118: IFFALSE 31122
// exit ;
31120: GO 31510
// dist := 8 ;
31122: LD_ADDR_VAR 0 5
31126: PUSH
31127: LD_INT 8
31129: ST_TO_ADDR
// viewRange := 12 ;
31130: LD_ADDR_VAR 0 7
31134: PUSH
31135: LD_INT 12
31137: ST_TO_ADDR
// side := GetSide ( unit ) ;
31138: LD_ADDR_VAR 0 6
31142: PUSH
31143: LD_VAR 0 1
31147: PPUSH
31148: CALL_OW 255
31152: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31153: LD_INT 61
31155: PPUSH
31156: LD_VAR 0 6
31160: PPUSH
31161: CALL_OW 321
31165: PUSH
31166: LD_INT 2
31168: EQUAL
31169: IFFALSE 31179
// viewRange := 16 ;
31171: LD_ADDR_VAR 0 7
31175: PUSH
31176: LD_INT 16
31178: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31179: LD_VAR 0 1
31183: PPUSH
31184: LD_VAR 0 2
31188: PPUSH
31189: LD_VAR 0 3
31193: PPUSH
31194: CALL_OW 297
31198: PUSH
31199: LD_VAR 0 5
31203: GREATER
31204: IFFALSE 31283
// begin ComMoveXY ( unit , x , y ) ;
31206: LD_VAR 0 1
31210: PPUSH
31211: LD_VAR 0 2
31215: PPUSH
31216: LD_VAR 0 3
31220: PPUSH
31221: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31225: LD_INT 35
31227: PPUSH
31228: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31232: LD_VAR 0 1
31236: PPUSH
31237: LD_VAR 0 2
31241: PPUSH
31242: LD_VAR 0 3
31246: PPUSH
31247: CALL 67792 0 3
31251: NOT
31252: IFFALSE 31256
// exit ;
31254: GO 31510
// until GetDistUnitXY ( unit , x , y ) < dist ;
31256: LD_VAR 0 1
31260: PPUSH
31261: LD_VAR 0 2
31265: PPUSH
31266: LD_VAR 0 3
31270: PPUSH
31271: CALL_OW 297
31275: PUSH
31276: LD_VAR 0 5
31280: LESS
31281: IFFALSE 31225
// end ; ComTurnXY ( unit , x , y ) ;
31283: LD_VAR 0 1
31287: PPUSH
31288: LD_VAR 0 2
31292: PPUSH
31293: LD_VAR 0 3
31297: PPUSH
31298: CALL_OW 118
// wait ( 5 ) ;
31302: LD_INT 5
31304: PPUSH
31305: CALL_OW 67
// _d := GetDir ( unit ) ;
31309: LD_ADDR_VAR 0 10
31313: PUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL_OW 254
31323: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31324: LD_ADDR_VAR 0 8
31328: PUSH
31329: LD_VAR 0 1
31333: PPUSH
31334: CALL_OW 250
31338: PPUSH
31339: LD_VAR 0 10
31343: PPUSH
31344: LD_VAR 0 5
31348: PPUSH
31349: CALL_OW 272
31353: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31354: LD_ADDR_VAR 0 9
31358: PUSH
31359: LD_VAR 0 1
31363: PPUSH
31364: CALL_OW 251
31368: PPUSH
31369: LD_VAR 0 10
31373: PPUSH
31374: LD_VAR 0 5
31378: PPUSH
31379: CALL_OW 273
31383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31384: LD_VAR 0 8
31388: PPUSH
31389: LD_VAR 0 9
31393: PPUSH
31394: CALL_OW 488
31398: NOT
31399: IFFALSE 31403
// exit ;
31401: GO 31510
// ComAnimCustom ( unit , 1 ) ;
31403: LD_VAR 0 1
31407: PPUSH
31408: LD_INT 1
31410: PPUSH
31411: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31415: LD_VAR 0 8
31419: PPUSH
31420: LD_VAR 0 9
31424: PPUSH
31425: LD_VAR 0 6
31429: PPUSH
31430: LD_VAR 0 7
31434: PPUSH
31435: CALL_OW 330
// repeat wait ( 1 ) ;
31439: LD_INT 1
31441: PPUSH
31442: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31446: LD_VAR 0 1
31450: PPUSH
31451: CALL_OW 316
31455: PUSH
31456: LD_VAR 0 1
31460: PPUSH
31461: CALL_OW 314
31465: OR
31466: PUSH
31467: LD_VAR 0 1
31471: PPUSH
31472: CALL_OW 302
31476: NOT
31477: OR
31478: PUSH
31479: LD_VAR 0 1
31483: PPUSH
31484: CALL_OW 301
31488: OR
31489: IFFALSE 31439
// RemoveSeeing ( _x , _y , side ) ;
31491: LD_VAR 0 8
31495: PPUSH
31496: LD_VAR 0 9
31500: PPUSH
31501: LD_VAR 0 6
31505: PPUSH
31506: CALL_OW 331
// end ; end_of_file
31510: LD_VAR 0 4
31514: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31515: LD_INT 0
31517: PPUSH
31518: PPUSH
// if exist_mode then
31519: LD_VAR 0 2
31523: IFFALSE 31548
// unit := CreateCharacter ( prefix & ident ) else
31525: LD_ADDR_VAR 0 5
31529: PUSH
31530: LD_VAR 0 3
31534: PUSH
31535: LD_VAR 0 1
31539: STR
31540: PPUSH
31541: CALL_OW 34
31545: ST_TO_ADDR
31546: GO 31563
// unit := NewCharacter ( ident ) ;
31548: LD_ADDR_VAR 0 5
31552: PUSH
31553: LD_VAR 0 1
31557: PPUSH
31558: CALL_OW 25
31562: ST_TO_ADDR
// result := unit ;
31563: LD_ADDR_VAR 0 4
31567: PUSH
31568: LD_VAR 0 5
31572: ST_TO_ADDR
// end ;
31573: LD_VAR 0 4
31577: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31578: LD_INT 0
31580: PPUSH
31581: PPUSH
// if not side or not nation then
31582: LD_VAR 0 1
31586: NOT
31587: PUSH
31588: LD_VAR 0 2
31592: NOT
31593: OR
31594: IFFALSE 31598
// exit ;
31596: GO 32366
// case nation of nation_american :
31598: LD_VAR 0 2
31602: PUSH
31603: LD_INT 1
31605: DOUBLE
31606: EQUAL
31607: IFTRUE 31611
31609: GO 31825
31611: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31612: LD_ADDR_VAR 0 4
31616: PUSH
31617: LD_INT 35
31619: PUSH
31620: LD_INT 45
31622: PUSH
31623: LD_INT 46
31625: PUSH
31626: LD_INT 47
31628: PUSH
31629: LD_INT 82
31631: PUSH
31632: LD_INT 83
31634: PUSH
31635: LD_INT 84
31637: PUSH
31638: LD_INT 85
31640: PUSH
31641: LD_INT 86
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: LD_INT 6
31652: PUSH
31653: LD_INT 15
31655: PUSH
31656: LD_INT 16
31658: PUSH
31659: LD_INT 7
31661: PUSH
31662: LD_INT 12
31664: PUSH
31665: LD_INT 13
31667: PUSH
31668: LD_INT 10
31670: PUSH
31671: LD_INT 14
31673: PUSH
31674: LD_INT 20
31676: PUSH
31677: LD_INT 21
31679: PUSH
31680: LD_INT 22
31682: PUSH
31683: LD_INT 25
31685: PUSH
31686: LD_INT 32
31688: PUSH
31689: LD_INT 27
31691: PUSH
31692: LD_INT 36
31694: PUSH
31695: LD_INT 69
31697: PUSH
31698: LD_INT 39
31700: PUSH
31701: LD_INT 34
31703: PUSH
31704: LD_INT 40
31706: PUSH
31707: LD_INT 48
31709: PUSH
31710: LD_INT 49
31712: PUSH
31713: LD_INT 50
31715: PUSH
31716: LD_INT 51
31718: PUSH
31719: LD_INT 52
31721: PUSH
31722: LD_INT 53
31724: PUSH
31725: LD_INT 54
31727: PUSH
31728: LD_INT 55
31730: PUSH
31731: LD_INT 56
31733: PUSH
31734: LD_INT 57
31736: PUSH
31737: LD_INT 58
31739: PUSH
31740: LD_INT 59
31742: PUSH
31743: LD_INT 60
31745: PUSH
31746: LD_INT 61
31748: PUSH
31749: LD_INT 62
31751: PUSH
31752: LD_INT 80
31754: PUSH
31755: LD_INT 82
31757: PUSH
31758: LD_INT 83
31760: PUSH
31761: LD_INT 84
31763: PUSH
31764: LD_INT 85
31766: PUSH
31767: LD_INT 86
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: ST_TO_ADDR
31823: GO 32290
31825: LD_INT 2
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31833
31831: GO 32059
31833: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31834: LD_ADDR_VAR 0 4
31838: PUSH
31839: LD_INT 35
31841: PUSH
31842: LD_INT 45
31844: PUSH
31845: LD_INT 46
31847: PUSH
31848: LD_INT 47
31850: PUSH
31851: LD_INT 82
31853: PUSH
31854: LD_INT 83
31856: PUSH
31857: LD_INT 84
31859: PUSH
31860: LD_INT 85
31862: PUSH
31863: LD_INT 87
31865: PUSH
31866: LD_INT 70
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: LD_INT 11
31874: PUSH
31875: LD_INT 3
31877: PUSH
31878: LD_INT 4
31880: PUSH
31881: LD_INT 5
31883: PUSH
31884: LD_INT 6
31886: PUSH
31887: LD_INT 15
31889: PUSH
31890: LD_INT 18
31892: PUSH
31893: LD_INT 7
31895: PUSH
31896: LD_INT 17
31898: PUSH
31899: LD_INT 8
31901: PUSH
31902: LD_INT 20
31904: PUSH
31905: LD_INT 21
31907: PUSH
31908: LD_INT 22
31910: PUSH
31911: LD_INT 72
31913: PUSH
31914: LD_INT 26
31916: PUSH
31917: LD_INT 69
31919: PUSH
31920: LD_INT 39
31922: PUSH
31923: LD_INT 40
31925: PUSH
31926: LD_INT 41
31928: PUSH
31929: LD_INT 42
31931: PUSH
31932: LD_INT 43
31934: PUSH
31935: LD_INT 48
31937: PUSH
31938: LD_INT 49
31940: PUSH
31941: LD_INT 50
31943: PUSH
31944: LD_INT 51
31946: PUSH
31947: LD_INT 52
31949: PUSH
31950: LD_INT 53
31952: PUSH
31953: LD_INT 54
31955: PUSH
31956: LD_INT 55
31958: PUSH
31959: LD_INT 56
31961: PUSH
31962: LD_INT 60
31964: PUSH
31965: LD_INT 61
31967: PUSH
31968: LD_INT 62
31970: PUSH
31971: LD_INT 66
31973: PUSH
31974: LD_INT 67
31976: PUSH
31977: LD_INT 68
31979: PUSH
31980: LD_INT 81
31982: PUSH
31983: LD_INT 82
31985: PUSH
31986: LD_INT 83
31988: PUSH
31989: LD_INT 84
31991: PUSH
31992: LD_INT 85
31994: PUSH
31995: LD_INT 87
31997: PUSH
31998: LD_INT 88
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: ST_TO_ADDR
32057: GO 32290
32059: LD_INT 3
32061: DOUBLE
32062: EQUAL
32063: IFTRUE 32067
32065: GO 32289
32067: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32068: LD_ADDR_VAR 0 4
32072: PUSH
32073: LD_INT 46
32075: PUSH
32076: LD_INT 47
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: LD_INT 2
32084: PUSH
32085: LD_INT 82
32087: PUSH
32088: LD_INT 83
32090: PUSH
32091: LD_INT 84
32093: PUSH
32094: LD_INT 85
32096: PUSH
32097: LD_INT 86
32099: PUSH
32100: LD_INT 11
32102: PUSH
32103: LD_INT 9
32105: PUSH
32106: LD_INT 20
32108: PUSH
32109: LD_INT 19
32111: PUSH
32112: LD_INT 21
32114: PUSH
32115: LD_INT 24
32117: PUSH
32118: LD_INT 22
32120: PUSH
32121: LD_INT 25
32123: PUSH
32124: LD_INT 28
32126: PUSH
32127: LD_INT 29
32129: PUSH
32130: LD_INT 30
32132: PUSH
32133: LD_INT 31
32135: PUSH
32136: LD_INT 37
32138: PUSH
32139: LD_INT 38
32141: PUSH
32142: LD_INT 32
32144: PUSH
32145: LD_INT 27
32147: PUSH
32148: LD_INT 33
32150: PUSH
32151: LD_INT 69
32153: PUSH
32154: LD_INT 39
32156: PUSH
32157: LD_INT 34
32159: PUSH
32160: LD_INT 40
32162: PUSH
32163: LD_INT 71
32165: PUSH
32166: LD_INT 23
32168: PUSH
32169: LD_INT 44
32171: PUSH
32172: LD_INT 48
32174: PUSH
32175: LD_INT 49
32177: PUSH
32178: LD_INT 50
32180: PUSH
32181: LD_INT 51
32183: PUSH
32184: LD_INT 52
32186: PUSH
32187: LD_INT 53
32189: PUSH
32190: LD_INT 54
32192: PUSH
32193: LD_INT 55
32195: PUSH
32196: LD_INT 56
32198: PUSH
32199: LD_INT 57
32201: PUSH
32202: LD_INT 58
32204: PUSH
32205: LD_INT 59
32207: PUSH
32208: LD_INT 63
32210: PUSH
32211: LD_INT 64
32213: PUSH
32214: LD_INT 65
32216: PUSH
32217: LD_INT 82
32219: PUSH
32220: LD_INT 83
32222: PUSH
32223: LD_INT 84
32225: PUSH
32226: LD_INT 85
32228: PUSH
32229: LD_INT 86
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: ST_TO_ADDR
32287: GO 32290
32289: POP
// if state > - 1 and state < 3 then
32290: LD_VAR 0 3
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: GREATER
32299: PUSH
32300: LD_VAR 0 3
32304: PUSH
32305: LD_INT 3
32307: LESS
32308: AND
32309: IFFALSE 32366
// for i in result do
32311: LD_ADDR_VAR 0 5
32315: PUSH
32316: LD_VAR 0 4
32320: PUSH
32321: FOR_IN
32322: IFFALSE 32364
// if GetTech ( i , side ) <> state then
32324: LD_VAR 0 5
32328: PPUSH
32329: LD_VAR 0 1
32333: PPUSH
32334: CALL_OW 321
32338: PUSH
32339: LD_VAR 0 3
32343: NONEQUAL
32344: IFFALSE 32362
// result := result diff i ;
32346: LD_ADDR_VAR 0 4
32350: PUSH
32351: LD_VAR 0 4
32355: PUSH
32356: LD_VAR 0 5
32360: DIFF
32361: ST_TO_ADDR
32362: GO 32321
32364: POP
32365: POP
// end ;
32366: LD_VAR 0 4
32370: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32371: LD_INT 0
32373: PPUSH
32374: PPUSH
32375: PPUSH
// result := true ;
32376: LD_ADDR_VAR 0 3
32380: PUSH
32381: LD_INT 1
32383: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32384: LD_ADDR_VAR 0 5
32388: PUSH
32389: LD_VAR 0 2
32393: PPUSH
32394: CALL_OW 480
32398: ST_TO_ADDR
// if not tmp then
32399: LD_VAR 0 5
32403: NOT
32404: IFFALSE 32408
// exit ;
32406: GO 32457
// for i in tmp do
32408: LD_ADDR_VAR 0 4
32412: PUSH
32413: LD_VAR 0 5
32417: PUSH
32418: FOR_IN
32419: IFFALSE 32455
// if GetTech ( i , side ) <> state_researched then
32421: LD_VAR 0 4
32425: PPUSH
32426: LD_VAR 0 1
32430: PPUSH
32431: CALL_OW 321
32435: PUSH
32436: LD_INT 2
32438: NONEQUAL
32439: IFFALSE 32453
// begin result := false ;
32441: LD_ADDR_VAR 0 3
32445: PUSH
32446: LD_INT 0
32448: ST_TO_ADDR
// exit ;
32449: POP
32450: POP
32451: GO 32457
// end ;
32453: GO 32418
32455: POP
32456: POP
// end ;
32457: LD_VAR 0 3
32461: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32462: LD_INT 0
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32477: LD_VAR 0 1
32481: NOT
32482: PUSH
32483: LD_VAR 0 1
32487: PPUSH
32488: CALL_OW 257
32492: PUSH
32493: LD_INT 9
32495: NONEQUAL
32496: OR
32497: IFFALSE 32501
// exit ;
32499: GO 33074
// side := GetSide ( unit ) ;
32501: LD_ADDR_VAR 0 9
32505: PUSH
32506: LD_VAR 0 1
32510: PPUSH
32511: CALL_OW 255
32515: ST_TO_ADDR
// tech_space := tech_spacanom ;
32516: LD_ADDR_VAR 0 12
32520: PUSH
32521: LD_INT 29
32523: ST_TO_ADDR
// tech_time := tech_taurad ;
32524: LD_ADDR_VAR 0 13
32528: PUSH
32529: LD_INT 28
32531: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32532: LD_ADDR_VAR 0 11
32536: PUSH
32537: LD_VAR 0 1
32541: PPUSH
32542: CALL_OW 310
32546: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32547: LD_VAR 0 11
32551: PPUSH
32552: CALL_OW 247
32556: PUSH
32557: LD_INT 2
32559: EQUAL
32560: IFFALSE 32564
// exit ;
32562: GO 33074
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32564: LD_ADDR_VAR 0 8
32568: PUSH
32569: LD_INT 81
32571: PUSH
32572: LD_VAR 0 9
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 3
32583: PUSH
32584: LD_INT 21
32586: PUSH
32587: LD_INT 3
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PPUSH
32602: CALL_OW 69
32606: ST_TO_ADDR
// if not tmp then
32607: LD_VAR 0 8
32611: NOT
32612: IFFALSE 32616
// exit ;
32614: GO 33074
// if in_unit then
32616: LD_VAR 0 11
32620: IFFALSE 32644
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32622: LD_ADDR_VAR 0 10
32626: PUSH
32627: LD_VAR 0 8
32631: PPUSH
32632: LD_VAR 0 11
32636: PPUSH
32637: CALL_OW 74
32641: ST_TO_ADDR
32642: GO 32664
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32644: LD_ADDR_VAR 0 10
32648: PUSH
32649: LD_VAR 0 8
32653: PPUSH
32654: LD_VAR 0 1
32658: PPUSH
32659: CALL_OW 74
32663: ST_TO_ADDR
// if not enemy then
32664: LD_VAR 0 10
32668: NOT
32669: IFFALSE 32673
// exit ;
32671: GO 33074
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32673: LD_VAR 0 11
32677: PUSH
32678: LD_VAR 0 11
32682: PPUSH
32683: LD_VAR 0 10
32687: PPUSH
32688: CALL_OW 296
32692: PUSH
32693: LD_INT 13
32695: GREATER
32696: AND
32697: PUSH
32698: LD_VAR 0 1
32702: PPUSH
32703: LD_VAR 0 10
32707: PPUSH
32708: CALL_OW 296
32712: PUSH
32713: LD_INT 12
32715: GREATER
32716: OR
32717: IFFALSE 32721
// exit ;
32719: GO 33074
// missile := [ 1 ] ;
32721: LD_ADDR_VAR 0 14
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: EMPTY
32730: LIST
32731: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32732: LD_VAR 0 9
32736: PPUSH
32737: LD_VAR 0 12
32741: PPUSH
32742: CALL_OW 325
32746: IFFALSE 32775
// missile := Replace ( missile , missile + 1 , 2 ) ;
32748: LD_ADDR_VAR 0 14
32752: PUSH
32753: LD_VAR 0 14
32757: PPUSH
32758: LD_VAR 0 14
32762: PUSH
32763: LD_INT 1
32765: PLUS
32766: PPUSH
32767: LD_INT 2
32769: PPUSH
32770: CALL_OW 1
32774: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32775: LD_VAR 0 9
32779: PPUSH
32780: LD_VAR 0 13
32784: PPUSH
32785: CALL_OW 325
32789: PUSH
32790: LD_VAR 0 10
32794: PPUSH
32795: CALL_OW 255
32799: PPUSH
32800: LD_VAR 0 13
32804: PPUSH
32805: CALL_OW 325
32809: NOT
32810: AND
32811: IFFALSE 32840
// missile := Replace ( missile , missile + 1 , 3 ) ;
32813: LD_ADDR_VAR 0 14
32817: PUSH
32818: LD_VAR 0 14
32822: PPUSH
32823: LD_VAR 0 14
32827: PUSH
32828: LD_INT 1
32830: PLUS
32831: PPUSH
32832: LD_INT 3
32834: PPUSH
32835: CALL_OW 1
32839: ST_TO_ADDR
// if missile < 2 then
32840: LD_VAR 0 14
32844: PUSH
32845: LD_INT 2
32847: LESS
32848: IFFALSE 32852
// exit ;
32850: GO 33074
// x := GetX ( enemy ) ;
32852: LD_ADDR_VAR 0 4
32856: PUSH
32857: LD_VAR 0 10
32861: PPUSH
32862: CALL_OW 250
32866: ST_TO_ADDR
// y := GetY ( enemy ) ;
32867: LD_ADDR_VAR 0 5
32871: PUSH
32872: LD_VAR 0 10
32876: PPUSH
32877: CALL_OW 251
32881: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32882: LD_ADDR_VAR 0 6
32886: PUSH
32887: LD_VAR 0 4
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PPUSH
32896: LD_INT 1
32898: PPUSH
32899: CALL_OW 12
32903: PLUS
32904: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32905: LD_ADDR_VAR 0 7
32909: PUSH
32910: LD_VAR 0 5
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PPUSH
32919: LD_INT 1
32921: PPUSH
32922: CALL_OW 12
32926: PLUS
32927: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32928: LD_VAR 0 6
32932: PPUSH
32933: LD_VAR 0 7
32937: PPUSH
32938: CALL_OW 488
32942: NOT
32943: IFFALSE 32965
// begin _x := x ;
32945: LD_ADDR_VAR 0 6
32949: PUSH
32950: LD_VAR 0 4
32954: ST_TO_ADDR
// _y := y ;
32955: LD_ADDR_VAR 0 7
32959: PUSH
32960: LD_VAR 0 5
32964: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: LD_INT 1
32972: PPUSH
32973: LD_VAR 0 14
32977: PPUSH
32978: CALL_OW 12
32982: ST_TO_ADDR
// case i of 1 :
32983: LD_VAR 0 3
32987: PUSH
32988: LD_INT 1
32990: DOUBLE
32991: EQUAL
32992: IFTRUE 32996
32994: GO 33013
32996: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32997: LD_VAR 0 1
33001: PPUSH
33002: LD_VAR 0 10
33006: PPUSH
33007: CALL_OW 115
33011: GO 33074
33013: LD_INT 2
33015: DOUBLE
33016: EQUAL
33017: IFTRUE 33021
33019: GO 33043
33021: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33022: LD_VAR 0 1
33026: PPUSH
33027: LD_VAR 0 6
33031: PPUSH
33032: LD_VAR 0 7
33036: PPUSH
33037: CALL_OW 153
33041: GO 33074
33043: LD_INT 3
33045: DOUBLE
33046: EQUAL
33047: IFTRUE 33051
33049: GO 33073
33051: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33052: LD_VAR 0 1
33056: PPUSH
33057: LD_VAR 0 6
33061: PPUSH
33062: LD_VAR 0 7
33066: PPUSH
33067: CALL_OW 154
33071: GO 33074
33073: POP
// end ;
33074: LD_VAR 0 2
33078: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33079: LD_INT 0
33081: PPUSH
33082: PPUSH
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
// if not unit or not building then
33087: LD_VAR 0 1
33091: NOT
33092: PUSH
33093: LD_VAR 0 2
33097: NOT
33098: OR
33099: IFFALSE 33103
// exit ;
33101: GO 33261
// x := GetX ( building ) ;
33103: LD_ADDR_VAR 0 5
33107: PUSH
33108: LD_VAR 0 2
33112: PPUSH
33113: CALL_OW 250
33117: ST_TO_ADDR
// y := GetY ( building ) ;
33118: LD_ADDR_VAR 0 6
33122: PUSH
33123: LD_VAR 0 2
33127: PPUSH
33128: CALL_OW 251
33132: ST_TO_ADDR
// for i = 0 to 5 do
33133: LD_ADDR_VAR 0 4
33137: PUSH
33138: DOUBLE
33139: LD_INT 0
33141: DEC
33142: ST_TO_ADDR
33143: LD_INT 5
33145: PUSH
33146: FOR_TO
33147: IFFALSE 33259
// begin _x := ShiftX ( x , i , 3 ) ;
33149: LD_ADDR_VAR 0 7
33153: PUSH
33154: LD_VAR 0 5
33158: PPUSH
33159: LD_VAR 0 4
33163: PPUSH
33164: LD_INT 3
33166: PPUSH
33167: CALL_OW 272
33171: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33172: LD_ADDR_VAR 0 8
33176: PUSH
33177: LD_VAR 0 6
33181: PPUSH
33182: LD_VAR 0 4
33186: PPUSH
33187: LD_INT 3
33189: PPUSH
33190: CALL_OW 273
33194: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33195: LD_VAR 0 7
33199: PPUSH
33200: LD_VAR 0 8
33204: PPUSH
33205: CALL_OW 488
33209: NOT
33210: IFFALSE 33214
// continue ;
33212: GO 33146
// if HexInfo ( _x , _y ) = 0 then
33214: LD_VAR 0 7
33218: PPUSH
33219: LD_VAR 0 8
33223: PPUSH
33224: CALL_OW 428
33228: PUSH
33229: LD_INT 0
33231: EQUAL
33232: IFFALSE 33257
// begin ComMoveXY ( unit , _x , _y ) ;
33234: LD_VAR 0 1
33238: PPUSH
33239: LD_VAR 0 7
33243: PPUSH
33244: LD_VAR 0 8
33248: PPUSH
33249: CALL_OW 111
// exit ;
33253: POP
33254: POP
33255: GO 33261
// end ; end ;
33257: GO 33146
33259: POP
33260: POP
// end ;
33261: LD_VAR 0 3
33265: RET
// export function ScanBase ( side , base_area ) ; begin
33266: LD_INT 0
33268: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33269: LD_ADDR_VAR 0 3
33273: PUSH
33274: LD_VAR 0 2
33278: PPUSH
33279: LD_INT 81
33281: PUSH
33282: LD_VAR 0 1
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PPUSH
33291: CALL_OW 70
33295: ST_TO_ADDR
// end ;
33296: LD_VAR 0 3
33300: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33301: LD_INT 0
33303: PPUSH
33304: PPUSH
33305: PPUSH
33306: PPUSH
// result := false ;
33307: LD_ADDR_VAR 0 2
33311: PUSH
33312: LD_INT 0
33314: ST_TO_ADDR
// side := GetSide ( unit ) ;
33315: LD_ADDR_VAR 0 3
33319: PUSH
33320: LD_VAR 0 1
33324: PPUSH
33325: CALL_OW 255
33329: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33330: LD_ADDR_VAR 0 4
33334: PUSH
33335: LD_VAR 0 1
33339: PPUSH
33340: CALL_OW 248
33344: ST_TO_ADDR
// case nat of 1 :
33345: LD_VAR 0 4
33349: PUSH
33350: LD_INT 1
33352: DOUBLE
33353: EQUAL
33354: IFTRUE 33358
33356: GO 33369
33358: POP
// tech := tech_lassight ; 2 :
33359: LD_ADDR_VAR 0 5
33363: PUSH
33364: LD_INT 12
33366: ST_TO_ADDR
33367: GO 33408
33369: LD_INT 2
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33377
33375: GO 33388
33377: POP
// tech := tech_mortar ; 3 :
33378: LD_ADDR_VAR 0 5
33382: PUSH
33383: LD_INT 41
33385: ST_TO_ADDR
33386: GO 33408
33388: LD_INT 3
33390: DOUBLE
33391: EQUAL
33392: IFTRUE 33396
33394: GO 33407
33396: POP
// tech := tech_bazooka ; end ;
33397: LD_ADDR_VAR 0 5
33401: PUSH
33402: LD_INT 44
33404: ST_TO_ADDR
33405: GO 33408
33407: POP
// if Researched ( side , tech ) then
33408: LD_VAR 0 3
33412: PPUSH
33413: LD_VAR 0 5
33417: PPUSH
33418: CALL_OW 325
33422: IFFALSE 33449
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33424: LD_ADDR_VAR 0 2
33428: PUSH
33429: LD_INT 5
33431: PUSH
33432: LD_INT 8
33434: PUSH
33435: LD_INT 9
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: LIST
33442: PUSH
33443: LD_VAR 0 4
33447: ARRAY
33448: ST_TO_ADDR
// end ;
33449: LD_VAR 0 2
33453: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33454: LD_INT 0
33456: PPUSH
33457: PPUSH
33458: PPUSH
// if not mines then
33459: LD_VAR 0 2
33463: NOT
33464: IFFALSE 33468
// exit ;
33466: GO 33612
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33468: LD_ADDR_VAR 0 5
33472: PUSH
33473: LD_INT 81
33475: PUSH
33476: LD_VAR 0 1
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 3
33487: PUSH
33488: LD_INT 21
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PPUSH
33506: CALL_OW 69
33510: ST_TO_ADDR
// for i in mines do
33511: LD_ADDR_VAR 0 4
33515: PUSH
33516: LD_VAR 0 2
33520: PUSH
33521: FOR_IN
33522: IFFALSE 33610
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33524: LD_VAR 0 4
33528: PUSH
33529: LD_INT 1
33531: ARRAY
33532: PPUSH
33533: LD_VAR 0 4
33537: PUSH
33538: LD_INT 2
33540: ARRAY
33541: PPUSH
33542: CALL_OW 458
33546: NOT
33547: IFFALSE 33551
// continue ;
33549: GO 33521
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33551: LD_VAR 0 4
33555: PUSH
33556: LD_INT 1
33558: ARRAY
33559: PPUSH
33560: LD_VAR 0 4
33564: PUSH
33565: LD_INT 2
33567: ARRAY
33568: PPUSH
33569: CALL_OW 428
33573: PUSH
33574: LD_VAR 0 5
33578: IN
33579: IFFALSE 33608
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33581: LD_VAR 0 4
33585: PUSH
33586: LD_INT 1
33588: ARRAY
33589: PPUSH
33590: LD_VAR 0 4
33594: PUSH
33595: LD_INT 2
33597: ARRAY
33598: PPUSH
33599: LD_VAR 0 1
33603: PPUSH
33604: CALL_OW 456
// end ;
33608: GO 33521
33610: POP
33611: POP
// end ;
33612: LD_VAR 0 3
33616: RET
// export function Count ( array ) ; var i ; begin
33617: LD_INT 0
33619: PPUSH
33620: PPUSH
// result := 0 ;
33621: LD_ADDR_VAR 0 2
33625: PUSH
33626: LD_INT 0
33628: ST_TO_ADDR
// for i in array do
33629: LD_ADDR_VAR 0 3
33633: PUSH
33634: LD_VAR 0 1
33638: PUSH
33639: FOR_IN
33640: IFFALSE 33664
// if i then
33642: LD_VAR 0 3
33646: IFFALSE 33662
// result := result + 1 ;
33648: LD_ADDR_VAR 0 2
33652: PUSH
33653: LD_VAR 0 2
33657: PUSH
33658: LD_INT 1
33660: PLUS
33661: ST_TO_ADDR
33662: GO 33639
33664: POP
33665: POP
// end ;
33666: LD_VAR 0 2
33670: RET
// export function IsEmpty ( building ) ; begin
33671: LD_INT 0
33673: PPUSH
// if not building then
33674: LD_VAR 0 1
33678: NOT
33679: IFFALSE 33683
// exit ;
33681: GO 33726
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33683: LD_ADDR_VAR 0 2
33687: PUSH
33688: LD_VAR 0 1
33692: PUSH
33693: LD_INT 22
33695: PUSH
33696: LD_VAR 0 1
33700: PPUSH
33701: CALL_OW 255
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 58
33712: PUSH
33713: EMPTY
33714: LIST
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PPUSH
33720: CALL_OW 69
33724: IN
33725: ST_TO_ADDR
// end ;
33726: LD_VAR 0 2
33730: RET
// export function IsNotFull ( building ) ; var places ; begin
33731: LD_INT 0
33733: PPUSH
33734: PPUSH
// if not building then
33735: LD_VAR 0 1
33739: NOT
33740: IFFALSE 33744
// exit ;
33742: GO 33915
// result := false ;
33744: LD_ADDR_VAR 0 2
33748: PUSH
33749: LD_INT 0
33751: ST_TO_ADDR
// places := 0 ;
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: LD_INT 0
33759: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33760: LD_VAR 0 1
33764: PPUSH
33765: CALL_OW 266
33769: PUSH
33770: LD_INT 0
33772: DOUBLE
33773: EQUAL
33774: IFTRUE 33832
33776: LD_INT 1
33778: DOUBLE
33779: EQUAL
33780: IFTRUE 33832
33782: LD_INT 6
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33832
33788: LD_INT 7
33790: DOUBLE
33791: EQUAL
33792: IFTRUE 33832
33794: LD_INT 8
33796: DOUBLE
33797: EQUAL
33798: IFTRUE 33832
33800: LD_INT 4
33802: DOUBLE
33803: EQUAL
33804: IFTRUE 33832
33806: LD_INT 5
33808: DOUBLE
33809: EQUAL
33810: IFTRUE 33832
33812: LD_INT 2
33814: DOUBLE
33815: EQUAL
33816: IFTRUE 33832
33818: LD_INT 3
33820: DOUBLE
33821: EQUAL
33822: IFTRUE 33832
33824: LD_INT 35
33826: DOUBLE
33827: EQUAL
33828: IFTRUE 33832
33830: GO 33843
33832: POP
// places := 6 ; b_bunker , b_breastwork :
33833: LD_ADDR_VAR 0 3
33837: PUSH
33838: LD_INT 6
33840: ST_TO_ADDR
33841: GO 33888
33843: LD_INT 32
33845: DOUBLE
33846: EQUAL
33847: IFTRUE 33857
33849: LD_INT 31
33851: DOUBLE
33852: EQUAL
33853: IFTRUE 33857
33855: GO 33868
33857: POP
// places := 1 ; b_control_tower :
33858: LD_ADDR_VAR 0 3
33862: PUSH
33863: LD_INT 1
33865: ST_TO_ADDR
33866: GO 33888
33868: LD_INT 36
33870: DOUBLE
33871: EQUAL
33872: IFTRUE 33876
33874: GO 33887
33876: POP
// places := 3 ; end ;
33877: LD_ADDR_VAR 0 3
33881: PUSH
33882: LD_INT 3
33884: ST_TO_ADDR
33885: GO 33888
33887: POP
// if places then
33888: LD_VAR 0 3
33892: IFFALSE 33915
// result := UnitsInside ( building ) < places ;
33894: LD_ADDR_VAR 0 2
33898: PUSH
33899: LD_VAR 0 1
33903: PPUSH
33904: CALL_OW 313
33908: PUSH
33909: LD_VAR 0 3
33913: LESS
33914: ST_TO_ADDR
// end ;
33915: LD_VAR 0 2
33919: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33920: LD_INT 0
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
// tmp := [ ] ;
33926: LD_ADDR_VAR 0 3
33930: PUSH
33931: EMPTY
33932: ST_TO_ADDR
// list := [ ] ;
33933: LD_ADDR_VAR 0 5
33937: PUSH
33938: EMPTY
33939: ST_TO_ADDR
// for i = 16 to 25 do
33940: LD_ADDR_VAR 0 4
33944: PUSH
33945: DOUBLE
33946: LD_INT 16
33948: DEC
33949: ST_TO_ADDR
33950: LD_INT 25
33952: PUSH
33953: FOR_TO
33954: IFFALSE 34027
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33956: LD_ADDR_VAR 0 3
33960: PUSH
33961: LD_VAR 0 3
33965: PUSH
33966: LD_INT 22
33968: PUSH
33969: LD_VAR 0 1
33973: PPUSH
33974: CALL_OW 255
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 91
33985: PUSH
33986: LD_VAR 0 1
33990: PUSH
33991: LD_INT 6
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 30
34001: PUSH
34002: LD_VAR 0 4
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: PUSH
34016: EMPTY
34017: LIST
34018: PPUSH
34019: CALL_OW 69
34023: ADD
34024: ST_TO_ADDR
34025: GO 33953
34027: POP
34028: POP
// for i = 1 to tmp do
34029: LD_ADDR_VAR 0 4
34033: PUSH
34034: DOUBLE
34035: LD_INT 1
34037: DEC
34038: ST_TO_ADDR
34039: LD_VAR 0 3
34043: PUSH
34044: FOR_TO
34045: IFFALSE 34133
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34047: LD_ADDR_VAR 0 5
34051: PUSH
34052: LD_VAR 0 5
34056: PUSH
34057: LD_VAR 0 3
34061: PUSH
34062: LD_VAR 0 4
34066: ARRAY
34067: PPUSH
34068: CALL_OW 266
34072: PUSH
34073: LD_VAR 0 3
34077: PUSH
34078: LD_VAR 0 4
34082: ARRAY
34083: PPUSH
34084: CALL_OW 250
34088: PUSH
34089: LD_VAR 0 3
34093: PUSH
34094: LD_VAR 0 4
34098: ARRAY
34099: PPUSH
34100: CALL_OW 251
34104: PUSH
34105: LD_VAR 0 3
34109: PUSH
34110: LD_VAR 0 4
34114: ARRAY
34115: PPUSH
34116: CALL_OW 254
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: PUSH
34127: EMPTY
34128: LIST
34129: ADD
34130: ST_TO_ADDR
34131: GO 34044
34133: POP
34134: POP
// result := list ;
34135: LD_ADDR_VAR 0 2
34139: PUSH
34140: LD_VAR 0 5
34144: ST_TO_ADDR
// end ;
34145: LD_VAR 0 2
34149: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34150: LD_INT 0
34152: PPUSH
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
34157: PPUSH
34158: PPUSH
// if not factory then
34159: LD_VAR 0 1
34163: NOT
34164: IFFALSE 34168
// exit ;
34166: GO 34761
// if control = control_apeman then
34168: LD_VAR 0 4
34172: PUSH
34173: LD_INT 5
34175: EQUAL
34176: IFFALSE 34285
// begin tmp := UnitsInside ( factory ) ;
34178: LD_ADDR_VAR 0 8
34182: PUSH
34183: LD_VAR 0 1
34187: PPUSH
34188: CALL_OW 313
34192: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34193: LD_VAR 0 8
34197: PPUSH
34198: LD_INT 25
34200: PUSH
34201: LD_INT 12
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PPUSH
34208: CALL_OW 72
34212: NOT
34213: IFFALSE 34223
// control := control_manual ;
34215: LD_ADDR_VAR 0 4
34219: PUSH
34220: LD_INT 1
34222: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34223: LD_ADDR_VAR 0 8
34227: PUSH
34228: LD_VAR 0 1
34232: PPUSH
34233: CALL 33920 0 1
34237: ST_TO_ADDR
// if tmp then
34238: LD_VAR 0 8
34242: IFFALSE 34285
// begin for i in tmp do
34244: LD_ADDR_VAR 0 7
34248: PUSH
34249: LD_VAR 0 8
34253: PUSH
34254: FOR_IN
34255: IFFALSE 34283
// if i [ 1 ] = b_ext_radio then
34257: LD_VAR 0 7
34261: PUSH
34262: LD_INT 1
34264: ARRAY
34265: PUSH
34266: LD_INT 22
34268: EQUAL
34269: IFFALSE 34281
// begin control := control_remote ;
34271: LD_ADDR_VAR 0 4
34275: PUSH
34276: LD_INT 2
34278: ST_TO_ADDR
// break ;
34279: GO 34283
// end ;
34281: GO 34254
34283: POP
34284: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34285: LD_VAR 0 1
34289: PPUSH
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 3
34299: PPUSH
34300: LD_VAR 0 4
34304: PPUSH
34305: LD_VAR 0 5
34309: PPUSH
34310: CALL_OW 448
34314: IFFALSE 34349
// begin result := [ chassis , engine , control , weapon ] ;
34316: LD_ADDR_VAR 0 6
34320: PUSH
34321: LD_VAR 0 2
34325: PUSH
34326: LD_VAR 0 3
34330: PUSH
34331: LD_VAR 0 4
34335: PUSH
34336: LD_VAR 0 5
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: ST_TO_ADDR
// exit ;
34347: GO 34761
// end ; _chassis := AvailableChassisList ( factory ) ;
34349: LD_ADDR_VAR 0 9
34353: PUSH
34354: LD_VAR 0 1
34358: PPUSH
34359: CALL_OW 475
34363: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34364: LD_ADDR_VAR 0 11
34368: PUSH
34369: LD_VAR 0 1
34373: PPUSH
34374: CALL_OW 476
34378: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34379: LD_ADDR_VAR 0 12
34383: PUSH
34384: LD_VAR 0 1
34388: PPUSH
34389: CALL_OW 477
34393: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34394: LD_ADDR_VAR 0 10
34398: PUSH
34399: LD_VAR 0 1
34403: PPUSH
34404: CALL_OW 478
34408: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34409: LD_VAR 0 9
34413: NOT
34414: PUSH
34415: LD_VAR 0 11
34419: NOT
34420: OR
34421: PUSH
34422: LD_VAR 0 12
34426: NOT
34427: OR
34428: PUSH
34429: LD_VAR 0 10
34433: NOT
34434: OR
34435: IFFALSE 34470
// begin result := [ chassis , engine , control , weapon ] ;
34437: LD_ADDR_VAR 0 6
34441: PUSH
34442: LD_VAR 0 2
34446: PUSH
34447: LD_VAR 0 3
34451: PUSH
34452: LD_VAR 0 4
34456: PUSH
34457: LD_VAR 0 5
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: ST_TO_ADDR
// exit ;
34468: GO 34761
// end ; if not chassis in _chassis then
34470: LD_VAR 0 2
34474: PUSH
34475: LD_VAR 0 9
34479: IN
34480: NOT
34481: IFFALSE 34507
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34483: LD_ADDR_VAR 0 2
34487: PUSH
34488: LD_VAR 0 9
34492: PUSH
34493: LD_INT 1
34495: PPUSH
34496: LD_VAR 0 9
34500: PPUSH
34501: CALL_OW 12
34505: ARRAY
34506: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34507: LD_VAR 0 2
34511: PPUSH
34512: LD_VAR 0 3
34516: PPUSH
34517: CALL 34766 0 2
34521: NOT
34522: IFFALSE 34581
// repeat engine := _engine [ 1 ] ;
34524: LD_ADDR_VAR 0 3
34528: PUSH
34529: LD_VAR 0 11
34533: PUSH
34534: LD_INT 1
34536: ARRAY
34537: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34538: LD_ADDR_VAR 0 11
34542: PUSH
34543: LD_VAR 0 11
34547: PPUSH
34548: LD_INT 1
34550: PPUSH
34551: CALL_OW 3
34555: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34556: LD_VAR 0 2
34560: PPUSH
34561: LD_VAR 0 3
34565: PPUSH
34566: CALL 34766 0 2
34570: PUSH
34571: LD_VAR 0 11
34575: PUSH
34576: EMPTY
34577: EQUAL
34578: OR
34579: IFFALSE 34524
// if not control in _control then
34581: LD_VAR 0 4
34585: PUSH
34586: LD_VAR 0 12
34590: IN
34591: NOT
34592: IFFALSE 34618
// control := _control [ rand ( 1 , _control ) ] ;
34594: LD_ADDR_VAR 0 4
34598: PUSH
34599: LD_VAR 0 12
34603: PUSH
34604: LD_INT 1
34606: PPUSH
34607: LD_VAR 0 12
34611: PPUSH
34612: CALL_OW 12
34616: ARRAY
34617: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34618: LD_VAR 0 2
34622: PPUSH
34623: LD_VAR 0 5
34627: PPUSH
34628: CALL 34986 0 2
34632: NOT
34633: IFFALSE 34692
// repeat weapon := _weapon [ 1 ] ;
34635: LD_ADDR_VAR 0 5
34639: PUSH
34640: LD_VAR 0 10
34644: PUSH
34645: LD_INT 1
34647: ARRAY
34648: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34649: LD_ADDR_VAR 0 10
34653: PUSH
34654: LD_VAR 0 10
34658: PPUSH
34659: LD_INT 1
34661: PPUSH
34662: CALL_OW 3
34666: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34667: LD_VAR 0 2
34671: PPUSH
34672: LD_VAR 0 5
34676: PPUSH
34677: CALL 34986 0 2
34681: PUSH
34682: LD_VAR 0 10
34686: PUSH
34687: EMPTY
34688: EQUAL
34689: OR
34690: IFFALSE 34635
// result := [ ] ;
34692: LD_ADDR_VAR 0 6
34696: PUSH
34697: EMPTY
34698: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34699: LD_VAR 0 1
34703: PPUSH
34704: LD_VAR 0 2
34708: PPUSH
34709: LD_VAR 0 3
34713: PPUSH
34714: LD_VAR 0 4
34718: PPUSH
34719: LD_VAR 0 5
34723: PPUSH
34724: CALL_OW 448
34728: IFFALSE 34761
// result := [ chassis , engine , control , weapon ] ;
34730: LD_ADDR_VAR 0 6
34734: PUSH
34735: LD_VAR 0 2
34739: PUSH
34740: LD_VAR 0 3
34744: PUSH
34745: LD_VAR 0 4
34749: PUSH
34750: LD_VAR 0 5
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: ST_TO_ADDR
// end ;
34761: LD_VAR 0 6
34765: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34766: LD_INT 0
34768: PPUSH
// if not chassis or not engine then
34769: LD_VAR 0 1
34773: NOT
34774: PUSH
34775: LD_VAR 0 2
34779: NOT
34780: OR
34781: IFFALSE 34785
// exit ;
34783: GO 34981
// case engine of engine_solar :
34785: LD_VAR 0 2
34789: PUSH
34790: LD_INT 2
34792: DOUBLE
34793: EQUAL
34794: IFTRUE 34798
34796: GO 34836
34798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34799: LD_ADDR_VAR 0 3
34803: PUSH
34804: LD_INT 11
34806: PUSH
34807: LD_INT 12
34809: PUSH
34810: LD_INT 13
34812: PUSH
34813: LD_INT 14
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: LD_INT 3
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: ST_TO_ADDR
34834: GO 34965
34836: LD_INT 1
34838: DOUBLE
34839: EQUAL
34840: IFTRUE 34844
34842: GO 34906
34844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34845: LD_ADDR_VAR 0 3
34849: PUSH
34850: LD_INT 11
34852: PUSH
34853: LD_INT 12
34855: PUSH
34856: LD_INT 13
34858: PUSH
34859: LD_INT 14
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: LD_INT 3
34870: PUSH
34871: LD_INT 4
34873: PUSH
34874: LD_INT 5
34876: PUSH
34877: LD_INT 21
34879: PUSH
34880: LD_INT 23
34882: PUSH
34883: LD_INT 22
34885: PUSH
34886: LD_INT 24
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: ST_TO_ADDR
34904: GO 34965
34906: LD_INT 3
34908: DOUBLE
34909: EQUAL
34910: IFTRUE 34914
34912: GO 34964
34914: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34915: LD_ADDR_VAR 0 3
34919: PUSH
34920: LD_INT 13
34922: PUSH
34923: LD_INT 14
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: LD_INT 3
34931: PUSH
34932: LD_INT 4
34934: PUSH
34935: LD_INT 5
34937: PUSH
34938: LD_INT 21
34940: PUSH
34941: LD_INT 22
34943: PUSH
34944: LD_INT 23
34946: PUSH
34947: LD_INT 24
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: ST_TO_ADDR
34962: GO 34965
34964: POP
// result := ( chassis in result ) ;
34965: LD_ADDR_VAR 0 3
34969: PUSH
34970: LD_VAR 0 1
34974: PUSH
34975: LD_VAR 0 3
34979: IN
34980: ST_TO_ADDR
// end ;
34981: LD_VAR 0 3
34985: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34986: LD_INT 0
34988: PPUSH
// if not chassis or not weapon then
34989: LD_VAR 0 1
34993: NOT
34994: PUSH
34995: LD_VAR 0 2
34999: NOT
35000: OR
35001: IFFALSE 35005
// exit ;
35003: GO 36065
// case weapon of us_machine_gun :
35005: LD_VAR 0 2
35009: PUSH
35010: LD_INT 2
35012: DOUBLE
35013: EQUAL
35014: IFTRUE 35018
35016: GO 35048
35018: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35019: LD_ADDR_VAR 0 3
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 4
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: ST_TO_ADDR
35046: GO 36049
35048: LD_INT 3
35050: DOUBLE
35051: EQUAL
35052: IFTRUE 35056
35054: GO 35086
35056: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35057: LD_ADDR_VAR 0 3
35061: PUSH
35062: LD_INT 1
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: LD_INT 3
35070: PUSH
35071: LD_INT 4
35073: PUSH
35074: LD_INT 5
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: ST_TO_ADDR
35084: GO 36049
35086: LD_INT 11
35088: DOUBLE
35089: EQUAL
35090: IFTRUE 35094
35092: GO 35124
35094: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35095: LD_ADDR_VAR 0 3
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: LD_INT 2
35105: PUSH
35106: LD_INT 3
35108: PUSH
35109: LD_INT 4
35111: PUSH
35112: LD_INT 5
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: ST_TO_ADDR
35122: GO 36049
35124: LD_INT 4
35126: DOUBLE
35127: EQUAL
35128: IFTRUE 35132
35130: GO 35158
35132: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35133: LD_ADDR_VAR 0 3
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 3
35143: PUSH
35144: LD_INT 4
35146: PUSH
35147: LD_INT 5
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: ST_TO_ADDR
35156: GO 36049
35158: LD_INT 5
35160: DOUBLE
35161: EQUAL
35162: IFTRUE 35166
35164: GO 35192
35166: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35167: LD_ADDR_VAR 0 3
35171: PUSH
35172: LD_INT 2
35174: PUSH
35175: LD_INT 3
35177: PUSH
35178: LD_INT 4
35180: PUSH
35181: LD_INT 5
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: ST_TO_ADDR
35190: GO 36049
35192: LD_INT 9
35194: DOUBLE
35195: EQUAL
35196: IFTRUE 35200
35198: GO 35226
35200: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: LD_INT 3
35211: PUSH
35212: LD_INT 4
35214: PUSH
35215: LD_INT 5
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: ST_TO_ADDR
35224: GO 36049
35226: LD_INT 7
35228: DOUBLE
35229: EQUAL
35230: IFTRUE 35234
35232: GO 35260
35234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35235: LD_ADDR_VAR 0 3
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: LD_INT 3
35245: PUSH
35246: LD_INT 4
35248: PUSH
35249: LD_INT 5
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: ST_TO_ADDR
35258: GO 36049
35260: LD_INT 12
35262: DOUBLE
35263: EQUAL
35264: IFTRUE 35268
35266: GO 35294
35268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35269: LD_ADDR_VAR 0 3
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: LD_INT 3
35279: PUSH
35280: LD_INT 4
35282: PUSH
35283: LD_INT 5
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: ST_TO_ADDR
35292: GO 36049
35294: LD_INT 13
35296: DOUBLE
35297: EQUAL
35298: IFTRUE 35302
35300: GO 35328
35302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35303: LD_ADDR_VAR 0 3
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 3
35313: PUSH
35314: LD_INT 4
35316: PUSH
35317: LD_INT 5
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: ST_TO_ADDR
35326: GO 36049
35328: LD_INT 14
35330: DOUBLE
35331: EQUAL
35332: IFTRUE 35336
35334: GO 35354
35336: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35337: LD_ADDR_VAR 0 3
35341: PUSH
35342: LD_INT 4
35344: PUSH
35345: LD_INT 5
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: ST_TO_ADDR
35352: GO 36049
35354: LD_INT 6
35356: DOUBLE
35357: EQUAL
35358: IFTRUE 35362
35360: GO 35380
35362: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35363: LD_ADDR_VAR 0 3
35367: PUSH
35368: LD_INT 4
35370: PUSH
35371: LD_INT 5
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: ST_TO_ADDR
35378: GO 36049
35380: LD_INT 10
35382: DOUBLE
35383: EQUAL
35384: IFTRUE 35388
35386: GO 35406
35388: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35389: LD_ADDR_VAR 0 3
35393: PUSH
35394: LD_INT 4
35396: PUSH
35397: LD_INT 5
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: ST_TO_ADDR
35404: GO 36049
35406: LD_INT 22
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35414
35412: GO 35440
35414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35415: LD_ADDR_VAR 0 3
35419: PUSH
35420: LD_INT 11
35422: PUSH
35423: LD_INT 12
35425: PUSH
35426: LD_INT 13
35428: PUSH
35429: LD_INT 14
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: ST_TO_ADDR
35438: GO 36049
35440: LD_INT 23
35442: DOUBLE
35443: EQUAL
35444: IFTRUE 35448
35446: GO 35474
35448: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35449: LD_ADDR_VAR 0 3
35453: PUSH
35454: LD_INT 11
35456: PUSH
35457: LD_INT 12
35459: PUSH
35460: LD_INT 13
35462: PUSH
35463: LD_INT 14
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: ST_TO_ADDR
35472: GO 36049
35474: LD_INT 24
35476: DOUBLE
35477: EQUAL
35478: IFTRUE 35482
35480: GO 35508
35482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35483: LD_ADDR_VAR 0 3
35487: PUSH
35488: LD_INT 11
35490: PUSH
35491: LD_INT 12
35493: PUSH
35494: LD_INT 13
35496: PUSH
35497: LD_INT 14
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: ST_TO_ADDR
35506: GO 36049
35508: LD_INT 30
35510: DOUBLE
35511: EQUAL
35512: IFTRUE 35516
35514: GO 35542
35516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35517: LD_ADDR_VAR 0 3
35521: PUSH
35522: LD_INT 11
35524: PUSH
35525: LD_INT 12
35527: PUSH
35528: LD_INT 13
35530: PUSH
35531: LD_INT 14
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: ST_TO_ADDR
35540: GO 36049
35542: LD_INT 25
35544: DOUBLE
35545: EQUAL
35546: IFTRUE 35550
35548: GO 35568
35550: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35551: LD_ADDR_VAR 0 3
35555: PUSH
35556: LD_INT 13
35558: PUSH
35559: LD_INT 14
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: ST_TO_ADDR
35566: GO 36049
35568: LD_INT 27
35570: DOUBLE
35571: EQUAL
35572: IFTRUE 35576
35574: GO 35594
35576: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35577: LD_ADDR_VAR 0 3
35581: PUSH
35582: LD_INT 13
35584: PUSH
35585: LD_INT 14
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: ST_TO_ADDR
35592: GO 36049
35594: LD_INT 92
35596: DOUBLE
35597: EQUAL
35598: IFTRUE 35602
35600: GO 35628
35602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35603: LD_ADDR_VAR 0 3
35607: PUSH
35608: LD_INT 11
35610: PUSH
35611: LD_INT 12
35613: PUSH
35614: LD_INT 13
35616: PUSH
35617: LD_INT 14
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
35626: GO 36049
35628: LD_INT 28
35630: DOUBLE
35631: EQUAL
35632: IFTRUE 35636
35634: GO 35654
35636: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35637: LD_ADDR_VAR 0 3
35641: PUSH
35642: LD_INT 13
35644: PUSH
35645: LD_INT 14
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: ST_TO_ADDR
35652: GO 36049
35654: LD_INT 29
35656: DOUBLE
35657: EQUAL
35658: IFTRUE 35662
35660: GO 35680
35662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35663: LD_ADDR_VAR 0 3
35667: PUSH
35668: LD_INT 13
35670: PUSH
35671: LD_INT 14
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: ST_TO_ADDR
35678: GO 36049
35680: LD_INT 31
35682: DOUBLE
35683: EQUAL
35684: IFTRUE 35688
35686: GO 35706
35688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35689: LD_ADDR_VAR 0 3
35693: PUSH
35694: LD_INT 13
35696: PUSH
35697: LD_INT 14
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: ST_TO_ADDR
35704: GO 36049
35706: LD_INT 26
35708: DOUBLE
35709: EQUAL
35710: IFTRUE 35714
35712: GO 35732
35714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35715: LD_ADDR_VAR 0 3
35719: PUSH
35720: LD_INT 13
35722: PUSH
35723: LD_INT 14
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: ST_TO_ADDR
35730: GO 36049
35732: LD_INT 42
35734: DOUBLE
35735: EQUAL
35736: IFTRUE 35740
35738: GO 35766
35740: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35741: LD_ADDR_VAR 0 3
35745: PUSH
35746: LD_INT 21
35748: PUSH
35749: LD_INT 22
35751: PUSH
35752: LD_INT 23
35754: PUSH
35755: LD_INT 24
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: ST_TO_ADDR
35764: GO 36049
35766: LD_INT 43
35768: DOUBLE
35769: EQUAL
35770: IFTRUE 35774
35772: GO 35800
35774: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35775: LD_ADDR_VAR 0 3
35779: PUSH
35780: LD_INT 21
35782: PUSH
35783: LD_INT 22
35785: PUSH
35786: LD_INT 23
35788: PUSH
35789: LD_INT 24
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: ST_TO_ADDR
35798: GO 36049
35800: LD_INT 44
35802: DOUBLE
35803: EQUAL
35804: IFTRUE 35808
35806: GO 35834
35808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35809: LD_ADDR_VAR 0 3
35813: PUSH
35814: LD_INT 21
35816: PUSH
35817: LD_INT 22
35819: PUSH
35820: LD_INT 23
35822: PUSH
35823: LD_INT 24
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: ST_TO_ADDR
35832: GO 36049
35834: LD_INT 45
35836: DOUBLE
35837: EQUAL
35838: IFTRUE 35842
35840: GO 35868
35842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35843: LD_ADDR_VAR 0 3
35847: PUSH
35848: LD_INT 21
35850: PUSH
35851: LD_INT 22
35853: PUSH
35854: LD_INT 23
35856: PUSH
35857: LD_INT 24
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
35866: GO 36049
35868: LD_INT 49
35870: DOUBLE
35871: EQUAL
35872: IFTRUE 35876
35874: GO 35902
35876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35877: LD_ADDR_VAR 0 3
35881: PUSH
35882: LD_INT 21
35884: PUSH
35885: LD_INT 22
35887: PUSH
35888: LD_INT 23
35890: PUSH
35891: LD_INT 24
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: ST_TO_ADDR
35900: GO 36049
35902: LD_INT 51
35904: DOUBLE
35905: EQUAL
35906: IFTRUE 35910
35908: GO 35936
35910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35911: LD_ADDR_VAR 0 3
35915: PUSH
35916: LD_INT 21
35918: PUSH
35919: LD_INT 22
35921: PUSH
35922: LD_INT 23
35924: PUSH
35925: LD_INT 24
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: ST_TO_ADDR
35934: GO 36049
35936: LD_INT 52
35938: DOUBLE
35939: EQUAL
35940: IFTRUE 35944
35942: GO 35970
35944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35945: LD_ADDR_VAR 0 3
35949: PUSH
35950: LD_INT 21
35952: PUSH
35953: LD_INT 22
35955: PUSH
35956: LD_INT 23
35958: PUSH
35959: LD_INT 24
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: ST_TO_ADDR
35968: GO 36049
35970: LD_INT 53
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 35978
35976: GO 35996
35978: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35979: LD_ADDR_VAR 0 3
35983: PUSH
35984: LD_INT 23
35986: PUSH
35987: LD_INT 24
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: ST_TO_ADDR
35994: GO 36049
35996: LD_INT 46
35998: DOUBLE
35999: EQUAL
36000: IFTRUE 36004
36002: GO 36022
36004: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36005: LD_ADDR_VAR 0 3
36009: PUSH
36010: LD_INT 23
36012: PUSH
36013: LD_INT 24
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: ST_TO_ADDR
36020: GO 36049
36022: LD_INT 47
36024: DOUBLE
36025: EQUAL
36026: IFTRUE 36030
36028: GO 36048
36030: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36031: LD_ADDR_VAR 0 3
36035: PUSH
36036: LD_INT 23
36038: PUSH
36039: LD_INT 24
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: ST_TO_ADDR
36046: GO 36049
36048: POP
// result := ( chassis in result ) ;
36049: LD_ADDR_VAR 0 3
36053: PUSH
36054: LD_VAR 0 1
36058: PUSH
36059: LD_VAR 0 3
36063: IN
36064: ST_TO_ADDR
// end ;
36065: LD_VAR 0 3
36069: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36070: LD_INT 0
36072: PPUSH
36073: PPUSH
36074: PPUSH
36075: PPUSH
36076: PPUSH
36077: PPUSH
36078: PPUSH
// result := array ;
36079: LD_ADDR_VAR 0 5
36083: PUSH
36084: LD_VAR 0 1
36088: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36089: LD_VAR 0 1
36093: NOT
36094: PUSH
36095: LD_VAR 0 2
36099: NOT
36100: OR
36101: PUSH
36102: LD_VAR 0 3
36106: NOT
36107: OR
36108: PUSH
36109: LD_VAR 0 2
36113: PUSH
36114: LD_VAR 0 1
36118: GREATER
36119: OR
36120: PUSH
36121: LD_VAR 0 3
36125: PUSH
36126: LD_VAR 0 1
36130: GREATER
36131: OR
36132: IFFALSE 36136
// exit ;
36134: GO 36432
// if direction then
36136: LD_VAR 0 4
36140: IFFALSE 36204
// begin d := 1 ;
36142: LD_ADDR_VAR 0 9
36146: PUSH
36147: LD_INT 1
36149: ST_TO_ADDR
// if i_from > i_to then
36150: LD_VAR 0 2
36154: PUSH
36155: LD_VAR 0 3
36159: GREATER
36160: IFFALSE 36186
// length := ( array - i_from ) + i_to else
36162: LD_ADDR_VAR 0 11
36166: PUSH
36167: LD_VAR 0 1
36171: PUSH
36172: LD_VAR 0 2
36176: MINUS
36177: PUSH
36178: LD_VAR 0 3
36182: PLUS
36183: ST_TO_ADDR
36184: GO 36202
// length := i_to - i_from ;
36186: LD_ADDR_VAR 0 11
36190: PUSH
36191: LD_VAR 0 3
36195: PUSH
36196: LD_VAR 0 2
36200: MINUS
36201: ST_TO_ADDR
// end else
36202: GO 36265
// begin d := - 1 ;
36204: LD_ADDR_VAR 0 9
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: ST_TO_ADDR
// if i_from > i_to then
36213: LD_VAR 0 2
36217: PUSH
36218: LD_VAR 0 3
36222: GREATER
36223: IFFALSE 36243
// length := i_from - i_to else
36225: LD_ADDR_VAR 0 11
36229: PUSH
36230: LD_VAR 0 2
36234: PUSH
36235: LD_VAR 0 3
36239: MINUS
36240: ST_TO_ADDR
36241: GO 36265
// length := ( array - i_to ) + i_from ;
36243: LD_ADDR_VAR 0 11
36247: PUSH
36248: LD_VAR 0 1
36252: PUSH
36253: LD_VAR 0 3
36257: MINUS
36258: PUSH
36259: LD_VAR 0 2
36263: PLUS
36264: ST_TO_ADDR
// end ; if not length then
36265: LD_VAR 0 11
36269: NOT
36270: IFFALSE 36274
// exit ;
36272: GO 36432
// tmp := array ;
36274: LD_ADDR_VAR 0 10
36278: PUSH
36279: LD_VAR 0 1
36283: ST_TO_ADDR
// for i = 1 to length do
36284: LD_ADDR_VAR 0 6
36288: PUSH
36289: DOUBLE
36290: LD_INT 1
36292: DEC
36293: ST_TO_ADDR
36294: LD_VAR 0 11
36298: PUSH
36299: FOR_TO
36300: IFFALSE 36420
// begin for j = 1 to array do
36302: LD_ADDR_VAR 0 7
36306: PUSH
36307: DOUBLE
36308: LD_INT 1
36310: DEC
36311: ST_TO_ADDR
36312: LD_VAR 0 1
36316: PUSH
36317: FOR_TO
36318: IFFALSE 36406
// begin k := j + d ;
36320: LD_ADDR_VAR 0 8
36324: PUSH
36325: LD_VAR 0 7
36329: PUSH
36330: LD_VAR 0 9
36334: PLUS
36335: ST_TO_ADDR
// if k > array then
36336: LD_VAR 0 8
36340: PUSH
36341: LD_VAR 0 1
36345: GREATER
36346: IFFALSE 36356
// k := 1 ;
36348: LD_ADDR_VAR 0 8
36352: PUSH
36353: LD_INT 1
36355: ST_TO_ADDR
// if not k then
36356: LD_VAR 0 8
36360: NOT
36361: IFFALSE 36373
// k := array ;
36363: LD_ADDR_VAR 0 8
36367: PUSH
36368: LD_VAR 0 1
36372: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36373: LD_ADDR_VAR 0 10
36377: PUSH
36378: LD_VAR 0 10
36382: PPUSH
36383: LD_VAR 0 8
36387: PPUSH
36388: LD_VAR 0 1
36392: PUSH
36393: LD_VAR 0 7
36397: ARRAY
36398: PPUSH
36399: CALL_OW 1
36403: ST_TO_ADDR
// end ;
36404: GO 36317
36406: POP
36407: POP
// array := tmp ;
36408: LD_ADDR_VAR 0 1
36412: PUSH
36413: LD_VAR 0 10
36417: ST_TO_ADDR
// end ;
36418: GO 36299
36420: POP
36421: POP
// result := array ;
36422: LD_ADDR_VAR 0 5
36426: PUSH
36427: LD_VAR 0 1
36431: ST_TO_ADDR
// end ;
36432: LD_VAR 0 5
36436: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36437: LD_INT 0
36439: PPUSH
36440: PPUSH
// result := 0 ;
36441: LD_ADDR_VAR 0 3
36445: PUSH
36446: LD_INT 0
36448: ST_TO_ADDR
// if not array or not value in array then
36449: LD_VAR 0 1
36453: NOT
36454: PUSH
36455: LD_VAR 0 2
36459: PUSH
36460: LD_VAR 0 1
36464: IN
36465: NOT
36466: OR
36467: IFFALSE 36471
// exit ;
36469: GO 36525
// for i = 1 to array do
36471: LD_ADDR_VAR 0 4
36475: PUSH
36476: DOUBLE
36477: LD_INT 1
36479: DEC
36480: ST_TO_ADDR
36481: LD_VAR 0 1
36485: PUSH
36486: FOR_TO
36487: IFFALSE 36523
// if value = array [ i ] then
36489: LD_VAR 0 2
36493: PUSH
36494: LD_VAR 0 1
36498: PUSH
36499: LD_VAR 0 4
36503: ARRAY
36504: EQUAL
36505: IFFALSE 36521
// begin result := i ;
36507: LD_ADDR_VAR 0 3
36511: PUSH
36512: LD_VAR 0 4
36516: ST_TO_ADDR
// exit ;
36517: POP
36518: POP
36519: GO 36525
// end ;
36521: GO 36486
36523: POP
36524: POP
// end ;
36525: LD_VAR 0 3
36529: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36530: LD_INT 0
36532: PPUSH
// vc_chassis := chassis ;
36533: LD_ADDR_OWVAR 37
36537: PUSH
36538: LD_VAR 0 1
36542: ST_TO_ADDR
// vc_engine := engine ;
36543: LD_ADDR_OWVAR 39
36547: PUSH
36548: LD_VAR 0 2
36552: ST_TO_ADDR
// vc_control := control ;
36553: LD_ADDR_OWVAR 38
36557: PUSH
36558: LD_VAR 0 3
36562: ST_TO_ADDR
// vc_weapon := weapon ;
36563: LD_ADDR_OWVAR 40
36567: PUSH
36568: LD_VAR 0 4
36572: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36573: LD_ADDR_OWVAR 41
36577: PUSH
36578: LD_VAR 0 5
36582: ST_TO_ADDR
// end ;
36583: LD_VAR 0 6
36587: RET
// export function WantPlant ( unit ) ; var task ; begin
36588: LD_INT 0
36590: PPUSH
36591: PPUSH
// result := false ;
36592: LD_ADDR_VAR 0 2
36596: PUSH
36597: LD_INT 0
36599: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36600: LD_ADDR_VAR 0 3
36604: PUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 437
36614: ST_TO_ADDR
// if task then
36615: LD_VAR 0 3
36619: IFFALSE 36647
// if task [ 1 ] [ 1 ] = p then
36621: LD_VAR 0 3
36625: PUSH
36626: LD_INT 1
36628: ARRAY
36629: PUSH
36630: LD_INT 1
36632: ARRAY
36633: PUSH
36634: LD_STRING p
36636: EQUAL
36637: IFFALSE 36647
// result := true ;
36639: LD_ADDR_VAR 0 2
36643: PUSH
36644: LD_INT 1
36646: ST_TO_ADDR
// end ;
36647: LD_VAR 0 2
36651: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36652: LD_INT 0
36654: PPUSH
36655: PPUSH
36656: PPUSH
36657: PPUSH
// if pos < 1 then
36658: LD_VAR 0 2
36662: PUSH
36663: LD_INT 1
36665: LESS
36666: IFFALSE 36670
// exit ;
36668: GO 36973
// if pos = 1 then
36670: LD_VAR 0 2
36674: PUSH
36675: LD_INT 1
36677: EQUAL
36678: IFFALSE 36711
// result := Replace ( arr , pos [ 1 ] , value ) else
36680: LD_ADDR_VAR 0 4
36684: PUSH
36685: LD_VAR 0 1
36689: PPUSH
36690: LD_VAR 0 2
36694: PUSH
36695: LD_INT 1
36697: ARRAY
36698: PPUSH
36699: LD_VAR 0 3
36703: PPUSH
36704: CALL_OW 1
36708: ST_TO_ADDR
36709: GO 36973
// begin tmp := arr ;
36711: LD_ADDR_VAR 0 6
36715: PUSH
36716: LD_VAR 0 1
36720: ST_TO_ADDR
// s_arr := [ tmp ] ;
36721: LD_ADDR_VAR 0 7
36725: PUSH
36726: LD_VAR 0 6
36730: PUSH
36731: EMPTY
36732: LIST
36733: ST_TO_ADDR
// for i = 1 to pos - 1 do
36734: LD_ADDR_VAR 0 5
36738: PUSH
36739: DOUBLE
36740: LD_INT 1
36742: DEC
36743: ST_TO_ADDR
36744: LD_VAR 0 2
36748: PUSH
36749: LD_INT 1
36751: MINUS
36752: PUSH
36753: FOR_TO
36754: IFFALSE 36799
// begin tmp := tmp [ pos [ i ] ] ;
36756: LD_ADDR_VAR 0 6
36760: PUSH
36761: LD_VAR 0 6
36765: PUSH
36766: LD_VAR 0 2
36770: PUSH
36771: LD_VAR 0 5
36775: ARRAY
36776: ARRAY
36777: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36778: LD_ADDR_VAR 0 7
36782: PUSH
36783: LD_VAR 0 7
36787: PUSH
36788: LD_VAR 0 6
36792: PUSH
36793: EMPTY
36794: LIST
36795: ADD
36796: ST_TO_ADDR
// end ;
36797: GO 36753
36799: POP
36800: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36801: LD_ADDR_VAR 0 6
36805: PUSH
36806: LD_VAR 0 6
36810: PPUSH
36811: LD_VAR 0 2
36815: PUSH
36816: LD_VAR 0 2
36820: ARRAY
36821: PPUSH
36822: LD_VAR 0 3
36826: PPUSH
36827: CALL_OW 1
36831: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36832: LD_ADDR_VAR 0 7
36836: PUSH
36837: LD_VAR 0 7
36841: PPUSH
36842: LD_VAR 0 7
36846: PPUSH
36847: LD_VAR 0 6
36851: PPUSH
36852: CALL_OW 1
36856: ST_TO_ADDR
// for i = s_arr downto 2 do
36857: LD_ADDR_VAR 0 5
36861: PUSH
36862: DOUBLE
36863: LD_VAR 0 7
36867: INC
36868: ST_TO_ADDR
36869: LD_INT 2
36871: PUSH
36872: FOR_DOWNTO
36873: IFFALSE 36957
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36875: LD_ADDR_VAR 0 6
36879: PUSH
36880: LD_VAR 0 7
36884: PUSH
36885: LD_VAR 0 5
36889: PUSH
36890: LD_INT 1
36892: MINUS
36893: ARRAY
36894: PPUSH
36895: LD_VAR 0 2
36899: PUSH
36900: LD_VAR 0 5
36904: PUSH
36905: LD_INT 1
36907: MINUS
36908: ARRAY
36909: PPUSH
36910: LD_VAR 0 7
36914: PUSH
36915: LD_VAR 0 5
36919: ARRAY
36920: PPUSH
36921: CALL_OW 1
36925: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36926: LD_ADDR_VAR 0 7
36930: PUSH
36931: LD_VAR 0 7
36935: PPUSH
36936: LD_VAR 0 5
36940: PUSH
36941: LD_INT 1
36943: MINUS
36944: PPUSH
36945: LD_VAR 0 6
36949: PPUSH
36950: CALL_OW 1
36954: ST_TO_ADDR
// end ;
36955: GO 36872
36957: POP
36958: POP
// result := s_arr [ 1 ] ;
36959: LD_ADDR_VAR 0 4
36963: PUSH
36964: LD_VAR 0 7
36968: PUSH
36969: LD_INT 1
36971: ARRAY
36972: ST_TO_ADDR
// end ; end ;
36973: LD_VAR 0 4
36977: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36978: LD_INT 0
36980: PPUSH
36981: PPUSH
// if not list then
36982: LD_VAR 0 1
36986: NOT
36987: IFFALSE 36991
// exit ;
36989: GO 37082
// i := list [ pos1 ] ;
36991: LD_ADDR_VAR 0 5
36995: PUSH
36996: LD_VAR 0 1
37000: PUSH
37001: LD_VAR 0 2
37005: ARRAY
37006: ST_TO_ADDR
// if not i then
37007: LD_VAR 0 5
37011: NOT
37012: IFFALSE 37016
// exit ;
37014: GO 37082
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37016: LD_ADDR_VAR 0 1
37020: PUSH
37021: LD_VAR 0 1
37025: PPUSH
37026: LD_VAR 0 2
37030: PPUSH
37031: LD_VAR 0 1
37035: PUSH
37036: LD_VAR 0 3
37040: ARRAY
37041: PPUSH
37042: CALL_OW 1
37046: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37047: LD_ADDR_VAR 0 1
37051: PUSH
37052: LD_VAR 0 1
37056: PPUSH
37057: LD_VAR 0 3
37061: PPUSH
37062: LD_VAR 0 5
37066: PPUSH
37067: CALL_OW 1
37071: ST_TO_ADDR
// result := list ;
37072: LD_ADDR_VAR 0 4
37076: PUSH
37077: LD_VAR 0 1
37081: ST_TO_ADDR
// end ;
37082: LD_VAR 0 4
37086: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37087: LD_INT 0
37089: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37090: LD_ADDR_VAR 0 5
37094: PUSH
37095: LD_VAR 0 1
37099: PPUSH
37100: CALL_OW 250
37104: PPUSH
37105: LD_VAR 0 1
37109: PPUSH
37110: CALL_OW 251
37114: PPUSH
37115: LD_VAR 0 2
37119: PPUSH
37120: LD_VAR 0 3
37124: PPUSH
37125: LD_VAR 0 4
37129: PPUSH
37130: CALL 37140 0 5
37134: ST_TO_ADDR
// end ;
37135: LD_VAR 0 5
37139: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37140: LD_INT 0
37142: PPUSH
37143: PPUSH
37144: PPUSH
37145: PPUSH
// if not list then
37146: LD_VAR 0 3
37150: NOT
37151: IFFALSE 37155
// exit ;
37153: GO 37543
// result := [ ] ;
37155: LD_ADDR_VAR 0 6
37159: PUSH
37160: EMPTY
37161: ST_TO_ADDR
// for i in list do
37162: LD_ADDR_VAR 0 7
37166: PUSH
37167: LD_VAR 0 3
37171: PUSH
37172: FOR_IN
37173: IFFALSE 37375
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37175: LD_ADDR_VAR 0 9
37179: PUSH
37180: LD_VAR 0 7
37184: PPUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: LD_VAR 0 2
37194: PPUSH
37195: CALL_OW 297
37199: ST_TO_ADDR
// if not result then
37200: LD_VAR 0 6
37204: NOT
37205: IFFALSE 37231
// result := [ [ i , tmp ] ] else
37207: LD_ADDR_VAR 0 6
37211: PUSH
37212: LD_VAR 0 7
37216: PUSH
37217: LD_VAR 0 9
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: EMPTY
37227: LIST
37228: ST_TO_ADDR
37229: GO 37373
// begin if result [ result ] [ 2 ] < tmp then
37231: LD_VAR 0 6
37235: PUSH
37236: LD_VAR 0 6
37240: ARRAY
37241: PUSH
37242: LD_INT 2
37244: ARRAY
37245: PUSH
37246: LD_VAR 0 9
37250: LESS
37251: IFFALSE 37293
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37253: LD_ADDR_VAR 0 6
37257: PUSH
37258: LD_VAR 0 6
37262: PPUSH
37263: LD_VAR 0 6
37267: PUSH
37268: LD_INT 1
37270: PLUS
37271: PPUSH
37272: LD_VAR 0 7
37276: PUSH
37277: LD_VAR 0 9
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PPUSH
37286: CALL_OW 2
37290: ST_TO_ADDR
37291: GO 37373
// for j = 1 to result do
37293: LD_ADDR_VAR 0 8
37297: PUSH
37298: DOUBLE
37299: LD_INT 1
37301: DEC
37302: ST_TO_ADDR
37303: LD_VAR 0 6
37307: PUSH
37308: FOR_TO
37309: IFFALSE 37371
// begin if tmp < result [ j ] [ 2 ] then
37311: LD_VAR 0 9
37315: PUSH
37316: LD_VAR 0 6
37320: PUSH
37321: LD_VAR 0 8
37325: ARRAY
37326: PUSH
37327: LD_INT 2
37329: ARRAY
37330: LESS
37331: IFFALSE 37369
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37333: LD_ADDR_VAR 0 6
37337: PUSH
37338: LD_VAR 0 6
37342: PPUSH
37343: LD_VAR 0 8
37347: PPUSH
37348: LD_VAR 0 7
37352: PUSH
37353: LD_VAR 0 9
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PPUSH
37362: CALL_OW 2
37366: ST_TO_ADDR
// break ;
37367: GO 37371
// end ; end ;
37369: GO 37308
37371: POP
37372: POP
// end ; end ;
37373: GO 37172
37375: POP
37376: POP
// if result and not asc then
37377: LD_VAR 0 6
37381: PUSH
37382: LD_VAR 0 4
37386: NOT
37387: AND
37388: IFFALSE 37463
// begin tmp := result ;
37390: LD_ADDR_VAR 0 9
37394: PUSH
37395: LD_VAR 0 6
37399: ST_TO_ADDR
// for i = tmp downto 1 do
37400: LD_ADDR_VAR 0 7
37404: PUSH
37405: DOUBLE
37406: LD_VAR 0 9
37410: INC
37411: ST_TO_ADDR
37412: LD_INT 1
37414: PUSH
37415: FOR_DOWNTO
37416: IFFALSE 37461
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37418: LD_ADDR_VAR 0 6
37422: PUSH
37423: LD_VAR 0 6
37427: PPUSH
37428: LD_VAR 0 9
37432: PUSH
37433: LD_VAR 0 7
37437: MINUS
37438: PUSH
37439: LD_INT 1
37441: PLUS
37442: PPUSH
37443: LD_VAR 0 9
37447: PUSH
37448: LD_VAR 0 7
37452: ARRAY
37453: PPUSH
37454: CALL_OW 1
37458: ST_TO_ADDR
37459: GO 37415
37461: POP
37462: POP
// end ; tmp := [ ] ;
37463: LD_ADDR_VAR 0 9
37467: PUSH
37468: EMPTY
37469: ST_TO_ADDR
// if mode then
37470: LD_VAR 0 5
37474: IFFALSE 37543
// begin for i = 1 to result do
37476: LD_ADDR_VAR 0 7
37480: PUSH
37481: DOUBLE
37482: LD_INT 1
37484: DEC
37485: ST_TO_ADDR
37486: LD_VAR 0 6
37490: PUSH
37491: FOR_TO
37492: IFFALSE 37531
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37494: LD_ADDR_VAR 0 9
37498: PUSH
37499: LD_VAR 0 9
37503: PPUSH
37504: LD_VAR 0 7
37508: PPUSH
37509: LD_VAR 0 6
37513: PUSH
37514: LD_VAR 0 7
37518: ARRAY
37519: PUSH
37520: LD_INT 1
37522: ARRAY
37523: PPUSH
37524: CALL_OW 1
37528: ST_TO_ADDR
37529: GO 37491
37531: POP
37532: POP
// result := tmp ;
37533: LD_ADDR_VAR 0 6
37537: PUSH
37538: LD_VAR 0 9
37542: ST_TO_ADDR
// end ; end ;
37543: LD_VAR 0 6
37547: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37548: LD_INT 0
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
37554: PPUSH
37555: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37556: LD_ADDR_VAR 0 5
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: ST_TO_ADDR
// if not x or not y then
37578: LD_VAR 0 2
37582: NOT
37583: PUSH
37584: LD_VAR 0 3
37588: NOT
37589: OR
37590: IFFALSE 37594
// exit ;
37592: GO 39244
// if not range then
37594: LD_VAR 0 4
37598: NOT
37599: IFFALSE 37609
// range := 10 ;
37601: LD_ADDR_VAR 0 4
37605: PUSH
37606: LD_INT 10
37608: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37609: LD_ADDR_VAR 0 8
37613: PUSH
37614: LD_INT 81
37616: PUSH
37617: LD_VAR 0 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 92
37628: PUSH
37629: LD_VAR 0 2
37633: PUSH
37634: LD_VAR 0 3
37638: PUSH
37639: LD_VAR 0 4
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 3
37652: PUSH
37653: LD_INT 21
37655: PUSH
37656: LD_INT 3
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: PPUSH
37672: CALL_OW 69
37676: ST_TO_ADDR
// if not tmp then
37677: LD_VAR 0 8
37681: NOT
37682: IFFALSE 37686
// exit ;
37684: GO 39244
// for i in tmp do
37686: LD_ADDR_VAR 0 6
37690: PUSH
37691: LD_VAR 0 8
37695: PUSH
37696: FOR_IN
37697: IFFALSE 39219
// begin points := [ 0 , 0 , 0 ] ;
37699: LD_ADDR_VAR 0 9
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: ST_TO_ADDR
// bpoints := 1 ;
37718: LD_ADDR_VAR 0 10
37722: PUSH
37723: LD_INT 1
37725: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37726: LD_VAR 0 6
37730: PPUSH
37731: CALL_OW 247
37735: PUSH
37736: LD_INT 1
37738: DOUBLE
37739: EQUAL
37740: IFTRUE 37744
37742: GO 38322
37744: POP
// begin if GetClass ( i ) = 1 then
37745: LD_VAR 0 6
37749: PPUSH
37750: CALL_OW 257
37754: PUSH
37755: LD_INT 1
37757: EQUAL
37758: IFFALSE 37779
// points := [ 10 , 5 , 3 ] ;
37760: LD_ADDR_VAR 0 9
37764: PUSH
37765: LD_INT 10
37767: PUSH
37768: LD_INT 5
37770: PUSH
37771: LD_INT 3
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37779: LD_VAR 0 6
37783: PPUSH
37784: CALL_OW 257
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 3
37794: PUSH
37795: LD_INT 4
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: IN
37803: IFFALSE 37824
// points := [ 3 , 2 , 1 ] ;
37805: LD_ADDR_VAR 0 9
37809: PUSH
37810: LD_INT 3
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37824: LD_VAR 0 6
37828: PPUSH
37829: CALL_OW 257
37833: PUSH
37834: LD_INT 5
37836: EQUAL
37837: IFFALSE 37858
// points := [ 130 , 5 , 2 ] ;
37839: LD_ADDR_VAR 0 9
37843: PUSH
37844: LD_INT 130
37846: PUSH
37847: LD_INT 5
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37858: LD_VAR 0 6
37862: PPUSH
37863: CALL_OW 257
37867: PUSH
37868: LD_INT 8
37870: EQUAL
37871: IFFALSE 37892
// points := [ 35 , 35 , 30 ] ;
37873: LD_ADDR_VAR 0 9
37877: PUSH
37878: LD_INT 35
37880: PUSH
37881: LD_INT 35
37883: PUSH
37884: LD_INT 30
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: LIST
37891: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37892: LD_VAR 0 6
37896: PPUSH
37897: CALL_OW 257
37901: PUSH
37902: LD_INT 9
37904: EQUAL
37905: IFFALSE 37926
// points := [ 20 , 55 , 40 ] ;
37907: LD_ADDR_VAR 0 9
37911: PUSH
37912: LD_INT 20
37914: PUSH
37915: LD_INT 55
37917: PUSH
37918: LD_INT 40
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37926: LD_VAR 0 6
37930: PPUSH
37931: CALL_OW 257
37935: PUSH
37936: LD_INT 12
37938: PUSH
37939: LD_INT 16
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: IN
37946: IFFALSE 37967
// points := [ 5 , 3 , 2 ] ;
37948: LD_ADDR_VAR 0 9
37952: PUSH
37953: LD_INT 5
37955: PUSH
37956: LD_INT 3
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37967: LD_VAR 0 6
37971: PPUSH
37972: CALL_OW 257
37976: PUSH
37977: LD_INT 17
37979: EQUAL
37980: IFFALSE 38001
// points := [ 100 , 50 , 75 ] ;
37982: LD_ADDR_VAR 0 9
37986: PUSH
37987: LD_INT 100
37989: PUSH
37990: LD_INT 50
37992: PUSH
37993: LD_INT 75
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38001: LD_VAR 0 6
38005: PPUSH
38006: CALL_OW 257
38010: PUSH
38011: LD_INT 15
38013: EQUAL
38014: IFFALSE 38035
// points := [ 10 , 5 , 3 ] ;
38016: LD_ADDR_VAR 0 9
38020: PUSH
38021: LD_INT 10
38023: PUSH
38024: LD_INT 5
38026: PUSH
38027: LD_INT 3
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: LIST
38034: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38035: LD_VAR 0 6
38039: PPUSH
38040: CALL_OW 257
38044: PUSH
38045: LD_INT 14
38047: EQUAL
38048: IFFALSE 38069
// points := [ 10 , 0 , 0 ] ;
38050: LD_ADDR_VAR 0 9
38054: PUSH
38055: LD_INT 10
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38069: LD_VAR 0 6
38073: PPUSH
38074: CALL_OW 257
38078: PUSH
38079: LD_INT 11
38081: EQUAL
38082: IFFALSE 38103
// points := [ 30 , 10 , 5 ] ;
38084: LD_ADDR_VAR 0 9
38088: PUSH
38089: LD_INT 30
38091: PUSH
38092: LD_INT 10
38094: PUSH
38095: LD_INT 5
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38103: LD_VAR 0 1
38107: PPUSH
38108: LD_INT 5
38110: PPUSH
38111: CALL_OW 321
38115: PUSH
38116: LD_INT 2
38118: EQUAL
38119: IFFALSE 38136
// bpoints := bpoints * 1.8 ;
38121: LD_ADDR_VAR 0 10
38125: PUSH
38126: LD_VAR 0 10
38130: PUSH
38131: LD_REAL  1.80000000000000E+0000
38134: MUL
38135: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38136: LD_VAR 0 6
38140: PPUSH
38141: CALL_OW 257
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: LD_INT 3
38154: PUSH
38155: LD_INT 4
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: IN
38164: PUSH
38165: LD_VAR 0 1
38169: PPUSH
38170: LD_INT 51
38172: PPUSH
38173: CALL_OW 321
38177: PUSH
38178: LD_INT 2
38180: EQUAL
38181: AND
38182: IFFALSE 38199
// bpoints := bpoints * 1.2 ;
38184: LD_ADDR_VAR 0 10
38188: PUSH
38189: LD_VAR 0 10
38193: PUSH
38194: LD_REAL  1.20000000000000E+0000
38197: MUL
38198: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38199: LD_VAR 0 6
38203: PPUSH
38204: CALL_OW 257
38208: PUSH
38209: LD_INT 5
38211: PUSH
38212: LD_INT 7
38214: PUSH
38215: LD_INT 9
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: LIST
38222: IN
38223: PUSH
38224: LD_VAR 0 1
38228: PPUSH
38229: LD_INT 52
38231: PPUSH
38232: CALL_OW 321
38236: PUSH
38237: LD_INT 2
38239: EQUAL
38240: AND
38241: IFFALSE 38258
// bpoints := bpoints * 1.5 ;
38243: LD_ADDR_VAR 0 10
38247: PUSH
38248: LD_VAR 0 10
38252: PUSH
38253: LD_REAL  1.50000000000000E+0000
38256: MUL
38257: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38258: LD_VAR 0 1
38262: PPUSH
38263: LD_INT 66
38265: PPUSH
38266: CALL_OW 321
38270: PUSH
38271: LD_INT 2
38273: EQUAL
38274: IFFALSE 38291
// bpoints := bpoints * 1.1 ;
38276: LD_ADDR_VAR 0 10
38280: PUSH
38281: LD_VAR 0 10
38285: PUSH
38286: LD_REAL  1.10000000000000E+0000
38289: MUL
38290: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38291: LD_ADDR_VAR 0 10
38295: PUSH
38296: LD_VAR 0 10
38300: PUSH
38301: LD_VAR 0 6
38305: PPUSH
38306: LD_INT 1
38308: PPUSH
38309: CALL_OW 259
38313: PUSH
38314: LD_REAL  1.15000000000000E+0000
38317: MUL
38318: MUL
38319: ST_TO_ADDR
// end ; unit_vehicle :
38320: GO 39148
38322: LD_INT 2
38324: DOUBLE
38325: EQUAL
38326: IFTRUE 38330
38328: GO 39136
38330: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38331: LD_VAR 0 6
38335: PPUSH
38336: CALL_OW 264
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: LD_INT 42
38346: PUSH
38347: LD_INT 24
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: IN
38355: IFFALSE 38376
// points := [ 25 , 5 , 3 ] ;
38357: LD_ADDR_VAR 0 9
38361: PUSH
38362: LD_INT 25
38364: PUSH
38365: LD_INT 5
38367: PUSH
38368: LD_INT 3
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38376: LD_VAR 0 6
38380: PPUSH
38381: CALL_OW 264
38385: PUSH
38386: LD_INT 4
38388: PUSH
38389: LD_INT 43
38391: PUSH
38392: LD_INT 25
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: IN
38400: IFFALSE 38421
// points := [ 40 , 15 , 5 ] ;
38402: LD_ADDR_VAR 0 9
38406: PUSH
38407: LD_INT 40
38409: PUSH
38410: LD_INT 15
38412: PUSH
38413: LD_INT 5
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: LIST
38420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38421: LD_VAR 0 6
38425: PPUSH
38426: CALL_OW 264
38430: PUSH
38431: LD_INT 3
38433: PUSH
38434: LD_INT 23
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: IN
38441: IFFALSE 38462
// points := [ 7 , 25 , 8 ] ;
38443: LD_ADDR_VAR 0 9
38447: PUSH
38448: LD_INT 7
38450: PUSH
38451: LD_INT 25
38453: PUSH
38454: LD_INT 8
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38462: LD_VAR 0 6
38466: PPUSH
38467: CALL_OW 264
38471: PUSH
38472: LD_INT 5
38474: PUSH
38475: LD_INT 27
38477: PUSH
38478: LD_INT 44
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: IN
38486: IFFALSE 38507
// points := [ 14 , 50 , 16 ] ;
38488: LD_ADDR_VAR 0 9
38492: PUSH
38493: LD_INT 14
38495: PUSH
38496: LD_INT 50
38498: PUSH
38499: LD_INT 16
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: LIST
38506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38507: LD_VAR 0 6
38511: PPUSH
38512: CALL_OW 264
38516: PUSH
38517: LD_INT 6
38519: PUSH
38520: LD_INT 46
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: IN
38527: IFFALSE 38548
// points := [ 32 , 120 , 70 ] ;
38529: LD_ADDR_VAR 0 9
38533: PUSH
38534: LD_INT 32
38536: PUSH
38537: LD_INT 120
38539: PUSH
38540: LD_INT 70
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38548: LD_VAR 0 6
38552: PPUSH
38553: CALL_OW 264
38557: PUSH
38558: LD_INT 7
38560: PUSH
38561: LD_INT 28
38563: PUSH
38564: LD_INT 45
38566: PUSH
38567: LD_INT 92
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: IN
38576: IFFALSE 38597
// points := [ 35 , 20 , 45 ] ;
38578: LD_ADDR_VAR 0 9
38582: PUSH
38583: LD_INT 35
38585: PUSH
38586: LD_INT 20
38588: PUSH
38589: LD_INT 45
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38597: LD_VAR 0 6
38601: PPUSH
38602: CALL_OW 264
38606: PUSH
38607: LD_INT 47
38609: PUSH
38610: EMPTY
38611: LIST
38612: IN
38613: IFFALSE 38634
// points := [ 67 , 45 , 75 ] ;
38615: LD_ADDR_VAR 0 9
38619: PUSH
38620: LD_INT 67
38622: PUSH
38623: LD_INT 45
38625: PUSH
38626: LD_INT 75
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38634: LD_VAR 0 6
38638: PPUSH
38639: CALL_OW 264
38643: PUSH
38644: LD_INT 26
38646: PUSH
38647: EMPTY
38648: LIST
38649: IN
38650: IFFALSE 38671
// points := [ 120 , 30 , 80 ] ;
38652: LD_ADDR_VAR 0 9
38656: PUSH
38657: LD_INT 120
38659: PUSH
38660: LD_INT 30
38662: PUSH
38663: LD_INT 80
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38671: LD_VAR 0 6
38675: PPUSH
38676: CALL_OW 264
38680: PUSH
38681: LD_INT 22
38683: PUSH
38684: EMPTY
38685: LIST
38686: IN
38687: IFFALSE 38708
// points := [ 40 , 1 , 1 ] ;
38689: LD_ADDR_VAR 0 9
38693: PUSH
38694: LD_INT 40
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38708: LD_VAR 0 6
38712: PPUSH
38713: CALL_OW 264
38717: PUSH
38718: LD_INT 29
38720: PUSH
38721: EMPTY
38722: LIST
38723: IN
38724: IFFALSE 38745
// points := [ 70 , 200 , 400 ] ;
38726: LD_ADDR_VAR 0 9
38730: PUSH
38731: LD_INT 70
38733: PUSH
38734: LD_INT 200
38736: PUSH
38737: LD_INT 400
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38745: LD_VAR 0 6
38749: PPUSH
38750: CALL_OW 264
38754: PUSH
38755: LD_INT 14
38757: PUSH
38758: LD_INT 53
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: IN
38765: IFFALSE 38786
// points := [ 40 , 10 , 20 ] ;
38767: LD_ADDR_VAR 0 9
38771: PUSH
38772: LD_INT 40
38774: PUSH
38775: LD_INT 10
38777: PUSH
38778: LD_INT 20
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38786: LD_VAR 0 6
38790: PPUSH
38791: CALL_OW 264
38795: PUSH
38796: LD_INT 9
38798: PUSH
38799: EMPTY
38800: LIST
38801: IN
38802: IFFALSE 38823
// points := [ 5 , 70 , 20 ] ;
38804: LD_ADDR_VAR 0 9
38808: PUSH
38809: LD_INT 5
38811: PUSH
38812: LD_INT 70
38814: PUSH
38815: LD_INT 20
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38823: LD_VAR 0 6
38827: PPUSH
38828: CALL_OW 264
38832: PUSH
38833: LD_INT 10
38835: PUSH
38836: EMPTY
38837: LIST
38838: IN
38839: IFFALSE 38860
// points := [ 35 , 110 , 70 ] ;
38841: LD_ADDR_VAR 0 9
38845: PUSH
38846: LD_INT 35
38848: PUSH
38849: LD_INT 110
38851: PUSH
38852: LD_INT 70
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38860: LD_VAR 0 6
38864: PPUSH
38865: CALL_OW 265
38869: PUSH
38870: LD_INT 25
38872: EQUAL
38873: IFFALSE 38894
// points := [ 80 , 65 , 100 ] ;
38875: LD_ADDR_VAR 0 9
38879: PUSH
38880: LD_INT 80
38882: PUSH
38883: LD_INT 65
38885: PUSH
38886: LD_INT 100
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38894: LD_VAR 0 6
38898: PPUSH
38899: CALL_OW 263
38903: PUSH
38904: LD_INT 1
38906: EQUAL
38907: IFFALSE 38942
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38909: LD_ADDR_VAR 0 10
38913: PUSH
38914: LD_VAR 0 10
38918: PUSH
38919: LD_VAR 0 6
38923: PPUSH
38924: CALL_OW 311
38928: PPUSH
38929: LD_INT 3
38931: PPUSH
38932: CALL_OW 259
38936: PUSH
38937: LD_INT 4
38939: MUL
38940: MUL
38941: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38942: LD_VAR 0 6
38946: PPUSH
38947: CALL_OW 263
38951: PUSH
38952: LD_INT 2
38954: EQUAL
38955: IFFALSE 39006
// begin j := IsControledBy ( i ) ;
38957: LD_ADDR_VAR 0 7
38961: PUSH
38962: LD_VAR 0 6
38966: PPUSH
38967: CALL_OW 312
38971: ST_TO_ADDR
// if j then
38972: LD_VAR 0 7
38976: IFFALSE 39006
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38978: LD_ADDR_VAR 0 10
38982: PUSH
38983: LD_VAR 0 10
38987: PUSH
38988: LD_VAR 0 7
38992: PPUSH
38993: LD_INT 3
38995: PPUSH
38996: CALL_OW 259
39000: PUSH
39001: LD_INT 3
39003: MUL
39004: MUL
39005: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39006: LD_VAR 0 6
39010: PPUSH
39011: CALL_OW 264
39015: PUSH
39016: LD_INT 5
39018: PUSH
39019: LD_INT 6
39021: PUSH
39022: LD_INT 46
39024: PUSH
39025: LD_INT 44
39027: PUSH
39028: LD_INT 47
39030: PUSH
39031: LD_INT 45
39033: PUSH
39034: LD_INT 28
39036: PUSH
39037: LD_INT 7
39039: PUSH
39040: LD_INT 27
39042: PUSH
39043: LD_INT 29
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: IN
39058: PUSH
39059: LD_VAR 0 1
39063: PPUSH
39064: LD_INT 52
39066: PPUSH
39067: CALL_OW 321
39071: PUSH
39072: LD_INT 2
39074: EQUAL
39075: AND
39076: IFFALSE 39093
// bpoints := bpoints * 1.2 ;
39078: LD_ADDR_VAR 0 10
39082: PUSH
39083: LD_VAR 0 10
39087: PUSH
39088: LD_REAL  1.20000000000000E+0000
39091: MUL
39092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39093: LD_VAR 0 6
39097: PPUSH
39098: CALL_OW 264
39102: PUSH
39103: LD_INT 6
39105: PUSH
39106: LD_INT 46
39108: PUSH
39109: LD_INT 47
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: IN
39117: IFFALSE 39134
// bpoints := bpoints * 1.2 ;
39119: LD_ADDR_VAR 0 10
39123: PUSH
39124: LD_VAR 0 10
39128: PUSH
39129: LD_REAL  1.20000000000000E+0000
39132: MUL
39133: ST_TO_ADDR
// end ; unit_building :
39134: GO 39148
39136: LD_INT 3
39138: DOUBLE
39139: EQUAL
39140: IFTRUE 39144
39142: GO 39147
39144: POP
// ; end ;
39145: GO 39148
39147: POP
// for j = 1 to 3 do
39148: LD_ADDR_VAR 0 7
39152: PUSH
39153: DOUBLE
39154: LD_INT 1
39156: DEC
39157: ST_TO_ADDR
39158: LD_INT 3
39160: PUSH
39161: FOR_TO
39162: IFFALSE 39215
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39164: LD_ADDR_VAR 0 5
39168: PUSH
39169: LD_VAR 0 5
39173: PPUSH
39174: LD_VAR 0 7
39178: PPUSH
39179: LD_VAR 0 5
39183: PUSH
39184: LD_VAR 0 7
39188: ARRAY
39189: PUSH
39190: LD_VAR 0 9
39194: PUSH
39195: LD_VAR 0 7
39199: ARRAY
39200: PUSH
39201: LD_VAR 0 10
39205: MUL
39206: PLUS
39207: PPUSH
39208: CALL_OW 1
39212: ST_TO_ADDR
39213: GO 39161
39215: POP
39216: POP
// end ;
39217: GO 37696
39219: POP
39220: POP
// result := Replace ( result , 4 , tmp ) ;
39221: LD_ADDR_VAR 0 5
39225: PUSH
39226: LD_VAR 0 5
39230: PPUSH
39231: LD_INT 4
39233: PPUSH
39234: LD_VAR 0 8
39238: PPUSH
39239: CALL_OW 1
39243: ST_TO_ADDR
// end ;
39244: LD_VAR 0 5
39248: RET
// export function DangerAtRange ( unit , range ) ; begin
39249: LD_INT 0
39251: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39252: LD_ADDR_VAR 0 3
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: CALL_OW 255
39266: PPUSH
39267: LD_VAR 0 1
39271: PPUSH
39272: CALL_OW 250
39276: PPUSH
39277: LD_VAR 0 1
39281: PPUSH
39282: CALL_OW 251
39286: PPUSH
39287: LD_VAR 0 2
39291: PPUSH
39292: CALL 37548 0 4
39296: ST_TO_ADDR
// end ;
39297: LD_VAR 0 3
39301: RET
// export function DangerInArea ( side , area ) ; begin
39302: LD_INT 0
39304: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39305: LD_ADDR_VAR 0 3
39309: PUSH
39310: LD_VAR 0 2
39314: PPUSH
39315: LD_INT 81
39317: PUSH
39318: LD_VAR 0 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PPUSH
39327: CALL_OW 70
39331: ST_TO_ADDR
// end ;
39332: LD_VAR 0 3
39336: RET
// export function IsExtension ( b ) ; begin
39337: LD_INT 0
39339: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39340: LD_ADDR_VAR 0 2
39344: PUSH
39345: LD_VAR 0 1
39349: PUSH
39350: LD_INT 23
39352: PUSH
39353: LD_INT 20
39355: PUSH
39356: LD_INT 22
39358: PUSH
39359: LD_INT 17
39361: PUSH
39362: LD_INT 24
39364: PUSH
39365: LD_INT 21
39367: PUSH
39368: LD_INT 19
39370: PUSH
39371: LD_INT 16
39373: PUSH
39374: LD_INT 25
39376: PUSH
39377: LD_INT 18
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: IN
39392: ST_TO_ADDR
// end ;
39393: LD_VAR 0 2
39397: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39398: LD_INT 0
39400: PPUSH
39401: PPUSH
39402: PPUSH
// result := [ ] ;
39403: LD_ADDR_VAR 0 4
39407: PUSH
39408: EMPTY
39409: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39410: LD_ADDR_VAR 0 5
39414: PUSH
39415: LD_VAR 0 2
39419: PPUSH
39420: LD_INT 21
39422: PUSH
39423: LD_INT 3
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PPUSH
39430: CALL_OW 70
39434: ST_TO_ADDR
// if not tmp then
39435: LD_VAR 0 5
39439: NOT
39440: IFFALSE 39444
// exit ;
39442: GO 39508
// if checkLink then
39444: LD_VAR 0 3
39448: IFFALSE 39498
// begin for i in tmp do
39450: LD_ADDR_VAR 0 6
39454: PUSH
39455: LD_VAR 0 5
39459: PUSH
39460: FOR_IN
39461: IFFALSE 39496
// if GetBase ( i ) <> base then
39463: LD_VAR 0 6
39467: PPUSH
39468: CALL_OW 274
39472: PUSH
39473: LD_VAR 0 1
39477: NONEQUAL
39478: IFFALSE 39494
// ComLinkToBase ( base , i ) ;
39480: LD_VAR 0 1
39484: PPUSH
39485: LD_VAR 0 6
39489: PPUSH
39490: CALL_OW 169
39494: GO 39460
39496: POP
39497: POP
// end ; result := tmp ;
39498: LD_ADDR_VAR 0 4
39502: PUSH
39503: LD_VAR 0 5
39507: ST_TO_ADDR
// end ;
39508: LD_VAR 0 4
39512: RET
// export function ComComplete ( units , b ) ; var i ; begin
39513: LD_INT 0
39515: PPUSH
39516: PPUSH
// if not units then
39517: LD_VAR 0 1
39521: NOT
39522: IFFALSE 39526
// exit ;
39524: GO 39616
// for i in units do
39526: LD_ADDR_VAR 0 4
39530: PUSH
39531: LD_VAR 0 1
39535: PUSH
39536: FOR_IN
39537: IFFALSE 39614
// if BuildingStatus ( b ) = bs_build then
39539: LD_VAR 0 2
39543: PPUSH
39544: CALL_OW 461
39548: PUSH
39549: LD_INT 1
39551: EQUAL
39552: IFFALSE 39612
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39554: LD_VAR 0 4
39558: PPUSH
39559: LD_STRING h
39561: PUSH
39562: LD_VAR 0 2
39566: PPUSH
39567: CALL_OW 250
39571: PUSH
39572: LD_VAR 0 2
39576: PPUSH
39577: CALL_OW 251
39581: PUSH
39582: LD_VAR 0 2
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: PUSH
39605: EMPTY
39606: LIST
39607: PPUSH
39608: CALL_OW 446
39612: GO 39536
39614: POP
39615: POP
// end ;
39616: LD_VAR 0 3
39620: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39621: LD_INT 0
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39629: LD_VAR 0 1
39633: NOT
39634: PUSH
39635: LD_VAR 0 1
39639: PPUSH
39640: CALL_OW 263
39644: PUSH
39645: LD_INT 2
39647: NONEQUAL
39648: OR
39649: IFFALSE 39653
// exit ;
39651: GO 39969
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39653: LD_ADDR_VAR 0 6
39657: PUSH
39658: LD_INT 22
39660: PUSH
39661: LD_VAR 0 1
39665: PPUSH
39666: CALL_OW 255
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: LD_INT 30
39680: PUSH
39681: LD_INT 36
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 34
39690: PUSH
39691: LD_INT 31
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: LIST
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PPUSH
39707: CALL_OW 69
39711: ST_TO_ADDR
// if not tmp then
39712: LD_VAR 0 6
39716: NOT
39717: IFFALSE 39721
// exit ;
39719: GO 39969
// result := [ ] ;
39721: LD_ADDR_VAR 0 2
39725: PUSH
39726: EMPTY
39727: ST_TO_ADDR
// for i in tmp do
39728: LD_ADDR_VAR 0 3
39732: PUSH
39733: LD_VAR 0 6
39737: PUSH
39738: FOR_IN
39739: IFFALSE 39810
// begin t := UnitsInside ( i ) ;
39741: LD_ADDR_VAR 0 4
39745: PUSH
39746: LD_VAR 0 3
39750: PPUSH
39751: CALL_OW 313
39755: ST_TO_ADDR
// if t then
39756: LD_VAR 0 4
39760: IFFALSE 39808
// for j in t do
39762: LD_ADDR_VAR 0 7
39766: PUSH
39767: LD_VAR 0 4
39771: PUSH
39772: FOR_IN
39773: IFFALSE 39806
// result := Replace ( result , result + 1 , j ) ;
39775: LD_ADDR_VAR 0 2
39779: PUSH
39780: LD_VAR 0 2
39784: PPUSH
39785: LD_VAR 0 2
39789: PUSH
39790: LD_INT 1
39792: PLUS
39793: PPUSH
39794: LD_VAR 0 7
39798: PPUSH
39799: CALL_OW 1
39803: ST_TO_ADDR
39804: GO 39772
39806: POP
39807: POP
// end ;
39808: GO 39738
39810: POP
39811: POP
// if not result then
39812: LD_VAR 0 2
39816: NOT
39817: IFFALSE 39821
// exit ;
39819: GO 39969
// mech := result [ 1 ] ;
39821: LD_ADDR_VAR 0 5
39825: PUSH
39826: LD_VAR 0 2
39830: PUSH
39831: LD_INT 1
39833: ARRAY
39834: ST_TO_ADDR
// if result > 1 then
39835: LD_VAR 0 2
39839: PUSH
39840: LD_INT 1
39842: GREATER
39843: IFFALSE 39955
// begin for i = 2 to result do
39845: LD_ADDR_VAR 0 3
39849: PUSH
39850: DOUBLE
39851: LD_INT 2
39853: DEC
39854: ST_TO_ADDR
39855: LD_VAR 0 2
39859: PUSH
39860: FOR_TO
39861: IFFALSE 39953
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39863: LD_ADDR_VAR 0 4
39867: PUSH
39868: LD_VAR 0 2
39872: PUSH
39873: LD_VAR 0 3
39877: ARRAY
39878: PPUSH
39879: LD_INT 3
39881: PPUSH
39882: CALL_OW 259
39886: PUSH
39887: LD_VAR 0 2
39891: PUSH
39892: LD_VAR 0 3
39896: ARRAY
39897: PPUSH
39898: CALL_OW 432
39902: MINUS
39903: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39904: LD_VAR 0 4
39908: PUSH
39909: LD_VAR 0 5
39913: PPUSH
39914: LD_INT 3
39916: PPUSH
39917: CALL_OW 259
39921: PUSH
39922: LD_VAR 0 5
39926: PPUSH
39927: CALL_OW 432
39931: MINUS
39932: GREATEREQUAL
39933: IFFALSE 39951
// mech := result [ i ] ;
39935: LD_ADDR_VAR 0 5
39939: PUSH
39940: LD_VAR 0 2
39944: PUSH
39945: LD_VAR 0 3
39949: ARRAY
39950: ST_TO_ADDR
// end ;
39951: GO 39860
39953: POP
39954: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39955: LD_VAR 0 1
39959: PPUSH
39960: LD_VAR 0 5
39964: PPUSH
39965: CALL_OW 135
// end ;
39969: LD_VAR 0 2
39973: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39974: LD_INT 0
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
// result := [ ] ;
39989: LD_ADDR_VAR 0 7
39993: PUSH
39994: EMPTY
39995: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39996: LD_VAR 0 1
40000: PPUSH
40001: CALL_OW 266
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: IN
40016: NOT
40017: IFFALSE 40021
// exit ;
40019: GO 41655
// if name then
40021: LD_VAR 0 3
40025: IFFALSE 40041
// SetBName ( base_dep , name ) ;
40027: LD_VAR 0 1
40031: PPUSH
40032: LD_VAR 0 3
40036: PPUSH
40037: CALL_OW 500
// base := GetBase ( base_dep ) ;
40041: LD_ADDR_VAR 0 15
40045: PUSH
40046: LD_VAR 0 1
40050: PPUSH
40051: CALL_OW 274
40055: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40056: LD_ADDR_VAR 0 16
40060: PUSH
40061: LD_VAR 0 1
40065: PPUSH
40066: CALL_OW 255
40070: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40071: LD_ADDR_VAR 0 17
40075: PUSH
40076: LD_VAR 0 1
40080: PPUSH
40081: CALL_OW 248
40085: ST_TO_ADDR
// if sources then
40086: LD_VAR 0 5
40090: IFFALSE 40137
// for i = 1 to 3 do
40092: LD_ADDR_VAR 0 8
40096: PUSH
40097: DOUBLE
40098: LD_INT 1
40100: DEC
40101: ST_TO_ADDR
40102: LD_INT 3
40104: PUSH
40105: FOR_TO
40106: IFFALSE 40135
// AddResourceType ( base , i , sources [ i ] ) ;
40108: LD_VAR 0 15
40112: PPUSH
40113: LD_VAR 0 8
40117: PPUSH
40118: LD_VAR 0 5
40122: PUSH
40123: LD_VAR 0 8
40127: ARRAY
40128: PPUSH
40129: CALL_OW 276
40133: GO 40105
40135: POP
40136: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40137: LD_ADDR_VAR 0 18
40141: PUSH
40142: LD_VAR 0 15
40146: PPUSH
40147: LD_VAR 0 2
40151: PPUSH
40152: LD_INT 1
40154: PPUSH
40155: CALL 39398 0 3
40159: ST_TO_ADDR
// InitHc ;
40160: CALL_OW 19
// InitUc ;
40164: CALL_OW 18
// uc_side := side ;
40168: LD_ADDR_OWVAR 20
40172: PUSH
40173: LD_VAR 0 16
40177: ST_TO_ADDR
// uc_nation := nation ;
40178: LD_ADDR_OWVAR 21
40182: PUSH
40183: LD_VAR 0 17
40187: ST_TO_ADDR
// if buildings then
40188: LD_VAR 0 18
40192: IFFALSE 41514
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40194: LD_ADDR_VAR 0 19
40198: PUSH
40199: LD_VAR 0 18
40203: PPUSH
40204: LD_INT 2
40206: PUSH
40207: LD_INT 30
40209: PUSH
40210: LD_INT 29
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 30
40219: PUSH
40220: LD_INT 30
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: PPUSH
40232: CALL_OW 72
40236: ST_TO_ADDR
// if tmp then
40237: LD_VAR 0 19
40241: IFFALSE 40289
// for i in tmp do
40243: LD_ADDR_VAR 0 8
40247: PUSH
40248: LD_VAR 0 19
40252: PUSH
40253: FOR_IN
40254: IFFALSE 40287
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40256: LD_VAR 0 8
40260: PPUSH
40261: CALL_OW 250
40265: PPUSH
40266: LD_VAR 0 8
40270: PPUSH
40271: CALL_OW 251
40275: PPUSH
40276: LD_VAR 0 16
40280: PPUSH
40281: CALL_OW 441
40285: GO 40253
40287: POP
40288: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40289: LD_VAR 0 18
40293: PPUSH
40294: LD_INT 2
40296: PUSH
40297: LD_INT 30
40299: PUSH
40300: LD_INT 32
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 30
40309: PUSH
40310: LD_INT 33
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: PPUSH
40322: CALL_OW 72
40326: IFFALSE 40414
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40328: LD_ADDR_VAR 0 8
40332: PUSH
40333: LD_VAR 0 18
40337: PPUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 30
40343: PUSH
40344: LD_INT 32
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 30
40353: PUSH
40354: LD_INT 33
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: PPUSH
40366: CALL_OW 72
40370: PUSH
40371: FOR_IN
40372: IFFALSE 40412
// begin if not GetBWeapon ( i ) then
40374: LD_VAR 0 8
40378: PPUSH
40379: CALL_OW 269
40383: NOT
40384: IFFALSE 40410
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40386: LD_VAR 0 8
40390: PPUSH
40391: LD_VAR 0 8
40395: PPUSH
40396: LD_VAR 0 2
40400: PPUSH
40401: CALL 41660 0 2
40405: PPUSH
40406: CALL_OW 431
// end ;
40410: GO 40371
40412: POP
40413: POP
// end ; for i = 1 to personel do
40414: LD_ADDR_VAR 0 8
40418: PUSH
40419: DOUBLE
40420: LD_INT 1
40422: DEC
40423: ST_TO_ADDR
40424: LD_VAR 0 6
40428: PUSH
40429: FOR_TO
40430: IFFALSE 41494
// begin if i > 4 then
40432: LD_VAR 0 8
40436: PUSH
40437: LD_INT 4
40439: GREATER
40440: IFFALSE 40444
// break ;
40442: GO 41494
// case i of 1 :
40444: LD_VAR 0 8
40448: PUSH
40449: LD_INT 1
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40457
40455: GO 40537
40457: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40458: LD_ADDR_VAR 0 12
40462: PUSH
40463: LD_VAR 0 18
40467: PPUSH
40468: LD_INT 22
40470: PUSH
40471: LD_VAR 0 16
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 58
40482: PUSH
40483: EMPTY
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 30
40491: PUSH
40492: LD_INT 32
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 30
40501: PUSH
40502: LD_INT 4
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 30
40511: PUSH
40512: LD_INT 5
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: LIST
40529: PPUSH
40530: CALL_OW 72
40534: ST_TO_ADDR
40535: GO 40759
40537: LD_INT 2
40539: DOUBLE
40540: EQUAL
40541: IFTRUE 40545
40543: GO 40607
40545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40546: LD_ADDR_VAR 0 12
40550: PUSH
40551: LD_VAR 0 18
40555: PPUSH
40556: LD_INT 22
40558: PUSH
40559: LD_VAR 0 16
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: LD_INT 30
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 30
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PPUSH
40600: CALL_OW 72
40604: ST_TO_ADDR
40605: GO 40759
40607: LD_INT 3
40609: DOUBLE
40610: EQUAL
40611: IFTRUE 40615
40613: GO 40677
40615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40616: LD_ADDR_VAR 0 12
40620: PUSH
40621: LD_VAR 0 18
40625: PPUSH
40626: LD_INT 22
40628: PUSH
40629: LD_VAR 0 16
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 30
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 30
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: LIST
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PPUSH
40670: CALL_OW 72
40674: ST_TO_ADDR
40675: GO 40759
40677: LD_INT 4
40679: DOUBLE
40680: EQUAL
40681: IFTRUE 40685
40683: GO 40758
40685: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40686: LD_ADDR_VAR 0 12
40690: PUSH
40691: LD_VAR 0 18
40695: PPUSH
40696: LD_INT 22
40698: PUSH
40699: LD_VAR 0 16
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: LD_INT 30
40713: PUSH
40714: LD_INT 6
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 30
40723: PUSH
40724: LD_INT 7
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 30
40733: PUSH
40734: LD_INT 8
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PPUSH
40751: CALL_OW 72
40755: ST_TO_ADDR
40756: GO 40759
40758: POP
// if i = 1 then
40759: LD_VAR 0 8
40763: PUSH
40764: LD_INT 1
40766: EQUAL
40767: IFFALSE 40878
// begin tmp := [ ] ;
40769: LD_ADDR_VAR 0 19
40773: PUSH
40774: EMPTY
40775: ST_TO_ADDR
// for j in f do
40776: LD_ADDR_VAR 0 9
40780: PUSH
40781: LD_VAR 0 12
40785: PUSH
40786: FOR_IN
40787: IFFALSE 40860
// if GetBType ( j ) = b_bunker then
40789: LD_VAR 0 9
40793: PPUSH
40794: CALL_OW 266
40798: PUSH
40799: LD_INT 32
40801: EQUAL
40802: IFFALSE 40829
// tmp := Insert ( tmp , 1 , j ) else
40804: LD_ADDR_VAR 0 19
40808: PUSH
40809: LD_VAR 0 19
40813: PPUSH
40814: LD_INT 1
40816: PPUSH
40817: LD_VAR 0 9
40821: PPUSH
40822: CALL_OW 2
40826: ST_TO_ADDR
40827: GO 40858
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40829: LD_ADDR_VAR 0 19
40833: PUSH
40834: LD_VAR 0 19
40838: PPUSH
40839: LD_VAR 0 19
40843: PUSH
40844: LD_INT 1
40846: PLUS
40847: PPUSH
40848: LD_VAR 0 9
40852: PPUSH
40853: CALL_OW 2
40857: ST_TO_ADDR
40858: GO 40786
40860: POP
40861: POP
// if tmp then
40862: LD_VAR 0 19
40866: IFFALSE 40878
// f := tmp ;
40868: LD_ADDR_VAR 0 12
40872: PUSH
40873: LD_VAR 0 19
40877: ST_TO_ADDR
// end ; x := personel [ i ] ;
40878: LD_ADDR_VAR 0 13
40882: PUSH
40883: LD_VAR 0 6
40887: PUSH
40888: LD_VAR 0 8
40892: ARRAY
40893: ST_TO_ADDR
// if x = - 1 then
40894: LD_VAR 0 13
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: EQUAL
40903: IFFALSE 41112
// begin for j in f do
40905: LD_ADDR_VAR 0 9
40909: PUSH
40910: LD_VAR 0 12
40914: PUSH
40915: FOR_IN
40916: IFFALSE 41108
// repeat InitHc ;
40918: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40922: LD_VAR 0 9
40926: PPUSH
40927: CALL_OW 266
40931: PUSH
40932: LD_INT 5
40934: EQUAL
40935: IFFALSE 41005
// begin if UnitsInside ( j ) < 3 then
40937: LD_VAR 0 9
40941: PPUSH
40942: CALL_OW 313
40946: PUSH
40947: LD_INT 3
40949: LESS
40950: IFFALSE 40986
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40952: LD_INT 0
40954: PPUSH
40955: LD_INT 5
40957: PUSH
40958: LD_INT 8
40960: PUSH
40961: LD_INT 9
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: LIST
40968: PUSH
40969: LD_VAR 0 17
40973: ARRAY
40974: PPUSH
40975: LD_VAR 0 4
40979: PPUSH
40980: CALL_OW 380
40984: GO 41003
// PrepareHuman ( false , i , skill ) ;
40986: LD_INT 0
40988: PPUSH
40989: LD_VAR 0 8
40993: PPUSH
40994: LD_VAR 0 4
40998: PPUSH
40999: CALL_OW 380
// end else
41003: GO 41022
// PrepareHuman ( false , i , skill ) ;
41005: LD_INT 0
41007: PPUSH
41008: LD_VAR 0 8
41012: PPUSH
41013: LD_VAR 0 4
41017: PPUSH
41018: CALL_OW 380
// un := CreateHuman ;
41022: LD_ADDR_VAR 0 14
41026: PUSH
41027: CALL_OW 44
41031: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41032: LD_ADDR_VAR 0 7
41036: PUSH
41037: LD_VAR 0 7
41041: PPUSH
41042: LD_INT 1
41044: PPUSH
41045: LD_VAR 0 14
41049: PPUSH
41050: CALL_OW 2
41054: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41055: LD_VAR 0 14
41059: PPUSH
41060: LD_VAR 0 9
41064: PPUSH
41065: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41069: LD_VAR 0 9
41073: PPUSH
41074: CALL_OW 313
41078: PUSH
41079: LD_INT 6
41081: EQUAL
41082: PUSH
41083: LD_VAR 0 9
41087: PPUSH
41088: CALL_OW 266
41092: PUSH
41093: LD_INT 32
41095: PUSH
41096: LD_INT 31
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: IN
41103: OR
41104: IFFALSE 40918
41106: GO 40915
41108: POP
41109: POP
// end else
41110: GO 41492
// for j = 1 to x do
41112: LD_ADDR_VAR 0 9
41116: PUSH
41117: DOUBLE
41118: LD_INT 1
41120: DEC
41121: ST_TO_ADDR
41122: LD_VAR 0 13
41126: PUSH
41127: FOR_TO
41128: IFFALSE 41490
// begin InitHc ;
41130: CALL_OW 19
// if not f then
41134: LD_VAR 0 12
41138: NOT
41139: IFFALSE 41228
// begin PrepareHuman ( false , i , skill ) ;
41141: LD_INT 0
41143: PPUSH
41144: LD_VAR 0 8
41148: PPUSH
41149: LD_VAR 0 4
41153: PPUSH
41154: CALL_OW 380
// un := CreateHuman ;
41158: LD_ADDR_VAR 0 14
41162: PUSH
41163: CALL_OW 44
41167: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41168: LD_ADDR_VAR 0 7
41172: PUSH
41173: LD_VAR 0 7
41177: PPUSH
41178: LD_INT 1
41180: PPUSH
41181: LD_VAR 0 14
41185: PPUSH
41186: CALL_OW 2
41190: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41191: LD_VAR 0 14
41195: PPUSH
41196: LD_VAR 0 1
41200: PPUSH
41201: CALL_OW 250
41205: PPUSH
41206: LD_VAR 0 1
41210: PPUSH
41211: CALL_OW 251
41215: PPUSH
41216: LD_INT 10
41218: PPUSH
41219: LD_INT 0
41221: PPUSH
41222: CALL_OW 50
// continue ;
41226: GO 41127
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41228: LD_VAR 0 12
41232: PUSH
41233: LD_INT 1
41235: ARRAY
41236: PPUSH
41237: CALL_OW 313
41241: PUSH
41242: LD_VAR 0 12
41246: PUSH
41247: LD_INT 1
41249: ARRAY
41250: PPUSH
41251: CALL_OW 266
41255: PUSH
41256: LD_INT 32
41258: PUSH
41259: LD_INT 31
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: IN
41266: AND
41267: PUSH
41268: LD_VAR 0 12
41272: PUSH
41273: LD_INT 1
41275: ARRAY
41276: PPUSH
41277: CALL_OW 313
41281: PUSH
41282: LD_INT 6
41284: EQUAL
41285: OR
41286: IFFALSE 41306
// f := Delete ( f , 1 ) ;
41288: LD_ADDR_VAR 0 12
41292: PUSH
41293: LD_VAR 0 12
41297: PPUSH
41298: LD_INT 1
41300: PPUSH
41301: CALL_OW 3
41305: ST_TO_ADDR
// if not f then
41306: LD_VAR 0 12
41310: NOT
41311: IFFALSE 41329
// begin x := x + 2 ;
41313: LD_ADDR_VAR 0 13
41317: PUSH
41318: LD_VAR 0 13
41322: PUSH
41323: LD_INT 2
41325: PLUS
41326: ST_TO_ADDR
// continue ;
41327: GO 41127
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41329: LD_VAR 0 12
41333: PUSH
41334: LD_INT 1
41336: ARRAY
41337: PPUSH
41338: CALL_OW 266
41342: PUSH
41343: LD_INT 5
41345: EQUAL
41346: IFFALSE 41420
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41348: LD_VAR 0 12
41352: PUSH
41353: LD_INT 1
41355: ARRAY
41356: PPUSH
41357: CALL_OW 313
41361: PUSH
41362: LD_INT 3
41364: LESS
41365: IFFALSE 41401
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41367: LD_INT 0
41369: PPUSH
41370: LD_INT 5
41372: PUSH
41373: LD_INT 8
41375: PUSH
41376: LD_INT 9
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: PUSH
41384: LD_VAR 0 17
41388: ARRAY
41389: PPUSH
41390: LD_VAR 0 4
41394: PPUSH
41395: CALL_OW 380
41399: GO 41418
// PrepareHuman ( false , i , skill ) ;
41401: LD_INT 0
41403: PPUSH
41404: LD_VAR 0 8
41408: PPUSH
41409: LD_VAR 0 4
41413: PPUSH
41414: CALL_OW 380
// end else
41418: GO 41437
// PrepareHuman ( false , i , skill ) ;
41420: LD_INT 0
41422: PPUSH
41423: LD_VAR 0 8
41427: PPUSH
41428: LD_VAR 0 4
41432: PPUSH
41433: CALL_OW 380
// un := CreateHuman ;
41437: LD_ADDR_VAR 0 14
41441: PUSH
41442: CALL_OW 44
41446: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41447: LD_ADDR_VAR 0 7
41451: PUSH
41452: LD_VAR 0 7
41456: PPUSH
41457: LD_INT 1
41459: PPUSH
41460: LD_VAR 0 14
41464: PPUSH
41465: CALL_OW 2
41469: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41470: LD_VAR 0 14
41474: PPUSH
41475: LD_VAR 0 12
41479: PUSH
41480: LD_INT 1
41482: ARRAY
41483: PPUSH
41484: CALL_OW 52
// end ;
41488: GO 41127
41490: POP
41491: POP
// end ;
41492: GO 40429
41494: POP
41495: POP
// result := result ^ buildings ;
41496: LD_ADDR_VAR 0 7
41500: PUSH
41501: LD_VAR 0 7
41505: PUSH
41506: LD_VAR 0 18
41510: ADD
41511: ST_TO_ADDR
// end else
41512: GO 41655
// begin for i = 1 to personel do
41514: LD_ADDR_VAR 0 8
41518: PUSH
41519: DOUBLE
41520: LD_INT 1
41522: DEC
41523: ST_TO_ADDR
41524: LD_VAR 0 6
41528: PUSH
41529: FOR_TO
41530: IFFALSE 41653
// begin if i > 4 then
41532: LD_VAR 0 8
41536: PUSH
41537: LD_INT 4
41539: GREATER
41540: IFFALSE 41544
// break ;
41542: GO 41653
// x := personel [ i ] ;
41544: LD_ADDR_VAR 0 13
41548: PUSH
41549: LD_VAR 0 6
41553: PUSH
41554: LD_VAR 0 8
41558: ARRAY
41559: ST_TO_ADDR
// if x = - 1 then
41560: LD_VAR 0 13
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: EQUAL
41569: IFFALSE 41573
// continue ;
41571: GO 41529
// PrepareHuman ( false , i , skill ) ;
41573: LD_INT 0
41575: PPUSH
41576: LD_VAR 0 8
41580: PPUSH
41581: LD_VAR 0 4
41585: PPUSH
41586: CALL_OW 380
// un := CreateHuman ;
41590: LD_ADDR_VAR 0 14
41594: PUSH
41595: CALL_OW 44
41599: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41600: LD_VAR 0 14
41604: PPUSH
41605: LD_VAR 0 1
41609: PPUSH
41610: CALL_OW 250
41614: PPUSH
41615: LD_VAR 0 1
41619: PPUSH
41620: CALL_OW 251
41624: PPUSH
41625: LD_INT 10
41627: PPUSH
41628: LD_INT 0
41630: PPUSH
41631: CALL_OW 50
// result := result ^ un ;
41635: LD_ADDR_VAR 0 7
41639: PUSH
41640: LD_VAR 0 7
41644: PUSH
41645: LD_VAR 0 14
41649: ADD
41650: ST_TO_ADDR
// end ;
41651: GO 41529
41653: POP
41654: POP
// end ; end ;
41655: LD_VAR 0 7
41659: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41660: LD_INT 0
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
41674: PPUSH
41675: PPUSH
41676: PPUSH
41677: PPUSH
// result := false ;
41678: LD_ADDR_VAR 0 3
41682: PUSH
41683: LD_INT 0
41685: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41686: LD_VAR 0 1
41690: NOT
41691: PUSH
41692: LD_VAR 0 1
41696: PPUSH
41697: CALL_OW 266
41701: PUSH
41702: LD_INT 32
41704: PUSH
41705: LD_INT 33
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: IN
41712: NOT
41713: OR
41714: IFFALSE 41718
// exit ;
41716: GO 42827
// nat := GetNation ( tower ) ;
41718: LD_ADDR_VAR 0 12
41722: PUSH
41723: LD_VAR 0 1
41727: PPUSH
41728: CALL_OW 248
41732: ST_TO_ADDR
// side := GetSide ( tower ) ;
41733: LD_ADDR_VAR 0 16
41737: PUSH
41738: LD_VAR 0 1
41742: PPUSH
41743: CALL_OW 255
41747: ST_TO_ADDR
// x := GetX ( tower ) ;
41748: LD_ADDR_VAR 0 10
41752: PUSH
41753: LD_VAR 0 1
41757: PPUSH
41758: CALL_OW 250
41762: ST_TO_ADDR
// y := GetY ( tower ) ;
41763: LD_ADDR_VAR 0 11
41767: PUSH
41768: LD_VAR 0 1
41772: PPUSH
41773: CALL_OW 251
41777: ST_TO_ADDR
// if not x or not y then
41778: LD_VAR 0 10
41782: NOT
41783: PUSH
41784: LD_VAR 0 11
41788: NOT
41789: OR
41790: IFFALSE 41794
// exit ;
41792: GO 42827
// weapon := 0 ;
41794: LD_ADDR_VAR 0 18
41798: PUSH
41799: LD_INT 0
41801: ST_TO_ADDR
// fac_list := [ ] ;
41802: LD_ADDR_VAR 0 17
41806: PUSH
41807: EMPTY
41808: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41809: LD_ADDR_VAR 0 6
41813: PUSH
41814: LD_VAR 0 1
41818: PPUSH
41819: CALL_OW 274
41823: PPUSH
41824: LD_VAR 0 2
41828: PPUSH
41829: LD_INT 0
41831: PPUSH
41832: CALL 39398 0 3
41836: PPUSH
41837: LD_INT 30
41839: PUSH
41840: LD_INT 3
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PPUSH
41847: CALL_OW 72
41851: ST_TO_ADDR
// if not factories then
41852: LD_VAR 0 6
41856: NOT
41857: IFFALSE 41861
// exit ;
41859: GO 42827
// for i in factories do
41861: LD_ADDR_VAR 0 8
41865: PUSH
41866: LD_VAR 0 6
41870: PUSH
41871: FOR_IN
41872: IFFALSE 41897
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41874: LD_ADDR_VAR 0 17
41878: PUSH
41879: LD_VAR 0 17
41883: PUSH
41884: LD_VAR 0 8
41888: PPUSH
41889: CALL_OW 478
41893: UNION
41894: ST_TO_ADDR
41895: GO 41871
41897: POP
41898: POP
// if not fac_list then
41899: LD_VAR 0 17
41903: NOT
41904: IFFALSE 41908
// exit ;
41906: GO 42827
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41908: LD_ADDR_VAR 0 5
41912: PUSH
41913: LD_INT 4
41915: PUSH
41916: LD_INT 5
41918: PUSH
41919: LD_INT 9
41921: PUSH
41922: LD_INT 10
41924: PUSH
41925: LD_INT 6
41927: PUSH
41928: LD_INT 7
41930: PUSH
41931: LD_INT 11
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 27
41945: PUSH
41946: LD_INT 28
41948: PUSH
41949: LD_INT 26
41951: PUSH
41952: LD_INT 30
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 43
41963: PUSH
41964: LD_INT 44
41966: PUSH
41967: LD_INT 46
41969: PUSH
41970: LD_INT 45
41972: PUSH
41973: LD_INT 47
41975: PUSH
41976: LD_INT 49
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: PUSH
41992: LD_VAR 0 12
41996: ARRAY
41997: ST_TO_ADDR
// list := list isect fac_list ;
41998: LD_ADDR_VAR 0 5
42002: PUSH
42003: LD_VAR 0 5
42007: PUSH
42008: LD_VAR 0 17
42012: ISECT
42013: ST_TO_ADDR
// if not list then
42014: LD_VAR 0 5
42018: NOT
42019: IFFALSE 42023
// exit ;
42021: GO 42827
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42023: LD_VAR 0 12
42027: PUSH
42028: LD_INT 3
42030: EQUAL
42031: PUSH
42032: LD_INT 49
42034: PUSH
42035: LD_VAR 0 5
42039: IN
42040: AND
42041: PUSH
42042: LD_INT 31
42044: PPUSH
42045: LD_VAR 0 16
42049: PPUSH
42050: CALL_OW 321
42054: PUSH
42055: LD_INT 2
42057: EQUAL
42058: AND
42059: IFFALSE 42119
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42061: LD_INT 22
42063: PUSH
42064: LD_VAR 0 16
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 35
42075: PUSH
42076: LD_INT 49
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 91
42085: PUSH
42086: LD_VAR 0 1
42090: PUSH
42091: LD_INT 10
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: PPUSH
42104: CALL_OW 69
42108: NOT
42109: IFFALSE 42119
// weapon := ru_time_lapser ;
42111: LD_ADDR_VAR 0 18
42115: PUSH
42116: LD_INT 49
42118: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42119: LD_VAR 0 12
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: IN
42134: PUSH
42135: LD_INT 11
42137: PUSH
42138: LD_VAR 0 5
42142: IN
42143: PUSH
42144: LD_INT 30
42146: PUSH
42147: LD_VAR 0 5
42151: IN
42152: OR
42153: AND
42154: PUSH
42155: LD_INT 6
42157: PPUSH
42158: LD_VAR 0 16
42162: PPUSH
42163: CALL_OW 321
42167: PUSH
42168: LD_INT 2
42170: EQUAL
42171: AND
42172: IFFALSE 42337
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42174: LD_INT 22
42176: PUSH
42177: LD_VAR 0 16
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: PUSH
42189: LD_INT 35
42191: PUSH
42192: LD_INT 11
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 35
42201: PUSH
42202: LD_INT 30
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 91
42216: PUSH
42217: LD_VAR 0 1
42221: PUSH
42222: LD_INT 18
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: PPUSH
42235: CALL_OW 69
42239: NOT
42240: PUSH
42241: LD_INT 22
42243: PUSH
42244: LD_VAR 0 16
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: LD_INT 30
42258: PUSH
42259: LD_INT 32
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 30
42268: PUSH
42269: LD_INT 33
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 91
42283: PUSH
42284: LD_VAR 0 1
42288: PUSH
42289: LD_INT 12
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: PPUSH
42305: CALL_OW 69
42309: PUSH
42310: LD_INT 2
42312: GREATER
42313: AND
42314: IFFALSE 42337
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42316: LD_ADDR_VAR 0 18
42320: PUSH
42321: LD_INT 11
42323: PUSH
42324: LD_INT 30
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_VAR 0 12
42335: ARRAY
42336: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42337: LD_VAR 0 18
42341: NOT
42342: PUSH
42343: LD_INT 40
42345: PPUSH
42346: LD_VAR 0 16
42350: PPUSH
42351: CALL_OW 321
42355: PUSH
42356: LD_INT 2
42358: EQUAL
42359: AND
42360: PUSH
42361: LD_INT 7
42363: PUSH
42364: LD_VAR 0 5
42368: IN
42369: PUSH
42370: LD_INT 28
42372: PUSH
42373: LD_VAR 0 5
42377: IN
42378: OR
42379: PUSH
42380: LD_INT 45
42382: PUSH
42383: LD_VAR 0 5
42387: IN
42388: OR
42389: AND
42390: IFFALSE 42644
// begin hex := GetHexInfo ( x , y ) ;
42392: LD_ADDR_VAR 0 4
42396: PUSH
42397: LD_VAR 0 10
42401: PPUSH
42402: LD_VAR 0 11
42406: PPUSH
42407: CALL_OW 546
42411: ST_TO_ADDR
// if hex [ 1 ] then
42412: LD_VAR 0 4
42416: PUSH
42417: LD_INT 1
42419: ARRAY
42420: IFFALSE 42424
// exit ;
42422: GO 42827
// height := hex [ 2 ] ;
42424: LD_ADDR_VAR 0 15
42428: PUSH
42429: LD_VAR 0 4
42433: PUSH
42434: LD_INT 2
42436: ARRAY
42437: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42438: LD_ADDR_VAR 0 14
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 3
42451: PUSH
42452: LD_INT 5
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: ST_TO_ADDR
// for i in tmp do
42461: LD_ADDR_VAR 0 8
42465: PUSH
42466: LD_VAR 0 14
42470: PUSH
42471: FOR_IN
42472: IFFALSE 42642
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42474: LD_ADDR_VAR 0 9
42478: PUSH
42479: LD_VAR 0 10
42483: PPUSH
42484: LD_VAR 0 8
42488: PPUSH
42489: LD_INT 5
42491: PPUSH
42492: CALL_OW 272
42496: PUSH
42497: LD_VAR 0 11
42501: PPUSH
42502: LD_VAR 0 8
42506: PPUSH
42507: LD_INT 5
42509: PPUSH
42510: CALL_OW 273
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42519: LD_VAR 0 9
42523: PUSH
42524: LD_INT 1
42526: ARRAY
42527: PPUSH
42528: LD_VAR 0 9
42532: PUSH
42533: LD_INT 2
42535: ARRAY
42536: PPUSH
42537: CALL_OW 488
42541: IFFALSE 42640
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42543: LD_ADDR_VAR 0 4
42547: PUSH
42548: LD_VAR 0 9
42552: PUSH
42553: LD_INT 1
42555: ARRAY
42556: PPUSH
42557: LD_VAR 0 9
42561: PUSH
42562: LD_INT 2
42564: ARRAY
42565: PPUSH
42566: CALL_OW 546
42570: ST_TO_ADDR
// if hex [ 1 ] then
42571: LD_VAR 0 4
42575: PUSH
42576: LD_INT 1
42578: ARRAY
42579: IFFALSE 42583
// continue ;
42581: GO 42471
// h := hex [ 2 ] ;
42583: LD_ADDR_VAR 0 13
42587: PUSH
42588: LD_VAR 0 4
42592: PUSH
42593: LD_INT 2
42595: ARRAY
42596: ST_TO_ADDR
// if h + 7 < height then
42597: LD_VAR 0 13
42601: PUSH
42602: LD_INT 7
42604: PLUS
42605: PUSH
42606: LD_VAR 0 15
42610: LESS
42611: IFFALSE 42640
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42613: LD_ADDR_VAR 0 18
42617: PUSH
42618: LD_INT 7
42620: PUSH
42621: LD_INT 28
42623: PUSH
42624: LD_INT 45
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: LIST
42631: PUSH
42632: LD_VAR 0 12
42636: ARRAY
42637: ST_TO_ADDR
// break ;
42638: GO 42642
// end ; end ; end ;
42640: GO 42471
42642: POP
42643: POP
// end ; if not weapon then
42644: LD_VAR 0 18
42648: NOT
42649: IFFALSE 42709
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42651: LD_ADDR_VAR 0 5
42655: PUSH
42656: LD_VAR 0 5
42660: PUSH
42661: LD_INT 11
42663: PUSH
42664: LD_INT 30
42666: PUSH
42667: LD_INT 49
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: DIFF
42675: ST_TO_ADDR
// if not list then
42676: LD_VAR 0 5
42680: NOT
42681: IFFALSE 42685
// exit ;
42683: GO 42827
// weapon := list [ rand ( 1 , list ) ] ;
42685: LD_ADDR_VAR 0 18
42689: PUSH
42690: LD_VAR 0 5
42694: PUSH
42695: LD_INT 1
42697: PPUSH
42698: LD_VAR 0 5
42702: PPUSH
42703: CALL_OW 12
42707: ARRAY
42708: ST_TO_ADDR
// end ; if weapon then
42709: LD_VAR 0 18
42713: IFFALSE 42827
// begin tmp := CostOfWeapon ( weapon ) ;
42715: LD_ADDR_VAR 0 14
42719: PUSH
42720: LD_VAR 0 18
42724: PPUSH
42725: CALL_OW 451
42729: ST_TO_ADDR
// j := GetBase ( tower ) ;
42730: LD_ADDR_VAR 0 9
42734: PUSH
42735: LD_VAR 0 1
42739: PPUSH
42740: CALL_OW 274
42744: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42745: LD_VAR 0 9
42749: PPUSH
42750: LD_INT 1
42752: PPUSH
42753: CALL_OW 275
42757: PUSH
42758: LD_VAR 0 14
42762: PUSH
42763: LD_INT 1
42765: ARRAY
42766: GREATEREQUAL
42767: PUSH
42768: LD_VAR 0 9
42772: PPUSH
42773: LD_INT 2
42775: PPUSH
42776: CALL_OW 275
42780: PUSH
42781: LD_VAR 0 14
42785: PUSH
42786: LD_INT 2
42788: ARRAY
42789: GREATEREQUAL
42790: AND
42791: PUSH
42792: LD_VAR 0 9
42796: PPUSH
42797: LD_INT 3
42799: PPUSH
42800: CALL_OW 275
42804: PUSH
42805: LD_VAR 0 14
42809: PUSH
42810: LD_INT 3
42812: ARRAY
42813: GREATEREQUAL
42814: AND
42815: IFFALSE 42827
// result := weapon ;
42817: LD_ADDR_VAR 0 3
42821: PUSH
42822: LD_VAR 0 18
42826: ST_TO_ADDR
// end ; end ;
42827: LD_VAR 0 3
42831: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42832: LD_INT 0
42834: PPUSH
42835: PPUSH
// result := true ;
42836: LD_ADDR_VAR 0 3
42840: PUSH
42841: LD_INT 1
42843: ST_TO_ADDR
// if array1 = array2 then
42844: LD_VAR 0 1
42848: PUSH
42849: LD_VAR 0 2
42853: EQUAL
42854: IFFALSE 42914
// begin for i = 1 to array1 do
42856: LD_ADDR_VAR 0 4
42860: PUSH
42861: DOUBLE
42862: LD_INT 1
42864: DEC
42865: ST_TO_ADDR
42866: LD_VAR 0 1
42870: PUSH
42871: FOR_TO
42872: IFFALSE 42910
// if array1 [ i ] <> array2 [ i ] then
42874: LD_VAR 0 1
42878: PUSH
42879: LD_VAR 0 4
42883: ARRAY
42884: PUSH
42885: LD_VAR 0 2
42889: PUSH
42890: LD_VAR 0 4
42894: ARRAY
42895: NONEQUAL
42896: IFFALSE 42908
// begin result := false ;
42898: LD_ADDR_VAR 0 3
42902: PUSH
42903: LD_INT 0
42905: ST_TO_ADDR
// break ;
42906: GO 42910
// end ;
42908: GO 42871
42910: POP
42911: POP
// end else
42912: GO 42922
// result := false ;
42914: LD_ADDR_VAR 0 3
42918: PUSH
42919: LD_INT 0
42921: ST_TO_ADDR
// end ;
42922: LD_VAR 0 3
42926: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42927: LD_INT 0
42929: PPUSH
42930: PPUSH
// if not array1 or not array2 then
42931: LD_VAR 0 1
42935: NOT
42936: PUSH
42937: LD_VAR 0 2
42941: NOT
42942: OR
42943: IFFALSE 42947
// exit ;
42945: GO 43011
// result := true ;
42947: LD_ADDR_VAR 0 3
42951: PUSH
42952: LD_INT 1
42954: ST_TO_ADDR
// for i = 1 to array1 do
42955: LD_ADDR_VAR 0 4
42959: PUSH
42960: DOUBLE
42961: LD_INT 1
42963: DEC
42964: ST_TO_ADDR
42965: LD_VAR 0 1
42969: PUSH
42970: FOR_TO
42971: IFFALSE 43009
// if array1 [ i ] <> array2 [ i ] then
42973: LD_VAR 0 1
42977: PUSH
42978: LD_VAR 0 4
42982: ARRAY
42983: PUSH
42984: LD_VAR 0 2
42988: PUSH
42989: LD_VAR 0 4
42993: ARRAY
42994: NONEQUAL
42995: IFFALSE 43007
// begin result := false ;
42997: LD_ADDR_VAR 0 3
43001: PUSH
43002: LD_INT 0
43004: ST_TO_ADDR
// break ;
43005: GO 43009
// end ;
43007: GO 42970
43009: POP
43010: POP
// end ;
43011: LD_VAR 0 3
43015: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43016: LD_INT 0
43018: PPUSH
43019: PPUSH
43020: PPUSH
// pom := GetBase ( fac ) ;
43021: LD_ADDR_VAR 0 5
43025: PUSH
43026: LD_VAR 0 1
43030: PPUSH
43031: CALL_OW 274
43035: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43036: LD_ADDR_VAR 0 4
43040: PUSH
43041: LD_VAR 0 2
43045: PUSH
43046: LD_INT 1
43048: ARRAY
43049: PPUSH
43050: LD_VAR 0 2
43054: PUSH
43055: LD_INT 2
43057: ARRAY
43058: PPUSH
43059: LD_VAR 0 2
43063: PUSH
43064: LD_INT 3
43066: ARRAY
43067: PPUSH
43068: LD_VAR 0 2
43072: PUSH
43073: LD_INT 4
43075: ARRAY
43076: PPUSH
43077: CALL_OW 449
43081: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43082: LD_ADDR_VAR 0 3
43086: PUSH
43087: LD_VAR 0 5
43091: PPUSH
43092: LD_INT 1
43094: PPUSH
43095: CALL_OW 275
43099: PUSH
43100: LD_VAR 0 4
43104: PUSH
43105: LD_INT 1
43107: ARRAY
43108: GREATEREQUAL
43109: PUSH
43110: LD_VAR 0 5
43114: PPUSH
43115: LD_INT 2
43117: PPUSH
43118: CALL_OW 275
43122: PUSH
43123: LD_VAR 0 4
43127: PUSH
43128: LD_INT 2
43130: ARRAY
43131: GREATEREQUAL
43132: AND
43133: PUSH
43134: LD_VAR 0 5
43138: PPUSH
43139: LD_INT 3
43141: PPUSH
43142: CALL_OW 275
43146: PUSH
43147: LD_VAR 0 4
43151: PUSH
43152: LD_INT 3
43154: ARRAY
43155: GREATEREQUAL
43156: AND
43157: ST_TO_ADDR
// end ;
43158: LD_VAR 0 3
43162: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43163: LD_INT 0
43165: PPUSH
43166: PPUSH
43167: PPUSH
43168: PPUSH
// pom := GetBase ( building ) ;
43169: LD_ADDR_VAR 0 3
43173: PUSH
43174: LD_VAR 0 1
43178: PPUSH
43179: CALL_OW 274
43183: ST_TO_ADDR
// if not pom then
43184: LD_VAR 0 3
43188: NOT
43189: IFFALSE 43193
// exit ;
43191: GO 43363
// btype := GetBType ( building ) ;
43193: LD_ADDR_VAR 0 5
43197: PUSH
43198: LD_VAR 0 1
43202: PPUSH
43203: CALL_OW 266
43207: ST_TO_ADDR
// if btype = b_armoury then
43208: LD_VAR 0 5
43212: PUSH
43213: LD_INT 4
43215: EQUAL
43216: IFFALSE 43226
// btype := b_barracks ;
43218: LD_ADDR_VAR 0 5
43222: PUSH
43223: LD_INT 5
43225: ST_TO_ADDR
// if btype = b_depot then
43226: LD_VAR 0 5
43230: PUSH
43231: LD_INT 0
43233: EQUAL
43234: IFFALSE 43244
// btype := b_warehouse ;
43236: LD_ADDR_VAR 0 5
43240: PUSH
43241: LD_INT 1
43243: ST_TO_ADDR
// if btype = b_workshop then
43244: LD_VAR 0 5
43248: PUSH
43249: LD_INT 2
43251: EQUAL
43252: IFFALSE 43262
// btype := b_factory ;
43254: LD_ADDR_VAR 0 5
43258: PUSH
43259: LD_INT 3
43261: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43262: LD_ADDR_VAR 0 4
43266: PUSH
43267: LD_VAR 0 5
43271: PPUSH
43272: LD_VAR 0 1
43276: PPUSH
43277: CALL_OW 248
43281: PPUSH
43282: CALL_OW 450
43286: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43287: LD_ADDR_VAR 0 2
43291: PUSH
43292: LD_VAR 0 3
43296: PPUSH
43297: LD_INT 1
43299: PPUSH
43300: CALL_OW 275
43304: PUSH
43305: LD_VAR 0 4
43309: PUSH
43310: LD_INT 1
43312: ARRAY
43313: GREATEREQUAL
43314: PUSH
43315: LD_VAR 0 3
43319: PPUSH
43320: LD_INT 2
43322: PPUSH
43323: CALL_OW 275
43327: PUSH
43328: LD_VAR 0 4
43332: PUSH
43333: LD_INT 2
43335: ARRAY
43336: GREATEREQUAL
43337: AND
43338: PUSH
43339: LD_VAR 0 3
43343: PPUSH
43344: LD_INT 3
43346: PPUSH
43347: CALL_OW 275
43351: PUSH
43352: LD_VAR 0 4
43356: PUSH
43357: LD_INT 3
43359: ARRAY
43360: GREATEREQUAL
43361: AND
43362: ST_TO_ADDR
// end ;
43363: LD_VAR 0 2
43367: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43368: LD_INT 0
43370: PPUSH
43371: PPUSH
43372: PPUSH
// pom := GetBase ( building ) ;
43373: LD_ADDR_VAR 0 4
43377: PUSH
43378: LD_VAR 0 1
43382: PPUSH
43383: CALL_OW 274
43387: ST_TO_ADDR
// if not pom then
43388: LD_VAR 0 4
43392: NOT
43393: IFFALSE 43397
// exit ;
43395: GO 43498
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43397: LD_ADDR_VAR 0 5
43401: PUSH
43402: LD_VAR 0 2
43406: PPUSH
43407: LD_VAR 0 1
43411: PPUSH
43412: CALL_OW 248
43416: PPUSH
43417: CALL_OW 450
43421: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43422: LD_ADDR_VAR 0 3
43426: PUSH
43427: LD_VAR 0 4
43431: PPUSH
43432: LD_INT 1
43434: PPUSH
43435: CALL_OW 275
43439: PUSH
43440: LD_VAR 0 5
43444: PUSH
43445: LD_INT 1
43447: ARRAY
43448: GREATEREQUAL
43449: PUSH
43450: LD_VAR 0 4
43454: PPUSH
43455: LD_INT 2
43457: PPUSH
43458: CALL_OW 275
43462: PUSH
43463: LD_VAR 0 5
43467: PUSH
43468: LD_INT 2
43470: ARRAY
43471: GREATEREQUAL
43472: AND
43473: PUSH
43474: LD_VAR 0 4
43478: PPUSH
43479: LD_INT 3
43481: PPUSH
43482: CALL_OW 275
43486: PUSH
43487: LD_VAR 0 5
43491: PUSH
43492: LD_INT 3
43494: ARRAY
43495: GREATEREQUAL
43496: AND
43497: ST_TO_ADDR
// end ;
43498: LD_VAR 0 3
43502: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43503: LD_INT 0
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
// result := false ;
43516: LD_ADDR_VAR 0 8
43520: PUSH
43521: LD_INT 0
43523: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43524: LD_VAR 0 5
43528: NOT
43529: PUSH
43530: LD_VAR 0 1
43534: NOT
43535: OR
43536: PUSH
43537: LD_VAR 0 2
43541: NOT
43542: OR
43543: PUSH
43544: LD_VAR 0 3
43548: NOT
43549: OR
43550: IFFALSE 43554
// exit ;
43552: GO 44368
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43554: LD_ADDR_VAR 0 14
43558: PUSH
43559: LD_VAR 0 1
43563: PPUSH
43564: LD_VAR 0 2
43568: PPUSH
43569: LD_VAR 0 3
43573: PPUSH
43574: LD_VAR 0 4
43578: PPUSH
43579: LD_VAR 0 5
43583: PUSH
43584: LD_INT 1
43586: ARRAY
43587: PPUSH
43588: CALL_OW 248
43592: PPUSH
43593: LD_INT 0
43595: PPUSH
43596: CALL 45601 0 6
43600: ST_TO_ADDR
// if not hexes then
43601: LD_VAR 0 14
43605: NOT
43606: IFFALSE 43610
// exit ;
43608: GO 44368
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43610: LD_ADDR_VAR 0 17
43614: PUSH
43615: LD_VAR 0 5
43619: PPUSH
43620: LD_INT 22
43622: PUSH
43623: LD_VAR 0 13
43627: PPUSH
43628: CALL_OW 255
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 30
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 30
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PPUSH
43669: CALL_OW 72
43673: ST_TO_ADDR
// for i = 1 to hexes do
43674: LD_ADDR_VAR 0 9
43678: PUSH
43679: DOUBLE
43680: LD_INT 1
43682: DEC
43683: ST_TO_ADDR
43684: LD_VAR 0 14
43688: PUSH
43689: FOR_TO
43690: IFFALSE 44366
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43692: LD_ADDR_VAR 0 13
43696: PUSH
43697: LD_VAR 0 14
43701: PUSH
43702: LD_VAR 0 9
43706: ARRAY
43707: PUSH
43708: LD_INT 1
43710: ARRAY
43711: PPUSH
43712: LD_VAR 0 14
43716: PUSH
43717: LD_VAR 0 9
43721: ARRAY
43722: PUSH
43723: LD_INT 2
43725: ARRAY
43726: PPUSH
43727: CALL_OW 428
43731: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43732: LD_VAR 0 14
43736: PUSH
43737: LD_VAR 0 9
43741: ARRAY
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: PPUSH
43747: LD_VAR 0 14
43751: PUSH
43752: LD_VAR 0 9
43756: ARRAY
43757: PUSH
43758: LD_INT 2
43760: ARRAY
43761: PPUSH
43762: CALL_OW 351
43766: PUSH
43767: LD_VAR 0 14
43771: PUSH
43772: LD_VAR 0 9
43776: ARRAY
43777: PUSH
43778: LD_INT 1
43780: ARRAY
43781: PPUSH
43782: LD_VAR 0 14
43786: PUSH
43787: LD_VAR 0 9
43791: ARRAY
43792: PUSH
43793: LD_INT 2
43795: ARRAY
43796: PPUSH
43797: CALL_OW 488
43801: NOT
43802: OR
43803: PUSH
43804: LD_VAR 0 13
43808: PPUSH
43809: CALL_OW 247
43813: PUSH
43814: LD_INT 3
43816: EQUAL
43817: OR
43818: IFFALSE 43824
// exit ;
43820: POP
43821: POP
43822: GO 44368
// if not tmp then
43824: LD_VAR 0 13
43828: NOT
43829: IFFALSE 43833
// continue ;
43831: GO 43689
// result := true ;
43833: LD_ADDR_VAR 0 8
43837: PUSH
43838: LD_INT 1
43840: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43841: LD_VAR 0 6
43845: PUSH
43846: LD_VAR 0 13
43850: PPUSH
43851: CALL_OW 247
43855: PUSH
43856: LD_INT 2
43858: EQUAL
43859: AND
43860: PUSH
43861: LD_VAR 0 13
43865: PPUSH
43866: CALL_OW 263
43870: PUSH
43871: LD_INT 1
43873: EQUAL
43874: AND
43875: IFFALSE 44039
// begin if IsDrivenBy ( tmp ) then
43877: LD_VAR 0 13
43881: PPUSH
43882: CALL_OW 311
43886: IFFALSE 43890
// continue ;
43888: GO 43689
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43890: LD_VAR 0 6
43894: PPUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 60
43900: PUSH
43901: EMPTY
43902: LIST
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 3
43910: PUSH
43911: LD_INT 55
43913: PUSH
43914: EMPTY
43915: LIST
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PPUSH
43925: CALL_OW 72
43929: IFFALSE 44037
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43931: LD_ADDR_VAR 0 18
43935: PUSH
43936: LD_VAR 0 6
43940: PPUSH
43941: LD_INT 3
43943: PUSH
43944: LD_INT 60
43946: PUSH
43947: EMPTY
43948: LIST
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 3
43956: PUSH
43957: LD_INT 55
43959: PUSH
43960: EMPTY
43961: LIST
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PPUSH
43971: CALL_OW 72
43975: PUSH
43976: LD_INT 1
43978: ARRAY
43979: ST_TO_ADDR
// if IsInUnit ( driver ) then
43980: LD_VAR 0 18
43984: PPUSH
43985: CALL_OW 310
43989: IFFALSE 44000
// ComExit ( driver ) ;
43991: LD_VAR 0 18
43995: PPUSH
43996: CALL 69381 0 1
// AddComEnterUnit ( driver , tmp ) ;
44000: LD_VAR 0 18
44004: PPUSH
44005: LD_VAR 0 13
44009: PPUSH
44010: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44014: LD_VAR 0 18
44018: PPUSH
44019: LD_VAR 0 7
44023: PPUSH
44024: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44028: LD_VAR 0 18
44032: PPUSH
44033: CALL_OW 181
// end ; continue ;
44037: GO 43689
// end ; if not cleaners or not tmp in cleaners then
44039: LD_VAR 0 6
44043: NOT
44044: PUSH
44045: LD_VAR 0 13
44049: PUSH
44050: LD_VAR 0 6
44054: IN
44055: NOT
44056: OR
44057: IFFALSE 44364
// begin if dep then
44059: LD_VAR 0 17
44063: IFFALSE 44199
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44065: LD_ADDR_VAR 0 16
44069: PUSH
44070: LD_VAR 0 17
44074: PUSH
44075: LD_INT 1
44077: ARRAY
44078: PPUSH
44079: CALL_OW 250
44083: PPUSH
44084: LD_VAR 0 17
44088: PUSH
44089: LD_INT 1
44091: ARRAY
44092: PPUSH
44093: CALL_OW 254
44097: PPUSH
44098: LD_INT 5
44100: PPUSH
44101: CALL_OW 272
44105: PUSH
44106: LD_VAR 0 17
44110: PUSH
44111: LD_INT 1
44113: ARRAY
44114: PPUSH
44115: CALL_OW 251
44119: PPUSH
44120: LD_VAR 0 17
44124: PUSH
44125: LD_INT 1
44127: ARRAY
44128: PPUSH
44129: CALL_OW 254
44133: PPUSH
44134: LD_INT 5
44136: PPUSH
44137: CALL_OW 273
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44146: LD_VAR 0 16
44150: PUSH
44151: LD_INT 1
44153: ARRAY
44154: PPUSH
44155: LD_VAR 0 16
44159: PUSH
44160: LD_INT 2
44162: ARRAY
44163: PPUSH
44164: CALL_OW 488
44168: IFFALSE 44199
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44170: LD_VAR 0 13
44174: PPUSH
44175: LD_VAR 0 16
44179: PUSH
44180: LD_INT 1
44182: ARRAY
44183: PPUSH
44184: LD_VAR 0 16
44188: PUSH
44189: LD_INT 2
44191: ARRAY
44192: PPUSH
44193: CALL_OW 111
// continue ;
44197: GO 43689
// end ; end ; r := GetDir ( tmp ) ;
44199: LD_ADDR_VAR 0 15
44203: PUSH
44204: LD_VAR 0 13
44208: PPUSH
44209: CALL_OW 254
44213: ST_TO_ADDR
// if r = 5 then
44214: LD_VAR 0 15
44218: PUSH
44219: LD_INT 5
44221: EQUAL
44222: IFFALSE 44232
// r := 0 ;
44224: LD_ADDR_VAR 0 15
44228: PUSH
44229: LD_INT 0
44231: ST_TO_ADDR
// for j = r to 5 do
44232: LD_ADDR_VAR 0 10
44236: PUSH
44237: DOUBLE
44238: LD_VAR 0 15
44242: DEC
44243: ST_TO_ADDR
44244: LD_INT 5
44246: PUSH
44247: FOR_TO
44248: IFFALSE 44362
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44250: LD_ADDR_VAR 0 11
44254: PUSH
44255: LD_VAR 0 13
44259: PPUSH
44260: CALL_OW 250
44264: PPUSH
44265: LD_VAR 0 10
44269: PPUSH
44270: LD_INT 2
44272: PPUSH
44273: CALL_OW 272
44277: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44278: LD_ADDR_VAR 0 12
44282: PUSH
44283: LD_VAR 0 13
44287: PPUSH
44288: CALL_OW 251
44292: PPUSH
44293: LD_VAR 0 10
44297: PPUSH
44298: LD_INT 2
44300: PPUSH
44301: CALL_OW 273
44305: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44306: LD_VAR 0 11
44310: PPUSH
44311: LD_VAR 0 12
44315: PPUSH
44316: CALL_OW 488
44320: PUSH
44321: LD_VAR 0 11
44325: PPUSH
44326: LD_VAR 0 12
44330: PPUSH
44331: CALL_OW 428
44335: NOT
44336: AND
44337: IFFALSE 44360
// begin ComMoveXY ( tmp , _x , _y ) ;
44339: LD_VAR 0 13
44343: PPUSH
44344: LD_VAR 0 11
44348: PPUSH
44349: LD_VAR 0 12
44353: PPUSH
44354: CALL_OW 111
// break ;
44358: GO 44362
// end ; end ;
44360: GO 44247
44362: POP
44363: POP
// end ; end ;
44364: GO 43689
44366: POP
44367: POP
// end ;
44368: LD_VAR 0 8
44372: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44373: LD_INT 0
44375: PPUSH
// result := true ;
44376: LD_ADDR_VAR 0 3
44380: PUSH
44381: LD_INT 1
44383: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44384: LD_VAR 0 2
44388: PUSH
44389: LD_INT 24
44391: DOUBLE
44392: EQUAL
44393: IFTRUE 44403
44395: LD_INT 33
44397: DOUBLE
44398: EQUAL
44399: IFTRUE 44403
44401: GO 44428
44403: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44404: LD_ADDR_VAR 0 3
44408: PUSH
44409: LD_INT 32
44411: PPUSH
44412: LD_VAR 0 1
44416: PPUSH
44417: CALL_OW 321
44421: PUSH
44422: LD_INT 2
44424: EQUAL
44425: ST_TO_ADDR
44426: GO 44744
44428: LD_INT 20
44430: DOUBLE
44431: EQUAL
44432: IFTRUE 44436
44434: GO 44461
44436: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44437: LD_ADDR_VAR 0 3
44441: PUSH
44442: LD_INT 6
44444: PPUSH
44445: LD_VAR 0 1
44449: PPUSH
44450: CALL_OW 321
44454: PUSH
44455: LD_INT 2
44457: EQUAL
44458: ST_TO_ADDR
44459: GO 44744
44461: LD_INT 22
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44475
44467: LD_INT 36
44469: DOUBLE
44470: EQUAL
44471: IFTRUE 44475
44473: GO 44500
44475: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44476: LD_ADDR_VAR 0 3
44480: PUSH
44481: LD_INT 15
44483: PPUSH
44484: LD_VAR 0 1
44488: PPUSH
44489: CALL_OW 321
44493: PUSH
44494: LD_INT 2
44496: EQUAL
44497: ST_TO_ADDR
44498: GO 44744
44500: LD_INT 30
44502: DOUBLE
44503: EQUAL
44504: IFTRUE 44508
44506: GO 44533
44508: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44509: LD_ADDR_VAR 0 3
44513: PUSH
44514: LD_INT 20
44516: PPUSH
44517: LD_VAR 0 1
44521: PPUSH
44522: CALL_OW 321
44526: PUSH
44527: LD_INT 2
44529: EQUAL
44530: ST_TO_ADDR
44531: GO 44744
44533: LD_INT 28
44535: DOUBLE
44536: EQUAL
44537: IFTRUE 44547
44539: LD_INT 21
44541: DOUBLE
44542: EQUAL
44543: IFTRUE 44547
44545: GO 44572
44547: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44548: LD_ADDR_VAR 0 3
44552: PUSH
44553: LD_INT 21
44555: PPUSH
44556: LD_VAR 0 1
44560: PPUSH
44561: CALL_OW 321
44565: PUSH
44566: LD_INT 2
44568: EQUAL
44569: ST_TO_ADDR
44570: GO 44744
44572: LD_INT 16
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44580
44578: GO 44605
44580: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: LD_INT 84
44588: PPUSH
44589: LD_VAR 0 1
44593: PPUSH
44594: CALL_OW 321
44598: PUSH
44599: LD_INT 2
44601: EQUAL
44602: ST_TO_ADDR
44603: GO 44744
44605: LD_INT 19
44607: DOUBLE
44608: EQUAL
44609: IFTRUE 44619
44611: LD_INT 23
44613: DOUBLE
44614: EQUAL
44615: IFTRUE 44619
44617: GO 44644
44619: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44620: LD_ADDR_VAR 0 3
44624: PUSH
44625: LD_INT 83
44627: PPUSH
44628: LD_VAR 0 1
44632: PPUSH
44633: CALL_OW 321
44637: PUSH
44638: LD_INT 2
44640: EQUAL
44641: ST_TO_ADDR
44642: GO 44744
44644: LD_INT 17
44646: DOUBLE
44647: EQUAL
44648: IFTRUE 44652
44650: GO 44677
44652: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44653: LD_ADDR_VAR 0 3
44657: PUSH
44658: LD_INT 39
44660: PPUSH
44661: LD_VAR 0 1
44665: PPUSH
44666: CALL_OW 321
44670: PUSH
44671: LD_INT 2
44673: EQUAL
44674: ST_TO_ADDR
44675: GO 44744
44677: LD_INT 18
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44685
44683: GO 44710
44685: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44686: LD_ADDR_VAR 0 3
44690: PUSH
44691: LD_INT 40
44693: PPUSH
44694: LD_VAR 0 1
44698: PPUSH
44699: CALL_OW 321
44703: PUSH
44704: LD_INT 2
44706: EQUAL
44707: ST_TO_ADDR
44708: GO 44744
44710: LD_INT 27
44712: DOUBLE
44713: EQUAL
44714: IFTRUE 44718
44716: GO 44743
44718: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44719: LD_ADDR_VAR 0 3
44723: PUSH
44724: LD_INT 35
44726: PPUSH
44727: LD_VAR 0 1
44731: PPUSH
44732: CALL_OW 321
44736: PUSH
44737: LD_INT 2
44739: EQUAL
44740: ST_TO_ADDR
44741: GO 44744
44743: POP
// end ;
44744: LD_VAR 0 3
44748: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44749: LD_INT 0
44751: PPUSH
44752: PPUSH
44753: PPUSH
44754: PPUSH
44755: PPUSH
44756: PPUSH
44757: PPUSH
44758: PPUSH
44759: PPUSH
44760: PPUSH
44761: PPUSH
// result := false ;
44762: LD_ADDR_VAR 0 6
44766: PUSH
44767: LD_INT 0
44769: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44770: LD_VAR 0 1
44774: NOT
44775: PUSH
44776: LD_VAR 0 1
44780: PPUSH
44781: CALL_OW 266
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: IN
44796: NOT
44797: OR
44798: PUSH
44799: LD_VAR 0 2
44803: NOT
44804: OR
44805: PUSH
44806: LD_VAR 0 5
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: LD_INT 3
44822: PUSH
44823: LD_INT 4
44825: PUSH
44826: LD_INT 5
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: IN
44837: NOT
44838: OR
44839: PUSH
44840: LD_VAR 0 3
44844: PPUSH
44845: LD_VAR 0 4
44849: PPUSH
44850: CALL_OW 488
44854: NOT
44855: OR
44856: IFFALSE 44860
// exit ;
44858: GO 45596
// side := GetSide ( depot ) ;
44860: LD_ADDR_VAR 0 9
44864: PUSH
44865: LD_VAR 0 1
44869: PPUSH
44870: CALL_OW 255
44874: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44875: LD_VAR 0 9
44879: PPUSH
44880: LD_VAR 0 2
44884: PPUSH
44885: CALL 44373 0 2
44889: NOT
44890: IFFALSE 44894
// exit ;
44892: GO 45596
// pom := GetBase ( depot ) ;
44894: LD_ADDR_VAR 0 10
44898: PUSH
44899: LD_VAR 0 1
44903: PPUSH
44904: CALL_OW 274
44908: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44909: LD_ADDR_VAR 0 11
44913: PUSH
44914: LD_VAR 0 2
44918: PPUSH
44919: LD_VAR 0 1
44923: PPUSH
44924: CALL_OW 248
44928: PPUSH
44929: CALL_OW 450
44933: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44934: LD_VAR 0 10
44938: PPUSH
44939: LD_INT 1
44941: PPUSH
44942: CALL_OW 275
44946: PUSH
44947: LD_VAR 0 11
44951: PUSH
44952: LD_INT 1
44954: ARRAY
44955: GREATEREQUAL
44956: PUSH
44957: LD_VAR 0 10
44961: PPUSH
44962: LD_INT 2
44964: PPUSH
44965: CALL_OW 275
44969: PUSH
44970: LD_VAR 0 11
44974: PUSH
44975: LD_INT 2
44977: ARRAY
44978: GREATEREQUAL
44979: AND
44980: PUSH
44981: LD_VAR 0 10
44985: PPUSH
44986: LD_INT 3
44988: PPUSH
44989: CALL_OW 275
44993: PUSH
44994: LD_VAR 0 11
44998: PUSH
44999: LD_INT 3
45001: ARRAY
45002: GREATEREQUAL
45003: AND
45004: NOT
45005: IFFALSE 45009
// exit ;
45007: GO 45596
// if GetBType ( depot ) = b_depot then
45009: LD_VAR 0 1
45013: PPUSH
45014: CALL_OW 266
45018: PUSH
45019: LD_INT 0
45021: EQUAL
45022: IFFALSE 45034
// dist := 28 else
45024: LD_ADDR_VAR 0 14
45028: PUSH
45029: LD_INT 28
45031: ST_TO_ADDR
45032: GO 45042
// dist := 36 ;
45034: LD_ADDR_VAR 0 14
45038: PUSH
45039: LD_INT 36
45041: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45042: LD_VAR 0 1
45046: PPUSH
45047: LD_VAR 0 3
45051: PPUSH
45052: LD_VAR 0 4
45056: PPUSH
45057: CALL_OW 297
45061: PUSH
45062: LD_VAR 0 14
45066: GREATER
45067: IFFALSE 45071
// exit ;
45069: GO 45596
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45071: LD_ADDR_VAR 0 12
45075: PUSH
45076: LD_VAR 0 2
45080: PPUSH
45081: LD_VAR 0 3
45085: PPUSH
45086: LD_VAR 0 4
45090: PPUSH
45091: LD_VAR 0 5
45095: PPUSH
45096: LD_VAR 0 1
45100: PPUSH
45101: CALL_OW 248
45105: PPUSH
45106: LD_INT 0
45108: PPUSH
45109: CALL 45601 0 6
45113: ST_TO_ADDR
// if not hexes then
45114: LD_VAR 0 12
45118: NOT
45119: IFFALSE 45123
// exit ;
45121: GO 45596
// hex := GetHexInfo ( x , y ) ;
45123: LD_ADDR_VAR 0 15
45127: PUSH
45128: LD_VAR 0 3
45132: PPUSH
45133: LD_VAR 0 4
45137: PPUSH
45138: CALL_OW 546
45142: ST_TO_ADDR
// if hex [ 1 ] then
45143: LD_VAR 0 15
45147: PUSH
45148: LD_INT 1
45150: ARRAY
45151: IFFALSE 45155
// exit ;
45153: GO 45596
// height := hex [ 2 ] ;
45155: LD_ADDR_VAR 0 13
45159: PUSH
45160: LD_VAR 0 15
45164: PUSH
45165: LD_INT 2
45167: ARRAY
45168: ST_TO_ADDR
// for i = 1 to hexes do
45169: LD_ADDR_VAR 0 7
45173: PUSH
45174: DOUBLE
45175: LD_INT 1
45177: DEC
45178: ST_TO_ADDR
45179: LD_VAR 0 12
45183: PUSH
45184: FOR_TO
45185: IFFALSE 45515
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45187: LD_VAR 0 12
45191: PUSH
45192: LD_VAR 0 7
45196: ARRAY
45197: PUSH
45198: LD_INT 1
45200: ARRAY
45201: PPUSH
45202: LD_VAR 0 12
45206: PUSH
45207: LD_VAR 0 7
45211: ARRAY
45212: PUSH
45213: LD_INT 2
45215: ARRAY
45216: PPUSH
45217: CALL_OW 488
45221: NOT
45222: PUSH
45223: LD_VAR 0 12
45227: PUSH
45228: LD_VAR 0 7
45232: ARRAY
45233: PUSH
45234: LD_INT 1
45236: ARRAY
45237: PPUSH
45238: LD_VAR 0 12
45242: PUSH
45243: LD_VAR 0 7
45247: ARRAY
45248: PUSH
45249: LD_INT 2
45251: ARRAY
45252: PPUSH
45253: CALL_OW 428
45257: PUSH
45258: LD_INT 0
45260: GREATER
45261: OR
45262: PUSH
45263: LD_VAR 0 12
45267: PUSH
45268: LD_VAR 0 7
45272: ARRAY
45273: PUSH
45274: LD_INT 1
45276: ARRAY
45277: PPUSH
45278: LD_VAR 0 12
45282: PUSH
45283: LD_VAR 0 7
45287: ARRAY
45288: PUSH
45289: LD_INT 2
45291: ARRAY
45292: PPUSH
45293: CALL_OW 351
45297: OR
45298: IFFALSE 45304
// exit ;
45300: POP
45301: POP
45302: GO 45596
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45304: LD_ADDR_VAR 0 8
45308: PUSH
45309: LD_VAR 0 12
45313: PUSH
45314: LD_VAR 0 7
45318: ARRAY
45319: PUSH
45320: LD_INT 1
45322: ARRAY
45323: PPUSH
45324: LD_VAR 0 12
45328: PUSH
45329: LD_VAR 0 7
45333: ARRAY
45334: PUSH
45335: LD_INT 2
45337: ARRAY
45338: PPUSH
45339: CALL_OW 546
45343: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45344: LD_VAR 0 8
45348: PUSH
45349: LD_INT 1
45351: ARRAY
45352: PUSH
45353: LD_VAR 0 8
45357: PUSH
45358: LD_INT 2
45360: ARRAY
45361: PUSH
45362: LD_VAR 0 13
45366: PUSH
45367: LD_INT 2
45369: PLUS
45370: GREATER
45371: OR
45372: PUSH
45373: LD_VAR 0 8
45377: PUSH
45378: LD_INT 2
45380: ARRAY
45381: PUSH
45382: LD_VAR 0 13
45386: PUSH
45387: LD_INT 2
45389: MINUS
45390: LESS
45391: OR
45392: PUSH
45393: LD_VAR 0 8
45397: PUSH
45398: LD_INT 3
45400: ARRAY
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 8
45407: PUSH
45408: LD_INT 9
45410: PUSH
45411: LD_INT 10
45413: PUSH
45414: LD_INT 11
45416: PUSH
45417: LD_INT 12
45419: PUSH
45420: LD_INT 13
45422: PUSH
45423: LD_INT 16
45425: PUSH
45426: LD_INT 17
45428: PUSH
45429: LD_INT 18
45431: PUSH
45432: LD_INT 19
45434: PUSH
45435: LD_INT 20
45437: PUSH
45438: LD_INT 21
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: IN
45456: NOT
45457: OR
45458: PUSH
45459: LD_VAR 0 8
45463: PUSH
45464: LD_INT 5
45466: ARRAY
45467: NOT
45468: OR
45469: PUSH
45470: LD_VAR 0 8
45474: PUSH
45475: LD_INT 6
45477: ARRAY
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: LD_INT 7
45487: PUSH
45488: LD_INT 9
45490: PUSH
45491: LD_INT 10
45493: PUSH
45494: LD_INT 11
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: IN
45505: NOT
45506: OR
45507: IFFALSE 45513
// exit ;
45509: POP
45510: POP
45511: GO 45596
// end ;
45513: GO 45184
45515: POP
45516: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45517: LD_VAR 0 9
45521: PPUSH
45522: LD_VAR 0 3
45526: PPUSH
45527: LD_VAR 0 4
45531: PPUSH
45532: LD_INT 20
45534: PPUSH
45535: CALL 37548 0 4
45539: PUSH
45540: LD_INT 4
45542: ARRAY
45543: IFFALSE 45547
// exit ;
45545: GO 45596
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45547: LD_VAR 0 2
45551: PUSH
45552: LD_INT 29
45554: PUSH
45555: LD_INT 30
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: IN
45562: PUSH
45563: LD_VAR 0 3
45567: PPUSH
45568: LD_VAR 0 4
45572: PPUSH
45573: LD_VAR 0 9
45577: PPUSH
45578: CALL_OW 440
45582: NOT
45583: AND
45584: IFFALSE 45588
// exit ;
45586: GO 45596
// result := true ;
45588: LD_ADDR_VAR 0 6
45592: PUSH
45593: LD_INT 1
45595: ST_TO_ADDR
// end ;
45596: LD_VAR 0 6
45600: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45601: LD_INT 0
45603: PPUSH
45604: PPUSH
45605: PPUSH
45606: PPUSH
45607: PPUSH
45608: PPUSH
45609: PPUSH
45610: PPUSH
45611: PPUSH
45612: PPUSH
45613: PPUSH
45614: PPUSH
45615: PPUSH
45616: PPUSH
45617: PPUSH
45618: PPUSH
45619: PPUSH
45620: PPUSH
45621: PPUSH
45622: PPUSH
45623: PPUSH
45624: PPUSH
45625: PPUSH
45626: PPUSH
45627: PPUSH
45628: PPUSH
45629: PPUSH
45630: PPUSH
45631: PPUSH
45632: PPUSH
45633: PPUSH
45634: PPUSH
45635: PPUSH
45636: PPUSH
45637: PPUSH
45638: PPUSH
45639: PPUSH
45640: PPUSH
45641: PPUSH
45642: PPUSH
45643: PPUSH
45644: PPUSH
45645: PPUSH
45646: PPUSH
45647: PPUSH
45648: PPUSH
45649: PPUSH
45650: PPUSH
45651: PPUSH
45652: PPUSH
45653: PPUSH
45654: PPUSH
45655: PPUSH
45656: PPUSH
45657: PPUSH
45658: PPUSH
45659: PPUSH
45660: PPUSH
// result = [ ] ;
45661: LD_ADDR_VAR 0 7
45665: PUSH
45666: EMPTY
45667: ST_TO_ADDR
// temp_list = [ ] ;
45668: LD_ADDR_VAR 0 9
45672: PUSH
45673: EMPTY
45674: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45675: LD_VAR 0 4
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: LD_INT 3
45691: PUSH
45692: LD_INT 4
45694: PUSH
45695: LD_INT 5
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: IN
45706: NOT
45707: PUSH
45708: LD_VAR 0 1
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: IN
45723: PUSH
45724: LD_VAR 0 5
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: LD_INT 3
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: IN
45743: NOT
45744: AND
45745: OR
45746: IFFALSE 45750
// exit ;
45748: GO 64141
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45750: LD_VAR 0 1
45754: PUSH
45755: LD_INT 6
45757: PUSH
45758: LD_INT 7
45760: PUSH
45761: LD_INT 8
45763: PUSH
45764: LD_INT 13
45766: PUSH
45767: LD_INT 12
45769: PUSH
45770: LD_INT 15
45772: PUSH
45773: LD_INT 11
45775: PUSH
45776: LD_INT 14
45778: PUSH
45779: LD_INT 10
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: IN
45793: IFFALSE 45803
// btype = b_lab ;
45795: LD_ADDR_VAR 0 1
45799: PUSH
45800: LD_INT 6
45802: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45803: LD_VAR 0 6
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: IN
45822: NOT
45823: PUSH
45824: LD_VAR 0 1
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: LD_INT 6
45843: PUSH
45844: LD_INT 36
45846: PUSH
45847: LD_INT 4
45849: PUSH
45850: LD_INT 5
45852: PUSH
45853: LD_INT 31
45855: PUSH
45856: LD_INT 32
45858: PUSH
45859: LD_INT 33
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: IN
45875: NOT
45876: PUSH
45877: LD_VAR 0 6
45881: PUSH
45882: LD_INT 1
45884: EQUAL
45885: AND
45886: OR
45887: PUSH
45888: LD_VAR 0 1
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: IN
45903: NOT
45904: PUSH
45905: LD_VAR 0 6
45909: PUSH
45910: LD_INT 2
45912: EQUAL
45913: AND
45914: OR
45915: IFFALSE 45925
// mode = 0 ;
45917: LD_ADDR_VAR 0 6
45921: PUSH
45922: LD_INT 0
45924: ST_TO_ADDR
// case mode of 0 :
45925: LD_VAR 0 6
45929: PUSH
45930: LD_INT 0
45932: DOUBLE
45933: EQUAL
45934: IFTRUE 45938
45936: GO 57391
45938: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45939: LD_ADDR_VAR 0 11
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 3
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 3
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46132: LD_ADDR_VAR 0 12
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 3
46289: NEG
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 3
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46328: LD_ADDR_VAR 0 13
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 3
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 3
46499: NEG
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46527: LD_ADDR_VAR 0 14
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 3
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46723: LD_ADDR_VAR 0 15
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46916: LD_ADDR_VAR 0 16
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 3
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47109: LD_ADDR_VAR 0 17
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47339: LD_ADDR_VAR 0 18
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47569: LD_ADDR_VAR 0 19
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47799: LD_ADDR_VAR 0 20
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 2
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48029: LD_ADDR_VAR 0 21
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48259: LD_ADDR_VAR 0 22
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48489: LD_ADDR_VAR 0 23
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 3
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 3
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48769: LD_ADDR_VAR 0 24
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 2
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49045: LD_ADDR_VAR 0 25
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49319: LD_ADDR_VAR 0 26
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: LD_INT 3
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49595: LD_ADDR_VAR 0 27
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 3
49828: NEG
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49875: LD_ADDR_VAR 0 28
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: LD_INT 3
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 3
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 3
50122: NEG
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50157: LD_ADDR_VAR 0 29
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: LD_INT 3
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: LD_INT 3
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50436: LD_ADDR_VAR 0 30
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 3
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50714: LD_ADDR_VAR 0 31
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: NEG
50892: PUSH
50893: LD_INT 2
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: LD_INT 3
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 3
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50992: LD_ADDR_VAR 0 32
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 3
51235: NEG
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51270: LD_ADDR_VAR 0 33
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: NEG
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: LD_INT 3
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 3
51514: NEG
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51549: LD_ADDR_VAR 0 34
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 3
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: LD_INT 3
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51829: LD_ADDR_VAR 0 35
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51941: LD_ADDR_VAR 0 36
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52053: LD_ADDR_VAR 0 37
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52165: LD_ADDR_VAR 0 38
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52277: LD_ADDR_VAR 0 39
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52389: LD_ADDR_VAR 0 40
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52501: LD_ADDR_VAR 0 41
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: LD_INT 3
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 3
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: NEG
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 3
52798: NEG
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 3
52810: NEG
52811: PUSH
52812: LD_INT 3
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52851: LD_ADDR_VAR 0 42
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: LD_INT 3
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 3
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 3
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 3
53148: NEG
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: NEG
53161: PUSH
53162: LD_INT 3
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53201: LD_ADDR_VAR 0 43
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 3
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 3
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53549: LD_ADDR_VAR 0 44
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 3
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 3
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 3
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 3
53823: NEG
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 3
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 3
53846: NEG
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: LD_INT 3
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53899: LD_ADDR_VAR 0 45
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 3
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 3
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: LD_INT 3
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: LD_INT 3
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 3
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 3
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 3
54208: NEG
54209: PUSH
54210: LD_INT 3
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54249: LD_ADDR_VAR 0 46
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: LD_INT 2
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 3
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 3
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 3
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 3
54545: NEG
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 3
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54597: LD_ADDR_VAR 0 47
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54748: LD_ADDR_VAR 0 48
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54895: LD_ADDR_VAR 0 49
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55039: LD_ADDR_VAR 0 50
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55183: LD_ADDR_VAR 0 51
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55330: LD_ADDR_VAR 0 52
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55481: LD_ADDR_VAR 0 53
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: NEG
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55711: LD_ADDR_VAR 0 54
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55941: LD_ADDR_VAR 0 55
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56171: LD_ADDR_VAR 0 56
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 2
56370: NEG
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56401: LD_ADDR_VAR 0 57
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56631: LD_ADDR_VAR 0 58
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56861: LD_ADDR_VAR 0 59
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56949: LD_ADDR_VAR 0 60
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57037: LD_ADDR_VAR 0 61
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57125: LD_ADDR_VAR 0 62
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57213: LD_ADDR_VAR 0 63
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57301: LD_ADDR_VAR 0 64
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: ST_TO_ADDR
// end ; 1 :
57389: GO 63286
57391: LD_INT 1
57393: DOUBLE
57394: EQUAL
57395: IFTRUE 57399
57397: GO 60022
57399: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57400: LD_ADDR_VAR 0 11
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 3
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57444: LD_ADDR_VAR 0 12
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57485: LD_ADDR_VAR 0 13
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57525: LD_ADDR_VAR 0 14
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57566: LD_ADDR_VAR 0 15
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 3
57584: NEG
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: LIST
57609: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57610: LD_ADDR_VAR 0 16
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: LD_INT 3
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: LIST
57655: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57656: LD_ADDR_VAR 0 17
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 3
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: LIST
57699: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57700: LD_ADDR_VAR 0 18
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 3
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57741: LD_ADDR_VAR 0 19
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: LD_INT 2
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57781: LD_ADDR_VAR 0 20
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 3
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: LIST
57821: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57822: LD_ADDR_VAR 0 21
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 3
57840: NEG
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 3
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57866: LD_ADDR_VAR 0 22
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 3
57885: NEG
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57912: LD_ADDR_VAR 0 23
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 3
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 4
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: LD_INT 3
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57956: LD_ADDR_VAR 0 24
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 4
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57997: LD_ADDR_VAR 0 25
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 4
58014: PUSH
58015: LD_INT 3
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: LD_INT 4
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58037: LD_ADDR_VAR 0 26
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 4
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58078: LD_ADDR_VAR 0 27
58082: PUSH
58083: LD_INT 3
58085: NEG
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 4
58107: NEG
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58122: LD_ADDR_VAR 0 28
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: LD_INT 3
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: LD_INT 4
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 4
58153: NEG
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58168: LD_ADDR_VAR 0 29
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 3
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 2
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: LD_INT 4
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: LD_INT 4
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 3
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: LD_INT 5
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 5
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 4
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 6
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 6
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 5
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58323: LD_ADDR_VAR 0 30
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 3
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 4
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 4
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 4
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 5
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 5
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 5
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 6
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 6
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58466: LD_ADDR_VAR 0 31
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 4
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 4
58513: PUSH
58514: LD_INT 4
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: LD_INT 4
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 5
58533: PUSH
58534: LD_INT 4
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 5
58543: PUSH
58544: LD_INT 5
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 4
58553: PUSH
58554: LD_INT 5
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 6
58563: PUSH
58564: LD_INT 5
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 6
58573: PUSH
58574: LD_INT 6
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 5
58583: PUSH
58584: LD_INT 6
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58605: LD_ADDR_VAR 0 32
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 4
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 4
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 3
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 5
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 5
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 4
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 6
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 6
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 5
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58748: LD_ADDR_VAR 0 33
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 3
58777: NEG
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 4
58800: NEG
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 4
58811: NEG
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 5
58834: NEG
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 5
58845: NEG
58846: PUSH
58847: LD_INT 1
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 5
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 6
58868: NEG
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 6
58879: NEG
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58903: LD_ADDR_VAR 0 34
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: NEG
58947: PUSH
58948: LD_INT 4
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 4
58958: NEG
58959: PUSH
58960: LD_INT 3
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 4
58970: NEG
58971: PUSH
58972: LD_INT 4
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 4
58982: NEG
58983: PUSH
58984: LD_INT 5
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 5
58994: NEG
58995: PUSH
58996: LD_INT 4
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 5
59006: NEG
59007: PUSH
59008: LD_INT 5
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 5
59018: NEG
59019: PUSH
59020: LD_INT 6
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 6
59030: NEG
59031: PUSH
59032: LD_INT 5
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 6
59042: NEG
59043: PUSH
59044: LD_INT 6
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59066: LD_ADDR_VAR 0 41
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59110: LD_ADDR_VAR 0 42
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59151: LD_ADDR_VAR 0 43
59155: PUSH
59156: LD_INT 2
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: LD_INT 3
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: LIST
59190: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59191: LD_ADDR_VAR 0 44
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: LD_INT 3
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59232: LD_ADDR_VAR 0 45
59236: PUSH
59237: LD_INT 2
59239: NEG
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: NEG
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 3
59261: NEG
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: LIST
59275: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59276: LD_ADDR_VAR 0 46
59280: PUSH
59281: LD_INT 2
59283: NEG
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 2
59295: NEG
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: NEG
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59322: LD_ADDR_VAR 0 47
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: LD_INT 3
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59355: LD_ADDR_VAR 0 48
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59386: LD_ADDR_VAR 0 49
59390: PUSH
59391: LD_INT 3
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 3
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59415: LD_ADDR_VAR 0 50
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59444: LD_ADDR_VAR 0 51
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59475: LD_ADDR_VAR 0 52
59479: PUSH
59480: LD_INT 3
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59508: LD_ADDR_VAR 0 53
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 3
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: LIST
59551: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59552: LD_ADDR_VAR 0 54
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 3
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: LIST
59592: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59593: LD_ADDR_VAR 0 55
59597: PUSH
59598: LD_INT 3
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: LD_INT 3
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59633: LD_ADDR_VAR 0 56
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: LIST
59673: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59674: LD_ADDR_VAR 0 57
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 3
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59718: LD_ADDR_VAR 0 58
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: NEG
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: LIST
59763: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59764: LD_ADDR_VAR 0 59
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 2
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: LIST
59807: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59808: LD_ADDR_VAR 0 60
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59849: LD_ADDR_VAR 0 61
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59889: LD_ADDR_VAR 0 62
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59930: LD_ADDR_VAR 0 63
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: LIST
59973: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59974: LD_ADDR_VAR 0 64
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: ST_TO_ADDR
// end ; 2 :
60020: GO 63286
60022: LD_INT 2
60024: DOUBLE
60025: EQUAL
60026: IFTRUE 60030
60028: GO 63285
60030: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60031: LD_ADDR_VAR 0 29
60035: PUSH
60036: LD_INT 4
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 4
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 5
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 5
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 4
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 5
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: LD_INT 3
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 4
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 4
60161: PUSH
60162: LD_INT 4
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 3
60171: PUSH
60172: LD_INT 4
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: LD_INT 4
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 4
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: LD_INT 4
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: LD_INT 5
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_INT 5
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: LD_INT 4
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: LD_INT 5
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 3
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 4
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 4
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 4
60416: NEG
60417: PUSH
60418: LD_INT 4
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 4
60428: NEG
60429: PUSH
60430: LD_INT 5
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 3
60440: NEG
60441: PUSH
60442: LD_INT 4
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 4
60464: NEG
60465: PUSH
60466: LD_INT 3
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 5
60476: NEG
60477: PUSH
60478: LD_INT 4
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 5
60488: NEG
60489: PUSH
60490: LD_INT 5
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: NEG
60501: PUSH
60502: LD_INT 5
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 5
60512: NEG
60513: PUSH
60514: LD_INT 3
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60569: LD_ADDR_VAR 0 30
60573: PUSH
60574: LD_INT 4
60576: PUSH
60577: LD_INT 4
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 4
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 5
60596: PUSH
60597: LD_INT 4
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 5
60606: PUSH
60607: LD_INT 5
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 4
60616: PUSH
60617: LD_INT 5
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 3
60626: PUSH
60627: LD_INT 4
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: PUSH
60637: LD_INT 3
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 5
60646: PUSH
60647: LD_INT 3
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: LD_INT 5
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 4
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 4
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 2
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: LD_INT 4
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 4
60759: NEG
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 4
60770: NEG
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: NEG
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 4
60804: NEG
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 5
60815: NEG
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 5
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 5
60838: NEG
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 3
60861: NEG
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 3
60873: NEG
60874: PUSH
60875: LD_INT 4
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: LD_INT 2
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 3
60909: NEG
60910: PUSH
60911: LD_INT 2
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 4
60921: NEG
60922: PUSH
60923: LD_INT 3
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 4
60933: NEG
60934: PUSH
60935: LD_INT 4
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: LD_INT 4
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 4
60957: NEG
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: LD_INT 4
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 5
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: LD_INT 4
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 3
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: LD_INT 5
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: LD_INT 5
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61116: LD_ADDR_VAR 0 31
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: LD_INT 4
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 5
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 5
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 4
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 3
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: LD_INT 5
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: LD_INT 3
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 3
61216: NEG
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 3
61227: NEG
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 2
61250: NEG
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 3
61261: NEG
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 4
61272: NEG
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 4
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 4
61295: NEG
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 4
61318: NEG
61319: PUSH
61320: LD_INT 4
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 4
61330: NEG
61331: PUSH
61332: LD_INT 5
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 3
61342: NEG
61343: PUSH
61344: LD_INT 4
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 3
61354: NEG
61355: PUSH
61356: LD_INT 3
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 4
61366: NEG
61367: PUSH
61368: LD_INT 3
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 5
61378: NEG
61379: PUSH
61380: LD_INT 4
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 5
61390: NEG
61391: PUSH
61392: LD_INT 5
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: NEG
61403: PUSH
61404: LD_INT 5
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 5
61414: NEG
61415: PUSH
61416: LD_INT 3
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: LD_INT 4
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: NEG
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: LD_INT 4
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: LD_INT 4
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 4
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 5
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 5
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 4
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 3
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 3
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 3
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 5
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61666: LD_ADDR_VAR 0 32
61670: PUSH
61671: LD_INT 4
61673: NEG
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 4
61684: NEG
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 3
61696: NEG
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 3
61707: NEG
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 4
61718: NEG
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 5
61729: NEG
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 5
61740: NEG
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 5
61752: NEG
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 3
61764: NEG
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 3
61775: NEG
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: LD_INT 4
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 2
61811: NEG
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 3
61823: NEG
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 4
61835: NEG
61836: PUSH
61837: LD_INT 3
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 4
61847: NEG
61848: PUSH
61849: LD_INT 4
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: LD_INT 4
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 4
61871: NEG
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 4
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 5
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: LD_INT 4
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 3
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 3
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: LD_INT 4
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: LD_INT 5
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: LD_INT 3
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: LD_INT 5
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 4
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 4
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 2
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 2
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: LD_INT 2
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 4
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 4
62078: PUSH
62079: LD_INT 4
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 4
62088: PUSH
62089: LD_INT 3
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 5
62098: PUSH
62099: LD_INT 4
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 5
62108: PUSH
62109: LD_INT 5
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 4
62118: PUSH
62119: LD_INT 5
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: LD_INT 4
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 3
62138: PUSH
62139: LD_INT 3
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 5
62148: PUSH
62149: LD_INT 3
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 3
62158: PUSH
62159: LD_INT 5
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62213: LD_ADDR_VAR 0 33
62217: PUSH
62218: LD_INT 4
62220: NEG
62221: PUSH
62222: LD_INT 4
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 4
62232: NEG
62233: PUSH
62234: LD_INT 5
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 3
62244: NEG
62245: PUSH
62246: LD_INT 4
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 3
62256: NEG
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 4
62268: NEG
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 5
62280: NEG
62281: PUSH
62282: LD_INT 4
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 5
62292: NEG
62293: PUSH
62294: LD_INT 5
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 3
62304: NEG
62305: PUSH
62306: LD_INT 5
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 5
62316: NEG
62317: PUSH
62318: LD_INT 3
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 3
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 4
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 3
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: LD_INT 2
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 2
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: LD_INT 4
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 2
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: LD_INT 4
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 4
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 4
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 5
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 5
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 4
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 3
62491: PUSH
62492: LD_INT 1
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 3
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 5
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: LD_INT 3
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 3
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 4
62543: PUSH
62544: LD_INT 3
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 4
62553: PUSH
62554: LD_INT 4
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: LD_INT 4
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 2
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: LD_INT 2
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 4
62593: PUSH
62594: LD_INT 2
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: LD_INT 4
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: LD_INT 4
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 4
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: PUSH
62644: LD_INT 5
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: LD_INT 5
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: LD_INT 4
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: LD_INT 3
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: LD_INT 5
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: LD_INT 3
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62751: LD_ADDR_VAR 0 34
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: LD_INT 4
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: LD_INT 5
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: LD_INT 4
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: LD_INT 3
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 3
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: LD_INT 4
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: NEG
62826: PUSH
62827: LD_INT 5
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: LD_INT 3
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: LD_INT 5
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 3
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 4
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 4
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 2
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 2
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 4
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 4
62953: PUSH
62954: LD_INT 4
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 4
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 5
62973: PUSH
62974: LD_INT 4
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 5
62983: PUSH
62984: LD_INT 5
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 4
62993: PUSH
62994: LD_INT 5
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 3
63003: PUSH
63004: LD_INT 4
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 3
63013: PUSH
63014: LD_INT 3
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 5
63023: PUSH
63024: LD_INT 3
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 3
63033: PUSH
63034: LD_INT 5
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 3
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: LD_INT 4
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: LD_INT 4
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 2
63115: PUSH
63116: LD_INT 4
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 4
63136: NEG
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 4
63147: NEG
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 3
63159: NEG
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 3
63170: NEG
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 4
63181: NEG
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 5
63192: NEG
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 5
63203: NEG
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 5
63215: NEG
63216: PUSH
63217: LD_INT 2
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 3
63227: NEG
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// end ; end ;
63283: GO 63286
63285: POP
// case btype of b_depot , b_warehouse :
63286: LD_VAR 0 1
63290: PUSH
63291: LD_INT 0
63293: DOUBLE
63294: EQUAL
63295: IFTRUE 63305
63297: LD_INT 1
63299: DOUBLE
63300: EQUAL
63301: IFTRUE 63305
63303: GO 63506
63305: POP
// case nation of nation_american :
63306: LD_VAR 0 5
63310: PUSH
63311: LD_INT 1
63313: DOUBLE
63314: EQUAL
63315: IFTRUE 63319
63317: GO 63375
63319: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63320: LD_ADDR_VAR 0 9
63324: PUSH
63325: LD_VAR 0 11
63329: PUSH
63330: LD_VAR 0 12
63334: PUSH
63335: LD_VAR 0 13
63339: PUSH
63340: LD_VAR 0 14
63344: PUSH
63345: LD_VAR 0 15
63349: PUSH
63350: LD_VAR 0 16
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: PUSH
63363: LD_VAR 0 4
63367: PUSH
63368: LD_INT 1
63370: PLUS
63371: ARRAY
63372: ST_TO_ADDR
63373: GO 63504
63375: LD_INT 2
63377: DOUBLE
63378: EQUAL
63379: IFTRUE 63383
63381: GO 63439
63383: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63384: LD_ADDR_VAR 0 9
63388: PUSH
63389: LD_VAR 0 17
63393: PUSH
63394: LD_VAR 0 18
63398: PUSH
63399: LD_VAR 0 19
63403: PUSH
63404: LD_VAR 0 20
63408: PUSH
63409: LD_VAR 0 21
63413: PUSH
63414: LD_VAR 0 22
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: PUSH
63427: LD_VAR 0 4
63431: PUSH
63432: LD_INT 1
63434: PLUS
63435: ARRAY
63436: ST_TO_ADDR
63437: GO 63504
63439: LD_INT 3
63441: DOUBLE
63442: EQUAL
63443: IFTRUE 63447
63445: GO 63503
63447: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63448: LD_ADDR_VAR 0 9
63452: PUSH
63453: LD_VAR 0 23
63457: PUSH
63458: LD_VAR 0 24
63462: PUSH
63463: LD_VAR 0 25
63467: PUSH
63468: LD_VAR 0 26
63472: PUSH
63473: LD_VAR 0 27
63477: PUSH
63478: LD_VAR 0 28
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: PUSH
63491: LD_VAR 0 4
63495: PUSH
63496: LD_INT 1
63498: PLUS
63499: ARRAY
63500: ST_TO_ADDR
63501: GO 63504
63503: POP
63504: GO 64059
63506: LD_INT 2
63508: DOUBLE
63509: EQUAL
63510: IFTRUE 63520
63512: LD_INT 3
63514: DOUBLE
63515: EQUAL
63516: IFTRUE 63520
63518: GO 63576
63520: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63521: LD_ADDR_VAR 0 9
63525: PUSH
63526: LD_VAR 0 29
63530: PUSH
63531: LD_VAR 0 30
63535: PUSH
63536: LD_VAR 0 31
63540: PUSH
63541: LD_VAR 0 32
63545: PUSH
63546: LD_VAR 0 33
63550: PUSH
63551: LD_VAR 0 34
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: PUSH
63564: LD_VAR 0 4
63568: PUSH
63569: LD_INT 1
63571: PLUS
63572: ARRAY
63573: ST_TO_ADDR
63574: GO 64059
63576: LD_INT 16
63578: DOUBLE
63579: EQUAL
63580: IFTRUE 63638
63582: LD_INT 17
63584: DOUBLE
63585: EQUAL
63586: IFTRUE 63638
63588: LD_INT 18
63590: DOUBLE
63591: EQUAL
63592: IFTRUE 63638
63594: LD_INT 19
63596: DOUBLE
63597: EQUAL
63598: IFTRUE 63638
63600: LD_INT 22
63602: DOUBLE
63603: EQUAL
63604: IFTRUE 63638
63606: LD_INT 20
63608: DOUBLE
63609: EQUAL
63610: IFTRUE 63638
63612: LD_INT 21
63614: DOUBLE
63615: EQUAL
63616: IFTRUE 63638
63618: LD_INT 23
63620: DOUBLE
63621: EQUAL
63622: IFTRUE 63638
63624: LD_INT 24
63626: DOUBLE
63627: EQUAL
63628: IFTRUE 63638
63630: LD_INT 25
63632: DOUBLE
63633: EQUAL
63634: IFTRUE 63638
63636: GO 63694
63638: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63639: LD_ADDR_VAR 0 9
63643: PUSH
63644: LD_VAR 0 35
63648: PUSH
63649: LD_VAR 0 36
63653: PUSH
63654: LD_VAR 0 37
63658: PUSH
63659: LD_VAR 0 38
63663: PUSH
63664: LD_VAR 0 39
63668: PUSH
63669: LD_VAR 0 40
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: PUSH
63682: LD_VAR 0 4
63686: PUSH
63687: LD_INT 1
63689: PLUS
63690: ARRAY
63691: ST_TO_ADDR
63692: GO 64059
63694: LD_INT 6
63696: DOUBLE
63697: EQUAL
63698: IFTRUE 63750
63700: LD_INT 7
63702: DOUBLE
63703: EQUAL
63704: IFTRUE 63750
63706: LD_INT 8
63708: DOUBLE
63709: EQUAL
63710: IFTRUE 63750
63712: LD_INT 13
63714: DOUBLE
63715: EQUAL
63716: IFTRUE 63750
63718: LD_INT 12
63720: DOUBLE
63721: EQUAL
63722: IFTRUE 63750
63724: LD_INT 15
63726: DOUBLE
63727: EQUAL
63728: IFTRUE 63750
63730: LD_INT 11
63732: DOUBLE
63733: EQUAL
63734: IFTRUE 63750
63736: LD_INT 14
63738: DOUBLE
63739: EQUAL
63740: IFTRUE 63750
63742: LD_INT 10
63744: DOUBLE
63745: EQUAL
63746: IFTRUE 63750
63748: GO 63806
63750: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63751: LD_ADDR_VAR 0 9
63755: PUSH
63756: LD_VAR 0 41
63760: PUSH
63761: LD_VAR 0 42
63765: PUSH
63766: LD_VAR 0 43
63770: PUSH
63771: LD_VAR 0 44
63775: PUSH
63776: LD_VAR 0 45
63780: PUSH
63781: LD_VAR 0 46
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: PUSH
63794: LD_VAR 0 4
63798: PUSH
63799: LD_INT 1
63801: PLUS
63802: ARRAY
63803: ST_TO_ADDR
63804: GO 64059
63806: LD_INT 36
63808: DOUBLE
63809: EQUAL
63810: IFTRUE 63814
63812: GO 63870
63814: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63815: LD_ADDR_VAR 0 9
63819: PUSH
63820: LD_VAR 0 47
63824: PUSH
63825: LD_VAR 0 48
63829: PUSH
63830: LD_VAR 0 49
63834: PUSH
63835: LD_VAR 0 50
63839: PUSH
63840: LD_VAR 0 51
63844: PUSH
63845: LD_VAR 0 52
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: PUSH
63858: LD_VAR 0 4
63862: PUSH
63863: LD_INT 1
63865: PLUS
63866: ARRAY
63867: ST_TO_ADDR
63868: GO 64059
63870: LD_INT 4
63872: DOUBLE
63873: EQUAL
63874: IFTRUE 63896
63876: LD_INT 5
63878: DOUBLE
63879: EQUAL
63880: IFTRUE 63896
63882: LD_INT 34
63884: DOUBLE
63885: EQUAL
63886: IFTRUE 63896
63888: LD_INT 37
63890: DOUBLE
63891: EQUAL
63892: IFTRUE 63896
63894: GO 63952
63896: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63897: LD_ADDR_VAR 0 9
63901: PUSH
63902: LD_VAR 0 53
63906: PUSH
63907: LD_VAR 0 54
63911: PUSH
63912: LD_VAR 0 55
63916: PUSH
63917: LD_VAR 0 56
63921: PUSH
63922: LD_VAR 0 57
63926: PUSH
63927: LD_VAR 0 58
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: PUSH
63940: LD_VAR 0 4
63944: PUSH
63945: LD_INT 1
63947: PLUS
63948: ARRAY
63949: ST_TO_ADDR
63950: GO 64059
63952: LD_INT 31
63954: DOUBLE
63955: EQUAL
63956: IFTRUE 64002
63958: LD_INT 32
63960: DOUBLE
63961: EQUAL
63962: IFTRUE 64002
63964: LD_INT 33
63966: DOUBLE
63967: EQUAL
63968: IFTRUE 64002
63970: LD_INT 27
63972: DOUBLE
63973: EQUAL
63974: IFTRUE 64002
63976: LD_INT 26
63978: DOUBLE
63979: EQUAL
63980: IFTRUE 64002
63982: LD_INT 28
63984: DOUBLE
63985: EQUAL
63986: IFTRUE 64002
63988: LD_INT 29
63990: DOUBLE
63991: EQUAL
63992: IFTRUE 64002
63994: LD_INT 30
63996: DOUBLE
63997: EQUAL
63998: IFTRUE 64002
64000: GO 64058
64002: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64003: LD_ADDR_VAR 0 9
64007: PUSH
64008: LD_VAR 0 59
64012: PUSH
64013: LD_VAR 0 60
64017: PUSH
64018: LD_VAR 0 61
64022: PUSH
64023: LD_VAR 0 62
64027: PUSH
64028: LD_VAR 0 63
64032: PUSH
64033: LD_VAR 0 64
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: PUSH
64046: LD_VAR 0 4
64050: PUSH
64051: LD_INT 1
64053: PLUS
64054: ARRAY
64055: ST_TO_ADDR
64056: GO 64059
64058: POP
// temp_list2 = [ ] ;
64059: LD_ADDR_VAR 0 10
64063: PUSH
64064: EMPTY
64065: ST_TO_ADDR
// for i in temp_list do
64066: LD_ADDR_VAR 0 8
64070: PUSH
64071: LD_VAR 0 9
64075: PUSH
64076: FOR_IN
64077: IFFALSE 64129
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64079: LD_ADDR_VAR 0 10
64083: PUSH
64084: LD_VAR 0 10
64088: PUSH
64089: LD_VAR 0 8
64093: PUSH
64094: LD_INT 1
64096: ARRAY
64097: PUSH
64098: LD_VAR 0 2
64102: PLUS
64103: PUSH
64104: LD_VAR 0 8
64108: PUSH
64109: LD_INT 2
64111: ARRAY
64112: PUSH
64113: LD_VAR 0 3
64117: PLUS
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: EMPTY
64124: LIST
64125: ADD
64126: ST_TO_ADDR
64127: GO 64076
64129: POP
64130: POP
// result = temp_list2 ;
64131: LD_ADDR_VAR 0 7
64135: PUSH
64136: LD_VAR 0 10
64140: ST_TO_ADDR
// end ;
64141: LD_VAR 0 7
64145: RET
// export function EnemyInRange ( unit , dist ) ; begin
64146: LD_INT 0
64148: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64149: LD_ADDR_VAR 0 3
64153: PUSH
64154: LD_VAR 0 1
64158: PPUSH
64159: CALL_OW 255
64163: PPUSH
64164: LD_VAR 0 1
64168: PPUSH
64169: CALL_OW 250
64173: PPUSH
64174: LD_VAR 0 1
64178: PPUSH
64179: CALL_OW 251
64183: PPUSH
64184: LD_VAR 0 2
64188: PPUSH
64189: CALL 37548 0 4
64193: PUSH
64194: LD_INT 4
64196: ARRAY
64197: ST_TO_ADDR
// end ;
64198: LD_VAR 0 3
64202: RET
// export function PlayerSeeMe ( unit ) ; begin
64203: LD_INT 0
64205: PPUSH
// result := See ( your_side , unit ) ;
64206: LD_ADDR_VAR 0 2
64210: PUSH
64211: LD_OWVAR 2
64215: PPUSH
64216: LD_VAR 0 1
64220: PPUSH
64221: CALL_OW 292
64225: ST_TO_ADDR
// end ;
64226: LD_VAR 0 2
64230: RET
// export function ReverseDir ( unit ) ; begin
64231: LD_INT 0
64233: PPUSH
// if not unit then
64234: LD_VAR 0 1
64238: NOT
64239: IFFALSE 64243
// exit ;
64241: GO 64266
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64243: LD_ADDR_VAR 0 2
64247: PUSH
64248: LD_VAR 0 1
64252: PPUSH
64253: CALL_OW 254
64257: PUSH
64258: LD_INT 3
64260: PLUS
64261: PUSH
64262: LD_INT 6
64264: MOD
64265: ST_TO_ADDR
// end ;
64266: LD_VAR 0 2
64270: RET
// export function ReverseArray ( array ) ; var i ; begin
64271: LD_INT 0
64273: PPUSH
64274: PPUSH
// if not array then
64275: LD_VAR 0 1
64279: NOT
64280: IFFALSE 64284
// exit ;
64282: GO 64339
// result := [ ] ;
64284: LD_ADDR_VAR 0 2
64288: PUSH
64289: EMPTY
64290: ST_TO_ADDR
// for i := array downto 1 do
64291: LD_ADDR_VAR 0 3
64295: PUSH
64296: DOUBLE
64297: LD_VAR 0 1
64301: INC
64302: ST_TO_ADDR
64303: LD_INT 1
64305: PUSH
64306: FOR_DOWNTO
64307: IFFALSE 64337
// result := Join ( result , array [ i ] ) ;
64309: LD_ADDR_VAR 0 2
64313: PUSH
64314: LD_VAR 0 2
64318: PPUSH
64319: LD_VAR 0 1
64323: PUSH
64324: LD_VAR 0 3
64328: ARRAY
64329: PPUSH
64330: CALL 68983 0 2
64334: ST_TO_ADDR
64335: GO 64306
64337: POP
64338: POP
// end ;
64339: LD_VAR 0 2
64343: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64344: LD_INT 0
64346: PPUSH
64347: PPUSH
64348: PPUSH
64349: PPUSH
64350: PPUSH
64351: PPUSH
// if not unit or not hexes then
64352: LD_VAR 0 1
64356: NOT
64357: PUSH
64358: LD_VAR 0 2
64362: NOT
64363: OR
64364: IFFALSE 64368
// exit ;
64366: GO 64491
// dist := 9999 ;
64368: LD_ADDR_VAR 0 5
64372: PUSH
64373: LD_INT 9999
64375: ST_TO_ADDR
// for i = 1 to hexes do
64376: LD_ADDR_VAR 0 4
64380: PUSH
64381: DOUBLE
64382: LD_INT 1
64384: DEC
64385: ST_TO_ADDR
64386: LD_VAR 0 2
64390: PUSH
64391: FOR_TO
64392: IFFALSE 64479
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64394: LD_ADDR_VAR 0 6
64398: PUSH
64399: LD_VAR 0 1
64403: PPUSH
64404: LD_VAR 0 2
64408: PUSH
64409: LD_VAR 0 4
64413: ARRAY
64414: PUSH
64415: LD_INT 1
64417: ARRAY
64418: PPUSH
64419: LD_VAR 0 2
64423: PUSH
64424: LD_VAR 0 4
64428: ARRAY
64429: PUSH
64430: LD_INT 2
64432: ARRAY
64433: PPUSH
64434: CALL_OW 297
64438: ST_TO_ADDR
// if tdist < dist then
64439: LD_VAR 0 6
64443: PUSH
64444: LD_VAR 0 5
64448: LESS
64449: IFFALSE 64477
// begin hex := hexes [ i ] ;
64451: LD_ADDR_VAR 0 8
64455: PUSH
64456: LD_VAR 0 2
64460: PUSH
64461: LD_VAR 0 4
64465: ARRAY
64466: ST_TO_ADDR
// dist := tdist ;
64467: LD_ADDR_VAR 0 5
64471: PUSH
64472: LD_VAR 0 6
64476: ST_TO_ADDR
// end ; end ;
64477: GO 64391
64479: POP
64480: POP
// result := hex ;
64481: LD_ADDR_VAR 0 3
64485: PUSH
64486: LD_VAR 0 8
64490: ST_TO_ADDR
// end ;
64491: LD_VAR 0 3
64495: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64496: LD_INT 0
64498: PPUSH
64499: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64500: LD_VAR 0 1
64504: NOT
64505: PUSH
64506: LD_VAR 0 1
64510: PUSH
64511: LD_INT 21
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 23
64523: PUSH
64524: LD_INT 2
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PPUSH
64535: CALL_OW 69
64539: IN
64540: NOT
64541: OR
64542: IFFALSE 64546
// exit ;
64544: GO 64593
// for i = 1 to 3 do
64546: LD_ADDR_VAR 0 3
64550: PUSH
64551: DOUBLE
64552: LD_INT 1
64554: DEC
64555: ST_TO_ADDR
64556: LD_INT 3
64558: PUSH
64559: FOR_TO
64560: IFFALSE 64591
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64562: LD_VAR 0 1
64566: PPUSH
64567: CALL_OW 250
64571: PPUSH
64572: LD_VAR 0 1
64576: PPUSH
64577: CALL_OW 251
64581: PPUSH
64582: LD_INT 1
64584: PPUSH
64585: CALL_OW 453
64589: GO 64559
64591: POP
64592: POP
// end ;
64593: LD_VAR 0 2
64597: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64598: LD_INT 0
64600: PPUSH
64601: PPUSH
64602: PPUSH
64603: PPUSH
64604: PPUSH
64605: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64606: LD_VAR 0 1
64610: NOT
64611: PUSH
64612: LD_VAR 0 2
64616: NOT
64617: OR
64618: PUSH
64619: LD_VAR 0 1
64623: PPUSH
64624: CALL_OW 314
64628: OR
64629: IFFALSE 64633
// exit ;
64631: GO 65100
// if GetLives ( i ) < 250 then
64633: LD_VAR 0 4
64637: PPUSH
64638: CALL_OW 256
64642: PUSH
64643: LD_INT 250
64645: LESS
64646: IFFALSE 64659
// begin ComAutodestruct ( i ) ;
64648: LD_VAR 0 4
64652: PPUSH
64653: CALL 64496 0 1
// exit ;
64657: GO 65100
// end ; x := GetX ( enemy_unit ) ;
64659: LD_ADDR_VAR 0 7
64663: PUSH
64664: LD_VAR 0 2
64668: PPUSH
64669: CALL_OW 250
64673: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64674: LD_ADDR_VAR 0 8
64678: PUSH
64679: LD_VAR 0 2
64683: PPUSH
64684: CALL_OW 251
64688: ST_TO_ADDR
// if not x or not y then
64689: LD_VAR 0 7
64693: NOT
64694: PUSH
64695: LD_VAR 0 8
64699: NOT
64700: OR
64701: IFFALSE 64705
// exit ;
64703: GO 65100
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64705: LD_ADDR_VAR 0 6
64709: PUSH
64710: LD_VAR 0 7
64714: PPUSH
64715: LD_INT 0
64717: PPUSH
64718: LD_INT 4
64720: PPUSH
64721: CALL_OW 272
64725: PUSH
64726: LD_VAR 0 8
64730: PPUSH
64731: LD_INT 0
64733: PPUSH
64734: LD_INT 4
64736: PPUSH
64737: CALL_OW 273
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_VAR 0 7
64750: PPUSH
64751: LD_INT 1
64753: PPUSH
64754: LD_INT 4
64756: PPUSH
64757: CALL_OW 272
64761: PUSH
64762: LD_VAR 0 8
64766: PPUSH
64767: LD_INT 1
64769: PPUSH
64770: LD_INT 4
64772: PPUSH
64773: CALL_OW 273
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_VAR 0 7
64786: PPUSH
64787: LD_INT 2
64789: PPUSH
64790: LD_INT 4
64792: PPUSH
64793: CALL_OW 272
64797: PUSH
64798: LD_VAR 0 8
64802: PPUSH
64803: LD_INT 2
64805: PPUSH
64806: LD_INT 4
64808: PPUSH
64809: CALL_OW 273
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_VAR 0 7
64822: PPUSH
64823: LD_INT 3
64825: PPUSH
64826: LD_INT 4
64828: PPUSH
64829: CALL_OW 272
64833: PUSH
64834: LD_VAR 0 8
64838: PPUSH
64839: LD_INT 3
64841: PPUSH
64842: LD_INT 4
64844: PPUSH
64845: CALL_OW 273
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_VAR 0 7
64858: PPUSH
64859: LD_INT 4
64861: PPUSH
64862: LD_INT 4
64864: PPUSH
64865: CALL_OW 272
64869: PUSH
64870: LD_VAR 0 8
64874: PPUSH
64875: LD_INT 4
64877: PPUSH
64878: LD_INT 4
64880: PPUSH
64881: CALL_OW 273
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_VAR 0 7
64894: PPUSH
64895: LD_INT 5
64897: PPUSH
64898: LD_INT 4
64900: PPUSH
64901: CALL_OW 272
64905: PUSH
64906: LD_VAR 0 8
64910: PPUSH
64911: LD_INT 5
64913: PPUSH
64914: LD_INT 4
64916: PPUSH
64917: CALL_OW 273
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: ST_TO_ADDR
// for i = tmp downto 1 do
64934: LD_ADDR_VAR 0 4
64938: PUSH
64939: DOUBLE
64940: LD_VAR 0 6
64944: INC
64945: ST_TO_ADDR
64946: LD_INT 1
64948: PUSH
64949: FOR_DOWNTO
64950: IFFALSE 65051
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64952: LD_VAR 0 6
64956: PUSH
64957: LD_VAR 0 4
64961: ARRAY
64962: PUSH
64963: LD_INT 1
64965: ARRAY
64966: PPUSH
64967: LD_VAR 0 6
64971: PUSH
64972: LD_VAR 0 4
64976: ARRAY
64977: PUSH
64978: LD_INT 2
64980: ARRAY
64981: PPUSH
64982: CALL_OW 488
64986: NOT
64987: PUSH
64988: LD_VAR 0 6
64992: PUSH
64993: LD_VAR 0 4
64997: ARRAY
64998: PUSH
64999: LD_INT 1
65001: ARRAY
65002: PPUSH
65003: LD_VAR 0 6
65007: PUSH
65008: LD_VAR 0 4
65012: ARRAY
65013: PUSH
65014: LD_INT 2
65016: ARRAY
65017: PPUSH
65018: CALL_OW 428
65022: PUSH
65023: LD_INT 0
65025: NONEQUAL
65026: OR
65027: IFFALSE 65049
// tmp := Delete ( tmp , i ) ;
65029: LD_ADDR_VAR 0 6
65033: PUSH
65034: LD_VAR 0 6
65038: PPUSH
65039: LD_VAR 0 4
65043: PPUSH
65044: CALL_OW 3
65048: ST_TO_ADDR
65049: GO 64949
65051: POP
65052: POP
// j := GetClosestHex ( unit , tmp ) ;
65053: LD_ADDR_VAR 0 5
65057: PUSH
65058: LD_VAR 0 1
65062: PPUSH
65063: LD_VAR 0 6
65067: PPUSH
65068: CALL 64344 0 2
65072: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65073: LD_VAR 0 1
65077: PPUSH
65078: LD_VAR 0 5
65082: PUSH
65083: LD_INT 1
65085: ARRAY
65086: PPUSH
65087: LD_VAR 0 5
65091: PUSH
65092: LD_INT 2
65094: ARRAY
65095: PPUSH
65096: CALL_OW 111
// end ;
65100: LD_VAR 0 3
65104: RET
// export function PrepareApemanSoldier ( ) ; begin
65105: LD_INT 0
65107: PPUSH
// uc_nation := 0 ;
65108: LD_ADDR_OWVAR 21
65112: PUSH
65113: LD_INT 0
65115: ST_TO_ADDR
// hc_sex := sex_male ;
65116: LD_ADDR_OWVAR 27
65120: PUSH
65121: LD_INT 1
65123: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65124: LD_ADDR_OWVAR 28
65128: PUSH
65129: LD_INT 15
65131: ST_TO_ADDR
// hc_gallery :=  ;
65132: LD_ADDR_OWVAR 33
65136: PUSH
65137: LD_STRING 
65139: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65140: LD_ADDR_OWVAR 31
65144: PUSH
65145: LD_INT 0
65147: PPUSH
65148: LD_INT 3
65150: PPUSH
65151: CALL_OW 12
65155: PUSH
65156: LD_INT 0
65158: PPUSH
65159: LD_INT 3
65161: PPUSH
65162: CALL_OW 12
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: ST_TO_ADDR
// end ;
65179: LD_VAR 0 1
65183: RET
// export function PrepareApemanEngineer ( ) ; begin
65184: LD_INT 0
65186: PPUSH
// uc_nation := 0 ;
65187: LD_ADDR_OWVAR 21
65191: PUSH
65192: LD_INT 0
65194: ST_TO_ADDR
// hc_sex := sex_male ;
65195: LD_ADDR_OWVAR 27
65199: PUSH
65200: LD_INT 1
65202: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65203: LD_ADDR_OWVAR 28
65207: PUSH
65208: LD_INT 16
65210: ST_TO_ADDR
// hc_gallery :=  ;
65211: LD_ADDR_OWVAR 33
65215: PUSH
65216: LD_STRING 
65218: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65219: LD_ADDR_OWVAR 31
65223: PUSH
65224: LD_INT 0
65226: PPUSH
65227: LD_INT 3
65229: PPUSH
65230: CALL_OW 12
65234: PUSH
65235: LD_INT 0
65237: PPUSH
65238: LD_INT 3
65240: PPUSH
65241: CALL_OW 12
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: ST_TO_ADDR
// end ;
65258: LD_VAR 0 1
65262: RET
// export function PrepareApeman ( agressivity ) ; begin
65263: LD_INT 0
65265: PPUSH
// uc_side := 0 ;
65266: LD_ADDR_OWVAR 20
65270: PUSH
65271: LD_INT 0
65273: ST_TO_ADDR
// uc_nation := 0 ;
65274: LD_ADDR_OWVAR 21
65278: PUSH
65279: LD_INT 0
65281: ST_TO_ADDR
// hc_sex := sex_male ;
65282: LD_ADDR_OWVAR 27
65286: PUSH
65287: LD_INT 1
65289: ST_TO_ADDR
// hc_class := class_apeman ;
65290: LD_ADDR_OWVAR 28
65294: PUSH
65295: LD_INT 12
65297: ST_TO_ADDR
// hc_gallery :=  ;
65298: LD_ADDR_OWVAR 33
65302: PUSH
65303: LD_STRING 
65305: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65306: LD_ADDR_OWVAR 35
65310: PUSH
65311: LD_VAR 0 1
65315: NEG
65316: PPUSH
65317: LD_VAR 0 1
65321: PPUSH
65322: CALL_OW 12
65326: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65327: LD_ADDR_OWVAR 31
65331: PUSH
65332: LD_INT 0
65334: PPUSH
65335: LD_INT 3
65337: PPUSH
65338: CALL_OW 12
65342: PUSH
65343: LD_INT 0
65345: PPUSH
65346: LD_INT 3
65348: PPUSH
65349: CALL_OW 12
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: ST_TO_ADDR
// end ;
65366: LD_VAR 0 2
65370: RET
// export function PrepareTiger ( agressivity ) ; begin
65371: LD_INT 0
65373: PPUSH
// uc_side := 0 ;
65374: LD_ADDR_OWVAR 20
65378: PUSH
65379: LD_INT 0
65381: ST_TO_ADDR
// uc_nation := 0 ;
65382: LD_ADDR_OWVAR 21
65386: PUSH
65387: LD_INT 0
65389: ST_TO_ADDR
// hc_class := class_tiger ;
65390: LD_ADDR_OWVAR 28
65394: PUSH
65395: LD_INT 14
65397: ST_TO_ADDR
// hc_gallery :=  ;
65398: LD_ADDR_OWVAR 33
65402: PUSH
65403: LD_STRING 
65405: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65406: LD_ADDR_OWVAR 35
65410: PUSH
65411: LD_VAR 0 1
65415: NEG
65416: PPUSH
65417: LD_VAR 0 1
65421: PPUSH
65422: CALL_OW 12
65426: ST_TO_ADDR
// end ;
65427: LD_VAR 0 2
65431: RET
// export function PrepareEnchidna ( ) ; begin
65432: LD_INT 0
65434: PPUSH
// uc_side := 0 ;
65435: LD_ADDR_OWVAR 20
65439: PUSH
65440: LD_INT 0
65442: ST_TO_ADDR
// uc_nation := 0 ;
65443: LD_ADDR_OWVAR 21
65447: PUSH
65448: LD_INT 0
65450: ST_TO_ADDR
// hc_class := class_baggie ;
65451: LD_ADDR_OWVAR 28
65455: PUSH
65456: LD_INT 13
65458: ST_TO_ADDR
// hc_gallery :=  ;
65459: LD_ADDR_OWVAR 33
65463: PUSH
65464: LD_STRING 
65466: ST_TO_ADDR
// end ;
65467: LD_VAR 0 1
65471: RET
// export function PrepareFrog ( ) ; begin
65472: LD_INT 0
65474: PPUSH
// uc_side := 0 ;
65475: LD_ADDR_OWVAR 20
65479: PUSH
65480: LD_INT 0
65482: ST_TO_ADDR
// uc_nation := 0 ;
65483: LD_ADDR_OWVAR 21
65487: PUSH
65488: LD_INT 0
65490: ST_TO_ADDR
// hc_class := class_frog ;
65491: LD_ADDR_OWVAR 28
65495: PUSH
65496: LD_INT 19
65498: ST_TO_ADDR
// hc_gallery :=  ;
65499: LD_ADDR_OWVAR 33
65503: PUSH
65504: LD_STRING 
65506: ST_TO_ADDR
// end ;
65507: LD_VAR 0 1
65511: RET
// export function PrepareFish ( ) ; begin
65512: LD_INT 0
65514: PPUSH
// uc_side := 0 ;
65515: LD_ADDR_OWVAR 20
65519: PUSH
65520: LD_INT 0
65522: ST_TO_ADDR
// uc_nation := 0 ;
65523: LD_ADDR_OWVAR 21
65527: PUSH
65528: LD_INT 0
65530: ST_TO_ADDR
// hc_class := class_fish ;
65531: LD_ADDR_OWVAR 28
65535: PUSH
65536: LD_INT 20
65538: ST_TO_ADDR
// hc_gallery :=  ;
65539: LD_ADDR_OWVAR 33
65543: PUSH
65544: LD_STRING 
65546: ST_TO_ADDR
// end ;
65547: LD_VAR 0 1
65551: RET
// export function PrepareBird ( ) ; begin
65552: LD_INT 0
65554: PPUSH
// uc_side := 0 ;
65555: LD_ADDR_OWVAR 20
65559: PUSH
65560: LD_INT 0
65562: ST_TO_ADDR
// uc_nation := 0 ;
65563: LD_ADDR_OWVAR 21
65567: PUSH
65568: LD_INT 0
65570: ST_TO_ADDR
// hc_class := class_phororhacos ;
65571: LD_ADDR_OWVAR 28
65575: PUSH
65576: LD_INT 18
65578: ST_TO_ADDR
// hc_gallery :=  ;
65579: LD_ADDR_OWVAR 33
65583: PUSH
65584: LD_STRING 
65586: ST_TO_ADDR
// end ;
65587: LD_VAR 0 1
65591: RET
// export function PrepareHorse ( ) ; begin
65592: LD_INT 0
65594: PPUSH
// uc_side := 0 ;
65595: LD_ADDR_OWVAR 20
65599: PUSH
65600: LD_INT 0
65602: ST_TO_ADDR
// uc_nation := 0 ;
65603: LD_ADDR_OWVAR 21
65607: PUSH
65608: LD_INT 0
65610: ST_TO_ADDR
// hc_class := class_horse ;
65611: LD_ADDR_OWVAR 28
65615: PUSH
65616: LD_INT 21
65618: ST_TO_ADDR
// hc_gallery :=  ;
65619: LD_ADDR_OWVAR 33
65623: PUSH
65624: LD_STRING 
65626: ST_TO_ADDR
// end ;
65627: LD_VAR 0 1
65631: RET
// export function PrepareMastodont ( ) ; begin
65632: LD_INT 0
65634: PPUSH
// uc_side := 0 ;
65635: LD_ADDR_OWVAR 20
65639: PUSH
65640: LD_INT 0
65642: ST_TO_ADDR
// uc_nation := 0 ;
65643: LD_ADDR_OWVAR 21
65647: PUSH
65648: LD_INT 0
65650: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65651: LD_ADDR_OWVAR 37
65655: PUSH
65656: LD_INT 31
65658: ST_TO_ADDR
// vc_control := control_rider ;
65659: LD_ADDR_OWVAR 38
65663: PUSH
65664: LD_INT 4
65666: ST_TO_ADDR
// end ;
65667: LD_VAR 0 1
65671: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65672: LD_INT 0
65674: PPUSH
65675: PPUSH
65676: PPUSH
// uc_side = 0 ;
65677: LD_ADDR_OWVAR 20
65681: PUSH
65682: LD_INT 0
65684: ST_TO_ADDR
// uc_nation = 0 ;
65685: LD_ADDR_OWVAR 21
65689: PUSH
65690: LD_INT 0
65692: ST_TO_ADDR
// InitHc_All ( ) ;
65693: CALL_OW 584
// InitVc ;
65697: CALL_OW 20
// if mastodonts then
65701: LD_VAR 0 6
65705: IFFALSE 65772
// for i = 1 to mastodonts do
65707: LD_ADDR_VAR 0 11
65711: PUSH
65712: DOUBLE
65713: LD_INT 1
65715: DEC
65716: ST_TO_ADDR
65717: LD_VAR 0 6
65721: PUSH
65722: FOR_TO
65723: IFFALSE 65770
// begin vc_chassis := 31 ;
65725: LD_ADDR_OWVAR 37
65729: PUSH
65730: LD_INT 31
65732: ST_TO_ADDR
// vc_control := control_rider ;
65733: LD_ADDR_OWVAR 38
65737: PUSH
65738: LD_INT 4
65740: ST_TO_ADDR
// animal := CreateVehicle ;
65741: LD_ADDR_VAR 0 12
65745: PUSH
65746: CALL_OW 45
65750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65751: LD_VAR 0 12
65755: PPUSH
65756: LD_VAR 0 8
65760: PPUSH
65761: LD_INT 0
65763: PPUSH
65764: CALL 67900 0 3
// end ;
65768: GO 65722
65770: POP
65771: POP
// if horses then
65772: LD_VAR 0 5
65776: IFFALSE 65843
// for i = 1 to horses do
65778: LD_ADDR_VAR 0 11
65782: PUSH
65783: DOUBLE
65784: LD_INT 1
65786: DEC
65787: ST_TO_ADDR
65788: LD_VAR 0 5
65792: PUSH
65793: FOR_TO
65794: IFFALSE 65841
// begin hc_class := 21 ;
65796: LD_ADDR_OWVAR 28
65800: PUSH
65801: LD_INT 21
65803: ST_TO_ADDR
// hc_gallery :=  ;
65804: LD_ADDR_OWVAR 33
65808: PUSH
65809: LD_STRING 
65811: ST_TO_ADDR
// animal := CreateHuman ;
65812: LD_ADDR_VAR 0 12
65816: PUSH
65817: CALL_OW 44
65821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65822: LD_VAR 0 12
65826: PPUSH
65827: LD_VAR 0 8
65831: PPUSH
65832: LD_INT 0
65834: PPUSH
65835: CALL 67900 0 3
// end ;
65839: GO 65793
65841: POP
65842: POP
// if birds then
65843: LD_VAR 0 1
65847: IFFALSE 65914
// for i = 1 to birds do
65849: LD_ADDR_VAR 0 11
65853: PUSH
65854: DOUBLE
65855: LD_INT 1
65857: DEC
65858: ST_TO_ADDR
65859: LD_VAR 0 1
65863: PUSH
65864: FOR_TO
65865: IFFALSE 65912
// begin hc_class = 18 ;
65867: LD_ADDR_OWVAR 28
65871: PUSH
65872: LD_INT 18
65874: ST_TO_ADDR
// hc_gallery =  ;
65875: LD_ADDR_OWVAR 33
65879: PUSH
65880: LD_STRING 
65882: ST_TO_ADDR
// animal := CreateHuman ;
65883: LD_ADDR_VAR 0 12
65887: PUSH
65888: CALL_OW 44
65892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65893: LD_VAR 0 12
65897: PPUSH
65898: LD_VAR 0 8
65902: PPUSH
65903: LD_INT 0
65905: PPUSH
65906: CALL 67900 0 3
// end ;
65910: GO 65864
65912: POP
65913: POP
// if tigers then
65914: LD_VAR 0 2
65918: IFFALSE 66002
// for i = 1 to tigers do
65920: LD_ADDR_VAR 0 11
65924: PUSH
65925: DOUBLE
65926: LD_INT 1
65928: DEC
65929: ST_TO_ADDR
65930: LD_VAR 0 2
65934: PUSH
65935: FOR_TO
65936: IFFALSE 66000
// begin hc_class = class_tiger ;
65938: LD_ADDR_OWVAR 28
65942: PUSH
65943: LD_INT 14
65945: ST_TO_ADDR
// hc_gallery =  ;
65946: LD_ADDR_OWVAR 33
65950: PUSH
65951: LD_STRING 
65953: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65954: LD_ADDR_OWVAR 35
65958: PUSH
65959: LD_INT 7
65961: NEG
65962: PPUSH
65963: LD_INT 7
65965: PPUSH
65966: CALL_OW 12
65970: ST_TO_ADDR
// animal := CreateHuman ;
65971: LD_ADDR_VAR 0 12
65975: PUSH
65976: CALL_OW 44
65980: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65981: LD_VAR 0 12
65985: PPUSH
65986: LD_VAR 0 8
65990: PPUSH
65991: LD_INT 0
65993: PPUSH
65994: CALL 67900 0 3
// end ;
65998: GO 65935
66000: POP
66001: POP
// if apemans then
66002: LD_VAR 0 3
66006: IFFALSE 66129
// for i = 1 to apemans do
66008: LD_ADDR_VAR 0 11
66012: PUSH
66013: DOUBLE
66014: LD_INT 1
66016: DEC
66017: ST_TO_ADDR
66018: LD_VAR 0 3
66022: PUSH
66023: FOR_TO
66024: IFFALSE 66127
// begin hc_class = class_apeman ;
66026: LD_ADDR_OWVAR 28
66030: PUSH
66031: LD_INT 12
66033: ST_TO_ADDR
// hc_gallery =  ;
66034: LD_ADDR_OWVAR 33
66038: PUSH
66039: LD_STRING 
66041: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66042: LD_ADDR_OWVAR 35
66046: PUSH
66047: LD_INT 2
66049: NEG
66050: PPUSH
66051: LD_INT 2
66053: PPUSH
66054: CALL_OW 12
66058: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66059: LD_ADDR_OWVAR 31
66063: PUSH
66064: LD_INT 1
66066: PPUSH
66067: LD_INT 3
66069: PPUSH
66070: CALL_OW 12
66074: PUSH
66075: LD_INT 1
66077: PPUSH
66078: LD_INT 3
66080: PPUSH
66081: CALL_OW 12
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: ST_TO_ADDR
// animal := CreateHuman ;
66098: LD_ADDR_VAR 0 12
66102: PUSH
66103: CALL_OW 44
66107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66108: LD_VAR 0 12
66112: PPUSH
66113: LD_VAR 0 8
66117: PPUSH
66118: LD_INT 0
66120: PPUSH
66121: CALL 67900 0 3
// end ;
66125: GO 66023
66127: POP
66128: POP
// if enchidnas then
66129: LD_VAR 0 4
66133: IFFALSE 66200
// for i = 1 to enchidnas do
66135: LD_ADDR_VAR 0 11
66139: PUSH
66140: DOUBLE
66141: LD_INT 1
66143: DEC
66144: ST_TO_ADDR
66145: LD_VAR 0 4
66149: PUSH
66150: FOR_TO
66151: IFFALSE 66198
// begin hc_class = 13 ;
66153: LD_ADDR_OWVAR 28
66157: PUSH
66158: LD_INT 13
66160: ST_TO_ADDR
// hc_gallery =  ;
66161: LD_ADDR_OWVAR 33
66165: PUSH
66166: LD_STRING 
66168: ST_TO_ADDR
// animal := CreateHuman ;
66169: LD_ADDR_VAR 0 12
66173: PUSH
66174: CALL_OW 44
66178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66179: LD_VAR 0 12
66183: PPUSH
66184: LD_VAR 0 8
66188: PPUSH
66189: LD_INT 0
66191: PPUSH
66192: CALL 67900 0 3
// end ;
66196: GO 66150
66198: POP
66199: POP
// if fishes then
66200: LD_VAR 0 7
66204: IFFALSE 66271
// for i = 1 to fishes do
66206: LD_ADDR_VAR 0 11
66210: PUSH
66211: DOUBLE
66212: LD_INT 1
66214: DEC
66215: ST_TO_ADDR
66216: LD_VAR 0 7
66220: PUSH
66221: FOR_TO
66222: IFFALSE 66269
// begin hc_class = 20 ;
66224: LD_ADDR_OWVAR 28
66228: PUSH
66229: LD_INT 20
66231: ST_TO_ADDR
// hc_gallery =  ;
66232: LD_ADDR_OWVAR 33
66236: PUSH
66237: LD_STRING 
66239: ST_TO_ADDR
// animal := CreateHuman ;
66240: LD_ADDR_VAR 0 12
66244: PUSH
66245: CALL_OW 44
66249: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66250: LD_VAR 0 12
66254: PPUSH
66255: LD_VAR 0 9
66259: PPUSH
66260: LD_INT 0
66262: PPUSH
66263: CALL 67900 0 3
// end ;
66267: GO 66221
66269: POP
66270: POP
// end ;
66271: LD_VAR 0 10
66275: RET
// export function WantHeal ( sci , unit ) ; begin
66276: LD_INT 0
66278: PPUSH
// if GetTaskList ( sci ) > 0 then
66279: LD_VAR 0 1
66283: PPUSH
66284: CALL_OW 437
66288: PUSH
66289: LD_INT 0
66291: GREATER
66292: IFFALSE 66362
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66294: LD_VAR 0 1
66298: PPUSH
66299: CALL_OW 437
66303: PUSH
66304: LD_INT 1
66306: ARRAY
66307: PUSH
66308: LD_INT 1
66310: ARRAY
66311: PUSH
66312: LD_STRING l
66314: EQUAL
66315: PUSH
66316: LD_VAR 0 1
66320: PPUSH
66321: CALL_OW 437
66325: PUSH
66326: LD_INT 1
66328: ARRAY
66329: PUSH
66330: LD_INT 4
66332: ARRAY
66333: PUSH
66334: LD_VAR 0 2
66338: EQUAL
66339: AND
66340: IFFALSE 66352
// result := true else
66342: LD_ADDR_VAR 0 3
66346: PUSH
66347: LD_INT 1
66349: ST_TO_ADDR
66350: GO 66360
// result := false ;
66352: LD_ADDR_VAR 0 3
66356: PUSH
66357: LD_INT 0
66359: ST_TO_ADDR
// end else
66360: GO 66370
// result := false ;
66362: LD_ADDR_VAR 0 3
66366: PUSH
66367: LD_INT 0
66369: ST_TO_ADDR
// end ;
66370: LD_VAR 0 3
66374: RET
// export function HealTarget ( sci ) ; begin
66375: LD_INT 0
66377: PPUSH
// if not sci then
66378: LD_VAR 0 1
66382: NOT
66383: IFFALSE 66387
// exit ;
66385: GO 66452
// result := 0 ;
66387: LD_ADDR_VAR 0 2
66391: PUSH
66392: LD_INT 0
66394: ST_TO_ADDR
// if GetTaskList ( sci ) then
66395: LD_VAR 0 1
66399: PPUSH
66400: CALL_OW 437
66404: IFFALSE 66452
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66406: LD_VAR 0 1
66410: PPUSH
66411: CALL_OW 437
66415: PUSH
66416: LD_INT 1
66418: ARRAY
66419: PUSH
66420: LD_INT 1
66422: ARRAY
66423: PUSH
66424: LD_STRING l
66426: EQUAL
66427: IFFALSE 66452
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66429: LD_ADDR_VAR 0 2
66433: PUSH
66434: LD_VAR 0 1
66438: PPUSH
66439: CALL_OW 437
66443: PUSH
66444: LD_INT 1
66446: ARRAY
66447: PUSH
66448: LD_INT 4
66450: ARRAY
66451: ST_TO_ADDR
// end ;
66452: LD_VAR 0 2
66456: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66457: LD_INT 0
66459: PPUSH
66460: PPUSH
66461: PPUSH
66462: PPUSH
// if not base_units then
66463: LD_VAR 0 1
66467: NOT
66468: IFFALSE 66472
// exit ;
66470: GO 66559
// result := false ;
66472: LD_ADDR_VAR 0 2
66476: PUSH
66477: LD_INT 0
66479: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66480: LD_ADDR_VAR 0 5
66484: PUSH
66485: LD_VAR 0 1
66489: PPUSH
66490: LD_INT 21
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PPUSH
66500: CALL_OW 72
66504: ST_TO_ADDR
// if not tmp then
66505: LD_VAR 0 5
66509: NOT
66510: IFFALSE 66514
// exit ;
66512: GO 66559
// for i in tmp do
66514: LD_ADDR_VAR 0 3
66518: PUSH
66519: LD_VAR 0 5
66523: PUSH
66524: FOR_IN
66525: IFFALSE 66557
// begin result := EnemyInRange ( i , 22 ) ;
66527: LD_ADDR_VAR 0 2
66531: PUSH
66532: LD_VAR 0 3
66536: PPUSH
66537: LD_INT 22
66539: PPUSH
66540: CALL 64146 0 2
66544: ST_TO_ADDR
// if result then
66545: LD_VAR 0 2
66549: IFFALSE 66555
// exit ;
66551: POP
66552: POP
66553: GO 66559
// end ;
66555: GO 66524
66557: POP
66558: POP
// end ;
66559: LD_VAR 0 2
66563: RET
// export function FilterByTag ( units , tag ) ; begin
66564: LD_INT 0
66566: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66567: LD_ADDR_VAR 0 3
66571: PUSH
66572: LD_VAR 0 1
66576: PPUSH
66577: LD_INT 120
66579: PUSH
66580: LD_VAR 0 2
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PPUSH
66589: CALL_OW 72
66593: ST_TO_ADDR
// end ;
66594: LD_VAR 0 3
66598: RET
// export function IsDriver ( un ) ; begin
66599: LD_INT 0
66601: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66602: LD_ADDR_VAR 0 2
66606: PUSH
66607: LD_VAR 0 1
66611: PUSH
66612: LD_INT 55
66614: PUSH
66615: EMPTY
66616: LIST
66617: PPUSH
66618: CALL_OW 69
66622: IN
66623: ST_TO_ADDR
// end ;
66624: LD_VAR 0 2
66628: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66629: LD_INT 0
66631: PPUSH
66632: PPUSH
// list := [ ] ;
66633: LD_ADDR_VAR 0 5
66637: PUSH
66638: EMPTY
66639: ST_TO_ADDR
// case d of 0 :
66640: LD_VAR 0 3
66644: PUSH
66645: LD_INT 0
66647: DOUBLE
66648: EQUAL
66649: IFTRUE 66653
66651: GO 66786
66653: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66654: LD_ADDR_VAR 0 5
66658: PUSH
66659: LD_VAR 0 1
66663: PUSH
66664: LD_INT 4
66666: MINUS
66667: PUSH
66668: LD_VAR 0 2
66672: PUSH
66673: LD_INT 4
66675: MINUS
66676: PUSH
66677: LD_INT 2
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: LIST
66684: PUSH
66685: LD_VAR 0 1
66689: PUSH
66690: LD_INT 3
66692: MINUS
66693: PUSH
66694: LD_VAR 0 2
66698: PUSH
66699: LD_INT 1
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: PUSH
66707: LD_VAR 0 1
66711: PUSH
66712: LD_INT 4
66714: PLUS
66715: PUSH
66716: LD_VAR 0 2
66720: PUSH
66721: LD_INT 4
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: LIST
66728: PUSH
66729: LD_VAR 0 1
66733: PUSH
66734: LD_INT 3
66736: PLUS
66737: PUSH
66738: LD_VAR 0 2
66742: PUSH
66743: LD_INT 3
66745: PLUS
66746: PUSH
66747: LD_INT 5
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: LIST
66754: PUSH
66755: LD_VAR 0 1
66759: PUSH
66760: LD_VAR 0 2
66764: PUSH
66765: LD_INT 4
66767: PLUS
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: LIST
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: ST_TO_ADDR
// end ; 1 :
66784: GO 67484
66786: LD_INT 1
66788: DOUBLE
66789: EQUAL
66790: IFTRUE 66794
66792: GO 66927
66794: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66795: LD_ADDR_VAR 0 5
66799: PUSH
66800: LD_VAR 0 1
66804: PUSH
66805: LD_VAR 0 2
66809: PUSH
66810: LD_INT 4
66812: MINUS
66813: PUSH
66814: LD_INT 3
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: LIST
66821: PUSH
66822: LD_VAR 0 1
66826: PUSH
66827: LD_INT 3
66829: MINUS
66830: PUSH
66831: LD_VAR 0 2
66835: PUSH
66836: LD_INT 3
66838: MINUS
66839: PUSH
66840: LD_INT 2
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: LIST
66847: PUSH
66848: LD_VAR 0 1
66852: PUSH
66853: LD_INT 4
66855: MINUS
66856: PUSH
66857: LD_VAR 0 2
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: PUSH
66870: LD_VAR 0 1
66874: PUSH
66875: LD_VAR 0 2
66879: PUSH
66880: LD_INT 3
66882: PLUS
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: LIST
66891: PUSH
66892: LD_VAR 0 1
66896: PUSH
66897: LD_INT 4
66899: PLUS
66900: PUSH
66901: LD_VAR 0 2
66905: PUSH
66906: LD_INT 4
66908: PLUS
66909: PUSH
66910: LD_INT 5
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: LIST
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: ST_TO_ADDR
// end ; 2 :
66925: GO 67484
66927: LD_INT 2
66929: DOUBLE
66930: EQUAL
66931: IFTRUE 66935
66933: GO 67064
66935: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66936: LD_ADDR_VAR 0 5
66940: PUSH
66941: LD_VAR 0 1
66945: PUSH
66946: LD_VAR 0 2
66950: PUSH
66951: LD_INT 3
66953: MINUS
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: LIST
66962: PUSH
66963: LD_VAR 0 1
66967: PUSH
66968: LD_INT 4
66970: PLUS
66971: PUSH
66972: LD_VAR 0 2
66976: PUSH
66977: LD_INT 4
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: LIST
66984: PUSH
66985: LD_VAR 0 1
66989: PUSH
66990: LD_VAR 0 2
66994: PUSH
66995: LD_INT 4
66997: PLUS
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: LIST
67006: PUSH
67007: LD_VAR 0 1
67011: PUSH
67012: LD_INT 3
67014: MINUS
67015: PUSH
67016: LD_VAR 0 2
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: LIST
67028: PUSH
67029: LD_VAR 0 1
67033: PUSH
67034: LD_INT 4
67036: MINUS
67037: PUSH
67038: LD_VAR 0 2
67042: PUSH
67043: LD_INT 4
67045: MINUS
67046: PUSH
67047: LD_INT 2
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: ST_TO_ADDR
// end ; 3 :
67062: GO 67484
67064: LD_INT 3
67066: DOUBLE
67067: EQUAL
67068: IFTRUE 67072
67070: GO 67205
67072: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67073: LD_ADDR_VAR 0 5
67077: PUSH
67078: LD_VAR 0 1
67082: PUSH
67083: LD_INT 3
67085: PLUS
67086: PUSH
67087: LD_VAR 0 2
67091: PUSH
67092: LD_INT 4
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: LIST
67099: PUSH
67100: LD_VAR 0 1
67104: PUSH
67105: LD_INT 4
67107: PLUS
67108: PUSH
67109: LD_VAR 0 2
67113: PUSH
67114: LD_INT 4
67116: PLUS
67117: PUSH
67118: LD_INT 5
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: LIST
67125: PUSH
67126: LD_VAR 0 1
67130: PUSH
67131: LD_INT 4
67133: MINUS
67134: PUSH
67135: LD_VAR 0 2
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: LIST
67147: PUSH
67148: LD_VAR 0 1
67152: PUSH
67153: LD_VAR 0 2
67157: PUSH
67158: LD_INT 4
67160: MINUS
67161: PUSH
67162: LD_INT 3
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: LIST
67169: PUSH
67170: LD_VAR 0 1
67174: PUSH
67175: LD_INT 3
67177: MINUS
67178: PUSH
67179: LD_VAR 0 2
67183: PUSH
67184: LD_INT 3
67186: MINUS
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: LIST
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: ST_TO_ADDR
// end ; 4 :
67203: GO 67484
67205: LD_INT 4
67207: DOUBLE
67208: EQUAL
67209: IFTRUE 67213
67211: GO 67346
67213: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67214: LD_ADDR_VAR 0 5
67218: PUSH
67219: LD_VAR 0 1
67223: PUSH
67224: LD_VAR 0 2
67228: PUSH
67229: LD_INT 4
67231: PLUS
67232: PUSH
67233: LD_INT 0
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: LIST
67240: PUSH
67241: LD_VAR 0 1
67245: PUSH
67246: LD_INT 3
67248: PLUS
67249: PUSH
67250: LD_VAR 0 2
67254: PUSH
67255: LD_INT 3
67257: PLUS
67258: PUSH
67259: LD_INT 5
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: LIST
67266: PUSH
67267: LD_VAR 0 1
67271: PUSH
67272: LD_INT 4
67274: PLUS
67275: PUSH
67276: LD_VAR 0 2
67280: PUSH
67281: LD_INT 4
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: LIST
67288: PUSH
67289: LD_VAR 0 1
67293: PUSH
67294: LD_VAR 0 2
67298: PUSH
67299: LD_INT 3
67301: MINUS
67302: PUSH
67303: LD_INT 3
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: LIST
67310: PUSH
67311: LD_VAR 0 1
67315: PUSH
67316: LD_INT 4
67318: MINUS
67319: PUSH
67320: LD_VAR 0 2
67324: PUSH
67325: LD_INT 4
67327: MINUS
67328: PUSH
67329: LD_INT 2
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: LIST
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: ST_TO_ADDR
// end ; 5 :
67344: GO 67484
67346: LD_INT 5
67348: DOUBLE
67349: EQUAL
67350: IFTRUE 67354
67352: GO 67483
67354: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67355: LD_ADDR_VAR 0 5
67359: PUSH
67360: LD_VAR 0 1
67364: PUSH
67365: LD_INT 4
67367: MINUS
67368: PUSH
67369: LD_VAR 0 2
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: PUSH
67382: LD_VAR 0 1
67386: PUSH
67387: LD_VAR 0 2
67391: PUSH
67392: LD_INT 4
67394: MINUS
67395: PUSH
67396: LD_INT 3
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: LIST
67403: PUSH
67404: LD_VAR 0 1
67408: PUSH
67409: LD_INT 4
67411: PLUS
67412: PUSH
67413: LD_VAR 0 2
67417: PUSH
67418: LD_INT 4
67420: PLUS
67421: PUSH
67422: LD_INT 5
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: LIST
67429: PUSH
67430: LD_VAR 0 1
67434: PUSH
67435: LD_INT 3
67437: PLUS
67438: PUSH
67439: LD_VAR 0 2
67443: PUSH
67444: LD_INT 4
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: LIST
67451: PUSH
67452: LD_VAR 0 1
67456: PUSH
67457: LD_VAR 0 2
67461: PUSH
67462: LD_INT 3
67464: PLUS
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: LIST
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: ST_TO_ADDR
// end ; end ;
67481: GO 67484
67483: POP
// result := list ;
67484: LD_ADDR_VAR 0 4
67488: PUSH
67489: LD_VAR 0 5
67493: ST_TO_ADDR
// end ;
67494: LD_VAR 0 4
67498: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67499: LD_INT 0
67501: PPUSH
67502: PPUSH
67503: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67504: LD_VAR 0 1
67508: NOT
67509: PUSH
67510: LD_VAR 0 2
67514: PUSH
67515: LD_INT 1
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: LD_INT 3
67523: PUSH
67524: LD_INT 4
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: IN
67533: NOT
67534: OR
67535: IFFALSE 67539
// exit ;
67537: GO 67622
// tmp := [ ] ;
67539: LD_ADDR_VAR 0 5
67543: PUSH
67544: EMPTY
67545: ST_TO_ADDR
// for i in units do
67546: LD_ADDR_VAR 0 4
67550: PUSH
67551: LD_VAR 0 1
67555: PUSH
67556: FOR_IN
67557: IFFALSE 67591
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67559: LD_ADDR_VAR 0 5
67563: PUSH
67564: LD_VAR 0 5
67568: PPUSH
67569: LD_VAR 0 4
67573: PPUSH
67574: LD_VAR 0 2
67578: PPUSH
67579: CALL_OW 259
67583: PPUSH
67584: CALL 68983 0 2
67588: ST_TO_ADDR
67589: GO 67556
67591: POP
67592: POP
// if not tmp then
67593: LD_VAR 0 5
67597: NOT
67598: IFFALSE 67602
// exit ;
67600: GO 67622
// result := SortListByListDesc ( units , tmp ) ;
67602: LD_ADDR_VAR 0 3
67606: PUSH
67607: LD_VAR 0 1
67611: PPUSH
67612: LD_VAR 0 5
67616: PPUSH
67617: CALL_OW 77
67621: ST_TO_ADDR
// end ;
67622: LD_VAR 0 3
67626: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67627: LD_INT 0
67629: PPUSH
67630: PPUSH
67631: PPUSH
// result := false ;
67632: LD_ADDR_VAR 0 3
67636: PUSH
67637: LD_INT 0
67639: ST_TO_ADDR
// if not building then
67640: LD_VAR 0 2
67644: NOT
67645: IFFALSE 67649
// exit ;
67647: GO 67787
// x := GetX ( building ) ;
67649: LD_ADDR_VAR 0 4
67653: PUSH
67654: LD_VAR 0 2
67658: PPUSH
67659: CALL_OW 250
67663: ST_TO_ADDR
// y := GetY ( building ) ;
67664: LD_ADDR_VAR 0 5
67668: PUSH
67669: LD_VAR 0 2
67673: PPUSH
67674: CALL_OW 251
67678: ST_TO_ADDR
// if not x or not y then
67679: LD_VAR 0 4
67683: NOT
67684: PUSH
67685: LD_VAR 0 5
67689: NOT
67690: OR
67691: IFFALSE 67695
// exit ;
67693: GO 67787
// if GetTaskList ( unit ) then
67695: LD_VAR 0 1
67699: PPUSH
67700: CALL_OW 437
67704: IFFALSE 67787
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67706: LD_STRING e
67708: PUSH
67709: LD_VAR 0 1
67713: PPUSH
67714: CALL_OW 437
67718: PUSH
67719: LD_INT 1
67721: ARRAY
67722: PUSH
67723: LD_INT 1
67725: ARRAY
67726: EQUAL
67727: PUSH
67728: LD_VAR 0 4
67732: PUSH
67733: LD_VAR 0 1
67737: PPUSH
67738: CALL_OW 437
67742: PUSH
67743: LD_INT 1
67745: ARRAY
67746: PUSH
67747: LD_INT 2
67749: ARRAY
67750: EQUAL
67751: AND
67752: PUSH
67753: LD_VAR 0 5
67757: PUSH
67758: LD_VAR 0 1
67762: PPUSH
67763: CALL_OW 437
67767: PUSH
67768: LD_INT 1
67770: ARRAY
67771: PUSH
67772: LD_INT 3
67774: ARRAY
67775: EQUAL
67776: AND
67777: IFFALSE 67787
// result := true end ;
67779: LD_ADDR_VAR 0 3
67783: PUSH
67784: LD_INT 1
67786: ST_TO_ADDR
// end ;
67787: LD_VAR 0 3
67791: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67792: LD_INT 0
67794: PPUSH
// result := false ;
67795: LD_ADDR_VAR 0 4
67799: PUSH
67800: LD_INT 0
67802: ST_TO_ADDR
// if GetTaskList ( unit ) then
67803: LD_VAR 0 1
67807: PPUSH
67808: CALL_OW 437
67812: IFFALSE 67895
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67814: LD_STRING M
67816: PUSH
67817: LD_VAR 0 1
67821: PPUSH
67822: CALL_OW 437
67826: PUSH
67827: LD_INT 1
67829: ARRAY
67830: PUSH
67831: LD_INT 1
67833: ARRAY
67834: EQUAL
67835: PUSH
67836: LD_VAR 0 2
67840: PUSH
67841: LD_VAR 0 1
67845: PPUSH
67846: CALL_OW 437
67850: PUSH
67851: LD_INT 1
67853: ARRAY
67854: PUSH
67855: LD_INT 2
67857: ARRAY
67858: EQUAL
67859: AND
67860: PUSH
67861: LD_VAR 0 3
67865: PUSH
67866: LD_VAR 0 1
67870: PPUSH
67871: CALL_OW 437
67875: PUSH
67876: LD_INT 1
67878: ARRAY
67879: PUSH
67880: LD_INT 3
67882: ARRAY
67883: EQUAL
67884: AND
67885: IFFALSE 67895
// result := true ;
67887: LD_ADDR_VAR 0 4
67891: PUSH
67892: LD_INT 1
67894: ST_TO_ADDR
// end ; end ;
67895: LD_VAR 0 4
67899: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67900: LD_INT 0
67902: PPUSH
67903: PPUSH
67904: PPUSH
67905: PPUSH
// if not unit or not area then
67906: LD_VAR 0 1
67910: NOT
67911: PUSH
67912: LD_VAR 0 2
67916: NOT
67917: OR
67918: IFFALSE 67922
// exit ;
67920: GO 68086
// tmp := AreaToList ( area , i ) ;
67922: LD_ADDR_VAR 0 6
67926: PUSH
67927: LD_VAR 0 2
67931: PPUSH
67932: LD_VAR 0 5
67936: PPUSH
67937: CALL_OW 517
67941: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67942: LD_ADDR_VAR 0 5
67946: PUSH
67947: DOUBLE
67948: LD_INT 1
67950: DEC
67951: ST_TO_ADDR
67952: LD_VAR 0 6
67956: PUSH
67957: LD_INT 1
67959: ARRAY
67960: PUSH
67961: FOR_TO
67962: IFFALSE 68084
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67964: LD_ADDR_VAR 0 7
67968: PUSH
67969: LD_VAR 0 6
67973: PUSH
67974: LD_INT 1
67976: ARRAY
67977: PUSH
67978: LD_VAR 0 5
67982: ARRAY
67983: PUSH
67984: LD_VAR 0 6
67988: PUSH
67989: LD_INT 2
67991: ARRAY
67992: PUSH
67993: LD_VAR 0 5
67997: ARRAY
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68003: LD_VAR 0 7
68007: PUSH
68008: LD_INT 1
68010: ARRAY
68011: PPUSH
68012: LD_VAR 0 7
68016: PUSH
68017: LD_INT 2
68019: ARRAY
68020: PPUSH
68021: CALL_OW 428
68025: PUSH
68026: LD_INT 0
68028: EQUAL
68029: IFFALSE 68082
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68031: LD_VAR 0 1
68035: PPUSH
68036: LD_VAR 0 7
68040: PUSH
68041: LD_INT 1
68043: ARRAY
68044: PPUSH
68045: LD_VAR 0 7
68049: PUSH
68050: LD_INT 2
68052: ARRAY
68053: PPUSH
68054: LD_VAR 0 3
68058: PPUSH
68059: CALL_OW 48
// result := IsPlaced ( unit ) ;
68063: LD_ADDR_VAR 0 4
68067: PUSH
68068: LD_VAR 0 1
68072: PPUSH
68073: CALL_OW 305
68077: ST_TO_ADDR
// exit ;
68078: POP
68079: POP
68080: GO 68086
// end ; end ;
68082: GO 67961
68084: POP
68085: POP
// end ;
68086: LD_VAR 0 4
68090: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68091: LD_INT 0
68093: PPUSH
68094: PPUSH
68095: PPUSH
// if not side or side > 8 then
68096: LD_VAR 0 1
68100: NOT
68101: PUSH
68102: LD_VAR 0 1
68106: PUSH
68107: LD_INT 8
68109: GREATER
68110: OR
68111: IFFALSE 68115
// exit ;
68113: GO 68302
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68115: LD_ADDR_VAR 0 4
68119: PUSH
68120: LD_INT 22
68122: PUSH
68123: LD_VAR 0 1
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 21
68134: PUSH
68135: LD_INT 3
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PPUSH
68146: CALL_OW 69
68150: ST_TO_ADDR
// if not tmp then
68151: LD_VAR 0 4
68155: NOT
68156: IFFALSE 68160
// exit ;
68158: GO 68302
// enable_addtolog := true ;
68160: LD_ADDR_OWVAR 81
68164: PUSH
68165: LD_INT 1
68167: ST_TO_ADDR
// AddToLog ( [ ) ;
68168: LD_STRING [
68170: PPUSH
68171: CALL_OW 561
// for i in tmp do
68175: LD_ADDR_VAR 0 3
68179: PUSH
68180: LD_VAR 0 4
68184: PUSH
68185: FOR_IN
68186: IFFALSE 68293
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68188: LD_STRING [
68190: PUSH
68191: LD_VAR 0 3
68195: PPUSH
68196: CALL_OW 266
68200: STR
68201: PUSH
68202: LD_STRING , 
68204: STR
68205: PUSH
68206: LD_VAR 0 3
68210: PPUSH
68211: CALL_OW 250
68215: STR
68216: PUSH
68217: LD_STRING , 
68219: STR
68220: PUSH
68221: LD_VAR 0 3
68225: PPUSH
68226: CALL_OW 251
68230: STR
68231: PUSH
68232: LD_STRING , 
68234: STR
68235: PUSH
68236: LD_VAR 0 3
68240: PPUSH
68241: CALL_OW 254
68245: STR
68246: PUSH
68247: LD_STRING , 
68249: STR
68250: PUSH
68251: LD_VAR 0 3
68255: PPUSH
68256: LD_INT 1
68258: PPUSH
68259: CALL_OW 268
68263: STR
68264: PUSH
68265: LD_STRING , 
68267: STR
68268: PUSH
68269: LD_VAR 0 3
68273: PPUSH
68274: LD_INT 2
68276: PPUSH
68277: CALL_OW 268
68281: STR
68282: PUSH
68283: LD_STRING ],
68285: STR
68286: PPUSH
68287: CALL_OW 561
// end ;
68291: GO 68185
68293: POP
68294: POP
// AddToLog ( ]; ) ;
68295: LD_STRING ];
68297: PPUSH
68298: CALL_OW 561
// end ;
68302: LD_VAR 0 2
68306: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68307: LD_INT 0
68309: PPUSH
68310: PPUSH
68311: PPUSH
68312: PPUSH
68313: PPUSH
// if not area or not rate or not max then
68314: LD_VAR 0 1
68318: NOT
68319: PUSH
68320: LD_VAR 0 2
68324: NOT
68325: OR
68326: PUSH
68327: LD_VAR 0 4
68331: NOT
68332: OR
68333: IFFALSE 68337
// exit ;
68335: GO 68526
// while 1 do
68337: LD_INT 1
68339: IFFALSE 68526
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68341: LD_ADDR_VAR 0 9
68345: PUSH
68346: LD_VAR 0 1
68350: PPUSH
68351: LD_INT 1
68353: PPUSH
68354: CALL_OW 287
68358: PUSH
68359: LD_INT 10
68361: MUL
68362: ST_TO_ADDR
// r := rate / 10 ;
68363: LD_ADDR_VAR 0 7
68367: PUSH
68368: LD_VAR 0 2
68372: PUSH
68373: LD_INT 10
68375: DIVREAL
68376: ST_TO_ADDR
// time := 1 1$00 ;
68377: LD_ADDR_VAR 0 8
68381: PUSH
68382: LD_INT 2100
68384: ST_TO_ADDR
// if amount < min then
68385: LD_VAR 0 9
68389: PUSH
68390: LD_VAR 0 3
68394: LESS
68395: IFFALSE 68413
// r := r * 2 else
68397: LD_ADDR_VAR 0 7
68401: PUSH
68402: LD_VAR 0 7
68406: PUSH
68407: LD_INT 2
68409: MUL
68410: ST_TO_ADDR
68411: GO 68439
// if amount > max then
68413: LD_VAR 0 9
68417: PUSH
68418: LD_VAR 0 4
68422: GREATER
68423: IFFALSE 68439
// r := r / 2 ;
68425: LD_ADDR_VAR 0 7
68429: PUSH
68430: LD_VAR 0 7
68434: PUSH
68435: LD_INT 2
68437: DIVREAL
68438: ST_TO_ADDR
// time := time / r ;
68439: LD_ADDR_VAR 0 8
68443: PUSH
68444: LD_VAR 0 8
68448: PUSH
68449: LD_VAR 0 7
68453: DIVREAL
68454: ST_TO_ADDR
// if time < 0 then
68455: LD_VAR 0 8
68459: PUSH
68460: LD_INT 0
68462: LESS
68463: IFFALSE 68480
// time := time * - 1 ;
68465: LD_ADDR_VAR 0 8
68469: PUSH
68470: LD_VAR 0 8
68474: PUSH
68475: LD_INT 1
68477: NEG
68478: MUL
68479: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68480: LD_VAR 0 8
68484: PUSH
68485: LD_INT 35
68487: PPUSH
68488: LD_INT 875
68490: PPUSH
68491: CALL_OW 12
68495: PLUS
68496: PPUSH
68497: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68501: LD_INT 1
68503: PPUSH
68504: LD_INT 5
68506: PPUSH
68507: CALL_OW 12
68511: PPUSH
68512: LD_VAR 0 1
68516: PPUSH
68517: LD_INT 1
68519: PPUSH
68520: CALL_OW 55
// end ;
68524: GO 68337
// end ;
68526: LD_VAR 0 5
68530: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68531: LD_INT 0
68533: PPUSH
68534: PPUSH
68535: PPUSH
68536: PPUSH
68537: PPUSH
68538: PPUSH
68539: PPUSH
68540: PPUSH
// if not turrets or not factories then
68541: LD_VAR 0 1
68545: NOT
68546: PUSH
68547: LD_VAR 0 2
68551: NOT
68552: OR
68553: IFFALSE 68557
// exit ;
68555: GO 68864
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68557: LD_ADDR_VAR 0 10
68561: PUSH
68562: LD_INT 5
68564: PUSH
68565: LD_INT 6
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 2
68574: PUSH
68575: LD_INT 4
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 3
68584: PUSH
68585: LD_INT 5
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 24
68599: PUSH
68600: LD_INT 25
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 23
68609: PUSH
68610: LD_INT 27
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 42
68623: PUSH
68624: LD_INT 43
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 44
68633: PUSH
68634: LD_INT 46
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 45
68643: PUSH
68644: LD_INT 47
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: LIST
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: LIST
68660: ST_TO_ADDR
// result := [ ] ;
68661: LD_ADDR_VAR 0 3
68665: PUSH
68666: EMPTY
68667: ST_TO_ADDR
// for i in turrets do
68668: LD_ADDR_VAR 0 4
68672: PUSH
68673: LD_VAR 0 1
68677: PUSH
68678: FOR_IN
68679: IFFALSE 68862
// begin nat := GetNation ( i ) ;
68681: LD_ADDR_VAR 0 7
68685: PUSH
68686: LD_VAR 0 4
68690: PPUSH
68691: CALL_OW 248
68695: ST_TO_ADDR
// weapon := 0 ;
68696: LD_ADDR_VAR 0 8
68700: PUSH
68701: LD_INT 0
68703: ST_TO_ADDR
// if not nat then
68704: LD_VAR 0 7
68708: NOT
68709: IFFALSE 68713
// continue ;
68711: GO 68678
// for j in list [ nat ] do
68713: LD_ADDR_VAR 0 5
68717: PUSH
68718: LD_VAR 0 10
68722: PUSH
68723: LD_VAR 0 7
68727: ARRAY
68728: PUSH
68729: FOR_IN
68730: IFFALSE 68771
// if GetBWeapon ( i ) = j [ 1 ] then
68732: LD_VAR 0 4
68736: PPUSH
68737: CALL_OW 269
68741: PUSH
68742: LD_VAR 0 5
68746: PUSH
68747: LD_INT 1
68749: ARRAY
68750: EQUAL
68751: IFFALSE 68769
// begin weapon := j [ 2 ] ;
68753: LD_ADDR_VAR 0 8
68757: PUSH
68758: LD_VAR 0 5
68762: PUSH
68763: LD_INT 2
68765: ARRAY
68766: ST_TO_ADDR
// break ;
68767: GO 68771
// end ;
68769: GO 68729
68771: POP
68772: POP
// if not weapon then
68773: LD_VAR 0 8
68777: NOT
68778: IFFALSE 68782
// continue ;
68780: GO 68678
// for k in factories do
68782: LD_ADDR_VAR 0 6
68786: PUSH
68787: LD_VAR 0 2
68791: PUSH
68792: FOR_IN
68793: IFFALSE 68858
// begin weapons := AvailableWeaponList ( k ) ;
68795: LD_ADDR_VAR 0 9
68799: PUSH
68800: LD_VAR 0 6
68804: PPUSH
68805: CALL_OW 478
68809: ST_TO_ADDR
// if not weapons then
68810: LD_VAR 0 9
68814: NOT
68815: IFFALSE 68819
// continue ;
68817: GO 68792
// if weapon in weapons then
68819: LD_VAR 0 8
68823: PUSH
68824: LD_VAR 0 9
68828: IN
68829: IFFALSE 68856
// begin result := [ i , weapon ] ;
68831: LD_ADDR_VAR 0 3
68835: PUSH
68836: LD_VAR 0 4
68840: PUSH
68841: LD_VAR 0 8
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: ST_TO_ADDR
// exit ;
68850: POP
68851: POP
68852: POP
68853: POP
68854: GO 68864
// end ; end ;
68856: GO 68792
68858: POP
68859: POP
// end ;
68860: GO 68678
68862: POP
68863: POP
// end ;
68864: LD_VAR 0 3
68868: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68869: LD_INT 0
68871: PPUSH
// if not side or side > 8 then
68872: LD_VAR 0 3
68876: NOT
68877: PUSH
68878: LD_VAR 0 3
68882: PUSH
68883: LD_INT 8
68885: GREATER
68886: OR
68887: IFFALSE 68891
// exit ;
68889: GO 68950
// if not range then
68891: LD_VAR 0 4
68895: NOT
68896: IFFALSE 68907
// range := - 12 ;
68898: LD_ADDR_VAR 0 4
68902: PUSH
68903: LD_INT 12
68905: NEG
68906: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68907: LD_VAR 0 1
68911: PPUSH
68912: LD_VAR 0 2
68916: PPUSH
68917: LD_VAR 0 3
68921: PPUSH
68922: LD_VAR 0 4
68926: PPUSH
68927: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68931: LD_VAR 0 1
68935: PPUSH
68936: LD_VAR 0 2
68940: PPUSH
68941: LD_VAR 0 3
68945: PPUSH
68946: CALL_OW 331
// end ;
68950: LD_VAR 0 5
68954: RET
// export function Video ( mode ) ; begin
68955: LD_INT 0
68957: PPUSH
// ingame_video = mode ;
68958: LD_ADDR_OWVAR 52
68962: PUSH
68963: LD_VAR 0 1
68967: ST_TO_ADDR
// interface_hidden = mode ;
68968: LD_ADDR_OWVAR 54
68972: PUSH
68973: LD_VAR 0 1
68977: ST_TO_ADDR
// end ;
68978: LD_VAR 0 2
68982: RET
// export function Join ( array , element ) ; begin
68983: LD_INT 0
68985: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68986: LD_ADDR_VAR 0 3
68990: PUSH
68991: LD_VAR 0 1
68995: PPUSH
68996: LD_VAR 0 1
69000: PUSH
69001: LD_INT 1
69003: PLUS
69004: PPUSH
69005: LD_VAR 0 2
69009: PPUSH
69010: CALL_OW 1
69014: ST_TO_ADDR
// end ;
69015: LD_VAR 0 3
69019: RET
// export function JoinUnion ( array , element ) ; begin
69020: LD_INT 0
69022: PPUSH
// result := array union element ;
69023: LD_ADDR_VAR 0 3
69027: PUSH
69028: LD_VAR 0 1
69032: PUSH
69033: LD_VAR 0 2
69037: UNION
69038: ST_TO_ADDR
// end ;
69039: LD_VAR 0 3
69043: RET
// export function GetBehemoths ( side ) ; begin
69044: LD_INT 0
69046: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69047: LD_ADDR_VAR 0 2
69051: PUSH
69052: LD_INT 22
69054: PUSH
69055: LD_VAR 0 1
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 31
69066: PUSH
69067: LD_INT 25
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PPUSH
69078: CALL_OW 69
69082: ST_TO_ADDR
// end ;
69083: LD_VAR 0 2
69087: RET
// export function Shuffle ( array ) ; var i , index ; begin
69088: LD_INT 0
69090: PPUSH
69091: PPUSH
69092: PPUSH
// result := [ ] ;
69093: LD_ADDR_VAR 0 2
69097: PUSH
69098: EMPTY
69099: ST_TO_ADDR
// if not array then
69100: LD_VAR 0 1
69104: NOT
69105: IFFALSE 69109
// exit ;
69107: GO 69208
// Randomize ;
69109: CALL_OW 10
// for i = array downto 1 do
69113: LD_ADDR_VAR 0 3
69117: PUSH
69118: DOUBLE
69119: LD_VAR 0 1
69123: INC
69124: ST_TO_ADDR
69125: LD_INT 1
69127: PUSH
69128: FOR_DOWNTO
69129: IFFALSE 69206
// begin index := rand ( 1 , array ) ;
69131: LD_ADDR_VAR 0 4
69135: PUSH
69136: LD_INT 1
69138: PPUSH
69139: LD_VAR 0 1
69143: PPUSH
69144: CALL_OW 12
69148: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69149: LD_ADDR_VAR 0 2
69153: PUSH
69154: LD_VAR 0 2
69158: PPUSH
69159: LD_VAR 0 2
69163: PUSH
69164: LD_INT 1
69166: PLUS
69167: PPUSH
69168: LD_VAR 0 1
69172: PUSH
69173: LD_VAR 0 4
69177: ARRAY
69178: PPUSH
69179: CALL_OW 2
69183: ST_TO_ADDR
// array := Delete ( array , index ) ;
69184: LD_ADDR_VAR 0 1
69188: PUSH
69189: LD_VAR 0 1
69193: PPUSH
69194: LD_VAR 0 4
69198: PPUSH
69199: CALL_OW 3
69203: ST_TO_ADDR
// end ;
69204: GO 69128
69206: POP
69207: POP
// end ;
69208: LD_VAR 0 2
69212: RET
// export function GetBaseMaterials ( base ) ; begin
69213: LD_INT 0
69215: PPUSH
// result := [ 0 , 0 , 0 ] ;
69216: LD_ADDR_VAR 0 2
69220: PUSH
69221: LD_INT 0
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: LD_INT 0
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: LIST
69234: ST_TO_ADDR
// if not base then
69235: LD_VAR 0 1
69239: NOT
69240: IFFALSE 69244
// exit ;
69242: GO 69293
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69244: LD_ADDR_VAR 0 2
69248: PUSH
69249: LD_VAR 0 1
69253: PPUSH
69254: LD_INT 1
69256: PPUSH
69257: CALL_OW 275
69261: PUSH
69262: LD_VAR 0 1
69266: PPUSH
69267: LD_INT 2
69269: PPUSH
69270: CALL_OW 275
69274: PUSH
69275: LD_VAR 0 1
69279: PPUSH
69280: LD_INT 3
69282: PPUSH
69283: CALL_OW 275
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: LIST
69292: ST_TO_ADDR
// end ;
69293: LD_VAR 0 2
69297: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69298: LD_INT 0
69300: PPUSH
69301: PPUSH
// result := array ;
69302: LD_ADDR_VAR 0 3
69306: PUSH
69307: LD_VAR 0 1
69311: ST_TO_ADDR
// if size >= result then
69312: LD_VAR 0 2
69316: PUSH
69317: LD_VAR 0 3
69321: GREATEREQUAL
69322: IFFALSE 69326
// exit ;
69324: GO 69376
// if size then
69326: LD_VAR 0 2
69330: IFFALSE 69376
// for i := array downto size do
69332: LD_ADDR_VAR 0 4
69336: PUSH
69337: DOUBLE
69338: LD_VAR 0 1
69342: INC
69343: ST_TO_ADDR
69344: LD_VAR 0 2
69348: PUSH
69349: FOR_DOWNTO
69350: IFFALSE 69374
// result := Delete ( result , result ) ;
69352: LD_ADDR_VAR 0 3
69356: PUSH
69357: LD_VAR 0 3
69361: PPUSH
69362: LD_VAR 0 3
69366: PPUSH
69367: CALL_OW 3
69371: ST_TO_ADDR
69372: GO 69349
69374: POP
69375: POP
// end ;
69376: LD_VAR 0 3
69380: RET
// export function ComExit ( unit ) ; var tmp ; begin
69381: LD_INT 0
69383: PPUSH
69384: PPUSH
// if not IsInUnit ( unit ) then
69385: LD_VAR 0 1
69389: PPUSH
69390: CALL_OW 310
69394: NOT
69395: IFFALSE 69399
// exit ;
69397: GO 69459
// tmp := IsInUnit ( unit ) ;
69399: LD_ADDR_VAR 0 3
69403: PUSH
69404: LD_VAR 0 1
69408: PPUSH
69409: CALL_OW 310
69413: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69414: LD_VAR 0 3
69418: PPUSH
69419: CALL_OW 247
69423: PUSH
69424: LD_INT 2
69426: EQUAL
69427: IFFALSE 69440
// ComExitVehicle ( unit ) else
69429: LD_VAR 0 1
69433: PPUSH
69434: CALL_OW 121
69438: GO 69449
// ComExitBuilding ( unit ) ;
69440: LD_VAR 0 1
69444: PPUSH
69445: CALL_OW 122
// result := tmp ;
69449: LD_ADDR_VAR 0 2
69453: PUSH
69454: LD_VAR 0 3
69458: ST_TO_ADDR
// end ;
69459: LD_VAR 0 2
69463: RET
// export function ComExitAll ( units ) ; var i ; begin
69464: LD_INT 0
69466: PPUSH
69467: PPUSH
// if not units then
69468: LD_VAR 0 1
69472: NOT
69473: IFFALSE 69477
// exit ;
69475: GO 69503
// for i in units do
69477: LD_ADDR_VAR 0 3
69481: PUSH
69482: LD_VAR 0 1
69486: PUSH
69487: FOR_IN
69488: IFFALSE 69501
// ComExit ( i ) ;
69490: LD_VAR 0 3
69494: PPUSH
69495: CALL 69381 0 1
69499: GO 69487
69501: POP
69502: POP
// end ;
69503: LD_VAR 0 2
69507: RET
// export function ResetHc ; begin
69508: LD_INT 0
69510: PPUSH
// InitHc ;
69511: CALL_OW 19
// hc_importance := 0 ;
69515: LD_ADDR_OWVAR 32
69519: PUSH
69520: LD_INT 0
69522: ST_TO_ADDR
// end ;
69523: LD_VAR 0 1
69527: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69528: LD_INT 0
69530: PPUSH
69531: PPUSH
69532: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69533: LD_ADDR_VAR 0 6
69537: PUSH
69538: LD_VAR 0 1
69542: PUSH
69543: LD_VAR 0 3
69547: PLUS
69548: PUSH
69549: LD_INT 2
69551: DIV
69552: ST_TO_ADDR
// if _x < 0 then
69553: LD_VAR 0 6
69557: PUSH
69558: LD_INT 0
69560: LESS
69561: IFFALSE 69578
// _x := _x * - 1 ;
69563: LD_ADDR_VAR 0 6
69567: PUSH
69568: LD_VAR 0 6
69572: PUSH
69573: LD_INT 1
69575: NEG
69576: MUL
69577: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69578: LD_ADDR_VAR 0 7
69582: PUSH
69583: LD_VAR 0 2
69587: PUSH
69588: LD_VAR 0 4
69592: PLUS
69593: PUSH
69594: LD_INT 2
69596: DIV
69597: ST_TO_ADDR
// if _y < 0 then
69598: LD_VAR 0 7
69602: PUSH
69603: LD_INT 0
69605: LESS
69606: IFFALSE 69623
// _y := _y * - 1 ;
69608: LD_ADDR_VAR 0 7
69612: PUSH
69613: LD_VAR 0 7
69617: PUSH
69618: LD_INT 1
69620: NEG
69621: MUL
69622: ST_TO_ADDR
// result := [ _x , _y ] ;
69623: LD_ADDR_VAR 0 5
69627: PUSH
69628: LD_VAR 0 6
69632: PUSH
69633: LD_VAR 0 7
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: ST_TO_ADDR
// end ;
69642: LD_VAR 0 5
69646: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69647: LD_INT 0
69649: PPUSH
69650: PPUSH
69651: PPUSH
69652: PPUSH
// task := GetTaskList ( unit ) ;
69653: LD_ADDR_VAR 0 7
69657: PUSH
69658: LD_VAR 0 1
69662: PPUSH
69663: CALL_OW 437
69667: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69668: LD_VAR 0 7
69672: NOT
69673: PUSH
69674: LD_VAR 0 1
69678: PPUSH
69679: LD_VAR 0 2
69683: PPUSH
69684: CALL_OW 308
69688: NOT
69689: AND
69690: IFFALSE 69694
// exit ;
69692: GO 69812
// if IsInArea ( unit , area ) then
69694: LD_VAR 0 1
69698: PPUSH
69699: LD_VAR 0 2
69703: PPUSH
69704: CALL_OW 308
69708: IFFALSE 69726
// begin ComMoveToArea ( unit , goAway ) ;
69710: LD_VAR 0 1
69714: PPUSH
69715: LD_VAR 0 3
69719: PPUSH
69720: CALL_OW 113
// exit ;
69724: GO 69812
// end ; if task [ 1 ] [ 1 ] <> M then
69726: LD_VAR 0 7
69730: PUSH
69731: LD_INT 1
69733: ARRAY
69734: PUSH
69735: LD_INT 1
69737: ARRAY
69738: PUSH
69739: LD_STRING M
69741: NONEQUAL
69742: IFFALSE 69746
// exit ;
69744: GO 69812
// x := task [ 1 ] [ 2 ] ;
69746: LD_ADDR_VAR 0 5
69750: PUSH
69751: LD_VAR 0 7
69755: PUSH
69756: LD_INT 1
69758: ARRAY
69759: PUSH
69760: LD_INT 2
69762: ARRAY
69763: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69764: LD_ADDR_VAR 0 6
69768: PUSH
69769: LD_VAR 0 7
69773: PUSH
69774: LD_INT 1
69776: ARRAY
69777: PUSH
69778: LD_INT 3
69780: ARRAY
69781: ST_TO_ADDR
// if InArea ( x , y , area ) then
69782: LD_VAR 0 5
69786: PPUSH
69787: LD_VAR 0 6
69791: PPUSH
69792: LD_VAR 0 2
69796: PPUSH
69797: CALL_OW 309
69801: IFFALSE 69812
// ComStop ( unit ) ;
69803: LD_VAR 0 1
69807: PPUSH
69808: CALL_OW 141
// end ;
69812: LD_VAR 0 4
69816: RET
// export function Abs ( value ) ; begin
69817: LD_INT 0
69819: PPUSH
// result := value ;
69820: LD_ADDR_VAR 0 2
69824: PUSH
69825: LD_VAR 0 1
69829: ST_TO_ADDR
// if value < 0 then
69830: LD_VAR 0 1
69834: PUSH
69835: LD_INT 0
69837: LESS
69838: IFFALSE 69855
// result := value * - 1 ;
69840: LD_ADDR_VAR 0 2
69844: PUSH
69845: LD_VAR 0 1
69849: PUSH
69850: LD_INT 1
69852: NEG
69853: MUL
69854: ST_TO_ADDR
// end ;
69855: LD_VAR 0 2
69859: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69860: LD_INT 0
69862: PPUSH
69863: PPUSH
69864: PPUSH
69865: PPUSH
69866: PPUSH
69867: PPUSH
69868: PPUSH
69869: PPUSH
// if not unit or not building then
69870: LD_VAR 0 1
69874: NOT
69875: PUSH
69876: LD_VAR 0 2
69880: NOT
69881: OR
69882: IFFALSE 69886
// exit ;
69884: GO 70112
// x := GetX ( building ) ;
69886: LD_ADDR_VAR 0 4
69890: PUSH
69891: LD_VAR 0 2
69895: PPUSH
69896: CALL_OW 250
69900: ST_TO_ADDR
// y := GetY ( building ) ;
69901: LD_ADDR_VAR 0 6
69905: PUSH
69906: LD_VAR 0 2
69910: PPUSH
69911: CALL_OW 251
69915: ST_TO_ADDR
// d := GetDir ( building ) ;
69916: LD_ADDR_VAR 0 8
69920: PUSH
69921: LD_VAR 0 2
69925: PPUSH
69926: CALL_OW 254
69930: ST_TO_ADDR
// r := 4 ;
69931: LD_ADDR_VAR 0 9
69935: PUSH
69936: LD_INT 4
69938: ST_TO_ADDR
// for i := 1 to 5 do
69939: LD_ADDR_VAR 0 10
69943: PUSH
69944: DOUBLE
69945: LD_INT 1
69947: DEC
69948: ST_TO_ADDR
69949: LD_INT 5
69951: PUSH
69952: FOR_TO
69953: IFFALSE 70110
// begin _x := ShiftX ( x , d , r + i ) ;
69955: LD_ADDR_VAR 0 5
69959: PUSH
69960: LD_VAR 0 4
69964: PPUSH
69965: LD_VAR 0 8
69969: PPUSH
69970: LD_VAR 0 9
69974: PUSH
69975: LD_VAR 0 10
69979: PLUS
69980: PPUSH
69981: CALL_OW 272
69985: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69986: LD_ADDR_VAR 0 7
69990: PUSH
69991: LD_VAR 0 6
69995: PPUSH
69996: LD_VAR 0 8
70000: PPUSH
70001: LD_VAR 0 9
70005: PUSH
70006: LD_VAR 0 10
70010: PLUS
70011: PPUSH
70012: CALL_OW 273
70016: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70017: LD_VAR 0 5
70021: PPUSH
70022: LD_VAR 0 7
70026: PPUSH
70027: CALL_OW 488
70031: PUSH
70032: LD_VAR 0 5
70036: PPUSH
70037: LD_VAR 0 7
70041: PPUSH
70042: CALL_OW 428
70046: PPUSH
70047: CALL_OW 247
70051: PUSH
70052: LD_INT 3
70054: PUSH
70055: LD_INT 2
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: IN
70062: NOT
70063: AND
70064: IFFALSE 70108
// begin ComMoveXY ( unit , _x , _y ) ;
70066: LD_VAR 0 1
70070: PPUSH
70071: LD_VAR 0 5
70075: PPUSH
70076: LD_VAR 0 7
70080: PPUSH
70081: CALL_OW 111
// result := [ _x , _y ] ;
70085: LD_ADDR_VAR 0 3
70089: PUSH
70090: LD_VAR 0 5
70094: PUSH
70095: LD_VAR 0 7
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: ST_TO_ADDR
// exit ;
70104: POP
70105: POP
70106: GO 70112
// end ; end ;
70108: GO 69952
70110: POP
70111: POP
// end ;
70112: LD_VAR 0 3
70116: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70117: LD_INT 0
70119: PPUSH
70120: PPUSH
70121: PPUSH
// result := 0 ;
70122: LD_ADDR_VAR 0 3
70126: PUSH
70127: LD_INT 0
70129: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70130: LD_VAR 0 1
70134: PUSH
70135: LD_INT 0
70137: LESS
70138: PUSH
70139: LD_VAR 0 1
70143: PUSH
70144: LD_INT 8
70146: GREATER
70147: OR
70148: PUSH
70149: LD_VAR 0 2
70153: PUSH
70154: LD_INT 0
70156: LESS
70157: OR
70158: PUSH
70159: LD_VAR 0 2
70163: PUSH
70164: LD_INT 8
70166: GREATER
70167: OR
70168: IFFALSE 70172
// exit ;
70170: GO 70247
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70172: LD_ADDR_VAR 0 4
70176: PUSH
70177: LD_INT 22
70179: PUSH
70180: LD_VAR 0 2
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PPUSH
70189: CALL_OW 69
70193: PUSH
70194: FOR_IN
70195: IFFALSE 70245
// begin un := UnitShoot ( i ) ;
70197: LD_ADDR_VAR 0 5
70201: PUSH
70202: LD_VAR 0 4
70206: PPUSH
70207: CALL_OW 504
70211: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70212: LD_VAR 0 5
70216: PPUSH
70217: CALL_OW 255
70221: PUSH
70222: LD_VAR 0 1
70226: EQUAL
70227: IFFALSE 70243
// begin result := un ;
70229: LD_ADDR_VAR 0 3
70233: PUSH
70234: LD_VAR 0 5
70238: ST_TO_ADDR
// exit ;
70239: POP
70240: POP
70241: GO 70247
// end ; end ;
70243: GO 70194
70245: POP
70246: POP
// end ;
70247: LD_VAR 0 3
70251: RET
// export function GetCargoBay ( units ) ; begin
70252: LD_INT 0
70254: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70255: LD_ADDR_VAR 0 2
70259: PUSH
70260: LD_VAR 0 1
70264: PPUSH
70265: LD_INT 2
70267: PUSH
70268: LD_INT 34
70270: PUSH
70271: LD_INT 12
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 34
70280: PUSH
70281: LD_INT 51
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 34
70290: PUSH
70291: LD_INT 32
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 34
70300: PUSH
70301: LD_INT 89
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: PPUSH
70315: CALL_OW 72
70319: ST_TO_ADDR
// end ;
70320: LD_VAR 0 2
70324: RET
// export function Negate ( value ) ; begin
70325: LD_INT 0
70327: PPUSH
// result := not value ;
70328: LD_ADDR_VAR 0 2
70332: PUSH
70333: LD_VAR 0 1
70337: NOT
70338: ST_TO_ADDR
// end ;
70339: LD_VAR 0 2
70343: RET
// export function Inc ( value ) ; begin
70344: LD_INT 0
70346: PPUSH
// result := value + 1 ;
70347: LD_ADDR_VAR 0 2
70351: PUSH
70352: LD_VAR 0 1
70356: PUSH
70357: LD_INT 1
70359: PLUS
70360: ST_TO_ADDR
// end ;
70361: LD_VAR 0 2
70365: RET
// export function Dec ( value ) ; begin
70366: LD_INT 0
70368: PPUSH
// result := value - 1 ;
70369: LD_ADDR_VAR 0 2
70373: PUSH
70374: LD_VAR 0 1
70378: PUSH
70379: LD_INT 1
70381: MINUS
70382: ST_TO_ADDR
// end ;
70383: LD_VAR 0 2
70387: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70388: LD_INT 0
70390: PPUSH
70391: PPUSH
70392: PPUSH
70393: PPUSH
70394: PPUSH
70395: PPUSH
70396: PPUSH
70397: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70398: LD_VAR 0 1
70402: PPUSH
70403: LD_VAR 0 2
70407: PPUSH
70408: CALL_OW 488
70412: NOT
70413: PUSH
70414: LD_VAR 0 3
70418: PPUSH
70419: LD_VAR 0 4
70423: PPUSH
70424: CALL_OW 488
70428: NOT
70429: OR
70430: IFFALSE 70443
// begin result := - 1 ;
70432: LD_ADDR_VAR 0 5
70436: PUSH
70437: LD_INT 1
70439: NEG
70440: ST_TO_ADDR
// exit ;
70441: GO 70678
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70443: LD_ADDR_VAR 0 12
70447: PUSH
70448: LD_VAR 0 1
70452: PPUSH
70453: LD_VAR 0 2
70457: PPUSH
70458: LD_VAR 0 3
70462: PPUSH
70463: LD_VAR 0 4
70467: PPUSH
70468: CALL 69528 0 4
70472: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70473: LD_ADDR_VAR 0 11
70477: PUSH
70478: LD_VAR 0 1
70482: PPUSH
70483: LD_VAR 0 2
70487: PPUSH
70488: LD_VAR 0 12
70492: PUSH
70493: LD_INT 1
70495: ARRAY
70496: PPUSH
70497: LD_VAR 0 12
70501: PUSH
70502: LD_INT 2
70504: ARRAY
70505: PPUSH
70506: CALL_OW 298
70510: ST_TO_ADDR
// distance := 9999 ;
70511: LD_ADDR_VAR 0 10
70515: PUSH
70516: LD_INT 9999
70518: ST_TO_ADDR
// for i := 0 to 5 do
70519: LD_ADDR_VAR 0 6
70523: PUSH
70524: DOUBLE
70525: LD_INT 0
70527: DEC
70528: ST_TO_ADDR
70529: LD_INT 5
70531: PUSH
70532: FOR_TO
70533: IFFALSE 70676
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70535: LD_ADDR_VAR 0 7
70539: PUSH
70540: LD_VAR 0 1
70544: PPUSH
70545: LD_VAR 0 6
70549: PPUSH
70550: LD_VAR 0 11
70554: PPUSH
70555: CALL_OW 272
70559: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70560: LD_ADDR_VAR 0 8
70564: PUSH
70565: LD_VAR 0 2
70569: PPUSH
70570: LD_VAR 0 6
70574: PPUSH
70575: LD_VAR 0 11
70579: PPUSH
70580: CALL_OW 273
70584: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70585: LD_VAR 0 7
70589: PPUSH
70590: LD_VAR 0 8
70594: PPUSH
70595: CALL_OW 488
70599: NOT
70600: IFFALSE 70604
// continue ;
70602: GO 70532
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70604: LD_ADDR_VAR 0 9
70608: PUSH
70609: LD_VAR 0 12
70613: PUSH
70614: LD_INT 1
70616: ARRAY
70617: PPUSH
70618: LD_VAR 0 12
70622: PUSH
70623: LD_INT 2
70625: ARRAY
70626: PPUSH
70627: LD_VAR 0 7
70631: PPUSH
70632: LD_VAR 0 8
70636: PPUSH
70637: CALL_OW 298
70641: ST_TO_ADDR
// if tmp < distance then
70642: LD_VAR 0 9
70646: PUSH
70647: LD_VAR 0 10
70651: LESS
70652: IFFALSE 70674
// begin result := i ;
70654: LD_ADDR_VAR 0 5
70658: PUSH
70659: LD_VAR 0 6
70663: ST_TO_ADDR
// distance := tmp ;
70664: LD_ADDR_VAR 0 10
70668: PUSH
70669: LD_VAR 0 9
70673: ST_TO_ADDR
// end ; end ;
70674: GO 70532
70676: POP
70677: POP
// end ;
70678: LD_VAR 0 5
70682: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70683: LD_INT 0
70685: PPUSH
70686: PPUSH
// if not driver or not IsInUnit ( driver ) then
70687: LD_VAR 0 1
70691: NOT
70692: PUSH
70693: LD_VAR 0 1
70697: PPUSH
70698: CALL_OW 310
70702: NOT
70703: OR
70704: IFFALSE 70708
// exit ;
70706: GO 70798
// vehicle := IsInUnit ( driver ) ;
70708: LD_ADDR_VAR 0 3
70712: PUSH
70713: LD_VAR 0 1
70717: PPUSH
70718: CALL_OW 310
70722: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70723: LD_VAR 0 1
70727: PPUSH
70728: LD_STRING \
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: LD_INT 0
70736: PUSH
70737: LD_INT 0
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: LD_INT 0
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: PUSH
70758: LD_STRING E
70760: PUSH
70761: LD_INT 0
70763: PUSH
70764: LD_INT 0
70766: PUSH
70767: LD_VAR 0 3
70771: PUSH
70772: LD_INT 0
70774: PUSH
70775: LD_INT 0
70777: PUSH
70778: LD_INT 0
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PPUSH
70794: CALL_OW 446
// end ;
70798: LD_VAR 0 2
70802: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70803: LD_INT 0
70805: PPUSH
70806: PPUSH
// if not driver or not IsInUnit ( driver ) then
70807: LD_VAR 0 1
70811: NOT
70812: PUSH
70813: LD_VAR 0 1
70817: PPUSH
70818: CALL_OW 310
70822: NOT
70823: OR
70824: IFFALSE 70828
// exit ;
70826: GO 70918
// vehicle := IsInUnit ( driver ) ;
70828: LD_ADDR_VAR 0 3
70832: PUSH
70833: LD_VAR 0 1
70837: PPUSH
70838: CALL_OW 310
70842: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70843: LD_VAR 0 1
70847: PPUSH
70848: LD_STRING \
70850: PUSH
70851: LD_INT 0
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: LD_INT 0
70859: PUSH
70860: LD_INT 0
70862: PUSH
70863: LD_INT 0
70865: PUSH
70866: LD_INT 0
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: PUSH
70878: LD_STRING E
70880: PUSH
70881: LD_INT 0
70883: PUSH
70884: LD_INT 0
70886: PUSH
70887: LD_VAR 0 3
70891: PUSH
70892: LD_INT 0
70894: PUSH
70895: LD_INT 0
70897: PUSH
70898: LD_INT 0
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PPUSH
70914: CALL_OW 447
// end ;
70918: LD_VAR 0 2
70922: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70923: LD_INT 0
70925: PPUSH
70926: PPUSH
70927: PPUSH
// tmp := [ ] ;
70928: LD_ADDR_VAR 0 5
70932: PUSH
70933: EMPTY
70934: ST_TO_ADDR
// for i in units do
70935: LD_ADDR_VAR 0 4
70939: PUSH
70940: LD_VAR 0 1
70944: PUSH
70945: FOR_IN
70946: IFFALSE 70984
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70948: LD_ADDR_VAR 0 5
70952: PUSH
70953: LD_VAR 0 5
70957: PPUSH
70958: LD_VAR 0 5
70962: PUSH
70963: LD_INT 1
70965: PLUS
70966: PPUSH
70967: LD_VAR 0 4
70971: PPUSH
70972: CALL_OW 256
70976: PPUSH
70977: CALL_OW 2
70981: ST_TO_ADDR
70982: GO 70945
70984: POP
70985: POP
// if not tmp then
70986: LD_VAR 0 5
70990: NOT
70991: IFFALSE 70995
// exit ;
70993: GO 71043
// if asc then
70995: LD_VAR 0 2
70999: IFFALSE 71023
// result := SortListByListAsc ( units , tmp ) else
71001: LD_ADDR_VAR 0 3
71005: PUSH
71006: LD_VAR 0 1
71010: PPUSH
71011: LD_VAR 0 5
71015: PPUSH
71016: CALL_OW 76
71020: ST_TO_ADDR
71021: GO 71043
// result := SortListByListDesc ( units , tmp ) ;
71023: LD_ADDR_VAR 0 3
71027: PUSH
71028: LD_VAR 0 1
71032: PPUSH
71033: LD_VAR 0 5
71037: PPUSH
71038: CALL_OW 77
71042: ST_TO_ADDR
// end ;
71043: LD_VAR 0 3
71047: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71048: LD_INT 0
71050: PPUSH
71051: PPUSH
// task := GetTaskList ( mech ) ;
71052: LD_ADDR_VAR 0 4
71056: PUSH
71057: LD_VAR 0 1
71061: PPUSH
71062: CALL_OW 437
71066: ST_TO_ADDR
// if not task then
71067: LD_VAR 0 4
71071: NOT
71072: IFFALSE 71076
// exit ;
71074: GO 71118
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71076: LD_ADDR_VAR 0 3
71080: PUSH
71081: LD_VAR 0 4
71085: PUSH
71086: LD_INT 1
71088: ARRAY
71089: PUSH
71090: LD_INT 1
71092: ARRAY
71093: PUSH
71094: LD_STRING r
71096: EQUAL
71097: PUSH
71098: LD_VAR 0 4
71102: PUSH
71103: LD_INT 1
71105: ARRAY
71106: PUSH
71107: LD_INT 4
71109: ARRAY
71110: PUSH
71111: LD_VAR 0 2
71115: EQUAL
71116: AND
71117: ST_TO_ADDR
// end ;
71118: LD_VAR 0 3
71122: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71123: LD_INT 0
71125: PPUSH
// SetDir ( unit , d ) ;
71126: LD_VAR 0 1
71130: PPUSH
71131: LD_VAR 0 4
71135: PPUSH
71136: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71140: LD_VAR 0 1
71144: PPUSH
71145: LD_VAR 0 2
71149: PPUSH
71150: LD_VAR 0 3
71154: PPUSH
71155: LD_VAR 0 5
71159: PPUSH
71160: CALL_OW 48
// end ;
71164: LD_VAR 0 6
71168: RET
// export function ToNaturalNumber ( number ) ; begin
71169: LD_INT 0
71171: PPUSH
// result := number div 1 ;
71172: LD_ADDR_VAR 0 2
71176: PUSH
71177: LD_VAR 0 1
71181: PUSH
71182: LD_INT 1
71184: DIV
71185: ST_TO_ADDR
// if number < 0 then
71186: LD_VAR 0 1
71190: PUSH
71191: LD_INT 0
71193: LESS
71194: IFFALSE 71204
// result := 0 ;
71196: LD_ADDR_VAR 0 2
71200: PUSH
71201: LD_INT 0
71203: ST_TO_ADDR
// end ;
71204: LD_VAR 0 2
71208: RET
// export function SortByClass ( units , class ) ; var un ; begin
71209: LD_INT 0
71211: PPUSH
71212: PPUSH
// if not units or not class then
71213: LD_VAR 0 1
71217: NOT
71218: PUSH
71219: LD_VAR 0 2
71223: NOT
71224: OR
71225: IFFALSE 71229
// exit ;
71227: GO 71324
// result := [ ] ;
71229: LD_ADDR_VAR 0 3
71233: PUSH
71234: EMPTY
71235: ST_TO_ADDR
// for un in units do
71236: LD_ADDR_VAR 0 4
71240: PUSH
71241: LD_VAR 0 1
71245: PUSH
71246: FOR_IN
71247: IFFALSE 71322
// if GetClass ( un ) = class then
71249: LD_VAR 0 4
71253: PPUSH
71254: CALL_OW 257
71258: PUSH
71259: LD_VAR 0 2
71263: EQUAL
71264: IFFALSE 71291
// result := Insert ( result , 1 , un ) else
71266: LD_ADDR_VAR 0 3
71270: PUSH
71271: LD_VAR 0 3
71275: PPUSH
71276: LD_INT 1
71278: PPUSH
71279: LD_VAR 0 4
71283: PPUSH
71284: CALL_OW 2
71288: ST_TO_ADDR
71289: GO 71320
// result := Replace ( result , result + 1 , un ) ;
71291: LD_ADDR_VAR 0 3
71295: PUSH
71296: LD_VAR 0 3
71300: PPUSH
71301: LD_VAR 0 3
71305: PUSH
71306: LD_INT 1
71308: PLUS
71309: PPUSH
71310: LD_VAR 0 4
71314: PPUSH
71315: CALL_OW 1
71319: ST_TO_ADDR
71320: GO 71246
71322: POP
71323: POP
// end ;
71324: LD_VAR 0 3
71328: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71329: LD_INT 0
71331: PPUSH
71332: PPUSH
71333: PPUSH
71334: PPUSH
71335: PPUSH
71336: PPUSH
71337: PPUSH
// result := [ ] ;
71338: LD_ADDR_VAR 0 4
71342: PUSH
71343: EMPTY
71344: ST_TO_ADDR
// if x - r < 0 then
71345: LD_VAR 0 1
71349: PUSH
71350: LD_VAR 0 3
71354: MINUS
71355: PUSH
71356: LD_INT 0
71358: LESS
71359: IFFALSE 71371
// min_x := 0 else
71361: LD_ADDR_VAR 0 8
71365: PUSH
71366: LD_INT 0
71368: ST_TO_ADDR
71369: GO 71387
// min_x := x - r ;
71371: LD_ADDR_VAR 0 8
71375: PUSH
71376: LD_VAR 0 1
71380: PUSH
71381: LD_VAR 0 3
71385: MINUS
71386: ST_TO_ADDR
// if y - r < 0 then
71387: LD_VAR 0 2
71391: PUSH
71392: LD_VAR 0 3
71396: MINUS
71397: PUSH
71398: LD_INT 0
71400: LESS
71401: IFFALSE 71413
// min_y := 0 else
71403: LD_ADDR_VAR 0 7
71407: PUSH
71408: LD_INT 0
71410: ST_TO_ADDR
71411: GO 71429
// min_y := y - r ;
71413: LD_ADDR_VAR 0 7
71417: PUSH
71418: LD_VAR 0 2
71422: PUSH
71423: LD_VAR 0 3
71427: MINUS
71428: ST_TO_ADDR
// max_x := x + r ;
71429: LD_ADDR_VAR 0 9
71433: PUSH
71434: LD_VAR 0 1
71438: PUSH
71439: LD_VAR 0 3
71443: PLUS
71444: ST_TO_ADDR
// max_y := y + r ;
71445: LD_ADDR_VAR 0 10
71449: PUSH
71450: LD_VAR 0 2
71454: PUSH
71455: LD_VAR 0 3
71459: PLUS
71460: ST_TO_ADDR
// for _x = min_x to max_x do
71461: LD_ADDR_VAR 0 5
71465: PUSH
71466: DOUBLE
71467: LD_VAR 0 8
71471: DEC
71472: ST_TO_ADDR
71473: LD_VAR 0 9
71477: PUSH
71478: FOR_TO
71479: IFFALSE 71580
// for _y = min_y to max_y do
71481: LD_ADDR_VAR 0 6
71485: PUSH
71486: DOUBLE
71487: LD_VAR 0 7
71491: DEC
71492: ST_TO_ADDR
71493: LD_VAR 0 10
71497: PUSH
71498: FOR_TO
71499: IFFALSE 71576
// begin if not ValidHex ( _x , _y ) then
71501: LD_VAR 0 5
71505: PPUSH
71506: LD_VAR 0 6
71510: PPUSH
71511: CALL_OW 488
71515: NOT
71516: IFFALSE 71520
// continue ;
71518: GO 71498
// if GetResourceTypeXY ( _x , _y ) then
71520: LD_VAR 0 5
71524: PPUSH
71525: LD_VAR 0 6
71529: PPUSH
71530: CALL_OW 283
71534: IFFALSE 71574
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71536: LD_ADDR_VAR 0 4
71540: PUSH
71541: LD_VAR 0 4
71545: PPUSH
71546: LD_VAR 0 4
71550: PUSH
71551: LD_INT 1
71553: PLUS
71554: PPUSH
71555: LD_VAR 0 5
71559: PUSH
71560: LD_VAR 0 6
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PPUSH
71569: CALL_OW 1
71573: ST_TO_ADDR
// end ;
71574: GO 71498
71576: POP
71577: POP
71578: GO 71478
71580: POP
71581: POP
// end ;
71582: LD_VAR 0 4
71586: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71587: LD_INT 0
71589: PPUSH
71590: PPUSH
71591: PPUSH
71592: PPUSH
71593: PPUSH
71594: PPUSH
71595: PPUSH
71596: PPUSH
// if not units then
71597: LD_VAR 0 1
71601: NOT
71602: IFFALSE 71606
// exit ;
71604: GO 72130
// result := UnitFilter ( units , [ f_ok ] ) ;
71606: LD_ADDR_VAR 0 3
71610: PUSH
71611: LD_VAR 0 1
71615: PPUSH
71616: LD_INT 50
71618: PUSH
71619: EMPTY
71620: LIST
71621: PPUSH
71622: CALL_OW 72
71626: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71627: LD_ADDR_VAR 0 8
71631: PUSH
71632: LD_VAR 0 1
71636: PUSH
71637: LD_INT 1
71639: ARRAY
71640: PPUSH
71641: CALL_OW 255
71645: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71646: LD_ADDR_VAR 0 10
71650: PUSH
71651: LD_INT 29
71653: PUSH
71654: LD_INT 91
71656: PUSH
71657: LD_INT 49
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: LIST
71664: ST_TO_ADDR
// if not result then
71665: LD_VAR 0 3
71669: NOT
71670: IFFALSE 71674
// exit ;
71672: GO 72130
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71674: LD_ADDR_VAR 0 5
71678: PUSH
71679: LD_INT 81
71681: PUSH
71682: LD_VAR 0 8
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PPUSH
71691: CALL_OW 69
71695: ST_TO_ADDR
// for i in result do
71696: LD_ADDR_VAR 0 4
71700: PUSH
71701: LD_VAR 0 3
71705: PUSH
71706: FOR_IN
71707: IFFALSE 72128
// begin tag := GetTag ( i ) + 1 ;
71709: LD_ADDR_VAR 0 9
71713: PUSH
71714: LD_VAR 0 4
71718: PPUSH
71719: CALL_OW 110
71723: PUSH
71724: LD_INT 1
71726: PLUS
71727: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71728: LD_ADDR_VAR 0 7
71732: PUSH
71733: LD_VAR 0 4
71737: PPUSH
71738: CALL_OW 250
71742: PPUSH
71743: LD_VAR 0 4
71747: PPUSH
71748: CALL_OW 251
71752: PPUSH
71753: LD_INT 6
71755: PPUSH
71756: CALL 71329 0 3
71760: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71761: LD_VAR 0 4
71765: PPUSH
71766: CALL_OW 247
71770: PUSH
71771: LD_INT 2
71773: EQUAL
71774: PUSH
71775: LD_VAR 0 7
71779: AND
71780: PUSH
71781: LD_VAR 0 4
71785: PPUSH
71786: CALL_OW 264
71790: PUSH
71791: LD_VAR 0 10
71795: IN
71796: NOT
71797: AND
71798: IFFALSE 71837
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71800: LD_VAR 0 4
71804: PPUSH
71805: LD_VAR 0 7
71809: PUSH
71810: LD_INT 1
71812: ARRAY
71813: PUSH
71814: LD_INT 1
71816: ARRAY
71817: PPUSH
71818: LD_VAR 0 7
71822: PUSH
71823: LD_INT 1
71825: ARRAY
71826: PUSH
71827: LD_INT 2
71829: ARRAY
71830: PPUSH
71831: CALL_OW 116
71835: GO 72126
// if path > tag then
71837: LD_VAR 0 2
71841: PUSH
71842: LD_VAR 0 9
71846: GREATER
71847: IFFALSE 72055
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71849: LD_ADDR_VAR 0 6
71853: PUSH
71854: LD_VAR 0 5
71858: PPUSH
71859: LD_INT 91
71861: PUSH
71862: LD_VAR 0 4
71866: PUSH
71867: LD_INT 8
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: LIST
71874: PPUSH
71875: CALL_OW 72
71879: ST_TO_ADDR
// if nearEnemy then
71880: LD_VAR 0 6
71884: IFFALSE 71953
// begin if GetWeapon ( i ) = ru_time_lapser then
71886: LD_VAR 0 4
71890: PPUSH
71891: CALL_OW 264
71895: PUSH
71896: LD_INT 49
71898: EQUAL
71899: IFFALSE 71927
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71901: LD_VAR 0 4
71905: PPUSH
71906: LD_VAR 0 6
71910: PPUSH
71911: LD_VAR 0 4
71915: PPUSH
71916: CALL_OW 74
71920: PPUSH
71921: CALL_OW 112
71925: GO 71951
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71927: LD_VAR 0 4
71931: PPUSH
71932: LD_VAR 0 6
71936: PPUSH
71937: LD_VAR 0 4
71941: PPUSH
71942: CALL_OW 74
71946: PPUSH
71947: CALL_OW 115
// end else
71951: GO 72053
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71953: LD_VAR 0 4
71957: PPUSH
71958: LD_VAR 0 2
71962: PUSH
71963: LD_VAR 0 9
71967: ARRAY
71968: PUSH
71969: LD_INT 1
71971: ARRAY
71972: PPUSH
71973: LD_VAR 0 2
71977: PUSH
71978: LD_VAR 0 9
71982: ARRAY
71983: PUSH
71984: LD_INT 2
71986: ARRAY
71987: PPUSH
71988: CALL_OW 297
71992: PUSH
71993: LD_INT 6
71995: GREATER
71996: IFFALSE 72039
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71998: LD_VAR 0 4
72002: PPUSH
72003: LD_VAR 0 2
72007: PUSH
72008: LD_VAR 0 9
72012: ARRAY
72013: PUSH
72014: LD_INT 1
72016: ARRAY
72017: PPUSH
72018: LD_VAR 0 2
72022: PUSH
72023: LD_VAR 0 9
72027: ARRAY
72028: PUSH
72029: LD_INT 2
72031: ARRAY
72032: PPUSH
72033: CALL_OW 114
72037: GO 72053
// SetTag ( i , tag ) ;
72039: LD_VAR 0 4
72043: PPUSH
72044: LD_VAR 0 9
72048: PPUSH
72049: CALL_OW 109
// end else
72053: GO 72126
// if enemy then
72055: LD_VAR 0 5
72059: IFFALSE 72126
// begin if GetWeapon ( i ) = ru_time_lapser then
72061: LD_VAR 0 4
72065: PPUSH
72066: CALL_OW 264
72070: PUSH
72071: LD_INT 49
72073: EQUAL
72074: IFFALSE 72102
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72076: LD_VAR 0 4
72080: PPUSH
72081: LD_VAR 0 5
72085: PPUSH
72086: LD_VAR 0 4
72090: PPUSH
72091: CALL_OW 74
72095: PPUSH
72096: CALL_OW 112
72100: GO 72126
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72102: LD_VAR 0 4
72106: PPUSH
72107: LD_VAR 0 5
72111: PPUSH
72112: LD_VAR 0 4
72116: PPUSH
72117: CALL_OW 74
72121: PPUSH
72122: CALL_OW 115
// end ; end ;
72126: GO 71706
72128: POP
72129: POP
// end ;
72130: LD_VAR 0 3
72134: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72135: LD_INT 0
72137: PPUSH
72138: PPUSH
72139: PPUSH
// if not unit or IsInUnit ( unit ) then
72140: LD_VAR 0 1
72144: NOT
72145: PUSH
72146: LD_VAR 0 1
72150: PPUSH
72151: CALL_OW 310
72155: OR
72156: IFFALSE 72160
// exit ;
72158: GO 72251
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72160: LD_ADDR_VAR 0 4
72164: PUSH
72165: LD_VAR 0 1
72169: PPUSH
72170: CALL_OW 250
72174: PPUSH
72175: LD_VAR 0 2
72179: PPUSH
72180: LD_INT 1
72182: PPUSH
72183: CALL_OW 272
72187: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72188: LD_ADDR_VAR 0 5
72192: PUSH
72193: LD_VAR 0 1
72197: PPUSH
72198: CALL_OW 251
72202: PPUSH
72203: LD_VAR 0 2
72207: PPUSH
72208: LD_INT 1
72210: PPUSH
72211: CALL_OW 273
72215: ST_TO_ADDR
// if ValidHex ( x , y ) then
72216: LD_VAR 0 4
72220: PPUSH
72221: LD_VAR 0 5
72225: PPUSH
72226: CALL_OW 488
72230: IFFALSE 72251
// ComTurnXY ( unit , x , y ) ;
72232: LD_VAR 0 1
72236: PPUSH
72237: LD_VAR 0 4
72241: PPUSH
72242: LD_VAR 0 5
72246: PPUSH
72247: CALL_OW 118
// end ;
72251: LD_VAR 0 3
72255: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72256: LD_INT 0
72258: PPUSH
72259: PPUSH
// result := false ;
72260: LD_ADDR_VAR 0 3
72264: PUSH
72265: LD_INT 0
72267: ST_TO_ADDR
// if not units then
72268: LD_VAR 0 2
72272: NOT
72273: IFFALSE 72277
// exit ;
72275: GO 72322
// for i in units do
72277: LD_ADDR_VAR 0 4
72281: PUSH
72282: LD_VAR 0 2
72286: PUSH
72287: FOR_IN
72288: IFFALSE 72320
// if See ( side , i ) then
72290: LD_VAR 0 1
72294: PPUSH
72295: LD_VAR 0 4
72299: PPUSH
72300: CALL_OW 292
72304: IFFALSE 72318
// begin result := true ;
72306: LD_ADDR_VAR 0 3
72310: PUSH
72311: LD_INT 1
72313: ST_TO_ADDR
// exit ;
72314: POP
72315: POP
72316: GO 72322
// end ;
72318: GO 72287
72320: POP
72321: POP
// end ;
72322: LD_VAR 0 3
72326: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72327: LD_INT 0
72329: PPUSH
72330: PPUSH
72331: PPUSH
72332: PPUSH
// if not unit or not points then
72333: LD_VAR 0 1
72337: NOT
72338: PUSH
72339: LD_VAR 0 2
72343: NOT
72344: OR
72345: IFFALSE 72349
// exit ;
72347: GO 72439
// dist := 99999 ;
72349: LD_ADDR_VAR 0 5
72353: PUSH
72354: LD_INT 99999
72356: ST_TO_ADDR
// for i in points do
72357: LD_ADDR_VAR 0 4
72361: PUSH
72362: LD_VAR 0 2
72366: PUSH
72367: FOR_IN
72368: IFFALSE 72437
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72370: LD_ADDR_VAR 0 6
72374: PUSH
72375: LD_VAR 0 1
72379: PPUSH
72380: LD_VAR 0 4
72384: PUSH
72385: LD_INT 1
72387: ARRAY
72388: PPUSH
72389: LD_VAR 0 4
72393: PUSH
72394: LD_INT 2
72396: ARRAY
72397: PPUSH
72398: CALL_OW 297
72402: ST_TO_ADDR
// if tmpDist < dist then
72403: LD_VAR 0 6
72407: PUSH
72408: LD_VAR 0 5
72412: LESS
72413: IFFALSE 72435
// begin result := i ;
72415: LD_ADDR_VAR 0 3
72419: PUSH
72420: LD_VAR 0 4
72424: ST_TO_ADDR
// dist := tmpDist ;
72425: LD_ADDR_VAR 0 5
72429: PUSH
72430: LD_VAR 0 6
72434: ST_TO_ADDR
// end ; end ;
72435: GO 72367
72437: POP
72438: POP
// end ;
72439: LD_VAR 0 3
72443: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72444: LD_INT 0
72446: PPUSH
// uc_side := side ;
72447: LD_ADDR_OWVAR 20
72451: PUSH
72452: LD_VAR 0 1
72456: ST_TO_ADDR
// uc_nation := 3 ;
72457: LD_ADDR_OWVAR 21
72461: PUSH
72462: LD_INT 3
72464: ST_TO_ADDR
// vc_chassis := 25 ;
72465: LD_ADDR_OWVAR 37
72469: PUSH
72470: LD_INT 25
72472: ST_TO_ADDR
// vc_engine := engine_siberite ;
72473: LD_ADDR_OWVAR 39
72477: PUSH
72478: LD_INT 3
72480: ST_TO_ADDR
// vc_control := control_computer ;
72481: LD_ADDR_OWVAR 38
72485: PUSH
72486: LD_INT 3
72488: ST_TO_ADDR
// vc_weapon := 59 ;
72489: LD_ADDR_OWVAR 40
72493: PUSH
72494: LD_INT 59
72496: ST_TO_ADDR
// result := CreateVehicle ;
72497: LD_ADDR_VAR 0 5
72501: PUSH
72502: CALL_OW 45
72506: ST_TO_ADDR
// SetDir ( result , d ) ;
72507: LD_VAR 0 5
72511: PPUSH
72512: LD_VAR 0 4
72516: PPUSH
72517: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72521: LD_VAR 0 5
72525: PPUSH
72526: LD_VAR 0 2
72530: PPUSH
72531: LD_VAR 0 3
72535: PPUSH
72536: LD_INT 0
72538: PPUSH
72539: CALL_OW 48
// end ;
72543: LD_VAR 0 5
72547: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72548: LD_INT 0
72550: PPUSH
72551: PPUSH
72552: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72553: LD_ADDR_VAR 0 2
72557: PUSH
72558: LD_INT 0
72560: PUSH
72561: LD_INT 0
72563: PUSH
72564: LD_INT 0
72566: PUSH
72567: LD_INT 0
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72576: LD_VAR 0 1
72580: NOT
72581: PUSH
72582: LD_VAR 0 1
72586: PPUSH
72587: CALL_OW 264
72591: PUSH
72592: LD_INT 12
72594: PUSH
72595: LD_INT 51
72597: PUSH
72598: LD_INT 32
72600: PUSH
72601: LD_INT 89
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: IN
72610: NOT
72611: OR
72612: IFFALSE 72616
// exit ;
72614: GO 72714
// for i := 1 to 3 do
72616: LD_ADDR_VAR 0 3
72620: PUSH
72621: DOUBLE
72622: LD_INT 1
72624: DEC
72625: ST_TO_ADDR
72626: LD_INT 3
72628: PUSH
72629: FOR_TO
72630: IFFALSE 72712
// begin tmp := GetCargo ( cargo , i ) ;
72632: LD_ADDR_VAR 0 4
72636: PUSH
72637: LD_VAR 0 1
72641: PPUSH
72642: LD_VAR 0 3
72646: PPUSH
72647: CALL_OW 289
72651: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72652: LD_ADDR_VAR 0 2
72656: PUSH
72657: LD_VAR 0 2
72661: PPUSH
72662: LD_VAR 0 3
72666: PPUSH
72667: LD_VAR 0 4
72671: PPUSH
72672: CALL_OW 1
72676: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72677: LD_ADDR_VAR 0 2
72681: PUSH
72682: LD_VAR 0 2
72686: PPUSH
72687: LD_INT 4
72689: PPUSH
72690: LD_VAR 0 2
72694: PUSH
72695: LD_INT 4
72697: ARRAY
72698: PUSH
72699: LD_VAR 0 4
72703: PLUS
72704: PPUSH
72705: CALL_OW 1
72709: ST_TO_ADDR
// end ;
72710: GO 72629
72712: POP
72713: POP
// end ;
72714: LD_VAR 0 2
72718: RET
// export function Length ( array ) ; begin
72719: LD_INT 0
72721: PPUSH
// result := array + 0 ;
72722: LD_ADDR_VAR 0 2
72726: PUSH
72727: LD_VAR 0 1
72731: PUSH
72732: LD_INT 0
72734: PLUS
72735: ST_TO_ADDR
// end ;
72736: LD_VAR 0 2
72740: RET
// export function PrepareArray ( array ) ; begin
72741: LD_INT 0
72743: PPUSH
// result := array diff 0 ;
72744: LD_ADDR_VAR 0 2
72748: PUSH
72749: LD_VAR 0 1
72753: PUSH
72754: LD_INT 0
72756: DIFF
72757: ST_TO_ADDR
// if not result [ 1 ] then
72758: LD_VAR 0 2
72762: PUSH
72763: LD_INT 1
72765: ARRAY
72766: NOT
72767: IFFALSE 72787
// result := Delete ( result , 1 ) ;
72769: LD_ADDR_VAR 0 2
72773: PUSH
72774: LD_VAR 0 2
72778: PPUSH
72779: LD_INT 1
72781: PPUSH
72782: CALL_OW 3
72786: ST_TO_ADDR
// end ;
72787: LD_VAR 0 2
72791: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72792: LD_INT 0
72794: PPUSH
72795: PPUSH
72796: PPUSH
72797: PPUSH
// sibRocketRange := 25 ;
72798: LD_ADDR_VAR 0 6
72802: PUSH
72803: LD_INT 25
72805: ST_TO_ADDR
// result := false ;
72806: LD_ADDR_VAR 0 4
72810: PUSH
72811: LD_INT 0
72813: ST_TO_ADDR
// for i := 0 to 5 do
72814: LD_ADDR_VAR 0 5
72818: PUSH
72819: DOUBLE
72820: LD_INT 0
72822: DEC
72823: ST_TO_ADDR
72824: LD_INT 5
72826: PUSH
72827: FOR_TO
72828: IFFALSE 72895
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72830: LD_VAR 0 1
72834: PPUSH
72835: LD_VAR 0 5
72839: PPUSH
72840: LD_VAR 0 6
72844: PPUSH
72845: CALL_OW 272
72849: PPUSH
72850: LD_VAR 0 2
72854: PPUSH
72855: LD_VAR 0 5
72859: PPUSH
72860: LD_VAR 0 6
72864: PPUSH
72865: CALL_OW 273
72869: PPUSH
72870: LD_VAR 0 3
72874: PPUSH
72875: CALL_OW 309
72879: IFFALSE 72893
// begin result := true ;
72881: LD_ADDR_VAR 0 4
72885: PUSH
72886: LD_INT 1
72888: ST_TO_ADDR
// exit ;
72889: POP
72890: POP
72891: GO 72897
// end ;
72893: GO 72827
72895: POP
72896: POP
// end ;
72897: LD_VAR 0 4
72901: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72902: LD_INT 0
72904: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72905: LD_VAR 0 1
72909: PPUSH
72910: LD_VAR 0 2
72914: PPUSH
72915: LD_INT 0
72917: PPUSH
72918: LD_INT 0
72920: PPUSH
72921: LD_INT 1
72923: PPUSH
72924: LD_INT 0
72926: PPUSH
72927: CALL_OW 587
// end ; end_of_file
72931: LD_VAR 0 3
72935: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72936: LD_VAR 0 1
72940: PUSH
72941: LD_INT 200
72943: DOUBLE
72944: GREATEREQUAL
72945: IFFALSE 72953
72947: LD_INT 299
72949: DOUBLE
72950: LESSEQUAL
72951: IFTRUE 72955
72953: GO 72987
72955: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72956: LD_VAR 0 1
72960: PPUSH
72961: LD_VAR 0 2
72965: PPUSH
72966: LD_VAR 0 3
72970: PPUSH
72971: LD_VAR 0 4
72975: PPUSH
72976: LD_VAR 0 5
72980: PPUSH
72981: CALL 27602 0 5
72985: GO 73064
72987: LD_INT 300
72989: DOUBLE
72990: GREATEREQUAL
72991: IFFALSE 72999
72993: LD_INT 399
72995: DOUBLE
72996: LESSEQUAL
72997: IFTRUE 73001
72999: GO 73063
73001: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73002: LD_VAR 0 1
73006: PPUSH
73007: LD_VAR 0 2
73011: PPUSH
73012: LD_VAR 0 3
73016: PPUSH
73017: LD_VAR 0 4
73021: PPUSH
73022: LD_VAR 0 5
73026: PPUSH
73027: LD_VAR 0 6
73031: PPUSH
73032: LD_VAR 0 7
73036: PPUSH
73037: LD_VAR 0 8
73041: PPUSH
73042: LD_VAR 0 9
73046: PPUSH
73047: LD_VAR 0 10
73051: PPUSH
73052: LD_VAR 0 11
73056: PPUSH
73057: CALL 23935 0 11
73061: GO 73064
73063: POP
// end ;
73064: PPOPN 11
73066: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73067: LD_VAR 0 1
73071: PPUSH
73072: LD_VAR 0 2
73076: PPUSH
73077: LD_VAR 0 3
73081: PPUSH
73082: LD_VAR 0 4
73086: PPUSH
73087: LD_VAR 0 5
73091: PPUSH
73092: CALL 27338 0 5
// end ; end_of_file
73096: PPOPN 5
73098: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73099: LD_VAR 0 1
73103: PPUSH
73104: LD_VAR 0 2
73108: PPUSH
73109: LD_VAR 0 3
73113: PPUSH
73114: LD_VAR 0 4
73118: PPUSH
73119: LD_VAR 0 5
73123: PPUSH
73124: LD_VAR 0 6
73128: PPUSH
73129: CALL 11587 0 6
// end ;
73133: PPOPN 6
73135: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73136: LD_INT 0
73138: PPUSH
// begin if not units then
73139: LD_VAR 0 1
73143: NOT
73144: IFFALSE 73148
// exit ;
73146: GO 73148
// end ;
73148: PPOPN 7
73150: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73151: CALL 11491 0 0
// end ;
73155: PPOPN 1
73157: END
