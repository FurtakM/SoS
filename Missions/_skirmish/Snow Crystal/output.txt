// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 1 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: IFFALSE 10654
// YouLost ( jota-lose ) ;
10647: LD_STRING jota-lose
10649: PPUSH
10650: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10654: LD_EXP 1
10658: PUSH
10659: LD_INT 2
10661: EQUAL
10662: PUSH
10663: LD_EXP 8
10667: PUSH
10668: LD_INT 0
10670: EQUAL
10671: AND
10672: IFFALSE 10987
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 255
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: LD_INT 11
10695: PPUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 70
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 10
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 30
10746: PUSH
10747: LD_INT 8
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: DIFF
10778: IN
10779: AND
10780: IFFALSE 10866
// begin ai_build := ai_build ^ GetBType ( un ) ;
10782: LD_ADDR_EXP 10
10786: PUSH
10787: LD_EXP 10
10791: PUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 266
10801: ADD
10802: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10803: LD_ADDR_EXP 10
10807: PUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 250
10822: ADD
10823: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10824: LD_ADDR_EXP 10
10828: PUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 251
10843: ADD
10844: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10845: LD_ADDR_EXP 10
10849: PUSH
10850: LD_EXP 10
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 254
10864: ADD
10865: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 255
10875: PUSH
10876: LD_INT 1
10878: EQUAL
10879: PUSH
10880: LD_VAR 0 1
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: IN
10900: AND
10901: IFFALSE 10987
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10903: LD_ADDR_EXP 11
10907: PUSH
10908: LD_EXP 11
10912: PUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 265
10922: ADD
10923: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10924: LD_ADDR_EXP 11
10928: PUSH
10929: LD_EXP 11
10933: PUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 262
10943: ADD
10944: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10945: LD_ADDR_EXP 11
10949: PUSH
10950: LD_EXP 11
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: CALL_OW 263
10964: ADD
10965: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10966: LD_ADDR_EXP 11
10970: PUSH
10971: LD_EXP 11
10975: PUSH
10976: LD_VAR 0 1
10980: PPUSH
10981: CALL_OW 264
10985: ADD
10986: ST_TO_ADDR
// end ; end ; end ;
10987: PPOPN 1
10989: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10990: LD_EXP 1
10994: PUSH
10995: LD_INT 1
10997: EQUAL
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PUSH
11028: LD_INT 0
11030: EQUAL
11031: AND
11032: IFFALSE 11044
11034: GO 11036
11036: DISABLE
// YouLost ( peo-lose ) ;
11037: LD_STRING peo-lose
11039: PPUSH
11040: CALL_OW 104
11044: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11045: LD_EXP 1
11049: PUSH
11050: LD_INT 2
11052: EQUAL
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: PUSH
11083: LD_INT 0
11085: EQUAL
11086: AND
11087: IFFALSE 11099
11089: GO 11091
11091: DISABLE
// YouLost ( peo-lose ) ;
11092: LD_STRING peo-lose
11094: PPUSH
11095: CALL_OW 104
11099: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
11100: LD_OWVAR 2
11104: PPUSH
11105: CALL 10510 0 1
11109: PUSH
11110: LD_EXP 5
11114: GREATEREQUAL
11115: IFFALSE 11201
11117: GO 11119
11119: DISABLE
11120: LD_INT 0
11122: PPUSH
// begin if GetSide ( jota_base ) = your_side then
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 255
11130: PUSH
11131: LD_OWVAR 2
11135: EQUAL
11136: IFFALSE 11179
// begin for i = 1 to 3 do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: DOUBLE
11144: LD_INT 1
11146: DEC
11147: ST_TO_ADDR
11148: LD_INT 3
11150: PUSH
11151: FOR_TO
11152: IFFALSE 11166
// AddMedal ( med , 1 ) ;
11154: LD_STRING med
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 101
11164: GO 11151
11166: POP
11167: POP
// GiveMedals ( MAIN ) ;
11168: LD_STRING MAIN
11170: PPUSH
11171: CALL_OW 102
// YouWin ;
11175: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: LD_OWVAR 2
11191: NONEQUAL
11192: IFFALSE 11201
// YouLost ( source ) ;
11194: LD_STRING source
11196: PPUSH
11197: CALL_OW 104
// end ; end_of_file
11201: PPOPN 1
11203: END
// every 2 2$05 + 0 0$11 do
11204: GO 11206
11206: DISABLE
// begin enable ;
11207: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11208: LD_INT 1
11210: PPUSH
11211: LD_INT 5
11213: PPUSH
11214: CALL_OW 12
11218: PPUSH
11219: LD_INT 7
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11229: LD_INT 350
11231: PPUSH
11232: LD_INT 1295
11234: PPUSH
11235: CALL_OW 12
11239: PPUSH
11240: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 5
11249: PPUSH
11250: CALL_OW 12
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 57
// end ;
11262: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11263: LD_EXP 1
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: PUSH
11272: LD_EXP 8
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: AND
11281: IFFALSE 11371
11283: GO 11285
11285: DISABLE
// begin enable ;
11286: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 7
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11308: LD_INT 350
11310: PPUSH
11311: LD_INT 1750
11313: PPUSH
11314: CALL_OW 12
11318: PPUSH
11319: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11323: LD_EXP 6
11327: PUSH
11328: LD_INT 73500
11330: PUSH
11331: LD_INT 63000
11333: PUSH
11334: LD_INT 52500
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_EXP 2
11346: ARRAY
11347: LESSEQUAL
11348: IFFALSE 11371
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 5
11355: PPUSH
11356: CALL_OW 12
11360: PPUSH
11361: LD_INT 12
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 55
// end ; end_of_file
11371: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: CALL 22633 0 3
// end ;
11391: PPOPN 3
11393: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL 22641 0 1
// end ; end_of_file
11403: PPOPN 1
11405: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
11406: GO 11408
11408: DISABLE
// begin ru_radar := 98 ;
11409: LD_ADDR_EXP 21
11413: PUSH
11414: LD_INT 98
11416: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11417: LD_ADDR_EXP 22
11421: PUSH
11422: LD_INT 89
11424: ST_TO_ADDR
// us_hack := 99 ;
11425: LD_ADDR_EXP 23
11429: PUSH
11430: LD_INT 99
11432: ST_TO_ADDR
// us_artillery := 97 ;
11433: LD_ADDR_EXP 24
11437: PUSH
11438: LD_INT 97
11440: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11441: LD_ADDR_EXP 25
11445: PUSH
11446: LD_INT 91
11448: ST_TO_ADDR
// tech_Artillery := 80 ;
11449: LD_ADDR_EXP 26
11453: PUSH
11454: LD_INT 80
11456: ST_TO_ADDR
// tech_RadMat := 81 ;
11457: LD_ADDR_EXP 27
11461: PUSH
11462: LD_INT 81
11464: ST_TO_ADDR
// tech_BasicTools := 82 ;
11465: LD_ADDR_EXP 28
11469: PUSH
11470: LD_INT 82
11472: ST_TO_ADDR
// tech_Cargo := 83 ;
11473: LD_ADDR_EXP 29
11477: PUSH
11478: LD_INT 83
11480: ST_TO_ADDR
// tech_Track := 84 ;
11481: LD_ADDR_EXP 30
11485: PUSH
11486: LD_INT 84
11488: ST_TO_ADDR
// tech_Crane := 85 ;
11489: LD_ADDR_EXP 31
11493: PUSH
11494: LD_INT 85
11496: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11497: LD_ADDR_EXP 32
11501: PUSH
11502: LD_INT 86
11504: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11505: LD_ADDR_EXP 33
11509: PUSH
11510: LD_INT 87
11512: ST_TO_ADDR
// end ; end_of_file end_of_file
11513: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11514: GO 11516
11516: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11517: LD_STRING initStreamRollete();
11519: PPUSH
11520: CALL_OW 559
// InitStreamMode ;
11524: CALL 11533 0 0
// DefineStreamItems ( ) ;
11528: CALL 11973 0 0
// end ;
11532: END
// function InitStreamMode ; begin
11533: LD_INT 0
11535: PPUSH
// streamModeActive := false ;
11536: LD_ADDR_EXP 34
11540: PUSH
11541: LD_INT 0
11543: ST_TO_ADDR
// normalCounter := 36 ;
11544: LD_ADDR_EXP 35
11548: PUSH
11549: LD_INT 36
11551: ST_TO_ADDR
// hardcoreCounter := 16 ;
11552: LD_ADDR_EXP 36
11556: PUSH
11557: LD_INT 16
11559: ST_TO_ADDR
// sRocket := false ;
11560: LD_ADDR_EXP 39
11564: PUSH
11565: LD_INT 0
11567: ST_TO_ADDR
// sSpeed := false ;
11568: LD_ADDR_EXP 38
11572: PUSH
11573: LD_INT 0
11575: ST_TO_ADDR
// sEngine := false ;
11576: LD_ADDR_EXP 40
11580: PUSH
11581: LD_INT 0
11583: ST_TO_ADDR
// sSpec := false ;
11584: LD_ADDR_EXP 37
11588: PUSH
11589: LD_INT 0
11591: ST_TO_ADDR
// sLevel := false ;
11592: LD_ADDR_EXP 41
11596: PUSH
11597: LD_INT 0
11599: ST_TO_ADDR
// sArmoury := false ;
11600: LD_ADDR_EXP 42
11604: PUSH
11605: LD_INT 0
11607: ST_TO_ADDR
// sRadar := false ;
11608: LD_ADDR_EXP 43
11612: PUSH
11613: LD_INT 0
11615: ST_TO_ADDR
// sBunker := false ;
11616: LD_ADDR_EXP 44
11620: PUSH
11621: LD_INT 0
11623: ST_TO_ADDR
// sHack := false ;
11624: LD_ADDR_EXP 45
11628: PUSH
11629: LD_INT 0
11631: ST_TO_ADDR
// sFire := false ;
11632: LD_ADDR_EXP 46
11636: PUSH
11637: LD_INT 0
11639: ST_TO_ADDR
// sRefresh := false ;
11640: LD_ADDR_EXP 47
11644: PUSH
11645: LD_INT 0
11647: ST_TO_ADDR
// sExp := false ;
11648: LD_ADDR_EXP 48
11652: PUSH
11653: LD_INT 0
11655: ST_TO_ADDR
// sDepot := false ;
11656: LD_ADDR_EXP 49
11660: PUSH
11661: LD_INT 0
11663: ST_TO_ADDR
// sFlag := false ;
11664: LD_ADDR_EXP 50
11668: PUSH
11669: LD_INT 0
11671: ST_TO_ADDR
// sKamikadze := false ;
11672: LD_ADDR_EXP 58
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// sTroll := false ;
11680: LD_ADDR_EXP 59
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// sSlow := false ;
11688: LD_ADDR_EXP 60
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// sLack := false ;
11696: LD_ADDR_EXP 61
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// sTank := false ;
11704: LD_ADDR_EXP 63
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// sRemote := false ;
11712: LD_ADDR_EXP 64
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// sPowell := false ;
11720: LD_ADDR_EXP 65
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sTeleport := false ;
11728: LD_ADDR_EXP 68
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// sOilTower := false ;
11736: LD_ADDR_EXP 70
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// sShovel := false ;
11744: LD_ADDR_EXP 71
11748: PUSH
11749: LD_INT 0
11751: ST_TO_ADDR
// sSheik := false ;
11752: LD_ADDR_EXP 72
11756: PUSH
11757: LD_INT 0
11759: ST_TO_ADDR
// sEarthquake := false ;
11760: LD_ADDR_EXP 74
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// sAI := false ;
11768: LD_ADDR_EXP 75
11772: PUSH
11773: LD_INT 0
11775: ST_TO_ADDR
// sCargo := false ;
11776: LD_ADDR_EXP 78
11780: PUSH
11781: LD_INT 0
11783: ST_TO_ADDR
// sDLaser := false ;
11784: LD_ADDR_EXP 79
11788: PUSH
11789: LD_INT 0
11791: ST_TO_ADDR
// sExchange := false ;
11792: LD_ADDR_EXP 80
11796: PUSH
11797: LD_INT 0
11799: ST_TO_ADDR
// sFac := false ;
11800: LD_ADDR_EXP 81
11804: PUSH
11805: LD_INT 0
11807: ST_TO_ADDR
// sPower := false ;
11808: LD_ADDR_EXP 82
11812: PUSH
11813: LD_INT 0
11815: ST_TO_ADDR
// sRandom := false ;
11816: LD_ADDR_EXP 83
11820: PUSH
11821: LD_INT 0
11823: ST_TO_ADDR
// sShield := false ;
11824: LD_ADDR_EXP 84
11828: PUSH
11829: LD_INT 0
11831: ST_TO_ADDR
// sTime := false ;
11832: LD_ADDR_EXP 85
11836: PUSH
11837: LD_INT 0
11839: ST_TO_ADDR
// sTools := false ;
11840: LD_ADDR_EXP 86
11844: PUSH
11845: LD_INT 0
11847: ST_TO_ADDR
// sSold := false ;
11848: LD_ADDR_EXP 51
11852: PUSH
11853: LD_INT 0
11855: ST_TO_ADDR
// sDiff := false ;
11856: LD_ADDR_EXP 52
11860: PUSH
11861: LD_INT 0
11863: ST_TO_ADDR
// sFog := false ;
11864: LD_ADDR_EXP 55
11868: PUSH
11869: LD_INT 0
11871: ST_TO_ADDR
// sReset := false ;
11872: LD_ADDR_EXP 56
11876: PUSH
11877: LD_INT 0
11879: ST_TO_ADDR
// sSun := false ;
11880: LD_ADDR_EXP 57
11884: PUSH
11885: LD_INT 0
11887: ST_TO_ADDR
// sTiger := false ;
11888: LD_ADDR_EXP 53
11892: PUSH
11893: LD_INT 0
11895: ST_TO_ADDR
// sBomb := false ;
11896: LD_ADDR_EXP 54
11900: PUSH
11901: LD_INT 0
11903: ST_TO_ADDR
// sWound := false ;
11904: LD_ADDR_EXP 62
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// sBetray := false ;
11912: LD_ADDR_EXP 66
11916: PUSH
11917: LD_INT 0
11919: ST_TO_ADDR
// sContamin := false ;
11920: LD_ADDR_EXP 67
11924: PUSH
11925: LD_INT 0
11927: ST_TO_ADDR
// sOil := false ;
11928: LD_ADDR_EXP 69
11932: PUSH
11933: LD_INT 0
11935: ST_TO_ADDR
// sStu := false ;
11936: LD_ADDR_EXP 73
11940: PUSH
11941: LD_INT 0
11943: ST_TO_ADDR
// sBazooka := false ;
11944: LD_ADDR_EXP 76
11948: PUSH
11949: LD_INT 0
11951: ST_TO_ADDR
// sMortar := false ;
11952: LD_ADDR_EXP 77
11956: PUSH
11957: LD_INT 0
11959: ST_TO_ADDR
// sRanger := false ;
11960: LD_ADDR_EXP 87
11964: PUSH
11965: LD_INT 0
11967: ST_TO_ADDR
// end ;
11968: LD_VAR 0 1
11972: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11973: LD_INT 0
11975: PPUSH
11976: PPUSH
11977: PPUSH
11978: PPUSH
11979: PPUSH
// result := [ ] ;
11980: LD_ADDR_VAR 0 1
11984: PUSH
11985: EMPTY
11986: ST_TO_ADDR
// if campaign_id = 1 then
11987: LD_OWVAR 69
11991: PUSH
11992: LD_INT 1
11994: EQUAL
11995: IFFALSE 14933
// begin case mission_number of 1 :
11997: LD_OWVAR 70
12001: PUSH
12002: LD_INT 1
12004: DOUBLE
12005: EQUAL
12006: IFTRUE 12010
12008: GO 12074
12010: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12011: LD_ADDR_VAR 0 1
12015: PUSH
12016: LD_INT 2
12018: PUSH
12019: LD_INT 4
12021: PUSH
12022: LD_INT 11
12024: PUSH
12025: LD_INT 12
12027: PUSH
12028: LD_INT 15
12030: PUSH
12031: LD_INT 16
12033: PUSH
12034: LD_INT 22
12036: PUSH
12037: LD_INT 23
12039: PUSH
12040: LD_INT 26
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 101
12056: PUSH
12057: LD_INT 102
12059: PUSH
12060: LD_INT 106
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: ST_TO_ADDR
12072: GO 14931
12074: LD_INT 2
12076: DOUBLE
12077: EQUAL
12078: IFTRUE 12082
12080: GO 12154
12082: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12083: LD_ADDR_VAR 0 1
12087: PUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 4
12093: PUSH
12094: LD_INT 11
12096: PUSH
12097: LD_INT 12
12099: PUSH
12100: LD_INT 15
12102: PUSH
12103: LD_INT 16
12105: PUSH
12106: LD_INT 22
12108: PUSH
12109: LD_INT 23
12111: PUSH
12112: LD_INT 26
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 101
12128: PUSH
12129: LD_INT 102
12131: PUSH
12132: LD_INT 105
12134: PUSH
12135: LD_INT 106
12137: PUSH
12138: LD_INT 108
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: ST_TO_ADDR
12152: GO 14931
12154: LD_INT 3
12156: DOUBLE
12157: EQUAL
12158: IFTRUE 12162
12160: GO 12238
12162: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12163: LD_ADDR_VAR 0 1
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: LD_INT 4
12173: PUSH
12174: LD_INT 5
12176: PUSH
12177: LD_INT 11
12179: PUSH
12180: LD_INT 12
12182: PUSH
12183: LD_INT 15
12185: PUSH
12186: LD_INT 16
12188: PUSH
12189: LD_INT 22
12191: PUSH
12192: LD_INT 26
12194: PUSH
12195: LD_INT 36
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 101
12212: PUSH
12213: LD_INT 102
12215: PUSH
12216: LD_INT 105
12218: PUSH
12219: LD_INT 106
12221: PUSH
12222: LD_INT 108
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: ST_TO_ADDR
12236: GO 14931
12238: LD_INT 4
12240: DOUBLE
12241: EQUAL
12242: IFTRUE 12246
12244: GO 12330
12246: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12247: LD_ADDR_VAR 0 1
12251: PUSH
12252: LD_INT 2
12254: PUSH
12255: LD_INT 4
12257: PUSH
12258: LD_INT 5
12260: PUSH
12261: LD_INT 8
12263: PUSH
12264: LD_INT 11
12266: PUSH
12267: LD_INT 12
12269: PUSH
12270: LD_INT 15
12272: PUSH
12273: LD_INT 16
12275: PUSH
12276: LD_INT 22
12278: PUSH
12279: LD_INT 23
12281: PUSH
12282: LD_INT 26
12284: PUSH
12285: LD_INT 36
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 101
12304: PUSH
12305: LD_INT 102
12307: PUSH
12308: LD_INT 105
12310: PUSH
12311: LD_INT 106
12313: PUSH
12314: LD_INT 108
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: ST_TO_ADDR
12328: GO 14931
12330: LD_INT 5
12332: DOUBLE
12333: EQUAL
12334: IFTRUE 12338
12336: GO 12438
12338: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12339: LD_ADDR_VAR 0 1
12343: PUSH
12344: LD_INT 2
12346: PUSH
12347: LD_INT 4
12349: PUSH
12350: LD_INT 5
12352: PUSH
12353: LD_INT 6
12355: PUSH
12356: LD_INT 8
12358: PUSH
12359: LD_INT 11
12361: PUSH
12362: LD_INT 12
12364: PUSH
12365: LD_INT 15
12367: PUSH
12368: LD_INT 16
12370: PUSH
12371: LD_INT 22
12373: PUSH
12374: LD_INT 23
12376: PUSH
12377: LD_INT 25
12379: PUSH
12380: LD_INT 26
12382: PUSH
12383: LD_INT 36
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 101
12404: PUSH
12405: LD_INT 102
12407: PUSH
12408: LD_INT 105
12410: PUSH
12411: LD_INT 106
12413: PUSH
12414: LD_INT 108
12416: PUSH
12417: LD_INT 109
12419: PUSH
12420: LD_INT 112
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: ST_TO_ADDR
12436: GO 14931
12438: LD_INT 6
12440: DOUBLE
12441: EQUAL
12442: IFTRUE 12446
12444: GO 12566
12446: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12447: LD_ADDR_VAR 0 1
12451: PUSH
12452: LD_INT 2
12454: PUSH
12455: LD_INT 4
12457: PUSH
12458: LD_INT 5
12460: PUSH
12461: LD_INT 6
12463: PUSH
12464: LD_INT 8
12466: PUSH
12467: LD_INT 11
12469: PUSH
12470: LD_INT 12
12472: PUSH
12473: LD_INT 15
12475: PUSH
12476: LD_INT 16
12478: PUSH
12479: LD_INT 20
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 22
12487: PUSH
12488: LD_INT 23
12490: PUSH
12491: LD_INT 25
12493: PUSH
12494: LD_INT 26
12496: PUSH
12497: LD_INT 30
12499: PUSH
12500: LD_INT 31
12502: PUSH
12503: LD_INT 32
12505: PUSH
12506: LD_INT 36
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 101
12532: PUSH
12533: LD_INT 102
12535: PUSH
12536: LD_INT 105
12538: PUSH
12539: LD_INT 106
12541: PUSH
12542: LD_INT 108
12544: PUSH
12545: LD_INT 109
12547: PUSH
12548: LD_INT 112
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: ST_TO_ADDR
12564: GO 14931
12566: LD_INT 7
12568: DOUBLE
12569: EQUAL
12570: IFTRUE 12574
12572: GO 12674
12574: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12575: LD_ADDR_VAR 0 1
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: LD_INT 4
12585: PUSH
12586: LD_INT 5
12588: PUSH
12589: LD_INT 7
12591: PUSH
12592: LD_INT 11
12594: PUSH
12595: LD_INT 12
12597: PUSH
12598: LD_INT 15
12600: PUSH
12601: LD_INT 16
12603: PUSH
12604: LD_INT 20
12606: PUSH
12607: LD_INT 21
12609: PUSH
12610: LD_INT 22
12612: PUSH
12613: LD_INT 23
12615: PUSH
12616: LD_INT 25
12618: PUSH
12619: LD_INT 26
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 101
12640: PUSH
12641: LD_INT 102
12643: PUSH
12644: LD_INT 103
12646: PUSH
12647: LD_INT 105
12649: PUSH
12650: LD_INT 106
12652: PUSH
12653: LD_INT 108
12655: PUSH
12656: LD_INT 112
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: ST_TO_ADDR
12672: GO 14931
12674: LD_INT 8
12676: DOUBLE
12677: EQUAL
12678: IFTRUE 12682
12680: GO 12810
12682: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12683: LD_ADDR_VAR 0 1
12687: PUSH
12688: LD_INT 2
12690: PUSH
12691: LD_INT 4
12693: PUSH
12694: LD_INT 5
12696: PUSH
12697: LD_INT 6
12699: PUSH
12700: LD_INT 7
12702: PUSH
12703: LD_INT 8
12705: PUSH
12706: LD_INT 11
12708: PUSH
12709: LD_INT 12
12711: PUSH
12712: LD_INT 15
12714: PUSH
12715: LD_INT 16
12717: PUSH
12718: LD_INT 20
12720: PUSH
12721: LD_INT 21
12723: PUSH
12724: LD_INT 22
12726: PUSH
12727: LD_INT 23
12729: PUSH
12730: LD_INT 25
12732: PUSH
12733: LD_INT 26
12735: PUSH
12736: LD_INT 30
12738: PUSH
12739: LD_INT 31
12741: PUSH
12742: LD_INT 32
12744: PUSH
12745: LD_INT 36
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 101
12772: PUSH
12773: LD_INT 102
12775: PUSH
12776: LD_INT 103
12778: PUSH
12779: LD_INT 105
12781: PUSH
12782: LD_INT 106
12784: PUSH
12785: LD_INT 108
12787: PUSH
12788: LD_INT 109
12790: PUSH
12791: LD_INT 112
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: ST_TO_ADDR
12808: GO 14931
12810: LD_INT 9
12812: DOUBLE
12813: EQUAL
12814: IFTRUE 12818
12816: GO 12954
12818: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_INT 2
12826: PUSH
12827: LD_INT 4
12829: PUSH
12830: LD_INT 5
12832: PUSH
12833: LD_INT 6
12835: PUSH
12836: LD_INT 7
12838: PUSH
12839: LD_INT 8
12841: PUSH
12842: LD_INT 11
12844: PUSH
12845: LD_INT 12
12847: PUSH
12848: LD_INT 15
12850: PUSH
12851: LD_INT 16
12853: PUSH
12854: LD_INT 20
12856: PUSH
12857: LD_INT 21
12859: PUSH
12860: LD_INT 22
12862: PUSH
12863: LD_INT 23
12865: PUSH
12866: LD_INT 25
12868: PUSH
12869: LD_INT 26
12871: PUSH
12872: LD_INT 28
12874: PUSH
12875: LD_INT 30
12877: PUSH
12878: LD_INT 31
12880: PUSH
12881: LD_INT 32
12883: PUSH
12884: LD_INT 36
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 101
12912: PUSH
12913: LD_INT 102
12915: PUSH
12916: LD_INT 103
12918: PUSH
12919: LD_INT 105
12921: PUSH
12922: LD_INT 106
12924: PUSH
12925: LD_INT 108
12927: PUSH
12928: LD_INT 109
12930: PUSH
12931: LD_INT 112
12933: PUSH
12934: LD_INT 114
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: ST_TO_ADDR
12952: GO 14931
12954: LD_INT 10
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 13146
12962: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12963: LD_ADDR_VAR 0 1
12967: PUSH
12968: LD_INT 2
12970: PUSH
12971: LD_INT 4
12973: PUSH
12974: LD_INT 5
12976: PUSH
12977: LD_INT 6
12979: PUSH
12980: LD_INT 7
12982: PUSH
12983: LD_INT 8
12985: PUSH
12986: LD_INT 9
12988: PUSH
12989: LD_INT 10
12991: PUSH
12992: LD_INT 11
12994: PUSH
12995: LD_INT 12
12997: PUSH
12998: LD_INT 13
13000: PUSH
13001: LD_INT 14
13003: PUSH
13004: LD_INT 15
13006: PUSH
13007: LD_INT 16
13009: PUSH
13010: LD_INT 17
13012: PUSH
13013: LD_INT 18
13015: PUSH
13016: LD_INT 19
13018: PUSH
13019: LD_INT 20
13021: PUSH
13022: LD_INT 21
13024: PUSH
13025: LD_INT 22
13027: PUSH
13028: LD_INT 23
13030: PUSH
13031: LD_INT 24
13033: PUSH
13034: LD_INT 25
13036: PUSH
13037: LD_INT 26
13039: PUSH
13040: LD_INT 28
13042: PUSH
13043: LD_INT 30
13045: PUSH
13046: LD_INT 31
13048: PUSH
13049: LD_INT 32
13051: PUSH
13052: LD_INT 36
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 101
13088: PUSH
13089: LD_INT 102
13091: PUSH
13092: LD_INT 103
13094: PUSH
13095: LD_INT 104
13097: PUSH
13098: LD_INT 105
13100: PUSH
13101: LD_INT 106
13103: PUSH
13104: LD_INT 107
13106: PUSH
13107: LD_INT 108
13109: PUSH
13110: LD_INT 109
13112: PUSH
13113: LD_INT 110
13115: PUSH
13116: LD_INT 111
13118: PUSH
13119: LD_INT 112
13121: PUSH
13122: LD_INT 114
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: ST_TO_ADDR
13144: GO 14931
13146: LD_INT 11
13148: DOUBLE
13149: EQUAL
13150: IFTRUE 13154
13152: GO 13346
13154: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13155: LD_ADDR_VAR 0 1
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: LD_INT 3
13165: PUSH
13166: LD_INT 4
13168: PUSH
13169: LD_INT 5
13171: PUSH
13172: LD_INT 6
13174: PUSH
13175: LD_INT 7
13177: PUSH
13178: LD_INT 8
13180: PUSH
13181: LD_INT 9
13183: PUSH
13184: LD_INT 10
13186: PUSH
13187: LD_INT 11
13189: PUSH
13190: LD_INT 12
13192: PUSH
13193: LD_INT 13
13195: PUSH
13196: LD_INT 14
13198: PUSH
13199: LD_INT 15
13201: PUSH
13202: LD_INT 16
13204: PUSH
13205: LD_INT 17
13207: PUSH
13208: LD_INT 18
13210: PUSH
13211: LD_INT 19
13213: PUSH
13214: LD_INT 20
13216: PUSH
13217: LD_INT 21
13219: PUSH
13220: LD_INT 22
13222: PUSH
13223: LD_INT 23
13225: PUSH
13226: LD_INT 24
13228: PUSH
13229: LD_INT 25
13231: PUSH
13232: LD_INT 26
13234: PUSH
13235: LD_INT 28
13237: PUSH
13238: LD_INT 30
13240: PUSH
13241: LD_INT 31
13243: PUSH
13244: LD_INT 32
13246: PUSH
13247: LD_INT 34
13249: PUSH
13250: LD_INT 36
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 101
13288: PUSH
13289: LD_INT 102
13291: PUSH
13292: LD_INT 103
13294: PUSH
13295: LD_INT 104
13297: PUSH
13298: LD_INT 105
13300: PUSH
13301: LD_INT 106
13303: PUSH
13304: LD_INT 107
13306: PUSH
13307: LD_INT 108
13309: PUSH
13310: LD_INT 109
13312: PUSH
13313: LD_INT 110
13315: PUSH
13316: LD_INT 111
13318: PUSH
13319: LD_INT 112
13321: PUSH
13322: LD_INT 114
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: ST_TO_ADDR
13344: GO 14931
13346: LD_INT 12
13348: DOUBLE
13349: EQUAL
13350: IFTRUE 13354
13352: GO 13562
13354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13355: LD_ADDR_VAR 0 1
13359: PUSH
13360: LD_INT 1
13362: PUSH
13363: LD_INT 2
13365: PUSH
13366: LD_INT 3
13368: PUSH
13369: LD_INT 4
13371: PUSH
13372: LD_INT 5
13374: PUSH
13375: LD_INT 6
13377: PUSH
13378: LD_INT 7
13380: PUSH
13381: LD_INT 8
13383: PUSH
13384: LD_INT 9
13386: PUSH
13387: LD_INT 10
13389: PUSH
13390: LD_INT 11
13392: PUSH
13393: LD_INT 12
13395: PUSH
13396: LD_INT 13
13398: PUSH
13399: LD_INT 14
13401: PUSH
13402: LD_INT 15
13404: PUSH
13405: LD_INT 16
13407: PUSH
13408: LD_INT 17
13410: PUSH
13411: LD_INT 18
13413: PUSH
13414: LD_INT 19
13416: PUSH
13417: LD_INT 20
13419: PUSH
13420: LD_INT 21
13422: PUSH
13423: LD_INT 22
13425: PUSH
13426: LD_INT 23
13428: PUSH
13429: LD_INT 24
13431: PUSH
13432: LD_INT 25
13434: PUSH
13435: LD_INT 26
13437: PUSH
13438: LD_INT 27
13440: PUSH
13441: LD_INT 28
13443: PUSH
13444: LD_INT 30
13446: PUSH
13447: LD_INT 31
13449: PUSH
13450: LD_INT 32
13452: PUSH
13453: LD_INT 33
13455: PUSH
13456: LD_INT 34
13458: PUSH
13459: LD_INT 36
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 101
13500: PUSH
13501: LD_INT 102
13503: PUSH
13504: LD_INT 103
13506: PUSH
13507: LD_INT 104
13509: PUSH
13510: LD_INT 105
13512: PUSH
13513: LD_INT 106
13515: PUSH
13516: LD_INT 107
13518: PUSH
13519: LD_INT 108
13521: PUSH
13522: LD_INT 109
13524: PUSH
13525: LD_INT 110
13527: PUSH
13528: LD_INT 111
13530: PUSH
13531: LD_INT 112
13533: PUSH
13534: LD_INT 113
13536: PUSH
13537: LD_INT 114
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: ST_TO_ADDR
13560: GO 14931
13562: LD_INT 13
13564: DOUBLE
13565: EQUAL
13566: IFTRUE 13570
13568: GO 13766
13570: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13571: LD_ADDR_VAR 0 1
13575: PUSH
13576: LD_INT 1
13578: PUSH
13579: LD_INT 2
13581: PUSH
13582: LD_INT 3
13584: PUSH
13585: LD_INT 4
13587: PUSH
13588: LD_INT 5
13590: PUSH
13591: LD_INT 8
13593: PUSH
13594: LD_INT 9
13596: PUSH
13597: LD_INT 10
13599: PUSH
13600: LD_INT 11
13602: PUSH
13603: LD_INT 12
13605: PUSH
13606: LD_INT 14
13608: PUSH
13609: LD_INT 15
13611: PUSH
13612: LD_INT 16
13614: PUSH
13615: LD_INT 17
13617: PUSH
13618: LD_INT 18
13620: PUSH
13621: LD_INT 19
13623: PUSH
13624: LD_INT 20
13626: PUSH
13627: LD_INT 21
13629: PUSH
13630: LD_INT 22
13632: PUSH
13633: LD_INT 23
13635: PUSH
13636: LD_INT 24
13638: PUSH
13639: LD_INT 25
13641: PUSH
13642: LD_INT 26
13644: PUSH
13645: LD_INT 27
13647: PUSH
13648: LD_INT 28
13650: PUSH
13651: LD_INT 30
13653: PUSH
13654: LD_INT 31
13656: PUSH
13657: LD_INT 32
13659: PUSH
13660: LD_INT 33
13662: PUSH
13663: LD_INT 34
13665: PUSH
13666: LD_INT 36
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 101
13704: PUSH
13705: LD_INT 102
13707: PUSH
13708: LD_INT 103
13710: PUSH
13711: LD_INT 104
13713: PUSH
13714: LD_INT 105
13716: PUSH
13717: LD_INT 106
13719: PUSH
13720: LD_INT 107
13722: PUSH
13723: LD_INT 108
13725: PUSH
13726: LD_INT 109
13728: PUSH
13729: LD_INT 110
13731: PUSH
13732: LD_INT 111
13734: PUSH
13735: LD_INT 112
13737: PUSH
13738: LD_INT 113
13740: PUSH
13741: LD_INT 114
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: ST_TO_ADDR
13764: GO 14931
13766: LD_INT 14
13768: DOUBLE
13769: EQUAL
13770: IFTRUE 13774
13772: GO 13986
13774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13775: LD_ADDR_VAR 0 1
13779: PUSH
13780: LD_INT 1
13782: PUSH
13783: LD_INT 2
13785: PUSH
13786: LD_INT 3
13788: PUSH
13789: LD_INT 4
13791: PUSH
13792: LD_INT 5
13794: PUSH
13795: LD_INT 6
13797: PUSH
13798: LD_INT 7
13800: PUSH
13801: LD_INT 8
13803: PUSH
13804: LD_INT 9
13806: PUSH
13807: LD_INT 10
13809: PUSH
13810: LD_INT 11
13812: PUSH
13813: LD_INT 12
13815: PUSH
13816: LD_INT 13
13818: PUSH
13819: LD_INT 14
13821: PUSH
13822: LD_INT 15
13824: PUSH
13825: LD_INT 16
13827: PUSH
13828: LD_INT 17
13830: PUSH
13831: LD_INT 18
13833: PUSH
13834: LD_INT 19
13836: PUSH
13837: LD_INT 20
13839: PUSH
13840: LD_INT 21
13842: PUSH
13843: LD_INT 22
13845: PUSH
13846: LD_INT 23
13848: PUSH
13849: LD_INT 24
13851: PUSH
13852: LD_INT 25
13854: PUSH
13855: LD_INT 26
13857: PUSH
13858: LD_INT 27
13860: PUSH
13861: LD_INT 28
13863: PUSH
13864: LD_INT 29
13866: PUSH
13867: LD_INT 30
13869: PUSH
13870: LD_INT 31
13872: PUSH
13873: LD_INT 32
13875: PUSH
13876: LD_INT 33
13878: PUSH
13879: LD_INT 34
13881: PUSH
13882: LD_INT 36
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 101
13924: PUSH
13925: LD_INT 102
13927: PUSH
13928: LD_INT 103
13930: PUSH
13931: LD_INT 104
13933: PUSH
13934: LD_INT 105
13936: PUSH
13937: LD_INT 106
13939: PUSH
13940: LD_INT 107
13942: PUSH
13943: LD_INT 108
13945: PUSH
13946: LD_INT 109
13948: PUSH
13949: LD_INT 110
13951: PUSH
13952: LD_INT 111
13954: PUSH
13955: LD_INT 112
13957: PUSH
13958: LD_INT 113
13960: PUSH
13961: LD_INT 114
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: ST_TO_ADDR
13984: GO 14931
13986: LD_INT 15
13988: DOUBLE
13989: EQUAL
13990: IFTRUE 13994
13992: GO 14206
13994: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13995: LD_ADDR_VAR 0 1
13999: PUSH
14000: LD_INT 1
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: LD_INT 3
14008: PUSH
14009: LD_INT 4
14011: PUSH
14012: LD_INT 5
14014: PUSH
14015: LD_INT 6
14017: PUSH
14018: LD_INT 7
14020: PUSH
14021: LD_INT 8
14023: PUSH
14024: LD_INT 9
14026: PUSH
14027: LD_INT 10
14029: PUSH
14030: LD_INT 11
14032: PUSH
14033: LD_INT 12
14035: PUSH
14036: LD_INT 13
14038: PUSH
14039: LD_INT 14
14041: PUSH
14042: LD_INT 15
14044: PUSH
14045: LD_INT 16
14047: PUSH
14048: LD_INT 17
14050: PUSH
14051: LD_INT 18
14053: PUSH
14054: LD_INT 19
14056: PUSH
14057: LD_INT 20
14059: PUSH
14060: LD_INT 21
14062: PUSH
14063: LD_INT 22
14065: PUSH
14066: LD_INT 23
14068: PUSH
14069: LD_INT 24
14071: PUSH
14072: LD_INT 25
14074: PUSH
14075: LD_INT 26
14077: PUSH
14078: LD_INT 27
14080: PUSH
14081: LD_INT 28
14083: PUSH
14084: LD_INT 29
14086: PUSH
14087: LD_INT 30
14089: PUSH
14090: LD_INT 31
14092: PUSH
14093: LD_INT 32
14095: PUSH
14096: LD_INT 33
14098: PUSH
14099: LD_INT 34
14101: PUSH
14102: LD_INT 36
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 101
14144: PUSH
14145: LD_INT 102
14147: PUSH
14148: LD_INT 103
14150: PUSH
14151: LD_INT 104
14153: PUSH
14154: LD_INT 105
14156: PUSH
14157: LD_INT 106
14159: PUSH
14160: LD_INT 107
14162: PUSH
14163: LD_INT 108
14165: PUSH
14166: LD_INT 109
14168: PUSH
14169: LD_INT 110
14171: PUSH
14172: LD_INT 111
14174: PUSH
14175: LD_INT 112
14177: PUSH
14178: LD_INT 113
14180: PUSH
14181: LD_INT 114
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: ST_TO_ADDR
14204: GO 14931
14206: LD_INT 16
14208: DOUBLE
14209: EQUAL
14210: IFTRUE 14214
14212: GO 14338
14214: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14215: LD_ADDR_VAR 0 1
14219: PUSH
14220: LD_INT 2
14222: PUSH
14223: LD_INT 4
14225: PUSH
14226: LD_INT 5
14228: PUSH
14229: LD_INT 7
14231: PUSH
14232: LD_INT 11
14234: PUSH
14235: LD_INT 12
14237: PUSH
14238: LD_INT 15
14240: PUSH
14241: LD_INT 16
14243: PUSH
14244: LD_INT 20
14246: PUSH
14247: LD_INT 21
14249: PUSH
14250: LD_INT 22
14252: PUSH
14253: LD_INT 23
14255: PUSH
14256: LD_INT 25
14258: PUSH
14259: LD_INT 26
14261: PUSH
14262: LD_INT 30
14264: PUSH
14265: LD_INT 31
14267: PUSH
14268: LD_INT 32
14270: PUSH
14271: LD_INT 33
14273: PUSH
14274: LD_INT 34
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 101
14300: PUSH
14301: LD_INT 102
14303: PUSH
14304: LD_INT 103
14306: PUSH
14307: LD_INT 106
14309: PUSH
14310: LD_INT 108
14312: PUSH
14313: LD_INT 112
14315: PUSH
14316: LD_INT 113
14318: PUSH
14319: LD_INT 114
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: ST_TO_ADDR
14336: GO 14931
14338: LD_INT 17
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14558
14346: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14347: LD_ADDR_VAR 0 1
14351: PUSH
14352: LD_INT 1
14354: PUSH
14355: LD_INT 2
14357: PUSH
14358: LD_INT 3
14360: PUSH
14361: LD_INT 4
14363: PUSH
14364: LD_INT 5
14366: PUSH
14367: LD_INT 6
14369: PUSH
14370: LD_INT 7
14372: PUSH
14373: LD_INT 8
14375: PUSH
14376: LD_INT 9
14378: PUSH
14379: LD_INT 10
14381: PUSH
14382: LD_INT 11
14384: PUSH
14385: LD_INT 12
14387: PUSH
14388: LD_INT 13
14390: PUSH
14391: LD_INT 14
14393: PUSH
14394: LD_INT 15
14396: PUSH
14397: LD_INT 16
14399: PUSH
14400: LD_INT 17
14402: PUSH
14403: LD_INT 18
14405: PUSH
14406: LD_INT 19
14408: PUSH
14409: LD_INT 20
14411: PUSH
14412: LD_INT 21
14414: PUSH
14415: LD_INT 22
14417: PUSH
14418: LD_INT 23
14420: PUSH
14421: LD_INT 24
14423: PUSH
14424: LD_INT 25
14426: PUSH
14427: LD_INT 26
14429: PUSH
14430: LD_INT 27
14432: PUSH
14433: LD_INT 28
14435: PUSH
14436: LD_INT 29
14438: PUSH
14439: LD_INT 30
14441: PUSH
14442: LD_INT 31
14444: PUSH
14445: LD_INT 32
14447: PUSH
14448: LD_INT 33
14450: PUSH
14451: LD_INT 34
14453: PUSH
14454: LD_INT 36
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 101
14496: PUSH
14497: LD_INT 102
14499: PUSH
14500: LD_INT 103
14502: PUSH
14503: LD_INT 104
14505: PUSH
14506: LD_INT 105
14508: PUSH
14509: LD_INT 106
14511: PUSH
14512: LD_INT 107
14514: PUSH
14515: LD_INT 108
14517: PUSH
14518: LD_INT 109
14520: PUSH
14521: LD_INT 110
14523: PUSH
14524: LD_INT 111
14526: PUSH
14527: LD_INT 112
14529: PUSH
14530: LD_INT 113
14532: PUSH
14533: LD_INT 114
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: ST_TO_ADDR
14556: GO 14931
14558: LD_INT 18
14560: DOUBLE
14561: EQUAL
14562: IFTRUE 14566
14564: GO 14702
14566: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14567: LD_ADDR_VAR 0 1
14571: PUSH
14572: LD_INT 2
14574: PUSH
14575: LD_INT 4
14577: PUSH
14578: LD_INT 5
14580: PUSH
14581: LD_INT 7
14583: PUSH
14584: LD_INT 11
14586: PUSH
14587: LD_INT 12
14589: PUSH
14590: LD_INT 15
14592: PUSH
14593: LD_INT 16
14595: PUSH
14596: LD_INT 20
14598: PUSH
14599: LD_INT 21
14601: PUSH
14602: LD_INT 22
14604: PUSH
14605: LD_INT 23
14607: PUSH
14608: LD_INT 25
14610: PUSH
14611: LD_INT 26
14613: PUSH
14614: LD_INT 30
14616: PUSH
14617: LD_INT 31
14619: PUSH
14620: LD_INT 32
14622: PUSH
14623: LD_INT 33
14625: PUSH
14626: LD_INT 34
14628: PUSH
14629: LD_INT 35
14631: PUSH
14632: LD_INT 36
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 101
14660: PUSH
14661: LD_INT 102
14663: PUSH
14664: LD_INT 103
14666: PUSH
14667: LD_INT 106
14669: PUSH
14670: LD_INT 108
14672: PUSH
14673: LD_INT 112
14675: PUSH
14676: LD_INT 113
14678: PUSH
14679: LD_INT 114
14681: PUSH
14682: LD_INT 115
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: ST_TO_ADDR
14700: GO 14931
14702: LD_INT 19
14704: DOUBLE
14705: EQUAL
14706: IFTRUE 14710
14708: GO 14930
14710: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14711: LD_ADDR_VAR 0 1
14715: PUSH
14716: LD_INT 1
14718: PUSH
14719: LD_INT 2
14721: PUSH
14722: LD_INT 3
14724: PUSH
14725: LD_INT 4
14727: PUSH
14728: LD_INT 5
14730: PUSH
14731: LD_INT 6
14733: PUSH
14734: LD_INT 7
14736: PUSH
14737: LD_INT 8
14739: PUSH
14740: LD_INT 9
14742: PUSH
14743: LD_INT 10
14745: PUSH
14746: LD_INT 11
14748: PUSH
14749: LD_INT 12
14751: PUSH
14752: LD_INT 13
14754: PUSH
14755: LD_INT 14
14757: PUSH
14758: LD_INT 15
14760: PUSH
14761: LD_INT 16
14763: PUSH
14764: LD_INT 17
14766: PUSH
14767: LD_INT 18
14769: PUSH
14770: LD_INT 19
14772: PUSH
14773: LD_INT 20
14775: PUSH
14776: LD_INT 21
14778: PUSH
14779: LD_INT 22
14781: PUSH
14782: LD_INT 23
14784: PUSH
14785: LD_INT 24
14787: PUSH
14788: LD_INT 25
14790: PUSH
14791: LD_INT 26
14793: PUSH
14794: LD_INT 27
14796: PUSH
14797: LD_INT 28
14799: PUSH
14800: LD_INT 29
14802: PUSH
14803: LD_INT 30
14805: PUSH
14806: LD_INT 31
14808: PUSH
14809: LD_INT 32
14811: PUSH
14812: LD_INT 33
14814: PUSH
14815: LD_INT 34
14817: PUSH
14818: LD_INT 35
14820: PUSH
14821: LD_INT 36
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 101
14864: PUSH
14865: LD_INT 102
14867: PUSH
14868: LD_INT 103
14870: PUSH
14871: LD_INT 104
14873: PUSH
14874: LD_INT 105
14876: PUSH
14877: LD_INT 106
14879: PUSH
14880: LD_INT 107
14882: PUSH
14883: LD_INT 108
14885: PUSH
14886: LD_INT 109
14888: PUSH
14889: LD_INT 110
14891: PUSH
14892: LD_INT 111
14894: PUSH
14895: LD_INT 112
14897: PUSH
14898: LD_INT 113
14900: PUSH
14901: LD_INT 114
14903: PUSH
14904: LD_INT 115
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: ST_TO_ADDR
14928: GO 14931
14930: POP
// end else
14931: GO 15150
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14933: LD_ADDR_VAR 0 1
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: LD_INT 2
14943: PUSH
14944: LD_INT 3
14946: PUSH
14947: LD_INT 4
14949: PUSH
14950: LD_INT 5
14952: PUSH
14953: LD_INT 6
14955: PUSH
14956: LD_INT 7
14958: PUSH
14959: LD_INT 8
14961: PUSH
14962: LD_INT 9
14964: PUSH
14965: LD_INT 10
14967: PUSH
14968: LD_INT 11
14970: PUSH
14971: LD_INT 12
14973: PUSH
14974: LD_INT 13
14976: PUSH
14977: LD_INT 14
14979: PUSH
14980: LD_INT 15
14982: PUSH
14983: LD_INT 16
14985: PUSH
14986: LD_INT 17
14988: PUSH
14989: LD_INT 18
14991: PUSH
14992: LD_INT 19
14994: PUSH
14995: LD_INT 20
14997: PUSH
14998: LD_INT 21
15000: PUSH
15001: LD_INT 22
15003: PUSH
15004: LD_INT 23
15006: PUSH
15007: LD_INT 24
15009: PUSH
15010: LD_INT 25
15012: PUSH
15013: LD_INT 26
15015: PUSH
15016: LD_INT 27
15018: PUSH
15019: LD_INT 28
15021: PUSH
15022: LD_INT 29
15024: PUSH
15025: LD_INT 30
15027: PUSH
15028: LD_INT 31
15030: PUSH
15031: LD_INT 32
15033: PUSH
15034: LD_INT 33
15036: PUSH
15037: LD_INT 34
15039: PUSH
15040: LD_INT 35
15042: PUSH
15043: LD_INT 36
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 101
15086: PUSH
15087: LD_INT 102
15089: PUSH
15090: LD_INT 103
15092: PUSH
15093: LD_INT 104
15095: PUSH
15096: LD_INT 105
15098: PUSH
15099: LD_INT 106
15101: PUSH
15102: LD_INT 107
15104: PUSH
15105: LD_INT 108
15107: PUSH
15108: LD_INT 109
15110: PUSH
15111: LD_INT 110
15113: PUSH
15114: LD_INT 111
15116: PUSH
15117: LD_INT 112
15119: PUSH
15120: LD_INT 113
15122: PUSH
15123: LD_INT 114
15125: PUSH
15126: LD_INT 115
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: ST_TO_ADDR
// if result then
15150: LD_VAR 0 1
15154: IFFALSE 15443
// begin normal :=  ;
15156: LD_ADDR_VAR 0 3
15160: PUSH
15161: LD_STRING 
15163: ST_TO_ADDR
// hardcore :=  ;
15164: LD_ADDR_VAR 0 4
15168: PUSH
15169: LD_STRING 
15171: ST_TO_ADDR
// for i = 1 to normalCounter do
15172: LD_ADDR_VAR 0 5
15176: PUSH
15177: DOUBLE
15178: LD_INT 1
15180: DEC
15181: ST_TO_ADDR
15182: LD_EXP 35
15186: PUSH
15187: FOR_TO
15188: IFFALSE 15289
// begin tmp := 0 ;
15190: LD_ADDR_VAR 0 2
15194: PUSH
15195: LD_STRING 0
15197: ST_TO_ADDR
// if result [ 1 ] then
15198: LD_VAR 0 1
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: IFFALSE 15271
// if result [ 1 ] [ 1 ] = i then
15208: LD_VAR 0 1
15212: PUSH
15213: LD_INT 1
15215: ARRAY
15216: PUSH
15217: LD_INT 1
15219: ARRAY
15220: PUSH
15221: LD_VAR 0 5
15225: EQUAL
15226: IFFALSE 15271
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15228: LD_ADDR_VAR 0 1
15232: PUSH
15233: LD_VAR 0 1
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_VAR 0 1
15245: PUSH
15246: LD_INT 1
15248: ARRAY
15249: PPUSH
15250: LD_INT 1
15252: PPUSH
15253: CALL_OW 3
15257: PPUSH
15258: CALL_OW 1
15262: ST_TO_ADDR
// tmp := 1 ;
15263: LD_ADDR_VAR 0 2
15267: PUSH
15268: LD_STRING 1
15270: ST_TO_ADDR
// end ; normal := normal & tmp ;
15271: LD_ADDR_VAR 0 3
15275: PUSH
15276: LD_VAR 0 3
15280: PUSH
15281: LD_VAR 0 2
15285: STR
15286: ST_TO_ADDR
// end ;
15287: GO 15187
15289: POP
15290: POP
// for i = 1 to hardcoreCounter do
15291: LD_ADDR_VAR 0 5
15295: PUSH
15296: DOUBLE
15297: LD_INT 1
15299: DEC
15300: ST_TO_ADDR
15301: LD_EXP 36
15305: PUSH
15306: FOR_TO
15307: IFFALSE 15412
// begin tmp := 0 ;
15309: LD_ADDR_VAR 0 2
15313: PUSH
15314: LD_STRING 0
15316: ST_TO_ADDR
// if result [ 2 ] then
15317: LD_VAR 0 1
15321: PUSH
15322: LD_INT 2
15324: ARRAY
15325: IFFALSE 15394
// if result [ 2 ] [ 1 ] = 100 + i then
15327: LD_VAR 0 1
15331: PUSH
15332: LD_INT 2
15334: ARRAY
15335: PUSH
15336: LD_INT 1
15338: ARRAY
15339: PUSH
15340: LD_INT 100
15342: PUSH
15343: LD_VAR 0 5
15347: PLUS
15348: EQUAL
15349: IFFALSE 15394
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15351: LD_ADDR_VAR 0 1
15355: PUSH
15356: LD_VAR 0 1
15360: PPUSH
15361: LD_INT 2
15363: PPUSH
15364: LD_VAR 0 1
15368: PUSH
15369: LD_INT 2
15371: ARRAY
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 3
15380: PPUSH
15381: CALL_OW 1
15385: ST_TO_ADDR
// tmp := 1 ;
15386: LD_ADDR_VAR 0 2
15390: PUSH
15391: LD_STRING 1
15393: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15394: LD_ADDR_VAR 0 4
15398: PUSH
15399: LD_VAR 0 4
15403: PUSH
15404: LD_VAR 0 2
15408: STR
15409: ST_TO_ADDR
// end ;
15410: GO 15306
15412: POP
15413: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15414: LD_STRING getStreamItemsFromMission("
15416: PUSH
15417: LD_VAR 0 3
15421: STR
15422: PUSH
15423: LD_STRING ","
15425: STR
15426: PUSH
15427: LD_VAR 0 4
15431: STR
15432: PUSH
15433: LD_STRING ")
15435: STR
15436: PPUSH
15437: CALL_OW 559
// end else
15441: GO 15450
// ToLua ( getStreamItemsFromMission("","") ) ;
15443: LD_STRING getStreamItemsFromMission("","")
15445: PPUSH
15446: CALL_OW 559
// end ;
15450: LD_VAR 0 1
15454: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15455: LD_VAR 0 2
15459: PUSH
15460: LD_INT 100
15462: EQUAL
15463: IFFALSE 16412
// begin if not StreamModeActive then
15465: LD_EXP 34
15469: NOT
15470: IFFALSE 15480
// StreamModeActive := true ;
15472: LD_ADDR_EXP 34
15476: PUSH
15477: LD_INT 1
15479: ST_TO_ADDR
// if p3 = 0 then
15480: LD_VAR 0 3
15484: PUSH
15485: LD_INT 0
15487: EQUAL
15488: IFFALSE 15494
// InitStreamMode ;
15490: CALL 11533 0 0
// if p3 = 1 then
15494: LD_VAR 0 3
15498: PUSH
15499: LD_INT 1
15501: EQUAL
15502: IFFALSE 15512
// sRocket := true ;
15504: LD_ADDR_EXP 39
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// if p3 = 2 then
15512: LD_VAR 0 3
15516: PUSH
15517: LD_INT 2
15519: EQUAL
15520: IFFALSE 15530
// sSpeed := true ;
15522: LD_ADDR_EXP 38
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// if p3 = 3 then
15530: LD_VAR 0 3
15534: PUSH
15535: LD_INT 3
15537: EQUAL
15538: IFFALSE 15548
// sEngine := true ;
15540: LD_ADDR_EXP 40
15544: PUSH
15545: LD_INT 1
15547: ST_TO_ADDR
// if p3 = 4 then
15548: LD_VAR 0 3
15552: PUSH
15553: LD_INT 4
15555: EQUAL
15556: IFFALSE 15566
// sSpec := true ;
15558: LD_ADDR_EXP 37
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// if p3 = 5 then
15566: LD_VAR 0 3
15570: PUSH
15571: LD_INT 5
15573: EQUAL
15574: IFFALSE 15584
// sLevel := true ;
15576: LD_ADDR_EXP 41
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// if p3 = 6 then
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 6
15591: EQUAL
15592: IFFALSE 15602
// sArmoury := true ;
15594: LD_ADDR_EXP 42
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// if p3 = 7 then
15602: LD_VAR 0 3
15606: PUSH
15607: LD_INT 7
15609: EQUAL
15610: IFFALSE 15620
// sRadar := true ;
15612: LD_ADDR_EXP 43
15616: PUSH
15617: LD_INT 1
15619: ST_TO_ADDR
// if p3 = 8 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 8
15627: EQUAL
15628: IFFALSE 15638
// sBunker := true ;
15630: LD_ADDR_EXP 44
15634: PUSH
15635: LD_INT 1
15637: ST_TO_ADDR
// if p3 = 9 then
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 9
15645: EQUAL
15646: IFFALSE 15656
// sHack := true ;
15648: LD_ADDR_EXP 45
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 10 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 10
15663: EQUAL
15664: IFFALSE 15674
// sFire := true ;
15666: LD_ADDR_EXP 46
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if p3 = 11 then
15674: LD_VAR 0 3
15678: PUSH
15679: LD_INT 11
15681: EQUAL
15682: IFFALSE 15692
// sRefresh := true ;
15684: LD_ADDR_EXP 47
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// if p3 = 12 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_INT 12
15699: EQUAL
15700: IFFALSE 15710
// sExp := true ;
15702: LD_ADDR_EXP 48
15706: PUSH
15707: LD_INT 1
15709: ST_TO_ADDR
// if p3 = 13 then
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 13
15717: EQUAL
15718: IFFALSE 15728
// sDepot := true ;
15720: LD_ADDR_EXP 49
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// if p3 = 14 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 14
15735: EQUAL
15736: IFFALSE 15746
// sFlag := true ;
15738: LD_ADDR_EXP 50
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// if p3 = 15 then
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 15
15753: EQUAL
15754: IFFALSE 15764
// sKamikadze := true ;
15756: LD_ADDR_EXP 58
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// if p3 = 16 then
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 16
15771: EQUAL
15772: IFFALSE 15782
// sTroll := true ;
15774: LD_ADDR_EXP 59
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if p3 = 17 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 17
15789: EQUAL
15790: IFFALSE 15800
// sSlow := true ;
15792: LD_ADDR_EXP 60
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if p3 = 18 then
15800: LD_VAR 0 3
15804: PUSH
15805: LD_INT 18
15807: EQUAL
15808: IFFALSE 15818
// sLack := true ;
15810: LD_ADDR_EXP 61
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 19 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 19
15825: EQUAL
15826: IFFALSE 15836
// sTank := true ;
15828: LD_ADDR_EXP 63
15832: PUSH
15833: LD_INT 1
15835: ST_TO_ADDR
// if p3 = 20 then
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 20
15843: EQUAL
15844: IFFALSE 15854
// sRemote := true ;
15846: LD_ADDR_EXP 64
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// if p3 = 21 then
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 21
15861: EQUAL
15862: IFFALSE 15872
// sPowell := true ;
15864: LD_ADDR_EXP 65
15868: PUSH
15869: LD_INT 1
15871: ST_TO_ADDR
// if p3 = 22 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 22
15879: EQUAL
15880: IFFALSE 15890
// sTeleport := true ;
15882: LD_ADDR_EXP 68
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 23 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 23
15897: EQUAL
15898: IFFALSE 15908
// sOilTower := true ;
15900: LD_ADDR_EXP 70
15904: PUSH
15905: LD_INT 1
15907: ST_TO_ADDR
// if p3 = 24 then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 24
15915: EQUAL
15916: IFFALSE 15926
// sShovel := true ;
15918: LD_ADDR_EXP 71
15922: PUSH
15923: LD_INT 1
15925: ST_TO_ADDR
// if p3 = 25 then
15926: LD_VAR 0 3
15930: PUSH
15931: LD_INT 25
15933: EQUAL
15934: IFFALSE 15944
// sSheik := true ;
15936: LD_ADDR_EXP 72
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// if p3 = 26 then
15944: LD_VAR 0 3
15948: PUSH
15949: LD_INT 26
15951: EQUAL
15952: IFFALSE 15962
// sEarthquake := true ;
15954: LD_ADDR_EXP 74
15958: PUSH
15959: LD_INT 1
15961: ST_TO_ADDR
// if p3 = 27 then
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 27
15969: EQUAL
15970: IFFALSE 15980
// sAI := true ;
15972: LD_ADDR_EXP 75
15976: PUSH
15977: LD_INT 1
15979: ST_TO_ADDR
// if p3 = 28 then
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 28
15987: EQUAL
15988: IFFALSE 15998
// sCargo := true ;
15990: LD_ADDR_EXP 78
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// if p3 = 29 then
15998: LD_VAR 0 3
16002: PUSH
16003: LD_INT 29
16005: EQUAL
16006: IFFALSE 16016
// sDLaser := true ;
16008: LD_ADDR_EXP 79
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// if p3 = 30 then
16016: LD_VAR 0 3
16020: PUSH
16021: LD_INT 30
16023: EQUAL
16024: IFFALSE 16034
// sExchange := true ;
16026: LD_ADDR_EXP 80
16030: PUSH
16031: LD_INT 1
16033: ST_TO_ADDR
// if p3 = 31 then
16034: LD_VAR 0 3
16038: PUSH
16039: LD_INT 31
16041: EQUAL
16042: IFFALSE 16052
// sFac := true ;
16044: LD_ADDR_EXP 81
16048: PUSH
16049: LD_INT 1
16051: ST_TO_ADDR
// if p3 = 32 then
16052: LD_VAR 0 3
16056: PUSH
16057: LD_INT 32
16059: EQUAL
16060: IFFALSE 16070
// sPower := true ;
16062: LD_ADDR_EXP 82
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// if p3 = 33 then
16070: LD_VAR 0 3
16074: PUSH
16075: LD_INT 33
16077: EQUAL
16078: IFFALSE 16088
// sRandom := true ;
16080: LD_ADDR_EXP 83
16084: PUSH
16085: LD_INT 1
16087: ST_TO_ADDR
// if p3 = 34 then
16088: LD_VAR 0 3
16092: PUSH
16093: LD_INT 34
16095: EQUAL
16096: IFFALSE 16106
// sShield := true ;
16098: LD_ADDR_EXP 84
16102: PUSH
16103: LD_INT 1
16105: ST_TO_ADDR
// if p3 = 35 then
16106: LD_VAR 0 3
16110: PUSH
16111: LD_INT 35
16113: EQUAL
16114: IFFALSE 16124
// sTime := true ;
16116: LD_ADDR_EXP 85
16120: PUSH
16121: LD_INT 1
16123: ST_TO_ADDR
// if p3 = 36 then
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 36
16131: EQUAL
16132: IFFALSE 16142
// sTools := true ;
16134: LD_ADDR_EXP 86
16138: PUSH
16139: LD_INT 1
16141: ST_TO_ADDR
// if p3 = 101 then
16142: LD_VAR 0 3
16146: PUSH
16147: LD_INT 101
16149: EQUAL
16150: IFFALSE 16160
// sSold := true ;
16152: LD_ADDR_EXP 51
16156: PUSH
16157: LD_INT 1
16159: ST_TO_ADDR
// if p3 = 102 then
16160: LD_VAR 0 3
16164: PUSH
16165: LD_INT 102
16167: EQUAL
16168: IFFALSE 16178
// sDiff := true ;
16170: LD_ADDR_EXP 52
16174: PUSH
16175: LD_INT 1
16177: ST_TO_ADDR
// if p3 = 103 then
16178: LD_VAR 0 3
16182: PUSH
16183: LD_INT 103
16185: EQUAL
16186: IFFALSE 16196
// sFog := true ;
16188: LD_ADDR_EXP 55
16192: PUSH
16193: LD_INT 1
16195: ST_TO_ADDR
// if p3 = 104 then
16196: LD_VAR 0 3
16200: PUSH
16201: LD_INT 104
16203: EQUAL
16204: IFFALSE 16214
// sReset := true ;
16206: LD_ADDR_EXP 56
16210: PUSH
16211: LD_INT 1
16213: ST_TO_ADDR
// if p3 = 105 then
16214: LD_VAR 0 3
16218: PUSH
16219: LD_INT 105
16221: EQUAL
16222: IFFALSE 16232
// sSun := true ;
16224: LD_ADDR_EXP 57
16228: PUSH
16229: LD_INT 1
16231: ST_TO_ADDR
// if p3 = 106 then
16232: LD_VAR 0 3
16236: PUSH
16237: LD_INT 106
16239: EQUAL
16240: IFFALSE 16250
// sTiger := true ;
16242: LD_ADDR_EXP 53
16246: PUSH
16247: LD_INT 1
16249: ST_TO_ADDR
// if p3 = 107 then
16250: LD_VAR 0 3
16254: PUSH
16255: LD_INT 107
16257: EQUAL
16258: IFFALSE 16268
// sBomb := true ;
16260: LD_ADDR_EXP 54
16264: PUSH
16265: LD_INT 1
16267: ST_TO_ADDR
// if p3 = 108 then
16268: LD_VAR 0 3
16272: PUSH
16273: LD_INT 108
16275: EQUAL
16276: IFFALSE 16286
// sWound := true ;
16278: LD_ADDR_EXP 62
16282: PUSH
16283: LD_INT 1
16285: ST_TO_ADDR
// if p3 = 109 then
16286: LD_VAR 0 3
16290: PUSH
16291: LD_INT 109
16293: EQUAL
16294: IFFALSE 16304
// sBetray := true ;
16296: LD_ADDR_EXP 66
16300: PUSH
16301: LD_INT 1
16303: ST_TO_ADDR
// if p3 = 110 then
16304: LD_VAR 0 3
16308: PUSH
16309: LD_INT 110
16311: EQUAL
16312: IFFALSE 16322
// sContamin := true ;
16314: LD_ADDR_EXP 67
16318: PUSH
16319: LD_INT 1
16321: ST_TO_ADDR
// if p3 = 111 then
16322: LD_VAR 0 3
16326: PUSH
16327: LD_INT 111
16329: EQUAL
16330: IFFALSE 16340
// sOil := true ;
16332: LD_ADDR_EXP 69
16336: PUSH
16337: LD_INT 1
16339: ST_TO_ADDR
// if p3 = 112 then
16340: LD_VAR 0 3
16344: PUSH
16345: LD_INT 112
16347: EQUAL
16348: IFFALSE 16358
// sStu := true ;
16350: LD_ADDR_EXP 73
16354: PUSH
16355: LD_INT 1
16357: ST_TO_ADDR
// if p3 = 113 then
16358: LD_VAR 0 3
16362: PUSH
16363: LD_INT 113
16365: EQUAL
16366: IFFALSE 16376
// sBazooka := true ;
16368: LD_ADDR_EXP 76
16372: PUSH
16373: LD_INT 1
16375: ST_TO_ADDR
// if p3 = 114 then
16376: LD_VAR 0 3
16380: PUSH
16381: LD_INT 114
16383: EQUAL
16384: IFFALSE 16394
// sMortar := true ;
16386: LD_ADDR_EXP 77
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// if p3 = 115 then
16394: LD_VAR 0 3
16398: PUSH
16399: LD_INT 115
16401: EQUAL
16402: IFFALSE 16412
// sRanger := true ;
16404: LD_ADDR_EXP 87
16408: PUSH
16409: LD_INT 1
16411: ST_TO_ADDR
// end ; end ;
16412: PPOPN 6
16414: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16415: LD_EXP 34
16419: PUSH
16420: LD_EXP 39
16424: AND
16425: IFFALSE 16549
16427: GO 16429
16429: DISABLE
16430: LD_INT 0
16432: PPUSH
16433: PPUSH
// begin enable ;
16434: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16435: LD_ADDR_VAR 0 2
16439: PUSH
16440: LD_INT 22
16442: PUSH
16443: LD_OWVAR 2
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 2
16454: PUSH
16455: LD_INT 34
16457: PUSH
16458: LD_INT 7
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 34
16467: PUSH
16468: LD_INT 45
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 34
16477: PUSH
16478: LD_INT 28
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 34
16487: PUSH
16488: LD_INT 47
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PPUSH
16506: CALL_OW 69
16510: ST_TO_ADDR
// if not tmp then
16511: LD_VAR 0 2
16515: NOT
16516: IFFALSE 16520
// exit ;
16518: GO 16549
// for i in tmp do
16520: LD_ADDR_VAR 0 1
16524: PUSH
16525: LD_VAR 0 2
16529: PUSH
16530: FOR_IN
16531: IFFALSE 16547
// begin SetLives ( i , 0 ) ;
16533: LD_VAR 0 1
16537: PPUSH
16538: LD_INT 0
16540: PPUSH
16541: CALL_OW 234
// end ;
16545: GO 16530
16547: POP
16548: POP
// end ;
16549: PPOPN 2
16551: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16552: LD_EXP 34
16556: PUSH
16557: LD_EXP 40
16561: AND
16562: IFFALSE 16646
16564: GO 16566
16566: DISABLE
16567: LD_INT 0
16569: PPUSH
16570: PPUSH
// begin enable ;
16571: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16572: LD_ADDR_VAR 0 2
16576: PUSH
16577: LD_INT 22
16579: PUSH
16580: LD_OWVAR 2
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 32
16591: PUSH
16592: LD_INT 3
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PPUSH
16603: CALL_OW 69
16607: ST_TO_ADDR
// if not tmp then
16608: LD_VAR 0 2
16612: NOT
16613: IFFALSE 16617
// exit ;
16615: GO 16646
// for i in tmp do
16617: LD_ADDR_VAR 0 1
16621: PUSH
16622: LD_VAR 0 2
16626: PUSH
16627: FOR_IN
16628: IFFALSE 16644
// begin SetLives ( i , 0 ) ;
16630: LD_VAR 0 1
16634: PPUSH
16635: LD_INT 0
16637: PPUSH
16638: CALL_OW 234
// end ;
16642: GO 16627
16644: POP
16645: POP
// end ;
16646: PPOPN 2
16648: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16649: LD_EXP 34
16653: PUSH
16654: LD_EXP 37
16658: AND
16659: IFFALSE 16752
16661: GO 16663
16663: DISABLE
16664: LD_INT 0
16666: PPUSH
// begin enable ;
16667: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16668: LD_ADDR_VAR 0 1
16672: PUSH
16673: LD_INT 22
16675: PUSH
16676: LD_OWVAR 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 25
16690: PUSH
16691: LD_INT 5
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 25
16700: PUSH
16701: LD_INT 9
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 25
16710: PUSH
16711: LD_INT 8
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: PUSH
16733: FOR_IN
16734: IFFALSE 16750
// begin SetClass ( i , 1 ) ;
16736: LD_VAR 0 1
16740: PPUSH
16741: LD_INT 1
16743: PPUSH
16744: CALL_OW 336
// end ;
16748: GO 16733
16750: POP
16751: POP
// end ;
16752: PPOPN 1
16754: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16755: LD_EXP 34
16759: PUSH
16760: LD_EXP 38
16764: AND
16765: PUSH
16766: LD_OWVAR 65
16770: PUSH
16771: LD_INT 7
16773: LESS
16774: AND
16775: IFFALSE 16789
16777: GO 16779
16779: DISABLE
// begin enable ;
16780: ENABLE
// game_speed := 7 ;
16781: LD_ADDR_OWVAR 65
16785: PUSH
16786: LD_INT 7
16788: ST_TO_ADDR
// end ;
16789: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16790: LD_EXP 34
16794: PUSH
16795: LD_EXP 41
16799: AND
16800: IFFALSE 17002
16802: GO 16804
16804: DISABLE
16805: LD_INT 0
16807: PPUSH
16808: PPUSH
16809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16810: LD_ADDR_VAR 0 3
16814: PUSH
16815: LD_INT 81
16817: PUSH
16818: LD_OWVAR 2
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 21
16829: PUSH
16830: LD_INT 1
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PPUSH
16841: CALL_OW 69
16845: ST_TO_ADDR
// if not tmp then
16846: LD_VAR 0 3
16850: NOT
16851: IFFALSE 16855
// exit ;
16853: GO 17002
// if tmp > 5 then
16855: LD_VAR 0 3
16859: PUSH
16860: LD_INT 5
16862: GREATER
16863: IFFALSE 16875
// k := 5 else
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: LD_INT 5
16872: ST_TO_ADDR
16873: GO 16885
// k := tmp ;
16875: LD_ADDR_VAR 0 2
16879: PUSH
16880: LD_VAR 0 3
16884: ST_TO_ADDR
// for i := 1 to k do
16885: LD_ADDR_VAR 0 1
16889: PUSH
16890: DOUBLE
16891: LD_INT 1
16893: DEC
16894: ST_TO_ADDR
16895: LD_VAR 0 2
16899: PUSH
16900: FOR_TO
16901: IFFALSE 17000
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16903: LD_VAR 0 3
16907: PUSH
16908: LD_VAR 0 1
16912: ARRAY
16913: PPUSH
16914: LD_VAR 0 1
16918: PUSH
16919: LD_INT 4
16921: MOD
16922: PUSH
16923: LD_INT 1
16925: PLUS
16926: PPUSH
16927: CALL_OW 259
16931: PUSH
16932: LD_INT 10
16934: LESS
16935: IFFALSE 16998
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16937: LD_VAR 0 3
16941: PUSH
16942: LD_VAR 0 1
16946: ARRAY
16947: PPUSH
16948: LD_VAR 0 1
16952: PUSH
16953: LD_INT 4
16955: MOD
16956: PUSH
16957: LD_INT 1
16959: PLUS
16960: PPUSH
16961: LD_VAR 0 3
16965: PUSH
16966: LD_VAR 0 1
16970: ARRAY
16971: PPUSH
16972: LD_VAR 0 1
16976: PUSH
16977: LD_INT 4
16979: MOD
16980: PUSH
16981: LD_INT 1
16983: PLUS
16984: PPUSH
16985: CALL_OW 259
16989: PUSH
16990: LD_INT 1
16992: PLUS
16993: PPUSH
16994: CALL_OW 237
16998: GO 16900
17000: POP
17001: POP
// end ;
17002: PPOPN 3
17004: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17005: LD_EXP 34
17009: PUSH
17010: LD_EXP 42
17014: AND
17015: IFFALSE 17035
17017: GO 17019
17019: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17020: LD_INT 4
17022: PPUSH
17023: LD_OWVAR 2
17027: PPUSH
17028: LD_INT 0
17030: PPUSH
17031: CALL_OW 324
17035: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17036: LD_EXP 34
17040: PUSH
17041: LD_EXP 71
17045: AND
17046: IFFALSE 17066
17048: GO 17050
17050: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17051: LD_INT 19
17053: PPUSH
17054: LD_OWVAR 2
17058: PPUSH
17059: LD_INT 0
17061: PPUSH
17062: CALL_OW 324
17066: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17067: LD_EXP 34
17071: PUSH
17072: LD_EXP 43
17076: AND
17077: IFFALSE 17179
17079: GO 17081
17081: DISABLE
17082: LD_INT 0
17084: PPUSH
17085: PPUSH
// begin enable ;
17086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17087: LD_ADDR_VAR 0 2
17091: PUSH
17092: LD_INT 22
17094: PUSH
17095: LD_OWVAR 2
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 2
17106: PUSH
17107: LD_INT 34
17109: PUSH
17110: LD_INT 11
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 34
17119: PUSH
17120: LD_INT 30
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PPUSH
17136: CALL_OW 69
17140: ST_TO_ADDR
// if not tmp then
17141: LD_VAR 0 2
17145: NOT
17146: IFFALSE 17150
// exit ;
17148: GO 17179
// for i in tmp do
17150: LD_ADDR_VAR 0 1
17154: PUSH
17155: LD_VAR 0 2
17159: PUSH
17160: FOR_IN
17161: IFFALSE 17177
// begin SetLives ( i , 0 ) ;
17163: LD_VAR 0 1
17167: PPUSH
17168: LD_INT 0
17170: PPUSH
17171: CALL_OW 234
// end ;
17175: GO 17160
17177: POP
17178: POP
// end ;
17179: PPOPN 2
17181: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17182: LD_EXP 34
17186: PUSH
17187: LD_EXP 44
17191: AND
17192: IFFALSE 17212
17194: GO 17196
17196: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17197: LD_INT 32
17199: PPUSH
17200: LD_OWVAR 2
17204: PPUSH
17205: LD_INT 0
17207: PPUSH
17208: CALL_OW 324
17212: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17213: LD_EXP 34
17217: PUSH
17218: LD_EXP 45
17222: AND
17223: IFFALSE 17404
17225: GO 17227
17227: DISABLE
17228: LD_INT 0
17230: PPUSH
17231: PPUSH
17232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17233: LD_ADDR_VAR 0 2
17237: PUSH
17238: LD_INT 22
17240: PUSH
17241: LD_OWVAR 2
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 33
17252: PUSH
17253: LD_INT 3
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 69
17268: ST_TO_ADDR
// if not tmp then
17269: LD_VAR 0 2
17273: NOT
17274: IFFALSE 17278
// exit ;
17276: GO 17404
// side := 0 ;
17278: LD_ADDR_VAR 0 3
17282: PUSH
17283: LD_INT 0
17285: ST_TO_ADDR
// for i := 1 to 8 do
17286: LD_ADDR_VAR 0 1
17290: PUSH
17291: DOUBLE
17292: LD_INT 1
17294: DEC
17295: ST_TO_ADDR
17296: LD_INT 8
17298: PUSH
17299: FOR_TO
17300: IFFALSE 17348
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17302: LD_OWVAR 2
17306: PUSH
17307: LD_VAR 0 1
17311: NONEQUAL
17312: PUSH
17313: LD_OWVAR 2
17317: PPUSH
17318: LD_VAR 0 1
17322: PPUSH
17323: CALL_OW 81
17327: PUSH
17328: LD_INT 2
17330: EQUAL
17331: AND
17332: IFFALSE 17346
// begin side := i ;
17334: LD_ADDR_VAR 0 3
17338: PUSH
17339: LD_VAR 0 1
17343: ST_TO_ADDR
// break ;
17344: GO 17348
// end ;
17346: GO 17299
17348: POP
17349: POP
// if not side then
17350: LD_VAR 0 3
17354: NOT
17355: IFFALSE 17359
// exit ;
17357: GO 17404
// for i := 1 to tmp do
17359: LD_ADDR_VAR 0 1
17363: PUSH
17364: DOUBLE
17365: LD_INT 1
17367: DEC
17368: ST_TO_ADDR
17369: LD_VAR 0 2
17373: PUSH
17374: FOR_TO
17375: IFFALSE 17402
// if Prob ( 60 ) then
17377: LD_INT 60
17379: PPUSH
17380: CALL_OW 13
17384: IFFALSE 17400
// SetSide ( i , side ) ;
17386: LD_VAR 0 1
17390: PPUSH
17391: LD_VAR 0 3
17395: PPUSH
17396: CALL_OW 235
17400: GO 17374
17402: POP
17403: POP
// end ;
17404: PPOPN 3
17406: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17407: LD_EXP 34
17411: PUSH
17412: LD_EXP 47
17416: AND
17417: IFFALSE 17536
17419: GO 17421
17421: DISABLE
17422: LD_INT 0
17424: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17425: LD_ADDR_VAR 0 1
17429: PUSH
17430: LD_INT 22
17432: PUSH
17433: LD_OWVAR 2
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 21
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 3
17454: PUSH
17455: LD_INT 23
17457: PUSH
17458: LD_INT 0
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: PPUSH
17474: CALL_OW 69
17478: PUSH
17479: FOR_IN
17480: IFFALSE 17534
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17482: LD_VAR 0 1
17486: PPUSH
17487: CALL_OW 257
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: LD_INT 2
17497: PUSH
17498: LD_INT 3
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: IN
17510: IFFALSE 17532
// SetClass ( un , rand ( 1 , 4 ) ) ;
17512: LD_VAR 0 1
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: LD_INT 4
17522: PPUSH
17523: CALL_OW 12
17527: PPUSH
17528: CALL_OW 336
17532: GO 17479
17534: POP
17535: POP
// end ;
17536: PPOPN 1
17538: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17539: LD_EXP 34
17543: PUSH
17544: LD_EXP 46
17548: AND
17549: IFFALSE 17628
17551: GO 17553
17553: DISABLE
17554: LD_INT 0
17556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17557: LD_ADDR_VAR 0 1
17561: PUSH
17562: LD_INT 22
17564: PUSH
17565: LD_OWVAR 2
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 21
17576: PUSH
17577: LD_INT 3
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PPUSH
17588: CALL_OW 69
17592: ST_TO_ADDR
// if not tmp then
17593: LD_VAR 0 1
17597: NOT
17598: IFFALSE 17602
// exit ;
17600: GO 17628
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17602: LD_VAR 0 1
17606: PUSH
17607: LD_INT 1
17609: PPUSH
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 12
17619: ARRAY
17620: PPUSH
17621: LD_INT 100
17623: PPUSH
17624: CALL_OW 234
// end ;
17628: PPOPN 1
17630: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17631: LD_EXP 34
17635: PUSH
17636: LD_EXP 48
17640: AND
17641: IFFALSE 17739
17643: GO 17645
17645: DISABLE
17646: LD_INT 0
17648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17649: LD_ADDR_VAR 0 1
17653: PUSH
17654: LD_INT 22
17656: PUSH
17657: LD_OWVAR 2
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 21
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PPUSH
17680: CALL_OW 69
17684: ST_TO_ADDR
// if not tmp then
17685: LD_VAR 0 1
17689: NOT
17690: IFFALSE 17694
// exit ;
17692: GO 17739
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17694: LD_VAR 0 1
17698: PUSH
17699: LD_INT 1
17701: PPUSH
17702: LD_VAR 0 1
17706: PPUSH
17707: CALL_OW 12
17711: ARRAY
17712: PPUSH
17713: LD_INT 1
17715: PPUSH
17716: LD_INT 4
17718: PPUSH
17719: CALL_OW 12
17723: PPUSH
17724: LD_INT 3000
17726: PPUSH
17727: LD_INT 9000
17729: PPUSH
17730: CALL_OW 12
17734: PPUSH
17735: CALL_OW 492
// end ;
17739: PPOPN 1
17741: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17742: LD_EXP 34
17746: PUSH
17747: LD_EXP 49
17751: AND
17752: IFFALSE 17772
17754: GO 17756
17756: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17757: LD_INT 1
17759: PPUSH
17760: LD_OWVAR 2
17764: PPUSH
17765: LD_INT 0
17767: PPUSH
17768: CALL_OW 324
17772: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17773: LD_EXP 34
17777: PUSH
17778: LD_EXP 50
17782: AND
17783: IFFALSE 17866
17785: GO 17787
17787: DISABLE
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17792: LD_ADDR_VAR 0 2
17796: PUSH
17797: LD_INT 22
17799: PUSH
17800: LD_OWVAR 2
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 21
17811: PUSH
17812: LD_INT 3
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PPUSH
17823: CALL_OW 69
17827: ST_TO_ADDR
// if not tmp then
17828: LD_VAR 0 2
17832: NOT
17833: IFFALSE 17837
// exit ;
17835: GO 17866
// for i in tmp do
17837: LD_ADDR_VAR 0 1
17841: PUSH
17842: LD_VAR 0 2
17846: PUSH
17847: FOR_IN
17848: IFFALSE 17864
// SetBLevel ( i , 10 ) ;
17850: LD_VAR 0 1
17854: PPUSH
17855: LD_INT 10
17857: PPUSH
17858: CALL_OW 241
17862: GO 17847
17864: POP
17865: POP
// end ;
17866: PPOPN 2
17868: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17869: LD_EXP 34
17873: PUSH
17874: LD_EXP 51
17878: AND
17879: IFFALSE 17990
17881: GO 17883
17883: DISABLE
17884: LD_INT 0
17886: PPUSH
17887: PPUSH
17888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17889: LD_ADDR_VAR 0 3
17893: PUSH
17894: LD_INT 22
17896: PUSH
17897: LD_OWVAR 2
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 25
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: ST_TO_ADDR
// if not tmp then
17925: LD_VAR 0 3
17929: NOT
17930: IFFALSE 17934
// exit ;
17932: GO 17990
// un := tmp [ rand ( 1 , tmp ) ] ;
17934: LD_ADDR_VAR 0 2
17938: PUSH
17939: LD_VAR 0 3
17943: PUSH
17944: LD_INT 1
17946: PPUSH
17947: LD_VAR 0 3
17951: PPUSH
17952: CALL_OW 12
17956: ARRAY
17957: ST_TO_ADDR
// if Crawls ( un ) then
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL_OW 318
17967: IFFALSE 17978
// ComWalk ( un ) ;
17969: LD_VAR 0 2
17973: PPUSH
17974: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17978: LD_VAR 0 2
17982: PPUSH
17983: LD_INT 5
17985: PPUSH
17986: CALL_OW 336
// end ;
17990: PPOPN 3
17992: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17993: LD_EXP 34
17997: PUSH
17998: LD_EXP 52
18002: AND
18003: PUSH
18004: LD_OWVAR 67
18008: PUSH
18009: LD_INT 3
18011: LESS
18012: AND
18013: IFFALSE 18032
18015: GO 18017
18017: DISABLE
// Difficulty := Difficulty + 1 ;
18018: LD_ADDR_OWVAR 67
18022: PUSH
18023: LD_OWVAR 67
18027: PUSH
18028: LD_INT 1
18030: PLUS
18031: ST_TO_ADDR
18032: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18033: LD_EXP 34
18037: PUSH
18038: LD_EXP 53
18042: AND
18043: IFFALSE 18146
18045: GO 18047
18047: DISABLE
18048: LD_INT 0
18050: PPUSH
// begin for i := 1 to 5 do
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: DOUBLE
18057: LD_INT 1
18059: DEC
18060: ST_TO_ADDR
18061: LD_INT 5
18063: PUSH
18064: FOR_TO
18065: IFFALSE 18144
// begin uc_nation := nation_nature ;
18067: LD_ADDR_OWVAR 21
18071: PUSH
18072: LD_INT 0
18074: ST_TO_ADDR
// uc_side := 0 ;
18075: LD_ADDR_OWVAR 20
18079: PUSH
18080: LD_INT 0
18082: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18083: LD_ADDR_OWVAR 29
18087: PUSH
18088: LD_INT 12
18090: PUSH
18091: LD_INT 12
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: ST_TO_ADDR
// hc_agressivity := 20 ;
18098: LD_ADDR_OWVAR 35
18102: PUSH
18103: LD_INT 20
18105: ST_TO_ADDR
// hc_class := class_tiger ;
18106: LD_ADDR_OWVAR 28
18110: PUSH
18111: LD_INT 14
18113: ST_TO_ADDR
// hc_gallery :=  ;
18114: LD_ADDR_OWVAR 33
18118: PUSH
18119: LD_STRING 
18121: ST_TO_ADDR
// hc_name :=  ;
18122: LD_ADDR_OWVAR 26
18126: PUSH
18127: LD_STRING 
18129: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18130: CALL_OW 44
18134: PPUSH
18135: LD_INT 0
18137: PPUSH
18138: CALL_OW 51
// end ;
18142: GO 18064
18144: POP
18145: POP
// end ;
18146: PPOPN 1
18148: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18149: LD_EXP 34
18153: PUSH
18154: LD_EXP 54
18158: AND
18159: IFFALSE 18168
18161: GO 18163
18163: DISABLE
// StreamSibBomb ;
18164: CALL 18169 0 0
18168: END
// export function StreamSibBomb ; var i , x , y ; begin
18169: LD_INT 0
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
// result := false ;
18175: LD_ADDR_VAR 0 1
18179: PUSH
18180: LD_INT 0
18182: ST_TO_ADDR
// for i := 1 to 16 do
18183: LD_ADDR_VAR 0 2
18187: PUSH
18188: DOUBLE
18189: LD_INT 1
18191: DEC
18192: ST_TO_ADDR
18193: LD_INT 16
18195: PUSH
18196: FOR_TO
18197: IFFALSE 18396
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18199: LD_ADDR_VAR 0 3
18203: PUSH
18204: LD_INT 10
18206: PUSH
18207: LD_INT 20
18209: PUSH
18210: LD_INT 30
18212: PUSH
18213: LD_INT 40
18215: PUSH
18216: LD_INT 50
18218: PUSH
18219: LD_INT 60
18221: PUSH
18222: LD_INT 70
18224: PUSH
18225: LD_INT 80
18227: PUSH
18228: LD_INT 90
18230: PUSH
18231: LD_INT 100
18233: PUSH
18234: LD_INT 110
18236: PUSH
18237: LD_INT 120
18239: PUSH
18240: LD_INT 130
18242: PUSH
18243: LD_INT 140
18245: PUSH
18246: LD_INT 150
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 1
18268: PPUSH
18269: LD_INT 15
18271: PPUSH
18272: CALL_OW 12
18276: ARRAY
18277: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18278: LD_ADDR_VAR 0 4
18282: PUSH
18283: LD_INT 10
18285: PUSH
18286: LD_INT 20
18288: PUSH
18289: LD_INT 30
18291: PUSH
18292: LD_INT 40
18294: PUSH
18295: LD_INT 50
18297: PUSH
18298: LD_INT 60
18300: PUSH
18301: LD_INT 70
18303: PUSH
18304: LD_INT 80
18306: PUSH
18307: LD_INT 90
18309: PUSH
18310: LD_INT 100
18312: PUSH
18313: LD_INT 110
18315: PUSH
18316: LD_INT 120
18318: PUSH
18319: LD_INT 130
18321: PUSH
18322: LD_INT 140
18324: PUSH
18325: LD_INT 150
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 1
18347: PPUSH
18348: LD_INT 15
18350: PPUSH
18351: CALL_OW 12
18355: ARRAY
18356: ST_TO_ADDR
// if ValidHex ( x , y ) then
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_VAR 0 4
18366: PPUSH
18367: CALL_OW 488
18371: IFFALSE 18394
// begin result := [ x , y ] ;
18373: LD_ADDR_VAR 0 1
18377: PUSH
18378: LD_VAR 0 3
18382: PUSH
18383: LD_VAR 0 4
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: ST_TO_ADDR
// break ;
18392: GO 18396
// end ; end ;
18394: GO 18196
18396: POP
18397: POP
// if result then
18398: LD_VAR 0 1
18402: IFFALSE 18462
// begin ToLua ( playSibBomb() ) ;
18404: LD_STRING playSibBomb()
18406: PPUSH
18407: CALL_OW 559
// wait ( 0 0$14 ) ;
18411: LD_INT 490
18413: PPUSH
18414: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18418: LD_VAR 0 1
18422: PUSH
18423: LD_INT 1
18425: ARRAY
18426: PPUSH
18427: LD_VAR 0 1
18431: PUSH
18432: LD_INT 2
18434: ARRAY
18435: PPUSH
18436: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18440: LD_VAR 0 1
18444: PUSH
18445: LD_INT 1
18447: ARRAY
18448: PPUSH
18449: LD_VAR 0 1
18453: PUSH
18454: LD_INT 2
18456: ARRAY
18457: PPUSH
18458: CALL_OW 429
// end ; end ;
18462: LD_VAR 0 1
18466: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18467: LD_EXP 34
18471: PUSH
18472: LD_EXP 56
18476: AND
18477: IFFALSE 18489
18479: GO 18481
18481: DISABLE
// YouLost (  ) ;
18482: LD_STRING 
18484: PPUSH
18485: CALL_OW 104
18489: END
// every 0 0$1 trigger StreamModeActive and sFog do
18490: LD_EXP 34
18494: PUSH
18495: LD_EXP 55
18499: AND
18500: IFFALSE 18514
18502: GO 18504
18504: DISABLE
// FogOff ( your_side ) ;
18505: LD_OWVAR 2
18509: PPUSH
18510: CALL_OW 344
18514: END
// every 0 0$1 trigger StreamModeActive and sSun do
18515: LD_EXP 34
18519: PUSH
18520: LD_EXP 57
18524: AND
18525: IFFALSE 18553
18527: GO 18529
18529: DISABLE
// begin solar_recharge_percent := 0 ;
18530: LD_ADDR_OWVAR 79
18534: PUSH
18535: LD_INT 0
18537: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18538: LD_INT 10500
18540: PPUSH
18541: CALL_OW 67
// solar_recharge_percent := 100 ;
18545: LD_ADDR_OWVAR 79
18549: PUSH
18550: LD_INT 100
18552: ST_TO_ADDR
// end ;
18553: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18554: LD_EXP 34
18558: PUSH
18559: LD_EXP 58
18563: AND
18564: IFFALSE 18803
18566: GO 18568
18568: DISABLE
18569: LD_INT 0
18571: PPUSH
18572: PPUSH
18573: PPUSH
// begin tmp := [ ] ;
18574: LD_ADDR_VAR 0 3
18578: PUSH
18579: EMPTY
18580: ST_TO_ADDR
// for i := 1 to 6 do
18581: LD_ADDR_VAR 0 1
18585: PUSH
18586: DOUBLE
18587: LD_INT 1
18589: DEC
18590: ST_TO_ADDR
18591: LD_INT 6
18593: PUSH
18594: FOR_TO
18595: IFFALSE 18700
// begin uc_nation := nation_nature ;
18597: LD_ADDR_OWVAR 21
18601: PUSH
18602: LD_INT 0
18604: ST_TO_ADDR
// uc_side := 0 ;
18605: LD_ADDR_OWVAR 20
18609: PUSH
18610: LD_INT 0
18612: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18613: LD_ADDR_OWVAR 29
18617: PUSH
18618: LD_INT 12
18620: PUSH
18621: LD_INT 12
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: ST_TO_ADDR
// hc_agressivity := 20 ;
18628: LD_ADDR_OWVAR 35
18632: PUSH
18633: LD_INT 20
18635: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18636: LD_ADDR_OWVAR 28
18640: PUSH
18641: LD_INT 17
18643: ST_TO_ADDR
// hc_gallery :=  ;
18644: LD_ADDR_OWVAR 33
18648: PUSH
18649: LD_STRING 
18651: ST_TO_ADDR
// hc_name :=  ;
18652: LD_ADDR_OWVAR 26
18656: PUSH
18657: LD_STRING 
18659: ST_TO_ADDR
// un := CreateHuman ;
18660: LD_ADDR_VAR 0 2
18664: PUSH
18665: CALL_OW 44
18669: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18670: LD_VAR 0 2
18674: PPUSH
18675: LD_INT 1
18677: PPUSH
18678: CALL_OW 51
// tmp := tmp ^ un ;
18682: LD_ADDR_VAR 0 3
18686: PUSH
18687: LD_VAR 0 3
18691: PUSH
18692: LD_VAR 0 2
18696: ADD
18697: ST_TO_ADDR
// end ;
18698: GO 18594
18700: POP
18701: POP
// repeat wait ( 0 0$1 ) ;
18702: LD_INT 35
18704: PPUSH
18705: CALL_OW 67
// for un in tmp do
18709: LD_ADDR_VAR 0 2
18713: PUSH
18714: LD_VAR 0 3
18718: PUSH
18719: FOR_IN
18720: IFFALSE 18794
// begin if IsDead ( un ) then
18722: LD_VAR 0 2
18726: PPUSH
18727: CALL_OW 301
18731: IFFALSE 18751
// begin tmp := tmp diff un ;
18733: LD_ADDR_VAR 0 3
18737: PUSH
18738: LD_VAR 0 3
18742: PUSH
18743: LD_VAR 0 2
18747: DIFF
18748: ST_TO_ADDR
// continue ;
18749: GO 18719
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18751: LD_VAR 0 2
18755: PPUSH
18756: LD_INT 3
18758: PUSH
18759: LD_INT 22
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PPUSH
18773: CALL_OW 69
18777: PPUSH
18778: LD_VAR 0 2
18782: PPUSH
18783: CALL_OW 74
18787: PPUSH
18788: CALL_OW 115
// end ;
18792: GO 18719
18794: POP
18795: POP
// until not tmp ;
18796: LD_VAR 0 3
18800: NOT
18801: IFFALSE 18702
// end ;
18803: PPOPN 3
18805: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18806: LD_EXP 34
18810: PUSH
18811: LD_EXP 59
18815: AND
18816: IFFALSE 18870
18818: GO 18820
18820: DISABLE
// begin ToLua ( displayTroll(); ) ;
18821: LD_STRING displayTroll();
18823: PPUSH
18824: CALL_OW 559
// wait ( 3 3$00 ) ;
18828: LD_INT 6300
18830: PPUSH
18831: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18835: LD_STRING hideTroll();
18837: PPUSH
18838: CALL_OW 559
// wait ( 1 1$00 ) ;
18842: LD_INT 2100
18844: PPUSH
18845: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18849: LD_STRING displayTroll();
18851: PPUSH
18852: CALL_OW 559
// wait ( 1 1$00 ) ;
18856: LD_INT 2100
18858: PPUSH
18859: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18863: LD_STRING hideTroll();
18865: PPUSH
18866: CALL_OW 559
// end ;
18870: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18871: LD_EXP 34
18875: PUSH
18876: LD_EXP 60
18880: AND
18881: IFFALSE 18944
18883: GO 18885
18885: DISABLE
18886: LD_INT 0
18888: PPUSH
// begin p := 0 ;
18889: LD_ADDR_VAR 0 1
18893: PUSH
18894: LD_INT 0
18896: ST_TO_ADDR
// repeat game_speed := 1 ;
18897: LD_ADDR_OWVAR 65
18901: PUSH
18902: LD_INT 1
18904: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18905: LD_INT 35
18907: PPUSH
18908: CALL_OW 67
// p := p + 1 ;
18912: LD_ADDR_VAR 0 1
18916: PUSH
18917: LD_VAR 0 1
18921: PUSH
18922: LD_INT 1
18924: PLUS
18925: ST_TO_ADDR
// until p >= 60 ;
18926: LD_VAR 0 1
18930: PUSH
18931: LD_INT 60
18933: GREATEREQUAL
18934: IFFALSE 18897
// game_speed := 4 ;
18936: LD_ADDR_OWVAR 65
18940: PUSH
18941: LD_INT 4
18943: ST_TO_ADDR
// end ;
18944: PPOPN 1
18946: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18947: LD_EXP 34
18951: PUSH
18952: LD_EXP 61
18956: AND
18957: IFFALSE 19103
18959: GO 18961
18961: DISABLE
18962: LD_INT 0
18964: PPUSH
18965: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18966: LD_ADDR_VAR 0 1
18970: PUSH
18971: LD_INT 22
18973: PUSH
18974: LD_OWVAR 2
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: LD_INT 0
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 30
18998: PUSH
18999: LD_INT 1
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: LIST
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PPUSH
19015: CALL_OW 69
19019: ST_TO_ADDR
// if not depot then
19020: LD_VAR 0 1
19024: NOT
19025: IFFALSE 19029
// exit ;
19027: GO 19103
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19029: LD_ADDR_VAR 0 2
19033: PUSH
19034: LD_VAR 0 1
19038: PUSH
19039: LD_INT 1
19041: PPUSH
19042: LD_VAR 0 1
19046: PPUSH
19047: CALL_OW 12
19051: ARRAY
19052: PPUSH
19053: CALL_OW 274
19057: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19058: LD_VAR 0 2
19062: PPUSH
19063: LD_INT 1
19065: PPUSH
19066: LD_INT 0
19068: PPUSH
19069: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19073: LD_VAR 0 2
19077: PPUSH
19078: LD_INT 2
19080: PPUSH
19081: LD_INT 0
19083: PPUSH
19084: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19088: LD_VAR 0 2
19092: PPUSH
19093: LD_INT 3
19095: PPUSH
19096: LD_INT 0
19098: PPUSH
19099: CALL_OW 277
// end ;
19103: PPOPN 2
19105: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19106: LD_EXP 34
19110: PUSH
19111: LD_EXP 62
19115: AND
19116: IFFALSE 19213
19118: GO 19120
19120: DISABLE
19121: LD_INT 0
19123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19124: LD_ADDR_VAR 0 1
19128: PUSH
19129: LD_INT 22
19131: PUSH
19132: LD_OWVAR 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 21
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 3
19153: PUSH
19154: LD_INT 23
19156: PUSH
19157: LD_INT 0
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: PPUSH
19173: CALL_OW 69
19177: ST_TO_ADDR
// if not tmp then
19178: LD_VAR 0 1
19182: NOT
19183: IFFALSE 19187
// exit ;
19185: GO 19213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19187: LD_VAR 0 1
19191: PUSH
19192: LD_INT 1
19194: PPUSH
19195: LD_VAR 0 1
19199: PPUSH
19200: CALL_OW 12
19204: ARRAY
19205: PPUSH
19206: LD_INT 200
19208: PPUSH
19209: CALL_OW 234
// end ;
19213: PPOPN 1
19215: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19216: LD_EXP 34
19220: PUSH
19221: LD_EXP 63
19225: AND
19226: IFFALSE 19305
19228: GO 19230
19230: DISABLE
19231: LD_INT 0
19233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19234: LD_ADDR_VAR 0 1
19238: PUSH
19239: LD_INT 22
19241: PUSH
19242: LD_OWVAR 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 21
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PPUSH
19265: CALL_OW 69
19269: ST_TO_ADDR
// if not tmp then
19270: LD_VAR 0 1
19274: NOT
19275: IFFALSE 19279
// exit ;
19277: GO 19305
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19279: LD_VAR 0 1
19283: PUSH
19284: LD_INT 1
19286: PPUSH
19287: LD_VAR 0 1
19291: PPUSH
19292: CALL_OW 12
19296: ARRAY
19297: PPUSH
19298: LD_INT 60
19300: PPUSH
19301: CALL_OW 234
// end ;
19305: PPOPN 1
19307: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19308: LD_EXP 34
19312: PUSH
19313: LD_EXP 64
19317: AND
19318: IFFALSE 19417
19320: GO 19322
19322: DISABLE
19323: LD_INT 0
19325: PPUSH
19326: PPUSH
// begin enable ;
19327: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19328: LD_ADDR_VAR 0 1
19332: PUSH
19333: LD_INT 22
19335: PUSH
19336: LD_OWVAR 2
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 61
19347: PUSH
19348: EMPTY
19349: LIST
19350: PUSH
19351: LD_INT 33
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: PPUSH
19366: CALL_OW 69
19370: ST_TO_ADDR
// if not tmp then
19371: LD_VAR 0 1
19375: NOT
19376: IFFALSE 19380
// exit ;
19378: GO 19417
// for i in tmp do
19380: LD_ADDR_VAR 0 2
19384: PUSH
19385: LD_VAR 0 1
19389: PUSH
19390: FOR_IN
19391: IFFALSE 19415
// if IsControledBy ( i ) then
19393: LD_VAR 0 2
19397: PPUSH
19398: CALL_OW 312
19402: IFFALSE 19413
// ComUnlink ( i ) ;
19404: LD_VAR 0 2
19408: PPUSH
19409: CALL_OW 136
19413: GO 19390
19415: POP
19416: POP
// end ;
19417: PPOPN 2
19419: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19420: LD_EXP 34
19424: PUSH
19425: LD_EXP 65
19429: AND
19430: IFFALSE 19570
19432: GO 19434
19434: DISABLE
19435: LD_INT 0
19437: PPUSH
19438: PPUSH
// begin ToLua ( displayPowell(); ) ;
19439: LD_STRING displayPowell();
19441: PPUSH
19442: CALL_OW 559
// uc_side := 0 ;
19446: LD_ADDR_OWVAR 20
19450: PUSH
19451: LD_INT 0
19453: ST_TO_ADDR
// uc_nation := 2 ;
19454: LD_ADDR_OWVAR 21
19458: PUSH
19459: LD_INT 2
19461: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19462: LD_ADDR_OWVAR 37
19466: PUSH
19467: LD_INT 14
19469: ST_TO_ADDR
// vc_engine := engine_siberite ;
19470: LD_ADDR_OWVAR 39
19474: PUSH
19475: LD_INT 3
19477: ST_TO_ADDR
// vc_control := control_apeman ;
19478: LD_ADDR_OWVAR 38
19482: PUSH
19483: LD_INT 5
19485: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19486: LD_ADDR_OWVAR 40
19490: PUSH
19491: LD_INT 29
19493: ST_TO_ADDR
// un := CreateVehicle ;
19494: LD_ADDR_VAR 0 2
19498: PUSH
19499: CALL_OW 45
19503: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19504: LD_VAR 0 2
19508: PPUSH
19509: LD_INT 1
19511: PPUSH
19512: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19516: LD_INT 35
19518: PPUSH
19519: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19523: LD_VAR 0 2
19527: PPUSH
19528: LD_INT 22
19530: PUSH
19531: LD_OWVAR 2
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PPUSH
19540: CALL_OW 69
19544: PPUSH
19545: LD_VAR 0 2
19549: PPUSH
19550: CALL_OW 74
19554: PPUSH
19555: CALL_OW 115
// until IsDead ( un ) ;
19559: LD_VAR 0 2
19563: PPUSH
19564: CALL_OW 301
19568: IFFALSE 19516
// end ;
19570: PPOPN 2
19572: END
// every 0 0$1 trigger StreamModeActive and sStu do
19573: LD_EXP 34
19577: PUSH
19578: LD_EXP 73
19582: AND
19583: IFFALSE 19599
19585: GO 19587
19587: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19588: LD_STRING displayStucuk();
19590: PPUSH
19591: CALL_OW 559
// ResetFog ;
19595: CALL_OW 335
// end ;
19599: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19600: LD_EXP 34
19604: PUSH
19605: LD_EXP 66
19609: AND
19610: IFFALSE 19751
19612: GO 19614
19614: DISABLE
19615: LD_INT 0
19617: PPUSH
19618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19619: LD_ADDR_VAR 0 2
19623: PUSH
19624: LD_INT 22
19626: PUSH
19627: LD_OWVAR 2
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 21
19638: PUSH
19639: LD_INT 1
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PPUSH
19650: CALL_OW 69
19654: ST_TO_ADDR
// if not tmp then
19655: LD_VAR 0 2
19659: NOT
19660: IFFALSE 19664
// exit ;
19662: GO 19751
// un := tmp [ rand ( 1 , tmp ) ] ;
19664: LD_ADDR_VAR 0 1
19668: PUSH
19669: LD_VAR 0 2
19673: PUSH
19674: LD_INT 1
19676: PPUSH
19677: LD_VAR 0 2
19681: PPUSH
19682: CALL_OW 12
19686: ARRAY
19687: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19688: LD_VAR 0 1
19692: PPUSH
19693: LD_INT 0
19695: PPUSH
19696: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19700: LD_VAR 0 1
19704: PPUSH
19705: LD_OWVAR 3
19709: PUSH
19710: LD_VAR 0 1
19714: DIFF
19715: PPUSH
19716: LD_VAR 0 1
19720: PPUSH
19721: CALL_OW 74
19725: PPUSH
19726: CALL_OW 115
// wait ( 0 0$20 ) ;
19730: LD_INT 700
19732: PPUSH
19733: CALL_OW 67
// SetSide ( un , your_side ) ;
19737: LD_VAR 0 1
19741: PPUSH
19742: LD_OWVAR 2
19746: PPUSH
19747: CALL_OW 235
// end ;
19751: PPOPN 2
19753: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19754: LD_EXP 34
19758: PUSH
19759: LD_EXP 67
19763: AND
19764: IFFALSE 19870
19766: GO 19768
19768: DISABLE
19769: LD_INT 0
19771: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19772: LD_ADDR_VAR 0 1
19776: PUSH
19777: LD_INT 22
19779: PUSH
19780: LD_OWVAR 2
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: LD_INT 30
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 30
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PPUSH
19821: CALL_OW 69
19825: ST_TO_ADDR
// if not depot then
19826: LD_VAR 0 1
19830: NOT
19831: IFFALSE 19835
// exit ;
19833: GO 19870
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19835: LD_VAR 0 1
19839: PUSH
19840: LD_INT 1
19842: ARRAY
19843: PPUSH
19844: CALL_OW 250
19848: PPUSH
19849: LD_VAR 0 1
19853: PUSH
19854: LD_INT 1
19856: ARRAY
19857: PPUSH
19858: CALL_OW 251
19862: PPUSH
19863: LD_INT 70
19865: PPUSH
19866: CALL_OW 495
// end ;
19870: PPOPN 1
19872: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19873: LD_EXP 34
19877: PUSH
19878: LD_EXP 68
19882: AND
19883: IFFALSE 20094
19885: GO 19887
19887: DISABLE
19888: LD_INT 0
19890: PPUSH
19891: PPUSH
19892: PPUSH
19893: PPUSH
19894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19895: LD_ADDR_VAR 0 5
19899: PUSH
19900: LD_INT 22
19902: PUSH
19903: LD_OWVAR 2
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 21
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PPUSH
19926: CALL_OW 69
19930: ST_TO_ADDR
// if not tmp then
19931: LD_VAR 0 5
19935: NOT
19936: IFFALSE 19940
// exit ;
19938: GO 20094
// for i in tmp do
19940: LD_ADDR_VAR 0 1
19944: PUSH
19945: LD_VAR 0 5
19949: PUSH
19950: FOR_IN
19951: IFFALSE 20092
// begin d := rand ( 0 , 5 ) ;
19953: LD_ADDR_VAR 0 4
19957: PUSH
19958: LD_INT 0
19960: PPUSH
19961: LD_INT 5
19963: PPUSH
19964: CALL_OW 12
19968: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19969: LD_ADDR_VAR 0 2
19973: PUSH
19974: LD_VAR 0 1
19978: PPUSH
19979: CALL_OW 250
19983: PPUSH
19984: LD_VAR 0 4
19988: PPUSH
19989: LD_INT 3
19991: PPUSH
19992: LD_INT 12
19994: PPUSH
19995: CALL_OW 12
19999: PPUSH
20000: CALL_OW 272
20004: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20005: LD_ADDR_VAR 0 3
20009: PUSH
20010: LD_VAR 0 1
20014: PPUSH
20015: CALL_OW 251
20019: PPUSH
20020: LD_VAR 0 4
20024: PPUSH
20025: LD_INT 3
20027: PPUSH
20028: LD_INT 12
20030: PPUSH
20031: CALL_OW 12
20035: PPUSH
20036: CALL_OW 273
20040: ST_TO_ADDR
// if ValidHex ( x , y ) then
20041: LD_VAR 0 2
20045: PPUSH
20046: LD_VAR 0 3
20050: PPUSH
20051: CALL_OW 488
20055: IFFALSE 20090
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20057: LD_VAR 0 1
20061: PPUSH
20062: LD_VAR 0 2
20066: PPUSH
20067: LD_VAR 0 3
20071: PPUSH
20072: LD_INT 3
20074: PPUSH
20075: LD_INT 6
20077: PPUSH
20078: CALL_OW 12
20082: PPUSH
20083: LD_INT 1
20085: PPUSH
20086: CALL_OW 483
// end ;
20090: GO 19950
20092: POP
20093: POP
// end ;
20094: PPOPN 5
20096: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20097: LD_EXP 34
20101: PUSH
20102: LD_EXP 69
20106: AND
20107: IFFALSE 20201
20109: GO 20111
20111: DISABLE
20112: LD_INT 0
20114: PPUSH
20115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20116: LD_ADDR_VAR 0 2
20120: PUSH
20121: LD_INT 22
20123: PUSH
20124: LD_OWVAR 2
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 32
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 21
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: LIST
20157: PPUSH
20158: CALL_OW 69
20162: ST_TO_ADDR
// if not tmp then
20163: LD_VAR 0 2
20167: NOT
20168: IFFALSE 20172
// exit ;
20170: GO 20201
// for i in tmp do
20172: LD_ADDR_VAR 0 1
20176: PUSH
20177: LD_VAR 0 2
20181: PUSH
20182: FOR_IN
20183: IFFALSE 20199
// SetFuel ( i , 0 ) ;
20185: LD_VAR 0 1
20189: PPUSH
20190: LD_INT 0
20192: PPUSH
20193: CALL_OW 240
20197: GO 20182
20199: POP
20200: POP
// end ;
20201: PPOPN 2
20203: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20204: LD_EXP 34
20208: PUSH
20209: LD_EXP 70
20213: AND
20214: IFFALSE 20280
20216: GO 20218
20218: DISABLE
20219: LD_INT 0
20221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20222: LD_ADDR_VAR 0 1
20226: PUSH
20227: LD_INT 22
20229: PUSH
20230: LD_OWVAR 2
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 30
20241: PUSH
20242: LD_INT 29
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PPUSH
20253: CALL_OW 69
20257: ST_TO_ADDR
// if not tmp then
20258: LD_VAR 0 1
20262: NOT
20263: IFFALSE 20267
// exit ;
20265: GO 20280
// DestroyUnit ( tmp [ 1 ] ) ;
20267: LD_VAR 0 1
20271: PUSH
20272: LD_INT 1
20274: ARRAY
20275: PPUSH
20276: CALL_OW 65
// end ;
20280: PPOPN 1
20282: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20283: LD_EXP 34
20287: PUSH
20288: LD_EXP 72
20292: AND
20293: IFFALSE 20422
20295: GO 20297
20297: DISABLE
20298: LD_INT 0
20300: PPUSH
// begin uc_side := 0 ;
20301: LD_ADDR_OWVAR 20
20305: PUSH
20306: LD_INT 0
20308: ST_TO_ADDR
// uc_nation := nation_arabian ;
20309: LD_ADDR_OWVAR 21
20313: PUSH
20314: LD_INT 2
20316: ST_TO_ADDR
// hc_gallery :=  ;
20317: LD_ADDR_OWVAR 33
20321: PUSH
20322: LD_STRING 
20324: ST_TO_ADDR
// hc_name :=  ;
20325: LD_ADDR_OWVAR 26
20329: PUSH
20330: LD_STRING 
20332: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20333: LD_INT 1
20335: PPUSH
20336: LD_INT 11
20338: PPUSH
20339: LD_INT 10
20341: PPUSH
20342: CALL_OW 380
// un := CreateHuman ;
20346: LD_ADDR_VAR 0 1
20350: PUSH
20351: CALL_OW 44
20355: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20356: LD_VAR 0 1
20360: PPUSH
20361: LD_INT 1
20363: PPUSH
20364: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20368: LD_INT 35
20370: PPUSH
20371: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20375: LD_VAR 0 1
20379: PPUSH
20380: LD_INT 22
20382: PUSH
20383: LD_OWVAR 2
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PPUSH
20392: CALL_OW 69
20396: PPUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: CALL_OW 74
20406: PPUSH
20407: CALL_OW 115
// until IsDead ( un ) ;
20411: LD_VAR 0 1
20415: PPUSH
20416: CALL_OW 301
20420: IFFALSE 20368
// end ;
20422: PPOPN 1
20424: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20425: LD_EXP 34
20429: PUSH
20430: LD_EXP 74
20434: AND
20435: IFFALSE 20447
20437: GO 20439
20439: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20440: LD_STRING earthquake(getX(game), 0, 32)
20442: PPUSH
20443: CALL_OW 559
20447: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20448: LD_EXP 34
20452: PUSH
20453: LD_EXP 75
20457: AND
20458: IFFALSE 20549
20460: GO 20462
20462: DISABLE
20463: LD_INT 0
20465: PPUSH
// begin enable ;
20466: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20467: LD_ADDR_VAR 0 1
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_OWVAR 2
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 21
20486: PUSH
20487: LD_INT 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 33
20496: PUSH
20497: LD_INT 3
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: LIST
20508: PPUSH
20509: CALL_OW 69
20513: ST_TO_ADDR
// if not tmp then
20514: LD_VAR 0 1
20518: NOT
20519: IFFALSE 20523
// exit ;
20521: GO 20549
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20523: LD_VAR 0 1
20527: PUSH
20528: LD_INT 1
20530: PPUSH
20531: LD_VAR 0 1
20535: PPUSH
20536: CALL_OW 12
20540: ARRAY
20541: PPUSH
20542: LD_INT 1
20544: PPUSH
20545: CALL_OW 234
// end ;
20549: PPOPN 1
20551: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20552: LD_EXP 34
20556: PUSH
20557: LD_EXP 76
20561: AND
20562: IFFALSE 20703
20564: GO 20566
20566: DISABLE
20567: LD_INT 0
20569: PPUSH
20570: PPUSH
20571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20572: LD_ADDR_VAR 0 3
20576: PUSH
20577: LD_INT 22
20579: PUSH
20580: LD_OWVAR 2
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 25
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PPUSH
20603: CALL_OW 69
20607: ST_TO_ADDR
// if not tmp then
20608: LD_VAR 0 3
20612: NOT
20613: IFFALSE 20617
// exit ;
20615: GO 20703
// un := tmp [ rand ( 1 , tmp ) ] ;
20617: LD_ADDR_VAR 0 2
20621: PUSH
20622: LD_VAR 0 3
20626: PUSH
20627: LD_INT 1
20629: PPUSH
20630: LD_VAR 0 3
20634: PPUSH
20635: CALL_OW 12
20639: ARRAY
20640: ST_TO_ADDR
// if Crawls ( un ) then
20641: LD_VAR 0 2
20645: PPUSH
20646: CALL_OW 318
20650: IFFALSE 20661
// ComWalk ( un ) ;
20652: LD_VAR 0 2
20656: PPUSH
20657: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20661: LD_VAR 0 2
20665: PPUSH
20666: LD_INT 9
20668: PPUSH
20669: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20673: LD_INT 28
20675: PPUSH
20676: LD_OWVAR 2
20680: PPUSH
20681: LD_INT 2
20683: PPUSH
20684: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20688: LD_INT 29
20690: PPUSH
20691: LD_OWVAR 2
20695: PPUSH
20696: LD_INT 2
20698: PPUSH
20699: CALL_OW 322
// end ;
20703: PPOPN 3
20705: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20706: LD_EXP 34
20710: PUSH
20711: LD_EXP 77
20715: AND
20716: IFFALSE 20827
20718: GO 20720
20720: DISABLE
20721: LD_INT 0
20723: PPUSH
20724: PPUSH
20725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20726: LD_ADDR_VAR 0 3
20730: PUSH
20731: LD_INT 22
20733: PUSH
20734: LD_OWVAR 2
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 25
20745: PUSH
20746: LD_INT 1
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PPUSH
20757: CALL_OW 69
20761: ST_TO_ADDR
// if not tmp then
20762: LD_VAR 0 3
20766: NOT
20767: IFFALSE 20771
// exit ;
20769: GO 20827
// un := tmp [ rand ( 1 , tmp ) ] ;
20771: LD_ADDR_VAR 0 2
20775: PUSH
20776: LD_VAR 0 3
20780: PUSH
20781: LD_INT 1
20783: PPUSH
20784: LD_VAR 0 3
20788: PPUSH
20789: CALL_OW 12
20793: ARRAY
20794: ST_TO_ADDR
// if Crawls ( un ) then
20795: LD_VAR 0 2
20799: PPUSH
20800: CALL_OW 318
20804: IFFALSE 20815
// ComWalk ( un ) ;
20806: LD_VAR 0 2
20810: PPUSH
20811: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20815: LD_VAR 0 2
20819: PPUSH
20820: LD_INT 8
20822: PPUSH
20823: CALL_OW 336
// end ;
20827: PPOPN 3
20829: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20830: LD_EXP 34
20834: PUSH
20835: LD_EXP 78
20839: AND
20840: IFFALSE 20984
20842: GO 20844
20844: DISABLE
20845: LD_INT 0
20847: PPUSH
20848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20849: LD_ADDR_VAR 0 2
20853: PUSH
20854: LD_INT 22
20856: PUSH
20857: LD_OWVAR 2
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 21
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 2
20878: PUSH
20879: LD_INT 34
20881: PUSH
20882: LD_INT 12
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 34
20891: PUSH
20892: LD_INT 51
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 34
20901: PUSH
20902: LD_INT 32
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: PPUSH
20920: CALL_OW 69
20924: ST_TO_ADDR
// if not tmp then
20925: LD_VAR 0 2
20929: NOT
20930: IFFALSE 20934
// exit ;
20932: GO 20984
// for i in tmp do
20934: LD_ADDR_VAR 0 1
20938: PUSH
20939: LD_VAR 0 2
20943: PUSH
20944: FOR_IN
20945: IFFALSE 20982
// if GetCargo ( i , mat_artifact ) = 0 then
20947: LD_VAR 0 1
20951: PPUSH
20952: LD_INT 4
20954: PPUSH
20955: CALL_OW 289
20959: PUSH
20960: LD_INT 0
20962: EQUAL
20963: IFFALSE 20980
// SetCargo ( i , mat_siberit , 100 ) ;
20965: LD_VAR 0 1
20969: PPUSH
20970: LD_INT 3
20972: PPUSH
20973: LD_INT 100
20975: PPUSH
20976: CALL_OW 290
20980: GO 20944
20982: POP
20983: POP
// end ;
20984: PPOPN 2
20986: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20987: LD_EXP 34
20991: PUSH
20992: LD_EXP 79
20996: AND
20997: IFFALSE 21150
20999: GO 21001
21001: DISABLE
21002: LD_INT 0
21004: PPUSH
21005: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21006: LD_ADDR_VAR 0 2
21010: PUSH
21011: LD_INT 22
21013: PUSH
21014: LD_OWVAR 2
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PPUSH
21023: CALL_OW 69
21027: ST_TO_ADDR
// if not tmp then
21028: LD_VAR 0 2
21032: NOT
21033: IFFALSE 21037
// exit ;
21035: GO 21150
// for i := 1 to 2 do
21037: LD_ADDR_VAR 0 1
21041: PUSH
21042: DOUBLE
21043: LD_INT 1
21045: DEC
21046: ST_TO_ADDR
21047: LD_INT 2
21049: PUSH
21050: FOR_TO
21051: IFFALSE 21148
// begin uc_side := your_side ;
21053: LD_ADDR_OWVAR 20
21057: PUSH
21058: LD_OWVAR 2
21062: ST_TO_ADDR
// uc_nation := nation_american ;
21063: LD_ADDR_OWVAR 21
21067: PUSH
21068: LD_INT 1
21070: ST_TO_ADDR
// vc_chassis := us_morphling ;
21071: LD_ADDR_OWVAR 37
21075: PUSH
21076: LD_INT 5
21078: ST_TO_ADDR
// vc_engine := engine_siberite ;
21079: LD_ADDR_OWVAR 39
21083: PUSH
21084: LD_INT 3
21086: ST_TO_ADDR
// vc_control := control_computer ;
21087: LD_ADDR_OWVAR 38
21091: PUSH
21092: LD_INT 3
21094: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21095: LD_ADDR_OWVAR 40
21099: PUSH
21100: LD_INT 10
21102: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
21103: CALL_OW 45
21107: PPUSH
21108: LD_VAR 0 2
21112: PUSH
21113: LD_INT 1
21115: ARRAY
21116: PPUSH
21117: CALL_OW 250
21121: PPUSH
21122: LD_VAR 0 2
21126: PUSH
21127: LD_INT 1
21129: ARRAY
21130: PPUSH
21131: CALL_OW 251
21135: PPUSH
21136: LD_INT 12
21138: PPUSH
21139: LD_INT 1
21141: PPUSH
21142: CALL_OW 50
// end ;
21146: GO 21050
21148: POP
21149: POP
// end ;
21150: PPOPN 2
21152: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21153: LD_EXP 34
21157: PUSH
21158: LD_EXP 80
21162: AND
21163: IFFALSE 21385
21165: GO 21167
21167: DISABLE
21168: LD_INT 0
21170: PPUSH
21171: PPUSH
21172: PPUSH
21173: PPUSH
21174: PPUSH
21175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21176: LD_ADDR_VAR 0 6
21180: PUSH
21181: LD_INT 22
21183: PUSH
21184: LD_OWVAR 2
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 21
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 3
21205: PUSH
21206: LD_INT 23
21208: PUSH
21209: LD_INT 0
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: LIST
21224: PPUSH
21225: CALL_OW 69
21229: ST_TO_ADDR
// if not tmp then
21230: LD_VAR 0 6
21234: NOT
21235: IFFALSE 21239
// exit ;
21237: GO 21385
// s1 := rand ( 1 , 4 ) ;
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_INT 1
21246: PPUSH
21247: LD_INT 4
21249: PPUSH
21250: CALL_OW 12
21254: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21255: LD_ADDR_VAR 0 4
21259: PUSH
21260: LD_VAR 0 6
21264: PUSH
21265: LD_INT 1
21267: ARRAY
21268: PPUSH
21269: LD_VAR 0 2
21273: PPUSH
21274: CALL_OW 259
21278: ST_TO_ADDR
// if s1 = 1 then
21279: LD_VAR 0 2
21283: PUSH
21284: LD_INT 1
21286: EQUAL
21287: IFFALSE 21307
// s2 := rand ( 2 , 4 ) else
21289: LD_ADDR_VAR 0 3
21293: PUSH
21294: LD_INT 2
21296: PPUSH
21297: LD_INT 4
21299: PPUSH
21300: CALL_OW 12
21304: ST_TO_ADDR
21305: GO 21315
// s2 := 1 ;
21307: LD_ADDR_VAR 0 3
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21315: LD_ADDR_VAR 0 5
21319: PUSH
21320: LD_VAR 0 6
21324: PUSH
21325: LD_INT 1
21327: ARRAY
21328: PPUSH
21329: LD_VAR 0 3
21333: PPUSH
21334: CALL_OW 259
21338: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21339: LD_VAR 0 6
21343: PUSH
21344: LD_INT 1
21346: ARRAY
21347: PPUSH
21348: LD_VAR 0 2
21352: PPUSH
21353: LD_VAR 0 5
21357: PPUSH
21358: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21362: LD_VAR 0 6
21366: PUSH
21367: LD_INT 1
21369: ARRAY
21370: PPUSH
21371: LD_VAR 0 3
21375: PPUSH
21376: LD_VAR 0 4
21380: PPUSH
21381: CALL_OW 237
// end ;
21385: PPOPN 6
21387: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21388: LD_EXP 34
21392: PUSH
21393: LD_EXP 81
21397: AND
21398: IFFALSE 21477
21400: GO 21402
21402: DISABLE
21403: LD_INT 0
21405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21406: LD_ADDR_VAR 0 1
21410: PUSH
21411: LD_INT 22
21413: PUSH
21414: LD_OWVAR 2
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 30
21425: PUSH
21426: LD_INT 3
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PPUSH
21437: CALL_OW 69
21441: ST_TO_ADDR
// if not tmp then
21442: LD_VAR 0 1
21446: NOT
21447: IFFALSE 21451
// exit ;
21449: GO 21477
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21451: LD_VAR 0 1
21455: PUSH
21456: LD_INT 1
21458: PPUSH
21459: LD_VAR 0 1
21463: PPUSH
21464: CALL_OW 12
21468: ARRAY
21469: PPUSH
21470: LD_INT 1
21472: PPUSH
21473: CALL_OW 234
// end ;
21477: PPOPN 1
21479: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21480: LD_EXP 34
21484: PUSH
21485: LD_EXP 82
21489: AND
21490: IFFALSE 21602
21492: GO 21494
21494: DISABLE
21495: LD_INT 0
21497: PPUSH
21498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21499: LD_ADDR_VAR 0 2
21503: PUSH
21504: LD_INT 22
21506: PUSH
21507: LD_OWVAR 2
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 2
21518: PUSH
21519: LD_INT 30
21521: PUSH
21522: LD_INT 27
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 30
21531: PUSH
21532: LD_INT 26
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 30
21541: PUSH
21542: LD_INT 28
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PPUSH
21559: CALL_OW 69
21563: ST_TO_ADDR
// if not tmp then
21564: LD_VAR 0 2
21568: NOT
21569: IFFALSE 21573
// exit ;
21571: GO 21602
// for i in tmp do
21573: LD_ADDR_VAR 0 1
21577: PUSH
21578: LD_VAR 0 2
21582: PUSH
21583: FOR_IN
21584: IFFALSE 21600
// SetLives ( i , 1 ) ;
21586: LD_VAR 0 1
21590: PPUSH
21591: LD_INT 1
21593: PPUSH
21594: CALL_OW 234
21598: GO 21583
21600: POP
21601: POP
// end ;
21602: PPOPN 2
21604: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21605: LD_EXP 34
21609: PUSH
21610: LD_EXP 83
21614: AND
21615: IFFALSE 21889
21617: GO 21619
21619: DISABLE
21620: LD_INT 0
21622: PPUSH
21623: PPUSH
21624: PPUSH
// begin i := rand ( 1 , 7 ) ;
21625: LD_ADDR_VAR 0 1
21629: PUSH
21630: LD_INT 1
21632: PPUSH
21633: LD_INT 7
21635: PPUSH
21636: CALL_OW 12
21640: ST_TO_ADDR
// case i of 1 :
21641: LD_VAR 0 1
21645: PUSH
21646: LD_INT 1
21648: DOUBLE
21649: EQUAL
21650: IFTRUE 21654
21652: GO 21664
21654: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21655: LD_STRING earthquake(getX(game), 0, 32)
21657: PPUSH
21658: CALL_OW 559
21662: GO 21889
21664: LD_INT 2
21666: DOUBLE
21667: EQUAL
21668: IFTRUE 21672
21670: GO 21686
21672: POP
// begin ToLua ( displayStucuk(); ) ;
21673: LD_STRING displayStucuk();
21675: PPUSH
21676: CALL_OW 559
// ResetFog ;
21680: CALL_OW 335
// end ; 3 :
21684: GO 21889
21686: LD_INT 3
21688: DOUBLE
21689: EQUAL
21690: IFTRUE 21694
21692: GO 21798
21694: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21695: LD_ADDR_VAR 0 2
21699: PUSH
21700: LD_INT 22
21702: PUSH
21703: LD_OWVAR 2
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 25
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PPUSH
21726: CALL_OW 69
21730: ST_TO_ADDR
// if not tmp then
21731: LD_VAR 0 2
21735: NOT
21736: IFFALSE 21740
// exit ;
21738: GO 21889
// un := tmp [ rand ( 1 , tmp ) ] ;
21740: LD_ADDR_VAR 0 3
21744: PUSH
21745: LD_VAR 0 2
21749: PUSH
21750: LD_INT 1
21752: PPUSH
21753: LD_VAR 0 2
21757: PPUSH
21758: CALL_OW 12
21762: ARRAY
21763: ST_TO_ADDR
// if Crawls ( un ) then
21764: LD_VAR 0 3
21768: PPUSH
21769: CALL_OW 318
21773: IFFALSE 21784
// ComWalk ( un ) ;
21775: LD_VAR 0 3
21779: PPUSH
21780: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21784: LD_VAR 0 3
21788: PPUSH
21789: LD_INT 8
21791: PPUSH
21792: CALL_OW 336
// end ; 4 :
21796: GO 21889
21798: LD_INT 4
21800: DOUBLE
21801: EQUAL
21802: IFTRUE 21806
21804: GO 21867
21806: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21807: LD_ADDR_VAR 0 2
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_OWVAR 2
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 30
21826: PUSH
21827: LD_INT 29
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PPUSH
21838: CALL_OW 69
21842: ST_TO_ADDR
// if not tmp then
21843: LD_VAR 0 2
21847: NOT
21848: IFFALSE 21852
// exit ;
21850: GO 21889
// DestroyUnit ( tmp [ 1 ] ) ;
21852: LD_VAR 0 2
21856: PUSH
21857: LD_INT 1
21859: ARRAY
21860: PPUSH
21861: CALL_OW 65
// end ; 5 .. 7 :
21865: GO 21889
21867: LD_INT 5
21869: DOUBLE
21870: GREATEREQUAL
21871: IFFALSE 21879
21873: LD_INT 7
21875: DOUBLE
21876: LESSEQUAL
21877: IFTRUE 21881
21879: GO 21888
21881: POP
// StreamSibBomb ; end ;
21882: CALL 18169 0 0
21886: GO 21889
21888: POP
// end ;
21889: PPOPN 3
21891: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21892: LD_EXP 34
21896: PUSH
21897: LD_EXP 84
21901: AND
21902: IFFALSE 22058
21904: GO 21906
21906: DISABLE
21907: LD_INT 0
21909: PPUSH
21910: PPUSH
21911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21912: LD_ADDR_VAR 0 2
21916: PUSH
21917: LD_INT 81
21919: PUSH
21920: LD_OWVAR 2
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 2
21931: PUSH
21932: LD_INT 21
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 21
21944: PUSH
21945: LD_INT 2
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PPUSH
21961: CALL_OW 69
21965: ST_TO_ADDR
// if not tmp then
21966: LD_VAR 0 2
21970: NOT
21971: IFFALSE 21975
// exit ;
21973: GO 22058
// p := 0 ;
21975: LD_ADDR_VAR 0 3
21979: PUSH
21980: LD_INT 0
21982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21983: LD_INT 35
21985: PPUSH
21986: CALL_OW 67
// p := p + 1 ;
21990: LD_ADDR_VAR 0 3
21994: PUSH
21995: LD_VAR 0 3
21999: PUSH
22000: LD_INT 1
22002: PLUS
22003: ST_TO_ADDR
// for i in tmp do
22004: LD_ADDR_VAR 0 1
22008: PUSH
22009: LD_VAR 0 2
22013: PUSH
22014: FOR_IN
22015: IFFALSE 22046
// if GetLives ( i ) < 1000 then
22017: LD_VAR 0 1
22021: PPUSH
22022: CALL_OW 256
22026: PUSH
22027: LD_INT 1000
22029: LESS
22030: IFFALSE 22044
// SetLives ( i , 1000 ) ;
22032: LD_VAR 0 1
22036: PPUSH
22037: LD_INT 1000
22039: PPUSH
22040: CALL_OW 234
22044: GO 22014
22046: POP
22047: POP
// until p > 20 ;
22048: LD_VAR 0 3
22052: PUSH
22053: LD_INT 20
22055: GREATER
22056: IFFALSE 21983
// end ;
22058: PPOPN 3
22060: END
// every 0 0$1 trigger StreamModeActive and sTime do
22061: LD_EXP 34
22065: PUSH
22066: LD_EXP 85
22070: AND
22071: IFFALSE 22106
22073: GO 22075
22075: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22076: LD_INT 28
22078: PPUSH
22079: LD_OWVAR 2
22083: PPUSH
22084: LD_INT 2
22086: PPUSH
22087: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22091: LD_INT 30
22093: PPUSH
22094: LD_OWVAR 2
22098: PPUSH
22099: LD_INT 2
22101: PPUSH
22102: CALL_OW 322
// end ;
22106: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22107: LD_EXP 34
22111: PUSH
22112: LD_EXP 86
22116: AND
22117: IFFALSE 22238
22119: GO 22121
22121: DISABLE
22122: LD_INT 0
22124: PPUSH
22125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22126: LD_ADDR_VAR 0 2
22130: PUSH
22131: LD_INT 22
22133: PUSH
22134: LD_OWVAR 2
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 21
22145: PUSH
22146: LD_INT 1
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 3
22155: PUSH
22156: LD_INT 23
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: LIST
22174: PPUSH
22175: CALL_OW 69
22179: ST_TO_ADDR
// if not tmp then
22180: LD_VAR 0 2
22184: NOT
22185: IFFALSE 22189
// exit ;
22187: GO 22238
// for i in tmp do
22189: LD_ADDR_VAR 0 1
22193: PUSH
22194: LD_VAR 0 2
22198: PUSH
22199: FOR_IN
22200: IFFALSE 22236
// begin if Crawls ( i ) then
22202: LD_VAR 0 1
22206: PPUSH
22207: CALL_OW 318
22211: IFFALSE 22222
// ComWalk ( i ) ;
22213: LD_VAR 0 1
22217: PPUSH
22218: CALL_OW 138
// SetClass ( i , 2 ) ;
22222: LD_VAR 0 1
22226: PPUSH
22227: LD_INT 2
22229: PPUSH
22230: CALL_OW 336
// end ;
22234: GO 22199
22236: POP
22237: POP
// end ;
22238: PPOPN 2
22240: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22241: LD_EXP 34
22245: PUSH
22246: LD_EXP 87
22250: AND
22251: IFFALSE 22532
22253: GO 22255
22255: DISABLE
22256: LD_INT 0
22258: PPUSH
22259: PPUSH
22260: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22261: LD_OWVAR 2
22265: PPUSH
22266: LD_INT 9
22268: PPUSH
22269: LD_INT 1
22271: PPUSH
22272: LD_INT 1
22274: PPUSH
22275: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22279: LD_INT 9
22281: PPUSH
22282: LD_OWVAR 2
22286: PPUSH
22287: CALL_OW 343
// uc_side := 9 ;
22291: LD_ADDR_OWVAR 20
22295: PUSH
22296: LD_INT 9
22298: ST_TO_ADDR
// uc_nation := 2 ;
22299: LD_ADDR_OWVAR 21
22303: PUSH
22304: LD_INT 2
22306: ST_TO_ADDR
// hc_name := Dark Warrior ;
22307: LD_ADDR_OWVAR 26
22311: PUSH
22312: LD_STRING Dark Warrior
22314: ST_TO_ADDR
// hc_gallery :=  ;
22315: LD_ADDR_OWVAR 33
22319: PUSH
22320: LD_STRING 
22322: ST_TO_ADDR
// hc_noskilllimit := true ;
22323: LD_ADDR_OWVAR 76
22327: PUSH
22328: LD_INT 1
22330: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22331: LD_ADDR_OWVAR 31
22335: PUSH
22336: LD_INT 30
22338: PUSH
22339: LD_INT 30
22341: PUSH
22342: LD_INT 30
22344: PUSH
22345: LD_INT 30
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: ST_TO_ADDR
// un := CreateHuman ;
22354: LD_ADDR_VAR 0 3
22358: PUSH
22359: CALL_OW 44
22363: ST_TO_ADDR
// hc_noskilllimit := false ;
22364: LD_ADDR_OWVAR 76
22368: PUSH
22369: LD_INT 0
22371: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22372: LD_VAR 0 3
22376: PPUSH
22377: LD_INT 1
22379: PPUSH
22380: CALL_OW 51
// p := 0 ;
22384: LD_ADDR_VAR 0 2
22388: PUSH
22389: LD_INT 0
22391: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22392: LD_INT 35
22394: PPUSH
22395: CALL_OW 67
// p := p + 1 ;
22399: LD_ADDR_VAR 0 2
22403: PUSH
22404: LD_VAR 0 2
22408: PUSH
22409: LD_INT 1
22411: PLUS
22412: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22413: LD_VAR 0 3
22417: PPUSH
22418: CALL_OW 256
22422: PUSH
22423: LD_INT 1000
22425: LESS
22426: IFFALSE 22440
// SetLives ( un , 1000 ) ;
22428: LD_VAR 0 3
22432: PPUSH
22433: LD_INT 1000
22435: PPUSH
22436: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22440: LD_VAR 0 3
22444: PPUSH
22445: LD_INT 81
22447: PUSH
22448: LD_OWVAR 2
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 91
22459: PUSH
22460: LD_VAR 0 3
22464: PUSH
22465: LD_INT 30
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 69
22481: PPUSH
22482: LD_VAR 0 3
22486: PPUSH
22487: CALL_OW 74
22491: PPUSH
22492: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22496: LD_VAR 0 2
22500: PUSH
22501: LD_INT 60
22503: GREATER
22504: PUSH
22505: LD_VAR 0 3
22509: PPUSH
22510: CALL_OW 301
22514: OR
22515: IFFALSE 22392
// if un then
22517: LD_VAR 0 3
22521: IFFALSE 22532
// RemoveUnit ( un ) ;
22523: LD_VAR 0 3
22527: PPUSH
22528: CALL_OW 64
// end ; end_of_file
22532: PPOPN 3
22534: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22535: LD_INT 0
22537: PPUSH
22538: PPUSH
22539: PPUSH
22540: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22541: LD_VAR 0 1
22545: PPUSH
22546: CALL_OW 264
22550: PUSH
22551: LD_EXP 25
22555: EQUAL
22556: IFFALSE 22628
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22558: LD_INT 68
22560: PPUSH
22561: LD_VAR 0 1
22565: PPUSH
22566: CALL_OW 255
22570: PPUSH
22571: CALL_OW 321
22575: PUSH
22576: LD_INT 2
22578: EQUAL
22579: IFFALSE 22591
// eff := 70 else
22581: LD_ADDR_VAR 0 4
22585: PUSH
22586: LD_INT 70
22588: ST_TO_ADDR
22589: GO 22599
// eff := 30 ;
22591: LD_ADDR_VAR 0 4
22595: PUSH
22596: LD_INT 30
22598: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22599: LD_VAR 0 1
22603: PPUSH
22604: CALL_OW 250
22608: PPUSH
22609: LD_VAR 0 1
22613: PPUSH
22614: CALL_OW 251
22618: PPUSH
22619: LD_VAR 0 4
22623: PPUSH
22624: CALL_OW 495
// end ; end ;
22628: LD_VAR 0 2
22632: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22633: LD_INT 0
22635: PPUSH
// end ;
22636: LD_VAR 0 4
22640: RET
// export function SOS_Command ( cmd ) ; begin
22641: LD_INT 0
22643: PPUSH
// end ;
22644: LD_VAR 0 2
22648: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22649: LD_VAR 0 1
22653: PUSH
22654: LD_INT 255
22656: EQUAL
22657: PUSH
22658: LD_VAR 0 2
22662: PPUSH
22663: CALL_OW 264
22667: PUSH
22668: LD_INT 14
22670: PUSH
22671: LD_INT 53
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: IN
22678: AND
22679: PUSH
22680: LD_VAR 0 4
22684: PPUSH
22685: LD_VAR 0 5
22689: PPUSH
22690: CALL_OW 488
22694: AND
22695: IFFALSE 22719
// CutTreeXYR ( unit , x , y , 12 ) ;
22697: LD_VAR 0 2
22701: PPUSH
22702: LD_VAR 0 4
22706: PPUSH
22707: LD_VAR 0 5
22711: PPUSH
22712: LD_INT 12
22714: PPUSH
22715: CALL 22722 0 4
// end ;
22719: PPOPN 5
22721: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22722: LD_INT 0
22724: PPUSH
22725: PPUSH
22726: PPUSH
22727: PPUSH
22728: PPUSH
22729: PPUSH
22730: PPUSH
22731: PPUSH
22732: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22733: LD_VAR 0 1
22737: NOT
22738: PUSH
22739: LD_VAR 0 2
22743: PPUSH
22744: LD_VAR 0 3
22748: PPUSH
22749: CALL_OW 488
22753: NOT
22754: OR
22755: PUSH
22756: LD_VAR 0 4
22760: NOT
22761: OR
22762: IFFALSE 22766
// exit ;
22764: GO 23106
// list := [ ] ;
22766: LD_ADDR_VAR 0 13
22770: PUSH
22771: EMPTY
22772: ST_TO_ADDR
// if x - r < 0 then
22773: LD_VAR 0 2
22777: PUSH
22778: LD_VAR 0 4
22782: MINUS
22783: PUSH
22784: LD_INT 0
22786: LESS
22787: IFFALSE 22799
// min_x := 0 else
22789: LD_ADDR_VAR 0 7
22793: PUSH
22794: LD_INT 0
22796: ST_TO_ADDR
22797: GO 22815
// min_x := x - r ;
22799: LD_ADDR_VAR 0 7
22803: PUSH
22804: LD_VAR 0 2
22808: PUSH
22809: LD_VAR 0 4
22813: MINUS
22814: ST_TO_ADDR
// if y - r < 0 then
22815: LD_VAR 0 3
22819: PUSH
22820: LD_VAR 0 4
22824: MINUS
22825: PUSH
22826: LD_INT 0
22828: LESS
22829: IFFALSE 22841
// min_y := 0 else
22831: LD_ADDR_VAR 0 8
22835: PUSH
22836: LD_INT 0
22838: ST_TO_ADDR
22839: GO 22857
// min_y := y - r ;
22841: LD_ADDR_VAR 0 8
22845: PUSH
22846: LD_VAR 0 3
22850: PUSH
22851: LD_VAR 0 4
22855: MINUS
22856: ST_TO_ADDR
// max_x := x + r ;
22857: LD_ADDR_VAR 0 9
22861: PUSH
22862: LD_VAR 0 2
22866: PUSH
22867: LD_VAR 0 4
22871: PLUS
22872: ST_TO_ADDR
// max_y := y + r ;
22873: LD_ADDR_VAR 0 10
22877: PUSH
22878: LD_VAR 0 3
22882: PUSH
22883: LD_VAR 0 4
22887: PLUS
22888: ST_TO_ADDR
// for _x = min_x to max_x do
22889: LD_ADDR_VAR 0 11
22893: PUSH
22894: DOUBLE
22895: LD_VAR 0 7
22899: DEC
22900: ST_TO_ADDR
22901: LD_VAR 0 9
22905: PUSH
22906: FOR_TO
22907: IFFALSE 23024
// for _y = min_y to max_y do
22909: LD_ADDR_VAR 0 12
22913: PUSH
22914: DOUBLE
22915: LD_VAR 0 8
22919: DEC
22920: ST_TO_ADDR
22921: LD_VAR 0 10
22925: PUSH
22926: FOR_TO
22927: IFFALSE 23020
// begin if not ValidHex ( _x , _y ) then
22929: LD_VAR 0 11
22933: PPUSH
22934: LD_VAR 0 12
22938: PPUSH
22939: CALL_OW 488
22943: NOT
22944: IFFALSE 22948
// continue ;
22946: GO 22926
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22948: LD_VAR 0 11
22952: PPUSH
22953: LD_VAR 0 12
22957: PPUSH
22958: CALL_OW 351
22962: PUSH
22963: LD_VAR 0 11
22967: PPUSH
22968: LD_VAR 0 12
22972: PPUSH
22973: CALL_OW 554
22977: AND
22978: IFFALSE 23018
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22980: LD_ADDR_VAR 0 13
22984: PUSH
22985: LD_VAR 0 13
22989: PPUSH
22990: LD_VAR 0 13
22994: PUSH
22995: LD_INT 1
22997: PLUS
22998: PPUSH
22999: LD_VAR 0 11
23003: PUSH
23004: LD_VAR 0 12
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PPUSH
23013: CALL_OW 2
23017: ST_TO_ADDR
// end ;
23018: GO 22926
23020: POP
23021: POP
23022: GO 22906
23024: POP
23025: POP
// if not list then
23026: LD_VAR 0 13
23030: NOT
23031: IFFALSE 23035
// exit ;
23033: GO 23106
// for i in list do
23035: LD_ADDR_VAR 0 6
23039: PUSH
23040: LD_VAR 0 13
23044: PUSH
23045: FOR_IN
23046: IFFALSE 23104
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23048: LD_VAR 0 1
23052: PPUSH
23053: LD_STRING M
23055: PUSH
23056: LD_VAR 0 6
23060: PUSH
23061: LD_INT 1
23063: ARRAY
23064: PUSH
23065: LD_VAR 0 6
23069: PUSH
23070: LD_INT 2
23072: ARRAY
23073: PUSH
23074: LD_INT 0
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: PUSH
23095: EMPTY
23096: LIST
23097: PPUSH
23098: CALL_OW 447
23102: GO 23045
23104: POP
23105: POP
// end ;
23106: LD_VAR 0 5
23110: RET
