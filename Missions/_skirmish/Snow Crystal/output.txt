// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 1 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: IFFALSE 10654
// YouLost ( jota-lose ) ;
10647: LD_STRING jota-lose
10649: PPUSH
10650: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10654: LD_EXP 1
10658: PUSH
10659: LD_INT 2
10661: EQUAL
10662: PUSH
10663: LD_EXP 8
10667: PUSH
10668: LD_INT 0
10670: EQUAL
10671: AND
10672: IFFALSE 10987
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 255
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: LD_INT 11
10695: PPUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 70
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 10
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 30
10746: PUSH
10747: LD_INT 8
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: DIFF
10778: IN
10779: AND
10780: IFFALSE 10866
// begin ai_build := ai_build ^ GetBType ( un ) ;
10782: LD_ADDR_EXP 10
10786: PUSH
10787: LD_EXP 10
10791: PUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 266
10801: ADD
10802: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10803: LD_ADDR_EXP 10
10807: PUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 250
10822: ADD
10823: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10824: LD_ADDR_EXP 10
10828: PUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 251
10843: ADD
10844: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10845: LD_ADDR_EXP 10
10849: PUSH
10850: LD_EXP 10
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 254
10864: ADD
10865: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 255
10875: PUSH
10876: LD_INT 1
10878: EQUAL
10879: PUSH
10880: LD_VAR 0 1
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: IN
10900: AND
10901: IFFALSE 10987
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10903: LD_ADDR_EXP 11
10907: PUSH
10908: LD_EXP 11
10912: PUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 265
10922: ADD
10923: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10924: LD_ADDR_EXP 11
10928: PUSH
10929: LD_EXP 11
10933: PUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 262
10943: ADD
10944: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10945: LD_ADDR_EXP 11
10949: PUSH
10950: LD_EXP 11
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: CALL_OW 263
10964: ADD
10965: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10966: LD_ADDR_EXP 11
10970: PUSH
10971: LD_EXP 11
10975: PUSH
10976: LD_VAR 0 1
10980: PPUSH
10981: CALL_OW 264
10985: ADD
10986: ST_TO_ADDR
// end ; end ; end ;
10987: PPOPN 1
10989: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10990: LD_EXP 1
10994: PUSH
10995: LD_INT 1
10997: EQUAL
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PUSH
11028: LD_INT 0
11030: EQUAL
11031: AND
11032: IFFALSE 11044
11034: GO 11036
11036: DISABLE
// YouLost ( peo-lose ) ;
11037: LD_STRING peo-lose
11039: PPUSH
11040: CALL_OW 104
11044: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11045: LD_EXP 1
11049: PUSH
11050: LD_INT 2
11052: EQUAL
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: PUSH
11083: LD_INT 0
11085: EQUAL
11086: AND
11087: IFFALSE 11099
11089: GO 11091
11091: DISABLE
// YouLost ( peo-lose ) ;
11092: LD_STRING peo-lose
11094: PPUSH
11095: CALL_OW 104
11099: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
11100: LD_OWVAR 2
11104: PPUSH
11105: CALL 10510 0 1
11109: PUSH
11110: LD_EXP 5
11114: GREATEREQUAL
11115: IFFALSE 11201
11117: GO 11119
11119: DISABLE
11120: LD_INT 0
11122: PPUSH
// begin if GetSide ( jota_base ) = your_side then
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 255
11130: PUSH
11131: LD_OWVAR 2
11135: EQUAL
11136: IFFALSE 11179
// begin for i = 1 to 3 do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: DOUBLE
11144: LD_INT 1
11146: DEC
11147: ST_TO_ADDR
11148: LD_INT 3
11150: PUSH
11151: FOR_TO
11152: IFFALSE 11166
// AddMedal ( med , 1 ) ;
11154: LD_STRING med
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 101
11164: GO 11151
11166: POP
11167: POP
// GiveMedals ( MAIN ) ;
11168: LD_STRING MAIN
11170: PPUSH
11171: CALL_OW 102
// YouWin ;
11175: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: LD_OWVAR 2
11191: NONEQUAL
11192: IFFALSE 11201
// YouLost ( source ) ;
11194: LD_STRING source
11196: PPUSH
11197: CALL_OW 104
// end ; end_of_file
11201: PPOPN 1
11203: END
// every 2 2$05 + 0 0$11 do
11204: GO 11206
11206: DISABLE
// begin enable ;
11207: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11208: LD_INT 1
11210: PPUSH
11211: LD_INT 5
11213: PPUSH
11214: CALL_OW 12
11218: PPUSH
11219: LD_INT 7
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11229: LD_INT 350
11231: PPUSH
11232: LD_INT 1295
11234: PPUSH
11235: CALL_OW 12
11239: PPUSH
11240: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 5
11249: PPUSH
11250: CALL_OW 12
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 57
// end ;
11262: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11263: LD_EXP 1
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: PUSH
11272: LD_EXP 8
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: AND
11281: IFFALSE 11371
11283: GO 11285
11285: DISABLE
// begin enable ;
11286: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 7
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11308: LD_INT 350
11310: PPUSH
11311: LD_INT 1750
11313: PPUSH
11314: CALL_OW 12
11318: PPUSH
11319: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11323: LD_EXP 6
11327: PUSH
11328: LD_INT 73500
11330: PUSH
11331: LD_INT 63000
11333: PUSH
11334: LD_INT 52500
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_EXP 2
11346: ARRAY
11347: LESSEQUAL
11348: IFFALSE 11371
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 5
11355: PPUSH
11356: CALL_OW 12
11360: PPUSH
11361: LD_INT 12
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 55
// end ; end_of_file
11371: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: CALL 24815 0 3
// end ;
11391: PPOPN 3
11393: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL 24823 0 1
// end ; end_of_file
11403: PPOPN 1
11405: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11406: LD_INT 0
11408: PPUSH
// ar_miner := 81 ;
11409: LD_ADDR_EXP 28
11413: PUSH
11414: LD_INT 81
11416: ST_TO_ADDR
// ar_crane := 88 ;
11417: LD_ADDR_EXP 27
11421: PUSH
11422: LD_INT 88
11424: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11425: LD_ADDR_EXP 22
11429: PUSH
11430: LD_INT 89
11432: ST_TO_ADDR
// us_hack := 99 ;
11433: LD_ADDR_EXP 23
11437: PUSH
11438: LD_INT 99
11440: ST_TO_ADDR
// us_artillery := 97 ;
11441: LD_ADDR_EXP 24
11445: PUSH
11446: LD_INT 97
11448: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11449: LD_ADDR_EXP 25
11453: PUSH
11454: LD_INT 91
11456: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11457: LD_ADDR_EXP 26
11461: PUSH
11462: LD_INT 92
11464: ST_TO_ADDR
// ru_radar := 98 ;
11465: LD_ADDR_EXP 21
11469: PUSH
11470: LD_INT 98
11472: ST_TO_ADDR
// tech_Artillery := 80 ;
11473: LD_ADDR_EXP 29
11477: PUSH
11478: LD_INT 80
11480: ST_TO_ADDR
// tech_RadMat := 81 ;
11481: LD_ADDR_EXP 30
11485: PUSH
11486: LD_INT 81
11488: ST_TO_ADDR
// tech_BasicTools := 82 ;
11489: LD_ADDR_EXP 31
11493: PUSH
11494: LD_INT 82
11496: ST_TO_ADDR
// tech_Cargo := 83 ;
11497: LD_ADDR_EXP 32
11501: PUSH
11502: LD_INT 83
11504: ST_TO_ADDR
// tech_Track := 84 ;
11505: LD_ADDR_EXP 33
11509: PUSH
11510: LD_INT 84
11512: ST_TO_ADDR
// tech_Crane := 85 ;
11513: LD_ADDR_EXP 34
11517: PUSH
11518: LD_INT 85
11520: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11521: LD_ADDR_EXP 35
11525: PUSH
11526: LD_INT 86
11528: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11529: LD_ADDR_EXP 36
11533: PUSH
11534: LD_INT 87
11536: ST_TO_ADDR
// end ;
11537: LD_VAR 0 1
11541: RET
// every 1 do
11542: GO 11544
11544: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11545: CALL 11406 0 0
11549: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11550: LD_VAR 0 2
11554: PUSH
11555: LD_INT 100
11557: EQUAL
11558: IFFALSE 12507
// begin if not StreamModeActive then
11560: LD_EXP 37
11564: NOT
11565: IFFALSE 11575
// StreamModeActive := true ;
11567: LD_ADDR_EXP 37
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
// if p3 = 0 then
11575: LD_VAR 0 3
11579: PUSH
11580: LD_INT 0
11582: EQUAL
11583: IFFALSE 11589
// InitStreamMode ;
11585: CALL 12665 0 0
// if p3 = 1 then
11589: LD_VAR 0 3
11593: PUSH
11594: LD_INT 1
11596: EQUAL
11597: IFFALSE 11607
// sRocket := true ;
11599: LD_ADDR_EXP 42
11603: PUSH
11604: LD_INT 1
11606: ST_TO_ADDR
// if p3 = 2 then
11607: LD_VAR 0 3
11611: PUSH
11612: LD_INT 2
11614: EQUAL
11615: IFFALSE 11625
// sSpeed := true ;
11617: LD_ADDR_EXP 41
11621: PUSH
11622: LD_INT 1
11624: ST_TO_ADDR
// if p3 = 3 then
11625: LD_VAR 0 3
11629: PUSH
11630: LD_INT 3
11632: EQUAL
11633: IFFALSE 11643
// sEngine := true ;
11635: LD_ADDR_EXP 43
11639: PUSH
11640: LD_INT 1
11642: ST_TO_ADDR
// if p3 = 4 then
11643: LD_VAR 0 3
11647: PUSH
11648: LD_INT 4
11650: EQUAL
11651: IFFALSE 11661
// sSpec := true ;
11653: LD_ADDR_EXP 40
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// if p3 = 5 then
11661: LD_VAR 0 3
11665: PUSH
11666: LD_INT 5
11668: EQUAL
11669: IFFALSE 11679
// sLevel := true ;
11671: LD_ADDR_EXP 44
11675: PUSH
11676: LD_INT 1
11678: ST_TO_ADDR
// if p3 = 6 then
11679: LD_VAR 0 3
11683: PUSH
11684: LD_INT 6
11686: EQUAL
11687: IFFALSE 11697
// sArmoury := true ;
11689: LD_ADDR_EXP 45
11693: PUSH
11694: LD_INT 1
11696: ST_TO_ADDR
// if p3 = 7 then
11697: LD_VAR 0 3
11701: PUSH
11702: LD_INT 7
11704: EQUAL
11705: IFFALSE 11715
// sRadar := true ;
11707: LD_ADDR_EXP 46
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// if p3 = 8 then
11715: LD_VAR 0 3
11719: PUSH
11720: LD_INT 8
11722: EQUAL
11723: IFFALSE 11733
// sBunker := true ;
11725: LD_ADDR_EXP 47
11729: PUSH
11730: LD_INT 1
11732: ST_TO_ADDR
// if p3 = 9 then
11733: LD_VAR 0 3
11737: PUSH
11738: LD_INT 9
11740: EQUAL
11741: IFFALSE 11751
// sHack := true ;
11743: LD_ADDR_EXP 48
11747: PUSH
11748: LD_INT 1
11750: ST_TO_ADDR
// if p3 = 10 then
11751: LD_VAR 0 3
11755: PUSH
11756: LD_INT 10
11758: EQUAL
11759: IFFALSE 11769
// sFire := true ;
11761: LD_ADDR_EXP 49
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// if p3 = 11 then
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 11
11776: EQUAL
11777: IFFALSE 11787
// sRefresh := true ;
11779: LD_ADDR_EXP 50
11783: PUSH
11784: LD_INT 1
11786: ST_TO_ADDR
// if p3 = 12 then
11787: LD_VAR 0 3
11791: PUSH
11792: LD_INT 12
11794: EQUAL
11795: IFFALSE 11805
// sExp := true ;
11797: LD_ADDR_EXP 51
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// if p3 = 13 then
11805: LD_VAR 0 3
11809: PUSH
11810: LD_INT 13
11812: EQUAL
11813: IFFALSE 11823
// sDepot := true ;
11815: LD_ADDR_EXP 52
11819: PUSH
11820: LD_INT 1
11822: ST_TO_ADDR
// if p3 = 14 then
11823: LD_VAR 0 3
11827: PUSH
11828: LD_INT 14
11830: EQUAL
11831: IFFALSE 11841
// sFlag := true ;
11833: LD_ADDR_EXP 53
11837: PUSH
11838: LD_INT 1
11840: ST_TO_ADDR
// if p3 = 15 then
11841: LD_VAR 0 3
11845: PUSH
11846: LD_INT 15
11848: EQUAL
11849: IFFALSE 11859
// sKamikadze := true ;
11851: LD_ADDR_EXP 61
11855: PUSH
11856: LD_INT 1
11858: ST_TO_ADDR
// if p3 = 16 then
11859: LD_VAR 0 3
11863: PUSH
11864: LD_INT 16
11866: EQUAL
11867: IFFALSE 11877
// sTroll := true ;
11869: LD_ADDR_EXP 62
11873: PUSH
11874: LD_INT 1
11876: ST_TO_ADDR
// if p3 = 17 then
11877: LD_VAR 0 3
11881: PUSH
11882: LD_INT 17
11884: EQUAL
11885: IFFALSE 11895
// sSlow := true ;
11887: LD_ADDR_EXP 63
11891: PUSH
11892: LD_INT 1
11894: ST_TO_ADDR
// if p3 = 18 then
11895: LD_VAR 0 3
11899: PUSH
11900: LD_INT 18
11902: EQUAL
11903: IFFALSE 11913
// sLack := true ;
11905: LD_ADDR_EXP 64
11909: PUSH
11910: LD_INT 1
11912: ST_TO_ADDR
// if p3 = 19 then
11913: LD_VAR 0 3
11917: PUSH
11918: LD_INT 19
11920: EQUAL
11921: IFFALSE 11931
// sTank := true ;
11923: LD_ADDR_EXP 66
11927: PUSH
11928: LD_INT 1
11930: ST_TO_ADDR
// if p3 = 20 then
11931: LD_VAR 0 3
11935: PUSH
11936: LD_INT 20
11938: EQUAL
11939: IFFALSE 11949
// sRemote := true ;
11941: LD_ADDR_EXP 67
11945: PUSH
11946: LD_INT 1
11948: ST_TO_ADDR
// if p3 = 21 then
11949: LD_VAR 0 3
11953: PUSH
11954: LD_INT 21
11956: EQUAL
11957: IFFALSE 11967
// sPowell := true ;
11959: LD_ADDR_EXP 68
11963: PUSH
11964: LD_INT 1
11966: ST_TO_ADDR
// if p3 = 22 then
11967: LD_VAR 0 3
11971: PUSH
11972: LD_INT 22
11974: EQUAL
11975: IFFALSE 11985
// sTeleport := true ;
11977: LD_ADDR_EXP 71
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// if p3 = 23 then
11985: LD_VAR 0 3
11989: PUSH
11990: LD_INT 23
11992: EQUAL
11993: IFFALSE 12003
// sOilTower := true ;
11995: LD_ADDR_EXP 73
11999: PUSH
12000: LD_INT 1
12002: ST_TO_ADDR
// if p3 = 24 then
12003: LD_VAR 0 3
12007: PUSH
12008: LD_INT 24
12010: EQUAL
12011: IFFALSE 12021
// sShovel := true ;
12013: LD_ADDR_EXP 74
12017: PUSH
12018: LD_INT 1
12020: ST_TO_ADDR
// if p3 = 25 then
12021: LD_VAR 0 3
12025: PUSH
12026: LD_INT 25
12028: EQUAL
12029: IFFALSE 12039
// sSheik := true ;
12031: LD_ADDR_EXP 75
12035: PUSH
12036: LD_INT 1
12038: ST_TO_ADDR
// if p3 = 26 then
12039: LD_VAR 0 3
12043: PUSH
12044: LD_INT 26
12046: EQUAL
12047: IFFALSE 12057
// sEarthquake := true ;
12049: LD_ADDR_EXP 77
12053: PUSH
12054: LD_INT 1
12056: ST_TO_ADDR
// if p3 = 27 then
12057: LD_VAR 0 3
12061: PUSH
12062: LD_INT 27
12064: EQUAL
12065: IFFALSE 12075
// sAI := true ;
12067: LD_ADDR_EXP 78
12071: PUSH
12072: LD_INT 1
12074: ST_TO_ADDR
// if p3 = 28 then
12075: LD_VAR 0 3
12079: PUSH
12080: LD_INT 28
12082: EQUAL
12083: IFFALSE 12093
// sCargo := true ;
12085: LD_ADDR_EXP 81
12089: PUSH
12090: LD_INT 1
12092: ST_TO_ADDR
// if p3 = 29 then
12093: LD_VAR 0 3
12097: PUSH
12098: LD_INT 29
12100: EQUAL
12101: IFFALSE 12111
// sDLaser := true ;
12103: LD_ADDR_EXP 82
12107: PUSH
12108: LD_INT 1
12110: ST_TO_ADDR
// if p3 = 30 then
12111: LD_VAR 0 3
12115: PUSH
12116: LD_INT 30
12118: EQUAL
12119: IFFALSE 12129
// sExchange := true ;
12121: LD_ADDR_EXP 83
12125: PUSH
12126: LD_INT 1
12128: ST_TO_ADDR
// if p3 = 31 then
12129: LD_VAR 0 3
12133: PUSH
12134: LD_INT 31
12136: EQUAL
12137: IFFALSE 12147
// sFac := true ;
12139: LD_ADDR_EXP 84
12143: PUSH
12144: LD_INT 1
12146: ST_TO_ADDR
// if p3 = 32 then
12147: LD_VAR 0 3
12151: PUSH
12152: LD_INT 32
12154: EQUAL
12155: IFFALSE 12165
// sPower := true ;
12157: LD_ADDR_EXP 85
12161: PUSH
12162: LD_INT 1
12164: ST_TO_ADDR
// if p3 = 33 then
12165: LD_VAR 0 3
12169: PUSH
12170: LD_INT 33
12172: EQUAL
12173: IFFALSE 12183
// sRandom := true ;
12175: LD_ADDR_EXP 86
12179: PUSH
12180: LD_INT 1
12182: ST_TO_ADDR
// if p3 = 34 then
12183: LD_VAR 0 3
12187: PUSH
12188: LD_INT 34
12190: EQUAL
12191: IFFALSE 12201
// sShield := true ;
12193: LD_ADDR_EXP 87
12197: PUSH
12198: LD_INT 1
12200: ST_TO_ADDR
// if p3 = 35 then
12201: LD_VAR 0 3
12205: PUSH
12206: LD_INT 35
12208: EQUAL
12209: IFFALSE 12219
// sTime := true ;
12211: LD_ADDR_EXP 88
12215: PUSH
12216: LD_INT 1
12218: ST_TO_ADDR
// if p3 = 36 then
12219: LD_VAR 0 3
12223: PUSH
12224: LD_INT 36
12226: EQUAL
12227: IFFALSE 12237
// sTools := true ;
12229: LD_ADDR_EXP 89
12233: PUSH
12234: LD_INT 1
12236: ST_TO_ADDR
// if p3 = 101 then
12237: LD_VAR 0 3
12241: PUSH
12242: LD_INT 101
12244: EQUAL
12245: IFFALSE 12255
// sSold := true ;
12247: LD_ADDR_EXP 54
12251: PUSH
12252: LD_INT 1
12254: ST_TO_ADDR
// if p3 = 102 then
12255: LD_VAR 0 3
12259: PUSH
12260: LD_INT 102
12262: EQUAL
12263: IFFALSE 12273
// sDiff := true ;
12265: LD_ADDR_EXP 55
12269: PUSH
12270: LD_INT 1
12272: ST_TO_ADDR
// if p3 = 103 then
12273: LD_VAR 0 3
12277: PUSH
12278: LD_INT 103
12280: EQUAL
12281: IFFALSE 12291
// sFog := true ;
12283: LD_ADDR_EXP 58
12287: PUSH
12288: LD_INT 1
12290: ST_TO_ADDR
// if p3 = 104 then
12291: LD_VAR 0 3
12295: PUSH
12296: LD_INT 104
12298: EQUAL
12299: IFFALSE 12309
// sReset := true ;
12301: LD_ADDR_EXP 59
12305: PUSH
12306: LD_INT 1
12308: ST_TO_ADDR
// if p3 = 105 then
12309: LD_VAR 0 3
12313: PUSH
12314: LD_INT 105
12316: EQUAL
12317: IFFALSE 12327
// sSun := true ;
12319: LD_ADDR_EXP 60
12323: PUSH
12324: LD_INT 1
12326: ST_TO_ADDR
// if p3 = 106 then
12327: LD_VAR 0 3
12331: PUSH
12332: LD_INT 106
12334: EQUAL
12335: IFFALSE 12345
// sTiger := true ;
12337: LD_ADDR_EXP 56
12341: PUSH
12342: LD_INT 1
12344: ST_TO_ADDR
// if p3 = 107 then
12345: LD_VAR 0 3
12349: PUSH
12350: LD_INT 107
12352: EQUAL
12353: IFFALSE 12363
// sBomb := true ;
12355: LD_ADDR_EXP 57
12359: PUSH
12360: LD_INT 1
12362: ST_TO_ADDR
// if p3 = 108 then
12363: LD_VAR 0 3
12367: PUSH
12368: LD_INT 108
12370: EQUAL
12371: IFFALSE 12381
// sWound := true ;
12373: LD_ADDR_EXP 65
12377: PUSH
12378: LD_INT 1
12380: ST_TO_ADDR
// if p3 = 109 then
12381: LD_VAR 0 3
12385: PUSH
12386: LD_INT 109
12388: EQUAL
12389: IFFALSE 12399
// sBetray := true ;
12391: LD_ADDR_EXP 69
12395: PUSH
12396: LD_INT 1
12398: ST_TO_ADDR
// if p3 = 110 then
12399: LD_VAR 0 3
12403: PUSH
12404: LD_INT 110
12406: EQUAL
12407: IFFALSE 12417
// sContamin := true ;
12409: LD_ADDR_EXP 70
12413: PUSH
12414: LD_INT 1
12416: ST_TO_ADDR
// if p3 = 111 then
12417: LD_VAR 0 3
12421: PUSH
12422: LD_INT 111
12424: EQUAL
12425: IFFALSE 12435
// sOil := true ;
12427: LD_ADDR_EXP 72
12431: PUSH
12432: LD_INT 1
12434: ST_TO_ADDR
// if p3 = 112 then
12435: LD_VAR 0 3
12439: PUSH
12440: LD_INT 112
12442: EQUAL
12443: IFFALSE 12453
// sStu := true ;
12445: LD_ADDR_EXP 76
12449: PUSH
12450: LD_INT 1
12452: ST_TO_ADDR
// if p3 = 113 then
12453: LD_VAR 0 3
12457: PUSH
12458: LD_INT 113
12460: EQUAL
12461: IFFALSE 12471
// sBazooka := true ;
12463: LD_ADDR_EXP 79
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
// if p3 = 114 then
12471: LD_VAR 0 3
12475: PUSH
12476: LD_INT 114
12478: EQUAL
12479: IFFALSE 12489
// sMortar := true ;
12481: LD_ADDR_EXP 80
12485: PUSH
12486: LD_INT 1
12488: ST_TO_ADDR
// if p3 = 115 then
12489: LD_VAR 0 3
12493: PUSH
12494: LD_INT 115
12496: EQUAL
12497: IFFALSE 12507
// sRanger := true ;
12499: LD_ADDR_EXP 90
12503: PUSH
12504: LD_INT 1
12506: ST_TO_ADDR
// end ; if p2 = 101 then
12507: LD_VAR 0 2
12511: PUSH
12512: LD_INT 101
12514: EQUAL
12515: IFFALSE 12643
// begin case p3 of 1 :
12517: LD_VAR 0 3
12521: PUSH
12522: LD_INT 1
12524: DOUBLE
12525: EQUAL
12526: IFTRUE 12530
12528: GO 12537
12530: POP
// hHackUnlimitedResources ; 2 :
12531: CALL 23678 0 0
12535: GO 12643
12537: LD_INT 2
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 12552
12545: POP
// hHackSetLevel10 ; 3 :
12546: CALL 23811 0 0
12550: GO 12643
12552: LD_INT 3
12554: DOUBLE
12555: EQUAL
12556: IFTRUE 12560
12558: GO 12567
12560: POP
// hHackSetLevel10YourUnits ; 4 :
12561: CALL 23896 0 0
12565: GO 12643
12567: LD_INT 4
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12582
12575: POP
// hHackInvincible ; 5 :
12576: CALL 24344 0 0
12580: GO 12643
12582: LD_INT 5
12584: DOUBLE
12585: EQUAL
12586: IFTRUE 12590
12588: GO 12597
12590: POP
// hHackInvisible ; 6 :
12591: CALL 24455 0 0
12595: GO 12643
12597: LD_INT 6
12599: DOUBLE
12600: EQUAL
12601: IFTRUE 12605
12603: GO 12612
12605: POP
// hHackChangeYourSide ; 7 :
12606: CALL 24512 0 0
12610: GO 12643
12612: LD_INT 7
12614: DOUBLE
12615: EQUAL
12616: IFTRUE 12620
12618: GO 12627
12620: POP
// hHackChangeUnitSide ; 8 :
12621: CALL 24554 0 0
12625: GO 12643
12627: LD_INT 8
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12642
12635: POP
// hHackFog ; end ;
12636: CALL 24655 0 0
12640: GO 12643
12642: POP
// end ; end ;
12643: PPOPN 6
12645: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12646: GO 12648
12648: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12649: LD_STRING initStreamRollete();
12651: PPUSH
12652: CALL_OW 559
// InitStreamMode ;
12656: CALL 12665 0 0
// DefineStreamItems ( ) ;
12660: CALL 13105 0 0
// end ;
12664: END
// function InitStreamMode ; begin
12665: LD_INT 0
12667: PPUSH
// streamModeActive := false ;
12668: LD_ADDR_EXP 37
12672: PUSH
12673: LD_INT 0
12675: ST_TO_ADDR
// normalCounter := 36 ;
12676: LD_ADDR_EXP 38
12680: PUSH
12681: LD_INT 36
12683: ST_TO_ADDR
// hardcoreCounter := 16 ;
12684: LD_ADDR_EXP 39
12688: PUSH
12689: LD_INT 16
12691: ST_TO_ADDR
// sRocket := false ;
12692: LD_ADDR_EXP 42
12696: PUSH
12697: LD_INT 0
12699: ST_TO_ADDR
// sSpeed := false ;
12700: LD_ADDR_EXP 41
12704: PUSH
12705: LD_INT 0
12707: ST_TO_ADDR
// sEngine := false ;
12708: LD_ADDR_EXP 43
12712: PUSH
12713: LD_INT 0
12715: ST_TO_ADDR
// sSpec := false ;
12716: LD_ADDR_EXP 40
12720: PUSH
12721: LD_INT 0
12723: ST_TO_ADDR
// sLevel := false ;
12724: LD_ADDR_EXP 44
12728: PUSH
12729: LD_INT 0
12731: ST_TO_ADDR
// sArmoury := false ;
12732: LD_ADDR_EXP 45
12736: PUSH
12737: LD_INT 0
12739: ST_TO_ADDR
// sRadar := false ;
12740: LD_ADDR_EXP 46
12744: PUSH
12745: LD_INT 0
12747: ST_TO_ADDR
// sBunker := false ;
12748: LD_ADDR_EXP 47
12752: PUSH
12753: LD_INT 0
12755: ST_TO_ADDR
// sHack := false ;
12756: LD_ADDR_EXP 48
12760: PUSH
12761: LD_INT 0
12763: ST_TO_ADDR
// sFire := false ;
12764: LD_ADDR_EXP 49
12768: PUSH
12769: LD_INT 0
12771: ST_TO_ADDR
// sRefresh := false ;
12772: LD_ADDR_EXP 50
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// sExp := false ;
12780: LD_ADDR_EXP 51
12784: PUSH
12785: LD_INT 0
12787: ST_TO_ADDR
// sDepot := false ;
12788: LD_ADDR_EXP 52
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// sFlag := false ;
12796: LD_ADDR_EXP 53
12800: PUSH
12801: LD_INT 0
12803: ST_TO_ADDR
// sKamikadze := false ;
12804: LD_ADDR_EXP 61
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// sTroll := false ;
12812: LD_ADDR_EXP 62
12816: PUSH
12817: LD_INT 0
12819: ST_TO_ADDR
// sSlow := false ;
12820: LD_ADDR_EXP 63
12824: PUSH
12825: LD_INT 0
12827: ST_TO_ADDR
// sLack := false ;
12828: LD_ADDR_EXP 64
12832: PUSH
12833: LD_INT 0
12835: ST_TO_ADDR
// sTank := false ;
12836: LD_ADDR_EXP 66
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// sRemote := false ;
12844: LD_ADDR_EXP 67
12848: PUSH
12849: LD_INT 0
12851: ST_TO_ADDR
// sPowell := false ;
12852: LD_ADDR_EXP 68
12856: PUSH
12857: LD_INT 0
12859: ST_TO_ADDR
// sTeleport := false ;
12860: LD_ADDR_EXP 71
12864: PUSH
12865: LD_INT 0
12867: ST_TO_ADDR
// sOilTower := false ;
12868: LD_ADDR_EXP 73
12872: PUSH
12873: LD_INT 0
12875: ST_TO_ADDR
// sShovel := false ;
12876: LD_ADDR_EXP 74
12880: PUSH
12881: LD_INT 0
12883: ST_TO_ADDR
// sSheik := false ;
12884: LD_ADDR_EXP 75
12888: PUSH
12889: LD_INT 0
12891: ST_TO_ADDR
// sEarthquake := false ;
12892: LD_ADDR_EXP 77
12896: PUSH
12897: LD_INT 0
12899: ST_TO_ADDR
// sAI := false ;
12900: LD_ADDR_EXP 78
12904: PUSH
12905: LD_INT 0
12907: ST_TO_ADDR
// sCargo := false ;
12908: LD_ADDR_EXP 81
12912: PUSH
12913: LD_INT 0
12915: ST_TO_ADDR
// sDLaser := false ;
12916: LD_ADDR_EXP 82
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
// sExchange := false ;
12924: LD_ADDR_EXP 83
12928: PUSH
12929: LD_INT 0
12931: ST_TO_ADDR
// sFac := false ;
12932: LD_ADDR_EXP 84
12936: PUSH
12937: LD_INT 0
12939: ST_TO_ADDR
// sPower := false ;
12940: LD_ADDR_EXP 85
12944: PUSH
12945: LD_INT 0
12947: ST_TO_ADDR
// sRandom := false ;
12948: LD_ADDR_EXP 86
12952: PUSH
12953: LD_INT 0
12955: ST_TO_ADDR
// sShield := false ;
12956: LD_ADDR_EXP 87
12960: PUSH
12961: LD_INT 0
12963: ST_TO_ADDR
// sTime := false ;
12964: LD_ADDR_EXP 88
12968: PUSH
12969: LD_INT 0
12971: ST_TO_ADDR
// sTools := false ;
12972: LD_ADDR_EXP 89
12976: PUSH
12977: LD_INT 0
12979: ST_TO_ADDR
// sSold := false ;
12980: LD_ADDR_EXP 54
12984: PUSH
12985: LD_INT 0
12987: ST_TO_ADDR
// sDiff := false ;
12988: LD_ADDR_EXP 55
12992: PUSH
12993: LD_INT 0
12995: ST_TO_ADDR
// sFog := false ;
12996: LD_ADDR_EXP 58
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// sReset := false ;
13004: LD_ADDR_EXP 59
13008: PUSH
13009: LD_INT 0
13011: ST_TO_ADDR
// sSun := false ;
13012: LD_ADDR_EXP 60
13016: PUSH
13017: LD_INT 0
13019: ST_TO_ADDR
// sTiger := false ;
13020: LD_ADDR_EXP 56
13024: PUSH
13025: LD_INT 0
13027: ST_TO_ADDR
// sBomb := false ;
13028: LD_ADDR_EXP 57
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// sWound := false ;
13036: LD_ADDR_EXP 65
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// sBetray := false ;
13044: LD_ADDR_EXP 69
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// sContamin := false ;
13052: LD_ADDR_EXP 70
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// sOil := false ;
13060: LD_ADDR_EXP 72
13064: PUSH
13065: LD_INT 0
13067: ST_TO_ADDR
// sStu := false ;
13068: LD_ADDR_EXP 76
13072: PUSH
13073: LD_INT 0
13075: ST_TO_ADDR
// sBazooka := false ;
13076: LD_ADDR_EXP 79
13080: PUSH
13081: LD_INT 0
13083: ST_TO_ADDR
// sMortar := false ;
13084: LD_ADDR_EXP 80
13088: PUSH
13089: LD_INT 0
13091: ST_TO_ADDR
// sRanger := false ;
13092: LD_ADDR_EXP 90
13096: PUSH
13097: LD_INT 0
13099: ST_TO_ADDR
// end ;
13100: LD_VAR 0 1
13104: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13105: LD_INT 0
13107: PPUSH
13108: PPUSH
13109: PPUSH
13110: PPUSH
13111: PPUSH
// result := [ ] ;
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: EMPTY
13118: ST_TO_ADDR
// if campaign_id = 1 then
13119: LD_OWVAR 69
13123: PUSH
13124: LD_INT 1
13126: EQUAL
13127: IFFALSE 16065
// begin case mission_number of 1 :
13129: LD_OWVAR 70
13133: PUSH
13134: LD_INT 1
13136: DOUBLE
13137: EQUAL
13138: IFTRUE 13142
13140: GO 13206
13142: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13143: LD_ADDR_VAR 0 1
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 4
13153: PUSH
13154: LD_INT 11
13156: PUSH
13157: LD_INT 12
13159: PUSH
13160: LD_INT 15
13162: PUSH
13163: LD_INT 16
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: LD_INT 26
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 101
13188: PUSH
13189: LD_INT 102
13191: PUSH
13192: LD_INT 106
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: ST_TO_ADDR
13204: GO 16063
13206: LD_INT 2
13208: DOUBLE
13209: EQUAL
13210: IFTRUE 13214
13212: GO 13286
13214: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13215: LD_ADDR_VAR 0 1
13219: PUSH
13220: LD_INT 2
13222: PUSH
13223: LD_INT 4
13225: PUSH
13226: LD_INT 11
13228: PUSH
13229: LD_INT 12
13231: PUSH
13232: LD_INT 15
13234: PUSH
13235: LD_INT 16
13237: PUSH
13238: LD_INT 22
13240: PUSH
13241: LD_INT 23
13243: PUSH
13244: LD_INT 26
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 101
13260: PUSH
13261: LD_INT 102
13263: PUSH
13264: LD_INT 105
13266: PUSH
13267: LD_INT 106
13269: PUSH
13270: LD_INT 108
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: ST_TO_ADDR
13284: GO 16063
13286: LD_INT 3
13288: DOUBLE
13289: EQUAL
13290: IFTRUE 13294
13292: GO 13370
13294: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 4
13305: PUSH
13306: LD_INT 5
13308: PUSH
13309: LD_INT 11
13311: PUSH
13312: LD_INT 12
13314: PUSH
13315: LD_INT 15
13317: PUSH
13318: LD_INT 16
13320: PUSH
13321: LD_INT 22
13323: PUSH
13324: LD_INT 26
13326: PUSH
13327: LD_INT 36
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 101
13344: PUSH
13345: LD_INT 102
13347: PUSH
13348: LD_INT 105
13350: PUSH
13351: LD_INT 106
13353: PUSH
13354: LD_INT 108
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: ST_TO_ADDR
13368: GO 16063
13370: LD_INT 4
13372: DOUBLE
13373: EQUAL
13374: IFTRUE 13378
13376: GO 13462
13378: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13379: LD_ADDR_VAR 0 1
13383: PUSH
13384: LD_INT 2
13386: PUSH
13387: LD_INT 4
13389: PUSH
13390: LD_INT 5
13392: PUSH
13393: LD_INT 8
13395: PUSH
13396: LD_INT 11
13398: PUSH
13399: LD_INT 12
13401: PUSH
13402: LD_INT 15
13404: PUSH
13405: LD_INT 16
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_INT 23
13413: PUSH
13414: LD_INT 26
13416: PUSH
13417: LD_INT 36
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 101
13436: PUSH
13437: LD_INT 102
13439: PUSH
13440: LD_INT 105
13442: PUSH
13443: LD_INT 106
13445: PUSH
13446: LD_INT 108
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: ST_TO_ADDR
13460: GO 16063
13462: LD_INT 5
13464: DOUBLE
13465: EQUAL
13466: IFTRUE 13470
13468: GO 13570
13470: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13471: LD_ADDR_VAR 0 1
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: LD_INT 4
13481: PUSH
13482: LD_INT 5
13484: PUSH
13485: LD_INT 6
13487: PUSH
13488: LD_INT 8
13490: PUSH
13491: LD_INT 11
13493: PUSH
13494: LD_INT 12
13496: PUSH
13497: LD_INT 15
13499: PUSH
13500: LD_INT 16
13502: PUSH
13503: LD_INT 22
13505: PUSH
13506: LD_INT 23
13508: PUSH
13509: LD_INT 25
13511: PUSH
13512: LD_INT 26
13514: PUSH
13515: LD_INT 36
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 101
13536: PUSH
13537: LD_INT 102
13539: PUSH
13540: LD_INT 105
13542: PUSH
13543: LD_INT 106
13545: PUSH
13546: LD_INT 108
13548: PUSH
13549: LD_INT 109
13551: PUSH
13552: LD_INT 112
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: ST_TO_ADDR
13568: GO 16063
13570: LD_INT 6
13572: DOUBLE
13573: EQUAL
13574: IFTRUE 13578
13576: GO 13698
13578: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13579: LD_ADDR_VAR 0 1
13583: PUSH
13584: LD_INT 2
13586: PUSH
13587: LD_INT 4
13589: PUSH
13590: LD_INT 5
13592: PUSH
13593: LD_INT 6
13595: PUSH
13596: LD_INT 8
13598: PUSH
13599: LD_INT 11
13601: PUSH
13602: LD_INT 12
13604: PUSH
13605: LD_INT 15
13607: PUSH
13608: LD_INT 16
13610: PUSH
13611: LD_INT 20
13613: PUSH
13614: LD_INT 21
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_INT 23
13622: PUSH
13623: LD_INT 25
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 30
13631: PUSH
13632: LD_INT 31
13634: PUSH
13635: LD_INT 32
13637: PUSH
13638: LD_INT 36
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 101
13664: PUSH
13665: LD_INT 102
13667: PUSH
13668: LD_INT 105
13670: PUSH
13671: LD_INT 106
13673: PUSH
13674: LD_INT 108
13676: PUSH
13677: LD_INT 109
13679: PUSH
13680: LD_INT 112
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: ST_TO_ADDR
13696: GO 16063
13698: LD_INT 7
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13806
13706: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13707: LD_ADDR_VAR 0 1
13711: PUSH
13712: LD_INT 2
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: LD_INT 5
13720: PUSH
13721: LD_INT 7
13723: PUSH
13724: LD_INT 11
13726: PUSH
13727: LD_INT 12
13729: PUSH
13730: LD_INT 15
13732: PUSH
13733: LD_INT 16
13735: PUSH
13736: LD_INT 20
13738: PUSH
13739: LD_INT 21
13741: PUSH
13742: LD_INT 22
13744: PUSH
13745: LD_INT 23
13747: PUSH
13748: LD_INT 25
13750: PUSH
13751: LD_INT 26
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 101
13772: PUSH
13773: LD_INT 102
13775: PUSH
13776: LD_INT 103
13778: PUSH
13779: LD_INT 105
13781: PUSH
13782: LD_INT 106
13784: PUSH
13785: LD_INT 108
13787: PUSH
13788: LD_INT 112
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: ST_TO_ADDR
13804: GO 16063
13806: LD_INT 8
13808: DOUBLE
13809: EQUAL
13810: IFTRUE 13814
13812: GO 13942
13814: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13815: LD_ADDR_VAR 0 1
13819: PUSH
13820: LD_INT 2
13822: PUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 5
13828: PUSH
13829: LD_INT 6
13831: PUSH
13832: LD_INT 7
13834: PUSH
13835: LD_INT 8
13837: PUSH
13838: LD_INT 11
13840: PUSH
13841: LD_INT 12
13843: PUSH
13844: LD_INT 15
13846: PUSH
13847: LD_INT 16
13849: PUSH
13850: LD_INT 20
13852: PUSH
13853: LD_INT 21
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_INT 23
13861: PUSH
13862: LD_INT 25
13864: PUSH
13865: LD_INT 26
13867: PUSH
13868: LD_INT 30
13870: PUSH
13871: LD_INT 31
13873: PUSH
13874: LD_INT 32
13876: PUSH
13877: LD_INT 36
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 101
13904: PUSH
13905: LD_INT 102
13907: PUSH
13908: LD_INT 103
13910: PUSH
13911: LD_INT 105
13913: PUSH
13914: LD_INT 106
13916: PUSH
13917: LD_INT 108
13919: PUSH
13920: LD_INT 109
13922: PUSH
13923: LD_INT 112
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: ST_TO_ADDR
13940: GO 16063
13942: LD_INT 9
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13950
13948: GO 14086
13950: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13951: LD_ADDR_VAR 0 1
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: LD_INT 4
13961: PUSH
13962: LD_INT 5
13964: PUSH
13965: LD_INT 6
13967: PUSH
13968: LD_INT 7
13970: PUSH
13971: LD_INT 8
13973: PUSH
13974: LD_INT 11
13976: PUSH
13977: LD_INT 12
13979: PUSH
13980: LD_INT 15
13982: PUSH
13983: LD_INT 16
13985: PUSH
13986: LD_INT 20
13988: PUSH
13989: LD_INT 21
13991: PUSH
13992: LD_INT 22
13994: PUSH
13995: LD_INT 23
13997: PUSH
13998: LD_INT 25
14000: PUSH
14001: LD_INT 26
14003: PUSH
14004: LD_INT 28
14006: PUSH
14007: LD_INT 30
14009: PUSH
14010: LD_INT 31
14012: PUSH
14013: LD_INT 32
14015: PUSH
14016: LD_INT 36
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 101
14044: PUSH
14045: LD_INT 102
14047: PUSH
14048: LD_INT 103
14050: PUSH
14051: LD_INT 105
14053: PUSH
14054: LD_INT 106
14056: PUSH
14057: LD_INT 108
14059: PUSH
14060: LD_INT 109
14062: PUSH
14063: LD_INT 112
14065: PUSH
14066: LD_INT 114
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: ST_TO_ADDR
14084: GO 16063
14086: LD_INT 10
14088: DOUBLE
14089: EQUAL
14090: IFTRUE 14094
14092: GO 14278
14094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14095: LD_ADDR_VAR 0 1
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: LD_INT 4
14105: PUSH
14106: LD_INT 5
14108: PUSH
14109: LD_INT 6
14111: PUSH
14112: LD_INT 7
14114: PUSH
14115: LD_INT 8
14117: PUSH
14118: LD_INT 9
14120: PUSH
14121: LD_INT 10
14123: PUSH
14124: LD_INT 11
14126: PUSH
14127: LD_INT 12
14129: PUSH
14130: LD_INT 13
14132: PUSH
14133: LD_INT 14
14135: PUSH
14136: LD_INT 15
14138: PUSH
14139: LD_INT 16
14141: PUSH
14142: LD_INT 17
14144: PUSH
14145: LD_INT 18
14147: PUSH
14148: LD_INT 19
14150: PUSH
14151: LD_INT 20
14153: PUSH
14154: LD_INT 21
14156: PUSH
14157: LD_INT 22
14159: PUSH
14160: LD_INT 23
14162: PUSH
14163: LD_INT 24
14165: PUSH
14166: LD_INT 25
14168: PUSH
14169: LD_INT 26
14171: PUSH
14172: LD_INT 28
14174: PUSH
14175: LD_INT 30
14177: PUSH
14178: LD_INT 31
14180: PUSH
14181: LD_INT 32
14183: PUSH
14184: LD_INT 36
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 101
14220: PUSH
14221: LD_INT 102
14223: PUSH
14224: LD_INT 103
14226: PUSH
14227: LD_INT 104
14229: PUSH
14230: LD_INT 105
14232: PUSH
14233: LD_INT 106
14235: PUSH
14236: LD_INT 107
14238: PUSH
14239: LD_INT 108
14241: PUSH
14242: LD_INT 109
14244: PUSH
14245: LD_INT 110
14247: PUSH
14248: LD_INT 111
14250: PUSH
14251: LD_INT 112
14253: PUSH
14254: LD_INT 114
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: ST_TO_ADDR
14276: GO 16063
14278: LD_INT 11
14280: DOUBLE
14281: EQUAL
14282: IFTRUE 14286
14284: GO 14478
14286: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14287: LD_ADDR_VAR 0 1
14291: PUSH
14292: LD_INT 2
14294: PUSH
14295: LD_INT 3
14297: PUSH
14298: LD_INT 4
14300: PUSH
14301: LD_INT 5
14303: PUSH
14304: LD_INT 6
14306: PUSH
14307: LD_INT 7
14309: PUSH
14310: LD_INT 8
14312: PUSH
14313: LD_INT 9
14315: PUSH
14316: LD_INT 10
14318: PUSH
14319: LD_INT 11
14321: PUSH
14322: LD_INT 12
14324: PUSH
14325: LD_INT 13
14327: PUSH
14328: LD_INT 14
14330: PUSH
14331: LD_INT 15
14333: PUSH
14334: LD_INT 16
14336: PUSH
14337: LD_INT 17
14339: PUSH
14340: LD_INT 18
14342: PUSH
14343: LD_INT 19
14345: PUSH
14346: LD_INT 20
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_INT 23
14357: PUSH
14358: LD_INT 24
14360: PUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 26
14366: PUSH
14367: LD_INT 28
14369: PUSH
14370: LD_INT 30
14372: PUSH
14373: LD_INT 31
14375: PUSH
14376: LD_INT 32
14378: PUSH
14379: LD_INT 34
14381: PUSH
14382: LD_INT 36
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 101
14420: PUSH
14421: LD_INT 102
14423: PUSH
14424: LD_INT 103
14426: PUSH
14427: LD_INT 104
14429: PUSH
14430: LD_INT 105
14432: PUSH
14433: LD_INT 106
14435: PUSH
14436: LD_INT 107
14438: PUSH
14439: LD_INT 108
14441: PUSH
14442: LD_INT 109
14444: PUSH
14445: LD_INT 110
14447: PUSH
14448: LD_INT 111
14450: PUSH
14451: LD_INT 112
14453: PUSH
14454: LD_INT 114
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: ST_TO_ADDR
14476: GO 16063
14478: LD_INT 12
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14694
14486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14487: LD_ADDR_VAR 0 1
14491: PUSH
14492: LD_INT 1
14494: PUSH
14495: LD_INT 2
14497: PUSH
14498: LD_INT 3
14500: PUSH
14501: LD_INT 4
14503: PUSH
14504: LD_INT 5
14506: PUSH
14507: LD_INT 6
14509: PUSH
14510: LD_INT 7
14512: PUSH
14513: LD_INT 8
14515: PUSH
14516: LD_INT 9
14518: PUSH
14519: LD_INT 10
14521: PUSH
14522: LD_INT 11
14524: PUSH
14525: LD_INT 12
14527: PUSH
14528: LD_INT 13
14530: PUSH
14531: LD_INT 14
14533: PUSH
14534: LD_INT 15
14536: PUSH
14537: LD_INT 16
14539: PUSH
14540: LD_INT 17
14542: PUSH
14543: LD_INT 18
14545: PUSH
14546: LD_INT 19
14548: PUSH
14549: LD_INT 20
14551: PUSH
14552: LD_INT 21
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_INT 23
14560: PUSH
14561: LD_INT 24
14563: PUSH
14564: LD_INT 25
14566: PUSH
14567: LD_INT 26
14569: PUSH
14570: LD_INT 27
14572: PUSH
14573: LD_INT 28
14575: PUSH
14576: LD_INT 30
14578: PUSH
14579: LD_INT 31
14581: PUSH
14582: LD_INT 32
14584: PUSH
14585: LD_INT 33
14587: PUSH
14588: LD_INT 34
14590: PUSH
14591: LD_INT 36
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 101
14632: PUSH
14633: LD_INT 102
14635: PUSH
14636: LD_INT 103
14638: PUSH
14639: LD_INT 104
14641: PUSH
14642: LD_INT 105
14644: PUSH
14645: LD_INT 106
14647: PUSH
14648: LD_INT 107
14650: PUSH
14651: LD_INT 108
14653: PUSH
14654: LD_INT 109
14656: PUSH
14657: LD_INT 110
14659: PUSH
14660: LD_INT 111
14662: PUSH
14663: LD_INT 112
14665: PUSH
14666: LD_INT 113
14668: PUSH
14669: LD_INT 114
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: ST_TO_ADDR
14692: GO 16063
14694: LD_INT 13
14696: DOUBLE
14697: EQUAL
14698: IFTRUE 14702
14700: GO 14898
14702: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14703: LD_ADDR_VAR 0 1
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: LD_INT 3
14716: PUSH
14717: LD_INT 4
14719: PUSH
14720: LD_INT 5
14722: PUSH
14723: LD_INT 8
14725: PUSH
14726: LD_INT 9
14728: PUSH
14729: LD_INT 10
14731: PUSH
14732: LD_INT 11
14734: PUSH
14735: LD_INT 12
14737: PUSH
14738: LD_INT 14
14740: PUSH
14741: LD_INT 15
14743: PUSH
14744: LD_INT 16
14746: PUSH
14747: LD_INT 17
14749: PUSH
14750: LD_INT 18
14752: PUSH
14753: LD_INT 19
14755: PUSH
14756: LD_INT 20
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: LD_INT 23
14767: PUSH
14768: LD_INT 24
14770: PUSH
14771: LD_INT 25
14773: PUSH
14774: LD_INT 26
14776: PUSH
14777: LD_INT 27
14779: PUSH
14780: LD_INT 28
14782: PUSH
14783: LD_INT 30
14785: PUSH
14786: LD_INT 31
14788: PUSH
14789: LD_INT 32
14791: PUSH
14792: LD_INT 33
14794: PUSH
14795: LD_INT 34
14797: PUSH
14798: LD_INT 36
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 101
14836: PUSH
14837: LD_INT 102
14839: PUSH
14840: LD_INT 103
14842: PUSH
14843: LD_INT 104
14845: PUSH
14846: LD_INT 105
14848: PUSH
14849: LD_INT 106
14851: PUSH
14852: LD_INT 107
14854: PUSH
14855: LD_INT 108
14857: PUSH
14858: LD_INT 109
14860: PUSH
14861: LD_INT 110
14863: PUSH
14864: LD_INT 111
14866: PUSH
14867: LD_INT 112
14869: PUSH
14870: LD_INT 113
14872: PUSH
14873: LD_INT 114
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: ST_TO_ADDR
14896: GO 16063
14898: LD_INT 14
14900: DOUBLE
14901: EQUAL
14902: IFTRUE 14906
14904: GO 15118
14906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14907: LD_ADDR_VAR 0 1
14911: PUSH
14912: LD_INT 1
14914: PUSH
14915: LD_INT 2
14917: PUSH
14918: LD_INT 3
14920: PUSH
14921: LD_INT 4
14923: PUSH
14924: LD_INT 5
14926: PUSH
14927: LD_INT 6
14929: PUSH
14930: LD_INT 7
14932: PUSH
14933: LD_INT 8
14935: PUSH
14936: LD_INT 9
14938: PUSH
14939: LD_INT 10
14941: PUSH
14942: LD_INT 11
14944: PUSH
14945: LD_INT 12
14947: PUSH
14948: LD_INT 13
14950: PUSH
14951: LD_INT 14
14953: PUSH
14954: LD_INT 15
14956: PUSH
14957: LD_INT 16
14959: PUSH
14960: LD_INT 17
14962: PUSH
14963: LD_INT 18
14965: PUSH
14966: LD_INT 19
14968: PUSH
14969: LD_INT 20
14971: PUSH
14972: LD_INT 21
14974: PUSH
14975: LD_INT 22
14977: PUSH
14978: LD_INT 23
14980: PUSH
14981: LD_INT 24
14983: PUSH
14984: LD_INT 25
14986: PUSH
14987: LD_INT 26
14989: PUSH
14990: LD_INT 27
14992: PUSH
14993: LD_INT 28
14995: PUSH
14996: LD_INT 29
14998: PUSH
14999: LD_INT 30
15001: PUSH
15002: LD_INT 31
15004: PUSH
15005: LD_INT 32
15007: PUSH
15008: LD_INT 33
15010: PUSH
15011: LD_INT 34
15013: PUSH
15014: LD_INT 36
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 101
15056: PUSH
15057: LD_INT 102
15059: PUSH
15060: LD_INT 103
15062: PUSH
15063: LD_INT 104
15065: PUSH
15066: LD_INT 105
15068: PUSH
15069: LD_INT 106
15071: PUSH
15072: LD_INT 107
15074: PUSH
15075: LD_INT 108
15077: PUSH
15078: LD_INT 109
15080: PUSH
15081: LD_INT 110
15083: PUSH
15084: LD_INT 111
15086: PUSH
15087: LD_INT 112
15089: PUSH
15090: LD_INT 113
15092: PUSH
15093: LD_INT 114
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: ST_TO_ADDR
15116: GO 16063
15118: LD_INT 15
15120: DOUBLE
15121: EQUAL
15122: IFTRUE 15126
15124: GO 15338
15126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15127: LD_ADDR_VAR 0 1
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: LD_INT 2
15137: PUSH
15138: LD_INT 3
15140: PUSH
15141: LD_INT 4
15143: PUSH
15144: LD_INT 5
15146: PUSH
15147: LD_INT 6
15149: PUSH
15150: LD_INT 7
15152: PUSH
15153: LD_INT 8
15155: PUSH
15156: LD_INT 9
15158: PUSH
15159: LD_INT 10
15161: PUSH
15162: LD_INT 11
15164: PUSH
15165: LD_INT 12
15167: PUSH
15168: LD_INT 13
15170: PUSH
15171: LD_INT 14
15173: PUSH
15174: LD_INT 15
15176: PUSH
15177: LD_INT 16
15179: PUSH
15180: LD_INT 17
15182: PUSH
15183: LD_INT 18
15185: PUSH
15186: LD_INT 19
15188: PUSH
15189: LD_INT 20
15191: PUSH
15192: LD_INT 21
15194: PUSH
15195: LD_INT 22
15197: PUSH
15198: LD_INT 23
15200: PUSH
15201: LD_INT 24
15203: PUSH
15204: LD_INT 25
15206: PUSH
15207: LD_INT 26
15209: PUSH
15210: LD_INT 27
15212: PUSH
15213: LD_INT 28
15215: PUSH
15216: LD_INT 29
15218: PUSH
15219: LD_INT 30
15221: PUSH
15222: LD_INT 31
15224: PUSH
15225: LD_INT 32
15227: PUSH
15228: LD_INT 33
15230: PUSH
15231: LD_INT 34
15233: PUSH
15234: LD_INT 36
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 101
15276: PUSH
15277: LD_INT 102
15279: PUSH
15280: LD_INT 103
15282: PUSH
15283: LD_INT 104
15285: PUSH
15286: LD_INT 105
15288: PUSH
15289: LD_INT 106
15291: PUSH
15292: LD_INT 107
15294: PUSH
15295: LD_INT 108
15297: PUSH
15298: LD_INT 109
15300: PUSH
15301: LD_INT 110
15303: PUSH
15304: LD_INT 111
15306: PUSH
15307: LD_INT 112
15309: PUSH
15310: LD_INT 113
15312: PUSH
15313: LD_INT 114
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: ST_TO_ADDR
15336: GO 16063
15338: LD_INT 16
15340: DOUBLE
15341: EQUAL
15342: IFTRUE 15346
15344: GO 15470
15346: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: LD_INT 2
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: LD_INT 5
15360: PUSH
15361: LD_INT 7
15363: PUSH
15364: LD_INT 11
15366: PUSH
15367: LD_INT 12
15369: PUSH
15370: LD_INT 15
15372: PUSH
15373: LD_INT 16
15375: PUSH
15376: LD_INT 20
15378: PUSH
15379: LD_INT 21
15381: PUSH
15382: LD_INT 22
15384: PUSH
15385: LD_INT 23
15387: PUSH
15388: LD_INT 25
15390: PUSH
15391: LD_INT 26
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 31
15399: PUSH
15400: LD_INT 32
15402: PUSH
15403: LD_INT 33
15405: PUSH
15406: LD_INT 34
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 101
15432: PUSH
15433: LD_INT 102
15435: PUSH
15436: LD_INT 103
15438: PUSH
15439: LD_INT 106
15441: PUSH
15442: LD_INT 108
15444: PUSH
15445: LD_INT 112
15447: PUSH
15448: LD_INT 113
15450: PUSH
15451: LD_INT 114
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: ST_TO_ADDR
15468: GO 16063
15470: LD_INT 17
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15690
15478: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15479: LD_ADDR_VAR 0 1
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: LD_INT 4
15495: PUSH
15496: LD_INT 5
15498: PUSH
15499: LD_INT 6
15501: PUSH
15502: LD_INT 7
15504: PUSH
15505: LD_INT 8
15507: PUSH
15508: LD_INT 9
15510: PUSH
15511: LD_INT 10
15513: PUSH
15514: LD_INT 11
15516: PUSH
15517: LD_INT 12
15519: PUSH
15520: LD_INT 13
15522: PUSH
15523: LD_INT 14
15525: PUSH
15526: LD_INT 15
15528: PUSH
15529: LD_INT 16
15531: PUSH
15532: LD_INT 17
15534: PUSH
15535: LD_INT 18
15537: PUSH
15538: LD_INT 19
15540: PUSH
15541: LD_INT 20
15543: PUSH
15544: LD_INT 21
15546: PUSH
15547: LD_INT 22
15549: PUSH
15550: LD_INT 23
15552: PUSH
15553: LD_INT 24
15555: PUSH
15556: LD_INT 25
15558: PUSH
15559: LD_INT 26
15561: PUSH
15562: LD_INT 27
15564: PUSH
15565: LD_INT 28
15567: PUSH
15568: LD_INT 29
15570: PUSH
15571: LD_INT 30
15573: PUSH
15574: LD_INT 31
15576: PUSH
15577: LD_INT 32
15579: PUSH
15580: LD_INT 33
15582: PUSH
15583: LD_INT 34
15585: PUSH
15586: LD_INT 36
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 101
15628: PUSH
15629: LD_INT 102
15631: PUSH
15632: LD_INT 103
15634: PUSH
15635: LD_INT 104
15637: PUSH
15638: LD_INT 105
15640: PUSH
15641: LD_INT 106
15643: PUSH
15644: LD_INT 107
15646: PUSH
15647: LD_INT 108
15649: PUSH
15650: LD_INT 109
15652: PUSH
15653: LD_INT 110
15655: PUSH
15656: LD_INT 111
15658: PUSH
15659: LD_INT 112
15661: PUSH
15662: LD_INT 113
15664: PUSH
15665: LD_INT 114
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: ST_TO_ADDR
15688: GO 16063
15690: LD_INT 18
15692: DOUBLE
15693: EQUAL
15694: IFTRUE 15698
15696: GO 15834
15698: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15699: LD_ADDR_VAR 0 1
15703: PUSH
15704: LD_INT 2
15706: PUSH
15707: LD_INT 4
15709: PUSH
15710: LD_INT 5
15712: PUSH
15713: LD_INT 7
15715: PUSH
15716: LD_INT 11
15718: PUSH
15719: LD_INT 12
15721: PUSH
15722: LD_INT 15
15724: PUSH
15725: LD_INT 16
15727: PUSH
15728: LD_INT 20
15730: PUSH
15731: LD_INT 21
15733: PUSH
15734: LD_INT 22
15736: PUSH
15737: LD_INT 23
15739: PUSH
15740: LD_INT 25
15742: PUSH
15743: LD_INT 26
15745: PUSH
15746: LD_INT 30
15748: PUSH
15749: LD_INT 31
15751: PUSH
15752: LD_INT 32
15754: PUSH
15755: LD_INT 33
15757: PUSH
15758: LD_INT 34
15760: PUSH
15761: LD_INT 35
15763: PUSH
15764: LD_INT 36
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 101
15792: PUSH
15793: LD_INT 102
15795: PUSH
15796: LD_INT 103
15798: PUSH
15799: LD_INT 106
15801: PUSH
15802: LD_INT 108
15804: PUSH
15805: LD_INT 112
15807: PUSH
15808: LD_INT 113
15810: PUSH
15811: LD_INT 114
15813: PUSH
15814: LD_INT 115
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: ST_TO_ADDR
15832: GO 16063
15834: LD_INT 19
15836: DOUBLE
15837: EQUAL
15838: IFTRUE 15842
15840: GO 16062
15842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_INT 1
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: LD_INT 5
15862: PUSH
15863: LD_INT 6
15865: PUSH
15866: LD_INT 7
15868: PUSH
15869: LD_INT 8
15871: PUSH
15872: LD_INT 9
15874: PUSH
15875: LD_INT 10
15877: PUSH
15878: LD_INT 11
15880: PUSH
15881: LD_INT 12
15883: PUSH
15884: LD_INT 13
15886: PUSH
15887: LD_INT 14
15889: PUSH
15890: LD_INT 15
15892: PUSH
15893: LD_INT 16
15895: PUSH
15896: LD_INT 17
15898: PUSH
15899: LD_INT 18
15901: PUSH
15902: LD_INT 19
15904: PUSH
15905: LD_INT 20
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 22
15913: PUSH
15914: LD_INT 23
15916: PUSH
15917: LD_INT 24
15919: PUSH
15920: LD_INT 25
15922: PUSH
15923: LD_INT 26
15925: PUSH
15926: LD_INT 27
15928: PUSH
15929: LD_INT 28
15931: PUSH
15932: LD_INT 29
15934: PUSH
15935: LD_INT 30
15937: PUSH
15938: LD_INT 31
15940: PUSH
15941: LD_INT 32
15943: PUSH
15944: LD_INT 33
15946: PUSH
15947: LD_INT 34
15949: PUSH
15950: LD_INT 35
15952: PUSH
15953: LD_INT 36
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 101
15996: PUSH
15997: LD_INT 102
15999: PUSH
16000: LD_INT 103
16002: PUSH
16003: LD_INT 104
16005: PUSH
16006: LD_INT 105
16008: PUSH
16009: LD_INT 106
16011: PUSH
16012: LD_INT 107
16014: PUSH
16015: LD_INT 108
16017: PUSH
16018: LD_INT 109
16020: PUSH
16021: LD_INT 110
16023: PUSH
16024: LD_INT 111
16026: PUSH
16027: LD_INT 112
16029: PUSH
16030: LD_INT 113
16032: PUSH
16033: LD_INT 114
16035: PUSH
16036: LD_INT 115
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: ST_TO_ADDR
16060: GO 16063
16062: POP
// end else
16063: GO 16282
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16065: LD_ADDR_VAR 0 1
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: LD_INT 2
16075: PUSH
16076: LD_INT 3
16078: PUSH
16079: LD_INT 4
16081: PUSH
16082: LD_INT 5
16084: PUSH
16085: LD_INT 6
16087: PUSH
16088: LD_INT 7
16090: PUSH
16091: LD_INT 8
16093: PUSH
16094: LD_INT 9
16096: PUSH
16097: LD_INT 10
16099: PUSH
16100: LD_INT 11
16102: PUSH
16103: LD_INT 12
16105: PUSH
16106: LD_INT 13
16108: PUSH
16109: LD_INT 14
16111: PUSH
16112: LD_INT 15
16114: PUSH
16115: LD_INT 16
16117: PUSH
16118: LD_INT 17
16120: PUSH
16121: LD_INT 18
16123: PUSH
16124: LD_INT 19
16126: PUSH
16127: LD_INT 20
16129: PUSH
16130: LD_INT 21
16132: PUSH
16133: LD_INT 22
16135: PUSH
16136: LD_INT 23
16138: PUSH
16139: LD_INT 24
16141: PUSH
16142: LD_INT 25
16144: PUSH
16145: LD_INT 26
16147: PUSH
16148: LD_INT 27
16150: PUSH
16151: LD_INT 28
16153: PUSH
16154: LD_INT 29
16156: PUSH
16157: LD_INT 30
16159: PUSH
16160: LD_INT 31
16162: PUSH
16163: LD_INT 32
16165: PUSH
16166: LD_INT 33
16168: PUSH
16169: LD_INT 34
16171: PUSH
16172: LD_INT 35
16174: PUSH
16175: LD_INT 36
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 101
16218: PUSH
16219: LD_INT 102
16221: PUSH
16222: LD_INT 103
16224: PUSH
16225: LD_INT 104
16227: PUSH
16228: LD_INT 105
16230: PUSH
16231: LD_INT 106
16233: PUSH
16234: LD_INT 107
16236: PUSH
16237: LD_INT 108
16239: PUSH
16240: LD_INT 109
16242: PUSH
16243: LD_INT 110
16245: PUSH
16246: LD_INT 111
16248: PUSH
16249: LD_INT 112
16251: PUSH
16252: LD_INT 113
16254: PUSH
16255: LD_INT 114
16257: PUSH
16258: LD_INT 115
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: ST_TO_ADDR
// if result then
16282: LD_VAR 0 1
16286: IFFALSE 16575
// begin normal :=  ;
16288: LD_ADDR_VAR 0 3
16292: PUSH
16293: LD_STRING 
16295: ST_TO_ADDR
// hardcore :=  ;
16296: LD_ADDR_VAR 0 4
16300: PUSH
16301: LD_STRING 
16303: ST_TO_ADDR
// for i = 1 to normalCounter do
16304: LD_ADDR_VAR 0 5
16308: PUSH
16309: DOUBLE
16310: LD_INT 1
16312: DEC
16313: ST_TO_ADDR
16314: LD_EXP 38
16318: PUSH
16319: FOR_TO
16320: IFFALSE 16421
// begin tmp := 0 ;
16322: LD_ADDR_VAR 0 2
16326: PUSH
16327: LD_STRING 0
16329: ST_TO_ADDR
// if result [ 1 ] then
16330: LD_VAR 0 1
16334: PUSH
16335: LD_INT 1
16337: ARRAY
16338: IFFALSE 16403
// if result [ 1 ] [ 1 ] = i then
16340: LD_VAR 0 1
16344: PUSH
16345: LD_INT 1
16347: ARRAY
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PUSH
16353: LD_VAR 0 5
16357: EQUAL
16358: IFFALSE 16403
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16360: LD_ADDR_VAR 0 1
16364: PUSH
16365: LD_VAR 0 1
16369: PPUSH
16370: LD_INT 1
16372: PPUSH
16373: LD_VAR 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_INT 1
16384: PPUSH
16385: CALL_OW 3
16389: PPUSH
16390: CALL_OW 1
16394: ST_TO_ADDR
// tmp := 1 ;
16395: LD_ADDR_VAR 0 2
16399: PUSH
16400: LD_STRING 1
16402: ST_TO_ADDR
// end ; normal := normal & tmp ;
16403: LD_ADDR_VAR 0 3
16407: PUSH
16408: LD_VAR 0 3
16412: PUSH
16413: LD_VAR 0 2
16417: STR
16418: ST_TO_ADDR
// end ;
16419: GO 16319
16421: POP
16422: POP
// for i = 1 to hardcoreCounter do
16423: LD_ADDR_VAR 0 5
16427: PUSH
16428: DOUBLE
16429: LD_INT 1
16431: DEC
16432: ST_TO_ADDR
16433: LD_EXP 39
16437: PUSH
16438: FOR_TO
16439: IFFALSE 16544
// begin tmp := 0 ;
16441: LD_ADDR_VAR 0 2
16445: PUSH
16446: LD_STRING 0
16448: ST_TO_ADDR
// if result [ 2 ] then
16449: LD_VAR 0 1
16453: PUSH
16454: LD_INT 2
16456: ARRAY
16457: IFFALSE 16526
// if result [ 2 ] [ 1 ] = 100 + i then
16459: LD_VAR 0 1
16463: PUSH
16464: LD_INT 2
16466: ARRAY
16467: PUSH
16468: LD_INT 1
16470: ARRAY
16471: PUSH
16472: LD_INT 100
16474: PUSH
16475: LD_VAR 0 5
16479: PLUS
16480: EQUAL
16481: IFFALSE 16526
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16483: LD_ADDR_VAR 0 1
16487: PUSH
16488: LD_VAR 0 1
16492: PPUSH
16493: LD_INT 2
16495: PPUSH
16496: LD_VAR 0 1
16500: PUSH
16501: LD_INT 2
16503: ARRAY
16504: PPUSH
16505: LD_INT 1
16507: PPUSH
16508: CALL_OW 3
16512: PPUSH
16513: CALL_OW 1
16517: ST_TO_ADDR
// tmp := 1 ;
16518: LD_ADDR_VAR 0 2
16522: PUSH
16523: LD_STRING 1
16525: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16526: LD_ADDR_VAR 0 4
16530: PUSH
16531: LD_VAR 0 4
16535: PUSH
16536: LD_VAR 0 2
16540: STR
16541: ST_TO_ADDR
// end ;
16542: GO 16438
16544: POP
16545: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16546: LD_STRING getStreamItemsFromMission("
16548: PUSH
16549: LD_VAR 0 3
16553: STR
16554: PUSH
16555: LD_STRING ","
16557: STR
16558: PUSH
16559: LD_VAR 0 4
16563: STR
16564: PUSH
16565: LD_STRING ")
16567: STR
16568: PPUSH
16569: CALL_OW 559
// end else
16573: GO 16582
// ToLua ( getStreamItemsFromMission("","") ) ;
16575: LD_STRING getStreamItemsFromMission("","")
16577: PPUSH
16578: CALL_OW 559
// end ;
16582: LD_VAR 0 1
16586: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16587: LD_EXP 37
16591: PUSH
16592: LD_EXP 42
16596: AND
16597: IFFALSE 16721
16599: GO 16601
16601: DISABLE
16602: LD_INT 0
16604: PPUSH
16605: PPUSH
// begin enable ;
16606: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16607: LD_ADDR_VAR 0 2
16611: PUSH
16612: LD_INT 22
16614: PUSH
16615: LD_OWVAR 2
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 2
16626: PUSH
16627: LD_INT 34
16629: PUSH
16630: LD_INT 7
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 34
16639: PUSH
16640: LD_INT 45
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 34
16649: PUSH
16650: LD_INT 28
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 34
16659: PUSH
16660: LD_INT 47
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PPUSH
16678: CALL_OW 69
16682: ST_TO_ADDR
// if not tmp then
16683: LD_VAR 0 2
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16721
// for i in tmp do
16692: LD_ADDR_VAR 0 1
16696: PUSH
16697: LD_VAR 0 2
16701: PUSH
16702: FOR_IN
16703: IFFALSE 16719
// begin SetLives ( i , 0 ) ;
16705: LD_VAR 0 1
16709: PPUSH
16710: LD_INT 0
16712: PPUSH
16713: CALL_OW 234
// end ;
16717: GO 16702
16719: POP
16720: POP
// end ;
16721: PPOPN 2
16723: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16724: LD_EXP 37
16728: PUSH
16729: LD_EXP 43
16733: AND
16734: IFFALSE 16818
16736: GO 16738
16738: DISABLE
16739: LD_INT 0
16741: PPUSH
16742: PPUSH
// begin enable ;
16743: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16744: LD_ADDR_VAR 0 2
16748: PUSH
16749: LD_INT 22
16751: PUSH
16752: LD_OWVAR 2
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 32
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PPUSH
16775: CALL_OW 69
16779: ST_TO_ADDR
// if not tmp then
16780: LD_VAR 0 2
16784: NOT
16785: IFFALSE 16789
// exit ;
16787: GO 16818
// for i in tmp do
16789: LD_ADDR_VAR 0 1
16793: PUSH
16794: LD_VAR 0 2
16798: PUSH
16799: FOR_IN
16800: IFFALSE 16816
// begin SetLives ( i , 0 ) ;
16802: LD_VAR 0 1
16806: PPUSH
16807: LD_INT 0
16809: PPUSH
16810: CALL_OW 234
// end ;
16814: GO 16799
16816: POP
16817: POP
// end ;
16818: PPOPN 2
16820: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16821: LD_EXP 37
16825: PUSH
16826: LD_EXP 40
16830: AND
16831: IFFALSE 16924
16833: GO 16835
16835: DISABLE
16836: LD_INT 0
16838: PPUSH
// begin enable ;
16839: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: LD_INT 22
16847: PUSH
16848: LD_OWVAR 2
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 25
16862: PUSH
16863: LD_INT 5
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 25
16872: PUSH
16873: LD_INT 9
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 25
16882: PUSH
16883: LD_INT 8
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PPUSH
16900: CALL_OW 69
16904: PUSH
16905: FOR_IN
16906: IFFALSE 16922
// begin SetClass ( i , 1 ) ;
16908: LD_VAR 0 1
16912: PPUSH
16913: LD_INT 1
16915: PPUSH
16916: CALL_OW 336
// end ;
16920: GO 16905
16922: POP
16923: POP
// end ;
16924: PPOPN 1
16926: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16927: LD_EXP 37
16931: PUSH
16932: LD_EXP 41
16936: AND
16937: PUSH
16938: LD_OWVAR 65
16942: PUSH
16943: LD_INT 7
16945: LESS
16946: AND
16947: IFFALSE 16961
16949: GO 16951
16951: DISABLE
// begin enable ;
16952: ENABLE
// game_speed := 7 ;
16953: LD_ADDR_OWVAR 65
16957: PUSH
16958: LD_INT 7
16960: ST_TO_ADDR
// end ;
16961: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16962: LD_EXP 37
16966: PUSH
16967: LD_EXP 44
16971: AND
16972: IFFALSE 17174
16974: GO 16976
16976: DISABLE
16977: LD_INT 0
16979: PPUSH
16980: PPUSH
16981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16982: LD_ADDR_VAR 0 3
16986: PUSH
16987: LD_INT 81
16989: PUSH
16990: LD_OWVAR 2
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 21
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PPUSH
17013: CALL_OW 69
17017: ST_TO_ADDR
// if not tmp then
17018: LD_VAR 0 3
17022: NOT
17023: IFFALSE 17027
// exit ;
17025: GO 17174
// if tmp > 5 then
17027: LD_VAR 0 3
17031: PUSH
17032: LD_INT 5
17034: GREATER
17035: IFFALSE 17047
// k := 5 else
17037: LD_ADDR_VAR 0 2
17041: PUSH
17042: LD_INT 5
17044: ST_TO_ADDR
17045: GO 17057
// k := tmp ;
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_VAR 0 3
17056: ST_TO_ADDR
// for i := 1 to k do
17057: LD_ADDR_VAR 0 1
17061: PUSH
17062: DOUBLE
17063: LD_INT 1
17065: DEC
17066: ST_TO_ADDR
17067: LD_VAR 0 2
17071: PUSH
17072: FOR_TO
17073: IFFALSE 17172
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17075: LD_VAR 0 3
17079: PUSH
17080: LD_VAR 0 1
17084: ARRAY
17085: PPUSH
17086: LD_VAR 0 1
17090: PUSH
17091: LD_INT 4
17093: MOD
17094: PUSH
17095: LD_INT 1
17097: PLUS
17098: PPUSH
17099: CALL_OW 259
17103: PUSH
17104: LD_INT 10
17106: LESS
17107: IFFALSE 17170
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17109: LD_VAR 0 3
17113: PUSH
17114: LD_VAR 0 1
17118: ARRAY
17119: PPUSH
17120: LD_VAR 0 1
17124: PUSH
17125: LD_INT 4
17127: MOD
17128: PUSH
17129: LD_INT 1
17131: PLUS
17132: PPUSH
17133: LD_VAR 0 3
17137: PUSH
17138: LD_VAR 0 1
17142: ARRAY
17143: PPUSH
17144: LD_VAR 0 1
17148: PUSH
17149: LD_INT 4
17151: MOD
17152: PUSH
17153: LD_INT 1
17155: PLUS
17156: PPUSH
17157: CALL_OW 259
17161: PUSH
17162: LD_INT 1
17164: PLUS
17165: PPUSH
17166: CALL_OW 237
17170: GO 17072
17172: POP
17173: POP
// end ;
17174: PPOPN 3
17176: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17177: LD_EXP 37
17181: PUSH
17182: LD_EXP 45
17186: AND
17187: IFFALSE 17207
17189: GO 17191
17191: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17192: LD_INT 4
17194: PPUSH
17195: LD_OWVAR 2
17199: PPUSH
17200: LD_INT 0
17202: PPUSH
17203: CALL_OW 324
17207: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17208: LD_EXP 37
17212: PUSH
17213: LD_EXP 74
17217: AND
17218: IFFALSE 17238
17220: GO 17222
17222: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17223: LD_INT 19
17225: PPUSH
17226: LD_OWVAR 2
17230: PPUSH
17231: LD_INT 0
17233: PPUSH
17234: CALL_OW 324
17238: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17239: LD_EXP 37
17243: PUSH
17244: LD_EXP 46
17248: AND
17249: IFFALSE 17351
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
// begin enable ;
17258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17259: LD_ADDR_VAR 0 2
17263: PUSH
17264: LD_INT 22
17266: PUSH
17267: LD_OWVAR 2
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 34
17281: PUSH
17282: LD_INT 11
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 34
17291: PUSH
17292: LD_INT 30
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PPUSH
17308: CALL_OW 69
17312: ST_TO_ADDR
// if not tmp then
17313: LD_VAR 0 2
17317: NOT
17318: IFFALSE 17322
// exit ;
17320: GO 17351
// for i in tmp do
17322: LD_ADDR_VAR 0 1
17326: PUSH
17327: LD_VAR 0 2
17331: PUSH
17332: FOR_IN
17333: IFFALSE 17349
// begin SetLives ( i , 0 ) ;
17335: LD_VAR 0 1
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: CALL_OW 234
// end ;
17347: GO 17332
17349: POP
17350: POP
// end ;
17351: PPOPN 2
17353: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17354: LD_EXP 37
17358: PUSH
17359: LD_EXP 47
17363: AND
17364: IFFALSE 17384
17366: GO 17368
17368: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17369: LD_INT 32
17371: PPUSH
17372: LD_OWVAR 2
17376: PPUSH
17377: LD_INT 0
17379: PPUSH
17380: CALL_OW 324
17384: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17385: LD_EXP 37
17389: PUSH
17390: LD_EXP 48
17394: AND
17395: IFFALSE 17576
17397: GO 17399
17399: DISABLE
17400: LD_INT 0
17402: PPUSH
17403: PPUSH
17404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_INT 22
17412: PUSH
17413: LD_OWVAR 2
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 33
17424: PUSH
17425: LD_INT 3
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PPUSH
17436: CALL_OW 69
17440: ST_TO_ADDR
// if not tmp then
17441: LD_VAR 0 2
17445: NOT
17446: IFFALSE 17450
// exit ;
17448: GO 17576
// side := 0 ;
17450: LD_ADDR_VAR 0 3
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
// for i := 1 to 8 do
17458: LD_ADDR_VAR 0 1
17462: PUSH
17463: DOUBLE
17464: LD_INT 1
17466: DEC
17467: ST_TO_ADDR
17468: LD_INT 8
17470: PUSH
17471: FOR_TO
17472: IFFALSE 17520
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17474: LD_OWVAR 2
17478: PUSH
17479: LD_VAR 0 1
17483: NONEQUAL
17484: PUSH
17485: LD_OWVAR 2
17489: PPUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 81
17499: PUSH
17500: LD_INT 2
17502: EQUAL
17503: AND
17504: IFFALSE 17518
// begin side := i ;
17506: LD_ADDR_VAR 0 3
17510: PUSH
17511: LD_VAR 0 1
17515: ST_TO_ADDR
// break ;
17516: GO 17520
// end ;
17518: GO 17471
17520: POP
17521: POP
// if not side then
17522: LD_VAR 0 3
17526: NOT
17527: IFFALSE 17531
// exit ;
17529: GO 17576
// for i := 1 to tmp do
17531: LD_ADDR_VAR 0 1
17535: PUSH
17536: DOUBLE
17537: LD_INT 1
17539: DEC
17540: ST_TO_ADDR
17541: LD_VAR 0 2
17545: PUSH
17546: FOR_TO
17547: IFFALSE 17574
// if Prob ( 60 ) then
17549: LD_INT 60
17551: PPUSH
17552: CALL_OW 13
17556: IFFALSE 17572
// SetSide ( i , side ) ;
17558: LD_VAR 0 1
17562: PPUSH
17563: LD_VAR 0 3
17567: PPUSH
17568: CALL_OW 235
17572: GO 17546
17574: POP
17575: POP
// end ;
17576: PPOPN 3
17578: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17579: LD_EXP 37
17583: PUSH
17584: LD_EXP 50
17588: AND
17589: IFFALSE 17708
17591: GO 17593
17593: DISABLE
17594: LD_INT 0
17596: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17597: LD_ADDR_VAR 0 1
17601: PUSH
17602: LD_INT 22
17604: PUSH
17605: LD_OWVAR 2
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 21
17616: PUSH
17617: LD_INT 1
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 3
17626: PUSH
17627: LD_INT 23
17629: PUSH
17630: LD_INT 0
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: LIST
17645: PPUSH
17646: CALL_OW 69
17650: PUSH
17651: FOR_IN
17652: IFFALSE 17706
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17654: LD_VAR 0 1
17658: PPUSH
17659: CALL_OW 257
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: LD_INT 3
17672: PUSH
17673: LD_INT 4
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: IN
17682: IFFALSE 17704
// SetClass ( un , rand ( 1 , 4 ) ) ;
17684: LD_VAR 0 1
17688: PPUSH
17689: LD_INT 1
17691: PPUSH
17692: LD_INT 4
17694: PPUSH
17695: CALL_OW 12
17699: PPUSH
17700: CALL_OW 336
17704: GO 17651
17706: POP
17707: POP
// end ;
17708: PPOPN 1
17710: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17711: LD_EXP 37
17715: PUSH
17716: LD_EXP 49
17720: AND
17721: IFFALSE 17800
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17729: LD_ADDR_VAR 0 1
17733: PUSH
17734: LD_INT 22
17736: PUSH
17737: LD_OWVAR 2
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 21
17748: PUSH
17749: LD_INT 3
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PPUSH
17760: CALL_OW 69
17764: ST_TO_ADDR
// if not tmp then
17765: LD_VAR 0 1
17769: NOT
17770: IFFALSE 17774
// exit ;
17772: GO 17800
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17774: LD_VAR 0 1
17778: PUSH
17779: LD_INT 1
17781: PPUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 12
17791: ARRAY
17792: PPUSH
17793: LD_INT 100
17795: PPUSH
17796: CALL_OW 234
// end ;
17800: PPOPN 1
17802: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17803: LD_EXP 37
17807: PUSH
17808: LD_EXP 51
17812: AND
17813: IFFALSE 17911
17815: GO 17817
17817: DISABLE
17818: LD_INT 0
17820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17821: LD_ADDR_VAR 0 1
17825: PUSH
17826: LD_INT 22
17828: PUSH
17829: LD_OWVAR 2
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 21
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PPUSH
17852: CALL_OW 69
17856: ST_TO_ADDR
// if not tmp then
17857: LD_VAR 0 1
17861: NOT
17862: IFFALSE 17866
// exit ;
17864: GO 17911
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 1
17873: PPUSH
17874: LD_VAR 0 1
17878: PPUSH
17879: CALL_OW 12
17883: ARRAY
17884: PPUSH
17885: LD_INT 1
17887: PPUSH
17888: LD_INT 4
17890: PPUSH
17891: CALL_OW 12
17895: PPUSH
17896: LD_INT 3000
17898: PPUSH
17899: LD_INT 9000
17901: PPUSH
17902: CALL_OW 12
17906: PPUSH
17907: CALL_OW 492
// end ;
17911: PPOPN 1
17913: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17914: LD_EXP 37
17918: PUSH
17919: LD_EXP 52
17923: AND
17924: IFFALSE 17944
17926: GO 17928
17928: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17929: LD_INT 1
17931: PPUSH
17932: LD_OWVAR 2
17936: PPUSH
17937: LD_INT 0
17939: PPUSH
17940: CALL_OW 324
17944: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17945: LD_EXP 37
17949: PUSH
17950: LD_EXP 53
17954: AND
17955: IFFALSE 18038
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
17963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17964: LD_ADDR_VAR 0 2
17968: PUSH
17969: LD_INT 22
17971: PUSH
17972: LD_OWVAR 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 21
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PPUSH
17995: CALL_OW 69
17999: ST_TO_ADDR
// if not tmp then
18000: LD_VAR 0 2
18004: NOT
18005: IFFALSE 18009
// exit ;
18007: GO 18038
// for i in tmp do
18009: LD_ADDR_VAR 0 1
18013: PUSH
18014: LD_VAR 0 2
18018: PUSH
18019: FOR_IN
18020: IFFALSE 18036
// SetBLevel ( i , 10 ) ;
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_INT 10
18029: PPUSH
18030: CALL_OW 241
18034: GO 18019
18036: POP
18037: POP
// end ;
18038: PPOPN 2
18040: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18041: LD_EXP 37
18045: PUSH
18046: LD_EXP 54
18050: AND
18051: IFFALSE 18162
18053: GO 18055
18055: DISABLE
18056: LD_INT 0
18058: PPUSH
18059: PPUSH
18060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18061: LD_ADDR_VAR 0 3
18065: PUSH
18066: LD_INT 22
18068: PUSH
18069: LD_OWVAR 2
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 25
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: ST_TO_ADDR
// if not tmp then
18097: LD_VAR 0 3
18101: NOT
18102: IFFALSE 18106
// exit ;
18104: GO 18162
// un := tmp [ rand ( 1 , tmp ) ] ;
18106: LD_ADDR_VAR 0 2
18110: PUSH
18111: LD_VAR 0 3
18115: PUSH
18116: LD_INT 1
18118: PPUSH
18119: LD_VAR 0 3
18123: PPUSH
18124: CALL_OW 12
18128: ARRAY
18129: ST_TO_ADDR
// if Crawls ( un ) then
18130: LD_VAR 0 2
18134: PPUSH
18135: CALL_OW 318
18139: IFFALSE 18150
// ComWalk ( un ) ;
18141: LD_VAR 0 2
18145: PPUSH
18146: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18150: LD_VAR 0 2
18154: PPUSH
18155: LD_INT 5
18157: PPUSH
18158: CALL_OW 336
// end ;
18162: PPOPN 3
18164: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18165: LD_EXP 37
18169: PUSH
18170: LD_EXP 55
18174: AND
18175: PUSH
18176: LD_OWVAR 67
18180: PUSH
18181: LD_INT 3
18183: LESS
18184: AND
18185: IFFALSE 18204
18187: GO 18189
18189: DISABLE
// Difficulty := Difficulty + 1 ;
18190: LD_ADDR_OWVAR 67
18194: PUSH
18195: LD_OWVAR 67
18199: PUSH
18200: LD_INT 1
18202: PLUS
18203: ST_TO_ADDR
18204: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18205: LD_EXP 37
18209: PUSH
18210: LD_EXP 56
18214: AND
18215: IFFALSE 18318
18217: GO 18219
18219: DISABLE
18220: LD_INT 0
18222: PPUSH
// begin for i := 1 to 5 do
18223: LD_ADDR_VAR 0 1
18227: PUSH
18228: DOUBLE
18229: LD_INT 1
18231: DEC
18232: ST_TO_ADDR
18233: LD_INT 5
18235: PUSH
18236: FOR_TO
18237: IFFALSE 18316
// begin uc_nation := nation_nature ;
18239: LD_ADDR_OWVAR 21
18243: PUSH
18244: LD_INT 0
18246: ST_TO_ADDR
// uc_side := 0 ;
18247: LD_ADDR_OWVAR 20
18251: PUSH
18252: LD_INT 0
18254: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18255: LD_ADDR_OWVAR 29
18259: PUSH
18260: LD_INT 12
18262: PUSH
18263: LD_INT 12
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: ST_TO_ADDR
// hc_agressivity := 20 ;
18270: LD_ADDR_OWVAR 35
18274: PUSH
18275: LD_INT 20
18277: ST_TO_ADDR
// hc_class := class_tiger ;
18278: LD_ADDR_OWVAR 28
18282: PUSH
18283: LD_INT 14
18285: ST_TO_ADDR
// hc_gallery :=  ;
18286: LD_ADDR_OWVAR 33
18290: PUSH
18291: LD_STRING 
18293: ST_TO_ADDR
// hc_name :=  ;
18294: LD_ADDR_OWVAR 26
18298: PUSH
18299: LD_STRING 
18301: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18302: CALL_OW 44
18306: PPUSH
18307: LD_INT 0
18309: PPUSH
18310: CALL_OW 51
// end ;
18314: GO 18236
18316: POP
18317: POP
// end ;
18318: PPOPN 1
18320: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18321: LD_EXP 37
18325: PUSH
18326: LD_EXP 57
18330: AND
18331: IFFALSE 18340
18333: GO 18335
18335: DISABLE
// StreamSibBomb ;
18336: CALL 18341 0 0
18340: END
// export function StreamSibBomb ; var i , x , y ; begin
18341: LD_INT 0
18343: PPUSH
18344: PPUSH
18345: PPUSH
18346: PPUSH
// result := false ;
18347: LD_ADDR_VAR 0 1
18351: PUSH
18352: LD_INT 0
18354: ST_TO_ADDR
// for i := 1 to 16 do
18355: LD_ADDR_VAR 0 2
18359: PUSH
18360: DOUBLE
18361: LD_INT 1
18363: DEC
18364: ST_TO_ADDR
18365: LD_INT 16
18367: PUSH
18368: FOR_TO
18369: IFFALSE 18568
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18371: LD_ADDR_VAR 0 3
18375: PUSH
18376: LD_INT 10
18378: PUSH
18379: LD_INT 20
18381: PUSH
18382: LD_INT 30
18384: PUSH
18385: LD_INT 40
18387: PUSH
18388: LD_INT 50
18390: PUSH
18391: LD_INT 60
18393: PUSH
18394: LD_INT 70
18396: PUSH
18397: LD_INT 80
18399: PUSH
18400: LD_INT 90
18402: PUSH
18403: LD_INT 100
18405: PUSH
18406: LD_INT 110
18408: PUSH
18409: LD_INT 120
18411: PUSH
18412: LD_INT 130
18414: PUSH
18415: LD_INT 140
18417: PUSH
18418: LD_INT 150
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: PPUSH
18441: LD_INT 15
18443: PPUSH
18444: CALL_OW 12
18448: ARRAY
18449: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18450: LD_ADDR_VAR 0 4
18454: PUSH
18455: LD_INT 10
18457: PUSH
18458: LD_INT 20
18460: PUSH
18461: LD_INT 30
18463: PUSH
18464: LD_INT 40
18466: PUSH
18467: LD_INT 50
18469: PUSH
18470: LD_INT 60
18472: PUSH
18473: LD_INT 70
18475: PUSH
18476: LD_INT 80
18478: PUSH
18479: LD_INT 90
18481: PUSH
18482: LD_INT 100
18484: PUSH
18485: LD_INT 110
18487: PUSH
18488: LD_INT 120
18490: PUSH
18491: LD_INT 130
18493: PUSH
18494: LD_INT 140
18496: PUSH
18497: LD_INT 150
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 1
18519: PPUSH
18520: LD_INT 15
18522: PPUSH
18523: CALL_OW 12
18527: ARRAY
18528: ST_TO_ADDR
// if ValidHex ( x , y ) then
18529: LD_VAR 0 3
18533: PPUSH
18534: LD_VAR 0 4
18538: PPUSH
18539: CALL_OW 488
18543: IFFALSE 18566
// begin result := [ x , y ] ;
18545: LD_ADDR_VAR 0 1
18549: PUSH
18550: LD_VAR 0 3
18554: PUSH
18555: LD_VAR 0 4
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: ST_TO_ADDR
// break ;
18564: GO 18568
// end ; end ;
18566: GO 18368
18568: POP
18569: POP
// if result then
18570: LD_VAR 0 1
18574: IFFALSE 18634
// begin ToLua ( playSibBomb() ) ;
18576: LD_STRING playSibBomb()
18578: PPUSH
18579: CALL_OW 559
// wait ( 0 0$14 ) ;
18583: LD_INT 490
18585: PPUSH
18586: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18590: LD_VAR 0 1
18594: PUSH
18595: LD_INT 1
18597: ARRAY
18598: PPUSH
18599: LD_VAR 0 1
18603: PUSH
18604: LD_INT 2
18606: ARRAY
18607: PPUSH
18608: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18612: LD_VAR 0 1
18616: PUSH
18617: LD_INT 1
18619: ARRAY
18620: PPUSH
18621: LD_VAR 0 1
18625: PUSH
18626: LD_INT 2
18628: ARRAY
18629: PPUSH
18630: CALL_OW 429
// end ; end ;
18634: LD_VAR 0 1
18638: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18639: LD_EXP 37
18643: PUSH
18644: LD_EXP 59
18648: AND
18649: IFFALSE 18661
18651: GO 18653
18653: DISABLE
// YouLost (  ) ;
18654: LD_STRING 
18656: PPUSH
18657: CALL_OW 104
18661: END
// every 0 0$1 trigger StreamModeActive and sFog do
18662: LD_EXP 37
18666: PUSH
18667: LD_EXP 58
18671: AND
18672: IFFALSE 18686
18674: GO 18676
18676: DISABLE
// FogOff ( your_side ) ;
18677: LD_OWVAR 2
18681: PPUSH
18682: CALL_OW 344
18686: END
// every 0 0$1 trigger StreamModeActive and sSun do
18687: LD_EXP 37
18691: PUSH
18692: LD_EXP 60
18696: AND
18697: IFFALSE 18725
18699: GO 18701
18701: DISABLE
// begin solar_recharge_percent := 0 ;
18702: LD_ADDR_OWVAR 79
18706: PUSH
18707: LD_INT 0
18709: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18710: LD_INT 10500
18712: PPUSH
18713: CALL_OW 67
// solar_recharge_percent := 100 ;
18717: LD_ADDR_OWVAR 79
18721: PUSH
18722: LD_INT 100
18724: ST_TO_ADDR
// end ;
18725: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18726: LD_EXP 37
18730: PUSH
18731: LD_EXP 61
18735: AND
18736: IFFALSE 18975
18738: GO 18740
18740: DISABLE
18741: LD_INT 0
18743: PPUSH
18744: PPUSH
18745: PPUSH
// begin tmp := [ ] ;
18746: LD_ADDR_VAR 0 3
18750: PUSH
18751: EMPTY
18752: ST_TO_ADDR
// for i := 1 to 6 do
18753: LD_ADDR_VAR 0 1
18757: PUSH
18758: DOUBLE
18759: LD_INT 1
18761: DEC
18762: ST_TO_ADDR
18763: LD_INT 6
18765: PUSH
18766: FOR_TO
18767: IFFALSE 18872
// begin uc_nation := nation_nature ;
18769: LD_ADDR_OWVAR 21
18773: PUSH
18774: LD_INT 0
18776: ST_TO_ADDR
// uc_side := 0 ;
18777: LD_ADDR_OWVAR 20
18781: PUSH
18782: LD_INT 0
18784: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18785: LD_ADDR_OWVAR 29
18789: PUSH
18790: LD_INT 12
18792: PUSH
18793: LD_INT 12
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: ST_TO_ADDR
// hc_agressivity := 20 ;
18800: LD_ADDR_OWVAR 35
18804: PUSH
18805: LD_INT 20
18807: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18808: LD_ADDR_OWVAR 28
18812: PUSH
18813: LD_INT 17
18815: ST_TO_ADDR
// hc_gallery :=  ;
18816: LD_ADDR_OWVAR 33
18820: PUSH
18821: LD_STRING 
18823: ST_TO_ADDR
// hc_name :=  ;
18824: LD_ADDR_OWVAR 26
18828: PUSH
18829: LD_STRING 
18831: ST_TO_ADDR
// un := CreateHuman ;
18832: LD_ADDR_VAR 0 2
18836: PUSH
18837: CALL_OW 44
18841: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18842: LD_VAR 0 2
18846: PPUSH
18847: LD_INT 1
18849: PPUSH
18850: CALL_OW 51
// tmp := tmp ^ un ;
18854: LD_ADDR_VAR 0 3
18858: PUSH
18859: LD_VAR 0 3
18863: PUSH
18864: LD_VAR 0 2
18868: ADD
18869: ST_TO_ADDR
// end ;
18870: GO 18766
18872: POP
18873: POP
// repeat wait ( 0 0$1 ) ;
18874: LD_INT 35
18876: PPUSH
18877: CALL_OW 67
// for un in tmp do
18881: LD_ADDR_VAR 0 2
18885: PUSH
18886: LD_VAR 0 3
18890: PUSH
18891: FOR_IN
18892: IFFALSE 18966
// begin if IsDead ( un ) then
18894: LD_VAR 0 2
18898: PPUSH
18899: CALL_OW 301
18903: IFFALSE 18923
// begin tmp := tmp diff un ;
18905: LD_ADDR_VAR 0 3
18909: PUSH
18910: LD_VAR 0 3
18914: PUSH
18915: LD_VAR 0 2
18919: DIFF
18920: ST_TO_ADDR
// continue ;
18921: GO 18891
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18923: LD_VAR 0 2
18927: PPUSH
18928: LD_INT 3
18930: PUSH
18931: LD_INT 22
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PPUSH
18945: CALL_OW 69
18949: PPUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 74
18959: PPUSH
18960: CALL_OW 115
// end ;
18964: GO 18891
18966: POP
18967: POP
// until not tmp ;
18968: LD_VAR 0 3
18972: NOT
18973: IFFALSE 18874
// end ;
18975: PPOPN 3
18977: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18978: LD_EXP 37
18982: PUSH
18983: LD_EXP 62
18987: AND
18988: IFFALSE 19042
18990: GO 18992
18992: DISABLE
// begin ToLua ( displayTroll(); ) ;
18993: LD_STRING displayTroll();
18995: PPUSH
18996: CALL_OW 559
// wait ( 3 3$00 ) ;
19000: LD_INT 6300
19002: PPUSH
19003: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19007: LD_STRING hideTroll();
19009: PPUSH
19010: CALL_OW 559
// wait ( 1 1$00 ) ;
19014: LD_INT 2100
19016: PPUSH
19017: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19021: LD_STRING displayTroll();
19023: PPUSH
19024: CALL_OW 559
// wait ( 1 1$00 ) ;
19028: LD_INT 2100
19030: PPUSH
19031: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19035: LD_STRING hideTroll();
19037: PPUSH
19038: CALL_OW 559
// end ;
19042: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19043: LD_EXP 37
19047: PUSH
19048: LD_EXP 63
19052: AND
19053: IFFALSE 19116
19055: GO 19057
19057: DISABLE
19058: LD_INT 0
19060: PPUSH
// begin p := 0 ;
19061: LD_ADDR_VAR 0 1
19065: PUSH
19066: LD_INT 0
19068: ST_TO_ADDR
// repeat game_speed := 1 ;
19069: LD_ADDR_OWVAR 65
19073: PUSH
19074: LD_INT 1
19076: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19077: LD_INT 35
19079: PPUSH
19080: CALL_OW 67
// p := p + 1 ;
19084: LD_ADDR_VAR 0 1
19088: PUSH
19089: LD_VAR 0 1
19093: PUSH
19094: LD_INT 1
19096: PLUS
19097: ST_TO_ADDR
// until p >= 60 ;
19098: LD_VAR 0 1
19102: PUSH
19103: LD_INT 60
19105: GREATEREQUAL
19106: IFFALSE 19069
// game_speed := 4 ;
19108: LD_ADDR_OWVAR 65
19112: PUSH
19113: LD_INT 4
19115: ST_TO_ADDR
// end ;
19116: PPOPN 1
19118: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19119: LD_EXP 37
19123: PUSH
19124: LD_EXP 64
19128: AND
19129: IFFALSE 19275
19131: GO 19133
19133: DISABLE
19134: LD_INT 0
19136: PPUSH
19137: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19138: LD_ADDR_VAR 0 1
19142: PUSH
19143: LD_INT 22
19145: PUSH
19146: LD_OWVAR 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 2
19157: PUSH
19158: LD_INT 30
19160: PUSH
19161: LD_INT 0
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 30
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PPUSH
19187: CALL_OW 69
19191: ST_TO_ADDR
// if not depot then
19192: LD_VAR 0 1
19196: NOT
19197: IFFALSE 19201
// exit ;
19199: GO 19275
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: LD_VAR 0 1
19210: PUSH
19211: LD_INT 1
19213: PPUSH
19214: LD_VAR 0 1
19218: PPUSH
19219: CALL_OW 12
19223: ARRAY
19224: PPUSH
19225: CALL_OW 274
19229: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19230: LD_VAR 0 2
19234: PPUSH
19235: LD_INT 1
19237: PPUSH
19238: LD_INT 0
19240: PPUSH
19241: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19245: LD_VAR 0 2
19249: PPUSH
19250: LD_INT 2
19252: PPUSH
19253: LD_INT 0
19255: PPUSH
19256: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19260: LD_VAR 0 2
19264: PPUSH
19265: LD_INT 3
19267: PPUSH
19268: LD_INT 0
19270: PPUSH
19271: CALL_OW 277
// end ;
19275: PPOPN 2
19277: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19278: LD_EXP 37
19282: PUSH
19283: LD_EXP 65
19287: AND
19288: IFFALSE 19385
19290: GO 19292
19292: DISABLE
19293: LD_INT 0
19295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19296: LD_ADDR_VAR 0 1
19300: PUSH
19301: LD_INT 22
19303: PUSH
19304: LD_OWVAR 2
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 21
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 3
19325: PUSH
19326: LD_INT 23
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 69
19349: ST_TO_ADDR
// if not tmp then
19350: LD_VAR 0 1
19354: NOT
19355: IFFALSE 19359
// exit ;
19357: GO 19385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19359: LD_VAR 0 1
19363: PUSH
19364: LD_INT 1
19366: PPUSH
19367: LD_VAR 0 1
19371: PPUSH
19372: CALL_OW 12
19376: ARRAY
19377: PPUSH
19378: LD_INT 200
19380: PPUSH
19381: CALL_OW 234
// end ;
19385: PPOPN 1
19387: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19388: LD_EXP 37
19392: PUSH
19393: LD_EXP 66
19397: AND
19398: IFFALSE 19477
19400: GO 19402
19402: DISABLE
19403: LD_INT 0
19405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19406: LD_ADDR_VAR 0 1
19410: PUSH
19411: LD_INT 22
19413: PUSH
19414: LD_OWVAR 2
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 21
19425: PUSH
19426: LD_INT 2
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PPUSH
19437: CALL_OW 69
19441: ST_TO_ADDR
// if not tmp then
19442: LD_VAR 0 1
19446: NOT
19447: IFFALSE 19451
// exit ;
19449: GO 19477
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19451: LD_VAR 0 1
19455: PUSH
19456: LD_INT 1
19458: PPUSH
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 12
19468: ARRAY
19469: PPUSH
19470: LD_INT 60
19472: PPUSH
19473: CALL_OW 234
// end ;
19477: PPOPN 1
19479: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19480: LD_EXP 37
19484: PUSH
19485: LD_EXP 67
19489: AND
19490: IFFALSE 19589
19492: GO 19494
19494: DISABLE
19495: LD_INT 0
19497: PPUSH
19498: PPUSH
// begin enable ;
19499: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19500: LD_ADDR_VAR 0 1
19504: PUSH
19505: LD_INT 22
19507: PUSH
19508: LD_OWVAR 2
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 61
19519: PUSH
19520: EMPTY
19521: LIST
19522: PUSH
19523: LD_INT 33
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 69
19542: ST_TO_ADDR
// if not tmp then
19543: LD_VAR 0 1
19547: NOT
19548: IFFALSE 19552
// exit ;
19550: GO 19589
// for i in tmp do
19552: LD_ADDR_VAR 0 2
19556: PUSH
19557: LD_VAR 0 1
19561: PUSH
19562: FOR_IN
19563: IFFALSE 19587
// if IsControledBy ( i ) then
19565: LD_VAR 0 2
19569: PPUSH
19570: CALL_OW 312
19574: IFFALSE 19585
// ComUnlink ( i ) ;
19576: LD_VAR 0 2
19580: PPUSH
19581: CALL_OW 136
19585: GO 19562
19587: POP
19588: POP
// end ;
19589: PPOPN 2
19591: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19592: LD_EXP 37
19596: PUSH
19597: LD_EXP 68
19601: AND
19602: IFFALSE 19742
19604: GO 19606
19606: DISABLE
19607: LD_INT 0
19609: PPUSH
19610: PPUSH
// begin ToLua ( displayPowell(); ) ;
19611: LD_STRING displayPowell();
19613: PPUSH
19614: CALL_OW 559
// uc_side := 0 ;
19618: LD_ADDR_OWVAR 20
19622: PUSH
19623: LD_INT 0
19625: ST_TO_ADDR
// uc_nation := 2 ;
19626: LD_ADDR_OWVAR 21
19630: PUSH
19631: LD_INT 2
19633: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19634: LD_ADDR_OWVAR 37
19638: PUSH
19639: LD_INT 14
19641: ST_TO_ADDR
// vc_engine := engine_siberite ;
19642: LD_ADDR_OWVAR 39
19646: PUSH
19647: LD_INT 3
19649: ST_TO_ADDR
// vc_control := control_apeman ;
19650: LD_ADDR_OWVAR 38
19654: PUSH
19655: LD_INT 5
19657: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19658: LD_ADDR_OWVAR 40
19662: PUSH
19663: LD_INT 29
19665: ST_TO_ADDR
// un := CreateVehicle ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: CALL_OW 45
19675: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19676: LD_VAR 0 2
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19688: LD_INT 35
19690: PPUSH
19691: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19695: LD_VAR 0 2
19699: PPUSH
19700: LD_INT 22
19702: PUSH
19703: LD_OWVAR 2
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PPUSH
19712: CALL_OW 69
19716: PPUSH
19717: LD_VAR 0 2
19721: PPUSH
19722: CALL_OW 74
19726: PPUSH
19727: CALL_OW 115
// until IsDead ( un ) ;
19731: LD_VAR 0 2
19735: PPUSH
19736: CALL_OW 301
19740: IFFALSE 19688
// end ;
19742: PPOPN 2
19744: END
// every 0 0$1 trigger StreamModeActive and sStu do
19745: LD_EXP 37
19749: PUSH
19750: LD_EXP 76
19754: AND
19755: IFFALSE 19771
19757: GO 19759
19759: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19760: LD_STRING displayStucuk();
19762: PPUSH
19763: CALL_OW 559
// ResetFog ;
19767: CALL_OW 335
// end ;
19771: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19772: LD_EXP 37
19776: PUSH
19777: LD_EXP 69
19781: AND
19782: IFFALSE 19923
19784: GO 19786
19786: DISABLE
19787: LD_INT 0
19789: PPUSH
19790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19791: LD_ADDR_VAR 0 2
19795: PUSH
19796: LD_INT 22
19798: PUSH
19799: LD_OWVAR 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 21
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PPUSH
19822: CALL_OW 69
19826: ST_TO_ADDR
// if not tmp then
19827: LD_VAR 0 2
19831: NOT
19832: IFFALSE 19836
// exit ;
19834: GO 19923
// un := tmp [ rand ( 1 , tmp ) ] ;
19836: LD_ADDR_VAR 0 1
19840: PUSH
19841: LD_VAR 0 2
19845: PUSH
19846: LD_INT 1
19848: PPUSH
19849: LD_VAR 0 2
19853: PPUSH
19854: CALL_OW 12
19858: ARRAY
19859: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19872: LD_VAR 0 1
19876: PPUSH
19877: LD_OWVAR 3
19881: PUSH
19882: LD_VAR 0 1
19886: DIFF
19887: PPUSH
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 74
19897: PPUSH
19898: CALL_OW 115
// wait ( 0 0$20 ) ;
19902: LD_INT 700
19904: PPUSH
19905: CALL_OW 67
// SetSide ( un , your_side ) ;
19909: LD_VAR 0 1
19913: PPUSH
19914: LD_OWVAR 2
19918: PPUSH
19919: CALL_OW 235
// end ;
19923: PPOPN 2
19925: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19926: LD_EXP 37
19930: PUSH
19931: LD_EXP 70
19935: AND
19936: IFFALSE 20042
19938: GO 19940
19940: DISABLE
19941: LD_INT 0
19943: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19944: LD_ADDR_VAR 0 1
19948: PUSH
19949: LD_INT 22
19951: PUSH
19952: LD_OWVAR 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: LD_INT 30
19966: PUSH
19967: LD_INT 0
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 30
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PPUSH
19993: CALL_OW 69
19997: ST_TO_ADDR
// if not depot then
19998: LD_VAR 0 1
20002: NOT
20003: IFFALSE 20007
// exit ;
20005: GO 20042
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20007: LD_VAR 0 1
20011: PUSH
20012: LD_INT 1
20014: ARRAY
20015: PPUSH
20016: CALL_OW 250
20020: PPUSH
20021: LD_VAR 0 1
20025: PUSH
20026: LD_INT 1
20028: ARRAY
20029: PPUSH
20030: CALL_OW 251
20034: PPUSH
20035: LD_INT 70
20037: PPUSH
20038: CALL_OW 495
// end ;
20042: PPOPN 1
20044: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20045: LD_EXP 37
20049: PUSH
20050: LD_EXP 71
20054: AND
20055: IFFALSE 20266
20057: GO 20059
20059: DISABLE
20060: LD_INT 0
20062: PPUSH
20063: PPUSH
20064: PPUSH
20065: PPUSH
20066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20067: LD_ADDR_VAR 0 5
20071: PUSH
20072: LD_INT 22
20074: PUSH
20075: LD_OWVAR 2
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 21
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PPUSH
20098: CALL_OW 69
20102: ST_TO_ADDR
// if not tmp then
20103: LD_VAR 0 5
20107: NOT
20108: IFFALSE 20112
// exit ;
20110: GO 20266
// for i in tmp do
20112: LD_ADDR_VAR 0 1
20116: PUSH
20117: LD_VAR 0 5
20121: PUSH
20122: FOR_IN
20123: IFFALSE 20264
// begin d := rand ( 0 , 5 ) ;
20125: LD_ADDR_VAR 0 4
20129: PUSH
20130: LD_INT 0
20132: PPUSH
20133: LD_INT 5
20135: PPUSH
20136: CALL_OW 12
20140: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20141: LD_ADDR_VAR 0 2
20145: PUSH
20146: LD_VAR 0 1
20150: PPUSH
20151: CALL_OW 250
20155: PPUSH
20156: LD_VAR 0 4
20160: PPUSH
20161: LD_INT 3
20163: PPUSH
20164: LD_INT 12
20166: PPUSH
20167: CALL_OW 12
20171: PPUSH
20172: CALL_OW 272
20176: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20177: LD_ADDR_VAR 0 3
20181: PUSH
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 251
20191: PPUSH
20192: LD_VAR 0 4
20196: PPUSH
20197: LD_INT 3
20199: PPUSH
20200: LD_INT 12
20202: PPUSH
20203: CALL_OW 12
20207: PPUSH
20208: CALL_OW 273
20212: ST_TO_ADDR
// if ValidHex ( x , y ) then
20213: LD_VAR 0 2
20217: PPUSH
20218: LD_VAR 0 3
20222: PPUSH
20223: CALL_OW 488
20227: IFFALSE 20262
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20229: LD_VAR 0 1
20233: PPUSH
20234: LD_VAR 0 2
20238: PPUSH
20239: LD_VAR 0 3
20243: PPUSH
20244: LD_INT 3
20246: PPUSH
20247: LD_INT 6
20249: PPUSH
20250: CALL_OW 12
20254: PPUSH
20255: LD_INT 1
20257: PPUSH
20258: CALL_OW 483
// end ;
20262: GO 20122
20264: POP
20265: POP
// end ;
20266: PPOPN 5
20268: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20269: LD_EXP 37
20273: PUSH
20274: LD_EXP 72
20278: AND
20279: IFFALSE 20373
20281: GO 20283
20283: DISABLE
20284: LD_INT 0
20286: PPUSH
20287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20288: LD_ADDR_VAR 0 2
20292: PUSH
20293: LD_INT 22
20295: PUSH
20296: LD_OWVAR 2
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 32
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 21
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: PPUSH
20330: CALL_OW 69
20334: ST_TO_ADDR
// if not tmp then
20335: LD_VAR 0 2
20339: NOT
20340: IFFALSE 20344
// exit ;
20342: GO 20373
// for i in tmp do
20344: LD_ADDR_VAR 0 1
20348: PUSH
20349: LD_VAR 0 2
20353: PUSH
20354: FOR_IN
20355: IFFALSE 20371
// SetFuel ( i , 0 ) ;
20357: LD_VAR 0 1
20361: PPUSH
20362: LD_INT 0
20364: PPUSH
20365: CALL_OW 240
20369: GO 20354
20371: POP
20372: POP
// end ;
20373: PPOPN 2
20375: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20376: LD_EXP 37
20380: PUSH
20381: LD_EXP 73
20385: AND
20386: IFFALSE 20452
20388: GO 20390
20390: DISABLE
20391: LD_INT 0
20393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20394: LD_ADDR_VAR 0 1
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_OWVAR 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 30
20413: PUSH
20414: LD_INT 29
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PPUSH
20425: CALL_OW 69
20429: ST_TO_ADDR
// if not tmp then
20430: LD_VAR 0 1
20434: NOT
20435: IFFALSE 20439
// exit ;
20437: GO 20452
// DestroyUnit ( tmp [ 1 ] ) ;
20439: LD_VAR 0 1
20443: PUSH
20444: LD_INT 1
20446: ARRAY
20447: PPUSH
20448: CALL_OW 65
// end ;
20452: PPOPN 1
20454: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20455: LD_EXP 37
20459: PUSH
20460: LD_EXP 75
20464: AND
20465: IFFALSE 20594
20467: GO 20469
20469: DISABLE
20470: LD_INT 0
20472: PPUSH
// begin uc_side := 0 ;
20473: LD_ADDR_OWVAR 20
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// uc_nation := nation_arabian ;
20481: LD_ADDR_OWVAR 21
20485: PUSH
20486: LD_INT 2
20488: ST_TO_ADDR
// hc_gallery :=  ;
20489: LD_ADDR_OWVAR 33
20493: PUSH
20494: LD_STRING 
20496: ST_TO_ADDR
// hc_name :=  ;
20497: LD_ADDR_OWVAR 26
20501: PUSH
20502: LD_STRING 
20504: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20505: LD_INT 1
20507: PPUSH
20508: LD_INT 11
20510: PPUSH
20511: LD_INT 10
20513: PPUSH
20514: CALL_OW 380
// un := CreateHuman ;
20518: LD_ADDR_VAR 0 1
20522: PUSH
20523: CALL_OW 44
20527: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20528: LD_VAR 0 1
20532: PPUSH
20533: LD_INT 1
20535: PPUSH
20536: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20540: LD_INT 35
20542: PPUSH
20543: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20547: LD_VAR 0 1
20551: PPUSH
20552: LD_INT 22
20554: PUSH
20555: LD_OWVAR 2
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PPUSH
20564: CALL_OW 69
20568: PPUSH
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 74
20578: PPUSH
20579: CALL_OW 115
// until IsDead ( un ) ;
20583: LD_VAR 0 1
20587: PPUSH
20588: CALL_OW 301
20592: IFFALSE 20540
// end ;
20594: PPOPN 1
20596: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20597: LD_EXP 37
20601: PUSH
20602: LD_EXP 77
20606: AND
20607: IFFALSE 20619
20609: GO 20611
20611: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20612: LD_STRING earthquake(getX(game), 0, 32)
20614: PPUSH
20615: CALL_OW 559
20619: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20620: LD_EXP 37
20624: PUSH
20625: LD_EXP 78
20629: AND
20630: IFFALSE 20721
20632: GO 20634
20634: DISABLE
20635: LD_INT 0
20637: PPUSH
// begin enable ;
20638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20639: LD_ADDR_VAR 0 1
20643: PUSH
20644: LD_INT 22
20646: PUSH
20647: LD_OWVAR 2
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 21
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 33
20668: PUSH
20669: LD_INT 3
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 69
20685: ST_TO_ADDR
// if not tmp then
20686: LD_VAR 0 1
20690: NOT
20691: IFFALSE 20695
// exit ;
20693: GO 20721
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20695: LD_VAR 0 1
20699: PUSH
20700: LD_INT 1
20702: PPUSH
20703: LD_VAR 0 1
20707: PPUSH
20708: CALL_OW 12
20712: ARRAY
20713: PPUSH
20714: LD_INT 1
20716: PPUSH
20717: CALL_OW 234
// end ;
20721: PPOPN 1
20723: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20724: LD_EXP 37
20728: PUSH
20729: LD_EXP 79
20733: AND
20734: IFFALSE 20875
20736: GO 20738
20738: DISABLE
20739: LD_INT 0
20741: PPUSH
20742: PPUSH
20743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: LD_INT 22
20751: PUSH
20752: LD_OWVAR 2
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 25
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PPUSH
20775: CALL_OW 69
20779: ST_TO_ADDR
// if not tmp then
20780: LD_VAR 0 3
20784: NOT
20785: IFFALSE 20789
// exit ;
20787: GO 20875
// un := tmp [ rand ( 1 , tmp ) ] ;
20789: LD_ADDR_VAR 0 2
20793: PUSH
20794: LD_VAR 0 3
20798: PUSH
20799: LD_INT 1
20801: PPUSH
20802: LD_VAR 0 3
20806: PPUSH
20807: CALL_OW 12
20811: ARRAY
20812: ST_TO_ADDR
// if Crawls ( un ) then
20813: LD_VAR 0 2
20817: PPUSH
20818: CALL_OW 318
20822: IFFALSE 20833
// ComWalk ( un ) ;
20824: LD_VAR 0 2
20828: PPUSH
20829: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20833: LD_VAR 0 2
20837: PPUSH
20838: LD_INT 9
20840: PPUSH
20841: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20845: LD_INT 28
20847: PPUSH
20848: LD_OWVAR 2
20852: PPUSH
20853: LD_INT 2
20855: PPUSH
20856: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20860: LD_INT 29
20862: PPUSH
20863: LD_OWVAR 2
20867: PPUSH
20868: LD_INT 2
20870: PPUSH
20871: CALL_OW 322
// end ;
20875: PPOPN 3
20877: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20878: LD_EXP 37
20882: PUSH
20883: LD_EXP 80
20887: AND
20888: IFFALSE 20999
20890: GO 20892
20892: DISABLE
20893: LD_INT 0
20895: PPUSH
20896: PPUSH
20897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20898: LD_ADDR_VAR 0 3
20902: PUSH
20903: LD_INT 22
20905: PUSH
20906: LD_OWVAR 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 25
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PPUSH
20929: CALL_OW 69
20933: ST_TO_ADDR
// if not tmp then
20934: LD_VAR 0 3
20938: NOT
20939: IFFALSE 20943
// exit ;
20941: GO 20999
// un := tmp [ rand ( 1 , tmp ) ] ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_VAR 0 3
20952: PUSH
20953: LD_INT 1
20955: PPUSH
20956: LD_VAR 0 3
20960: PPUSH
20961: CALL_OW 12
20965: ARRAY
20966: ST_TO_ADDR
// if Crawls ( un ) then
20967: LD_VAR 0 2
20971: PPUSH
20972: CALL_OW 318
20976: IFFALSE 20987
// ComWalk ( un ) ;
20978: LD_VAR 0 2
20982: PPUSH
20983: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20987: LD_VAR 0 2
20991: PPUSH
20992: LD_INT 8
20994: PPUSH
20995: CALL_OW 336
// end ;
20999: PPOPN 3
21001: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21002: LD_EXP 37
21006: PUSH
21007: LD_EXP 81
21011: AND
21012: IFFALSE 21156
21014: GO 21016
21016: DISABLE
21017: LD_INT 0
21019: PPUSH
21020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21021: LD_ADDR_VAR 0 2
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_OWVAR 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 21
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 34
21053: PUSH
21054: LD_INT 12
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 34
21063: PUSH
21064: LD_INT 51
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 34
21073: PUSH
21074: LD_INT 32
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: PPUSH
21092: CALL_OW 69
21096: ST_TO_ADDR
// if not tmp then
21097: LD_VAR 0 2
21101: NOT
21102: IFFALSE 21106
// exit ;
21104: GO 21156
// for i in tmp do
21106: LD_ADDR_VAR 0 1
21110: PUSH
21111: LD_VAR 0 2
21115: PUSH
21116: FOR_IN
21117: IFFALSE 21154
// if GetCargo ( i , mat_artifact ) = 0 then
21119: LD_VAR 0 1
21123: PPUSH
21124: LD_INT 4
21126: PPUSH
21127: CALL_OW 289
21131: PUSH
21132: LD_INT 0
21134: EQUAL
21135: IFFALSE 21152
// SetCargo ( i , mat_siberit , 100 ) ;
21137: LD_VAR 0 1
21141: PPUSH
21142: LD_INT 3
21144: PPUSH
21145: LD_INT 100
21147: PPUSH
21148: CALL_OW 290
21152: GO 21116
21154: POP
21155: POP
// end ;
21156: PPOPN 2
21158: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21159: LD_EXP 37
21163: PUSH
21164: LD_EXP 82
21168: AND
21169: IFFALSE 21352
21171: GO 21173
21173: DISABLE
21174: LD_INT 0
21176: PPUSH
21177: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21178: LD_ADDR_VAR 0 2
21182: PUSH
21183: LD_INT 22
21185: PUSH
21186: LD_OWVAR 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PPUSH
21195: CALL_OW 69
21199: ST_TO_ADDR
// if not tmp then
21200: LD_VAR 0 2
21204: NOT
21205: IFFALSE 21209
// exit ;
21207: GO 21352
// for i := 1 to 2 do
21209: LD_ADDR_VAR 0 1
21213: PUSH
21214: DOUBLE
21215: LD_INT 1
21217: DEC
21218: ST_TO_ADDR
21219: LD_INT 2
21221: PUSH
21222: FOR_TO
21223: IFFALSE 21350
// begin uc_side := your_side ;
21225: LD_ADDR_OWVAR 20
21229: PUSH
21230: LD_OWVAR 2
21234: ST_TO_ADDR
// uc_nation := nation_american ;
21235: LD_ADDR_OWVAR 21
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
// vc_chassis := us_morphling ;
21243: LD_ADDR_OWVAR 37
21247: PUSH
21248: LD_INT 5
21250: ST_TO_ADDR
// vc_engine := engine_siberite ;
21251: LD_ADDR_OWVAR 39
21255: PUSH
21256: LD_INT 3
21258: ST_TO_ADDR
// vc_control := control_computer ;
21259: LD_ADDR_OWVAR 38
21263: PUSH
21264: LD_INT 3
21266: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21267: LD_ADDR_OWVAR 40
21271: PUSH
21272: LD_INT 10
21274: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21275: LD_VAR 0 2
21279: PUSH
21280: LD_INT 1
21282: ARRAY
21283: PPUSH
21284: CALL_OW 310
21288: NOT
21289: IFFALSE 21336
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21291: CALL_OW 45
21295: PPUSH
21296: LD_VAR 0 2
21300: PUSH
21301: LD_INT 1
21303: ARRAY
21304: PPUSH
21305: CALL_OW 250
21309: PPUSH
21310: LD_VAR 0 2
21314: PUSH
21315: LD_INT 1
21317: ARRAY
21318: PPUSH
21319: CALL_OW 251
21323: PPUSH
21324: LD_INT 12
21326: PPUSH
21327: LD_INT 1
21329: PPUSH
21330: CALL_OW 50
21334: GO 21348
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21336: CALL_OW 45
21340: PPUSH
21341: LD_INT 1
21343: PPUSH
21344: CALL_OW 51
// end ;
21348: GO 21222
21350: POP
21351: POP
// end ;
21352: PPOPN 2
21354: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21355: LD_EXP 37
21359: PUSH
21360: LD_EXP 83
21364: AND
21365: IFFALSE 21587
21367: GO 21369
21369: DISABLE
21370: LD_INT 0
21372: PPUSH
21373: PPUSH
21374: PPUSH
21375: PPUSH
21376: PPUSH
21377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21378: LD_ADDR_VAR 0 6
21382: PUSH
21383: LD_INT 22
21385: PUSH
21386: LD_OWVAR 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 21
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 3
21407: PUSH
21408: LD_INT 23
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: PPUSH
21427: CALL_OW 69
21431: ST_TO_ADDR
// if not tmp then
21432: LD_VAR 0 6
21436: NOT
21437: IFFALSE 21441
// exit ;
21439: GO 21587
// s1 := rand ( 1 , 4 ) ;
21441: LD_ADDR_VAR 0 2
21445: PUSH
21446: LD_INT 1
21448: PPUSH
21449: LD_INT 4
21451: PPUSH
21452: CALL_OW 12
21456: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21457: LD_ADDR_VAR 0 4
21461: PUSH
21462: LD_VAR 0 6
21466: PUSH
21467: LD_INT 1
21469: ARRAY
21470: PPUSH
21471: LD_VAR 0 2
21475: PPUSH
21476: CALL_OW 259
21480: ST_TO_ADDR
// if s1 = 1 then
21481: LD_VAR 0 2
21485: PUSH
21486: LD_INT 1
21488: EQUAL
21489: IFFALSE 21509
// s2 := rand ( 2 , 4 ) else
21491: LD_ADDR_VAR 0 3
21495: PUSH
21496: LD_INT 2
21498: PPUSH
21499: LD_INT 4
21501: PPUSH
21502: CALL_OW 12
21506: ST_TO_ADDR
21507: GO 21517
// s2 := 1 ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: LD_INT 1
21516: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21517: LD_ADDR_VAR 0 5
21521: PUSH
21522: LD_VAR 0 6
21526: PUSH
21527: LD_INT 1
21529: ARRAY
21530: PPUSH
21531: LD_VAR 0 3
21535: PPUSH
21536: CALL_OW 259
21540: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21541: LD_VAR 0 6
21545: PUSH
21546: LD_INT 1
21548: ARRAY
21549: PPUSH
21550: LD_VAR 0 2
21554: PPUSH
21555: LD_VAR 0 5
21559: PPUSH
21560: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21564: LD_VAR 0 6
21568: PUSH
21569: LD_INT 1
21571: ARRAY
21572: PPUSH
21573: LD_VAR 0 3
21577: PPUSH
21578: LD_VAR 0 4
21582: PPUSH
21583: CALL_OW 237
// end ;
21587: PPOPN 6
21589: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21590: LD_EXP 37
21594: PUSH
21595: LD_EXP 84
21599: AND
21600: IFFALSE 21679
21602: GO 21604
21604: DISABLE
21605: LD_INT 0
21607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21608: LD_ADDR_VAR 0 1
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_OWVAR 2
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 30
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PPUSH
21639: CALL_OW 69
21643: ST_TO_ADDR
// if not tmp then
21644: LD_VAR 0 1
21648: NOT
21649: IFFALSE 21653
// exit ;
21651: GO 21679
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21653: LD_VAR 0 1
21657: PUSH
21658: LD_INT 1
21660: PPUSH
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL_OW 12
21670: ARRAY
21671: PPUSH
21672: LD_INT 1
21674: PPUSH
21675: CALL_OW 234
// end ;
21679: PPOPN 1
21681: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21682: LD_EXP 37
21686: PUSH
21687: LD_EXP 85
21691: AND
21692: IFFALSE 21804
21694: GO 21696
21696: DISABLE
21697: LD_INT 0
21699: PPUSH
21700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21701: LD_ADDR_VAR 0 2
21705: PUSH
21706: LD_INT 22
21708: PUSH
21709: LD_OWVAR 2
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: LD_INT 30
21723: PUSH
21724: LD_INT 27
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 30
21733: PUSH
21734: LD_INT 26
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 30
21743: PUSH
21744: LD_INT 28
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PPUSH
21761: CALL_OW 69
21765: ST_TO_ADDR
// if not tmp then
21766: LD_VAR 0 2
21770: NOT
21771: IFFALSE 21775
// exit ;
21773: GO 21804
// for i in tmp do
21775: LD_ADDR_VAR 0 1
21779: PUSH
21780: LD_VAR 0 2
21784: PUSH
21785: FOR_IN
21786: IFFALSE 21802
// SetLives ( i , 1 ) ;
21788: LD_VAR 0 1
21792: PPUSH
21793: LD_INT 1
21795: PPUSH
21796: CALL_OW 234
21800: GO 21785
21802: POP
21803: POP
// end ;
21804: PPOPN 2
21806: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21807: LD_EXP 37
21811: PUSH
21812: LD_EXP 86
21816: AND
21817: IFFALSE 22091
21819: GO 21821
21821: DISABLE
21822: LD_INT 0
21824: PPUSH
21825: PPUSH
21826: PPUSH
// begin i := rand ( 1 , 7 ) ;
21827: LD_ADDR_VAR 0 1
21831: PUSH
21832: LD_INT 1
21834: PPUSH
21835: LD_INT 7
21837: PPUSH
21838: CALL_OW 12
21842: ST_TO_ADDR
// case i of 1 :
21843: LD_VAR 0 1
21847: PUSH
21848: LD_INT 1
21850: DOUBLE
21851: EQUAL
21852: IFTRUE 21856
21854: GO 21866
21856: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21857: LD_STRING earthquake(getX(game), 0, 32)
21859: PPUSH
21860: CALL_OW 559
21864: GO 22091
21866: LD_INT 2
21868: DOUBLE
21869: EQUAL
21870: IFTRUE 21874
21872: GO 21888
21874: POP
// begin ToLua ( displayStucuk(); ) ;
21875: LD_STRING displayStucuk();
21877: PPUSH
21878: CALL_OW 559
// ResetFog ;
21882: CALL_OW 335
// end ; 3 :
21886: GO 22091
21888: LD_INT 3
21890: DOUBLE
21891: EQUAL
21892: IFTRUE 21896
21894: GO 22000
21896: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21897: LD_ADDR_VAR 0 2
21901: PUSH
21902: LD_INT 22
21904: PUSH
21905: LD_OWVAR 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 25
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PPUSH
21928: CALL_OW 69
21932: ST_TO_ADDR
// if not tmp then
21933: LD_VAR 0 2
21937: NOT
21938: IFFALSE 21942
// exit ;
21940: GO 22091
// un := tmp [ rand ( 1 , tmp ) ] ;
21942: LD_ADDR_VAR 0 3
21946: PUSH
21947: LD_VAR 0 2
21951: PUSH
21952: LD_INT 1
21954: PPUSH
21955: LD_VAR 0 2
21959: PPUSH
21960: CALL_OW 12
21964: ARRAY
21965: ST_TO_ADDR
// if Crawls ( un ) then
21966: LD_VAR 0 3
21970: PPUSH
21971: CALL_OW 318
21975: IFFALSE 21986
// ComWalk ( un ) ;
21977: LD_VAR 0 3
21981: PPUSH
21982: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21986: LD_VAR 0 3
21990: PPUSH
21991: LD_INT 8
21993: PPUSH
21994: CALL_OW 336
// end ; 4 :
21998: GO 22091
22000: LD_INT 4
22002: DOUBLE
22003: EQUAL
22004: IFTRUE 22008
22006: GO 22069
22008: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22009: LD_ADDR_VAR 0 2
22013: PUSH
22014: LD_INT 22
22016: PUSH
22017: LD_OWVAR 2
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 30
22028: PUSH
22029: LD_INT 29
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PPUSH
22040: CALL_OW 69
22044: ST_TO_ADDR
// if not tmp then
22045: LD_VAR 0 2
22049: NOT
22050: IFFALSE 22054
// exit ;
22052: GO 22091
// DestroyUnit ( tmp [ 1 ] ) ;
22054: LD_VAR 0 2
22058: PUSH
22059: LD_INT 1
22061: ARRAY
22062: PPUSH
22063: CALL_OW 65
// end ; 5 .. 7 :
22067: GO 22091
22069: LD_INT 5
22071: DOUBLE
22072: GREATEREQUAL
22073: IFFALSE 22081
22075: LD_INT 7
22077: DOUBLE
22078: LESSEQUAL
22079: IFTRUE 22083
22081: GO 22090
22083: POP
// StreamSibBomb ; end ;
22084: CALL 18341 0 0
22088: GO 22091
22090: POP
// end ;
22091: PPOPN 3
22093: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22094: LD_EXP 37
22098: PUSH
22099: LD_EXP 87
22103: AND
22104: IFFALSE 22260
22106: GO 22108
22108: DISABLE
22109: LD_INT 0
22111: PPUSH
22112: PPUSH
22113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22114: LD_ADDR_VAR 0 2
22118: PUSH
22119: LD_INT 81
22121: PUSH
22122: LD_OWVAR 2
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: LD_INT 21
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 21
22146: PUSH
22147: LD_INT 2
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: LIST
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PPUSH
22163: CALL_OW 69
22167: ST_TO_ADDR
// if not tmp then
22168: LD_VAR 0 2
22172: NOT
22173: IFFALSE 22177
// exit ;
22175: GO 22260
// p := 0 ;
22177: LD_ADDR_VAR 0 3
22181: PUSH
22182: LD_INT 0
22184: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22185: LD_INT 35
22187: PPUSH
22188: CALL_OW 67
// p := p + 1 ;
22192: LD_ADDR_VAR 0 3
22196: PUSH
22197: LD_VAR 0 3
22201: PUSH
22202: LD_INT 1
22204: PLUS
22205: ST_TO_ADDR
// for i in tmp do
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: LD_VAR 0 2
22215: PUSH
22216: FOR_IN
22217: IFFALSE 22248
// if GetLives ( i ) < 1000 then
22219: LD_VAR 0 1
22223: PPUSH
22224: CALL_OW 256
22228: PUSH
22229: LD_INT 1000
22231: LESS
22232: IFFALSE 22246
// SetLives ( i , 1000 ) ;
22234: LD_VAR 0 1
22238: PPUSH
22239: LD_INT 1000
22241: PPUSH
22242: CALL_OW 234
22246: GO 22216
22248: POP
22249: POP
// until p > 20 ;
22250: LD_VAR 0 3
22254: PUSH
22255: LD_INT 20
22257: GREATER
22258: IFFALSE 22185
// end ;
22260: PPOPN 3
22262: END
// every 0 0$1 trigger StreamModeActive and sTime do
22263: LD_EXP 37
22267: PUSH
22268: LD_EXP 88
22272: AND
22273: IFFALSE 22308
22275: GO 22277
22277: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22278: LD_INT 28
22280: PPUSH
22281: LD_OWVAR 2
22285: PPUSH
22286: LD_INT 2
22288: PPUSH
22289: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22293: LD_INT 30
22295: PPUSH
22296: LD_OWVAR 2
22300: PPUSH
22301: LD_INT 2
22303: PPUSH
22304: CALL_OW 322
// end ;
22308: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22309: LD_EXP 37
22313: PUSH
22314: LD_EXP 89
22318: AND
22319: IFFALSE 22440
22321: GO 22323
22323: DISABLE
22324: LD_INT 0
22326: PPUSH
22327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22328: LD_ADDR_VAR 0 2
22332: PUSH
22333: LD_INT 22
22335: PUSH
22336: LD_OWVAR 2
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 21
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 3
22357: PUSH
22358: LD_INT 23
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: LIST
22376: PPUSH
22377: CALL_OW 69
22381: ST_TO_ADDR
// if not tmp then
22382: LD_VAR 0 2
22386: NOT
22387: IFFALSE 22391
// exit ;
22389: GO 22440
// for i in tmp do
22391: LD_ADDR_VAR 0 1
22395: PUSH
22396: LD_VAR 0 2
22400: PUSH
22401: FOR_IN
22402: IFFALSE 22438
// begin if Crawls ( i ) then
22404: LD_VAR 0 1
22408: PPUSH
22409: CALL_OW 318
22413: IFFALSE 22424
// ComWalk ( i ) ;
22415: LD_VAR 0 1
22419: PPUSH
22420: CALL_OW 138
// SetClass ( i , 2 ) ;
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_INT 2
22431: PPUSH
22432: CALL_OW 336
// end ;
22436: GO 22401
22438: POP
22439: POP
// end ;
22440: PPOPN 2
22442: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22443: LD_EXP 37
22447: PUSH
22448: LD_EXP 90
22452: AND
22453: IFFALSE 22734
22455: GO 22457
22457: DISABLE
22458: LD_INT 0
22460: PPUSH
22461: PPUSH
22462: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22463: LD_OWVAR 2
22467: PPUSH
22468: LD_INT 9
22470: PPUSH
22471: LD_INT 1
22473: PPUSH
22474: LD_INT 1
22476: PPUSH
22477: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22481: LD_INT 9
22483: PPUSH
22484: LD_OWVAR 2
22488: PPUSH
22489: CALL_OW 343
// uc_side := 9 ;
22493: LD_ADDR_OWVAR 20
22497: PUSH
22498: LD_INT 9
22500: ST_TO_ADDR
// uc_nation := 2 ;
22501: LD_ADDR_OWVAR 21
22505: PUSH
22506: LD_INT 2
22508: ST_TO_ADDR
// hc_name := Dark Warrior ;
22509: LD_ADDR_OWVAR 26
22513: PUSH
22514: LD_STRING Dark Warrior
22516: ST_TO_ADDR
// hc_gallery :=  ;
22517: LD_ADDR_OWVAR 33
22521: PUSH
22522: LD_STRING 
22524: ST_TO_ADDR
// hc_noskilllimit := true ;
22525: LD_ADDR_OWVAR 76
22529: PUSH
22530: LD_INT 1
22532: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22533: LD_ADDR_OWVAR 31
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 30
22543: PUSH
22544: LD_INT 30
22546: PUSH
22547: LD_INT 30
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: ST_TO_ADDR
// un := CreateHuman ;
22556: LD_ADDR_VAR 0 3
22560: PUSH
22561: CALL_OW 44
22565: ST_TO_ADDR
// hc_noskilllimit := false ;
22566: LD_ADDR_OWVAR 76
22570: PUSH
22571: LD_INT 0
22573: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22574: LD_VAR 0 3
22578: PPUSH
22579: LD_INT 1
22581: PPUSH
22582: CALL_OW 51
// p := 0 ;
22586: LD_ADDR_VAR 0 2
22590: PUSH
22591: LD_INT 0
22593: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22594: LD_INT 35
22596: PPUSH
22597: CALL_OW 67
// p := p + 1 ;
22601: LD_ADDR_VAR 0 2
22605: PUSH
22606: LD_VAR 0 2
22610: PUSH
22611: LD_INT 1
22613: PLUS
22614: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22615: LD_VAR 0 3
22619: PPUSH
22620: CALL_OW 256
22624: PUSH
22625: LD_INT 1000
22627: LESS
22628: IFFALSE 22642
// SetLives ( un , 1000 ) ;
22630: LD_VAR 0 3
22634: PPUSH
22635: LD_INT 1000
22637: PPUSH
22638: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22642: LD_VAR 0 3
22646: PPUSH
22647: LD_INT 81
22649: PUSH
22650: LD_OWVAR 2
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 91
22661: PUSH
22662: LD_VAR 0 3
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: PPUSH
22684: LD_VAR 0 3
22688: PPUSH
22689: CALL_OW 74
22693: PPUSH
22694: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22698: LD_VAR 0 2
22702: PUSH
22703: LD_INT 60
22705: GREATER
22706: PUSH
22707: LD_VAR 0 3
22711: PPUSH
22712: CALL_OW 301
22716: OR
22717: IFFALSE 22594
// if un then
22719: LD_VAR 0 3
22723: IFFALSE 22734
// RemoveUnit ( un ) ;
22725: LD_VAR 0 3
22729: PPUSH
22730: CALL_OW 64
// end ;
22734: PPOPN 3
22736: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22737: LD_INT 0
22739: PPUSH
// case cmd of 301 :
22740: LD_VAR 0 1
22744: PUSH
22745: LD_INT 301
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22785
22753: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22754: LD_VAR 0 6
22758: PPUSH
22759: LD_VAR 0 7
22763: PPUSH
22764: LD_VAR 0 8
22768: PPUSH
22769: LD_VAR 0 4
22773: PPUSH
22774: LD_VAR 0 5
22778: PPUSH
22779: CALL 23986 0 5
22783: GO 22906
22785: LD_INT 302
22787: DOUBLE
22788: EQUAL
22789: IFTRUE 22793
22791: GO 22830
22793: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22794: LD_VAR 0 6
22798: PPUSH
22799: LD_VAR 0 7
22803: PPUSH
22804: LD_VAR 0 8
22808: PPUSH
22809: LD_VAR 0 9
22813: PPUSH
22814: LD_VAR 0 4
22818: PPUSH
22819: LD_VAR 0 5
22823: PPUSH
22824: CALL 24077 0 6
22828: GO 22906
22830: LD_INT 303
22832: DOUBLE
22833: EQUAL
22834: IFTRUE 22838
22836: GO 22875
22838: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22839: LD_VAR 0 6
22843: PPUSH
22844: LD_VAR 0 7
22848: PPUSH
22849: LD_VAR 0 8
22853: PPUSH
22854: LD_VAR 0 9
22858: PPUSH
22859: LD_VAR 0 4
22863: PPUSH
22864: LD_VAR 0 5
22868: PPUSH
22869: CALL 22911 0 6
22873: GO 22906
22875: LD_INT 304
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22905
22883: POP
// hHackTeleport ( unit , x , y ) ; end ;
22884: LD_VAR 0 2
22888: PPUSH
22889: LD_VAR 0 4
22893: PPUSH
22894: LD_VAR 0 5
22898: PPUSH
22899: CALL 24670 0 3
22903: GO 22906
22905: POP
// end ;
22906: LD_VAR 0 12
22910: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22911: LD_INT 0
22913: PPUSH
22914: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22915: LD_VAR 0 1
22919: PUSH
22920: LD_INT 1
22922: LESS
22923: PUSH
22924: LD_VAR 0 1
22928: PUSH
22929: LD_INT 3
22931: GREATER
22932: OR
22933: PUSH
22934: LD_VAR 0 5
22938: PPUSH
22939: LD_VAR 0 6
22943: PPUSH
22944: CALL_OW 428
22948: OR
22949: IFFALSE 22953
// exit ;
22951: GO 23673
// uc_side := your_side ;
22953: LD_ADDR_OWVAR 20
22957: PUSH
22958: LD_OWVAR 2
22962: ST_TO_ADDR
// uc_nation := nation ;
22963: LD_ADDR_OWVAR 21
22967: PUSH
22968: LD_VAR 0 1
22972: ST_TO_ADDR
// bc_level = 1 ;
22973: LD_ADDR_OWVAR 43
22977: PUSH
22978: LD_INT 1
22980: ST_TO_ADDR
// case btype of 1 :
22981: LD_VAR 0 2
22985: PUSH
22986: LD_INT 1
22988: DOUBLE
22989: EQUAL
22990: IFTRUE 22994
22992: GO 23005
22994: POP
// bc_type := b_depot ; 2 :
22995: LD_ADDR_OWVAR 42
22999: PUSH
23000: LD_INT 0
23002: ST_TO_ADDR
23003: GO 23617
23005: LD_INT 2
23007: DOUBLE
23008: EQUAL
23009: IFTRUE 23013
23011: GO 23024
23013: POP
// bc_type := b_warehouse ; 3 :
23014: LD_ADDR_OWVAR 42
23018: PUSH
23019: LD_INT 1
23021: ST_TO_ADDR
23022: GO 23617
23024: LD_INT 3
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23043
23032: POP
// bc_type := b_lab ; 4 .. 9 :
23033: LD_ADDR_OWVAR 42
23037: PUSH
23038: LD_INT 6
23040: ST_TO_ADDR
23041: GO 23617
23043: LD_INT 4
23045: DOUBLE
23046: GREATEREQUAL
23047: IFFALSE 23055
23049: LD_INT 9
23051: DOUBLE
23052: LESSEQUAL
23053: IFTRUE 23057
23055: GO 23109
23057: POP
// begin bc_type := b_lab_half ;
23058: LD_ADDR_OWVAR 42
23062: PUSH
23063: LD_INT 7
23065: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23066: LD_ADDR_OWVAR 44
23070: PUSH
23071: LD_INT 10
23073: PUSH
23074: LD_INT 11
23076: PUSH
23077: LD_INT 12
23079: PUSH
23080: LD_INT 15
23082: PUSH
23083: LD_INT 14
23085: PUSH
23086: LD_INT 13
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: LD_VAR 0 2
23101: PUSH
23102: LD_INT 3
23104: MINUS
23105: ARRAY
23106: ST_TO_ADDR
// end ; 10 .. 13 :
23107: GO 23617
23109: LD_INT 10
23111: DOUBLE
23112: GREATEREQUAL
23113: IFFALSE 23121
23115: LD_INT 13
23117: DOUBLE
23118: LESSEQUAL
23119: IFTRUE 23123
23121: GO 23200
23123: POP
// begin bc_type := b_lab_full ;
23124: LD_ADDR_OWVAR 42
23128: PUSH
23129: LD_INT 8
23131: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23132: LD_ADDR_OWVAR 44
23136: PUSH
23137: LD_INT 10
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: LD_INT 14
23145: PUSH
23146: LD_INT 13
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: LD_VAR 0 2
23159: PUSH
23160: LD_INT 9
23162: MINUS
23163: ARRAY
23164: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23165: LD_ADDR_OWVAR 45
23169: PUSH
23170: LD_INT 11
23172: PUSH
23173: LD_INT 15
23175: PUSH
23176: LD_INT 12
23178: PUSH
23179: LD_INT 15
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: PUSH
23188: LD_VAR 0 2
23192: PUSH
23193: LD_INT 9
23195: MINUS
23196: ARRAY
23197: ST_TO_ADDR
// end ; 14 :
23198: GO 23617
23200: LD_INT 14
23202: DOUBLE
23203: EQUAL
23204: IFTRUE 23208
23206: GO 23219
23208: POP
// bc_type := b_workshop ; 15 :
23209: LD_ADDR_OWVAR 42
23213: PUSH
23214: LD_INT 2
23216: ST_TO_ADDR
23217: GO 23617
23219: LD_INT 15
23221: DOUBLE
23222: EQUAL
23223: IFTRUE 23227
23225: GO 23238
23227: POP
// bc_type := b_factory ; 16 :
23228: LD_ADDR_OWVAR 42
23232: PUSH
23233: LD_INT 3
23235: ST_TO_ADDR
23236: GO 23617
23238: LD_INT 16
23240: DOUBLE
23241: EQUAL
23242: IFTRUE 23246
23244: GO 23257
23246: POP
// bc_type := b_ext_gun ; 17 :
23247: LD_ADDR_OWVAR 42
23251: PUSH
23252: LD_INT 17
23254: ST_TO_ADDR
23255: GO 23617
23257: LD_INT 17
23259: DOUBLE
23260: EQUAL
23261: IFTRUE 23265
23263: GO 23293
23265: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23266: LD_ADDR_OWVAR 42
23270: PUSH
23271: LD_INT 19
23273: PUSH
23274: LD_INT 23
23276: PUSH
23277: LD_INT 19
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: PUSH
23285: LD_VAR 0 1
23289: ARRAY
23290: ST_TO_ADDR
23291: GO 23617
23293: LD_INT 18
23295: DOUBLE
23296: EQUAL
23297: IFTRUE 23301
23299: GO 23312
23301: POP
// bc_type := b_ext_radar ; 19 :
23302: LD_ADDR_OWVAR 42
23306: PUSH
23307: LD_INT 20
23309: ST_TO_ADDR
23310: GO 23617
23312: LD_INT 19
23314: DOUBLE
23315: EQUAL
23316: IFTRUE 23320
23318: GO 23331
23320: POP
// bc_type := b_ext_radio ; 20 :
23321: LD_ADDR_OWVAR 42
23325: PUSH
23326: LD_INT 22
23328: ST_TO_ADDR
23329: GO 23617
23331: LD_INT 20
23333: DOUBLE
23334: EQUAL
23335: IFTRUE 23339
23337: GO 23350
23339: POP
// bc_type := b_ext_siberium ; 21 :
23340: LD_ADDR_OWVAR 42
23344: PUSH
23345: LD_INT 21
23347: ST_TO_ADDR
23348: GO 23617
23350: LD_INT 21
23352: DOUBLE
23353: EQUAL
23354: IFTRUE 23358
23356: GO 23369
23358: POP
// bc_type := b_ext_computer ; 22 :
23359: LD_ADDR_OWVAR 42
23363: PUSH
23364: LD_INT 24
23366: ST_TO_ADDR
23367: GO 23617
23369: LD_INT 22
23371: DOUBLE
23372: EQUAL
23373: IFTRUE 23377
23375: GO 23388
23377: POP
// bc_type := b_ext_track ; 23 :
23378: LD_ADDR_OWVAR 42
23382: PUSH
23383: LD_INT 16
23385: ST_TO_ADDR
23386: GO 23617
23388: LD_INT 23
23390: DOUBLE
23391: EQUAL
23392: IFTRUE 23396
23394: GO 23407
23396: POP
// bc_type := b_ext_laser ; 24 :
23397: LD_ADDR_OWVAR 42
23401: PUSH
23402: LD_INT 25
23404: ST_TO_ADDR
23405: GO 23617
23407: LD_INT 24
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23426
23415: POP
// bc_type := b_control_tower ; 25 :
23416: LD_ADDR_OWVAR 42
23420: PUSH
23421: LD_INT 36
23423: ST_TO_ADDR
23424: GO 23617
23426: LD_INT 25
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23445
23434: POP
// bc_type := b_breastwork ; 26 :
23435: LD_ADDR_OWVAR 42
23439: PUSH
23440: LD_INT 31
23442: ST_TO_ADDR
23443: GO 23617
23445: LD_INT 26
23447: DOUBLE
23448: EQUAL
23449: IFTRUE 23453
23451: GO 23464
23453: POP
// bc_type := b_bunker ; 27 :
23454: LD_ADDR_OWVAR 42
23458: PUSH
23459: LD_INT 32
23461: ST_TO_ADDR
23462: GO 23617
23464: LD_INT 27
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23483
23472: POP
// bc_type := b_turret ; 28 :
23473: LD_ADDR_OWVAR 42
23477: PUSH
23478: LD_INT 33
23480: ST_TO_ADDR
23481: GO 23617
23483: LD_INT 28
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23502
23491: POP
// bc_type := b_armoury ; 29 :
23492: LD_ADDR_OWVAR 42
23496: PUSH
23497: LD_INT 4
23499: ST_TO_ADDR
23500: GO 23617
23502: LD_INT 29
23504: DOUBLE
23505: EQUAL
23506: IFTRUE 23510
23508: GO 23521
23510: POP
// bc_type := b_barracks ; 30 :
23511: LD_ADDR_OWVAR 42
23515: PUSH
23516: LD_INT 5
23518: ST_TO_ADDR
23519: GO 23617
23521: LD_INT 30
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23540
23529: POP
// bc_type := b_solar_power ; 31 :
23530: LD_ADDR_OWVAR 42
23534: PUSH
23535: LD_INT 27
23537: ST_TO_ADDR
23538: GO 23617
23540: LD_INT 31
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23559
23548: POP
// bc_type := b_oil_power ; 32 :
23549: LD_ADDR_OWVAR 42
23553: PUSH
23554: LD_INT 26
23556: ST_TO_ADDR
23557: GO 23617
23559: LD_INT 32
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23578
23567: POP
// bc_type := b_siberite_power ; 33 :
23568: LD_ADDR_OWVAR 42
23572: PUSH
23573: LD_INT 28
23575: ST_TO_ADDR
23576: GO 23617
23578: LD_INT 33
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23597
23586: POP
// bc_type := b_oil_mine ; 34 :
23587: LD_ADDR_OWVAR 42
23591: PUSH
23592: LD_INT 29
23594: ST_TO_ADDR
23595: GO 23617
23597: LD_INT 34
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23616
23605: POP
// bc_type := b_siberite_mine ; end ;
23606: LD_ADDR_OWVAR 42
23610: PUSH
23611: LD_INT 30
23613: ST_TO_ADDR
23614: GO 23617
23616: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23617: LD_ADDR_VAR 0 8
23621: PUSH
23622: LD_VAR 0 5
23626: PPUSH
23627: LD_VAR 0 6
23631: PPUSH
23632: LD_VAR 0 3
23636: PPUSH
23637: CALL_OW 47
23641: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23642: LD_OWVAR 42
23646: PUSH
23647: LD_INT 32
23649: PUSH
23650: LD_INT 33
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: IN
23657: IFFALSE 23673
// PlaceWeaponTurret ( b , weapon ) ;
23659: LD_VAR 0 8
23663: PPUSH
23664: LD_VAR 0 4
23668: PPUSH
23669: CALL_OW 431
// end ;
23673: LD_VAR 0 7
23677: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23678: LD_INT 0
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23684: LD_ADDR_VAR 0 4
23688: PUSH
23689: LD_INT 22
23691: PUSH
23692: LD_OWVAR 2
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: LD_INT 30
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 30
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PPUSH
23733: CALL_OW 69
23737: ST_TO_ADDR
// if not tmp then
23738: LD_VAR 0 4
23742: NOT
23743: IFFALSE 23747
// exit ;
23745: GO 23806
// for i in tmp do
23747: LD_ADDR_VAR 0 2
23751: PUSH
23752: LD_VAR 0 4
23756: PUSH
23757: FOR_IN
23758: IFFALSE 23804
// for j = 1 to 3 do
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: DOUBLE
23766: LD_INT 1
23768: DEC
23769: ST_TO_ADDR
23770: LD_INT 3
23772: PUSH
23773: FOR_TO
23774: IFFALSE 23800
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23776: LD_VAR 0 2
23780: PPUSH
23781: CALL_OW 274
23785: PPUSH
23786: LD_VAR 0 3
23790: PPUSH
23791: LD_INT 99999
23793: PPUSH
23794: CALL_OW 277
23798: GO 23773
23800: POP
23801: POP
23802: GO 23757
23804: POP
23805: POP
// end ;
23806: LD_VAR 0 1
23810: RET
// export function hHackSetLevel10 ; var i , j ; begin
23811: LD_INT 0
23813: PPUSH
23814: PPUSH
23815: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23816: LD_ADDR_VAR 0 2
23820: PUSH
23821: LD_INT 21
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PPUSH
23831: CALL_OW 69
23835: PUSH
23836: FOR_IN
23837: IFFALSE 23889
// if IsSelected ( i ) then
23839: LD_VAR 0 2
23843: PPUSH
23844: CALL_OW 306
23848: IFFALSE 23887
// begin for j := 1 to 4 do
23850: LD_ADDR_VAR 0 3
23854: PUSH
23855: DOUBLE
23856: LD_INT 1
23858: DEC
23859: ST_TO_ADDR
23860: LD_INT 4
23862: PUSH
23863: FOR_TO
23864: IFFALSE 23885
// SetSkill ( i , j , 10 ) ;
23866: LD_VAR 0 2
23870: PPUSH
23871: LD_VAR 0 3
23875: PPUSH
23876: LD_INT 10
23878: PPUSH
23879: CALL_OW 237
23883: GO 23863
23885: POP
23886: POP
// end ;
23887: GO 23836
23889: POP
23890: POP
// end ;
23891: LD_VAR 0 1
23895: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23896: LD_INT 0
23898: PPUSH
23899: PPUSH
23900: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 22
23908: PUSH
23909: LD_OWVAR 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 69
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23979
// begin for j := 1 to 4 do
23940: LD_ADDR_VAR 0 3
23944: PUSH
23945: DOUBLE
23946: LD_INT 1
23948: DEC
23949: ST_TO_ADDR
23950: LD_INT 4
23952: PUSH
23953: FOR_TO
23954: IFFALSE 23975
// SetSkill ( i , j , 10 ) ;
23956: LD_VAR 0 2
23960: PPUSH
23961: LD_VAR 0 3
23965: PPUSH
23966: LD_INT 10
23968: PPUSH
23969: CALL_OW 237
23973: GO 23953
23975: POP
23976: POP
// end ;
23977: GO 23937
23979: POP
23980: POP
// end ;
23981: LD_VAR 0 1
23985: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23986: LD_INT 0
23988: PPUSH
// uc_side := your_side ;
23989: LD_ADDR_OWVAR 20
23993: PUSH
23994: LD_OWVAR 2
23998: ST_TO_ADDR
// uc_nation := nation ;
23999: LD_ADDR_OWVAR 21
24003: PUSH
24004: LD_VAR 0 1
24008: ST_TO_ADDR
// InitHc ;
24009: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24013: LD_INT 0
24015: PPUSH
24016: LD_VAR 0 2
24020: PPUSH
24021: LD_VAR 0 3
24025: PPUSH
24026: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24030: LD_VAR 0 4
24034: PPUSH
24035: LD_VAR 0 5
24039: PPUSH
24040: CALL_OW 428
24044: PUSH
24045: LD_INT 0
24047: EQUAL
24048: IFFALSE 24072
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24050: CALL_OW 44
24054: PPUSH
24055: LD_VAR 0 4
24059: PPUSH
24060: LD_VAR 0 5
24064: PPUSH
24065: LD_INT 1
24067: PPUSH
24068: CALL_OW 48
// end ;
24072: LD_VAR 0 6
24076: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
// uc_side := your_side ;
24081: LD_ADDR_OWVAR 20
24085: PUSH
24086: LD_OWVAR 2
24090: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24091: LD_VAR 0 1
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: LD_INT 2
24101: PUSH
24102: LD_INT 3
24104: PUSH
24105: LD_INT 4
24107: PUSH
24108: LD_INT 5
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: IN
24118: IFFALSE 24130
// uc_nation := nation_american else
24120: LD_ADDR_OWVAR 21
24124: PUSH
24125: LD_INT 1
24127: ST_TO_ADDR
24128: GO 24173
// if chassis in [ 11 , 12 , 13 , 14 ] then
24130: LD_VAR 0 1
24134: PUSH
24135: LD_INT 11
24137: PUSH
24138: LD_INT 12
24140: PUSH
24141: LD_INT 13
24143: PUSH
24144: LD_INT 14
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: IN
24153: IFFALSE 24165
// uc_nation := nation_arabian else
24155: LD_ADDR_OWVAR 21
24159: PUSH
24160: LD_INT 2
24162: ST_TO_ADDR
24163: GO 24173
// uc_nation := nation_russian ;
24165: LD_ADDR_OWVAR 21
24169: PUSH
24170: LD_INT 3
24172: ST_TO_ADDR
// vc_chassis := chassis ;
24173: LD_ADDR_OWVAR 37
24177: PUSH
24178: LD_VAR 0 1
24182: ST_TO_ADDR
// vc_engine := engine ;
24183: LD_ADDR_OWVAR 39
24187: PUSH
24188: LD_VAR 0 2
24192: ST_TO_ADDR
// vc_control := control ;
24193: LD_ADDR_OWVAR 38
24197: PUSH
24198: LD_VAR 0 3
24202: ST_TO_ADDR
// vc_weapon := weapon ;
24203: LD_ADDR_OWVAR 40
24207: PUSH
24208: LD_VAR 0 4
24212: ST_TO_ADDR
// un := CreateVehicle ;
24213: LD_ADDR_VAR 0 8
24217: PUSH
24218: CALL_OW 45
24222: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24223: LD_VAR 0 8
24227: PPUSH
24228: LD_INT 0
24230: PPUSH
24231: LD_INT 5
24233: PPUSH
24234: CALL_OW 12
24238: PPUSH
24239: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24243: LD_VAR 0 8
24247: PPUSH
24248: LD_VAR 0 5
24252: PPUSH
24253: LD_VAR 0 6
24257: PPUSH
24258: LD_INT 1
24260: PPUSH
24261: CALL_OW 48
// end ;
24265: LD_VAR 0 7
24269: RET
// export hInvincible ; every 1 do
24270: GO 24272
24272: DISABLE
// hInvincible := [ ] ;
24273: LD_ADDR_EXP 91
24277: PUSH
24278: EMPTY
24279: ST_TO_ADDR
24280: END
// every 10 do var i ;
24281: GO 24283
24283: DISABLE
24284: LD_INT 0
24286: PPUSH
// begin enable ;
24287: ENABLE
// if not hInvincible then
24288: LD_EXP 91
24292: NOT
24293: IFFALSE 24297
// exit ;
24295: GO 24341
// for i in hInvincible do
24297: LD_ADDR_VAR 0 1
24301: PUSH
24302: LD_EXP 91
24306: PUSH
24307: FOR_IN
24308: IFFALSE 24339
// if GetLives ( i ) < 1000 then
24310: LD_VAR 0 1
24314: PPUSH
24315: CALL_OW 256
24319: PUSH
24320: LD_INT 1000
24322: LESS
24323: IFFALSE 24337
// SetLives ( i , 1000 ) ;
24325: LD_VAR 0 1
24329: PPUSH
24330: LD_INT 1000
24332: PPUSH
24333: CALL_OW 234
24337: GO 24307
24339: POP
24340: POP
// end ;
24341: PPOPN 1
24343: END
// export function hHackInvincible ; var i ; begin
24344: LD_INT 0
24346: PPUSH
24347: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24348: LD_ADDR_VAR 0 2
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: PPUSH
24381: CALL_OW 69
24385: PUSH
24386: FOR_IN
24387: IFFALSE 24448
// if IsSelected ( i ) then
24389: LD_VAR 0 2
24393: PPUSH
24394: CALL_OW 306
24398: IFFALSE 24446
// begin if i in hInvincible then
24400: LD_VAR 0 2
24404: PUSH
24405: LD_EXP 91
24409: IN
24410: IFFALSE 24430
// hInvincible := hInvincible diff i else
24412: LD_ADDR_EXP 91
24416: PUSH
24417: LD_EXP 91
24421: PUSH
24422: LD_VAR 0 2
24426: DIFF
24427: ST_TO_ADDR
24428: GO 24446
// hInvincible := hInvincible union i ;
24430: LD_ADDR_EXP 91
24434: PUSH
24435: LD_EXP 91
24439: PUSH
24440: LD_VAR 0 2
24444: UNION
24445: ST_TO_ADDR
// end ;
24446: GO 24386
24448: POP
24449: POP
// end ;
24450: LD_VAR 0 1
24454: RET
// export function hHackInvisible ; var i , j ; begin
24455: LD_INT 0
24457: PPUSH
24458: PPUSH
24459: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24460: LD_ADDR_VAR 0 2
24464: PUSH
24465: LD_INT 21
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: PUSH
24480: FOR_IN
24481: IFFALSE 24505
// if IsSelected ( i ) then
24483: LD_VAR 0 2
24487: PPUSH
24488: CALL_OW 306
24492: IFFALSE 24503
// ComForceInvisible ( i ) ;
24494: LD_VAR 0 2
24498: PPUSH
24499: CALL_OW 496
24503: GO 24480
24505: POP
24506: POP
// end ;
24507: LD_VAR 0 1
24511: RET
// export function hHackChangeYourSide ; begin
24512: LD_INT 0
24514: PPUSH
// if your_side = 8 then
24515: LD_OWVAR 2
24519: PUSH
24520: LD_INT 8
24522: EQUAL
24523: IFFALSE 24535
// your_side := 0 else
24525: LD_ADDR_OWVAR 2
24529: PUSH
24530: LD_INT 0
24532: ST_TO_ADDR
24533: GO 24549
// your_side := your_side + 1 ;
24535: LD_ADDR_OWVAR 2
24539: PUSH
24540: LD_OWVAR 2
24544: PUSH
24545: LD_INT 1
24547: PLUS
24548: ST_TO_ADDR
// end ;
24549: LD_VAR 0 1
24553: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24554: LD_INT 0
24556: PPUSH
24557: PPUSH
24558: PPUSH
// for i in all_units do
24559: LD_ADDR_VAR 0 2
24563: PUSH
24564: LD_OWVAR 3
24568: PUSH
24569: FOR_IN
24570: IFFALSE 24648
// if IsSelected ( i ) then
24572: LD_VAR 0 2
24576: PPUSH
24577: CALL_OW 306
24581: IFFALSE 24646
// begin j := GetSide ( i ) ;
24583: LD_ADDR_VAR 0 3
24587: PUSH
24588: LD_VAR 0 2
24592: PPUSH
24593: CALL_OW 255
24597: ST_TO_ADDR
// if j = 8 then
24598: LD_VAR 0 3
24602: PUSH
24603: LD_INT 8
24605: EQUAL
24606: IFFALSE 24618
// j := 0 else
24608: LD_ADDR_VAR 0 3
24612: PUSH
24613: LD_INT 0
24615: ST_TO_ADDR
24616: GO 24632
// j := j + 1 ;
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: LD_VAR 0 3
24627: PUSH
24628: LD_INT 1
24630: PLUS
24631: ST_TO_ADDR
// SetSide ( i , j ) ;
24632: LD_VAR 0 2
24636: PPUSH
24637: LD_VAR 0 3
24641: PPUSH
24642: CALL_OW 235
// end ;
24646: GO 24569
24648: POP
24649: POP
// end ;
24650: LD_VAR 0 1
24654: RET
// export function hHackFog ; begin
24655: LD_INT 0
24657: PPUSH
// FogOff ( true ) ;
24658: LD_INT 1
24660: PPUSH
24661: CALL_OW 344
// end ;
24665: LD_VAR 0 1
24669: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24670: LD_INT 0
24672: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24673: LD_VAR 0 1
24677: PPUSH
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_VAR 0 3
24687: PPUSH
24688: LD_INT 1
24690: PPUSH
24691: LD_INT 1
24693: PPUSH
24694: CALL_OW 483
// CenterOnXY ( x , y ) ;
24698: LD_VAR 0 2
24702: PPUSH
24703: LD_VAR 0 3
24707: PPUSH
24708: CALL_OW 84
// end ; end_of_file
24712: LD_VAR 0 4
24716: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24717: LD_INT 0
24719: PPUSH
24720: PPUSH
24721: PPUSH
24722: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24723: LD_VAR 0 1
24727: PPUSH
24728: CALL_OW 264
24732: PUSH
24733: LD_EXP 25
24737: EQUAL
24738: IFFALSE 24810
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24740: LD_INT 68
24742: PPUSH
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 255
24752: PPUSH
24753: CALL_OW 321
24757: PUSH
24758: LD_INT 2
24760: EQUAL
24761: IFFALSE 24773
// eff := 70 else
24763: LD_ADDR_VAR 0 4
24767: PUSH
24768: LD_INT 70
24770: ST_TO_ADDR
24771: GO 24781
// eff := 30 ;
24773: LD_ADDR_VAR 0 4
24777: PUSH
24778: LD_INT 30
24780: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24781: LD_VAR 0 1
24785: PPUSH
24786: CALL_OW 250
24790: PPUSH
24791: LD_VAR 0 1
24795: PPUSH
24796: CALL_OW 251
24800: PPUSH
24801: LD_VAR 0 4
24805: PPUSH
24806: CALL_OW 495
// end ; end ;
24810: LD_VAR 0 2
24814: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24815: LD_INT 0
24817: PPUSH
// end ;
24818: LD_VAR 0 4
24822: RET
// export function SOS_Command ( cmd ) ; begin
24823: LD_INT 0
24825: PPUSH
// end ;
24826: LD_VAR 0 2
24830: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24831: LD_INT 0
24833: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24834: LD_VAR 0 1
24838: PUSH
24839: LD_INT 250
24841: EQUAL
24842: PUSH
24843: LD_VAR 0 2
24847: PPUSH
24848: CALL_OW 264
24852: PUSH
24853: LD_EXP 28
24857: EQUAL
24858: AND
24859: IFFALSE 24880
// MinerPlaceMine ( unit , x , y ) ;
24861: LD_VAR 0 2
24865: PPUSH
24866: LD_VAR 0 4
24870: PPUSH
24871: LD_VAR 0 5
24875: PPUSH
24876: CALL 27221 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24880: LD_VAR 0 1
24884: PUSH
24885: LD_INT 251
24887: EQUAL
24888: PUSH
24889: LD_VAR 0 2
24893: PPUSH
24894: CALL_OW 264
24898: PUSH
24899: LD_EXP 28
24903: EQUAL
24904: AND
24905: IFFALSE 24926
// MinerDetonateMine ( unit , x , y ) ;
24907: LD_VAR 0 2
24911: PPUSH
24912: LD_VAR 0 4
24916: PPUSH
24917: LD_VAR 0 5
24921: PPUSH
24922: CALL 27498 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24926: LD_VAR 0 1
24930: PUSH
24931: LD_INT 252
24933: EQUAL
24934: PUSH
24935: LD_VAR 0 2
24939: PPUSH
24940: CALL_OW 264
24944: PUSH
24945: LD_EXP 28
24949: EQUAL
24950: AND
24951: IFFALSE 24972
// MinerCreateMinefield ( unit , x , y ) ;
24953: LD_VAR 0 2
24957: PPUSH
24958: LD_VAR 0 4
24962: PPUSH
24963: LD_VAR 0 5
24967: PPUSH
24968: CALL 27915 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24972: LD_VAR 0 1
24976: PUSH
24977: LD_INT 253
24979: EQUAL
24980: PUSH
24981: LD_VAR 0 2
24985: PPUSH
24986: CALL_OW 257
24990: PUSH
24991: LD_INT 5
24993: EQUAL
24994: AND
24995: IFFALSE 25016
// ComBinocular ( unit , x , y ) ;
24997: LD_VAR 0 2
25001: PPUSH
25002: LD_VAR 0 4
25006: PPUSH
25007: LD_VAR 0 5
25011: PPUSH
25012: CALL 28286 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25016: LD_VAR 0 1
25020: PUSH
25021: LD_INT 254
25023: EQUAL
25024: PUSH
25025: LD_VAR 0 2
25029: PPUSH
25030: CALL_OW 264
25034: PUSH
25035: LD_EXP 23
25039: EQUAL
25040: AND
25041: PUSH
25042: LD_VAR 0 3
25046: PPUSH
25047: CALL_OW 263
25051: PUSH
25052: LD_INT 3
25054: EQUAL
25055: AND
25056: IFFALSE 25072
// HackDestroyVehicle ( unit , selectedUnit ) ;
25058: LD_VAR 0 2
25062: PPUSH
25063: LD_VAR 0 3
25067: PPUSH
25068: CALL 26581 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25072: LD_VAR 0 1
25076: PUSH
25077: LD_INT 255
25079: EQUAL
25080: PUSH
25081: LD_VAR 0 2
25085: PPUSH
25086: CALL_OW 264
25090: PUSH
25091: LD_INT 14
25093: PUSH
25094: LD_INT 53
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: IN
25101: AND
25102: PUSH
25103: LD_VAR 0 4
25107: PPUSH
25108: LD_VAR 0 5
25112: PPUSH
25113: CALL_OW 488
25117: AND
25118: IFFALSE 25142
// CutTreeXYR ( unit , x , y , 12 ) ;
25120: LD_VAR 0 2
25124: PPUSH
25125: LD_VAR 0 4
25129: PPUSH
25130: LD_VAR 0 5
25134: PPUSH
25135: LD_INT 12
25137: PPUSH
25138: CALL 25147 0 4
// end ;
25142: LD_VAR 0 6
25146: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25147: LD_INT 0
25149: PPUSH
25150: PPUSH
25151: PPUSH
25152: PPUSH
25153: PPUSH
25154: PPUSH
25155: PPUSH
25156: PPUSH
25157: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25158: LD_VAR 0 1
25162: NOT
25163: PUSH
25164: LD_VAR 0 2
25168: PPUSH
25169: LD_VAR 0 3
25173: PPUSH
25174: CALL_OW 488
25178: NOT
25179: OR
25180: PUSH
25181: LD_VAR 0 4
25185: NOT
25186: OR
25187: IFFALSE 25191
// exit ;
25189: GO 25531
// list := [ ] ;
25191: LD_ADDR_VAR 0 13
25195: PUSH
25196: EMPTY
25197: ST_TO_ADDR
// if x - r < 0 then
25198: LD_VAR 0 2
25202: PUSH
25203: LD_VAR 0 4
25207: MINUS
25208: PUSH
25209: LD_INT 0
25211: LESS
25212: IFFALSE 25224
// min_x := 0 else
25214: LD_ADDR_VAR 0 7
25218: PUSH
25219: LD_INT 0
25221: ST_TO_ADDR
25222: GO 25240
// min_x := x - r ;
25224: LD_ADDR_VAR 0 7
25228: PUSH
25229: LD_VAR 0 2
25233: PUSH
25234: LD_VAR 0 4
25238: MINUS
25239: ST_TO_ADDR
// if y - r < 0 then
25240: LD_VAR 0 3
25244: PUSH
25245: LD_VAR 0 4
25249: MINUS
25250: PUSH
25251: LD_INT 0
25253: LESS
25254: IFFALSE 25266
// min_y := 0 else
25256: LD_ADDR_VAR 0 8
25260: PUSH
25261: LD_INT 0
25263: ST_TO_ADDR
25264: GO 25282
// min_y := y - r ;
25266: LD_ADDR_VAR 0 8
25270: PUSH
25271: LD_VAR 0 3
25275: PUSH
25276: LD_VAR 0 4
25280: MINUS
25281: ST_TO_ADDR
// max_x := x + r ;
25282: LD_ADDR_VAR 0 9
25286: PUSH
25287: LD_VAR 0 2
25291: PUSH
25292: LD_VAR 0 4
25296: PLUS
25297: ST_TO_ADDR
// max_y := y + r ;
25298: LD_ADDR_VAR 0 10
25302: PUSH
25303: LD_VAR 0 3
25307: PUSH
25308: LD_VAR 0 4
25312: PLUS
25313: ST_TO_ADDR
// for _x = min_x to max_x do
25314: LD_ADDR_VAR 0 11
25318: PUSH
25319: DOUBLE
25320: LD_VAR 0 7
25324: DEC
25325: ST_TO_ADDR
25326: LD_VAR 0 9
25330: PUSH
25331: FOR_TO
25332: IFFALSE 25449
// for _y = min_y to max_y do
25334: LD_ADDR_VAR 0 12
25338: PUSH
25339: DOUBLE
25340: LD_VAR 0 8
25344: DEC
25345: ST_TO_ADDR
25346: LD_VAR 0 10
25350: PUSH
25351: FOR_TO
25352: IFFALSE 25445
// begin if not ValidHex ( _x , _y ) then
25354: LD_VAR 0 11
25358: PPUSH
25359: LD_VAR 0 12
25363: PPUSH
25364: CALL_OW 488
25368: NOT
25369: IFFALSE 25373
// continue ;
25371: GO 25351
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25373: LD_VAR 0 11
25377: PPUSH
25378: LD_VAR 0 12
25382: PPUSH
25383: CALL_OW 351
25387: PUSH
25388: LD_VAR 0 11
25392: PPUSH
25393: LD_VAR 0 12
25397: PPUSH
25398: CALL_OW 554
25402: AND
25403: IFFALSE 25443
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25405: LD_ADDR_VAR 0 13
25409: PUSH
25410: LD_VAR 0 13
25414: PPUSH
25415: LD_VAR 0 13
25419: PUSH
25420: LD_INT 1
25422: PLUS
25423: PPUSH
25424: LD_VAR 0 11
25428: PUSH
25429: LD_VAR 0 12
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PPUSH
25438: CALL_OW 2
25442: ST_TO_ADDR
// end ;
25443: GO 25351
25445: POP
25446: POP
25447: GO 25331
25449: POP
25450: POP
// if not list then
25451: LD_VAR 0 13
25455: NOT
25456: IFFALSE 25460
// exit ;
25458: GO 25531
// for i in list do
25460: LD_ADDR_VAR 0 6
25464: PUSH
25465: LD_VAR 0 13
25469: PUSH
25470: FOR_IN
25471: IFFALSE 25529
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25473: LD_VAR 0 1
25477: PPUSH
25478: LD_STRING M
25480: PUSH
25481: LD_VAR 0 6
25485: PUSH
25486: LD_INT 1
25488: ARRAY
25489: PUSH
25490: LD_VAR 0 6
25494: PUSH
25495: LD_INT 2
25497: ARRAY
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 0
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: PPUSH
25523: CALL_OW 447
25527: GO 25470
25529: POP
25530: POP
// end ;
25531: LD_VAR 0 5
25535: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25536: LD_EXP 92
25540: NOT
25541: IFFALSE 25591
25543: GO 25545
25545: DISABLE
// begin initHack := true ;
25546: LD_ADDR_EXP 92
25550: PUSH
25551: LD_INT 1
25553: ST_TO_ADDR
// hackTanks := [ ] ;
25554: LD_ADDR_EXP 93
25558: PUSH
25559: EMPTY
25560: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25561: LD_ADDR_EXP 94
25565: PUSH
25566: EMPTY
25567: ST_TO_ADDR
// hackLimit := 3 ;
25568: LD_ADDR_EXP 95
25572: PUSH
25573: LD_INT 3
25575: ST_TO_ADDR
// hackDist := 12 ;
25576: LD_ADDR_EXP 96
25580: PUSH
25581: LD_INT 12
25583: ST_TO_ADDR
// hackCounter := [ ] ;
25584: LD_ADDR_EXP 97
25588: PUSH
25589: EMPTY
25590: ST_TO_ADDR
// end ;
25591: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25592: LD_EXP 92
25596: PUSH
25597: LD_INT 34
25599: PUSH
25600: LD_EXP 23
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PPUSH
25609: CALL_OW 69
25613: AND
25614: IFFALSE 25869
25616: GO 25618
25618: DISABLE
25619: LD_INT 0
25621: PPUSH
25622: PPUSH
// begin enable ;
25623: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25624: LD_ADDR_VAR 0 1
25628: PUSH
25629: LD_INT 34
25631: PUSH
25632: LD_EXP 23
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PPUSH
25641: CALL_OW 69
25645: PUSH
25646: FOR_IN
25647: IFFALSE 25867
// begin if not i in hackTanks then
25649: LD_VAR 0 1
25653: PUSH
25654: LD_EXP 93
25658: IN
25659: NOT
25660: IFFALSE 25743
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25662: LD_ADDR_EXP 93
25666: PUSH
25667: LD_EXP 93
25671: PPUSH
25672: LD_EXP 93
25676: PUSH
25677: LD_INT 1
25679: PLUS
25680: PPUSH
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL_OW 1
25690: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25691: LD_ADDR_EXP 94
25695: PUSH
25696: LD_EXP 94
25700: PPUSH
25701: LD_EXP 94
25705: PUSH
25706: LD_INT 1
25708: PLUS
25709: PPUSH
25710: EMPTY
25711: PPUSH
25712: CALL_OW 1
25716: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25717: LD_ADDR_EXP 97
25721: PUSH
25722: LD_EXP 97
25726: PPUSH
25727: LD_EXP 97
25731: PUSH
25732: LD_INT 1
25734: PLUS
25735: PPUSH
25736: EMPTY
25737: PPUSH
25738: CALL_OW 1
25742: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25743: LD_VAR 0 1
25747: PPUSH
25748: CALL_OW 302
25752: NOT
25753: IFFALSE 25766
// begin HackUnlinkAll ( i ) ;
25755: LD_VAR 0 1
25759: PPUSH
25760: CALL 25872 0 1
// continue ;
25764: GO 25646
// end ; HackCheckCapturedStatus ( i ) ;
25766: LD_VAR 0 1
25770: PPUSH
25771: CALL 26315 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25775: LD_ADDR_VAR 0 2
25779: PUSH
25780: LD_INT 81
25782: PUSH
25783: LD_VAR 0 1
25787: PPUSH
25788: CALL_OW 255
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 33
25799: PUSH
25800: LD_INT 3
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 91
25809: PUSH
25810: LD_VAR 0 1
25814: PUSH
25815: LD_EXP 96
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 50
25827: PUSH
25828: EMPTY
25829: LIST
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: PPUSH
25837: CALL_OW 69
25841: ST_TO_ADDR
// if not tmp then
25842: LD_VAR 0 2
25846: NOT
25847: IFFALSE 25851
// continue ;
25849: GO 25646
// HackLink ( i , tmp ) ;
25851: LD_VAR 0 1
25855: PPUSH
25856: LD_VAR 0 2
25860: PPUSH
25861: CALL 26008 0 2
// end ;
25865: GO 25646
25867: POP
25868: POP
// end ;
25869: PPOPN 2
25871: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25872: LD_INT 0
25874: PPUSH
25875: PPUSH
25876: PPUSH
// if not hack in hackTanks then
25877: LD_VAR 0 1
25881: PUSH
25882: LD_EXP 93
25886: IN
25887: NOT
25888: IFFALSE 25892
// exit ;
25890: GO 26003
// index := GetElementIndex ( hackTanks , hack ) ;
25892: LD_ADDR_VAR 0 4
25896: PUSH
25897: LD_EXP 93
25901: PPUSH
25902: LD_VAR 0 1
25906: PPUSH
25907: CALL 33437 0 2
25911: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25912: LD_EXP 94
25916: PUSH
25917: LD_VAR 0 4
25921: ARRAY
25922: IFFALSE 26003
// begin for i in hackTanksCaptured [ index ] do
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_EXP 94
25933: PUSH
25934: LD_VAR 0 4
25938: ARRAY
25939: PUSH
25940: FOR_IN
25941: IFFALSE 25967
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25943: LD_VAR 0 3
25947: PUSH
25948: LD_INT 1
25950: ARRAY
25951: PPUSH
25952: LD_VAR 0 3
25956: PUSH
25957: LD_INT 2
25959: ARRAY
25960: PPUSH
25961: CALL_OW 235
25965: GO 25940
25967: POP
25968: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25969: LD_ADDR_EXP 94
25973: PUSH
25974: LD_EXP 94
25978: PPUSH
25979: LD_VAR 0 4
25983: PPUSH
25984: EMPTY
25985: PPUSH
25986: CALL_OW 1
25990: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25991: LD_VAR 0 1
25995: PPUSH
25996: LD_INT 0
25998: PPUSH
25999: CALL_OW 505
// end ; end ;
26003: LD_VAR 0 2
26007: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26008: LD_INT 0
26010: PPUSH
26011: PPUSH
26012: PPUSH
// if not hack in hackTanks or not vehicles then
26013: LD_VAR 0 1
26017: PUSH
26018: LD_EXP 93
26022: IN
26023: NOT
26024: PUSH
26025: LD_VAR 0 2
26029: NOT
26030: OR
26031: IFFALSE 26035
// exit ;
26033: GO 26310
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26035: LD_ADDR_VAR 0 2
26039: PUSH
26040: LD_VAR 0 1
26044: PPUSH
26045: LD_VAR 0 2
26049: PPUSH
26050: LD_INT 1
26052: PPUSH
26053: LD_INT 1
26055: PPUSH
26056: CALL 34087 0 4
26060: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26061: LD_ADDR_VAR 0 5
26065: PUSH
26066: LD_EXP 93
26070: PPUSH
26071: LD_VAR 0 1
26075: PPUSH
26076: CALL 33437 0 2
26080: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26081: LD_EXP 94
26085: PUSH
26086: LD_VAR 0 5
26090: ARRAY
26091: PUSH
26092: LD_EXP 95
26096: LESS
26097: IFFALSE 26286
// begin for i := 1 to vehicles do
26099: LD_ADDR_VAR 0 4
26103: PUSH
26104: DOUBLE
26105: LD_INT 1
26107: DEC
26108: ST_TO_ADDR
26109: LD_VAR 0 2
26113: PUSH
26114: FOR_TO
26115: IFFALSE 26284
// begin if hackTanksCaptured [ index ] = hackLimit then
26117: LD_EXP 94
26121: PUSH
26122: LD_VAR 0 5
26126: ARRAY
26127: PUSH
26128: LD_EXP 95
26132: EQUAL
26133: IFFALSE 26137
// break ;
26135: GO 26284
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26137: LD_ADDR_EXP 97
26141: PUSH
26142: LD_EXP 97
26146: PPUSH
26147: LD_VAR 0 5
26151: PPUSH
26152: LD_EXP 97
26156: PUSH
26157: LD_VAR 0 5
26161: ARRAY
26162: PUSH
26163: LD_INT 1
26165: PLUS
26166: PPUSH
26167: CALL_OW 1
26171: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26172: LD_ADDR_EXP 94
26176: PUSH
26177: LD_EXP 94
26181: PPUSH
26182: LD_VAR 0 5
26186: PUSH
26187: LD_EXP 94
26191: PUSH
26192: LD_VAR 0 5
26196: ARRAY
26197: PUSH
26198: LD_INT 1
26200: PLUS
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PPUSH
26206: LD_VAR 0 2
26210: PUSH
26211: LD_VAR 0 4
26215: ARRAY
26216: PUSH
26217: LD_VAR 0 2
26221: PUSH
26222: LD_VAR 0 4
26226: ARRAY
26227: PPUSH
26228: CALL_OW 255
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PPUSH
26237: CALL 33652 0 3
26241: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26242: LD_VAR 0 2
26246: PUSH
26247: LD_VAR 0 4
26251: ARRAY
26252: PPUSH
26253: LD_VAR 0 1
26257: PPUSH
26258: CALL_OW 255
26262: PPUSH
26263: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26267: LD_VAR 0 2
26271: PUSH
26272: LD_VAR 0 4
26276: ARRAY
26277: PPUSH
26278: CALL_OW 141
// end ;
26282: GO 26114
26284: POP
26285: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26286: LD_VAR 0 1
26290: PPUSH
26291: LD_EXP 94
26295: PUSH
26296: LD_VAR 0 5
26300: ARRAY
26301: PUSH
26302: LD_INT 0
26304: PLUS
26305: PPUSH
26306: CALL_OW 505
// end ;
26310: LD_VAR 0 3
26314: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26315: LD_INT 0
26317: PPUSH
26318: PPUSH
26319: PPUSH
26320: PPUSH
// if not hack in hackTanks then
26321: LD_VAR 0 1
26325: PUSH
26326: LD_EXP 93
26330: IN
26331: NOT
26332: IFFALSE 26336
// exit ;
26334: GO 26576
// index := GetElementIndex ( hackTanks , hack ) ;
26336: LD_ADDR_VAR 0 4
26340: PUSH
26341: LD_EXP 93
26345: PPUSH
26346: LD_VAR 0 1
26350: PPUSH
26351: CALL 33437 0 2
26355: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26356: LD_ADDR_VAR 0 3
26360: PUSH
26361: DOUBLE
26362: LD_EXP 94
26366: PUSH
26367: LD_VAR 0 4
26371: ARRAY
26372: INC
26373: ST_TO_ADDR
26374: LD_INT 1
26376: PUSH
26377: FOR_DOWNTO
26378: IFFALSE 26550
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26380: LD_ADDR_VAR 0 5
26384: PUSH
26385: LD_EXP 94
26389: PUSH
26390: LD_VAR 0 4
26394: ARRAY
26395: PUSH
26396: LD_VAR 0 3
26400: ARRAY
26401: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26402: LD_VAR 0 5
26406: PUSH
26407: LD_INT 1
26409: ARRAY
26410: PPUSH
26411: CALL_OW 302
26415: NOT
26416: PUSH
26417: LD_VAR 0 5
26421: PUSH
26422: LD_INT 1
26424: ARRAY
26425: PPUSH
26426: CALL_OW 255
26430: PUSH
26431: LD_VAR 0 1
26435: PPUSH
26436: CALL_OW 255
26440: NONEQUAL
26441: OR
26442: IFFALSE 26548
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26444: LD_VAR 0 5
26448: PUSH
26449: LD_INT 1
26451: ARRAY
26452: PPUSH
26453: CALL_OW 305
26457: PUSH
26458: LD_VAR 0 5
26462: PUSH
26463: LD_INT 1
26465: ARRAY
26466: PPUSH
26467: CALL_OW 255
26471: PUSH
26472: LD_VAR 0 1
26476: PPUSH
26477: CALL_OW 255
26481: EQUAL
26482: AND
26483: IFFALSE 26507
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26485: LD_VAR 0 5
26489: PUSH
26490: LD_INT 1
26492: ARRAY
26493: PPUSH
26494: LD_VAR 0 5
26498: PUSH
26499: LD_INT 2
26501: ARRAY
26502: PPUSH
26503: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26507: LD_ADDR_EXP 94
26511: PUSH
26512: LD_EXP 94
26516: PPUSH
26517: LD_VAR 0 4
26521: PPUSH
26522: LD_EXP 94
26526: PUSH
26527: LD_VAR 0 4
26531: ARRAY
26532: PPUSH
26533: LD_VAR 0 3
26537: PPUSH
26538: CALL_OW 3
26542: PPUSH
26543: CALL_OW 1
26547: ST_TO_ADDR
// end ; end ;
26548: GO 26377
26550: POP
26551: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26552: LD_VAR 0 1
26556: PPUSH
26557: LD_EXP 94
26561: PUSH
26562: LD_VAR 0 4
26566: ARRAY
26567: PUSH
26568: LD_INT 0
26570: PLUS
26571: PPUSH
26572: CALL_OW 505
// end ;
26576: LD_VAR 0 2
26580: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26581: LD_INT 0
26583: PPUSH
26584: PPUSH
26585: PPUSH
26586: PPUSH
// if not hack in hackTanks then
26587: LD_VAR 0 1
26591: PUSH
26592: LD_EXP 93
26596: IN
26597: NOT
26598: IFFALSE 26602
// exit ;
26600: GO 26687
// index := GetElementIndex ( hackTanks , hack ) ;
26602: LD_ADDR_VAR 0 5
26606: PUSH
26607: LD_EXP 93
26611: PPUSH
26612: LD_VAR 0 1
26616: PPUSH
26617: CALL 33437 0 2
26621: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26622: LD_ADDR_VAR 0 4
26626: PUSH
26627: DOUBLE
26628: LD_INT 1
26630: DEC
26631: ST_TO_ADDR
26632: LD_EXP 94
26636: PUSH
26637: LD_VAR 0 5
26641: ARRAY
26642: PUSH
26643: FOR_TO
26644: IFFALSE 26685
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26646: LD_EXP 94
26650: PUSH
26651: LD_VAR 0 5
26655: ARRAY
26656: PUSH
26657: LD_VAR 0 4
26661: ARRAY
26662: PUSH
26663: LD_INT 1
26665: ARRAY
26666: PUSH
26667: LD_VAR 0 2
26671: EQUAL
26672: IFFALSE 26683
// KillUnit ( vehicle ) ;
26674: LD_VAR 0 2
26678: PPUSH
26679: CALL_OW 66
26683: GO 26643
26685: POP
26686: POP
// end ;
26687: LD_VAR 0 3
26691: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26692: LD_EXP 98
26696: NOT
26697: IFFALSE 26732
26699: GO 26701
26701: DISABLE
// begin initMiner := true ;
26702: LD_ADDR_EXP 98
26706: PUSH
26707: LD_INT 1
26709: ST_TO_ADDR
// minersList := [ ] ;
26710: LD_ADDR_EXP 99
26714: PUSH
26715: EMPTY
26716: ST_TO_ADDR
// minerMinesList := [ ] ;
26717: LD_ADDR_EXP 100
26721: PUSH
26722: EMPTY
26723: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26724: LD_ADDR_EXP 101
26728: PUSH
26729: LD_INT 5
26731: ST_TO_ADDR
// end ;
26732: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26733: LD_EXP 98
26737: PUSH
26738: LD_INT 34
26740: PUSH
26741: LD_EXP 28
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PPUSH
26750: CALL_OW 69
26754: AND
26755: IFFALSE 27218
26757: GO 26759
26759: DISABLE
26760: LD_INT 0
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
// begin enable ;
26766: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26767: LD_ADDR_VAR 0 1
26771: PUSH
26772: LD_INT 34
26774: PUSH
26775: LD_EXP 28
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PPUSH
26784: CALL_OW 69
26788: PUSH
26789: FOR_IN
26790: IFFALSE 26862
// begin if not i in minersList then
26792: LD_VAR 0 1
26796: PUSH
26797: LD_EXP 99
26801: IN
26802: NOT
26803: IFFALSE 26860
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26805: LD_ADDR_EXP 99
26809: PUSH
26810: LD_EXP 99
26814: PPUSH
26815: LD_EXP 99
26819: PUSH
26820: LD_INT 1
26822: PLUS
26823: PPUSH
26824: LD_VAR 0 1
26828: PPUSH
26829: CALL_OW 1
26833: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26834: LD_ADDR_EXP 100
26838: PUSH
26839: LD_EXP 100
26843: PPUSH
26844: LD_EXP 100
26848: PUSH
26849: LD_INT 1
26851: PLUS
26852: PPUSH
26853: EMPTY
26854: PPUSH
26855: CALL_OW 1
26859: ST_TO_ADDR
// end end ;
26860: GO 26789
26862: POP
26863: POP
// for i := minerMinesList downto 1 do
26864: LD_ADDR_VAR 0 1
26868: PUSH
26869: DOUBLE
26870: LD_EXP 100
26874: INC
26875: ST_TO_ADDR
26876: LD_INT 1
26878: PUSH
26879: FOR_DOWNTO
26880: IFFALSE 27216
// begin if IsLive ( minersList [ i ] ) then
26882: LD_EXP 99
26886: PUSH
26887: LD_VAR 0 1
26891: ARRAY
26892: PPUSH
26893: CALL_OW 300
26897: IFFALSE 26925
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26899: LD_EXP 99
26903: PUSH
26904: LD_VAR 0 1
26908: ARRAY
26909: PPUSH
26910: LD_EXP 100
26914: PUSH
26915: LD_VAR 0 1
26919: ARRAY
26920: PPUSH
26921: CALL_OW 505
// if not minerMinesList [ i ] then
26925: LD_EXP 100
26929: PUSH
26930: LD_VAR 0 1
26934: ARRAY
26935: NOT
26936: IFFALSE 26940
// continue ;
26938: GO 26879
// for j := minerMinesList [ i ] downto 1 do
26940: LD_ADDR_VAR 0 2
26944: PUSH
26945: DOUBLE
26946: LD_EXP 100
26950: PUSH
26951: LD_VAR 0 1
26955: ARRAY
26956: INC
26957: ST_TO_ADDR
26958: LD_INT 1
26960: PUSH
26961: FOR_DOWNTO
26962: IFFALSE 27212
// begin side := GetSide ( minersList [ i ] ) ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_EXP 99
26973: PUSH
26974: LD_VAR 0 1
26978: ARRAY
26979: PPUSH
26980: CALL_OW 255
26984: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26985: LD_ADDR_VAR 0 4
26989: PUSH
26990: LD_EXP 100
26994: PUSH
26995: LD_VAR 0 1
26999: ARRAY
27000: PUSH
27001: LD_VAR 0 2
27005: ARRAY
27006: PUSH
27007: LD_INT 1
27009: ARRAY
27010: PPUSH
27011: LD_EXP 100
27015: PUSH
27016: LD_VAR 0 1
27020: ARRAY
27021: PUSH
27022: LD_VAR 0 2
27026: ARRAY
27027: PUSH
27028: LD_INT 2
27030: ARRAY
27031: PPUSH
27032: CALL_OW 428
27036: ST_TO_ADDR
// if not tmp then
27037: LD_VAR 0 4
27041: NOT
27042: IFFALSE 27046
// continue ;
27044: GO 26961
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27046: LD_VAR 0 4
27050: PUSH
27051: LD_INT 81
27053: PUSH
27054: LD_VAR 0 3
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PPUSH
27063: CALL_OW 69
27067: IN
27068: PUSH
27069: LD_EXP 100
27073: PUSH
27074: LD_VAR 0 1
27078: ARRAY
27079: PUSH
27080: LD_VAR 0 2
27084: ARRAY
27085: PUSH
27086: LD_INT 1
27088: ARRAY
27089: PPUSH
27090: LD_EXP 100
27094: PUSH
27095: LD_VAR 0 1
27099: ARRAY
27100: PUSH
27101: LD_VAR 0 2
27105: ARRAY
27106: PUSH
27107: LD_INT 2
27109: ARRAY
27110: PPUSH
27111: CALL_OW 458
27115: AND
27116: IFFALSE 27210
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27118: LD_EXP 100
27122: PUSH
27123: LD_VAR 0 1
27127: ARRAY
27128: PUSH
27129: LD_VAR 0 2
27133: ARRAY
27134: PUSH
27135: LD_INT 1
27137: ARRAY
27138: PPUSH
27139: LD_EXP 100
27143: PUSH
27144: LD_VAR 0 1
27148: ARRAY
27149: PUSH
27150: LD_VAR 0 2
27154: ARRAY
27155: PUSH
27156: LD_INT 2
27158: ARRAY
27159: PPUSH
27160: LD_VAR 0 3
27164: PPUSH
27165: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27169: LD_ADDR_EXP 100
27173: PUSH
27174: LD_EXP 100
27178: PPUSH
27179: LD_VAR 0 1
27183: PPUSH
27184: LD_EXP 100
27188: PUSH
27189: LD_VAR 0 1
27193: ARRAY
27194: PPUSH
27195: LD_VAR 0 2
27199: PPUSH
27200: CALL_OW 3
27204: PPUSH
27205: CALL_OW 1
27209: ST_TO_ADDR
// end ; end ;
27210: GO 26961
27212: POP
27213: POP
// end ;
27214: GO 26879
27216: POP
27217: POP
// end ;
27218: PPOPN 4
27220: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27221: LD_INT 0
27223: PPUSH
27224: PPUSH
// result := false ;
27225: LD_ADDR_VAR 0 4
27229: PUSH
27230: LD_INT 0
27232: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27233: LD_VAR 0 1
27237: PPUSH
27238: CALL_OW 264
27242: PUSH
27243: LD_EXP 28
27247: EQUAL
27248: NOT
27249: IFFALSE 27253
// exit ;
27251: GO 27493
// index := GetElementIndex ( minersList , unit ) ;
27253: LD_ADDR_VAR 0 5
27257: PUSH
27258: LD_EXP 99
27262: PPUSH
27263: LD_VAR 0 1
27267: PPUSH
27268: CALL 33437 0 2
27272: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27273: LD_EXP 100
27277: PUSH
27278: LD_VAR 0 5
27282: ARRAY
27283: PUSH
27284: LD_EXP 101
27288: GREATEREQUAL
27289: IFFALSE 27293
// exit ;
27291: GO 27493
// ComMoveXY ( unit , x , y ) ;
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_VAR 0 2
27302: PPUSH
27303: LD_VAR 0 3
27307: PPUSH
27308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27312: LD_INT 35
27314: PPUSH
27315: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27319: LD_VAR 0 1
27323: PPUSH
27324: LD_VAR 0 2
27328: PPUSH
27329: LD_VAR 0 3
27333: PPUSH
27334: CALL 63501 0 3
27338: NOT
27339: PUSH
27340: LD_VAR 0 1
27344: PPUSH
27345: CALL_OW 314
27349: AND
27350: IFFALSE 27354
// exit ;
27352: GO 27493
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27354: LD_VAR 0 2
27358: PPUSH
27359: LD_VAR 0 3
27363: PPUSH
27364: CALL_OW 428
27368: PUSH
27369: LD_VAR 0 1
27373: EQUAL
27374: PUSH
27375: LD_VAR 0 1
27379: PPUSH
27380: CALL_OW 314
27384: NOT
27385: AND
27386: IFFALSE 27312
// PlaySoundXY ( x , y , PlantMine ) ;
27388: LD_VAR 0 2
27392: PPUSH
27393: LD_VAR 0 3
27397: PPUSH
27398: LD_STRING PlantMine
27400: PPUSH
27401: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27405: LD_VAR 0 2
27409: PPUSH
27410: LD_VAR 0 3
27414: PPUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL_OW 255
27424: PPUSH
27425: LD_INT 0
27427: PPUSH
27428: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27432: LD_ADDR_EXP 100
27436: PUSH
27437: LD_EXP 100
27441: PPUSH
27442: LD_VAR 0 5
27446: PUSH
27447: LD_EXP 100
27451: PUSH
27452: LD_VAR 0 5
27456: ARRAY
27457: PUSH
27458: LD_INT 1
27460: PLUS
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PPUSH
27466: LD_VAR 0 2
27470: PUSH
27471: LD_VAR 0 3
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PPUSH
27480: CALL 33652 0 3
27484: ST_TO_ADDR
// result := true ;
27485: LD_ADDR_VAR 0 4
27489: PUSH
27490: LD_INT 1
27492: ST_TO_ADDR
// end ;
27493: LD_VAR 0 4
27497: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27498: LD_INT 0
27500: PPUSH
27501: PPUSH
27502: PPUSH
// if not unit in minersList then
27503: LD_VAR 0 1
27507: PUSH
27508: LD_EXP 99
27512: IN
27513: NOT
27514: IFFALSE 27518
// exit ;
27516: GO 27910
// index := GetElementIndex ( minersList , unit ) ;
27518: LD_ADDR_VAR 0 6
27522: PUSH
27523: LD_EXP 99
27527: PPUSH
27528: LD_VAR 0 1
27532: PPUSH
27533: CALL 33437 0 2
27537: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27538: LD_ADDR_VAR 0 5
27542: PUSH
27543: DOUBLE
27544: LD_EXP 100
27548: PUSH
27549: LD_VAR 0 6
27553: ARRAY
27554: INC
27555: ST_TO_ADDR
27556: LD_INT 1
27558: PUSH
27559: FOR_DOWNTO
27560: IFFALSE 27721
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27562: LD_EXP 100
27566: PUSH
27567: LD_VAR 0 6
27571: ARRAY
27572: PUSH
27573: LD_VAR 0 5
27577: ARRAY
27578: PUSH
27579: LD_INT 1
27581: ARRAY
27582: PUSH
27583: LD_VAR 0 2
27587: EQUAL
27588: PUSH
27589: LD_EXP 100
27593: PUSH
27594: LD_VAR 0 6
27598: ARRAY
27599: PUSH
27600: LD_VAR 0 5
27604: ARRAY
27605: PUSH
27606: LD_INT 2
27608: ARRAY
27609: PUSH
27610: LD_VAR 0 3
27614: EQUAL
27615: AND
27616: IFFALSE 27719
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27618: LD_EXP 100
27622: PUSH
27623: LD_VAR 0 6
27627: ARRAY
27628: PUSH
27629: LD_VAR 0 5
27633: ARRAY
27634: PUSH
27635: LD_INT 1
27637: ARRAY
27638: PPUSH
27639: LD_EXP 100
27643: PUSH
27644: LD_VAR 0 6
27648: ARRAY
27649: PUSH
27650: LD_VAR 0 5
27654: ARRAY
27655: PUSH
27656: LD_INT 2
27658: ARRAY
27659: PPUSH
27660: LD_VAR 0 1
27664: PPUSH
27665: CALL_OW 255
27669: PPUSH
27670: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27674: LD_ADDR_EXP 100
27678: PUSH
27679: LD_EXP 100
27683: PPUSH
27684: LD_VAR 0 6
27688: PPUSH
27689: LD_EXP 100
27693: PUSH
27694: LD_VAR 0 6
27698: ARRAY
27699: PPUSH
27700: LD_VAR 0 5
27704: PPUSH
27705: CALL_OW 3
27709: PPUSH
27710: CALL_OW 1
27714: ST_TO_ADDR
// exit ;
27715: POP
27716: POP
27717: GO 27910
// end ; end ;
27719: GO 27559
27721: POP
27722: POP
// for i := minerMinesList [ index ] downto 1 do
27723: LD_ADDR_VAR 0 5
27727: PUSH
27728: DOUBLE
27729: LD_EXP 100
27733: PUSH
27734: LD_VAR 0 6
27738: ARRAY
27739: INC
27740: ST_TO_ADDR
27741: LD_INT 1
27743: PUSH
27744: FOR_DOWNTO
27745: IFFALSE 27908
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27747: LD_EXP 100
27751: PUSH
27752: LD_VAR 0 6
27756: ARRAY
27757: PUSH
27758: LD_VAR 0 5
27762: ARRAY
27763: PUSH
27764: LD_INT 1
27766: ARRAY
27767: PPUSH
27768: LD_EXP 100
27772: PUSH
27773: LD_VAR 0 6
27777: ARRAY
27778: PUSH
27779: LD_VAR 0 5
27783: ARRAY
27784: PUSH
27785: LD_INT 2
27787: ARRAY
27788: PPUSH
27789: LD_VAR 0 2
27793: PPUSH
27794: LD_VAR 0 3
27798: PPUSH
27799: CALL_OW 298
27803: PUSH
27804: LD_INT 6
27806: LESS
27807: IFFALSE 27906
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27809: LD_EXP 100
27813: PUSH
27814: LD_VAR 0 6
27818: ARRAY
27819: PUSH
27820: LD_VAR 0 5
27824: ARRAY
27825: PUSH
27826: LD_INT 1
27828: ARRAY
27829: PPUSH
27830: LD_EXP 100
27834: PUSH
27835: LD_VAR 0 6
27839: ARRAY
27840: PUSH
27841: LD_VAR 0 5
27845: ARRAY
27846: PUSH
27847: LD_INT 2
27849: ARRAY
27850: PPUSH
27851: LD_VAR 0 1
27855: PPUSH
27856: CALL_OW 255
27860: PPUSH
27861: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27865: LD_ADDR_EXP 100
27869: PUSH
27870: LD_EXP 100
27874: PPUSH
27875: LD_VAR 0 6
27879: PPUSH
27880: LD_EXP 100
27884: PUSH
27885: LD_VAR 0 6
27889: ARRAY
27890: PPUSH
27891: LD_VAR 0 5
27895: PPUSH
27896: CALL_OW 3
27900: PPUSH
27901: CALL_OW 1
27905: ST_TO_ADDR
// end ; end ;
27906: GO 27744
27908: POP
27909: POP
// end ;
27910: LD_VAR 0 4
27914: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27915: LD_INT 0
27917: PPUSH
27918: PPUSH
27919: PPUSH
27920: PPUSH
27921: PPUSH
27922: PPUSH
27923: PPUSH
27924: PPUSH
27925: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27926: LD_VAR 0 1
27930: PPUSH
27931: CALL_OW 264
27935: PUSH
27936: LD_EXP 28
27940: EQUAL
27941: NOT
27942: PUSH
27943: LD_VAR 0 1
27947: PUSH
27948: LD_EXP 99
27952: IN
27953: NOT
27954: OR
27955: IFFALSE 27959
// exit ;
27957: GO 28281
// index := GetElementIndex ( minersList , unit ) ;
27959: LD_ADDR_VAR 0 6
27963: PUSH
27964: LD_EXP 99
27968: PPUSH
27969: LD_VAR 0 1
27973: PPUSH
27974: CALL 33437 0 2
27978: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27979: LD_ADDR_VAR 0 8
27983: PUSH
27984: LD_EXP 101
27988: PUSH
27989: LD_EXP 100
27993: PUSH
27994: LD_VAR 0 6
27998: ARRAY
27999: MINUS
28000: ST_TO_ADDR
// if not minesFreeAmount then
28001: LD_VAR 0 8
28005: NOT
28006: IFFALSE 28010
// exit ;
28008: GO 28281
// tmp := [ ] ;
28010: LD_ADDR_VAR 0 7
28014: PUSH
28015: EMPTY
28016: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28017: LD_ADDR_VAR 0 5
28021: PUSH
28022: DOUBLE
28023: LD_INT 1
28025: DEC
28026: ST_TO_ADDR
28027: LD_VAR 0 8
28031: PUSH
28032: FOR_TO
28033: IFFALSE 28228
// begin _d := rand ( 0 , 5 ) ;
28035: LD_ADDR_VAR 0 11
28039: PUSH
28040: LD_INT 0
28042: PPUSH
28043: LD_INT 5
28045: PPUSH
28046: CALL_OW 12
28050: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28051: LD_ADDR_VAR 0 12
28055: PUSH
28056: LD_INT 2
28058: PPUSH
28059: LD_INT 6
28061: PPUSH
28062: CALL_OW 12
28066: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28067: LD_ADDR_VAR 0 9
28071: PUSH
28072: LD_VAR 0 2
28076: PPUSH
28077: LD_VAR 0 11
28081: PPUSH
28082: LD_VAR 0 12
28086: PPUSH
28087: CALL_OW 272
28091: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28092: LD_ADDR_VAR 0 10
28096: PUSH
28097: LD_VAR 0 3
28101: PPUSH
28102: LD_VAR 0 11
28106: PPUSH
28107: LD_VAR 0 12
28111: PPUSH
28112: CALL_OW 273
28116: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28117: LD_VAR 0 9
28121: PPUSH
28122: LD_VAR 0 10
28126: PPUSH
28127: CALL_OW 488
28131: PUSH
28132: LD_VAR 0 9
28136: PUSH
28137: LD_VAR 0 10
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_VAR 0 7
28150: IN
28151: NOT
28152: AND
28153: PUSH
28154: LD_VAR 0 9
28158: PPUSH
28159: LD_VAR 0 10
28163: PPUSH
28164: CALL_OW 458
28168: NOT
28169: AND
28170: IFFALSE 28212
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28172: LD_ADDR_VAR 0 7
28176: PUSH
28177: LD_VAR 0 7
28181: PPUSH
28182: LD_VAR 0 7
28186: PUSH
28187: LD_INT 1
28189: PLUS
28190: PPUSH
28191: LD_VAR 0 9
28195: PUSH
28196: LD_VAR 0 10
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PPUSH
28205: CALL_OW 1
28209: ST_TO_ADDR
28210: GO 28226
// i := i - 1 ;
28212: LD_ADDR_VAR 0 5
28216: PUSH
28217: LD_VAR 0 5
28221: PUSH
28222: LD_INT 1
28224: MINUS
28225: ST_TO_ADDR
// end ;
28226: GO 28032
28228: POP
28229: POP
// for i in tmp do
28230: LD_ADDR_VAR 0 5
28234: PUSH
28235: LD_VAR 0 7
28239: PUSH
28240: FOR_IN
28241: IFFALSE 28279
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28243: LD_VAR 0 1
28247: PPUSH
28248: LD_VAR 0 5
28252: PUSH
28253: LD_INT 1
28255: ARRAY
28256: PPUSH
28257: LD_VAR 0 5
28261: PUSH
28262: LD_INT 2
28264: ARRAY
28265: PPUSH
28266: CALL 27221 0 3
28270: NOT
28271: IFFALSE 28277
// exit ;
28273: POP
28274: POP
28275: GO 28281
28277: GO 28240
28279: POP
28280: POP
// end ;
28281: LD_VAR 0 4
28285: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28286: LD_INT 0
28288: PPUSH
28289: PPUSH
28290: PPUSH
28291: PPUSH
28292: PPUSH
28293: PPUSH
28294: PPUSH
// if not GetClass ( unit ) = class_sniper then
28295: LD_VAR 0 1
28299: PPUSH
28300: CALL_OW 257
28304: PUSH
28305: LD_INT 5
28307: EQUAL
28308: NOT
28309: IFFALSE 28313
// exit ;
28311: GO 28701
// dist := 8 ;
28313: LD_ADDR_VAR 0 5
28317: PUSH
28318: LD_INT 8
28320: ST_TO_ADDR
// viewRange := 12 ;
28321: LD_ADDR_VAR 0 7
28325: PUSH
28326: LD_INT 12
28328: ST_TO_ADDR
// side := GetSide ( unit ) ;
28329: LD_ADDR_VAR 0 6
28333: PUSH
28334: LD_VAR 0 1
28338: PPUSH
28339: CALL_OW 255
28343: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28344: LD_INT 61
28346: PPUSH
28347: LD_VAR 0 6
28351: PPUSH
28352: CALL_OW 321
28356: PUSH
28357: LD_INT 2
28359: EQUAL
28360: IFFALSE 28370
// viewRange := 16 ;
28362: LD_ADDR_VAR 0 7
28366: PUSH
28367: LD_INT 16
28369: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28370: LD_VAR 0 1
28374: PPUSH
28375: LD_VAR 0 2
28379: PPUSH
28380: LD_VAR 0 3
28384: PPUSH
28385: CALL_OW 297
28389: PUSH
28390: LD_VAR 0 5
28394: GREATER
28395: IFFALSE 28474
// begin ComMoveXY ( unit , x , y ) ;
28397: LD_VAR 0 1
28401: PPUSH
28402: LD_VAR 0 2
28406: PPUSH
28407: LD_VAR 0 3
28411: PPUSH
28412: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28416: LD_INT 35
28418: PPUSH
28419: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28423: LD_VAR 0 1
28427: PPUSH
28428: LD_VAR 0 2
28432: PPUSH
28433: LD_VAR 0 3
28437: PPUSH
28438: CALL 63501 0 3
28442: NOT
28443: IFFALSE 28447
// exit ;
28445: GO 28701
// until GetDistUnitXY ( unit , x , y ) < dist ;
28447: LD_VAR 0 1
28451: PPUSH
28452: LD_VAR 0 2
28456: PPUSH
28457: LD_VAR 0 3
28461: PPUSH
28462: CALL_OW 297
28466: PUSH
28467: LD_VAR 0 5
28471: LESS
28472: IFFALSE 28416
// end ; ComTurnXY ( unit , x , y ) ;
28474: LD_VAR 0 1
28478: PPUSH
28479: LD_VAR 0 2
28483: PPUSH
28484: LD_VAR 0 3
28488: PPUSH
28489: CALL_OW 118
// wait ( 5 ) ;
28493: LD_INT 5
28495: PPUSH
28496: CALL_OW 67
// _d := GetDir ( unit ) ;
28500: LD_ADDR_VAR 0 10
28504: PUSH
28505: LD_VAR 0 1
28509: PPUSH
28510: CALL_OW 254
28514: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28515: LD_ADDR_VAR 0 8
28519: PUSH
28520: LD_VAR 0 1
28524: PPUSH
28525: CALL_OW 250
28529: PPUSH
28530: LD_VAR 0 10
28534: PPUSH
28535: LD_VAR 0 5
28539: PPUSH
28540: CALL_OW 272
28544: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28545: LD_ADDR_VAR 0 9
28549: PUSH
28550: LD_VAR 0 1
28554: PPUSH
28555: CALL_OW 251
28559: PPUSH
28560: LD_VAR 0 10
28564: PPUSH
28565: LD_VAR 0 5
28569: PPUSH
28570: CALL_OW 273
28574: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28575: LD_VAR 0 8
28579: PPUSH
28580: LD_VAR 0 9
28584: PPUSH
28585: CALL_OW 488
28589: NOT
28590: IFFALSE 28594
// exit ;
28592: GO 28701
// ComAnimCustom ( unit , 1 ) ;
28594: LD_VAR 0 1
28598: PPUSH
28599: LD_INT 1
28601: PPUSH
28602: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28606: LD_VAR 0 8
28610: PPUSH
28611: LD_VAR 0 9
28615: PPUSH
28616: LD_VAR 0 6
28620: PPUSH
28621: LD_VAR 0 7
28625: PPUSH
28626: CALL_OW 330
// repeat wait ( 1 ) ;
28630: LD_INT 1
28632: PPUSH
28633: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28637: LD_VAR 0 1
28641: PPUSH
28642: CALL_OW 316
28646: PUSH
28647: LD_VAR 0 1
28651: PPUSH
28652: CALL_OW 314
28656: OR
28657: PUSH
28658: LD_VAR 0 1
28662: PPUSH
28663: CALL_OW 302
28667: NOT
28668: OR
28669: PUSH
28670: LD_VAR 0 1
28674: PPUSH
28675: CALL_OW 301
28679: OR
28680: IFFALSE 28630
// RemoveSeeing ( _x , _y , side ) ;
28682: LD_VAR 0 8
28686: PPUSH
28687: LD_VAR 0 9
28691: PPUSH
28692: LD_VAR 0 6
28696: PPUSH
28697: CALL_OW 331
// end ; end_of_file
28701: LD_VAR 0 4
28705: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28706: LD_INT 0
28708: PPUSH
28709: PPUSH
// if exist_mode then
28710: LD_VAR 0 2
28714: IFFALSE 28739
// unit := CreateCharacter ( prefix & ident ) else
28716: LD_ADDR_VAR 0 5
28720: PUSH
28721: LD_VAR 0 3
28725: PUSH
28726: LD_VAR 0 1
28730: STR
28731: PPUSH
28732: CALL_OW 34
28736: ST_TO_ADDR
28737: GO 28754
// unit := NewCharacter ( ident ) ;
28739: LD_ADDR_VAR 0 5
28743: PUSH
28744: LD_VAR 0 1
28748: PPUSH
28749: CALL_OW 25
28753: ST_TO_ADDR
// result := unit ;
28754: LD_ADDR_VAR 0 4
28758: PUSH
28759: LD_VAR 0 5
28763: ST_TO_ADDR
// end ;
28764: LD_VAR 0 4
28768: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28769: LD_INT 0
28771: PPUSH
28772: PPUSH
// if not side or not nation then
28773: LD_VAR 0 1
28777: NOT
28778: PUSH
28779: LD_VAR 0 2
28783: NOT
28784: OR
28785: IFFALSE 28789
// exit ;
28787: GO 29553
// case nation of nation_american :
28789: LD_VAR 0 2
28793: PUSH
28794: LD_INT 1
28796: DOUBLE
28797: EQUAL
28798: IFTRUE 28802
28800: GO 29016
28802: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28803: LD_ADDR_VAR 0 4
28807: PUSH
28808: LD_INT 35
28810: PUSH
28811: LD_INT 45
28813: PUSH
28814: LD_INT 46
28816: PUSH
28817: LD_INT 47
28819: PUSH
28820: LD_INT 82
28822: PUSH
28823: LD_INT 83
28825: PUSH
28826: LD_INT 84
28828: PUSH
28829: LD_INT 85
28831: PUSH
28832: LD_INT 86
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: LD_INT 2
28840: PUSH
28841: LD_INT 6
28843: PUSH
28844: LD_INT 15
28846: PUSH
28847: LD_INT 16
28849: PUSH
28850: LD_INT 7
28852: PUSH
28853: LD_INT 12
28855: PUSH
28856: LD_INT 13
28858: PUSH
28859: LD_INT 10
28861: PUSH
28862: LD_INT 14
28864: PUSH
28865: LD_INT 20
28867: PUSH
28868: LD_INT 21
28870: PUSH
28871: LD_INT 22
28873: PUSH
28874: LD_INT 25
28876: PUSH
28877: LD_INT 32
28879: PUSH
28880: LD_INT 27
28882: PUSH
28883: LD_INT 36
28885: PUSH
28886: LD_INT 69
28888: PUSH
28889: LD_INT 39
28891: PUSH
28892: LD_INT 34
28894: PUSH
28895: LD_INT 40
28897: PUSH
28898: LD_INT 48
28900: PUSH
28901: LD_INT 49
28903: PUSH
28904: LD_INT 50
28906: PUSH
28907: LD_INT 51
28909: PUSH
28910: LD_INT 52
28912: PUSH
28913: LD_INT 53
28915: PUSH
28916: LD_INT 54
28918: PUSH
28919: LD_INT 55
28921: PUSH
28922: LD_INT 56
28924: PUSH
28925: LD_INT 57
28927: PUSH
28928: LD_INT 58
28930: PUSH
28931: LD_INT 59
28933: PUSH
28934: LD_INT 60
28936: PUSH
28937: LD_INT 61
28939: PUSH
28940: LD_INT 62
28942: PUSH
28943: LD_INT 80
28945: PUSH
28946: LD_INT 82
28948: PUSH
28949: LD_INT 83
28951: PUSH
28952: LD_INT 84
28954: PUSH
28955: LD_INT 85
28957: PUSH
28958: LD_INT 86
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: ST_TO_ADDR
29014: GO 29477
29016: LD_INT 2
29018: DOUBLE
29019: EQUAL
29020: IFTRUE 29024
29022: GO 29246
29024: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29025: LD_ADDR_VAR 0 4
29029: PUSH
29030: LD_INT 35
29032: PUSH
29033: LD_INT 45
29035: PUSH
29036: LD_INT 46
29038: PUSH
29039: LD_INT 47
29041: PUSH
29042: LD_INT 82
29044: PUSH
29045: LD_INT 83
29047: PUSH
29048: LD_INT 84
29050: PUSH
29051: LD_INT 85
29053: PUSH
29054: LD_INT 87
29056: PUSH
29057: LD_INT 70
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: LD_INT 11
29065: PUSH
29066: LD_INT 3
29068: PUSH
29069: LD_INT 4
29071: PUSH
29072: LD_INT 5
29074: PUSH
29075: LD_INT 6
29077: PUSH
29078: LD_INT 15
29080: PUSH
29081: LD_INT 18
29083: PUSH
29084: LD_INT 7
29086: PUSH
29087: LD_INT 17
29089: PUSH
29090: LD_INT 8
29092: PUSH
29093: LD_INT 20
29095: PUSH
29096: LD_INT 21
29098: PUSH
29099: LD_INT 22
29101: PUSH
29102: LD_INT 72
29104: PUSH
29105: LD_INT 26
29107: PUSH
29108: LD_INT 69
29110: PUSH
29111: LD_INT 39
29113: PUSH
29114: LD_INT 40
29116: PUSH
29117: LD_INT 41
29119: PUSH
29120: LD_INT 42
29122: PUSH
29123: LD_INT 43
29125: PUSH
29126: LD_INT 48
29128: PUSH
29129: LD_INT 49
29131: PUSH
29132: LD_INT 50
29134: PUSH
29135: LD_INT 51
29137: PUSH
29138: LD_INT 52
29140: PUSH
29141: LD_INT 53
29143: PUSH
29144: LD_INT 54
29146: PUSH
29147: LD_INT 55
29149: PUSH
29150: LD_INT 56
29152: PUSH
29153: LD_INT 60
29155: PUSH
29156: LD_INT 61
29158: PUSH
29159: LD_INT 62
29161: PUSH
29162: LD_INT 66
29164: PUSH
29165: LD_INT 67
29167: PUSH
29168: LD_INT 68
29170: PUSH
29171: LD_INT 81
29173: PUSH
29174: LD_INT 82
29176: PUSH
29177: LD_INT 83
29179: PUSH
29180: LD_INT 84
29182: PUSH
29183: LD_INT 85
29185: PUSH
29186: LD_INT 87
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: ST_TO_ADDR
29244: GO 29477
29246: LD_INT 3
29248: DOUBLE
29249: EQUAL
29250: IFTRUE 29254
29252: GO 29476
29254: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29255: LD_ADDR_VAR 0 4
29259: PUSH
29260: LD_INT 46
29262: PUSH
29263: LD_INT 47
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: LD_INT 82
29274: PUSH
29275: LD_INT 83
29277: PUSH
29278: LD_INT 84
29280: PUSH
29281: LD_INT 85
29283: PUSH
29284: LD_INT 86
29286: PUSH
29287: LD_INT 11
29289: PUSH
29290: LD_INT 9
29292: PUSH
29293: LD_INT 20
29295: PUSH
29296: LD_INT 19
29298: PUSH
29299: LD_INT 21
29301: PUSH
29302: LD_INT 24
29304: PUSH
29305: LD_INT 22
29307: PUSH
29308: LD_INT 25
29310: PUSH
29311: LD_INT 28
29313: PUSH
29314: LD_INT 29
29316: PUSH
29317: LD_INT 30
29319: PUSH
29320: LD_INT 31
29322: PUSH
29323: LD_INT 37
29325: PUSH
29326: LD_INT 38
29328: PUSH
29329: LD_INT 32
29331: PUSH
29332: LD_INT 27
29334: PUSH
29335: LD_INT 33
29337: PUSH
29338: LD_INT 69
29340: PUSH
29341: LD_INT 39
29343: PUSH
29344: LD_INT 34
29346: PUSH
29347: LD_INT 40
29349: PUSH
29350: LD_INT 71
29352: PUSH
29353: LD_INT 23
29355: PUSH
29356: LD_INT 44
29358: PUSH
29359: LD_INT 48
29361: PUSH
29362: LD_INT 49
29364: PUSH
29365: LD_INT 50
29367: PUSH
29368: LD_INT 51
29370: PUSH
29371: LD_INT 52
29373: PUSH
29374: LD_INT 53
29376: PUSH
29377: LD_INT 54
29379: PUSH
29380: LD_INT 55
29382: PUSH
29383: LD_INT 56
29385: PUSH
29386: LD_INT 57
29388: PUSH
29389: LD_INT 58
29391: PUSH
29392: LD_INT 59
29394: PUSH
29395: LD_INT 63
29397: PUSH
29398: LD_INT 64
29400: PUSH
29401: LD_INT 65
29403: PUSH
29404: LD_INT 82
29406: PUSH
29407: LD_INT 83
29409: PUSH
29410: LD_INT 84
29412: PUSH
29413: LD_INT 85
29415: PUSH
29416: LD_INT 86
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
29474: GO 29477
29476: POP
// if state > - 1 and state < 3 then
29477: LD_VAR 0 3
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: GREATER
29486: PUSH
29487: LD_VAR 0 3
29491: PUSH
29492: LD_INT 3
29494: LESS
29495: AND
29496: IFFALSE 29553
// for i in result do
29498: LD_ADDR_VAR 0 5
29502: PUSH
29503: LD_VAR 0 4
29507: PUSH
29508: FOR_IN
29509: IFFALSE 29551
// if GetTech ( i , side ) <> state then
29511: LD_VAR 0 5
29515: PPUSH
29516: LD_VAR 0 1
29520: PPUSH
29521: CALL_OW 321
29525: PUSH
29526: LD_VAR 0 3
29530: NONEQUAL
29531: IFFALSE 29549
// result := result diff i ;
29533: LD_ADDR_VAR 0 4
29537: PUSH
29538: LD_VAR 0 4
29542: PUSH
29543: LD_VAR 0 5
29547: DIFF
29548: ST_TO_ADDR
29549: GO 29508
29551: POP
29552: POP
// end ;
29553: LD_VAR 0 4
29557: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29558: LD_INT 0
29560: PPUSH
29561: PPUSH
29562: PPUSH
// result := true ;
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: LD_INT 1
29570: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29571: LD_ADDR_VAR 0 5
29575: PUSH
29576: LD_VAR 0 2
29580: PPUSH
29581: CALL_OW 480
29585: ST_TO_ADDR
// if not tmp then
29586: LD_VAR 0 5
29590: NOT
29591: IFFALSE 29595
// exit ;
29593: GO 29644
// for i in tmp do
29595: LD_ADDR_VAR 0 4
29599: PUSH
29600: LD_VAR 0 5
29604: PUSH
29605: FOR_IN
29606: IFFALSE 29642
// if GetTech ( i , side ) <> state_researched then
29608: LD_VAR 0 4
29612: PPUSH
29613: LD_VAR 0 1
29617: PPUSH
29618: CALL_OW 321
29622: PUSH
29623: LD_INT 2
29625: NONEQUAL
29626: IFFALSE 29640
// begin result := false ;
29628: LD_ADDR_VAR 0 3
29632: PUSH
29633: LD_INT 0
29635: ST_TO_ADDR
// exit ;
29636: POP
29637: POP
29638: GO 29644
// end ;
29640: GO 29605
29642: POP
29643: POP
// end ;
29644: LD_VAR 0 3
29648: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29649: LD_INT 0
29651: PPUSH
29652: PPUSH
29653: PPUSH
29654: PPUSH
29655: PPUSH
29656: PPUSH
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29664: LD_VAR 0 1
29668: NOT
29669: PUSH
29670: LD_VAR 0 1
29674: PPUSH
29675: CALL_OW 257
29679: PUSH
29680: LD_INT 9
29682: NONEQUAL
29683: OR
29684: IFFALSE 29688
// exit ;
29686: GO 30261
// side := GetSide ( unit ) ;
29688: LD_ADDR_VAR 0 9
29692: PUSH
29693: LD_VAR 0 1
29697: PPUSH
29698: CALL_OW 255
29702: ST_TO_ADDR
// tech_space := tech_spacanom ;
29703: LD_ADDR_VAR 0 12
29707: PUSH
29708: LD_INT 29
29710: ST_TO_ADDR
// tech_time := tech_taurad ;
29711: LD_ADDR_VAR 0 13
29715: PUSH
29716: LD_INT 28
29718: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29719: LD_ADDR_VAR 0 11
29723: PUSH
29724: LD_VAR 0 1
29728: PPUSH
29729: CALL_OW 310
29733: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29734: LD_VAR 0 11
29738: PPUSH
29739: CALL_OW 247
29743: PUSH
29744: LD_INT 2
29746: EQUAL
29747: IFFALSE 29751
// exit ;
29749: GO 30261
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29751: LD_ADDR_VAR 0 8
29755: PUSH
29756: LD_INT 81
29758: PUSH
29759: LD_VAR 0 9
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: LD_INT 21
29773: PUSH
29774: LD_INT 3
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PPUSH
29789: CALL_OW 69
29793: ST_TO_ADDR
// if not tmp then
29794: LD_VAR 0 8
29798: NOT
29799: IFFALSE 29803
// exit ;
29801: GO 30261
// if in_unit then
29803: LD_VAR 0 11
29807: IFFALSE 29831
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29809: LD_ADDR_VAR 0 10
29813: PUSH
29814: LD_VAR 0 8
29818: PPUSH
29819: LD_VAR 0 11
29823: PPUSH
29824: CALL_OW 74
29828: ST_TO_ADDR
29829: GO 29851
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29831: LD_ADDR_VAR 0 10
29835: PUSH
29836: LD_VAR 0 8
29840: PPUSH
29841: LD_VAR 0 1
29845: PPUSH
29846: CALL_OW 74
29850: ST_TO_ADDR
// if not enemy then
29851: LD_VAR 0 10
29855: NOT
29856: IFFALSE 29860
// exit ;
29858: GO 30261
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29860: LD_VAR 0 11
29864: PUSH
29865: LD_VAR 0 11
29869: PPUSH
29870: LD_VAR 0 10
29874: PPUSH
29875: CALL_OW 296
29879: PUSH
29880: LD_INT 13
29882: GREATER
29883: AND
29884: PUSH
29885: LD_VAR 0 1
29889: PPUSH
29890: LD_VAR 0 10
29894: PPUSH
29895: CALL_OW 296
29899: PUSH
29900: LD_INT 12
29902: GREATER
29903: OR
29904: IFFALSE 29908
// exit ;
29906: GO 30261
// missile := [ 1 ] ;
29908: LD_ADDR_VAR 0 14
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: EMPTY
29917: LIST
29918: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29919: LD_VAR 0 9
29923: PPUSH
29924: LD_VAR 0 12
29928: PPUSH
29929: CALL_OW 325
29933: IFFALSE 29962
// missile := Insert ( missile , missile + 1 , 2 ) ;
29935: LD_ADDR_VAR 0 14
29939: PUSH
29940: LD_VAR 0 14
29944: PPUSH
29945: LD_VAR 0 14
29949: PUSH
29950: LD_INT 1
29952: PLUS
29953: PPUSH
29954: LD_INT 2
29956: PPUSH
29957: CALL_OW 2
29961: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29962: LD_VAR 0 9
29966: PPUSH
29967: LD_VAR 0 13
29971: PPUSH
29972: CALL_OW 325
29976: PUSH
29977: LD_VAR 0 10
29981: PPUSH
29982: CALL_OW 255
29986: PPUSH
29987: LD_VAR 0 13
29991: PPUSH
29992: CALL_OW 325
29996: NOT
29997: AND
29998: IFFALSE 30027
// missile := Insert ( missile , missile + 1 , 3 ) ;
30000: LD_ADDR_VAR 0 14
30004: PUSH
30005: LD_VAR 0 14
30009: PPUSH
30010: LD_VAR 0 14
30014: PUSH
30015: LD_INT 1
30017: PLUS
30018: PPUSH
30019: LD_INT 3
30021: PPUSH
30022: CALL_OW 2
30026: ST_TO_ADDR
// if missile < 2 then
30027: LD_VAR 0 14
30031: PUSH
30032: LD_INT 2
30034: LESS
30035: IFFALSE 30039
// exit ;
30037: GO 30261
// x := GetX ( enemy ) ;
30039: LD_ADDR_VAR 0 4
30043: PUSH
30044: LD_VAR 0 10
30048: PPUSH
30049: CALL_OW 250
30053: ST_TO_ADDR
// y := GetY ( enemy ) ;
30054: LD_ADDR_VAR 0 5
30058: PUSH
30059: LD_VAR 0 10
30063: PPUSH
30064: CALL_OW 251
30068: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30069: LD_ADDR_VAR 0 6
30073: PUSH
30074: LD_VAR 0 4
30078: PUSH
30079: LD_INT 1
30081: NEG
30082: PPUSH
30083: LD_INT 1
30085: PPUSH
30086: CALL_OW 12
30090: PLUS
30091: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30092: LD_ADDR_VAR 0 7
30096: PUSH
30097: LD_VAR 0 5
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PPUSH
30106: LD_INT 1
30108: PPUSH
30109: CALL_OW 12
30113: PLUS
30114: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30115: LD_VAR 0 6
30119: PPUSH
30120: LD_VAR 0 7
30124: PPUSH
30125: CALL_OW 488
30129: NOT
30130: IFFALSE 30152
// begin _x := x ;
30132: LD_ADDR_VAR 0 6
30136: PUSH
30137: LD_VAR 0 4
30141: ST_TO_ADDR
// _y := y ;
30142: LD_ADDR_VAR 0 7
30146: PUSH
30147: LD_VAR 0 5
30151: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30152: LD_ADDR_VAR 0 3
30156: PUSH
30157: LD_INT 1
30159: PPUSH
30160: LD_VAR 0 14
30164: PPUSH
30165: CALL_OW 12
30169: ST_TO_ADDR
// case i of 1 :
30170: LD_VAR 0 3
30174: PUSH
30175: LD_INT 1
30177: DOUBLE
30178: EQUAL
30179: IFTRUE 30183
30181: GO 30200
30183: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30184: LD_VAR 0 1
30188: PPUSH
30189: LD_VAR 0 10
30193: PPUSH
30194: CALL_OW 115
30198: GO 30261
30200: LD_INT 2
30202: DOUBLE
30203: EQUAL
30204: IFTRUE 30208
30206: GO 30230
30208: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30209: LD_VAR 0 1
30213: PPUSH
30214: LD_VAR 0 6
30218: PPUSH
30219: LD_VAR 0 7
30223: PPUSH
30224: CALL_OW 153
30228: GO 30261
30230: LD_INT 3
30232: DOUBLE
30233: EQUAL
30234: IFTRUE 30238
30236: GO 30260
30238: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30239: LD_VAR 0 1
30243: PPUSH
30244: LD_VAR 0 6
30248: PPUSH
30249: LD_VAR 0 7
30253: PPUSH
30254: CALL_OW 154
30258: GO 30261
30260: POP
// end ;
30261: LD_VAR 0 2
30265: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30266: LD_INT 0
30268: PPUSH
30269: PPUSH
30270: PPUSH
30271: PPUSH
30272: PPUSH
30273: PPUSH
// if not unit or not building then
30274: LD_VAR 0 1
30278: NOT
30279: PUSH
30280: LD_VAR 0 2
30284: NOT
30285: OR
30286: IFFALSE 30290
// exit ;
30288: GO 30448
// x := GetX ( building ) ;
30290: LD_ADDR_VAR 0 5
30294: PUSH
30295: LD_VAR 0 2
30299: PPUSH
30300: CALL_OW 250
30304: ST_TO_ADDR
// y := GetY ( building ) ;
30305: LD_ADDR_VAR 0 6
30309: PUSH
30310: LD_VAR 0 2
30314: PPUSH
30315: CALL_OW 251
30319: ST_TO_ADDR
// for i = 0 to 5 do
30320: LD_ADDR_VAR 0 4
30324: PUSH
30325: DOUBLE
30326: LD_INT 0
30328: DEC
30329: ST_TO_ADDR
30330: LD_INT 5
30332: PUSH
30333: FOR_TO
30334: IFFALSE 30446
// begin _x := ShiftX ( x , i , 3 ) ;
30336: LD_ADDR_VAR 0 7
30340: PUSH
30341: LD_VAR 0 5
30345: PPUSH
30346: LD_VAR 0 4
30350: PPUSH
30351: LD_INT 3
30353: PPUSH
30354: CALL_OW 272
30358: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30359: LD_ADDR_VAR 0 8
30363: PUSH
30364: LD_VAR 0 6
30368: PPUSH
30369: LD_VAR 0 4
30373: PPUSH
30374: LD_INT 3
30376: PPUSH
30377: CALL_OW 273
30381: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30382: LD_VAR 0 7
30386: PPUSH
30387: LD_VAR 0 8
30391: PPUSH
30392: CALL_OW 488
30396: NOT
30397: IFFALSE 30401
// continue ;
30399: GO 30333
// if HexInfo ( _x , _y ) = 0 then
30401: LD_VAR 0 7
30405: PPUSH
30406: LD_VAR 0 8
30410: PPUSH
30411: CALL_OW 428
30415: PUSH
30416: LD_INT 0
30418: EQUAL
30419: IFFALSE 30444
// begin ComMoveXY ( unit , _x , _y ) ;
30421: LD_VAR 0 1
30425: PPUSH
30426: LD_VAR 0 7
30430: PPUSH
30431: LD_VAR 0 8
30435: PPUSH
30436: CALL_OW 111
// exit ;
30440: POP
30441: POP
30442: GO 30448
// end ; end ;
30444: GO 30333
30446: POP
30447: POP
// end ;
30448: LD_VAR 0 3
30452: RET
// export function ScanBase ( side , base_area ) ; begin
30453: LD_INT 0
30455: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30456: LD_ADDR_VAR 0 3
30460: PUSH
30461: LD_VAR 0 2
30465: PPUSH
30466: LD_INT 81
30468: PUSH
30469: LD_VAR 0 1
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PPUSH
30478: CALL_OW 70
30482: ST_TO_ADDR
// end ;
30483: LD_VAR 0 3
30487: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30488: LD_INT 0
30490: PPUSH
30491: PPUSH
30492: PPUSH
30493: PPUSH
// result := false ;
30494: LD_ADDR_VAR 0 2
30498: PUSH
30499: LD_INT 0
30501: ST_TO_ADDR
// side := GetSide ( unit ) ;
30502: LD_ADDR_VAR 0 3
30506: PUSH
30507: LD_VAR 0 1
30511: PPUSH
30512: CALL_OW 255
30516: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30517: LD_ADDR_VAR 0 4
30521: PUSH
30522: LD_VAR 0 1
30526: PPUSH
30527: CALL_OW 248
30531: ST_TO_ADDR
// case nat of 1 :
30532: LD_VAR 0 4
30536: PUSH
30537: LD_INT 1
30539: DOUBLE
30540: EQUAL
30541: IFTRUE 30545
30543: GO 30556
30545: POP
// tech := tech_lassight ; 2 :
30546: LD_ADDR_VAR 0 5
30550: PUSH
30551: LD_INT 12
30553: ST_TO_ADDR
30554: GO 30595
30556: LD_INT 2
30558: DOUBLE
30559: EQUAL
30560: IFTRUE 30564
30562: GO 30575
30564: POP
// tech := tech_mortar ; 3 :
30565: LD_ADDR_VAR 0 5
30569: PUSH
30570: LD_INT 41
30572: ST_TO_ADDR
30573: GO 30595
30575: LD_INT 3
30577: DOUBLE
30578: EQUAL
30579: IFTRUE 30583
30581: GO 30594
30583: POP
// tech := tech_bazooka ; end ;
30584: LD_ADDR_VAR 0 5
30588: PUSH
30589: LD_INT 44
30591: ST_TO_ADDR
30592: GO 30595
30594: POP
// if Researched ( side , tech ) then
30595: LD_VAR 0 3
30599: PPUSH
30600: LD_VAR 0 5
30604: PPUSH
30605: CALL_OW 325
30609: IFFALSE 30636
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30611: LD_ADDR_VAR 0 2
30615: PUSH
30616: LD_INT 5
30618: PUSH
30619: LD_INT 8
30621: PUSH
30622: LD_INT 9
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: LIST
30629: PUSH
30630: LD_VAR 0 4
30634: ARRAY
30635: ST_TO_ADDR
// end ;
30636: LD_VAR 0 2
30640: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30641: LD_INT 0
30643: PPUSH
30644: PPUSH
30645: PPUSH
// if not mines then
30646: LD_VAR 0 2
30650: NOT
30651: IFFALSE 30655
// exit ;
30653: GO 30799
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30655: LD_ADDR_VAR 0 5
30659: PUSH
30660: LD_INT 81
30662: PUSH
30663: LD_VAR 0 1
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 3
30674: PUSH
30675: LD_INT 21
30677: PUSH
30678: LD_INT 3
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PPUSH
30693: CALL_OW 69
30697: ST_TO_ADDR
// for i in mines do
30698: LD_ADDR_VAR 0 4
30702: PUSH
30703: LD_VAR 0 2
30707: PUSH
30708: FOR_IN
30709: IFFALSE 30797
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30711: LD_VAR 0 4
30715: PUSH
30716: LD_INT 1
30718: ARRAY
30719: PPUSH
30720: LD_VAR 0 4
30724: PUSH
30725: LD_INT 2
30727: ARRAY
30728: PPUSH
30729: CALL_OW 458
30733: NOT
30734: IFFALSE 30738
// continue ;
30736: GO 30708
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30738: LD_VAR 0 4
30742: PUSH
30743: LD_INT 1
30745: ARRAY
30746: PPUSH
30747: LD_VAR 0 4
30751: PUSH
30752: LD_INT 2
30754: ARRAY
30755: PPUSH
30756: CALL_OW 428
30760: PUSH
30761: LD_VAR 0 5
30765: IN
30766: IFFALSE 30795
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30768: LD_VAR 0 4
30772: PUSH
30773: LD_INT 1
30775: ARRAY
30776: PPUSH
30777: LD_VAR 0 4
30781: PUSH
30782: LD_INT 2
30784: ARRAY
30785: PPUSH
30786: LD_VAR 0 1
30790: PPUSH
30791: CALL_OW 456
// end ;
30795: GO 30708
30797: POP
30798: POP
// end ;
30799: LD_VAR 0 3
30803: RET
// export function Count ( array ) ; var i ; begin
30804: LD_INT 0
30806: PPUSH
30807: PPUSH
// result := 0 ;
30808: LD_ADDR_VAR 0 2
30812: PUSH
30813: LD_INT 0
30815: ST_TO_ADDR
// for i in array do
30816: LD_ADDR_VAR 0 3
30820: PUSH
30821: LD_VAR 0 1
30825: PUSH
30826: FOR_IN
30827: IFFALSE 30851
// if i then
30829: LD_VAR 0 3
30833: IFFALSE 30849
// result := result + 1 ;
30835: LD_ADDR_VAR 0 2
30839: PUSH
30840: LD_VAR 0 2
30844: PUSH
30845: LD_INT 1
30847: PLUS
30848: ST_TO_ADDR
30849: GO 30826
30851: POP
30852: POP
// end ;
30853: LD_VAR 0 2
30857: RET
// export function IsEmpty ( building ) ; begin
30858: LD_INT 0
30860: PPUSH
// if not building then
30861: LD_VAR 0 1
30865: NOT
30866: IFFALSE 30870
// exit ;
30868: GO 30913
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30870: LD_ADDR_VAR 0 2
30874: PUSH
30875: LD_VAR 0 1
30879: PUSH
30880: LD_INT 22
30882: PUSH
30883: LD_VAR 0 1
30887: PPUSH
30888: CALL_OW 255
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 58
30899: PUSH
30900: EMPTY
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PPUSH
30907: CALL_OW 69
30911: IN
30912: ST_TO_ADDR
// end ;
30913: LD_VAR 0 2
30917: RET
// export function IsNotFull ( building ) ; begin
30918: LD_INT 0
30920: PPUSH
// if not building then
30921: LD_VAR 0 1
30925: NOT
30926: IFFALSE 30930
// exit ;
30928: GO 30949
// result := UnitsInside ( building ) < 6 ;
30930: LD_ADDR_VAR 0 2
30934: PUSH
30935: LD_VAR 0 1
30939: PPUSH
30940: CALL_OW 313
30944: PUSH
30945: LD_INT 6
30947: LESS
30948: ST_TO_ADDR
// end ;
30949: LD_VAR 0 2
30953: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30954: LD_INT 0
30956: PPUSH
30957: PPUSH
30958: PPUSH
30959: PPUSH
// tmp := [ ] ;
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: EMPTY
30966: ST_TO_ADDR
// list := [ ] ;
30967: LD_ADDR_VAR 0 5
30971: PUSH
30972: EMPTY
30973: ST_TO_ADDR
// for i = 16 to 25 do
30974: LD_ADDR_VAR 0 4
30978: PUSH
30979: DOUBLE
30980: LD_INT 16
30982: DEC
30983: ST_TO_ADDR
30984: LD_INT 25
30986: PUSH
30987: FOR_TO
30988: IFFALSE 31061
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30990: LD_ADDR_VAR 0 3
30994: PUSH
30995: LD_VAR 0 3
30999: PUSH
31000: LD_INT 22
31002: PUSH
31003: LD_VAR 0 1
31007: PPUSH
31008: CALL_OW 255
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 91
31019: PUSH
31020: LD_VAR 0 1
31024: PUSH
31025: LD_INT 6
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 30
31035: PUSH
31036: LD_VAR 0 4
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: PUSH
31050: EMPTY
31051: LIST
31052: PPUSH
31053: CALL_OW 69
31057: ADD
31058: ST_TO_ADDR
31059: GO 30987
31061: POP
31062: POP
// for i = 1 to tmp do
31063: LD_ADDR_VAR 0 4
31067: PUSH
31068: DOUBLE
31069: LD_INT 1
31071: DEC
31072: ST_TO_ADDR
31073: LD_VAR 0 3
31077: PUSH
31078: FOR_TO
31079: IFFALSE 31167
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31081: LD_ADDR_VAR 0 5
31085: PUSH
31086: LD_VAR 0 5
31090: PUSH
31091: LD_VAR 0 3
31095: PUSH
31096: LD_VAR 0 4
31100: ARRAY
31101: PPUSH
31102: CALL_OW 266
31106: PUSH
31107: LD_VAR 0 3
31111: PUSH
31112: LD_VAR 0 4
31116: ARRAY
31117: PPUSH
31118: CALL_OW 250
31122: PUSH
31123: LD_VAR 0 3
31127: PUSH
31128: LD_VAR 0 4
31132: ARRAY
31133: PPUSH
31134: CALL_OW 251
31138: PUSH
31139: LD_VAR 0 3
31143: PUSH
31144: LD_VAR 0 4
31148: ARRAY
31149: PPUSH
31150: CALL_OW 254
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: ADD
31164: ST_TO_ADDR
31165: GO 31078
31167: POP
31168: POP
// result := list ;
31169: LD_ADDR_VAR 0 2
31173: PUSH
31174: LD_VAR 0 5
31178: ST_TO_ADDR
// end ;
31179: LD_VAR 0 2
31183: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31184: LD_INT 0
31186: PPUSH
31187: PPUSH
31188: PPUSH
31189: PPUSH
31190: PPUSH
31191: PPUSH
31192: PPUSH
// if not factory then
31193: LD_VAR 0 1
31197: NOT
31198: IFFALSE 31202
// exit ;
31200: GO 31795
// if control = control_apeman then
31202: LD_VAR 0 4
31206: PUSH
31207: LD_INT 5
31209: EQUAL
31210: IFFALSE 31319
// begin tmp := UnitsInside ( factory ) ;
31212: LD_ADDR_VAR 0 8
31216: PUSH
31217: LD_VAR 0 1
31221: PPUSH
31222: CALL_OW 313
31226: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31227: LD_VAR 0 8
31231: PPUSH
31232: LD_INT 25
31234: PUSH
31235: LD_INT 12
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PPUSH
31242: CALL_OW 72
31246: NOT
31247: IFFALSE 31257
// control := control_manual ;
31249: LD_ADDR_VAR 0 4
31253: PUSH
31254: LD_INT 1
31256: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31257: LD_ADDR_VAR 0 8
31261: PUSH
31262: LD_VAR 0 1
31266: PPUSH
31267: CALL 30954 0 1
31271: ST_TO_ADDR
// if tmp then
31272: LD_VAR 0 8
31276: IFFALSE 31319
// begin for i in tmp do
31278: LD_ADDR_VAR 0 7
31282: PUSH
31283: LD_VAR 0 8
31287: PUSH
31288: FOR_IN
31289: IFFALSE 31317
// if i [ 1 ] = b_ext_radio then
31291: LD_VAR 0 7
31295: PUSH
31296: LD_INT 1
31298: ARRAY
31299: PUSH
31300: LD_INT 22
31302: EQUAL
31303: IFFALSE 31315
// begin control := control_remote ;
31305: LD_ADDR_VAR 0 4
31309: PUSH
31310: LD_INT 2
31312: ST_TO_ADDR
// break ;
31313: GO 31317
// end ;
31315: GO 31288
31317: POP
31318: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31319: LD_VAR 0 1
31323: PPUSH
31324: LD_VAR 0 2
31328: PPUSH
31329: LD_VAR 0 3
31333: PPUSH
31334: LD_VAR 0 4
31338: PPUSH
31339: LD_VAR 0 5
31343: PPUSH
31344: CALL_OW 448
31348: IFFALSE 31383
// begin result := [ chassis , engine , control , weapon ] ;
31350: LD_ADDR_VAR 0 6
31354: PUSH
31355: LD_VAR 0 2
31359: PUSH
31360: LD_VAR 0 3
31364: PUSH
31365: LD_VAR 0 4
31369: PUSH
31370: LD_VAR 0 5
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: ST_TO_ADDR
// exit ;
31381: GO 31795
// end ; _chassis := AvailableChassisList ( factory ) ;
31383: LD_ADDR_VAR 0 9
31387: PUSH
31388: LD_VAR 0 1
31392: PPUSH
31393: CALL_OW 475
31397: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31398: LD_ADDR_VAR 0 11
31402: PUSH
31403: LD_VAR 0 1
31407: PPUSH
31408: CALL_OW 476
31412: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31413: LD_ADDR_VAR 0 12
31417: PUSH
31418: LD_VAR 0 1
31422: PPUSH
31423: CALL_OW 477
31427: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31428: LD_ADDR_VAR 0 10
31432: PUSH
31433: LD_VAR 0 1
31437: PPUSH
31438: CALL_OW 478
31442: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31443: LD_VAR 0 9
31447: NOT
31448: PUSH
31449: LD_VAR 0 11
31453: NOT
31454: OR
31455: PUSH
31456: LD_VAR 0 12
31460: NOT
31461: OR
31462: PUSH
31463: LD_VAR 0 10
31467: NOT
31468: OR
31469: IFFALSE 31504
// begin result := [ chassis , engine , control , weapon ] ;
31471: LD_ADDR_VAR 0 6
31475: PUSH
31476: LD_VAR 0 2
31480: PUSH
31481: LD_VAR 0 3
31485: PUSH
31486: LD_VAR 0 4
31490: PUSH
31491: LD_VAR 0 5
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// exit ;
31502: GO 31795
// end ; if not chassis in _chassis then
31504: LD_VAR 0 2
31508: PUSH
31509: LD_VAR 0 9
31513: IN
31514: NOT
31515: IFFALSE 31541
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31517: LD_ADDR_VAR 0 2
31521: PUSH
31522: LD_VAR 0 9
31526: PUSH
31527: LD_INT 1
31529: PPUSH
31530: LD_VAR 0 9
31534: PPUSH
31535: CALL_OW 12
31539: ARRAY
31540: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31541: LD_VAR 0 2
31545: PPUSH
31546: LD_VAR 0 3
31550: PPUSH
31551: CALL 31800 0 2
31555: NOT
31556: IFFALSE 31615
// repeat engine := _engine [ 1 ] ;
31558: LD_ADDR_VAR 0 3
31562: PUSH
31563: LD_VAR 0 11
31567: PUSH
31568: LD_INT 1
31570: ARRAY
31571: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31572: LD_ADDR_VAR 0 11
31576: PUSH
31577: LD_VAR 0 11
31581: PPUSH
31582: LD_INT 1
31584: PPUSH
31585: CALL_OW 3
31589: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31590: LD_VAR 0 2
31594: PPUSH
31595: LD_VAR 0 3
31599: PPUSH
31600: CALL 31800 0 2
31604: PUSH
31605: LD_VAR 0 11
31609: PUSH
31610: EMPTY
31611: EQUAL
31612: OR
31613: IFFALSE 31558
// if not control in _control then
31615: LD_VAR 0 4
31619: PUSH
31620: LD_VAR 0 12
31624: IN
31625: NOT
31626: IFFALSE 31652
// control := _control [ rand ( 1 , _control ) ] ;
31628: LD_ADDR_VAR 0 4
31632: PUSH
31633: LD_VAR 0 12
31637: PUSH
31638: LD_INT 1
31640: PPUSH
31641: LD_VAR 0 12
31645: PPUSH
31646: CALL_OW 12
31650: ARRAY
31651: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31652: LD_VAR 0 2
31656: PPUSH
31657: LD_VAR 0 5
31661: PPUSH
31662: CALL 32020 0 2
31666: NOT
31667: IFFALSE 31726
// repeat weapon := _weapon [ 1 ] ;
31669: LD_ADDR_VAR 0 5
31673: PUSH
31674: LD_VAR 0 10
31678: PUSH
31679: LD_INT 1
31681: ARRAY
31682: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31683: LD_ADDR_VAR 0 10
31687: PUSH
31688: LD_VAR 0 10
31692: PPUSH
31693: LD_INT 1
31695: PPUSH
31696: CALL_OW 3
31700: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31701: LD_VAR 0 2
31705: PPUSH
31706: LD_VAR 0 5
31710: PPUSH
31711: CALL 32020 0 2
31715: PUSH
31716: LD_VAR 0 10
31720: PUSH
31721: EMPTY
31722: EQUAL
31723: OR
31724: IFFALSE 31669
// result := [ ] ;
31726: LD_ADDR_VAR 0 6
31730: PUSH
31731: EMPTY
31732: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31733: LD_VAR 0 1
31737: PPUSH
31738: LD_VAR 0 2
31742: PPUSH
31743: LD_VAR 0 3
31747: PPUSH
31748: LD_VAR 0 4
31752: PPUSH
31753: LD_VAR 0 5
31757: PPUSH
31758: CALL_OW 448
31762: IFFALSE 31795
// result := [ chassis , engine , control , weapon ] ;
31764: LD_ADDR_VAR 0 6
31768: PUSH
31769: LD_VAR 0 2
31773: PUSH
31774: LD_VAR 0 3
31778: PUSH
31779: LD_VAR 0 4
31783: PUSH
31784: LD_VAR 0 5
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// end ;
31795: LD_VAR 0 6
31799: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31800: LD_INT 0
31802: PPUSH
// if not chassis or not engine then
31803: LD_VAR 0 1
31807: NOT
31808: PUSH
31809: LD_VAR 0 2
31813: NOT
31814: OR
31815: IFFALSE 31819
// exit ;
31817: GO 32015
// case engine of engine_solar :
31819: LD_VAR 0 2
31823: PUSH
31824: LD_INT 2
31826: DOUBLE
31827: EQUAL
31828: IFTRUE 31832
31830: GO 31870
31832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31833: LD_ADDR_VAR 0 3
31837: PUSH
31838: LD_INT 11
31840: PUSH
31841: LD_INT 12
31843: PUSH
31844: LD_INT 13
31846: PUSH
31847: LD_INT 14
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: LD_INT 3
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: ST_TO_ADDR
31868: GO 31999
31870: LD_INT 1
31872: DOUBLE
31873: EQUAL
31874: IFTRUE 31878
31876: GO 31940
31878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31879: LD_ADDR_VAR 0 3
31883: PUSH
31884: LD_INT 11
31886: PUSH
31887: LD_INT 12
31889: PUSH
31890: LD_INT 13
31892: PUSH
31893: LD_INT 14
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: LD_INT 4
31907: PUSH
31908: LD_INT 5
31910: PUSH
31911: LD_INT 21
31913: PUSH
31914: LD_INT 23
31916: PUSH
31917: LD_INT 22
31919: PUSH
31920: LD_INT 24
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: ST_TO_ADDR
31938: GO 31999
31940: LD_INT 3
31942: DOUBLE
31943: EQUAL
31944: IFTRUE 31948
31946: GO 31998
31948: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31949: LD_ADDR_VAR 0 3
31953: PUSH
31954: LD_INT 13
31956: PUSH
31957: LD_INT 14
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 3
31965: PUSH
31966: LD_INT 4
31968: PUSH
31969: LD_INT 5
31971: PUSH
31972: LD_INT 21
31974: PUSH
31975: LD_INT 22
31977: PUSH
31978: LD_INT 23
31980: PUSH
31981: LD_INT 24
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: ST_TO_ADDR
31996: GO 31999
31998: POP
// result := ( chassis in result ) ;
31999: LD_ADDR_VAR 0 3
32003: PUSH
32004: LD_VAR 0 1
32008: PUSH
32009: LD_VAR 0 3
32013: IN
32014: ST_TO_ADDR
// end ;
32015: LD_VAR 0 3
32019: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32020: LD_INT 0
32022: PPUSH
// if not chassis or not weapon then
32023: LD_VAR 0 1
32027: NOT
32028: PUSH
32029: LD_VAR 0 2
32033: NOT
32034: OR
32035: IFFALSE 32039
// exit ;
32037: GO 33065
// case weapon of us_machine_gun :
32039: LD_VAR 0 2
32043: PUSH
32044: LD_INT 2
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32082
32052: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32053: LD_ADDR_VAR 0 3
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: LD_INT 4
32069: PUSH
32070: LD_INT 5
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: ST_TO_ADDR
32080: GO 33049
32082: LD_INT 3
32084: DOUBLE
32085: EQUAL
32086: IFTRUE 32090
32088: GO 32120
32090: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32091: LD_ADDR_VAR 0 3
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: LD_INT 2
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: LD_INT 4
32107: PUSH
32108: LD_INT 5
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: ST_TO_ADDR
32118: GO 33049
32120: LD_INT 11
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32158
32128: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32129: LD_ADDR_VAR 0 3
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: LD_INT 3
32142: PUSH
32143: LD_INT 4
32145: PUSH
32146: LD_INT 5
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
32156: GO 33049
32158: LD_INT 4
32160: DOUBLE
32161: EQUAL
32162: IFTRUE 32166
32164: GO 32192
32166: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32167: LD_ADDR_VAR 0 3
32171: PUSH
32172: LD_INT 2
32174: PUSH
32175: LD_INT 3
32177: PUSH
32178: LD_INT 4
32180: PUSH
32181: LD_INT 5
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: ST_TO_ADDR
32190: GO 33049
32192: LD_INT 5
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32226
32200: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32201: LD_ADDR_VAR 0 3
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: LD_INT 4
32214: PUSH
32215: LD_INT 5
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
32224: GO 33049
32226: LD_INT 9
32228: DOUBLE
32229: EQUAL
32230: IFTRUE 32234
32232: GO 32260
32234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32235: LD_ADDR_VAR 0 3
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: LD_INT 4
32248: PUSH
32249: LD_INT 5
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: ST_TO_ADDR
32258: GO 33049
32260: LD_INT 7
32262: DOUBLE
32263: EQUAL
32264: IFTRUE 32268
32266: GO 32294
32268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32269: LD_ADDR_VAR 0 3
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: LD_INT 3
32279: PUSH
32280: LD_INT 4
32282: PUSH
32283: LD_INT 5
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: ST_TO_ADDR
32292: GO 33049
32294: LD_INT 12
32296: DOUBLE
32297: EQUAL
32298: IFTRUE 32302
32300: GO 32328
32302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32303: LD_ADDR_VAR 0 3
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: LD_INT 3
32313: PUSH
32314: LD_INT 4
32316: PUSH
32317: LD_INT 5
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: ST_TO_ADDR
32326: GO 33049
32328: LD_INT 13
32330: DOUBLE
32331: EQUAL
32332: IFTRUE 32336
32334: GO 32362
32336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32337: LD_ADDR_VAR 0 3
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: LD_INT 5
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: ST_TO_ADDR
32360: GO 33049
32362: LD_INT 14
32364: DOUBLE
32365: EQUAL
32366: IFTRUE 32370
32368: GO 32388
32370: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: LD_INT 4
32378: PUSH
32379: LD_INT 5
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: ST_TO_ADDR
32386: GO 33049
32388: LD_INT 6
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32396
32394: GO 32414
32396: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32397: LD_ADDR_VAR 0 3
32401: PUSH
32402: LD_INT 4
32404: PUSH
32405: LD_INT 5
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: ST_TO_ADDR
32412: GO 33049
32414: LD_INT 10
32416: DOUBLE
32417: EQUAL
32418: IFTRUE 32422
32420: GO 32440
32422: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32423: LD_ADDR_VAR 0 3
32427: PUSH
32428: LD_INT 4
32430: PUSH
32431: LD_INT 5
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: ST_TO_ADDR
32438: GO 33049
32440: LD_INT 22
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32448
32446: GO 32474
32448: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_INT 11
32456: PUSH
32457: LD_INT 12
32459: PUSH
32460: LD_INT 13
32462: PUSH
32463: LD_INT 14
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: ST_TO_ADDR
32472: GO 33049
32474: LD_INT 23
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32508
32482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32483: LD_ADDR_VAR 0 3
32487: PUSH
32488: LD_INT 11
32490: PUSH
32491: LD_INT 12
32493: PUSH
32494: LD_INT 13
32496: PUSH
32497: LD_INT 14
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: ST_TO_ADDR
32506: GO 33049
32508: LD_INT 24
32510: DOUBLE
32511: EQUAL
32512: IFTRUE 32516
32514: GO 32542
32516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 11
32524: PUSH
32525: LD_INT 12
32527: PUSH
32528: LD_INT 13
32530: PUSH
32531: LD_INT 14
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: ST_TO_ADDR
32540: GO 33049
32542: LD_INT 30
32544: DOUBLE
32545: EQUAL
32546: IFTRUE 32550
32548: GO 32576
32550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32551: LD_ADDR_VAR 0 3
32555: PUSH
32556: LD_INT 11
32558: PUSH
32559: LD_INT 12
32561: PUSH
32562: LD_INT 13
32564: PUSH
32565: LD_INT 14
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: ST_TO_ADDR
32574: GO 33049
32576: LD_INT 25
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32584
32582: GO 32602
32584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_INT 13
32592: PUSH
32593: LD_INT 14
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: ST_TO_ADDR
32600: GO 33049
32602: LD_INT 27
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32610
32608: GO 32628
32610: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32611: LD_ADDR_VAR 0 3
32615: PUSH
32616: LD_INT 13
32618: PUSH
32619: LD_INT 14
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: ST_TO_ADDR
32626: GO 33049
32628: LD_INT 28
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32654
32636: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32637: LD_ADDR_VAR 0 3
32641: PUSH
32642: LD_INT 13
32644: PUSH
32645: LD_INT 14
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: ST_TO_ADDR
32652: GO 33049
32654: LD_INT 29
32656: DOUBLE
32657: EQUAL
32658: IFTRUE 32662
32660: GO 32680
32662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32663: LD_ADDR_VAR 0 3
32667: PUSH
32668: LD_INT 13
32670: PUSH
32671: LD_INT 14
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: ST_TO_ADDR
32678: GO 33049
32680: LD_INT 31
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32706
32688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: LD_INT 13
32696: PUSH
32697: LD_INT 14
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: ST_TO_ADDR
32704: GO 33049
32706: LD_INT 26
32708: DOUBLE
32709: EQUAL
32710: IFTRUE 32714
32712: GO 32732
32714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_INT 13
32722: PUSH
32723: LD_INT 14
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: ST_TO_ADDR
32730: GO 33049
32732: LD_INT 42
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32740
32738: GO 32766
32740: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32741: LD_ADDR_VAR 0 3
32745: PUSH
32746: LD_INT 21
32748: PUSH
32749: LD_INT 22
32751: PUSH
32752: LD_INT 23
32754: PUSH
32755: LD_INT 24
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: ST_TO_ADDR
32764: GO 33049
32766: LD_INT 43
32768: DOUBLE
32769: EQUAL
32770: IFTRUE 32774
32772: GO 32800
32774: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32775: LD_ADDR_VAR 0 3
32779: PUSH
32780: LD_INT 21
32782: PUSH
32783: LD_INT 22
32785: PUSH
32786: LD_INT 23
32788: PUSH
32789: LD_INT 24
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: ST_TO_ADDR
32798: GO 33049
32800: LD_INT 44
32802: DOUBLE
32803: EQUAL
32804: IFTRUE 32808
32806: GO 32834
32808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32809: LD_ADDR_VAR 0 3
32813: PUSH
32814: LD_INT 21
32816: PUSH
32817: LD_INT 22
32819: PUSH
32820: LD_INT 23
32822: PUSH
32823: LD_INT 24
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: ST_TO_ADDR
32832: GO 33049
32834: LD_INT 45
32836: DOUBLE
32837: EQUAL
32838: IFTRUE 32842
32840: GO 32868
32842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32843: LD_ADDR_VAR 0 3
32847: PUSH
32848: LD_INT 21
32850: PUSH
32851: LD_INT 22
32853: PUSH
32854: LD_INT 23
32856: PUSH
32857: LD_INT 24
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: ST_TO_ADDR
32866: GO 33049
32868: LD_INT 49
32870: DOUBLE
32871: EQUAL
32872: IFTRUE 32876
32874: GO 32902
32876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32877: LD_ADDR_VAR 0 3
32881: PUSH
32882: LD_INT 21
32884: PUSH
32885: LD_INT 22
32887: PUSH
32888: LD_INT 23
32890: PUSH
32891: LD_INT 24
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: ST_TO_ADDR
32900: GO 33049
32902: LD_INT 51
32904: DOUBLE
32905: EQUAL
32906: IFTRUE 32910
32908: GO 32936
32910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32911: LD_ADDR_VAR 0 3
32915: PUSH
32916: LD_INT 21
32918: PUSH
32919: LD_INT 22
32921: PUSH
32922: LD_INT 23
32924: PUSH
32925: LD_INT 24
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: ST_TO_ADDR
32934: GO 33049
32936: LD_INT 52
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 32970
32944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32945: LD_ADDR_VAR 0 3
32949: PUSH
32950: LD_INT 21
32952: PUSH
32953: LD_INT 22
32955: PUSH
32956: LD_INT 23
32958: PUSH
32959: LD_INT 24
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: ST_TO_ADDR
32968: GO 33049
32970: LD_INT 53
32972: DOUBLE
32973: EQUAL
32974: IFTRUE 32978
32976: GO 32996
32978: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32979: LD_ADDR_VAR 0 3
32983: PUSH
32984: LD_INT 23
32986: PUSH
32987: LD_INT 24
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: ST_TO_ADDR
32994: GO 33049
32996: LD_INT 46
32998: DOUBLE
32999: EQUAL
33000: IFTRUE 33004
33002: GO 33022
33004: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33005: LD_ADDR_VAR 0 3
33009: PUSH
33010: LD_INT 23
33012: PUSH
33013: LD_INT 24
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: ST_TO_ADDR
33020: GO 33049
33022: LD_INT 47
33024: DOUBLE
33025: EQUAL
33026: IFTRUE 33030
33028: GO 33048
33030: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33031: LD_ADDR_VAR 0 3
33035: PUSH
33036: LD_INT 23
33038: PUSH
33039: LD_INT 24
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: ST_TO_ADDR
33046: GO 33049
33048: POP
// result := ( chassis in result ) ;
33049: LD_ADDR_VAR 0 3
33053: PUSH
33054: LD_VAR 0 1
33058: PUSH
33059: LD_VAR 0 3
33063: IN
33064: ST_TO_ADDR
// end ;
33065: LD_VAR 0 3
33069: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
33074: PPUSH
33075: PPUSH
33076: PPUSH
33077: PPUSH
33078: PPUSH
// result := array ;
33079: LD_ADDR_VAR 0 5
33083: PUSH
33084: LD_VAR 0 1
33088: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33089: LD_VAR 0 1
33093: NOT
33094: PUSH
33095: LD_VAR 0 2
33099: NOT
33100: OR
33101: PUSH
33102: LD_VAR 0 3
33106: NOT
33107: OR
33108: PUSH
33109: LD_VAR 0 2
33113: PUSH
33114: LD_VAR 0 1
33118: GREATER
33119: OR
33120: PUSH
33121: LD_VAR 0 3
33125: PUSH
33126: LD_VAR 0 1
33130: GREATER
33131: OR
33132: IFFALSE 33136
// exit ;
33134: GO 33432
// if direction then
33136: LD_VAR 0 4
33140: IFFALSE 33204
// begin d := 1 ;
33142: LD_ADDR_VAR 0 9
33146: PUSH
33147: LD_INT 1
33149: ST_TO_ADDR
// if i_from > i_to then
33150: LD_VAR 0 2
33154: PUSH
33155: LD_VAR 0 3
33159: GREATER
33160: IFFALSE 33186
// length := ( array - i_from ) + i_to else
33162: LD_ADDR_VAR 0 11
33166: PUSH
33167: LD_VAR 0 1
33171: PUSH
33172: LD_VAR 0 2
33176: MINUS
33177: PUSH
33178: LD_VAR 0 3
33182: PLUS
33183: ST_TO_ADDR
33184: GO 33202
// length := i_to - i_from ;
33186: LD_ADDR_VAR 0 11
33190: PUSH
33191: LD_VAR 0 3
33195: PUSH
33196: LD_VAR 0 2
33200: MINUS
33201: ST_TO_ADDR
// end else
33202: GO 33265
// begin d := - 1 ;
33204: LD_ADDR_VAR 0 9
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: ST_TO_ADDR
// if i_from > i_to then
33213: LD_VAR 0 2
33217: PUSH
33218: LD_VAR 0 3
33222: GREATER
33223: IFFALSE 33243
// length := i_from - i_to else
33225: LD_ADDR_VAR 0 11
33229: PUSH
33230: LD_VAR 0 2
33234: PUSH
33235: LD_VAR 0 3
33239: MINUS
33240: ST_TO_ADDR
33241: GO 33265
// length := ( array - i_to ) + i_from ;
33243: LD_ADDR_VAR 0 11
33247: PUSH
33248: LD_VAR 0 1
33252: PUSH
33253: LD_VAR 0 3
33257: MINUS
33258: PUSH
33259: LD_VAR 0 2
33263: PLUS
33264: ST_TO_ADDR
// end ; if not length then
33265: LD_VAR 0 11
33269: NOT
33270: IFFALSE 33274
// exit ;
33272: GO 33432
// tmp := array ;
33274: LD_ADDR_VAR 0 10
33278: PUSH
33279: LD_VAR 0 1
33283: ST_TO_ADDR
// for i = 1 to length do
33284: LD_ADDR_VAR 0 6
33288: PUSH
33289: DOUBLE
33290: LD_INT 1
33292: DEC
33293: ST_TO_ADDR
33294: LD_VAR 0 11
33298: PUSH
33299: FOR_TO
33300: IFFALSE 33420
// begin for j = 1 to array do
33302: LD_ADDR_VAR 0 7
33306: PUSH
33307: DOUBLE
33308: LD_INT 1
33310: DEC
33311: ST_TO_ADDR
33312: LD_VAR 0 1
33316: PUSH
33317: FOR_TO
33318: IFFALSE 33406
// begin k := j + d ;
33320: LD_ADDR_VAR 0 8
33324: PUSH
33325: LD_VAR 0 7
33329: PUSH
33330: LD_VAR 0 9
33334: PLUS
33335: ST_TO_ADDR
// if k > array then
33336: LD_VAR 0 8
33340: PUSH
33341: LD_VAR 0 1
33345: GREATER
33346: IFFALSE 33356
// k := 1 ;
33348: LD_ADDR_VAR 0 8
33352: PUSH
33353: LD_INT 1
33355: ST_TO_ADDR
// if not k then
33356: LD_VAR 0 8
33360: NOT
33361: IFFALSE 33373
// k := array ;
33363: LD_ADDR_VAR 0 8
33367: PUSH
33368: LD_VAR 0 1
33372: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33373: LD_ADDR_VAR 0 10
33377: PUSH
33378: LD_VAR 0 10
33382: PPUSH
33383: LD_VAR 0 8
33387: PPUSH
33388: LD_VAR 0 1
33392: PUSH
33393: LD_VAR 0 7
33397: ARRAY
33398: PPUSH
33399: CALL_OW 1
33403: ST_TO_ADDR
// end ;
33404: GO 33317
33406: POP
33407: POP
// array := tmp ;
33408: LD_ADDR_VAR 0 1
33412: PUSH
33413: LD_VAR 0 10
33417: ST_TO_ADDR
// end ;
33418: GO 33299
33420: POP
33421: POP
// result := array ;
33422: LD_ADDR_VAR 0 5
33426: PUSH
33427: LD_VAR 0 1
33431: ST_TO_ADDR
// end ;
33432: LD_VAR 0 5
33436: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33437: LD_INT 0
33439: PPUSH
33440: PPUSH
// result := 0 ;
33441: LD_ADDR_VAR 0 3
33445: PUSH
33446: LD_INT 0
33448: ST_TO_ADDR
// if not array or not value in array then
33449: LD_VAR 0 1
33453: NOT
33454: PUSH
33455: LD_VAR 0 2
33459: PUSH
33460: LD_VAR 0 1
33464: IN
33465: NOT
33466: OR
33467: IFFALSE 33471
// exit ;
33469: GO 33525
// for i = 1 to array do
33471: LD_ADDR_VAR 0 4
33475: PUSH
33476: DOUBLE
33477: LD_INT 1
33479: DEC
33480: ST_TO_ADDR
33481: LD_VAR 0 1
33485: PUSH
33486: FOR_TO
33487: IFFALSE 33523
// if value = array [ i ] then
33489: LD_VAR 0 2
33493: PUSH
33494: LD_VAR 0 1
33498: PUSH
33499: LD_VAR 0 4
33503: ARRAY
33504: EQUAL
33505: IFFALSE 33521
// begin result := i ;
33507: LD_ADDR_VAR 0 3
33511: PUSH
33512: LD_VAR 0 4
33516: ST_TO_ADDR
// exit ;
33517: POP
33518: POP
33519: GO 33525
// end ;
33521: GO 33486
33523: POP
33524: POP
// end ;
33525: LD_VAR 0 3
33529: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33530: LD_INT 0
33532: PPUSH
// vc_chassis := chassis ;
33533: LD_ADDR_OWVAR 37
33537: PUSH
33538: LD_VAR 0 1
33542: ST_TO_ADDR
// vc_engine := engine ;
33543: LD_ADDR_OWVAR 39
33547: PUSH
33548: LD_VAR 0 2
33552: ST_TO_ADDR
// vc_control := control ;
33553: LD_ADDR_OWVAR 38
33557: PUSH
33558: LD_VAR 0 3
33562: ST_TO_ADDR
// vc_weapon := weapon ;
33563: LD_ADDR_OWVAR 40
33567: PUSH
33568: LD_VAR 0 4
33572: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33573: LD_ADDR_OWVAR 41
33577: PUSH
33578: LD_VAR 0 5
33582: ST_TO_ADDR
// end ;
33583: LD_VAR 0 6
33587: RET
// export function WantPlant ( unit ) ; var task ; begin
33588: LD_INT 0
33590: PPUSH
33591: PPUSH
// result := false ;
33592: LD_ADDR_VAR 0 2
33596: PUSH
33597: LD_INT 0
33599: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33600: LD_ADDR_VAR 0 3
33604: PUSH
33605: LD_VAR 0 1
33609: PPUSH
33610: CALL_OW 437
33614: ST_TO_ADDR
// if task then
33615: LD_VAR 0 3
33619: IFFALSE 33647
// if task [ 1 ] [ 1 ] = p then
33621: LD_VAR 0 3
33625: PUSH
33626: LD_INT 1
33628: ARRAY
33629: PUSH
33630: LD_INT 1
33632: ARRAY
33633: PUSH
33634: LD_STRING p
33636: EQUAL
33637: IFFALSE 33647
// result := true ;
33639: LD_ADDR_VAR 0 2
33643: PUSH
33644: LD_INT 1
33646: ST_TO_ADDR
// end ;
33647: LD_VAR 0 2
33651: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33652: LD_INT 0
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
// if pos < 1 then
33658: LD_VAR 0 2
33662: PUSH
33663: LD_INT 1
33665: LESS
33666: IFFALSE 33670
// exit ;
33668: GO 33973
// if pos = 1 then
33670: LD_VAR 0 2
33674: PUSH
33675: LD_INT 1
33677: EQUAL
33678: IFFALSE 33711
// result := Replace ( arr , pos [ 1 ] , value ) else
33680: LD_ADDR_VAR 0 4
33684: PUSH
33685: LD_VAR 0 1
33689: PPUSH
33690: LD_VAR 0 2
33694: PUSH
33695: LD_INT 1
33697: ARRAY
33698: PPUSH
33699: LD_VAR 0 3
33703: PPUSH
33704: CALL_OW 1
33708: ST_TO_ADDR
33709: GO 33973
// begin tmp := arr ;
33711: LD_ADDR_VAR 0 6
33715: PUSH
33716: LD_VAR 0 1
33720: ST_TO_ADDR
// s_arr := [ tmp ] ;
33721: LD_ADDR_VAR 0 7
33725: PUSH
33726: LD_VAR 0 6
33730: PUSH
33731: EMPTY
33732: LIST
33733: ST_TO_ADDR
// for i = 1 to pos - 1 do
33734: LD_ADDR_VAR 0 5
33738: PUSH
33739: DOUBLE
33740: LD_INT 1
33742: DEC
33743: ST_TO_ADDR
33744: LD_VAR 0 2
33748: PUSH
33749: LD_INT 1
33751: MINUS
33752: PUSH
33753: FOR_TO
33754: IFFALSE 33799
// begin tmp := tmp [ pos [ i ] ] ;
33756: LD_ADDR_VAR 0 6
33760: PUSH
33761: LD_VAR 0 6
33765: PUSH
33766: LD_VAR 0 2
33770: PUSH
33771: LD_VAR 0 5
33775: ARRAY
33776: ARRAY
33777: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33778: LD_ADDR_VAR 0 7
33782: PUSH
33783: LD_VAR 0 7
33787: PUSH
33788: LD_VAR 0 6
33792: PUSH
33793: EMPTY
33794: LIST
33795: ADD
33796: ST_TO_ADDR
// end ;
33797: GO 33753
33799: POP
33800: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33801: LD_ADDR_VAR 0 6
33805: PUSH
33806: LD_VAR 0 6
33810: PPUSH
33811: LD_VAR 0 2
33815: PUSH
33816: LD_VAR 0 2
33820: ARRAY
33821: PPUSH
33822: LD_VAR 0 3
33826: PPUSH
33827: CALL_OW 1
33831: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33832: LD_ADDR_VAR 0 7
33836: PUSH
33837: LD_VAR 0 7
33841: PPUSH
33842: LD_VAR 0 7
33846: PPUSH
33847: LD_VAR 0 6
33851: PPUSH
33852: CALL_OW 1
33856: ST_TO_ADDR
// for i = s_arr downto 2 do
33857: LD_ADDR_VAR 0 5
33861: PUSH
33862: DOUBLE
33863: LD_VAR 0 7
33867: INC
33868: ST_TO_ADDR
33869: LD_INT 2
33871: PUSH
33872: FOR_DOWNTO
33873: IFFALSE 33957
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33875: LD_ADDR_VAR 0 6
33879: PUSH
33880: LD_VAR 0 7
33884: PUSH
33885: LD_VAR 0 5
33889: PUSH
33890: LD_INT 1
33892: MINUS
33893: ARRAY
33894: PPUSH
33895: LD_VAR 0 2
33899: PUSH
33900: LD_VAR 0 5
33904: PUSH
33905: LD_INT 1
33907: MINUS
33908: ARRAY
33909: PPUSH
33910: LD_VAR 0 7
33914: PUSH
33915: LD_VAR 0 5
33919: ARRAY
33920: PPUSH
33921: CALL_OW 1
33925: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33926: LD_ADDR_VAR 0 7
33930: PUSH
33931: LD_VAR 0 7
33935: PPUSH
33936: LD_VAR 0 5
33940: PUSH
33941: LD_INT 1
33943: MINUS
33944: PPUSH
33945: LD_VAR 0 6
33949: PPUSH
33950: CALL_OW 1
33954: ST_TO_ADDR
// end ;
33955: GO 33872
33957: POP
33958: POP
// result := s_arr [ 1 ] ;
33959: LD_ADDR_VAR 0 4
33963: PUSH
33964: LD_VAR 0 7
33968: PUSH
33969: LD_INT 1
33971: ARRAY
33972: ST_TO_ADDR
// end ; end ;
33973: LD_VAR 0 4
33977: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33978: LD_INT 0
33980: PPUSH
33981: PPUSH
// if not list then
33982: LD_VAR 0 1
33986: NOT
33987: IFFALSE 33991
// exit ;
33989: GO 34082
// i := list [ pos1 ] ;
33991: LD_ADDR_VAR 0 5
33995: PUSH
33996: LD_VAR 0 1
34000: PUSH
34001: LD_VAR 0 2
34005: ARRAY
34006: ST_TO_ADDR
// if not i then
34007: LD_VAR 0 5
34011: NOT
34012: IFFALSE 34016
// exit ;
34014: GO 34082
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34016: LD_ADDR_VAR 0 1
34020: PUSH
34021: LD_VAR 0 1
34025: PPUSH
34026: LD_VAR 0 2
34030: PPUSH
34031: LD_VAR 0 1
34035: PUSH
34036: LD_VAR 0 3
34040: ARRAY
34041: PPUSH
34042: CALL_OW 1
34046: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34047: LD_ADDR_VAR 0 1
34051: PUSH
34052: LD_VAR 0 1
34056: PPUSH
34057: LD_VAR 0 3
34061: PPUSH
34062: LD_VAR 0 5
34066: PPUSH
34067: CALL_OW 1
34071: ST_TO_ADDR
// result := list ;
34072: LD_ADDR_VAR 0 4
34076: PUSH
34077: LD_VAR 0 1
34081: ST_TO_ADDR
// end ;
34082: LD_VAR 0 4
34086: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34087: LD_INT 0
34089: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34090: LD_ADDR_VAR 0 5
34094: PUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 250
34104: PPUSH
34105: LD_VAR 0 1
34109: PPUSH
34110: CALL_OW 251
34114: PPUSH
34115: LD_VAR 0 2
34119: PPUSH
34120: LD_VAR 0 3
34124: PPUSH
34125: LD_VAR 0 4
34129: PPUSH
34130: CALL 34140 0 5
34134: ST_TO_ADDR
// end ;
34135: LD_VAR 0 5
34139: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34140: LD_INT 0
34142: PPUSH
34143: PPUSH
34144: PPUSH
34145: PPUSH
// if not list then
34146: LD_VAR 0 3
34150: NOT
34151: IFFALSE 34155
// exit ;
34153: GO 34543
// result := [ ] ;
34155: LD_ADDR_VAR 0 6
34159: PUSH
34160: EMPTY
34161: ST_TO_ADDR
// for i in list do
34162: LD_ADDR_VAR 0 7
34166: PUSH
34167: LD_VAR 0 3
34171: PUSH
34172: FOR_IN
34173: IFFALSE 34375
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34175: LD_ADDR_VAR 0 9
34179: PUSH
34180: LD_VAR 0 7
34184: PPUSH
34185: LD_VAR 0 1
34189: PPUSH
34190: LD_VAR 0 2
34194: PPUSH
34195: CALL_OW 297
34199: ST_TO_ADDR
// if not result then
34200: LD_VAR 0 6
34204: NOT
34205: IFFALSE 34231
// result := [ [ i , tmp ] ] else
34207: LD_ADDR_VAR 0 6
34211: PUSH
34212: LD_VAR 0 7
34216: PUSH
34217: LD_VAR 0 9
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: EMPTY
34227: LIST
34228: ST_TO_ADDR
34229: GO 34373
// begin if result [ result ] [ 2 ] < tmp then
34231: LD_VAR 0 6
34235: PUSH
34236: LD_VAR 0 6
34240: ARRAY
34241: PUSH
34242: LD_INT 2
34244: ARRAY
34245: PUSH
34246: LD_VAR 0 9
34250: LESS
34251: IFFALSE 34293
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34253: LD_ADDR_VAR 0 6
34257: PUSH
34258: LD_VAR 0 6
34262: PPUSH
34263: LD_VAR 0 6
34267: PUSH
34268: LD_INT 1
34270: PLUS
34271: PPUSH
34272: LD_VAR 0 7
34276: PUSH
34277: LD_VAR 0 9
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PPUSH
34286: CALL_OW 2
34290: ST_TO_ADDR
34291: GO 34373
// for j = 1 to result do
34293: LD_ADDR_VAR 0 8
34297: PUSH
34298: DOUBLE
34299: LD_INT 1
34301: DEC
34302: ST_TO_ADDR
34303: LD_VAR 0 6
34307: PUSH
34308: FOR_TO
34309: IFFALSE 34371
// begin if tmp < result [ j ] [ 2 ] then
34311: LD_VAR 0 9
34315: PUSH
34316: LD_VAR 0 6
34320: PUSH
34321: LD_VAR 0 8
34325: ARRAY
34326: PUSH
34327: LD_INT 2
34329: ARRAY
34330: LESS
34331: IFFALSE 34369
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34333: LD_ADDR_VAR 0 6
34337: PUSH
34338: LD_VAR 0 6
34342: PPUSH
34343: LD_VAR 0 8
34347: PPUSH
34348: LD_VAR 0 7
34352: PUSH
34353: LD_VAR 0 9
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PPUSH
34362: CALL_OW 2
34366: ST_TO_ADDR
// break ;
34367: GO 34371
// end ; end ;
34369: GO 34308
34371: POP
34372: POP
// end ; end ;
34373: GO 34172
34375: POP
34376: POP
// if result and not asc then
34377: LD_VAR 0 6
34381: PUSH
34382: LD_VAR 0 4
34386: NOT
34387: AND
34388: IFFALSE 34463
// begin tmp := result ;
34390: LD_ADDR_VAR 0 9
34394: PUSH
34395: LD_VAR 0 6
34399: ST_TO_ADDR
// for i = tmp downto 1 do
34400: LD_ADDR_VAR 0 7
34404: PUSH
34405: DOUBLE
34406: LD_VAR 0 9
34410: INC
34411: ST_TO_ADDR
34412: LD_INT 1
34414: PUSH
34415: FOR_DOWNTO
34416: IFFALSE 34461
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34418: LD_ADDR_VAR 0 6
34422: PUSH
34423: LD_VAR 0 6
34427: PPUSH
34428: LD_VAR 0 9
34432: PUSH
34433: LD_VAR 0 7
34437: MINUS
34438: PUSH
34439: LD_INT 1
34441: PLUS
34442: PPUSH
34443: LD_VAR 0 9
34447: PUSH
34448: LD_VAR 0 7
34452: ARRAY
34453: PPUSH
34454: CALL_OW 1
34458: ST_TO_ADDR
34459: GO 34415
34461: POP
34462: POP
// end ; tmp := [ ] ;
34463: LD_ADDR_VAR 0 9
34467: PUSH
34468: EMPTY
34469: ST_TO_ADDR
// if mode then
34470: LD_VAR 0 5
34474: IFFALSE 34543
// begin for i = 1 to result do
34476: LD_ADDR_VAR 0 7
34480: PUSH
34481: DOUBLE
34482: LD_INT 1
34484: DEC
34485: ST_TO_ADDR
34486: LD_VAR 0 6
34490: PUSH
34491: FOR_TO
34492: IFFALSE 34531
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34494: LD_ADDR_VAR 0 9
34498: PUSH
34499: LD_VAR 0 9
34503: PPUSH
34504: LD_VAR 0 7
34508: PPUSH
34509: LD_VAR 0 6
34513: PUSH
34514: LD_VAR 0 7
34518: ARRAY
34519: PUSH
34520: LD_INT 1
34522: ARRAY
34523: PPUSH
34524: CALL_OW 1
34528: ST_TO_ADDR
34529: GO 34491
34531: POP
34532: POP
// result := tmp ;
34533: LD_ADDR_VAR 0 6
34537: PUSH
34538: LD_VAR 0 9
34542: ST_TO_ADDR
// end ; end ;
34543: LD_VAR 0 6
34547: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34548: LD_INT 0
34550: PPUSH
34551: PPUSH
34552: PPUSH
34553: PPUSH
34554: PPUSH
34555: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34556: LD_ADDR_VAR 0 5
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: EMPTY
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: ST_TO_ADDR
// if not x or not y then
34578: LD_VAR 0 2
34582: NOT
34583: PUSH
34584: LD_VAR 0 3
34588: NOT
34589: OR
34590: IFFALSE 34594
// exit ;
34592: GO 36240
// if not range then
34594: LD_VAR 0 4
34598: NOT
34599: IFFALSE 34609
// range := 10 ;
34601: LD_ADDR_VAR 0 4
34605: PUSH
34606: LD_INT 10
34608: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34609: LD_ADDR_VAR 0 8
34613: PUSH
34614: LD_INT 81
34616: PUSH
34617: LD_VAR 0 1
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 92
34628: PUSH
34629: LD_VAR 0 2
34633: PUSH
34634: LD_VAR 0 3
34638: PUSH
34639: LD_VAR 0 4
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 3
34652: PUSH
34653: LD_INT 21
34655: PUSH
34656: LD_INT 3
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: PPUSH
34672: CALL_OW 69
34676: ST_TO_ADDR
// if not tmp then
34677: LD_VAR 0 8
34681: NOT
34682: IFFALSE 34686
// exit ;
34684: GO 36240
// for i in tmp do
34686: LD_ADDR_VAR 0 6
34690: PUSH
34691: LD_VAR 0 8
34695: PUSH
34696: FOR_IN
34697: IFFALSE 36215
// begin points := [ 0 , 0 , 0 ] ;
34699: LD_ADDR_VAR 0 9
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: LIST
34717: ST_TO_ADDR
// bpoints := 1 ;
34718: LD_ADDR_VAR 0 10
34722: PUSH
34723: LD_INT 1
34725: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34726: LD_VAR 0 6
34730: PPUSH
34731: CALL_OW 247
34735: PUSH
34736: LD_INT 1
34738: DOUBLE
34739: EQUAL
34740: IFTRUE 34744
34742: GO 35322
34744: POP
// begin if GetClass ( i ) = 1 then
34745: LD_VAR 0 6
34749: PPUSH
34750: CALL_OW 257
34754: PUSH
34755: LD_INT 1
34757: EQUAL
34758: IFFALSE 34779
// points := [ 10 , 5 , 3 ] ;
34760: LD_ADDR_VAR 0 9
34764: PUSH
34765: LD_INT 10
34767: PUSH
34768: LD_INT 5
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34779: LD_VAR 0 6
34783: PPUSH
34784: CALL_OW 257
34788: PUSH
34789: LD_INT 2
34791: PUSH
34792: LD_INT 3
34794: PUSH
34795: LD_INT 4
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: LIST
34802: IN
34803: IFFALSE 34824
// points := [ 3 , 2 , 1 ] ;
34805: LD_ADDR_VAR 0 9
34809: PUSH
34810: LD_INT 3
34812: PUSH
34813: LD_INT 2
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: LIST
34823: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34824: LD_VAR 0 6
34828: PPUSH
34829: CALL_OW 257
34833: PUSH
34834: LD_INT 5
34836: EQUAL
34837: IFFALSE 34858
// points := [ 130 , 5 , 2 ] ;
34839: LD_ADDR_VAR 0 9
34843: PUSH
34844: LD_INT 130
34846: PUSH
34847: LD_INT 5
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34858: LD_VAR 0 6
34862: PPUSH
34863: CALL_OW 257
34867: PUSH
34868: LD_INT 8
34870: EQUAL
34871: IFFALSE 34892
// points := [ 35 , 35 , 30 ] ;
34873: LD_ADDR_VAR 0 9
34877: PUSH
34878: LD_INT 35
34880: PUSH
34881: LD_INT 35
34883: PUSH
34884: LD_INT 30
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34892: LD_VAR 0 6
34896: PPUSH
34897: CALL_OW 257
34901: PUSH
34902: LD_INT 9
34904: EQUAL
34905: IFFALSE 34926
// points := [ 20 , 55 , 40 ] ;
34907: LD_ADDR_VAR 0 9
34911: PUSH
34912: LD_INT 20
34914: PUSH
34915: LD_INT 55
34917: PUSH
34918: LD_INT 40
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: LIST
34925: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34926: LD_VAR 0 6
34930: PPUSH
34931: CALL_OW 257
34935: PUSH
34936: LD_INT 12
34938: PUSH
34939: LD_INT 16
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: IN
34946: IFFALSE 34967
// points := [ 5 , 3 , 2 ] ;
34948: LD_ADDR_VAR 0 9
34952: PUSH
34953: LD_INT 5
34955: PUSH
34956: LD_INT 3
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34967: LD_VAR 0 6
34971: PPUSH
34972: CALL_OW 257
34976: PUSH
34977: LD_INT 17
34979: EQUAL
34980: IFFALSE 35001
// points := [ 100 , 50 , 75 ] ;
34982: LD_ADDR_VAR 0 9
34986: PUSH
34987: LD_INT 100
34989: PUSH
34990: LD_INT 50
34992: PUSH
34993: LD_INT 75
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: LIST
35000: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35001: LD_VAR 0 6
35005: PPUSH
35006: CALL_OW 257
35010: PUSH
35011: LD_INT 15
35013: EQUAL
35014: IFFALSE 35035
// points := [ 10 , 5 , 3 ] ;
35016: LD_ADDR_VAR 0 9
35020: PUSH
35021: LD_INT 10
35023: PUSH
35024: LD_INT 5
35026: PUSH
35027: LD_INT 3
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35035: LD_VAR 0 6
35039: PPUSH
35040: CALL_OW 257
35044: PUSH
35045: LD_INT 14
35047: EQUAL
35048: IFFALSE 35069
// points := [ 10 , 0 , 0 ] ;
35050: LD_ADDR_VAR 0 9
35054: PUSH
35055: LD_INT 10
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35069: LD_VAR 0 6
35073: PPUSH
35074: CALL_OW 257
35078: PUSH
35079: LD_INT 11
35081: EQUAL
35082: IFFALSE 35103
// points := [ 30 , 10 , 5 ] ;
35084: LD_ADDR_VAR 0 9
35088: PUSH
35089: LD_INT 30
35091: PUSH
35092: LD_INT 10
35094: PUSH
35095: LD_INT 5
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35103: LD_VAR 0 1
35107: PPUSH
35108: LD_INT 5
35110: PPUSH
35111: CALL_OW 321
35115: PUSH
35116: LD_INT 2
35118: EQUAL
35119: IFFALSE 35136
// bpoints := bpoints * 1.8 ;
35121: LD_ADDR_VAR 0 10
35125: PUSH
35126: LD_VAR 0 10
35130: PUSH
35131: LD_REAL  1.80000000000000E+0000
35134: MUL
35135: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35136: LD_VAR 0 6
35140: PPUSH
35141: CALL_OW 257
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: LD_INT 2
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: LD_INT 4
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: IN
35164: PUSH
35165: LD_VAR 0 1
35169: PPUSH
35170: LD_INT 51
35172: PPUSH
35173: CALL_OW 321
35177: PUSH
35178: LD_INT 2
35180: EQUAL
35181: AND
35182: IFFALSE 35199
// bpoints := bpoints * 1.2 ;
35184: LD_ADDR_VAR 0 10
35188: PUSH
35189: LD_VAR 0 10
35193: PUSH
35194: LD_REAL  1.20000000000000E+0000
35197: MUL
35198: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35199: LD_VAR 0 6
35203: PPUSH
35204: CALL_OW 257
35208: PUSH
35209: LD_INT 5
35211: PUSH
35212: LD_INT 7
35214: PUSH
35215: LD_INT 9
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: LIST
35222: IN
35223: PUSH
35224: LD_VAR 0 1
35228: PPUSH
35229: LD_INT 52
35231: PPUSH
35232: CALL_OW 321
35236: PUSH
35237: LD_INT 2
35239: EQUAL
35240: AND
35241: IFFALSE 35258
// bpoints := bpoints * 1.5 ;
35243: LD_ADDR_VAR 0 10
35247: PUSH
35248: LD_VAR 0 10
35252: PUSH
35253: LD_REAL  1.50000000000000E+0000
35256: MUL
35257: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35258: LD_VAR 0 1
35262: PPUSH
35263: LD_INT 66
35265: PPUSH
35266: CALL_OW 321
35270: PUSH
35271: LD_INT 2
35273: EQUAL
35274: IFFALSE 35291
// bpoints := bpoints * 1.1 ;
35276: LD_ADDR_VAR 0 10
35280: PUSH
35281: LD_VAR 0 10
35285: PUSH
35286: LD_REAL  1.10000000000000E+0000
35289: MUL
35290: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35291: LD_ADDR_VAR 0 10
35295: PUSH
35296: LD_VAR 0 10
35300: PUSH
35301: LD_VAR 0 6
35305: PPUSH
35306: LD_INT 1
35308: PPUSH
35309: CALL_OW 259
35313: PUSH
35314: LD_REAL  1.15000000000000E+0000
35317: MUL
35318: MUL
35319: ST_TO_ADDR
// end ; unit_vehicle :
35320: GO 36144
35322: LD_INT 2
35324: DOUBLE
35325: EQUAL
35326: IFTRUE 35330
35328: GO 36132
35330: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35331: LD_VAR 0 6
35335: PPUSH
35336: CALL_OW 264
35340: PUSH
35341: LD_INT 2
35343: PUSH
35344: LD_INT 42
35346: PUSH
35347: LD_INT 24
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: LIST
35354: IN
35355: IFFALSE 35376
// points := [ 25 , 5 , 3 ] ;
35357: LD_ADDR_VAR 0 9
35361: PUSH
35362: LD_INT 25
35364: PUSH
35365: LD_INT 5
35367: PUSH
35368: LD_INT 3
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: LIST
35375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35376: LD_VAR 0 6
35380: PPUSH
35381: CALL_OW 264
35385: PUSH
35386: LD_INT 4
35388: PUSH
35389: LD_INT 43
35391: PUSH
35392: LD_INT 25
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: LIST
35399: IN
35400: IFFALSE 35421
// points := [ 40 , 15 , 5 ] ;
35402: LD_ADDR_VAR 0 9
35406: PUSH
35407: LD_INT 40
35409: PUSH
35410: LD_INT 15
35412: PUSH
35413: LD_INT 5
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35421: LD_VAR 0 6
35425: PPUSH
35426: CALL_OW 264
35430: PUSH
35431: LD_INT 3
35433: PUSH
35434: LD_INT 23
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: IN
35441: IFFALSE 35462
// points := [ 7 , 25 , 8 ] ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_INT 7
35450: PUSH
35451: LD_INT 25
35453: PUSH
35454: LD_INT 8
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35462: LD_VAR 0 6
35466: PPUSH
35467: CALL_OW 264
35471: PUSH
35472: LD_INT 5
35474: PUSH
35475: LD_INT 27
35477: PUSH
35478: LD_INT 44
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: IN
35486: IFFALSE 35507
// points := [ 14 , 50 , 16 ] ;
35488: LD_ADDR_VAR 0 9
35492: PUSH
35493: LD_INT 14
35495: PUSH
35496: LD_INT 50
35498: PUSH
35499: LD_INT 16
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: LIST
35506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35507: LD_VAR 0 6
35511: PPUSH
35512: CALL_OW 264
35516: PUSH
35517: LD_INT 6
35519: PUSH
35520: LD_INT 46
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: IN
35527: IFFALSE 35548
// points := [ 32 , 120 , 70 ] ;
35529: LD_ADDR_VAR 0 9
35533: PUSH
35534: LD_INT 32
35536: PUSH
35537: LD_INT 120
35539: PUSH
35540: LD_INT 70
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: LIST
35547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35548: LD_VAR 0 6
35552: PPUSH
35553: CALL_OW 264
35557: PUSH
35558: LD_INT 7
35560: PUSH
35561: LD_INT 28
35563: PUSH
35564: LD_INT 45
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: IN
35572: IFFALSE 35593
// points := [ 35 , 20 , 45 ] ;
35574: LD_ADDR_VAR 0 9
35578: PUSH
35579: LD_INT 35
35581: PUSH
35582: LD_INT 20
35584: PUSH
35585: LD_INT 45
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35593: LD_VAR 0 6
35597: PPUSH
35598: CALL_OW 264
35602: PUSH
35603: LD_INT 47
35605: PUSH
35606: EMPTY
35607: LIST
35608: IN
35609: IFFALSE 35630
// points := [ 67 , 45 , 75 ] ;
35611: LD_ADDR_VAR 0 9
35615: PUSH
35616: LD_INT 67
35618: PUSH
35619: LD_INT 45
35621: PUSH
35622: LD_INT 75
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35630: LD_VAR 0 6
35634: PPUSH
35635: CALL_OW 264
35639: PUSH
35640: LD_INT 26
35642: PUSH
35643: EMPTY
35644: LIST
35645: IN
35646: IFFALSE 35667
// points := [ 120 , 30 , 80 ] ;
35648: LD_ADDR_VAR 0 9
35652: PUSH
35653: LD_INT 120
35655: PUSH
35656: LD_INT 30
35658: PUSH
35659: LD_INT 80
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35667: LD_VAR 0 6
35671: PPUSH
35672: CALL_OW 264
35676: PUSH
35677: LD_INT 22
35679: PUSH
35680: EMPTY
35681: LIST
35682: IN
35683: IFFALSE 35704
// points := [ 40 , 1 , 1 ] ;
35685: LD_ADDR_VAR 0 9
35689: PUSH
35690: LD_INT 40
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: LIST
35703: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35704: LD_VAR 0 6
35708: PPUSH
35709: CALL_OW 264
35713: PUSH
35714: LD_INT 29
35716: PUSH
35717: EMPTY
35718: LIST
35719: IN
35720: IFFALSE 35741
// points := [ 70 , 200 , 400 ] ;
35722: LD_ADDR_VAR 0 9
35726: PUSH
35727: LD_INT 70
35729: PUSH
35730: LD_INT 200
35732: PUSH
35733: LD_INT 400
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35741: LD_VAR 0 6
35745: PPUSH
35746: CALL_OW 264
35750: PUSH
35751: LD_INT 14
35753: PUSH
35754: LD_INT 53
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: IN
35761: IFFALSE 35782
// points := [ 40 , 10 , 20 ] ;
35763: LD_ADDR_VAR 0 9
35767: PUSH
35768: LD_INT 40
35770: PUSH
35771: LD_INT 10
35773: PUSH
35774: LD_INT 20
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35782: LD_VAR 0 6
35786: PPUSH
35787: CALL_OW 264
35791: PUSH
35792: LD_INT 9
35794: PUSH
35795: EMPTY
35796: LIST
35797: IN
35798: IFFALSE 35819
// points := [ 5 , 70 , 20 ] ;
35800: LD_ADDR_VAR 0 9
35804: PUSH
35805: LD_INT 5
35807: PUSH
35808: LD_INT 70
35810: PUSH
35811: LD_INT 20
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35819: LD_VAR 0 6
35823: PPUSH
35824: CALL_OW 264
35828: PUSH
35829: LD_INT 10
35831: PUSH
35832: EMPTY
35833: LIST
35834: IN
35835: IFFALSE 35856
// points := [ 35 , 110 , 70 ] ;
35837: LD_ADDR_VAR 0 9
35841: PUSH
35842: LD_INT 35
35844: PUSH
35845: LD_INT 110
35847: PUSH
35848: LD_INT 70
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35856: LD_VAR 0 6
35860: PPUSH
35861: CALL_OW 265
35865: PUSH
35866: LD_INT 25
35868: EQUAL
35869: IFFALSE 35890
// points := [ 80 , 65 , 100 ] ;
35871: LD_ADDR_VAR 0 9
35875: PUSH
35876: LD_INT 80
35878: PUSH
35879: LD_INT 65
35881: PUSH
35882: LD_INT 100
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35890: LD_VAR 0 6
35894: PPUSH
35895: CALL_OW 263
35899: PUSH
35900: LD_INT 1
35902: EQUAL
35903: IFFALSE 35938
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35905: LD_ADDR_VAR 0 10
35909: PUSH
35910: LD_VAR 0 10
35914: PUSH
35915: LD_VAR 0 6
35919: PPUSH
35920: CALL_OW 311
35924: PPUSH
35925: LD_INT 3
35927: PPUSH
35928: CALL_OW 259
35932: PUSH
35933: LD_INT 4
35935: MUL
35936: MUL
35937: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35938: LD_VAR 0 6
35942: PPUSH
35943: CALL_OW 263
35947: PUSH
35948: LD_INT 2
35950: EQUAL
35951: IFFALSE 36002
// begin j := IsControledBy ( i ) ;
35953: LD_ADDR_VAR 0 7
35957: PUSH
35958: LD_VAR 0 6
35962: PPUSH
35963: CALL_OW 312
35967: ST_TO_ADDR
// if j then
35968: LD_VAR 0 7
35972: IFFALSE 36002
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35974: LD_ADDR_VAR 0 10
35978: PUSH
35979: LD_VAR 0 10
35983: PUSH
35984: LD_VAR 0 7
35988: PPUSH
35989: LD_INT 3
35991: PPUSH
35992: CALL_OW 259
35996: PUSH
35997: LD_INT 3
35999: MUL
36000: MUL
36001: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36002: LD_VAR 0 6
36006: PPUSH
36007: CALL_OW 264
36011: PUSH
36012: LD_INT 5
36014: PUSH
36015: LD_INT 6
36017: PUSH
36018: LD_INT 46
36020: PUSH
36021: LD_INT 44
36023: PUSH
36024: LD_INT 47
36026: PUSH
36027: LD_INT 45
36029: PUSH
36030: LD_INT 28
36032: PUSH
36033: LD_INT 7
36035: PUSH
36036: LD_INT 27
36038: PUSH
36039: LD_INT 29
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: IN
36054: PUSH
36055: LD_VAR 0 1
36059: PPUSH
36060: LD_INT 52
36062: PPUSH
36063: CALL_OW 321
36067: PUSH
36068: LD_INT 2
36070: EQUAL
36071: AND
36072: IFFALSE 36089
// bpoints := bpoints * 1.2 ;
36074: LD_ADDR_VAR 0 10
36078: PUSH
36079: LD_VAR 0 10
36083: PUSH
36084: LD_REAL  1.20000000000000E+0000
36087: MUL
36088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36089: LD_VAR 0 6
36093: PPUSH
36094: CALL_OW 264
36098: PUSH
36099: LD_INT 6
36101: PUSH
36102: LD_INT 46
36104: PUSH
36105: LD_INT 47
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: IN
36113: IFFALSE 36130
// bpoints := bpoints * 1.2 ;
36115: LD_ADDR_VAR 0 10
36119: PUSH
36120: LD_VAR 0 10
36124: PUSH
36125: LD_REAL  1.20000000000000E+0000
36128: MUL
36129: ST_TO_ADDR
// end ; unit_building :
36130: GO 36144
36132: LD_INT 3
36134: DOUBLE
36135: EQUAL
36136: IFTRUE 36140
36138: GO 36143
36140: POP
// ; end ;
36141: GO 36144
36143: POP
// for j = 1 to 3 do
36144: LD_ADDR_VAR 0 7
36148: PUSH
36149: DOUBLE
36150: LD_INT 1
36152: DEC
36153: ST_TO_ADDR
36154: LD_INT 3
36156: PUSH
36157: FOR_TO
36158: IFFALSE 36211
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36160: LD_ADDR_VAR 0 5
36164: PUSH
36165: LD_VAR 0 5
36169: PPUSH
36170: LD_VAR 0 7
36174: PPUSH
36175: LD_VAR 0 5
36179: PUSH
36180: LD_VAR 0 7
36184: ARRAY
36185: PUSH
36186: LD_VAR 0 9
36190: PUSH
36191: LD_VAR 0 7
36195: ARRAY
36196: PUSH
36197: LD_VAR 0 10
36201: MUL
36202: PLUS
36203: PPUSH
36204: CALL_OW 1
36208: ST_TO_ADDR
36209: GO 36157
36211: POP
36212: POP
// end ;
36213: GO 34696
36215: POP
36216: POP
// result := Replace ( result , 4 , tmp ) ;
36217: LD_ADDR_VAR 0 5
36221: PUSH
36222: LD_VAR 0 5
36226: PPUSH
36227: LD_INT 4
36229: PPUSH
36230: LD_VAR 0 8
36234: PPUSH
36235: CALL_OW 1
36239: ST_TO_ADDR
// end ;
36240: LD_VAR 0 5
36244: RET
// export function DangerAtRange ( unit , range ) ; begin
36245: LD_INT 0
36247: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36248: LD_ADDR_VAR 0 3
36252: PUSH
36253: LD_VAR 0 1
36257: PPUSH
36258: CALL_OW 255
36262: PPUSH
36263: LD_VAR 0 1
36267: PPUSH
36268: CALL_OW 250
36272: PPUSH
36273: LD_VAR 0 1
36277: PPUSH
36278: CALL_OW 251
36282: PPUSH
36283: LD_VAR 0 2
36287: PPUSH
36288: CALL 34548 0 4
36292: ST_TO_ADDR
// end ;
36293: LD_VAR 0 3
36297: RET
// export function DangerInArea ( side , area ) ; begin
36298: LD_INT 0
36300: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36301: LD_ADDR_VAR 0 3
36305: PUSH
36306: LD_VAR 0 2
36310: PPUSH
36311: LD_INT 81
36313: PUSH
36314: LD_VAR 0 1
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PPUSH
36323: CALL_OW 70
36327: ST_TO_ADDR
// end ;
36328: LD_VAR 0 3
36332: RET
// export function IsExtension ( b ) ; begin
36333: LD_INT 0
36335: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36336: LD_ADDR_VAR 0 2
36340: PUSH
36341: LD_VAR 0 1
36345: PUSH
36346: LD_INT 23
36348: PUSH
36349: LD_INT 20
36351: PUSH
36352: LD_INT 22
36354: PUSH
36355: LD_INT 17
36357: PUSH
36358: LD_INT 24
36360: PUSH
36361: LD_INT 21
36363: PUSH
36364: LD_INT 19
36366: PUSH
36367: LD_INT 16
36369: PUSH
36370: LD_INT 25
36372: PUSH
36373: LD_INT 18
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: IN
36388: ST_TO_ADDR
// end ;
36389: LD_VAR 0 2
36393: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
36394: LD_INT 0
36396: PPUSH
36397: PPUSH
36398: PPUSH
// result := [ ] ;
36399: LD_ADDR_VAR 0 3
36403: PUSH
36404: EMPTY
36405: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36406: LD_ADDR_VAR 0 4
36410: PUSH
36411: LD_VAR 0 2
36415: PPUSH
36416: LD_INT 21
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PPUSH
36426: CALL_OW 70
36430: ST_TO_ADDR
// if not tmp then
36431: LD_VAR 0 4
36435: NOT
36436: IFFALSE 36440
// exit ;
36438: GO 36498
// for i in tmp do
36440: LD_ADDR_VAR 0 5
36444: PUSH
36445: LD_VAR 0 4
36449: PUSH
36450: FOR_IN
36451: IFFALSE 36486
// if GetBase ( i ) <> base then
36453: LD_VAR 0 5
36457: PPUSH
36458: CALL_OW 274
36462: PUSH
36463: LD_VAR 0 1
36467: NONEQUAL
36468: IFFALSE 36484
// ComLinkToBase ( base , i ) ;
36470: LD_VAR 0 1
36474: PPUSH
36475: LD_VAR 0 5
36479: PPUSH
36480: CALL_OW 169
36484: GO 36450
36486: POP
36487: POP
// result := tmp ;
36488: LD_ADDR_VAR 0 3
36492: PUSH
36493: LD_VAR 0 4
36497: ST_TO_ADDR
// end ;
36498: LD_VAR 0 3
36502: RET
// export function ComComplete ( unit , b ) ; var i ; begin
36503: LD_INT 0
36505: PPUSH
36506: PPUSH
// if BuildingStatus ( b ) = bs_build then
36507: LD_VAR 0 2
36511: PPUSH
36512: CALL_OW 461
36516: PUSH
36517: LD_INT 1
36519: EQUAL
36520: IFFALSE 36580
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36522: LD_VAR 0 1
36526: PPUSH
36527: LD_STRING h
36529: PUSH
36530: LD_VAR 0 2
36534: PPUSH
36535: CALL_OW 250
36539: PUSH
36540: LD_VAR 0 2
36544: PPUSH
36545: CALL_OW 251
36549: PUSH
36550: LD_VAR 0 2
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: PUSH
36573: EMPTY
36574: LIST
36575: PPUSH
36576: CALL_OW 446
// end ;
36580: LD_VAR 0 3
36584: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36585: LD_INT 0
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36593: LD_VAR 0 1
36597: NOT
36598: PUSH
36599: LD_VAR 0 1
36603: PPUSH
36604: CALL_OW 263
36608: PUSH
36609: LD_INT 2
36611: EQUAL
36612: NOT
36613: OR
36614: IFFALSE 36618
// exit ;
36616: GO 36934
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36618: LD_ADDR_VAR 0 6
36622: PUSH
36623: LD_INT 22
36625: PUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 255
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: LD_INT 30
36645: PUSH
36646: LD_INT 36
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 34
36655: PUSH
36656: LD_INT 31
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: LIST
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PPUSH
36672: CALL_OW 69
36676: ST_TO_ADDR
// if not tmp then
36677: LD_VAR 0 6
36681: NOT
36682: IFFALSE 36686
// exit ;
36684: GO 36934
// result := [ ] ;
36686: LD_ADDR_VAR 0 2
36690: PUSH
36691: EMPTY
36692: ST_TO_ADDR
// for i in tmp do
36693: LD_ADDR_VAR 0 3
36697: PUSH
36698: LD_VAR 0 6
36702: PUSH
36703: FOR_IN
36704: IFFALSE 36775
// begin t := UnitsInside ( i ) ;
36706: LD_ADDR_VAR 0 4
36710: PUSH
36711: LD_VAR 0 3
36715: PPUSH
36716: CALL_OW 313
36720: ST_TO_ADDR
// if t then
36721: LD_VAR 0 4
36725: IFFALSE 36773
// for j in t do
36727: LD_ADDR_VAR 0 7
36731: PUSH
36732: LD_VAR 0 4
36736: PUSH
36737: FOR_IN
36738: IFFALSE 36771
// result := Insert ( result , result + 1 , j ) ;
36740: LD_ADDR_VAR 0 2
36744: PUSH
36745: LD_VAR 0 2
36749: PPUSH
36750: LD_VAR 0 2
36754: PUSH
36755: LD_INT 1
36757: PLUS
36758: PPUSH
36759: LD_VAR 0 7
36763: PPUSH
36764: CALL_OW 2
36768: ST_TO_ADDR
36769: GO 36737
36771: POP
36772: POP
// end ;
36773: GO 36703
36775: POP
36776: POP
// if not result then
36777: LD_VAR 0 2
36781: NOT
36782: IFFALSE 36786
// exit ;
36784: GO 36934
// mech := result [ 1 ] ;
36786: LD_ADDR_VAR 0 5
36790: PUSH
36791: LD_VAR 0 2
36795: PUSH
36796: LD_INT 1
36798: ARRAY
36799: ST_TO_ADDR
// if result > 1 then
36800: LD_VAR 0 2
36804: PUSH
36805: LD_INT 1
36807: GREATER
36808: IFFALSE 36920
// for i = 2 to result do
36810: LD_ADDR_VAR 0 3
36814: PUSH
36815: DOUBLE
36816: LD_INT 2
36818: DEC
36819: ST_TO_ADDR
36820: LD_VAR 0 2
36824: PUSH
36825: FOR_TO
36826: IFFALSE 36918
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36828: LD_ADDR_VAR 0 4
36832: PUSH
36833: LD_VAR 0 2
36837: PUSH
36838: LD_VAR 0 3
36842: ARRAY
36843: PPUSH
36844: LD_INT 3
36846: PPUSH
36847: CALL_OW 259
36851: PUSH
36852: LD_VAR 0 2
36856: PUSH
36857: LD_VAR 0 3
36861: ARRAY
36862: PPUSH
36863: CALL_OW 432
36867: MINUS
36868: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36869: LD_VAR 0 4
36873: PUSH
36874: LD_VAR 0 5
36878: PPUSH
36879: LD_INT 3
36881: PPUSH
36882: CALL_OW 259
36886: PUSH
36887: LD_VAR 0 5
36891: PPUSH
36892: CALL_OW 432
36896: MINUS
36897: GREATEREQUAL
36898: IFFALSE 36916
// mech := result [ i ] ;
36900: LD_ADDR_VAR 0 5
36904: PUSH
36905: LD_VAR 0 2
36909: PUSH
36910: LD_VAR 0 3
36914: ARRAY
36915: ST_TO_ADDR
// end ;
36916: GO 36825
36918: POP
36919: POP
// ComLinkTo ( vehicle , mech ) ;
36920: LD_VAR 0 1
36924: PPUSH
36925: LD_VAR 0 5
36929: PPUSH
36930: CALL_OW 135
// end ;
36934: LD_VAR 0 2
36938: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36939: LD_INT 0
36941: PPUSH
36942: PPUSH
36943: PPUSH
36944: PPUSH
36945: PPUSH
36946: PPUSH
36947: PPUSH
36948: PPUSH
36949: PPUSH
36950: PPUSH
36951: PPUSH
36952: PPUSH
36953: PPUSH
// result := [ ] ;
36954: LD_ADDR_VAR 0 7
36958: PUSH
36959: EMPTY
36960: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36961: LD_VAR 0 1
36965: PPUSH
36966: CALL_OW 266
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: IN
36981: NOT
36982: IFFALSE 36986
// exit ;
36984: GO 38617
// if name then
36986: LD_VAR 0 3
36990: IFFALSE 37006
// SetBName ( base_dep , name ) ;
36992: LD_VAR 0 1
36996: PPUSH
36997: LD_VAR 0 3
37001: PPUSH
37002: CALL_OW 500
// base := GetBase ( base_dep ) ;
37006: LD_ADDR_VAR 0 15
37010: PUSH
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 274
37020: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37021: LD_ADDR_VAR 0 16
37025: PUSH
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 255
37035: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37036: LD_ADDR_VAR 0 17
37040: PUSH
37041: LD_VAR 0 1
37045: PPUSH
37046: CALL_OW 248
37050: ST_TO_ADDR
// if sources then
37051: LD_VAR 0 5
37055: IFFALSE 37102
// for i = 1 to 3 do
37057: LD_ADDR_VAR 0 8
37061: PUSH
37062: DOUBLE
37063: LD_INT 1
37065: DEC
37066: ST_TO_ADDR
37067: LD_INT 3
37069: PUSH
37070: FOR_TO
37071: IFFALSE 37100
// AddResourceType ( base , i , sources [ i ] ) ;
37073: LD_VAR 0 15
37077: PPUSH
37078: LD_VAR 0 8
37082: PPUSH
37083: LD_VAR 0 5
37087: PUSH
37088: LD_VAR 0 8
37092: ARRAY
37093: PPUSH
37094: CALL_OW 276
37098: GO 37070
37100: POP
37101: POP
// buildings := GetBaseBuildings ( base , area ) ;
37102: LD_ADDR_VAR 0 18
37106: PUSH
37107: LD_VAR 0 15
37111: PPUSH
37112: LD_VAR 0 2
37116: PPUSH
37117: CALL 36394 0 2
37121: ST_TO_ADDR
// InitHc ;
37122: CALL_OW 19
// InitUc ;
37126: CALL_OW 18
// uc_side := side ;
37130: LD_ADDR_OWVAR 20
37134: PUSH
37135: LD_VAR 0 16
37139: ST_TO_ADDR
// uc_nation := nation ;
37140: LD_ADDR_OWVAR 21
37144: PUSH
37145: LD_VAR 0 17
37149: ST_TO_ADDR
// if buildings then
37150: LD_VAR 0 18
37154: IFFALSE 38476
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37156: LD_ADDR_VAR 0 19
37160: PUSH
37161: LD_VAR 0 18
37165: PPUSH
37166: LD_INT 2
37168: PUSH
37169: LD_INT 30
37171: PUSH
37172: LD_INT 29
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 30
37181: PUSH
37182: LD_INT 30
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: LIST
37193: PPUSH
37194: CALL_OW 72
37198: ST_TO_ADDR
// if tmp then
37199: LD_VAR 0 19
37203: IFFALSE 37251
// for i in tmp do
37205: LD_ADDR_VAR 0 8
37209: PUSH
37210: LD_VAR 0 19
37214: PUSH
37215: FOR_IN
37216: IFFALSE 37249
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37218: LD_VAR 0 8
37222: PPUSH
37223: CALL_OW 250
37227: PPUSH
37228: LD_VAR 0 8
37232: PPUSH
37233: CALL_OW 251
37237: PPUSH
37238: LD_VAR 0 16
37242: PPUSH
37243: CALL_OW 441
37247: GO 37215
37249: POP
37250: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37251: LD_VAR 0 18
37255: PPUSH
37256: LD_INT 2
37258: PUSH
37259: LD_INT 30
37261: PUSH
37262: LD_INT 32
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 30
37271: PUSH
37272: LD_INT 33
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: LIST
37283: PPUSH
37284: CALL_OW 72
37288: IFFALSE 37376
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37290: LD_ADDR_VAR 0 8
37294: PUSH
37295: LD_VAR 0 18
37299: PPUSH
37300: LD_INT 2
37302: PUSH
37303: LD_INT 30
37305: PUSH
37306: LD_INT 32
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 30
37315: PUSH
37316: LD_INT 33
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: LIST
37327: PPUSH
37328: CALL_OW 72
37332: PUSH
37333: FOR_IN
37334: IFFALSE 37374
// begin if not GetBWeapon ( i ) then
37336: LD_VAR 0 8
37340: PPUSH
37341: CALL_OW 269
37345: NOT
37346: IFFALSE 37372
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37348: LD_VAR 0 8
37352: PPUSH
37353: LD_VAR 0 8
37357: PPUSH
37358: LD_VAR 0 2
37362: PPUSH
37363: CALL 38622 0 2
37367: PPUSH
37368: CALL_OW 431
// end ;
37372: GO 37333
37374: POP
37375: POP
// end ; for i = 1 to personel do
37376: LD_ADDR_VAR 0 8
37380: PUSH
37381: DOUBLE
37382: LD_INT 1
37384: DEC
37385: ST_TO_ADDR
37386: LD_VAR 0 6
37390: PUSH
37391: FOR_TO
37392: IFFALSE 38456
// begin if i > 4 then
37394: LD_VAR 0 8
37398: PUSH
37399: LD_INT 4
37401: GREATER
37402: IFFALSE 37406
// break ;
37404: GO 38456
// case i of 1 :
37406: LD_VAR 0 8
37410: PUSH
37411: LD_INT 1
37413: DOUBLE
37414: EQUAL
37415: IFTRUE 37419
37417: GO 37499
37419: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37420: LD_ADDR_VAR 0 12
37424: PUSH
37425: LD_VAR 0 18
37429: PPUSH
37430: LD_INT 22
37432: PUSH
37433: LD_VAR 0 16
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 58
37444: PUSH
37445: EMPTY
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: LD_INT 30
37453: PUSH
37454: LD_INT 32
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 30
37463: PUSH
37464: LD_INT 4
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 30
37473: PUSH
37474: LD_INT 5
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: PPUSH
37492: CALL_OW 72
37496: ST_TO_ADDR
37497: GO 37721
37499: LD_INT 2
37501: DOUBLE
37502: EQUAL
37503: IFTRUE 37507
37505: GO 37569
37507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37508: LD_ADDR_VAR 0 12
37512: PUSH
37513: LD_VAR 0 18
37517: PPUSH
37518: LD_INT 22
37520: PUSH
37521: LD_VAR 0 16
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 30
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 30
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PPUSH
37562: CALL_OW 72
37566: ST_TO_ADDR
37567: GO 37721
37569: LD_INT 3
37571: DOUBLE
37572: EQUAL
37573: IFTRUE 37577
37575: GO 37639
37577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37578: LD_ADDR_VAR 0 12
37582: PUSH
37583: LD_VAR 0 18
37587: PPUSH
37588: LD_INT 22
37590: PUSH
37591: LD_VAR 0 16
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: LD_INT 30
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 30
37615: PUSH
37616: LD_INT 3
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PPUSH
37632: CALL_OW 72
37636: ST_TO_ADDR
37637: GO 37721
37639: LD_INT 4
37641: DOUBLE
37642: EQUAL
37643: IFTRUE 37647
37645: GO 37720
37647: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37648: LD_ADDR_VAR 0 12
37652: PUSH
37653: LD_VAR 0 18
37657: PPUSH
37658: LD_INT 22
37660: PUSH
37661: LD_VAR 0 16
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 30
37675: PUSH
37676: LD_INT 6
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 30
37685: PUSH
37686: LD_INT 7
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 30
37695: PUSH
37696: LD_INT 8
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PPUSH
37713: CALL_OW 72
37717: ST_TO_ADDR
37718: GO 37721
37720: POP
// if i = 1 then
37721: LD_VAR 0 8
37725: PUSH
37726: LD_INT 1
37728: EQUAL
37729: IFFALSE 37840
// begin tmp := [ ] ;
37731: LD_ADDR_VAR 0 19
37735: PUSH
37736: EMPTY
37737: ST_TO_ADDR
// for j in f do
37738: LD_ADDR_VAR 0 9
37742: PUSH
37743: LD_VAR 0 12
37747: PUSH
37748: FOR_IN
37749: IFFALSE 37822
// if GetBType ( j ) = b_bunker then
37751: LD_VAR 0 9
37755: PPUSH
37756: CALL_OW 266
37760: PUSH
37761: LD_INT 32
37763: EQUAL
37764: IFFALSE 37791
// tmp := Insert ( tmp , 1 , j ) else
37766: LD_ADDR_VAR 0 19
37770: PUSH
37771: LD_VAR 0 19
37775: PPUSH
37776: LD_INT 1
37778: PPUSH
37779: LD_VAR 0 9
37783: PPUSH
37784: CALL_OW 2
37788: ST_TO_ADDR
37789: GO 37820
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37791: LD_ADDR_VAR 0 19
37795: PUSH
37796: LD_VAR 0 19
37800: PPUSH
37801: LD_VAR 0 19
37805: PUSH
37806: LD_INT 1
37808: PLUS
37809: PPUSH
37810: LD_VAR 0 9
37814: PPUSH
37815: CALL_OW 2
37819: ST_TO_ADDR
37820: GO 37748
37822: POP
37823: POP
// if tmp then
37824: LD_VAR 0 19
37828: IFFALSE 37840
// f := tmp ;
37830: LD_ADDR_VAR 0 12
37834: PUSH
37835: LD_VAR 0 19
37839: ST_TO_ADDR
// end ; x := personel [ i ] ;
37840: LD_ADDR_VAR 0 13
37844: PUSH
37845: LD_VAR 0 6
37849: PUSH
37850: LD_VAR 0 8
37854: ARRAY
37855: ST_TO_ADDR
// if x = - 1 then
37856: LD_VAR 0 13
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: EQUAL
37865: IFFALSE 38074
// begin for j in f do
37867: LD_ADDR_VAR 0 9
37871: PUSH
37872: LD_VAR 0 12
37876: PUSH
37877: FOR_IN
37878: IFFALSE 38070
// repeat InitHc ;
37880: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37884: LD_VAR 0 9
37888: PPUSH
37889: CALL_OW 266
37893: PUSH
37894: LD_INT 5
37896: EQUAL
37897: IFFALSE 37967
// begin if UnitsInside ( j ) < 3 then
37899: LD_VAR 0 9
37903: PPUSH
37904: CALL_OW 313
37908: PUSH
37909: LD_INT 3
37911: LESS
37912: IFFALSE 37948
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37914: LD_INT 0
37916: PPUSH
37917: LD_INT 5
37919: PUSH
37920: LD_INT 8
37922: PUSH
37923: LD_INT 9
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: LD_VAR 0 17
37935: ARRAY
37936: PPUSH
37937: LD_VAR 0 4
37941: PPUSH
37942: CALL_OW 380
37946: GO 37965
// PrepareHuman ( false , i , skill ) ;
37948: LD_INT 0
37950: PPUSH
37951: LD_VAR 0 8
37955: PPUSH
37956: LD_VAR 0 4
37960: PPUSH
37961: CALL_OW 380
// end else
37965: GO 37984
// PrepareHuman ( false , i , skill ) ;
37967: LD_INT 0
37969: PPUSH
37970: LD_VAR 0 8
37974: PPUSH
37975: LD_VAR 0 4
37979: PPUSH
37980: CALL_OW 380
// un := CreateHuman ;
37984: LD_ADDR_VAR 0 14
37988: PUSH
37989: CALL_OW 44
37993: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37994: LD_ADDR_VAR 0 7
37998: PUSH
37999: LD_VAR 0 7
38003: PPUSH
38004: LD_INT 1
38006: PPUSH
38007: LD_VAR 0 14
38011: PPUSH
38012: CALL_OW 2
38016: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38017: LD_VAR 0 14
38021: PPUSH
38022: LD_VAR 0 9
38026: PPUSH
38027: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38031: LD_VAR 0 9
38035: PPUSH
38036: CALL_OW 313
38040: PUSH
38041: LD_INT 6
38043: EQUAL
38044: PUSH
38045: LD_VAR 0 9
38049: PPUSH
38050: CALL_OW 266
38054: PUSH
38055: LD_INT 32
38057: PUSH
38058: LD_INT 31
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: IN
38065: OR
38066: IFFALSE 37880
38068: GO 37877
38070: POP
38071: POP
// end else
38072: GO 38454
// for j = 1 to x do
38074: LD_ADDR_VAR 0 9
38078: PUSH
38079: DOUBLE
38080: LD_INT 1
38082: DEC
38083: ST_TO_ADDR
38084: LD_VAR 0 13
38088: PUSH
38089: FOR_TO
38090: IFFALSE 38452
// begin InitHc ;
38092: CALL_OW 19
// if not f then
38096: LD_VAR 0 12
38100: NOT
38101: IFFALSE 38190
// begin PrepareHuman ( false , i , skill ) ;
38103: LD_INT 0
38105: PPUSH
38106: LD_VAR 0 8
38110: PPUSH
38111: LD_VAR 0 4
38115: PPUSH
38116: CALL_OW 380
// un := CreateHuman ;
38120: LD_ADDR_VAR 0 14
38124: PUSH
38125: CALL_OW 44
38129: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38130: LD_ADDR_VAR 0 7
38134: PUSH
38135: LD_VAR 0 7
38139: PPUSH
38140: LD_INT 1
38142: PPUSH
38143: LD_VAR 0 14
38147: PPUSH
38148: CALL_OW 2
38152: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38153: LD_VAR 0 14
38157: PPUSH
38158: LD_VAR 0 1
38162: PPUSH
38163: CALL_OW 250
38167: PPUSH
38168: LD_VAR 0 1
38172: PPUSH
38173: CALL_OW 251
38177: PPUSH
38178: LD_INT 10
38180: PPUSH
38181: LD_INT 0
38183: PPUSH
38184: CALL_OW 50
// continue ;
38188: GO 38089
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38190: LD_VAR 0 12
38194: PUSH
38195: LD_INT 1
38197: ARRAY
38198: PPUSH
38199: CALL_OW 313
38203: PUSH
38204: LD_VAR 0 12
38208: PUSH
38209: LD_INT 1
38211: ARRAY
38212: PPUSH
38213: CALL_OW 266
38217: PUSH
38218: LD_INT 32
38220: PUSH
38221: LD_INT 31
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: IN
38228: AND
38229: PUSH
38230: LD_VAR 0 12
38234: PUSH
38235: LD_INT 1
38237: ARRAY
38238: PPUSH
38239: CALL_OW 313
38243: PUSH
38244: LD_INT 6
38246: EQUAL
38247: OR
38248: IFFALSE 38268
// f := Delete ( f , 1 ) ;
38250: LD_ADDR_VAR 0 12
38254: PUSH
38255: LD_VAR 0 12
38259: PPUSH
38260: LD_INT 1
38262: PPUSH
38263: CALL_OW 3
38267: ST_TO_ADDR
// if not f then
38268: LD_VAR 0 12
38272: NOT
38273: IFFALSE 38291
// begin x := x + 2 ;
38275: LD_ADDR_VAR 0 13
38279: PUSH
38280: LD_VAR 0 13
38284: PUSH
38285: LD_INT 2
38287: PLUS
38288: ST_TO_ADDR
// continue ;
38289: GO 38089
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38291: LD_VAR 0 12
38295: PUSH
38296: LD_INT 1
38298: ARRAY
38299: PPUSH
38300: CALL_OW 266
38304: PUSH
38305: LD_INT 5
38307: EQUAL
38308: IFFALSE 38382
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38310: LD_VAR 0 12
38314: PUSH
38315: LD_INT 1
38317: ARRAY
38318: PPUSH
38319: CALL_OW 313
38323: PUSH
38324: LD_INT 3
38326: LESS
38327: IFFALSE 38363
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38329: LD_INT 0
38331: PPUSH
38332: LD_INT 5
38334: PUSH
38335: LD_INT 8
38337: PUSH
38338: LD_INT 9
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: LIST
38345: PUSH
38346: LD_VAR 0 17
38350: ARRAY
38351: PPUSH
38352: LD_VAR 0 4
38356: PPUSH
38357: CALL_OW 380
38361: GO 38380
// PrepareHuman ( false , i , skill ) ;
38363: LD_INT 0
38365: PPUSH
38366: LD_VAR 0 8
38370: PPUSH
38371: LD_VAR 0 4
38375: PPUSH
38376: CALL_OW 380
// end else
38380: GO 38399
// PrepareHuman ( false , i , skill ) ;
38382: LD_INT 0
38384: PPUSH
38385: LD_VAR 0 8
38389: PPUSH
38390: LD_VAR 0 4
38394: PPUSH
38395: CALL_OW 380
// un := CreateHuman ;
38399: LD_ADDR_VAR 0 14
38403: PUSH
38404: CALL_OW 44
38408: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38409: LD_ADDR_VAR 0 7
38413: PUSH
38414: LD_VAR 0 7
38418: PPUSH
38419: LD_INT 1
38421: PPUSH
38422: LD_VAR 0 14
38426: PPUSH
38427: CALL_OW 2
38431: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38432: LD_VAR 0 14
38436: PPUSH
38437: LD_VAR 0 12
38441: PUSH
38442: LD_INT 1
38444: ARRAY
38445: PPUSH
38446: CALL_OW 52
// end ;
38450: GO 38089
38452: POP
38453: POP
// end ;
38454: GO 37391
38456: POP
38457: POP
// result := result ^ buildings ;
38458: LD_ADDR_VAR 0 7
38462: PUSH
38463: LD_VAR 0 7
38467: PUSH
38468: LD_VAR 0 18
38472: ADD
38473: ST_TO_ADDR
// end else
38474: GO 38617
// begin for i = 1 to personel do
38476: LD_ADDR_VAR 0 8
38480: PUSH
38481: DOUBLE
38482: LD_INT 1
38484: DEC
38485: ST_TO_ADDR
38486: LD_VAR 0 6
38490: PUSH
38491: FOR_TO
38492: IFFALSE 38615
// begin if i > 4 then
38494: LD_VAR 0 8
38498: PUSH
38499: LD_INT 4
38501: GREATER
38502: IFFALSE 38506
// break ;
38504: GO 38615
// x := personel [ i ] ;
38506: LD_ADDR_VAR 0 13
38510: PUSH
38511: LD_VAR 0 6
38515: PUSH
38516: LD_VAR 0 8
38520: ARRAY
38521: ST_TO_ADDR
// if x = - 1 then
38522: LD_VAR 0 13
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: EQUAL
38531: IFFALSE 38535
// continue ;
38533: GO 38491
// PrepareHuman ( false , i , skill ) ;
38535: LD_INT 0
38537: PPUSH
38538: LD_VAR 0 8
38542: PPUSH
38543: LD_VAR 0 4
38547: PPUSH
38548: CALL_OW 380
// un := CreateHuman ;
38552: LD_ADDR_VAR 0 14
38556: PUSH
38557: CALL_OW 44
38561: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38562: LD_VAR 0 14
38566: PPUSH
38567: LD_VAR 0 1
38571: PPUSH
38572: CALL_OW 250
38576: PPUSH
38577: LD_VAR 0 1
38581: PPUSH
38582: CALL_OW 251
38586: PPUSH
38587: LD_INT 10
38589: PPUSH
38590: LD_INT 0
38592: PPUSH
38593: CALL_OW 50
// result := result ^ un ;
38597: LD_ADDR_VAR 0 7
38601: PUSH
38602: LD_VAR 0 7
38606: PUSH
38607: LD_VAR 0 14
38611: ADD
38612: ST_TO_ADDR
// end ;
38613: GO 38491
38615: POP
38616: POP
// end ; end ;
38617: LD_VAR 0 7
38621: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38622: LD_INT 0
38624: PPUSH
38625: PPUSH
38626: PPUSH
38627: PPUSH
38628: PPUSH
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
38637: PPUSH
38638: PPUSH
38639: PPUSH
// result := false ;
38640: LD_ADDR_VAR 0 3
38644: PUSH
38645: LD_INT 0
38647: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38648: LD_VAR 0 1
38652: NOT
38653: PUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: CALL_OW 266
38663: PUSH
38664: LD_INT 32
38666: PUSH
38667: LD_INT 33
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: IN
38674: NOT
38675: OR
38676: IFFALSE 38680
// exit ;
38678: GO 39816
// nat := GetNation ( tower ) ;
38680: LD_ADDR_VAR 0 12
38684: PUSH
38685: LD_VAR 0 1
38689: PPUSH
38690: CALL_OW 248
38694: ST_TO_ADDR
// side := GetSide ( tower ) ;
38695: LD_ADDR_VAR 0 16
38699: PUSH
38700: LD_VAR 0 1
38704: PPUSH
38705: CALL_OW 255
38709: ST_TO_ADDR
// x := GetX ( tower ) ;
38710: LD_ADDR_VAR 0 10
38714: PUSH
38715: LD_VAR 0 1
38719: PPUSH
38720: CALL_OW 250
38724: ST_TO_ADDR
// y := GetY ( tower ) ;
38725: LD_ADDR_VAR 0 11
38729: PUSH
38730: LD_VAR 0 1
38734: PPUSH
38735: CALL_OW 251
38739: ST_TO_ADDR
// if not x or not y then
38740: LD_VAR 0 10
38744: NOT
38745: PUSH
38746: LD_VAR 0 11
38750: NOT
38751: OR
38752: IFFALSE 38756
// exit ;
38754: GO 39816
// weapon := 0 ;
38756: LD_ADDR_VAR 0 18
38760: PUSH
38761: LD_INT 0
38763: ST_TO_ADDR
// fac_list := [ ] ;
38764: LD_ADDR_VAR 0 17
38768: PUSH
38769: EMPTY
38770: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38771: LD_ADDR_VAR 0 6
38775: PUSH
38776: LD_VAR 0 1
38780: PPUSH
38781: CALL_OW 274
38785: PPUSH
38786: LD_VAR 0 2
38790: PPUSH
38791: CALL 36394 0 2
38795: PPUSH
38796: LD_INT 30
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PPUSH
38806: CALL_OW 72
38810: ST_TO_ADDR
// if not factories then
38811: LD_VAR 0 6
38815: NOT
38816: IFFALSE 38820
// exit ;
38818: GO 39816
// for i in factories do
38820: LD_ADDR_VAR 0 8
38824: PUSH
38825: LD_VAR 0 6
38829: PUSH
38830: FOR_IN
38831: IFFALSE 38856
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38833: LD_ADDR_VAR 0 17
38837: PUSH
38838: LD_VAR 0 17
38842: PUSH
38843: LD_VAR 0 8
38847: PPUSH
38848: CALL_OW 478
38852: UNION
38853: ST_TO_ADDR
38854: GO 38830
38856: POP
38857: POP
// if not fac_list then
38858: LD_VAR 0 17
38862: NOT
38863: IFFALSE 38867
// exit ;
38865: GO 39816
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38867: LD_ADDR_VAR 0 5
38871: PUSH
38872: LD_INT 4
38874: PUSH
38875: LD_INT 5
38877: PUSH
38878: LD_INT 9
38880: PUSH
38881: LD_INT 10
38883: PUSH
38884: LD_INT 6
38886: PUSH
38887: LD_INT 7
38889: PUSH
38890: LD_INT 11
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 27
38904: PUSH
38905: LD_INT 28
38907: PUSH
38908: LD_INT 26
38910: PUSH
38911: LD_INT 30
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 43
38922: PUSH
38923: LD_INT 44
38925: PUSH
38926: LD_INT 46
38928: PUSH
38929: LD_INT 45
38931: PUSH
38932: LD_INT 47
38934: PUSH
38935: LD_INT 49
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: PUSH
38951: LD_VAR 0 12
38955: ARRAY
38956: ST_TO_ADDR
// for i in list do
38957: LD_ADDR_VAR 0 8
38961: PUSH
38962: LD_VAR 0 5
38966: PUSH
38967: FOR_IN
38968: IFFALSE 39001
// if not i in fac_list then
38970: LD_VAR 0 8
38974: PUSH
38975: LD_VAR 0 17
38979: IN
38980: NOT
38981: IFFALSE 38999
// list := list diff i ;
38983: LD_ADDR_VAR 0 5
38987: PUSH
38988: LD_VAR 0 5
38992: PUSH
38993: LD_VAR 0 8
38997: DIFF
38998: ST_TO_ADDR
38999: GO 38967
39001: POP
39002: POP
// if not list then
39003: LD_VAR 0 5
39007: NOT
39008: IFFALSE 39012
// exit ;
39010: GO 39816
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39012: LD_VAR 0 12
39016: PUSH
39017: LD_INT 3
39019: EQUAL
39020: PUSH
39021: LD_INT 49
39023: PUSH
39024: LD_VAR 0 5
39028: IN
39029: AND
39030: PUSH
39031: LD_INT 31
39033: PPUSH
39034: LD_VAR 0 16
39038: PPUSH
39039: CALL_OW 321
39043: PUSH
39044: LD_INT 2
39046: EQUAL
39047: AND
39048: IFFALSE 39108
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39050: LD_INT 22
39052: PUSH
39053: LD_VAR 0 16
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 35
39064: PUSH
39065: LD_INT 49
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 91
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: LD_INT 10
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: PPUSH
39093: CALL_OW 69
39097: NOT
39098: IFFALSE 39108
// weapon := ru_time_lapser ;
39100: LD_ADDR_VAR 0 18
39104: PUSH
39105: LD_INT 49
39107: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39108: LD_VAR 0 12
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: IN
39123: PUSH
39124: LD_INT 11
39126: PUSH
39127: LD_VAR 0 5
39131: IN
39132: PUSH
39133: LD_INT 30
39135: PUSH
39136: LD_VAR 0 5
39140: IN
39141: OR
39142: AND
39143: PUSH
39144: LD_INT 6
39146: PPUSH
39147: LD_VAR 0 16
39151: PPUSH
39152: CALL_OW 321
39156: PUSH
39157: LD_INT 2
39159: EQUAL
39160: AND
39161: IFFALSE 39326
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39163: LD_INT 22
39165: PUSH
39166: LD_VAR 0 16
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: LD_INT 35
39180: PUSH
39181: LD_INT 11
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 35
39190: PUSH
39191: LD_INT 30
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 91
39205: PUSH
39206: LD_VAR 0 1
39210: PUSH
39211: LD_INT 18
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: PPUSH
39224: CALL_OW 69
39228: NOT
39229: PUSH
39230: LD_INT 22
39232: PUSH
39233: LD_VAR 0 16
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 2
39244: PUSH
39245: LD_INT 30
39247: PUSH
39248: LD_INT 32
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 30
39257: PUSH
39258: LD_INT 33
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 91
39272: PUSH
39273: LD_VAR 0 1
39277: PUSH
39278: LD_INT 12
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: PUSH
39291: EMPTY
39292: LIST
39293: PPUSH
39294: CALL_OW 69
39298: PUSH
39299: LD_INT 2
39301: GREATER
39302: AND
39303: IFFALSE 39326
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39305: LD_ADDR_VAR 0 18
39309: PUSH
39310: LD_INT 11
39312: PUSH
39313: LD_INT 30
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_VAR 0 12
39324: ARRAY
39325: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39326: LD_VAR 0 18
39330: NOT
39331: PUSH
39332: LD_INT 40
39334: PPUSH
39335: LD_VAR 0 16
39339: PPUSH
39340: CALL_OW 321
39344: PUSH
39345: LD_INT 2
39347: EQUAL
39348: AND
39349: PUSH
39350: LD_INT 7
39352: PUSH
39353: LD_VAR 0 5
39357: IN
39358: PUSH
39359: LD_INT 28
39361: PUSH
39362: LD_VAR 0 5
39366: IN
39367: OR
39368: PUSH
39369: LD_INT 45
39371: PUSH
39372: LD_VAR 0 5
39376: IN
39377: OR
39378: AND
39379: IFFALSE 39633
// begin hex := GetHexInfo ( x , y ) ;
39381: LD_ADDR_VAR 0 4
39385: PUSH
39386: LD_VAR 0 10
39390: PPUSH
39391: LD_VAR 0 11
39395: PPUSH
39396: CALL_OW 546
39400: ST_TO_ADDR
// if hex [ 1 ] then
39401: LD_VAR 0 4
39405: PUSH
39406: LD_INT 1
39408: ARRAY
39409: IFFALSE 39413
// exit ;
39411: GO 39816
// height := hex [ 2 ] ;
39413: LD_ADDR_VAR 0 15
39417: PUSH
39418: LD_VAR 0 4
39422: PUSH
39423: LD_INT 2
39425: ARRAY
39426: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39427: LD_ADDR_VAR 0 14
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: LD_INT 3
39440: PUSH
39441: LD_INT 5
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: ST_TO_ADDR
// for i in tmp do
39450: LD_ADDR_VAR 0 8
39454: PUSH
39455: LD_VAR 0 14
39459: PUSH
39460: FOR_IN
39461: IFFALSE 39631
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39463: LD_ADDR_VAR 0 9
39467: PUSH
39468: LD_VAR 0 10
39472: PPUSH
39473: LD_VAR 0 8
39477: PPUSH
39478: LD_INT 5
39480: PPUSH
39481: CALL_OW 272
39485: PUSH
39486: LD_VAR 0 11
39490: PPUSH
39491: LD_VAR 0 8
39495: PPUSH
39496: LD_INT 5
39498: PPUSH
39499: CALL_OW 273
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39508: LD_VAR 0 9
39512: PUSH
39513: LD_INT 1
39515: ARRAY
39516: PPUSH
39517: LD_VAR 0 9
39521: PUSH
39522: LD_INT 2
39524: ARRAY
39525: PPUSH
39526: CALL_OW 488
39530: IFFALSE 39629
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39532: LD_ADDR_VAR 0 4
39536: PUSH
39537: LD_VAR 0 9
39541: PUSH
39542: LD_INT 1
39544: ARRAY
39545: PPUSH
39546: LD_VAR 0 9
39550: PUSH
39551: LD_INT 2
39553: ARRAY
39554: PPUSH
39555: CALL_OW 546
39559: ST_TO_ADDR
// if hex [ 1 ] then
39560: LD_VAR 0 4
39564: PUSH
39565: LD_INT 1
39567: ARRAY
39568: IFFALSE 39572
// continue ;
39570: GO 39460
// h := hex [ 2 ] ;
39572: LD_ADDR_VAR 0 13
39576: PUSH
39577: LD_VAR 0 4
39581: PUSH
39582: LD_INT 2
39584: ARRAY
39585: ST_TO_ADDR
// if h + 7 < height then
39586: LD_VAR 0 13
39590: PUSH
39591: LD_INT 7
39593: PLUS
39594: PUSH
39595: LD_VAR 0 15
39599: LESS
39600: IFFALSE 39629
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39602: LD_ADDR_VAR 0 18
39606: PUSH
39607: LD_INT 7
39609: PUSH
39610: LD_INT 28
39612: PUSH
39613: LD_INT 45
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: PUSH
39621: LD_VAR 0 12
39625: ARRAY
39626: ST_TO_ADDR
// break ;
39627: GO 39631
// end ; end ; end ;
39629: GO 39460
39631: POP
39632: POP
// end ; if not weapon then
39633: LD_VAR 0 18
39637: NOT
39638: IFFALSE 39698
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39640: LD_ADDR_VAR 0 5
39644: PUSH
39645: LD_VAR 0 5
39649: PUSH
39650: LD_INT 11
39652: PUSH
39653: LD_INT 30
39655: PUSH
39656: LD_INT 49
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: LIST
39663: DIFF
39664: ST_TO_ADDR
// if not list then
39665: LD_VAR 0 5
39669: NOT
39670: IFFALSE 39674
// exit ;
39672: GO 39816
// weapon := list [ rand ( 1 , list ) ] ;
39674: LD_ADDR_VAR 0 18
39678: PUSH
39679: LD_VAR 0 5
39683: PUSH
39684: LD_INT 1
39686: PPUSH
39687: LD_VAR 0 5
39691: PPUSH
39692: CALL_OW 12
39696: ARRAY
39697: ST_TO_ADDR
// end ; if weapon then
39698: LD_VAR 0 18
39702: IFFALSE 39816
// begin tmp := CostOfWeapon ( weapon ) ;
39704: LD_ADDR_VAR 0 14
39708: PUSH
39709: LD_VAR 0 18
39713: PPUSH
39714: CALL_OW 451
39718: ST_TO_ADDR
// j := GetBase ( tower ) ;
39719: LD_ADDR_VAR 0 9
39723: PUSH
39724: LD_VAR 0 1
39728: PPUSH
39729: CALL_OW 274
39733: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39734: LD_VAR 0 9
39738: PPUSH
39739: LD_INT 1
39741: PPUSH
39742: CALL_OW 275
39746: PUSH
39747: LD_VAR 0 14
39751: PUSH
39752: LD_INT 1
39754: ARRAY
39755: GREATEREQUAL
39756: PUSH
39757: LD_VAR 0 9
39761: PPUSH
39762: LD_INT 2
39764: PPUSH
39765: CALL_OW 275
39769: PUSH
39770: LD_VAR 0 14
39774: PUSH
39775: LD_INT 2
39777: ARRAY
39778: GREATEREQUAL
39779: AND
39780: PUSH
39781: LD_VAR 0 9
39785: PPUSH
39786: LD_INT 3
39788: PPUSH
39789: CALL_OW 275
39793: PUSH
39794: LD_VAR 0 14
39798: PUSH
39799: LD_INT 3
39801: ARRAY
39802: GREATEREQUAL
39803: AND
39804: IFFALSE 39816
// result := weapon ;
39806: LD_ADDR_VAR 0 3
39810: PUSH
39811: LD_VAR 0 18
39815: ST_TO_ADDR
// end ; end ;
39816: LD_VAR 0 3
39820: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39821: LD_INT 0
39823: PPUSH
39824: PPUSH
// result := true ;
39825: LD_ADDR_VAR 0 3
39829: PUSH
39830: LD_INT 1
39832: ST_TO_ADDR
// if array1 = array2 then
39833: LD_VAR 0 1
39837: PUSH
39838: LD_VAR 0 2
39842: EQUAL
39843: IFFALSE 39903
// begin for i = 1 to array1 do
39845: LD_ADDR_VAR 0 4
39849: PUSH
39850: DOUBLE
39851: LD_INT 1
39853: DEC
39854: ST_TO_ADDR
39855: LD_VAR 0 1
39859: PUSH
39860: FOR_TO
39861: IFFALSE 39899
// if array1 [ i ] <> array2 [ i ] then
39863: LD_VAR 0 1
39867: PUSH
39868: LD_VAR 0 4
39872: ARRAY
39873: PUSH
39874: LD_VAR 0 2
39878: PUSH
39879: LD_VAR 0 4
39883: ARRAY
39884: NONEQUAL
39885: IFFALSE 39897
// begin result := false ;
39887: LD_ADDR_VAR 0 3
39891: PUSH
39892: LD_INT 0
39894: ST_TO_ADDR
// break ;
39895: GO 39899
// end ;
39897: GO 39860
39899: POP
39900: POP
// end else
39901: GO 39911
// result := false ;
39903: LD_ADDR_VAR 0 3
39907: PUSH
39908: LD_INT 0
39910: ST_TO_ADDR
// end ;
39911: LD_VAR 0 3
39915: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39916: LD_INT 0
39918: PPUSH
39919: PPUSH
39920: PPUSH
// pom := GetBase ( fac ) ;
39921: LD_ADDR_VAR 0 5
39925: PUSH
39926: LD_VAR 0 1
39930: PPUSH
39931: CALL_OW 274
39935: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39936: LD_ADDR_VAR 0 4
39940: PUSH
39941: LD_VAR 0 2
39945: PUSH
39946: LD_INT 1
39948: ARRAY
39949: PPUSH
39950: LD_VAR 0 2
39954: PUSH
39955: LD_INT 2
39957: ARRAY
39958: PPUSH
39959: LD_VAR 0 2
39963: PUSH
39964: LD_INT 3
39966: ARRAY
39967: PPUSH
39968: LD_VAR 0 2
39972: PUSH
39973: LD_INT 4
39975: ARRAY
39976: PPUSH
39977: CALL_OW 449
39981: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39982: LD_ADDR_VAR 0 3
39986: PUSH
39987: LD_VAR 0 5
39991: PPUSH
39992: LD_INT 1
39994: PPUSH
39995: CALL_OW 275
39999: PUSH
40000: LD_VAR 0 4
40004: PUSH
40005: LD_INT 1
40007: ARRAY
40008: GREATEREQUAL
40009: PUSH
40010: LD_VAR 0 5
40014: PPUSH
40015: LD_INT 2
40017: PPUSH
40018: CALL_OW 275
40022: PUSH
40023: LD_VAR 0 4
40027: PUSH
40028: LD_INT 2
40030: ARRAY
40031: GREATEREQUAL
40032: AND
40033: PUSH
40034: LD_VAR 0 5
40038: PPUSH
40039: LD_INT 3
40041: PPUSH
40042: CALL_OW 275
40046: PUSH
40047: LD_VAR 0 4
40051: PUSH
40052: LD_INT 3
40054: ARRAY
40055: GREATEREQUAL
40056: AND
40057: ST_TO_ADDR
// end ;
40058: LD_VAR 0 3
40062: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40063: LD_INT 0
40065: PPUSH
40066: PPUSH
40067: PPUSH
40068: PPUSH
// pom := GetBase ( building ) ;
40069: LD_ADDR_VAR 0 3
40073: PUSH
40074: LD_VAR 0 1
40078: PPUSH
40079: CALL_OW 274
40083: ST_TO_ADDR
// if not pom then
40084: LD_VAR 0 3
40088: NOT
40089: IFFALSE 40093
// exit ;
40091: GO 40263
// btype := GetBType ( building ) ;
40093: LD_ADDR_VAR 0 5
40097: PUSH
40098: LD_VAR 0 1
40102: PPUSH
40103: CALL_OW 266
40107: ST_TO_ADDR
// if btype = b_armoury then
40108: LD_VAR 0 5
40112: PUSH
40113: LD_INT 4
40115: EQUAL
40116: IFFALSE 40126
// btype := b_barracks ;
40118: LD_ADDR_VAR 0 5
40122: PUSH
40123: LD_INT 5
40125: ST_TO_ADDR
// if btype = b_depot then
40126: LD_VAR 0 5
40130: PUSH
40131: LD_INT 0
40133: EQUAL
40134: IFFALSE 40144
// btype := b_warehouse ;
40136: LD_ADDR_VAR 0 5
40140: PUSH
40141: LD_INT 1
40143: ST_TO_ADDR
// if btype = b_workshop then
40144: LD_VAR 0 5
40148: PUSH
40149: LD_INT 2
40151: EQUAL
40152: IFFALSE 40162
// btype := b_factory ;
40154: LD_ADDR_VAR 0 5
40158: PUSH
40159: LD_INT 3
40161: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40162: LD_ADDR_VAR 0 4
40166: PUSH
40167: LD_VAR 0 5
40171: PPUSH
40172: LD_VAR 0 1
40176: PPUSH
40177: CALL_OW 248
40181: PPUSH
40182: CALL_OW 450
40186: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40187: LD_ADDR_VAR 0 2
40191: PUSH
40192: LD_VAR 0 3
40196: PPUSH
40197: LD_INT 1
40199: PPUSH
40200: CALL_OW 275
40204: PUSH
40205: LD_VAR 0 4
40209: PUSH
40210: LD_INT 1
40212: ARRAY
40213: GREATEREQUAL
40214: PUSH
40215: LD_VAR 0 3
40219: PPUSH
40220: LD_INT 2
40222: PPUSH
40223: CALL_OW 275
40227: PUSH
40228: LD_VAR 0 4
40232: PUSH
40233: LD_INT 2
40235: ARRAY
40236: GREATEREQUAL
40237: AND
40238: PUSH
40239: LD_VAR 0 3
40243: PPUSH
40244: LD_INT 3
40246: PPUSH
40247: CALL_OW 275
40251: PUSH
40252: LD_VAR 0 4
40256: PUSH
40257: LD_INT 3
40259: ARRAY
40260: GREATEREQUAL
40261: AND
40262: ST_TO_ADDR
// end ;
40263: LD_VAR 0 2
40267: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40268: LD_INT 0
40270: PPUSH
40271: PPUSH
40272: PPUSH
// pom := GetBase ( building ) ;
40273: LD_ADDR_VAR 0 4
40277: PUSH
40278: LD_VAR 0 1
40282: PPUSH
40283: CALL_OW 274
40287: ST_TO_ADDR
// if not pom then
40288: LD_VAR 0 4
40292: NOT
40293: IFFALSE 40297
// exit ;
40295: GO 40398
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40297: LD_ADDR_VAR 0 5
40301: PUSH
40302: LD_VAR 0 2
40306: PPUSH
40307: LD_VAR 0 1
40311: PPUSH
40312: CALL_OW 248
40316: PPUSH
40317: CALL_OW 450
40321: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40322: LD_ADDR_VAR 0 3
40326: PUSH
40327: LD_VAR 0 4
40331: PPUSH
40332: LD_INT 1
40334: PPUSH
40335: CALL_OW 275
40339: PUSH
40340: LD_VAR 0 5
40344: PUSH
40345: LD_INT 1
40347: ARRAY
40348: GREATEREQUAL
40349: PUSH
40350: LD_VAR 0 4
40354: PPUSH
40355: LD_INT 2
40357: PPUSH
40358: CALL_OW 275
40362: PUSH
40363: LD_VAR 0 5
40367: PUSH
40368: LD_INT 2
40370: ARRAY
40371: GREATEREQUAL
40372: AND
40373: PUSH
40374: LD_VAR 0 4
40378: PPUSH
40379: LD_INT 3
40381: PPUSH
40382: CALL_OW 275
40386: PUSH
40387: LD_VAR 0 5
40391: PUSH
40392: LD_INT 3
40394: ARRAY
40395: GREATEREQUAL
40396: AND
40397: ST_TO_ADDR
// end ;
40398: LD_VAR 0 3
40402: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
40403: LD_INT 0
40405: PPUSH
40406: PPUSH
40407: PPUSH
40408: PPUSH
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
// result := false ;
40415: LD_ADDR_VAR 0 6
40419: PUSH
40420: LD_INT 0
40422: ST_TO_ADDR
// if not base or not btype or not x or not y then
40423: LD_VAR 0 1
40427: NOT
40428: PUSH
40429: LD_VAR 0 2
40433: NOT
40434: OR
40435: PUSH
40436: LD_VAR 0 3
40440: NOT
40441: OR
40442: PUSH
40443: LD_VAR 0 4
40447: NOT
40448: OR
40449: IFFALSE 40453
// exit ;
40451: GO 41062
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
40453: LD_ADDR_VAR 0 12
40457: PUSH
40458: LD_VAR 0 2
40462: PPUSH
40463: LD_VAR 0 3
40467: PPUSH
40468: LD_VAR 0 4
40472: PPUSH
40473: LD_VAR 0 5
40477: PPUSH
40478: LD_VAR 0 1
40482: PUSH
40483: LD_INT 1
40485: ARRAY
40486: PPUSH
40487: CALL_OW 248
40491: PPUSH
40492: LD_INT 0
40494: PPUSH
40495: CALL 41899 0 6
40499: ST_TO_ADDR
// if not hexes then
40500: LD_VAR 0 12
40504: NOT
40505: IFFALSE 40509
// exit ;
40507: GO 41062
// for i = 1 to hexes do
40509: LD_ADDR_VAR 0 7
40513: PUSH
40514: DOUBLE
40515: LD_INT 1
40517: DEC
40518: ST_TO_ADDR
40519: LD_VAR 0 12
40523: PUSH
40524: FOR_TO
40525: IFFALSE 41060
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40527: LD_ADDR_VAR 0 11
40531: PUSH
40532: LD_VAR 0 12
40536: PUSH
40537: LD_VAR 0 7
40541: ARRAY
40542: PUSH
40543: LD_INT 1
40545: ARRAY
40546: PPUSH
40547: LD_VAR 0 12
40551: PUSH
40552: LD_VAR 0 7
40556: ARRAY
40557: PUSH
40558: LD_INT 2
40560: ARRAY
40561: PPUSH
40562: CALL_OW 428
40566: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40567: LD_VAR 0 12
40571: PUSH
40572: LD_VAR 0 7
40576: ARRAY
40577: PUSH
40578: LD_INT 1
40580: ARRAY
40581: PPUSH
40582: LD_VAR 0 12
40586: PUSH
40587: LD_VAR 0 7
40591: ARRAY
40592: PUSH
40593: LD_INT 2
40595: ARRAY
40596: PPUSH
40597: CALL_OW 351
40601: PUSH
40602: LD_VAR 0 12
40606: PUSH
40607: LD_VAR 0 7
40611: ARRAY
40612: PUSH
40613: LD_INT 1
40615: ARRAY
40616: PPUSH
40617: LD_VAR 0 12
40621: PUSH
40622: LD_VAR 0 7
40626: ARRAY
40627: PUSH
40628: LD_INT 2
40630: ARRAY
40631: PPUSH
40632: CALL_OW 488
40636: NOT
40637: OR
40638: PUSH
40639: LD_VAR 0 11
40643: PPUSH
40644: CALL_OW 247
40648: PUSH
40649: LD_INT 3
40651: EQUAL
40652: OR
40653: IFFALSE 40659
// exit ;
40655: POP
40656: POP
40657: GO 41062
// if not tmp or not tmp in base then
40659: LD_VAR 0 11
40663: NOT
40664: PUSH
40665: LD_VAR 0 11
40669: PUSH
40670: LD_VAR 0 1
40674: IN
40675: NOT
40676: OR
40677: IFFALSE 40681
// continue ;
40679: GO 40524
// result := true ;
40681: LD_ADDR_VAR 0 6
40685: PUSH
40686: LD_INT 1
40688: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40689: LD_ADDR_VAR 0 15
40693: PUSH
40694: LD_VAR 0 1
40698: PPUSH
40699: LD_INT 22
40701: PUSH
40702: LD_VAR 0 11
40706: PPUSH
40707: CALL_OW 255
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 30
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 30
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: LIST
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PPUSH
40748: CALL_OW 72
40752: ST_TO_ADDR
// if dep then
40753: LD_VAR 0 15
40757: IFFALSE 40893
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40759: LD_ADDR_VAR 0 14
40763: PUSH
40764: LD_VAR 0 15
40768: PUSH
40769: LD_INT 1
40771: ARRAY
40772: PPUSH
40773: CALL_OW 250
40777: PPUSH
40778: LD_VAR 0 15
40782: PUSH
40783: LD_INT 1
40785: ARRAY
40786: PPUSH
40787: CALL_OW 254
40791: PPUSH
40792: LD_INT 5
40794: PPUSH
40795: CALL_OW 272
40799: PUSH
40800: LD_VAR 0 15
40804: PUSH
40805: LD_INT 1
40807: ARRAY
40808: PPUSH
40809: CALL_OW 251
40813: PPUSH
40814: LD_VAR 0 15
40818: PUSH
40819: LD_INT 1
40821: ARRAY
40822: PPUSH
40823: CALL_OW 254
40827: PPUSH
40828: LD_INT 5
40830: PPUSH
40831: CALL_OW 273
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40840: LD_VAR 0 14
40844: PUSH
40845: LD_INT 1
40847: ARRAY
40848: PPUSH
40849: LD_VAR 0 14
40853: PUSH
40854: LD_INT 2
40856: ARRAY
40857: PPUSH
40858: CALL_OW 488
40862: IFFALSE 40893
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40864: LD_VAR 0 11
40868: PPUSH
40869: LD_VAR 0 14
40873: PUSH
40874: LD_INT 1
40876: ARRAY
40877: PPUSH
40878: LD_VAR 0 14
40882: PUSH
40883: LD_INT 2
40885: ARRAY
40886: PPUSH
40887: CALL_OW 111
// continue ;
40891: GO 40524
// end ; end ; r := GetDir ( tmp ) ;
40893: LD_ADDR_VAR 0 13
40897: PUSH
40898: LD_VAR 0 11
40902: PPUSH
40903: CALL_OW 254
40907: ST_TO_ADDR
// if r = 5 then
40908: LD_VAR 0 13
40912: PUSH
40913: LD_INT 5
40915: EQUAL
40916: IFFALSE 40926
// r := 0 ;
40918: LD_ADDR_VAR 0 13
40922: PUSH
40923: LD_INT 0
40925: ST_TO_ADDR
// for j = r to 5 do
40926: LD_ADDR_VAR 0 8
40930: PUSH
40931: DOUBLE
40932: LD_VAR 0 13
40936: DEC
40937: ST_TO_ADDR
40938: LD_INT 5
40940: PUSH
40941: FOR_TO
40942: IFFALSE 41056
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40944: LD_ADDR_VAR 0 9
40948: PUSH
40949: LD_VAR 0 11
40953: PPUSH
40954: CALL_OW 250
40958: PPUSH
40959: LD_VAR 0 8
40963: PPUSH
40964: LD_INT 2
40966: PPUSH
40967: CALL_OW 272
40971: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40972: LD_ADDR_VAR 0 10
40976: PUSH
40977: LD_VAR 0 11
40981: PPUSH
40982: CALL_OW 251
40986: PPUSH
40987: LD_VAR 0 8
40991: PPUSH
40992: LD_INT 2
40994: PPUSH
40995: CALL_OW 273
40999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41000: LD_VAR 0 9
41004: PPUSH
41005: LD_VAR 0 10
41009: PPUSH
41010: CALL_OW 488
41014: PUSH
41015: LD_VAR 0 9
41019: PPUSH
41020: LD_VAR 0 10
41024: PPUSH
41025: CALL_OW 428
41029: NOT
41030: AND
41031: IFFALSE 41054
// begin ComMoveXY ( tmp , _x , _y ) ;
41033: LD_VAR 0 11
41037: PPUSH
41038: LD_VAR 0 9
41042: PPUSH
41043: LD_VAR 0 10
41047: PPUSH
41048: CALL_OW 111
// break ;
41052: GO 41056
// end ; end ;
41054: GO 40941
41056: POP
41057: POP
// end ;
41058: GO 40524
41060: POP
41061: POP
// end ;
41062: LD_VAR 0 6
41066: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41067: LD_INT 0
41069: PPUSH
41070: PPUSH
41071: PPUSH
41072: PPUSH
41073: PPUSH
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
41078: PPUSH
// result := false ;
41079: LD_ADDR_VAR 0 6
41083: PUSH
41084: LD_INT 0
41086: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41087: LD_VAR 0 1
41091: NOT
41092: PUSH
41093: LD_VAR 0 1
41097: PPUSH
41098: CALL_OW 266
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: IN
41113: NOT
41114: OR
41115: PUSH
41116: LD_VAR 0 2
41120: NOT
41121: OR
41122: PUSH
41123: LD_VAR 0 5
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: LD_INT 4
41142: PUSH
41143: LD_INT 5
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: IN
41154: NOT
41155: OR
41156: PUSH
41157: LD_VAR 0 3
41161: PPUSH
41162: LD_VAR 0 4
41166: PPUSH
41167: CALL_OW 488
41171: NOT
41172: OR
41173: IFFALSE 41177
// exit ;
41175: GO 41894
// pom := GetBase ( depot ) ;
41177: LD_ADDR_VAR 0 10
41181: PUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL_OW 274
41191: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41192: LD_ADDR_VAR 0 11
41196: PUSH
41197: LD_VAR 0 2
41201: PPUSH
41202: LD_VAR 0 1
41206: PPUSH
41207: CALL_OW 248
41211: PPUSH
41212: CALL_OW 450
41216: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41217: LD_VAR 0 10
41221: PPUSH
41222: LD_INT 1
41224: PPUSH
41225: CALL_OW 275
41229: PUSH
41230: LD_VAR 0 11
41234: PUSH
41235: LD_INT 1
41237: ARRAY
41238: GREATEREQUAL
41239: PUSH
41240: LD_VAR 0 10
41244: PPUSH
41245: LD_INT 2
41247: PPUSH
41248: CALL_OW 275
41252: PUSH
41253: LD_VAR 0 11
41257: PUSH
41258: LD_INT 2
41260: ARRAY
41261: GREATEREQUAL
41262: AND
41263: PUSH
41264: LD_VAR 0 10
41268: PPUSH
41269: LD_INT 3
41271: PPUSH
41272: CALL_OW 275
41276: PUSH
41277: LD_VAR 0 11
41281: PUSH
41282: LD_INT 3
41284: ARRAY
41285: GREATEREQUAL
41286: AND
41287: NOT
41288: IFFALSE 41292
// exit ;
41290: GO 41894
// if GetBType ( depot ) = b_depot then
41292: LD_VAR 0 1
41296: PPUSH
41297: CALL_OW 266
41301: PUSH
41302: LD_INT 0
41304: EQUAL
41305: IFFALSE 41317
// dist := 28 else
41307: LD_ADDR_VAR 0 14
41311: PUSH
41312: LD_INT 28
41314: ST_TO_ADDR
41315: GO 41325
// dist := 36 ;
41317: LD_ADDR_VAR 0 14
41321: PUSH
41322: LD_INT 36
41324: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41325: LD_VAR 0 1
41329: PPUSH
41330: LD_VAR 0 3
41334: PPUSH
41335: LD_VAR 0 4
41339: PPUSH
41340: CALL_OW 297
41344: PUSH
41345: LD_VAR 0 14
41349: GREATER
41350: IFFALSE 41354
// exit ;
41352: GO 41894
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41354: LD_ADDR_VAR 0 12
41358: PUSH
41359: LD_VAR 0 2
41363: PPUSH
41364: LD_VAR 0 3
41368: PPUSH
41369: LD_VAR 0 4
41373: PPUSH
41374: LD_VAR 0 5
41378: PPUSH
41379: LD_VAR 0 1
41383: PPUSH
41384: CALL_OW 248
41388: PPUSH
41389: LD_INT 0
41391: PPUSH
41392: CALL 41899 0 6
41396: ST_TO_ADDR
// if not hexes then
41397: LD_VAR 0 12
41401: NOT
41402: IFFALSE 41406
// exit ;
41404: GO 41894
// hex := GetHexInfo ( x , y ) ;
41406: LD_ADDR_VAR 0 15
41410: PUSH
41411: LD_VAR 0 3
41415: PPUSH
41416: LD_VAR 0 4
41420: PPUSH
41421: CALL_OW 546
41425: ST_TO_ADDR
// if hex [ 1 ] then
41426: LD_VAR 0 15
41430: PUSH
41431: LD_INT 1
41433: ARRAY
41434: IFFALSE 41438
// exit ;
41436: GO 41894
// height := hex [ 2 ] ;
41438: LD_ADDR_VAR 0 13
41442: PUSH
41443: LD_VAR 0 15
41447: PUSH
41448: LD_INT 2
41450: ARRAY
41451: ST_TO_ADDR
// for i = 1 to hexes do
41452: LD_ADDR_VAR 0 7
41456: PUSH
41457: DOUBLE
41458: LD_INT 1
41460: DEC
41461: ST_TO_ADDR
41462: LD_VAR 0 12
41466: PUSH
41467: FOR_TO
41468: IFFALSE 41798
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41470: LD_VAR 0 12
41474: PUSH
41475: LD_VAR 0 7
41479: ARRAY
41480: PUSH
41481: LD_INT 1
41483: ARRAY
41484: PPUSH
41485: LD_VAR 0 12
41489: PUSH
41490: LD_VAR 0 7
41494: ARRAY
41495: PUSH
41496: LD_INT 2
41498: ARRAY
41499: PPUSH
41500: CALL_OW 488
41504: NOT
41505: PUSH
41506: LD_VAR 0 12
41510: PUSH
41511: LD_VAR 0 7
41515: ARRAY
41516: PUSH
41517: LD_INT 1
41519: ARRAY
41520: PPUSH
41521: LD_VAR 0 12
41525: PUSH
41526: LD_VAR 0 7
41530: ARRAY
41531: PUSH
41532: LD_INT 2
41534: ARRAY
41535: PPUSH
41536: CALL_OW 428
41540: PUSH
41541: LD_INT 0
41543: GREATER
41544: OR
41545: PUSH
41546: LD_VAR 0 12
41550: PUSH
41551: LD_VAR 0 7
41555: ARRAY
41556: PUSH
41557: LD_INT 1
41559: ARRAY
41560: PPUSH
41561: LD_VAR 0 12
41565: PUSH
41566: LD_VAR 0 7
41570: ARRAY
41571: PUSH
41572: LD_INT 2
41574: ARRAY
41575: PPUSH
41576: CALL_OW 351
41580: OR
41581: IFFALSE 41587
// exit ;
41583: POP
41584: POP
41585: GO 41894
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41587: LD_ADDR_VAR 0 8
41591: PUSH
41592: LD_VAR 0 12
41596: PUSH
41597: LD_VAR 0 7
41601: ARRAY
41602: PUSH
41603: LD_INT 1
41605: ARRAY
41606: PPUSH
41607: LD_VAR 0 12
41611: PUSH
41612: LD_VAR 0 7
41616: ARRAY
41617: PUSH
41618: LD_INT 2
41620: ARRAY
41621: PPUSH
41622: CALL_OW 546
41626: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41627: LD_VAR 0 8
41631: PUSH
41632: LD_INT 1
41634: ARRAY
41635: PUSH
41636: LD_VAR 0 8
41640: PUSH
41641: LD_INT 2
41643: ARRAY
41644: PUSH
41645: LD_VAR 0 13
41649: PUSH
41650: LD_INT 2
41652: PLUS
41653: GREATER
41654: OR
41655: PUSH
41656: LD_VAR 0 8
41660: PUSH
41661: LD_INT 2
41663: ARRAY
41664: PUSH
41665: LD_VAR 0 13
41669: PUSH
41670: LD_INT 2
41672: MINUS
41673: LESS
41674: OR
41675: PUSH
41676: LD_VAR 0 8
41680: PUSH
41681: LD_INT 3
41683: ARRAY
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: LD_INT 8
41690: PUSH
41691: LD_INT 9
41693: PUSH
41694: LD_INT 10
41696: PUSH
41697: LD_INT 11
41699: PUSH
41700: LD_INT 12
41702: PUSH
41703: LD_INT 13
41705: PUSH
41706: LD_INT 16
41708: PUSH
41709: LD_INT 17
41711: PUSH
41712: LD_INT 18
41714: PUSH
41715: LD_INT 19
41717: PUSH
41718: LD_INT 20
41720: PUSH
41721: LD_INT 21
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: IN
41739: NOT
41740: OR
41741: PUSH
41742: LD_VAR 0 8
41746: PUSH
41747: LD_INT 5
41749: ARRAY
41750: NOT
41751: OR
41752: PUSH
41753: LD_VAR 0 8
41757: PUSH
41758: LD_INT 6
41760: ARRAY
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: LD_INT 7
41770: PUSH
41771: LD_INT 9
41773: PUSH
41774: LD_INT 10
41776: PUSH
41777: LD_INT 11
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: IN
41788: NOT
41789: OR
41790: IFFALSE 41796
// exit ;
41792: POP
41793: POP
41794: GO 41894
// end ;
41796: GO 41467
41798: POP
41799: POP
// side := GetSide ( depot ) ;
41800: LD_ADDR_VAR 0 9
41804: PUSH
41805: LD_VAR 0 1
41809: PPUSH
41810: CALL_OW 255
41814: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41815: LD_VAR 0 9
41819: PPUSH
41820: LD_VAR 0 3
41824: PPUSH
41825: LD_VAR 0 4
41829: PPUSH
41830: LD_INT 20
41832: PPUSH
41833: CALL 34548 0 4
41837: PUSH
41838: LD_INT 4
41840: ARRAY
41841: IFFALSE 41845
// exit ;
41843: GO 41894
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41845: LD_VAR 0 2
41849: PUSH
41850: LD_INT 29
41852: PUSH
41853: LD_INT 30
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: IN
41860: PUSH
41861: LD_VAR 0 3
41865: PPUSH
41866: LD_VAR 0 4
41870: PPUSH
41871: LD_VAR 0 9
41875: PPUSH
41876: CALL_OW 440
41880: NOT
41881: AND
41882: IFFALSE 41886
// exit ;
41884: GO 41894
// result := true ;
41886: LD_ADDR_VAR 0 6
41890: PUSH
41891: LD_INT 1
41893: ST_TO_ADDR
// end ;
41894: LD_VAR 0 6
41898: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41899: LD_INT 0
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
41923: PPUSH
41924: PPUSH
41925: PPUSH
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
// result = [ ] ;
41959: LD_ADDR_VAR 0 7
41963: PUSH
41964: EMPTY
41965: ST_TO_ADDR
// temp_list = [ ] ;
41966: LD_ADDR_VAR 0 9
41970: PUSH
41971: EMPTY
41972: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41973: LD_VAR 0 4
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: LD_INT 3
41989: PUSH
41990: LD_INT 4
41992: PUSH
41993: LD_INT 5
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: IN
42004: NOT
42005: PUSH
42006: LD_VAR 0 1
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: IN
42021: PUSH
42022: LD_VAR 0 5
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: IN
42041: NOT
42042: AND
42043: OR
42044: IFFALSE 42048
// exit ;
42046: GO 60439
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42048: LD_VAR 0 1
42052: PUSH
42053: LD_INT 6
42055: PUSH
42056: LD_INT 7
42058: PUSH
42059: LD_INT 8
42061: PUSH
42062: LD_INT 13
42064: PUSH
42065: LD_INT 12
42067: PUSH
42068: LD_INT 15
42070: PUSH
42071: LD_INT 11
42073: PUSH
42074: LD_INT 14
42076: PUSH
42077: LD_INT 10
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: IN
42091: IFFALSE 42101
// btype = b_lab ;
42093: LD_ADDR_VAR 0 1
42097: PUSH
42098: LD_INT 6
42100: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42101: LD_VAR 0 6
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: IN
42120: NOT
42121: PUSH
42122: LD_VAR 0 1
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: LD_INT 3
42138: PUSH
42139: LD_INT 6
42141: PUSH
42142: LD_INT 36
42144: PUSH
42145: LD_INT 4
42147: PUSH
42148: LD_INT 5
42150: PUSH
42151: LD_INT 31
42153: PUSH
42154: LD_INT 32
42156: PUSH
42157: LD_INT 33
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: IN
42173: NOT
42174: PUSH
42175: LD_VAR 0 6
42179: PUSH
42180: LD_INT 1
42182: EQUAL
42183: AND
42184: OR
42185: PUSH
42186: LD_VAR 0 1
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: LD_INT 3
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: IN
42201: NOT
42202: PUSH
42203: LD_VAR 0 6
42207: PUSH
42208: LD_INT 2
42210: EQUAL
42211: AND
42212: OR
42213: IFFALSE 42223
// mode = 0 ;
42215: LD_ADDR_VAR 0 6
42219: PUSH
42220: LD_INT 0
42222: ST_TO_ADDR
// case mode of 0 :
42223: LD_VAR 0 6
42227: PUSH
42228: LD_INT 0
42230: DOUBLE
42231: EQUAL
42232: IFTRUE 42236
42234: GO 53689
42236: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42237: LD_ADDR_VAR 0 11
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: LD_INT 2
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 3
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 2
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42430: LD_ADDR_VAR 0 12
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 2
42564: NEG
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 3
42587: NEG
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 3
42598: NEG
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42626: LD_ADDR_VAR 0 13
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: LD_INT 3
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 3
42785: NEG
42786: PUSH
42787: LD_INT 2
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 3
42797: NEG
42798: PUSH
42799: LD_INT 3
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42825: LD_ADDR_VAR 0 14
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 3
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 3
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43021: LD_ADDR_VAR 0 15
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: NEG
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 3
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43214: LD_ADDR_VAR 0 16
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 2
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: NEG
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 3
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 3
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43407: LD_ADDR_VAR 0 17
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: NEG
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43637: LD_ADDR_VAR 0 18
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: LD_INT 2
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 2
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43867: LD_ADDR_VAR 0 19
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44097: LD_ADDR_VAR 0 20
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 2
44284: NEG
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44327: LD_ADDR_VAR 0 21
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44557: LD_ADDR_VAR 0 22
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44787: LD_ADDR_VAR 0 23
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: LD_INT 3
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 3
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45067: LD_ADDR_VAR 0 24
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: NEG
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 3
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 3
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45343: LD_ADDR_VAR 0 25
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 3
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: LD_INT 3
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45617: LD_ADDR_VAR 0 26
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45893: LD_ADDR_VAR 0 27
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 3
46126: NEG
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 3
46138: NEG
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46173: LD_ADDR_VAR 0 28
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: LD_INT 3
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: LD_INT 3
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46455: LD_ADDR_VAR 0 29
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 3
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 3
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46734: LD_ADDR_VAR 0 30
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 3
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: LD_INT 3
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 3
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47012: LD_ADDR_VAR 0 31
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: LD_INT 2
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 3
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 3
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 3
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47290: LD_ADDR_VAR 0 32
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 3
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47568: LD_ADDR_VAR 0 33
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 3
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 3
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: LD_INT 3
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 3
47812: NEG
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47847: LD_ADDR_VAR 0 34
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 3
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 3
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48127: LD_ADDR_VAR 0 35
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48239: LD_ADDR_VAR 0 36
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48351: LD_ADDR_VAR 0 37
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48463: LD_ADDR_VAR 0 38
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48575: LD_ADDR_VAR 0 39
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48687: LD_ADDR_VAR 0 40
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48799: LD_ADDR_VAR 0 41
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 2
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: LD_INT 3
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 3
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 3
49042: PUSH
49043: LD_INT 3
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 2
49052: PUSH
49053: LD_INT 3
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: NEG
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 3
49096: NEG
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 3
49108: NEG
49109: PUSH
49110: LD_INT 3
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49149: LD_ADDR_VAR 0 42
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: LD_INT 3
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: LD_INT 3
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 3
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: LD_INT 3
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: LD_INT 3
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49499: LD_ADDR_VAR 0 43
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 3
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 3
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 2
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 2
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 3
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 3
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 3
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 3
49795: NEG
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 3
49806: NEG
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49847: LD_ADDR_VAR 0 44
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 3
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 3
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 3
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: LD_INT 3
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 3
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: NEG
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 3
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 3
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: LD_INT 3
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50197: LD_ADDR_VAR 0 45
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: LD_INT 3
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 3
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 3
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 3
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: PUSH
50444: LD_INT 3
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: LD_INT 3
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 3
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: LD_INT 3
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: LD_INT 2
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 3
50506: NEG
50507: PUSH
50508: LD_INT 3
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50547: LD_ADDR_VAR 0 46
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 3
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 3
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 3
50843: NEG
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 3
50854: NEG
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50895: LD_ADDR_VAR 0 47
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51046: LD_ADDR_VAR 0 48
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51193: LD_ADDR_VAR 0 49
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51337: LD_ADDR_VAR 0 50
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51481: LD_ADDR_VAR 0 51
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51628: LD_ADDR_VAR 0 52
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51779: LD_ADDR_VAR 0 53
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52009: LD_ADDR_VAR 0 54
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52239: LD_ADDR_VAR 0 55
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: NEG
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52469: LD_ADDR_VAR 0 56
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52699: LD_ADDR_VAR 0 57
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52929: LD_ADDR_VAR 0 58
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 2
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53159: LD_ADDR_VAR 0 59
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53247: LD_ADDR_VAR 0 60
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53335: LD_ADDR_VAR 0 61
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53423: LD_ADDR_VAR 0 62
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53511: LD_ADDR_VAR 0 63
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53599: LD_ADDR_VAR 0 64
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: ST_TO_ADDR
// end ; 1 :
53687: GO 59584
53689: LD_INT 1
53691: DOUBLE
53692: EQUAL
53693: IFTRUE 53697
53695: GO 56320
53697: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53698: LD_ADDR_VAR 0 11
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: LD_INT 3
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 3
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53742: LD_ADDR_VAR 0 12
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53783: LD_ADDR_VAR 0 13
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: LD_INT 3
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53823: LD_ADDR_VAR 0 14
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53864: LD_ADDR_VAR 0 15
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 3
53882: NEG
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 3
53893: NEG
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53908: LD_ADDR_VAR 0 16
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: LD_INT 3
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: NEG
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 3
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: LIST
53953: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53954: LD_ADDR_VAR 0 17
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: LIST
53997: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53998: LD_ADDR_VAR 0 18
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54039: LD_ADDR_VAR 0 19
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54079: LD_ADDR_VAR 0 20
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54120: LD_ADDR_VAR 0 21
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54164: LD_ADDR_VAR 0 22
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: LD_INT 3
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 3
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: LD_INT 3
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54210: LD_ADDR_VAR 0 23
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 4
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 3
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54254: LD_ADDR_VAR 0 24
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 4
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: LIST
54294: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54295: LD_ADDR_VAR 0 25
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: LD_INT 3
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 4
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: LD_INT 4
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54335: LD_ADDR_VAR 0 26
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 4
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: LIST
54375: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54376: LD_ADDR_VAR 0 27
54380: PUSH
54381: LD_INT 3
54383: NEG
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: NEG
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 4
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54420: LD_ADDR_VAR 0 28
54424: PUSH
54425: LD_INT 3
54427: NEG
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 3
54439: NEG
54440: PUSH
54441: LD_INT 4
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 4
54451: NEG
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54466: LD_ADDR_VAR 0 29
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 3
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 3
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 4
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 4
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: LD_INT 3
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 5
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 5
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 4
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 6
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 6
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 5
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54621: LD_ADDR_VAR 0 30
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 3
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 3
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 4
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 4
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 4
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 5
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 5
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 5
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 6
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 6
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54764: LD_ADDR_VAR 0 31
54768: PUSH
54769: LD_INT 3
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 3
54781: PUSH
54782: LD_INT 3
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 3
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 4
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 4
54811: PUSH
54812: LD_INT 4
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 3
54821: PUSH
54822: LD_INT 4
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 5
54831: PUSH
54832: LD_INT 4
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 5
54841: PUSH
54842: LD_INT 5
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 4
54851: PUSH
54852: LD_INT 5
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 6
54861: PUSH
54862: LD_INT 5
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 6
54871: PUSH
54872: LD_INT 6
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 5
54881: PUSH
54882: LD_INT 6
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54903: LD_ADDR_VAR 0 32
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 3
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 4
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 4
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 3
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 5
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 5
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 4
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: LD_INT 6
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 6
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 5
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55046: LD_ADDR_VAR 0 33
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 3
55064: NEG
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 3
55087: NEG
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 4
55098: NEG
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 4
55109: NEG
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 4
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 5
55132: NEG
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 5
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 5
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 6
55166: NEG
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 6
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55201: LD_ADDR_VAR 0 34
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 3
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: LD_INT 4
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 4
55256: NEG
55257: PUSH
55258: LD_INT 3
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 4
55268: NEG
55269: PUSH
55270: LD_INT 4
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 4
55280: NEG
55281: PUSH
55282: LD_INT 5
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 5
55292: NEG
55293: PUSH
55294: LD_INT 4
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 5
55304: NEG
55305: PUSH
55306: LD_INT 5
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 5
55316: NEG
55317: PUSH
55318: LD_INT 6
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 6
55328: NEG
55329: PUSH
55330: LD_INT 5
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 6
55340: NEG
55341: PUSH
55342: LD_INT 6
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55364: LD_ADDR_VAR 0 41
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 3
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55408: LD_ADDR_VAR 0 42
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 3
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55449: LD_ADDR_VAR 0 43
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: LD_INT 3
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: LIST
55488: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55489: LD_ADDR_VAR 0 44
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55530: LD_ADDR_VAR 0 45
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55574: LD_ADDR_VAR 0 46
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: LIST
55619: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55620: LD_ADDR_VAR 0 47
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 3
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55653: LD_ADDR_VAR 0 48
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55684: LD_ADDR_VAR 0 49
55688: PUSH
55689: LD_INT 3
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 3
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55713: LD_ADDR_VAR 0 50
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: LD_INT 3
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55742: LD_ADDR_VAR 0 51
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55773: LD_ADDR_VAR 0 52
55777: PUSH
55778: LD_INT 3
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55806: LD_ADDR_VAR 0 53
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: LIST
55849: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55850: LD_ADDR_VAR 0 54
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55891: LD_ADDR_VAR 0 55
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55931: LD_ADDR_VAR 0 56
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55972: LD_ADDR_VAR 0 57
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56016: LD_ADDR_VAR 0 58
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 3
56035: NEG
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56062: LD_ADDR_VAR 0 59
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: LIST
56105: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56106: LD_ADDR_VAR 0 60
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56147: LD_ADDR_VAR 0 61
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56187: LD_ADDR_VAR 0 62
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56228: LD_ADDR_VAR 0 63
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56272: LD_ADDR_VAR 0 64
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// end ; 2 :
56318: GO 59584
56320: LD_INT 2
56322: DOUBLE
56323: EQUAL
56324: IFTRUE 56328
56326: GO 59583
56328: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56329: LD_ADDR_VAR 0 29
56333: PUSH
56334: LD_INT 4
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 4
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 5
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 5
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 4
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 5
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 4
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 4
56459: PUSH
56460: LD_INT 4
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 3
56469: PUSH
56470: LD_INT 4
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 4
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 4
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 4
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 4
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 5
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 5
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 4
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 5
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: LD_INT 3
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 3
56612: NEG
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 3
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 4
56668: NEG
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 4
56679: NEG
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 4
56691: NEG
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 4
56714: NEG
56715: PUSH
56716: LD_INT 4
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 4
56726: NEG
56727: PUSH
56728: LD_INT 5
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 3
56738: NEG
56739: PUSH
56740: LD_INT 4
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 4
56762: NEG
56763: PUSH
56764: LD_INT 3
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 5
56774: NEG
56775: PUSH
56776: LD_INT 4
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 5
56786: NEG
56787: PUSH
56788: LD_INT 5
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: LD_INT 5
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 5
56810: NEG
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56867: LD_ADDR_VAR 0 30
56871: PUSH
56872: LD_INT 4
56874: PUSH
56875: LD_INT 4
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 4
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 5
56894: PUSH
56895: LD_INT 4
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 5
56904: PUSH
56905: LD_INT 5
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 4
56914: PUSH
56915: LD_INT 5
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: PUSH
56925: LD_INT 4
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 3
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 5
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 3
56954: PUSH
56955: LD_INT 5
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 3
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 4
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 4
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 4
57057: NEG
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: NEG
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 3
57091: NEG
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 4
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 5
57113: NEG
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 5
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 5
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 3
57148: NEG
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: NEG
57172: PUSH
57173: LD_INT 4
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: LD_INT 3
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 4
57219: NEG
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 4
57231: NEG
57232: PUSH
57233: LD_INT 4
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 4
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 4
57255: NEG
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 4
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 5
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 4
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 3
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 4
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: LD_INT 5
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: LD_INT 3
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: LD_INT 5
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57414: LD_ADDR_VAR 0 31
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 4
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: LD_INT 4
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 5
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 5
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 4
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: LD_INT 5
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 2
57548: NEG
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 3
57559: NEG
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 4
57570: NEG
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 4
57581: NEG
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 4
57593: NEG
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: LD_INT 4
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 4
57628: NEG
57629: PUSH
57630: LD_INT 5
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: LD_INT 4
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 3
57652: NEG
57653: PUSH
57654: LD_INT 3
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 4
57664: NEG
57665: PUSH
57666: LD_INT 3
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 5
57676: NEG
57677: PUSH
57678: LD_INT 4
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 5
57688: NEG
57689: PUSH
57690: LD_INT 5
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: LD_INT 5
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 5
57712: NEG
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: LD_INT 3
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 4
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 3
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 3
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 4
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: LD_INT 4
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 4
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 5
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 5
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 4
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 5
57909: PUSH
57910: LD_INT 2
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57964: LD_ADDR_VAR 0 32
57968: PUSH
57969: LD_INT 4
57971: NEG
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 4
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 4
58016: NEG
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 5
58027: NEG
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 5
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 5
58050: NEG
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 3
58085: NEG
58086: PUSH
58087: LD_INT 4
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 3
58121: NEG
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 4
58133: NEG
58134: PUSH
58135: LD_INT 3
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 4
58145: NEG
58146: PUSH
58147: LD_INT 4
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: LD_INT 4
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 4
58169: NEG
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 4
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 5
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: LD_INT 4
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 3
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 3
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 4
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 5
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: LD_INT 3
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: NEG
58272: PUSH
58273: LD_INT 5
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 3
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 4
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 4
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 3
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 4
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: LD_INT 4
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 4
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 5
58396: PUSH
58397: LD_INT 4
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 5
58406: PUSH
58407: LD_INT 5
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 4
58416: PUSH
58417: LD_INT 5
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 3
58426: PUSH
58427: LD_INT 4
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 3
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 5
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: LD_INT 5
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58511: LD_ADDR_VAR 0 33
58515: PUSH
58516: LD_INT 4
58518: NEG
58519: PUSH
58520: LD_INT 4
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 4
58530: NEG
58531: PUSH
58532: LD_INT 5
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: LD_INT 4
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 4
58566: NEG
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 5
58578: NEG
58579: PUSH
58580: LD_INT 4
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 5
58590: NEG
58591: PUSH
58592: LD_INT 5
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: LD_INT 5
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 5
58614: NEG
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 4
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 4
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: LD_INT 4
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 4
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 4
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 5
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 5
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 4
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 5
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 4
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: PUSH
58852: LD_INT 4
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: LD_INT 4
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 4
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: LD_INT 4
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 4
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 4
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 5
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 5
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 4
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 3
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: LD_INT 5
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59049: LD_ADDR_VAR 0 34
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: LD_INT 4
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: LD_INT 5
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: LD_INT 4
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 3
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: LD_INT 3
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 4
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 5
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: LD_INT 3
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: LD_INT 5
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 3
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 4
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 4
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 3
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 4
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 4
59251: PUSH
59252: LD_INT 4
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 4
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 5
59271: PUSH
59272: LD_INT 4
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 5
59281: PUSH
59282: LD_INT 5
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 4
59291: PUSH
59292: LD_INT 5
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 3
59301: PUSH
59302: LD_INT 4
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 5
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: PUSH
59332: LD_INT 5
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 3
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 4
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 4
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 3
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: LD_INT 4
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 4
59434: NEG
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 4
59445: NEG
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 3
59457: NEG
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 3
59468: NEG
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 4
59479: NEG
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 5
59490: NEG
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 5
59501: NEG
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 5
59513: NEG
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 3
59525: NEG
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: ST_TO_ADDR
// end ; end ;
59581: GO 59584
59583: POP
// case btype of b_depot , b_warehouse :
59584: LD_VAR 0 1
59588: PUSH
59589: LD_INT 0
59591: DOUBLE
59592: EQUAL
59593: IFTRUE 59603
59595: LD_INT 1
59597: DOUBLE
59598: EQUAL
59599: IFTRUE 59603
59601: GO 59804
59603: POP
// case nation of nation_american :
59604: LD_VAR 0 5
59608: PUSH
59609: LD_INT 1
59611: DOUBLE
59612: EQUAL
59613: IFTRUE 59617
59615: GO 59673
59617: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59618: LD_ADDR_VAR 0 9
59622: PUSH
59623: LD_VAR 0 11
59627: PUSH
59628: LD_VAR 0 12
59632: PUSH
59633: LD_VAR 0 13
59637: PUSH
59638: LD_VAR 0 14
59642: PUSH
59643: LD_VAR 0 15
59647: PUSH
59648: LD_VAR 0 16
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: PUSH
59661: LD_VAR 0 4
59665: PUSH
59666: LD_INT 1
59668: PLUS
59669: ARRAY
59670: ST_TO_ADDR
59671: GO 59802
59673: LD_INT 2
59675: DOUBLE
59676: EQUAL
59677: IFTRUE 59681
59679: GO 59737
59681: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59682: LD_ADDR_VAR 0 9
59686: PUSH
59687: LD_VAR 0 17
59691: PUSH
59692: LD_VAR 0 18
59696: PUSH
59697: LD_VAR 0 19
59701: PUSH
59702: LD_VAR 0 20
59706: PUSH
59707: LD_VAR 0 21
59711: PUSH
59712: LD_VAR 0 22
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: PUSH
59725: LD_VAR 0 4
59729: PUSH
59730: LD_INT 1
59732: PLUS
59733: ARRAY
59734: ST_TO_ADDR
59735: GO 59802
59737: LD_INT 3
59739: DOUBLE
59740: EQUAL
59741: IFTRUE 59745
59743: GO 59801
59745: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59746: LD_ADDR_VAR 0 9
59750: PUSH
59751: LD_VAR 0 23
59755: PUSH
59756: LD_VAR 0 24
59760: PUSH
59761: LD_VAR 0 25
59765: PUSH
59766: LD_VAR 0 26
59770: PUSH
59771: LD_VAR 0 27
59775: PUSH
59776: LD_VAR 0 28
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: PUSH
59789: LD_VAR 0 4
59793: PUSH
59794: LD_INT 1
59796: PLUS
59797: ARRAY
59798: ST_TO_ADDR
59799: GO 59802
59801: POP
59802: GO 60357
59804: LD_INT 2
59806: DOUBLE
59807: EQUAL
59808: IFTRUE 59818
59810: LD_INT 3
59812: DOUBLE
59813: EQUAL
59814: IFTRUE 59818
59816: GO 59874
59818: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59819: LD_ADDR_VAR 0 9
59823: PUSH
59824: LD_VAR 0 29
59828: PUSH
59829: LD_VAR 0 30
59833: PUSH
59834: LD_VAR 0 31
59838: PUSH
59839: LD_VAR 0 32
59843: PUSH
59844: LD_VAR 0 33
59848: PUSH
59849: LD_VAR 0 34
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: PUSH
59862: LD_VAR 0 4
59866: PUSH
59867: LD_INT 1
59869: PLUS
59870: ARRAY
59871: ST_TO_ADDR
59872: GO 60357
59874: LD_INT 16
59876: DOUBLE
59877: EQUAL
59878: IFTRUE 59936
59880: LD_INT 17
59882: DOUBLE
59883: EQUAL
59884: IFTRUE 59936
59886: LD_INT 18
59888: DOUBLE
59889: EQUAL
59890: IFTRUE 59936
59892: LD_INT 19
59894: DOUBLE
59895: EQUAL
59896: IFTRUE 59936
59898: LD_INT 22
59900: DOUBLE
59901: EQUAL
59902: IFTRUE 59936
59904: LD_INT 20
59906: DOUBLE
59907: EQUAL
59908: IFTRUE 59936
59910: LD_INT 21
59912: DOUBLE
59913: EQUAL
59914: IFTRUE 59936
59916: LD_INT 23
59918: DOUBLE
59919: EQUAL
59920: IFTRUE 59936
59922: LD_INT 24
59924: DOUBLE
59925: EQUAL
59926: IFTRUE 59936
59928: LD_INT 25
59930: DOUBLE
59931: EQUAL
59932: IFTRUE 59936
59934: GO 59992
59936: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59937: LD_ADDR_VAR 0 9
59941: PUSH
59942: LD_VAR 0 35
59946: PUSH
59947: LD_VAR 0 36
59951: PUSH
59952: LD_VAR 0 37
59956: PUSH
59957: LD_VAR 0 38
59961: PUSH
59962: LD_VAR 0 39
59966: PUSH
59967: LD_VAR 0 40
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: PUSH
59980: LD_VAR 0 4
59984: PUSH
59985: LD_INT 1
59987: PLUS
59988: ARRAY
59989: ST_TO_ADDR
59990: GO 60357
59992: LD_INT 6
59994: DOUBLE
59995: EQUAL
59996: IFTRUE 60048
59998: LD_INT 7
60000: DOUBLE
60001: EQUAL
60002: IFTRUE 60048
60004: LD_INT 8
60006: DOUBLE
60007: EQUAL
60008: IFTRUE 60048
60010: LD_INT 13
60012: DOUBLE
60013: EQUAL
60014: IFTRUE 60048
60016: LD_INT 12
60018: DOUBLE
60019: EQUAL
60020: IFTRUE 60048
60022: LD_INT 15
60024: DOUBLE
60025: EQUAL
60026: IFTRUE 60048
60028: LD_INT 11
60030: DOUBLE
60031: EQUAL
60032: IFTRUE 60048
60034: LD_INT 14
60036: DOUBLE
60037: EQUAL
60038: IFTRUE 60048
60040: LD_INT 10
60042: DOUBLE
60043: EQUAL
60044: IFTRUE 60048
60046: GO 60104
60048: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60049: LD_ADDR_VAR 0 9
60053: PUSH
60054: LD_VAR 0 41
60058: PUSH
60059: LD_VAR 0 42
60063: PUSH
60064: LD_VAR 0 43
60068: PUSH
60069: LD_VAR 0 44
60073: PUSH
60074: LD_VAR 0 45
60078: PUSH
60079: LD_VAR 0 46
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: PUSH
60092: LD_VAR 0 4
60096: PUSH
60097: LD_INT 1
60099: PLUS
60100: ARRAY
60101: ST_TO_ADDR
60102: GO 60357
60104: LD_INT 36
60106: DOUBLE
60107: EQUAL
60108: IFTRUE 60112
60110: GO 60168
60112: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60113: LD_ADDR_VAR 0 9
60117: PUSH
60118: LD_VAR 0 47
60122: PUSH
60123: LD_VAR 0 48
60127: PUSH
60128: LD_VAR 0 49
60132: PUSH
60133: LD_VAR 0 50
60137: PUSH
60138: LD_VAR 0 51
60142: PUSH
60143: LD_VAR 0 52
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: PUSH
60156: LD_VAR 0 4
60160: PUSH
60161: LD_INT 1
60163: PLUS
60164: ARRAY
60165: ST_TO_ADDR
60166: GO 60357
60168: LD_INT 4
60170: DOUBLE
60171: EQUAL
60172: IFTRUE 60194
60174: LD_INT 5
60176: DOUBLE
60177: EQUAL
60178: IFTRUE 60194
60180: LD_INT 34
60182: DOUBLE
60183: EQUAL
60184: IFTRUE 60194
60186: LD_INT 37
60188: DOUBLE
60189: EQUAL
60190: IFTRUE 60194
60192: GO 60250
60194: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60195: LD_ADDR_VAR 0 9
60199: PUSH
60200: LD_VAR 0 53
60204: PUSH
60205: LD_VAR 0 54
60209: PUSH
60210: LD_VAR 0 55
60214: PUSH
60215: LD_VAR 0 56
60219: PUSH
60220: LD_VAR 0 57
60224: PUSH
60225: LD_VAR 0 58
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: PUSH
60238: LD_VAR 0 4
60242: PUSH
60243: LD_INT 1
60245: PLUS
60246: ARRAY
60247: ST_TO_ADDR
60248: GO 60357
60250: LD_INT 31
60252: DOUBLE
60253: EQUAL
60254: IFTRUE 60300
60256: LD_INT 32
60258: DOUBLE
60259: EQUAL
60260: IFTRUE 60300
60262: LD_INT 33
60264: DOUBLE
60265: EQUAL
60266: IFTRUE 60300
60268: LD_INT 27
60270: DOUBLE
60271: EQUAL
60272: IFTRUE 60300
60274: LD_INT 26
60276: DOUBLE
60277: EQUAL
60278: IFTRUE 60300
60280: LD_INT 28
60282: DOUBLE
60283: EQUAL
60284: IFTRUE 60300
60286: LD_INT 29
60288: DOUBLE
60289: EQUAL
60290: IFTRUE 60300
60292: LD_INT 30
60294: DOUBLE
60295: EQUAL
60296: IFTRUE 60300
60298: GO 60356
60300: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60301: LD_ADDR_VAR 0 9
60305: PUSH
60306: LD_VAR 0 59
60310: PUSH
60311: LD_VAR 0 60
60315: PUSH
60316: LD_VAR 0 61
60320: PUSH
60321: LD_VAR 0 62
60325: PUSH
60326: LD_VAR 0 63
60330: PUSH
60331: LD_VAR 0 64
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: PUSH
60344: LD_VAR 0 4
60348: PUSH
60349: LD_INT 1
60351: PLUS
60352: ARRAY
60353: ST_TO_ADDR
60354: GO 60357
60356: POP
// temp_list2 = [ ] ;
60357: LD_ADDR_VAR 0 10
60361: PUSH
60362: EMPTY
60363: ST_TO_ADDR
// for i in temp_list do
60364: LD_ADDR_VAR 0 8
60368: PUSH
60369: LD_VAR 0 9
60373: PUSH
60374: FOR_IN
60375: IFFALSE 60427
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60377: LD_ADDR_VAR 0 10
60381: PUSH
60382: LD_VAR 0 10
60386: PUSH
60387: LD_VAR 0 8
60391: PUSH
60392: LD_INT 1
60394: ARRAY
60395: PUSH
60396: LD_VAR 0 2
60400: PLUS
60401: PUSH
60402: LD_VAR 0 8
60406: PUSH
60407: LD_INT 2
60409: ARRAY
60410: PUSH
60411: LD_VAR 0 3
60415: PLUS
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: EMPTY
60422: LIST
60423: ADD
60424: ST_TO_ADDR
60425: GO 60374
60427: POP
60428: POP
// result = temp_list2 ;
60429: LD_ADDR_VAR 0 7
60433: PUSH
60434: LD_VAR 0 10
60438: ST_TO_ADDR
// end ;
60439: LD_VAR 0 7
60443: RET
// export function EnemyInRange ( unit , dist ) ; begin
60444: LD_INT 0
60446: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60447: LD_ADDR_VAR 0 3
60451: PUSH
60452: LD_VAR 0 1
60456: PPUSH
60457: CALL_OW 255
60461: PPUSH
60462: LD_VAR 0 1
60466: PPUSH
60467: CALL_OW 250
60471: PPUSH
60472: LD_VAR 0 1
60476: PPUSH
60477: CALL_OW 251
60481: PPUSH
60482: LD_VAR 0 2
60486: PPUSH
60487: CALL 34548 0 4
60491: PUSH
60492: LD_INT 4
60494: ARRAY
60495: ST_TO_ADDR
// end ;
60496: LD_VAR 0 3
60500: RET
// export function PlayerSeeMe ( unit ) ; begin
60501: LD_INT 0
60503: PPUSH
// result := See ( your_side , unit ) ;
60504: LD_ADDR_VAR 0 2
60508: PUSH
60509: LD_OWVAR 2
60513: PPUSH
60514: LD_VAR 0 1
60518: PPUSH
60519: CALL_OW 292
60523: ST_TO_ADDR
// end ;
60524: LD_VAR 0 2
60528: RET
// export function ReverseDir ( unit ) ; begin
60529: LD_INT 0
60531: PPUSH
// if not unit then
60532: LD_VAR 0 1
60536: NOT
60537: IFFALSE 60541
// exit ;
60539: GO 60564
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60541: LD_ADDR_VAR 0 2
60545: PUSH
60546: LD_VAR 0 1
60550: PPUSH
60551: CALL_OW 254
60555: PUSH
60556: LD_INT 3
60558: PLUS
60559: PUSH
60560: LD_INT 6
60562: MOD
60563: ST_TO_ADDR
// end ;
60564: LD_VAR 0 2
60568: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60569: LD_INT 0
60571: PPUSH
60572: PPUSH
60573: PPUSH
60574: PPUSH
60575: PPUSH
// if not hexes then
60576: LD_VAR 0 2
60580: NOT
60581: IFFALSE 60585
// exit ;
60583: GO 60733
// dist := 9999 ;
60585: LD_ADDR_VAR 0 5
60589: PUSH
60590: LD_INT 9999
60592: ST_TO_ADDR
// for i = 1 to hexes do
60593: LD_ADDR_VAR 0 4
60597: PUSH
60598: DOUBLE
60599: LD_INT 1
60601: DEC
60602: ST_TO_ADDR
60603: LD_VAR 0 2
60607: PUSH
60608: FOR_TO
60609: IFFALSE 60721
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60611: LD_VAR 0 1
60615: PPUSH
60616: LD_VAR 0 2
60620: PUSH
60621: LD_VAR 0 4
60625: ARRAY
60626: PUSH
60627: LD_INT 1
60629: ARRAY
60630: PPUSH
60631: LD_VAR 0 2
60635: PUSH
60636: LD_VAR 0 4
60640: ARRAY
60641: PUSH
60642: LD_INT 2
60644: ARRAY
60645: PPUSH
60646: CALL_OW 297
60650: PUSH
60651: LD_VAR 0 5
60655: LESS
60656: IFFALSE 60719
// begin hex := hexes [ i ] ;
60658: LD_ADDR_VAR 0 7
60662: PUSH
60663: LD_VAR 0 2
60667: PUSH
60668: LD_VAR 0 4
60672: ARRAY
60673: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60674: LD_ADDR_VAR 0 5
60678: PUSH
60679: LD_VAR 0 1
60683: PPUSH
60684: LD_VAR 0 2
60688: PUSH
60689: LD_VAR 0 4
60693: ARRAY
60694: PUSH
60695: LD_INT 1
60697: ARRAY
60698: PPUSH
60699: LD_VAR 0 2
60703: PUSH
60704: LD_VAR 0 4
60708: ARRAY
60709: PUSH
60710: LD_INT 2
60712: ARRAY
60713: PPUSH
60714: CALL_OW 297
60718: ST_TO_ADDR
// end ; end ;
60719: GO 60608
60721: POP
60722: POP
// result := hex ;
60723: LD_ADDR_VAR 0 3
60727: PUSH
60728: LD_VAR 0 7
60732: ST_TO_ADDR
// end ;
60733: LD_VAR 0 3
60737: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60738: LD_INT 0
60740: PPUSH
60741: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60742: LD_VAR 0 1
60746: NOT
60747: PUSH
60748: LD_VAR 0 1
60752: PUSH
60753: LD_INT 21
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 23
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PPUSH
60777: CALL_OW 69
60781: IN
60782: NOT
60783: OR
60784: IFFALSE 60788
// exit ;
60786: GO 60835
// for i = 1 to 3 do
60788: LD_ADDR_VAR 0 3
60792: PUSH
60793: DOUBLE
60794: LD_INT 1
60796: DEC
60797: ST_TO_ADDR
60798: LD_INT 3
60800: PUSH
60801: FOR_TO
60802: IFFALSE 60833
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60804: LD_VAR 0 1
60808: PPUSH
60809: CALL_OW 250
60813: PPUSH
60814: LD_VAR 0 1
60818: PPUSH
60819: CALL_OW 251
60823: PPUSH
60824: LD_INT 1
60826: PPUSH
60827: CALL_OW 453
60831: GO 60801
60833: POP
60834: POP
// end ;
60835: LD_VAR 0 2
60839: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60840: LD_INT 0
60842: PPUSH
60843: PPUSH
60844: PPUSH
60845: PPUSH
60846: PPUSH
60847: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60848: LD_VAR 0 1
60852: NOT
60853: PUSH
60854: LD_VAR 0 2
60858: NOT
60859: OR
60860: PUSH
60861: LD_VAR 0 1
60865: PPUSH
60866: CALL_OW 314
60870: OR
60871: IFFALSE 60875
// exit ;
60873: GO 61316
// x := GetX ( enemy_unit ) ;
60875: LD_ADDR_VAR 0 7
60879: PUSH
60880: LD_VAR 0 2
60884: PPUSH
60885: CALL_OW 250
60889: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60890: LD_ADDR_VAR 0 8
60894: PUSH
60895: LD_VAR 0 2
60899: PPUSH
60900: CALL_OW 251
60904: ST_TO_ADDR
// if not x or not y then
60905: LD_VAR 0 7
60909: NOT
60910: PUSH
60911: LD_VAR 0 8
60915: NOT
60916: OR
60917: IFFALSE 60921
// exit ;
60919: GO 61316
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60921: LD_ADDR_VAR 0 6
60925: PUSH
60926: LD_VAR 0 7
60930: PPUSH
60931: LD_INT 0
60933: PPUSH
60934: LD_INT 4
60936: PPUSH
60937: CALL_OW 272
60941: PUSH
60942: LD_VAR 0 8
60946: PPUSH
60947: LD_INT 0
60949: PPUSH
60950: LD_INT 4
60952: PPUSH
60953: CALL_OW 273
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_VAR 0 7
60966: PPUSH
60967: LD_INT 1
60969: PPUSH
60970: LD_INT 4
60972: PPUSH
60973: CALL_OW 272
60977: PUSH
60978: LD_VAR 0 8
60982: PPUSH
60983: LD_INT 1
60985: PPUSH
60986: LD_INT 4
60988: PPUSH
60989: CALL_OW 273
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_VAR 0 7
61002: PPUSH
61003: LD_INT 2
61005: PPUSH
61006: LD_INT 4
61008: PPUSH
61009: CALL_OW 272
61013: PUSH
61014: LD_VAR 0 8
61018: PPUSH
61019: LD_INT 2
61021: PPUSH
61022: LD_INT 4
61024: PPUSH
61025: CALL_OW 273
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_VAR 0 7
61038: PPUSH
61039: LD_INT 3
61041: PPUSH
61042: LD_INT 4
61044: PPUSH
61045: CALL_OW 272
61049: PUSH
61050: LD_VAR 0 8
61054: PPUSH
61055: LD_INT 3
61057: PPUSH
61058: LD_INT 4
61060: PPUSH
61061: CALL_OW 273
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_VAR 0 7
61074: PPUSH
61075: LD_INT 4
61077: PPUSH
61078: LD_INT 4
61080: PPUSH
61081: CALL_OW 272
61085: PUSH
61086: LD_VAR 0 8
61090: PPUSH
61091: LD_INT 4
61093: PPUSH
61094: LD_INT 4
61096: PPUSH
61097: CALL_OW 273
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_VAR 0 7
61110: PPUSH
61111: LD_INT 5
61113: PPUSH
61114: LD_INT 4
61116: PPUSH
61117: CALL_OW 272
61121: PUSH
61122: LD_VAR 0 8
61126: PPUSH
61127: LD_INT 5
61129: PPUSH
61130: LD_INT 4
61132: PPUSH
61133: CALL_OW 273
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: ST_TO_ADDR
// for i = tmp downto 1 do
61150: LD_ADDR_VAR 0 4
61154: PUSH
61155: DOUBLE
61156: LD_VAR 0 6
61160: INC
61161: ST_TO_ADDR
61162: LD_INT 1
61164: PUSH
61165: FOR_DOWNTO
61166: IFFALSE 61267
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61168: LD_VAR 0 6
61172: PUSH
61173: LD_VAR 0 4
61177: ARRAY
61178: PUSH
61179: LD_INT 1
61181: ARRAY
61182: PPUSH
61183: LD_VAR 0 6
61187: PUSH
61188: LD_VAR 0 4
61192: ARRAY
61193: PUSH
61194: LD_INT 2
61196: ARRAY
61197: PPUSH
61198: CALL_OW 488
61202: NOT
61203: PUSH
61204: LD_VAR 0 6
61208: PUSH
61209: LD_VAR 0 4
61213: ARRAY
61214: PUSH
61215: LD_INT 1
61217: ARRAY
61218: PPUSH
61219: LD_VAR 0 6
61223: PUSH
61224: LD_VAR 0 4
61228: ARRAY
61229: PUSH
61230: LD_INT 2
61232: ARRAY
61233: PPUSH
61234: CALL_OW 428
61238: PUSH
61239: LD_INT 0
61241: NONEQUAL
61242: OR
61243: IFFALSE 61265
// tmp := Delete ( tmp , i ) ;
61245: LD_ADDR_VAR 0 6
61249: PUSH
61250: LD_VAR 0 6
61254: PPUSH
61255: LD_VAR 0 4
61259: PPUSH
61260: CALL_OW 3
61264: ST_TO_ADDR
61265: GO 61165
61267: POP
61268: POP
// j := GetClosestHex ( unit , tmp ) ;
61269: LD_ADDR_VAR 0 5
61273: PUSH
61274: LD_VAR 0 1
61278: PPUSH
61279: LD_VAR 0 6
61283: PPUSH
61284: CALL 60569 0 2
61288: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61289: LD_VAR 0 1
61293: PPUSH
61294: LD_VAR 0 5
61298: PUSH
61299: LD_INT 1
61301: ARRAY
61302: PPUSH
61303: LD_VAR 0 5
61307: PUSH
61308: LD_INT 2
61310: ARRAY
61311: PPUSH
61312: CALL_OW 111
// end ;
61316: LD_VAR 0 3
61320: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61321: LD_INT 0
61323: PPUSH
61324: PPUSH
61325: PPUSH
// uc_side = 0 ;
61326: LD_ADDR_OWVAR 20
61330: PUSH
61331: LD_INT 0
61333: ST_TO_ADDR
// uc_nation = 0 ;
61334: LD_ADDR_OWVAR 21
61338: PUSH
61339: LD_INT 0
61341: ST_TO_ADDR
// InitHc_All ( ) ;
61342: CALL_OW 584
// InitVc ;
61346: CALL_OW 20
// if mastodonts then
61350: LD_VAR 0 6
61354: IFFALSE 61421
// for i = 1 to mastodonts do
61356: LD_ADDR_VAR 0 11
61360: PUSH
61361: DOUBLE
61362: LD_INT 1
61364: DEC
61365: ST_TO_ADDR
61366: LD_VAR 0 6
61370: PUSH
61371: FOR_TO
61372: IFFALSE 61419
// begin vc_chassis := 31 ;
61374: LD_ADDR_OWVAR 37
61378: PUSH
61379: LD_INT 31
61381: ST_TO_ADDR
// vc_control := control_rider ;
61382: LD_ADDR_OWVAR 38
61386: PUSH
61387: LD_INT 4
61389: ST_TO_ADDR
// animal := CreateVehicle ;
61390: LD_ADDR_VAR 0 12
61394: PUSH
61395: CALL_OW 45
61399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61400: LD_VAR 0 12
61404: PPUSH
61405: LD_VAR 0 8
61409: PPUSH
61410: LD_INT 0
61412: PPUSH
61413: CALL 63609 0 3
// end ;
61417: GO 61371
61419: POP
61420: POP
// if horses then
61421: LD_VAR 0 5
61425: IFFALSE 61492
// for i = 1 to horses do
61427: LD_ADDR_VAR 0 11
61431: PUSH
61432: DOUBLE
61433: LD_INT 1
61435: DEC
61436: ST_TO_ADDR
61437: LD_VAR 0 5
61441: PUSH
61442: FOR_TO
61443: IFFALSE 61490
// begin hc_class := 21 ;
61445: LD_ADDR_OWVAR 28
61449: PUSH
61450: LD_INT 21
61452: ST_TO_ADDR
// hc_gallery :=  ;
61453: LD_ADDR_OWVAR 33
61457: PUSH
61458: LD_STRING 
61460: ST_TO_ADDR
// animal := CreateHuman ;
61461: LD_ADDR_VAR 0 12
61465: PUSH
61466: CALL_OW 44
61470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61471: LD_VAR 0 12
61475: PPUSH
61476: LD_VAR 0 8
61480: PPUSH
61481: LD_INT 0
61483: PPUSH
61484: CALL 63609 0 3
// end ;
61488: GO 61442
61490: POP
61491: POP
// if birds then
61492: LD_VAR 0 1
61496: IFFALSE 61563
// for i = 1 to birds do
61498: LD_ADDR_VAR 0 11
61502: PUSH
61503: DOUBLE
61504: LD_INT 1
61506: DEC
61507: ST_TO_ADDR
61508: LD_VAR 0 1
61512: PUSH
61513: FOR_TO
61514: IFFALSE 61561
// begin hc_class = 18 ;
61516: LD_ADDR_OWVAR 28
61520: PUSH
61521: LD_INT 18
61523: ST_TO_ADDR
// hc_gallery =  ;
61524: LD_ADDR_OWVAR 33
61528: PUSH
61529: LD_STRING 
61531: ST_TO_ADDR
// animal := CreateHuman ;
61532: LD_ADDR_VAR 0 12
61536: PUSH
61537: CALL_OW 44
61541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61542: LD_VAR 0 12
61546: PPUSH
61547: LD_VAR 0 8
61551: PPUSH
61552: LD_INT 0
61554: PPUSH
61555: CALL 63609 0 3
// end ;
61559: GO 61513
61561: POP
61562: POP
// if tigers then
61563: LD_VAR 0 2
61567: IFFALSE 61651
// for i = 1 to tigers do
61569: LD_ADDR_VAR 0 11
61573: PUSH
61574: DOUBLE
61575: LD_INT 1
61577: DEC
61578: ST_TO_ADDR
61579: LD_VAR 0 2
61583: PUSH
61584: FOR_TO
61585: IFFALSE 61649
// begin hc_class = class_tiger ;
61587: LD_ADDR_OWVAR 28
61591: PUSH
61592: LD_INT 14
61594: ST_TO_ADDR
// hc_gallery =  ;
61595: LD_ADDR_OWVAR 33
61599: PUSH
61600: LD_STRING 
61602: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61603: LD_ADDR_OWVAR 35
61607: PUSH
61608: LD_INT 7
61610: NEG
61611: PPUSH
61612: LD_INT 7
61614: PPUSH
61615: CALL_OW 12
61619: ST_TO_ADDR
// animal := CreateHuman ;
61620: LD_ADDR_VAR 0 12
61624: PUSH
61625: CALL_OW 44
61629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61630: LD_VAR 0 12
61634: PPUSH
61635: LD_VAR 0 8
61639: PPUSH
61640: LD_INT 0
61642: PPUSH
61643: CALL 63609 0 3
// end ;
61647: GO 61584
61649: POP
61650: POP
// if apemans then
61651: LD_VAR 0 3
61655: IFFALSE 61778
// for i = 1 to apemans do
61657: LD_ADDR_VAR 0 11
61661: PUSH
61662: DOUBLE
61663: LD_INT 1
61665: DEC
61666: ST_TO_ADDR
61667: LD_VAR 0 3
61671: PUSH
61672: FOR_TO
61673: IFFALSE 61776
// begin hc_class = class_apeman ;
61675: LD_ADDR_OWVAR 28
61679: PUSH
61680: LD_INT 12
61682: ST_TO_ADDR
// hc_gallery =  ;
61683: LD_ADDR_OWVAR 33
61687: PUSH
61688: LD_STRING 
61690: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61691: LD_ADDR_OWVAR 35
61695: PUSH
61696: LD_INT 5
61698: NEG
61699: PPUSH
61700: LD_INT 5
61702: PPUSH
61703: CALL_OW 12
61707: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61708: LD_ADDR_OWVAR 31
61712: PUSH
61713: LD_INT 1
61715: PPUSH
61716: LD_INT 3
61718: PPUSH
61719: CALL_OW 12
61723: PUSH
61724: LD_INT 1
61726: PPUSH
61727: LD_INT 3
61729: PPUSH
61730: CALL_OW 12
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: ST_TO_ADDR
// animal := CreateHuman ;
61747: LD_ADDR_VAR 0 12
61751: PUSH
61752: CALL_OW 44
61756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61757: LD_VAR 0 12
61761: PPUSH
61762: LD_VAR 0 8
61766: PPUSH
61767: LD_INT 0
61769: PPUSH
61770: CALL 63609 0 3
// end ;
61774: GO 61672
61776: POP
61777: POP
// if enchidnas then
61778: LD_VAR 0 4
61782: IFFALSE 61849
// for i = 1 to enchidnas do
61784: LD_ADDR_VAR 0 11
61788: PUSH
61789: DOUBLE
61790: LD_INT 1
61792: DEC
61793: ST_TO_ADDR
61794: LD_VAR 0 4
61798: PUSH
61799: FOR_TO
61800: IFFALSE 61847
// begin hc_class = 13 ;
61802: LD_ADDR_OWVAR 28
61806: PUSH
61807: LD_INT 13
61809: ST_TO_ADDR
// hc_gallery =  ;
61810: LD_ADDR_OWVAR 33
61814: PUSH
61815: LD_STRING 
61817: ST_TO_ADDR
// animal := CreateHuman ;
61818: LD_ADDR_VAR 0 12
61822: PUSH
61823: CALL_OW 44
61827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61828: LD_VAR 0 12
61832: PPUSH
61833: LD_VAR 0 8
61837: PPUSH
61838: LD_INT 0
61840: PPUSH
61841: CALL 63609 0 3
// end ;
61845: GO 61799
61847: POP
61848: POP
// if fishes then
61849: LD_VAR 0 7
61853: IFFALSE 61920
// for i = 1 to fishes do
61855: LD_ADDR_VAR 0 11
61859: PUSH
61860: DOUBLE
61861: LD_INT 1
61863: DEC
61864: ST_TO_ADDR
61865: LD_VAR 0 7
61869: PUSH
61870: FOR_TO
61871: IFFALSE 61918
// begin hc_class = 20 ;
61873: LD_ADDR_OWVAR 28
61877: PUSH
61878: LD_INT 20
61880: ST_TO_ADDR
// hc_gallery =  ;
61881: LD_ADDR_OWVAR 33
61885: PUSH
61886: LD_STRING 
61888: ST_TO_ADDR
// animal := CreateHuman ;
61889: LD_ADDR_VAR 0 12
61893: PUSH
61894: CALL_OW 44
61898: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61899: LD_VAR 0 12
61903: PPUSH
61904: LD_VAR 0 9
61908: PPUSH
61909: LD_INT 0
61911: PPUSH
61912: CALL 63609 0 3
// end ;
61916: GO 61870
61918: POP
61919: POP
// end ;
61920: LD_VAR 0 10
61924: RET
// export function WantHeal ( sci , unit ) ; begin
61925: LD_INT 0
61927: PPUSH
// if GetTaskList ( sci ) > 0 then
61928: LD_VAR 0 1
61932: PPUSH
61933: CALL_OW 437
61937: PUSH
61938: LD_INT 0
61940: GREATER
61941: IFFALSE 62011
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61943: LD_VAR 0 1
61947: PPUSH
61948: CALL_OW 437
61952: PUSH
61953: LD_INT 1
61955: ARRAY
61956: PUSH
61957: LD_INT 1
61959: ARRAY
61960: PUSH
61961: LD_STRING l
61963: EQUAL
61964: PUSH
61965: LD_VAR 0 1
61969: PPUSH
61970: CALL_OW 437
61974: PUSH
61975: LD_INT 1
61977: ARRAY
61978: PUSH
61979: LD_INT 4
61981: ARRAY
61982: PUSH
61983: LD_VAR 0 2
61987: EQUAL
61988: AND
61989: IFFALSE 62001
// result := true else
61991: LD_ADDR_VAR 0 3
61995: PUSH
61996: LD_INT 1
61998: ST_TO_ADDR
61999: GO 62009
// result := false ;
62001: LD_ADDR_VAR 0 3
62005: PUSH
62006: LD_INT 0
62008: ST_TO_ADDR
// end else
62009: GO 62019
// result := false ;
62011: LD_ADDR_VAR 0 3
62015: PUSH
62016: LD_INT 0
62018: ST_TO_ADDR
// end ;
62019: LD_VAR 0 3
62023: RET
// export function HealTarget ( sci ) ; begin
62024: LD_INT 0
62026: PPUSH
// if not sci then
62027: LD_VAR 0 1
62031: NOT
62032: IFFALSE 62036
// exit ;
62034: GO 62101
// result := 0 ;
62036: LD_ADDR_VAR 0 2
62040: PUSH
62041: LD_INT 0
62043: ST_TO_ADDR
// if GetTaskList ( sci ) then
62044: LD_VAR 0 1
62048: PPUSH
62049: CALL_OW 437
62053: IFFALSE 62101
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62055: LD_VAR 0 1
62059: PPUSH
62060: CALL_OW 437
62064: PUSH
62065: LD_INT 1
62067: ARRAY
62068: PUSH
62069: LD_INT 1
62071: ARRAY
62072: PUSH
62073: LD_STRING l
62075: EQUAL
62076: IFFALSE 62101
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62078: LD_ADDR_VAR 0 2
62082: PUSH
62083: LD_VAR 0 1
62087: PPUSH
62088: CALL_OW 437
62092: PUSH
62093: LD_INT 1
62095: ARRAY
62096: PUSH
62097: LD_INT 4
62099: ARRAY
62100: ST_TO_ADDR
// end ;
62101: LD_VAR 0 2
62105: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62106: LD_INT 0
62108: PPUSH
62109: PPUSH
62110: PPUSH
62111: PPUSH
// if not base_units then
62112: LD_VAR 0 1
62116: NOT
62117: IFFALSE 62121
// exit ;
62119: GO 62208
// result := false ;
62121: LD_ADDR_VAR 0 2
62125: PUSH
62126: LD_INT 0
62128: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62129: LD_ADDR_VAR 0 5
62133: PUSH
62134: LD_VAR 0 1
62138: PPUSH
62139: LD_INT 21
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PPUSH
62149: CALL_OW 72
62153: ST_TO_ADDR
// if not tmp then
62154: LD_VAR 0 5
62158: NOT
62159: IFFALSE 62163
// exit ;
62161: GO 62208
// for i in tmp do
62163: LD_ADDR_VAR 0 3
62167: PUSH
62168: LD_VAR 0 5
62172: PUSH
62173: FOR_IN
62174: IFFALSE 62206
// begin result := EnemyInRange ( i , 22 ) ;
62176: LD_ADDR_VAR 0 2
62180: PUSH
62181: LD_VAR 0 3
62185: PPUSH
62186: LD_INT 22
62188: PPUSH
62189: CALL 60444 0 2
62193: ST_TO_ADDR
// if result then
62194: LD_VAR 0 2
62198: IFFALSE 62204
// exit ;
62200: POP
62201: POP
62202: GO 62208
// end ;
62204: GO 62173
62206: POP
62207: POP
// end ;
62208: LD_VAR 0 2
62212: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62213: LD_INT 0
62215: PPUSH
62216: PPUSH
// if not units then
62217: LD_VAR 0 1
62221: NOT
62222: IFFALSE 62226
// exit ;
62224: GO 62296
// result := [ ] ;
62226: LD_ADDR_VAR 0 3
62230: PUSH
62231: EMPTY
62232: ST_TO_ADDR
// for i in units do
62233: LD_ADDR_VAR 0 4
62237: PUSH
62238: LD_VAR 0 1
62242: PUSH
62243: FOR_IN
62244: IFFALSE 62294
// if GetTag ( i ) = tag then
62246: LD_VAR 0 4
62250: PPUSH
62251: CALL_OW 110
62255: PUSH
62256: LD_VAR 0 2
62260: EQUAL
62261: IFFALSE 62292
// result := Insert ( result , result + 1 , i ) ;
62263: LD_ADDR_VAR 0 3
62267: PUSH
62268: LD_VAR 0 3
62272: PPUSH
62273: LD_VAR 0 3
62277: PUSH
62278: LD_INT 1
62280: PLUS
62281: PPUSH
62282: LD_VAR 0 4
62286: PPUSH
62287: CALL_OW 2
62291: ST_TO_ADDR
62292: GO 62243
62294: POP
62295: POP
// end ;
62296: LD_VAR 0 3
62300: RET
// export function IsDriver ( un ) ; begin
62301: LD_INT 0
62303: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62304: LD_ADDR_VAR 0 2
62308: PUSH
62309: LD_VAR 0 1
62313: PUSH
62314: LD_INT 55
62316: PUSH
62317: EMPTY
62318: LIST
62319: PPUSH
62320: CALL_OW 69
62324: IN
62325: ST_TO_ADDR
// end ;
62326: LD_VAR 0 2
62330: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62331: LD_INT 0
62333: PPUSH
62334: PPUSH
// list := [ ] ;
62335: LD_ADDR_VAR 0 5
62339: PUSH
62340: EMPTY
62341: ST_TO_ADDR
// case d of 0 :
62342: LD_VAR 0 3
62346: PUSH
62347: LD_INT 0
62349: DOUBLE
62350: EQUAL
62351: IFTRUE 62355
62353: GO 62488
62355: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62356: LD_ADDR_VAR 0 5
62360: PUSH
62361: LD_VAR 0 1
62365: PUSH
62366: LD_INT 4
62368: MINUS
62369: PUSH
62370: LD_VAR 0 2
62374: PUSH
62375: LD_INT 4
62377: MINUS
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: LIST
62386: PUSH
62387: LD_VAR 0 1
62391: PUSH
62392: LD_INT 3
62394: MINUS
62395: PUSH
62396: LD_VAR 0 2
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: LIST
62408: PUSH
62409: LD_VAR 0 1
62413: PUSH
62414: LD_INT 4
62416: PLUS
62417: PUSH
62418: LD_VAR 0 2
62422: PUSH
62423: LD_INT 4
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: PUSH
62431: LD_VAR 0 1
62435: PUSH
62436: LD_INT 3
62438: PLUS
62439: PUSH
62440: LD_VAR 0 2
62444: PUSH
62445: LD_INT 3
62447: PLUS
62448: PUSH
62449: LD_INT 5
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: LIST
62456: PUSH
62457: LD_VAR 0 1
62461: PUSH
62462: LD_VAR 0 2
62466: PUSH
62467: LD_INT 4
62469: PLUS
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: ST_TO_ADDR
// end ; 1 :
62486: GO 63186
62488: LD_INT 1
62490: DOUBLE
62491: EQUAL
62492: IFTRUE 62496
62494: GO 62629
62496: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62497: LD_ADDR_VAR 0 5
62501: PUSH
62502: LD_VAR 0 1
62506: PUSH
62507: LD_VAR 0 2
62511: PUSH
62512: LD_INT 4
62514: MINUS
62515: PUSH
62516: LD_INT 3
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: PUSH
62524: LD_VAR 0 1
62528: PUSH
62529: LD_INT 3
62531: MINUS
62532: PUSH
62533: LD_VAR 0 2
62537: PUSH
62538: LD_INT 3
62540: MINUS
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: LIST
62549: PUSH
62550: LD_VAR 0 1
62554: PUSH
62555: LD_INT 4
62557: MINUS
62558: PUSH
62559: LD_VAR 0 2
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: LIST
62571: PUSH
62572: LD_VAR 0 1
62576: PUSH
62577: LD_VAR 0 2
62581: PUSH
62582: LD_INT 3
62584: PLUS
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: LIST
62593: PUSH
62594: LD_VAR 0 1
62598: PUSH
62599: LD_INT 4
62601: PLUS
62602: PUSH
62603: LD_VAR 0 2
62607: PUSH
62608: LD_INT 4
62610: PLUS
62611: PUSH
62612: LD_INT 5
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: LIST
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: ST_TO_ADDR
// end ; 2 :
62627: GO 63186
62629: LD_INT 2
62631: DOUBLE
62632: EQUAL
62633: IFTRUE 62637
62635: GO 62766
62637: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62638: LD_ADDR_VAR 0 5
62642: PUSH
62643: LD_VAR 0 1
62647: PUSH
62648: LD_VAR 0 2
62652: PUSH
62653: LD_INT 3
62655: MINUS
62656: PUSH
62657: LD_INT 3
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: PUSH
62665: LD_VAR 0 1
62669: PUSH
62670: LD_INT 4
62672: PLUS
62673: PUSH
62674: LD_VAR 0 2
62678: PUSH
62679: LD_INT 4
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: PUSH
62687: LD_VAR 0 1
62691: PUSH
62692: LD_VAR 0 2
62696: PUSH
62697: LD_INT 4
62699: PLUS
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: PUSH
62709: LD_VAR 0 1
62713: PUSH
62714: LD_INT 3
62716: MINUS
62717: PUSH
62718: LD_VAR 0 2
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: PUSH
62731: LD_VAR 0 1
62735: PUSH
62736: LD_INT 4
62738: MINUS
62739: PUSH
62740: LD_VAR 0 2
62744: PUSH
62745: LD_INT 4
62747: MINUS
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: LIST
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: ST_TO_ADDR
// end ; 3 :
62764: GO 63186
62766: LD_INT 3
62768: DOUBLE
62769: EQUAL
62770: IFTRUE 62774
62772: GO 62907
62774: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62775: LD_ADDR_VAR 0 5
62779: PUSH
62780: LD_VAR 0 1
62784: PUSH
62785: LD_INT 3
62787: PLUS
62788: PUSH
62789: LD_VAR 0 2
62793: PUSH
62794: LD_INT 4
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: LIST
62801: PUSH
62802: LD_VAR 0 1
62806: PUSH
62807: LD_INT 4
62809: PLUS
62810: PUSH
62811: LD_VAR 0 2
62815: PUSH
62816: LD_INT 4
62818: PLUS
62819: PUSH
62820: LD_INT 5
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: LIST
62827: PUSH
62828: LD_VAR 0 1
62832: PUSH
62833: LD_INT 4
62835: MINUS
62836: PUSH
62837: LD_VAR 0 2
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: LIST
62849: PUSH
62850: LD_VAR 0 1
62854: PUSH
62855: LD_VAR 0 2
62859: PUSH
62860: LD_INT 4
62862: MINUS
62863: PUSH
62864: LD_INT 3
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: PUSH
62872: LD_VAR 0 1
62876: PUSH
62877: LD_INT 3
62879: MINUS
62880: PUSH
62881: LD_VAR 0 2
62885: PUSH
62886: LD_INT 3
62888: MINUS
62889: PUSH
62890: LD_INT 2
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: LIST
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: ST_TO_ADDR
// end ; 4 :
62905: GO 63186
62907: LD_INT 4
62909: DOUBLE
62910: EQUAL
62911: IFTRUE 62915
62913: GO 63048
62915: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62916: LD_ADDR_VAR 0 5
62920: PUSH
62921: LD_VAR 0 1
62925: PUSH
62926: LD_VAR 0 2
62930: PUSH
62931: LD_INT 4
62933: PLUS
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: LIST
62942: PUSH
62943: LD_VAR 0 1
62947: PUSH
62948: LD_INT 3
62950: PLUS
62951: PUSH
62952: LD_VAR 0 2
62956: PUSH
62957: LD_INT 3
62959: PLUS
62960: PUSH
62961: LD_INT 5
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: PUSH
62969: LD_VAR 0 1
62973: PUSH
62974: LD_INT 4
62976: PLUS
62977: PUSH
62978: LD_VAR 0 2
62982: PUSH
62983: LD_INT 4
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: LIST
62990: PUSH
62991: LD_VAR 0 1
62995: PUSH
62996: LD_VAR 0 2
63000: PUSH
63001: LD_INT 3
63003: MINUS
63004: PUSH
63005: LD_INT 3
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: LIST
63012: PUSH
63013: LD_VAR 0 1
63017: PUSH
63018: LD_INT 4
63020: MINUS
63021: PUSH
63022: LD_VAR 0 2
63026: PUSH
63027: LD_INT 4
63029: MINUS
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: LIST
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: ST_TO_ADDR
// end ; 5 :
63046: GO 63186
63048: LD_INT 5
63050: DOUBLE
63051: EQUAL
63052: IFTRUE 63056
63054: GO 63185
63056: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63057: LD_ADDR_VAR 0 5
63061: PUSH
63062: LD_VAR 0 1
63066: PUSH
63067: LD_INT 4
63069: MINUS
63070: PUSH
63071: LD_VAR 0 2
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: PUSH
63084: LD_VAR 0 1
63088: PUSH
63089: LD_VAR 0 2
63093: PUSH
63094: LD_INT 4
63096: MINUS
63097: PUSH
63098: LD_INT 3
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: PUSH
63106: LD_VAR 0 1
63110: PUSH
63111: LD_INT 4
63113: PLUS
63114: PUSH
63115: LD_VAR 0 2
63119: PUSH
63120: LD_INT 4
63122: PLUS
63123: PUSH
63124: LD_INT 5
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: LIST
63131: PUSH
63132: LD_VAR 0 1
63136: PUSH
63137: LD_INT 3
63139: PLUS
63140: PUSH
63141: LD_VAR 0 2
63145: PUSH
63146: LD_INT 4
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: PUSH
63154: LD_VAR 0 1
63158: PUSH
63159: LD_VAR 0 2
63163: PUSH
63164: LD_INT 3
63166: PLUS
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: ST_TO_ADDR
// end ; end ;
63183: GO 63186
63185: POP
// result := list ;
63186: LD_ADDR_VAR 0 4
63190: PUSH
63191: LD_VAR 0 5
63195: ST_TO_ADDR
// end ;
63196: LD_VAR 0 4
63200: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63201: LD_INT 0
63203: PPUSH
63204: PPUSH
63205: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63206: LD_VAR 0 1
63210: NOT
63211: PUSH
63212: LD_VAR 0 2
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: LD_INT 3
63225: PUSH
63226: LD_INT 4
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: IN
63235: NOT
63236: OR
63237: IFFALSE 63241
// exit ;
63239: GO 63333
// tmp := [ ] ;
63241: LD_ADDR_VAR 0 5
63245: PUSH
63246: EMPTY
63247: ST_TO_ADDR
// for i in units do
63248: LD_ADDR_VAR 0 4
63252: PUSH
63253: LD_VAR 0 1
63257: PUSH
63258: FOR_IN
63259: IFFALSE 63302
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63261: LD_ADDR_VAR 0 5
63265: PUSH
63266: LD_VAR 0 5
63270: PPUSH
63271: LD_VAR 0 5
63275: PUSH
63276: LD_INT 1
63278: PLUS
63279: PPUSH
63280: LD_VAR 0 4
63284: PPUSH
63285: LD_VAR 0 2
63289: PPUSH
63290: CALL_OW 259
63294: PPUSH
63295: CALL_OW 2
63299: ST_TO_ADDR
63300: GO 63258
63302: POP
63303: POP
// if not tmp then
63304: LD_VAR 0 5
63308: NOT
63309: IFFALSE 63313
// exit ;
63311: GO 63333
// result := SortListByListDesc ( units , tmp ) ;
63313: LD_ADDR_VAR 0 3
63317: PUSH
63318: LD_VAR 0 1
63322: PPUSH
63323: LD_VAR 0 5
63327: PPUSH
63328: CALL_OW 77
63332: ST_TO_ADDR
// end ;
63333: LD_VAR 0 3
63337: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63338: LD_INT 0
63340: PPUSH
63341: PPUSH
63342: PPUSH
// result := false ;
63343: LD_ADDR_VAR 0 3
63347: PUSH
63348: LD_INT 0
63350: ST_TO_ADDR
// x := GetX ( building ) ;
63351: LD_ADDR_VAR 0 4
63355: PUSH
63356: LD_VAR 0 2
63360: PPUSH
63361: CALL_OW 250
63365: ST_TO_ADDR
// y := GetY ( building ) ;
63366: LD_ADDR_VAR 0 5
63370: PUSH
63371: LD_VAR 0 2
63375: PPUSH
63376: CALL_OW 251
63380: ST_TO_ADDR
// if not building or not x or not y then
63381: LD_VAR 0 2
63385: NOT
63386: PUSH
63387: LD_VAR 0 4
63391: NOT
63392: OR
63393: PUSH
63394: LD_VAR 0 5
63398: NOT
63399: OR
63400: IFFALSE 63404
// exit ;
63402: GO 63496
// if GetTaskList ( unit ) then
63404: LD_VAR 0 1
63408: PPUSH
63409: CALL_OW 437
63413: IFFALSE 63496
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63415: LD_STRING e
63417: PUSH
63418: LD_VAR 0 1
63422: PPUSH
63423: CALL_OW 437
63427: PUSH
63428: LD_INT 1
63430: ARRAY
63431: PUSH
63432: LD_INT 1
63434: ARRAY
63435: EQUAL
63436: PUSH
63437: LD_VAR 0 4
63441: PUSH
63442: LD_VAR 0 1
63446: PPUSH
63447: CALL_OW 437
63451: PUSH
63452: LD_INT 1
63454: ARRAY
63455: PUSH
63456: LD_INT 2
63458: ARRAY
63459: EQUAL
63460: AND
63461: PUSH
63462: LD_VAR 0 5
63466: PUSH
63467: LD_VAR 0 1
63471: PPUSH
63472: CALL_OW 437
63476: PUSH
63477: LD_INT 1
63479: ARRAY
63480: PUSH
63481: LD_INT 3
63483: ARRAY
63484: EQUAL
63485: AND
63486: IFFALSE 63496
// result := true end ;
63488: LD_ADDR_VAR 0 3
63492: PUSH
63493: LD_INT 1
63495: ST_TO_ADDR
// end ;
63496: LD_VAR 0 3
63500: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63501: LD_INT 0
63503: PPUSH
// result := false ;
63504: LD_ADDR_VAR 0 4
63508: PUSH
63509: LD_INT 0
63511: ST_TO_ADDR
// if GetTaskList ( unit ) then
63512: LD_VAR 0 1
63516: PPUSH
63517: CALL_OW 437
63521: IFFALSE 63604
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63523: LD_STRING M
63525: PUSH
63526: LD_VAR 0 1
63530: PPUSH
63531: CALL_OW 437
63535: PUSH
63536: LD_INT 1
63538: ARRAY
63539: PUSH
63540: LD_INT 1
63542: ARRAY
63543: EQUAL
63544: PUSH
63545: LD_VAR 0 2
63549: PUSH
63550: LD_VAR 0 1
63554: PPUSH
63555: CALL_OW 437
63559: PUSH
63560: LD_INT 1
63562: ARRAY
63563: PUSH
63564: LD_INT 2
63566: ARRAY
63567: EQUAL
63568: AND
63569: PUSH
63570: LD_VAR 0 3
63574: PUSH
63575: LD_VAR 0 1
63579: PPUSH
63580: CALL_OW 437
63584: PUSH
63585: LD_INT 1
63587: ARRAY
63588: PUSH
63589: LD_INT 3
63591: ARRAY
63592: EQUAL
63593: AND
63594: IFFALSE 63604
// result := true ;
63596: LD_ADDR_VAR 0 4
63600: PUSH
63601: LD_INT 1
63603: ST_TO_ADDR
// end ; end ;
63604: LD_VAR 0 4
63608: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63609: LD_INT 0
63611: PPUSH
63612: PPUSH
63613: PPUSH
63614: PPUSH
// if not unit or not area then
63615: LD_VAR 0 1
63619: NOT
63620: PUSH
63621: LD_VAR 0 2
63625: NOT
63626: OR
63627: IFFALSE 63631
// exit ;
63629: GO 63795
// tmp := AreaToList ( area , i ) ;
63631: LD_ADDR_VAR 0 6
63635: PUSH
63636: LD_VAR 0 2
63640: PPUSH
63641: LD_VAR 0 5
63645: PPUSH
63646: CALL_OW 517
63650: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63651: LD_ADDR_VAR 0 5
63655: PUSH
63656: DOUBLE
63657: LD_INT 1
63659: DEC
63660: ST_TO_ADDR
63661: LD_VAR 0 6
63665: PUSH
63666: LD_INT 1
63668: ARRAY
63669: PUSH
63670: FOR_TO
63671: IFFALSE 63793
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63673: LD_ADDR_VAR 0 7
63677: PUSH
63678: LD_VAR 0 6
63682: PUSH
63683: LD_INT 1
63685: ARRAY
63686: PUSH
63687: LD_VAR 0 5
63691: ARRAY
63692: PUSH
63693: LD_VAR 0 6
63697: PUSH
63698: LD_INT 2
63700: ARRAY
63701: PUSH
63702: LD_VAR 0 5
63706: ARRAY
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63712: LD_VAR 0 7
63716: PUSH
63717: LD_INT 1
63719: ARRAY
63720: PPUSH
63721: LD_VAR 0 7
63725: PUSH
63726: LD_INT 2
63728: ARRAY
63729: PPUSH
63730: CALL_OW 428
63734: PUSH
63735: LD_INT 0
63737: EQUAL
63738: IFFALSE 63791
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63740: LD_VAR 0 1
63744: PPUSH
63745: LD_VAR 0 7
63749: PUSH
63750: LD_INT 1
63752: ARRAY
63753: PPUSH
63754: LD_VAR 0 7
63758: PUSH
63759: LD_INT 2
63761: ARRAY
63762: PPUSH
63763: LD_VAR 0 3
63767: PPUSH
63768: CALL_OW 48
// result := IsPlaced ( unit ) ;
63772: LD_ADDR_VAR 0 4
63776: PUSH
63777: LD_VAR 0 1
63781: PPUSH
63782: CALL_OW 305
63786: ST_TO_ADDR
// exit ;
63787: POP
63788: POP
63789: GO 63795
// end ; end ;
63791: GO 63670
63793: POP
63794: POP
// end ;
63795: LD_VAR 0 4
63799: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63800: LD_INT 0
63802: PPUSH
63803: PPUSH
63804: PPUSH
// if not side or side > 8 then
63805: LD_VAR 0 1
63809: NOT
63810: PUSH
63811: LD_VAR 0 1
63815: PUSH
63816: LD_INT 8
63818: GREATER
63819: OR
63820: IFFALSE 63824
// exit ;
63822: GO 64011
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63824: LD_ADDR_VAR 0 4
63828: PUSH
63829: LD_INT 22
63831: PUSH
63832: LD_VAR 0 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 21
63843: PUSH
63844: LD_INT 3
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PPUSH
63855: CALL_OW 69
63859: ST_TO_ADDR
// if not tmp then
63860: LD_VAR 0 4
63864: NOT
63865: IFFALSE 63869
// exit ;
63867: GO 64011
// enable_addtolog := true ;
63869: LD_ADDR_OWVAR 81
63873: PUSH
63874: LD_INT 1
63876: ST_TO_ADDR
// AddToLog ( [ ) ;
63877: LD_STRING [
63879: PPUSH
63880: CALL_OW 561
// for i in tmp do
63884: LD_ADDR_VAR 0 3
63888: PUSH
63889: LD_VAR 0 4
63893: PUSH
63894: FOR_IN
63895: IFFALSE 64002
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63897: LD_STRING [
63899: PUSH
63900: LD_VAR 0 3
63904: PPUSH
63905: CALL_OW 266
63909: STR
63910: PUSH
63911: LD_STRING , 
63913: STR
63914: PUSH
63915: LD_VAR 0 3
63919: PPUSH
63920: CALL_OW 250
63924: STR
63925: PUSH
63926: LD_STRING , 
63928: STR
63929: PUSH
63930: LD_VAR 0 3
63934: PPUSH
63935: CALL_OW 251
63939: STR
63940: PUSH
63941: LD_STRING , 
63943: STR
63944: PUSH
63945: LD_VAR 0 3
63949: PPUSH
63950: CALL_OW 254
63954: STR
63955: PUSH
63956: LD_STRING , 
63958: STR
63959: PUSH
63960: LD_VAR 0 3
63964: PPUSH
63965: LD_INT 1
63967: PPUSH
63968: CALL_OW 268
63972: STR
63973: PUSH
63974: LD_STRING , 
63976: STR
63977: PUSH
63978: LD_VAR 0 3
63982: PPUSH
63983: LD_INT 2
63985: PPUSH
63986: CALL_OW 268
63990: STR
63991: PUSH
63992: LD_STRING ],
63994: STR
63995: PPUSH
63996: CALL_OW 561
// end ;
64000: GO 63894
64002: POP
64003: POP
// AddToLog ( ]; ) ;
64004: LD_STRING ];
64006: PPUSH
64007: CALL_OW 561
// end ;
64011: LD_VAR 0 2
64015: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64016: LD_INT 0
64018: PPUSH
64019: PPUSH
64020: PPUSH
64021: PPUSH
64022: PPUSH
// if not area or not rate or not max then
64023: LD_VAR 0 1
64027: NOT
64028: PUSH
64029: LD_VAR 0 2
64033: NOT
64034: OR
64035: PUSH
64036: LD_VAR 0 4
64040: NOT
64041: OR
64042: IFFALSE 64046
// exit ;
64044: GO 64238
// while 1 do
64046: LD_INT 1
64048: IFFALSE 64238
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64050: LD_ADDR_VAR 0 9
64054: PUSH
64055: LD_VAR 0 1
64059: PPUSH
64060: LD_INT 1
64062: PPUSH
64063: CALL_OW 287
64067: PUSH
64068: LD_INT 10
64070: MUL
64071: ST_TO_ADDR
// r := rate / 10 ;
64072: LD_ADDR_VAR 0 7
64076: PUSH
64077: LD_VAR 0 2
64081: PUSH
64082: LD_INT 10
64084: DIVREAL
64085: ST_TO_ADDR
// time := 1 1$00 ;
64086: LD_ADDR_VAR 0 8
64090: PUSH
64091: LD_INT 2100
64093: ST_TO_ADDR
// if amount < min then
64094: LD_VAR 0 9
64098: PUSH
64099: LD_VAR 0 3
64103: LESS
64104: IFFALSE 64122
// r := r * 2 else
64106: LD_ADDR_VAR 0 7
64110: PUSH
64111: LD_VAR 0 7
64115: PUSH
64116: LD_INT 2
64118: MUL
64119: ST_TO_ADDR
64120: GO 64148
// if amount > max then
64122: LD_VAR 0 9
64126: PUSH
64127: LD_VAR 0 4
64131: GREATER
64132: IFFALSE 64148
// r := r / 2 ;
64134: LD_ADDR_VAR 0 7
64138: PUSH
64139: LD_VAR 0 7
64143: PUSH
64144: LD_INT 2
64146: DIVREAL
64147: ST_TO_ADDR
// time := time / r ;
64148: LD_ADDR_VAR 0 8
64152: PUSH
64153: LD_VAR 0 8
64157: PUSH
64158: LD_VAR 0 7
64162: DIVREAL
64163: ST_TO_ADDR
// if time < 0 then
64164: LD_VAR 0 8
64168: PUSH
64169: LD_INT 0
64171: LESS
64172: IFFALSE 64189
// time := time * - 1 ;
64174: LD_ADDR_VAR 0 8
64178: PUSH
64179: LD_VAR 0 8
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: MUL
64188: ST_TO_ADDR
// wait ( time ) ;
64189: LD_VAR 0 8
64193: PPUSH
64194: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64198: LD_INT 35
64200: PPUSH
64201: LD_INT 875
64203: PPUSH
64204: CALL_OW 12
64208: PPUSH
64209: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64213: LD_INT 1
64215: PPUSH
64216: LD_INT 5
64218: PPUSH
64219: CALL_OW 12
64223: PPUSH
64224: LD_VAR 0 1
64228: PPUSH
64229: LD_INT 1
64231: PPUSH
64232: CALL_OW 55
// end ;
64236: GO 64046
// end ;
64238: LD_VAR 0 5
64242: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64243: LD_INT 0
64245: PPUSH
64246: PPUSH
64247: PPUSH
64248: PPUSH
64249: PPUSH
64250: PPUSH
64251: PPUSH
64252: PPUSH
// if not turrets or not factories then
64253: LD_VAR 0 1
64257: NOT
64258: PUSH
64259: LD_VAR 0 2
64263: NOT
64264: OR
64265: IFFALSE 64269
// exit ;
64267: GO 64576
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64269: LD_ADDR_VAR 0 10
64273: PUSH
64274: LD_INT 5
64276: PUSH
64277: LD_INT 6
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: LD_INT 4
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 3
64296: PUSH
64297: LD_INT 5
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 24
64311: PUSH
64312: LD_INT 25
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 23
64321: PUSH
64322: LD_INT 27
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 42
64335: PUSH
64336: LD_INT 43
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 44
64345: PUSH
64346: LD_INT 46
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 45
64355: PUSH
64356: LD_INT 47
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: LIST
64372: ST_TO_ADDR
// result := [ ] ;
64373: LD_ADDR_VAR 0 3
64377: PUSH
64378: EMPTY
64379: ST_TO_ADDR
// for i in turrets do
64380: LD_ADDR_VAR 0 4
64384: PUSH
64385: LD_VAR 0 1
64389: PUSH
64390: FOR_IN
64391: IFFALSE 64574
// begin nat := GetNation ( i ) ;
64393: LD_ADDR_VAR 0 7
64397: PUSH
64398: LD_VAR 0 4
64402: PPUSH
64403: CALL_OW 248
64407: ST_TO_ADDR
// weapon := 0 ;
64408: LD_ADDR_VAR 0 8
64412: PUSH
64413: LD_INT 0
64415: ST_TO_ADDR
// if not nat then
64416: LD_VAR 0 7
64420: NOT
64421: IFFALSE 64425
// continue ;
64423: GO 64390
// for j in list [ nat ] do
64425: LD_ADDR_VAR 0 5
64429: PUSH
64430: LD_VAR 0 10
64434: PUSH
64435: LD_VAR 0 7
64439: ARRAY
64440: PUSH
64441: FOR_IN
64442: IFFALSE 64483
// if GetBWeapon ( i ) = j [ 1 ] then
64444: LD_VAR 0 4
64448: PPUSH
64449: CALL_OW 269
64453: PUSH
64454: LD_VAR 0 5
64458: PUSH
64459: LD_INT 1
64461: ARRAY
64462: EQUAL
64463: IFFALSE 64481
// begin weapon := j [ 2 ] ;
64465: LD_ADDR_VAR 0 8
64469: PUSH
64470: LD_VAR 0 5
64474: PUSH
64475: LD_INT 2
64477: ARRAY
64478: ST_TO_ADDR
// break ;
64479: GO 64483
// end ;
64481: GO 64441
64483: POP
64484: POP
// if not weapon then
64485: LD_VAR 0 8
64489: NOT
64490: IFFALSE 64494
// continue ;
64492: GO 64390
// for k in factories do
64494: LD_ADDR_VAR 0 6
64498: PUSH
64499: LD_VAR 0 2
64503: PUSH
64504: FOR_IN
64505: IFFALSE 64570
// begin weapons := AvailableWeaponList ( k ) ;
64507: LD_ADDR_VAR 0 9
64511: PUSH
64512: LD_VAR 0 6
64516: PPUSH
64517: CALL_OW 478
64521: ST_TO_ADDR
// if not weapons then
64522: LD_VAR 0 9
64526: NOT
64527: IFFALSE 64531
// continue ;
64529: GO 64504
// if weapon in weapons then
64531: LD_VAR 0 8
64535: PUSH
64536: LD_VAR 0 9
64540: IN
64541: IFFALSE 64568
// begin result := [ i , weapon ] ;
64543: LD_ADDR_VAR 0 3
64547: PUSH
64548: LD_VAR 0 4
64552: PUSH
64553: LD_VAR 0 8
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: ST_TO_ADDR
// exit ;
64562: POP
64563: POP
64564: POP
64565: POP
64566: GO 64576
// end ; end ;
64568: GO 64504
64570: POP
64571: POP
// end ;
64572: GO 64390
64574: POP
64575: POP
// end ;
64576: LD_VAR 0 3
64580: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64581: LD_INT 0
64583: PPUSH
// if not side or side > 8 then
64584: LD_VAR 0 3
64588: NOT
64589: PUSH
64590: LD_VAR 0 3
64594: PUSH
64595: LD_INT 8
64597: GREATER
64598: OR
64599: IFFALSE 64603
// exit ;
64601: GO 64662
// if not range then
64603: LD_VAR 0 4
64607: NOT
64608: IFFALSE 64619
// range := - 12 ;
64610: LD_ADDR_VAR 0 4
64614: PUSH
64615: LD_INT 12
64617: NEG
64618: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64619: LD_VAR 0 1
64623: PPUSH
64624: LD_VAR 0 2
64628: PPUSH
64629: LD_VAR 0 3
64633: PPUSH
64634: LD_VAR 0 4
64638: PPUSH
64639: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64643: LD_VAR 0 1
64647: PPUSH
64648: LD_VAR 0 2
64652: PPUSH
64653: LD_VAR 0 3
64657: PPUSH
64658: CALL_OW 331
// end ;
64662: LD_VAR 0 5
64666: RET
// export function Video ( mode ) ; begin
64667: LD_INT 0
64669: PPUSH
// ingame_video = mode ;
64670: LD_ADDR_OWVAR 52
64674: PUSH
64675: LD_VAR 0 1
64679: ST_TO_ADDR
// interface_hidden = mode ;
64680: LD_ADDR_OWVAR 54
64684: PUSH
64685: LD_VAR 0 1
64689: ST_TO_ADDR
// end ;
64690: LD_VAR 0 2
64694: RET
// export function Join ( array , element ) ; begin
64695: LD_INT 0
64697: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64698: LD_ADDR_VAR 0 3
64702: PUSH
64703: LD_VAR 0 1
64707: PPUSH
64708: LD_VAR 0 1
64712: PUSH
64713: LD_INT 1
64715: PLUS
64716: PPUSH
64717: LD_VAR 0 2
64721: PPUSH
64722: CALL_OW 1
64726: ST_TO_ADDR
// end ;
64727: LD_VAR 0 3
64731: RET
// export function JoinUnion ( array , element ) ; begin
64732: LD_INT 0
64734: PPUSH
// result := array union element ;
64735: LD_ADDR_VAR 0 3
64739: PUSH
64740: LD_VAR 0 1
64744: PUSH
64745: LD_VAR 0 2
64749: UNION
64750: ST_TO_ADDR
// end ;
64751: LD_VAR 0 3
64755: RET
// export function GetBehemoths ( side ) ; begin
64756: LD_INT 0
64758: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64759: LD_ADDR_VAR 0 2
64763: PUSH
64764: LD_INT 22
64766: PUSH
64767: LD_VAR 0 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 31
64778: PUSH
64779: LD_INT 25
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PPUSH
64790: CALL_OW 69
64794: ST_TO_ADDR
// end ;
64795: LD_VAR 0 2
64799: RET
// export function Shuffle ( array ) ; var i , index ; begin
64800: LD_INT 0
64802: PPUSH
64803: PPUSH
64804: PPUSH
// result := [ ] ;
64805: LD_ADDR_VAR 0 2
64809: PUSH
64810: EMPTY
64811: ST_TO_ADDR
// if not array then
64812: LD_VAR 0 1
64816: NOT
64817: IFFALSE 64821
// exit ;
64819: GO 64920
// Randomize ;
64821: CALL_OW 10
// for i = array downto 1 do
64825: LD_ADDR_VAR 0 3
64829: PUSH
64830: DOUBLE
64831: LD_VAR 0 1
64835: INC
64836: ST_TO_ADDR
64837: LD_INT 1
64839: PUSH
64840: FOR_DOWNTO
64841: IFFALSE 64918
// begin index := rand ( 1 , array ) ;
64843: LD_ADDR_VAR 0 4
64847: PUSH
64848: LD_INT 1
64850: PPUSH
64851: LD_VAR 0 1
64855: PPUSH
64856: CALL_OW 12
64860: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64861: LD_ADDR_VAR 0 2
64865: PUSH
64866: LD_VAR 0 2
64870: PPUSH
64871: LD_VAR 0 2
64875: PUSH
64876: LD_INT 1
64878: PLUS
64879: PPUSH
64880: LD_VAR 0 1
64884: PUSH
64885: LD_VAR 0 4
64889: ARRAY
64890: PPUSH
64891: CALL_OW 2
64895: ST_TO_ADDR
// array := Delete ( array , index ) ;
64896: LD_ADDR_VAR 0 1
64900: PUSH
64901: LD_VAR 0 1
64905: PPUSH
64906: LD_VAR 0 4
64910: PPUSH
64911: CALL_OW 3
64915: ST_TO_ADDR
// end ;
64916: GO 64840
64918: POP
64919: POP
// end ;
64920: LD_VAR 0 2
64924: RET
// export function GetBaseMaterials ( base ) ; begin
64925: LD_INT 0
64927: PPUSH
// result := [ 0 , 0 , 0 ] ;
64928: LD_ADDR_VAR 0 2
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: ST_TO_ADDR
// if not base then
64947: LD_VAR 0 1
64951: NOT
64952: IFFALSE 64956
// exit ;
64954: GO 65005
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64956: LD_ADDR_VAR 0 2
64960: PUSH
64961: LD_VAR 0 1
64965: PPUSH
64966: LD_INT 1
64968: PPUSH
64969: CALL_OW 275
64973: PUSH
64974: LD_VAR 0 1
64978: PPUSH
64979: LD_INT 2
64981: PPUSH
64982: CALL_OW 275
64986: PUSH
64987: LD_VAR 0 1
64991: PPUSH
64992: LD_INT 3
64994: PPUSH
64995: CALL_OW 275
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: LIST
65004: ST_TO_ADDR
// end ;
65005: LD_VAR 0 2
65009: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65010: LD_INT 0
65012: PPUSH
65013: PPUSH
// result := array ;
65014: LD_ADDR_VAR 0 3
65018: PUSH
65019: LD_VAR 0 1
65023: ST_TO_ADDR
// if size > 0 then
65024: LD_VAR 0 2
65028: PUSH
65029: LD_INT 0
65031: GREATER
65032: IFFALSE 65078
// for i := array downto size do
65034: LD_ADDR_VAR 0 4
65038: PUSH
65039: DOUBLE
65040: LD_VAR 0 1
65044: INC
65045: ST_TO_ADDR
65046: LD_VAR 0 2
65050: PUSH
65051: FOR_DOWNTO
65052: IFFALSE 65076
// result := Delete ( result , result ) ;
65054: LD_ADDR_VAR 0 3
65058: PUSH
65059: LD_VAR 0 3
65063: PPUSH
65064: LD_VAR 0 3
65068: PPUSH
65069: CALL_OW 3
65073: ST_TO_ADDR
65074: GO 65051
65076: POP
65077: POP
// end ;
65078: LD_VAR 0 3
65082: RET
// export function ComExit ( unit ) ; var tmp ; begin
65083: LD_INT 0
65085: PPUSH
65086: PPUSH
// if not IsInUnit ( unit ) then
65087: LD_VAR 0 1
65091: PPUSH
65092: CALL_OW 310
65096: NOT
65097: IFFALSE 65101
// exit ;
65099: GO 65161
// tmp := IsInUnit ( unit ) ;
65101: LD_ADDR_VAR 0 3
65105: PUSH
65106: LD_VAR 0 1
65110: PPUSH
65111: CALL_OW 310
65115: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65116: LD_VAR 0 3
65120: PPUSH
65121: CALL_OW 247
65125: PUSH
65126: LD_INT 2
65128: EQUAL
65129: IFFALSE 65142
// ComExitVehicle ( unit ) else
65131: LD_VAR 0 1
65135: PPUSH
65136: CALL_OW 121
65140: GO 65151
// ComExitBuilding ( unit ) ;
65142: LD_VAR 0 1
65146: PPUSH
65147: CALL_OW 122
// result := tmp ;
65151: LD_ADDR_VAR 0 2
65155: PUSH
65156: LD_VAR 0 3
65160: ST_TO_ADDR
// end ;
65161: LD_VAR 0 2
65165: RET
// export function ResetHc ; begin
65166: LD_INT 0
65168: PPUSH
// InitHc ;
65169: CALL_OW 19
// hc_importance := 0 ;
65173: LD_ADDR_OWVAR 32
65177: PUSH
65178: LD_INT 0
65180: ST_TO_ADDR
// end ;
65181: LD_VAR 0 1
65185: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65186: LD_INT 0
65188: PPUSH
65189: PPUSH
65190: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65191: LD_ADDR_VAR 0 6
65195: PUSH
65196: LD_VAR 0 1
65200: PUSH
65201: LD_VAR 0 3
65205: PLUS
65206: PUSH
65207: LD_INT 2
65209: DIV
65210: ST_TO_ADDR
// if _x < 0 then
65211: LD_VAR 0 6
65215: PUSH
65216: LD_INT 0
65218: LESS
65219: IFFALSE 65236
// _x := _x * - 1 ;
65221: LD_ADDR_VAR 0 6
65225: PUSH
65226: LD_VAR 0 6
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: MUL
65235: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65236: LD_ADDR_VAR 0 7
65240: PUSH
65241: LD_VAR 0 2
65245: PUSH
65246: LD_VAR 0 4
65250: PLUS
65251: PUSH
65252: LD_INT 2
65254: DIV
65255: ST_TO_ADDR
// if _y < 0 then
65256: LD_VAR 0 7
65260: PUSH
65261: LD_INT 0
65263: LESS
65264: IFFALSE 65281
// _y := _y * - 1 ;
65266: LD_ADDR_VAR 0 7
65270: PUSH
65271: LD_VAR 0 7
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: MUL
65280: ST_TO_ADDR
// result := [ _x , _y ] ;
65281: LD_ADDR_VAR 0 5
65285: PUSH
65286: LD_VAR 0 6
65290: PUSH
65291: LD_VAR 0 7
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: ST_TO_ADDR
// end ;
65300: LD_VAR 0 5
65304: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65305: LD_INT 0
65307: PPUSH
65308: PPUSH
65309: PPUSH
65310: PPUSH
// task := GetTaskList ( unit ) ;
65311: LD_ADDR_VAR 0 7
65315: PUSH
65316: LD_VAR 0 1
65320: PPUSH
65321: CALL_OW 437
65325: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65326: LD_VAR 0 7
65330: NOT
65331: PUSH
65332: LD_VAR 0 1
65336: PPUSH
65337: LD_VAR 0 2
65341: PPUSH
65342: CALL_OW 308
65346: NOT
65347: AND
65348: IFFALSE 65352
// exit ;
65350: GO 65470
// if IsInArea ( unit , area ) then
65352: LD_VAR 0 1
65356: PPUSH
65357: LD_VAR 0 2
65361: PPUSH
65362: CALL_OW 308
65366: IFFALSE 65384
// begin ComMoveToArea ( unit , goAway ) ;
65368: LD_VAR 0 1
65372: PPUSH
65373: LD_VAR 0 3
65377: PPUSH
65378: CALL_OW 113
// exit ;
65382: GO 65470
// end ; if task [ 1 ] [ 1 ] <> M then
65384: LD_VAR 0 7
65388: PUSH
65389: LD_INT 1
65391: ARRAY
65392: PUSH
65393: LD_INT 1
65395: ARRAY
65396: PUSH
65397: LD_STRING M
65399: NONEQUAL
65400: IFFALSE 65404
// exit ;
65402: GO 65470
// x := task [ 1 ] [ 2 ] ;
65404: LD_ADDR_VAR 0 5
65408: PUSH
65409: LD_VAR 0 7
65413: PUSH
65414: LD_INT 1
65416: ARRAY
65417: PUSH
65418: LD_INT 2
65420: ARRAY
65421: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65422: LD_ADDR_VAR 0 6
65426: PUSH
65427: LD_VAR 0 7
65431: PUSH
65432: LD_INT 1
65434: ARRAY
65435: PUSH
65436: LD_INT 3
65438: ARRAY
65439: ST_TO_ADDR
// if InArea ( x , y , area ) then
65440: LD_VAR 0 5
65444: PPUSH
65445: LD_VAR 0 6
65449: PPUSH
65450: LD_VAR 0 2
65454: PPUSH
65455: CALL_OW 309
65459: IFFALSE 65470
// ComStop ( unit ) ;
65461: LD_VAR 0 1
65465: PPUSH
65466: CALL_OW 141
// end ;
65470: LD_VAR 0 4
65474: RET
// export function Abs ( value ) ; begin
65475: LD_INT 0
65477: PPUSH
// result := value ;
65478: LD_ADDR_VAR 0 2
65482: PUSH
65483: LD_VAR 0 1
65487: ST_TO_ADDR
// if value < 0 then
65488: LD_VAR 0 1
65492: PUSH
65493: LD_INT 0
65495: LESS
65496: IFFALSE 65513
// result := value * - 1 ;
65498: LD_ADDR_VAR 0 2
65502: PUSH
65503: LD_VAR 0 1
65507: PUSH
65508: LD_INT 1
65510: NEG
65511: MUL
65512: ST_TO_ADDR
// end ;
65513: LD_VAR 0 2
65517: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65518: LD_INT 0
65520: PPUSH
65521: PPUSH
65522: PPUSH
65523: PPUSH
65524: PPUSH
65525: PPUSH
65526: PPUSH
65527: PPUSH
// if not unit or not building then
65528: LD_VAR 0 1
65532: NOT
65533: PUSH
65534: LD_VAR 0 2
65538: NOT
65539: OR
65540: IFFALSE 65544
// exit ;
65542: GO 65770
// x := GetX ( building ) ;
65544: LD_ADDR_VAR 0 4
65548: PUSH
65549: LD_VAR 0 2
65553: PPUSH
65554: CALL_OW 250
65558: ST_TO_ADDR
// y := GetY ( building ) ;
65559: LD_ADDR_VAR 0 6
65563: PUSH
65564: LD_VAR 0 2
65568: PPUSH
65569: CALL_OW 251
65573: ST_TO_ADDR
// d := GetDir ( building ) ;
65574: LD_ADDR_VAR 0 8
65578: PUSH
65579: LD_VAR 0 2
65583: PPUSH
65584: CALL_OW 254
65588: ST_TO_ADDR
// r := 4 ;
65589: LD_ADDR_VAR 0 9
65593: PUSH
65594: LD_INT 4
65596: ST_TO_ADDR
// for i := 1 to 5 do
65597: LD_ADDR_VAR 0 10
65601: PUSH
65602: DOUBLE
65603: LD_INT 1
65605: DEC
65606: ST_TO_ADDR
65607: LD_INT 5
65609: PUSH
65610: FOR_TO
65611: IFFALSE 65768
// begin _x := ShiftX ( x , d , r + i ) ;
65613: LD_ADDR_VAR 0 5
65617: PUSH
65618: LD_VAR 0 4
65622: PPUSH
65623: LD_VAR 0 8
65627: PPUSH
65628: LD_VAR 0 9
65632: PUSH
65633: LD_VAR 0 10
65637: PLUS
65638: PPUSH
65639: CALL_OW 272
65643: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65644: LD_ADDR_VAR 0 7
65648: PUSH
65649: LD_VAR 0 6
65653: PPUSH
65654: LD_VAR 0 8
65658: PPUSH
65659: LD_VAR 0 9
65663: PUSH
65664: LD_VAR 0 10
65668: PLUS
65669: PPUSH
65670: CALL_OW 273
65674: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65675: LD_VAR 0 5
65679: PPUSH
65680: LD_VAR 0 7
65684: PPUSH
65685: CALL_OW 488
65689: PUSH
65690: LD_VAR 0 5
65694: PPUSH
65695: LD_VAR 0 7
65699: PPUSH
65700: CALL_OW 428
65704: PPUSH
65705: CALL_OW 247
65709: PUSH
65710: LD_INT 3
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: IN
65720: NOT
65721: AND
65722: IFFALSE 65766
// begin ComMoveXY ( unit , _x , _y ) ;
65724: LD_VAR 0 1
65728: PPUSH
65729: LD_VAR 0 5
65733: PPUSH
65734: LD_VAR 0 7
65738: PPUSH
65739: CALL_OW 111
// result := [ _x , _y ] ;
65743: LD_ADDR_VAR 0 3
65747: PUSH
65748: LD_VAR 0 5
65752: PUSH
65753: LD_VAR 0 7
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: ST_TO_ADDR
// exit ;
65762: POP
65763: POP
65764: GO 65770
// end ; end ;
65766: GO 65610
65768: POP
65769: POP
// end ;
65770: LD_VAR 0 3
65774: RET
