// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10637: LD_EXP 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: PUSH
10646: LD_INT 22
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: PUSH
10675: LD_INT 0
10677: EQUAL
10678: AND
10679: IFFALSE 10691
10681: GO 10683
10683: DISABLE
// YouLost ( peo-lose ) ;
10684: LD_STRING peo-lose
10686: PPUSH
10687: CALL_OW 104
10691: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10692: LD_EXP 1
10696: PUSH
10697: LD_INT 2
10699: EQUAL
10700: PUSH
10701: LD_INT 22
10703: PUSH
10704: LD_INT 3
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 21
10713: PUSH
10714: LD_INT 1
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PPUSH
10725: CALL_OW 69
10729: PUSH
10730: LD_INT 0
10732: EQUAL
10733: AND
10734: IFFALSE 10746
10736: GO 10738
10738: DISABLE
// YouLost ( peo-lose ) ;
10739: LD_STRING peo-lose
10741: PPUSH
10742: CALL_OW 104
10746: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
10747: LD_OWVAR 2
10751: PPUSH
10752: CALL 10510 0 1
10756: PUSH
10757: LD_EXP 5
10761: GREATEREQUAL
10762: IFFALSE 10848
10764: GO 10766
10766: DISABLE
10767: LD_INT 0
10769: PPUSH
// begin if GetSide ( jota_base ) = your_side then
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 255
10777: PUSH
10778: LD_OWVAR 2
10782: EQUAL
10783: IFFALSE 10826
// begin for i = 1 to 3 do
10785: LD_ADDR_VAR 0 1
10789: PUSH
10790: DOUBLE
10791: LD_INT 1
10793: DEC
10794: ST_TO_ADDR
10795: LD_INT 3
10797: PUSH
10798: FOR_TO
10799: IFFALSE 10813
// AddMedal ( med , 1 ) ;
10801: LD_STRING med
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 101
10811: GO 10798
10813: POP
10814: POP
// GiveMedals ( MAIN ) ;
10815: LD_STRING MAIN
10817: PPUSH
10818: CALL_OW 102
// YouWin ;
10822: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 255
10833: PUSH
10834: LD_OWVAR 2
10838: NONEQUAL
10839: IFFALSE 10848
// YouLost ( source ) ;
10841: LD_STRING source
10843: PPUSH
10844: CALL_OW 104
// end ; end_of_file
10848: PPOPN 1
10850: END
// every 2 2$05 + 0 0$11 do
10851: GO 10853
10853: DISABLE
// begin enable ;
10854: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10855: LD_INT 1
10857: PPUSH
10858: LD_INT 5
10860: PPUSH
10861: CALL_OW 12
10865: PPUSH
10866: LD_INT 7
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
10876: LD_INT 350
10878: PPUSH
10879: LD_INT 1295
10881: PPUSH
10882: CALL_OW 12
10886: PPUSH
10887: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
10891: LD_INT 1
10893: PPUSH
10894: LD_INT 5
10896: PPUSH
10897: CALL_OW 12
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 57
// end ;
10909: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
10910: LD_EXP 1
10914: PUSH
10915: LD_INT 2
10917: EQUAL
10918: PUSH
10919: LD_EXP 8
10923: PUSH
10924: LD_INT 0
10926: EQUAL
10927: AND
10928: IFFALSE 11018
10930: GO 10932
10932: DISABLE
// begin enable ;
10933: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10934: LD_INT 1
10936: PPUSH
10937: LD_INT 5
10939: PPUSH
10940: CALL_OW 12
10944: PPUSH
10945: LD_INT 7
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
10955: LD_INT 350
10957: PPUSH
10958: LD_INT 1750
10960: PPUSH
10961: CALL_OW 12
10965: PPUSH
10966: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
10970: LD_EXP 6
10974: PUSH
10975: LD_INT 73500
10977: PUSH
10978: LD_INT 63000
10980: PUSH
10981: LD_INT 52500
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_EXP 2
10993: ARRAY
10994: LESSEQUAL
10995: IFFALSE 11018
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
10997: LD_INT 1
10999: PPUSH
11000: LD_INT 5
11002: PPUSH
11003: CALL_OW 12
11007: PPUSH
11008: LD_INT 12
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 55
// end ; end_of_file
11018: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11019: LD_VAR 0 1
11023: PPUSH
11024: LD_VAR 0 2
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: CALL 27327 0 3
// end ;
11038: PPOPN 3
11040: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: CALL 27231 0 1
// if un = jota_base then
11050: LD_VAR 0 1
11054: PUSH
11055: LD_INT 1
11057: EQUAL
11058: IFFALSE 11067
// YouLost ( jota-lose ) ;
11060: LD_STRING jota-lose
11062: PPUSH
11063: CALL_OW 104
// if game_type = 2 and depot_captured = false then
11067: LD_EXP 1
11071: PUSH
11072: LD_INT 2
11074: EQUAL
11075: PUSH
11076: LD_EXP 8
11080: PUSH
11081: LD_INT 0
11083: EQUAL
11084: AND
11085: IFFALSE 11400
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL_OW 255
11096: PUSH
11097: LD_INT 1
11099: EQUAL
11100: PUSH
11101: LD_VAR 0 1
11105: PUSH
11106: LD_INT 11
11108: PPUSH
11109: LD_INT 21
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PPUSH
11119: CALL_OW 70
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 30
11129: PUSH
11130: LD_INT 6
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 30
11139: PUSH
11140: LD_INT 10
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 30
11149: PUSH
11150: LD_INT 7
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 30
11159: PUSH
11160: LD_INT 8
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: PPUSH
11186: CALL_OW 69
11190: DIFF
11191: IN
11192: AND
11193: IFFALSE 11279
// begin ai_build := ai_build ^ GetBType ( un ) ;
11195: LD_ADDR_EXP 10
11199: PUSH
11200: LD_EXP 10
11204: PUSH
11205: LD_VAR 0 1
11209: PPUSH
11210: CALL_OW 266
11214: ADD
11215: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
11216: LD_ADDR_EXP 10
11220: PUSH
11221: LD_EXP 10
11225: PUSH
11226: LD_VAR 0 1
11230: PPUSH
11231: CALL_OW 250
11235: ADD
11236: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
11237: LD_ADDR_EXP 10
11241: PUSH
11242: LD_EXP 10
11246: PUSH
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 251
11256: ADD
11257: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
11258: LD_ADDR_EXP 10
11262: PUSH
11263: LD_EXP 10
11267: PUSH
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL_OW 254
11277: ADD
11278: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL_OW 255
11288: PUSH
11289: LD_INT 1
11291: EQUAL
11292: PUSH
11293: LD_VAR 0 1
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PPUSH
11308: CALL_OW 69
11312: IN
11313: AND
11314: IFFALSE 11400
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
11316: LD_ADDR_EXP 11
11320: PUSH
11321: LD_EXP 11
11325: PUSH
11326: LD_VAR 0 1
11330: PPUSH
11331: CALL_OW 265
11335: ADD
11336: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
11337: LD_ADDR_EXP 11
11341: PUSH
11342: LD_EXP 11
11346: PUSH
11347: LD_VAR 0 1
11351: PPUSH
11352: CALL_OW 262
11356: ADD
11357: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
11358: LD_ADDR_EXP 11
11362: PUSH
11363: LD_EXP 11
11367: PUSH
11368: LD_VAR 0 1
11372: PPUSH
11373: CALL_OW 263
11377: ADD
11378: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
11379: LD_ADDR_EXP 11
11383: PUSH
11384: LD_EXP 11
11388: PUSH
11389: LD_VAR 0 1
11393: PPUSH
11394: CALL_OW 264
11398: ADD
11399: ST_TO_ADDR
// end ; end ; end ;
11400: PPOPN 1
11402: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11403: LD_VAR 0 1
11407: PPUSH
11408: LD_VAR 0 2
11412: PPUSH
11413: CALL 27351 0 2
// end ;
11417: PPOPN 2
11419: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL 27335 0 1
// end ; end_of_file end_of_file
11429: PPOPN 1
11431: END
// every 0 0$1 do
11432: GO 11434
11434: DISABLE
// begin enable ;
11435: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11436: LD_STRING updateTimer(
11438: PUSH
11439: LD_OWVAR 1
11443: STR
11444: PUSH
11445: LD_STRING );
11447: STR
11448: PPUSH
11449: CALL_OW 559
// end ;
11453: END
// export function SOS_MapStart ( ) ; begin
11454: LD_INT 0
11456: PPUSH
// if streamModeActive then
11457: LD_EXP 22
11461: IFFALSE 11470
// DefineStreamItems ( true ) ;
11463: LD_INT 1
11465: PPUSH
11466: CALL 13274 0 1
// UpdateLuaVariables ( ) ;
11470: CALL 11487 0 0
// UpdateFactoryWaypoints ( ) ;
11474: CALL 26135 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11478: CALL 26392 0 0
// end ;
11482: LD_VAR 0 1
11486: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
11487: LD_INT 0
11489: PPUSH
// if not globalGameSaveCounter then
11490: LD_EXP 21
11494: NOT
11495: IFFALSE 11506
// ToLua ( setGameSaveCounter(0) ) else
11497: LD_STRING setGameSaveCounter(0)
11499: PPUSH
11500: CALL_OW 559
11504: GO 11538
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11506: LD_ADDR_EXP 21
11510: PUSH
11511: LD_EXP 21
11515: PPUSH
11516: CALL 70349 0 1
11520: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11521: LD_STRING setGameSaveCounter(
11523: PUSH
11524: LD_EXP 21
11528: STR
11529: PUSH
11530: LD_STRING )
11532: STR
11533: PPUSH
11534: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11538: LD_STRING setGameDifficulty(
11540: PUSH
11541: LD_OWVAR 67
11545: STR
11546: PUSH
11547: LD_STRING )
11549: STR
11550: PPUSH
11551: CALL_OW 559
// end ;
11555: LD_VAR 0 1
11559: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11560: LD_INT 0
11562: PPUSH
// if p2 = stream_mode then
11563: LD_VAR 0 2
11567: PUSH
11568: LD_INT 100
11570: EQUAL
11571: IFFALSE 12574
// begin if not StreamModeActive then
11573: LD_EXP 22
11577: NOT
11578: IFFALSE 11588
// StreamModeActive := true ;
11580: LD_ADDR_EXP 22
11584: PUSH
11585: LD_INT 1
11587: ST_TO_ADDR
// if p3 = 0 then
11588: LD_VAR 0 3
11592: PUSH
11593: LD_INT 0
11595: EQUAL
11596: IFFALSE 11602
// InitStreamMode ;
11598: CALL 12810 0 0
// if p3 = 1 then
11602: LD_VAR 0 3
11606: PUSH
11607: LD_INT 1
11609: EQUAL
11610: IFFALSE 11620
// sRocket := true ;
11612: LD_ADDR_EXP 27
11616: PUSH
11617: LD_INT 1
11619: ST_TO_ADDR
// if p3 = 2 then
11620: LD_VAR 0 3
11624: PUSH
11625: LD_INT 2
11627: EQUAL
11628: IFFALSE 11638
// sSpeed := true ;
11630: LD_ADDR_EXP 26
11634: PUSH
11635: LD_INT 1
11637: ST_TO_ADDR
// if p3 = 3 then
11638: LD_VAR 0 3
11642: PUSH
11643: LD_INT 3
11645: EQUAL
11646: IFFALSE 11656
// sEngine := true ;
11648: LD_ADDR_EXP 28
11652: PUSH
11653: LD_INT 1
11655: ST_TO_ADDR
// if p3 = 4 then
11656: LD_VAR 0 3
11660: PUSH
11661: LD_INT 4
11663: EQUAL
11664: IFFALSE 11674
// sSpec := true ;
11666: LD_ADDR_EXP 25
11670: PUSH
11671: LD_INT 1
11673: ST_TO_ADDR
// if p3 = 5 then
11674: LD_VAR 0 3
11678: PUSH
11679: LD_INT 5
11681: EQUAL
11682: IFFALSE 11692
// sLevel := true ;
11684: LD_ADDR_EXP 29
11688: PUSH
11689: LD_INT 1
11691: ST_TO_ADDR
// if p3 = 6 then
11692: LD_VAR 0 3
11696: PUSH
11697: LD_INT 6
11699: EQUAL
11700: IFFALSE 11710
// sArmoury := true ;
11702: LD_ADDR_EXP 30
11706: PUSH
11707: LD_INT 1
11709: ST_TO_ADDR
// if p3 = 7 then
11710: LD_VAR 0 3
11714: PUSH
11715: LD_INT 7
11717: EQUAL
11718: IFFALSE 11728
// sRadar := true ;
11720: LD_ADDR_EXP 31
11724: PUSH
11725: LD_INT 1
11727: ST_TO_ADDR
// if p3 = 8 then
11728: LD_VAR 0 3
11732: PUSH
11733: LD_INT 8
11735: EQUAL
11736: IFFALSE 11746
// sBunker := true ;
11738: LD_ADDR_EXP 32
11742: PUSH
11743: LD_INT 1
11745: ST_TO_ADDR
// if p3 = 9 then
11746: LD_VAR 0 3
11750: PUSH
11751: LD_INT 9
11753: EQUAL
11754: IFFALSE 11764
// sHack := true ;
11756: LD_ADDR_EXP 33
11760: PUSH
11761: LD_INT 1
11763: ST_TO_ADDR
// if p3 = 10 then
11764: LD_VAR 0 3
11768: PUSH
11769: LD_INT 10
11771: EQUAL
11772: IFFALSE 11782
// sFire := true ;
11774: LD_ADDR_EXP 34
11778: PUSH
11779: LD_INT 1
11781: ST_TO_ADDR
// if p3 = 11 then
11782: LD_VAR 0 3
11786: PUSH
11787: LD_INT 11
11789: EQUAL
11790: IFFALSE 11800
// sRefresh := true ;
11792: LD_ADDR_EXP 35
11796: PUSH
11797: LD_INT 1
11799: ST_TO_ADDR
// if p3 = 12 then
11800: LD_VAR 0 3
11804: PUSH
11805: LD_INT 12
11807: EQUAL
11808: IFFALSE 11818
// sExp := true ;
11810: LD_ADDR_EXP 36
11814: PUSH
11815: LD_INT 1
11817: ST_TO_ADDR
// if p3 = 13 then
11818: LD_VAR 0 3
11822: PUSH
11823: LD_INT 13
11825: EQUAL
11826: IFFALSE 11836
// sDepot := true ;
11828: LD_ADDR_EXP 37
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// if p3 = 14 then
11836: LD_VAR 0 3
11840: PUSH
11841: LD_INT 14
11843: EQUAL
11844: IFFALSE 11854
// sFlag := true ;
11846: LD_ADDR_EXP 38
11850: PUSH
11851: LD_INT 1
11853: ST_TO_ADDR
// if p3 = 15 then
11854: LD_VAR 0 3
11858: PUSH
11859: LD_INT 15
11861: EQUAL
11862: IFFALSE 11872
// sKamikadze := true ;
11864: LD_ADDR_EXP 46
11868: PUSH
11869: LD_INT 1
11871: ST_TO_ADDR
// if p3 = 16 then
11872: LD_VAR 0 3
11876: PUSH
11877: LD_INT 16
11879: EQUAL
11880: IFFALSE 11890
// sTroll := true ;
11882: LD_ADDR_EXP 47
11886: PUSH
11887: LD_INT 1
11889: ST_TO_ADDR
// if p3 = 17 then
11890: LD_VAR 0 3
11894: PUSH
11895: LD_INT 17
11897: EQUAL
11898: IFFALSE 11908
// sSlow := true ;
11900: LD_ADDR_EXP 48
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// if p3 = 18 then
11908: LD_VAR 0 3
11912: PUSH
11913: LD_INT 18
11915: EQUAL
11916: IFFALSE 11926
// sLack := true ;
11918: LD_ADDR_EXP 49
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// if p3 = 19 then
11926: LD_VAR 0 3
11930: PUSH
11931: LD_INT 19
11933: EQUAL
11934: IFFALSE 11944
// sTank := true ;
11936: LD_ADDR_EXP 51
11940: PUSH
11941: LD_INT 1
11943: ST_TO_ADDR
// if p3 = 20 then
11944: LD_VAR 0 3
11948: PUSH
11949: LD_INT 20
11951: EQUAL
11952: IFFALSE 11962
// sRemote := true ;
11954: LD_ADDR_EXP 52
11958: PUSH
11959: LD_INT 1
11961: ST_TO_ADDR
// if p3 = 21 then
11962: LD_VAR 0 3
11966: PUSH
11967: LD_INT 21
11969: EQUAL
11970: IFFALSE 11980
// sPowell := true ;
11972: LD_ADDR_EXP 53
11976: PUSH
11977: LD_INT 1
11979: ST_TO_ADDR
// if p3 = 22 then
11980: LD_VAR 0 3
11984: PUSH
11985: LD_INT 22
11987: EQUAL
11988: IFFALSE 11998
// sTeleport := true ;
11990: LD_ADDR_EXP 56
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// if p3 = 23 then
11998: LD_VAR 0 3
12002: PUSH
12003: LD_INT 23
12005: EQUAL
12006: IFFALSE 12016
// sOilTower := true ;
12008: LD_ADDR_EXP 58
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// if p3 = 24 then
12016: LD_VAR 0 3
12020: PUSH
12021: LD_INT 24
12023: EQUAL
12024: IFFALSE 12034
// sShovel := true ;
12026: LD_ADDR_EXP 59
12030: PUSH
12031: LD_INT 1
12033: ST_TO_ADDR
// if p3 = 25 then
12034: LD_VAR 0 3
12038: PUSH
12039: LD_INT 25
12041: EQUAL
12042: IFFALSE 12052
// sSheik := true ;
12044: LD_ADDR_EXP 60
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// if p3 = 26 then
12052: LD_VAR 0 3
12056: PUSH
12057: LD_INT 26
12059: EQUAL
12060: IFFALSE 12070
// sEarthquake := true ;
12062: LD_ADDR_EXP 62
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// if p3 = 27 then
12070: LD_VAR 0 3
12074: PUSH
12075: LD_INT 27
12077: EQUAL
12078: IFFALSE 12088
// sAI := true ;
12080: LD_ADDR_EXP 63
12084: PUSH
12085: LD_INT 1
12087: ST_TO_ADDR
// if p3 = 28 then
12088: LD_VAR 0 3
12092: PUSH
12093: LD_INT 28
12095: EQUAL
12096: IFFALSE 12106
// sCargo := true ;
12098: LD_ADDR_EXP 66
12102: PUSH
12103: LD_INT 1
12105: ST_TO_ADDR
// if p3 = 29 then
12106: LD_VAR 0 3
12110: PUSH
12111: LD_INT 29
12113: EQUAL
12114: IFFALSE 12124
// sDLaser := true ;
12116: LD_ADDR_EXP 67
12120: PUSH
12121: LD_INT 1
12123: ST_TO_ADDR
// if p3 = 30 then
12124: LD_VAR 0 3
12128: PUSH
12129: LD_INT 30
12131: EQUAL
12132: IFFALSE 12142
// sExchange := true ;
12134: LD_ADDR_EXP 68
12138: PUSH
12139: LD_INT 1
12141: ST_TO_ADDR
// if p3 = 31 then
12142: LD_VAR 0 3
12146: PUSH
12147: LD_INT 31
12149: EQUAL
12150: IFFALSE 12160
// sFac := true ;
12152: LD_ADDR_EXP 69
12156: PUSH
12157: LD_INT 1
12159: ST_TO_ADDR
// if p3 = 32 then
12160: LD_VAR 0 3
12164: PUSH
12165: LD_INT 32
12167: EQUAL
12168: IFFALSE 12178
// sPower := true ;
12170: LD_ADDR_EXP 70
12174: PUSH
12175: LD_INT 1
12177: ST_TO_ADDR
// if p3 = 33 then
12178: LD_VAR 0 3
12182: PUSH
12183: LD_INT 33
12185: EQUAL
12186: IFFALSE 12196
// sRandom := true ;
12188: LD_ADDR_EXP 71
12192: PUSH
12193: LD_INT 1
12195: ST_TO_ADDR
// if p3 = 34 then
12196: LD_VAR 0 3
12200: PUSH
12201: LD_INT 34
12203: EQUAL
12204: IFFALSE 12214
// sShield := true ;
12206: LD_ADDR_EXP 72
12210: PUSH
12211: LD_INT 1
12213: ST_TO_ADDR
// if p3 = 35 then
12214: LD_VAR 0 3
12218: PUSH
12219: LD_INT 35
12221: EQUAL
12222: IFFALSE 12232
// sTime := true ;
12224: LD_ADDR_EXP 73
12228: PUSH
12229: LD_INT 1
12231: ST_TO_ADDR
// if p3 = 36 then
12232: LD_VAR 0 3
12236: PUSH
12237: LD_INT 36
12239: EQUAL
12240: IFFALSE 12250
// sTools := true ;
12242: LD_ADDR_EXP 74
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// if p3 = 101 then
12250: LD_VAR 0 3
12254: PUSH
12255: LD_INT 101
12257: EQUAL
12258: IFFALSE 12268
// sSold := true ;
12260: LD_ADDR_EXP 39
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// if p3 = 102 then
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 102
12275: EQUAL
12276: IFFALSE 12286
// sDiff := true ;
12278: LD_ADDR_EXP 40
12282: PUSH
12283: LD_INT 1
12285: ST_TO_ADDR
// if p3 = 103 then
12286: LD_VAR 0 3
12290: PUSH
12291: LD_INT 103
12293: EQUAL
12294: IFFALSE 12304
// sFog := true ;
12296: LD_ADDR_EXP 43
12300: PUSH
12301: LD_INT 1
12303: ST_TO_ADDR
// if p3 = 104 then
12304: LD_VAR 0 3
12308: PUSH
12309: LD_INT 104
12311: EQUAL
12312: IFFALSE 12322
// sReset := true ;
12314: LD_ADDR_EXP 44
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// if p3 = 105 then
12322: LD_VAR 0 3
12326: PUSH
12327: LD_INT 105
12329: EQUAL
12330: IFFALSE 12340
// sSun := true ;
12332: LD_ADDR_EXP 45
12336: PUSH
12337: LD_INT 1
12339: ST_TO_ADDR
// if p3 = 106 then
12340: LD_VAR 0 3
12344: PUSH
12345: LD_INT 106
12347: EQUAL
12348: IFFALSE 12358
// sTiger := true ;
12350: LD_ADDR_EXP 41
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// if p3 = 107 then
12358: LD_VAR 0 3
12362: PUSH
12363: LD_INT 107
12365: EQUAL
12366: IFFALSE 12376
// sBomb := true ;
12368: LD_ADDR_EXP 42
12372: PUSH
12373: LD_INT 1
12375: ST_TO_ADDR
// if p3 = 108 then
12376: LD_VAR 0 3
12380: PUSH
12381: LD_INT 108
12383: EQUAL
12384: IFFALSE 12394
// sWound := true ;
12386: LD_ADDR_EXP 50
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// if p3 = 109 then
12394: LD_VAR 0 3
12398: PUSH
12399: LD_INT 109
12401: EQUAL
12402: IFFALSE 12412
// sBetray := true ;
12404: LD_ADDR_EXP 54
12408: PUSH
12409: LD_INT 1
12411: ST_TO_ADDR
// if p3 = 110 then
12412: LD_VAR 0 3
12416: PUSH
12417: LD_INT 110
12419: EQUAL
12420: IFFALSE 12430
// sContamin := true ;
12422: LD_ADDR_EXP 55
12426: PUSH
12427: LD_INT 1
12429: ST_TO_ADDR
// if p3 = 111 then
12430: LD_VAR 0 3
12434: PUSH
12435: LD_INT 111
12437: EQUAL
12438: IFFALSE 12448
// sOil := true ;
12440: LD_ADDR_EXP 57
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// if p3 = 112 then
12448: LD_VAR 0 3
12452: PUSH
12453: LD_INT 112
12455: EQUAL
12456: IFFALSE 12466
// sStu := true ;
12458: LD_ADDR_EXP 61
12462: PUSH
12463: LD_INT 1
12465: ST_TO_ADDR
// if p3 = 113 then
12466: LD_VAR 0 3
12470: PUSH
12471: LD_INT 113
12473: EQUAL
12474: IFFALSE 12484
// sBazooka := true ;
12476: LD_ADDR_EXP 64
12480: PUSH
12481: LD_INT 1
12483: ST_TO_ADDR
// if p3 = 114 then
12484: LD_VAR 0 3
12488: PUSH
12489: LD_INT 114
12491: EQUAL
12492: IFFALSE 12502
// sMortar := true ;
12494: LD_ADDR_EXP 65
12498: PUSH
12499: LD_INT 1
12501: ST_TO_ADDR
// if p3 = 115 then
12502: LD_VAR 0 3
12506: PUSH
12507: LD_INT 115
12509: EQUAL
12510: IFFALSE 12520
// sRanger := true ;
12512: LD_ADDR_EXP 75
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// if p3 = 116 then
12520: LD_VAR 0 3
12524: PUSH
12525: LD_INT 116
12527: EQUAL
12528: IFFALSE 12538
// sComputer := true ;
12530: LD_ADDR_EXP 76
12534: PUSH
12535: LD_INT 1
12537: ST_TO_ADDR
// if p3 = 117 then
12538: LD_VAR 0 3
12542: PUSH
12543: LD_INT 117
12545: EQUAL
12546: IFFALSE 12556
// s30 := true ;
12548: LD_ADDR_EXP 77
12552: PUSH
12553: LD_INT 1
12555: ST_TO_ADDR
// if p3 = 118 then
12556: LD_VAR 0 3
12560: PUSH
12561: LD_INT 118
12563: EQUAL
12564: IFFALSE 12574
// s60 := true ;
12566: LD_ADDR_EXP 78
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// end ; if p2 = hack_mode then
12574: LD_VAR 0 2
12578: PUSH
12579: LD_INT 101
12581: EQUAL
12582: IFFALSE 12710
// begin case p3 of 1 :
12584: LD_VAR 0 3
12588: PUSH
12589: LD_INT 1
12591: DOUBLE
12592: EQUAL
12593: IFTRUE 12597
12595: GO 12604
12597: POP
// hHackUnlimitedResources ; 2 :
12598: CALL 24881 0 0
12602: GO 12710
12604: LD_INT 2
12606: DOUBLE
12607: EQUAL
12608: IFTRUE 12612
12610: GO 12619
12612: POP
// hHackSetLevel10 ; 3 :
12613: CALL 25014 0 0
12617: GO 12710
12619: LD_INT 3
12621: DOUBLE
12622: EQUAL
12623: IFTRUE 12627
12625: GO 12634
12627: POP
// hHackSetLevel10YourUnits ; 4 :
12628: CALL 25099 0 0
12632: GO 12710
12634: LD_INT 4
12636: DOUBLE
12637: EQUAL
12638: IFTRUE 12642
12640: GO 12649
12642: POP
// hHackInvincible ; 5 :
12643: CALL 25547 0 0
12647: GO 12710
12649: LD_INT 5
12651: DOUBLE
12652: EQUAL
12653: IFTRUE 12657
12655: GO 12664
12657: POP
// hHackInvisible ; 6 :
12658: CALL 25658 0 0
12662: GO 12710
12664: LD_INT 6
12666: DOUBLE
12667: EQUAL
12668: IFTRUE 12672
12670: GO 12679
12672: POP
// hHackChangeYourSide ; 7 :
12673: CALL 25715 0 0
12677: GO 12710
12679: LD_INT 7
12681: DOUBLE
12682: EQUAL
12683: IFTRUE 12687
12685: GO 12694
12687: POP
// hHackChangeUnitSide ; 8 :
12688: CALL 25757 0 0
12692: GO 12710
12694: LD_INT 8
12696: DOUBLE
12697: EQUAL
12698: IFTRUE 12702
12700: GO 12709
12702: POP
// hHackFog ; end ;
12703: CALL 25858 0 0
12707: GO 12710
12709: POP
// end ; if p2 = game_save_mode then
12710: LD_VAR 0 2
12714: PUSH
12715: LD_INT 102
12717: EQUAL
12718: IFFALSE 12783
// begin if p3 = 1 then
12720: LD_VAR 0 3
12724: PUSH
12725: LD_INT 1
12727: EQUAL
12728: IFFALSE 12740
// globalGameSaveCounter := p4 ;
12730: LD_ADDR_EXP 21
12734: PUSH
12735: LD_VAR 0 4
12739: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12740: LD_VAR 0 3
12744: PUSH
12745: LD_INT 2
12747: EQUAL
12748: PUSH
12749: LD_EXP 21
12753: AND
12754: IFFALSE 12773
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12756: LD_STRING setGameSaveCounter(
12758: PUSH
12759: LD_EXP 21
12763: STR
12764: PUSH
12765: LD_STRING )
12767: STR
12768: PPUSH
12769: CALL_OW 559
// display_strings := globalGameSaveCounter ;
12773: LD_ADDR_OWVAR 47
12777: PUSH
12778: LD_EXP 21
12782: ST_TO_ADDR
// end ; end ;
12783: LD_VAR 0 7
12787: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12788: GO 12790
12790: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12791: LD_STRING initStreamRollete();
12793: PPUSH
12794: CALL_OW 559
// InitStreamMode ;
12798: CALL 12810 0 0
// DefineStreamItems ( false ) ;
12802: LD_INT 0
12804: PPUSH
12805: CALL 13274 0 1
// end ;
12809: END
// function InitStreamMode ; begin
12810: LD_INT 0
12812: PPUSH
// streamModeActive := false ;
12813: LD_ADDR_EXP 22
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// normalCounter := 36 ;
12821: LD_ADDR_EXP 23
12825: PUSH
12826: LD_INT 36
12828: ST_TO_ADDR
// hardcoreCounter := 18 ;
12829: LD_ADDR_EXP 24
12833: PUSH
12834: LD_INT 18
12836: ST_TO_ADDR
// sRocket := false ;
12837: LD_ADDR_EXP 27
12841: PUSH
12842: LD_INT 0
12844: ST_TO_ADDR
// sSpeed := false ;
12845: LD_ADDR_EXP 26
12849: PUSH
12850: LD_INT 0
12852: ST_TO_ADDR
// sEngine := false ;
12853: LD_ADDR_EXP 28
12857: PUSH
12858: LD_INT 0
12860: ST_TO_ADDR
// sSpec := false ;
12861: LD_ADDR_EXP 25
12865: PUSH
12866: LD_INT 0
12868: ST_TO_ADDR
// sLevel := false ;
12869: LD_ADDR_EXP 29
12873: PUSH
12874: LD_INT 0
12876: ST_TO_ADDR
// sArmoury := false ;
12877: LD_ADDR_EXP 30
12881: PUSH
12882: LD_INT 0
12884: ST_TO_ADDR
// sRadar := false ;
12885: LD_ADDR_EXP 31
12889: PUSH
12890: LD_INT 0
12892: ST_TO_ADDR
// sBunker := false ;
12893: LD_ADDR_EXP 32
12897: PUSH
12898: LD_INT 0
12900: ST_TO_ADDR
// sHack := false ;
12901: LD_ADDR_EXP 33
12905: PUSH
12906: LD_INT 0
12908: ST_TO_ADDR
// sFire := false ;
12909: LD_ADDR_EXP 34
12913: PUSH
12914: LD_INT 0
12916: ST_TO_ADDR
// sRefresh := false ;
12917: LD_ADDR_EXP 35
12921: PUSH
12922: LD_INT 0
12924: ST_TO_ADDR
// sExp := false ;
12925: LD_ADDR_EXP 36
12929: PUSH
12930: LD_INT 0
12932: ST_TO_ADDR
// sDepot := false ;
12933: LD_ADDR_EXP 37
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// sFlag := false ;
12941: LD_ADDR_EXP 38
12945: PUSH
12946: LD_INT 0
12948: ST_TO_ADDR
// sKamikadze := false ;
12949: LD_ADDR_EXP 46
12953: PUSH
12954: LD_INT 0
12956: ST_TO_ADDR
// sTroll := false ;
12957: LD_ADDR_EXP 47
12961: PUSH
12962: LD_INT 0
12964: ST_TO_ADDR
// sSlow := false ;
12965: LD_ADDR_EXP 48
12969: PUSH
12970: LD_INT 0
12972: ST_TO_ADDR
// sLack := false ;
12973: LD_ADDR_EXP 49
12977: PUSH
12978: LD_INT 0
12980: ST_TO_ADDR
// sTank := false ;
12981: LD_ADDR_EXP 51
12985: PUSH
12986: LD_INT 0
12988: ST_TO_ADDR
// sRemote := false ;
12989: LD_ADDR_EXP 52
12993: PUSH
12994: LD_INT 0
12996: ST_TO_ADDR
// sPowell := false ;
12997: LD_ADDR_EXP 53
13001: PUSH
13002: LD_INT 0
13004: ST_TO_ADDR
// sTeleport := false ;
13005: LD_ADDR_EXP 56
13009: PUSH
13010: LD_INT 0
13012: ST_TO_ADDR
// sOilTower := false ;
13013: LD_ADDR_EXP 58
13017: PUSH
13018: LD_INT 0
13020: ST_TO_ADDR
// sShovel := false ;
13021: LD_ADDR_EXP 59
13025: PUSH
13026: LD_INT 0
13028: ST_TO_ADDR
// sSheik := false ;
13029: LD_ADDR_EXP 60
13033: PUSH
13034: LD_INT 0
13036: ST_TO_ADDR
// sEarthquake := false ;
13037: LD_ADDR_EXP 62
13041: PUSH
13042: LD_INT 0
13044: ST_TO_ADDR
// sAI := false ;
13045: LD_ADDR_EXP 63
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// sCargo := false ;
13053: LD_ADDR_EXP 66
13057: PUSH
13058: LD_INT 0
13060: ST_TO_ADDR
// sDLaser := false ;
13061: LD_ADDR_EXP 67
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// sExchange := false ;
13069: LD_ADDR_EXP 68
13073: PUSH
13074: LD_INT 0
13076: ST_TO_ADDR
// sFac := false ;
13077: LD_ADDR_EXP 69
13081: PUSH
13082: LD_INT 0
13084: ST_TO_ADDR
// sPower := false ;
13085: LD_ADDR_EXP 70
13089: PUSH
13090: LD_INT 0
13092: ST_TO_ADDR
// sRandom := false ;
13093: LD_ADDR_EXP 71
13097: PUSH
13098: LD_INT 0
13100: ST_TO_ADDR
// sShield := false ;
13101: LD_ADDR_EXP 72
13105: PUSH
13106: LD_INT 0
13108: ST_TO_ADDR
// sTime := false ;
13109: LD_ADDR_EXP 73
13113: PUSH
13114: LD_INT 0
13116: ST_TO_ADDR
// sTools := false ;
13117: LD_ADDR_EXP 74
13121: PUSH
13122: LD_INT 0
13124: ST_TO_ADDR
// sSold := false ;
13125: LD_ADDR_EXP 39
13129: PUSH
13130: LD_INT 0
13132: ST_TO_ADDR
// sDiff := false ;
13133: LD_ADDR_EXP 40
13137: PUSH
13138: LD_INT 0
13140: ST_TO_ADDR
// sFog := false ;
13141: LD_ADDR_EXP 43
13145: PUSH
13146: LD_INT 0
13148: ST_TO_ADDR
// sReset := false ;
13149: LD_ADDR_EXP 44
13153: PUSH
13154: LD_INT 0
13156: ST_TO_ADDR
// sSun := false ;
13157: LD_ADDR_EXP 45
13161: PUSH
13162: LD_INT 0
13164: ST_TO_ADDR
// sTiger := false ;
13165: LD_ADDR_EXP 41
13169: PUSH
13170: LD_INT 0
13172: ST_TO_ADDR
// sBomb := false ;
13173: LD_ADDR_EXP 42
13177: PUSH
13178: LD_INT 0
13180: ST_TO_ADDR
// sWound := false ;
13181: LD_ADDR_EXP 50
13185: PUSH
13186: LD_INT 0
13188: ST_TO_ADDR
// sBetray := false ;
13189: LD_ADDR_EXP 54
13193: PUSH
13194: LD_INT 0
13196: ST_TO_ADDR
// sContamin := false ;
13197: LD_ADDR_EXP 55
13201: PUSH
13202: LD_INT 0
13204: ST_TO_ADDR
// sOil := false ;
13205: LD_ADDR_EXP 57
13209: PUSH
13210: LD_INT 0
13212: ST_TO_ADDR
// sStu := false ;
13213: LD_ADDR_EXP 61
13217: PUSH
13218: LD_INT 0
13220: ST_TO_ADDR
// sBazooka := false ;
13221: LD_ADDR_EXP 64
13225: PUSH
13226: LD_INT 0
13228: ST_TO_ADDR
// sMortar := false ;
13229: LD_ADDR_EXP 65
13233: PUSH
13234: LD_INT 0
13236: ST_TO_ADDR
// sRanger := false ;
13237: LD_ADDR_EXP 75
13241: PUSH
13242: LD_INT 0
13244: ST_TO_ADDR
// sComputer := false ;
13245: LD_ADDR_EXP 76
13249: PUSH
13250: LD_INT 0
13252: ST_TO_ADDR
// s30 := false ;
13253: LD_ADDR_EXP 77
13257: PUSH
13258: LD_INT 0
13260: ST_TO_ADDR
// s60 := false ;
13261: LD_ADDR_EXP 78
13265: PUSH
13266: LD_INT 0
13268: ST_TO_ADDR
// end ;
13269: LD_VAR 0 1
13273: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13274: LD_INT 0
13276: PPUSH
13277: PPUSH
13278: PPUSH
13279: PPUSH
13280: PPUSH
13281: PPUSH
13282: PPUSH
// result := [ ] ;
13283: LD_ADDR_VAR 0 2
13287: PUSH
13288: EMPTY
13289: ST_TO_ADDR
// if campaign_id = 1 then
13290: LD_OWVAR 69
13294: PUSH
13295: LD_INT 1
13297: EQUAL
13298: IFFALSE 16464
// begin case mission_number of 1 :
13300: LD_OWVAR 70
13304: PUSH
13305: LD_INT 1
13307: DOUBLE
13308: EQUAL
13309: IFTRUE 13313
13311: GO 13389
13313: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13314: LD_ADDR_VAR 0 2
13318: PUSH
13319: LD_INT 2
13321: PUSH
13322: LD_INT 4
13324: PUSH
13325: LD_INT 11
13327: PUSH
13328: LD_INT 12
13330: PUSH
13331: LD_INT 15
13333: PUSH
13334: LD_INT 16
13336: PUSH
13337: LD_INT 22
13339: PUSH
13340: LD_INT 23
13342: PUSH
13343: LD_INT 26
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 101
13359: PUSH
13360: LD_INT 102
13362: PUSH
13363: LD_INT 106
13365: PUSH
13366: LD_INT 116
13368: PUSH
13369: LD_INT 117
13371: PUSH
13372: LD_INT 118
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: ST_TO_ADDR
13387: GO 16462
13389: LD_INT 2
13391: DOUBLE
13392: EQUAL
13393: IFTRUE 13397
13395: GO 13481
13397: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13398: LD_ADDR_VAR 0 2
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: LD_INT 4
13408: PUSH
13409: LD_INT 11
13411: PUSH
13412: LD_INT 12
13414: PUSH
13415: LD_INT 15
13417: PUSH
13418: LD_INT 16
13420: PUSH
13421: LD_INT 22
13423: PUSH
13424: LD_INT 23
13426: PUSH
13427: LD_INT 26
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 101
13443: PUSH
13444: LD_INT 102
13446: PUSH
13447: LD_INT 105
13449: PUSH
13450: LD_INT 106
13452: PUSH
13453: LD_INT 108
13455: PUSH
13456: LD_INT 116
13458: PUSH
13459: LD_INT 117
13461: PUSH
13462: LD_INT 118
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: ST_TO_ADDR
13479: GO 16462
13481: LD_INT 3
13483: DOUBLE
13484: EQUAL
13485: IFTRUE 13489
13487: GO 13577
13489: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13490: LD_ADDR_VAR 0 2
13494: PUSH
13495: LD_INT 2
13497: PUSH
13498: LD_INT 4
13500: PUSH
13501: LD_INT 5
13503: PUSH
13504: LD_INT 11
13506: PUSH
13507: LD_INT 12
13509: PUSH
13510: LD_INT 15
13512: PUSH
13513: LD_INT 16
13515: PUSH
13516: LD_INT 22
13518: PUSH
13519: LD_INT 26
13521: PUSH
13522: LD_INT 36
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 101
13539: PUSH
13540: LD_INT 102
13542: PUSH
13543: LD_INT 105
13545: PUSH
13546: LD_INT 106
13548: PUSH
13549: LD_INT 108
13551: PUSH
13552: LD_INT 116
13554: PUSH
13555: LD_INT 117
13557: PUSH
13558: LD_INT 118
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: ST_TO_ADDR
13575: GO 16462
13577: LD_INT 4
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13681
13585: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13586: LD_ADDR_VAR 0 2
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 4
13596: PUSH
13597: LD_INT 5
13599: PUSH
13600: LD_INT 8
13602: PUSH
13603: LD_INT 11
13605: PUSH
13606: LD_INT 12
13608: PUSH
13609: LD_INT 15
13611: PUSH
13612: LD_INT 16
13614: PUSH
13615: LD_INT 22
13617: PUSH
13618: LD_INT 23
13620: PUSH
13621: LD_INT 26
13623: PUSH
13624: LD_INT 36
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 101
13643: PUSH
13644: LD_INT 102
13646: PUSH
13647: LD_INT 105
13649: PUSH
13650: LD_INT 106
13652: PUSH
13653: LD_INT 108
13655: PUSH
13656: LD_INT 116
13658: PUSH
13659: LD_INT 117
13661: PUSH
13662: LD_INT 118
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: ST_TO_ADDR
13679: GO 16462
13681: LD_INT 5
13683: DOUBLE
13684: EQUAL
13685: IFTRUE 13689
13687: GO 13801
13689: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13690: LD_ADDR_VAR 0 2
13694: PUSH
13695: LD_INT 2
13697: PUSH
13698: LD_INT 4
13700: PUSH
13701: LD_INT 5
13703: PUSH
13704: LD_INT 6
13706: PUSH
13707: LD_INT 8
13709: PUSH
13710: LD_INT 11
13712: PUSH
13713: LD_INT 12
13715: PUSH
13716: LD_INT 15
13718: PUSH
13719: LD_INT 16
13721: PUSH
13722: LD_INT 22
13724: PUSH
13725: LD_INT 23
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 26
13733: PUSH
13734: LD_INT 36
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 101
13755: PUSH
13756: LD_INT 102
13758: PUSH
13759: LD_INT 105
13761: PUSH
13762: LD_INT 106
13764: PUSH
13765: LD_INT 108
13767: PUSH
13768: LD_INT 109
13770: PUSH
13771: LD_INT 112
13773: PUSH
13774: LD_INT 116
13776: PUSH
13777: LD_INT 117
13779: PUSH
13780: LD_INT 118
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: ST_TO_ADDR
13799: GO 16462
13801: LD_INT 6
13803: DOUBLE
13804: EQUAL
13805: IFTRUE 13809
13807: GO 13941
13809: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13810: LD_ADDR_VAR 0 2
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: LD_INT 4
13820: PUSH
13821: LD_INT 5
13823: PUSH
13824: LD_INT 6
13826: PUSH
13827: LD_INT 8
13829: PUSH
13830: LD_INT 11
13832: PUSH
13833: LD_INT 12
13835: PUSH
13836: LD_INT 15
13838: PUSH
13839: LD_INT 16
13841: PUSH
13842: LD_INT 20
13844: PUSH
13845: LD_INT 21
13847: PUSH
13848: LD_INT 22
13850: PUSH
13851: LD_INT 23
13853: PUSH
13854: LD_INT 25
13856: PUSH
13857: LD_INT 26
13859: PUSH
13860: LD_INT 30
13862: PUSH
13863: LD_INT 31
13865: PUSH
13866: LD_INT 32
13868: PUSH
13869: LD_INT 36
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 101
13895: PUSH
13896: LD_INT 102
13898: PUSH
13899: LD_INT 105
13901: PUSH
13902: LD_INT 106
13904: PUSH
13905: LD_INT 108
13907: PUSH
13908: LD_INT 109
13910: PUSH
13911: LD_INT 112
13913: PUSH
13914: LD_INT 116
13916: PUSH
13917: LD_INT 117
13919: PUSH
13920: LD_INT 118
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: ST_TO_ADDR
13939: GO 16462
13941: LD_INT 7
13943: DOUBLE
13944: EQUAL
13945: IFTRUE 13949
13947: GO 14061
13949: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13950: LD_ADDR_VAR 0 2
13954: PUSH
13955: LD_INT 2
13957: PUSH
13958: LD_INT 4
13960: PUSH
13961: LD_INT 5
13963: PUSH
13964: LD_INT 7
13966: PUSH
13967: LD_INT 11
13969: PUSH
13970: LD_INT 12
13972: PUSH
13973: LD_INT 15
13975: PUSH
13976: LD_INT 16
13978: PUSH
13979: LD_INT 20
13981: PUSH
13982: LD_INT 21
13984: PUSH
13985: LD_INT 22
13987: PUSH
13988: LD_INT 23
13990: PUSH
13991: LD_INT 25
13993: PUSH
13994: LD_INT 26
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 101
14015: PUSH
14016: LD_INT 102
14018: PUSH
14019: LD_INT 103
14021: PUSH
14022: LD_INT 105
14024: PUSH
14025: LD_INT 106
14027: PUSH
14028: LD_INT 108
14030: PUSH
14031: LD_INT 112
14033: PUSH
14034: LD_INT 116
14036: PUSH
14037: LD_INT 117
14039: PUSH
14040: LD_INT 118
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: ST_TO_ADDR
14059: GO 16462
14061: LD_INT 8
14063: DOUBLE
14064: EQUAL
14065: IFTRUE 14069
14067: GO 14209
14069: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14070: LD_ADDR_VAR 0 2
14074: PUSH
14075: LD_INT 2
14077: PUSH
14078: LD_INT 4
14080: PUSH
14081: LD_INT 5
14083: PUSH
14084: LD_INT 6
14086: PUSH
14087: LD_INT 7
14089: PUSH
14090: LD_INT 8
14092: PUSH
14093: LD_INT 11
14095: PUSH
14096: LD_INT 12
14098: PUSH
14099: LD_INT 15
14101: PUSH
14102: LD_INT 16
14104: PUSH
14105: LD_INT 20
14107: PUSH
14108: LD_INT 21
14110: PUSH
14111: LD_INT 22
14113: PUSH
14114: LD_INT 23
14116: PUSH
14117: LD_INT 25
14119: PUSH
14120: LD_INT 26
14122: PUSH
14123: LD_INT 30
14125: PUSH
14126: LD_INT 31
14128: PUSH
14129: LD_INT 32
14131: PUSH
14132: LD_INT 36
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 101
14159: PUSH
14160: LD_INT 102
14162: PUSH
14163: LD_INT 103
14165: PUSH
14166: LD_INT 105
14168: PUSH
14169: LD_INT 106
14171: PUSH
14172: LD_INT 108
14174: PUSH
14175: LD_INT 109
14177: PUSH
14178: LD_INT 112
14180: PUSH
14181: LD_INT 116
14183: PUSH
14184: LD_INT 117
14186: PUSH
14187: LD_INT 118
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: ST_TO_ADDR
14207: GO 16462
14209: LD_INT 9
14211: DOUBLE
14212: EQUAL
14213: IFTRUE 14217
14215: GO 14365
14217: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14218: LD_ADDR_VAR 0 2
14222: PUSH
14223: LD_INT 2
14225: PUSH
14226: LD_INT 4
14228: PUSH
14229: LD_INT 5
14231: PUSH
14232: LD_INT 6
14234: PUSH
14235: LD_INT 7
14237: PUSH
14238: LD_INT 8
14240: PUSH
14241: LD_INT 11
14243: PUSH
14244: LD_INT 12
14246: PUSH
14247: LD_INT 15
14249: PUSH
14250: LD_INT 16
14252: PUSH
14253: LD_INT 20
14255: PUSH
14256: LD_INT 21
14258: PUSH
14259: LD_INT 22
14261: PUSH
14262: LD_INT 23
14264: PUSH
14265: LD_INT 25
14267: PUSH
14268: LD_INT 26
14270: PUSH
14271: LD_INT 28
14273: PUSH
14274: LD_INT 30
14276: PUSH
14277: LD_INT 31
14279: PUSH
14280: LD_INT 32
14282: PUSH
14283: LD_INT 36
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 101
14311: PUSH
14312: LD_INT 102
14314: PUSH
14315: LD_INT 103
14317: PUSH
14318: LD_INT 105
14320: PUSH
14321: LD_INT 106
14323: PUSH
14324: LD_INT 108
14326: PUSH
14327: LD_INT 109
14329: PUSH
14330: LD_INT 112
14332: PUSH
14333: LD_INT 114
14335: PUSH
14336: LD_INT 116
14338: PUSH
14339: LD_INT 117
14341: PUSH
14342: LD_INT 118
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: ST_TO_ADDR
14363: GO 16462
14365: LD_INT 10
14367: DOUBLE
14368: EQUAL
14369: IFTRUE 14373
14371: GO 14569
14373: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14374: LD_ADDR_VAR 0 2
14378: PUSH
14379: LD_INT 2
14381: PUSH
14382: LD_INT 4
14384: PUSH
14385: LD_INT 5
14387: PUSH
14388: LD_INT 6
14390: PUSH
14391: LD_INT 7
14393: PUSH
14394: LD_INT 8
14396: PUSH
14397: LD_INT 9
14399: PUSH
14400: LD_INT 10
14402: PUSH
14403: LD_INT 11
14405: PUSH
14406: LD_INT 12
14408: PUSH
14409: LD_INT 13
14411: PUSH
14412: LD_INT 14
14414: PUSH
14415: LD_INT 15
14417: PUSH
14418: LD_INT 16
14420: PUSH
14421: LD_INT 17
14423: PUSH
14424: LD_INT 18
14426: PUSH
14427: LD_INT 19
14429: PUSH
14430: LD_INT 20
14432: PUSH
14433: LD_INT 21
14435: PUSH
14436: LD_INT 22
14438: PUSH
14439: LD_INT 23
14441: PUSH
14442: LD_INT 24
14444: PUSH
14445: LD_INT 25
14447: PUSH
14448: LD_INT 26
14450: PUSH
14451: LD_INT 28
14453: PUSH
14454: LD_INT 30
14456: PUSH
14457: LD_INT 31
14459: PUSH
14460: LD_INT 32
14462: PUSH
14463: LD_INT 36
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 101
14499: PUSH
14500: LD_INT 102
14502: PUSH
14503: LD_INT 103
14505: PUSH
14506: LD_INT 104
14508: PUSH
14509: LD_INT 105
14511: PUSH
14512: LD_INT 106
14514: PUSH
14515: LD_INT 107
14517: PUSH
14518: LD_INT 108
14520: PUSH
14521: LD_INT 109
14523: PUSH
14524: LD_INT 110
14526: PUSH
14527: LD_INT 111
14529: PUSH
14530: LD_INT 112
14532: PUSH
14533: LD_INT 114
14535: PUSH
14536: LD_INT 116
14538: PUSH
14539: LD_INT 117
14541: PUSH
14542: LD_INT 118
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: ST_TO_ADDR
14567: GO 16462
14569: LD_INT 11
14571: DOUBLE
14572: EQUAL
14573: IFTRUE 14577
14575: GO 14781
14577: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14578: LD_ADDR_VAR 0 2
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 3
14588: PUSH
14589: LD_INT 4
14591: PUSH
14592: LD_INT 5
14594: PUSH
14595: LD_INT 6
14597: PUSH
14598: LD_INT 7
14600: PUSH
14601: LD_INT 8
14603: PUSH
14604: LD_INT 9
14606: PUSH
14607: LD_INT 10
14609: PUSH
14610: LD_INT 11
14612: PUSH
14613: LD_INT 12
14615: PUSH
14616: LD_INT 13
14618: PUSH
14619: LD_INT 14
14621: PUSH
14622: LD_INT 15
14624: PUSH
14625: LD_INT 16
14627: PUSH
14628: LD_INT 17
14630: PUSH
14631: LD_INT 18
14633: PUSH
14634: LD_INT 19
14636: PUSH
14637: LD_INT 20
14639: PUSH
14640: LD_INT 21
14642: PUSH
14643: LD_INT 22
14645: PUSH
14646: LD_INT 23
14648: PUSH
14649: LD_INT 24
14651: PUSH
14652: LD_INT 25
14654: PUSH
14655: LD_INT 26
14657: PUSH
14658: LD_INT 28
14660: PUSH
14661: LD_INT 30
14663: PUSH
14664: LD_INT 31
14666: PUSH
14667: LD_INT 32
14669: PUSH
14670: LD_INT 34
14672: PUSH
14673: LD_INT 36
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 101
14711: PUSH
14712: LD_INT 102
14714: PUSH
14715: LD_INT 103
14717: PUSH
14718: LD_INT 104
14720: PUSH
14721: LD_INT 105
14723: PUSH
14724: LD_INT 106
14726: PUSH
14727: LD_INT 107
14729: PUSH
14730: LD_INT 108
14732: PUSH
14733: LD_INT 109
14735: PUSH
14736: LD_INT 110
14738: PUSH
14739: LD_INT 111
14741: PUSH
14742: LD_INT 112
14744: PUSH
14745: LD_INT 114
14747: PUSH
14748: LD_INT 116
14750: PUSH
14751: LD_INT 117
14753: PUSH
14754: LD_INT 118
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: ST_TO_ADDR
14779: GO 16462
14781: LD_INT 12
14783: DOUBLE
14784: EQUAL
14785: IFTRUE 14789
14787: GO 15009
14789: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14790: LD_ADDR_VAR 0 2
14794: PUSH
14795: LD_INT 1
14797: PUSH
14798: LD_INT 2
14800: PUSH
14801: LD_INT 3
14803: PUSH
14804: LD_INT 4
14806: PUSH
14807: LD_INT 5
14809: PUSH
14810: LD_INT 6
14812: PUSH
14813: LD_INT 7
14815: PUSH
14816: LD_INT 8
14818: PUSH
14819: LD_INT 9
14821: PUSH
14822: LD_INT 10
14824: PUSH
14825: LD_INT 11
14827: PUSH
14828: LD_INT 12
14830: PUSH
14831: LD_INT 13
14833: PUSH
14834: LD_INT 14
14836: PUSH
14837: LD_INT 15
14839: PUSH
14840: LD_INT 16
14842: PUSH
14843: LD_INT 17
14845: PUSH
14846: LD_INT 18
14848: PUSH
14849: LD_INT 19
14851: PUSH
14852: LD_INT 20
14854: PUSH
14855: LD_INT 21
14857: PUSH
14858: LD_INT 22
14860: PUSH
14861: LD_INT 23
14863: PUSH
14864: LD_INT 24
14866: PUSH
14867: LD_INT 25
14869: PUSH
14870: LD_INT 26
14872: PUSH
14873: LD_INT 27
14875: PUSH
14876: LD_INT 28
14878: PUSH
14879: LD_INT 30
14881: PUSH
14882: LD_INT 31
14884: PUSH
14885: LD_INT 32
14887: PUSH
14888: LD_INT 33
14890: PUSH
14891: LD_INT 34
14893: PUSH
14894: LD_INT 36
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 101
14935: PUSH
14936: LD_INT 102
14938: PUSH
14939: LD_INT 103
14941: PUSH
14942: LD_INT 104
14944: PUSH
14945: LD_INT 105
14947: PUSH
14948: LD_INT 106
14950: PUSH
14951: LD_INT 107
14953: PUSH
14954: LD_INT 108
14956: PUSH
14957: LD_INT 109
14959: PUSH
14960: LD_INT 110
14962: PUSH
14963: LD_INT 111
14965: PUSH
14966: LD_INT 112
14968: PUSH
14969: LD_INT 113
14971: PUSH
14972: LD_INT 114
14974: PUSH
14975: LD_INT 116
14977: PUSH
14978: LD_INT 117
14980: PUSH
14981: LD_INT 118
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: ST_TO_ADDR
15007: GO 16462
15009: LD_INT 13
15011: DOUBLE
15012: EQUAL
15013: IFTRUE 15017
15015: GO 15225
15017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15018: LD_ADDR_VAR 0 2
15022: PUSH
15023: LD_INT 1
15025: PUSH
15026: LD_INT 2
15028: PUSH
15029: LD_INT 3
15031: PUSH
15032: LD_INT 4
15034: PUSH
15035: LD_INT 5
15037: PUSH
15038: LD_INT 8
15040: PUSH
15041: LD_INT 9
15043: PUSH
15044: LD_INT 10
15046: PUSH
15047: LD_INT 11
15049: PUSH
15050: LD_INT 12
15052: PUSH
15053: LD_INT 14
15055: PUSH
15056: LD_INT 15
15058: PUSH
15059: LD_INT 16
15061: PUSH
15062: LD_INT 17
15064: PUSH
15065: LD_INT 18
15067: PUSH
15068: LD_INT 19
15070: PUSH
15071: LD_INT 20
15073: PUSH
15074: LD_INT 21
15076: PUSH
15077: LD_INT 22
15079: PUSH
15080: LD_INT 23
15082: PUSH
15083: LD_INT 24
15085: PUSH
15086: LD_INT 25
15088: PUSH
15089: LD_INT 26
15091: PUSH
15092: LD_INT 27
15094: PUSH
15095: LD_INT 28
15097: PUSH
15098: LD_INT 30
15100: PUSH
15101: LD_INT 31
15103: PUSH
15104: LD_INT 32
15106: PUSH
15107: LD_INT 33
15109: PUSH
15110: LD_INT 34
15112: PUSH
15113: LD_INT 36
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 101
15151: PUSH
15152: LD_INT 102
15154: PUSH
15155: LD_INT 103
15157: PUSH
15158: LD_INT 104
15160: PUSH
15161: LD_INT 105
15163: PUSH
15164: LD_INT 106
15166: PUSH
15167: LD_INT 107
15169: PUSH
15170: LD_INT 108
15172: PUSH
15173: LD_INT 109
15175: PUSH
15176: LD_INT 110
15178: PUSH
15179: LD_INT 111
15181: PUSH
15182: LD_INT 112
15184: PUSH
15185: LD_INT 113
15187: PUSH
15188: LD_INT 114
15190: PUSH
15191: LD_INT 116
15193: PUSH
15194: LD_INT 117
15196: PUSH
15197: LD_INT 118
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: ST_TO_ADDR
15223: GO 16462
15225: LD_INT 14
15227: DOUBLE
15228: EQUAL
15229: IFTRUE 15233
15231: GO 15457
15233: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15234: LD_ADDR_VAR 0 2
15238: PUSH
15239: LD_INT 1
15241: PUSH
15242: LD_INT 2
15244: PUSH
15245: LD_INT 3
15247: PUSH
15248: LD_INT 4
15250: PUSH
15251: LD_INT 5
15253: PUSH
15254: LD_INT 6
15256: PUSH
15257: LD_INT 7
15259: PUSH
15260: LD_INT 8
15262: PUSH
15263: LD_INT 9
15265: PUSH
15266: LD_INT 10
15268: PUSH
15269: LD_INT 11
15271: PUSH
15272: LD_INT 12
15274: PUSH
15275: LD_INT 13
15277: PUSH
15278: LD_INT 14
15280: PUSH
15281: LD_INT 15
15283: PUSH
15284: LD_INT 16
15286: PUSH
15287: LD_INT 17
15289: PUSH
15290: LD_INT 18
15292: PUSH
15293: LD_INT 19
15295: PUSH
15296: LD_INT 20
15298: PUSH
15299: LD_INT 21
15301: PUSH
15302: LD_INT 22
15304: PUSH
15305: LD_INT 23
15307: PUSH
15308: LD_INT 24
15310: PUSH
15311: LD_INT 25
15313: PUSH
15314: LD_INT 26
15316: PUSH
15317: LD_INT 27
15319: PUSH
15320: LD_INT 28
15322: PUSH
15323: LD_INT 29
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 31
15331: PUSH
15332: LD_INT 32
15334: PUSH
15335: LD_INT 33
15337: PUSH
15338: LD_INT 34
15340: PUSH
15341: LD_INT 36
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 101
15383: PUSH
15384: LD_INT 102
15386: PUSH
15387: LD_INT 103
15389: PUSH
15390: LD_INT 104
15392: PUSH
15393: LD_INT 105
15395: PUSH
15396: LD_INT 106
15398: PUSH
15399: LD_INT 107
15401: PUSH
15402: LD_INT 108
15404: PUSH
15405: LD_INT 109
15407: PUSH
15408: LD_INT 110
15410: PUSH
15411: LD_INT 111
15413: PUSH
15414: LD_INT 112
15416: PUSH
15417: LD_INT 113
15419: PUSH
15420: LD_INT 114
15422: PUSH
15423: LD_INT 116
15425: PUSH
15426: LD_INT 117
15428: PUSH
15429: LD_INT 118
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: ST_TO_ADDR
15455: GO 16462
15457: LD_INT 15
15459: DOUBLE
15460: EQUAL
15461: IFTRUE 15465
15463: GO 15689
15465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: LD_INT 1
15473: PUSH
15474: LD_INT 2
15476: PUSH
15477: LD_INT 3
15479: PUSH
15480: LD_INT 4
15482: PUSH
15483: LD_INT 5
15485: PUSH
15486: LD_INT 6
15488: PUSH
15489: LD_INT 7
15491: PUSH
15492: LD_INT 8
15494: PUSH
15495: LD_INT 9
15497: PUSH
15498: LD_INT 10
15500: PUSH
15501: LD_INT 11
15503: PUSH
15504: LD_INT 12
15506: PUSH
15507: LD_INT 13
15509: PUSH
15510: LD_INT 14
15512: PUSH
15513: LD_INT 15
15515: PUSH
15516: LD_INT 16
15518: PUSH
15519: LD_INT 17
15521: PUSH
15522: LD_INT 18
15524: PUSH
15525: LD_INT 19
15527: PUSH
15528: LD_INT 20
15530: PUSH
15531: LD_INT 21
15533: PUSH
15534: LD_INT 22
15536: PUSH
15537: LD_INT 23
15539: PUSH
15540: LD_INT 24
15542: PUSH
15543: LD_INT 25
15545: PUSH
15546: LD_INT 26
15548: PUSH
15549: LD_INT 27
15551: PUSH
15552: LD_INT 28
15554: PUSH
15555: LD_INT 29
15557: PUSH
15558: LD_INT 30
15560: PUSH
15561: LD_INT 31
15563: PUSH
15564: LD_INT 32
15566: PUSH
15567: LD_INT 33
15569: PUSH
15570: LD_INT 34
15572: PUSH
15573: LD_INT 36
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 101
15615: PUSH
15616: LD_INT 102
15618: PUSH
15619: LD_INT 103
15621: PUSH
15622: LD_INT 104
15624: PUSH
15625: LD_INT 105
15627: PUSH
15628: LD_INT 106
15630: PUSH
15631: LD_INT 107
15633: PUSH
15634: LD_INT 108
15636: PUSH
15637: LD_INT 109
15639: PUSH
15640: LD_INT 110
15642: PUSH
15643: LD_INT 111
15645: PUSH
15646: LD_INT 112
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: LD_INT 114
15654: PUSH
15655: LD_INT 116
15657: PUSH
15658: LD_INT 117
15660: PUSH
15661: LD_INT 118
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: ST_TO_ADDR
15687: GO 16462
15689: LD_INT 16
15691: DOUBLE
15692: EQUAL
15693: IFTRUE 15697
15695: GO 15833
15697: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_INT 2
15705: PUSH
15706: LD_INT 4
15708: PUSH
15709: LD_INT 5
15711: PUSH
15712: LD_INT 7
15714: PUSH
15715: LD_INT 11
15717: PUSH
15718: LD_INT 12
15720: PUSH
15721: LD_INT 15
15723: PUSH
15724: LD_INT 16
15726: PUSH
15727: LD_INT 20
15729: PUSH
15730: LD_INT 21
15732: PUSH
15733: LD_INT 22
15735: PUSH
15736: LD_INT 23
15738: PUSH
15739: LD_INT 25
15741: PUSH
15742: LD_INT 26
15744: PUSH
15745: LD_INT 30
15747: PUSH
15748: LD_INT 31
15750: PUSH
15751: LD_INT 32
15753: PUSH
15754: LD_INT 33
15756: PUSH
15757: LD_INT 34
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 101
15783: PUSH
15784: LD_INT 102
15786: PUSH
15787: LD_INT 103
15789: PUSH
15790: LD_INT 106
15792: PUSH
15793: LD_INT 108
15795: PUSH
15796: LD_INT 112
15798: PUSH
15799: LD_INT 113
15801: PUSH
15802: LD_INT 114
15804: PUSH
15805: LD_INT 116
15807: PUSH
15808: LD_INT 117
15810: PUSH
15811: LD_INT 118
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: ST_TO_ADDR
15831: GO 16462
15833: LD_INT 17
15835: DOUBLE
15836: EQUAL
15837: IFTRUE 15841
15839: GO 16065
15841: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15842: LD_ADDR_VAR 0 2
15846: PUSH
15847: LD_INT 1
15849: PUSH
15850: LD_INT 2
15852: PUSH
15853: LD_INT 3
15855: PUSH
15856: LD_INT 4
15858: PUSH
15859: LD_INT 5
15861: PUSH
15862: LD_INT 6
15864: PUSH
15865: LD_INT 7
15867: PUSH
15868: LD_INT 8
15870: PUSH
15871: LD_INT 9
15873: PUSH
15874: LD_INT 10
15876: PUSH
15877: LD_INT 11
15879: PUSH
15880: LD_INT 12
15882: PUSH
15883: LD_INT 13
15885: PUSH
15886: LD_INT 14
15888: PUSH
15889: LD_INT 15
15891: PUSH
15892: LD_INT 16
15894: PUSH
15895: LD_INT 17
15897: PUSH
15898: LD_INT 18
15900: PUSH
15901: LD_INT 19
15903: PUSH
15904: LD_INT 20
15906: PUSH
15907: LD_INT 21
15909: PUSH
15910: LD_INT 22
15912: PUSH
15913: LD_INT 23
15915: PUSH
15916: LD_INT 24
15918: PUSH
15919: LD_INT 25
15921: PUSH
15922: LD_INT 26
15924: PUSH
15925: LD_INT 27
15927: PUSH
15928: LD_INT 28
15930: PUSH
15931: LD_INT 29
15933: PUSH
15934: LD_INT 30
15936: PUSH
15937: LD_INT 31
15939: PUSH
15940: LD_INT 32
15942: PUSH
15943: LD_INT 33
15945: PUSH
15946: LD_INT 34
15948: PUSH
15949: LD_INT 36
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 101
15991: PUSH
15992: LD_INT 102
15994: PUSH
15995: LD_INT 103
15997: PUSH
15998: LD_INT 104
16000: PUSH
16001: LD_INT 105
16003: PUSH
16004: LD_INT 106
16006: PUSH
16007: LD_INT 107
16009: PUSH
16010: LD_INT 108
16012: PUSH
16013: LD_INT 109
16015: PUSH
16016: LD_INT 110
16018: PUSH
16019: LD_INT 111
16021: PUSH
16022: LD_INT 112
16024: PUSH
16025: LD_INT 113
16027: PUSH
16028: LD_INT 114
16030: PUSH
16031: LD_INT 116
16033: PUSH
16034: LD_INT 117
16036: PUSH
16037: LD_INT 118
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: ST_TO_ADDR
16063: GO 16462
16065: LD_INT 18
16067: DOUBLE
16068: EQUAL
16069: IFTRUE 16073
16071: GO 16221
16073: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16074: LD_ADDR_VAR 0 2
16078: PUSH
16079: LD_INT 2
16081: PUSH
16082: LD_INT 4
16084: PUSH
16085: LD_INT 5
16087: PUSH
16088: LD_INT 7
16090: PUSH
16091: LD_INT 11
16093: PUSH
16094: LD_INT 12
16096: PUSH
16097: LD_INT 15
16099: PUSH
16100: LD_INT 16
16102: PUSH
16103: LD_INT 20
16105: PUSH
16106: LD_INT 21
16108: PUSH
16109: LD_INT 22
16111: PUSH
16112: LD_INT 23
16114: PUSH
16115: LD_INT 25
16117: PUSH
16118: LD_INT 26
16120: PUSH
16121: LD_INT 30
16123: PUSH
16124: LD_INT 31
16126: PUSH
16127: LD_INT 32
16129: PUSH
16130: LD_INT 33
16132: PUSH
16133: LD_INT 34
16135: PUSH
16136: LD_INT 35
16138: PUSH
16139: LD_INT 36
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 101
16167: PUSH
16168: LD_INT 102
16170: PUSH
16171: LD_INT 103
16173: PUSH
16174: LD_INT 106
16176: PUSH
16177: LD_INT 108
16179: PUSH
16180: LD_INT 112
16182: PUSH
16183: LD_INT 113
16185: PUSH
16186: LD_INT 114
16188: PUSH
16189: LD_INT 115
16191: PUSH
16192: LD_INT 116
16194: PUSH
16195: LD_INT 117
16197: PUSH
16198: LD_INT 118
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: ST_TO_ADDR
16219: GO 16462
16221: LD_INT 19
16223: DOUBLE
16224: EQUAL
16225: IFTRUE 16229
16227: GO 16461
16229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16230: LD_ADDR_VAR 0 2
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: LD_INT 2
16240: PUSH
16241: LD_INT 3
16243: PUSH
16244: LD_INT 4
16246: PUSH
16247: LD_INT 5
16249: PUSH
16250: LD_INT 6
16252: PUSH
16253: LD_INT 7
16255: PUSH
16256: LD_INT 8
16258: PUSH
16259: LD_INT 9
16261: PUSH
16262: LD_INT 10
16264: PUSH
16265: LD_INT 11
16267: PUSH
16268: LD_INT 12
16270: PUSH
16271: LD_INT 13
16273: PUSH
16274: LD_INT 14
16276: PUSH
16277: LD_INT 15
16279: PUSH
16280: LD_INT 16
16282: PUSH
16283: LD_INT 17
16285: PUSH
16286: LD_INT 18
16288: PUSH
16289: LD_INT 19
16291: PUSH
16292: LD_INT 20
16294: PUSH
16295: LD_INT 21
16297: PUSH
16298: LD_INT 22
16300: PUSH
16301: LD_INT 23
16303: PUSH
16304: LD_INT 24
16306: PUSH
16307: LD_INT 25
16309: PUSH
16310: LD_INT 26
16312: PUSH
16313: LD_INT 27
16315: PUSH
16316: LD_INT 28
16318: PUSH
16319: LD_INT 29
16321: PUSH
16322: LD_INT 30
16324: PUSH
16325: LD_INT 31
16327: PUSH
16328: LD_INT 32
16330: PUSH
16331: LD_INT 33
16333: PUSH
16334: LD_INT 34
16336: PUSH
16337: LD_INT 35
16339: PUSH
16340: LD_INT 36
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 101
16383: PUSH
16384: LD_INT 102
16386: PUSH
16387: LD_INT 103
16389: PUSH
16390: LD_INT 104
16392: PUSH
16393: LD_INT 105
16395: PUSH
16396: LD_INT 106
16398: PUSH
16399: LD_INT 107
16401: PUSH
16402: LD_INT 108
16404: PUSH
16405: LD_INT 109
16407: PUSH
16408: LD_INT 110
16410: PUSH
16411: LD_INT 111
16413: PUSH
16414: LD_INT 112
16416: PUSH
16417: LD_INT 113
16419: PUSH
16420: LD_INT 114
16422: PUSH
16423: LD_INT 115
16425: PUSH
16426: LD_INT 116
16428: PUSH
16429: LD_INT 117
16431: PUSH
16432: LD_INT 118
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: ST_TO_ADDR
16459: GO 16462
16461: POP
// end else
16462: GO 16693
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: LD_INT 2
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: LD_INT 4
16480: PUSH
16481: LD_INT 5
16483: PUSH
16484: LD_INT 6
16486: PUSH
16487: LD_INT 7
16489: PUSH
16490: LD_INT 8
16492: PUSH
16493: LD_INT 9
16495: PUSH
16496: LD_INT 10
16498: PUSH
16499: LD_INT 11
16501: PUSH
16502: LD_INT 12
16504: PUSH
16505: LD_INT 13
16507: PUSH
16508: LD_INT 14
16510: PUSH
16511: LD_INT 15
16513: PUSH
16514: LD_INT 16
16516: PUSH
16517: LD_INT 17
16519: PUSH
16520: LD_INT 18
16522: PUSH
16523: LD_INT 19
16525: PUSH
16526: LD_INT 20
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: LD_INT 23
16537: PUSH
16538: LD_INT 24
16540: PUSH
16541: LD_INT 25
16543: PUSH
16544: LD_INT 26
16546: PUSH
16547: LD_INT 27
16549: PUSH
16550: LD_INT 28
16552: PUSH
16553: LD_INT 29
16555: PUSH
16556: LD_INT 30
16558: PUSH
16559: LD_INT 31
16561: PUSH
16562: LD_INT 32
16564: PUSH
16565: LD_INT 33
16567: PUSH
16568: LD_INT 34
16570: PUSH
16571: LD_INT 35
16573: PUSH
16574: LD_INT 36
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 101
16617: PUSH
16618: LD_INT 102
16620: PUSH
16621: LD_INT 103
16623: PUSH
16624: LD_INT 104
16626: PUSH
16627: LD_INT 105
16629: PUSH
16630: LD_INT 106
16632: PUSH
16633: LD_INT 107
16635: PUSH
16636: LD_INT 108
16638: PUSH
16639: LD_INT 109
16641: PUSH
16642: LD_INT 110
16644: PUSH
16645: LD_INT 111
16647: PUSH
16648: LD_INT 112
16650: PUSH
16651: LD_INT 113
16653: PUSH
16654: LD_INT 114
16656: PUSH
16657: LD_INT 115
16659: PUSH
16660: LD_INT 116
16662: PUSH
16663: LD_INT 117
16665: PUSH
16666: LD_INT 118
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: ST_TO_ADDR
// if result then
16693: LD_VAR 0 2
16697: IFFALSE 17483
// begin normal :=  ;
16699: LD_ADDR_VAR 0 5
16703: PUSH
16704: LD_STRING 
16706: ST_TO_ADDR
// hardcore :=  ;
16707: LD_ADDR_VAR 0 6
16711: PUSH
16712: LD_STRING 
16714: ST_TO_ADDR
// active :=  ;
16715: LD_ADDR_VAR 0 7
16719: PUSH
16720: LD_STRING 
16722: ST_TO_ADDR
// for i = 1 to normalCounter do
16723: LD_ADDR_VAR 0 8
16727: PUSH
16728: DOUBLE
16729: LD_INT 1
16731: DEC
16732: ST_TO_ADDR
16733: LD_EXP 23
16737: PUSH
16738: FOR_TO
16739: IFFALSE 16840
// begin tmp := 0 ;
16741: LD_ADDR_VAR 0 3
16745: PUSH
16746: LD_STRING 0
16748: ST_TO_ADDR
// if result [ 1 ] then
16749: LD_VAR 0 2
16753: PUSH
16754: LD_INT 1
16756: ARRAY
16757: IFFALSE 16822
// if result [ 1 ] [ 1 ] = i then
16759: LD_VAR 0 2
16763: PUSH
16764: LD_INT 1
16766: ARRAY
16767: PUSH
16768: LD_INT 1
16770: ARRAY
16771: PUSH
16772: LD_VAR 0 8
16776: EQUAL
16777: IFFALSE 16822
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16779: LD_ADDR_VAR 0 2
16783: PUSH
16784: LD_VAR 0 2
16788: PPUSH
16789: LD_INT 1
16791: PPUSH
16792: LD_VAR 0 2
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: LD_INT 1
16803: PPUSH
16804: CALL_OW 3
16808: PPUSH
16809: CALL_OW 1
16813: ST_TO_ADDR
// tmp := 1 ;
16814: LD_ADDR_VAR 0 3
16818: PUSH
16819: LD_STRING 1
16821: ST_TO_ADDR
// end ; normal := normal & tmp ;
16822: LD_ADDR_VAR 0 5
16826: PUSH
16827: LD_VAR 0 5
16831: PUSH
16832: LD_VAR 0 3
16836: STR
16837: ST_TO_ADDR
// end ;
16838: GO 16738
16840: POP
16841: POP
// for i = 1 to hardcoreCounter do
16842: LD_ADDR_VAR 0 8
16846: PUSH
16847: DOUBLE
16848: LD_INT 1
16850: DEC
16851: ST_TO_ADDR
16852: LD_EXP 24
16856: PUSH
16857: FOR_TO
16858: IFFALSE 16963
// begin tmp := 0 ;
16860: LD_ADDR_VAR 0 3
16864: PUSH
16865: LD_STRING 0
16867: ST_TO_ADDR
// if result [ 2 ] then
16868: LD_VAR 0 2
16872: PUSH
16873: LD_INT 2
16875: ARRAY
16876: IFFALSE 16945
// if result [ 2 ] [ 1 ] = 100 + i then
16878: LD_VAR 0 2
16882: PUSH
16883: LD_INT 2
16885: ARRAY
16886: PUSH
16887: LD_INT 1
16889: ARRAY
16890: PUSH
16891: LD_INT 100
16893: PUSH
16894: LD_VAR 0 8
16898: PLUS
16899: EQUAL
16900: IFFALSE 16945
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16902: LD_ADDR_VAR 0 2
16906: PUSH
16907: LD_VAR 0 2
16911: PPUSH
16912: LD_INT 2
16914: PPUSH
16915: LD_VAR 0 2
16919: PUSH
16920: LD_INT 2
16922: ARRAY
16923: PPUSH
16924: LD_INT 1
16926: PPUSH
16927: CALL_OW 3
16931: PPUSH
16932: CALL_OW 1
16936: ST_TO_ADDR
// tmp := 1 ;
16937: LD_ADDR_VAR 0 3
16941: PUSH
16942: LD_STRING 1
16944: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16945: LD_ADDR_VAR 0 6
16949: PUSH
16950: LD_VAR 0 6
16954: PUSH
16955: LD_VAR 0 3
16959: STR
16960: ST_TO_ADDR
// end ;
16961: GO 16857
16963: POP
16964: POP
// if isGameLoad then
16965: LD_VAR 0 1
16969: IFFALSE 17444
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16971: LD_ADDR_VAR 0 4
16975: PUSH
16976: LD_EXP 27
16980: PUSH
16981: LD_EXP 26
16985: PUSH
16986: LD_EXP 28
16990: PUSH
16991: LD_EXP 25
16995: PUSH
16996: LD_EXP 29
17000: PUSH
17001: LD_EXP 30
17005: PUSH
17006: LD_EXP 31
17010: PUSH
17011: LD_EXP 32
17015: PUSH
17016: LD_EXP 33
17020: PUSH
17021: LD_EXP 34
17025: PUSH
17026: LD_EXP 35
17030: PUSH
17031: LD_EXP 36
17035: PUSH
17036: LD_EXP 37
17040: PUSH
17041: LD_EXP 38
17045: PUSH
17046: LD_EXP 46
17050: PUSH
17051: LD_EXP 47
17055: PUSH
17056: LD_EXP 48
17060: PUSH
17061: LD_EXP 49
17065: PUSH
17066: LD_EXP 51
17070: PUSH
17071: LD_EXP 52
17075: PUSH
17076: LD_EXP 53
17080: PUSH
17081: LD_EXP 56
17085: PUSH
17086: LD_EXP 58
17090: PUSH
17091: LD_EXP 59
17095: PUSH
17096: LD_EXP 60
17100: PUSH
17101: LD_EXP 62
17105: PUSH
17106: LD_EXP 63
17110: PUSH
17111: LD_EXP 66
17115: PUSH
17116: LD_EXP 67
17120: PUSH
17121: LD_EXP 68
17125: PUSH
17126: LD_EXP 69
17130: PUSH
17131: LD_EXP 70
17135: PUSH
17136: LD_EXP 71
17140: PUSH
17141: LD_EXP 72
17145: PUSH
17146: LD_EXP 73
17150: PUSH
17151: LD_EXP 74
17155: PUSH
17156: LD_EXP 39
17160: PUSH
17161: LD_EXP 40
17165: PUSH
17166: LD_EXP 43
17170: PUSH
17171: LD_EXP 44
17175: PUSH
17176: LD_EXP 45
17180: PUSH
17181: LD_EXP 41
17185: PUSH
17186: LD_EXP 42
17190: PUSH
17191: LD_EXP 50
17195: PUSH
17196: LD_EXP 54
17200: PUSH
17201: LD_EXP 55
17205: PUSH
17206: LD_EXP 57
17210: PUSH
17211: LD_EXP 61
17215: PUSH
17216: LD_EXP 64
17220: PUSH
17221: LD_EXP 65
17225: PUSH
17226: LD_EXP 75
17230: PUSH
17231: LD_EXP 76
17235: PUSH
17236: LD_EXP 77
17240: PUSH
17241: LD_EXP 78
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: ST_TO_ADDR
// tmp :=  ;
17302: LD_ADDR_VAR 0 3
17306: PUSH
17307: LD_STRING 
17309: ST_TO_ADDR
// for i = 1 to normalCounter do
17310: LD_ADDR_VAR 0 8
17314: PUSH
17315: DOUBLE
17316: LD_INT 1
17318: DEC
17319: ST_TO_ADDR
17320: LD_EXP 23
17324: PUSH
17325: FOR_TO
17326: IFFALSE 17362
// begin if flags [ i ] then
17328: LD_VAR 0 4
17332: PUSH
17333: LD_VAR 0 8
17337: ARRAY
17338: IFFALSE 17360
// tmp := tmp & i & ; ;
17340: LD_ADDR_VAR 0 3
17344: PUSH
17345: LD_VAR 0 3
17349: PUSH
17350: LD_VAR 0 8
17354: STR
17355: PUSH
17356: LD_STRING ;
17358: STR
17359: ST_TO_ADDR
// end ;
17360: GO 17325
17362: POP
17363: POP
// for i = 1 to hardcoreCounter do
17364: LD_ADDR_VAR 0 8
17368: PUSH
17369: DOUBLE
17370: LD_INT 1
17372: DEC
17373: ST_TO_ADDR
17374: LD_EXP 24
17378: PUSH
17379: FOR_TO
17380: IFFALSE 17426
// begin if flags [ normalCounter + i ] then
17382: LD_VAR 0 4
17386: PUSH
17387: LD_EXP 23
17391: PUSH
17392: LD_VAR 0 8
17396: PLUS
17397: ARRAY
17398: IFFALSE 17424
// tmp := tmp & ( 100 + i ) & ; ;
17400: LD_ADDR_VAR 0 3
17404: PUSH
17405: LD_VAR 0 3
17409: PUSH
17410: LD_INT 100
17412: PUSH
17413: LD_VAR 0 8
17417: PLUS
17418: STR
17419: PUSH
17420: LD_STRING ;
17422: STR
17423: ST_TO_ADDR
// end ;
17424: GO 17379
17426: POP
17427: POP
// if tmp then
17428: LD_VAR 0 3
17432: IFFALSE 17444
// active := tmp ;
17434: LD_ADDR_VAR 0 7
17438: PUSH
17439: LD_VAR 0 3
17443: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17444: LD_STRING getStreamItemsFromMission("
17446: PUSH
17447: LD_VAR 0 5
17451: STR
17452: PUSH
17453: LD_STRING ","
17455: STR
17456: PUSH
17457: LD_VAR 0 6
17461: STR
17462: PUSH
17463: LD_STRING ","
17465: STR
17466: PUSH
17467: LD_VAR 0 7
17471: STR
17472: PUSH
17473: LD_STRING ")
17475: STR
17476: PPUSH
17477: CALL_OW 559
// end else
17481: GO 17490
// ToLua ( getStreamItemsFromMission("","","") ) ;
17483: LD_STRING getStreamItemsFromMission("","","")
17485: PPUSH
17486: CALL_OW 559
// end ;
17490: LD_VAR 0 2
17494: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17495: LD_EXP 22
17499: PUSH
17500: LD_EXP 27
17504: AND
17505: IFFALSE 17629
17507: GO 17509
17509: DISABLE
17510: LD_INT 0
17512: PPUSH
17513: PPUSH
// begin enable ;
17514: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17515: LD_ADDR_VAR 0 2
17519: PUSH
17520: LD_INT 22
17522: PUSH
17523: LD_OWVAR 2
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: LD_INT 34
17537: PUSH
17538: LD_INT 7
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 34
17547: PUSH
17548: LD_INT 45
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 34
17557: PUSH
17558: LD_INT 28
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 34
17567: PUSH
17568: LD_INT 47
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PPUSH
17586: CALL_OW 69
17590: ST_TO_ADDR
// if not tmp then
17591: LD_VAR 0 2
17595: NOT
17596: IFFALSE 17600
// exit ;
17598: GO 17629
// for i in tmp do
17600: LD_ADDR_VAR 0 1
17604: PUSH
17605: LD_VAR 0 2
17609: PUSH
17610: FOR_IN
17611: IFFALSE 17627
// begin SetLives ( i , 0 ) ;
17613: LD_VAR 0 1
17617: PPUSH
17618: LD_INT 0
17620: PPUSH
17621: CALL_OW 234
// end ;
17625: GO 17610
17627: POP
17628: POP
// end ;
17629: PPOPN 2
17631: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17632: LD_EXP 22
17636: PUSH
17637: LD_EXP 28
17641: AND
17642: IFFALSE 17726
17644: GO 17646
17646: DISABLE
17647: LD_INT 0
17649: PPUSH
17650: PPUSH
// begin enable ;
17651: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17652: LD_ADDR_VAR 0 2
17656: PUSH
17657: LD_INT 22
17659: PUSH
17660: LD_OWVAR 2
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 32
17671: PUSH
17672: LD_INT 3
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PPUSH
17683: CALL_OW 69
17687: ST_TO_ADDR
// if not tmp then
17688: LD_VAR 0 2
17692: NOT
17693: IFFALSE 17697
// exit ;
17695: GO 17726
// for i in tmp do
17697: LD_ADDR_VAR 0 1
17701: PUSH
17702: LD_VAR 0 2
17706: PUSH
17707: FOR_IN
17708: IFFALSE 17724
// begin SetLives ( i , 0 ) ;
17710: LD_VAR 0 1
17714: PPUSH
17715: LD_INT 0
17717: PPUSH
17718: CALL_OW 234
// end ;
17722: GO 17707
17724: POP
17725: POP
// end ;
17726: PPOPN 2
17728: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17729: LD_EXP 22
17733: PUSH
17734: LD_EXP 25
17738: AND
17739: IFFALSE 17832
17741: GO 17743
17743: DISABLE
17744: LD_INT 0
17746: PPUSH
// begin enable ;
17747: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17748: LD_ADDR_VAR 0 1
17752: PUSH
17753: LD_INT 22
17755: PUSH
17756: LD_OWVAR 2
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 2
17767: PUSH
17768: LD_INT 25
17770: PUSH
17771: LD_INT 5
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 25
17780: PUSH
17781: LD_INT 9
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 25
17790: PUSH
17791: LD_INT 8
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PPUSH
17808: CALL_OW 69
17812: PUSH
17813: FOR_IN
17814: IFFALSE 17830
// begin SetClass ( i , 1 ) ;
17816: LD_VAR 0 1
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: CALL_OW 336
// end ;
17828: GO 17813
17830: POP
17831: POP
// end ;
17832: PPOPN 1
17834: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17835: LD_EXP 22
17839: PUSH
17840: LD_EXP 26
17844: AND
17845: PUSH
17846: LD_OWVAR 65
17850: PUSH
17851: LD_INT 7
17853: LESS
17854: AND
17855: IFFALSE 17869
17857: GO 17859
17859: DISABLE
// begin enable ;
17860: ENABLE
// game_speed := 7 ;
17861: LD_ADDR_OWVAR 65
17865: PUSH
17866: LD_INT 7
17868: ST_TO_ADDR
// end ;
17869: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17870: LD_EXP 22
17874: PUSH
17875: LD_EXP 29
17879: AND
17880: IFFALSE 18082
17882: GO 17884
17884: DISABLE
17885: LD_INT 0
17887: PPUSH
17888: PPUSH
17889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17890: LD_ADDR_VAR 0 3
17894: PUSH
17895: LD_INT 81
17897: PUSH
17898: LD_OWVAR 2
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 21
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PPUSH
17921: CALL_OW 69
17925: ST_TO_ADDR
// if not tmp then
17926: LD_VAR 0 3
17930: NOT
17931: IFFALSE 17935
// exit ;
17933: GO 18082
// if tmp > 5 then
17935: LD_VAR 0 3
17939: PUSH
17940: LD_INT 5
17942: GREATER
17943: IFFALSE 17955
// k := 5 else
17945: LD_ADDR_VAR 0 2
17949: PUSH
17950: LD_INT 5
17952: ST_TO_ADDR
17953: GO 17965
// k := tmp ;
17955: LD_ADDR_VAR 0 2
17959: PUSH
17960: LD_VAR 0 3
17964: ST_TO_ADDR
// for i := 1 to k do
17965: LD_ADDR_VAR 0 1
17969: PUSH
17970: DOUBLE
17971: LD_INT 1
17973: DEC
17974: ST_TO_ADDR
17975: LD_VAR 0 2
17979: PUSH
17980: FOR_TO
17981: IFFALSE 18080
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17983: LD_VAR 0 3
17987: PUSH
17988: LD_VAR 0 1
17992: ARRAY
17993: PPUSH
17994: LD_VAR 0 1
17998: PUSH
17999: LD_INT 4
18001: MOD
18002: PUSH
18003: LD_INT 1
18005: PLUS
18006: PPUSH
18007: CALL_OW 259
18011: PUSH
18012: LD_INT 10
18014: LESS
18015: IFFALSE 18078
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18017: LD_VAR 0 3
18021: PUSH
18022: LD_VAR 0 1
18026: ARRAY
18027: PPUSH
18028: LD_VAR 0 1
18032: PUSH
18033: LD_INT 4
18035: MOD
18036: PUSH
18037: LD_INT 1
18039: PLUS
18040: PPUSH
18041: LD_VAR 0 3
18045: PUSH
18046: LD_VAR 0 1
18050: ARRAY
18051: PPUSH
18052: LD_VAR 0 1
18056: PUSH
18057: LD_INT 4
18059: MOD
18060: PUSH
18061: LD_INT 1
18063: PLUS
18064: PPUSH
18065: CALL_OW 259
18069: PUSH
18070: LD_INT 1
18072: PLUS
18073: PPUSH
18074: CALL_OW 237
18078: GO 17980
18080: POP
18081: POP
// end ;
18082: PPOPN 3
18084: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18085: LD_EXP 22
18089: PUSH
18090: LD_EXP 30
18094: AND
18095: IFFALSE 18115
18097: GO 18099
18099: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18100: LD_INT 4
18102: PPUSH
18103: LD_OWVAR 2
18107: PPUSH
18108: LD_INT 0
18110: PPUSH
18111: CALL_OW 324
18115: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18116: LD_EXP 22
18120: PUSH
18121: LD_EXP 59
18125: AND
18126: IFFALSE 18146
18128: GO 18130
18130: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18131: LD_INT 19
18133: PPUSH
18134: LD_OWVAR 2
18138: PPUSH
18139: LD_INT 0
18141: PPUSH
18142: CALL_OW 324
18146: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18147: LD_EXP 22
18151: PUSH
18152: LD_EXP 31
18156: AND
18157: IFFALSE 18259
18159: GO 18161
18161: DISABLE
18162: LD_INT 0
18164: PPUSH
18165: PPUSH
// begin enable ;
18166: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18167: LD_ADDR_VAR 0 2
18171: PUSH
18172: LD_INT 22
18174: PUSH
18175: LD_OWVAR 2
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 2
18186: PUSH
18187: LD_INT 34
18189: PUSH
18190: LD_INT 11
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 34
18199: PUSH
18200: LD_INT 30
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: ST_TO_ADDR
// if not tmp then
18221: LD_VAR 0 2
18225: NOT
18226: IFFALSE 18230
// exit ;
18228: GO 18259
// for i in tmp do
18230: LD_ADDR_VAR 0 1
18234: PUSH
18235: LD_VAR 0 2
18239: PUSH
18240: FOR_IN
18241: IFFALSE 18257
// begin SetLives ( i , 0 ) ;
18243: LD_VAR 0 1
18247: PPUSH
18248: LD_INT 0
18250: PPUSH
18251: CALL_OW 234
// end ;
18255: GO 18240
18257: POP
18258: POP
// end ;
18259: PPOPN 2
18261: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18262: LD_EXP 22
18266: PUSH
18267: LD_EXP 32
18271: AND
18272: IFFALSE 18292
18274: GO 18276
18276: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18277: LD_INT 32
18279: PPUSH
18280: LD_OWVAR 2
18284: PPUSH
18285: LD_INT 0
18287: PPUSH
18288: CALL_OW 324
18292: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18293: LD_EXP 22
18297: PUSH
18298: LD_EXP 33
18302: AND
18303: IFFALSE 18484
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
18312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18313: LD_ADDR_VAR 0 2
18317: PUSH
18318: LD_INT 22
18320: PUSH
18321: LD_OWVAR 2
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 33
18332: PUSH
18333: LD_INT 3
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PPUSH
18344: CALL_OW 69
18348: ST_TO_ADDR
// if not tmp then
18349: LD_VAR 0 2
18353: NOT
18354: IFFALSE 18358
// exit ;
18356: GO 18484
// side := 0 ;
18358: LD_ADDR_VAR 0 3
18362: PUSH
18363: LD_INT 0
18365: ST_TO_ADDR
// for i := 1 to 8 do
18366: LD_ADDR_VAR 0 1
18370: PUSH
18371: DOUBLE
18372: LD_INT 1
18374: DEC
18375: ST_TO_ADDR
18376: LD_INT 8
18378: PUSH
18379: FOR_TO
18380: IFFALSE 18428
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18382: LD_OWVAR 2
18386: PUSH
18387: LD_VAR 0 1
18391: NONEQUAL
18392: PUSH
18393: LD_OWVAR 2
18397: PPUSH
18398: LD_VAR 0 1
18402: PPUSH
18403: CALL_OW 81
18407: PUSH
18408: LD_INT 2
18410: EQUAL
18411: AND
18412: IFFALSE 18426
// begin side := i ;
18414: LD_ADDR_VAR 0 3
18418: PUSH
18419: LD_VAR 0 1
18423: ST_TO_ADDR
// break ;
18424: GO 18428
// end ;
18426: GO 18379
18428: POP
18429: POP
// if not side then
18430: LD_VAR 0 3
18434: NOT
18435: IFFALSE 18439
// exit ;
18437: GO 18484
// for i := 1 to tmp do
18439: LD_ADDR_VAR 0 1
18443: PUSH
18444: DOUBLE
18445: LD_INT 1
18447: DEC
18448: ST_TO_ADDR
18449: LD_VAR 0 2
18453: PUSH
18454: FOR_TO
18455: IFFALSE 18482
// if Prob ( 60 ) then
18457: LD_INT 60
18459: PPUSH
18460: CALL_OW 13
18464: IFFALSE 18480
// SetSide ( i , side ) ;
18466: LD_VAR 0 1
18470: PPUSH
18471: LD_VAR 0 3
18475: PPUSH
18476: CALL_OW 235
18480: GO 18454
18482: POP
18483: POP
// end ;
18484: PPOPN 3
18486: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18487: LD_EXP 22
18491: PUSH
18492: LD_EXP 35
18496: AND
18497: IFFALSE 18616
18499: GO 18501
18501: DISABLE
18502: LD_INT 0
18504: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18505: LD_ADDR_VAR 0 1
18509: PUSH
18510: LD_INT 22
18512: PUSH
18513: LD_OWVAR 2
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 21
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 3
18534: PUSH
18535: LD_INT 23
18537: PUSH
18538: LD_INT 0
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: PPUSH
18554: CALL_OW 69
18558: PUSH
18559: FOR_IN
18560: IFFALSE 18614
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 257
18571: PUSH
18572: LD_INT 1
18574: PUSH
18575: LD_INT 2
18577: PUSH
18578: LD_INT 3
18580: PUSH
18581: LD_INT 4
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: IN
18590: IFFALSE 18612
// SetClass ( un , rand ( 1 , 4 ) ) ;
18592: LD_VAR 0 1
18596: PPUSH
18597: LD_INT 1
18599: PPUSH
18600: LD_INT 4
18602: PPUSH
18603: CALL_OW 12
18607: PPUSH
18608: CALL_OW 336
18612: GO 18559
18614: POP
18615: POP
// end ;
18616: PPOPN 1
18618: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18619: LD_EXP 22
18623: PUSH
18624: LD_EXP 34
18628: AND
18629: IFFALSE 18708
18631: GO 18633
18633: DISABLE
18634: LD_INT 0
18636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18637: LD_ADDR_VAR 0 1
18641: PUSH
18642: LD_INT 22
18644: PUSH
18645: LD_OWVAR 2
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 21
18656: PUSH
18657: LD_INT 3
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PPUSH
18668: CALL_OW 69
18672: ST_TO_ADDR
// if not tmp then
18673: LD_VAR 0 1
18677: NOT
18678: IFFALSE 18682
// exit ;
18680: GO 18708
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18682: LD_VAR 0 1
18686: PUSH
18687: LD_INT 1
18689: PPUSH
18690: LD_VAR 0 1
18694: PPUSH
18695: CALL_OW 12
18699: ARRAY
18700: PPUSH
18701: LD_INT 100
18703: PPUSH
18704: CALL_OW 234
// end ;
18708: PPOPN 1
18710: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18711: LD_EXP 22
18715: PUSH
18716: LD_EXP 36
18720: AND
18721: IFFALSE 18819
18723: GO 18725
18725: DISABLE
18726: LD_INT 0
18728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18729: LD_ADDR_VAR 0 1
18733: PUSH
18734: LD_INT 22
18736: PUSH
18737: LD_OWVAR 2
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 21
18748: PUSH
18749: LD_INT 1
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PPUSH
18760: CALL_OW 69
18764: ST_TO_ADDR
// if not tmp then
18765: LD_VAR 0 1
18769: NOT
18770: IFFALSE 18774
// exit ;
18772: GO 18819
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18774: LD_VAR 0 1
18778: PUSH
18779: LD_INT 1
18781: PPUSH
18782: LD_VAR 0 1
18786: PPUSH
18787: CALL_OW 12
18791: ARRAY
18792: PPUSH
18793: LD_INT 1
18795: PPUSH
18796: LD_INT 4
18798: PPUSH
18799: CALL_OW 12
18803: PPUSH
18804: LD_INT 3000
18806: PPUSH
18807: LD_INT 9000
18809: PPUSH
18810: CALL_OW 12
18814: PPUSH
18815: CALL_OW 492
// end ;
18819: PPOPN 1
18821: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18822: LD_EXP 22
18826: PUSH
18827: LD_EXP 37
18831: AND
18832: IFFALSE 18852
18834: GO 18836
18836: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18837: LD_INT 1
18839: PPUSH
18840: LD_OWVAR 2
18844: PPUSH
18845: LD_INT 0
18847: PPUSH
18848: CALL_OW 324
18852: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18853: LD_EXP 22
18857: PUSH
18858: LD_EXP 38
18862: AND
18863: IFFALSE 18946
18865: GO 18867
18867: DISABLE
18868: LD_INT 0
18870: PPUSH
18871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18872: LD_ADDR_VAR 0 2
18876: PUSH
18877: LD_INT 22
18879: PUSH
18880: LD_OWVAR 2
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 21
18891: PUSH
18892: LD_INT 3
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PPUSH
18903: CALL_OW 69
18907: ST_TO_ADDR
// if not tmp then
18908: LD_VAR 0 2
18912: NOT
18913: IFFALSE 18917
// exit ;
18915: GO 18946
// for i in tmp do
18917: LD_ADDR_VAR 0 1
18921: PUSH
18922: LD_VAR 0 2
18926: PUSH
18927: FOR_IN
18928: IFFALSE 18944
// SetBLevel ( i , 10 ) ;
18930: LD_VAR 0 1
18934: PPUSH
18935: LD_INT 10
18937: PPUSH
18938: CALL_OW 241
18942: GO 18927
18944: POP
18945: POP
// end ;
18946: PPOPN 2
18948: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18949: LD_EXP 22
18953: PUSH
18954: LD_EXP 39
18958: AND
18959: IFFALSE 19070
18961: GO 18963
18963: DISABLE
18964: LD_INT 0
18966: PPUSH
18967: PPUSH
18968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18969: LD_ADDR_VAR 0 3
18973: PUSH
18974: LD_INT 22
18976: PUSH
18977: LD_OWVAR 2
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 25
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PPUSH
19000: CALL_OW 69
19004: ST_TO_ADDR
// if not tmp then
19005: LD_VAR 0 3
19009: NOT
19010: IFFALSE 19014
// exit ;
19012: GO 19070
// un := tmp [ rand ( 1 , tmp ) ] ;
19014: LD_ADDR_VAR 0 2
19018: PUSH
19019: LD_VAR 0 3
19023: PUSH
19024: LD_INT 1
19026: PPUSH
19027: LD_VAR 0 3
19031: PPUSH
19032: CALL_OW 12
19036: ARRAY
19037: ST_TO_ADDR
// if Crawls ( un ) then
19038: LD_VAR 0 2
19042: PPUSH
19043: CALL_OW 318
19047: IFFALSE 19058
// ComWalk ( un ) ;
19049: LD_VAR 0 2
19053: PPUSH
19054: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19058: LD_VAR 0 2
19062: PPUSH
19063: LD_INT 5
19065: PPUSH
19066: CALL_OW 336
// end ;
19070: PPOPN 3
19072: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19073: LD_EXP 22
19077: PUSH
19078: LD_EXP 40
19082: AND
19083: PUSH
19084: LD_OWVAR 67
19088: PUSH
19089: LD_INT 4
19091: LESS
19092: AND
19093: IFFALSE 19112
19095: GO 19097
19097: DISABLE
// begin Difficulty := Difficulty + 1 ;
19098: LD_ADDR_OWVAR 67
19102: PUSH
19103: LD_OWVAR 67
19107: PUSH
19108: LD_INT 1
19110: PLUS
19111: ST_TO_ADDR
// end ;
19112: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19113: LD_EXP 22
19117: PUSH
19118: LD_EXP 41
19122: AND
19123: IFFALSE 19226
19125: GO 19127
19127: DISABLE
19128: LD_INT 0
19130: PPUSH
// begin for i := 1 to 5 do
19131: LD_ADDR_VAR 0 1
19135: PUSH
19136: DOUBLE
19137: LD_INT 1
19139: DEC
19140: ST_TO_ADDR
19141: LD_INT 5
19143: PUSH
19144: FOR_TO
19145: IFFALSE 19224
// begin uc_nation := nation_nature ;
19147: LD_ADDR_OWVAR 21
19151: PUSH
19152: LD_INT 0
19154: ST_TO_ADDR
// uc_side := 0 ;
19155: LD_ADDR_OWVAR 20
19159: PUSH
19160: LD_INT 0
19162: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19163: LD_ADDR_OWVAR 29
19167: PUSH
19168: LD_INT 12
19170: PUSH
19171: LD_INT 12
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: ST_TO_ADDR
// hc_agressivity := 20 ;
19178: LD_ADDR_OWVAR 35
19182: PUSH
19183: LD_INT 20
19185: ST_TO_ADDR
// hc_class := class_tiger ;
19186: LD_ADDR_OWVAR 28
19190: PUSH
19191: LD_INT 14
19193: ST_TO_ADDR
// hc_gallery :=  ;
19194: LD_ADDR_OWVAR 33
19198: PUSH
19199: LD_STRING 
19201: ST_TO_ADDR
// hc_name :=  ;
19202: LD_ADDR_OWVAR 26
19206: PUSH
19207: LD_STRING 
19209: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19210: CALL_OW 44
19214: PPUSH
19215: LD_INT 0
19217: PPUSH
19218: CALL_OW 51
// end ;
19222: GO 19144
19224: POP
19225: POP
// end ;
19226: PPOPN 1
19228: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19229: LD_EXP 22
19233: PUSH
19234: LD_EXP 42
19238: AND
19239: IFFALSE 19248
19241: GO 19243
19243: DISABLE
// StreamSibBomb ;
19244: CALL 19249 0 0
19248: END
// export function StreamSibBomb ; var i , x , y ; begin
19249: LD_INT 0
19251: PPUSH
19252: PPUSH
19253: PPUSH
19254: PPUSH
// result := false ;
19255: LD_ADDR_VAR 0 1
19259: PUSH
19260: LD_INT 0
19262: ST_TO_ADDR
// for i := 1 to 16 do
19263: LD_ADDR_VAR 0 2
19267: PUSH
19268: DOUBLE
19269: LD_INT 1
19271: DEC
19272: ST_TO_ADDR
19273: LD_INT 16
19275: PUSH
19276: FOR_TO
19277: IFFALSE 19476
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19279: LD_ADDR_VAR 0 3
19283: PUSH
19284: LD_INT 10
19286: PUSH
19287: LD_INT 20
19289: PUSH
19290: LD_INT 30
19292: PUSH
19293: LD_INT 40
19295: PUSH
19296: LD_INT 50
19298: PUSH
19299: LD_INT 60
19301: PUSH
19302: LD_INT 70
19304: PUSH
19305: LD_INT 80
19307: PUSH
19308: LD_INT 90
19310: PUSH
19311: LD_INT 100
19313: PUSH
19314: LD_INT 110
19316: PUSH
19317: LD_INT 120
19319: PUSH
19320: LD_INT 130
19322: PUSH
19323: LD_INT 140
19325: PUSH
19326: LD_INT 150
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 1
19348: PPUSH
19349: LD_INT 15
19351: PPUSH
19352: CALL_OW 12
19356: ARRAY
19357: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19358: LD_ADDR_VAR 0 4
19362: PUSH
19363: LD_INT 10
19365: PUSH
19366: LD_INT 20
19368: PUSH
19369: LD_INT 30
19371: PUSH
19372: LD_INT 40
19374: PUSH
19375: LD_INT 50
19377: PUSH
19378: LD_INT 60
19380: PUSH
19381: LD_INT 70
19383: PUSH
19384: LD_INT 80
19386: PUSH
19387: LD_INT 90
19389: PUSH
19390: LD_INT 100
19392: PUSH
19393: LD_INT 110
19395: PUSH
19396: LD_INT 120
19398: PUSH
19399: LD_INT 130
19401: PUSH
19402: LD_INT 140
19404: PUSH
19405: LD_INT 150
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 1
19427: PPUSH
19428: LD_INT 15
19430: PPUSH
19431: CALL_OW 12
19435: ARRAY
19436: ST_TO_ADDR
// if ValidHex ( x , y ) then
19437: LD_VAR 0 3
19441: PPUSH
19442: LD_VAR 0 4
19446: PPUSH
19447: CALL_OW 488
19451: IFFALSE 19474
// begin result := [ x , y ] ;
19453: LD_ADDR_VAR 0 1
19457: PUSH
19458: LD_VAR 0 3
19462: PUSH
19463: LD_VAR 0 4
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: ST_TO_ADDR
// break ;
19472: GO 19476
// end ; end ;
19474: GO 19276
19476: POP
19477: POP
// if result then
19478: LD_VAR 0 1
19482: IFFALSE 19542
// begin ToLua ( playSibBomb() ) ;
19484: LD_STRING playSibBomb()
19486: PPUSH
19487: CALL_OW 559
// wait ( 0 0$14 ) ;
19491: LD_INT 490
19493: PPUSH
19494: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19498: LD_VAR 0 1
19502: PUSH
19503: LD_INT 1
19505: ARRAY
19506: PPUSH
19507: LD_VAR 0 1
19511: PUSH
19512: LD_INT 2
19514: ARRAY
19515: PPUSH
19516: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19520: LD_VAR 0 1
19524: PUSH
19525: LD_INT 1
19527: ARRAY
19528: PPUSH
19529: LD_VAR 0 1
19533: PUSH
19534: LD_INT 2
19536: ARRAY
19537: PPUSH
19538: CALL_OW 429
// end ; end ;
19542: LD_VAR 0 1
19546: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19547: LD_EXP 22
19551: PUSH
19552: LD_EXP 44
19556: AND
19557: IFFALSE 19569
19559: GO 19561
19561: DISABLE
// YouLost (  ) ;
19562: LD_STRING 
19564: PPUSH
19565: CALL_OW 104
19569: END
// every 0 0$1 trigger StreamModeActive and sFog do
19570: LD_EXP 22
19574: PUSH
19575: LD_EXP 43
19579: AND
19580: IFFALSE 19594
19582: GO 19584
19584: DISABLE
// FogOff ( your_side ) ;
19585: LD_OWVAR 2
19589: PPUSH
19590: CALL_OW 344
19594: END
// every 0 0$1 trigger StreamModeActive and sSun do
19595: LD_EXP 22
19599: PUSH
19600: LD_EXP 45
19604: AND
19605: IFFALSE 19633
19607: GO 19609
19609: DISABLE
// begin solar_recharge_percent := 0 ;
19610: LD_ADDR_OWVAR 79
19614: PUSH
19615: LD_INT 0
19617: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19618: LD_INT 10500
19620: PPUSH
19621: CALL_OW 67
// solar_recharge_percent := 100 ;
19625: LD_ADDR_OWVAR 79
19629: PUSH
19630: LD_INT 100
19632: ST_TO_ADDR
// end ;
19633: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19634: LD_EXP 22
19638: PUSH
19639: LD_EXP 46
19643: AND
19644: IFFALSE 19883
19646: GO 19648
19648: DISABLE
19649: LD_INT 0
19651: PPUSH
19652: PPUSH
19653: PPUSH
// begin tmp := [ ] ;
19654: LD_ADDR_VAR 0 3
19658: PUSH
19659: EMPTY
19660: ST_TO_ADDR
// for i := 1 to 6 do
19661: LD_ADDR_VAR 0 1
19665: PUSH
19666: DOUBLE
19667: LD_INT 1
19669: DEC
19670: ST_TO_ADDR
19671: LD_INT 6
19673: PUSH
19674: FOR_TO
19675: IFFALSE 19780
// begin uc_nation := nation_nature ;
19677: LD_ADDR_OWVAR 21
19681: PUSH
19682: LD_INT 0
19684: ST_TO_ADDR
// uc_side := 0 ;
19685: LD_ADDR_OWVAR 20
19689: PUSH
19690: LD_INT 0
19692: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19693: LD_ADDR_OWVAR 29
19697: PUSH
19698: LD_INT 12
19700: PUSH
19701: LD_INT 12
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: ST_TO_ADDR
// hc_agressivity := 20 ;
19708: LD_ADDR_OWVAR 35
19712: PUSH
19713: LD_INT 20
19715: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19716: LD_ADDR_OWVAR 28
19720: PUSH
19721: LD_INT 17
19723: ST_TO_ADDR
// hc_gallery :=  ;
19724: LD_ADDR_OWVAR 33
19728: PUSH
19729: LD_STRING 
19731: ST_TO_ADDR
// hc_name :=  ;
19732: LD_ADDR_OWVAR 26
19736: PUSH
19737: LD_STRING 
19739: ST_TO_ADDR
// un := CreateHuman ;
19740: LD_ADDR_VAR 0 2
19744: PUSH
19745: CALL_OW 44
19749: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19750: LD_VAR 0 2
19754: PPUSH
19755: LD_INT 1
19757: PPUSH
19758: CALL_OW 51
// tmp := tmp ^ un ;
19762: LD_ADDR_VAR 0 3
19766: PUSH
19767: LD_VAR 0 3
19771: PUSH
19772: LD_VAR 0 2
19776: ADD
19777: ST_TO_ADDR
// end ;
19778: GO 19674
19780: POP
19781: POP
// repeat wait ( 0 0$1 ) ;
19782: LD_INT 35
19784: PPUSH
19785: CALL_OW 67
// for un in tmp do
19789: LD_ADDR_VAR 0 2
19793: PUSH
19794: LD_VAR 0 3
19798: PUSH
19799: FOR_IN
19800: IFFALSE 19874
// begin if IsDead ( un ) then
19802: LD_VAR 0 2
19806: PPUSH
19807: CALL_OW 301
19811: IFFALSE 19831
// begin tmp := tmp diff un ;
19813: LD_ADDR_VAR 0 3
19817: PUSH
19818: LD_VAR 0 3
19822: PUSH
19823: LD_VAR 0 2
19827: DIFF
19828: ST_TO_ADDR
// continue ;
19829: GO 19799
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19831: LD_VAR 0 2
19835: PPUSH
19836: LD_INT 3
19838: PUSH
19839: LD_INT 22
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PPUSH
19853: CALL_OW 69
19857: PPUSH
19858: LD_VAR 0 2
19862: PPUSH
19863: CALL_OW 74
19867: PPUSH
19868: CALL_OW 115
// end ;
19872: GO 19799
19874: POP
19875: POP
// until not tmp ;
19876: LD_VAR 0 3
19880: NOT
19881: IFFALSE 19782
// end ;
19883: PPOPN 3
19885: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19886: LD_EXP 22
19890: PUSH
19891: LD_EXP 47
19895: AND
19896: IFFALSE 19950
19898: GO 19900
19900: DISABLE
// begin ToLua ( displayTroll(); ) ;
19901: LD_STRING displayTroll();
19903: PPUSH
19904: CALL_OW 559
// wait ( 3 3$00 ) ;
19908: LD_INT 6300
19910: PPUSH
19911: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19915: LD_STRING hideTroll();
19917: PPUSH
19918: CALL_OW 559
// wait ( 1 1$00 ) ;
19922: LD_INT 2100
19924: PPUSH
19925: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19929: LD_STRING displayTroll();
19931: PPUSH
19932: CALL_OW 559
// wait ( 1 1$00 ) ;
19936: LD_INT 2100
19938: PPUSH
19939: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19943: LD_STRING hideTroll();
19945: PPUSH
19946: CALL_OW 559
// end ;
19950: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19951: LD_EXP 22
19955: PUSH
19956: LD_EXP 48
19960: AND
19961: IFFALSE 20024
19963: GO 19965
19965: DISABLE
19966: LD_INT 0
19968: PPUSH
// begin p := 0 ;
19969: LD_ADDR_VAR 0 1
19973: PUSH
19974: LD_INT 0
19976: ST_TO_ADDR
// repeat game_speed := 1 ;
19977: LD_ADDR_OWVAR 65
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19985: LD_INT 35
19987: PPUSH
19988: CALL_OW 67
// p := p + 1 ;
19992: LD_ADDR_VAR 0 1
19996: PUSH
19997: LD_VAR 0 1
20001: PUSH
20002: LD_INT 1
20004: PLUS
20005: ST_TO_ADDR
// until p >= 60 ;
20006: LD_VAR 0 1
20010: PUSH
20011: LD_INT 60
20013: GREATEREQUAL
20014: IFFALSE 19977
// game_speed := 4 ;
20016: LD_ADDR_OWVAR 65
20020: PUSH
20021: LD_INT 4
20023: ST_TO_ADDR
// end ;
20024: PPOPN 1
20026: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20027: LD_EXP 22
20031: PUSH
20032: LD_EXP 49
20036: AND
20037: IFFALSE 20183
20039: GO 20041
20041: DISABLE
20042: LD_INT 0
20044: PPUSH
20045: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20046: LD_ADDR_VAR 0 1
20050: PUSH
20051: LD_INT 22
20053: PUSH
20054: LD_OWVAR 2
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 2
20065: PUSH
20066: LD_INT 30
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 30
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: LIST
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PPUSH
20095: CALL_OW 69
20099: ST_TO_ADDR
// if not depot then
20100: LD_VAR 0 1
20104: NOT
20105: IFFALSE 20109
// exit ;
20107: GO 20183
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20109: LD_ADDR_VAR 0 2
20113: PUSH
20114: LD_VAR 0 1
20118: PUSH
20119: LD_INT 1
20121: PPUSH
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL_OW 12
20131: ARRAY
20132: PPUSH
20133: CALL_OW 274
20137: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20138: LD_VAR 0 2
20142: PPUSH
20143: LD_INT 1
20145: PPUSH
20146: LD_INT 0
20148: PPUSH
20149: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20153: LD_VAR 0 2
20157: PPUSH
20158: LD_INT 2
20160: PPUSH
20161: LD_INT 0
20163: PPUSH
20164: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20168: LD_VAR 0 2
20172: PPUSH
20173: LD_INT 3
20175: PPUSH
20176: LD_INT 0
20178: PPUSH
20179: CALL_OW 277
// end ;
20183: PPOPN 2
20185: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20186: LD_EXP 22
20190: PUSH
20191: LD_EXP 50
20195: AND
20196: IFFALSE 20293
20198: GO 20200
20200: DISABLE
20201: LD_INT 0
20203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20204: LD_ADDR_VAR 0 1
20208: PUSH
20209: LD_INT 22
20211: PUSH
20212: LD_OWVAR 2
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 21
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 3
20233: PUSH
20234: LD_INT 23
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: LIST
20252: PPUSH
20253: CALL_OW 69
20257: ST_TO_ADDR
// if not tmp then
20258: LD_VAR 0 1
20262: NOT
20263: IFFALSE 20267
// exit ;
20265: GO 20293
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20267: LD_VAR 0 1
20271: PUSH
20272: LD_INT 1
20274: PPUSH
20275: LD_VAR 0 1
20279: PPUSH
20280: CALL_OW 12
20284: ARRAY
20285: PPUSH
20286: LD_INT 200
20288: PPUSH
20289: CALL_OW 234
// end ;
20293: PPOPN 1
20295: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20296: LD_EXP 22
20300: PUSH
20301: LD_EXP 51
20305: AND
20306: IFFALSE 20385
20308: GO 20310
20310: DISABLE
20311: LD_INT 0
20313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20314: LD_ADDR_VAR 0 1
20318: PUSH
20319: LD_INT 22
20321: PUSH
20322: LD_OWVAR 2
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 21
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PPUSH
20345: CALL_OW 69
20349: ST_TO_ADDR
// if not tmp then
20350: LD_VAR 0 1
20354: NOT
20355: IFFALSE 20359
// exit ;
20357: GO 20385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20359: LD_VAR 0 1
20363: PUSH
20364: LD_INT 1
20366: PPUSH
20367: LD_VAR 0 1
20371: PPUSH
20372: CALL_OW 12
20376: ARRAY
20377: PPUSH
20378: LD_INT 60
20380: PPUSH
20381: CALL_OW 234
// end ;
20385: PPOPN 1
20387: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20388: LD_EXP 22
20392: PUSH
20393: LD_EXP 52
20397: AND
20398: IFFALSE 20497
20400: GO 20402
20402: DISABLE
20403: LD_INT 0
20405: PPUSH
20406: PPUSH
// begin enable ;
20407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20408: LD_ADDR_VAR 0 1
20412: PUSH
20413: LD_INT 22
20415: PUSH
20416: LD_OWVAR 2
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 61
20427: PUSH
20428: EMPTY
20429: LIST
20430: PUSH
20431: LD_INT 33
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: LIST
20445: PPUSH
20446: CALL_OW 69
20450: ST_TO_ADDR
// if not tmp then
20451: LD_VAR 0 1
20455: NOT
20456: IFFALSE 20460
// exit ;
20458: GO 20497
// for i in tmp do
20460: LD_ADDR_VAR 0 2
20464: PUSH
20465: LD_VAR 0 1
20469: PUSH
20470: FOR_IN
20471: IFFALSE 20495
// if IsControledBy ( i ) then
20473: LD_VAR 0 2
20477: PPUSH
20478: CALL_OW 312
20482: IFFALSE 20493
// ComUnlink ( i ) ;
20484: LD_VAR 0 2
20488: PPUSH
20489: CALL_OW 136
20493: GO 20470
20495: POP
20496: POP
// end ;
20497: PPOPN 2
20499: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20500: LD_EXP 22
20504: PUSH
20505: LD_EXP 53
20509: AND
20510: IFFALSE 20650
20512: GO 20514
20514: DISABLE
20515: LD_INT 0
20517: PPUSH
20518: PPUSH
// begin ToLua ( displayPowell(); ) ;
20519: LD_STRING displayPowell();
20521: PPUSH
20522: CALL_OW 559
// uc_side := 0 ;
20526: LD_ADDR_OWVAR 20
20530: PUSH
20531: LD_INT 0
20533: ST_TO_ADDR
// uc_nation := 2 ;
20534: LD_ADDR_OWVAR 21
20538: PUSH
20539: LD_INT 2
20541: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20542: LD_ADDR_OWVAR 37
20546: PUSH
20547: LD_INT 14
20549: ST_TO_ADDR
// vc_engine := engine_siberite ;
20550: LD_ADDR_OWVAR 39
20554: PUSH
20555: LD_INT 3
20557: ST_TO_ADDR
// vc_control := control_apeman ;
20558: LD_ADDR_OWVAR 38
20562: PUSH
20563: LD_INT 5
20565: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20566: LD_ADDR_OWVAR 40
20570: PUSH
20571: LD_INT 29
20573: ST_TO_ADDR
// un := CreateVehicle ;
20574: LD_ADDR_VAR 0 2
20578: PUSH
20579: CALL_OW 45
20583: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20584: LD_VAR 0 2
20588: PPUSH
20589: LD_INT 1
20591: PPUSH
20592: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20596: LD_INT 35
20598: PPUSH
20599: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20603: LD_VAR 0 2
20607: PPUSH
20608: LD_INT 22
20610: PUSH
20611: LD_OWVAR 2
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PPUSH
20620: CALL_OW 69
20624: PPUSH
20625: LD_VAR 0 2
20629: PPUSH
20630: CALL_OW 74
20634: PPUSH
20635: CALL_OW 115
// until IsDead ( un ) ;
20639: LD_VAR 0 2
20643: PPUSH
20644: CALL_OW 301
20648: IFFALSE 20596
// end ;
20650: PPOPN 2
20652: END
// every 0 0$1 trigger StreamModeActive and sStu do
20653: LD_EXP 22
20657: PUSH
20658: LD_EXP 61
20662: AND
20663: IFFALSE 20679
20665: GO 20667
20667: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20668: LD_STRING displayStucuk();
20670: PPUSH
20671: CALL_OW 559
// ResetFog ;
20675: CALL_OW 335
// end ;
20679: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20680: LD_EXP 22
20684: PUSH
20685: LD_EXP 54
20689: AND
20690: IFFALSE 20831
20692: GO 20694
20694: DISABLE
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20699: LD_ADDR_VAR 0 2
20703: PUSH
20704: LD_INT 22
20706: PUSH
20707: LD_OWVAR 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 21
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PPUSH
20730: CALL_OW 69
20734: ST_TO_ADDR
// if not tmp then
20735: LD_VAR 0 2
20739: NOT
20740: IFFALSE 20744
// exit ;
20742: GO 20831
// un := tmp [ rand ( 1 , tmp ) ] ;
20744: LD_ADDR_VAR 0 1
20748: PUSH
20749: LD_VAR 0 2
20753: PUSH
20754: LD_INT 1
20756: PPUSH
20757: LD_VAR 0 2
20761: PPUSH
20762: CALL_OW 12
20766: ARRAY
20767: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20768: LD_VAR 0 1
20772: PPUSH
20773: LD_INT 0
20775: PPUSH
20776: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20780: LD_VAR 0 1
20784: PPUSH
20785: LD_OWVAR 3
20789: PUSH
20790: LD_VAR 0 1
20794: DIFF
20795: PPUSH
20796: LD_VAR 0 1
20800: PPUSH
20801: CALL_OW 74
20805: PPUSH
20806: CALL_OW 115
// wait ( 0 0$20 ) ;
20810: LD_INT 700
20812: PPUSH
20813: CALL_OW 67
// SetSide ( un , your_side ) ;
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_OWVAR 2
20826: PPUSH
20827: CALL_OW 235
// end ;
20831: PPOPN 2
20833: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20834: LD_EXP 22
20838: PUSH
20839: LD_EXP 55
20843: AND
20844: IFFALSE 20950
20846: GO 20848
20848: DISABLE
20849: LD_INT 0
20851: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20852: LD_ADDR_VAR 0 1
20856: PUSH
20857: LD_INT 22
20859: PUSH
20860: LD_OWVAR 2
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: LD_INT 30
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 30
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PPUSH
20901: CALL_OW 69
20905: ST_TO_ADDR
// if not depot then
20906: LD_VAR 0 1
20910: NOT
20911: IFFALSE 20915
// exit ;
20913: GO 20950
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20915: LD_VAR 0 1
20919: PUSH
20920: LD_INT 1
20922: ARRAY
20923: PPUSH
20924: CALL_OW 250
20928: PPUSH
20929: LD_VAR 0 1
20933: PUSH
20934: LD_INT 1
20936: ARRAY
20937: PPUSH
20938: CALL_OW 251
20942: PPUSH
20943: LD_INT 70
20945: PPUSH
20946: CALL_OW 495
// end ;
20950: PPOPN 1
20952: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20953: LD_EXP 22
20957: PUSH
20958: LD_EXP 56
20962: AND
20963: IFFALSE 21174
20965: GO 20967
20967: DISABLE
20968: LD_INT 0
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
20974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20975: LD_ADDR_VAR 0 5
20979: PUSH
20980: LD_INT 22
20982: PUSH
20983: LD_OWVAR 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 21
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 69
21010: ST_TO_ADDR
// if not tmp then
21011: LD_VAR 0 5
21015: NOT
21016: IFFALSE 21020
// exit ;
21018: GO 21174
// for i in tmp do
21020: LD_ADDR_VAR 0 1
21024: PUSH
21025: LD_VAR 0 5
21029: PUSH
21030: FOR_IN
21031: IFFALSE 21172
// begin d := rand ( 0 , 5 ) ;
21033: LD_ADDR_VAR 0 4
21037: PUSH
21038: LD_INT 0
21040: PPUSH
21041: LD_INT 5
21043: PPUSH
21044: CALL_OW 12
21048: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21049: LD_ADDR_VAR 0 2
21053: PUSH
21054: LD_VAR 0 1
21058: PPUSH
21059: CALL_OW 250
21063: PPUSH
21064: LD_VAR 0 4
21068: PPUSH
21069: LD_INT 3
21071: PPUSH
21072: LD_INT 12
21074: PPUSH
21075: CALL_OW 12
21079: PPUSH
21080: CALL_OW 272
21084: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21085: LD_ADDR_VAR 0 3
21089: PUSH
21090: LD_VAR 0 1
21094: PPUSH
21095: CALL_OW 251
21099: PPUSH
21100: LD_VAR 0 4
21104: PPUSH
21105: LD_INT 3
21107: PPUSH
21108: LD_INT 12
21110: PPUSH
21111: CALL_OW 12
21115: PPUSH
21116: CALL_OW 273
21120: ST_TO_ADDR
// if ValidHex ( x , y ) then
21121: LD_VAR 0 2
21125: PPUSH
21126: LD_VAR 0 3
21130: PPUSH
21131: CALL_OW 488
21135: IFFALSE 21170
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21137: LD_VAR 0 1
21141: PPUSH
21142: LD_VAR 0 2
21146: PPUSH
21147: LD_VAR 0 3
21151: PPUSH
21152: LD_INT 3
21154: PPUSH
21155: LD_INT 6
21157: PPUSH
21158: CALL_OW 12
21162: PPUSH
21163: LD_INT 1
21165: PPUSH
21166: CALL_OW 483
// end ;
21170: GO 21030
21172: POP
21173: POP
// end ;
21174: PPOPN 5
21176: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21177: LD_EXP 22
21181: PUSH
21182: LD_EXP 57
21186: AND
21187: IFFALSE 21281
21189: GO 21191
21191: DISABLE
21192: LD_INT 0
21194: PPUSH
21195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21196: LD_ADDR_VAR 0 2
21200: PUSH
21201: LD_INT 22
21203: PUSH
21204: LD_OWVAR 2
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 32
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: PPUSH
21238: CALL_OW 69
21242: ST_TO_ADDR
// if not tmp then
21243: LD_VAR 0 2
21247: NOT
21248: IFFALSE 21252
// exit ;
21250: GO 21281
// for i in tmp do
21252: LD_ADDR_VAR 0 1
21256: PUSH
21257: LD_VAR 0 2
21261: PUSH
21262: FOR_IN
21263: IFFALSE 21279
// SetFuel ( i , 0 ) ;
21265: LD_VAR 0 1
21269: PPUSH
21270: LD_INT 0
21272: PPUSH
21273: CALL_OW 240
21277: GO 21262
21279: POP
21280: POP
// end ;
21281: PPOPN 2
21283: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21284: LD_EXP 22
21288: PUSH
21289: LD_EXP 58
21293: AND
21294: IFFALSE 21360
21296: GO 21298
21298: DISABLE
21299: LD_INT 0
21301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21302: LD_ADDR_VAR 0 1
21306: PUSH
21307: LD_INT 22
21309: PUSH
21310: LD_OWVAR 2
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 30
21321: PUSH
21322: LD_INT 29
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PPUSH
21333: CALL_OW 69
21337: ST_TO_ADDR
// if not tmp then
21338: LD_VAR 0 1
21342: NOT
21343: IFFALSE 21347
// exit ;
21345: GO 21360
// DestroyUnit ( tmp [ 1 ] ) ;
21347: LD_VAR 0 1
21351: PUSH
21352: LD_INT 1
21354: ARRAY
21355: PPUSH
21356: CALL_OW 65
// end ;
21360: PPOPN 1
21362: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21363: LD_EXP 22
21367: PUSH
21368: LD_EXP 60
21372: AND
21373: IFFALSE 21502
21375: GO 21377
21377: DISABLE
21378: LD_INT 0
21380: PPUSH
// begin uc_side := 0 ;
21381: LD_ADDR_OWVAR 20
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// uc_nation := nation_arabian ;
21389: LD_ADDR_OWVAR 21
21393: PUSH
21394: LD_INT 2
21396: ST_TO_ADDR
// hc_gallery :=  ;
21397: LD_ADDR_OWVAR 33
21401: PUSH
21402: LD_STRING 
21404: ST_TO_ADDR
// hc_name :=  ;
21405: LD_ADDR_OWVAR 26
21409: PUSH
21410: LD_STRING 
21412: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21413: LD_INT 1
21415: PPUSH
21416: LD_INT 11
21418: PPUSH
21419: LD_INT 10
21421: PPUSH
21422: CALL_OW 380
// un := CreateHuman ;
21426: LD_ADDR_VAR 0 1
21430: PUSH
21431: CALL_OW 44
21435: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21436: LD_VAR 0 1
21440: PPUSH
21441: LD_INT 1
21443: PPUSH
21444: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21448: LD_INT 35
21450: PPUSH
21451: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21455: LD_VAR 0 1
21459: PPUSH
21460: LD_INT 22
21462: PUSH
21463: LD_OWVAR 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PPUSH
21472: CALL_OW 69
21476: PPUSH
21477: LD_VAR 0 1
21481: PPUSH
21482: CALL_OW 74
21486: PPUSH
21487: CALL_OW 115
// until IsDead ( un ) ;
21491: LD_VAR 0 1
21495: PPUSH
21496: CALL_OW 301
21500: IFFALSE 21448
// end ;
21502: PPOPN 1
21504: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21505: LD_EXP 22
21509: PUSH
21510: LD_EXP 62
21514: AND
21515: IFFALSE 21527
21517: GO 21519
21519: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21520: LD_STRING earthquake(getX(game), 0, 32)
21522: PPUSH
21523: CALL_OW 559
21527: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21528: LD_EXP 22
21532: PUSH
21533: LD_EXP 63
21537: AND
21538: IFFALSE 21629
21540: GO 21542
21542: DISABLE
21543: LD_INT 0
21545: PPUSH
// begin enable ;
21546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21547: LD_ADDR_VAR 0 1
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_OWVAR 2
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 21
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 33
21576: PUSH
21577: LD_INT 3
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: PPUSH
21589: CALL_OW 69
21593: ST_TO_ADDR
// if not tmp then
21594: LD_VAR 0 1
21598: NOT
21599: IFFALSE 21603
// exit ;
21601: GO 21629
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21603: LD_VAR 0 1
21607: PUSH
21608: LD_INT 1
21610: PPUSH
21611: LD_VAR 0 1
21615: PPUSH
21616: CALL_OW 12
21620: ARRAY
21621: PPUSH
21622: LD_INT 1
21624: PPUSH
21625: CALL_OW 234
// end ;
21629: PPOPN 1
21631: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21632: LD_EXP 22
21636: PUSH
21637: LD_EXP 64
21641: AND
21642: IFFALSE 21783
21644: GO 21646
21646: DISABLE
21647: LD_INT 0
21649: PPUSH
21650: PPUSH
21651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21652: LD_ADDR_VAR 0 3
21656: PUSH
21657: LD_INT 22
21659: PUSH
21660: LD_OWVAR 2
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 25
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PPUSH
21683: CALL_OW 69
21687: ST_TO_ADDR
// if not tmp then
21688: LD_VAR 0 3
21692: NOT
21693: IFFALSE 21697
// exit ;
21695: GO 21783
// un := tmp [ rand ( 1 , tmp ) ] ;
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_VAR 0 3
21706: PUSH
21707: LD_INT 1
21709: PPUSH
21710: LD_VAR 0 3
21714: PPUSH
21715: CALL_OW 12
21719: ARRAY
21720: ST_TO_ADDR
// if Crawls ( un ) then
21721: LD_VAR 0 2
21725: PPUSH
21726: CALL_OW 318
21730: IFFALSE 21741
// ComWalk ( un ) ;
21732: LD_VAR 0 2
21736: PPUSH
21737: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21741: LD_VAR 0 2
21745: PPUSH
21746: LD_INT 9
21748: PPUSH
21749: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21753: LD_INT 28
21755: PPUSH
21756: LD_OWVAR 2
21760: PPUSH
21761: LD_INT 2
21763: PPUSH
21764: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21768: LD_INT 29
21770: PPUSH
21771: LD_OWVAR 2
21775: PPUSH
21776: LD_INT 2
21778: PPUSH
21779: CALL_OW 322
// end ;
21783: PPOPN 3
21785: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21786: LD_EXP 22
21790: PUSH
21791: LD_EXP 65
21795: AND
21796: IFFALSE 21907
21798: GO 21800
21800: DISABLE
21801: LD_INT 0
21803: PPUSH
21804: PPUSH
21805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21806: LD_ADDR_VAR 0 3
21810: PUSH
21811: LD_INT 22
21813: PUSH
21814: LD_OWVAR 2
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 25
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PPUSH
21837: CALL_OW 69
21841: ST_TO_ADDR
// if not tmp then
21842: LD_VAR 0 3
21846: NOT
21847: IFFALSE 21851
// exit ;
21849: GO 21907
// un := tmp [ rand ( 1 , tmp ) ] ;
21851: LD_ADDR_VAR 0 2
21855: PUSH
21856: LD_VAR 0 3
21860: PUSH
21861: LD_INT 1
21863: PPUSH
21864: LD_VAR 0 3
21868: PPUSH
21869: CALL_OW 12
21873: ARRAY
21874: ST_TO_ADDR
// if Crawls ( un ) then
21875: LD_VAR 0 2
21879: PPUSH
21880: CALL_OW 318
21884: IFFALSE 21895
// ComWalk ( un ) ;
21886: LD_VAR 0 2
21890: PPUSH
21891: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21895: LD_VAR 0 2
21899: PPUSH
21900: LD_INT 8
21902: PPUSH
21903: CALL_OW 336
// end ;
21907: PPOPN 3
21909: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21910: LD_EXP 22
21914: PUSH
21915: LD_EXP 66
21919: AND
21920: IFFALSE 22064
21922: GO 21924
21924: DISABLE
21925: LD_INT 0
21927: PPUSH
21928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21929: LD_ADDR_VAR 0 2
21933: PUSH
21934: LD_INT 22
21936: PUSH
21937: LD_OWVAR 2
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 21
21948: PUSH
21949: LD_INT 2
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 2
21958: PUSH
21959: LD_INT 34
21961: PUSH
21962: LD_INT 12
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 34
21971: PUSH
21972: LD_INT 51
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 34
21981: PUSH
21982: LD_INT 32
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: PPUSH
22000: CALL_OW 69
22004: ST_TO_ADDR
// if not tmp then
22005: LD_VAR 0 2
22009: NOT
22010: IFFALSE 22014
// exit ;
22012: GO 22064
// for i in tmp do
22014: LD_ADDR_VAR 0 1
22018: PUSH
22019: LD_VAR 0 2
22023: PUSH
22024: FOR_IN
22025: IFFALSE 22062
// if GetCargo ( i , mat_artifact ) = 0 then
22027: LD_VAR 0 1
22031: PPUSH
22032: LD_INT 4
22034: PPUSH
22035: CALL_OW 289
22039: PUSH
22040: LD_INT 0
22042: EQUAL
22043: IFFALSE 22060
// SetCargo ( i , mat_siberit , 100 ) ;
22045: LD_VAR 0 1
22049: PPUSH
22050: LD_INT 3
22052: PPUSH
22053: LD_INT 100
22055: PPUSH
22056: CALL_OW 290
22060: GO 22024
22062: POP
22063: POP
// end ;
22064: PPOPN 2
22066: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22067: LD_EXP 22
22071: PUSH
22072: LD_EXP 67
22076: AND
22077: IFFALSE 22260
22079: GO 22081
22081: DISABLE
22082: LD_INT 0
22084: PPUSH
22085: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22086: LD_ADDR_VAR 0 2
22090: PUSH
22091: LD_INT 22
22093: PUSH
22094: LD_OWVAR 2
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PPUSH
22103: CALL_OW 69
22107: ST_TO_ADDR
// if not tmp then
22108: LD_VAR 0 2
22112: NOT
22113: IFFALSE 22117
// exit ;
22115: GO 22260
// for i := 1 to 2 do
22117: LD_ADDR_VAR 0 1
22121: PUSH
22122: DOUBLE
22123: LD_INT 1
22125: DEC
22126: ST_TO_ADDR
22127: LD_INT 2
22129: PUSH
22130: FOR_TO
22131: IFFALSE 22258
// begin uc_side := your_side ;
22133: LD_ADDR_OWVAR 20
22137: PUSH
22138: LD_OWVAR 2
22142: ST_TO_ADDR
// uc_nation := nation_american ;
22143: LD_ADDR_OWVAR 21
22147: PUSH
22148: LD_INT 1
22150: ST_TO_ADDR
// vc_chassis := us_morphling ;
22151: LD_ADDR_OWVAR 37
22155: PUSH
22156: LD_INT 5
22158: ST_TO_ADDR
// vc_engine := engine_siberite ;
22159: LD_ADDR_OWVAR 39
22163: PUSH
22164: LD_INT 3
22166: ST_TO_ADDR
// vc_control := control_computer ;
22167: LD_ADDR_OWVAR 38
22171: PUSH
22172: LD_INT 3
22174: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22175: LD_ADDR_OWVAR 40
22179: PUSH
22180: LD_INT 10
22182: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22183: LD_VAR 0 2
22187: PUSH
22188: LD_INT 1
22190: ARRAY
22191: PPUSH
22192: CALL_OW 310
22196: NOT
22197: IFFALSE 22244
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22199: CALL_OW 45
22203: PPUSH
22204: LD_VAR 0 2
22208: PUSH
22209: LD_INT 1
22211: ARRAY
22212: PPUSH
22213: CALL_OW 250
22217: PPUSH
22218: LD_VAR 0 2
22222: PUSH
22223: LD_INT 1
22225: ARRAY
22226: PPUSH
22227: CALL_OW 251
22231: PPUSH
22232: LD_INT 12
22234: PPUSH
22235: LD_INT 1
22237: PPUSH
22238: CALL_OW 50
22242: GO 22256
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22244: CALL_OW 45
22248: PPUSH
22249: LD_INT 1
22251: PPUSH
22252: CALL_OW 51
// end ;
22256: GO 22130
22258: POP
22259: POP
// end ;
22260: PPOPN 2
22262: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22263: LD_EXP 22
22267: PUSH
22268: LD_EXP 68
22272: AND
22273: IFFALSE 22495
22275: GO 22277
22277: DISABLE
22278: LD_INT 0
22280: PPUSH
22281: PPUSH
22282: PPUSH
22283: PPUSH
22284: PPUSH
22285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22286: LD_ADDR_VAR 0 6
22290: PUSH
22291: LD_INT 22
22293: PUSH
22294: LD_OWVAR 2
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 21
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 3
22315: PUSH
22316: LD_INT 23
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: LIST
22334: PPUSH
22335: CALL_OW 69
22339: ST_TO_ADDR
// if not tmp then
22340: LD_VAR 0 6
22344: NOT
22345: IFFALSE 22349
// exit ;
22347: GO 22495
// s1 := rand ( 1 , 4 ) ;
22349: LD_ADDR_VAR 0 2
22353: PUSH
22354: LD_INT 1
22356: PPUSH
22357: LD_INT 4
22359: PPUSH
22360: CALL_OW 12
22364: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22365: LD_ADDR_VAR 0 4
22369: PUSH
22370: LD_VAR 0 6
22374: PUSH
22375: LD_INT 1
22377: ARRAY
22378: PPUSH
22379: LD_VAR 0 2
22383: PPUSH
22384: CALL_OW 259
22388: ST_TO_ADDR
// if s1 = 1 then
22389: LD_VAR 0 2
22393: PUSH
22394: LD_INT 1
22396: EQUAL
22397: IFFALSE 22417
// s2 := rand ( 2 , 4 ) else
22399: LD_ADDR_VAR 0 3
22403: PUSH
22404: LD_INT 2
22406: PPUSH
22407: LD_INT 4
22409: PPUSH
22410: CALL_OW 12
22414: ST_TO_ADDR
22415: GO 22425
// s2 := 1 ;
22417: LD_ADDR_VAR 0 3
22421: PUSH
22422: LD_INT 1
22424: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22425: LD_ADDR_VAR 0 5
22429: PUSH
22430: LD_VAR 0 6
22434: PUSH
22435: LD_INT 1
22437: ARRAY
22438: PPUSH
22439: LD_VAR 0 3
22443: PPUSH
22444: CALL_OW 259
22448: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22449: LD_VAR 0 6
22453: PUSH
22454: LD_INT 1
22456: ARRAY
22457: PPUSH
22458: LD_VAR 0 2
22462: PPUSH
22463: LD_VAR 0 5
22467: PPUSH
22468: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22472: LD_VAR 0 6
22476: PUSH
22477: LD_INT 1
22479: ARRAY
22480: PPUSH
22481: LD_VAR 0 3
22485: PPUSH
22486: LD_VAR 0 4
22490: PPUSH
22491: CALL_OW 237
// end ;
22495: PPOPN 6
22497: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22498: LD_EXP 22
22502: PUSH
22503: LD_EXP 69
22507: AND
22508: IFFALSE 22587
22510: GO 22512
22512: DISABLE
22513: LD_INT 0
22515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22516: LD_ADDR_VAR 0 1
22520: PUSH
22521: LD_INT 22
22523: PUSH
22524: LD_OWVAR 2
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 30
22535: PUSH
22536: LD_INT 3
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PPUSH
22547: CALL_OW 69
22551: ST_TO_ADDR
// if not tmp then
22552: LD_VAR 0 1
22556: NOT
22557: IFFALSE 22561
// exit ;
22559: GO 22587
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22561: LD_VAR 0 1
22565: PUSH
22566: LD_INT 1
22568: PPUSH
22569: LD_VAR 0 1
22573: PPUSH
22574: CALL_OW 12
22578: ARRAY
22579: PPUSH
22580: LD_INT 1
22582: PPUSH
22583: CALL_OW 234
// end ;
22587: PPOPN 1
22589: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22590: LD_EXP 22
22594: PUSH
22595: LD_EXP 70
22599: AND
22600: IFFALSE 22712
22602: GO 22604
22604: DISABLE
22605: LD_INT 0
22607: PPUSH
22608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22609: LD_ADDR_VAR 0 2
22613: PUSH
22614: LD_INT 22
22616: PUSH
22617: LD_OWVAR 2
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 2
22628: PUSH
22629: LD_INT 30
22631: PUSH
22632: LD_INT 27
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 30
22641: PUSH
22642: LD_INT 26
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 30
22651: PUSH
22652: LD_INT 28
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PPUSH
22669: CALL_OW 69
22673: ST_TO_ADDR
// if not tmp then
22674: LD_VAR 0 2
22678: NOT
22679: IFFALSE 22683
// exit ;
22681: GO 22712
// for i in tmp do
22683: LD_ADDR_VAR 0 1
22687: PUSH
22688: LD_VAR 0 2
22692: PUSH
22693: FOR_IN
22694: IFFALSE 22710
// SetLives ( i , 1 ) ;
22696: LD_VAR 0 1
22700: PPUSH
22701: LD_INT 1
22703: PPUSH
22704: CALL_OW 234
22708: GO 22693
22710: POP
22711: POP
// end ;
22712: PPOPN 2
22714: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22715: LD_EXP 22
22719: PUSH
22720: LD_EXP 71
22724: AND
22725: IFFALSE 23012
22727: GO 22729
22729: DISABLE
22730: LD_INT 0
22732: PPUSH
22733: PPUSH
22734: PPUSH
// begin i := rand ( 1 , 7 ) ;
22735: LD_ADDR_VAR 0 1
22739: PUSH
22740: LD_INT 1
22742: PPUSH
22743: LD_INT 7
22745: PPUSH
22746: CALL_OW 12
22750: ST_TO_ADDR
// case i of 1 :
22751: LD_VAR 0 1
22755: PUSH
22756: LD_INT 1
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22774
22764: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22765: LD_STRING earthquake(getX(game), 0, 32)
22767: PPUSH
22768: CALL_OW 559
22772: GO 23012
22774: LD_INT 2
22776: DOUBLE
22777: EQUAL
22778: IFTRUE 22782
22780: GO 22796
22782: POP
// begin ToLua ( displayStucuk(); ) ;
22783: LD_STRING displayStucuk();
22785: PPUSH
22786: CALL_OW 559
// ResetFog ;
22790: CALL_OW 335
// end ; 3 :
22794: GO 23012
22796: LD_INT 3
22798: DOUBLE
22799: EQUAL
22800: IFTRUE 22804
22802: GO 22908
22804: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22805: LD_ADDR_VAR 0 2
22809: PUSH
22810: LD_INT 22
22812: PUSH
22813: LD_OWVAR 2
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 25
22824: PUSH
22825: LD_INT 1
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PPUSH
22836: CALL_OW 69
22840: ST_TO_ADDR
// if not tmp then
22841: LD_VAR 0 2
22845: NOT
22846: IFFALSE 22850
// exit ;
22848: GO 23012
// un := tmp [ rand ( 1 , tmp ) ] ;
22850: LD_ADDR_VAR 0 3
22854: PUSH
22855: LD_VAR 0 2
22859: PUSH
22860: LD_INT 1
22862: PPUSH
22863: LD_VAR 0 2
22867: PPUSH
22868: CALL_OW 12
22872: ARRAY
22873: ST_TO_ADDR
// if Crawls ( un ) then
22874: LD_VAR 0 3
22878: PPUSH
22879: CALL_OW 318
22883: IFFALSE 22894
// ComWalk ( un ) ;
22885: LD_VAR 0 3
22889: PPUSH
22890: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22894: LD_VAR 0 3
22898: PPUSH
22899: LD_INT 8
22901: PPUSH
22902: CALL_OW 336
// end ; 4 :
22906: GO 23012
22908: LD_INT 4
22910: DOUBLE
22911: EQUAL
22912: IFTRUE 22916
22914: GO 22990
22916: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22917: LD_ADDR_VAR 0 2
22921: PUSH
22922: LD_INT 22
22924: PUSH
22925: LD_OWVAR 2
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 30
22936: PUSH
22937: LD_INT 29
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PPUSH
22948: CALL_OW 69
22952: ST_TO_ADDR
// if not tmp then
22953: LD_VAR 0 2
22957: NOT
22958: IFFALSE 22962
// exit ;
22960: GO 23012
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22962: LD_VAR 0 2
22966: PUSH
22967: LD_INT 1
22969: ARRAY
22970: PPUSH
22971: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22975: LD_VAR 0 2
22979: PUSH
22980: LD_INT 1
22982: ARRAY
22983: PPUSH
22984: CALL_OW 65
// end ; 5 .. 7 :
22988: GO 23012
22990: LD_INT 5
22992: DOUBLE
22993: GREATEREQUAL
22994: IFFALSE 23002
22996: LD_INT 7
22998: DOUBLE
22999: LESSEQUAL
23000: IFTRUE 23004
23002: GO 23011
23004: POP
// StreamSibBomb ; end ;
23005: CALL 19249 0 0
23009: GO 23012
23011: POP
// end ;
23012: PPOPN 3
23014: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23015: LD_EXP 22
23019: PUSH
23020: LD_EXP 72
23024: AND
23025: IFFALSE 23181
23027: GO 23029
23029: DISABLE
23030: LD_INT 0
23032: PPUSH
23033: PPUSH
23034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23035: LD_ADDR_VAR 0 2
23039: PUSH
23040: LD_INT 81
23042: PUSH
23043: LD_OWVAR 2
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 2
23054: PUSH
23055: LD_INT 21
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 21
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PPUSH
23084: CALL_OW 69
23088: ST_TO_ADDR
// if not tmp then
23089: LD_VAR 0 2
23093: NOT
23094: IFFALSE 23098
// exit ;
23096: GO 23181
// p := 0 ;
23098: LD_ADDR_VAR 0 3
23102: PUSH
23103: LD_INT 0
23105: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23106: LD_INT 35
23108: PPUSH
23109: CALL_OW 67
// p := p + 1 ;
23113: LD_ADDR_VAR 0 3
23117: PUSH
23118: LD_VAR 0 3
23122: PUSH
23123: LD_INT 1
23125: PLUS
23126: ST_TO_ADDR
// for i in tmp do
23127: LD_ADDR_VAR 0 1
23131: PUSH
23132: LD_VAR 0 2
23136: PUSH
23137: FOR_IN
23138: IFFALSE 23169
// if GetLives ( i ) < 1000 then
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL_OW 256
23149: PUSH
23150: LD_INT 1000
23152: LESS
23153: IFFALSE 23167
// SetLives ( i , 1000 ) ;
23155: LD_VAR 0 1
23159: PPUSH
23160: LD_INT 1000
23162: PPUSH
23163: CALL_OW 234
23167: GO 23137
23169: POP
23170: POP
// until p > 20 ;
23171: LD_VAR 0 3
23175: PUSH
23176: LD_INT 20
23178: GREATER
23179: IFFALSE 23106
// end ;
23181: PPOPN 3
23183: END
// every 0 0$1 trigger StreamModeActive and sTime do
23184: LD_EXP 22
23188: PUSH
23189: LD_EXP 73
23193: AND
23194: IFFALSE 23229
23196: GO 23198
23198: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23199: LD_INT 28
23201: PPUSH
23202: LD_OWVAR 2
23206: PPUSH
23207: LD_INT 2
23209: PPUSH
23210: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23214: LD_INT 30
23216: PPUSH
23217: LD_OWVAR 2
23221: PPUSH
23222: LD_INT 2
23224: PPUSH
23225: CALL_OW 322
// end ;
23229: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23230: LD_EXP 22
23234: PUSH
23235: LD_EXP 74
23239: AND
23240: IFFALSE 23361
23242: GO 23244
23244: DISABLE
23245: LD_INT 0
23247: PPUSH
23248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23249: LD_ADDR_VAR 0 2
23253: PUSH
23254: LD_INT 22
23256: PUSH
23257: LD_OWVAR 2
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 21
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 3
23278: PUSH
23279: LD_INT 23
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: PPUSH
23298: CALL_OW 69
23302: ST_TO_ADDR
// if not tmp then
23303: LD_VAR 0 2
23307: NOT
23308: IFFALSE 23312
// exit ;
23310: GO 23361
// for i in tmp do
23312: LD_ADDR_VAR 0 1
23316: PUSH
23317: LD_VAR 0 2
23321: PUSH
23322: FOR_IN
23323: IFFALSE 23359
// begin if Crawls ( i ) then
23325: LD_VAR 0 1
23329: PPUSH
23330: CALL_OW 318
23334: IFFALSE 23345
// ComWalk ( i ) ;
23336: LD_VAR 0 1
23340: PPUSH
23341: CALL_OW 138
// SetClass ( i , 2 ) ;
23345: LD_VAR 0 1
23349: PPUSH
23350: LD_INT 2
23352: PPUSH
23353: CALL_OW 336
// end ;
23357: GO 23322
23359: POP
23360: POP
// end ;
23361: PPOPN 2
23363: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23364: LD_EXP 22
23368: PUSH
23369: LD_EXP 75
23373: AND
23374: IFFALSE 23662
23376: GO 23378
23378: DISABLE
23379: LD_INT 0
23381: PPUSH
23382: PPUSH
23383: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23384: LD_OWVAR 2
23388: PPUSH
23389: LD_INT 9
23391: PPUSH
23392: LD_INT 1
23394: PPUSH
23395: LD_INT 1
23397: PPUSH
23398: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23402: LD_INT 9
23404: PPUSH
23405: LD_OWVAR 2
23409: PPUSH
23410: CALL_OW 343
// uc_side := 9 ;
23414: LD_ADDR_OWVAR 20
23418: PUSH
23419: LD_INT 9
23421: ST_TO_ADDR
// uc_nation := 2 ;
23422: LD_ADDR_OWVAR 21
23426: PUSH
23427: LD_INT 2
23429: ST_TO_ADDR
// hc_name := Dark Warrior ;
23430: LD_ADDR_OWVAR 26
23434: PUSH
23435: LD_STRING Dark Warrior
23437: ST_TO_ADDR
// hc_gallery :=  ;
23438: LD_ADDR_OWVAR 33
23442: PUSH
23443: LD_STRING 
23445: ST_TO_ADDR
// hc_noskilllimit := true ;
23446: LD_ADDR_OWVAR 76
23450: PUSH
23451: LD_INT 1
23453: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23454: LD_ADDR_OWVAR 31
23458: PUSH
23459: LD_INT 30
23461: PUSH
23462: LD_INT 30
23464: PUSH
23465: LD_INT 30
23467: PUSH
23468: LD_INT 30
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: ST_TO_ADDR
// un := CreateHuman ;
23477: LD_ADDR_VAR 0 3
23481: PUSH
23482: CALL_OW 44
23486: ST_TO_ADDR
// hc_noskilllimit := false ;
23487: LD_ADDR_OWVAR 76
23491: PUSH
23492: LD_INT 0
23494: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23495: LD_VAR 0 3
23499: PPUSH
23500: LD_INT 1
23502: PPUSH
23503: CALL_OW 51
// ToLua ( playRanger() ) ;
23507: LD_STRING playRanger()
23509: PPUSH
23510: CALL_OW 559
// p := 0 ;
23514: LD_ADDR_VAR 0 2
23518: PUSH
23519: LD_INT 0
23521: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23522: LD_INT 35
23524: PPUSH
23525: CALL_OW 67
// p := p + 1 ;
23529: LD_ADDR_VAR 0 2
23533: PUSH
23534: LD_VAR 0 2
23538: PUSH
23539: LD_INT 1
23541: PLUS
23542: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23543: LD_VAR 0 3
23547: PPUSH
23548: CALL_OW 256
23552: PUSH
23553: LD_INT 1000
23555: LESS
23556: IFFALSE 23570
// SetLives ( un , 1000 ) ;
23558: LD_VAR 0 3
23562: PPUSH
23563: LD_INT 1000
23565: PPUSH
23566: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23570: LD_VAR 0 3
23574: PPUSH
23575: LD_INT 81
23577: PUSH
23578: LD_OWVAR 2
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 91
23589: PUSH
23590: LD_VAR 0 3
23594: PUSH
23595: LD_INT 30
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PPUSH
23607: CALL_OW 69
23611: PPUSH
23612: LD_VAR 0 3
23616: PPUSH
23617: CALL_OW 74
23621: PPUSH
23622: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23626: LD_VAR 0 2
23630: PUSH
23631: LD_INT 80
23633: GREATER
23634: PUSH
23635: LD_VAR 0 3
23639: PPUSH
23640: CALL_OW 301
23644: OR
23645: IFFALSE 23522
// if un then
23647: LD_VAR 0 3
23651: IFFALSE 23662
// RemoveUnit ( un ) ;
23653: LD_VAR 0 3
23657: PPUSH
23658: CALL_OW 64
// end ;
23662: PPOPN 3
23664: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23665: LD_EXP 76
23669: IFFALSE 23785
23671: GO 23673
23673: DISABLE
23674: LD_INT 0
23676: PPUSH
23677: PPUSH
23678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23679: LD_ADDR_VAR 0 2
23683: PUSH
23684: LD_INT 81
23686: PUSH
23687: LD_OWVAR 2
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 21
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PPUSH
23710: CALL_OW 69
23714: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23715: LD_STRING playComputer()
23717: PPUSH
23718: CALL_OW 559
// if not tmp then
23722: LD_VAR 0 2
23726: NOT
23727: IFFALSE 23731
// exit ;
23729: GO 23785
// for i in tmp do
23731: LD_ADDR_VAR 0 1
23735: PUSH
23736: LD_VAR 0 2
23740: PUSH
23741: FOR_IN
23742: IFFALSE 23783
// for j := 1 to 4 do
23744: LD_ADDR_VAR 0 3
23748: PUSH
23749: DOUBLE
23750: LD_INT 1
23752: DEC
23753: ST_TO_ADDR
23754: LD_INT 4
23756: PUSH
23757: FOR_TO
23758: IFFALSE 23779
// SetSkill ( i , j , 10 ) ;
23760: LD_VAR 0 1
23764: PPUSH
23765: LD_VAR 0 3
23769: PPUSH
23770: LD_INT 10
23772: PPUSH
23773: CALL_OW 237
23777: GO 23757
23779: POP
23780: POP
23781: GO 23741
23783: POP
23784: POP
// end ;
23785: PPOPN 3
23787: END
// every 0 0$1 trigger s30 do var i , tmp ;
23788: LD_EXP 77
23792: IFFALSE 23861
23794: GO 23796
23796: DISABLE
23797: LD_INT 0
23799: PPUSH
23800: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23801: LD_ADDR_VAR 0 2
23805: PUSH
23806: LD_INT 22
23808: PUSH
23809: LD_OWVAR 2
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PPUSH
23818: CALL_OW 69
23822: ST_TO_ADDR
// if not tmp then
23823: LD_VAR 0 2
23827: NOT
23828: IFFALSE 23832
// exit ;
23830: GO 23861
// for i in tmp do
23832: LD_ADDR_VAR 0 1
23836: PUSH
23837: LD_VAR 0 2
23841: PUSH
23842: FOR_IN
23843: IFFALSE 23859
// SetLives ( i , 300 ) ;
23845: LD_VAR 0 1
23849: PPUSH
23850: LD_INT 300
23852: PPUSH
23853: CALL_OW 234
23857: GO 23842
23859: POP
23860: POP
// end ;
23861: PPOPN 2
23863: END
// every 0 0$1 trigger s60 do var i , tmp ;
23864: LD_EXP 78
23868: IFFALSE 23937
23870: GO 23872
23872: DISABLE
23873: LD_INT 0
23875: PPUSH
23876: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23877: LD_ADDR_VAR 0 2
23881: PUSH
23882: LD_INT 22
23884: PUSH
23885: LD_OWVAR 2
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PPUSH
23894: CALL_OW 69
23898: ST_TO_ADDR
// if not tmp then
23899: LD_VAR 0 2
23903: NOT
23904: IFFALSE 23908
// exit ;
23906: GO 23937
// for i in tmp do
23908: LD_ADDR_VAR 0 1
23912: PUSH
23913: LD_VAR 0 2
23917: PUSH
23918: FOR_IN
23919: IFFALSE 23935
// SetLives ( i , 600 ) ;
23921: LD_VAR 0 1
23925: PPUSH
23926: LD_INT 600
23928: PPUSH
23929: CALL_OW 234
23933: GO 23918
23935: POP
23936: POP
// end ;
23937: PPOPN 2
23939: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23940: LD_INT 0
23942: PPUSH
// case cmd of 301 :
23943: LD_VAR 0 1
23947: PUSH
23948: LD_INT 301
23950: DOUBLE
23951: EQUAL
23952: IFTRUE 23956
23954: GO 23988
23956: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23957: LD_VAR 0 6
23961: PPUSH
23962: LD_VAR 0 7
23966: PPUSH
23967: LD_VAR 0 8
23971: PPUSH
23972: LD_VAR 0 4
23976: PPUSH
23977: LD_VAR 0 5
23981: PPUSH
23982: CALL 25189 0 5
23986: GO 24109
23988: LD_INT 302
23990: DOUBLE
23991: EQUAL
23992: IFTRUE 23996
23994: GO 24033
23996: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23997: LD_VAR 0 6
24001: PPUSH
24002: LD_VAR 0 7
24006: PPUSH
24007: LD_VAR 0 8
24011: PPUSH
24012: LD_VAR 0 9
24016: PPUSH
24017: LD_VAR 0 4
24021: PPUSH
24022: LD_VAR 0 5
24026: PPUSH
24027: CALL 25280 0 6
24031: GO 24109
24033: LD_INT 303
24035: DOUBLE
24036: EQUAL
24037: IFTRUE 24041
24039: GO 24078
24041: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24042: LD_VAR 0 6
24046: PPUSH
24047: LD_VAR 0 7
24051: PPUSH
24052: LD_VAR 0 8
24056: PPUSH
24057: LD_VAR 0 9
24061: PPUSH
24062: LD_VAR 0 4
24066: PPUSH
24067: LD_VAR 0 5
24071: PPUSH
24072: CALL 24114 0 6
24076: GO 24109
24078: LD_INT 304
24080: DOUBLE
24081: EQUAL
24082: IFTRUE 24086
24084: GO 24108
24086: POP
// hHackTeleport ( unit , x , y ) ; end ;
24087: LD_VAR 0 2
24091: PPUSH
24092: LD_VAR 0 4
24096: PPUSH
24097: LD_VAR 0 5
24101: PPUSH
24102: CALL 25873 0 3
24106: GO 24109
24108: POP
// end ;
24109: LD_VAR 0 12
24113: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24114: LD_INT 0
24116: PPUSH
24117: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24118: LD_VAR 0 1
24122: PUSH
24123: LD_INT 1
24125: LESS
24126: PUSH
24127: LD_VAR 0 1
24131: PUSH
24132: LD_INT 3
24134: GREATER
24135: OR
24136: PUSH
24137: LD_VAR 0 5
24141: PPUSH
24142: LD_VAR 0 6
24146: PPUSH
24147: CALL_OW 428
24151: OR
24152: IFFALSE 24156
// exit ;
24154: GO 24876
// uc_side := your_side ;
24156: LD_ADDR_OWVAR 20
24160: PUSH
24161: LD_OWVAR 2
24165: ST_TO_ADDR
// uc_nation := nation ;
24166: LD_ADDR_OWVAR 21
24170: PUSH
24171: LD_VAR 0 1
24175: ST_TO_ADDR
// bc_level = 1 ;
24176: LD_ADDR_OWVAR 43
24180: PUSH
24181: LD_INT 1
24183: ST_TO_ADDR
// case btype of 1 :
24184: LD_VAR 0 2
24188: PUSH
24189: LD_INT 1
24191: DOUBLE
24192: EQUAL
24193: IFTRUE 24197
24195: GO 24208
24197: POP
// bc_type := b_depot ; 2 :
24198: LD_ADDR_OWVAR 42
24202: PUSH
24203: LD_INT 0
24205: ST_TO_ADDR
24206: GO 24820
24208: LD_INT 2
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24227
24216: POP
// bc_type := b_warehouse ; 3 :
24217: LD_ADDR_OWVAR 42
24221: PUSH
24222: LD_INT 1
24224: ST_TO_ADDR
24225: GO 24820
24227: LD_INT 3
24229: DOUBLE
24230: EQUAL
24231: IFTRUE 24235
24233: GO 24246
24235: POP
// bc_type := b_lab ; 4 .. 9 :
24236: LD_ADDR_OWVAR 42
24240: PUSH
24241: LD_INT 6
24243: ST_TO_ADDR
24244: GO 24820
24246: LD_INT 4
24248: DOUBLE
24249: GREATEREQUAL
24250: IFFALSE 24258
24252: LD_INT 9
24254: DOUBLE
24255: LESSEQUAL
24256: IFTRUE 24260
24258: GO 24312
24260: POP
// begin bc_type := b_lab_half ;
24261: LD_ADDR_OWVAR 42
24265: PUSH
24266: LD_INT 7
24268: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24269: LD_ADDR_OWVAR 44
24273: PUSH
24274: LD_INT 10
24276: PUSH
24277: LD_INT 11
24279: PUSH
24280: LD_INT 12
24282: PUSH
24283: LD_INT 15
24285: PUSH
24286: LD_INT 14
24288: PUSH
24289: LD_INT 13
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: PUSH
24300: LD_VAR 0 2
24304: PUSH
24305: LD_INT 3
24307: MINUS
24308: ARRAY
24309: ST_TO_ADDR
// end ; 10 .. 13 :
24310: GO 24820
24312: LD_INT 10
24314: DOUBLE
24315: GREATEREQUAL
24316: IFFALSE 24324
24318: LD_INT 13
24320: DOUBLE
24321: LESSEQUAL
24322: IFTRUE 24326
24324: GO 24403
24326: POP
// begin bc_type := b_lab_full ;
24327: LD_ADDR_OWVAR 42
24331: PUSH
24332: LD_INT 8
24334: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24335: LD_ADDR_OWVAR 44
24339: PUSH
24340: LD_INT 10
24342: PUSH
24343: LD_INT 12
24345: PUSH
24346: LD_INT 14
24348: PUSH
24349: LD_INT 13
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: PUSH
24358: LD_VAR 0 2
24362: PUSH
24363: LD_INT 9
24365: MINUS
24366: ARRAY
24367: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24368: LD_ADDR_OWVAR 45
24372: PUSH
24373: LD_INT 11
24375: PUSH
24376: LD_INT 15
24378: PUSH
24379: LD_INT 12
24381: PUSH
24382: LD_INT 15
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: PUSH
24391: LD_VAR 0 2
24395: PUSH
24396: LD_INT 9
24398: MINUS
24399: ARRAY
24400: ST_TO_ADDR
// end ; 14 :
24401: GO 24820
24403: LD_INT 14
24405: DOUBLE
24406: EQUAL
24407: IFTRUE 24411
24409: GO 24422
24411: POP
// bc_type := b_workshop ; 15 :
24412: LD_ADDR_OWVAR 42
24416: PUSH
24417: LD_INT 2
24419: ST_TO_ADDR
24420: GO 24820
24422: LD_INT 15
24424: DOUBLE
24425: EQUAL
24426: IFTRUE 24430
24428: GO 24441
24430: POP
// bc_type := b_factory ; 16 :
24431: LD_ADDR_OWVAR 42
24435: PUSH
24436: LD_INT 3
24438: ST_TO_ADDR
24439: GO 24820
24441: LD_INT 16
24443: DOUBLE
24444: EQUAL
24445: IFTRUE 24449
24447: GO 24460
24449: POP
// bc_type := b_ext_gun ; 17 :
24450: LD_ADDR_OWVAR 42
24454: PUSH
24455: LD_INT 17
24457: ST_TO_ADDR
24458: GO 24820
24460: LD_INT 17
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24496
24468: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24469: LD_ADDR_OWVAR 42
24473: PUSH
24474: LD_INT 19
24476: PUSH
24477: LD_INT 23
24479: PUSH
24480: LD_INT 19
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: PUSH
24488: LD_VAR 0 1
24492: ARRAY
24493: ST_TO_ADDR
24494: GO 24820
24496: LD_INT 18
24498: DOUBLE
24499: EQUAL
24500: IFTRUE 24504
24502: GO 24515
24504: POP
// bc_type := b_ext_radar ; 19 :
24505: LD_ADDR_OWVAR 42
24509: PUSH
24510: LD_INT 20
24512: ST_TO_ADDR
24513: GO 24820
24515: LD_INT 19
24517: DOUBLE
24518: EQUAL
24519: IFTRUE 24523
24521: GO 24534
24523: POP
// bc_type := b_ext_radio ; 20 :
24524: LD_ADDR_OWVAR 42
24528: PUSH
24529: LD_INT 22
24531: ST_TO_ADDR
24532: GO 24820
24534: LD_INT 20
24536: DOUBLE
24537: EQUAL
24538: IFTRUE 24542
24540: GO 24553
24542: POP
// bc_type := b_ext_siberium ; 21 :
24543: LD_ADDR_OWVAR 42
24547: PUSH
24548: LD_INT 21
24550: ST_TO_ADDR
24551: GO 24820
24553: LD_INT 21
24555: DOUBLE
24556: EQUAL
24557: IFTRUE 24561
24559: GO 24572
24561: POP
// bc_type := b_ext_computer ; 22 :
24562: LD_ADDR_OWVAR 42
24566: PUSH
24567: LD_INT 24
24569: ST_TO_ADDR
24570: GO 24820
24572: LD_INT 22
24574: DOUBLE
24575: EQUAL
24576: IFTRUE 24580
24578: GO 24591
24580: POP
// bc_type := b_ext_track ; 23 :
24581: LD_ADDR_OWVAR 42
24585: PUSH
24586: LD_INT 16
24588: ST_TO_ADDR
24589: GO 24820
24591: LD_INT 23
24593: DOUBLE
24594: EQUAL
24595: IFTRUE 24599
24597: GO 24610
24599: POP
// bc_type := b_ext_laser ; 24 :
24600: LD_ADDR_OWVAR 42
24604: PUSH
24605: LD_INT 25
24607: ST_TO_ADDR
24608: GO 24820
24610: LD_INT 24
24612: DOUBLE
24613: EQUAL
24614: IFTRUE 24618
24616: GO 24629
24618: POP
// bc_type := b_control_tower ; 25 :
24619: LD_ADDR_OWVAR 42
24623: PUSH
24624: LD_INT 36
24626: ST_TO_ADDR
24627: GO 24820
24629: LD_INT 25
24631: DOUBLE
24632: EQUAL
24633: IFTRUE 24637
24635: GO 24648
24637: POP
// bc_type := b_breastwork ; 26 :
24638: LD_ADDR_OWVAR 42
24642: PUSH
24643: LD_INT 31
24645: ST_TO_ADDR
24646: GO 24820
24648: LD_INT 26
24650: DOUBLE
24651: EQUAL
24652: IFTRUE 24656
24654: GO 24667
24656: POP
// bc_type := b_bunker ; 27 :
24657: LD_ADDR_OWVAR 42
24661: PUSH
24662: LD_INT 32
24664: ST_TO_ADDR
24665: GO 24820
24667: LD_INT 27
24669: DOUBLE
24670: EQUAL
24671: IFTRUE 24675
24673: GO 24686
24675: POP
// bc_type := b_turret ; 28 :
24676: LD_ADDR_OWVAR 42
24680: PUSH
24681: LD_INT 33
24683: ST_TO_ADDR
24684: GO 24820
24686: LD_INT 28
24688: DOUBLE
24689: EQUAL
24690: IFTRUE 24694
24692: GO 24705
24694: POP
// bc_type := b_armoury ; 29 :
24695: LD_ADDR_OWVAR 42
24699: PUSH
24700: LD_INT 4
24702: ST_TO_ADDR
24703: GO 24820
24705: LD_INT 29
24707: DOUBLE
24708: EQUAL
24709: IFTRUE 24713
24711: GO 24724
24713: POP
// bc_type := b_barracks ; 30 :
24714: LD_ADDR_OWVAR 42
24718: PUSH
24719: LD_INT 5
24721: ST_TO_ADDR
24722: GO 24820
24724: LD_INT 30
24726: DOUBLE
24727: EQUAL
24728: IFTRUE 24732
24730: GO 24743
24732: POP
// bc_type := b_solar_power ; 31 :
24733: LD_ADDR_OWVAR 42
24737: PUSH
24738: LD_INT 27
24740: ST_TO_ADDR
24741: GO 24820
24743: LD_INT 31
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24762
24751: POP
// bc_type := b_oil_power ; 32 :
24752: LD_ADDR_OWVAR 42
24756: PUSH
24757: LD_INT 26
24759: ST_TO_ADDR
24760: GO 24820
24762: LD_INT 32
24764: DOUBLE
24765: EQUAL
24766: IFTRUE 24770
24768: GO 24781
24770: POP
// bc_type := b_siberite_power ; 33 :
24771: LD_ADDR_OWVAR 42
24775: PUSH
24776: LD_INT 28
24778: ST_TO_ADDR
24779: GO 24820
24781: LD_INT 33
24783: DOUBLE
24784: EQUAL
24785: IFTRUE 24789
24787: GO 24800
24789: POP
// bc_type := b_oil_mine ; 34 :
24790: LD_ADDR_OWVAR 42
24794: PUSH
24795: LD_INT 29
24797: ST_TO_ADDR
24798: GO 24820
24800: LD_INT 34
24802: DOUBLE
24803: EQUAL
24804: IFTRUE 24808
24806: GO 24819
24808: POP
// bc_type := b_siberite_mine ; end ;
24809: LD_ADDR_OWVAR 42
24813: PUSH
24814: LD_INT 30
24816: ST_TO_ADDR
24817: GO 24820
24819: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24820: LD_ADDR_VAR 0 8
24824: PUSH
24825: LD_VAR 0 5
24829: PPUSH
24830: LD_VAR 0 6
24834: PPUSH
24835: LD_VAR 0 3
24839: PPUSH
24840: CALL_OW 47
24844: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24845: LD_OWVAR 42
24849: PUSH
24850: LD_INT 32
24852: PUSH
24853: LD_INT 33
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: IN
24860: IFFALSE 24876
// PlaceWeaponTurret ( b , weapon ) ;
24862: LD_VAR 0 8
24866: PPUSH
24867: LD_VAR 0 4
24871: PPUSH
24872: CALL_OW 431
// end ;
24876: LD_VAR 0 7
24880: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24881: LD_INT 0
24883: PPUSH
24884: PPUSH
24885: PPUSH
24886: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24887: LD_ADDR_VAR 0 4
24891: PUSH
24892: LD_INT 22
24894: PUSH
24895: LD_OWVAR 2
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: LD_INT 30
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 1
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PPUSH
24936: CALL_OW 69
24940: ST_TO_ADDR
// if not tmp then
24941: LD_VAR 0 4
24945: NOT
24946: IFFALSE 24950
// exit ;
24948: GO 25009
// for i in tmp do
24950: LD_ADDR_VAR 0 2
24954: PUSH
24955: LD_VAR 0 4
24959: PUSH
24960: FOR_IN
24961: IFFALSE 25007
// for j = 1 to 3 do
24963: LD_ADDR_VAR 0 3
24967: PUSH
24968: DOUBLE
24969: LD_INT 1
24971: DEC
24972: ST_TO_ADDR
24973: LD_INT 3
24975: PUSH
24976: FOR_TO
24977: IFFALSE 25003
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24979: LD_VAR 0 2
24983: PPUSH
24984: CALL_OW 274
24988: PPUSH
24989: LD_VAR 0 3
24993: PPUSH
24994: LD_INT 99999
24996: PPUSH
24997: CALL_OW 277
25001: GO 24976
25003: POP
25004: POP
25005: GO 24960
25007: POP
25008: POP
// end ;
25009: LD_VAR 0 1
25013: RET
// export function hHackSetLevel10 ; var i , j ; begin
25014: LD_INT 0
25016: PPUSH
25017: PPUSH
25018: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25019: LD_ADDR_VAR 0 2
25023: PUSH
25024: LD_INT 21
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PPUSH
25034: CALL_OW 69
25038: PUSH
25039: FOR_IN
25040: IFFALSE 25092
// if IsSelected ( i ) then
25042: LD_VAR 0 2
25046: PPUSH
25047: CALL_OW 306
25051: IFFALSE 25090
// begin for j := 1 to 4 do
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: DOUBLE
25059: LD_INT 1
25061: DEC
25062: ST_TO_ADDR
25063: LD_INT 4
25065: PUSH
25066: FOR_TO
25067: IFFALSE 25088
// SetSkill ( i , j , 10 ) ;
25069: LD_VAR 0 2
25073: PPUSH
25074: LD_VAR 0 3
25078: PPUSH
25079: LD_INT 10
25081: PPUSH
25082: CALL_OW 237
25086: GO 25066
25088: POP
25089: POP
// end ;
25090: GO 25039
25092: POP
25093: POP
// end ;
25094: LD_VAR 0 1
25098: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25099: LD_INT 0
25101: PPUSH
25102: PPUSH
25103: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25104: LD_ADDR_VAR 0 2
25108: PUSH
25109: LD_INT 22
25111: PUSH
25112: LD_OWVAR 2
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 21
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PPUSH
25135: CALL_OW 69
25139: PUSH
25140: FOR_IN
25141: IFFALSE 25182
// begin for j := 1 to 4 do
25143: LD_ADDR_VAR 0 3
25147: PUSH
25148: DOUBLE
25149: LD_INT 1
25151: DEC
25152: ST_TO_ADDR
25153: LD_INT 4
25155: PUSH
25156: FOR_TO
25157: IFFALSE 25178
// SetSkill ( i , j , 10 ) ;
25159: LD_VAR 0 2
25163: PPUSH
25164: LD_VAR 0 3
25168: PPUSH
25169: LD_INT 10
25171: PPUSH
25172: CALL_OW 237
25176: GO 25156
25178: POP
25179: POP
// end ;
25180: GO 25140
25182: POP
25183: POP
// end ;
25184: LD_VAR 0 1
25188: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25189: LD_INT 0
25191: PPUSH
// uc_side := your_side ;
25192: LD_ADDR_OWVAR 20
25196: PUSH
25197: LD_OWVAR 2
25201: ST_TO_ADDR
// uc_nation := nation ;
25202: LD_ADDR_OWVAR 21
25206: PUSH
25207: LD_VAR 0 1
25211: ST_TO_ADDR
// InitHc ;
25212: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25216: LD_INT 0
25218: PPUSH
25219: LD_VAR 0 2
25223: PPUSH
25224: LD_VAR 0 3
25228: PPUSH
25229: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25233: LD_VAR 0 4
25237: PPUSH
25238: LD_VAR 0 5
25242: PPUSH
25243: CALL_OW 428
25247: PUSH
25248: LD_INT 0
25250: EQUAL
25251: IFFALSE 25275
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25253: CALL_OW 44
25257: PPUSH
25258: LD_VAR 0 4
25262: PPUSH
25263: LD_VAR 0 5
25267: PPUSH
25268: LD_INT 1
25270: PPUSH
25271: CALL_OW 48
// end ;
25275: LD_VAR 0 6
25279: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25280: LD_INT 0
25282: PPUSH
25283: PPUSH
// uc_side := your_side ;
25284: LD_ADDR_OWVAR 20
25288: PUSH
25289: LD_OWVAR 2
25293: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25294: LD_VAR 0 1
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: LD_INT 2
25304: PUSH
25305: LD_INT 3
25307: PUSH
25308: LD_INT 4
25310: PUSH
25311: LD_INT 5
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: IN
25321: IFFALSE 25333
// uc_nation := nation_american else
25323: LD_ADDR_OWVAR 21
25327: PUSH
25328: LD_INT 1
25330: ST_TO_ADDR
25331: GO 25376
// if chassis in [ 11 , 12 , 13 , 14 ] then
25333: LD_VAR 0 1
25337: PUSH
25338: LD_INT 11
25340: PUSH
25341: LD_INT 12
25343: PUSH
25344: LD_INT 13
25346: PUSH
25347: LD_INT 14
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: IN
25356: IFFALSE 25368
// uc_nation := nation_arabian else
25358: LD_ADDR_OWVAR 21
25362: PUSH
25363: LD_INT 2
25365: ST_TO_ADDR
25366: GO 25376
// uc_nation := nation_russian ;
25368: LD_ADDR_OWVAR 21
25372: PUSH
25373: LD_INT 3
25375: ST_TO_ADDR
// vc_chassis := chassis ;
25376: LD_ADDR_OWVAR 37
25380: PUSH
25381: LD_VAR 0 1
25385: ST_TO_ADDR
// vc_engine := engine ;
25386: LD_ADDR_OWVAR 39
25390: PUSH
25391: LD_VAR 0 2
25395: ST_TO_ADDR
// vc_control := control ;
25396: LD_ADDR_OWVAR 38
25400: PUSH
25401: LD_VAR 0 3
25405: ST_TO_ADDR
// vc_weapon := weapon ;
25406: LD_ADDR_OWVAR 40
25410: PUSH
25411: LD_VAR 0 4
25415: ST_TO_ADDR
// un := CreateVehicle ;
25416: LD_ADDR_VAR 0 8
25420: PUSH
25421: CALL_OW 45
25425: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25426: LD_VAR 0 8
25430: PPUSH
25431: LD_INT 0
25433: PPUSH
25434: LD_INT 5
25436: PPUSH
25437: CALL_OW 12
25441: PPUSH
25442: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25446: LD_VAR 0 8
25450: PPUSH
25451: LD_VAR 0 5
25455: PPUSH
25456: LD_VAR 0 6
25460: PPUSH
25461: LD_INT 1
25463: PPUSH
25464: CALL_OW 48
// end ;
25468: LD_VAR 0 7
25472: RET
// export hInvincible ; every 1 do
25473: GO 25475
25475: DISABLE
// hInvincible := [ ] ;
25476: LD_ADDR_EXP 79
25480: PUSH
25481: EMPTY
25482: ST_TO_ADDR
25483: END
// every 10 do var i ;
25484: GO 25486
25486: DISABLE
25487: LD_INT 0
25489: PPUSH
// begin enable ;
25490: ENABLE
// if not hInvincible then
25491: LD_EXP 79
25495: NOT
25496: IFFALSE 25500
// exit ;
25498: GO 25544
// for i in hInvincible do
25500: LD_ADDR_VAR 0 1
25504: PUSH
25505: LD_EXP 79
25509: PUSH
25510: FOR_IN
25511: IFFALSE 25542
// if GetLives ( i ) < 1000 then
25513: LD_VAR 0 1
25517: PPUSH
25518: CALL_OW 256
25522: PUSH
25523: LD_INT 1000
25525: LESS
25526: IFFALSE 25540
// SetLives ( i , 1000 ) ;
25528: LD_VAR 0 1
25532: PPUSH
25533: LD_INT 1000
25535: PPUSH
25536: CALL_OW 234
25540: GO 25510
25542: POP
25543: POP
// end ;
25544: PPOPN 1
25546: END
// export function hHackInvincible ; var i ; begin
25547: LD_INT 0
25549: PPUSH
25550: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25551: LD_ADDR_VAR 0 2
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: LD_INT 21
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: PPUSH
25584: CALL_OW 69
25588: PUSH
25589: FOR_IN
25590: IFFALSE 25651
// if IsSelected ( i ) then
25592: LD_VAR 0 2
25596: PPUSH
25597: CALL_OW 306
25601: IFFALSE 25649
// begin if i in hInvincible then
25603: LD_VAR 0 2
25607: PUSH
25608: LD_EXP 79
25612: IN
25613: IFFALSE 25633
// hInvincible := hInvincible diff i else
25615: LD_ADDR_EXP 79
25619: PUSH
25620: LD_EXP 79
25624: PUSH
25625: LD_VAR 0 2
25629: DIFF
25630: ST_TO_ADDR
25631: GO 25649
// hInvincible := hInvincible union i ;
25633: LD_ADDR_EXP 79
25637: PUSH
25638: LD_EXP 79
25642: PUSH
25643: LD_VAR 0 2
25647: UNION
25648: ST_TO_ADDR
// end ;
25649: GO 25589
25651: POP
25652: POP
// end ;
25653: LD_VAR 0 1
25657: RET
// export function hHackInvisible ; var i , j ; begin
25658: LD_INT 0
25660: PPUSH
25661: PPUSH
25662: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25663: LD_ADDR_VAR 0 2
25667: PUSH
25668: LD_INT 21
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PPUSH
25678: CALL_OW 69
25682: PUSH
25683: FOR_IN
25684: IFFALSE 25708
// if IsSelected ( i ) then
25686: LD_VAR 0 2
25690: PPUSH
25691: CALL_OW 306
25695: IFFALSE 25706
// ComForceInvisible ( i ) ;
25697: LD_VAR 0 2
25701: PPUSH
25702: CALL_OW 496
25706: GO 25683
25708: POP
25709: POP
// end ;
25710: LD_VAR 0 1
25714: RET
// export function hHackChangeYourSide ; begin
25715: LD_INT 0
25717: PPUSH
// if your_side = 8 then
25718: LD_OWVAR 2
25722: PUSH
25723: LD_INT 8
25725: EQUAL
25726: IFFALSE 25738
// your_side := 0 else
25728: LD_ADDR_OWVAR 2
25732: PUSH
25733: LD_INT 0
25735: ST_TO_ADDR
25736: GO 25752
// your_side := your_side + 1 ;
25738: LD_ADDR_OWVAR 2
25742: PUSH
25743: LD_OWVAR 2
25747: PUSH
25748: LD_INT 1
25750: PLUS
25751: ST_TO_ADDR
// end ;
25752: LD_VAR 0 1
25756: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25757: LD_INT 0
25759: PPUSH
25760: PPUSH
25761: PPUSH
// for i in all_units do
25762: LD_ADDR_VAR 0 2
25766: PUSH
25767: LD_OWVAR 3
25771: PUSH
25772: FOR_IN
25773: IFFALSE 25851
// if IsSelected ( i ) then
25775: LD_VAR 0 2
25779: PPUSH
25780: CALL_OW 306
25784: IFFALSE 25849
// begin j := GetSide ( i ) ;
25786: LD_ADDR_VAR 0 3
25790: PUSH
25791: LD_VAR 0 2
25795: PPUSH
25796: CALL_OW 255
25800: ST_TO_ADDR
// if j = 8 then
25801: LD_VAR 0 3
25805: PUSH
25806: LD_INT 8
25808: EQUAL
25809: IFFALSE 25821
// j := 0 else
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_INT 0
25818: ST_TO_ADDR
25819: GO 25835
// j := j + 1 ;
25821: LD_ADDR_VAR 0 3
25825: PUSH
25826: LD_VAR 0 3
25830: PUSH
25831: LD_INT 1
25833: PLUS
25834: ST_TO_ADDR
// SetSide ( i , j ) ;
25835: LD_VAR 0 2
25839: PPUSH
25840: LD_VAR 0 3
25844: PPUSH
25845: CALL_OW 235
// end ;
25849: GO 25772
25851: POP
25852: POP
// end ;
25853: LD_VAR 0 1
25857: RET
// export function hHackFog ; begin
25858: LD_INT 0
25860: PPUSH
// FogOff ( true ) ;
25861: LD_INT 1
25863: PPUSH
25864: CALL_OW 344
// end ;
25868: LD_VAR 0 1
25872: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25873: LD_INT 0
25875: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25876: LD_VAR 0 1
25880: PPUSH
25881: LD_VAR 0 2
25885: PPUSH
25886: LD_VAR 0 3
25890: PPUSH
25891: LD_INT 1
25893: PPUSH
25894: LD_INT 1
25896: PPUSH
25897: CALL_OW 483
// CenterOnXY ( x , y ) ;
25901: LD_VAR 0 2
25905: PPUSH
25906: LD_VAR 0 3
25910: PPUSH
25911: CALL_OW 84
// end ;
25915: LD_VAR 0 4
25919: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25920: LD_INT 0
25922: PPUSH
25923: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25924: LD_VAR 0 1
25928: NOT
25929: PUSH
25930: LD_VAR 0 2
25934: PPUSH
25935: LD_VAR 0 3
25939: PPUSH
25940: CALL_OW 488
25944: NOT
25945: OR
25946: PUSH
25947: LD_VAR 0 1
25951: PPUSH
25952: CALL_OW 266
25956: PUSH
25957: LD_INT 3
25959: NONEQUAL
25960: PUSH
25961: LD_VAR 0 1
25965: PPUSH
25966: CALL_OW 247
25970: PUSH
25971: LD_INT 1
25973: EQUAL
25974: NOT
25975: AND
25976: OR
25977: IFFALSE 25981
// exit ;
25979: GO 26130
// if GetType ( factory ) = unit_human then
25981: LD_VAR 0 1
25985: PPUSH
25986: CALL_OW 247
25990: PUSH
25991: LD_INT 1
25993: EQUAL
25994: IFFALSE 26011
// factory := IsInUnit ( factory ) ;
25996: LD_ADDR_VAR 0 1
26000: PUSH
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 310
26010: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26011: LD_VAR 0 1
26015: PPUSH
26016: CALL_OW 266
26020: PUSH
26021: LD_INT 3
26023: NONEQUAL
26024: IFFALSE 26028
// exit ;
26026: GO 26130
// if HexInfo ( x , y ) = factory then
26028: LD_VAR 0 2
26032: PPUSH
26033: LD_VAR 0 3
26037: PPUSH
26038: CALL_OW 428
26042: PUSH
26043: LD_VAR 0 1
26047: EQUAL
26048: IFFALSE 26075
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26050: LD_ADDR_EXP 80
26054: PUSH
26055: LD_EXP 80
26059: PPUSH
26060: LD_VAR 0 1
26064: PPUSH
26065: LD_INT 0
26067: PPUSH
26068: CALL_OW 1
26072: ST_TO_ADDR
26073: GO 26126
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26075: LD_ADDR_EXP 80
26079: PUSH
26080: LD_EXP 80
26084: PPUSH
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 255
26099: PUSH
26100: LD_VAR 0 1
26104: PUSH
26105: LD_VAR 0 2
26109: PUSH
26110: LD_VAR 0 3
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: PPUSH
26121: CALL_OW 1
26125: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26126: CALL 26135 0 0
// end ;
26130: LD_VAR 0 4
26134: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26135: LD_INT 0
26137: PPUSH
26138: PPUSH
26139: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26140: LD_STRING resetFactoryWaypoint();
26142: PPUSH
26143: CALL_OW 559
// if factoryWaypoints then
26147: LD_EXP 80
26151: IFFALSE 26277
// begin list := PrepareArray ( factoryWaypoints ) ;
26153: LD_ADDR_VAR 0 3
26157: PUSH
26158: LD_EXP 80
26162: PPUSH
26163: CALL 72746 0 1
26167: ST_TO_ADDR
// for i := 1 to list do
26168: LD_ADDR_VAR 0 2
26172: PUSH
26173: DOUBLE
26174: LD_INT 1
26176: DEC
26177: ST_TO_ADDR
26178: LD_VAR 0 3
26182: PUSH
26183: FOR_TO
26184: IFFALSE 26275
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26186: LD_STRING setFactoryWaypointXY(
26188: PUSH
26189: LD_VAR 0 3
26193: PUSH
26194: LD_VAR 0 2
26198: ARRAY
26199: PUSH
26200: LD_INT 1
26202: ARRAY
26203: STR
26204: PUSH
26205: LD_STRING ,
26207: STR
26208: PUSH
26209: LD_VAR 0 3
26213: PUSH
26214: LD_VAR 0 2
26218: ARRAY
26219: PUSH
26220: LD_INT 2
26222: ARRAY
26223: STR
26224: PUSH
26225: LD_STRING ,
26227: STR
26228: PUSH
26229: LD_VAR 0 3
26233: PUSH
26234: LD_VAR 0 2
26238: ARRAY
26239: PUSH
26240: LD_INT 3
26242: ARRAY
26243: STR
26244: PUSH
26245: LD_STRING ,
26247: STR
26248: PUSH
26249: LD_VAR 0 3
26253: PUSH
26254: LD_VAR 0 2
26258: ARRAY
26259: PUSH
26260: LD_INT 4
26262: ARRAY
26263: STR
26264: PUSH
26265: LD_STRING )
26267: STR
26268: PPUSH
26269: CALL_OW 559
26273: GO 26183
26275: POP
26276: POP
// end ; end ;
26277: LD_VAR 0 1
26281: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26282: LD_INT 0
26284: PPUSH
// if HexInfo ( x , y ) = warehouse then
26285: LD_VAR 0 2
26289: PPUSH
26290: LD_VAR 0 3
26294: PPUSH
26295: CALL_OW 428
26299: PUSH
26300: LD_VAR 0 1
26304: EQUAL
26305: IFFALSE 26332
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26307: LD_ADDR_EXP 81
26311: PUSH
26312: LD_EXP 81
26316: PPUSH
26317: LD_VAR 0 1
26321: PPUSH
26322: LD_INT 0
26324: PPUSH
26325: CALL_OW 1
26329: ST_TO_ADDR
26330: GO 26383
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26332: LD_ADDR_EXP 81
26336: PUSH
26337: LD_EXP 81
26341: PPUSH
26342: LD_VAR 0 1
26346: PPUSH
26347: LD_VAR 0 1
26351: PPUSH
26352: CALL_OW 255
26356: PUSH
26357: LD_VAR 0 1
26361: PUSH
26362: LD_VAR 0 2
26366: PUSH
26367: LD_VAR 0 3
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: PPUSH
26378: CALL_OW 1
26382: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26383: CALL 26392 0 0
// end ;
26387: LD_VAR 0 4
26391: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26392: LD_INT 0
26394: PPUSH
26395: PPUSH
26396: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26397: LD_STRING resetWarehouseGatheringPoints();
26399: PPUSH
26400: CALL_OW 559
// if warehouseGatheringPoints then
26404: LD_EXP 81
26408: IFFALSE 26534
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26410: LD_ADDR_VAR 0 3
26414: PUSH
26415: LD_EXP 81
26419: PPUSH
26420: CALL 72746 0 1
26424: ST_TO_ADDR
// for i := 1 to list do
26425: LD_ADDR_VAR 0 2
26429: PUSH
26430: DOUBLE
26431: LD_INT 1
26433: DEC
26434: ST_TO_ADDR
26435: LD_VAR 0 3
26439: PUSH
26440: FOR_TO
26441: IFFALSE 26532
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26443: LD_STRING setWarehouseGatheringPointXY(
26445: PUSH
26446: LD_VAR 0 3
26450: PUSH
26451: LD_VAR 0 2
26455: ARRAY
26456: PUSH
26457: LD_INT 1
26459: ARRAY
26460: STR
26461: PUSH
26462: LD_STRING ,
26464: STR
26465: PUSH
26466: LD_VAR 0 3
26470: PUSH
26471: LD_VAR 0 2
26475: ARRAY
26476: PUSH
26477: LD_INT 2
26479: ARRAY
26480: STR
26481: PUSH
26482: LD_STRING ,
26484: STR
26485: PUSH
26486: LD_VAR 0 3
26490: PUSH
26491: LD_VAR 0 2
26495: ARRAY
26496: PUSH
26497: LD_INT 3
26499: ARRAY
26500: STR
26501: PUSH
26502: LD_STRING ,
26504: STR
26505: PUSH
26506: LD_VAR 0 3
26510: PUSH
26511: LD_VAR 0 2
26515: ARRAY
26516: PUSH
26517: LD_INT 4
26519: ARRAY
26520: STR
26521: PUSH
26522: LD_STRING )
26524: STR
26525: PPUSH
26526: CALL_OW 559
26530: GO 26440
26532: POP
26533: POP
// end ; end ;
26534: LD_VAR 0 1
26538: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26539: LD_EXP 81
26543: IFFALSE 27228
26545: GO 26547
26547: DISABLE
26548: LD_INT 0
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
26554: PPUSH
26555: PPUSH
26556: PPUSH
26557: PPUSH
26558: PPUSH
// begin enable ;
26559: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26560: LD_ADDR_VAR 0 3
26564: PUSH
26565: LD_EXP 81
26569: PPUSH
26570: CALL 72746 0 1
26574: ST_TO_ADDR
// if not list then
26575: LD_VAR 0 3
26579: NOT
26580: IFFALSE 26584
// exit ;
26582: GO 27228
// for i := 1 to list do
26584: LD_ADDR_VAR 0 1
26588: PUSH
26589: DOUBLE
26590: LD_INT 1
26592: DEC
26593: ST_TO_ADDR
26594: LD_VAR 0 3
26598: PUSH
26599: FOR_TO
26600: IFFALSE 27226
// begin depot := list [ i ] [ 2 ] ;
26602: LD_ADDR_VAR 0 8
26606: PUSH
26607: LD_VAR 0 3
26611: PUSH
26612: LD_VAR 0 1
26616: ARRAY
26617: PUSH
26618: LD_INT 2
26620: ARRAY
26621: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26622: LD_ADDR_VAR 0 5
26626: PUSH
26627: LD_VAR 0 3
26631: PUSH
26632: LD_VAR 0 1
26636: ARRAY
26637: PUSH
26638: LD_INT 1
26640: ARRAY
26641: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26642: LD_VAR 0 8
26646: PPUSH
26647: CALL_OW 301
26651: PUSH
26652: LD_VAR 0 5
26656: PUSH
26657: LD_VAR 0 8
26661: PPUSH
26662: CALL_OW 255
26666: NONEQUAL
26667: OR
26668: IFFALSE 26697
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26670: LD_ADDR_EXP 81
26674: PUSH
26675: LD_EXP 81
26679: PPUSH
26680: LD_VAR 0 8
26684: PPUSH
26685: LD_INT 0
26687: PPUSH
26688: CALL_OW 1
26692: ST_TO_ADDR
// exit ;
26693: POP
26694: POP
26695: GO 27228
// end ; x := list [ i ] [ 3 ] ;
26697: LD_ADDR_VAR 0 6
26701: PUSH
26702: LD_VAR 0 3
26706: PUSH
26707: LD_VAR 0 1
26711: ARRAY
26712: PUSH
26713: LD_INT 3
26715: ARRAY
26716: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26717: LD_ADDR_VAR 0 7
26721: PUSH
26722: LD_VAR 0 3
26726: PUSH
26727: LD_VAR 0 1
26731: ARRAY
26732: PUSH
26733: LD_INT 4
26735: ARRAY
26736: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26737: LD_ADDR_VAR 0 9
26741: PUSH
26742: LD_VAR 0 6
26746: PPUSH
26747: LD_VAR 0 7
26751: PPUSH
26752: LD_INT 16
26754: PPUSH
26755: CALL 71334 0 3
26759: ST_TO_ADDR
// if not cratesNearbyPoint then
26760: LD_VAR 0 9
26764: NOT
26765: IFFALSE 26771
// exit ;
26767: POP
26768: POP
26769: GO 27228
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26771: LD_ADDR_VAR 0 4
26775: PUSH
26776: LD_INT 22
26778: PUSH
26779: LD_VAR 0 5
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 3
26790: PUSH
26791: LD_INT 60
26793: PUSH
26794: EMPTY
26795: LIST
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 91
26803: PUSH
26804: LD_VAR 0 8
26808: PUSH
26809: LD_INT 6
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 2
26819: PUSH
26820: LD_INT 25
26822: PUSH
26823: LD_INT 2
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 25
26832: PUSH
26833: LD_INT 16
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: PPUSH
26851: CALL_OW 69
26855: PUSH
26856: LD_VAR 0 8
26860: PPUSH
26861: CALL_OW 313
26865: PPUSH
26866: LD_INT 3
26868: PUSH
26869: LD_INT 60
26871: PUSH
26872: EMPTY
26873: LIST
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 25
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 25
26894: PUSH
26895: LD_INT 16
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: LIST
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PPUSH
26911: CALL_OW 72
26915: UNION
26916: ST_TO_ADDR
// if tmp then
26917: LD_VAR 0 4
26921: IFFALSE 27001
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26923: LD_ADDR_VAR 0 4
26927: PUSH
26928: LD_VAR 0 4
26932: PPUSH
26933: LD_INT 3
26935: PPUSH
26936: CALL 69303 0 2
26940: ST_TO_ADDR
// for j in tmp do
26941: LD_ADDR_VAR 0 2
26945: PUSH
26946: LD_VAR 0 4
26950: PUSH
26951: FOR_IN
26952: IFFALSE 26995
// begin if IsInUnit ( j ) then
26954: LD_VAR 0 2
26958: PPUSH
26959: CALL_OW 310
26963: IFFALSE 26974
// ComExit ( j ) ;
26965: LD_VAR 0 2
26969: PPUSH
26970: CALL 69386 0 1
// AddComCollect ( j , x , y ) ;
26974: LD_VAR 0 2
26978: PPUSH
26979: LD_VAR 0 6
26983: PPUSH
26984: LD_VAR 0 7
26988: PPUSH
26989: CALL_OW 177
// end ;
26993: GO 26951
26995: POP
26996: POP
// exit ;
26997: POP
26998: POP
26999: GO 27228
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27001: LD_ADDR_VAR 0 4
27005: PUSH
27006: LD_INT 22
27008: PUSH
27009: LD_VAR 0 5
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 91
27020: PUSH
27021: LD_VAR 0 8
27025: PUSH
27026: LD_INT 8
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: LD_INT 34
27039: PUSH
27040: LD_INT 12
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 34
27049: PUSH
27050: LD_INT 51
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 34
27059: PUSH
27060: LD_INT 32
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 34
27069: PUSH
27070: LD_INT 89
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: PPUSH
27089: CALL_OW 69
27093: ST_TO_ADDR
// if tmp then
27094: LD_VAR 0 4
27098: IFFALSE 27224
// begin for j in tmp do
27100: LD_ADDR_VAR 0 2
27104: PUSH
27105: LD_VAR 0 4
27109: PUSH
27110: FOR_IN
27111: IFFALSE 27222
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27113: LD_VAR 0 2
27117: PPUSH
27118: CALL_OW 262
27122: PUSH
27123: LD_INT 3
27125: EQUAL
27126: PUSH
27127: LD_VAR 0 2
27131: PPUSH
27132: CALL_OW 261
27136: PUSH
27137: LD_INT 20
27139: GREATER
27140: OR
27141: PUSH
27142: LD_VAR 0 2
27146: PPUSH
27147: CALL_OW 314
27151: NOT
27152: AND
27153: PUSH
27154: LD_VAR 0 2
27158: PPUSH
27159: CALL_OW 263
27163: PUSH
27164: LD_INT 1
27166: NONEQUAL
27167: PUSH
27168: LD_VAR 0 2
27172: PPUSH
27173: CALL_OW 311
27177: OR
27178: AND
27179: IFFALSE 27220
// begin ComCollect ( j , x , y ) ;
27181: LD_VAR 0 2
27185: PPUSH
27186: LD_VAR 0 6
27190: PPUSH
27191: LD_VAR 0 7
27195: PPUSH
27196: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27200: LD_VAR 0 2
27204: PPUSH
27205: LD_VAR 0 8
27209: PPUSH
27210: CALL_OW 172
// exit ;
27214: POP
27215: POP
27216: POP
27217: POP
27218: GO 27228
// end ;
27220: GO 27110
27222: POP
27223: POP
// end ; end ;
27224: GO 26599
27226: POP
27227: POP
// end ; end_of_file
27228: PPOPN 9
27230: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27231: LD_INT 0
27233: PPUSH
27234: PPUSH
27235: PPUSH
27236: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27237: LD_VAR 0 1
27241: PPUSH
27242: CALL_OW 264
27246: PUSH
27247: LD_INT 91
27249: EQUAL
27250: IFFALSE 27322
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27252: LD_INT 68
27254: PPUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 255
27264: PPUSH
27265: CALL_OW 321
27269: PUSH
27270: LD_INT 2
27272: EQUAL
27273: IFFALSE 27285
// eff := 70 else
27275: LD_ADDR_VAR 0 4
27279: PUSH
27280: LD_INT 70
27282: ST_TO_ADDR
27283: GO 27293
// eff := 30 ;
27285: LD_ADDR_VAR 0 4
27289: PUSH
27290: LD_INT 30
27292: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 250
27302: PPUSH
27303: LD_VAR 0 1
27307: PPUSH
27308: CALL_OW 251
27312: PPUSH
27313: LD_VAR 0 4
27317: PPUSH
27318: CALL_OW 495
// end ; end ;
27322: LD_VAR 0 2
27326: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27327: LD_INT 0
27329: PPUSH
// end ;
27330: LD_VAR 0 4
27334: RET
// export function SOS_Command ( cmd ) ; begin
27335: LD_INT 0
27337: PPUSH
// end ;
27338: LD_VAR 0 2
27342: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27343: LD_INT 0
27345: PPUSH
// end ;
27346: LD_VAR 0 6
27350: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27351: LD_INT 0
27353: PPUSH
27354: PPUSH
// if not vehicle or not factory then
27355: LD_VAR 0 1
27359: NOT
27360: PUSH
27361: LD_VAR 0 2
27365: NOT
27366: OR
27367: IFFALSE 27371
// exit ;
27369: GO 27602
// if factoryWaypoints >= factory then
27371: LD_EXP 80
27375: PUSH
27376: LD_VAR 0 2
27380: GREATEREQUAL
27381: IFFALSE 27602
// if factoryWaypoints [ factory ] then
27383: LD_EXP 80
27387: PUSH
27388: LD_VAR 0 2
27392: ARRAY
27393: IFFALSE 27602
// begin if GetControl ( vehicle ) = control_manual then
27395: LD_VAR 0 1
27399: PPUSH
27400: CALL_OW 263
27404: PUSH
27405: LD_INT 1
27407: EQUAL
27408: IFFALSE 27489
// begin driver := IsDrivenBy ( vehicle ) ;
27410: LD_ADDR_VAR 0 4
27414: PUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL_OW 311
27424: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27425: LD_VAR 0 4
27429: PPUSH
27430: LD_EXP 80
27434: PUSH
27435: LD_VAR 0 2
27439: ARRAY
27440: PUSH
27441: LD_INT 3
27443: ARRAY
27444: PPUSH
27445: LD_EXP 80
27449: PUSH
27450: LD_VAR 0 2
27454: ARRAY
27455: PUSH
27456: LD_INT 4
27458: ARRAY
27459: PPUSH
27460: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27464: LD_VAR 0 4
27468: PPUSH
27469: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27473: LD_VAR 0 4
27477: PPUSH
27478: LD_VAR 0 2
27482: PPUSH
27483: CALL_OW 180
// end else
27487: GO 27602
// if GetControl ( vehicle ) = control_remote then
27489: LD_VAR 0 1
27493: PPUSH
27494: CALL_OW 263
27498: PUSH
27499: LD_INT 2
27501: EQUAL
27502: IFFALSE 27563
// begin wait ( 0 0$2 ) ;
27504: LD_INT 70
27506: PPUSH
27507: CALL_OW 67
// if Connect ( vehicle ) then
27511: LD_VAR 0 1
27515: PPUSH
27516: CALL 39626 0 1
27520: IFFALSE 27561
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27522: LD_VAR 0 1
27526: PPUSH
27527: LD_EXP 80
27531: PUSH
27532: LD_VAR 0 2
27536: ARRAY
27537: PUSH
27538: LD_INT 3
27540: ARRAY
27541: PPUSH
27542: LD_EXP 80
27546: PUSH
27547: LD_VAR 0 2
27551: ARRAY
27552: PUSH
27553: LD_INT 4
27555: ARRAY
27556: PPUSH
27557: CALL_OW 171
// end else
27561: GO 27602
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27563: LD_VAR 0 1
27567: PPUSH
27568: LD_EXP 80
27572: PUSH
27573: LD_VAR 0 2
27577: ARRAY
27578: PUSH
27579: LD_INT 3
27581: ARRAY
27582: PPUSH
27583: LD_EXP 80
27587: PUSH
27588: LD_VAR 0 2
27592: ARRAY
27593: PUSH
27594: LD_INT 4
27596: ARRAY
27597: PPUSH
27598: CALL_OW 171
// end ; end ;
27602: LD_VAR 0 3
27606: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27607: LD_INT 0
27609: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27610: LD_VAR 0 1
27614: PUSH
27615: LD_INT 250
27617: EQUAL
27618: PUSH
27619: LD_VAR 0 2
27623: PPUSH
27624: CALL_OW 264
27628: PUSH
27629: LD_INT 81
27631: EQUAL
27632: AND
27633: IFFALSE 27654
// MinerPlaceMine ( unit , x , y ) ;
27635: LD_VAR 0 2
27639: PPUSH
27640: LD_VAR 0 4
27644: PPUSH
27645: LD_VAR 0 5
27649: PPUSH
27650: CALL 30039 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27654: LD_VAR 0 1
27658: PUSH
27659: LD_INT 251
27661: EQUAL
27662: PUSH
27663: LD_VAR 0 2
27667: PPUSH
27668: CALL_OW 264
27672: PUSH
27673: LD_INT 81
27675: EQUAL
27676: AND
27677: IFFALSE 27698
// MinerDetonateMine ( unit , x , y ) ;
27679: LD_VAR 0 2
27683: PPUSH
27684: LD_VAR 0 4
27688: PPUSH
27689: LD_VAR 0 5
27693: PPUSH
27694: CALL 30314 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27698: LD_VAR 0 1
27702: PUSH
27703: LD_INT 252
27705: EQUAL
27706: PUSH
27707: LD_VAR 0 2
27711: PPUSH
27712: CALL_OW 264
27716: PUSH
27717: LD_INT 81
27719: EQUAL
27720: AND
27721: IFFALSE 27742
// MinerCreateMinefield ( unit , x , y ) ;
27723: LD_VAR 0 2
27727: PPUSH
27728: LD_VAR 0 4
27732: PPUSH
27733: LD_VAR 0 5
27737: PPUSH
27738: CALL 30731 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27742: LD_VAR 0 1
27746: PUSH
27747: LD_INT 253
27749: EQUAL
27750: PUSH
27751: LD_VAR 0 2
27755: PPUSH
27756: CALL_OW 257
27760: PUSH
27761: LD_INT 5
27763: EQUAL
27764: AND
27765: IFFALSE 27786
// ComBinocular ( unit , x , y ) ;
27767: LD_VAR 0 2
27771: PPUSH
27772: LD_VAR 0 4
27776: PPUSH
27777: LD_VAR 0 5
27781: PPUSH
27782: CALL 31100 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27786: LD_VAR 0 1
27790: PUSH
27791: LD_INT 254
27793: EQUAL
27794: PUSH
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 264
27804: PUSH
27805: LD_INT 99
27807: EQUAL
27808: AND
27809: PUSH
27810: LD_VAR 0 3
27814: PPUSH
27815: CALL_OW 263
27819: PUSH
27820: LD_INT 3
27822: EQUAL
27823: AND
27824: IFFALSE 27840
// HackDestroyVehicle ( unit , selectedUnit ) ;
27826: LD_VAR 0 2
27830: PPUSH
27831: LD_VAR 0 3
27835: PPUSH
27836: CALL 29403 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27840: LD_VAR 0 1
27844: PUSH
27845: LD_INT 255
27847: EQUAL
27848: PUSH
27849: LD_VAR 0 2
27853: PPUSH
27854: CALL_OW 264
27858: PUSH
27859: LD_INT 14
27861: PUSH
27862: LD_INT 53
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: IN
27869: AND
27870: PUSH
27871: LD_VAR 0 4
27875: PPUSH
27876: LD_VAR 0 5
27880: PPUSH
27881: CALL_OW 488
27885: AND
27886: IFFALSE 27910
// CutTreeXYR ( unit , x , y , 12 ) ;
27888: LD_VAR 0 2
27892: PPUSH
27893: LD_VAR 0 4
27897: PPUSH
27898: LD_VAR 0 5
27902: PPUSH
27903: LD_INT 12
27905: PPUSH
27906: CALL 27973 0 4
// if cmd = 256 then
27910: LD_VAR 0 1
27914: PUSH
27915: LD_INT 256
27917: EQUAL
27918: IFFALSE 27939
// SetFactoryWaypoint ( unit , x , y ) ;
27920: LD_VAR 0 2
27924: PPUSH
27925: LD_VAR 0 4
27929: PPUSH
27930: LD_VAR 0 5
27934: PPUSH
27935: CALL 25920 0 3
// if cmd = 257 then
27939: LD_VAR 0 1
27943: PUSH
27944: LD_INT 257
27946: EQUAL
27947: IFFALSE 27968
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27949: LD_VAR 0 2
27953: PPUSH
27954: LD_VAR 0 4
27958: PPUSH
27959: LD_VAR 0 5
27963: PPUSH
27964: CALL 26282 0 3
// end ;
27968: LD_VAR 0 6
27972: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27973: LD_INT 0
27975: PPUSH
27976: PPUSH
27977: PPUSH
27978: PPUSH
27979: PPUSH
27980: PPUSH
27981: PPUSH
27982: PPUSH
27983: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27984: LD_VAR 0 1
27988: NOT
27989: PUSH
27990: LD_VAR 0 2
27994: PPUSH
27995: LD_VAR 0 3
27999: PPUSH
28000: CALL_OW 488
28004: NOT
28005: OR
28006: PUSH
28007: LD_VAR 0 4
28011: NOT
28012: OR
28013: IFFALSE 28017
// exit ;
28015: GO 28357
// list := [ ] ;
28017: LD_ADDR_VAR 0 13
28021: PUSH
28022: EMPTY
28023: ST_TO_ADDR
// if x - r < 0 then
28024: LD_VAR 0 2
28028: PUSH
28029: LD_VAR 0 4
28033: MINUS
28034: PUSH
28035: LD_INT 0
28037: LESS
28038: IFFALSE 28050
// min_x := 0 else
28040: LD_ADDR_VAR 0 7
28044: PUSH
28045: LD_INT 0
28047: ST_TO_ADDR
28048: GO 28066
// min_x := x - r ;
28050: LD_ADDR_VAR 0 7
28054: PUSH
28055: LD_VAR 0 2
28059: PUSH
28060: LD_VAR 0 4
28064: MINUS
28065: ST_TO_ADDR
// if y - r < 0 then
28066: LD_VAR 0 3
28070: PUSH
28071: LD_VAR 0 4
28075: MINUS
28076: PUSH
28077: LD_INT 0
28079: LESS
28080: IFFALSE 28092
// min_y := 0 else
28082: LD_ADDR_VAR 0 8
28086: PUSH
28087: LD_INT 0
28089: ST_TO_ADDR
28090: GO 28108
// min_y := y - r ;
28092: LD_ADDR_VAR 0 8
28096: PUSH
28097: LD_VAR 0 3
28101: PUSH
28102: LD_VAR 0 4
28106: MINUS
28107: ST_TO_ADDR
// max_x := x + r ;
28108: LD_ADDR_VAR 0 9
28112: PUSH
28113: LD_VAR 0 2
28117: PUSH
28118: LD_VAR 0 4
28122: PLUS
28123: ST_TO_ADDR
// max_y := y + r ;
28124: LD_ADDR_VAR 0 10
28128: PUSH
28129: LD_VAR 0 3
28133: PUSH
28134: LD_VAR 0 4
28138: PLUS
28139: ST_TO_ADDR
// for _x = min_x to max_x do
28140: LD_ADDR_VAR 0 11
28144: PUSH
28145: DOUBLE
28146: LD_VAR 0 7
28150: DEC
28151: ST_TO_ADDR
28152: LD_VAR 0 9
28156: PUSH
28157: FOR_TO
28158: IFFALSE 28275
// for _y = min_y to max_y do
28160: LD_ADDR_VAR 0 12
28164: PUSH
28165: DOUBLE
28166: LD_VAR 0 8
28170: DEC
28171: ST_TO_ADDR
28172: LD_VAR 0 10
28176: PUSH
28177: FOR_TO
28178: IFFALSE 28271
// begin if not ValidHex ( _x , _y ) then
28180: LD_VAR 0 11
28184: PPUSH
28185: LD_VAR 0 12
28189: PPUSH
28190: CALL_OW 488
28194: NOT
28195: IFFALSE 28199
// continue ;
28197: GO 28177
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28199: LD_VAR 0 11
28203: PPUSH
28204: LD_VAR 0 12
28208: PPUSH
28209: CALL_OW 351
28213: PUSH
28214: LD_VAR 0 11
28218: PPUSH
28219: LD_VAR 0 12
28223: PPUSH
28224: CALL_OW 554
28228: AND
28229: IFFALSE 28269
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28231: LD_ADDR_VAR 0 13
28235: PUSH
28236: LD_VAR 0 13
28240: PPUSH
28241: LD_VAR 0 13
28245: PUSH
28246: LD_INT 1
28248: PLUS
28249: PPUSH
28250: LD_VAR 0 11
28254: PUSH
28255: LD_VAR 0 12
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PPUSH
28264: CALL_OW 2
28268: ST_TO_ADDR
// end ;
28269: GO 28177
28271: POP
28272: POP
28273: GO 28157
28275: POP
28276: POP
// if not list then
28277: LD_VAR 0 13
28281: NOT
28282: IFFALSE 28286
// exit ;
28284: GO 28357
// for i in list do
28286: LD_ADDR_VAR 0 6
28290: PUSH
28291: LD_VAR 0 13
28295: PUSH
28296: FOR_IN
28297: IFFALSE 28355
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28299: LD_VAR 0 1
28303: PPUSH
28304: LD_STRING M
28306: PUSH
28307: LD_VAR 0 6
28311: PUSH
28312: LD_INT 1
28314: ARRAY
28315: PUSH
28316: LD_VAR 0 6
28320: PUSH
28321: LD_INT 2
28323: ARRAY
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: PUSH
28346: EMPTY
28347: LIST
28348: PPUSH
28349: CALL_OW 447
28353: GO 28296
28355: POP
28356: POP
// end ;
28357: LD_VAR 0 5
28361: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28362: LD_EXP 83
28366: NOT
28367: IFFALSE 28417
28369: GO 28371
28371: DISABLE
// begin initHack := true ;
28372: LD_ADDR_EXP 83
28376: PUSH
28377: LD_INT 1
28379: ST_TO_ADDR
// hackTanks := [ ] ;
28380: LD_ADDR_EXP 84
28384: PUSH
28385: EMPTY
28386: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28387: LD_ADDR_EXP 85
28391: PUSH
28392: EMPTY
28393: ST_TO_ADDR
// hackLimit := 3 ;
28394: LD_ADDR_EXP 86
28398: PUSH
28399: LD_INT 3
28401: ST_TO_ADDR
// hackDist := 12 ;
28402: LD_ADDR_EXP 87
28406: PUSH
28407: LD_INT 12
28409: ST_TO_ADDR
// hackCounter := [ ] ;
28410: LD_ADDR_EXP 88
28414: PUSH
28415: EMPTY
28416: ST_TO_ADDR
// end ;
28417: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28418: LD_EXP 83
28422: PUSH
28423: LD_INT 34
28425: PUSH
28426: LD_INT 99
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PPUSH
28433: CALL_OW 69
28437: AND
28438: IFFALSE 28691
28440: GO 28442
28442: DISABLE
28443: LD_INT 0
28445: PPUSH
28446: PPUSH
// begin enable ;
28447: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28448: LD_ADDR_VAR 0 1
28452: PUSH
28453: LD_INT 34
28455: PUSH
28456: LD_INT 99
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PPUSH
28463: CALL_OW 69
28467: PUSH
28468: FOR_IN
28469: IFFALSE 28689
// begin if not i in hackTanks then
28471: LD_VAR 0 1
28475: PUSH
28476: LD_EXP 84
28480: IN
28481: NOT
28482: IFFALSE 28565
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28484: LD_ADDR_EXP 84
28488: PUSH
28489: LD_EXP 84
28493: PPUSH
28494: LD_EXP 84
28498: PUSH
28499: LD_INT 1
28501: PLUS
28502: PPUSH
28503: LD_VAR 0 1
28507: PPUSH
28508: CALL_OW 1
28512: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28513: LD_ADDR_EXP 85
28517: PUSH
28518: LD_EXP 85
28522: PPUSH
28523: LD_EXP 85
28527: PUSH
28528: LD_INT 1
28530: PLUS
28531: PPUSH
28532: EMPTY
28533: PPUSH
28534: CALL_OW 1
28538: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28539: LD_ADDR_EXP 88
28543: PUSH
28544: LD_EXP 88
28548: PPUSH
28549: LD_EXP 88
28553: PUSH
28554: LD_INT 1
28556: PLUS
28557: PPUSH
28558: EMPTY
28559: PPUSH
28560: CALL_OW 1
28564: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28565: LD_VAR 0 1
28569: PPUSH
28570: CALL_OW 302
28574: NOT
28575: IFFALSE 28588
// begin HackUnlinkAll ( i ) ;
28577: LD_VAR 0 1
28581: PPUSH
28582: CALL 28694 0 1
// continue ;
28586: GO 28468
// end ; HackCheckCapturedStatus ( i ) ;
28588: LD_VAR 0 1
28592: PPUSH
28593: CALL 29137 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28597: LD_ADDR_VAR 0 2
28601: PUSH
28602: LD_INT 81
28604: PUSH
28605: LD_VAR 0 1
28609: PPUSH
28610: CALL_OW 255
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 33
28621: PUSH
28622: LD_INT 3
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 91
28631: PUSH
28632: LD_VAR 0 1
28636: PUSH
28637: LD_EXP 87
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 50
28649: PUSH
28650: EMPTY
28651: LIST
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: PPUSH
28659: CALL_OW 69
28663: ST_TO_ADDR
// if not tmp then
28664: LD_VAR 0 2
28668: NOT
28669: IFFALSE 28673
// continue ;
28671: GO 28468
// HackLink ( i , tmp ) ;
28673: LD_VAR 0 1
28677: PPUSH
28678: LD_VAR 0 2
28682: PPUSH
28683: CALL 28830 0 2
// end ;
28687: GO 28468
28689: POP
28690: POP
// end ;
28691: PPOPN 2
28693: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28694: LD_INT 0
28696: PPUSH
28697: PPUSH
28698: PPUSH
// if not hack in hackTanks then
28699: LD_VAR 0 1
28703: PUSH
28704: LD_EXP 84
28708: IN
28709: NOT
28710: IFFALSE 28714
// exit ;
28712: GO 28825
// index := GetElementIndex ( hackTanks , hack ) ;
28714: LD_ADDR_VAR 0 4
28718: PUSH
28719: LD_EXP 84
28723: PPUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL 36442 0 2
28733: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28734: LD_EXP 85
28738: PUSH
28739: LD_VAR 0 4
28743: ARRAY
28744: IFFALSE 28825
// begin for i in hackTanksCaptured [ index ] do
28746: LD_ADDR_VAR 0 3
28750: PUSH
28751: LD_EXP 85
28755: PUSH
28756: LD_VAR 0 4
28760: ARRAY
28761: PUSH
28762: FOR_IN
28763: IFFALSE 28789
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28765: LD_VAR 0 3
28769: PUSH
28770: LD_INT 1
28772: ARRAY
28773: PPUSH
28774: LD_VAR 0 3
28778: PUSH
28779: LD_INT 2
28781: ARRAY
28782: PPUSH
28783: CALL_OW 235
28787: GO 28762
28789: POP
28790: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28791: LD_ADDR_EXP 85
28795: PUSH
28796: LD_EXP 85
28800: PPUSH
28801: LD_VAR 0 4
28805: PPUSH
28806: EMPTY
28807: PPUSH
28808: CALL_OW 1
28812: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28813: LD_VAR 0 1
28817: PPUSH
28818: LD_INT 0
28820: PPUSH
28821: CALL_OW 505
// end ; end ;
28825: LD_VAR 0 2
28829: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28830: LD_INT 0
28832: PPUSH
28833: PPUSH
28834: PPUSH
// if not hack in hackTanks or not vehicles then
28835: LD_VAR 0 1
28839: PUSH
28840: LD_EXP 84
28844: IN
28845: NOT
28846: PUSH
28847: LD_VAR 0 2
28851: NOT
28852: OR
28853: IFFALSE 28857
// exit ;
28855: GO 29132
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28857: LD_ADDR_VAR 0 2
28861: PUSH
28862: LD_VAR 0 1
28866: PPUSH
28867: LD_VAR 0 2
28871: PPUSH
28872: LD_INT 1
28874: PPUSH
28875: LD_INT 1
28877: PPUSH
28878: CALL 37092 0 4
28882: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28883: LD_ADDR_VAR 0 5
28887: PUSH
28888: LD_EXP 84
28892: PPUSH
28893: LD_VAR 0 1
28897: PPUSH
28898: CALL 36442 0 2
28902: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28903: LD_EXP 85
28907: PUSH
28908: LD_VAR 0 5
28912: ARRAY
28913: PUSH
28914: LD_EXP 86
28918: LESS
28919: IFFALSE 29108
// begin for i := 1 to vehicles do
28921: LD_ADDR_VAR 0 4
28925: PUSH
28926: DOUBLE
28927: LD_INT 1
28929: DEC
28930: ST_TO_ADDR
28931: LD_VAR 0 2
28935: PUSH
28936: FOR_TO
28937: IFFALSE 29106
// begin if hackTanksCaptured [ index ] = hackLimit then
28939: LD_EXP 85
28943: PUSH
28944: LD_VAR 0 5
28948: ARRAY
28949: PUSH
28950: LD_EXP 86
28954: EQUAL
28955: IFFALSE 28959
// break ;
28957: GO 29106
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28959: LD_ADDR_EXP 88
28963: PUSH
28964: LD_EXP 88
28968: PPUSH
28969: LD_VAR 0 5
28973: PPUSH
28974: LD_EXP 88
28978: PUSH
28979: LD_VAR 0 5
28983: ARRAY
28984: PUSH
28985: LD_INT 1
28987: PLUS
28988: PPUSH
28989: CALL_OW 1
28993: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28994: LD_ADDR_EXP 85
28998: PUSH
28999: LD_EXP 85
29003: PPUSH
29004: LD_VAR 0 5
29008: PUSH
29009: LD_EXP 85
29013: PUSH
29014: LD_VAR 0 5
29018: ARRAY
29019: PUSH
29020: LD_INT 1
29022: PLUS
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PPUSH
29028: LD_VAR 0 2
29032: PUSH
29033: LD_VAR 0 4
29037: ARRAY
29038: PUSH
29039: LD_VAR 0 2
29043: PUSH
29044: LD_VAR 0 4
29048: ARRAY
29049: PPUSH
29050: CALL_OW 255
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PPUSH
29059: CALL 36657 0 3
29063: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29064: LD_VAR 0 2
29068: PUSH
29069: LD_VAR 0 4
29073: ARRAY
29074: PPUSH
29075: LD_VAR 0 1
29079: PPUSH
29080: CALL_OW 255
29084: PPUSH
29085: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29089: LD_VAR 0 2
29093: PUSH
29094: LD_VAR 0 4
29098: ARRAY
29099: PPUSH
29100: CALL_OW 141
// end ;
29104: GO 28936
29106: POP
29107: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29108: LD_VAR 0 1
29112: PPUSH
29113: LD_EXP 85
29117: PUSH
29118: LD_VAR 0 5
29122: ARRAY
29123: PUSH
29124: LD_INT 0
29126: PLUS
29127: PPUSH
29128: CALL_OW 505
// end ;
29132: LD_VAR 0 3
29136: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29137: LD_INT 0
29139: PPUSH
29140: PPUSH
29141: PPUSH
29142: PPUSH
// if not hack in hackTanks then
29143: LD_VAR 0 1
29147: PUSH
29148: LD_EXP 84
29152: IN
29153: NOT
29154: IFFALSE 29158
// exit ;
29156: GO 29398
// index := GetElementIndex ( hackTanks , hack ) ;
29158: LD_ADDR_VAR 0 4
29162: PUSH
29163: LD_EXP 84
29167: PPUSH
29168: LD_VAR 0 1
29172: PPUSH
29173: CALL 36442 0 2
29177: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29178: LD_ADDR_VAR 0 3
29182: PUSH
29183: DOUBLE
29184: LD_EXP 85
29188: PUSH
29189: LD_VAR 0 4
29193: ARRAY
29194: INC
29195: ST_TO_ADDR
29196: LD_INT 1
29198: PUSH
29199: FOR_DOWNTO
29200: IFFALSE 29372
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29202: LD_ADDR_VAR 0 5
29206: PUSH
29207: LD_EXP 85
29211: PUSH
29212: LD_VAR 0 4
29216: ARRAY
29217: PUSH
29218: LD_VAR 0 3
29222: ARRAY
29223: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29224: LD_VAR 0 5
29228: PUSH
29229: LD_INT 1
29231: ARRAY
29232: PPUSH
29233: CALL_OW 302
29237: NOT
29238: PUSH
29239: LD_VAR 0 5
29243: PUSH
29244: LD_INT 1
29246: ARRAY
29247: PPUSH
29248: CALL_OW 255
29252: PUSH
29253: LD_VAR 0 1
29257: PPUSH
29258: CALL_OW 255
29262: NONEQUAL
29263: OR
29264: IFFALSE 29370
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29266: LD_VAR 0 5
29270: PUSH
29271: LD_INT 1
29273: ARRAY
29274: PPUSH
29275: CALL_OW 305
29279: PUSH
29280: LD_VAR 0 5
29284: PUSH
29285: LD_INT 1
29287: ARRAY
29288: PPUSH
29289: CALL_OW 255
29293: PUSH
29294: LD_VAR 0 1
29298: PPUSH
29299: CALL_OW 255
29303: EQUAL
29304: AND
29305: IFFALSE 29329
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29307: LD_VAR 0 5
29311: PUSH
29312: LD_INT 1
29314: ARRAY
29315: PPUSH
29316: LD_VAR 0 5
29320: PUSH
29321: LD_INT 2
29323: ARRAY
29324: PPUSH
29325: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29329: LD_ADDR_EXP 85
29333: PUSH
29334: LD_EXP 85
29338: PPUSH
29339: LD_VAR 0 4
29343: PPUSH
29344: LD_EXP 85
29348: PUSH
29349: LD_VAR 0 4
29353: ARRAY
29354: PPUSH
29355: LD_VAR 0 3
29359: PPUSH
29360: CALL_OW 3
29364: PPUSH
29365: CALL_OW 1
29369: ST_TO_ADDR
// end ; end ;
29370: GO 29199
29372: POP
29373: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29374: LD_VAR 0 1
29378: PPUSH
29379: LD_EXP 85
29383: PUSH
29384: LD_VAR 0 4
29388: ARRAY
29389: PUSH
29390: LD_INT 0
29392: PLUS
29393: PPUSH
29394: CALL_OW 505
// end ;
29398: LD_VAR 0 2
29402: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29403: LD_INT 0
29405: PPUSH
29406: PPUSH
29407: PPUSH
29408: PPUSH
// if not hack in hackTanks then
29409: LD_VAR 0 1
29413: PUSH
29414: LD_EXP 84
29418: IN
29419: NOT
29420: IFFALSE 29424
// exit ;
29422: GO 29509
// index := GetElementIndex ( hackTanks , hack ) ;
29424: LD_ADDR_VAR 0 5
29428: PUSH
29429: LD_EXP 84
29433: PPUSH
29434: LD_VAR 0 1
29438: PPUSH
29439: CALL 36442 0 2
29443: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29444: LD_ADDR_VAR 0 4
29448: PUSH
29449: DOUBLE
29450: LD_INT 1
29452: DEC
29453: ST_TO_ADDR
29454: LD_EXP 85
29458: PUSH
29459: LD_VAR 0 5
29463: ARRAY
29464: PUSH
29465: FOR_TO
29466: IFFALSE 29507
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29468: LD_EXP 85
29472: PUSH
29473: LD_VAR 0 5
29477: ARRAY
29478: PUSH
29479: LD_VAR 0 4
29483: ARRAY
29484: PUSH
29485: LD_INT 1
29487: ARRAY
29488: PUSH
29489: LD_VAR 0 2
29493: EQUAL
29494: IFFALSE 29505
// KillUnit ( vehicle ) ;
29496: LD_VAR 0 2
29500: PPUSH
29501: CALL_OW 66
29505: GO 29465
29507: POP
29508: POP
// end ;
29509: LD_VAR 0 3
29513: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29514: LD_EXP 89
29518: NOT
29519: IFFALSE 29554
29521: GO 29523
29523: DISABLE
// begin initMiner := true ;
29524: LD_ADDR_EXP 89
29528: PUSH
29529: LD_INT 1
29531: ST_TO_ADDR
// minersList := [ ] ;
29532: LD_ADDR_EXP 90
29536: PUSH
29537: EMPTY
29538: ST_TO_ADDR
// minerMinesList := [ ] ;
29539: LD_ADDR_EXP 91
29543: PUSH
29544: EMPTY
29545: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29546: LD_ADDR_EXP 92
29550: PUSH
29551: LD_INT 5
29553: ST_TO_ADDR
// end ;
29554: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29555: LD_EXP 89
29559: PUSH
29560: LD_INT 34
29562: PUSH
29563: LD_INT 81
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PPUSH
29570: CALL_OW 69
29574: AND
29575: IFFALSE 30036
29577: GO 29579
29579: DISABLE
29580: LD_INT 0
29582: PPUSH
29583: PPUSH
29584: PPUSH
29585: PPUSH
// begin enable ;
29586: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29587: LD_ADDR_VAR 0 1
29591: PUSH
29592: LD_INT 34
29594: PUSH
29595: LD_INT 81
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PPUSH
29602: CALL_OW 69
29606: PUSH
29607: FOR_IN
29608: IFFALSE 29680
// begin if not i in minersList then
29610: LD_VAR 0 1
29614: PUSH
29615: LD_EXP 90
29619: IN
29620: NOT
29621: IFFALSE 29678
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29623: LD_ADDR_EXP 90
29627: PUSH
29628: LD_EXP 90
29632: PPUSH
29633: LD_EXP 90
29637: PUSH
29638: LD_INT 1
29640: PLUS
29641: PPUSH
29642: LD_VAR 0 1
29646: PPUSH
29647: CALL_OW 1
29651: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29652: LD_ADDR_EXP 91
29656: PUSH
29657: LD_EXP 91
29661: PPUSH
29662: LD_EXP 91
29666: PUSH
29667: LD_INT 1
29669: PLUS
29670: PPUSH
29671: EMPTY
29672: PPUSH
29673: CALL_OW 1
29677: ST_TO_ADDR
// end end ;
29678: GO 29607
29680: POP
29681: POP
// for i := minerMinesList downto 1 do
29682: LD_ADDR_VAR 0 1
29686: PUSH
29687: DOUBLE
29688: LD_EXP 91
29692: INC
29693: ST_TO_ADDR
29694: LD_INT 1
29696: PUSH
29697: FOR_DOWNTO
29698: IFFALSE 30034
// begin if IsLive ( minersList [ i ] ) then
29700: LD_EXP 90
29704: PUSH
29705: LD_VAR 0 1
29709: ARRAY
29710: PPUSH
29711: CALL_OW 300
29715: IFFALSE 29743
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29717: LD_EXP 90
29721: PUSH
29722: LD_VAR 0 1
29726: ARRAY
29727: PPUSH
29728: LD_EXP 91
29732: PUSH
29733: LD_VAR 0 1
29737: ARRAY
29738: PPUSH
29739: CALL_OW 505
// if not minerMinesList [ i ] then
29743: LD_EXP 91
29747: PUSH
29748: LD_VAR 0 1
29752: ARRAY
29753: NOT
29754: IFFALSE 29758
// continue ;
29756: GO 29697
// for j := minerMinesList [ i ] downto 1 do
29758: LD_ADDR_VAR 0 2
29762: PUSH
29763: DOUBLE
29764: LD_EXP 91
29768: PUSH
29769: LD_VAR 0 1
29773: ARRAY
29774: INC
29775: ST_TO_ADDR
29776: LD_INT 1
29778: PUSH
29779: FOR_DOWNTO
29780: IFFALSE 30030
// begin side := GetSide ( minersList [ i ] ) ;
29782: LD_ADDR_VAR 0 3
29786: PUSH
29787: LD_EXP 90
29791: PUSH
29792: LD_VAR 0 1
29796: ARRAY
29797: PPUSH
29798: CALL_OW 255
29802: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29803: LD_ADDR_VAR 0 4
29807: PUSH
29808: LD_EXP 91
29812: PUSH
29813: LD_VAR 0 1
29817: ARRAY
29818: PUSH
29819: LD_VAR 0 2
29823: ARRAY
29824: PUSH
29825: LD_INT 1
29827: ARRAY
29828: PPUSH
29829: LD_EXP 91
29833: PUSH
29834: LD_VAR 0 1
29838: ARRAY
29839: PUSH
29840: LD_VAR 0 2
29844: ARRAY
29845: PUSH
29846: LD_INT 2
29848: ARRAY
29849: PPUSH
29850: CALL_OW 428
29854: ST_TO_ADDR
// if not tmp then
29855: LD_VAR 0 4
29859: NOT
29860: IFFALSE 29864
// continue ;
29862: GO 29779
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29864: LD_VAR 0 4
29868: PUSH
29869: LD_INT 81
29871: PUSH
29872: LD_VAR 0 3
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PPUSH
29881: CALL_OW 69
29885: IN
29886: PUSH
29887: LD_EXP 91
29891: PUSH
29892: LD_VAR 0 1
29896: ARRAY
29897: PUSH
29898: LD_VAR 0 2
29902: ARRAY
29903: PUSH
29904: LD_INT 1
29906: ARRAY
29907: PPUSH
29908: LD_EXP 91
29912: PUSH
29913: LD_VAR 0 1
29917: ARRAY
29918: PUSH
29919: LD_VAR 0 2
29923: ARRAY
29924: PUSH
29925: LD_INT 2
29927: ARRAY
29928: PPUSH
29929: CALL_OW 458
29933: AND
29934: IFFALSE 30028
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29936: LD_EXP 91
29940: PUSH
29941: LD_VAR 0 1
29945: ARRAY
29946: PUSH
29947: LD_VAR 0 2
29951: ARRAY
29952: PUSH
29953: LD_INT 1
29955: ARRAY
29956: PPUSH
29957: LD_EXP 91
29961: PUSH
29962: LD_VAR 0 1
29966: ARRAY
29967: PUSH
29968: LD_VAR 0 2
29972: ARRAY
29973: PUSH
29974: LD_INT 2
29976: ARRAY
29977: PPUSH
29978: LD_VAR 0 3
29982: PPUSH
29983: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29987: LD_ADDR_EXP 91
29991: PUSH
29992: LD_EXP 91
29996: PPUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: LD_EXP 91
30006: PUSH
30007: LD_VAR 0 1
30011: ARRAY
30012: PPUSH
30013: LD_VAR 0 2
30017: PPUSH
30018: CALL_OW 3
30022: PPUSH
30023: CALL_OW 1
30027: ST_TO_ADDR
// end ; end ;
30028: GO 29779
30030: POP
30031: POP
// end ;
30032: GO 29697
30034: POP
30035: POP
// end ;
30036: PPOPN 4
30038: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30039: LD_INT 0
30041: PPUSH
30042: PPUSH
// result := false ;
30043: LD_ADDR_VAR 0 4
30047: PUSH
30048: LD_INT 0
30050: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30051: LD_VAR 0 1
30055: PPUSH
30056: CALL_OW 264
30060: PUSH
30061: LD_INT 81
30063: EQUAL
30064: NOT
30065: IFFALSE 30069
// exit ;
30067: GO 30309
// index := GetElementIndex ( minersList , unit ) ;
30069: LD_ADDR_VAR 0 5
30073: PUSH
30074: LD_EXP 90
30078: PPUSH
30079: LD_VAR 0 1
30083: PPUSH
30084: CALL 36442 0 2
30088: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30089: LD_EXP 91
30093: PUSH
30094: LD_VAR 0 5
30098: ARRAY
30099: PUSH
30100: LD_EXP 92
30104: GREATEREQUAL
30105: IFFALSE 30109
// exit ;
30107: GO 30309
// ComMoveXY ( unit , x , y ) ;
30109: LD_VAR 0 1
30113: PPUSH
30114: LD_VAR 0 2
30118: PPUSH
30119: LD_VAR 0 3
30123: PPUSH
30124: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30128: LD_INT 35
30130: PPUSH
30131: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30135: LD_VAR 0 1
30139: PPUSH
30140: LD_VAR 0 2
30144: PPUSH
30145: LD_VAR 0 3
30149: PPUSH
30150: CALL 67797 0 3
30154: NOT
30155: PUSH
30156: LD_VAR 0 1
30160: PPUSH
30161: CALL_OW 314
30165: AND
30166: IFFALSE 30170
// exit ;
30168: GO 30309
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30170: LD_VAR 0 2
30174: PPUSH
30175: LD_VAR 0 3
30179: PPUSH
30180: CALL_OW 428
30184: PUSH
30185: LD_VAR 0 1
30189: EQUAL
30190: PUSH
30191: LD_VAR 0 1
30195: PPUSH
30196: CALL_OW 314
30200: NOT
30201: AND
30202: IFFALSE 30128
// PlaySoundXY ( x , y , PlantMine ) ;
30204: LD_VAR 0 2
30208: PPUSH
30209: LD_VAR 0 3
30213: PPUSH
30214: LD_STRING PlantMine
30216: PPUSH
30217: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30221: LD_VAR 0 2
30225: PPUSH
30226: LD_VAR 0 3
30230: PPUSH
30231: LD_VAR 0 1
30235: PPUSH
30236: CALL_OW 255
30240: PPUSH
30241: LD_INT 0
30243: PPUSH
30244: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30248: LD_ADDR_EXP 91
30252: PUSH
30253: LD_EXP 91
30257: PPUSH
30258: LD_VAR 0 5
30262: PUSH
30263: LD_EXP 91
30267: PUSH
30268: LD_VAR 0 5
30272: ARRAY
30273: PUSH
30274: LD_INT 1
30276: PLUS
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PPUSH
30282: LD_VAR 0 2
30286: PUSH
30287: LD_VAR 0 3
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PPUSH
30296: CALL 36657 0 3
30300: ST_TO_ADDR
// result := true ;
30301: LD_ADDR_VAR 0 4
30305: PUSH
30306: LD_INT 1
30308: ST_TO_ADDR
// end ;
30309: LD_VAR 0 4
30313: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30314: LD_INT 0
30316: PPUSH
30317: PPUSH
30318: PPUSH
// if not unit in minersList then
30319: LD_VAR 0 1
30323: PUSH
30324: LD_EXP 90
30328: IN
30329: NOT
30330: IFFALSE 30334
// exit ;
30332: GO 30726
// index := GetElementIndex ( minersList , unit ) ;
30334: LD_ADDR_VAR 0 6
30338: PUSH
30339: LD_EXP 90
30343: PPUSH
30344: LD_VAR 0 1
30348: PPUSH
30349: CALL 36442 0 2
30353: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30354: LD_ADDR_VAR 0 5
30358: PUSH
30359: DOUBLE
30360: LD_EXP 91
30364: PUSH
30365: LD_VAR 0 6
30369: ARRAY
30370: INC
30371: ST_TO_ADDR
30372: LD_INT 1
30374: PUSH
30375: FOR_DOWNTO
30376: IFFALSE 30537
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30378: LD_EXP 91
30382: PUSH
30383: LD_VAR 0 6
30387: ARRAY
30388: PUSH
30389: LD_VAR 0 5
30393: ARRAY
30394: PUSH
30395: LD_INT 1
30397: ARRAY
30398: PUSH
30399: LD_VAR 0 2
30403: EQUAL
30404: PUSH
30405: LD_EXP 91
30409: PUSH
30410: LD_VAR 0 6
30414: ARRAY
30415: PUSH
30416: LD_VAR 0 5
30420: ARRAY
30421: PUSH
30422: LD_INT 2
30424: ARRAY
30425: PUSH
30426: LD_VAR 0 3
30430: EQUAL
30431: AND
30432: IFFALSE 30535
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30434: LD_EXP 91
30438: PUSH
30439: LD_VAR 0 6
30443: ARRAY
30444: PUSH
30445: LD_VAR 0 5
30449: ARRAY
30450: PUSH
30451: LD_INT 1
30453: ARRAY
30454: PPUSH
30455: LD_EXP 91
30459: PUSH
30460: LD_VAR 0 6
30464: ARRAY
30465: PUSH
30466: LD_VAR 0 5
30470: ARRAY
30471: PUSH
30472: LD_INT 2
30474: ARRAY
30475: PPUSH
30476: LD_VAR 0 1
30480: PPUSH
30481: CALL_OW 255
30485: PPUSH
30486: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30490: LD_ADDR_EXP 91
30494: PUSH
30495: LD_EXP 91
30499: PPUSH
30500: LD_VAR 0 6
30504: PPUSH
30505: LD_EXP 91
30509: PUSH
30510: LD_VAR 0 6
30514: ARRAY
30515: PPUSH
30516: LD_VAR 0 5
30520: PPUSH
30521: CALL_OW 3
30525: PPUSH
30526: CALL_OW 1
30530: ST_TO_ADDR
// exit ;
30531: POP
30532: POP
30533: GO 30726
// end ; end ;
30535: GO 30375
30537: POP
30538: POP
// for i := minerMinesList [ index ] downto 1 do
30539: LD_ADDR_VAR 0 5
30543: PUSH
30544: DOUBLE
30545: LD_EXP 91
30549: PUSH
30550: LD_VAR 0 6
30554: ARRAY
30555: INC
30556: ST_TO_ADDR
30557: LD_INT 1
30559: PUSH
30560: FOR_DOWNTO
30561: IFFALSE 30724
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30563: LD_EXP 91
30567: PUSH
30568: LD_VAR 0 6
30572: ARRAY
30573: PUSH
30574: LD_VAR 0 5
30578: ARRAY
30579: PUSH
30580: LD_INT 1
30582: ARRAY
30583: PPUSH
30584: LD_EXP 91
30588: PUSH
30589: LD_VAR 0 6
30593: ARRAY
30594: PUSH
30595: LD_VAR 0 5
30599: ARRAY
30600: PUSH
30601: LD_INT 2
30603: ARRAY
30604: PPUSH
30605: LD_VAR 0 2
30609: PPUSH
30610: LD_VAR 0 3
30614: PPUSH
30615: CALL_OW 298
30619: PUSH
30620: LD_INT 6
30622: LESS
30623: IFFALSE 30722
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30625: LD_EXP 91
30629: PUSH
30630: LD_VAR 0 6
30634: ARRAY
30635: PUSH
30636: LD_VAR 0 5
30640: ARRAY
30641: PUSH
30642: LD_INT 1
30644: ARRAY
30645: PPUSH
30646: LD_EXP 91
30650: PUSH
30651: LD_VAR 0 6
30655: ARRAY
30656: PUSH
30657: LD_VAR 0 5
30661: ARRAY
30662: PUSH
30663: LD_INT 2
30665: ARRAY
30666: PPUSH
30667: LD_VAR 0 1
30671: PPUSH
30672: CALL_OW 255
30676: PPUSH
30677: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30681: LD_ADDR_EXP 91
30685: PUSH
30686: LD_EXP 91
30690: PPUSH
30691: LD_VAR 0 6
30695: PPUSH
30696: LD_EXP 91
30700: PUSH
30701: LD_VAR 0 6
30705: ARRAY
30706: PPUSH
30707: LD_VAR 0 5
30711: PPUSH
30712: CALL_OW 3
30716: PPUSH
30717: CALL_OW 1
30721: ST_TO_ADDR
// end ; end ;
30722: GO 30560
30724: POP
30725: POP
// end ;
30726: LD_VAR 0 4
30730: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30731: LD_INT 0
30733: PPUSH
30734: PPUSH
30735: PPUSH
30736: PPUSH
30737: PPUSH
30738: PPUSH
30739: PPUSH
30740: PPUSH
30741: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30742: LD_VAR 0 1
30746: PPUSH
30747: CALL_OW 264
30751: PUSH
30752: LD_INT 81
30754: EQUAL
30755: NOT
30756: PUSH
30757: LD_VAR 0 1
30761: PUSH
30762: LD_EXP 90
30766: IN
30767: NOT
30768: OR
30769: IFFALSE 30773
// exit ;
30771: GO 31095
// index := GetElementIndex ( minersList , unit ) ;
30773: LD_ADDR_VAR 0 6
30777: PUSH
30778: LD_EXP 90
30782: PPUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL 36442 0 2
30792: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30793: LD_ADDR_VAR 0 8
30797: PUSH
30798: LD_EXP 92
30802: PUSH
30803: LD_EXP 91
30807: PUSH
30808: LD_VAR 0 6
30812: ARRAY
30813: MINUS
30814: ST_TO_ADDR
// if not minesFreeAmount then
30815: LD_VAR 0 8
30819: NOT
30820: IFFALSE 30824
// exit ;
30822: GO 31095
// tmp := [ ] ;
30824: LD_ADDR_VAR 0 7
30828: PUSH
30829: EMPTY
30830: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30831: LD_ADDR_VAR 0 5
30835: PUSH
30836: DOUBLE
30837: LD_INT 1
30839: DEC
30840: ST_TO_ADDR
30841: LD_VAR 0 8
30845: PUSH
30846: FOR_TO
30847: IFFALSE 31042
// begin _d := rand ( 0 , 5 ) ;
30849: LD_ADDR_VAR 0 11
30853: PUSH
30854: LD_INT 0
30856: PPUSH
30857: LD_INT 5
30859: PPUSH
30860: CALL_OW 12
30864: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30865: LD_ADDR_VAR 0 12
30869: PUSH
30870: LD_INT 2
30872: PPUSH
30873: LD_INT 6
30875: PPUSH
30876: CALL_OW 12
30880: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30881: LD_ADDR_VAR 0 9
30885: PUSH
30886: LD_VAR 0 2
30890: PPUSH
30891: LD_VAR 0 11
30895: PPUSH
30896: LD_VAR 0 12
30900: PPUSH
30901: CALL_OW 272
30905: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30906: LD_ADDR_VAR 0 10
30910: PUSH
30911: LD_VAR 0 3
30915: PPUSH
30916: LD_VAR 0 11
30920: PPUSH
30921: LD_VAR 0 12
30925: PPUSH
30926: CALL_OW 273
30930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30931: LD_VAR 0 9
30935: PPUSH
30936: LD_VAR 0 10
30940: PPUSH
30941: CALL_OW 488
30945: PUSH
30946: LD_VAR 0 9
30950: PUSH
30951: LD_VAR 0 10
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_VAR 0 7
30964: IN
30965: NOT
30966: AND
30967: PUSH
30968: LD_VAR 0 9
30972: PPUSH
30973: LD_VAR 0 10
30977: PPUSH
30978: CALL_OW 458
30982: NOT
30983: AND
30984: IFFALSE 31026
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30986: LD_ADDR_VAR 0 7
30990: PUSH
30991: LD_VAR 0 7
30995: PPUSH
30996: LD_VAR 0 7
31000: PUSH
31001: LD_INT 1
31003: PLUS
31004: PPUSH
31005: LD_VAR 0 9
31009: PUSH
31010: LD_VAR 0 10
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PPUSH
31019: CALL_OW 1
31023: ST_TO_ADDR
31024: GO 31040
// i := i - 1 ;
31026: LD_ADDR_VAR 0 5
31030: PUSH
31031: LD_VAR 0 5
31035: PUSH
31036: LD_INT 1
31038: MINUS
31039: ST_TO_ADDR
// end ;
31040: GO 30846
31042: POP
31043: POP
// for i in tmp do
31044: LD_ADDR_VAR 0 5
31048: PUSH
31049: LD_VAR 0 7
31053: PUSH
31054: FOR_IN
31055: IFFALSE 31093
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31057: LD_VAR 0 1
31061: PPUSH
31062: LD_VAR 0 5
31066: PUSH
31067: LD_INT 1
31069: ARRAY
31070: PPUSH
31071: LD_VAR 0 5
31075: PUSH
31076: LD_INT 2
31078: ARRAY
31079: PPUSH
31080: CALL 30039 0 3
31084: NOT
31085: IFFALSE 31091
// exit ;
31087: POP
31088: POP
31089: GO 31095
31091: GO 31054
31093: POP
31094: POP
// end ;
31095: LD_VAR 0 4
31099: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31100: LD_INT 0
31102: PPUSH
31103: PPUSH
31104: PPUSH
31105: PPUSH
31106: PPUSH
31107: PPUSH
31108: PPUSH
// if not GetClass ( unit ) = class_sniper then
31109: LD_VAR 0 1
31113: PPUSH
31114: CALL_OW 257
31118: PUSH
31119: LD_INT 5
31121: EQUAL
31122: NOT
31123: IFFALSE 31127
// exit ;
31125: GO 31515
// dist := 8 ;
31127: LD_ADDR_VAR 0 5
31131: PUSH
31132: LD_INT 8
31134: ST_TO_ADDR
// viewRange := 12 ;
31135: LD_ADDR_VAR 0 7
31139: PUSH
31140: LD_INT 12
31142: ST_TO_ADDR
// side := GetSide ( unit ) ;
31143: LD_ADDR_VAR 0 6
31147: PUSH
31148: LD_VAR 0 1
31152: PPUSH
31153: CALL_OW 255
31157: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31158: LD_INT 61
31160: PPUSH
31161: LD_VAR 0 6
31165: PPUSH
31166: CALL_OW 321
31170: PUSH
31171: LD_INT 2
31173: EQUAL
31174: IFFALSE 31184
// viewRange := 16 ;
31176: LD_ADDR_VAR 0 7
31180: PUSH
31181: LD_INT 16
31183: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31184: LD_VAR 0 1
31188: PPUSH
31189: LD_VAR 0 2
31193: PPUSH
31194: LD_VAR 0 3
31198: PPUSH
31199: CALL_OW 297
31203: PUSH
31204: LD_VAR 0 5
31208: GREATER
31209: IFFALSE 31288
// begin ComMoveXY ( unit , x , y ) ;
31211: LD_VAR 0 1
31215: PPUSH
31216: LD_VAR 0 2
31220: PPUSH
31221: LD_VAR 0 3
31225: PPUSH
31226: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31230: LD_INT 35
31232: PPUSH
31233: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31237: LD_VAR 0 1
31241: PPUSH
31242: LD_VAR 0 2
31246: PPUSH
31247: LD_VAR 0 3
31251: PPUSH
31252: CALL 67797 0 3
31256: NOT
31257: IFFALSE 31261
// exit ;
31259: GO 31515
// until GetDistUnitXY ( unit , x , y ) < dist ;
31261: LD_VAR 0 1
31265: PPUSH
31266: LD_VAR 0 2
31270: PPUSH
31271: LD_VAR 0 3
31275: PPUSH
31276: CALL_OW 297
31280: PUSH
31281: LD_VAR 0 5
31285: LESS
31286: IFFALSE 31230
// end ; ComTurnXY ( unit , x , y ) ;
31288: LD_VAR 0 1
31292: PPUSH
31293: LD_VAR 0 2
31297: PPUSH
31298: LD_VAR 0 3
31302: PPUSH
31303: CALL_OW 118
// wait ( 5 ) ;
31307: LD_INT 5
31309: PPUSH
31310: CALL_OW 67
// _d := GetDir ( unit ) ;
31314: LD_ADDR_VAR 0 10
31318: PUSH
31319: LD_VAR 0 1
31323: PPUSH
31324: CALL_OW 254
31328: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31329: LD_ADDR_VAR 0 8
31333: PUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 250
31343: PPUSH
31344: LD_VAR 0 10
31348: PPUSH
31349: LD_VAR 0 5
31353: PPUSH
31354: CALL_OW 272
31358: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31359: LD_ADDR_VAR 0 9
31363: PUSH
31364: LD_VAR 0 1
31368: PPUSH
31369: CALL_OW 251
31373: PPUSH
31374: LD_VAR 0 10
31378: PPUSH
31379: LD_VAR 0 5
31383: PPUSH
31384: CALL_OW 273
31388: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31389: LD_VAR 0 8
31393: PPUSH
31394: LD_VAR 0 9
31398: PPUSH
31399: CALL_OW 488
31403: NOT
31404: IFFALSE 31408
// exit ;
31406: GO 31515
// ComAnimCustom ( unit , 1 ) ;
31408: LD_VAR 0 1
31412: PPUSH
31413: LD_INT 1
31415: PPUSH
31416: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31420: LD_VAR 0 8
31424: PPUSH
31425: LD_VAR 0 9
31429: PPUSH
31430: LD_VAR 0 6
31434: PPUSH
31435: LD_VAR 0 7
31439: PPUSH
31440: CALL_OW 330
// repeat wait ( 1 ) ;
31444: LD_INT 1
31446: PPUSH
31447: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31451: LD_VAR 0 1
31455: PPUSH
31456: CALL_OW 316
31460: PUSH
31461: LD_VAR 0 1
31465: PPUSH
31466: CALL_OW 314
31470: OR
31471: PUSH
31472: LD_VAR 0 1
31476: PPUSH
31477: CALL_OW 302
31481: NOT
31482: OR
31483: PUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 301
31493: OR
31494: IFFALSE 31444
// RemoveSeeing ( _x , _y , side ) ;
31496: LD_VAR 0 8
31500: PPUSH
31501: LD_VAR 0 9
31505: PPUSH
31506: LD_VAR 0 6
31510: PPUSH
31511: CALL_OW 331
// end ; end_of_file
31515: LD_VAR 0 4
31519: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31520: LD_INT 0
31522: PPUSH
31523: PPUSH
// if exist_mode then
31524: LD_VAR 0 2
31528: IFFALSE 31553
// unit := CreateCharacter ( prefix & ident ) else
31530: LD_ADDR_VAR 0 5
31534: PUSH
31535: LD_VAR 0 3
31539: PUSH
31540: LD_VAR 0 1
31544: STR
31545: PPUSH
31546: CALL_OW 34
31550: ST_TO_ADDR
31551: GO 31568
// unit := NewCharacter ( ident ) ;
31553: LD_ADDR_VAR 0 5
31557: PUSH
31558: LD_VAR 0 1
31562: PPUSH
31563: CALL_OW 25
31567: ST_TO_ADDR
// result := unit ;
31568: LD_ADDR_VAR 0 4
31572: PUSH
31573: LD_VAR 0 5
31577: ST_TO_ADDR
// end ;
31578: LD_VAR 0 4
31582: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31583: LD_INT 0
31585: PPUSH
31586: PPUSH
// if not side or not nation then
31587: LD_VAR 0 1
31591: NOT
31592: PUSH
31593: LD_VAR 0 2
31597: NOT
31598: OR
31599: IFFALSE 31603
// exit ;
31601: GO 32371
// case nation of nation_american :
31603: LD_VAR 0 2
31607: PUSH
31608: LD_INT 1
31610: DOUBLE
31611: EQUAL
31612: IFTRUE 31616
31614: GO 31830
31616: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31617: LD_ADDR_VAR 0 4
31621: PUSH
31622: LD_INT 35
31624: PUSH
31625: LD_INT 45
31627: PUSH
31628: LD_INT 46
31630: PUSH
31631: LD_INT 47
31633: PUSH
31634: LD_INT 82
31636: PUSH
31637: LD_INT 83
31639: PUSH
31640: LD_INT 84
31642: PUSH
31643: LD_INT 85
31645: PUSH
31646: LD_INT 86
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: LD_INT 6
31657: PUSH
31658: LD_INT 15
31660: PUSH
31661: LD_INT 16
31663: PUSH
31664: LD_INT 7
31666: PUSH
31667: LD_INT 12
31669: PUSH
31670: LD_INT 13
31672: PUSH
31673: LD_INT 10
31675: PUSH
31676: LD_INT 14
31678: PUSH
31679: LD_INT 20
31681: PUSH
31682: LD_INT 21
31684: PUSH
31685: LD_INT 22
31687: PUSH
31688: LD_INT 25
31690: PUSH
31691: LD_INT 32
31693: PUSH
31694: LD_INT 27
31696: PUSH
31697: LD_INT 36
31699: PUSH
31700: LD_INT 69
31702: PUSH
31703: LD_INT 39
31705: PUSH
31706: LD_INT 34
31708: PUSH
31709: LD_INT 40
31711: PUSH
31712: LD_INT 48
31714: PUSH
31715: LD_INT 49
31717: PUSH
31718: LD_INT 50
31720: PUSH
31721: LD_INT 51
31723: PUSH
31724: LD_INT 52
31726: PUSH
31727: LD_INT 53
31729: PUSH
31730: LD_INT 54
31732: PUSH
31733: LD_INT 55
31735: PUSH
31736: LD_INT 56
31738: PUSH
31739: LD_INT 57
31741: PUSH
31742: LD_INT 58
31744: PUSH
31745: LD_INT 59
31747: PUSH
31748: LD_INT 60
31750: PUSH
31751: LD_INT 61
31753: PUSH
31754: LD_INT 62
31756: PUSH
31757: LD_INT 80
31759: PUSH
31760: LD_INT 82
31762: PUSH
31763: LD_INT 83
31765: PUSH
31766: LD_INT 84
31768: PUSH
31769: LD_INT 85
31771: PUSH
31772: LD_INT 86
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: ST_TO_ADDR
31828: GO 32295
31830: LD_INT 2
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 32064
31838: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31839: LD_ADDR_VAR 0 4
31843: PUSH
31844: LD_INT 35
31846: PUSH
31847: LD_INT 45
31849: PUSH
31850: LD_INT 46
31852: PUSH
31853: LD_INT 47
31855: PUSH
31856: LD_INT 82
31858: PUSH
31859: LD_INT 83
31861: PUSH
31862: LD_INT 84
31864: PUSH
31865: LD_INT 85
31867: PUSH
31868: LD_INT 87
31870: PUSH
31871: LD_INT 70
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: LD_INT 11
31879: PUSH
31880: LD_INT 3
31882: PUSH
31883: LD_INT 4
31885: PUSH
31886: LD_INT 5
31888: PUSH
31889: LD_INT 6
31891: PUSH
31892: LD_INT 15
31894: PUSH
31895: LD_INT 18
31897: PUSH
31898: LD_INT 7
31900: PUSH
31901: LD_INT 17
31903: PUSH
31904: LD_INT 8
31906: PUSH
31907: LD_INT 20
31909: PUSH
31910: LD_INT 21
31912: PUSH
31913: LD_INT 22
31915: PUSH
31916: LD_INT 72
31918: PUSH
31919: LD_INT 26
31921: PUSH
31922: LD_INT 69
31924: PUSH
31925: LD_INT 39
31927: PUSH
31928: LD_INT 40
31930: PUSH
31931: LD_INT 41
31933: PUSH
31934: LD_INT 42
31936: PUSH
31937: LD_INT 43
31939: PUSH
31940: LD_INT 48
31942: PUSH
31943: LD_INT 49
31945: PUSH
31946: LD_INT 50
31948: PUSH
31949: LD_INT 51
31951: PUSH
31952: LD_INT 52
31954: PUSH
31955: LD_INT 53
31957: PUSH
31958: LD_INT 54
31960: PUSH
31961: LD_INT 55
31963: PUSH
31964: LD_INT 56
31966: PUSH
31967: LD_INT 60
31969: PUSH
31970: LD_INT 61
31972: PUSH
31973: LD_INT 62
31975: PUSH
31976: LD_INT 66
31978: PUSH
31979: LD_INT 67
31981: PUSH
31982: LD_INT 68
31984: PUSH
31985: LD_INT 81
31987: PUSH
31988: LD_INT 82
31990: PUSH
31991: LD_INT 83
31993: PUSH
31994: LD_INT 84
31996: PUSH
31997: LD_INT 85
31999: PUSH
32000: LD_INT 87
32002: PUSH
32003: LD_INT 88
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: ST_TO_ADDR
32062: GO 32295
32064: LD_INT 3
32066: DOUBLE
32067: EQUAL
32068: IFTRUE 32072
32070: GO 32294
32072: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32073: LD_ADDR_VAR 0 4
32077: PUSH
32078: LD_INT 46
32080: PUSH
32081: LD_INT 47
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: LD_INT 82
32092: PUSH
32093: LD_INT 83
32095: PUSH
32096: LD_INT 84
32098: PUSH
32099: LD_INT 85
32101: PUSH
32102: LD_INT 86
32104: PUSH
32105: LD_INT 11
32107: PUSH
32108: LD_INT 9
32110: PUSH
32111: LD_INT 20
32113: PUSH
32114: LD_INT 19
32116: PUSH
32117: LD_INT 21
32119: PUSH
32120: LD_INT 24
32122: PUSH
32123: LD_INT 22
32125: PUSH
32126: LD_INT 25
32128: PUSH
32129: LD_INT 28
32131: PUSH
32132: LD_INT 29
32134: PUSH
32135: LD_INT 30
32137: PUSH
32138: LD_INT 31
32140: PUSH
32141: LD_INT 37
32143: PUSH
32144: LD_INT 38
32146: PUSH
32147: LD_INT 32
32149: PUSH
32150: LD_INT 27
32152: PUSH
32153: LD_INT 33
32155: PUSH
32156: LD_INT 69
32158: PUSH
32159: LD_INT 39
32161: PUSH
32162: LD_INT 34
32164: PUSH
32165: LD_INT 40
32167: PUSH
32168: LD_INT 71
32170: PUSH
32171: LD_INT 23
32173: PUSH
32174: LD_INT 44
32176: PUSH
32177: LD_INT 48
32179: PUSH
32180: LD_INT 49
32182: PUSH
32183: LD_INT 50
32185: PUSH
32186: LD_INT 51
32188: PUSH
32189: LD_INT 52
32191: PUSH
32192: LD_INT 53
32194: PUSH
32195: LD_INT 54
32197: PUSH
32198: LD_INT 55
32200: PUSH
32201: LD_INT 56
32203: PUSH
32204: LD_INT 57
32206: PUSH
32207: LD_INT 58
32209: PUSH
32210: LD_INT 59
32212: PUSH
32213: LD_INT 63
32215: PUSH
32216: LD_INT 64
32218: PUSH
32219: LD_INT 65
32221: PUSH
32222: LD_INT 82
32224: PUSH
32225: LD_INT 83
32227: PUSH
32228: LD_INT 84
32230: PUSH
32231: LD_INT 85
32233: PUSH
32234: LD_INT 86
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: ST_TO_ADDR
32292: GO 32295
32294: POP
// if state > - 1 and state < 3 then
32295: LD_VAR 0 3
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: GREATER
32304: PUSH
32305: LD_VAR 0 3
32309: PUSH
32310: LD_INT 3
32312: LESS
32313: AND
32314: IFFALSE 32371
// for i in result do
32316: LD_ADDR_VAR 0 5
32320: PUSH
32321: LD_VAR 0 4
32325: PUSH
32326: FOR_IN
32327: IFFALSE 32369
// if GetTech ( i , side ) <> state then
32329: LD_VAR 0 5
32333: PPUSH
32334: LD_VAR 0 1
32338: PPUSH
32339: CALL_OW 321
32343: PUSH
32344: LD_VAR 0 3
32348: NONEQUAL
32349: IFFALSE 32367
// result := result diff i ;
32351: LD_ADDR_VAR 0 4
32355: PUSH
32356: LD_VAR 0 4
32360: PUSH
32361: LD_VAR 0 5
32365: DIFF
32366: ST_TO_ADDR
32367: GO 32326
32369: POP
32370: POP
// end ;
32371: LD_VAR 0 4
32375: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32376: LD_INT 0
32378: PPUSH
32379: PPUSH
32380: PPUSH
// result := true ;
32381: LD_ADDR_VAR 0 3
32385: PUSH
32386: LD_INT 1
32388: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32389: LD_ADDR_VAR 0 5
32393: PUSH
32394: LD_VAR 0 2
32398: PPUSH
32399: CALL_OW 480
32403: ST_TO_ADDR
// if not tmp then
32404: LD_VAR 0 5
32408: NOT
32409: IFFALSE 32413
// exit ;
32411: GO 32462
// for i in tmp do
32413: LD_ADDR_VAR 0 4
32417: PUSH
32418: LD_VAR 0 5
32422: PUSH
32423: FOR_IN
32424: IFFALSE 32460
// if GetTech ( i , side ) <> state_researched then
32426: LD_VAR 0 4
32430: PPUSH
32431: LD_VAR 0 1
32435: PPUSH
32436: CALL_OW 321
32440: PUSH
32441: LD_INT 2
32443: NONEQUAL
32444: IFFALSE 32458
// begin result := false ;
32446: LD_ADDR_VAR 0 3
32450: PUSH
32451: LD_INT 0
32453: ST_TO_ADDR
// exit ;
32454: POP
32455: POP
32456: GO 32462
// end ;
32458: GO 32423
32460: POP
32461: POP
// end ;
32462: LD_VAR 0 3
32466: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32467: LD_INT 0
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
32479: PPUSH
32480: PPUSH
32481: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32482: LD_VAR 0 1
32486: NOT
32487: PUSH
32488: LD_VAR 0 1
32492: PPUSH
32493: CALL_OW 257
32497: PUSH
32498: LD_INT 9
32500: NONEQUAL
32501: OR
32502: IFFALSE 32506
// exit ;
32504: GO 33079
// side := GetSide ( unit ) ;
32506: LD_ADDR_VAR 0 9
32510: PUSH
32511: LD_VAR 0 1
32515: PPUSH
32516: CALL_OW 255
32520: ST_TO_ADDR
// tech_space := tech_spacanom ;
32521: LD_ADDR_VAR 0 12
32525: PUSH
32526: LD_INT 29
32528: ST_TO_ADDR
// tech_time := tech_taurad ;
32529: LD_ADDR_VAR 0 13
32533: PUSH
32534: LD_INT 28
32536: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32537: LD_ADDR_VAR 0 11
32541: PUSH
32542: LD_VAR 0 1
32546: PPUSH
32547: CALL_OW 310
32551: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32552: LD_VAR 0 11
32556: PPUSH
32557: CALL_OW 247
32561: PUSH
32562: LD_INT 2
32564: EQUAL
32565: IFFALSE 32569
// exit ;
32567: GO 33079
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32569: LD_ADDR_VAR 0 8
32573: PUSH
32574: LD_INT 81
32576: PUSH
32577: LD_VAR 0 9
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 3
32588: PUSH
32589: LD_INT 21
32591: PUSH
32592: LD_INT 3
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PPUSH
32607: CALL_OW 69
32611: ST_TO_ADDR
// if not tmp then
32612: LD_VAR 0 8
32616: NOT
32617: IFFALSE 32621
// exit ;
32619: GO 33079
// if in_unit then
32621: LD_VAR 0 11
32625: IFFALSE 32649
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32627: LD_ADDR_VAR 0 10
32631: PUSH
32632: LD_VAR 0 8
32636: PPUSH
32637: LD_VAR 0 11
32641: PPUSH
32642: CALL_OW 74
32646: ST_TO_ADDR
32647: GO 32669
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32649: LD_ADDR_VAR 0 10
32653: PUSH
32654: LD_VAR 0 8
32658: PPUSH
32659: LD_VAR 0 1
32663: PPUSH
32664: CALL_OW 74
32668: ST_TO_ADDR
// if not enemy then
32669: LD_VAR 0 10
32673: NOT
32674: IFFALSE 32678
// exit ;
32676: GO 33079
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32678: LD_VAR 0 11
32682: PUSH
32683: LD_VAR 0 11
32687: PPUSH
32688: LD_VAR 0 10
32692: PPUSH
32693: CALL_OW 296
32697: PUSH
32698: LD_INT 13
32700: GREATER
32701: AND
32702: PUSH
32703: LD_VAR 0 1
32707: PPUSH
32708: LD_VAR 0 10
32712: PPUSH
32713: CALL_OW 296
32717: PUSH
32718: LD_INT 12
32720: GREATER
32721: OR
32722: IFFALSE 32726
// exit ;
32724: GO 33079
// missile := [ 1 ] ;
32726: LD_ADDR_VAR 0 14
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32737: LD_VAR 0 9
32741: PPUSH
32742: LD_VAR 0 12
32746: PPUSH
32747: CALL_OW 325
32751: IFFALSE 32780
// missile := Replace ( missile , missile + 1 , 2 ) ;
32753: LD_ADDR_VAR 0 14
32757: PUSH
32758: LD_VAR 0 14
32762: PPUSH
32763: LD_VAR 0 14
32767: PUSH
32768: LD_INT 1
32770: PLUS
32771: PPUSH
32772: LD_INT 2
32774: PPUSH
32775: CALL_OW 1
32779: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32780: LD_VAR 0 9
32784: PPUSH
32785: LD_VAR 0 13
32789: PPUSH
32790: CALL_OW 325
32794: PUSH
32795: LD_VAR 0 10
32799: PPUSH
32800: CALL_OW 255
32804: PPUSH
32805: LD_VAR 0 13
32809: PPUSH
32810: CALL_OW 325
32814: NOT
32815: AND
32816: IFFALSE 32845
// missile := Replace ( missile , missile + 1 , 3 ) ;
32818: LD_ADDR_VAR 0 14
32822: PUSH
32823: LD_VAR 0 14
32827: PPUSH
32828: LD_VAR 0 14
32832: PUSH
32833: LD_INT 1
32835: PLUS
32836: PPUSH
32837: LD_INT 3
32839: PPUSH
32840: CALL_OW 1
32844: ST_TO_ADDR
// if missile < 2 then
32845: LD_VAR 0 14
32849: PUSH
32850: LD_INT 2
32852: LESS
32853: IFFALSE 32857
// exit ;
32855: GO 33079
// x := GetX ( enemy ) ;
32857: LD_ADDR_VAR 0 4
32861: PUSH
32862: LD_VAR 0 10
32866: PPUSH
32867: CALL_OW 250
32871: ST_TO_ADDR
// y := GetY ( enemy ) ;
32872: LD_ADDR_VAR 0 5
32876: PUSH
32877: LD_VAR 0 10
32881: PPUSH
32882: CALL_OW 251
32886: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32887: LD_ADDR_VAR 0 6
32891: PUSH
32892: LD_VAR 0 4
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PPUSH
32901: LD_INT 1
32903: PPUSH
32904: CALL_OW 12
32908: PLUS
32909: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32910: LD_ADDR_VAR 0 7
32914: PUSH
32915: LD_VAR 0 5
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PPUSH
32924: LD_INT 1
32926: PPUSH
32927: CALL_OW 12
32931: PLUS
32932: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32933: LD_VAR 0 6
32937: PPUSH
32938: LD_VAR 0 7
32942: PPUSH
32943: CALL_OW 488
32947: NOT
32948: IFFALSE 32970
// begin _x := x ;
32950: LD_ADDR_VAR 0 6
32954: PUSH
32955: LD_VAR 0 4
32959: ST_TO_ADDR
// _y := y ;
32960: LD_ADDR_VAR 0 7
32964: PUSH
32965: LD_VAR 0 5
32969: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32970: LD_ADDR_VAR 0 3
32974: PUSH
32975: LD_INT 1
32977: PPUSH
32978: LD_VAR 0 14
32982: PPUSH
32983: CALL_OW 12
32987: ST_TO_ADDR
// case i of 1 :
32988: LD_VAR 0 3
32992: PUSH
32993: LD_INT 1
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33018
33001: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33002: LD_VAR 0 1
33006: PPUSH
33007: LD_VAR 0 10
33011: PPUSH
33012: CALL_OW 115
33016: GO 33079
33018: LD_INT 2
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33048
33026: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33027: LD_VAR 0 1
33031: PPUSH
33032: LD_VAR 0 6
33036: PPUSH
33037: LD_VAR 0 7
33041: PPUSH
33042: CALL_OW 153
33046: GO 33079
33048: LD_INT 3
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33078
33056: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33057: LD_VAR 0 1
33061: PPUSH
33062: LD_VAR 0 6
33066: PPUSH
33067: LD_VAR 0 7
33071: PPUSH
33072: CALL_OW 154
33076: GO 33079
33078: POP
// end ;
33079: LD_VAR 0 2
33083: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33084: LD_INT 0
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
33090: PPUSH
33091: PPUSH
// if not unit or not building then
33092: LD_VAR 0 1
33096: NOT
33097: PUSH
33098: LD_VAR 0 2
33102: NOT
33103: OR
33104: IFFALSE 33108
// exit ;
33106: GO 33266
// x := GetX ( building ) ;
33108: LD_ADDR_VAR 0 5
33112: PUSH
33113: LD_VAR 0 2
33117: PPUSH
33118: CALL_OW 250
33122: ST_TO_ADDR
// y := GetY ( building ) ;
33123: LD_ADDR_VAR 0 6
33127: PUSH
33128: LD_VAR 0 2
33132: PPUSH
33133: CALL_OW 251
33137: ST_TO_ADDR
// for i = 0 to 5 do
33138: LD_ADDR_VAR 0 4
33142: PUSH
33143: DOUBLE
33144: LD_INT 0
33146: DEC
33147: ST_TO_ADDR
33148: LD_INT 5
33150: PUSH
33151: FOR_TO
33152: IFFALSE 33264
// begin _x := ShiftX ( x , i , 3 ) ;
33154: LD_ADDR_VAR 0 7
33158: PUSH
33159: LD_VAR 0 5
33163: PPUSH
33164: LD_VAR 0 4
33168: PPUSH
33169: LD_INT 3
33171: PPUSH
33172: CALL_OW 272
33176: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33177: LD_ADDR_VAR 0 8
33181: PUSH
33182: LD_VAR 0 6
33186: PPUSH
33187: LD_VAR 0 4
33191: PPUSH
33192: LD_INT 3
33194: PPUSH
33195: CALL_OW 273
33199: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33200: LD_VAR 0 7
33204: PPUSH
33205: LD_VAR 0 8
33209: PPUSH
33210: CALL_OW 488
33214: NOT
33215: IFFALSE 33219
// continue ;
33217: GO 33151
// if HexInfo ( _x , _y ) = 0 then
33219: LD_VAR 0 7
33223: PPUSH
33224: LD_VAR 0 8
33228: PPUSH
33229: CALL_OW 428
33233: PUSH
33234: LD_INT 0
33236: EQUAL
33237: IFFALSE 33262
// begin ComMoveXY ( unit , _x , _y ) ;
33239: LD_VAR 0 1
33243: PPUSH
33244: LD_VAR 0 7
33248: PPUSH
33249: LD_VAR 0 8
33253: PPUSH
33254: CALL_OW 111
// exit ;
33258: POP
33259: POP
33260: GO 33266
// end ; end ;
33262: GO 33151
33264: POP
33265: POP
// end ;
33266: LD_VAR 0 3
33270: RET
// export function ScanBase ( side , base_area ) ; begin
33271: LD_INT 0
33273: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33274: LD_ADDR_VAR 0 3
33278: PUSH
33279: LD_VAR 0 2
33283: PPUSH
33284: LD_INT 81
33286: PUSH
33287: LD_VAR 0 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PPUSH
33296: CALL_OW 70
33300: ST_TO_ADDR
// end ;
33301: LD_VAR 0 3
33305: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33306: LD_INT 0
33308: PPUSH
33309: PPUSH
33310: PPUSH
33311: PPUSH
// result := false ;
33312: LD_ADDR_VAR 0 2
33316: PUSH
33317: LD_INT 0
33319: ST_TO_ADDR
// side := GetSide ( unit ) ;
33320: LD_ADDR_VAR 0 3
33324: PUSH
33325: LD_VAR 0 1
33329: PPUSH
33330: CALL_OW 255
33334: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33335: LD_ADDR_VAR 0 4
33339: PUSH
33340: LD_VAR 0 1
33344: PPUSH
33345: CALL_OW 248
33349: ST_TO_ADDR
// case nat of 1 :
33350: LD_VAR 0 4
33354: PUSH
33355: LD_INT 1
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33363
33361: GO 33374
33363: POP
// tech := tech_lassight ; 2 :
33364: LD_ADDR_VAR 0 5
33368: PUSH
33369: LD_INT 12
33371: ST_TO_ADDR
33372: GO 33413
33374: LD_INT 2
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33393
33382: POP
// tech := tech_mortar ; 3 :
33383: LD_ADDR_VAR 0 5
33387: PUSH
33388: LD_INT 41
33390: ST_TO_ADDR
33391: GO 33413
33393: LD_INT 3
33395: DOUBLE
33396: EQUAL
33397: IFTRUE 33401
33399: GO 33412
33401: POP
// tech := tech_bazooka ; end ;
33402: LD_ADDR_VAR 0 5
33406: PUSH
33407: LD_INT 44
33409: ST_TO_ADDR
33410: GO 33413
33412: POP
// if Researched ( side , tech ) then
33413: LD_VAR 0 3
33417: PPUSH
33418: LD_VAR 0 5
33422: PPUSH
33423: CALL_OW 325
33427: IFFALSE 33454
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33429: LD_ADDR_VAR 0 2
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: LD_INT 8
33439: PUSH
33440: LD_INT 9
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: LIST
33447: PUSH
33448: LD_VAR 0 4
33452: ARRAY
33453: ST_TO_ADDR
// end ;
33454: LD_VAR 0 2
33458: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33459: LD_INT 0
33461: PPUSH
33462: PPUSH
33463: PPUSH
// if not mines then
33464: LD_VAR 0 2
33468: NOT
33469: IFFALSE 33473
// exit ;
33471: GO 33617
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33473: LD_ADDR_VAR 0 5
33477: PUSH
33478: LD_INT 81
33480: PUSH
33481: LD_VAR 0 1
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: PUSH
33493: LD_INT 21
33495: PUSH
33496: LD_INT 3
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PPUSH
33511: CALL_OW 69
33515: ST_TO_ADDR
// for i in mines do
33516: LD_ADDR_VAR 0 4
33520: PUSH
33521: LD_VAR 0 2
33525: PUSH
33526: FOR_IN
33527: IFFALSE 33615
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33529: LD_VAR 0 4
33533: PUSH
33534: LD_INT 1
33536: ARRAY
33537: PPUSH
33538: LD_VAR 0 4
33542: PUSH
33543: LD_INT 2
33545: ARRAY
33546: PPUSH
33547: CALL_OW 458
33551: NOT
33552: IFFALSE 33556
// continue ;
33554: GO 33526
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33556: LD_VAR 0 4
33560: PUSH
33561: LD_INT 1
33563: ARRAY
33564: PPUSH
33565: LD_VAR 0 4
33569: PUSH
33570: LD_INT 2
33572: ARRAY
33573: PPUSH
33574: CALL_OW 428
33578: PUSH
33579: LD_VAR 0 5
33583: IN
33584: IFFALSE 33613
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33586: LD_VAR 0 4
33590: PUSH
33591: LD_INT 1
33593: ARRAY
33594: PPUSH
33595: LD_VAR 0 4
33599: PUSH
33600: LD_INT 2
33602: ARRAY
33603: PPUSH
33604: LD_VAR 0 1
33608: PPUSH
33609: CALL_OW 456
// end ;
33613: GO 33526
33615: POP
33616: POP
// end ;
33617: LD_VAR 0 3
33621: RET
// export function Count ( array ) ; var i ; begin
33622: LD_INT 0
33624: PPUSH
33625: PPUSH
// result := 0 ;
33626: LD_ADDR_VAR 0 2
33630: PUSH
33631: LD_INT 0
33633: ST_TO_ADDR
// for i in array do
33634: LD_ADDR_VAR 0 3
33638: PUSH
33639: LD_VAR 0 1
33643: PUSH
33644: FOR_IN
33645: IFFALSE 33669
// if i then
33647: LD_VAR 0 3
33651: IFFALSE 33667
// result := result + 1 ;
33653: LD_ADDR_VAR 0 2
33657: PUSH
33658: LD_VAR 0 2
33662: PUSH
33663: LD_INT 1
33665: PLUS
33666: ST_TO_ADDR
33667: GO 33644
33669: POP
33670: POP
// end ;
33671: LD_VAR 0 2
33675: RET
// export function IsEmpty ( building ) ; begin
33676: LD_INT 0
33678: PPUSH
// if not building then
33679: LD_VAR 0 1
33683: NOT
33684: IFFALSE 33688
// exit ;
33686: GO 33731
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33688: LD_ADDR_VAR 0 2
33692: PUSH
33693: LD_VAR 0 1
33697: PUSH
33698: LD_INT 22
33700: PUSH
33701: LD_VAR 0 1
33705: PPUSH
33706: CALL_OW 255
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 58
33717: PUSH
33718: EMPTY
33719: LIST
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PPUSH
33725: CALL_OW 69
33729: IN
33730: ST_TO_ADDR
// end ;
33731: LD_VAR 0 2
33735: RET
// export function IsNotFull ( building ) ; var places ; begin
33736: LD_INT 0
33738: PPUSH
33739: PPUSH
// if not building then
33740: LD_VAR 0 1
33744: NOT
33745: IFFALSE 33749
// exit ;
33747: GO 33920
// result := false ;
33749: LD_ADDR_VAR 0 2
33753: PUSH
33754: LD_INT 0
33756: ST_TO_ADDR
// places := 0 ;
33757: LD_ADDR_VAR 0 3
33761: PUSH
33762: LD_INT 0
33764: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33765: LD_VAR 0 1
33769: PPUSH
33770: CALL_OW 266
33774: PUSH
33775: LD_INT 0
33777: DOUBLE
33778: EQUAL
33779: IFTRUE 33837
33781: LD_INT 1
33783: DOUBLE
33784: EQUAL
33785: IFTRUE 33837
33787: LD_INT 6
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33837
33793: LD_INT 7
33795: DOUBLE
33796: EQUAL
33797: IFTRUE 33837
33799: LD_INT 8
33801: DOUBLE
33802: EQUAL
33803: IFTRUE 33837
33805: LD_INT 4
33807: DOUBLE
33808: EQUAL
33809: IFTRUE 33837
33811: LD_INT 5
33813: DOUBLE
33814: EQUAL
33815: IFTRUE 33837
33817: LD_INT 2
33819: DOUBLE
33820: EQUAL
33821: IFTRUE 33837
33823: LD_INT 3
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33837
33829: LD_INT 35
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33837
33835: GO 33848
33837: POP
// places := 6 ; b_bunker , b_breastwork :
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: LD_INT 6
33845: ST_TO_ADDR
33846: GO 33893
33848: LD_INT 32
33850: DOUBLE
33851: EQUAL
33852: IFTRUE 33862
33854: LD_INT 31
33856: DOUBLE
33857: EQUAL
33858: IFTRUE 33862
33860: GO 33873
33862: POP
// places := 1 ; b_control_tower :
33863: LD_ADDR_VAR 0 3
33867: PUSH
33868: LD_INT 1
33870: ST_TO_ADDR
33871: GO 33893
33873: LD_INT 36
33875: DOUBLE
33876: EQUAL
33877: IFTRUE 33881
33879: GO 33892
33881: POP
// places := 3 ; end ;
33882: LD_ADDR_VAR 0 3
33886: PUSH
33887: LD_INT 3
33889: ST_TO_ADDR
33890: GO 33893
33892: POP
// if places then
33893: LD_VAR 0 3
33897: IFFALSE 33920
// result := UnitsInside ( building ) < places ;
33899: LD_ADDR_VAR 0 2
33903: PUSH
33904: LD_VAR 0 1
33908: PPUSH
33909: CALL_OW 313
33913: PUSH
33914: LD_VAR 0 3
33918: LESS
33919: ST_TO_ADDR
// end ;
33920: LD_VAR 0 2
33924: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33925: LD_INT 0
33927: PPUSH
33928: PPUSH
33929: PPUSH
33930: PPUSH
// tmp := [ ] ;
33931: LD_ADDR_VAR 0 3
33935: PUSH
33936: EMPTY
33937: ST_TO_ADDR
// list := [ ] ;
33938: LD_ADDR_VAR 0 5
33942: PUSH
33943: EMPTY
33944: ST_TO_ADDR
// for i = 16 to 25 do
33945: LD_ADDR_VAR 0 4
33949: PUSH
33950: DOUBLE
33951: LD_INT 16
33953: DEC
33954: ST_TO_ADDR
33955: LD_INT 25
33957: PUSH
33958: FOR_TO
33959: IFFALSE 34032
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33961: LD_ADDR_VAR 0 3
33965: PUSH
33966: LD_VAR 0 3
33970: PUSH
33971: LD_INT 22
33973: PUSH
33974: LD_VAR 0 1
33978: PPUSH
33979: CALL_OW 255
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 91
33990: PUSH
33991: LD_VAR 0 1
33995: PUSH
33996: LD_INT 6
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 30
34006: PUSH
34007: LD_VAR 0 4
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: PUSH
34021: EMPTY
34022: LIST
34023: PPUSH
34024: CALL_OW 69
34028: ADD
34029: ST_TO_ADDR
34030: GO 33958
34032: POP
34033: POP
// for i = 1 to tmp do
34034: LD_ADDR_VAR 0 4
34038: PUSH
34039: DOUBLE
34040: LD_INT 1
34042: DEC
34043: ST_TO_ADDR
34044: LD_VAR 0 3
34048: PUSH
34049: FOR_TO
34050: IFFALSE 34138
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34052: LD_ADDR_VAR 0 5
34056: PUSH
34057: LD_VAR 0 5
34061: PUSH
34062: LD_VAR 0 3
34066: PUSH
34067: LD_VAR 0 4
34071: ARRAY
34072: PPUSH
34073: CALL_OW 266
34077: PUSH
34078: LD_VAR 0 3
34082: PUSH
34083: LD_VAR 0 4
34087: ARRAY
34088: PPUSH
34089: CALL_OW 250
34093: PUSH
34094: LD_VAR 0 3
34098: PUSH
34099: LD_VAR 0 4
34103: ARRAY
34104: PPUSH
34105: CALL_OW 251
34109: PUSH
34110: LD_VAR 0 3
34114: PUSH
34115: LD_VAR 0 4
34119: ARRAY
34120: PPUSH
34121: CALL_OW 254
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: PUSH
34132: EMPTY
34133: LIST
34134: ADD
34135: ST_TO_ADDR
34136: GO 34049
34138: POP
34139: POP
// result := list ;
34140: LD_ADDR_VAR 0 2
34144: PUSH
34145: LD_VAR 0 5
34149: ST_TO_ADDR
// end ;
34150: LD_VAR 0 2
34154: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34155: LD_INT 0
34157: PPUSH
34158: PPUSH
34159: PPUSH
34160: PPUSH
34161: PPUSH
34162: PPUSH
34163: PPUSH
// if not factory then
34164: LD_VAR 0 1
34168: NOT
34169: IFFALSE 34173
// exit ;
34171: GO 34766
// if control = control_apeman then
34173: LD_VAR 0 4
34177: PUSH
34178: LD_INT 5
34180: EQUAL
34181: IFFALSE 34290
// begin tmp := UnitsInside ( factory ) ;
34183: LD_ADDR_VAR 0 8
34187: PUSH
34188: LD_VAR 0 1
34192: PPUSH
34193: CALL_OW 313
34197: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34198: LD_VAR 0 8
34202: PPUSH
34203: LD_INT 25
34205: PUSH
34206: LD_INT 12
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PPUSH
34213: CALL_OW 72
34217: NOT
34218: IFFALSE 34228
// control := control_manual ;
34220: LD_ADDR_VAR 0 4
34224: PUSH
34225: LD_INT 1
34227: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34228: LD_ADDR_VAR 0 8
34232: PUSH
34233: LD_VAR 0 1
34237: PPUSH
34238: CALL 33925 0 1
34242: ST_TO_ADDR
// if tmp then
34243: LD_VAR 0 8
34247: IFFALSE 34290
// begin for i in tmp do
34249: LD_ADDR_VAR 0 7
34253: PUSH
34254: LD_VAR 0 8
34258: PUSH
34259: FOR_IN
34260: IFFALSE 34288
// if i [ 1 ] = b_ext_radio then
34262: LD_VAR 0 7
34266: PUSH
34267: LD_INT 1
34269: ARRAY
34270: PUSH
34271: LD_INT 22
34273: EQUAL
34274: IFFALSE 34286
// begin control := control_remote ;
34276: LD_ADDR_VAR 0 4
34280: PUSH
34281: LD_INT 2
34283: ST_TO_ADDR
// break ;
34284: GO 34288
// end ;
34286: GO 34259
34288: POP
34289: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34290: LD_VAR 0 1
34294: PPUSH
34295: LD_VAR 0 2
34299: PPUSH
34300: LD_VAR 0 3
34304: PPUSH
34305: LD_VAR 0 4
34309: PPUSH
34310: LD_VAR 0 5
34314: PPUSH
34315: CALL_OW 448
34319: IFFALSE 34354
// begin result := [ chassis , engine , control , weapon ] ;
34321: LD_ADDR_VAR 0 6
34325: PUSH
34326: LD_VAR 0 2
34330: PUSH
34331: LD_VAR 0 3
34335: PUSH
34336: LD_VAR 0 4
34340: PUSH
34341: LD_VAR 0 5
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: ST_TO_ADDR
// exit ;
34352: GO 34766
// end ; _chassis := AvailableChassisList ( factory ) ;
34354: LD_ADDR_VAR 0 9
34358: PUSH
34359: LD_VAR 0 1
34363: PPUSH
34364: CALL_OW 475
34368: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34369: LD_ADDR_VAR 0 11
34373: PUSH
34374: LD_VAR 0 1
34378: PPUSH
34379: CALL_OW 476
34383: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34384: LD_ADDR_VAR 0 12
34388: PUSH
34389: LD_VAR 0 1
34393: PPUSH
34394: CALL_OW 477
34398: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34399: LD_ADDR_VAR 0 10
34403: PUSH
34404: LD_VAR 0 1
34408: PPUSH
34409: CALL_OW 478
34413: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34414: LD_VAR 0 9
34418: NOT
34419: PUSH
34420: LD_VAR 0 11
34424: NOT
34425: OR
34426: PUSH
34427: LD_VAR 0 12
34431: NOT
34432: OR
34433: PUSH
34434: LD_VAR 0 10
34438: NOT
34439: OR
34440: IFFALSE 34475
// begin result := [ chassis , engine , control , weapon ] ;
34442: LD_ADDR_VAR 0 6
34446: PUSH
34447: LD_VAR 0 2
34451: PUSH
34452: LD_VAR 0 3
34456: PUSH
34457: LD_VAR 0 4
34461: PUSH
34462: LD_VAR 0 5
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: ST_TO_ADDR
// exit ;
34473: GO 34766
// end ; if not chassis in _chassis then
34475: LD_VAR 0 2
34479: PUSH
34480: LD_VAR 0 9
34484: IN
34485: NOT
34486: IFFALSE 34512
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34488: LD_ADDR_VAR 0 2
34492: PUSH
34493: LD_VAR 0 9
34497: PUSH
34498: LD_INT 1
34500: PPUSH
34501: LD_VAR 0 9
34505: PPUSH
34506: CALL_OW 12
34510: ARRAY
34511: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34512: LD_VAR 0 2
34516: PPUSH
34517: LD_VAR 0 3
34521: PPUSH
34522: CALL 34771 0 2
34526: NOT
34527: IFFALSE 34586
// repeat engine := _engine [ 1 ] ;
34529: LD_ADDR_VAR 0 3
34533: PUSH
34534: LD_VAR 0 11
34538: PUSH
34539: LD_INT 1
34541: ARRAY
34542: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34543: LD_ADDR_VAR 0 11
34547: PUSH
34548: LD_VAR 0 11
34552: PPUSH
34553: LD_INT 1
34555: PPUSH
34556: CALL_OW 3
34560: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34561: LD_VAR 0 2
34565: PPUSH
34566: LD_VAR 0 3
34570: PPUSH
34571: CALL 34771 0 2
34575: PUSH
34576: LD_VAR 0 11
34580: PUSH
34581: EMPTY
34582: EQUAL
34583: OR
34584: IFFALSE 34529
// if not control in _control then
34586: LD_VAR 0 4
34590: PUSH
34591: LD_VAR 0 12
34595: IN
34596: NOT
34597: IFFALSE 34623
// control := _control [ rand ( 1 , _control ) ] ;
34599: LD_ADDR_VAR 0 4
34603: PUSH
34604: LD_VAR 0 12
34608: PUSH
34609: LD_INT 1
34611: PPUSH
34612: LD_VAR 0 12
34616: PPUSH
34617: CALL_OW 12
34621: ARRAY
34622: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34623: LD_VAR 0 2
34627: PPUSH
34628: LD_VAR 0 5
34632: PPUSH
34633: CALL 34991 0 2
34637: NOT
34638: IFFALSE 34697
// repeat weapon := _weapon [ 1 ] ;
34640: LD_ADDR_VAR 0 5
34644: PUSH
34645: LD_VAR 0 10
34649: PUSH
34650: LD_INT 1
34652: ARRAY
34653: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34654: LD_ADDR_VAR 0 10
34658: PUSH
34659: LD_VAR 0 10
34663: PPUSH
34664: LD_INT 1
34666: PPUSH
34667: CALL_OW 3
34671: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34672: LD_VAR 0 2
34676: PPUSH
34677: LD_VAR 0 5
34681: PPUSH
34682: CALL 34991 0 2
34686: PUSH
34687: LD_VAR 0 10
34691: PUSH
34692: EMPTY
34693: EQUAL
34694: OR
34695: IFFALSE 34640
// result := [ ] ;
34697: LD_ADDR_VAR 0 6
34701: PUSH
34702: EMPTY
34703: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34704: LD_VAR 0 1
34708: PPUSH
34709: LD_VAR 0 2
34713: PPUSH
34714: LD_VAR 0 3
34718: PPUSH
34719: LD_VAR 0 4
34723: PPUSH
34724: LD_VAR 0 5
34728: PPUSH
34729: CALL_OW 448
34733: IFFALSE 34766
// result := [ chassis , engine , control , weapon ] ;
34735: LD_ADDR_VAR 0 6
34739: PUSH
34740: LD_VAR 0 2
34744: PUSH
34745: LD_VAR 0 3
34749: PUSH
34750: LD_VAR 0 4
34754: PUSH
34755: LD_VAR 0 5
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: ST_TO_ADDR
// end ;
34766: LD_VAR 0 6
34770: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34771: LD_INT 0
34773: PPUSH
// if not chassis or not engine then
34774: LD_VAR 0 1
34778: NOT
34779: PUSH
34780: LD_VAR 0 2
34784: NOT
34785: OR
34786: IFFALSE 34790
// exit ;
34788: GO 34986
// case engine of engine_solar :
34790: LD_VAR 0 2
34794: PUSH
34795: LD_INT 2
34797: DOUBLE
34798: EQUAL
34799: IFTRUE 34803
34801: GO 34841
34803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34804: LD_ADDR_VAR 0 3
34808: PUSH
34809: LD_INT 11
34811: PUSH
34812: LD_INT 12
34814: PUSH
34815: LD_INT 13
34817: PUSH
34818: LD_INT 14
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: LD_INT 3
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: ST_TO_ADDR
34839: GO 34970
34841: LD_INT 1
34843: DOUBLE
34844: EQUAL
34845: IFTRUE 34849
34847: GO 34911
34849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34850: LD_ADDR_VAR 0 3
34854: PUSH
34855: LD_INT 11
34857: PUSH
34858: LD_INT 12
34860: PUSH
34861: LD_INT 13
34863: PUSH
34864: LD_INT 14
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: LD_INT 2
34872: PUSH
34873: LD_INT 3
34875: PUSH
34876: LD_INT 4
34878: PUSH
34879: LD_INT 5
34881: PUSH
34882: LD_INT 21
34884: PUSH
34885: LD_INT 23
34887: PUSH
34888: LD_INT 22
34890: PUSH
34891: LD_INT 24
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
34909: GO 34970
34911: LD_INT 3
34913: DOUBLE
34914: EQUAL
34915: IFTRUE 34919
34917: GO 34969
34919: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34920: LD_ADDR_VAR 0 3
34924: PUSH
34925: LD_INT 13
34927: PUSH
34928: LD_INT 14
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: LD_INT 4
34939: PUSH
34940: LD_INT 5
34942: PUSH
34943: LD_INT 21
34945: PUSH
34946: LD_INT 22
34948: PUSH
34949: LD_INT 23
34951: PUSH
34952: LD_INT 24
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: ST_TO_ADDR
34967: GO 34970
34969: POP
// result := ( chassis in result ) ;
34970: LD_ADDR_VAR 0 3
34974: PUSH
34975: LD_VAR 0 1
34979: PUSH
34980: LD_VAR 0 3
34984: IN
34985: ST_TO_ADDR
// end ;
34986: LD_VAR 0 3
34990: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34991: LD_INT 0
34993: PPUSH
// if not chassis or not weapon then
34994: LD_VAR 0 1
34998: NOT
34999: PUSH
35000: LD_VAR 0 2
35004: NOT
35005: OR
35006: IFFALSE 35010
// exit ;
35008: GO 36070
// case weapon of us_machine_gun :
35010: LD_VAR 0 2
35014: PUSH
35015: LD_INT 2
35017: DOUBLE
35018: EQUAL
35019: IFTRUE 35023
35021: GO 35053
35023: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35024: LD_ADDR_VAR 0 3
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: LD_INT 3
35037: PUSH
35038: LD_INT 4
35040: PUSH
35041: LD_INT 5
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: ST_TO_ADDR
35051: GO 36054
35053: LD_INT 3
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35061
35059: GO 35091
35061: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 2
35072: PUSH
35073: LD_INT 3
35075: PUSH
35076: LD_INT 4
35078: PUSH
35079: LD_INT 5
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: ST_TO_ADDR
35089: GO 36054
35091: LD_INT 11
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35099
35097: GO 35129
35099: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35100: LD_ADDR_VAR 0 3
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: LD_INT 3
35113: PUSH
35114: LD_INT 4
35116: PUSH
35117: LD_INT 5
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: ST_TO_ADDR
35127: GO 36054
35129: LD_INT 4
35131: DOUBLE
35132: EQUAL
35133: IFTRUE 35137
35135: GO 35163
35137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35138: LD_ADDR_VAR 0 3
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 3
35148: PUSH
35149: LD_INT 4
35151: PUSH
35152: LD_INT 5
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: ST_TO_ADDR
35161: GO 36054
35163: LD_INT 5
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35171
35169: GO 35197
35171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35172: LD_ADDR_VAR 0 3
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: LD_INT 4
35185: PUSH
35186: LD_INT 5
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
35195: GO 36054
35197: LD_INT 9
35199: DOUBLE
35200: EQUAL
35201: IFTRUE 35205
35203: GO 35231
35205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35206: LD_ADDR_VAR 0 3
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 3
35216: PUSH
35217: LD_INT 4
35219: PUSH
35220: LD_INT 5
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: ST_TO_ADDR
35229: GO 36054
35231: LD_INT 7
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35239
35237: GO 35265
35239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35240: LD_ADDR_VAR 0 3
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: LD_INT 3
35250: PUSH
35251: LD_INT 4
35253: PUSH
35254: LD_INT 5
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: ST_TO_ADDR
35263: GO 36054
35265: LD_INT 12
35267: DOUBLE
35268: EQUAL
35269: IFTRUE 35273
35271: GO 35299
35273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35274: LD_ADDR_VAR 0 3
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 3
35284: PUSH
35285: LD_INT 4
35287: PUSH
35288: LD_INT 5
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: ST_TO_ADDR
35297: GO 36054
35299: LD_INT 13
35301: DOUBLE
35302: EQUAL
35303: IFTRUE 35307
35305: GO 35333
35307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35308: LD_ADDR_VAR 0 3
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 3
35318: PUSH
35319: LD_INT 4
35321: PUSH
35322: LD_INT 5
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: ST_TO_ADDR
35331: GO 36054
35333: LD_INT 14
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35341
35339: GO 35359
35341: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35342: LD_ADDR_VAR 0 3
35346: PUSH
35347: LD_INT 4
35349: PUSH
35350: LD_INT 5
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: ST_TO_ADDR
35357: GO 36054
35359: LD_INT 6
35361: DOUBLE
35362: EQUAL
35363: IFTRUE 35367
35365: GO 35385
35367: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35368: LD_ADDR_VAR 0 3
35372: PUSH
35373: LD_INT 4
35375: PUSH
35376: LD_INT 5
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: ST_TO_ADDR
35383: GO 36054
35385: LD_INT 10
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35393
35391: GO 35411
35393: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35394: LD_ADDR_VAR 0 3
35398: PUSH
35399: LD_INT 4
35401: PUSH
35402: LD_INT 5
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: ST_TO_ADDR
35409: GO 36054
35411: LD_INT 22
35413: DOUBLE
35414: EQUAL
35415: IFTRUE 35419
35417: GO 35445
35419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35420: LD_ADDR_VAR 0 3
35424: PUSH
35425: LD_INT 11
35427: PUSH
35428: LD_INT 12
35430: PUSH
35431: LD_INT 13
35433: PUSH
35434: LD_INT 14
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: ST_TO_ADDR
35443: GO 36054
35445: LD_INT 23
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35453
35451: GO 35479
35453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35454: LD_ADDR_VAR 0 3
35458: PUSH
35459: LD_INT 11
35461: PUSH
35462: LD_INT 12
35464: PUSH
35465: LD_INT 13
35467: PUSH
35468: LD_INT 14
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: ST_TO_ADDR
35477: GO 36054
35479: LD_INT 24
35481: DOUBLE
35482: EQUAL
35483: IFTRUE 35487
35485: GO 35513
35487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35488: LD_ADDR_VAR 0 3
35492: PUSH
35493: LD_INT 11
35495: PUSH
35496: LD_INT 12
35498: PUSH
35499: LD_INT 13
35501: PUSH
35502: LD_INT 14
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: ST_TO_ADDR
35511: GO 36054
35513: LD_INT 30
35515: DOUBLE
35516: EQUAL
35517: IFTRUE 35521
35519: GO 35547
35521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35522: LD_ADDR_VAR 0 3
35526: PUSH
35527: LD_INT 11
35529: PUSH
35530: LD_INT 12
35532: PUSH
35533: LD_INT 13
35535: PUSH
35536: LD_INT 14
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: ST_TO_ADDR
35545: GO 36054
35547: LD_INT 25
35549: DOUBLE
35550: EQUAL
35551: IFTRUE 35555
35553: GO 35573
35555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35556: LD_ADDR_VAR 0 3
35560: PUSH
35561: LD_INT 13
35563: PUSH
35564: LD_INT 14
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: ST_TO_ADDR
35571: GO 36054
35573: LD_INT 27
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35599
35581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_INT 13
35589: PUSH
35590: LD_INT 14
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: ST_TO_ADDR
35597: GO 36054
35599: LD_INT 92
35601: DOUBLE
35602: EQUAL
35603: IFTRUE 35607
35605: GO 35633
35607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35608: LD_ADDR_VAR 0 3
35612: PUSH
35613: LD_INT 11
35615: PUSH
35616: LD_INT 12
35618: PUSH
35619: LD_INT 13
35621: PUSH
35622: LD_INT 14
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: ST_TO_ADDR
35631: GO 36054
35633: LD_INT 28
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35641
35639: GO 35659
35641: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35642: LD_ADDR_VAR 0 3
35646: PUSH
35647: LD_INT 13
35649: PUSH
35650: LD_INT 14
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: ST_TO_ADDR
35657: GO 36054
35659: LD_INT 29
35661: DOUBLE
35662: EQUAL
35663: IFTRUE 35667
35665: GO 35685
35667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35668: LD_ADDR_VAR 0 3
35672: PUSH
35673: LD_INT 13
35675: PUSH
35676: LD_INT 14
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: ST_TO_ADDR
35683: GO 36054
35685: LD_INT 31
35687: DOUBLE
35688: EQUAL
35689: IFTRUE 35693
35691: GO 35711
35693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35694: LD_ADDR_VAR 0 3
35698: PUSH
35699: LD_INT 13
35701: PUSH
35702: LD_INT 14
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: ST_TO_ADDR
35709: GO 36054
35711: LD_INT 26
35713: DOUBLE
35714: EQUAL
35715: IFTRUE 35719
35717: GO 35737
35719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35720: LD_ADDR_VAR 0 3
35724: PUSH
35725: LD_INT 13
35727: PUSH
35728: LD_INT 14
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: ST_TO_ADDR
35735: GO 36054
35737: LD_INT 42
35739: DOUBLE
35740: EQUAL
35741: IFTRUE 35745
35743: GO 35771
35745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35746: LD_ADDR_VAR 0 3
35750: PUSH
35751: LD_INT 21
35753: PUSH
35754: LD_INT 22
35756: PUSH
35757: LD_INT 23
35759: PUSH
35760: LD_INT 24
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: ST_TO_ADDR
35769: GO 36054
35771: LD_INT 43
35773: DOUBLE
35774: EQUAL
35775: IFTRUE 35779
35777: GO 35805
35779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: LD_INT 21
35787: PUSH
35788: LD_INT 22
35790: PUSH
35791: LD_INT 23
35793: PUSH
35794: LD_INT 24
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: ST_TO_ADDR
35803: GO 36054
35805: LD_INT 44
35807: DOUBLE
35808: EQUAL
35809: IFTRUE 35813
35811: GO 35839
35813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35814: LD_ADDR_VAR 0 3
35818: PUSH
35819: LD_INT 21
35821: PUSH
35822: LD_INT 22
35824: PUSH
35825: LD_INT 23
35827: PUSH
35828: LD_INT 24
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: ST_TO_ADDR
35837: GO 36054
35839: LD_INT 45
35841: DOUBLE
35842: EQUAL
35843: IFTRUE 35847
35845: GO 35873
35847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35848: LD_ADDR_VAR 0 3
35852: PUSH
35853: LD_INT 21
35855: PUSH
35856: LD_INT 22
35858: PUSH
35859: LD_INT 23
35861: PUSH
35862: LD_INT 24
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: ST_TO_ADDR
35871: GO 36054
35873: LD_INT 49
35875: DOUBLE
35876: EQUAL
35877: IFTRUE 35881
35879: GO 35907
35881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35882: LD_ADDR_VAR 0 3
35886: PUSH
35887: LD_INT 21
35889: PUSH
35890: LD_INT 22
35892: PUSH
35893: LD_INT 23
35895: PUSH
35896: LD_INT 24
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: ST_TO_ADDR
35905: GO 36054
35907: LD_INT 51
35909: DOUBLE
35910: EQUAL
35911: IFTRUE 35915
35913: GO 35941
35915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35916: LD_ADDR_VAR 0 3
35920: PUSH
35921: LD_INT 21
35923: PUSH
35924: LD_INT 22
35926: PUSH
35927: LD_INT 23
35929: PUSH
35930: LD_INT 24
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: ST_TO_ADDR
35939: GO 36054
35941: LD_INT 52
35943: DOUBLE
35944: EQUAL
35945: IFTRUE 35949
35947: GO 35975
35949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35950: LD_ADDR_VAR 0 3
35954: PUSH
35955: LD_INT 21
35957: PUSH
35958: LD_INT 22
35960: PUSH
35961: LD_INT 23
35963: PUSH
35964: LD_INT 24
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
35973: GO 36054
35975: LD_INT 53
35977: DOUBLE
35978: EQUAL
35979: IFTRUE 35983
35981: GO 36001
35983: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35984: LD_ADDR_VAR 0 3
35988: PUSH
35989: LD_INT 23
35991: PUSH
35992: LD_INT 24
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: ST_TO_ADDR
35999: GO 36054
36001: LD_INT 46
36003: DOUBLE
36004: EQUAL
36005: IFTRUE 36009
36007: GO 36027
36009: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36010: LD_ADDR_VAR 0 3
36014: PUSH
36015: LD_INT 23
36017: PUSH
36018: LD_INT 24
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: ST_TO_ADDR
36025: GO 36054
36027: LD_INT 47
36029: DOUBLE
36030: EQUAL
36031: IFTRUE 36035
36033: GO 36053
36035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36036: LD_ADDR_VAR 0 3
36040: PUSH
36041: LD_INT 23
36043: PUSH
36044: LD_INT 24
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: ST_TO_ADDR
36051: GO 36054
36053: POP
// result := ( chassis in result ) ;
36054: LD_ADDR_VAR 0 3
36058: PUSH
36059: LD_VAR 0 1
36063: PUSH
36064: LD_VAR 0 3
36068: IN
36069: ST_TO_ADDR
// end ;
36070: LD_VAR 0 3
36074: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36075: LD_INT 0
36077: PPUSH
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
// result := array ;
36084: LD_ADDR_VAR 0 5
36088: PUSH
36089: LD_VAR 0 1
36093: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36094: LD_VAR 0 1
36098: NOT
36099: PUSH
36100: LD_VAR 0 2
36104: NOT
36105: OR
36106: PUSH
36107: LD_VAR 0 3
36111: NOT
36112: OR
36113: PUSH
36114: LD_VAR 0 2
36118: PUSH
36119: LD_VAR 0 1
36123: GREATER
36124: OR
36125: PUSH
36126: LD_VAR 0 3
36130: PUSH
36131: LD_VAR 0 1
36135: GREATER
36136: OR
36137: IFFALSE 36141
// exit ;
36139: GO 36437
// if direction then
36141: LD_VAR 0 4
36145: IFFALSE 36209
// begin d := 1 ;
36147: LD_ADDR_VAR 0 9
36151: PUSH
36152: LD_INT 1
36154: ST_TO_ADDR
// if i_from > i_to then
36155: LD_VAR 0 2
36159: PUSH
36160: LD_VAR 0 3
36164: GREATER
36165: IFFALSE 36191
// length := ( array - i_from ) + i_to else
36167: LD_ADDR_VAR 0 11
36171: PUSH
36172: LD_VAR 0 1
36176: PUSH
36177: LD_VAR 0 2
36181: MINUS
36182: PUSH
36183: LD_VAR 0 3
36187: PLUS
36188: ST_TO_ADDR
36189: GO 36207
// length := i_to - i_from ;
36191: LD_ADDR_VAR 0 11
36195: PUSH
36196: LD_VAR 0 3
36200: PUSH
36201: LD_VAR 0 2
36205: MINUS
36206: ST_TO_ADDR
// end else
36207: GO 36270
// begin d := - 1 ;
36209: LD_ADDR_VAR 0 9
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: ST_TO_ADDR
// if i_from > i_to then
36218: LD_VAR 0 2
36222: PUSH
36223: LD_VAR 0 3
36227: GREATER
36228: IFFALSE 36248
// length := i_from - i_to else
36230: LD_ADDR_VAR 0 11
36234: PUSH
36235: LD_VAR 0 2
36239: PUSH
36240: LD_VAR 0 3
36244: MINUS
36245: ST_TO_ADDR
36246: GO 36270
// length := ( array - i_to ) + i_from ;
36248: LD_ADDR_VAR 0 11
36252: PUSH
36253: LD_VAR 0 1
36257: PUSH
36258: LD_VAR 0 3
36262: MINUS
36263: PUSH
36264: LD_VAR 0 2
36268: PLUS
36269: ST_TO_ADDR
// end ; if not length then
36270: LD_VAR 0 11
36274: NOT
36275: IFFALSE 36279
// exit ;
36277: GO 36437
// tmp := array ;
36279: LD_ADDR_VAR 0 10
36283: PUSH
36284: LD_VAR 0 1
36288: ST_TO_ADDR
// for i = 1 to length do
36289: LD_ADDR_VAR 0 6
36293: PUSH
36294: DOUBLE
36295: LD_INT 1
36297: DEC
36298: ST_TO_ADDR
36299: LD_VAR 0 11
36303: PUSH
36304: FOR_TO
36305: IFFALSE 36425
// begin for j = 1 to array do
36307: LD_ADDR_VAR 0 7
36311: PUSH
36312: DOUBLE
36313: LD_INT 1
36315: DEC
36316: ST_TO_ADDR
36317: LD_VAR 0 1
36321: PUSH
36322: FOR_TO
36323: IFFALSE 36411
// begin k := j + d ;
36325: LD_ADDR_VAR 0 8
36329: PUSH
36330: LD_VAR 0 7
36334: PUSH
36335: LD_VAR 0 9
36339: PLUS
36340: ST_TO_ADDR
// if k > array then
36341: LD_VAR 0 8
36345: PUSH
36346: LD_VAR 0 1
36350: GREATER
36351: IFFALSE 36361
// k := 1 ;
36353: LD_ADDR_VAR 0 8
36357: PUSH
36358: LD_INT 1
36360: ST_TO_ADDR
// if not k then
36361: LD_VAR 0 8
36365: NOT
36366: IFFALSE 36378
// k := array ;
36368: LD_ADDR_VAR 0 8
36372: PUSH
36373: LD_VAR 0 1
36377: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36378: LD_ADDR_VAR 0 10
36382: PUSH
36383: LD_VAR 0 10
36387: PPUSH
36388: LD_VAR 0 8
36392: PPUSH
36393: LD_VAR 0 1
36397: PUSH
36398: LD_VAR 0 7
36402: ARRAY
36403: PPUSH
36404: CALL_OW 1
36408: ST_TO_ADDR
// end ;
36409: GO 36322
36411: POP
36412: POP
// array := tmp ;
36413: LD_ADDR_VAR 0 1
36417: PUSH
36418: LD_VAR 0 10
36422: ST_TO_ADDR
// end ;
36423: GO 36304
36425: POP
36426: POP
// result := array ;
36427: LD_ADDR_VAR 0 5
36431: PUSH
36432: LD_VAR 0 1
36436: ST_TO_ADDR
// end ;
36437: LD_VAR 0 5
36441: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36442: LD_INT 0
36444: PPUSH
36445: PPUSH
// result := 0 ;
36446: LD_ADDR_VAR 0 3
36450: PUSH
36451: LD_INT 0
36453: ST_TO_ADDR
// if not array or not value in array then
36454: LD_VAR 0 1
36458: NOT
36459: PUSH
36460: LD_VAR 0 2
36464: PUSH
36465: LD_VAR 0 1
36469: IN
36470: NOT
36471: OR
36472: IFFALSE 36476
// exit ;
36474: GO 36530
// for i = 1 to array do
36476: LD_ADDR_VAR 0 4
36480: PUSH
36481: DOUBLE
36482: LD_INT 1
36484: DEC
36485: ST_TO_ADDR
36486: LD_VAR 0 1
36490: PUSH
36491: FOR_TO
36492: IFFALSE 36528
// if value = array [ i ] then
36494: LD_VAR 0 2
36498: PUSH
36499: LD_VAR 0 1
36503: PUSH
36504: LD_VAR 0 4
36508: ARRAY
36509: EQUAL
36510: IFFALSE 36526
// begin result := i ;
36512: LD_ADDR_VAR 0 3
36516: PUSH
36517: LD_VAR 0 4
36521: ST_TO_ADDR
// exit ;
36522: POP
36523: POP
36524: GO 36530
// end ;
36526: GO 36491
36528: POP
36529: POP
// end ;
36530: LD_VAR 0 3
36534: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36535: LD_INT 0
36537: PPUSH
// vc_chassis := chassis ;
36538: LD_ADDR_OWVAR 37
36542: PUSH
36543: LD_VAR 0 1
36547: ST_TO_ADDR
// vc_engine := engine ;
36548: LD_ADDR_OWVAR 39
36552: PUSH
36553: LD_VAR 0 2
36557: ST_TO_ADDR
// vc_control := control ;
36558: LD_ADDR_OWVAR 38
36562: PUSH
36563: LD_VAR 0 3
36567: ST_TO_ADDR
// vc_weapon := weapon ;
36568: LD_ADDR_OWVAR 40
36572: PUSH
36573: LD_VAR 0 4
36577: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36578: LD_ADDR_OWVAR 41
36582: PUSH
36583: LD_VAR 0 5
36587: ST_TO_ADDR
// end ;
36588: LD_VAR 0 6
36592: RET
// export function WantPlant ( unit ) ; var task ; begin
36593: LD_INT 0
36595: PPUSH
36596: PPUSH
// result := false ;
36597: LD_ADDR_VAR 0 2
36601: PUSH
36602: LD_INT 0
36604: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36605: LD_ADDR_VAR 0 3
36609: PUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 437
36619: ST_TO_ADDR
// if task then
36620: LD_VAR 0 3
36624: IFFALSE 36652
// if task [ 1 ] [ 1 ] = p then
36626: LD_VAR 0 3
36630: PUSH
36631: LD_INT 1
36633: ARRAY
36634: PUSH
36635: LD_INT 1
36637: ARRAY
36638: PUSH
36639: LD_STRING p
36641: EQUAL
36642: IFFALSE 36652
// result := true ;
36644: LD_ADDR_VAR 0 2
36648: PUSH
36649: LD_INT 1
36651: ST_TO_ADDR
// end ;
36652: LD_VAR 0 2
36656: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36657: LD_INT 0
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
// if pos < 1 then
36663: LD_VAR 0 2
36667: PUSH
36668: LD_INT 1
36670: LESS
36671: IFFALSE 36675
// exit ;
36673: GO 36978
// if pos = 1 then
36675: LD_VAR 0 2
36679: PUSH
36680: LD_INT 1
36682: EQUAL
36683: IFFALSE 36716
// result := Replace ( arr , pos [ 1 ] , value ) else
36685: LD_ADDR_VAR 0 4
36689: PUSH
36690: LD_VAR 0 1
36694: PPUSH
36695: LD_VAR 0 2
36699: PUSH
36700: LD_INT 1
36702: ARRAY
36703: PPUSH
36704: LD_VAR 0 3
36708: PPUSH
36709: CALL_OW 1
36713: ST_TO_ADDR
36714: GO 36978
// begin tmp := arr ;
36716: LD_ADDR_VAR 0 6
36720: PUSH
36721: LD_VAR 0 1
36725: ST_TO_ADDR
// s_arr := [ tmp ] ;
36726: LD_ADDR_VAR 0 7
36730: PUSH
36731: LD_VAR 0 6
36735: PUSH
36736: EMPTY
36737: LIST
36738: ST_TO_ADDR
// for i = 1 to pos - 1 do
36739: LD_ADDR_VAR 0 5
36743: PUSH
36744: DOUBLE
36745: LD_INT 1
36747: DEC
36748: ST_TO_ADDR
36749: LD_VAR 0 2
36753: PUSH
36754: LD_INT 1
36756: MINUS
36757: PUSH
36758: FOR_TO
36759: IFFALSE 36804
// begin tmp := tmp [ pos [ i ] ] ;
36761: LD_ADDR_VAR 0 6
36765: PUSH
36766: LD_VAR 0 6
36770: PUSH
36771: LD_VAR 0 2
36775: PUSH
36776: LD_VAR 0 5
36780: ARRAY
36781: ARRAY
36782: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36783: LD_ADDR_VAR 0 7
36787: PUSH
36788: LD_VAR 0 7
36792: PUSH
36793: LD_VAR 0 6
36797: PUSH
36798: EMPTY
36799: LIST
36800: ADD
36801: ST_TO_ADDR
// end ;
36802: GO 36758
36804: POP
36805: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36806: LD_ADDR_VAR 0 6
36810: PUSH
36811: LD_VAR 0 6
36815: PPUSH
36816: LD_VAR 0 2
36820: PUSH
36821: LD_VAR 0 2
36825: ARRAY
36826: PPUSH
36827: LD_VAR 0 3
36831: PPUSH
36832: CALL_OW 1
36836: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36837: LD_ADDR_VAR 0 7
36841: PUSH
36842: LD_VAR 0 7
36846: PPUSH
36847: LD_VAR 0 7
36851: PPUSH
36852: LD_VAR 0 6
36856: PPUSH
36857: CALL_OW 1
36861: ST_TO_ADDR
// for i = s_arr downto 2 do
36862: LD_ADDR_VAR 0 5
36866: PUSH
36867: DOUBLE
36868: LD_VAR 0 7
36872: INC
36873: ST_TO_ADDR
36874: LD_INT 2
36876: PUSH
36877: FOR_DOWNTO
36878: IFFALSE 36962
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36880: LD_ADDR_VAR 0 6
36884: PUSH
36885: LD_VAR 0 7
36889: PUSH
36890: LD_VAR 0 5
36894: PUSH
36895: LD_INT 1
36897: MINUS
36898: ARRAY
36899: PPUSH
36900: LD_VAR 0 2
36904: PUSH
36905: LD_VAR 0 5
36909: PUSH
36910: LD_INT 1
36912: MINUS
36913: ARRAY
36914: PPUSH
36915: LD_VAR 0 7
36919: PUSH
36920: LD_VAR 0 5
36924: ARRAY
36925: PPUSH
36926: CALL_OW 1
36930: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36931: LD_ADDR_VAR 0 7
36935: PUSH
36936: LD_VAR 0 7
36940: PPUSH
36941: LD_VAR 0 5
36945: PUSH
36946: LD_INT 1
36948: MINUS
36949: PPUSH
36950: LD_VAR 0 6
36954: PPUSH
36955: CALL_OW 1
36959: ST_TO_ADDR
// end ;
36960: GO 36877
36962: POP
36963: POP
// result := s_arr [ 1 ] ;
36964: LD_ADDR_VAR 0 4
36968: PUSH
36969: LD_VAR 0 7
36973: PUSH
36974: LD_INT 1
36976: ARRAY
36977: ST_TO_ADDR
// end ; end ;
36978: LD_VAR 0 4
36982: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36983: LD_INT 0
36985: PPUSH
36986: PPUSH
// if not list then
36987: LD_VAR 0 1
36991: NOT
36992: IFFALSE 36996
// exit ;
36994: GO 37087
// i := list [ pos1 ] ;
36996: LD_ADDR_VAR 0 5
37000: PUSH
37001: LD_VAR 0 1
37005: PUSH
37006: LD_VAR 0 2
37010: ARRAY
37011: ST_TO_ADDR
// if not i then
37012: LD_VAR 0 5
37016: NOT
37017: IFFALSE 37021
// exit ;
37019: GO 37087
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37021: LD_ADDR_VAR 0 1
37025: PUSH
37026: LD_VAR 0 1
37030: PPUSH
37031: LD_VAR 0 2
37035: PPUSH
37036: LD_VAR 0 1
37040: PUSH
37041: LD_VAR 0 3
37045: ARRAY
37046: PPUSH
37047: CALL_OW 1
37051: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37052: LD_ADDR_VAR 0 1
37056: PUSH
37057: LD_VAR 0 1
37061: PPUSH
37062: LD_VAR 0 3
37066: PPUSH
37067: LD_VAR 0 5
37071: PPUSH
37072: CALL_OW 1
37076: ST_TO_ADDR
// result := list ;
37077: LD_ADDR_VAR 0 4
37081: PUSH
37082: LD_VAR 0 1
37086: ST_TO_ADDR
// end ;
37087: LD_VAR 0 4
37091: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37092: LD_INT 0
37094: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37095: LD_ADDR_VAR 0 5
37099: PUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 250
37109: PPUSH
37110: LD_VAR 0 1
37114: PPUSH
37115: CALL_OW 251
37119: PPUSH
37120: LD_VAR 0 2
37124: PPUSH
37125: LD_VAR 0 3
37129: PPUSH
37130: LD_VAR 0 4
37134: PPUSH
37135: CALL 37145 0 5
37139: ST_TO_ADDR
// end ;
37140: LD_VAR 0 5
37144: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37145: LD_INT 0
37147: PPUSH
37148: PPUSH
37149: PPUSH
37150: PPUSH
// if not list then
37151: LD_VAR 0 3
37155: NOT
37156: IFFALSE 37160
// exit ;
37158: GO 37548
// result := [ ] ;
37160: LD_ADDR_VAR 0 6
37164: PUSH
37165: EMPTY
37166: ST_TO_ADDR
// for i in list do
37167: LD_ADDR_VAR 0 7
37171: PUSH
37172: LD_VAR 0 3
37176: PUSH
37177: FOR_IN
37178: IFFALSE 37380
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37180: LD_ADDR_VAR 0 9
37184: PUSH
37185: LD_VAR 0 7
37189: PPUSH
37190: LD_VAR 0 1
37194: PPUSH
37195: LD_VAR 0 2
37199: PPUSH
37200: CALL_OW 297
37204: ST_TO_ADDR
// if not result then
37205: LD_VAR 0 6
37209: NOT
37210: IFFALSE 37236
// result := [ [ i , tmp ] ] else
37212: LD_ADDR_VAR 0 6
37216: PUSH
37217: LD_VAR 0 7
37221: PUSH
37222: LD_VAR 0 9
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: EMPTY
37232: LIST
37233: ST_TO_ADDR
37234: GO 37378
// begin if result [ result ] [ 2 ] < tmp then
37236: LD_VAR 0 6
37240: PUSH
37241: LD_VAR 0 6
37245: ARRAY
37246: PUSH
37247: LD_INT 2
37249: ARRAY
37250: PUSH
37251: LD_VAR 0 9
37255: LESS
37256: IFFALSE 37298
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37258: LD_ADDR_VAR 0 6
37262: PUSH
37263: LD_VAR 0 6
37267: PPUSH
37268: LD_VAR 0 6
37272: PUSH
37273: LD_INT 1
37275: PLUS
37276: PPUSH
37277: LD_VAR 0 7
37281: PUSH
37282: LD_VAR 0 9
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PPUSH
37291: CALL_OW 2
37295: ST_TO_ADDR
37296: GO 37378
// for j = 1 to result do
37298: LD_ADDR_VAR 0 8
37302: PUSH
37303: DOUBLE
37304: LD_INT 1
37306: DEC
37307: ST_TO_ADDR
37308: LD_VAR 0 6
37312: PUSH
37313: FOR_TO
37314: IFFALSE 37376
// begin if tmp < result [ j ] [ 2 ] then
37316: LD_VAR 0 9
37320: PUSH
37321: LD_VAR 0 6
37325: PUSH
37326: LD_VAR 0 8
37330: ARRAY
37331: PUSH
37332: LD_INT 2
37334: ARRAY
37335: LESS
37336: IFFALSE 37374
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37338: LD_ADDR_VAR 0 6
37342: PUSH
37343: LD_VAR 0 6
37347: PPUSH
37348: LD_VAR 0 8
37352: PPUSH
37353: LD_VAR 0 7
37357: PUSH
37358: LD_VAR 0 9
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PPUSH
37367: CALL_OW 2
37371: ST_TO_ADDR
// break ;
37372: GO 37376
// end ; end ;
37374: GO 37313
37376: POP
37377: POP
// end ; end ;
37378: GO 37177
37380: POP
37381: POP
// if result and not asc then
37382: LD_VAR 0 6
37386: PUSH
37387: LD_VAR 0 4
37391: NOT
37392: AND
37393: IFFALSE 37468
// begin tmp := result ;
37395: LD_ADDR_VAR 0 9
37399: PUSH
37400: LD_VAR 0 6
37404: ST_TO_ADDR
// for i = tmp downto 1 do
37405: LD_ADDR_VAR 0 7
37409: PUSH
37410: DOUBLE
37411: LD_VAR 0 9
37415: INC
37416: ST_TO_ADDR
37417: LD_INT 1
37419: PUSH
37420: FOR_DOWNTO
37421: IFFALSE 37466
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37423: LD_ADDR_VAR 0 6
37427: PUSH
37428: LD_VAR 0 6
37432: PPUSH
37433: LD_VAR 0 9
37437: PUSH
37438: LD_VAR 0 7
37442: MINUS
37443: PUSH
37444: LD_INT 1
37446: PLUS
37447: PPUSH
37448: LD_VAR 0 9
37452: PUSH
37453: LD_VAR 0 7
37457: ARRAY
37458: PPUSH
37459: CALL_OW 1
37463: ST_TO_ADDR
37464: GO 37420
37466: POP
37467: POP
// end ; tmp := [ ] ;
37468: LD_ADDR_VAR 0 9
37472: PUSH
37473: EMPTY
37474: ST_TO_ADDR
// if mode then
37475: LD_VAR 0 5
37479: IFFALSE 37548
// begin for i = 1 to result do
37481: LD_ADDR_VAR 0 7
37485: PUSH
37486: DOUBLE
37487: LD_INT 1
37489: DEC
37490: ST_TO_ADDR
37491: LD_VAR 0 6
37495: PUSH
37496: FOR_TO
37497: IFFALSE 37536
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37499: LD_ADDR_VAR 0 9
37503: PUSH
37504: LD_VAR 0 9
37508: PPUSH
37509: LD_VAR 0 7
37513: PPUSH
37514: LD_VAR 0 6
37518: PUSH
37519: LD_VAR 0 7
37523: ARRAY
37524: PUSH
37525: LD_INT 1
37527: ARRAY
37528: PPUSH
37529: CALL_OW 1
37533: ST_TO_ADDR
37534: GO 37496
37536: POP
37537: POP
// result := tmp ;
37538: LD_ADDR_VAR 0 6
37542: PUSH
37543: LD_VAR 0 9
37547: ST_TO_ADDR
// end ; end ;
37548: LD_VAR 0 6
37552: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37553: LD_INT 0
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37561: LD_ADDR_VAR 0 5
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: EMPTY
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: ST_TO_ADDR
// if not x or not y then
37583: LD_VAR 0 2
37587: NOT
37588: PUSH
37589: LD_VAR 0 3
37593: NOT
37594: OR
37595: IFFALSE 37599
// exit ;
37597: GO 39249
// if not range then
37599: LD_VAR 0 4
37603: NOT
37604: IFFALSE 37614
// range := 10 ;
37606: LD_ADDR_VAR 0 4
37610: PUSH
37611: LD_INT 10
37613: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37614: LD_ADDR_VAR 0 8
37618: PUSH
37619: LD_INT 81
37621: PUSH
37622: LD_VAR 0 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 92
37633: PUSH
37634: LD_VAR 0 2
37638: PUSH
37639: LD_VAR 0 3
37643: PUSH
37644: LD_VAR 0 4
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 3
37657: PUSH
37658: LD_INT 21
37660: PUSH
37661: LD_INT 3
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: LIST
37676: PPUSH
37677: CALL_OW 69
37681: ST_TO_ADDR
// if not tmp then
37682: LD_VAR 0 8
37686: NOT
37687: IFFALSE 37691
// exit ;
37689: GO 39249
// for i in tmp do
37691: LD_ADDR_VAR 0 6
37695: PUSH
37696: LD_VAR 0 8
37700: PUSH
37701: FOR_IN
37702: IFFALSE 39224
// begin points := [ 0 , 0 , 0 ] ;
37704: LD_ADDR_VAR 0 9
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: LIST
37722: ST_TO_ADDR
// bpoints := 1 ;
37723: LD_ADDR_VAR 0 10
37727: PUSH
37728: LD_INT 1
37730: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37731: LD_VAR 0 6
37735: PPUSH
37736: CALL_OW 247
37740: PUSH
37741: LD_INT 1
37743: DOUBLE
37744: EQUAL
37745: IFTRUE 37749
37747: GO 38327
37749: POP
// begin if GetClass ( i ) = 1 then
37750: LD_VAR 0 6
37754: PPUSH
37755: CALL_OW 257
37759: PUSH
37760: LD_INT 1
37762: EQUAL
37763: IFFALSE 37784
// points := [ 10 , 5 , 3 ] ;
37765: LD_ADDR_VAR 0 9
37769: PUSH
37770: LD_INT 10
37772: PUSH
37773: LD_INT 5
37775: PUSH
37776: LD_INT 3
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37784: LD_VAR 0 6
37788: PPUSH
37789: CALL_OW 257
37793: PUSH
37794: LD_INT 2
37796: PUSH
37797: LD_INT 3
37799: PUSH
37800: LD_INT 4
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: IN
37808: IFFALSE 37829
// points := [ 3 , 2 , 1 ] ;
37810: LD_ADDR_VAR 0 9
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: LD_INT 2
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37829: LD_VAR 0 6
37833: PPUSH
37834: CALL_OW 257
37838: PUSH
37839: LD_INT 5
37841: EQUAL
37842: IFFALSE 37863
// points := [ 130 , 5 , 2 ] ;
37844: LD_ADDR_VAR 0 9
37848: PUSH
37849: LD_INT 130
37851: PUSH
37852: LD_INT 5
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37863: LD_VAR 0 6
37867: PPUSH
37868: CALL_OW 257
37872: PUSH
37873: LD_INT 8
37875: EQUAL
37876: IFFALSE 37897
// points := [ 35 , 35 , 30 ] ;
37878: LD_ADDR_VAR 0 9
37882: PUSH
37883: LD_INT 35
37885: PUSH
37886: LD_INT 35
37888: PUSH
37889: LD_INT 30
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37897: LD_VAR 0 6
37901: PPUSH
37902: CALL_OW 257
37906: PUSH
37907: LD_INT 9
37909: EQUAL
37910: IFFALSE 37931
// points := [ 20 , 55 , 40 ] ;
37912: LD_ADDR_VAR 0 9
37916: PUSH
37917: LD_INT 20
37919: PUSH
37920: LD_INT 55
37922: PUSH
37923: LD_INT 40
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37931: LD_VAR 0 6
37935: PPUSH
37936: CALL_OW 257
37940: PUSH
37941: LD_INT 12
37943: PUSH
37944: LD_INT 16
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: IN
37951: IFFALSE 37972
// points := [ 5 , 3 , 2 ] ;
37953: LD_ADDR_VAR 0 9
37957: PUSH
37958: LD_INT 5
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37972: LD_VAR 0 6
37976: PPUSH
37977: CALL_OW 257
37981: PUSH
37982: LD_INT 17
37984: EQUAL
37985: IFFALSE 38006
// points := [ 100 , 50 , 75 ] ;
37987: LD_ADDR_VAR 0 9
37991: PUSH
37992: LD_INT 100
37994: PUSH
37995: LD_INT 50
37997: PUSH
37998: LD_INT 75
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38006: LD_VAR 0 6
38010: PPUSH
38011: CALL_OW 257
38015: PUSH
38016: LD_INT 15
38018: EQUAL
38019: IFFALSE 38040
// points := [ 10 , 5 , 3 ] ;
38021: LD_ADDR_VAR 0 9
38025: PUSH
38026: LD_INT 10
38028: PUSH
38029: LD_INT 5
38031: PUSH
38032: LD_INT 3
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38040: LD_VAR 0 6
38044: PPUSH
38045: CALL_OW 257
38049: PUSH
38050: LD_INT 14
38052: EQUAL
38053: IFFALSE 38074
// points := [ 10 , 0 , 0 ] ;
38055: LD_ADDR_VAR 0 9
38059: PUSH
38060: LD_INT 10
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: LIST
38073: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38074: LD_VAR 0 6
38078: PPUSH
38079: CALL_OW 257
38083: PUSH
38084: LD_INT 11
38086: EQUAL
38087: IFFALSE 38108
// points := [ 30 , 10 , 5 ] ;
38089: LD_ADDR_VAR 0 9
38093: PUSH
38094: LD_INT 30
38096: PUSH
38097: LD_INT 10
38099: PUSH
38100: LD_INT 5
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38108: LD_VAR 0 1
38112: PPUSH
38113: LD_INT 5
38115: PPUSH
38116: CALL_OW 321
38120: PUSH
38121: LD_INT 2
38123: EQUAL
38124: IFFALSE 38141
// bpoints := bpoints * 1.8 ;
38126: LD_ADDR_VAR 0 10
38130: PUSH
38131: LD_VAR 0 10
38135: PUSH
38136: LD_REAL  1.80000000000000E+0000
38139: MUL
38140: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38141: LD_VAR 0 6
38145: PPUSH
38146: CALL_OW 257
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: LD_INT 3
38159: PUSH
38160: LD_INT 4
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: IN
38169: PUSH
38170: LD_VAR 0 1
38174: PPUSH
38175: LD_INT 51
38177: PPUSH
38178: CALL_OW 321
38182: PUSH
38183: LD_INT 2
38185: EQUAL
38186: AND
38187: IFFALSE 38204
// bpoints := bpoints * 1.2 ;
38189: LD_ADDR_VAR 0 10
38193: PUSH
38194: LD_VAR 0 10
38198: PUSH
38199: LD_REAL  1.20000000000000E+0000
38202: MUL
38203: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38204: LD_VAR 0 6
38208: PPUSH
38209: CALL_OW 257
38213: PUSH
38214: LD_INT 5
38216: PUSH
38217: LD_INT 7
38219: PUSH
38220: LD_INT 9
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: IN
38228: PUSH
38229: LD_VAR 0 1
38233: PPUSH
38234: LD_INT 52
38236: PPUSH
38237: CALL_OW 321
38241: PUSH
38242: LD_INT 2
38244: EQUAL
38245: AND
38246: IFFALSE 38263
// bpoints := bpoints * 1.5 ;
38248: LD_ADDR_VAR 0 10
38252: PUSH
38253: LD_VAR 0 10
38257: PUSH
38258: LD_REAL  1.50000000000000E+0000
38261: MUL
38262: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38263: LD_VAR 0 1
38267: PPUSH
38268: LD_INT 66
38270: PPUSH
38271: CALL_OW 321
38275: PUSH
38276: LD_INT 2
38278: EQUAL
38279: IFFALSE 38296
// bpoints := bpoints * 1.1 ;
38281: LD_ADDR_VAR 0 10
38285: PUSH
38286: LD_VAR 0 10
38290: PUSH
38291: LD_REAL  1.10000000000000E+0000
38294: MUL
38295: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38296: LD_ADDR_VAR 0 10
38300: PUSH
38301: LD_VAR 0 10
38305: PUSH
38306: LD_VAR 0 6
38310: PPUSH
38311: LD_INT 1
38313: PPUSH
38314: CALL_OW 259
38318: PUSH
38319: LD_REAL  1.15000000000000E+0000
38322: MUL
38323: MUL
38324: ST_TO_ADDR
// end ; unit_vehicle :
38325: GO 39153
38327: LD_INT 2
38329: DOUBLE
38330: EQUAL
38331: IFTRUE 38335
38333: GO 39141
38335: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38336: LD_VAR 0 6
38340: PPUSH
38341: CALL_OW 264
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: LD_INT 42
38351: PUSH
38352: LD_INT 24
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: LIST
38359: IN
38360: IFFALSE 38381
// points := [ 25 , 5 , 3 ] ;
38362: LD_ADDR_VAR 0 9
38366: PUSH
38367: LD_INT 25
38369: PUSH
38370: LD_INT 5
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38381: LD_VAR 0 6
38385: PPUSH
38386: CALL_OW 264
38390: PUSH
38391: LD_INT 4
38393: PUSH
38394: LD_INT 43
38396: PUSH
38397: LD_INT 25
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: IN
38405: IFFALSE 38426
// points := [ 40 , 15 , 5 ] ;
38407: LD_ADDR_VAR 0 9
38411: PUSH
38412: LD_INT 40
38414: PUSH
38415: LD_INT 15
38417: PUSH
38418: LD_INT 5
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38426: LD_VAR 0 6
38430: PPUSH
38431: CALL_OW 264
38435: PUSH
38436: LD_INT 3
38438: PUSH
38439: LD_INT 23
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: IN
38446: IFFALSE 38467
// points := [ 7 , 25 , 8 ] ;
38448: LD_ADDR_VAR 0 9
38452: PUSH
38453: LD_INT 7
38455: PUSH
38456: LD_INT 25
38458: PUSH
38459: LD_INT 8
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38467: LD_VAR 0 6
38471: PPUSH
38472: CALL_OW 264
38476: PUSH
38477: LD_INT 5
38479: PUSH
38480: LD_INT 27
38482: PUSH
38483: LD_INT 44
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: IN
38491: IFFALSE 38512
// points := [ 14 , 50 , 16 ] ;
38493: LD_ADDR_VAR 0 9
38497: PUSH
38498: LD_INT 14
38500: PUSH
38501: LD_INT 50
38503: PUSH
38504: LD_INT 16
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: LIST
38511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38512: LD_VAR 0 6
38516: PPUSH
38517: CALL_OW 264
38521: PUSH
38522: LD_INT 6
38524: PUSH
38525: LD_INT 46
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: IN
38532: IFFALSE 38553
// points := [ 32 , 120 , 70 ] ;
38534: LD_ADDR_VAR 0 9
38538: PUSH
38539: LD_INT 32
38541: PUSH
38542: LD_INT 120
38544: PUSH
38545: LD_INT 70
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38553: LD_VAR 0 6
38557: PPUSH
38558: CALL_OW 264
38562: PUSH
38563: LD_INT 7
38565: PUSH
38566: LD_INT 28
38568: PUSH
38569: LD_INT 45
38571: PUSH
38572: LD_INT 92
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: IN
38581: IFFALSE 38602
// points := [ 35 , 20 , 45 ] ;
38583: LD_ADDR_VAR 0 9
38587: PUSH
38588: LD_INT 35
38590: PUSH
38591: LD_INT 20
38593: PUSH
38594: LD_INT 45
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38602: LD_VAR 0 6
38606: PPUSH
38607: CALL_OW 264
38611: PUSH
38612: LD_INT 47
38614: PUSH
38615: EMPTY
38616: LIST
38617: IN
38618: IFFALSE 38639
// points := [ 67 , 45 , 75 ] ;
38620: LD_ADDR_VAR 0 9
38624: PUSH
38625: LD_INT 67
38627: PUSH
38628: LD_INT 45
38630: PUSH
38631: LD_INT 75
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38639: LD_VAR 0 6
38643: PPUSH
38644: CALL_OW 264
38648: PUSH
38649: LD_INT 26
38651: PUSH
38652: EMPTY
38653: LIST
38654: IN
38655: IFFALSE 38676
// points := [ 120 , 30 , 80 ] ;
38657: LD_ADDR_VAR 0 9
38661: PUSH
38662: LD_INT 120
38664: PUSH
38665: LD_INT 30
38667: PUSH
38668: LD_INT 80
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: LIST
38675: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38676: LD_VAR 0 6
38680: PPUSH
38681: CALL_OW 264
38685: PUSH
38686: LD_INT 22
38688: PUSH
38689: EMPTY
38690: LIST
38691: IN
38692: IFFALSE 38713
// points := [ 40 , 1 , 1 ] ;
38694: LD_ADDR_VAR 0 9
38698: PUSH
38699: LD_INT 40
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38713: LD_VAR 0 6
38717: PPUSH
38718: CALL_OW 264
38722: PUSH
38723: LD_INT 29
38725: PUSH
38726: EMPTY
38727: LIST
38728: IN
38729: IFFALSE 38750
// points := [ 70 , 200 , 400 ] ;
38731: LD_ADDR_VAR 0 9
38735: PUSH
38736: LD_INT 70
38738: PUSH
38739: LD_INT 200
38741: PUSH
38742: LD_INT 400
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38750: LD_VAR 0 6
38754: PPUSH
38755: CALL_OW 264
38759: PUSH
38760: LD_INT 14
38762: PUSH
38763: LD_INT 53
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: IN
38770: IFFALSE 38791
// points := [ 40 , 10 , 20 ] ;
38772: LD_ADDR_VAR 0 9
38776: PUSH
38777: LD_INT 40
38779: PUSH
38780: LD_INT 10
38782: PUSH
38783: LD_INT 20
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38791: LD_VAR 0 6
38795: PPUSH
38796: CALL_OW 264
38800: PUSH
38801: LD_INT 9
38803: PUSH
38804: EMPTY
38805: LIST
38806: IN
38807: IFFALSE 38828
// points := [ 5 , 70 , 20 ] ;
38809: LD_ADDR_VAR 0 9
38813: PUSH
38814: LD_INT 5
38816: PUSH
38817: LD_INT 70
38819: PUSH
38820: LD_INT 20
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38828: LD_VAR 0 6
38832: PPUSH
38833: CALL_OW 264
38837: PUSH
38838: LD_INT 10
38840: PUSH
38841: EMPTY
38842: LIST
38843: IN
38844: IFFALSE 38865
// points := [ 35 , 110 , 70 ] ;
38846: LD_ADDR_VAR 0 9
38850: PUSH
38851: LD_INT 35
38853: PUSH
38854: LD_INT 110
38856: PUSH
38857: LD_INT 70
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38865: LD_VAR 0 6
38869: PPUSH
38870: CALL_OW 265
38874: PUSH
38875: LD_INT 25
38877: EQUAL
38878: IFFALSE 38899
// points := [ 80 , 65 , 100 ] ;
38880: LD_ADDR_VAR 0 9
38884: PUSH
38885: LD_INT 80
38887: PUSH
38888: LD_INT 65
38890: PUSH
38891: LD_INT 100
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38899: LD_VAR 0 6
38903: PPUSH
38904: CALL_OW 263
38908: PUSH
38909: LD_INT 1
38911: EQUAL
38912: IFFALSE 38947
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38914: LD_ADDR_VAR 0 10
38918: PUSH
38919: LD_VAR 0 10
38923: PUSH
38924: LD_VAR 0 6
38928: PPUSH
38929: CALL_OW 311
38933: PPUSH
38934: LD_INT 3
38936: PPUSH
38937: CALL_OW 259
38941: PUSH
38942: LD_INT 4
38944: MUL
38945: MUL
38946: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38947: LD_VAR 0 6
38951: PPUSH
38952: CALL_OW 263
38956: PUSH
38957: LD_INT 2
38959: EQUAL
38960: IFFALSE 39011
// begin j := IsControledBy ( i ) ;
38962: LD_ADDR_VAR 0 7
38966: PUSH
38967: LD_VAR 0 6
38971: PPUSH
38972: CALL_OW 312
38976: ST_TO_ADDR
// if j then
38977: LD_VAR 0 7
38981: IFFALSE 39011
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38983: LD_ADDR_VAR 0 10
38987: PUSH
38988: LD_VAR 0 10
38992: PUSH
38993: LD_VAR 0 7
38997: PPUSH
38998: LD_INT 3
39000: PPUSH
39001: CALL_OW 259
39005: PUSH
39006: LD_INT 3
39008: MUL
39009: MUL
39010: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39011: LD_VAR 0 6
39015: PPUSH
39016: CALL_OW 264
39020: PUSH
39021: LD_INT 5
39023: PUSH
39024: LD_INT 6
39026: PUSH
39027: LD_INT 46
39029: PUSH
39030: LD_INT 44
39032: PUSH
39033: LD_INT 47
39035: PUSH
39036: LD_INT 45
39038: PUSH
39039: LD_INT 28
39041: PUSH
39042: LD_INT 7
39044: PUSH
39045: LD_INT 27
39047: PUSH
39048: LD_INT 29
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: IN
39063: PUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: LD_INT 52
39071: PPUSH
39072: CALL_OW 321
39076: PUSH
39077: LD_INT 2
39079: EQUAL
39080: AND
39081: IFFALSE 39098
// bpoints := bpoints * 1.2 ;
39083: LD_ADDR_VAR 0 10
39087: PUSH
39088: LD_VAR 0 10
39092: PUSH
39093: LD_REAL  1.20000000000000E+0000
39096: MUL
39097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39098: LD_VAR 0 6
39102: PPUSH
39103: CALL_OW 264
39107: PUSH
39108: LD_INT 6
39110: PUSH
39111: LD_INT 46
39113: PUSH
39114: LD_INT 47
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: IN
39122: IFFALSE 39139
// bpoints := bpoints * 1.2 ;
39124: LD_ADDR_VAR 0 10
39128: PUSH
39129: LD_VAR 0 10
39133: PUSH
39134: LD_REAL  1.20000000000000E+0000
39137: MUL
39138: ST_TO_ADDR
// end ; unit_building :
39139: GO 39153
39141: LD_INT 3
39143: DOUBLE
39144: EQUAL
39145: IFTRUE 39149
39147: GO 39152
39149: POP
// ; end ;
39150: GO 39153
39152: POP
// for j = 1 to 3 do
39153: LD_ADDR_VAR 0 7
39157: PUSH
39158: DOUBLE
39159: LD_INT 1
39161: DEC
39162: ST_TO_ADDR
39163: LD_INT 3
39165: PUSH
39166: FOR_TO
39167: IFFALSE 39220
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39169: LD_ADDR_VAR 0 5
39173: PUSH
39174: LD_VAR 0 5
39178: PPUSH
39179: LD_VAR 0 7
39183: PPUSH
39184: LD_VAR 0 5
39188: PUSH
39189: LD_VAR 0 7
39193: ARRAY
39194: PUSH
39195: LD_VAR 0 9
39199: PUSH
39200: LD_VAR 0 7
39204: ARRAY
39205: PUSH
39206: LD_VAR 0 10
39210: MUL
39211: PLUS
39212: PPUSH
39213: CALL_OW 1
39217: ST_TO_ADDR
39218: GO 39166
39220: POP
39221: POP
// end ;
39222: GO 37701
39224: POP
39225: POP
// result := Replace ( result , 4 , tmp ) ;
39226: LD_ADDR_VAR 0 5
39230: PUSH
39231: LD_VAR 0 5
39235: PPUSH
39236: LD_INT 4
39238: PPUSH
39239: LD_VAR 0 8
39243: PPUSH
39244: CALL_OW 1
39248: ST_TO_ADDR
// end ;
39249: LD_VAR 0 5
39253: RET
// export function DangerAtRange ( unit , range ) ; begin
39254: LD_INT 0
39256: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39257: LD_ADDR_VAR 0 3
39261: PUSH
39262: LD_VAR 0 1
39266: PPUSH
39267: CALL_OW 255
39271: PPUSH
39272: LD_VAR 0 1
39276: PPUSH
39277: CALL_OW 250
39281: PPUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL_OW 251
39291: PPUSH
39292: LD_VAR 0 2
39296: PPUSH
39297: CALL 37553 0 4
39301: ST_TO_ADDR
// end ;
39302: LD_VAR 0 3
39306: RET
// export function DangerInArea ( side , area ) ; begin
39307: LD_INT 0
39309: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39310: LD_ADDR_VAR 0 3
39314: PUSH
39315: LD_VAR 0 2
39319: PPUSH
39320: LD_INT 81
39322: PUSH
39323: LD_VAR 0 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PPUSH
39332: CALL_OW 70
39336: ST_TO_ADDR
// end ;
39337: LD_VAR 0 3
39341: RET
// export function IsExtension ( b ) ; begin
39342: LD_INT 0
39344: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39345: LD_ADDR_VAR 0 2
39349: PUSH
39350: LD_VAR 0 1
39354: PUSH
39355: LD_INT 23
39357: PUSH
39358: LD_INT 20
39360: PUSH
39361: LD_INT 22
39363: PUSH
39364: LD_INT 17
39366: PUSH
39367: LD_INT 24
39369: PUSH
39370: LD_INT 21
39372: PUSH
39373: LD_INT 19
39375: PUSH
39376: LD_INT 16
39378: PUSH
39379: LD_INT 25
39381: PUSH
39382: LD_INT 18
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: IN
39397: ST_TO_ADDR
// end ;
39398: LD_VAR 0 2
39402: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39403: LD_INT 0
39405: PPUSH
39406: PPUSH
39407: PPUSH
// result := [ ] ;
39408: LD_ADDR_VAR 0 4
39412: PUSH
39413: EMPTY
39414: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39415: LD_ADDR_VAR 0 5
39419: PUSH
39420: LD_VAR 0 2
39424: PPUSH
39425: LD_INT 21
39427: PUSH
39428: LD_INT 3
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PPUSH
39435: CALL_OW 70
39439: ST_TO_ADDR
// if not tmp then
39440: LD_VAR 0 5
39444: NOT
39445: IFFALSE 39449
// exit ;
39447: GO 39513
// if checkLink then
39449: LD_VAR 0 3
39453: IFFALSE 39503
// begin for i in tmp do
39455: LD_ADDR_VAR 0 6
39459: PUSH
39460: LD_VAR 0 5
39464: PUSH
39465: FOR_IN
39466: IFFALSE 39501
// if GetBase ( i ) <> base then
39468: LD_VAR 0 6
39472: PPUSH
39473: CALL_OW 274
39477: PUSH
39478: LD_VAR 0 1
39482: NONEQUAL
39483: IFFALSE 39499
// ComLinkToBase ( base , i ) ;
39485: LD_VAR 0 1
39489: PPUSH
39490: LD_VAR 0 6
39494: PPUSH
39495: CALL_OW 169
39499: GO 39465
39501: POP
39502: POP
// end ; result := tmp ;
39503: LD_ADDR_VAR 0 4
39507: PUSH
39508: LD_VAR 0 5
39512: ST_TO_ADDR
// end ;
39513: LD_VAR 0 4
39517: RET
// export function ComComplete ( units , b ) ; var i ; begin
39518: LD_INT 0
39520: PPUSH
39521: PPUSH
// if not units then
39522: LD_VAR 0 1
39526: NOT
39527: IFFALSE 39531
// exit ;
39529: GO 39621
// for i in units do
39531: LD_ADDR_VAR 0 4
39535: PUSH
39536: LD_VAR 0 1
39540: PUSH
39541: FOR_IN
39542: IFFALSE 39619
// if BuildingStatus ( b ) = bs_build then
39544: LD_VAR 0 2
39548: PPUSH
39549: CALL_OW 461
39553: PUSH
39554: LD_INT 1
39556: EQUAL
39557: IFFALSE 39617
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39559: LD_VAR 0 4
39563: PPUSH
39564: LD_STRING h
39566: PUSH
39567: LD_VAR 0 2
39571: PPUSH
39572: CALL_OW 250
39576: PUSH
39577: LD_VAR 0 2
39581: PPUSH
39582: CALL_OW 251
39586: PUSH
39587: LD_VAR 0 2
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: PUSH
39610: EMPTY
39611: LIST
39612: PPUSH
39613: CALL_OW 446
39617: GO 39541
39619: POP
39620: POP
// end ;
39621: LD_VAR 0 3
39625: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39626: LD_INT 0
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
39633: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39634: LD_VAR 0 1
39638: NOT
39639: PUSH
39640: LD_VAR 0 1
39644: PPUSH
39645: CALL_OW 263
39649: PUSH
39650: LD_INT 2
39652: NONEQUAL
39653: OR
39654: IFFALSE 39658
// exit ;
39656: GO 39974
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39658: LD_ADDR_VAR 0 6
39662: PUSH
39663: LD_INT 22
39665: PUSH
39666: LD_VAR 0 1
39670: PPUSH
39671: CALL_OW 255
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 30
39685: PUSH
39686: LD_INT 36
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 34
39695: PUSH
39696: LD_INT 31
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: LIST
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PPUSH
39712: CALL_OW 69
39716: ST_TO_ADDR
// if not tmp then
39717: LD_VAR 0 6
39721: NOT
39722: IFFALSE 39726
// exit ;
39724: GO 39974
// result := [ ] ;
39726: LD_ADDR_VAR 0 2
39730: PUSH
39731: EMPTY
39732: ST_TO_ADDR
// for i in tmp do
39733: LD_ADDR_VAR 0 3
39737: PUSH
39738: LD_VAR 0 6
39742: PUSH
39743: FOR_IN
39744: IFFALSE 39815
// begin t := UnitsInside ( i ) ;
39746: LD_ADDR_VAR 0 4
39750: PUSH
39751: LD_VAR 0 3
39755: PPUSH
39756: CALL_OW 313
39760: ST_TO_ADDR
// if t then
39761: LD_VAR 0 4
39765: IFFALSE 39813
// for j in t do
39767: LD_ADDR_VAR 0 7
39771: PUSH
39772: LD_VAR 0 4
39776: PUSH
39777: FOR_IN
39778: IFFALSE 39811
// result := Replace ( result , result + 1 , j ) ;
39780: LD_ADDR_VAR 0 2
39784: PUSH
39785: LD_VAR 0 2
39789: PPUSH
39790: LD_VAR 0 2
39794: PUSH
39795: LD_INT 1
39797: PLUS
39798: PPUSH
39799: LD_VAR 0 7
39803: PPUSH
39804: CALL_OW 1
39808: ST_TO_ADDR
39809: GO 39777
39811: POP
39812: POP
// end ;
39813: GO 39743
39815: POP
39816: POP
// if not result then
39817: LD_VAR 0 2
39821: NOT
39822: IFFALSE 39826
// exit ;
39824: GO 39974
// mech := result [ 1 ] ;
39826: LD_ADDR_VAR 0 5
39830: PUSH
39831: LD_VAR 0 2
39835: PUSH
39836: LD_INT 1
39838: ARRAY
39839: ST_TO_ADDR
// if result > 1 then
39840: LD_VAR 0 2
39844: PUSH
39845: LD_INT 1
39847: GREATER
39848: IFFALSE 39960
// begin for i = 2 to result do
39850: LD_ADDR_VAR 0 3
39854: PUSH
39855: DOUBLE
39856: LD_INT 2
39858: DEC
39859: ST_TO_ADDR
39860: LD_VAR 0 2
39864: PUSH
39865: FOR_TO
39866: IFFALSE 39958
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39868: LD_ADDR_VAR 0 4
39872: PUSH
39873: LD_VAR 0 2
39877: PUSH
39878: LD_VAR 0 3
39882: ARRAY
39883: PPUSH
39884: LD_INT 3
39886: PPUSH
39887: CALL_OW 259
39891: PUSH
39892: LD_VAR 0 2
39896: PUSH
39897: LD_VAR 0 3
39901: ARRAY
39902: PPUSH
39903: CALL_OW 432
39907: MINUS
39908: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39909: LD_VAR 0 4
39913: PUSH
39914: LD_VAR 0 5
39918: PPUSH
39919: LD_INT 3
39921: PPUSH
39922: CALL_OW 259
39926: PUSH
39927: LD_VAR 0 5
39931: PPUSH
39932: CALL_OW 432
39936: MINUS
39937: GREATEREQUAL
39938: IFFALSE 39956
// mech := result [ i ] ;
39940: LD_ADDR_VAR 0 5
39944: PUSH
39945: LD_VAR 0 2
39949: PUSH
39950: LD_VAR 0 3
39954: ARRAY
39955: ST_TO_ADDR
// end ;
39956: GO 39865
39958: POP
39959: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39960: LD_VAR 0 1
39964: PPUSH
39965: LD_VAR 0 5
39969: PPUSH
39970: CALL_OW 135
// end ;
39974: LD_VAR 0 2
39978: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39979: LD_INT 0
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
// result := [ ] ;
39994: LD_ADDR_VAR 0 7
39998: PUSH
39999: EMPTY
40000: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40001: LD_VAR 0 1
40005: PPUSH
40006: CALL_OW 266
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: IN
40021: NOT
40022: IFFALSE 40026
// exit ;
40024: GO 41660
// if name then
40026: LD_VAR 0 3
40030: IFFALSE 40046
// SetBName ( base_dep , name ) ;
40032: LD_VAR 0 1
40036: PPUSH
40037: LD_VAR 0 3
40041: PPUSH
40042: CALL_OW 500
// base := GetBase ( base_dep ) ;
40046: LD_ADDR_VAR 0 15
40050: PUSH
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 274
40060: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40061: LD_ADDR_VAR 0 16
40065: PUSH
40066: LD_VAR 0 1
40070: PPUSH
40071: CALL_OW 255
40075: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40076: LD_ADDR_VAR 0 17
40080: PUSH
40081: LD_VAR 0 1
40085: PPUSH
40086: CALL_OW 248
40090: ST_TO_ADDR
// if sources then
40091: LD_VAR 0 5
40095: IFFALSE 40142
// for i = 1 to 3 do
40097: LD_ADDR_VAR 0 8
40101: PUSH
40102: DOUBLE
40103: LD_INT 1
40105: DEC
40106: ST_TO_ADDR
40107: LD_INT 3
40109: PUSH
40110: FOR_TO
40111: IFFALSE 40140
// AddResourceType ( base , i , sources [ i ] ) ;
40113: LD_VAR 0 15
40117: PPUSH
40118: LD_VAR 0 8
40122: PPUSH
40123: LD_VAR 0 5
40127: PUSH
40128: LD_VAR 0 8
40132: ARRAY
40133: PPUSH
40134: CALL_OW 276
40138: GO 40110
40140: POP
40141: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40142: LD_ADDR_VAR 0 18
40146: PUSH
40147: LD_VAR 0 15
40151: PPUSH
40152: LD_VAR 0 2
40156: PPUSH
40157: LD_INT 1
40159: PPUSH
40160: CALL 39403 0 3
40164: ST_TO_ADDR
// InitHc ;
40165: CALL_OW 19
// InitUc ;
40169: CALL_OW 18
// uc_side := side ;
40173: LD_ADDR_OWVAR 20
40177: PUSH
40178: LD_VAR 0 16
40182: ST_TO_ADDR
// uc_nation := nation ;
40183: LD_ADDR_OWVAR 21
40187: PUSH
40188: LD_VAR 0 17
40192: ST_TO_ADDR
// if buildings then
40193: LD_VAR 0 18
40197: IFFALSE 41519
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40199: LD_ADDR_VAR 0 19
40203: PUSH
40204: LD_VAR 0 18
40208: PPUSH
40209: LD_INT 2
40211: PUSH
40212: LD_INT 30
40214: PUSH
40215: LD_INT 29
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 30
40224: PUSH
40225: LD_INT 30
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: PPUSH
40237: CALL_OW 72
40241: ST_TO_ADDR
// if tmp then
40242: LD_VAR 0 19
40246: IFFALSE 40294
// for i in tmp do
40248: LD_ADDR_VAR 0 8
40252: PUSH
40253: LD_VAR 0 19
40257: PUSH
40258: FOR_IN
40259: IFFALSE 40292
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40261: LD_VAR 0 8
40265: PPUSH
40266: CALL_OW 250
40270: PPUSH
40271: LD_VAR 0 8
40275: PPUSH
40276: CALL_OW 251
40280: PPUSH
40281: LD_VAR 0 16
40285: PPUSH
40286: CALL_OW 441
40290: GO 40258
40292: POP
40293: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40294: LD_VAR 0 18
40298: PPUSH
40299: LD_INT 2
40301: PUSH
40302: LD_INT 30
40304: PUSH
40305: LD_INT 32
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 30
40314: PUSH
40315: LD_INT 33
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: PPUSH
40327: CALL_OW 72
40331: IFFALSE 40419
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40333: LD_ADDR_VAR 0 8
40337: PUSH
40338: LD_VAR 0 18
40342: PPUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 30
40348: PUSH
40349: LD_INT 32
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 30
40358: PUSH
40359: LD_INT 33
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: PPUSH
40371: CALL_OW 72
40375: PUSH
40376: FOR_IN
40377: IFFALSE 40417
// begin if not GetBWeapon ( i ) then
40379: LD_VAR 0 8
40383: PPUSH
40384: CALL_OW 269
40388: NOT
40389: IFFALSE 40415
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40391: LD_VAR 0 8
40395: PPUSH
40396: LD_VAR 0 8
40400: PPUSH
40401: LD_VAR 0 2
40405: PPUSH
40406: CALL 41665 0 2
40410: PPUSH
40411: CALL_OW 431
// end ;
40415: GO 40376
40417: POP
40418: POP
// end ; for i = 1 to personel do
40419: LD_ADDR_VAR 0 8
40423: PUSH
40424: DOUBLE
40425: LD_INT 1
40427: DEC
40428: ST_TO_ADDR
40429: LD_VAR 0 6
40433: PUSH
40434: FOR_TO
40435: IFFALSE 41499
// begin if i > 4 then
40437: LD_VAR 0 8
40441: PUSH
40442: LD_INT 4
40444: GREATER
40445: IFFALSE 40449
// break ;
40447: GO 41499
// case i of 1 :
40449: LD_VAR 0 8
40453: PUSH
40454: LD_INT 1
40456: DOUBLE
40457: EQUAL
40458: IFTRUE 40462
40460: GO 40542
40462: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40463: LD_ADDR_VAR 0 12
40467: PUSH
40468: LD_VAR 0 18
40472: PPUSH
40473: LD_INT 22
40475: PUSH
40476: LD_VAR 0 16
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 58
40487: PUSH
40488: EMPTY
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: LD_INT 30
40496: PUSH
40497: LD_INT 32
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 30
40506: PUSH
40507: LD_INT 4
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 30
40516: PUSH
40517: LD_INT 5
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: LIST
40534: PPUSH
40535: CALL_OW 72
40539: ST_TO_ADDR
40540: GO 40764
40542: LD_INT 2
40544: DOUBLE
40545: EQUAL
40546: IFTRUE 40550
40548: GO 40612
40550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40551: LD_ADDR_VAR 0 12
40555: PUSH
40556: LD_VAR 0 18
40560: PPUSH
40561: LD_INT 22
40563: PUSH
40564: LD_VAR 0 16
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 30
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 30
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: LIST
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PPUSH
40605: CALL_OW 72
40609: ST_TO_ADDR
40610: GO 40764
40612: LD_INT 3
40614: DOUBLE
40615: EQUAL
40616: IFTRUE 40620
40618: GO 40682
40620: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40621: LD_ADDR_VAR 0 12
40625: PUSH
40626: LD_VAR 0 18
40630: PPUSH
40631: LD_INT 22
40633: PUSH
40634: LD_VAR 0 16
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: LD_INT 30
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 30
40658: PUSH
40659: LD_INT 3
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PPUSH
40675: CALL_OW 72
40679: ST_TO_ADDR
40680: GO 40764
40682: LD_INT 4
40684: DOUBLE
40685: EQUAL
40686: IFTRUE 40690
40688: GO 40763
40690: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40691: LD_ADDR_VAR 0 12
40695: PUSH
40696: LD_VAR 0 18
40700: PPUSH
40701: LD_INT 22
40703: PUSH
40704: LD_VAR 0 16
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: LD_INT 30
40718: PUSH
40719: LD_INT 6
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 30
40728: PUSH
40729: LD_INT 7
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 30
40738: PUSH
40739: LD_INT 8
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PPUSH
40756: CALL_OW 72
40760: ST_TO_ADDR
40761: GO 40764
40763: POP
// if i = 1 then
40764: LD_VAR 0 8
40768: PUSH
40769: LD_INT 1
40771: EQUAL
40772: IFFALSE 40883
// begin tmp := [ ] ;
40774: LD_ADDR_VAR 0 19
40778: PUSH
40779: EMPTY
40780: ST_TO_ADDR
// for j in f do
40781: LD_ADDR_VAR 0 9
40785: PUSH
40786: LD_VAR 0 12
40790: PUSH
40791: FOR_IN
40792: IFFALSE 40865
// if GetBType ( j ) = b_bunker then
40794: LD_VAR 0 9
40798: PPUSH
40799: CALL_OW 266
40803: PUSH
40804: LD_INT 32
40806: EQUAL
40807: IFFALSE 40834
// tmp := Insert ( tmp , 1 , j ) else
40809: LD_ADDR_VAR 0 19
40813: PUSH
40814: LD_VAR 0 19
40818: PPUSH
40819: LD_INT 1
40821: PPUSH
40822: LD_VAR 0 9
40826: PPUSH
40827: CALL_OW 2
40831: ST_TO_ADDR
40832: GO 40863
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40834: LD_ADDR_VAR 0 19
40838: PUSH
40839: LD_VAR 0 19
40843: PPUSH
40844: LD_VAR 0 19
40848: PUSH
40849: LD_INT 1
40851: PLUS
40852: PPUSH
40853: LD_VAR 0 9
40857: PPUSH
40858: CALL_OW 2
40862: ST_TO_ADDR
40863: GO 40791
40865: POP
40866: POP
// if tmp then
40867: LD_VAR 0 19
40871: IFFALSE 40883
// f := tmp ;
40873: LD_ADDR_VAR 0 12
40877: PUSH
40878: LD_VAR 0 19
40882: ST_TO_ADDR
// end ; x := personel [ i ] ;
40883: LD_ADDR_VAR 0 13
40887: PUSH
40888: LD_VAR 0 6
40892: PUSH
40893: LD_VAR 0 8
40897: ARRAY
40898: ST_TO_ADDR
// if x = - 1 then
40899: LD_VAR 0 13
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: EQUAL
40908: IFFALSE 41117
// begin for j in f do
40910: LD_ADDR_VAR 0 9
40914: PUSH
40915: LD_VAR 0 12
40919: PUSH
40920: FOR_IN
40921: IFFALSE 41113
// repeat InitHc ;
40923: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40927: LD_VAR 0 9
40931: PPUSH
40932: CALL_OW 266
40936: PUSH
40937: LD_INT 5
40939: EQUAL
40940: IFFALSE 41010
// begin if UnitsInside ( j ) < 3 then
40942: LD_VAR 0 9
40946: PPUSH
40947: CALL_OW 313
40951: PUSH
40952: LD_INT 3
40954: LESS
40955: IFFALSE 40991
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40957: LD_INT 0
40959: PPUSH
40960: LD_INT 5
40962: PUSH
40963: LD_INT 8
40965: PUSH
40966: LD_INT 9
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: PUSH
40974: LD_VAR 0 17
40978: ARRAY
40979: PPUSH
40980: LD_VAR 0 4
40984: PPUSH
40985: CALL_OW 380
40989: GO 41008
// PrepareHuman ( false , i , skill ) ;
40991: LD_INT 0
40993: PPUSH
40994: LD_VAR 0 8
40998: PPUSH
40999: LD_VAR 0 4
41003: PPUSH
41004: CALL_OW 380
// end else
41008: GO 41027
// PrepareHuman ( false , i , skill ) ;
41010: LD_INT 0
41012: PPUSH
41013: LD_VAR 0 8
41017: PPUSH
41018: LD_VAR 0 4
41022: PPUSH
41023: CALL_OW 380
// un := CreateHuman ;
41027: LD_ADDR_VAR 0 14
41031: PUSH
41032: CALL_OW 44
41036: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41037: LD_ADDR_VAR 0 7
41041: PUSH
41042: LD_VAR 0 7
41046: PPUSH
41047: LD_INT 1
41049: PPUSH
41050: LD_VAR 0 14
41054: PPUSH
41055: CALL_OW 2
41059: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41060: LD_VAR 0 14
41064: PPUSH
41065: LD_VAR 0 9
41069: PPUSH
41070: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41074: LD_VAR 0 9
41078: PPUSH
41079: CALL_OW 313
41083: PUSH
41084: LD_INT 6
41086: EQUAL
41087: PUSH
41088: LD_VAR 0 9
41092: PPUSH
41093: CALL_OW 266
41097: PUSH
41098: LD_INT 32
41100: PUSH
41101: LD_INT 31
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: IN
41108: OR
41109: IFFALSE 40923
41111: GO 40920
41113: POP
41114: POP
// end else
41115: GO 41497
// for j = 1 to x do
41117: LD_ADDR_VAR 0 9
41121: PUSH
41122: DOUBLE
41123: LD_INT 1
41125: DEC
41126: ST_TO_ADDR
41127: LD_VAR 0 13
41131: PUSH
41132: FOR_TO
41133: IFFALSE 41495
// begin InitHc ;
41135: CALL_OW 19
// if not f then
41139: LD_VAR 0 12
41143: NOT
41144: IFFALSE 41233
// begin PrepareHuman ( false , i , skill ) ;
41146: LD_INT 0
41148: PPUSH
41149: LD_VAR 0 8
41153: PPUSH
41154: LD_VAR 0 4
41158: PPUSH
41159: CALL_OW 380
// un := CreateHuman ;
41163: LD_ADDR_VAR 0 14
41167: PUSH
41168: CALL_OW 44
41172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41173: LD_ADDR_VAR 0 7
41177: PUSH
41178: LD_VAR 0 7
41182: PPUSH
41183: LD_INT 1
41185: PPUSH
41186: LD_VAR 0 14
41190: PPUSH
41191: CALL_OW 2
41195: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41196: LD_VAR 0 14
41200: PPUSH
41201: LD_VAR 0 1
41205: PPUSH
41206: CALL_OW 250
41210: PPUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: CALL_OW 251
41220: PPUSH
41221: LD_INT 10
41223: PPUSH
41224: LD_INT 0
41226: PPUSH
41227: CALL_OW 50
// continue ;
41231: GO 41132
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41233: LD_VAR 0 12
41237: PUSH
41238: LD_INT 1
41240: ARRAY
41241: PPUSH
41242: CALL_OW 313
41246: PUSH
41247: LD_VAR 0 12
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: PPUSH
41256: CALL_OW 266
41260: PUSH
41261: LD_INT 32
41263: PUSH
41264: LD_INT 31
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: IN
41271: AND
41272: PUSH
41273: LD_VAR 0 12
41277: PUSH
41278: LD_INT 1
41280: ARRAY
41281: PPUSH
41282: CALL_OW 313
41286: PUSH
41287: LD_INT 6
41289: EQUAL
41290: OR
41291: IFFALSE 41311
// f := Delete ( f , 1 ) ;
41293: LD_ADDR_VAR 0 12
41297: PUSH
41298: LD_VAR 0 12
41302: PPUSH
41303: LD_INT 1
41305: PPUSH
41306: CALL_OW 3
41310: ST_TO_ADDR
// if not f then
41311: LD_VAR 0 12
41315: NOT
41316: IFFALSE 41334
// begin x := x + 2 ;
41318: LD_ADDR_VAR 0 13
41322: PUSH
41323: LD_VAR 0 13
41327: PUSH
41328: LD_INT 2
41330: PLUS
41331: ST_TO_ADDR
// continue ;
41332: GO 41132
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41334: LD_VAR 0 12
41338: PUSH
41339: LD_INT 1
41341: ARRAY
41342: PPUSH
41343: CALL_OW 266
41347: PUSH
41348: LD_INT 5
41350: EQUAL
41351: IFFALSE 41425
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41353: LD_VAR 0 12
41357: PUSH
41358: LD_INT 1
41360: ARRAY
41361: PPUSH
41362: CALL_OW 313
41366: PUSH
41367: LD_INT 3
41369: LESS
41370: IFFALSE 41406
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41372: LD_INT 0
41374: PPUSH
41375: LD_INT 5
41377: PUSH
41378: LD_INT 8
41380: PUSH
41381: LD_INT 9
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: PUSH
41389: LD_VAR 0 17
41393: ARRAY
41394: PPUSH
41395: LD_VAR 0 4
41399: PPUSH
41400: CALL_OW 380
41404: GO 41423
// PrepareHuman ( false , i , skill ) ;
41406: LD_INT 0
41408: PPUSH
41409: LD_VAR 0 8
41413: PPUSH
41414: LD_VAR 0 4
41418: PPUSH
41419: CALL_OW 380
// end else
41423: GO 41442
// PrepareHuman ( false , i , skill ) ;
41425: LD_INT 0
41427: PPUSH
41428: LD_VAR 0 8
41432: PPUSH
41433: LD_VAR 0 4
41437: PPUSH
41438: CALL_OW 380
// un := CreateHuman ;
41442: LD_ADDR_VAR 0 14
41446: PUSH
41447: CALL_OW 44
41451: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41452: LD_ADDR_VAR 0 7
41456: PUSH
41457: LD_VAR 0 7
41461: PPUSH
41462: LD_INT 1
41464: PPUSH
41465: LD_VAR 0 14
41469: PPUSH
41470: CALL_OW 2
41474: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41475: LD_VAR 0 14
41479: PPUSH
41480: LD_VAR 0 12
41484: PUSH
41485: LD_INT 1
41487: ARRAY
41488: PPUSH
41489: CALL_OW 52
// end ;
41493: GO 41132
41495: POP
41496: POP
// end ;
41497: GO 40434
41499: POP
41500: POP
// result := result ^ buildings ;
41501: LD_ADDR_VAR 0 7
41505: PUSH
41506: LD_VAR 0 7
41510: PUSH
41511: LD_VAR 0 18
41515: ADD
41516: ST_TO_ADDR
// end else
41517: GO 41660
// begin for i = 1 to personel do
41519: LD_ADDR_VAR 0 8
41523: PUSH
41524: DOUBLE
41525: LD_INT 1
41527: DEC
41528: ST_TO_ADDR
41529: LD_VAR 0 6
41533: PUSH
41534: FOR_TO
41535: IFFALSE 41658
// begin if i > 4 then
41537: LD_VAR 0 8
41541: PUSH
41542: LD_INT 4
41544: GREATER
41545: IFFALSE 41549
// break ;
41547: GO 41658
// x := personel [ i ] ;
41549: LD_ADDR_VAR 0 13
41553: PUSH
41554: LD_VAR 0 6
41558: PUSH
41559: LD_VAR 0 8
41563: ARRAY
41564: ST_TO_ADDR
// if x = - 1 then
41565: LD_VAR 0 13
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: EQUAL
41574: IFFALSE 41578
// continue ;
41576: GO 41534
// PrepareHuman ( false , i , skill ) ;
41578: LD_INT 0
41580: PPUSH
41581: LD_VAR 0 8
41585: PPUSH
41586: LD_VAR 0 4
41590: PPUSH
41591: CALL_OW 380
// un := CreateHuman ;
41595: LD_ADDR_VAR 0 14
41599: PUSH
41600: CALL_OW 44
41604: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41605: LD_VAR 0 14
41609: PPUSH
41610: LD_VAR 0 1
41614: PPUSH
41615: CALL_OW 250
41619: PPUSH
41620: LD_VAR 0 1
41624: PPUSH
41625: CALL_OW 251
41629: PPUSH
41630: LD_INT 10
41632: PPUSH
41633: LD_INT 0
41635: PPUSH
41636: CALL_OW 50
// result := result ^ un ;
41640: LD_ADDR_VAR 0 7
41644: PUSH
41645: LD_VAR 0 7
41649: PUSH
41650: LD_VAR 0 14
41654: ADD
41655: ST_TO_ADDR
// end ;
41656: GO 41534
41658: POP
41659: POP
// end ; end ;
41660: LD_VAR 0 7
41664: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41665: LD_INT 0
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
41674: PPUSH
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
// result := false ;
41683: LD_ADDR_VAR 0 3
41687: PUSH
41688: LD_INT 0
41690: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41691: LD_VAR 0 1
41695: NOT
41696: PUSH
41697: LD_VAR 0 1
41701: PPUSH
41702: CALL_OW 266
41706: PUSH
41707: LD_INT 32
41709: PUSH
41710: LD_INT 33
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: IN
41717: NOT
41718: OR
41719: IFFALSE 41723
// exit ;
41721: GO 42832
// nat := GetNation ( tower ) ;
41723: LD_ADDR_VAR 0 12
41727: PUSH
41728: LD_VAR 0 1
41732: PPUSH
41733: CALL_OW 248
41737: ST_TO_ADDR
// side := GetSide ( tower ) ;
41738: LD_ADDR_VAR 0 16
41742: PUSH
41743: LD_VAR 0 1
41747: PPUSH
41748: CALL_OW 255
41752: ST_TO_ADDR
// x := GetX ( tower ) ;
41753: LD_ADDR_VAR 0 10
41757: PUSH
41758: LD_VAR 0 1
41762: PPUSH
41763: CALL_OW 250
41767: ST_TO_ADDR
// y := GetY ( tower ) ;
41768: LD_ADDR_VAR 0 11
41772: PUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: CALL_OW 251
41782: ST_TO_ADDR
// if not x or not y then
41783: LD_VAR 0 10
41787: NOT
41788: PUSH
41789: LD_VAR 0 11
41793: NOT
41794: OR
41795: IFFALSE 41799
// exit ;
41797: GO 42832
// weapon := 0 ;
41799: LD_ADDR_VAR 0 18
41803: PUSH
41804: LD_INT 0
41806: ST_TO_ADDR
// fac_list := [ ] ;
41807: LD_ADDR_VAR 0 17
41811: PUSH
41812: EMPTY
41813: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41814: LD_ADDR_VAR 0 6
41818: PUSH
41819: LD_VAR 0 1
41823: PPUSH
41824: CALL_OW 274
41828: PPUSH
41829: LD_VAR 0 2
41833: PPUSH
41834: LD_INT 0
41836: PPUSH
41837: CALL 39403 0 3
41841: PPUSH
41842: LD_INT 30
41844: PUSH
41845: LD_INT 3
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PPUSH
41852: CALL_OW 72
41856: ST_TO_ADDR
// if not factories then
41857: LD_VAR 0 6
41861: NOT
41862: IFFALSE 41866
// exit ;
41864: GO 42832
// for i in factories do
41866: LD_ADDR_VAR 0 8
41870: PUSH
41871: LD_VAR 0 6
41875: PUSH
41876: FOR_IN
41877: IFFALSE 41902
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41879: LD_ADDR_VAR 0 17
41883: PUSH
41884: LD_VAR 0 17
41888: PUSH
41889: LD_VAR 0 8
41893: PPUSH
41894: CALL_OW 478
41898: UNION
41899: ST_TO_ADDR
41900: GO 41876
41902: POP
41903: POP
// if not fac_list then
41904: LD_VAR 0 17
41908: NOT
41909: IFFALSE 41913
// exit ;
41911: GO 42832
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41913: LD_ADDR_VAR 0 5
41917: PUSH
41918: LD_INT 4
41920: PUSH
41921: LD_INT 5
41923: PUSH
41924: LD_INT 9
41926: PUSH
41927: LD_INT 10
41929: PUSH
41930: LD_INT 6
41932: PUSH
41933: LD_INT 7
41935: PUSH
41936: LD_INT 11
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 27
41950: PUSH
41951: LD_INT 28
41953: PUSH
41954: LD_INT 26
41956: PUSH
41957: LD_INT 30
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 43
41968: PUSH
41969: LD_INT 44
41971: PUSH
41972: LD_INT 46
41974: PUSH
41975: LD_INT 45
41977: PUSH
41978: LD_INT 47
41980: PUSH
41981: LD_INT 49
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: PUSH
41997: LD_VAR 0 12
42001: ARRAY
42002: ST_TO_ADDR
// list := list isect fac_list ;
42003: LD_ADDR_VAR 0 5
42007: PUSH
42008: LD_VAR 0 5
42012: PUSH
42013: LD_VAR 0 17
42017: ISECT
42018: ST_TO_ADDR
// if not list then
42019: LD_VAR 0 5
42023: NOT
42024: IFFALSE 42028
// exit ;
42026: GO 42832
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42028: LD_VAR 0 12
42032: PUSH
42033: LD_INT 3
42035: EQUAL
42036: PUSH
42037: LD_INT 49
42039: PUSH
42040: LD_VAR 0 5
42044: IN
42045: AND
42046: PUSH
42047: LD_INT 31
42049: PPUSH
42050: LD_VAR 0 16
42054: PPUSH
42055: CALL_OW 321
42059: PUSH
42060: LD_INT 2
42062: EQUAL
42063: AND
42064: IFFALSE 42124
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42066: LD_INT 22
42068: PUSH
42069: LD_VAR 0 16
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 35
42080: PUSH
42081: LD_INT 49
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 91
42090: PUSH
42091: LD_VAR 0 1
42095: PUSH
42096: LD_INT 10
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: PPUSH
42109: CALL_OW 69
42113: NOT
42114: IFFALSE 42124
// weapon := ru_time_lapser ;
42116: LD_ADDR_VAR 0 18
42120: PUSH
42121: LD_INT 49
42123: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42124: LD_VAR 0 12
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: IN
42139: PUSH
42140: LD_INT 11
42142: PUSH
42143: LD_VAR 0 5
42147: IN
42148: PUSH
42149: LD_INT 30
42151: PUSH
42152: LD_VAR 0 5
42156: IN
42157: OR
42158: AND
42159: PUSH
42160: LD_INT 6
42162: PPUSH
42163: LD_VAR 0 16
42167: PPUSH
42168: CALL_OW 321
42172: PUSH
42173: LD_INT 2
42175: EQUAL
42176: AND
42177: IFFALSE 42342
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42179: LD_INT 22
42181: PUSH
42182: LD_VAR 0 16
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: LD_INT 35
42196: PUSH
42197: LD_INT 11
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 35
42206: PUSH
42207: LD_INT 30
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 91
42221: PUSH
42222: LD_VAR 0 1
42226: PUSH
42227: LD_INT 18
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: PPUSH
42240: CALL_OW 69
42244: NOT
42245: PUSH
42246: LD_INT 22
42248: PUSH
42249: LD_VAR 0 16
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: LD_INT 30
42263: PUSH
42264: LD_INT 32
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 30
42273: PUSH
42274: LD_INT 33
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 91
42288: PUSH
42289: LD_VAR 0 1
42293: PUSH
42294: LD_INT 12
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: PUSH
42307: EMPTY
42308: LIST
42309: PPUSH
42310: CALL_OW 69
42314: PUSH
42315: LD_INT 2
42317: GREATER
42318: AND
42319: IFFALSE 42342
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42321: LD_ADDR_VAR 0 18
42325: PUSH
42326: LD_INT 11
42328: PUSH
42329: LD_INT 30
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_VAR 0 12
42340: ARRAY
42341: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42342: LD_VAR 0 18
42346: NOT
42347: PUSH
42348: LD_INT 40
42350: PPUSH
42351: LD_VAR 0 16
42355: PPUSH
42356: CALL_OW 321
42360: PUSH
42361: LD_INT 2
42363: EQUAL
42364: AND
42365: PUSH
42366: LD_INT 7
42368: PUSH
42369: LD_VAR 0 5
42373: IN
42374: PUSH
42375: LD_INT 28
42377: PUSH
42378: LD_VAR 0 5
42382: IN
42383: OR
42384: PUSH
42385: LD_INT 45
42387: PUSH
42388: LD_VAR 0 5
42392: IN
42393: OR
42394: AND
42395: IFFALSE 42649
// begin hex := GetHexInfo ( x , y ) ;
42397: LD_ADDR_VAR 0 4
42401: PUSH
42402: LD_VAR 0 10
42406: PPUSH
42407: LD_VAR 0 11
42411: PPUSH
42412: CALL_OW 546
42416: ST_TO_ADDR
// if hex [ 1 ] then
42417: LD_VAR 0 4
42421: PUSH
42422: LD_INT 1
42424: ARRAY
42425: IFFALSE 42429
// exit ;
42427: GO 42832
// height := hex [ 2 ] ;
42429: LD_ADDR_VAR 0 15
42433: PUSH
42434: LD_VAR 0 4
42438: PUSH
42439: LD_INT 2
42441: ARRAY
42442: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42443: LD_ADDR_VAR 0 14
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 3
42456: PUSH
42457: LD_INT 5
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: ST_TO_ADDR
// for i in tmp do
42466: LD_ADDR_VAR 0 8
42470: PUSH
42471: LD_VAR 0 14
42475: PUSH
42476: FOR_IN
42477: IFFALSE 42647
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42479: LD_ADDR_VAR 0 9
42483: PUSH
42484: LD_VAR 0 10
42488: PPUSH
42489: LD_VAR 0 8
42493: PPUSH
42494: LD_INT 5
42496: PPUSH
42497: CALL_OW 272
42501: PUSH
42502: LD_VAR 0 11
42506: PPUSH
42507: LD_VAR 0 8
42511: PPUSH
42512: LD_INT 5
42514: PPUSH
42515: CALL_OW 273
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42524: LD_VAR 0 9
42528: PUSH
42529: LD_INT 1
42531: ARRAY
42532: PPUSH
42533: LD_VAR 0 9
42537: PUSH
42538: LD_INT 2
42540: ARRAY
42541: PPUSH
42542: CALL_OW 488
42546: IFFALSE 42645
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42548: LD_ADDR_VAR 0 4
42552: PUSH
42553: LD_VAR 0 9
42557: PUSH
42558: LD_INT 1
42560: ARRAY
42561: PPUSH
42562: LD_VAR 0 9
42566: PUSH
42567: LD_INT 2
42569: ARRAY
42570: PPUSH
42571: CALL_OW 546
42575: ST_TO_ADDR
// if hex [ 1 ] then
42576: LD_VAR 0 4
42580: PUSH
42581: LD_INT 1
42583: ARRAY
42584: IFFALSE 42588
// continue ;
42586: GO 42476
// h := hex [ 2 ] ;
42588: LD_ADDR_VAR 0 13
42592: PUSH
42593: LD_VAR 0 4
42597: PUSH
42598: LD_INT 2
42600: ARRAY
42601: ST_TO_ADDR
// if h + 7 < height then
42602: LD_VAR 0 13
42606: PUSH
42607: LD_INT 7
42609: PLUS
42610: PUSH
42611: LD_VAR 0 15
42615: LESS
42616: IFFALSE 42645
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42618: LD_ADDR_VAR 0 18
42622: PUSH
42623: LD_INT 7
42625: PUSH
42626: LD_INT 28
42628: PUSH
42629: LD_INT 45
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: LIST
42636: PUSH
42637: LD_VAR 0 12
42641: ARRAY
42642: ST_TO_ADDR
// break ;
42643: GO 42647
// end ; end ; end ;
42645: GO 42476
42647: POP
42648: POP
// end ; if not weapon then
42649: LD_VAR 0 18
42653: NOT
42654: IFFALSE 42714
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42656: LD_ADDR_VAR 0 5
42660: PUSH
42661: LD_VAR 0 5
42665: PUSH
42666: LD_INT 11
42668: PUSH
42669: LD_INT 30
42671: PUSH
42672: LD_INT 49
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: DIFF
42680: ST_TO_ADDR
// if not list then
42681: LD_VAR 0 5
42685: NOT
42686: IFFALSE 42690
// exit ;
42688: GO 42832
// weapon := list [ rand ( 1 , list ) ] ;
42690: LD_ADDR_VAR 0 18
42694: PUSH
42695: LD_VAR 0 5
42699: PUSH
42700: LD_INT 1
42702: PPUSH
42703: LD_VAR 0 5
42707: PPUSH
42708: CALL_OW 12
42712: ARRAY
42713: ST_TO_ADDR
// end ; if weapon then
42714: LD_VAR 0 18
42718: IFFALSE 42832
// begin tmp := CostOfWeapon ( weapon ) ;
42720: LD_ADDR_VAR 0 14
42724: PUSH
42725: LD_VAR 0 18
42729: PPUSH
42730: CALL_OW 451
42734: ST_TO_ADDR
// j := GetBase ( tower ) ;
42735: LD_ADDR_VAR 0 9
42739: PUSH
42740: LD_VAR 0 1
42744: PPUSH
42745: CALL_OW 274
42749: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42750: LD_VAR 0 9
42754: PPUSH
42755: LD_INT 1
42757: PPUSH
42758: CALL_OW 275
42762: PUSH
42763: LD_VAR 0 14
42767: PUSH
42768: LD_INT 1
42770: ARRAY
42771: GREATEREQUAL
42772: PUSH
42773: LD_VAR 0 9
42777: PPUSH
42778: LD_INT 2
42780: PPUSH
42781: CALL_OW 275
42785: PUSH
42786: LD_VAR 0 14
42790: PUSH
42791: LD_INT 2
42793: ARRAY
42794: GREATEREQUAL
42795: AND
42796: PUSH
42797: LD_VAR 0 9
42801: PPUSH
42802: LD_INT 3
42804: PPUSH
42805: CALL_OW 275
42809: PUSH
42810: LD_VAR 0 14
42814: PUSH
42815: LD_INT 3
42817: ARRAY
42818: GREATEREQUAL
42819: AND
42820: IFFALSE 42832
// result := weapon ;
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_VAR 0 18
42831: ST_TO_ADDR
// end ; end ;
42832: LD_VAR 0 3
42836: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42837: LD_INT 0
42839: PPUSH
42840: PPUSH
// result := true ;
42841: LD_ADDR_VAR 0 3
42845: PUSH
42846: LD_INT 1
42848: ST_TO_ADDR
// if array1 = array2 then
42849: LD_VAR 0 1
42853: PUSH
42854: LD_VAR 0 2
42858: EQUAL
42859: IFFALSE 42919
// begin for i = 1 to array1 do
42861: LD_ADDR_VAR 0 4
42865: PUSH
42866: DOUBLE
42867: LD_INT 1
42869: DEC
42870: ST_TO_ADDR
42871: LD_VAR 0 1
42875: PUSH
42876: FOR_TO
42877: IFFALSE 42915
// if array1 [ i ] <> array2 [ i ] then
42879: LD_VAR 0 1
42883: PUSH
42884: LD_VAR 0 4
42888: ARRAY
42889: PUSH
42890: LD_VAR 0 2
42894: PUSH
42895: LD_VAR 0 4
42899: ARRAY
42900: NONEQUAL
42901: IFFALSE 42913
// begin result := false ;
42903: LD_ADDR_VAR 0 3
42907: PUSH
42908: LD_INT 0
42910: ST_TO_ADDR
// break ;
42911: GO 42915
// end ;
42913: GO 42876
42915: POP
42916: POP
// end else
42917: GO 42927
// result := false ;
42919: LD_ADDR_VAR 0 3
42923: PUSH
42924: LD_INT 0
42926: ST_TO_ADDR
// end ;
42927: LD_VAR 0 3
42931: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42932: LD_INT 0
42934: PPUSH
42935: PPUSH
// if not array1 or not array2 then
42936: LD_VAR 0 1
42940: NOT
42941: PUSH
42942: LD_VAR 0 2
42946: NOT
42947: OR
42948: IFFALSE 42952
// exit ;
42950: GO 43016
// result := true ;
42952: LD_ADDR_VAR 0 3
42956: PUSH
42957: LD_INT 1
42959: ST_TO_ADDR
// for i = 1 to array1 do
42960: LD_ADDR_VAR 0 4
42964: PUSH
42965: DOUBLE
42966: LD_INT 1
42968: DEC
42969: ST_TO_ADDR
42970: LD_VAR 0 1
42974: PUSH
42975: FOR_TO
42976: IFFALSE 43014
// if array1 [ i ] <> array2 [ i ] then
42978: LD_VAR 0 1
42982: PUSH
42983: LD_VAR 0 4
42987: ARRAY
42988: PUSH
42989: LD_VAR 0 2
42993: PUSH
42994: LD_VAR 0 4
42998: ARRAY
42999: NONEQUAL
43000: IFFALSE 43012
// begin result := false ;
43002: LD_ADDR_VAR 0 3
43006: PUSH
43007: LD_INT 0
43009: ST_TO_ADDR
// break ;
43010: GO 43014
// end ;
43012: GO 42975
43014: POP
43015: POP
// end ;
43016: LD_VAR 0 3
43020: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43021: LD_INT 0
43023: PPUSH
43024: PPUSH
43025: PPUSH
// pom := GetBase ( fac ) ;
43026: LD_ADDR_VAR 0 5
43030: PUSH
43031: LD_VAR 0 1
43035: PPUSH
43036: CALL_OW 274
43040: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43041: LD_ADDR_VAR 0 4
43045: PUSH
43046: LD_VAR 0 2
43050: PUSH
43051: LD_INT 1
43053: ARRAY
43054: PPUSH
43055: LD_VAR 0 2
43059: PUSH
43060: LD_INT 2
43062: ARRAY
43063: PPUSH
43064: LD_VAR 0 2
43068: PUSH
43069: LD_INT 3
43071: ARRAY
43072: PPUSH
43073: LD_VAR 0 2
43077: PUSH
43078: LD_INT 4
43080: ARRAY
43081: PPUSH
43082: CALL_OW 449
43086: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_VAR 0 5
43096: PPUSH
43097: LD_INT 1
43099: PPUSH
43100: CALL_OW 275
43104: PUSH
43105: LD_VAR 0 4
43109: PUSH
43110: LD_INT 1
43112: ARRAY
43113: GREATEREQUAL
43114: PUSH
43115: LD_VAR 0 5
43119: PPUSH
43120: LD_INT 2
43122: PPUSH
43123: CALL_OW 275
43127: PUSH
43128: LD_VAR 0 4
43132: PUSH
43133: LD_INT 2
43135: ARRAY
43136: GREATEREQUAL
43137: AND
43138: PUSH
43139: LD_VAR 0 5
43143: PPUSH
43144: LD_INT 3
43146: PPUSH
43147: CALL_OW 275
43151: PUSH
43152: LD_VAR 0 4
43156: PUSH
43157: LD_INT 3
43159: ARRAY
43160: GREATEREQUAL
43161: AND
43162: ST_TO_ADDR
// end ;
43163: LD_VAR 0 3
43167: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43168: LD_INT 0
43170: PPUSH
43171: PPUSH
43172: PPUSH
43173: PPUSH
// pom := GetBase ( building ) ;
43174: LD_ADDR_VAR 0 3
43178: PUSH
43179: LD_VAR 0 1
43183: PPUSH
43184: CALL_OW 274
43188: ST_TO_ADDR
// if not pom then
43189: LD_VAR 0 3
43193: NOT
43194: IFFALSE 43198
// exit ;
43196: GO 43368
// btype := GetBType ( building ) ;
43198: LD_ADDR_VAR 0 5
43202: PUSH
43203: LD_VAR 0 1
43207: PPUSH
43208: CALL_OW 266
43212: ST_TO_ADDR
// if btype = b_armoury then
43213: LD_VAR 0 5
43217: PUSH
43218: LD_INT 4
43220: EQUAL
43221: IFFALSE 43231
// btype := b_barracks ;
43223: LD_ADDR_VAR 0 5
43227: PUSH
43228: LD_INT 5
43230: ST_TO_ADDR
// if btype = b_depot then
43231: LD_VAR 0 5
43235: PUSH
43236: LD_INT 0
43238: EQUAL
43239: IFFALSE 43249
// btype := b_warehouse ;
43241: LD_ADDR_VAR 0 5
43245: PUSH
43246: LD_INT 1
43248: ST_TO_ADDR
// if btype = b_workshop then
43249: LD_VAR 0 5
43253: PUSH
43254: LD_INT 2
43256: EQUAL
43257: IFFALSE 43267
// btype := b_factory ;
43259: LD_ADDR_VAR 0 5
43263: PUSH
43264: LD_INT 3
43266: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43267: LD_ADDR_VAR 0 4
43271: PUSH
43272: LD_VAR 0 5
43276: PPUSH
43277: LD_VAR 0 1
43281: PPUSH
43282: CALL_OW 248
43286: PPUSH
43287: CALL_OW 450
43291: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43292: LD_ADDR_VAR 0 2
43296: PUSH
43297: LD_VAR 0 3
43301: PPUSH
43302: LD_INT 1
43304: PPUSH
43305: CALL_OW 275
43309: PUSH
43310: LD_VAR 0 4
43314: PUSH
43315: LD_INT 1
43317: ARRAY
43318: GREATEREQUAL
43319: PUSH
43320: LD_VAR 0 3
43324: PPUSH
43325: LD_INT 2
43327: PPUSH
43328: CALL_OW 275
43332: PUSH
43333: LD_VAR 0 4
43337: PUSH
43338: LD_INT 2
43340: ARRAY
43341: GREATEREQUAL
43342: AND
43343: PUSH
43344: LD_VAR 0 3
43348: PPUSH
43349: LD_INT 3
43351: PPUSH
43352: CALL_OW 275
43356: PUSH
43357: LD_VAR 0 4
43361: PUSH
43362: LD_INT 3
43364: ARRAY
43365: GREATEREQUAL
43366: AND
43367: ST_TO_ADDR
// end ;
43368: LD_VAR 0 2
43372: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43373: LD_INT 0
43375: PPUSH
43376: PPUSH
43377: PPUSH
// pom := GetBase ( building ) ;
43378: LD_ADDR_VAR 0 4
43382: PUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 274
43392: ST_TO_ADDR
// if not pom then
43393: LD_VAR 0 4
43397: NOT
43398: IFFALSE 43402
// exit ;
43400: GO 43503
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43402: LD_ADDR_VAR 0 5
43406: PUSH
43407: LD_VAR 0 2
43411: PPUSH
43412: LD_VAR 0 1
43416: PPUSH
43417: CALL_OW 248
43421: PPUSH
43422: CALL_OW 450
43426: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43427: LD_ADDR_VAR 0 3
43431: PUSH
43432: LD_VAR 0 4
43436: PPUSH
43437: LD_INT 1
43439: PPUSH
43440: CALL_OW 275
43444: PUSH
43445: LD_VAR 0 5
43449: PUSH
43450: LD_INT 1
43452: ARRAY
43453: GREATEREQUAL
43454: PUSH
43455: LD_VAR 0 4
43459: PPUSH
43460: LD_INT 2
43462: PPUSH
43463: CALL_OW 275
43467: PUSH
43468: LD_VAR 0 5
43472: PUSH
43473: LD_INT 2
43475: ARRAY
43476: GREATEREQUAL
43477: AND
43478: PUSH
43479: LD_VAR 0 4
43483: PPUSH
43484: LD_INT 3
43486: PPUSH
43487: CALL_OW 275
43491: PUSH
43492: LD_VAR 0 5
43496: PUSH
43497: LD_INT 3
43499: ARRAY
43500: GREATEREQUAL
43501: AND
43502: ST_TO_ADDR
// end ;
43503: LD_VAR 0 3
43507: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43508: LD_INT 0
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
43516: PPUSH
43517: PPUSH
43518: PPUSH
43519: PPUSH
43520: PPUSH
// result := false ;
43521: LD_ADDR_VAR 0 8
43525: PUSH
43526: LD_INT 0
43528: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43529: LD_VAR 0 5
43533: NOT
43534: PUSH
43535: LD_VAR 0 1
43539: NOT
43540: OR
43541: PUSH
43542: LD_VAR 0 2
43546: NOT
43547: OR
43548: PUSH
43549: LD_VAR 0 3
43553: NOT
43554: OR
43555: IFFALSE 43559
// exit ;
43557: GO 44373
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43559: LD_ADDR_VAR 0 14
43563: PUSH
43564: LD_VAR 0 1
43568: PPUSH
43569: LD_VAR 0 2
43573: PPUSH
43574: LD_VAR 0 3
43578: PPUSH
43579: LD_VAR 0 4
43583: PPUSH
43584: LD_VAR 0 5
43588: PUSH
43589: LD_INT 1
43591: ARRAY
43592: PPUSH
43593: CALL_OW 248
43597: PPUSH
43598: LD_INT 0
43600: PPUSH
43601: CALL 45606 0 6
43605: ST_TO_ADDR
// if not hexes then
43606: LD_VAR 0 14
43610: NOT
43611: IFFALSE 43615
// exit ;
43613: GO 44373
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43615: LD_ADDR_VAR 0 17
43619: PUSH
43620: LD_VAR 0 5
43624: PPUSH
43625: LD_INT 22
43627: PUSH
43628: LD_VAR 0 13
43632: PPUSH
43633: CALL_OW 255
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: LD_INT 30
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 30
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: LIST
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PPUSH
43674: CALL_OW 72
43678: ST_TO_ADDR
// for i = 1 to hexes do
43679: LD_ADDR_VAR 0 9
43683: PUSH
43684: DOUBLE
43685: LD_INT 1
43687: DEC
43688: ST_TO_ADDR
43689: LD_VAR 0 14
43693: PUSH
43694: FOR_TO
43695: IFFALSE 44371
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43697: LD_ADDR_VAR 0 13
43701: PUSH
43702: LD_VAR 0 14
43706: PUSH
43707: LD_VAR 0 9
43711: ARRAY
43712: PUSH
43713: LD_INT 1
43715: ARRAY
43716: PPUSH
43717: LD_VAR 0 14
43721: PUSH
43722: LD_VAR 0 9
43726: ARRAY
43727: PUSH
43728: LD_INT 2
43730: ARRAY
43731: PPUSH
43732: CALL_OW 428
43736: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43737: LD_VAR 0 14
43741: PUSH
43742: LD_VAR 0 9
43746: ARRAY
43747: PUSH
43748: LD_INT 1
43750: ARRAY
43751: PPUSH
43752: LD_VAR 0 14
43756: PUSH
43757: LD_VAR 0 9
43761: ARRAY
43762: PUSH
43763: LD_INT 2
43765: ARRAY
43766: PPUSH
43767: CALL_OW 351
43771: PUSH
43772: LD_VAR 0 14
43776: PUSH
43777: LD_VAR 0 9
43781: ARRAY
43782: PUSH
43783: LD_INT 1
43785: ARRAY
43786: PPUSH
43787: LD_VAR 0 14
43791: PUSH
43792: LD_VAR 0 9
43796: ARRAY
43797: PUSH
43798: LD_INT 2
43800: ARRAY
43801: PPUSH
43802: CALL_OW 488
43806: NOT
43807: OR
43808: PUSH
43809: LD_VAR 0 13
43813: PPUSH
43814: CALL_OW 247
43818: PUSH
43819: LD_INT 3
43821: EQUAL
43822: OR
43823: IFFALSE 43829
// exit ;
43825: POP
43826: POP
43827: GO 44373
// if not tmp then
43829: LD_VAR 0 13
43833: NOT
43834: IFFALSE 43838
// continue ;
43836: GO 43694
// result := true ;
43838: LD_ADDR_VAR 0 8
43842: PUSH
43843: LD_INT 1
43845: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43846: LD_VAR 0 6
43850: PUSH
43851: LD_VAR 0 13
43855: PPUSH
43856: CALL_OW 247
43860: PUSH
43861: LD_INT 2
43863: EQUAL
43864: AND
43865: PUSH
43866: LD_VAR 0 13
43870: PPUSH
43871: CALL_OW 263
43875: PUSH
43876: LD_INT 1
43878: EQUAL
43879: AND
43880: IFFALSE 44044
// begin if IsDrivenBy ( tmp ) then
43882: LD_VAR 0 13
43886: PPUSH
43887: CALL_OW 311
43891: IFFALSE 43895
// continue ;
43893: GO 43694
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43895: LD_VAR 0 6
43899: PPUSH
43900: LD_INT 3
43902: PUSH
43903: LD_INT 60
43905: PUSH
43906: EMPTY
43907: LIST
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 3
43915: PUSH
43916: LD_INT 55
43918: PUSH
43919: EMPTY
43920: LIST
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PPUSH
43930: CALL_OW 72
43934: IFFALSE 44042
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43936: LD_ADDR_VAR 0 18
43940: PUSH
43941: LD_VAR 0 6
43945: PPUSH
43946: LD_INT 3
43948: PUSH
43949: LD_INT 60
43951: PUSH
43952: EMPTY
43953: LIST
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 3
43961: PUSH
43962: LD_INT 55
43964: PUSH
43965: EMPTY
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PPUSH
43976: CALL_OW 72
43980: PUSH
43981: LD_INT 1
43983: ARRAY
43984: ST_TO_ADDR
// if IsInUnit ( driver ) then
43985: LD_VAR 0 18
43989: PPUSH
43990: CALL_OW 310
43994: IFFALSE 44005
// ComExit ( driver ) ;
43996: LD_VAR 0 18
44000: PPUSH
44001: CALL 69386 0 1
// AddComEnterUnit ( driver , tmp ) ;
44005: LD_VAR 0 18
44009: PPUSH
44010: LD_VAR 0 13
44014: PPUSH
44015: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44019: LD_VAR 0 18
44023: PPUSH
44024: LD_VAR 0 7
44028: PPUSH
44029: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44033: LD_VAR 0 18
44037: PPUSH
44038: CALL_OW 181
// end ; continue ;
44042: GO 43694
// end ; if not cleaners or not tmp in cleaners then
44044: LD_VAR 0 6
44048: NOT
44049: PUSH
44050: LD_VAR 0 13
44054: PUSH
44055: LD_VAR 0 6
44059: IN
44060: NOT
44061: OR
44062: IFFALSE 44369
// begin if dep then
44064: LD_VAR 0 17
44068: IFFALSE 44204
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44070: LD_ADDR_VAR 0 16
44074: PUSH
44075: LD_VAR 0 17
44079: PUSH
44080: LD_INT 1
44082: ARRAY
44083: PPUSH
44084: CALL_OW 250
44088: PPUSH
44089: LD_VAR 0 17
44093: PUSH
44094: LD_INT 1
44096: ARRAY
44097: PPUSH
44098: CALL_OW 254
44102: PPUSH
44103: LD_INT 5
44105: PPUSH
44106: CALL_OW 272
44110: PUSH
44111: LD_VAR 0 17
44115: PUSH
44116: LD_INT 1
44118: ARRAY
44119: PPUSH
44120: CALL_OW 251
44124: PPUSH
44125: LD_VAR 0 17
44129: PUSH
44130: LD_INT 1
44132: ARRAY
44133: PPUSH
44134: CALL_OW 254
44138: PPUSH
44139: LD_INT 5
44141: PPUSH
44142: CALL_OW 273
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44151: LD_VAR 0 16
44155: PUSH
44156: LD_INT 1
44158: ARRAY
44159: PPUSH
44160: LD_VAR 0 16
44164: PUSH
44165: LD_INT 2
44167: ARRAY
44168: PPUSH
44169: CALL_OW 488
44173: IFFALSE 44204
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44175: LD_VAR 0 13
44179: PPUSH
44180: LD_VAR 0 16
44184: PUSH
44185: LD_INT 1
44187: ARRAY
44188: PPUSH
44189: LD_VAR 0 16
44193: PUSH
44194: LD_INT 2
44196: ARRAY
44197: PPUSH
44198: CALL_OW 111
// continue ;
44202: GO 43694
// end ; end ; r := GetDir ( tmp ) ;
44204: LD_ADDR_VAR 0 15
44208: PUSH
44209: LD_VAR 0 13
44213: PPUSH
44214: CALL_OW 254
44218: ST_TO_ADDR
// if r = 5 then
44219: LD_VAR 0 15
44223: PUSH
44224: LD_INT 5
44226: EQUAL
44227: IFFALSE 44237
// r := 0 ;
44229: LD_ADDR_VAR 0 15
44233: PUSH
44234: LD_INT 0
44236: ST_TO_ADDR
// for j = r to 5 do
44237: LD_ADDR_VAR 0 10
44241: PUSH
44242: DOUBLE
44243: LD_VAR 0 15
44247: DEC
44248: ST_TO_ADDR
44249: LD_INT 5
44251: PUSH
44252: FOR_TO
44253: IFFALSE 44367
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44255: LD_ADDR_VAR 0 11
44259: PUSH
44260: LD_VAR 0 13
44264: PPUSH
44265: CALL_OW 250
44269: PPUSH
44270: LD_VAR 0 10
44274: PPUSH
44275: LD_INT 2
44277: PPUSH
44278: CALL_OW 272
44282: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44283: LD_ADDR_VAR 0 12
44287: PUSH
44288: LD_VAR 0 13
44292: PPUSH
44293: CALL_OW 251
44297: PPUSH
44298: LD_VAR 0 10
44302: PPUSH
44303: LD_INT 2
44305: PPUSH
44306: CALL_OW 273
44310: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44311: LD_VAR 0 11
44315: PPUSH
44316: LD_VAR 0 12
44320: PPUSH
44321: CALL_OW 488
44325: PUSH
44326: LD_VAR 0 11
44330: PPUSH
44331: LD_VAR 0 12
44335: PPUSH
44336: CALL_OW 428
44340: NOT
44341: AND
44342: IFFALSE 44365
// begin ComMoveXY ( tmp , _x , _y ) ;
44344: LD_VAR 0 13
44348: PPUSH
44349: LD_VAR 0 11
44353: PPUSH
44354: LD_VAR 0 12
44358: PPUSH
44359: CALL_OW 111
// break ;
44363: GO 44367
// end ; end ;
44365: GO 44252
44367: POP
44368: POP
// end ; end ;
44369: GO 43694
44371: POP
44372: POP
// end ;
44373: LD_VAR 0 8
44377: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44378: LD_INT 0
44380: PPUSH
// result := true ;
44381: LD_ADDR_VAR 0 3
44385: PUSH
44386: LD_INT 1
44388: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44389: LD_VAR 0 2
44393: PUSH
44394: LD_INT 24
44396: DOUBLE
44397: EQUAL
44398: IFTRUE 44408
44400: LD_INT 33
44402: DOUBLE
44403: EQUAL
44404: IFTRUE 44408
44406: GO 44433
44408: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44409: LD_ADDR_VAR 0 3
44413: PUSH
44414: LD_INT 32
44416: PPUSH
44417: LD_VAR 0 1
44421: PPUSH
44422: CALL_OW 321
44426: PUSH
44427: LD_INT 2
44429: EQUAL
44430: ST_TO_ADDR
44431: GO 44749
44433: LD_INT 20
44435: DOUBLE
44436: EQUAL
44437: IFTRUE 44441
44439: GO 44466
44441: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44442: LD_ADDR_VAR 0 3
44446: PUSH
44447: LD_INT 6
44449: PPUSH
44450: LD_VAR 0 1
44454: PPUSH
44455: CALL_OW 321
44459: PUSH
44460: LD_INT 2
44462: EQUAL
44463: ST_TO_ADDR
44464: GO 44749
44466: LD_INT 22
44468: DOUBLE
44469: EQUAL
44470: IFTRUE 44480
44472: LD_INT 36
44474: DOUBLE
44475: EQUAL
44476: IFTRUE 44480
44478: GO 44505
44480: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44481: LD_ADDR_VAR 0 3
44485: PUSH
44486: LD_INT 15
44488: PPUSH
44489: LD_VAR 0 1
44493: PPUSH
44494: CALL_OW 321
44498: PUSH
44499: LD_INT 2
44501: EQUAL
44502: ST_TO_ADDR
44503: GO 44749
44505: LD_INT 30
44507: DOUBLE
44508: EQUAL
44509: IFTRUE 44513
44511: GO 44538
44513: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44514: LD_ADDR_VAR 0 3
44518: PUSH
44519: LD_INT 20
44521: PPUSH
44522: LD_VAR 0 1
44526: PPUSH
44527: CALL_OW 321
44531: PUSH
44532: LD_INT 2
44534: EQUAL
44535: ST_TO_ADDR
44536: GO 44749
44538: LD_INT 28
44540: DOUBLE
44541: EQUAL
44542: IFTRUE 44552
44544: LD_INT 21
44546: DOUBLE
44547: EQUAL
44548: IFTRUE 44552
44550: GO 44577
44552: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44553: LD_ADDR_VAR 0 3
44557: PUSH
44558: LD_INT 21
44560: PPUSH
44561: LD_VAR 0 1
44565: PPUSH
44566: CALL_OW 321
44570: PUSH
44571: LD_INT 2
44573: EQUAL
44574: ST_TO_ADDR
44575: GO 44749
44577: LD_INT 16
44579: DOUBLE
44580: EQUAL
44581: IFTRUE 44585
44583: GO 44610
44585: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44586: LD_ADDR_VAR 0 3
44590: PUSH
44591: LD_INT 84
44593: PPUSH
44594: LD_VAR 0 1
44598: PPUSH
44599: CALL_OW 321
44603: PUSH
44604: LD_INT 2
44606: EQUAL
44607: ST_TO_ADDR
44608: GO 44749
44610: LD_INT 19
44612: DOUBLE
44613: EQUAL
44614: IFTRUE 44624
44616: LD_INT 23
44618: DOUBLE
44619: EQUAL
44620: IFTRUE 44624
44622: GO 44649
44624: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44625: LD_ADDR_VAR 0 3
44629: PUSH
44630: LD_INT 83
44632: PPUSH
44633: LD_VAR 0 1
44637: PPUSH
44638: CALL_OW 321
44642: PUSH
44643: LD_INT 2
44645: EQUAL
44646: ST_TO_ADDR
44647: GO 44749
44649: LD_INT 17
44651: DOUBLE
44652: EQUAL
44653: IFTRUE 44657
44655: GO 44682
44657: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44658: LD_ADDR_VAR 0 3
44662: PUSH
44663: LD_INT 39
44665: PPUSH
44666: LD_VAR 0 1
44670: PPUSH
44671: CALL_OW 321
44675: PUSH
44676: LD_INT 2
44678: EQUAL
44679: ST_TO_ADDR
44680: GO 44749
44682: LD_INT 18
44684: DOUBLE
44685: EQUAL
44686: IFTRUE 44690
44688: GO 44715
44690: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44691: LD_ADDR_VAR 0 3
44695: PUSH
44696: LD_INT 40
44698: PPUSH
44699: LD_VAR 0 1
44703: PPUSH
44704: CALL_OW 321
44708: PUSH
44709: LD_INT 2
44711: EQUAL
44712: ST_TO_ADDR
44713: GO 44749
44715: LD_INT 27
44717: DOUBLE
44718: EQUAL
44719: IFTRUE 44723
44721: GO 44748
44723: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44724: LD_ADDR_VAR 0 3
44728: PUSH
44729: LD_INT 35
44731: PPUSH
44732: LD_VAR 0 1
44736: PPUSH
44737: CALL_OW 321
44741: PUSH
44742: LD_INT 2
44744: EQUAL
44745: ST_TO_ADDR
44746: GO 44749
44748: POP
// end ;
44749: LD_VAR 0 3
44753: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44754: LD_INT 0
44756: PPUSH
44757: PPUSH
44758: PPUSH
44759: PPUSH
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
// result := false ;
44767: LD_ADDR_VAR 0 6
44771: PUSH
44772: LD_INT 0
44774: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44775: LD_VAR 0 1
44779: NOT
44780: PUSH
44781: LD_VAR 0 1
44785: PPUSH
44786: CALL_OW 266
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: IN
44801: NOT
44802: OR
44803: PUSH
44804: LD_VAR 0 2
44808: NOT
44809: OR
44810: PUSH
44811: LD_VAR 0 5
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: LD_INT 4
44830: PUSH
44831: LD_INT 5
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: IN
44842: NOT
44843: OR
44844: PUSH
44845: LD_VAR 0 3
44849: PPUSH
44850: LD_VAR 0 4
44854: PPUSH
44855: CALL_OW 488
44859: NOT
44860: OR
44861: IFFALSE 44865
// exit ;
44863: GO 45601
// side := GetSide ( depot ) ;
44865: LD_ADDR_VAR 0 9
44869: PUSH
44870: LD_VAR 0 1
44874: PPUSH
44875: CALL_OW 255
44879: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44880: LD_VAR 0 9
44884: PPUSH
44885: LD_VAR 0 2
44889: PPUSH
44890: CALL 44378 0 2
44894: NOT
44895: IFFALSE 44899
// exit ;
44897: GO 45601
// pom := GetBase ( depot ) ;
44899: LD_ADDR_VAR 0 10
44903: PUSH
44904: LD_VAR 0 1
44908: PPUSH
44909: CALL_OW 274
44913: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44914: LD_ADDR_VAR 0 11
44918: PUSH
44919: LD_VAR 0 2
44923: PPUSH
44924: LD_VAR 0 1
44928: PPUSH
44929: CALL_OW 248
44933: PPUSH
44934: CALL_OW 450
44938: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44939: LD_VAR 0 10
44943: PPUSH
44944: LD_INT 1
44946: PPUSH
44947: CALL_OW 275
44951: PUSH
44952: LD_VAR 0 11
44956: PUSH
44957: LD_INT 1
44959: ARRAY
44960: GREATEREQUAL
44961: PUSH
44962: LD_VAR 0 10
44966: PPUSH
44967: LD_INT 2
44969: PPUSH
44970: CALL_OW 275
44974: PUSH
44975: LD_VAR 0 11
44979: PUSH
44980: LD_INT 2
44982: ARRAY
44983: GREATEREQUAL
44984: AND
44985: PUSH
44986: LD_VAR 0 10
44990: PPUSH
44991: LD_INT 3
44993: PPUSH
44994: CALL_OW 275
44998: PUSH
44999: LD_VAR 0 11
45003: PUSH
45004: LD_INT 3
45006: ARRAY
45007: GREATEREQUAL
45008: AND
45009: NOT
45010: IFFALSE 45014
// exit ;
45012: GO 45601
// if GetBType ( depot ) = b_depot then
45014: LD_VAR 0 1
45018: PPUSH
45019: CALL_OW 266
45023: PUSH
45024: LD_INT 0
45026: EQUAL
45027: IFFALSE 45039
// dist := 28 else
45029: LD_ADDR_VAR 0 14
45033: PUSH
45034: LD_INT 28
45036: ST_TO_ADDR
45037: GO 45047
// dist := 36 ;
45039: LD_ADDR_VAR 0 14
45043: PUSH
45044: LD_INT 36
45046: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45047: LD_VAR 0 1
45051: PPUSH
45052: LD_VAR 0 3
45056: PPUSH
45057: LD_VAR 0 4
45061: PPUSH
45062: CALL_OW 297
45066: PUSH
45067: LD_VAR 0 14
45071: GREATER
45072: IFFALSE 45076
// exit ;
45074: GO 45601
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45076: LD_ADDR_VAR 0 12
45080: PUSH
45081: LD_VAR 0 2
45085: PPUSH
45086: LD_VAR 0 3
45090: PPUSH
45091: LD_VAR 0 4
45095: PPUSH
45096: LD_VAR 0 5
45100: PPUSH
45101: LD_VAR 0 1
45105: PPUSH
45106: CALL_OW 248
45110: PPUSH
45111: LD_INT 0
45113: PPUSH
45114: CALL 45606 0 6
45118: ST_TO_ADDR
// if not hexes then
45119: LD_VAR 0 12
45123: NOT
45124: IFFALSE 45128
// exit ;
45126: GO 45601
// hex := GetHexInfo ( x , y ) ;
45128: LD_ADDR_VAR 0 15
45132: PUSH
45133: LD_VAR 0 3
45137: PPUSH
45138: LD_VAR 0 4
45142: PPUSH
45143: CALL_OW 546
45147: ST_TO_ADDR
// if hex [ 1 ] then
45148: LD_VAR 0 15
45152: PUSH
45153: LD_INT 1
45155: ARRAY
45156: IFFALSE 45160
// exit ;
45158: GO 45601
// height := hex [ 2 ] ;
45160: LD_ADDR_VAR 0 13
45164: PUSH
45165: LD_VAR 0 15
45169: PUSH
45170: LD_INT 2
45172: ARRAY
45173: ST_TO_ADDR
// for i = 1 to hexes do
45174: LD_ADDR_VAR 0 7
45178: PUSH
45179: DOUBLE
45180: LD_INT 1
45182: DEC
45183: ST_TO_ADDR
45184: LD_VAR 0 12
45188: PUSH
45189: FOR_TO
45190: IFFALSE 45520
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45192: LD_VAR 0 12
45196: PUSH
45197: LD_VAR 0 7
45201: ARRAY
45202: PUSH
45203: LD_INT 1
45205: ARRAY
45206: PPUSH
45207: LD_VAR 0 12
45211: PUSH
45212: LD_VAR 0 7
45216: ARRAY
45217: PUSH
45218: LD_INT 2
45220: ARRAY
45221: PPUSH
45222: CALL_OW 488
45226: NOT
45227: PUSH
45228: LD_VAR 0 12
45232: PUSH
45233: LD_VAR 0 7
45237: ARRAY
45238: PUSH
45239: LD_INT 1
45241: ARRAY
45242: PPUSH
45243: LD_VAR 0 12
45247: PUSH
45248: LD_VAR 0 7
45252: ARRAY
45253: PUSH
45254: LD_INT 2
45256: ARRAY
45257: PPUSH
45258: CALL_OW 428
45262: PUSH
45263: LD_INT 0
45265: GREATER
45266: OR
45267: PUSH
45268: LD_VAR 0 12
45272: PUSH
45273: LD_VAR 0 7
45277: ARRAY
45278: PUSH
45279: LD_INT 1
45281: ARRAY
45282: PPUSH
45283: LD_VAR 0 12
45287: PUSH
45288: LD_VAR 0 7
45292: ARRAY
45293: PUSH
45294: LD_INT 2
45296: ARRAY
45297: PPUSH
45298: CALL_OW 351
45302: OR
45303: IFFALSE 45309
// exit ;
45305: POP
45306: POP
45307: GO 45601
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45309: LD_ADDR_VAR 0 8
45313: PUSH
45314: LD_VAR 0 12
45318: PUSH
45319: LD_VAR 0 7
45323: ARRAY
45324: PUSH
45325: LD_INT 1
45327: ARRAY
45328: PPUSH
45329: LD_VAR 0 12
45333: PUSH
45334: LD_VAR 0 7
45338: ARRAY
45339: PUSH
45340: LD_INT 2
45342: ARRAY
45343: PPUSH
45344: CALL_OW 546
45348: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45349: LD_VAR 0 8
45353: PUSH
45354: LD_INT 1
45356: ARRAY
45357: PUSH
45358: LD_VAR 0 8
45362: PUSH
45363: LD_INT 2
45365: ARRAY
45366: PUSH
45367: LD_VAR 0 13
45371: PUSH
45372: LD_INT 2
45374: PLUS
45375: GREATER
45376: OR
45377: PUSH
45378: LD_VAR 0 8
45382: PUSH
45383: LD_INT 2
45385: ARRAY
45386: PUSH
45387: LD_VAR 0 13
45391: PUSH
45392: LD_INT 2
45394: MINUS
45395: LESS
45396: OR
45397: PUSH
45398: LD_VAR 0 8
45402: PUSH
45403: LD_INT 3
45405: ARRAY
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 8
45412: PUSH
45413: LD_INT 9
45415: PUSH
45416: LD_INT 10
45418: PUSH
45419: LD_INT 11
45421: PUSH
45422: LD_INT 12
45424: PUSH
45425: LD_INT 13
45427: PUSH
45428: LD_INT 16
45430: PUSH
45431: LD_INT 17
45433: PUSH
45434: LD_INT 18
45436: PUSH
45437: LD_INT 19
45439: PUSH
45440: LD_INT 20
45442: PUSH
45443: LD_INT 21
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: IN
45461: NOT
45462: OR
45463: PUSH
45464: LD_VAR 0 8
45468: PUSH
45469: LD_INT 5
45471: ARRAY
45472: NOT
45473: OR
45474: PUSH
45475: LD_VAR 0 8
45479: PUSH
45480: LD_INT 6
45482: ARRAY
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 7
45492: PUSH
45493: LD_INT 9
45495: PUSH
45496: LD_INT 10
45498: PUSH
45499: LD_INT 11
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: IN
45510: NOT
45511: OR
45512: IFFALSE 45518
// exit ;
45514: POP
45515: POP
45516: GO 45601
// end ;
45518: GO 45189
45520: POP
45521: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45522: LD_VAR 0 9
45526: PPUSH
45527: LD_VAR 0 3
45531: PPUSH
45532: LD_VAR 0 4
45536: PPUSH
45537: LD_INT 20
45539: PPUSH
45540: CALL 37553 0 4
45544: PUSH
45545: LD_INT 4
45547: ARRAY
45548: IFFALSE 45552
// exit ;
45550: GO 45601
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45552: LD_VAR 0 2
45556: PUSH
45557: LD_INT 29
45559: PUSH
45560: LD_INT 30
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: IN
45567: PUSH
45568: LD_VAR 0 3
45572: PPUSH
45573: LD_VAR 0 4
45577: PPUSH
45578: LD_VAR 0 9
45582: PPUSH
45583: CALL_OW 440
45587: NOT
45588: AND
45589: IFFALSE 45593
// exit ;
45591: GO 45601
// result := true ;
45593: LD_ADDR_VAR 0 6
45597: PUSH
45598: LD_INT 1
45600: ST_TO_ADDR
// end ;
45601: LD_VAR 0 6
45605: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45606: LD_INT 0
45608: PPUSH
45609: PPUSH
45610: PPUSH
45611: PPUSH
45612: PPUSH
45613: PPUSH
45614: PPUSH
45615: PPUSH
45616: PPUSH
45617: PPUSH
45618: PPUSH
45619: PPUSH
45620: PPUSH
45621: PPUSH
45622: PPUSH
45623: PPUSH
45624: PPUSH
45625: PPUSH
45626: PPUSH
45627: PPUSH
45628: PPUSH
45629: PPUSH
45630: PPUSH
45631: PPUSH
45632: PPUSH
45633: PPUSH
45634: PPUSH
45635: PPUSH
45636: PPUSH
45637: PPUSH
45638: PPUSH
45639: PPUSH
45640: PPUSH
45641: PPUSH
45642: PPUSH
45643: PPUSH
45644: PPUSH
45645: PPUSH
45646: PPUSH
45647: PPUSH
45648: PPUSH
45649: PPUSH
45650: PPUSH
45651: PPUSH
45652: PPUSH
45653: PPUSH
45654: PPUSH
45655: PPUSH
45656: PPUSH
45657: PPUSH
45658: PPUSH
45659: PPUSH
45660: PPUSH
45661: PPUSH
45662: PPUSH
45663: PPUSH
45664: PPUSH
45665: PPUSH
// result = [ ] ;
45666: LD_ADDR_VAR 0 7
45670: PUSH
45671: EMPTY
45672: ST_TO_ADDR
// temp_list = [ ] ;
45673: LD_ADDR_VAR 0 9
45677: PUSH
45678: EMPTY
45679: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45680: LD_VAR 0 4
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: LD_INT 4
45699: PUSH
45700: LD_INT 5
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: IN
45711: NOT
45712: PUSH
45713: LD_VAR 0 1
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: IN
45728: PUSH
45729: LD_VAR 0 5
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 3
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: IN
45748: NOT
45749: AND
45750: OR
45751: IFFALSE 45755
// exit ;
45753: GO 64146
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45755: LD_VAR 0 1
45759: PUSH
45760: LD_INT 6
45762: PUSH
45763: LD_INT 7
45765: PUSH
45766: LD_INT 8
45768: PUSH
45769: LD_INT 13
45771: PUSH
45772: LD_INT 12
45774: PUSH
45775: LD_INT 15
45777: PUSH
45778: LD_INT 11
45780: PUSH
45781: LD_INT 14
45783: PUSH
45784: LD_INT 10
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: IN
45798: IFFALSE 45808
// btype = b_lab ;
45800: LD_ADDR_VAR 0 1
45804: PUSH
45805: LD_INT 6
45807: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45808: LD_VAR 0 6
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: LIST
45826: IN
45827: NOT
45828: PUSH
45829: LD_VAR 0 1
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: LD_INT 6
45848: PUSH
45849: LD_INT 36
45851: PUSH
45852: LD_INT 4
45854: PUSH
45855: LD_INT 5
45857: PUSH
45858: LD_INT 31
45860: PUSH
45861: LD_INT 32
45863: PUSH
45864: LD_INT 33
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: IN
45880: NOT
45881: PUSH
45882: LD_VAR 0 6
45886: PUSH
45887: LD_INT 1
45889: EQUAL
45890: AND
45891: OR
45892: PUSH
45893: LD_VAR 0 1
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 3
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: IN
45908: NOT
45909: PUSH
45910: LD_VAR 0 6
45914: PUSH
45915: LD_INT 2
45917: EQUAL
45918: AND
45919: OR
45920: IFFALSE 45930
// mode = 0 ;
45922: LD_ADDR_VAR 0 6
45926: PUSH
45927: LD_INT 0
45929: ST_TO_ADDR
// case mode of 0 :
45930: LD_VAR 0 6
45934: PUSH
45935: LD_INT 0
45937: DOUBLE
45938: EQUAL
45939: IFTRUE 45943
45941: GO 57396
45943: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45944: LD_ADDR_VAR 0 11
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46137: LD_ADDR_VAR 0 12
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 3
46294: NEG
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 3
46305: NEG
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46333: LD_ADDR_VAR 0 13
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 3
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 3
46492: NEG
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 3
46504: NEG
46505: PUSH
46506: LD_INT 3
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46532: LD_ADDR_VAR 0 14
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 3
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46728: LD_ADDR_VAR 0 15
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 3
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46921: LD_ADDR_VAR 0 16
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: LD_INT 3
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47114: LD_ADDR_VAR 0 17
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: LD_INT 2
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47344: LD_ADDR_VAR 0 18
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47574: LD_ADDR_VAR 0 19
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47804: LD_ADDR_VAR 0 20
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48034: LD_ADDR_VAR 0 21
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48264: LD_ADDR_VAR 0 22
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48494: LD_ADDR_VAR 0 23
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: LD_INT 3
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: LD_INT 3
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48774: LD_ADDR_VAR 0 24
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 2
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 3
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 3
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49050: LD_ADDR_VAR 0 25
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 3
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 3
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 3
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 3
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49324: LD_ADDR_VAR 0 26
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: LD_INT 3
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 3
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49600: LD_ADDR_VAR 0 27
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 3
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49880: LD_ADDR_VAR 0 28
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: LD_INT 3
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 3
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 3
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 3
50127: NEG
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50162: LD_ADDR_VAR 0 29
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 3
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: LD_INT 3
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50441: LD_ADDR_VAR 0 30
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 3
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: LD_INT 3
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50719: LD_ADDR_VAR 0 31
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 2
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 3
50962: NEG
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50997: LD_ADDR_VAR 0 32
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 3
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: LD_INT 3
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: NEG
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51275: LD_ADDR_VAR 0 33
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: LD_INT 3
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 3
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 3
51519: NEG
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51554: LD_ADDR_VAR 0 34
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 3
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 3
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 3
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51834: LD_ADDR_VAR 0 35
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51946: LD_ADDR_VAR 0 36
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52058: LD_ADDR_VAR 0 37
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52170: LD_ADDR_VAR 0 38
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52282: LD_ADDR_VAR 0 39
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52394: LD_ADDR_VAR 0 40
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52506: LD_ADDR_VAR 0 41
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 3
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 3
52791: NEG
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: NEG
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: NEG
52816: PUSH
52817: LD_INT 3
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52856: LD_ADDR_VAR 0 42
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 3
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 3
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 3
53153: NEG
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 3
53165: NEG
53166: PUSH
53167: LD_INT 3
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53206: LD_ADDR_VAR 0 43
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 3
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 3
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 2
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 3
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 3
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 3
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 3
53502: NEG
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53554: LD_ADDR_VAR 0 44
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 3
53828: NEG
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 3
53839: NEG
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 3
53851: NEG
53852: PUSH
53853: LD_INT 2
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 3
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53904: LD_ADDR_VAR 0 45
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 3
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 3
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 2
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 3
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 3
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 3
54201: NEG
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: NEG
54214: PUSH
54215: LD_INT 3
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54254: LD_ADDR_VAR 0 46
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: LD_INT 3
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 3
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 3
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54602: LD_ADDR_VAR 0 47
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54753: LD_ADDR_VAR 0 48
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54900: LD_ADDR_VAR 0 49
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55044: LD_ADDR_VAR 0 50
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55188: LD_ADDR_VAR 0 51
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55335: LD_ADDR_VAR 0 52
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: NEG
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55486: LD_ADDR_VAR 0 53
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55716: LD_ADDR_VAR 0 54
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55946: LD_ADDR_VAR 0 55
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56176: LD_ADDR_VAR 0 56
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56406: LD_ADDR_VAR 0 57
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56636: LD_ADDR_VAR 0 58
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56866: LD_ADDR_VAR 0 59
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56954: LD_ADDR_VAR 0 60
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57042: LD_ADDR_VAR 0 61
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57130: LD_ADDR_VAR 0 62
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57218: LD_ADDR_VAR 0 63
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57306: LD_ADDR_VAR 0 64
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: ST_TO_ADDR
// end ; 1 :
57394: GO 63291
57396: LD_INT 1
57398: DOUBLE
57399: EQUAL
57400: IFTRUE 57404
57402: GO 60027
57404: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57405: LD_ADDR_VAR 0 11
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 3
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 3
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: LIST
57448: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57449: LD_ADDR_VAR 0 12
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57490: LD_ADDR_VAR 0 13
57494: PUSH
57495: LD_INT 3
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: LD_INT 3
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 3
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57530: LD_ADDR_VAR 0 14
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 3
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57571: LD_ADDR_VAR 0 15
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: NEG
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57615: LD_ADDR_VAR 0 16
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 3
57646: NEG
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: LIST
57660: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57661: LD_ADDR_VAR 0 17
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57705: LD_ADDR_VAR 0 18
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57746: LD_ADDR_VAR 0 19
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57786: LD_ADDR_VAR 0 20
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 3
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57827: LD_ADDR_VAR 0 21
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 3
57845: NEG
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 3
57856: NEG
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: LIST
57870: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57871: LD_ADDR_VAR 0 22
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: LD_INT 3
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 3
57902: NEG
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: LIST
57916: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57917: LD_ADDR_VAR 0 23
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 4
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 3
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57961: LD_ADDR_VAR 0 24
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 3
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 4
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: LIST
58001: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58002: LD_ADDR_VAR 0 25
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 4
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: LD_INT 4
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: LIST
58041: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58042: LD_ADDR_VAR 0 26
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 3
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: LIST
58082: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58083: LD_ADDR_VAR 0 27
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 4
58112: NEG
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: LIST
58126: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58127: LD_ADDR_VAR 0 28
58131: PUSH
58132: LD_INT 3
58134: NEG
58135: PUSH
58136: LD_INT 3
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: NEG
58147: PUSH
58148: LD_INT 4
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 4
58158: NEG
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58173: LD_ADDR_VAR 0 29
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 3
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 4
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 4
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 3
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 5
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 5
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 4
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 6
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: LD_INT 6
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: LD_INT 5
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58328: LD_ADDR_VAR 0 30
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 3
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 4
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 4
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 5
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 5
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 5
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 6
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 6
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58471: LD_ADDR_VAR 0 31
58475: PUSH
58476: LD_INT 3
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 3
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 3
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 4
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 4
58518: PUSH
58519: LD_INT 4
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: LD_INT 4
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 5
58538: PUSH
58539: LD_INT 4
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 5
58548: PUSH
58549: LD_INT 5
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 4
58558: PUSH
58559: LD_INT 5
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 6
58568: PUSH
58569: LD_INT 5
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 6
58578: PUSH
58579: LD_INT 6
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 5
58588: PUSH
58589: LD_INT 6
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58610: LD_ADDR_VAR 0 32
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 3
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: LD_INT 3
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: LD_INT 2
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 4
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 4
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: LD_INT 3
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 5
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 5
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 4
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 6
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 6
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: LD_INT 5
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58753: LD_ADDR_VAR 0 33
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 4
58805: NEG
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 4
58816: NEG
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 4
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 5
58839: NEG
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 5
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 5
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 6
58873: NEG
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 6
58884: NEG
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58908: LD_ADDR_VAR 0 34
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 3
58927: NEG
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: NEG
58952: PUSH
58953: LD_INT 4
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 4
58963: NEG
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 4
58975: NEG
58976: PUSH
58977: LD_INT 4
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 4
58987: NEG
58988: PUSH
58989: LD_INT 5
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 5
58999: NEG
59000: PUSH
59001: LD_INT 4
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 5
59011: NEG
59012: PUSH
59013: LD_INT 5
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 5
59023: NEG
59024: PUSH
59025: LD_INT 6
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 6
59035: NEG
59036: PUSH
59037: LD_INT 5
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 6
59047: NEG
59048: PUSH
59049: LD_INT 6
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59071: LD_ADDR_VAR 0 41
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: LIST
59114: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59115: LD_ADDR_VAR 0 42
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59156: LD_ADDR_VAR 0 43
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 3
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: LIST
59195: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59196: LD_ADDR_VAR 0 44
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59237: LD_ADDR_VAR 0 45
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 2
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 3
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59281: LD_ADDR_VAR 0 46
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: LIST
59326: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59327: LD_ADDR_VAR 0 47
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59360: LD_ADDR_VAR 0 48
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59391: LD_ADDR_VAR 0 49
59395: PUSH
59396: LD_INT 3
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 3
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59420: LD_ADDR_VAR 0 50
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 3
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 3
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59449: LD_ADDR_VAR 0 51
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 2
59467: NEG
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59480: LD_ADDR_VAR 0 52
59484: PUSH
59485: LD_INT 3
59487: NEG
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: NEG
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59513: LD_ADDR_VAR 0 53
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: LIST
59556: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59557: LD_ADDR_VAR 0 54
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: LIST
59597: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59598: LD_ADDR_VAR 0 55
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59638: LD_ADDR_VAR 0 56
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59679: LD_ADDR_VAR 0 57
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: LIST
59722: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59723: LD_ADDR_VAR 0 58
59727: PUSH
59728: LD_INT 2
59730: NEG
59731: PUSH
59732: LD_INT 3
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: LD_INT 3
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: LIST
59768: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59769: LD_ADDR_VAR 0 59
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59813: LD_ADDR_VAR 0 60
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59854: LD_ADDR_VAR 0 61
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59894: LD_ADDR_VAR 0 62
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59935: LD_ADDR_VAR 0 63
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: NEG
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59979: LD_ADDR_VAR 0 64
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: LD_INT 2
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: LIST
60024: ST_TO_ADDR
// end ; 2 :
60025: GO 63291
60027: LD_INT 2
60029: DOUBLE
60030: EQUAL
60031: IFTRUE 60035
60033: GO 63290
60035: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60036: LD_ADDR_VAR 0 29
60040: PUSH
60041: LD_INT 4
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 4
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 5
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 5
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 4
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 3
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 3
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 3
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 5
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 3
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 4
60156: PUSH
60157: LD_INT 3
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 4
60166: PUSH
60167: LD_INT 4
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: LD_INT 4
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 4
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: LD_INT 4
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 4
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 3
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 4
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 5
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: LD_INT 5
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 4
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 3
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 2
60298: PUSH
60299: LD_INT 5
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: LD_INT 3
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 4
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 4
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 4
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 4
60421: NEG
60422: PUSH
60423: LD_INT 4
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 4
60433: NEG
60434: PUSH
60435: LD_INT 5
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 3
60445: NEG
60446: PUSH
60447: LD_INT 4
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 3
60457: NEG
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 4
60469: NEG
60470: PUSH
60471: LD_INT 3
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 5
60481: NEG
60482: PUSH
60483: LD_INT 4
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 5
60493: NEG
60494: PUSH
60495: LD_INT 5
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: LD_INT 5
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 5
60517: NEG
60518: PUSH
60519: LD_INT 3
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60574: LD_ADDR_VAR 0 30
60578: PUSH
60579: LD_INT 4
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 4
60591: PUSH
60592: LD_INT 3
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 5
60601: PUSH
60602: LD_INT 4
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 5
60611: PUSH
60612: LD_INT 5
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 4
60621: PUSH
60622: LD_INT 5
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 3
60631: PUSH
60632: LD_INT 4
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: LD_INT 3
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 5
60651: PUSH
60652: LD_INT 3
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: LD_INT 5
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 3
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: LD_INT 3
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: LD_INT 4
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 4
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 4
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 4
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 4
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 3
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 4
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 5
60820: NEG
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 5
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 5
60843: NEG
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: NEG
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 3
60866: NEG
60867: PUSH
60868: LD_INT 3
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 3
60878: NEG
60879: PUSH
60880: LD_INT 4
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: LD_INT 3
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 4
60926: NEG
60927: PUSH
60928: LD_INT 3
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 4
60938: NEG
60939: PUSH
60940: LD_INT 4
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: LD_INT 4
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 4
60962: NEG
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 4
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 5
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 4
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 3
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: LD_INT 4
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 5
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: LD_INT 3
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: LD_INT 5
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61121: LD_ADDR_VAR 0 31
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 4
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 3
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: LD_INT 4
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 5
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 5
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 4
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 3
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: LD_INT 5
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: NEG
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 3
61232: NEG
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 3
61266: NEG
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 4
61277: NEG
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 4
61288: NEG
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 4
61300: NEG
61301: PUSH
61302: LD_INT 2
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 4
61323: NEG
61324: PUSH
61325: LD_INT 4
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 4
61335: NEG
61336: PUSH
61337: LD_INT 5
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 3
61347: NEG
61348: PUSH
61349: LD_INT 4
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: LD_INT 3
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 4
61371: NEG
61372: PUSH
61373: LD_INT 3
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 5
61383: NEG
61384: PUSH
61385: LD_INT 4
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 5
61395: NEG
61396: PUSH
61397: LD_INT 5
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: NEG
61408: PUSH
61409: LD_INT 5
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 5
61419: NEG
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 4
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 3
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 2
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 4
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: LD_INT 4
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 4
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 4
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 5
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 5
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 4
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 3
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 3
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 3
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 5
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61671: LD_ADDR_VAR 0 32
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 4
61689: NEG
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 3
61712: NEG
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 4
61723: NEG
61724: PUSH
61725: LD_INT 1
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 5
61734: NEG
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 5
61745: NEG
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 5
61757: NEG
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: NEG
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 3
61792: NEG
61793: PUSH
61794: LD_INT 4
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: LD_INT 3
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: NEG
61817: PUSH
61818: LD_INT 2
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: LD_INT 2
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 4
61840: NEG
61841: PUSH
61842: LD_INT 3
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 4
61852: NEG
61853: PUSH
61854: LD_INT 4
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: LD_INT 4
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 4
61876: NEG
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 4
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 5
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: LD_INT 4
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: LD_INT 3
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: LD_INT 3
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: LD_INT 4
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 5
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 3
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: NEG
61979: PUSH
61980: LD_INT 5
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 3
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 4
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 4
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 3
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 2
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 4
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 4
62083: PUSH
62084: LD_INT 4
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 4
62093: PUSH
62094: LD_INT 3
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 5
62103: PUSH
62104: LD_INT 4
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 5
62113: PUSH
62114: LD_INT 5
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 4
62123: PUSH
62124: LD_INT 5
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: PUSH
62134: LD_INT 4
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 3
62143: PUSH
62144: LD_INT 3
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 5
62153: PUSH
62154: LD_INT 3
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 3
62163: PUSH
62164: LD_INT 5
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62218: LD_ADDR_VAR 0 33
62222: PUSH
62223: LD_INT 4
62225: NEG
62226: PUSH
62227: LD_INT 4
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 4
62237: NEG
62238: PUSH
62239: LD_INT 5
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 3
62249: NEG
62250: PUSH
62251: LD_INT 4
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 3
62261: NEG
62262: PUSH
62263: LD_INT 3
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 4
62273: NEG
62274: PUSH
62275: LD_INT 3
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 5
62285: NEG
62286: PUSH
62287: LD_INT 4
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 5
62297: NEG
62298: PUSH
62299: LD_INT 5
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 3
62309: NEG
62310: PUSH
62311: LD_INT 5
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 5
62321: NEG
62322: PUSH
62323: LD_INT 3
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: LD_INT 3
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: LD_INT 4
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: LD_INT 3
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: LD_INT 2
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: LD_INT 2
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: LD_INT 3
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: LD_INT 4
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 2
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 2
62423: NEG
62424: PUSH
62425: LD_INT 4
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 4
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 4
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 5
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 5
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 4
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 3
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 3
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 3
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 5
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 3
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 4
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 4
62558: PUSH
62559: LD_INT 4
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 3
62568: PUSH
62569: LD_INT 4
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 2
62578: PUSH
62579: LD_INT 3
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: LD_INT 2
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 4
62598: PUSH
62599: LD_INT 2
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: LD_INT 4
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 4
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: LD_INT 3
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 4
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: LD_INT 5
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 5
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: LD_INT 4
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: NEG
62680: PUSH
62681: LD_INT 3
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 2
62690: PUSH
62691: LD_INT 5
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: NEG
62701: PUSH
62702: LD_INT 3
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62756: LD_ADDR_VAR 0 34
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: LD_INT 4
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: LD_INT 5
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: LD_INT 4
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: LD_INT 3
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: LD_INT 3
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: LD_INT 4
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: LD_INT 5
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: LD_INT 5
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 3
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 4
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 4
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 3
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 2
62937: PUSH
62938: LD_INT 2
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 4
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 4
62958: PUSH
62959: LD_INT 4
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 4
62968: PUSH
62969: LD_INT 3
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 5
62978: PUSH
62979: LD_INT 4
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 5
62988: PUSH
62989: LD_INT 5
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 4
62998: PUSH
62999: LD_INT 5
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 3
63008: PUSH
63009: LD_INT 4
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 3
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 5
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 3
63038: PUSH
63039: LD_INT 5
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: LD_INT 3
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: LD_INT 3
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 4
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: LD_INT 4
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: LD_INT 3
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: LD_INT 4
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 4
63141: NEG
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 4
63152: NEG
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 3
63164: NEG
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 3
63175: NEG
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 4
63186: NEG
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 5
63197: NEG
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 5
63208: NEG
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 5
63220: NEG
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 3
63232: NEG
63233: PUSH
63234: LD_INT 2
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: ST_TO_ADDR
// end ; end ;
63288: GO 63291
63290: POP
// case btype of b_depot , b_warehouse :
63291: LD_VAR 0 1
63295: PUSH
63296: LD_INT 0
63298: DOUBLE
63299: EQUAL
63300: IFTRUE 63310
63302: LD_INT 1
63304: DOUBLE
63305: EQUAL
63306: IFTRUE 63310
63308: GO 63511
63310: POP
// case nation of nation_american :
63311: LD_VAR 0 5
63315: PUSH
63316: LD_INT 1
63318: DOUBLE
63319: EQUAL
63320: IFTRUE 63324
63322: GO 63380
63324: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63325: LD_ADDR_VAR 0 9
63329: PUSH
63330: LD_VAR 0 11
63334: PUSH
63335: LD_VAR 0 12
63339: PUSH
63340: LD_VAR 0 13
63344: PUSH
63345: LD_VAR 0 14
63349: PUSH
63350: LD_VAR 0 15
63354: PUSH
63355: LD_VAR 0 16
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: PUSH
63368: LD_VAR 0 4
63372: PUSH
63373: LD_INT 1
63375: PLUS
63376: ARRAY
63377: ST_TO_ADDR
63378: GO 63509
63380: LD_INT 2
63382: DOUBLE
63383: EQUAL
63384: IFTRUE 63388
63386: GO 63444
63388: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63389: LD_ADDR_VAR 0 9
63393: PUSH
63394: LD_VAR 0 17
63398: PUSH
63399: LD_VAR 0 18
63403: PUSH
63404: LD_VAR 0 19
63408: PUSH
63409: LD_VAR 0 20
63413: PUSH
63414: LD_VAR 0 21
63418: PUSH
63419: LD_VAR 0 22
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: PUSH
63432: LD_VAR 0 4
63436: PUSH
63437: LD_INT 1
63439: PLUS
63440: ARRAY
63441: ST_TO_ADDR
63442: GO 63509
63444: LD_INT 3
63446: DOUBLE
63447: EQUAL
63448: IFTRUE 63452
63450: GO 63508
63452: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63453: LD_ADDR_VAR 0 9
63457: PUSH
63458: LD_VAR 0 23
63462: PUSH
63463: LD_VAR 0 24
63467: PUSH
63468: LD_VAR 0 25
63472: PUSH
63473: LD_VAR 0 26
63477: PUSH
63478: LD_VAR 0 27
63482: PUSH
63483: LD_VAR 0 28
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: PUSH
63496: LD_VAR 0 4
63500: PUSH
63501: LD_INT 1
63503: PLUS
63504: ARRAY
63505: ST_TO_ADDR
63506: GO 63509
63508: POP
63509: GO 64064
63511: LD_INT 2
63513: DOUBLE
63514: EQUAL
63515: IFTRUE 63525
63517: LD_INT 3
63519: DOUBLE
63520: EQUAL
63521: IFTRUE 63525
63523: GO 63581
63525: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63526: LD_ADDR_VAR 0 9
63530: PUSH
63531: LD_VAR 0 29
63535: PUSH
63536: LD_VAR 0 30
63540: PUSH
63541: LD_VAR 0 31
63545: PUSH
63546: LD_VAR 0 32
63550: PUSH
63551: LD_VAR 0 33
63555: PUSH
63556: LD_VAR 0 34
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: PUSH
63569: LD_VAR 0 4
63573: PUSH
63574: LD_INT 1
63576: PLUS
63577: ARRAY
63578: ST_TO_ADDR
63579: GO 64064
63581: LD_INT 16
63583: DOUBLE
63584: EQUAL
63585: IFTRUE 63643
63587: LD_INT 17
63589: DOUBLE
63590: EQUAL
63591: IFTRUE 63643
63593: LD_INT 18
63595: DOUBLE
63596: EQUAL
63597: IFTRUE 63643
63599: LD_INT 19
63601: DOUBLE
63602: EQUAL
63603: IFTRUE 63643
63605: LD_INT 22
63607: DOUBLE
63608: EQUAL
63609: IFTRUE 63643
63611: LD_INT 20
63613: DOUBLE
63614: EQUAL
63615: IFTRUE 63643
63617: LD_INT 21
63619: DOUBLE
63620: EQUAL
63621: IFTRUE 63643
63623: LD_INT 23
63625: DOUBLE
63626: EQUAL
63627: IFTRUE 63643
63629: LD_INT 24
63631: DOUBLE
63632: EQUAL
63633: IFTRUE 63643
63635: LD_INT 25
63637: DOUBLE
63638: EQUAL
63639: IFTRUE 63643
63641: GO 63699
63643: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63644: LD_ADDR_VAR 0 9
63648: PUSH
63649: LD_VAR 0 35
63653: PUSH
63654: LD_VAR 0 36
63658: PUSH
63659: LD_VAR 0 37
63663: PUSH
63664: LD_VAR 0 38
63668: PUSH
63669: LD_VAR 0 39
63673: PUSH
63674: LD_VAR 0 40
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: PUSH
63687: LD_VAR 0 4
63691: PUSH
63692: LD_INT 1
63694: PLUS
63695: ARRAY
63696: ST_TO_ADDR
63697: GO 64064
63699: LD_INT 6
63701: DOUBLE
63702: EQUAL
63703: IFTRUE 63755
63705: LD_INT 7
63707: DOUBLE
63708: EQUAL
63709: IFTRUE 63755
63711: LD_INT 8
63713: DOUBLE
63714: EQUAL
63715: IFTRUE 63755
63717: LD_INT 13
63719: DOUBLE
63720: EQUAL
63721: IFTRUE 63755
63723: LD_INT 12
63725: DOUBLE
63726: EQUAL
63727: IFTRUE 63755
63729: LD_INT 15
63731: DOUBLE
63732: EQUAL
63733: IFTRUE 63755
63735: LD_INT 11
63737: DOUBLE
63738: EQUAL
63739: IFTRUE 63755
63741: LD_INT 14
63743: DOUBLE
63744: EQUAL
63745: IFTRUE 63755
63747: LD_INT 10
63749: DOUBLE
63750: EQUAL
63751: IFTRUE 63755
63753: GO 63811
63755: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63756: LD_ADDR_VAR 0 9
63760: PUSH
63761: LD_VAR 0 41
63765: PUSH
63766: LD_VAR 0 42
63770: PUSH
63771: LD_VAR 0 43
63775: PUSH
63776: LD_VAR 0 44
63780: PUSH
63781: LD_VAR 0 45
63785: PUSH
63786: LD_VAR 0 46
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: PUSH
63799: LD_VAR 0 4
63803: PUSH
63804: LD_INT 1
63806: PLUS
63807: ARRAY
63808: ST_TO_ADDR
63809: GO 64064
63811: LD_INT 36
63813: DOUBLE
63814: EQUAL
63815: IFTRUE 63819
63817: GO 63875
63819: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63820: LD_ADDR_VAR 0 9
63824: PUSH
63825: LD_VAR 0 47
63829: PUSH
63830: LD_VAR 0 48
63834: PUSH
63835: LD_VAR 0 49
63839: PUSH
63840: LD_VAR 0 50
63844: PUSH
63845: LD_VAR 0 51
63849: PUSH
63850: LD_VAR 0 52
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: PUSH
63863: LD_VAR 0 4
63867: PUSH
63868: LD_INT 1
63870: PLUS
63871: ARRAY
63872: ST_TO_ADDR
63873: GO 64064
63875: LD_INT 4
63877: DOUBLE
63878: EQUAL
63879: IFTRUE 63901
63881: LD_INT 5
63883: DOUBLE
63884: EQUAL
63885: IFTRUE 63901
63887: LD_INT 34
63889: DOUBLE
63890: EQUAL
63891: IFTRUE 63901
63893: LD_INT 37
63895: DOUBLE
63896: EQUAL
63897: IFTRUE 63901
63899: GO 63957
63901: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63902: LD_ADDR_VAR 0 9
63906: PUSH
63907: LD_VAR 0 53
63911: PUSH
63912: LD_VAR 0 54
63916: PUSH
63917: LD_VAR 0 55
63921: PUSH
63922: LD_VAR 0 56
63926: PUSH
63927: LD_VAR 0 57
63931: PUSH
63932: LD_VAR 0 58
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: PUSH
63945: LD_VAR 0 4
63949: PUSH
63950: LD_INT 1
63952: PLUS
63953: ARRAY
63954: ST_TO_ADDR
63955: GO 64064
63957: LD_INT 31
63959: DOUBLE
63960: EQUAL
63961: IFTRUE 64007
63963: LD_INT 32
63965: DOUBLE
63966: EQUAL
63967: IFTRUE 64007
63969: LD_INT 33
63971: DOUBLE
63972: EQUAL
63973: IFTRUE 64007
63975: LD_INT 27
63977: DOUBLE
63978: EQUAL
63979: IFTRUE 64007
63981: LD_INT 26
63983: DOUBLE
63984: EQUAL
63985: IFTRUE 64007
63987: LD_INT 28
63989: DOUBLE
63990: EQUAL
63991: IFTRUE 64007
63993: LD_INT 29
63995: DOUBLE
63996: EQUAL
63997: IFTRUE 64007
63999: LD_INT 30
64001: DOUBLE
64002: EQUAL
64003: IFTRUE 64007
64005: GO 64063
64007: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64008: LD_ADDR_VAR 0 9
64012: PUSH
64013: LD_VAR 0 59
64017: PUSH
64018: LD_VAR 0 60
64022: PUSH
64023: LD_VAR 0 61
64027: PUSH
64028: LD_VAR 0 62
64032: PUSH
64033: LD_VAR 0 63
64037: PUSH
64038: LD_VAR 0 64
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: PUSH
64051: LD_VAR 0 4
64055: PUSH
64056: LD_INT 1
64058: PLUS
64059: ARRAY
64060: ST_TO_ADDR
64061: GO 64064
64063: POP
// temp_list2 = [ ] ;
64064: LD_ADDR_VAR 0 10
64068: PUSH
64069: EMPTY
64070: ST_TO_ADDR
// for i in temp_list do
64071: LD_ADDR_VAR 0 8
64075: PUSH
64076: LD_VAR 0 9
64080: PUSH
64081: FOR_IN
64082: IFFALSE 64134
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64084: LD_ADDR_VAR 0 10
64088: PUSH
64089: LD_VAR 0 10
64093: PUSH
64094: LD_VAR 0 8
64098: PUSH
64099: LD_INT 1
64101: ARRAY
64102: PUSH
64103: LD_VAR 0 2
64107: PLUS
64108: PUSH
64109: LD_VAR 0 8
64113: PUSH
64114: LD_INT 2
64116: ARRAY
64117: PUSH
64118: LD_VAR 0 3
64122: PLUS
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: EMPTY
64129: LIST
64130: ADD
64131: ST_TO_ADDR
64132: GO 64081
64134: POP
64135: POP
// result = temp_list2 ;
64136: LD_ADDR_VAR 0 7
64140: PUSH
64141: LD_VAR 0 10
64145: ST_TO_ADDR
// end ;
64146: LD_VAR 0 7
64150: RET
// export function EnemyInRange ( unit , dist ) ; begin
64151: LD_INT 0
64153: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64154: LD_ADDR_VAR 0 3
64158: PUSH
64159: LD_VAR 0 1
64163: PPUSH
64164: CALL_OW 255
64168: PPUSH
64169: LD_VAR 0 1
64173: PPUSH
64174: CALL_OW 250
64178: PPUSH
64179: LD_VAR 0 1
64183: PPUSH
64184: CALL_OW 251
64188: PPUSH
64189: LD_VAR 0 2
64193: PPUSH
64194: CALL 37553 0 4
64198: PUSH
64199: LD_INT 4
64201: ARRAY
64202: ST_TO_ADDR
// end ;
64203: LD_VAR 0 3
64207: RET
// export function PlayerSeeMe ( unit ) ; begin
64208: LD_INT 0
64210: PPUSH
// result := See ( your_side , unit ) ;
64211: LD_ADDR_VAR 0 2
64215: PUSH
64216: LD_OWVAR 2
64220: PPUSH
64221: LD_VAR 0 1
64225: PPUSH
64226: CALL_OW 292
64230: ST_TO_ADDR
// end ;
64231: LD_VAR 0 2
64235: RET
// export function ReverseDir ( unit ) ; begin
64236: LD_INT 0
64238: PPUSH
// if not unit then
64239: LD_VAR 0 1
64243: NOT
64244: IFFALSE 64248
// exit ;
64246: GO 64271
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64248: LD_ADDR_VAR 0 2
64252: PUSH
64253: LD_VAR 0 1
64257: PPUSH
64258: CALL_OW 254
64262: PUSH
64263: LD_INT 3
64265: PLUS
64266: PUSH
64267: LD_INT 6
64269: MOD
64270: ST_TO_ADDR
// end ;
64271: LD_VAR 0 2
64275: RET
// export function ReverseArray ( array ) ; var i ; begin
64276: LD_INT 0
64278: PPUSH
64279: PPUSH
// if not array then
64280: LD_VAR 0 1
64284: NOT
64285: IFFALSE 64289
// exit ;
64287: GO 64344
// result := [ ] ;
64289: LD_ADDR_VAR 0 2
64293: PUSH
64294: EMPTY
64295: ST_TO_ADDR
// for i := array downto 1 do
64296: LD_ADDR_VAR 0 3
64300: PUSH
64301: DOUBLE
64302: LD_VAR 0 1
64306: INC
64307: ST_TO_ADDR
64308: LD_INT 1
64310: PUSH
64311: FOR_DOWNTO
64312: IFFALSE 64342
// result := Join ( result , array [ i ] ) ;
64314: LD_ADDR_VAR 0 2
64318: PUSH
64319: LD_VAR 0 2
64323: PPUSH
64324: LD_VAR 0 1
64328: PUSH
64329: LD_VAR 0 3
64333: ARRAY
64334: PPUSH
64335: CALL 68988 0 2
64339: ST_TO_ADDR
64340: GO 64311
64342: POP
64343: POP
// end ;
64344: LD_VAR 0 2
64348: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64349: LD_INT 0
64351: PPUSH
64352: PPUSH
64353: PPUSH
64354: PPUSH
64355: PPUSH
64356: PPUSH
// if not unit or not hexes then
64357: LD_VAR 0 1
64361: NOT
64362: PUSH
64363: LD_VAR 0 2
64367: NOT
64368: OR
64369: IFFALSE 64373
// exit ;
64371: GO 64496
// dist := 9999 ;
64373: LD_ADDR_VAR 0 5
64377: PUSH
64378: LD_INT 9999
64380: ST_TO_ADDR
// for i = 1 to hexes do
64381: LD_ADDR_VAR 0 4
64385: PUSH
64386: DOUBLE
64387: LD_INT 1
64389: DEC
64390: ST_TO_ADDR
64391: LD_VAR 0 2
64395: PUSH
64396: FOR_TO
64397: IFFALSE 64484
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64399: LD_ADDR_VAR 0 6
64403: PUSH
64404: LD_VAR 0 1
64408: PPUSH
64409: LD_VAR 0 2
64413: PUSH
64414: LD_VAR 0 4
64418: ARRAY
64419: PUSH
64420: LD_INT 1
64422: ARRAY
64423: PPUSH
64424: LD_VAR 0 2
64428: PUSH
64429: LD_VAR 0 4
64433: ARRAY
64434: PUSH
64435: LD_INT 2
64437: ARRAY
64438: PPUSH
64439: CALL_OW 297
64443: ST_TO_ADDR
// if tdist < dist then
64444: LD_VAR 0 6
64448: PUSH
64449: LD_VAR 0 5
64453: LESS
64454: IFFALSE 64482
// begin hex := hexes [ i ] ;
64456: LD_ADDR_VAR 0 8
64460: PUSH
64461: LD_VAR 0 2
64465: PUSH
64466: LD_VAR 0 4
64470: ARRAY
64471: ST_TO_ADDR
// dist := tdist ;
64472: LD_ADDR_VAR 0 5
64476: PUSH
64477: LD_VAR 0 6
64481: ST_TO_ADDR
// end ; end ;
64482: GO 64396
64484: POP
64485: POP
// result := hex ;
64486: LD_ADDR_VAR 0 3
64490: PUSH
64491: LD_VAR 0 8
64495: ST_TO_ADDR
// end ;
64496: LD_VAR 0 3
64500: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64501: LD_INT 0
64503: PPUSH
64504: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64505: LD_VAR 0 1
64509: NOT
64510: PUSH
64511: LD_VAR 0 1
64515: PUSH
64516: LD_INT 21
64518: PUSH
64519: LD_INT 2
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 23
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PPUSH
64540: CALL_OW 69
64544: IN
64545: NOT
64546: OR
64547: IFFALSE 64551
// exit ;
64549: GO 64598
// for i = 1 to 3 do
64551: LD_ADDR_VAR 0 3
64555: PUSH
64556: DOUBLE
64557: LD_INT 1
64559: DEC
64560: ST_TO_ADDR
64561: LD_INT 3
64563: PUSH
64564: FOR_TO
64565: IFFALSE 64596
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64567: LD_VAR 0 1
64571: PPUSH
64572: CALL_OW 250
64576: PPUSH
64577: LD_VAR 0 1
64581: PPUSH
64582: CALL_OW 251
64586: PPUSH
64587: LD_INT 1
64589: PPUSH
64590: CALL_OW 453
64594: GO 64564
64596: POP
64597: POP
// end ;
64598: LD_VAR 0 2
64602: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64603: LD_INT 0
64605: PPUSH
64606: PPUSH
64607: PPUSH
64608: PPUSH
64609: PPUSH
64610: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64611: LD_VAR 0 1
64615: NOT
64616: PUSH
64617: LD_VAR 0 2
64621: NOT
64622: OR
64623: PUSH
64624: LD_VAR 0 1
64628: PPUSH
64629: CALL_OW 314
64633: OR
64634: IFFALSE 64638
// exit ;
64636: GO 65105
// if GetLives ( i ) < 250 then
64638: LD_VAR 0 4
64642: PPUSH
64643: CALL_OW 256
64647: PUSH
64648: LD_INT 250
64650: LESS
64651: IFFALSE 64664
// begin ComAutodestruct ( i ) ;
64653: LD_VAR 0 4
64657: PPUSH
64658: CALL 64501 0 1
// exit ;
64662: GO 65105
// end ; x := GetX ( enemy_unit ) ;
64664: LD_ADDR_VAR 0 7
64668: PUSH
64669: LD_VAR 0 2
64673: PPUSH
64674: CALL_OW 250
64678: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64679: LD_ADDR_VAR 0 8
64683: PUSH
64684: LD_VAR 0 2
64688: PPUSH
64689: CALL_OW 251
64693: ST_TO_ADDR
// if not x or not y then
64694: LD_VAR 0 7
64698: NOT
64699: PUSH
64700: LD_VAR 0 8
64704: NOT
64705: OR
64706: IFFALSE 64710
// exit ;
64708: GO 65105
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64710: LD_ADDR_VAR 0 6
64714: PUSH
64715: LD_VAR 0 7
64719: PPUSH
64720: LD_INT 0
64722: PPUSH
64723: LD_INT 4
64725: PPUSH
64726: CALL_OW 272
64730: PUSH
64731: LD_VAR 0 8
64735: PPUSH
64736: LD_INT 0
64738: PPUSH
64739: LD_INT 4
64741: PPUSH
64742: CALL_OW 273
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_VAR 0 7
64755: PPUSH
64756: LD_INT 1
64758: PPUSH
64759: LD_INT 4
64761: PPUSH
64762: CALL_OW 272
64766: PUSH
64767: LD_VAR 0 8
64771: PPUSH
64772: LD_INT 1
64774: PPUSH
64775: LD_INT 4
64777: PPUSH
64778: CALL_OW 273
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_VAR 0 7
64791: PPUSH
64792: LD_INT 2
64794: PPUSH
64795: LD_INT 4
64797: PPUSH
64798: CALL_OW 272
64802: PUSH
64803: LD_VAR 0 8
64807: PPUSH
64808: LD_INT 2
64810: PPUSH
64811: LD_INT 4
64813: PPUSH
64814: CALL_OW 273
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_VAR 0 7
64827: PPUSH
64828: LD_INT 3
64830: PPUSH
64831: LD_INT 4
64833: PPUSH
64834: CALL_OW 272
64838: PUSH
64839: LD_VAR 0 8
64843: PPUSH
64844: LD_INT 3
64846: PPUSH
64847: LD_INT 4
64849: PPUSH
64850: CALL_OW 273
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_VAR 0 7
64863: PPUSH
64864: LD_INT 4
64866: PPUSH
64867: LD_INT 4
64869: PPUSH
64870: CALL_OW 272
64874: PUSH
64875: LD_VAR 0 8
64879: PPUSH
64880: LD_INT 4
64882: PPUSH
64883: LD_INT 4
64885: PPUSH
64886: CALL_OW 273
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_VAR 0 7
64899: PPUSH
64900: LD_INT 5
64902: PPUSH
64903: LD_INT 4
64905: PPUSH
64906: CALL_OW 272
64910: PUSH
64911: LD_VAR 0 8
64915: PPUSH
64916: LD_INT 5
64918: PPUSH
64919: LD_INT 4
64921: PPUSH
64922: CALL_OW 273
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: ST_TO_ADDR
// for i = tmp downto 1 do
64939: LD_ADDR_VAR 0 4
64943: PUSH
64944: DOUBLE
64945: LD_VAR 0 6
64949: INC
64950: ST_TO_ADDR
64951: LD_INT 1
64953: PUSH
64954: FOR_DOWNTO
64955: IFFALSE 65056
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64957: LD_VAR 0 6
64961: PUSH
64962: LD_VAR 0 4
64966: ARRAY
64967: PUSH
64968: LD_INT 1
64970: ARRAY
64971: PPUSH
64972: LD_VAR 0 6
64976: PUSH
64977: LD_VAR 0 4
64981: ARRAY
64982: PUSH
64983: LD_INT 2
64985: ARRAY
64986: PPUSH
64987: CALL_OW 488
64991: NOT
64992: PUSH
64993: LD_VAR 0 6
64997: PUSH
64998: LD_VAR 0 4
65002: ARRAY
65003: PUSH
65004: LD_INT 1
65006: ARRAY
65007: PPUSH
65008: LD_VAR 0 6
65012: PUSH
65013: LD_VAR 0 4
65017: ARRAY
65018: PUSH
65019: LD_INT 2
65021: ARRAY
65022: PPUSH
65023: CALL_OW 428
65027: PUSH
65028: LD_INT 0
65030: NONEQUAL
65031: OR
65032: IFFALSE 65054
// tmp := Delete ( tmp , i ) ;
65034: LD_ADDR_VAR 0 6
65038: PUSH
65039: LD_VAR 0 6
65043: PPUSH
65044: LD_VAR 0 4
65048: PPUSH
65049: CALL_OW 3
65053: ST_TO_ADDR
65054: GO 64954
65056: POP
65057: POP
// j := GetClosestHex ( unit , tmp ) ;
65058: LD_ADDR_VAR 0 5
65062: PUSH
65063: LD_VAR 0 1
65067: PPUSH
65068: LD_VAR 0 6
65072: PPUSH
65073: CALL 64349 0 2
65077: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65078: LD_VAR 0 1
65082: PPUSH
65083: LD_VAR 0 5
65087: PUSH
65088: LD_INT 1
65090: ARRAY
65091: PPUSH
65092: LD_VAR 0 5
65096: PUSH
65097: LD_INT 2
65099: ARRAY
65100: PPUSH
65101: CALL_OW 111
// end ;
65105: LD_VAR 0 3
65109: RET
// export function PrepareApemanSoldier ( ) ; begin
65110: LD_INT 0
65112: PPUSH
// uc_nation := 0 ;
65113: LD_ADDR_OWVAR 21
65117: PUSH
65118: LD_INT 0
65120: ST_TO_ADDR
// hc_sex := sex_male ;
65121: LD_ADDR_OWVAR 27
65125: PUSH
65126: LD_INT 1
65128: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65129: LD_ADDR_OWVAR 28
65133: PUSH
65134: LD_INT 15
65136: ST_TO_ADDR
// hc_gallery :=  ;
65137: LD_ADDR_OWVAR 33
65141: PUSH
65142: LD_STRING 
65144: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65145: LD_ADDR_OWVAR 31
65149: PUSH
65150: LD_INT 0
65152: PPUSH
65153: LD_INT 3
65155: PPUSH
65156: CALL_OW 12
65160: PUSH
65161: LD_INT 0
65163: PPUSH
65164: LD_INT 3
65166: PPUSH
65167: CALL_OW 12
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: ST_TO_ADDR
// end ;
65184: LD_VAR 0 1
65188: RET
// export function PrepareApemanEngineer ( ) ; begin
65189: LD_INT 0
65191: PPUSH
// uc_nation := 0 ;
65192: LD_ADDR_OWVAR 21
65196: PUSH
65197: LD_INT 0
65199: ST_TO_ADDR
// hc_sex := sex_male ;
65200: LD_ADDR_OWVAR 27
65204: PUSH
65205: LD_INT 1
65207: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65208: LD_ADDR_OWVAR 28
65212: PUSH
65213: LD_INT 16
65215: ST_TO_ADDR
// hc_gallery :=  ;
65216: LD_ADDR_OWVAR 33
65220: PUSH
65221: LD_STRING 
65223: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65224: LD_ADDR_OWVAR 31
65228: PUSH
65229: LD_INT 0
65231: PPUSH
65232: LD_INT 3
65234: PPUSH
65235: CALL_OW 12
65239: PUSH
65240: LD_INT 0
65242: PPUSH
65243: LD_INT 3
65245: PPUSH
65246: CALL_OW 12
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: ST_TO_ADDR
// end ;
65263: LD_VAR 0 1
65267: RET
// export function PrepareApeman ( agressivity ) ; begin
65268: LD_INT 0
65270: PPUSH
// uc_side := 0 ;
65271: LD_ADDR_OWVAR 20
65275: PUSH
65276: LD_INT 0
65278: ST_TO_ADDR
// uc_nation := 0 ;
65279: LD_ADDR_OWVAR 21
65283: PUSH
65284: LD_INT 0
65286: ST_TO_ADDR
// hc_sex := sex_male ;
65287: LD_ADDR_OWVAR 27
65291: PUSH
65292: LD_INT 1
65294: ST_TO_ADDR
// hc_class := class_apeman ;
65295: LD_ADDR_OWVAR 28
65299: PUSH
65300: LD_INT 12
65302: ST_TO_ADDR
// hc_gallery :=  ;
65303: LD_ADDR_OWVAR 33
65307: PUSH
65308: LD_STRING 
65310: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65311: LD_ADDR_OWVAR 35
65315: PUSH
65316: LD_VAR 0 1
65320: NEG
65321: PPUSH
65322: LD_VAR 0 1
65326: PPUSH
65327: CALL_OW 12
65331: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65332: LD_ADDR_OWVAR 31
65336: PUSH
65337: LD_INT 0
65339: PPUSH
65340: LD_INT 3
65342: PPUSH
65343: CALL_OW 12
65347: PUSH
65348: LD_INT 0
65350: PPUSH
65351: LD_INT 3
65353: PPUSH
65354: CALL_OW 12
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// end ;
65371: LD_VAR 0 2
65375: RET
// export function PrepareTiger ( agressivity ) ; begin
65376: LD_INT 0
65378: PPUSH
// uc_side := 0 ;
65379: LD_ADDR_OWVAR 20
65383: PUSH
65384: LD_INT 0
65386: ST_TO_ADDR
// uc_nation := 0 ;
65387: LD_ADDR_OWVAR 21
65391: PUSH
65392: LD_INT 0
65394: ST_TO_ADDR
// hc_class := class_tiger ;
65395: LD_ADDR_OWVAR 28
65399: PUSH
65400: LD_INT 14
65402: ST_TO_ADDR
// hc_gallery :=  ;
65403: LD_ADDR_OWVAR 33
65407: PUSH
65408: LD_STRING 
65410: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65411: LD_ADDR_OWVAR 35
65415: PUSH
65416: LD_VAR 0 1
65420: NEG
65421: PPUSH
65422: LD_VAR 0 1
65426: PPUSH
65427: CALL_OW 12
65431: ST_TO_ADDR
// end ;
65432: LD_VAR 0 2
65436: RET
// export function PrepareEnchidna ( ) ; begin
65437: LD_INT 0
65439: PPUSH
// uc_side := 0 ;
65440: LD_ADDR_OWVAR 20
65444: PUSH
65445: LD_INT 0
65447: ST_TO_ADDR
// uc_nation := 0 ;
65448: LD_ADDR_OWVAR 21
65452: PUSH
65453: LD_INT 0
65455: ST_TO_ADDR
// hc_class := class_baggie ;
65456: LD_ADDR_OWVAR 28
65460: PUSH
65461: LD_INT 13
65463: ST_TO_ADDR
// hc_gallery :=  ;
65464: LD_ADDR_OWVAR 33
65468: PUSH
65469: LD_STRING 
65471: ST_TO_ADDR
// end ;
65472: LD_VAR 0 1
65476: RET
// export function PrepareFrog ( ) ; begin
65477: LD_INT 0
65479: PPUSH
// uc_side := 0 ;
65480: LD_ADDR_OWVAR 20
65484: PUSH
65485: LD_INT 0
65487: ST_TO_ADDR
// uc_nation := 0 ;
65488: LD_ADDR_OWVAR 21
65492: PUSH
65493: LD_INT 0
65495: ST_TO_ADDR
// hc_class := class_frog ;
65496: LD_ADDR_OWVAR 28
65500: PUSH
65501: LD_INT 19
65503: ST_TO_ADDR
// hc_gallery :=  ;
65504: LD_ADDR_OWVAR 33
65508: PUSH
65509: LD_STRING 
65511: ST_TO_ADDR
// end ;
65512: LD_VAR 0 1
65516: RET
// export function PrepareFish ( ) ; begin
65517: LD_INT 0
65519: PPUSH
// uc_side := 0 ;
65520: LD_ADDR_OWVAR 20
65524: PUSH
65525: LD_INT 0
65527: ST_TO_ADDR
// uc_nation := 0 ;
65528: LD_ADDR_OWVAR 21
65532: PUSH
65533: LD_INT 0
65535: ST_TO_ADDR
// hc_class := class_fish ;
65536: LD_ADDR_OWVAR 28
65540: PUSH
65541: LD_INT 20
65543: ST_TO_ADDR
// hc_gallery :=  ;
65544: LD_ADDR_OWVAR 33
65548: PUSH
65549: LD_STRING 
65551: ST_TO_ADDR
// end ;
65552: LD_VAR 0 1
65556: RET
// export function PrepareBird ( ) ; begin
65557: LD_INT 0
65559: PPUSH
// uc_side := 0 ;
65560: LD_ADDR_OWVAR 20
65564: PUSH
65565: LD_INT 0
65567: ST_TO_ADDR
// uc_nation := 0 ;
65568: LD_ADDR_OWVAR 21
65572: PUSH
65573: LD_INT 0
65575: ST_TO_ADDR
// hc_class := class_phororhacos ;
65576: LD_ADDR_OWVAR 28
65580: PUSH
65581: LD_INT 18
65583: ST_TO_ADDR
// hc_gallery :=  ;
65584: LD_ADDR_OWVAR 33
65588: PUSH
65589: LD_STRING 
65591: ST_TO_ADDR
// end ;
65592: LD_VAR 0 1
65596: RET
// export function PrepareHorse ( ) ; begin
65597: LD_INT 0
65599: PPUSH
// uc_side := 0 ;
65600: LD_ADDR_OWVAR 20
65604: PUSH
65605: LD_INT 0
65607: ST_TO_ADDR
// uc_nation := 0 ;
65608: LD_ADDR_OWVAR 21
65612: PUSH
65613: LD_INT 0
65615: ST_TO_ADDR
// hc_class := class_horse ;
65616: LD_ADDR_OWVAR 28
65620: PUSH
65621: LD_INT 21
65623: ST_TO_ADDR
// hc_gallery :=  ;
65624: LD_ADDR_OWVAR 33
65628: PUSH
65629: LD_STRING 
65631: ST_TO_ADDR
// end ;
65632: LD_VAR 0 1
65636: RET
// export function PrepareMastodont ( ) ; begin
65637: LD_INT 0
65639: PPUSH
// uc_side := 0 ;
65640: LD_ADDR_OWVAR 20
65644: PUSH
65645: LD_INT 0
65647: ST_TO_ADDR
// uc_nation := 0 ;
65648: LD_ADDR_OWVAR 21
65652: PUSH
65653: LD_INT 0
65655: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65656: LD_ADDR_OWVAR 37
65660: PUSH
65661: LD_INT 31
65663: ST_TO_ADDR
// vc_control := control_rider ;
65664: LD_ADDR_OWVAR 38
65668: PUSH
65669: LD_INT 4
65671: ST_TO_ADDR
// end ;
65672: LD_VAR 0 1
65676: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65677: LD_INT 0
65679: PPUSH
65680: PPUSH
65681: PPUSH
// uc_side = 0 ;
65682: LD_ADDR_OWVAR 20
65686: PUSH
65687: LD_INT 0
65689: ST_TO_ADDR
// uc_nation = 0 ;
65690: LD_ADDR_OWVAR 21
65694: PUSH
65695: LD_INT 0
65697: ST_TO_ADDR
// InitHc_All ( ) ;
65698: CALL_OW 584
// InitVc ;
65702: CALL_OW 20
// if mastodonts then
65706: LD_VAR 0 6
65710: IFFALSE 65777
// for i = 1 to mastodonts do
65712: LD_ADDR_VAR 0 11
65716: PUSH
65717: DOUBLE
65718: LD_INT 1
65720: DEC
65721: ST_TO_ADDR
65722: LD_VAR 0 6
65726: PUSH
65727: FOR_TO
65728: IFFALSE 65775
// begin vc_chassis := 31 ;
65730: LD_ADDR_OWVAR 37
65734: PUSH
65735: LD_INT 31
65737: ST_TO_ADDR
// vc_control := control_rider ;
65738: LD_ADDR_OWVAR 38
65742: PUSH
65743: LD_INT 4
65745: ST_TO_ADDR
// animal := CreateVehicle ;
65746: LD_ADDR_VAR 0 12
65750: PUSH
65751: CALL_OW 45
65755: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65756: LD_VAR 0 12
65760: PPUSH
65761: LD_VAR 0 8
65765: PPUSH
65766: LD_INT 0
65768: PPUSH
65769: CALL 67905 0 3
// end ;
65773: GO 65727
65775: POP
65776: POP
// if horses then
65777: LD_VAR 0 5
65781: IFFALSE 65848
// for i = 1 to horses do
65783: LD_ADDR_VAR 0 11
65787: PUSH
65788: DOUBLE
65789: LD_INT 1
65791: DEC
65792: ST_TO_ADDR
65793: LD_VAR 0 5
65797: PUSH
65798: FOR_TO
65799: IFFALSE 65846
// begin hc_class := 21 ;
65801: LD_ADDR_OWVAR 28
65805: PUSH
65806: LD_INT 21
65808: ST_TO_ADDR
// hc_gallery :=  ;
65809: LD_ADDR_OWVAR 33
65813: PUSH
65814: LD_STRING 
65816: ST_TO_ADDR
// animal := CreateHuman ;
65817: LD_ADDR_VAR 0 12
65821: PUSH
65822: CALL_OW 44
65826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65827: LD_VAR 0 12
65831: PPUSH
65832: LD_VAR 0 8
65836: PPUSH
65837: LD_INT 0
65839: PPUSH
65840: CALL 67905 0 3
// end ;
65844: GO 65798
65846: POP
65847: POP
// if birds then
65848: LD_VAR 0 1
65852: IFFALSE 65919
// for i = 1 to birds do
65854: LD_ADDR_VAR 0 11
65858: PUSH
65859: DOUBLE
65860: LD_INT 1
65862: DEC
65863: ST_TO_ADDR
65864: LD_VAR 0 1
65868: PUSH
65869: FOR_TO
65870: IFFALSE 65917
// begin hc_class = 18 ;
65872: LD_ADDR_OWVAR 28
65876: PUSH
65877: LD_INT 18
65879: ST_TO_ADDR
// hc_gallery =  ;
65880: LD_ADDR_OWVAR 33
65884: PUSH
65885: LD_STRING 
65887: ST_TO_ADDR
// animal := CreateHuman ;
65888: LD_ADDR_VAR 0 12
65892: PUSH
65893: CALL_OW 44
65897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65898: LD_VAR 0 12
65902: PPUSH
65903: LD_VAR 0 8
65907: PPUSH
65908: LD_INT 0
65910: PPUSH
65911: CALL 67905 0 3
// end ;
65915: GO 65869
65917: POP
65918: POP
// if tigers then
65919: LD_VAR 0 2
65923: IFFALSE 66007
// for i = 1 to tigers do
65925: LD_ADDR_VAR 0 11
65929: PUSH
65930: DOUBLE
65931: LD_INT 1
65933: DEC
65934: ST_TO_ADDR
65935: LD_VAR 0 2
65939: PUSH
65940: FOR_TO
65941: IFFALSE 66005
// begin hc_class = class_tiger ;
65943: LD_ADDR_OWVAR 28
65947: PUSH
65948: LD_INT 14
65950: ST_TO_ADDR
// hc_gallery =  ;
65951: LD_ADDR_OWVAR 33
65955: PUSH
65956: LD_STRING 
65958: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65959: LD_ADDR_OWVAR 35
65963: PUSH
65964: LD_INT 7
65966: NEG
65967: PPUSH
65968: LD_INT 7
65970: PPUSH
65971: CALL_OW 12
65975: ST_TO_ADDR
// animal := CreateHuman ;
65976: LD_ADDR_VAR 0 12
65980: PUSH
65981: CALL_OW 44
65985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65986: LD_VAR 0 12
65990: PPUSH
65991: LD_VAR 0 8
65995: PPUSH
65996: LD_INT 0
65998: PPUSH
65999: CALL 67905 0 3
// end ;
66003: GO 65940
66005: POP
66006: POP
// if apemans then
66007: LD_VAR 0 3
66011: IFFALSE 66134
// for i = 1 to apemans do
66013: LD_ADDR_VAR 0 11
66017: PUSH
66018: DOUBLE
66019: LD_INT 1
66021: DEC
66022: ST_TO_ADDR
66023: LD_VAR 0 3
66027: PUSH
66028: FOR_TO
66029: IFFALSE 66132
// begin hc_class = class_apeman ;
66031: LD_ADDR_OWVAR 28
66035: PUSH
66036: LD_INT 12
66038: ST_TO_ADDR
// hc_gallery =  ;
66039: LD_ADDR_OWVAR 33
66043: PUSH
66044: LD_STRING 
66046: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66047: LD_ADDR_OWVAR 35
66051: PUSH
66052: LD_INT 2
66054: NEG
66055: PPUSH
66056: LD_INT 2
66058: PPUSH
66059: CALL_OW 12
66063: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66064: LD_ADDR_OWVAR 31
66068: PUSH
66069: LD_INT 1
66071: PPUSH
66072: LD_INT 3
66074: PPUSH
66075: CALL_OW 12
66079: PUSH
66080: LD_INT 1
66082: PPUSH
66083: LD_INT 3
66085: PPUSH
66086: CALL_OW 12
66090: PUSH
66091: LD_INT 0
66093: PUSH
66094: LD_INT 0
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: ST_TO_ADDR
// animal := CreateHuman ;
66103: LD_ADDR_VAR 0 12
66107: PUSH
66108: CALL_OW 44
66112: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66113: LD_VAR 0 12
66117: PPUSH
66118: LD_VAR 0 8
66122: PPUSH
66123: LD_INT 0
66125: PPUSH
66126: CALL 67905 0 3
// end ;
66130: GO 66028
66132: POP
66133: POP
// if enchidnas then
66134: LD_VAR 0 4
66138: IFFALSE 66205
// for i = 1 to enchidnas do
66140: LD_ADDR_VAR 0 11
66144: PUSH
66145: DOUBLE
66146: LD_INT 1
66148: DEC
66149: ST_TO_ADDR
66150: LD_VAR 0 4
66154: PUSH
66155: FOR_TO
66156: IFFALSE 66203
// begin hc_class = 13 ;
66158: LD_ADDR_OWVAR 28
66162: PUSH
66163: LD_INT 13
66165: ST_TO_ADDR
// hc_gallery =  ;
66166: LD_ADDR_OWVAR 33
66170: PUSH
66171: LD_STRING 
66173: ST_TO_ADDR
// animal := CreateHuman ;
66174: LD_ADDR_VAR 0 12
66178: PUSH
66179: CALL_OW 44
66183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66184: LD_VAR 0 12
66188: PPUSH
66189: LD_VAR 0 8
66193: PPUSH
66194: LD_INT 0
66196: PPUSH
66197: CALL 67905 0 3
// end ;
66201: GO 66155
66203: POP
66204: POP
// if fishes then
66205: LD_VAR 0 7
66209: IFFALSE 66276
// for i = 1 to fishes do
66211: LD_ADDR_VAR 0 11
66215: PUSH
66216: DOUBLE
66217: LD_INT 1
66219: DEC
66220: ST_TO_ADDR
66221: LD_VAR 0 7
66225: PUSH
66226: FOR_TO
66227: IFFALSE 66274
// begin hc_class = 20 ;
66229: LD_ADDR_OWVAR 28
66233: PUSH
66234: LD_INT 20
66236: ST_TO_ADDR
// hc_gallery =  ;
66237: LD_ADDR_OWVAR 33
66241: PUSH
66242: LD_STRING 
66244: ST_TO_ADDR
// animal := CreateHuman ;
66245: LD_ADDR_VAR 0 12
66249: PUSH
66250: CALL_OW 44
66254: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66255: LD_VAR 0 12
66259: PPUSH
66260: LD_VAR 0 9
66264: PPUSH
66265: LD_INT 0
66267: PPUSH
66268: CALL 67905 0 3
// end ;
66272: GO 66226
66274: POP
66275: POP
// end ;
66276: LD_VAR 0 10
66280: RET
// export function WantHeal ( sci , unit ) ; begin
66281: LD_INT 0
66283: PPUSH
// if GetTaskList ( sci ) > 0 then
66284: LD_VAR 0 1
66288: PPUSH
66289: CALL_OW 437
66293: PUSH
66294: LD_INT 0
66296: GREATER
66297: IFFALSE 66367
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66299: LD_VAR 0 1
66303: PPUSH
66304: CALL_OW 437
66308: PUSH
66309: LD_INT 1
66311: ARRAY
66312: PUSH
66313: LD_INT 1
66315: ARRAY
66316: PUSH
66317: LD_STRING l
66319: EQUAL
66320: PUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: CALL_OW 437
66330: PUSH
66331: LD_INT 1
66333: ARRAY
66334: PUSH
66335: LD_INT 4
66337: ARRAY
66338: PUSH
66339: LD_VAR 0 2
66343: EQUAL
66344: AND
66345: IFFALSE 66357
// result := true else
66347: LD_ADDR_VAR 0 3
66351: PUSH
66352: LD_INT 1
66354: ST_TO_ADDR
66355: GO 66365
// result := false ;
66357: LD_ADDR_VAR 0 3
66361: PUSH
66362: LD_INT 0
66364: ST_TO_ADDR
// end else
66365: GO 66375
// result := false ;
66367: LD_ADDR_VAR 0 3
66371: PUSH
66372: LD_INT 0
66374: ST_TO_ADDR
// end ;
66375: LD_VAR 0 3
66379: RET
// export function HealTarget ( sci ) ; begin
66380: LD_INT 0
66382: PPUSH
// if not sci then
66383: LD_VAR 0 1
66387: NOT
66388: IFFALSE 66392
// exit ;
66390: GO 66457
// result := 0 ;
66392: LD_ADDR_VAR 0 2
66396: PUSH
66397: LD_INT 0
66399: ST_TO_ADDR
// if GetTaskList ( sci ) then
66400: LD_VAR 0 1
66404: PPUSH
66405: CALL_OW 437
66409: IFFALSE 66457
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66411: LD_VAR 0 1
66415: PPUSH
66416: CALL_OW 437
66420: PUSH
66421: LD_INT 1
66423: ARRAY
66424: PUSH
66425: LD_INT 1
66427: ARRAY
66428: PUSH
66429: LD_STRING l
66431: EQUAL
66432: IFFALSE 66457
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66434: LD_ADDR_VAR 0 2
66438: PUSH
66439: LD_VAR 0 1
66443: PPUSH
66444: CALL_OW 437
66448: PUSH
66449: LD_INT 1
66451: ARRAY
66452: PUSH
66453: LD_INT 4
66455: ARRAY
66456: ST_TO_ADDR
// end ;
66457: LD_VAR 0 2
66461: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66462: LD_INT 0
66464: PPUSH
66465: PPUSH
66466: PPUSH
66467: PPUSH
// if not base_units then
66468: LD_VAR 0 1
66472: NOT
66473: IFFALSE 66477
// exit ;
66475: GO 66564
// result := false ;
66477: LD_ADDR_VAR 0 2
66481: PUSH
66482: LD_INT 0
66484: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66485: LD_ADDR_VAR 0 5
66489: PUSH
66490: LD_VAR 0 1
66494: PPUSH
66495: LD_INT 21
66497: PUSH
66498: LD_INT 3
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PPUSH
66505: CALL_OW 72
66509: ST_TO_ADDR
// if not tmp then
66510: LD_VAR 0 5
66514: NOT
66515: IFFALSE 66519
// exit ;
66517: GO 66564
// for i in tmp do
66519: LD_ADDR_VAR 0 3
66523: PUSH
66524: LD_VAR 0 5
66528: PUSH
66529: FOR_IN
66530: IFFALSE 66562
// begin result := EnemyInRange ( i , 22 ) ;
66532: LD_ADDR_VAR 0 2
66536: PUSH
66537: LD_VAR 0 3
66541: PPUSH
66542: LD_INT 22
66544: PPUSH
66545: CALL 64151 0 2
66549: ST_TO_ADDR
// if result then
66550: LD_VAR 0 2
66554: IFFALSE 66560
// exit ;
66556: POP
66557: POP
66558: GO 66564
// end ;
66560: GO 66529
66562: POP
66563: POP
// end ;
66564: LD_VAR 0 2
66568: RET
// export function FilterByTag ( units , tag ) ; begin
66569: LD_INT 0
66571: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66572: LD_ADDR_VAR 0 3
66576: PUSH
66577: LD_VAR 0 1
66581: PPUSH
66582: LD_INT 120
66584: PUSH
66585: LD_VAR 0 2
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PPUSH
66594: CALL_OW 72
66598: ST_TO_ADDR
// end ;
66599: LD_VAR 0 3
66603: RET
// export function IsDriver ( un ) ; begin
66604: LD_INT 0
66606: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66607: LD_ADDR_VAR 0 2
66611: PUSH
66612: LD_VAR 0 1
66616: PUSH
66617: LD_INT 55
66619: PUSH
66620: EMPTY
66621: LIST
66622: PPUSH
66623: CALL_OW 69
66627: IN
66628: ST_TO_ADDR
// end ;
66629: LD_VAR 0 2
66633: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66634: LD_INT 0
66636: PPUSH
66637: PPUSH
// list := [ ] ;
66638: LD_ADDR_VAR 0 5
66642: PUSH
66643: EMPTY
66644: ST_TO_ADDR
// case d of 0 :
66645: LD_VAR 0 3
66649: PUSH
66650: LD_INT 0
66652: DOUBLE
66653: EQUAL
66654: IFTRUE 66658
66656: GO 66791
66658: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66659: LD_ADDR_VAR 0 5
66663: PUSH
66664: LD_VAR 0 1
66668: PUSH
66669: LD_INT 4
66671: MINUS
66672: PUSH
66673: LD_VAR 0 2
66677: PUSH
66678: LD_INT 4
66680: MINUS
66681: PUSH
66682: LD_INT 2
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: PUSH
66690: LD_VAR 0 1
66694: PUSH
66695: LD_INT 3
66697: MINUS
66698: PUSH
66699: LD_VAR 0 2
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: LIST
66711: PUSH
66712: LD_VAR 0 1
66716: PUSH
66717: LD_INT 4
66719: PLUS
66720: PUSH
66721: LD_VAR 0 2
66725: PUSH
66726: LD_INT 4
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: LIST
66733: PUSH
66734: LD_VAR 0 1
66738: PUSH
66739: LD_INT 3
66741: PLUS
66742: PUSH
66743: LD_VAR 0 2
66747: PUSH
66748: LD_INT 3
66750: PLUS
66751: PUSH
66752: LD_INT 5
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: PUSH
66760: LD_VAR 0 1
66764: PUSH
66765: LD_VAR 0 2
66769: PUSH
66770: LD_INT 4
66772: PLUS
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: LIST
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: ST_TO_ADDR
// end ; 1 :
66789: GO 67489
66791: LD_INT 1
66793: DOUBLE
66794: EQUAL
66795: IFTRUE 66799
66797: GO 66932
66799: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66800: LD_ADDR_VAR 0 5
66804: PUSH
66805: LD_VAR 0 1
66809: PUSH
66810: LD_VAR 0 2
66814: PUSH
66815: LD_INT 4
66817: MINUS
66818: PUSH
66819: LD_INT 3
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: LIST
66826: PUSH
66827: LD_VAR 0 1
66831: PUSH
66832: LD_INT 3
66834: MINUS
66835: PUSH
66836: LD_VAR 0 2
66840: PUSH
66841: LD_INT 3
66843: MINUS
66844: PUSH
66845: LD_INT 2
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: LIST
66852: PUSH
66853: LD_VAR 0 1
66857: PUSH
66858: LD_INT 4
66860: MINUS
66861: PUSH
66862: LD_VAR 0 2
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: LIST
66874: PUSH
66875: LD_VAR 0 1
66879: PUSH
66880: LD_VAR 0 2
66884: PUSH
66885: LD_INT 3
66887: PLUS
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: LIST
66896: PUSH
66897: LD_VAR 0 1
66901: PUSH
66902: LD_INT 4
66904: PLUS
66905: PUSH
66906: LD_VAR 0 2
66910: PUSH
66911: LD_INT 4
66913: PLUS
66914: PUSH
66915: LD_INT 5
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: LIST
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: ST_TO_ADDR
// end ; 2 :
66930: GO 67489
66932: LD_INT 2
66934: DOUBLE
66935: EQUAL
66936: IFTRUE 66940
66938: GO 67069
66940: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66941: LD_ADDR_VAR 0 5
66945: PUSH
66946: LD_VAR 0 1
66950: PUSH
66951: LD_VAR 0 2
66955: PUSH
66956: LD_INT 3
66958: MINUS
66959: PUSH
66960: LD_INT 3
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: LIST
66967: PUSH
66968: LD_VAR 0 1
66972: PUSH
66973: LD_INT 4
66975: PLUS
66976: PUSH
66977: LD_VAR 0 2
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: LIST
66989: PUSH
66990: LD_VAR 0 1
66994: PUSH
66995: LD_VAR 0 2
66999: PUSH
67000: LD_INT 4
67002: PLUS
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: LIST
67011: PUSH
67012: LD_VAR 0 1
67016: PUSH
67017: LD_INT 3
67019: MINUS
67020: PUSH
67021: LD_VAR 0 2
67025: PUSH
67026: LD_INT 1
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: LIST
67033: PUSH
67034: LD_VAR 0 1
67038: PUSH
67039: LD_INT 4
67041: MINUS
67042: PUSH
67043: LD_VAR 0 2
67047: PUSH
67048: LD_INT 4
67050: MINUS
67051: PUSH
67052: LD_INT 2
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: ST_TO_ADDR
// end ; 3 :
67067: GO 67489
67069: LD_INT 3
67071: DOUBLE
67072: EQUAL
67073: IFTRUE 67077
67075: GO 67210
67077: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67078: LD_ADDR_VAR 0 5
67082: PUSH
67083: LD_VAR 0 1
67087: PUSH
67088: LD_INT 3
67090: PLUS
67091: PUSH
67092: LD_VAR 0 2
67096: PUSH
67097: LD_INT 4
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: PUSH
67105: LD_VAR 0 1
67109: PUSH
67110: LD_INT 4
67112: PLUS
67113: PUSH
67114: LD_VAR 0 2
67118: PUSH
67119: LD_INT 4
67121: PLUS
67122: PUSH
67123: LD_INT 5
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: LIST
67130: PUSH
67131: LD_VAR 0 1
67135: PUSH
67136: LD_INT 4
67138: MINUS
67139: PUSH
67140: LD_VAR 0 2
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: LIST
67152: PUSH
67153: LD_VAR 0 1
67157: PUSH
67158: LD_VAR 0 2
67162: PUSH
67163: LD_INT 4
67165: MINUS
67166: PUSH
67167: LD_INT 3
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: LIST
67174: PUSH
67175: LD_VAR 0 1
67179: PUSH
67180: LD_INT 3
67182: MINUS
67183: PUSH
67184: LD_VAR 0 2
67188: PUSH
67189: LD_INT 3
67191: MINUS
67192: PUSH
67193: LD_INT 2
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: LIST
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: ST_TO_ADDR
// end ; 4 :
67208: GO 67489
67210: LD_INT 4
67212: DOUBLE
67213: EQUAL
67214: IFTRUE 67218
67216: GO 67351
67218: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67219: LD_ADDR_VAR 0 5
67223: PUSH
67224: LD_VAR 0 1
67228: PUSH
67229: LD_VAR 0 2
67233: PUSH
67234: LD_INT 4
67236: PLUS
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: LIST
67245: PUSH
67246: LD_VAR 0 1
67250: PUSH
67251: LD_INT 3
67253: PLUS
67254: PUSH
67255: LD_VAR 0 2
67259: PUSH
67260: LD_INT 3
67262: PLUS
67263: PUSH
67264: LD_INT 5
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: PUSH
67272: LD_VAR 0 1
67276: PUSH
67277: LD_INT 4
67279: PLUS
67280: PUSH
67281: LD_VAR 0 2
67285: PUSH
67286: LD_INT 4
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: LIST
67293: PUSH
67294: LD_VAR 0 1
67298: PUSH
67299: LD_VAR 0 2
67303: PUSH
67304: LD_INT 3
67306: MINUS
67307: PUSH
67308: LD_INT 3
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: PUSH
67316: LD_VAR 0 1
67320: PUSH
67321: LD_INT 4
67323: MINUS
67324: PUSH
67325: LD_VAR 0 2
67329: PUSH
67330: LD_INT 4
67332: MINUS
67333: PUSH
67334: LD_INT 2
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: LIST
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: ST_TO_ADDR
// end ; 5 :
67349: GO 67489
67351: LD_INT 5
67353: DOUBLE
67354: EQUAL
67355: IFTRUE 67359
67357: GO 67488
67359: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67360: LD_ADDR_VAR 0 5
67364: PUSH
67365: LD_VAR 0 1
67369: PUSH
67370: LD_INT 4
67372: MINUS
67373: PUSH
67374: LD_VAR 0 2
67378: PUSH
67379: LD_INT 1
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: PUSH
67387: LD_VAR 0 1
67391: PUSH
67392: LD_VAR 0 2
67396: PUSH
67397: LD_INT 4
67399: MINUS
67400: PUSH
67401: LD_INT 3
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: LIST
67408: PUSH
67409: LD_VAR 0 1
67413: PUSH
67414: LD_INT 4
67416: PLUS
67417: PUSH
67418: LD_VAR 0 2
67422: PUSH
67423: LD_INT 4
67425: PLUS
67426: PUSH
67427: LD_INT 5
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: LIST
67434: PUSH
67435: LD_VAR 0 1
67439: PUSH
67440: LD_INT 3
67442: PLUS
67443: PUSH
67444: LD_VAR 0 2
67448: PUSH
67449: LD_INT 4
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: PUSH
67457: LD_VAR 0 1
67461: PUSH
67462: LD_VAR 0 2
67466: PUSH
67467: LD_INT 3
67469: PLUS
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: ST_TO_ADDR
// end ; end ;
67486: GO 67489
67488: POP
// result := list ;
67489: LD_ADDR_VAR 0 4
67493: PUSH
67494: LD_VAR 0 5
67498: ST_TO_ADDR
// end ;
67499: LD_VAR 0 4
67503: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67504: LD_INT 0
67506: PPUSH
67507: PPUSH
67508: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67509: LD_VAR 0 1
67513: NOT
67514: PUSH
67515: LD_VAR 0 2
67519: PUSH
67520: LD_INT 1
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: LD_INT 3
67528: PUSH
67529: LD_INT 4
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: IN
67538: NOT
67539: OR
67540: IFFALSE 67544
// exit ;
67542: GO 67627
// tmp := [ ] ;
67544: LD_ADDR_VAR 0 5
67548: PUSH
67549: EMPTY
67550: ST_TO_ADDR
// for i in units do
67551: LD_ADDR_VAR 0 4
67555: PUSH
67556: LD_VAR 0 1
67560: PUSH
67561: FOR_IN
67562: IFFALSE 67596
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67564: LD_ADDR_VAR 0 5
67568: PUSH
67569: LD_VAR 0 5
67573: PPUSH
67574: LD_VAR 0 4
67578: PPUSH
67579: LD_VAR 0 2
67583: PPUSH
67584: CALL_OW 259
67588: PPUSH
67589: CALL 68988 0 2
67593: ST_TO_ADDR
67594: GO 67561
67596: POP
67597: POP
// if not tmp then
67598: LD_VAR 0 5
67602: NOT
67603: IFFALSE 67607
// exit ;
67605: GO 67627
// result := SortListByListDesc ( units , tmp ) ;
67607: LD_ADDR_VAR 0 3
67611: PUSH
67612: LD_VAR 0 1
67616: PPUSH
67617: LD_VAR 0 5
67621: PPUSH
67622: CALL_OW 77
67626: ST_TO_ADDR
// end ;
67627: LD_VAR 0 3
67631: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67632: LD_INT 0
67634: PPUSH
67635: PPUSH
67636: PPUSH
// result := false ;
67637: LD_ADDR_VAR 0 3
67641: PUSH
67642: LD_INT 0
67644: ST_TO_ADDR
// if not building then
67645: LD_VAR 0 2
67649: NOT
67650: IFFALSE 67654
// exit ;
67652: GO 67792
// x := GetX ( building ) ;
67654: LD_ADDR_VAR 0 4
67658: PUSH
67659: LD_VAR 0 2
67663: PPUSH
67664: CALL_OW 250
67668: ST_TO_ADDR
// y := GetY ( building ) ;
67669: LD_ADDR_VAR 0 5
67673: PUSH
67674: LD_VAR 0 2
67678: PPUSH
67679: CALL_OW 251
67683: ST_TO_ADDR
// if not x or not y then
67684: LD_VAR 0 4
67688: NOT
67689: PUSH
67690: LD_VAR 0 5
67694: NOT
67695: OR
67696: IFFALSE 67700
// exit ;
67698: GO 67792
// if GetTaskList ( unit ) then
67700: LD_VAR 0 1
67704: PPUSH
67705: CALL_OW 437
67709: IFFALSE 67792
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67711: LD_STRING e
67713: PUSH
67714: LD_VAR 0 1
67718: PPUSH
67719: CALL_OW 437
67723: PUSH
67724: LD_INT 1
67726: ARRAY
67727: PUSH
67728: LD_INT 1
67730: ARRAY
67731: EQUAL
67732: PUSH
67733: LD_VAR 0 4
67737: PUSH
67738: LD_VAR 0 1
67742: PPUSH
67743: CALL_OW 437
67747: PUSH
67748: LD_INT 1
67750: ARRAY
67751: PUSH
67752: LD_INT 2
67754: ARRAY
67755: EQUAL
67756: AND
67757: PUSH
67758: LD_VAR 0 5
67762: PUSH
67763: LD_VAR 0 1
67767: PPUSH
67768: CALL_OW 437
67772: PUSH
67773: LD_INT 1
67775: ARRAY
67776: PUSH
67777: LD_INT 3
67779: ARRAY
67780: EQUAL
67781: AND
67782: IFFALSE 67792
// result := true end ;
67784: LD_ADDR_VAR 0 3
67788: PUSH
67789: LD_INT 1
67791: ST_TO_ADDR
// end ;
67792: LD_VAR 0 3
67796: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67797: LD_INT 0
67799: PPUSH
// result := false ;
67800: LD_ADDR_VAR 0 4
67804: PUSH
67805: LD_INT 0
67807: ST_TO_ADDR
// if GetTaskList ( unit ) then
67808: LD_VAR 0 1
67812: PPUSH
67813: CALL_OW 437
67817: IFFALSE 67900
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67819: LD_STRING M
67821: PUSH
67822: LD_VAR 0 1
67826: PPUSH
67827: CALL_OW 437
67831: PUSH
67832: LD_INT 1
67834: ARRAY
67835: PUSH
67836: LD_INT 1
67838: ARRAY
67839: EQUAL
67840: PUSH
67841: LD_VAR 0 2
67845: PUSH
67846: LD_VAR 0 1
67850: PPUSH
67851: CALL_OW 437
67855: PUSH
67856: LD_INT 1
67858: ARRAY
67859: PUSH
67860: LD_INT 2
67862: ARRAY
67863: EQUAL
67864: AND
67865: PUSH
67866: LD_VAR 0 3
67870: PUSH
67871: LD_VAR 0 1
67875: PPUSH
67876: CALL_OW 437
67880: PUSH
67881: LD_INT 1
67883: ARRAY
67884: PUSH
67885: LD_INT 3
67887: ARRAY
67888: EQUAL
67889: AND
67890: IFFALSE 67900
// result := true ;
67892: LD_ADDR_VAR 0 4
67896: PUSH
67897: LD_INT 1
67899: ST_TO_ADDR
// end ; end ;
67900: LD_VAR 0 4
67904: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67905: LD_INT 0
67907: PPUSH
67908: PPUSH
67909: PPUSH
67910: PPUSH
// if not unit or not area then
67911: LD_VAR 0 1
67915: NOT
67916: PUSH
67917: LD_VAR 0 2
67921: NOT
67922: OR
67923: IFFALSE 67927
// exit ;
67925: GO 68091
// tmp := AreaToList ( area , i ) ;
67927: LD_ADDR_VAR 0 6
67931: PUSH
67932: LD_VAR 0 2
67936: PPUSH
67937: LD_VAR 0 5
67941: PPUSH
67942: CALL_OW 517
67946: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67947: LD_ADDR_VAR 0 5
67951: PUSH
67952: DOUBLE
67953: LD_INT 1
67955: DEC
67956: ST_TO_ADDR
67957: LD_VAR 0 6
67961: PUSH
67962: LD_INT 1
67964: ARRAY
67965: PUSH
67966: FOR_TO
67967: IFFALSE 68089
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67969: LD_ADDR_VAR 0 7
67973: PUSH
67974: LD_VAR 0 6
67978: PUSH
67979: LD_INT 1
67981: ARRAY
67982: PUSH
67983: LD_VAR 0 5
67987: ARRAY
67988: PUSH
67989: LD_VAR 0 6
67993: PUSH
67994: LD_INT 2
67996: ARRAY
67997: PUSH
67998: LD_VAR 0 5
68002: ARRAY
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68008: LD_VAR 0 7
68012: PUSH
68013: LD_INT 1
68015: ARRAY
68016: PPUSH
68017: LD_VAR 0 7
68021: PUSH
68022: LD_INT 2
68024: ARRAY
68025: PPUSH
68026: CALL_OW 428
68030: PUSH
68031: LD_INT 0
68033: EQUAL
68034: IFFALSE 68087
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68036: LD_VAR 0 1
68040: PPUSH
68041: LD_VAR 0 7
68045: PUSH
68046: LD_INT 1
68048: ARRAY
68049: PPUSH
68050: LD_VAR 0 7
68054: PUSH
68055: LD_INT 2
68057: ARRAY
68058: PPUSH
68059: LD_VAR 0 3
68063: PPUSH
68064: CALL_OW 48
// result := IsPlaced ( unit ) ;
68068: LD_ADDR_VAR 0 4
68072: PUSH
68073: LD_VAR 0 1
68077: PPUSH
68078: CALL_OW 305
68082: ST_TO_ADDR
// exit ;
68083: POP
68084: POP
68085: GO 68091
// end ; end ;
68087: GO 67966
68089: POP
68090: POP
// end ;
68091: LD_VAR 0 4
68095: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68096: LD_INT 0
68098: PPUSH
68099: PPUSH
68100: PPUSH
// if not side or side > 8 then
68101: LD_VAR 0 1
68105: NOT
68106: PUSH
68107: LD_VAR 0 1
68111: PUSH
68112: LD_INT 8
68114: GREATER
68115: OR
68116: IFFALSE 68120
// exit ;
68118: GO 68307
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68120: LD_ADDR_VAR 0 4
68124: PUSH
68125: LD_INT 22
68127: PUSH
68128: LD_VAR 0 1
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 21
68139: PUSH
68140: LD_INT 3
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PPUSH
68151: CALL_OW 69
68155: ST_TO_ADDR
// if not tmp then
68156: LD_VAR 0 4
68160: NOT
68161: IFFALSE 68165
// exit ;
68163: GO 68307
// enable_addtolog := true ;
68165: LD_ADDR_OWVAR 81
68169: PUSH
68170: LD_INT 1
68172: ST_TO_ADDR
// AddToLog ( [ ) ;
68173: LD_STRING [
68175: PPUSH
68176: CALL_OW 561
// for i in tmp do
68180: LD_ADDR_VAR 0 3
68184: PUSH
68185: LD_VAR 0 4
68189: PUSH
68190: FOR_IN
68191: IFFALSE 68298
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68193: LD_STRING [
68195: PUSH
68196: LD_VAR 0 3
68200: PPUSH
68201: CALL_OW 266
68205: STR
68206: PUSH
68207: LD_STRING , 
68209: STR
68210: PUSH
68211: LD_VAR 0 3
68215: PPUSH
68216: CALL_OW 250
68220: STR
68221: PUSH
68222: LD_STRING , 
68224: STR
68225: PUSH
68226: LD_VAR 0 3
68230: PPUSH
68231: CALL_OW 251
68235: STR
68236: PUSH
68237: LD_STRING , 
68239: STR
68240: PUSH
68241: LD_VAR 0 3
68245: PPUSH
68246: CALL_OW 254
68250: STR
68251: PUSH
68252: LD_STRING , 
68254: STR
68255: PUSH
68256: LD_VAR 0 3
68260: PPUSH
68261: LD_INT 1
68263: PPUSH
68264: CALL_OW 268
68268: STR
68269: PUSH
68270: LD_STRING , 
68272: STR
68273: PUSH
68274: LD_VAR 0 3
68278: PPUSH
68279: LD_INT 2
68281: PPUSH
68282: CALL_OW 268
68286: STR
68287: PUSH
68288: LD_STRING ],
68290: STR
68291: PPUSH
68292: CALL_OW 561
// end ;
68296: GO 68190
68298: POP
68299: POP
// AddToLog ( ]; ) ;
68300: LD_STRING ];
68302: PPUSH
68303: CALL_OW 561
// end ;
68307: LD_VAR 0 2
68311: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68312: LD_INT 0
68314: PPUSH
68315: PPUSH
68316: PPUSH
68317: PPUSH
68318: PPUSH
// if not area or not rate or not max then
68319: LD_VAR 0 1
68323: NOT
68324: PUSH
68325: LD_VAR 0 2
68329: NOT
68330: OR
68331: PUSH
68332: LD_VAR 0 4
68336: NOT
68337: OR
68338: IFFALSE 68342
// exit ;
68340: GO 68531
// while 1 do
68342: LD_INT 1
68344: IFFALSE 68531
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68346: LD_ADDR_VAR 0 9
68350: PUSH
68351: LD_VAR 0 1
68355: PPUSH
68356: LD_INT 1
68358: PPUSH
68359: CALL_OW 287
68363: PUSH
68364: LD_INT 10
68366: MUL
68367: ST_TO_ADDR
// r := rate / 10 ;
68368: LD_ADDR_VAR 0 7
68372: PUSH
68373: LD_VAR 0 2
68377: PUSH
68378: LD_INT 10
68380: DIVREAL
68381: ST_TO_ADDR
// time := 1 1$00 ;
68382: LD_ADDR_VAR 0 8
68386: PUSH
68387: LD_INT 2100
68389: ST_TO_ADDR
// if amount < min then
68390: LD_VAR 0 9
68394: PUSH
68395: LD_VAR 0 3
68399: LESS
68400: IFFALSE 68418
// r := r * 2 else
68402: LD_ADDR_VAR 0 7
68406: PUSH
68407: LD_VAR 0 7
68411: PUSH
68412: LD_INT 2
68414: MUL
68415: ST_TO_ADDR
68416: GO 68444
// if amount > max then
68418: LD_VAR 0 9
68422: PUSH
68423: LD_VAR 0 4
68427: GREATER
68428: IFFALSE 68444
// r := r / 2 ;
68430: LD_ADDR_VAR 0 7
68434: PUSH
68435: LD_VAR 0 7
68439: PUSH
68440: LD_INT 2
68442: DIVREAL
68443: ST_TO_ADDR
// time := time / r ;
68444: LD_ADDR_VAR 0 8
68448: PUSH
68449: LD_VAR 0 8
68453: PUSH
68454: LD_VAR 0 7
68458: DIVREAL
68459: ST_TO_ADDR
// if time < 0 then
68460: LD_VAR 0 8
68464: PUSH
68465: LD_INT 0
68467: LESS
68468: IFFALSE 68485
// time := time * - 1 ;
68470: LD_ADDR_VAR 0 8
68474: PUSH
68475: LD_VAR 0 8
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: MUL
68484: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68485: LD_VAR 0 8
68489: PUSH
68490: LD_INT 35
68492: PPUSH
68493: LD_INT 875
68495: PPUSH
68496: CALL_OW 12
68500: PLUS
68501: PPUSH
68502: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68506: LD_INT 1
68508: PPUSH
68509: LD_INT 5
68511: PPUSH
68512: CALL_OW 12
68516: PPUSH
68517: LD_VAR 0 1
68521: PPUSH
68522: LD_INT 1
68524: PPUSH
68525: CALL_OW 55
// end ;
68529: GO 68342
// end ;
68531: LD_VAR 0 5
68535: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68536: LD_INT 0
68538: PPUSH
68539: PPUSH
68540: PPUSH
68541: PPUSH
68542: PPUSH
68543: PPUSH
68544: PPUSH
68545: PPUSH
// if not turrets or not factories then
68546: LD_VAR 0 1
68550: NOT
68551: PUSH
68552: LD_VAR 0 2
68556: NOT
68557: OR
68558: IFFALSE 68562
// exit ;
68560: GO 68869
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68562: LD_ADDR_VAR 0 10
68566: PUSH
68567: LD_INT 5
68569: PUSH
68570: LD_INT 6
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 2
68579: PUSH
68580: LD_INT 4
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 3
68589: PUSH
68590: LD_INT 5
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 24
68604: PUSH
68605: LD_INT 25
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 23
68614: PUSH
68615: LD_INT 27
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 42
68628: PUSH
68629: LD_INT 43
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 44
68638: PUSH
68639: LD_INT 46
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 45
68648: PUSH
68649: LD_INT 47
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: LIST
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: LIST
68665: ST_TO_ADDR
// result := [ ] ;
68666: LD_ADDR_VAR 0 3
68670: PUSH
68671: EMPTY
68672: ST_TO_ADDR
// for i in turrets do
68673: LD_ADDR_VAR 0 4
68677: PUSH
68678: LD_VAR 0 1
68682: PUSH
68683: FOR_IN
68684: IFFALSE 68867
// begin nat := GetNation ( i ) ;
68686: LD_ADDR_VAR 0 7
68690: PUSH
68691: LD_VAR 0 4
68695: PPUSH
68696: CALL_OW 248
68700: ST_TO_ADDR
// weapon := 0 ;
68701: LD_ADDR_VAR 0 8
68705: PUSH
68706: LD_INT 0
68708: ST_TO_ADDR
// if not nat then
68709: LD_VAR 0 7
68713: NOT
68714: IFFALSE 68718
// continue ;
68716: GO 68683
// for j in list [ nat ] do
68718: LD_ADDR_VAR 0 5
68722: PUSH
68723: LD_VAR 0 10
68727: PUSH
68728: LD_VAR 0 7
68732: ARRAY
68733: PUSH
68734: FOR_IN
68735: IFFALSE 68776
// if GetBWeapon ( i ) = j [ 1 ] then
68737: LD_VAR 0 4
68741: PPUSH
68742: CALL_OW 269
68746: PUSH
68747: LD_VAR 0 5
68751: PUSH
68752: LD_INT 1
68754: ARRAY
68755: EQUAL
68756: IFFALSE 68774
// begin weapon := j [ 2 ] ;
68758: LD_ADDR_VAR 0 8
68762: PUSH
68763: LD_VAR 0 5
68767: PUSH
68768: LD_INT 2
68770: ARRAY
68771: ST_TO_ADDR
// break ;
68772: GO 68776
// end ;
68774: GO 68734
68776: POP
68777: POP
// if not weapon then
68778: LD_VAR 0 8
68782: NOT
68783: IFFALSE 68787
// continue ;
68785: GO 68683
// for k in factories do
68787: LD_ADDR_VAR 0 6
68791: PUSH
68792: LD_VAR 0 2
68796: PUSH
68797: FOR_IN
68798: IFFALSE 68863
// begin weapons := AvailableWeaponList ( k ) ;
68800: LD_ADDR_VAR 0 9
68804: PUSH
68805: LD_VAR 0 6
68809: PPUSH
68810: CALL_OW 478
68814: ST_TO_ADDR
// if not weapons then
68815: LD_VAR 0 9
68819: NOT
68820: IFFALSE 68824
// continue ;
68822: GO 68797
// if weapon in weapons then
68824: LD_VAR 0 8
68828: PUSH
68829: LD_VAR 0 9
68833: IN
68834: IFFALSE 68861
// begin result := [ i , weapon ] ;
68836: LD_ADDR_VAR 0 3
68840: PUSH
68841: LD_VAR 0 4
68845: PUSH
68846: LD_VAR 0 8
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: ST_TO_ADDR
// exit ;
68855: POP
68856: POP
68857: POP
68858: POP
68859: GO 68869
// end ; end ;
68861: GO 68797
68863: POP
68864: POP
// end ;
68865: GO 68683
68867: POP
68868: POP
// end ;
68869: LD_VAR 0 3
68873: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68874: LD_INT 0
68876: PPUSH
// if not side or side > 8 then
68877: LD_VAR 0 3
68881: NOT
68882: PUSH
68883: LD_VAR 0 3
68887: PUSH
68888: LD_INT 8
68890: GREATER
68891: OR
68892: IFFALSE 68896
// exit ;
68894: GO 68955
// if not range then
68896: LD_VAR 0 4
68900: NOT
68901: IFFALSE 68912
// range := - 12 ;
68903: LD_ADDR_VAR 0 4
68907: PUSH
68908: LD_INT 12
68910: NEG
68911: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68912: LD_VAR 0 1
68916: PPUSH
68917: LD_VAR 0 2
68921: PPUSH
68922: LD_VAR 0 3
68926: PPUSH
68927: LD_VAR 0 4
68931: PPUSH
68932: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68936: LD_VAR 0 1
68940: PPUSH
68941: LD_VAR 0 2
68945: PPUSH
68946: LD_VAR 0 3
68950: PPUSH
68951: CALL_OW 331
// end ;
68955: LD_VAR 0 5
68959: RET
// export function Video ( mode ) ; begin
68960: LD_INT 0
68962: PPUSH
// ingame_video = mode ;
68963: LD_ADDR_OWVAR 52
68967: PUSH
68968: LD_VAR 0 1
68972: ST_TO_ADDR
// interface_hidden = mode ;
68973: LD_ADDR_OWVAR 54
68977: PUSH
68978: LD_VAR 0 1
68982: ST_TO_ADDR
// end ;
68983: LD_VAR 0 2
68987: RET
// export function Join ( array , element ) ; begin
68988: LD_INT 0
68990: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68991: LD_ADDR_VAR 0 3
68995: PUSH
68996: LD_VAR 0 1
69000: PPUSH
69001: LD_VAR 0 1
69005: PUSH
69006: LD_INT 1
69008: PLUS
69009: PPUSH
69010: LD_VAR 0 2
69014: PPUSH
69015: CALL_OW 1
69019: ST_TO_ADDR
// end ;
69020: LD_VAR 0 3
69024: RET
// export function JoinUnion ( array , element ) ; begin
69025: LD_INT 0
69027: PPUSH
// result := array union element ;
69028: LD_ADDR_VAR 0 3
69032: PUSH
69033: LD_VAR 0 1
69037: PUSH
69038: LD_VAR 0 2
69042: UNION
69043: ST_TO_ADDR
// end ;
69044: LD_VAR 0 3
69048: RET
// export function GetBehemoths ( side ) ; begin
69049: LD_INT 0
69051: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69052: LD_ADDR_VAR 0 2
69056: PUSH
69057: LD_INT 22
69059: PUSH
69060: LD_VAR 0 1
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 31
69071: PUSH
69072: LD_INT 25
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PPUSH
69083: CALL_OW 69
69087: ST_TO_ADDR
// end ;
69088: LD_VAR 0 2
69092: RET
// export function Shuffle ( array ) ; var i , index ; begin
69093: LD_INT 0
69095: PPUSH
69096: PPUSH
69097: PPUSH
// result := [ ] ;
69098: LD_ADDR_VAR 0 2
69102: PUSH
69103: EMPTY
69104: ST_TO_ADDR
// if not array then
69105: LD_VAR 0 1
69109: NOT
69110: IFFALSE 69114
// exit ;
69112: GO 69213
// Randomize ;
69114: CALL_OW 10
// for i = array downto 1 do
69118: LD_ADDR_VAR 0 3
69122: PUSH
69123: DOUBLE
69124: LD_VAR 0 1
69128: INC
69129: ST_TO_ADDR
69130: LD_INT 1
69132: PUSH
69133: FOR_DOWNTO
69134: IFFALSE 69211
// begin index := rand ( 1 , array ) ;
69136: LD_ADDR_VAR 0 4
69140: PUSH
69141: LD_INT 1
69143: PPUSH
69144: LD_VAR 0 1
69148: PPUSH
69149: CALL_OW 12
69153: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69154: LD_ADDR_VAR 0 2
69158: PUSH
69159: LD_VAR 0 2
69163: PPUSH
69164: LD_VAR 0 2
69168: PUSH
69169: LD_INT 1
69171: PLUS
69172: PPUSH
69173: LD_VAR 0 1
69177: PUSH
69178: LD_VAR 0 4
69182: ARRAY
69183: PPUSH
69184: CALL_OW 2
69188: ST_TO_ADDR
// array := Delete ( array , index ) ;
69189: LD_ADDR_VAR 0 1
69193: PUSH
69194: LD_VAR 0 1
69198: PPUSH
69199: LD_VAR 0 4
69203: PPUSH
69204: CALL_OW 3
69208: ST_TO_ADDR
// end ;
69209: GO 69133
69211: POP
69212: POP
// end ;
69213: LD_VAR 0 2
69217: RET
// export function GetBaseMaterials ( base ) ; begin
69218: LD_INT 0
69220: PPUSH
// result := [ 0 , 0 , 0 ] ;
69221: LD_ADDR_VAR 0 2
69225: PUSH
69226: LD_INT 0
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: LIST
69239: ST_TO_ADDR
// if not base then
69240: LD_VAR 0 1
69244: NOT
69245: IFFALSE 69249
// exit ;
69247: GO 69298
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69249: LD_ADDR_VAR 0 2
69253: PUSH
69254: LD_VAR 0 1
69258: PPUSH
69259: LD_INT 1
69261: PPUSH
69262: CALL_OW 275
69266: PUSH
69267: LD_VAR 0 1
69271: PPUSH
69272: LD_INT 2
69274: PPUSH
69275: CALL_OW 275
69279: PUSH
69280: LD_VAR 0 1
69284: PPUSH
69285: LD_INT 3
69287: PPUSH
69288: CALL_OW 275
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: LIST
69297: ST_TO_ADDR
// end ;
69298: LD_VAR 0 2
69302: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69303: LD_INT 0
69305: PPUSH
69306: PPUSH
// result := array ;
69307: LD_ADDR_VAR 0 3
69311: PUSH
69312: LD_VAR 0 1
69316: ST_TO_ADDR
// if size >= result then
69317: LD_VAR 0 2
69321: PUSH
69322: LD_VAR 0 3
69326: GREATEREQUAL
69327: IFFALSE 69331
// exit ;
69329: GO 69381
// if size then
69331: LD_VAR 0 2
69335: IFFALSE 69381
// for i := array downto size do
69337: LD_ADDR_VAR 0 4
69341: PUSH
69342: DOUBLE
69343: LD_VAR 0 1
69347: INC
69348: ST_TO_ADDR
69349: LD_VAR 0 2
69353: PUSH
69354: FOR_DOWNTO
69355: IFFALSE 69379
// result := Delete ( result , result ) ;
69357: LD_ADDR_VAR 0 3
69361: PUSH
69362: LD_VAR 0 3
69366: PPUSH
69367: LD_VAR 0 3
69371: PPUSH
69372: CALL_OW 3
69376: ST_TO_ADDR
69377: GO 69354
69379: POP
69380: POP
// end ;
69381: LD_VAR 0 3
69385: RET
// export function ComExit ( unit ) ; var tmp ; begin
69386: LD_INT 0
69388: PPUSH
69389: PPUSH
// if not IsInUnit ( unit ) then
69390: LD_VAR 0 1
69394: PPUSH
69395: CALL_OW 310
69399: NOT
69400: IFFALSE 69404
// exit ;
69402: GO 69464
// tmp := IsInUnit ( unit ) ;
69404: LD_ADDR_VAR 0 3
69408: PUSH
69409: LD_VAR 0 1
69413: PPUSH
69414: CALL_OW 310
69418: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69419: LD_VAR 0 3
69423: PPUSH
69424: CALL_OW 247
69428: PUSH
69429: LD_INT 2
69431: EQUAL
69432: IFFALSE 69445
// ComExitVehicle ( unit ) else
69434: LD_VAR 0 1
69438: PPUSH
69439: CALL_OW 121
69443: GO 69454
// ComExitBuilding ( unit ) ;
69445: LD_VAR 0 1
69449: PPUSH
69450: CALL_OW 122
// result := tmp ;
69454: LD_ADDR_VAR 0 2
69458: PUSH
69459: LD_VAR 0 3
69463: ST_TO_ADDR
// end ;
69464: LD_VAR 0 2
69468: RET
// export function ComExitAll ( units ) ; var i ; begin
69469: LD_INT 0
69471: PPUSH
69472: PPUSH
// if not units then
69473: LD_VAR 0 1
69477: NOT
69478: IFFALSE 69482
// exit ;
69480: GO 69508
// for i in units do
69482: LD_ADDR_VAR 0 3
69486: PUSH
69487: LD_VAR 0 1
69491: PUSH
69492: FOR_IN
69493: IFFALSE 69506
// ComExit ( i ) ;
69495: LD_VAR 0 3
69499: PPUSH
69500: CALL 69386 0 1
69504: GO 69492
69506: POP
69507: POP
// end ;
69508: LD_VAR 0 2
69512: RET
// export function ResetHc ; begin
69513: LD_INT 0
69515: PPUSH
// InitHc ;
69516: CALL_OW 19
// hc_importance := 0 ;
69520: LD_ADDR_OWVAR 32
69524: PUSH
69525: LD_INT 0
69527: ST_TO_ADDR
// end ;
69528: LD_VAR 0 1
69532: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69533: LD_INT 0
69535: PPUSH
69536: PPUSH
69537: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69538: LD_ADDR_VAR 0 6
69542: PUSH
69543: LD_VAR 0 1
69547: PUSH
69548: LD_VAR 0 3
69552: PLUS
69553: PUSH
69554: LD_INT 2
69556: DIV
69557: ST_TO_ADDR
// if _x < 0 then
69558: LD_VAR 0 6
69562: PUSH
69563: LD_INT 0
69565: LESS
69566: IFFALSE 69583
// _x := _x * - 1 ;
69568: LD_ADDR_VAR 0 6
69572: PUSH
69573: LD_VAR 0 6
69577: PUSH
69578: LD_INT 1
69580: NEG
69581: MUL
69582: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69583: LD_ADDR_VAR 0 7
69587: PUSH
69588: LD_VAR 0 2
69592: PUSH
69593: LD_VAR 0 4
69597: PLUS
69598: PUSH
69599: LD_INT 2
69601: DIV
69602: ST_TO_ADDR
// if _y < 0 then
69603: LD_VAR 0 7
69607: PUSH
69608: LD_INT 0
69610: LESS
69611: IFFALSE 69628
// _y := _y * - 1 ;
69613: LD_ADDR_VAR 0 7
69617: PUSH
69618: LD_VAR 0 7
69622: PUSH
69623: LD_INT 1
69625: NEG
69626: MUL
69627: ST_TO_ADDR
// result := [ _x , _y ] ;
69628: LD_ADDR_VAR 0 5
69632: PUSH
69633: LD_VAR 0 6
69637: PUSH
69638: LD_VAR 0 7
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: ST_TO_ADDR
// end ;
69647: LD_VAR 0 5
69651: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69652: LD_INT 0
69654: PPUSH
69655: PPUSH
69656: PPUSH
69657: PPUSH
// task := GetTaskList ( unit ) ;
69658: LD_ADDR_VAR 0 7
69662: PUSH
69663: LD_VAR 0 1
69667: PPUSH
69668: CALL_OW 437
69672: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69673: LD_VAR 0 7
69677: NOT
69678: PUSH
69679: LD_VAR 0 1
69683: PPUSH
69684: LD_VAR 0 2
69688: PPUSH
69689: CALL_OW 308
69693: NOT
69694: AND
69695: IFFALSE 69699
// exit ;
69697: GO 69817
// if IsInArea ( unit , area ) then
69699: LD_VAR 0 1
69703: PPUSH
69704: LD_VAR 0 2
69708: PPUSH
69709: CALL_OW 308
69713: IFFALSE 69731
// begin ComMoveToArea ( unit , goAway ) ;
69715: LD_VAR 0 1
69719: PPUSH
69720: LD_VAR 0 3
69724: PPUSH
69725: CALL_OW 113
// exit ;
69729: GO 69817
// end ; if task [ 1 ] [ 1 ] <> M then
69731: LD_VAR 0 7
69735: PUSH
69736: LD_INT 1
69738: ARRAY
69739: PUSH
69740: LD_INT 1
69742: ARRAY
69743: PUSH
69744: LD_STRING M
69746: NONEQUAL
69747: IFFALSE 69751
// exit ;
69749: GO 69817
// x := task [ 1 ] [ 2 ] ;
69751: LD_ADDR_VAR 0 5
69755: PUSH
69756: LD_VAR 0 7
69760: PUSH
69761: LD_INT 1
69763: ARRAY
69764: PUSH
69765: LD_INT 2
69767: ARRAY
69768: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69769: LD_ADDR_VAR 0 6
69773: PUSH
69774: LD_VAR 0 7
69778: PUSH
69779: LD_INT 1
69781: ARRAY
69782: PUSH
69783: LD_INT 3
69785: ARRAY
69786: ST_TO_ADDR
// if InArea ( x , y , area ) then
69787: LD_VAR 0 5
69791: PPUSH
69792: LD_VAR 0 6
69796: PPUSH
69797: LD_VAR 0 2
69801: PPUSH
69802: CALL_OW 309
69806: IFFALSE 69817
// ComStop ( unit ) ;
69808: LD_VAR 0 1
69812: PPUSH
69813: CALL_OW 141
// end ;
69817: LD_VAR 0 4
69821: RET
// export function Abs ( value ) ; begin
69822: LD_INT 0
69824: PPUSH
// result := value ;
69825: LD_ADDR_VAR 0 2
69829: PUSH
69830: LD_VAR 0 1
69834: ST_TO_ADDR
// if value < 0 then
69835: LD_VAR 0 1
69839: PUSH
69840: LD_INT 0
69842: LESS
69843: IFFALSE 69860
// result := value * - 1 ;
69845: LD_ADDR_VAR 0 2
69849: PUSH
69850: LD_VAR 0 1
69854: PUSH
69855: LD_INT 1
69857: NEG
69858: MUL
69859: ST_TO_ADDR
// end ;
69860: LD_VAR 0 2
69864: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69865: LD_INT 0
69867: PPUSH
69868: PPUSH
69869: PPUSH
69870: PPUSH
69871: PPUSH
69872: PPUSH
69873: PPUSH
69874: PPUSH
// if not unit or not building then
69875: LD_VAR 0 1
69879: NOT
69880: PUSH
69881: LD_VAR 0 2
69885: NOT
69886: OR
69887: IFFALSE 69891
// exit ;
69889: GO 70117
// x := GetX ( building ) ;
69891: LD_ADDR_VAR 0 4
69895: PUSH
69896: LD_VAR 0 2
69900: PPUSH
69901: CALL_OW 250
69905: ST_TO_ADDR
// y := GetY ( building ) ;
69906: LD_ADDR_VAR 0 6
69910: PUSH
69911: LD_VAR 0 2
69915: PPUSH
69916: CALL_OW 251
69920: ST_TO_ADDR
// d := GetDir ( building ) ;
69921: LD_ADDR_VAR 0 8
69925: PUSH
69926: LD_VAR 0 2
69930: PPUSH
69931: CALL_OW 254
69935: ST_TO_ADDR
// r := 4 ;
69936: LD_ADDR_VAR 0 9
69940: PUSH
69941: LD_INT 4
69943: ST_TO_ADDR
// for i := 1 to 5 do
69944: LD_ADDR_VAR 0 10
69948: PUSH
69949: DOUBLE
69950: LD_INT 1
69952: DEC
69953: ST_TO_ADDR
69954: LD_INT 5
69956: PUSH
69957: FOR_TO
69958: IFFALSE 70115
// begin _x := ShiftX ( x , d , r + i ) ;
69960: LD_ADDR_VAR 0 5
69964: PUSH
69965: LD_VAR 0 4
69969: PPUSH
69970: LD_VAR 0 8
69974: PPUSH
69975: LD_VAR 0 9
69979: PUSH
69980: LD_VAR 0 10
69984: PLUS
69985: PPUSH
69986: CALL_OW 272
69990: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69991: LD_ADDR_VAR 0 7
69995: PUSH
69996: LD_VAR 0 6
70000: PPUSH
70001: LD_VAR 0 8
70005: PPUSH
70006: LD_VAR 0 9
70010: PUSH
70011: LD_VAR 0 10
70015: PLUS
70016: PPUSH
70017: CALL_OW 273
70021: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70022: LD_VAR 0 5
70026: PPUSH
70027: LD_VAR 0 7
70031: PPUSH
70032: CALL_OW 488
70036: PUSH
70037: LD_VAR 0 5
70041: PPUSH
70042: LD_VAR 0 7
70046: PPUSH
70047: CALL_OW 428
70051: PPUSH
70052: CALL_OW 247
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: LD_INT 2
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: IN
70067: NOT
70068: AND
70069: IFFALSE 70113
// begin ComMoveXY ( unit , _x , _y ) ;
70071: LD_VAR 0 1
70075: PPUSH
70076: LD_VAR 0 5
70080: PPUSH
70081: LD_VAR 0 7
70085: PPUSH
70086: CALL_OW 111
// result := [ _x , _y ] ;
70090: LD_ADDR_VAR 0 3
70094: PUSH
70095: LD_VAR 0 5
70099: PUSH
70100: LD_VAR 0 7
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: ST_TO_ADDR
// exit ;
70109: POP
70110: POP
70111: GO 70117
// end ; end ;
70113: GO 69957
70115: POP
70116: POP
// end ;
70117: LD_VAR 0 3
70121: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70122: LD_INT 0
70124: PPUSH
70125: PPUSH
70126: PPUSH
// result := 0 ;
70127: LD_ADDR_VAR 0 3
70131: PUSH
70132: LD_INT 0
70134: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70135: LD_VAR 0 1
70139: PUSH
70140: LD_INT 0
70142: LESS
70143: PUSH
70144: LD_VAR 0 1
70148: PUSH
70149: LD_INT 8
70151: GREATER
70152: OR
70153: PUSH
70154: LD_VAR 0 2
70158: PUSH
70159: LD_INT 0
70161: LESS
70162: OR
70163: PUSH
70164: LD_VAR 0 2
70168: PUSH
70169: LD_INT 8
70171: GREATER
70172: OR
70173: IFFALSE 70177
// exit ;
70175: GO 70252
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70177: LD_ADDR_VAR 0 4
70181: PUSH
70182: LD_INT 22
70184: PUSH
70185: LD_VAR 0 2
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PPUSH
70194: CALL_OW 69
70198: PUSH
70199: FOR_IN
70200: IFFALSE 70250
// begin un := UnitShoot ( i ) ;
70202: LD_ADDR_VAR 0 5
70206: PUSH
70207: LD_VAR 0 4
70211: PPUSH
70212: CALL_OW 504
70216: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70217: LD_VAR 0 5
70221: PPUSH
70222: CALL_OW 255
70226: PUSH
70227: LD_VAR 0 1
70231: EQUAL
70232: IFFALSE 70248
// begin result := un ;
70234: LD_ADDR_VAR 0 3
70238: PUSH
70239: LD_VAR 0 5
70243: ST_TO_ADDR
// exit ;
70244: POP
70245: POP
70246: GO 70252
// end ; end ;
70248: GO 70199
70250: POP
70251: POP
// end ;
70252: LD_VAR 0 3
70256: RET
// export function GetCargoBay ( units ) ; begin
70257: LD_INT 0
70259: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70260: LD_ADDR_VAR 0 2
70264: PUSH
70265: LD_VAR 0 1
70269: PPUSH
70270: LD_INT 2
70272: PUSH
70273: LD_INT 34
70275: PUSH
70276: LD_INT 12
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 34
70285: PUSH
70286: LD_INT 51
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 34
70295: PUSH
70296: LD_INT 32
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 34
70305: PUSH
70306: LD_INT 89
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: PPUSH
70320: CALL_OW 72
70324: ST_TO_ADDR
// end ;
70325: LD_VAR 0 2
70329: RET
// export function Negate ( value ) ; begin
70330: LD_INT 0
70332: PPUSH
// result := not value ;
70333: LD_ADDR_VAR 0 2
70337: PUSH
70338: LD_VAR 0 1
70342: NOT
70343: ST_TO_ADDR
// end ;
70344: LD_VAR 0 2
70348: RET
// export function Inc ( value ) ; begin
70349: LD_INT 0
70351: PPUSH
// result := value + 1 ;
70352: LD_ADDR_VAR 0 2
70356: PUSH
70357: LD_VAR 0 1
70361: PUSH
70362: LD_INT 1
70364: PLUS
70365: ST_TO_ADDR
// end ;
70366: LD_VAR 0 2
70370: RET
// export function Dec ( value ) ; begin
70371: LD_INT 0
70373: PPUSH
// result := value - 1 ;
70374: LD_ADDR_VAR 0 2
70378: PUSH
70379: LD_VAR 0 1
70383: PUSH
70384: LD_INT 1
70386: MINUS
70387: ST_TO_ADDR
// end ;
70388: LD_VAR 0 2
70392: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70393: LD_INT 0
70395: PPUSH
70396: PPUSH
70397: PPUSH
70398: PPUSH
70399: PPUSH
70400: PPUSH
70401: PPUSH
70402: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70403: LD_VAR 0 1
70407: PPUSH
70408: LD_VAR 0 2
70412: PPUSH
70413: CALL_OW 488
70417: NOT
70418: PUSH
70419: LD_VAR 0 3
70423: PPUSH
70424: LD_VAR 0 4
70428: PPUSH
70429: CALL_OW 488
70433: NOT
70434: OR
70435: IFFALSE 70448
// begin result := - 1 ;
70437: LD_ADDR_VAR 0 5
70441: PUSH
70442: LD_INT 1
70444: NEG
70445: ST_TO_ADDR
// exit ;
70446: GO 70683
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70448: LD_ADDR_VAR 0 12
70452: PUSH
70453: LD_VAR 0 1
70457: PPUSH
70458: LD_VAR 0 2
70462: PPUSH
70463: LD_VAR 0 3
70467: PPUSH
70468: LD_VAR 0 4
70472: PPUSH
70473: CALL 69533 0 4
70477: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70478: LD_ADDR_VAR 0 11
70482: PUSH
70483: LD_VAR 0 1
70487: PPUSH
70488: LD_VAR 0 2
70492: PPUSH
70493: LD_VAR 0 12
70497: PUSH
70498: LD_INT 1
70500: ARRAY
70501: PPUSH
70502: LD_VAR 0 12
70506: PUSH
70507: LD_INT 2
70509: ARRAY
70510: PPUSH
70511: CALL_OW 298
70515: ST_TO_ADDR
// distance := 9999 ;
70516: LD_ADDR_VAR 0 10
70520: PUSH
70521: LD_INT 9999
70523: ST_TO_ADDR
// for i := 0 to 5 do
70524: LD_ADDR_VAR 0 6
70528: PUSH
70529: DOUBLE
70530: LD_INT 0
70532: DEC
70533: ST_TO_ADDR
70534: LD_INT 5
70536: PUSH
70537: FOR_TO
70538: IFFALSE 70681
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70540: LD_ADDR_VAR 0 7
70544: PUSH
70545: LD_VAR 0 1
70549: PPUSH
70550: LD_VAR 0 6
70554: PPUSH
70555: LD_VAR 0 11
70559: PPUSH
70560: CALL_OW 272
70564: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70565: LD_ADDR_VAR 0 8
70569: PUSH
70570: LD_VAR 0 2
70574: PPUSH
70575: LD_VAR 0 6
70579: PPUSH
70580: LD_VAR 0 11
70584: PPUSH
70585: CALL_OW 273
70589: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70590: LD_VAR 0 7
70594: PPUSH
70595: LD_VAR 0 8
70599: PPUSH
70600: CALL_OW 488
70604: NOT
70605: IFFALSE 70609
// continue ;
70607: GO 70537
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70609: LD_ADDR_VAR 0 9
70613: PUSH
70614: LD_VAR 0 12
70618: PUSH
70619: LD_INT 1
70621: ARRAY
70622: PPUSH
70623: LD_VAR 0 12
70627: PUSH
70628: LD_INT 2
70630: ARRAY
70631: PPUSH
70632: LD_VAR 0 7
70636: PPUSH
70637: LD_VAR 0 8
70641: PPUSH
70642: CALL_OW 298
70646: ST_TO_ADDR
// if tmp < distance then
70647: LD_VAR 0 9
70651: PUSH
70652: LD_VAR 0 10
70656: LESS
70657: IFFALSE 70679
// begin result := i ;
70659: LD_ADDR_VAR 0 5
70663: PUSH
70664: LD_VAR 0 6
70668: ST_TO_ADDR
// distance := tmp ;
70669: LD_ADDR_VAR 0 10
70673: PUSH
70674: LD_VAR 0 9
70678: ST_TO_ADDR
// end ; end ;
70679: GO 70537
70681: POP
70682: POP
// end ;
70683: LD_VAR 0 5
70687: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70688: LD_INT 0
70690: PPUSH
70691: PPUSH
// if not driver or not IsInUnit ( driver ) then
70692: LD_VAR 0 1
70696: NOT
70697: PUSH
70698: LD_VAR 0 1
70702: PPUSH
70703: CALL_OW 310
70707: NOT
70708: OR
70709: IFFALSE 70713
// exit ;
70711: GO 70803
// vehicle := IsInUnit ( driver ) ;
70713: LD_ADDR_VAR 0 3
70717: PUSH
70718: LD_VAR 0 1
70722: PPUSH
70723: CALL_OW 310
70727: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70728: LD_VAR 0 1
70732: PPUSH
70733: LD_STRING \
70735: PUSH
70736: LD_INT 0
70738: PUSH
70739: LD_INT 0
70741: PUSH
70742: LD_INT 0
70744: PUSH
70745: LD_INT 0
70747: PUSH
70748: LD_INT 0
70750: PUSH
70751: LD_INT 0
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: PUSH
70763: LD_STRING E
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: LD_INT 0
70771: PUSH
70772: LD_VAR 0 3
70776: PUSH
70777: LD_INT 0
70779: PUSH
70780: LD_INT 0
70782: PUSH
70783: LD_INT 0
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PPUSH
70799: CALL_OW 446
// end ;
70803: LD_VAR 0 2
70807: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70808: LD_INT 0
70810: PPUSH
70811: PPUSH
// if not driver or not IsInUnit ( driver ) then
70812: LD_VAR 0 1
70816: NOT
70817: PUSH
70818: LD_VAR 0 1
70822: PPUSH
70823: CALL_OW 310
70827: NOT
70828: OR
70829: IFFALSE 70833
// exit ;
70831: GO 70923
// vehicle := IsInUnit ( driver ) ;
70833: LD_ADDR_VAR 0 3
70837: PUSH
70838: LD_VAR 0 1
70842: PPUSH
70843: CALL_OW 310
70847: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70848: LD_VAR 0 1
70852: PPUSH
70853: LD_STRING \
70855: PUSH
70856: LD_INT 0
70858: PUSH
70859: LD_INT 0
70861: PUSH
70862: LD_INT 0
70864: PUSH
70865: LD_INT 0
70867: PUSH
70868: LD_INT 0
70870: PUSH
70871: LD_INT 0
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: PUSH
70883: LD_STRING E
70885: PUSH
70886: LD_INT 0
70888: PUSH
70889: LD_INT 0
70891: PUSH
70892: LD_VAR 0 3
70896: PUSH
70897: LD_INT 0
70899: PUSH
70900: LD_INT 0
70902: PUSH
70903: LD_INT 0
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PPUSH
70919: CALL_OW 447
// end ;
70923: LD_VAR 0 2
70927: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70928: LD_INT 0
70930: PPUSH
70931: PPUSH
70932: PPUSH
// tmp := [ ] ;
70933: LD_ADDR_VAR 0 5
70937: PUSH
70938: EMPTY
70939: ST_TO_ADDR
// for i in units do
70940: LD_ADDR_VAR 0 4
70944: PUSH
70945: LD_VAR 0 1
70949: PUSH
70950: FOR_IN
70951: IFFALSE 70989
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70953: LD_ADDR_VAR 0 5
70957: PUSH
70958: LD_VAR 0 5
70962: PPUSH
70963: LD_VAR 0 5
70967: PUSH
70968: LD_INT 1
70970: PLUS
70971: PPUSH
70972: LD_VAR 0 4
70976: PPUSH
70977: CALL_OW 256
70981: PPUSH
70982: CALL_OW 2
70986: ST_TO_ADDR
70987: GO 70950
70989: POP
70990: POP
// if not tmp then
70991: LD_VAR 0 5
70995: NOT
70996: IFFALSE 71000
// exit ;
70998: GO 71048
// if asc then
71000: LD_VAR 0 2
71004: IFFALSE 71028
// result := SortListByListAsc ( units , tmp ) else
71006: LD_ADDR_VAR 0 3
71010: PUSH
71011: LD_VAR 0 1
71015: PPUSH
71016: LD_VAR 0 5
71020: PPUSH
71021: CALL_OW 76
71025: ST_TO_ADDR
71026: GO 71048
// result := SortListByListDesc ( units , tmp ) ;
71028: LD_ADDR_VAR 0 3
71032: PUSH
71033: LD_VAR 0 1
71037: PPUSH
71038: LD_VAR 0 5
71042: PPUSH
71043: CALL_OW 77
71047: ST_TO_ADDR
// end ;
71048: LD_VAR 0 3
71052: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71053: LD_INT 0
71055: PPUSH
71056: PPUSH
// task := GetTaskList ( mech ) ;
71057: LD_ADDR_VAR 0 4
71061: PUSH
71062: LD_VAR 0 1
71066: PPUSH
71067: CALL_OW 437
71071: ST_TO_ADDR
// if not task then
71072: LD_VAR 0 4
71076: NOT
71077: IFFALSE 71081
// exit ;
71079: GO 71123
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71081: LD_ADDR_VAR 0 3
71085: PUSH
71086: LD_VAR 0 4
71090: PUSH
71091: LD_INT 1
71093: ARRAY
71094: PUSH
71095: LD_INT 1
71097: ARRAY
71098: PUSH
71099: LD_STRING r
71101: EQUAL
71102: PUSH
71103: LD_VAR 0 4
71107: PUSH
71108: LD_INT 1
71110: ARRAY
71111: PUSH
71112: LD_INT 4
71114: ARRAY
71115: PUSH
71116: LD_VAR 0 2
71120: EQUAL
71121: AND
71122: ST_TO_ADDR
// end ;
71123: LD_VAR 0 3
71127: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71128: LD_INT 0
71130: PPUSH
// SetDir ( unit , d ) ;
71131: LD_VAR 0 1
71135: PPUSH
71136: LD_VAR 0 4
71140: PPUSH
71141: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71145: LD_VAR 0 1
71149: PPUSH
71150: LD_VAR 0 2
71154: PPUSH
71155: LD_VAR 0 3
71159: PPUSH
71160: LD_VAR 0 5
71164: PPUSH
71165: CALL_OW 48
// end ;
71169: LD_VAR 0 6
71173: RET
// export function ToNaturalNumber ( number ) ; begin
71174: LD_INT 0
71176: PPUSH
// result := number div 1 ;
71177: LD_ADDR_VAR 0 2
71181: PUSH
71182: LD_VAR 0 1
71186: PUSH
71187: LD_INT 1
71189: DIV
71190: ST_TO_ADDR
// if number < 0 then
71191: LD_VAR 0 1
71195: PUSH
71196: LD_INT 0
71198: LESS
71199: IFFALSE 71209
// result := 0 ;
71201: LD_ADDR_VAR 0 2
71205: PUSH
71206: LD_INT 0
71208: ST_TO_ADDR
// end ;
71209: LD_VAR 0 2
71213: RET
// export function SortByClass ( units , class ) ; var un ; begin
71214: LD_INT 0
71216: PPUSH
71217: PPUSH
// if not units or not class then
71218: LD_VAR 0 1
71222: NOT
71223: PUSH
71224: LD_VAR 0 2
71228: NOT
71229: OR
71230: IFFALSE 71234
// exit ;
71232: GO 71329
// result := [ ] ;
71234: LD_ADDR_VAR 0 3
71238: PUSH
71239: EMPTY
71240: ST_TO_ADDR
// for un in units do
71241: LD_ADDR_VAR 0 4
71245: PUSH
71246: LD_VAR 0 1
71250: PUSH
71251: FOR_IN
71252: IFFALSE 71327
// if GetClass ( un ) = class then
71254: LD_VAR 0 4
71258: PPUSH
71259: CALL_OW 257
71263: PUSH
71264: LD_VAR 0 2
71268: EQUAL
71269: IFFALSE 71296
// result := Insert ( result , 1 , un ) else
71271: LD_ADDR_VAR 0 3
71275: PUSH
71276: LD_VAR 0 3
71280: PPUSH
71281: LD_INT 1
71283: PPUSH
71284: LD_VAR 0 4
71288: PPUSH
71289: CALL_OW 2
71293: ST_TO_ADDR
71294: GO 71325
// result := Replace ( result , result + 1 , un ) ;
71296: LD_ADDR_VAR 0 3
71300: PUSH
71301: LD_VAR 0 3
71305: PPUSH
71306: LD_VAR 0 3
71310: PUSH
71311: LD_INT 1
71313: PLUS
71314: PPUSH
71315: LD_VAR 0 4
71319: PPUSH
71320: CALL_OW 1
71324: ST_TO_ADDR
71325: GO 71251
71327: POP
71328: POP
// end ;
71329: LD_VAR 0 3
71333: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71334: LD_INT 0
71336: PPUSH
71337: PPUSH
71338: PPUSH
71339: PPUSH
71340: PPUSH
71341: PPUSH
71342: PPUSH
// result := [ ] ;
71343: LD_ADDR_VAR 0 4
71347: PUSH
71348: EMPTY
71349: ST_TO_ADDR
// if x - r < 0 then
71350: LD_VAR 0 1
71354: PUSH
71355: LD_VAR 0 3
71359: MINUS
71360: PUSH
71361: LD_INT 0
71363: LESS
71364: IFFALSE 71376
// min_x := 0 else
71366: LD_ADDR_VAR 0 8
71370: PUSH
71371: LD_INT 0
71373: ST_TO_ADDR
71374: GO 71392
// min_x := x - r ;
71376: LD_ADDR_VAR 0 8
71380: PUSH
71381: LD_VAR 0 1
71385: PUSH
71386: LD_VAR 0 3
71390: MINUS
71391: ST_TO_ADDR
// if y - r < 0 then
71392: LD_VAR 0 2
71396: PUSH
71397: LD_VAR 0 3
71401: MINUS
71402: PUSH
71403: LD_INT 0
71405: LESS
71406: IFFALSE 71418
// min_y := 0 else
71408: LD_ADDR_VAR 0 7
71412: PUSH
71413: LD_INT 0
71415: ST_TO_ADDR
71416: GO 71434
// min_y := y - r ;
71418: LD_ADDR_VAR 0 7
71422: PUSH
71423: LD_VAR 0 2
71427: PUSH
71428: LD_VAR 0 3
71432: MINUS
71433: ST_TO_ADDR
// max_x := x + r ;
71434: LD_ADDR_VAR 0 9
71438: PUSH
71439: LD_VAR 0 1
71443: PUSH
71444: LD_VAR 0 3
71448: PLUS
71449: ST_TO_ADDR
// max_y := y + r ;
71450: LD_ADDR_VAR 0 10
71454: PUSH
71455: LD_VAR 0 2
71459: PUSH
71460: LD_VAR 0 3
71464: PLUS
71465: ST_TO_ADDR
// for _x = min_x to max_x do
71466: LD_ADDR_VAR 0 5
71470: PUSH
71471: DOUBLE
71472: LD_VAR 0 8
71476: DEC
71477: ST_TO_ADDR
71478: LD_VAR 0 9
71482: PUSH
71483: FOR_TO
71484: IFFALSE 71585
// for _y = min_y to max_y do
71486: LD_ADDR_VAR 0 6
71490: PUSH
71491: DOUBLE
71492: LD_VAR 0 7
71496: DEC
71497: ST_TO_ADDR
71498: LD_VAR 0 10
71502: PUSH
71503: FOR_TO
71504: IFFALSE 71581
// begin if not ValidHex ( _x , _y ) then
71506: LD_VAR 0 5
71510: PPUSH
71511: LD_VAR 0 6
71515: PPUSH
71516: CALL_OW 488
71520: NOT
71521: IFFALSE 71525
// continue ;
71523: GO 71503
// if GetResourceTypeXY ( _x , _y ) then
71525: LD_VAR 0 5
71529: PPUSH
71530: LD_VAR 0 6
71534: PPUSH
71535: CALL_OW 283
71539: IFFALSE 71579
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71541: LD_ADDR_VAR 0 4
71545: PUSH
71546: LD_VAR 0 4
71550: PPUSH
71551: LD_VAR 0 4
71555: PUSH
71556: LD_INT 1
71558: PLUS
71559: PPUSH
71560: LD_VAR 0 5
71564: PUSH
71565: LD_VAR 0 6
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PPUSH
71574: CALL_OW 1
71578: ST_TO_ADDR
// end ;
71579: GO 71503
71581: POP
71582: POP
71583: GO 71483
71585: POP
71586: POP
// end ;
71587: LD_VAR 0 4
71591: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71592: LD_INT 0
71594: PPUSH
71595: PPUSH
71596: PPUSH
71597: PPUSH
71598: PPUSH
71599: PPUSH
71600: PPUSH
71601: PPUSH
// if not units then
71602: LD_VAR 0 1
71606: NOT
71607: IFFALSE 71611
// exit ;
71609: GO 72135
// result := UnitFilter ( units , [ f_ok ] ) ;
71611: LD_ADDR_VAR 0 3
71615: PUSH
71616: LD_VAR 0 1
71620: PPUSH
71621: LD_INT 50
71623: PUSH
71624: EMPTY
71625: LIST
71626: PPUSH
71627: CALL_OW 72
71631: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71632: LD_ADDR_VAR 0 8
71636: PUSH
71637: LD_VAR 0 1
71641: PUSH
71642: LD_INT 1
71644: ARRAY
71645: PPUSH
71646: CALL_OW 255
71650: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71651: LD_ADDR_VAR 0 10
71655: PUSH
71656: LD_INT 29
71658: PUSH
71659: LD_INT 91
71661: PUSH
71662: LD_INT 49
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: LIST
71669: ST_TO_ADDR
// if not result then
71670: LD_VAR 0 3
71674: NOT
71675: IFFALSE 71679
// exit ;
71677: GO 72135
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71679: LD_ADDR_VAR 0 5
71683: PUSH
71684: LD_INT 81
71686: PUSH
71687: LD_VAR 0 8
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PPUSH
71696: CALL_OW 69
71700: ST_TO_ADDR
// for i in result do
71701: LD_ADDR_VAR 0 4
71705: PUSH
71706: LD_VAR 0 3
71710: PUSH
71711: FOR_IN
71712: IFFALSE 72133
// begin tag := GetTag ( i ) + 1 ;
71714: LD_ADDR_VAR 0 9
71718: PUSH
71719: LD_VAR 0 4
71723: PPUSH
71724: CALL_OW 110
71728: PUSH
71729: LD_INT 1
71731: PLUS
71732: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71733: LD_ADDR_VAR 0 7
71737: PUSH
71738: LD_VAR 0 4
71742: PPUSH
71743: CALL_OW 250
71747: PPUSH
71748: LD_VAR 0 4
71752: PPUSH
71753: CALL_OW 251
71757: PPUSH
71758: LD_INT 6
71760: PPUSH
71761: CALL 71334 0 3
71765: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71766: LD_VAR 0 4
71770: PPUSH
71771: CALL_OW 247
71775: PUSH
71776: LD_INT 2
71778: EQUAL
71779: PUSH
71780: LD_VAR 0 7
71784: AND
71785: PUSH
71786: LD_VAR 0 4
71790: PPUSH
71791: CALL_OW 264
71795: PUSH
71796: LD_VAR 0 10
71800: IN
71801: NOT
71802: AND
71803: IFFALSE 71842
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71805: LD_VAR 0 4
71809: PPUSH
71810: LD_VAR 0 7
71814: PUSH
71815: LD_INT 1
71817: ARRAY
71818: PUSH
71819: LD_INT 1
71821: ARRAY
71822: PPUSH
71823: LD_VAR 0 7
71827: PUSH
71828: LD_INT 1
71830: ARRAY
71831: PUSH
71832: LD_INT 2
71834: ARRAY
71835: PPUSH
71836: CALL_OW 116
71840: GO 72131
// if path > tag then
71842: LD_VAR 0 2
71846: PUSH
71847: LD_VAR 0 9
71851: GREATER
71852: IFFALSE 72060
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71854: LD_ADDR_VAR 0 6
71858: PUSH
71859: LD_VAR 0 5
71863: PPUSH
71864: LD_INT 91
71866: PUSH
71867: LD_VAR 0 4
71871: PUSH
71872: LD_INT 8
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: LIST
71879: PPUSH
71880: CALL_OW 72
71884: ST_TO_ADDR
// if nearEnemy then
71885: LD_VAR 0 6
71889: IFFALSE 71958
// begin if GetWeapon ( i ) = ru_time_lapser then
71891: LD_VAR 0 4
71895: PPUSH
71896: CALL_OW 264
71900: PUSH
71901: LD_INT 49
71903: EQUAL
71904: IFFALSE 71932
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71906: LD_VAR 0 4
71910: PPUSH
71911: LD_VAR 0 6
71915: PPUSH
71916: LD_VAR 0 4
71920: PPUSH
71921: CALL_OW 74
71925: PPUSH
71926: CALL_OW 112
71930: GO 71956
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71932: LD_VAR 0 4
71936: PPUSH
71937: LD_VAR 0 6
71941: PPUSH
71942: LD_VAR 0 4
71946: PPUSH
71947: CALL_OW 74
71951: PPUSH
71952: CALL_OW 115
// end else
71956: GO 72058
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71958: LD_VAR 0 4
71962: PPUSH
71963: LD_VAR 0 2
71967: PUSH
71968: LD_VAR 0 9
71972: ARRAY
71973: PUSH
71974: LD_INT 1
71976: ARRAY
71977: PPUSH
71978: LD_VAR 0 2
71982: PUSH
71983: LD_VAR 0 9
71987: ARRAY
71988: PUSH
71989: LD_INT 2
71991: ARRAY
71992: PPUSH
71993: CALL_OW 297
71997: PUSH
71998: LD_INT 6
72000: GREATER
72001: IFFALSE 72044
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72003: LD_VAR 0 4
72007: PPUSH
72008: LD_VAR 0 2
72012: PUSH
72013: LD_VAR 0 9
72017: ARRAY
72018: PUSH
72019: LD_INT 1
72021: ARRAY
72022: PPUSH
72023: LD_VAR 0 2
72027: PUSH
72028: LD_VAR 0 9
72032: ARRAY
72033: PUSH
72034: LD_INT 2
72036: ARRAY
72037: PPUSH
72038: CALL_OW 114
72042: GO 72058
// SetTag ( i , tag ) ;
72044: LD_VAR 0 4
72048: PPUSH
72049: LD_VAR 0 9
72053: PPUSH
72054: CALL_OW 109
// end else
72058: GO 72131
// if enemy then
72060: LD_VAR 0 5
72064: IFFALSE 72131
// begin if GetWeapon ( i ) = ru_time_lapser then
72066: LD_VAR 0 4
72070: PPUSH
72071: CALL_OW 264
72075: PUSH
72076: LD_INT 49
72078: EQUAL
72079: IFFALSE 72107
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72081: LD_VAR 0 4
72085: PPUSH
72086: LD_VAR 0 5
72090: PPUSH
72091: LD_VAR 0 4
72095: PPUSH
72096: CALL_OW 74
72100: PPUSH
72101: CALL_OW 112
72105: GO 72131
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72107: LD_VAR 0 4
72111: PPUSH
72112: LD_VAR 0 5
72116: PPUSH
72117: LD_VAR 0 4
72121: PPUSH
72122: CALL_OW 74
72126: PPUSH
72127: CALL_OW 115
// end ; end ;
72131: GO 71711
72133: POP
72134: POP
// end ;
72135: LD_VAR 0 3
72139: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72140: LD_INT 0
72142: PPUSH
72143: PPUSH
72144: PPUSH
// if not unit or IsInUnit ( unit ) then
72145: LD_VAR 0 1
72149: NOT
72150: PUSH
72151: LD_VAR 0 1
72155: PPUSH
72156: CALL_OW 310
72160: OR
72161: IFFALSE 72165
// exit ;
72163: GO 72256
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72165: LD_ADDR_VAR 0 4
72169: PUSH
72170: LD_VAR 0 1
72174: PPUSH
72175: CALL_OW 250
72179: PPUSH
72180: LD_VAR 0 2
72184: PPUSH
72185: LD_INT 1
72187: PPUSH
72188: CALL_OW 272
72192: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72193: LD_ADDR_VAR 0 5
72197: PUSH
72198: LD_VAR 0 1
72202: PPUSH
72203: CALL_OW 251
72207: PPUSH
72208: LD_VAR 0 2
72212: PPUSH
72213: LD_INT 1
72215: PPUSH
72216: CALL_OW 273
72220: ST_TO_ADDR
// if ValidHex ( x , y ) then
72221: LD_VAR 0 4
72225: PPUSH
72226: LD_VAR 0 5
72230: PPUSH
72231: CALL_OW 488
72235: IFFALSE 72256
// ComTurnXY ( unit , x , y ) ;
72237: LD_VAR 0 1
72241: PPUSH
72242: LD_VAR 0 4
72246: PPUSH
72247: LD_VAR 0 5
72251: PPUSH
72252: CALL_OW 118
// end ;
72256: LD_VAR 0 3
72260: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72261: LD_INT 0
72263: PPUSH
72264: PPUSH
// result := false ;
72265: LD_ADDR_VAR 0 3
72269: PUSH
72270: LD_INT 0
72272: ST_TO_ADDR
// if not units then
72273: LD_VAR 0 2
72277: NOT
72278: IFFALSE 72282
// exit ;
72280: GO 72327
// for i in units do
72282: LD_ADDR_VAR 0 4
72286: PUSH
72287: LD_VAR 0 2
72291: PUSH
72292: FOR_IN
72293: IFFALSE 72325
// if See ( side , i ) then
72295: LD_VAR 0 1
72299: PPUSH
72300: LD_VAR 0 4
72304: PPUSH
72305: CALL_OW 292
72309: IFFALSE 72323
// begin result := true ;
72311: LD_ADDR_VAR 0 3
72315: PUSH
72316: LD_INT 1
72318: ST_TO_ADDR
// exit ;
72319: POP
72320: POP
72321: GO 72327
// end ;
72323: GO 72292
72325: POP
72326: POP
// end ;
72327: LD_VAR 0 3
72331: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72332: LD_INT 0
72334: PPUSH
72335: PPUSH
72336: PPUSH
72337: PPUSH
// if not unit or not points then
72338: LD_VAR 0 1
72342: NOT
72343: PUSH
72344: LD_VAR 0 2
72348: NOT
72349: OR
72350: IFFALSE 72354
// exit ;
72352: GO 72444
// dist := 99999 ;
72354: LD_ADDR_VAR 0 5
72358: PUSH
72359: LD_INT 99999
72361: ST_TO_ADDR
// for i in points do
72362: LD_ADDR_VAR 0 4
72366: PUSH
72367: LD_VAR 0 2
72371: PUSH
72372: FOR_IN
72373: IFFALSE 72442
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72375: LD_ADDR_VAR 0 6
72379: PUSH
72380: LD_VAR 0 1
72384: PPUSH
72385: LD_VAR 0 4
72389: PUSH
72390: LD_INT 1
72392: ARRAY
72393: PPUSH
72394: LD_VAR 0 4
72398: PUSH
72399: LD_INT 2
72401: ARRAY
72402: PPUSH
72403: CALL_OW 297
72407: ST_TO_ADDR
// if tmpDist < dist then
72408: LD_VAR 0 6
72412: PUSH
72413: LD_VAR 0 5
72417: LESS
72418: IFFALSE 72440
// begin result := i ;
72420: LD_ADDR_VAR 0 3
72424: PUSH
72425: LD_VAR 0 4
72429: ST_TO_ADDR
// dist := tmpDist ;
72430: LD_ADDR_VAR 0 5
72434: PUSH
72435: LD_VAR 0 6
72439: ST_TO_ADDR
// end ; end ;
72440: GO 72372
72442: POP
72443: POP
// end ;
72444: LD_VAR 0 3
72448: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72449: LD_INT 0
72451: PPUSH
// uc_side := side ;
72452: LD_ADDR_OWVAR 20
72456: PUSH
72457: LD_VAR 0 1
72461: ST_TO_ADDR
// uc_nation := 3 ;
72462: LD_ADDR_OWVAR 21
72466: PUSH
72467: LD_INT 3
72469: ST_TO_ADDR
// vc_chassis := 25 ;
72470: LD_ADDR_OWVAR 37
72474: PUSH
72475: LD_INT 25
72477: ST_TO_ADDR
// vc_engine := engine_siberite ;
72478: LD_ADDR_OWVAR 39
72482: PUSH
72483: LD_INT 3
72485: ST_TO_ADDR
// vc_control := control_computer ;
72486: LD_ADDR_OWVAR 38
72490: PUSH
72491: LD_INT 3
72493: ST_TO_ADDR
// vc_weapon := 59 ;
72494: LD_ADDR_OWVAR 40
72498: PUSH
72499: LD_INT 59
72501: ST_TO_ADDR
// result := CreateVehicle ;
72502: LD_ADDR_VAR 0 5
72506: PUSH
72507: CALL_OW 45
72511: ST_TO_ADDR
// SetDir ( result , d ) ;
72512: LD_VAR 0 5
72516: PPUSH
72517: LD_VAR 0 4
72521: PPUSH
72522: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72526: LD_VAR 0 5
72530: PPUSH
72531: LD_VAR 0 2
72535: PPUSH
72536: LD_VAR 0 3
72540: PPUSH
72541: LD_INT 0
72543: PPUSH
72544: CALL_OW 48
// end ;
72548: LD_VAR 0 5
72552: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72553: LD_INT 0
72555: PPUSH
72556: PPUSH
72557: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72558: LD_ADDR_VAR 0 2
72562: PUSH
72563: LD_INT 0
72565: PUSH
72566: LD_INT 0
72568: PUSH
72569: LD_INT 0
72571: PUSH
72572: LD_INT 0
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72581: LD_VAR 0 1
72585: NOT
72586: PUSH
72587: LD_VAR 0 1
72591: PPUSH
72592: CALL_OW 264
72596: PUSH
72597: LD_INT 12
72599: PUSH
72600: LD_INT 51
72602: PUSH
72603: LD_INT 32
72605: PUSH
72606: LD_INT 89
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: IN
72615: NOT
72616: OR
72617: IFFALSE 72621
// exit ;
72619: GO 72719
// for i := 1 to 3 do
72621: LD_ADDR_VAR 0 3
72625: PUSH
72626: DOUBLE
72627: LD_INT 1
72629: DEC
72630: ST_TO_ADDR
72631: LD_INT 3
72633: PUSH
72634: FOR_TO
72635: IFFALSE 72717
// begin tmp := GetCargo ( cargo , i ) ;
72637: LD_ADDR_VAR 0 4
72641: PUSH
72642: LD_VAR 0 1
72646: PPUSH
72647: LD_VAR 0 3
72651: PPUSH
72652: CALL_OW 289
72656: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72657: LD_ADDR_VAR 0 2
72661: PUSH
72662: LD_VAR 0 2
72666: PPUSH
72667: LD_VAR 0 3
72671: PPUSH
72672: LD_VAR 0 4
72676: PPUSH
72677: CALL_OW 1
72681: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72682: LD_ADDR_VAR 0 2
72686: PUSH
72687: LD_VAR 0 2
72691: PPUSH
72692: LD_INT 4
72694: PPUSH
72695: LD_VAR 0 2
72699: PUSH
72700: LD_INT 4
72702: ARRAY
72703: PUSH
72704: LD_VAR 0 4
72708: PLUS
72709: PPUSH
72710: CALL_OW 1
72714: ST_TO_ADDR
// end ;
72715: GO 72634
72717: POP
72718: POP
// end ;
72719: LD_VAR 0 2
72723: RET
// export function Length ( array ) ; begin
72724: LD_INT 0
72726: PPUSH
// result := array + 0 ;
72727: LD_ADDR_VAR 0 2
72731: PUSH
72732: LD_VAR 0 1
72736: PUSH
72737: LD_INT 0
72739: PLUS
72740: ST_TO_ADDR
// end ;
72741: LD_VAR 0 2
72745: RET
// export function PrepareArray ( array ) ; begin
72746: LD_INT 0
72748: PPUSH
// result := array diff 0 ;
72749: LD_ADDR_VAR 0 2
72753: PUSH
72754: LD_VAR 0 1
72758: PUSH
72759: LD_INT 0
72761: DIFF
72762: ST_TO_ADDR
// if not result [ 1 ] then
72763: LD_VAR 0 2
72767: PUSH
72768: LD_INT 1
72770: ARRAY
72771: NOT
72772: IFFALSE 72792
// result := Delete ( result , 1 ) ;
72774: LD_ADDR_VAR 0 2
72778: PUSH
72779: LD_VAR 0 2
72783: PPUSH
72784: LD_INT 1
72786: PPUSH
72787: CALL_OW 3
72791: ST_TO_ADDR
// end ;
72792: LD_VAR 0 2
72796: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72797: LD_INT 0
72799: PPUSH
72800: PPUSH
72801: PPUSH
72802: PPUSH
// sibRocketRange := 25 ;
72803: LD_ADDR_VAR 0 6
72807: PUSH
72808: LD_INT 25
72810: ST_TO_ADDR
// result := false ;
72811: LD_ADDR_VAR 0 4
72815: PUSH
72816: LD_INT 0
72818: ST_TO_ADDR
// for i := 0 to 5 do
72819: LD_ADDR_VAR 0 5
72823: PUSH
72824: DOUBLE
72825: LD_INT 0
72827: DEC
72828: ST_TO_ADDR
72829: LD_INT 5
72831: PUSH
72832: FOR_TO
72833: IFFALSE 72900
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72835: LD_VAR 0 1
72839: PPUSH
72840: LD_VAR 0 5
72844: PPUSH
72845: LD_VAR 0 6
72849: PPUSH
72850: CALL_OW 272
72854: PPUSH
72855: LD_VAR 0 2
72859: PPUSH
72860: LD_VAR 0 5
72864: PPUSH
72865: LD_VAR 0 6
72869: PPUSH
72870: CALL_OW 273
72874: PPUSH
72875: LD_VAR 0 3
72879: PPUSH
72880: CALL_OW 309
72884: IFFALSE 72898
// begin result := true ;
72886: LD_ADDR_VAR 0 4
72890: PUSH
72891: LD_INT 1
72893: ST_TO_ADDR
// exit ;
72894: POP
72895: POP
72896: GO 72902
// end ;
72898: GO 72832
72900: POP
72901: POP
// end ;
72902: LD_VAR 0 4
72906: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72907: LD_INT 0
72909: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72910: LD_VAR 0 1
72914: PPUSH
72915: LD_VAR 0 2
72919: PPUSH
72920: LD_INT 0
72922: PPUSH
72923: LD_INT 0
72925: PPUSH
72926: LD_INT 1
72928: PPUSH
72929: LD_INT 0
72931: PPUSH
72932: CALL_OW 587
// end ; end_of_file
72936: LD_VAR 0 3
72940: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72941: LD_VAR 0 1
72945: PUSH
72946: LD_INT 200
72948: DOUBLE
72949: GREATEREQUAL
72950: IFFALSE 72958
72952: LD_INT 299
72954: DOUBLE
72955: LESSEQUAL
72956: IFTRUE 72960
72958: GO 72992
72960: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72961: LD_VAR 0 1
72965: PPUSH
72966: LD_VAR 0 2
72970: PPUSH
72971: LD_VAR 0 3
72975: PPUSH
72976: LD_VAR 0 4
72980: PPUSH
72981: LD_VAR 0 5
72985: PPUSH
72986: CALL 27607 0 5
72990: GO 73069
72992: LD_INT 300
72994: DOUBLE
72995: GREATEREQUAL
72996: IFFALSE 73004
72998: LD_INT 399
73000: DOUBLE
73001: LESSEQUAL
73002: IFTRUE 73006
73004: GO 73068
73006: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73007: LD_VAR 0 1
73011: PPUSH
73012: LD_VAR 0 2
73016: PPUSH
73017: LD_VAR 0 3
73021: PPUSH
73022: LD_VAR 0 4
73026: PPUSH
73027: LD_VAR 0 5
73031: PPUSH
73032: LD_VAR 0 6
73036: PPUSH
73037: LD_VAR 0 7
73041: PPUSH
73042: LD_VAR 0 8
73046: PPUSH
73047: LD_VAR 0 9
73051: PPUSH
73052: LD_VAR 0 10
73056: PPUSH
73057: LD_VAR 0 11
73061: PPUSH
73062: CALL 23940 0 11
73066: GO 73069
73068: POP
// end ;
73069: PPOPN 11
73071: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73072: LD_VAR 0 1
73076: PPUSH
73077: LD_VAR 0 2
73081: PPUSH
73082: LD_VAR 0 3
73086: PPUSH
73087: LD_VAR 0 4
73091: PPUSH
73092: LD_VAR 0 5
73096: PPUSH
73097: CALL 27343 0 5
// end ; end_of_file
73101: PPOPN 5
73103: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73104: LD_VAR 0 1
73108: PPUSH
73109: LD_VAR 0 2
73113: PPUSH
73114: LD_VAR 0 3
73118: PPUSH
73119: LD_VAR 0 4
73123: PPUSH
73124: LD_VAR 0 5
73128: PPUSH
73129: LD_VAR 0 6
73133: PPUSH
73134: CALL 11560 0 6
// end ;
73138: PPOPN 6
73140: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73141: LD_INT 0
73143: PPUSH
// begin if not units then
73144: LD_VAR 0 1
73148: NOT
73149: IFFALSE 73153
// exit ;
73151: GO 73153
// end ;
73153: PPOPN 7
73155: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73156: CALL 11454 0 0
// end ;
73160: PPOPN 1
73162: END
