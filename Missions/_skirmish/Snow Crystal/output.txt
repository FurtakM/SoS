// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10637: LD_EXP 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: PUSH
10646: LD_INT 22
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: PUSH
10675: LD_INT 0
10677: EQUAL
10678: AND
10679: IFFALSE 10691
10681: GO 10683
10683: DISABLE
// YouLost ( peo-lose ) ;
10684: LD_STRING peo-lose
10686: PPUSH
10687: CALL_OW 104
10691: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10692: LD_EXP 1
10696: PUSH
10697: LD_INT 2
10699: EQUAL
10700: PUSH
10701: LD_INT 22
10703: PUSH
10704: LD_INT 3
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 21
10713: PUSH
10714: LD_INT 1
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PPUSH
10725: CALL_OW 69
10729: PUSH
10730: LD_INT 0
10732: EQUAL
10733: AND
10734: IFFALSE 10746
10736: GO 10738
10738: DISABLE
// YouLost ( peo-lose ) ;
10739: LD_STRING peo-lose
10741: PPUSH
10742: CALL_OW 104
10746: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
10747: LD_OWVAR 2
10751: PPUSH
10752: CALL 10510 0 1
10756: PUSH
10757: LD_EXP 5
10761: GREATEREQUAL
10762: IFFALSE 10848
10764: GO 10766
10766: DISABLE
10767: LD_INT 0
10769: PPUSH
// begin if GetSide ( jota_base ) = your_side then
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 255
10777: PUSH
10778: LD_OWVAR 2
10782: EQUAL
10783: IFFALSE 10826
// begin for i = 1 to 3 do
10785: LD_ADDR_VAR 0 1
10789: PUSH
10790: DOUBLE
10791: LD_INT 1
10793: DEC
10794: ST_TO_ADDR
10795: LD_INT 3
10797: PUSH
10798: FOR_TO
10799: IFFALSE 10813
// AddMedal ( med , 1 ) ;
10801: LD_STRING med
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 101
10811: GO 10798
10813: POP
10814: POP
// GiveMedals ( MAIN ) ;
10815: LD_STRING MAIN
10817: PPUSH
10818: CALL_OW 102
// YouWin ;
10822: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 255
10833: PUSH
10834: LD_OWVAR 2
10838: NONEQUAL
10839: IFFALSE 10848
// YouLost ( source ) ;
10841: LD_STRING source
10843: PPUSH
10844: CALL_OW 104
// end ; end_of_file
10848: PPOPN 1
10850: END
// every 2 2$05 + 0 0$11 do
10851: GO 10853
10853: DISABLE
// begin enable ;
10854: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10855: LD_INT 1
10857: PPUSH
10858: LD_INT 5
10860: PPUSH
10861: CALL_OW 12
10865: PPUSH
10866: LD_INT 7
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
10876: LD_INT 350
10878: PPUSH
10879: LD_INT 1295
10881: PPUSH
10882: CALL_OW 12
10886: PPUSH
10887: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
10891: LD_INT 1
10893: PPUSH
10894: LD_INT 5
10896: PPUSH
10897: CALL_OW 12
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 57
// end ;
10909: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
10910: LD_EXP 1
10914: PUSH
10915: LD_INT 2
10917: EQUAL
10918: PUSH
10919: LD_EXP 8
10923: PUSH
10924: LD_INT 0
10926: EQUAL
10927: AND
10928: IFFALSE 11018
10930: GO 10932
10932: DISABLE
// begin enable ;
10933: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10934: LD_INT 1
10936: PPUSH
10937: LD_INT 5
10939: PPUSH
10940: CALL_OW 12
10944: PPUSH
10945: LD_INT 7
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
10955: LD_INT 350
10957: PPUSH
10958: LD_INT 1750
10960: PPUSH
10961: CALL_OW 12
10965: PPUSH
10966: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
10970: LD_EXP 6
10974: PUSH
10975: LD_INT 73500
10977: PUSH
10978: LD_INT 63000
10980: PUSH
10981: LD_INT 52500
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_EXP 2
10993: ARRAY
10994: LESSEQUAL
10995: IFFALSE 11018
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
10997: LD_INT 1
10999: PPUSH
11000: LD_INT 5
11002: PPUSH
11003: CALL_OW 12
11007: PPUSH
11008: LD_INT 12
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 55
// end ; end_of_file
11018: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11019: LD_VAR 0 1
11023: PPUSH
11024: LD_VAR 0 2
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: CALL 27341 0 3
// end ;
11038: PPOPN 3
11040: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: CALL 27243 0 1
// if un = jota_base then
11050: LD_VAR 0 1
11054: PUSH
11055: LD_INT 1
11057: EQUAL
11058: IFFALSE 11067
// YouLost ( jota-lose ) ;
11060: LD_STRING jota-lose
11062: PPUSH
11063: CALL_OW 104
// if game_type = 2 and depot_captured = false then
11067: LD_EXP 1
11071: PUSH
11072: LD_INT 2
11074: EQUAL
11075: PUSH
11076: LD_EXP 8
11080: PUSH
11081: LD_INT 0
11083: EQUAL
11084: AND
11085: IFFALSE 11400
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL_OW 255
11096: PUSH
11097: LD_INT 1
11099: EQUAL
11100: PUSH
11101: LD_VAR 0 1
11105: PUSH
11106: LD_INT 11
11108: PPUSH
11109: LD_INT 21
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PPUSH
11119: CALL_OW 70
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 30
11129: PUSH
11130: LD_INT 6
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 30
11139: PUSH
11140: LD_INT 10
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 30
11149: PUSH
11150: LD_INT 7
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 30
11159: PUSH
11160: LD_INT 8
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: PPUSH
11186: CALL_OW 69
11190: DIFF
11191: IN
11192: AND
11193: IFFALSE 11279
// begin ai_build := ai_build ^ GetBType ( un ) ;
11195: LD_ADDR_EXP 10
11199: PUSH
11200: LD_EXP 10
11204: PUSH
11205: LD_VAR 0 1
11209: PPUSH
11210: CALL_OW 266
11214: ADD
11215: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
11216: LD_ADDR_EXP 10
11220: PUSH
11221: LD_EXP 10
11225: PUSH
11226: LD_VAR 0 1
11230: PPUSH
11231: CALL_OW 250
11235: ADD
11236: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
11237: LD_ADDR_EXP 10
11241: PUSH
11242: LD_EXP 10
11246: PUSH
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 251
11256: ADD
11257: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
11258: LD_ADDR_EXP 10
11262: PUSH
11263: LD_EXP 10
11267: PUSH
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL_OW 254
11277: ADD
11278: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL_OW 255
11288: PUSH
11289: LD_INT 1
11291: EQUAL
11292: PUSH
11293: LD_VAR 0 1
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PPUSH
11308: CALL_OW 69
11312: IN
11313: AND
11314: IFFALSE 11400
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
11316: LD_ADDR_EXP 11
11320: PUSH
11321: LD_EXP 11
11325: PUSH
11326: LD_VAR 0 1
11330: PPUSH
11331: CALL_OW 265
11335: ADD
11336: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
11337: LD_ADDR_EXP 11
11341: PUSH
11342: LD_EXP 11
11346: PUSH
11347: LD_VAR 0 1
11351: PPUSH
11352: CALL_OW 262
11356: ADD
11357: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
11358: LD_ADDR_EXP 11
11362: PUSH
11363: LD_EXP 11
11367: PUSH
11368: LD_VAR 0 1
11372: PPUSH
11373: CALL_OW 263
11377: ADD
11378: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
11379: LD_ADDR_EXP 11
11383: PUSH
11384: LD_EXP 11
11388: PUSH
11389: LD_VAR 0 1
11393: PPUSH
11394: CALL_OW 264
11398: ADD
11399: ST_TO_ADDR
// end ; end ; end ;
11400: PPOPN 1
11402: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11403: LD_VAR 0 1
11407: PPUSH
11408: LD_VAR 0 2
11412: PPUSH
11413: CALL 27365 0 2
// end ;
11417: PPOPN 2
11419: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL 27349 0 1
// end ; end_of_file
11429: PPOPN 1
11431: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
11432: LD_INT 0
11434: PPUSH
// ar_miner := 81 ;
11435: LD_ADDR_EXP 28
11439: PUSH
11440: LD_INT 81
11442: ST_TO_ADDR
// ar_crane := 88 ;
11443: LD_ADDR_EXP 27
11447: PUSH
11448: LD_INT 88
11450: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11451: LD_ADDR_EXP 22
11455: PUSH
11456: LD_INT 89
11458: ST_TO_ADDR
// us_hack := 99 ;
11459: LD_ADDR_EXP 23
11463: PUSH
11464: LD_INT 99
11466: ST_TO_ADDR
// us_artillery := 97 ;
11467: LD_ADDR_EXP 24
11471: PUSH
11472: LD_INT 97
11474: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11475: LD_ADDR_EXP 25
11479: PUSH
11480: LD_INT 91
11482: ST_TO_ADDR
// ar_mortar := 92 ;
11483: LD_ADDR_EXP 26
11487: PUSH
11488: LD_INT 92
11490: ST_TO_ADDR
// ru_flamethrower := 93 ;
11491: LD_ADDR_EXP 29
11495: PUSH
11496: LD_INT 93
11498: ST_TO_ADDR
// ru_radar := 98 ;
11499: LD_ADDR_EXP 21
11503: PUSH
11504: LD_INT 98
11506: ST_TO_ADDR
// tech_Artillery := 80 ;
11507: LD_ADDR_EXP 30
11511: PUSH
11512: LD_INT 80
11514: ST_TO_ADDR
// tech_RadMat := 81 ;
11515: LD_ADDR_EXP 31
11519: PUSH
11520: LD_INT 81
11522: ST_TO_ADDR
// tech_BasicTools := 82 ;
11523: LD_ADDR_EXP 32
11527: PUSH
11528: LD_INT 82
11530: ST_TO_ADDR
// tech_Cargo := 83 ;
11531: LD_ADDR_EXP 33
11535: PUSH
11536: LD_INT 83
11538: ST_TO_ADDR
// tech_Track := 84 ;
11539: LD_ADDR_EXP 34
11543: PUSH
11544: LD_INT 84
11546: ST_TO_ADDR
// tech_Crane := 85 ;
11547: LD_ADDR_EXP 35
11551: PUSH
11552: LD_INT 85
11554: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11555: LD_ADDR_EXP 36
11559: PUSH
11560: LD_INT 86
11562: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11563: LD_ADDR_EXP 37
11567: PUSH
11568: LD_INT 87
11570: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11571: LD_ADDR_EXP 38
11575: PUSH
11576: LD_INT 88
11578: ST_TO_ADDR
// end ;
11579: LD_VAR 0 1
11583: RET
// every 1 do
11584: GO 11586
11586: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11587: CALL 11432 0 0
11591: END
// every 0 0$1 do
11592: GO 11594
11594: DISABLE
// begin enable ;
11595: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11596: LD_STRING updateTimer(
11598: PUSH
11599: LD_OWVAR 1
11603: STR
11604: PUSH
11605: LD_STRING );
11607: STR
11608: PPUSH
11609: CALL_OW 559
// end ;
11613: END
// export function SOS_MapStart ( ) ; begin
11614: LD_INT 0
11616: PPUSH
// if streamModeActive then
11617: LD_EXP 39
11621: IFFALSE 11630
// DefineStreamItems ( true ) ;
11623: LD_INT 1
11625: PPUSH
11626: CALL 13284 0 1
// UpdateFactoryWaypoints ( ) ;
11630: CALL 26145 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11634: CALL 26402 0 0
// end ;
11638: LD_VAR 0 1
11642: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11643: LD_INT 0
11645: PPUSH
// if p2 = 100 then
11646: LD_VAR 0 2
11650: PUSH
11651: LD_INT 100
11653: EQUAL
11654: IFFALSE 12657
// begin if not StreamModeActive then
11656: LD_EXP 39
11660: NOT
11661: IFFALSE 11671
// StreamModeActive := true ;
11663: LD_ADDR_EXP 39
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// if p3 = 0 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 0
11678: EQUAL
11679: IFFALSE 11685
// InitStreamMode ;
11681: CALL 12820 0 0
// if p3 = 1 then
11685: LD_VAR 0 3
11689: PUSH
11690: LD_INT 1
11692: EQUAL
11693: IFFALSE 11703
// sRocket := true ;
11695: LD_ADDR_EXP 44
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// if p3 = 2 then
11703: LD_VAR 0 3
11707: PUSH
11708: LD_INT 2
11710: EQUAL
11711: IFFALSE 11721
// sSpeed := true ;
11713: LD_ADDR_EXP 43
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// if p3 = 3 then
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 3
11728: EQUAL
11729: IFFALSE 11739
// sEngine := true ;
11731: LD_ADDR_EXP 45
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// if p3 = 4 then
11739: LD_VAR 0 3
11743: PUSH
11744: LD_INT 4
11746: EQUAL
11747: IFFALSE 11757
// sSpec := true ;
11749: LD_ADDR_EXP 42
11753: PUSH
11754: LD_INT 1
11756: ST_TO_ADDR
// if p3 = 5 then
11757: LD_VAR 0 3
11761: PUSH
11762: LD_INT 5
11764: EQUAL
11765: IFFALSE 11775
// sLevel := true ;
11767: LD_ADDR_EXP 46
11771: PUSH
11772: LD_INT 1
11774: ST_TO_ADDR
// if p3 = 6 then
11775: LD_VAR 0 3
11779: PUSH
11780: LD_INT 6
11782: EQUAL
11783: IFFALSE 11793
// sArmoury := true ;
11785: LD_ADDR_EXP 47
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// if p3 = 7 then
11793: LD_VAR 0 3
11797: PUSH
11798: LD_INT 7
11800: EQUAL
11801: IFFALSE 11811
// sRadar := true ;
11803: LD_ADDR_EXP 48
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// if p3 = 8 then
11811: LD_VAR 0 3
11815: PUSH
11816: LD_INT 8
11818: EQUAL
11819: IFFALSE 11829
// sBunker := true ;
11821: LD_ADDR_EXP 49
11825: PUSH
11826: LD_INT 1
11828: ST_TO_ADDR
// if p3 = 9 then
11829: LD_VAR 0 3
11833: PUSH
11834: LD_INT 9
11836: EQUAL
11837: IFFALSE 11847
// sHack := true ;
11839: LD_ADDR_EXP 50
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// if p3 = 10 then
11847: LD_VAR 0 3
11851: PUSH
11852: LD_INT 10
11854: EQUAL
11855: IFFALSE 11865
// sFire := true ;
11857: LD_ADDR_EXP 51
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// if p3 = 11 then
11865: LD_VAR 0 3
11869: PUSH
11870: LD_INT 11
11872: EQUAL
11873: IFFALSE 11883
// sRefresh := true ;
11875: LD_ADDR_EXP 52
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// if p3 = 12 then
11883: LD_VAR 0 3
11887: PUSH
11888: LD_INT 12
11890: EQUAL
11891: IFFALSE 11901
// sExp := true ;
11893: LD_ADDR_EXP 53
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// if p3 = 13 then
11901: LD_VAR 0 3
11905: PUSH
11906: LD_INT 13
11908: EQUAL
11909: IFFALSE 11919
// sDepot := true ;
11911: LD_ADDR_EXP 54
11915: PUSH
11916: LD_INT 1
11918: ST_TO_ADDR
// if p3 = 14 then
11919: LD_VAR 0 3
11923: PUSH
11924: LD_INT 14
11926: EQUAL
11927: IFFALSE 11937
// sFlag := true ;
11929: LD_ADDR_EXP 55
11933: PUSH
11934: LD_INT 1
11936: ST_TO_ADDR
// if p3 = 15 then
11937: LD_VAR 0 3
11941: PUSH
11942: LD_INT 15
11944: EQUAL
11945: IFFALSE 11955
// sKamikadze := true ;
11947: LD_ADDR_EXP 63
11951: PUSH
11952: LD_INT 1
11954: ST_TO_ADDR
// if p3 = 16 then
11955: LD_VAR 0 3
11959: PUSH
11960: LD_INT 16
11962: EQUAL
11963: IFFALSE 11973
// sTroll := true ;
11965: LD_ADDR_EXP 64
11969: PUSH
11970: LD_INT 1
11972: ST_TO_ADDR
// if p3 = 17 then
11973: LD_VAR 0 3
11977: PUSH
11978: LD_INT 17
11980: EQUAL
11981: IFFALSE 11991
// sSlow := true ;
11983: LD_ADDR_EXP 65
11987: PUSH
11988: LD_INT 1
11990: ST_TO_ADDR
// if p3 = 18 then
11991: LD_VAR 0 3
11995: PUSH
11996: LD_INT 18
11998: EQUAL
11999: IFFALSE 12009
// sLack := true ;
12001: LD_ADDR_EXP 66
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// if p3 = 19 then
12009: LD_VAR 0 3
12013: PUSH
12014: LD_INT 19
12016: EQUAL
12017: IFFALSE 12027
// sTank := true ;
12019: LD_ADDR_EXP 68
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// if p3 = 20 then
12027: LD_VAR 0 3
12031: PUSH
12032: LD_INT 20
12034: EQUAL
12035: IFFALSE 12045
// sRemote := true ;
12037: LD_ADDR_EXP 69
12041: PUSH
12042: LD_INT 1
12044: ST_TO_ADDR
// if p3 = 21 then
12045: LD_VAR 0 3
12049: PUSH
12050: LD_INT 21
12052: EQUAL
12053: IFFALSE 12063
// sPowell := true ;
12055: LD_ADDR_EXP 70
12059: PUSH
12060: LD_INT 1
12062: ST_TO_ADDR
// if p3 = 22 then
12063: LD_VAR 0 3
12067: PUSH
12068: LD_INT 22
12070: EQUAL
12071: IFFALSE 12081
// sTeleport := true ;
12073: LD_ADDR_EXP 73
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// if p3 = 23 then
12081: LD_VAR 0 3
12085: PUSH
12086: LD_INT 23
12088: EQUAL
12089: IFFALSE 12099
// sOilTower := true ;
12091: LD_ADDR_EXP 75
12095: PUSH
12096: LD_INT 1
12098: ST_TO_ADDR
// if p3 = 24 then
12099: LD_VAR 0 3
12103: PUSH
12104: LD_INT 24
12106: EQUAL
12107: IFFALSE 12117
// sShovel := true ;
12109: LD_ADDR_EXP 76
12113: PUSH
12114: LD_INT 1
12116: ST_TO_ADDR
// if p3 = 25 then
12117: LD_VAR 0 3
12121: PUSH
12122: LD_INT 25
12124: EQUAL
12125: IFFALSE 12135
// sSheik := true ;
12127: LD_ADDR_EXP 77
12131: PUSH
12132: LD_INT 1
12134: ST_TO_ADDR
// if p3 = 26 then
12135: LD_VAR 0 3
12139: PUSH
12140: LD_INT 26
12142: EQUAL
12143: IFFALSE 12153
// sEarthquake := true ;
12145: LD_ADDR_EXP 79
12149: PUSH
12150: LD_INT 1
12152: ST_TO_ADDR
// if p3 = 27 then
12153: LD_VAR 0 3
12157: PUSH
12158: LD_INT 27
12160: EQUAL
12161: IFFALSE 12171
// sAI := true ;
12163: LD_ADDR_EXP 80
12167: PUSH
12168: LD_INT 1
12170: ST_TO_ADDR
// if p3 = 28 then
12171: LD_VAR 0 3
12175: PUSH
12176: LD_INT 28
12178: EQUAL
12179: IFFALSE 12189
// sCargo := true ;
12181: LD_ADDR_EXP 83
12185: PUSH
12186: LD_INT 1
12188: ST_TO_ADDR
// if p3 = 29 then
12189: LD_VAR 0 3
12193: PUSH
12194: LD_INT 29
12196: EQUAL
12197: IFFALSE 12207
// sDLaser := true ;
12199: LD_ADDR_EXP 84
12203: PUSH
12204: LD_INT 1
12206: ST_TO_ADDR
// if p3 = 30 then
12207: LD_VAR 0 3
12211: PUSH
12212: LD_INT 30
12214: EQUAL
12215: IFFALSE 12225
// sExchange := true ;
12217: LD_ADDR_EXP 85
12221: PUSH
12222: LD_INT 1
12224: ST_TO_ADDR
// if p3 = 31 then
12225: LD_VAR 0 3
12229: PUSH
12230: LD_INT 31
12232: EQUAL
12233: IFFALSE 12243
// sFac := true ;
12235: LD_ADDR_EXP 86
12239: PUSH
12240: LD_INT 1
12242: ST_TO_ADDR
// if p3 = 32 then
12243: LD_VAR 0 3
12247: PUSH
12248: LD_INT 32
12250: EQUAL
12251: IFFALSE 12261
// sPower := true ;
12253: LD_ADDR_EXP 87
12257: PUSH
12258: LD_INT 1
12260: ST_TO_ADDR
// if p3 = 33 then
12261: LD_VAR 0 3
12265: PUSH
12266: LD_INT 33
12268: EQUAL
12269: IFFALSE 12279
// sRandom := true ;
12271: LD_ADDR_EXP 88
12275: PUSH
12276: LD_INT 1
12278: ST_TO_ADDR
// if p3 = 34 then
12279: LD_VAR 0 3
12283: PUSH
12284: LD_INT 34
12286: EQUAL
12287: IFFALSE 12297
// sShield := true ;
12289: LD_ADDR_EXP 89
12293: PUSH
12294: LD_INT 1
12296: ST_TO_ADDR
// if p3 = 35 then
12297: LD_VAR 0 3
12301: PUSH
12302: LD_INT 35
12304: EQUAL
12305: IFFALSE 12315
// sTime := true ;
12307: LD_ADDR_EXP 90
12311: PUSH
12312: LD_INT 1
12314: ST_TO_ADDR
// if p3 = 36 then
12315: LD_VAR 0 3
12319: PUSH
12320: LD_INT 36
12322: EQUAL
12323: IFFALSE 12333
// sTools := true ;
12325: LD_ADDR_EXP 91
12329: PUSH
12330: LD_INT 1
12332: ST_TO_ADDR
// if p3 = 101 then
12333: LD_VAR 0 3
12337: PUSH
12338: LD_INT 101
12340: EQUAL
12341: IFFALSE 12351
// sSold := true ;
12343: LD_ADDR_EXP 56
12347: PUSH
12348: LD_INT 1
12350: ST_TO_ADDR
// if p3 = 102 then
12351: LD_VAR 0 3
12355: PUSH
12356: LD_INT 102
12358: EQUAL
12359: IFFALSE 12369
// sDiff := true ;
12361: LD_ADDR_EXP 57
12365: PUSH
12366: LD_INT 1
12368: ST_TO_ADDR
// if p3 = 103 then
12369: LD_VAR 0 3
12373: PUSH
12374: LD_INT 103
12376: EQUAL
12377: IFFALSE 12387
// sFog := true ;
12379: LD_ADDR_EXP 60
12383: PUSH
12384: LD_INT 1
12386: ST_TO_ADDR
// if p3 = 104 then
12387: LD_VAR 0 3
12391: PUSH
12392: LD_INT 104
12394: EQUAL
12395: IFFALSE 12405
// sReset := true ;
12397: LD_ADDR_EXP 61
12401: PUSH
12402: LD_INT 1
12404: ST_TO_ADDR
// if p3 = 105 then
12405: LD_VAR 0 3
12409: PUSH
12410: LD_INT 105
12412: EQUAL
12413: IFFALSE 12423
// sSun := true ;
12415: LD_ADDR_EXP 62
12419: PUSH
12420: LD_INT 1
12422: ST_TO_ADDR
// if p3 = 106 then
12423: LD_VAR 0 3
12427: PUSH
12428: LD_INT 106
12430: EQUAL
12431: IFFALSE 12441
// sTiger := true ;
12433: LD_ADDR_EXP 58
12437: PUSH
12438: LD_INT 1
12440: ST_TO_ADDR
// if p3 = 107 then
12441: LD_VAR 0 3
12445: PUSH
12446: LD_INT 107
12448: EQUAL
12449: IFFALSE 12459
// sBomb := true ;
12451: LD_ADDR_EXP 59
12455: PUSH
12456: LD_INT 1
12458: ST_TO_ADDR
// if p3 = 108 then
12459: LD_VAR 0 3
12463: PUSH
12464: LD_INT 108
12466: EQUAL
12467: IFFALSE 12477
// sWound := true ;
12469: LD_ADDR_EXP 67
12473: PUSH
12474: LD_INT 1
12476: ST_TO_ADDR
// if p3 = 109 then
12477: LD_VAR 0 3
12481: PUSH
12482: LD_INT 109
12484: EQUAL
12485: IFFALSE 12495
// sBetray := true ;
12487: LD_ADDR_EXP 71
12491: PUSH
12492: LD_INT 1
12494: ST_TO_ADDR
// if p3 = 110 then
12495: LD_VAR 0 3
12499: PUSH
12500: LD_INT 110
12502: EQUAL
12503: IFFALSE 12513
// sContamin := true ;
12505: LD_ADDR_EXP 72
12509: PUSH
12510: LD_INT 1
12512: ST_TO_ADDR
// if p3 = 111 then
12513: LD_VAR 0 3
12517: PUSH
12518: LD_INT 111
12520: EQUAL
12521: IFFALSE 12531
// sOil := true ;
12523: LD_ADDR_EXP 74
12527: PUSH
12528: LD_INT 1
12530: ST_TO_ADDR
// if p3 = 112 then
12531: LD_VAR 0 3
12535: PUSH
12536: LD_INT 112
12538: EQUAL
12539: IFFALSE 12549
// sStu := true ;
12541: LD_ADDR_EXP 78
12545: PUSH
12546: LD_INT 1
12548: ST_TO_ADDR
// if p3 = 113 then
12549: LD_VAR 0 3
12553: PUSH
12554: LD_INT 113
12556: EQUAL
12557: IFFALSE 12567
// sBazooka := true ;
12559: LD_ADDR_EXP 81
12563: PUSH
12564: LD_INT 1
12566: ST_TO_ADDR
// if p3 = 114 then
12567: LD_VAR 0 3
12571: PUSH
12572: LD_INT 114
12574: EQUAL
12575: IFFALSE 12585
// sMortar := true ;
12577: LD_ADDR_EXP 82
12581: PUSH
12582: LD_INT 1
12584: ST_TO_ADDR
// if p3 = 115 then
12585: LD_VAR 0 3
12589: PUSH
12590: LD_INT 115
12592: EQUAL
12593: IFFALSE 12603
// sRanger := true ;
12595: LD_ADDR_EXP 92
12599: PUSH
12600: LD_INT 1
12602: ST_TO_ADDR
// if p3 = 116 then
12603: LD_VAR 0 3
12607: PUSH
12608: LD_INT 116
12610: EQUAL
12611: IFFALSE 12621
// sComputer := true ;
12613: LD_ADDR_EXP 93
12617: PUSH
12618: LD_INT 1
12620: ST_TO_ADDR
// if p3 = 117 then
12621: LD_VAR 0 3
12625: PUSH
12626: LD_INT 117
12628: EQUAL
12629: IFFALSE 12639
// s30 := true ;
12631: LD_ADDR_EXP 94
12635: PUSH
12636: LD_INT 1
12638: ST_TO_ADDR
// if p3 = 118 then
12639: LD_VAR 0 3
12643: PUSH
12644: LD_INT 118
12646: EQUAL
12647: IFFALSE 12657
// s60 := true ;
12649: LD_ADDR_EXP 95
12653: PUSH
12654: LD_INT 1
12656: ST_TO_ADDR
// end ; if p2 = 101 then
12657: LD_VAR 0 2
12661: PUSH
12662: LD_INT 101
12664: EQUAL
12665: IFFALSE 12793
// begin case p3 of 1 :
12667: LD_VAR 0 3
12671: PUSH
12672: LD_INT 1
12674: DOUBLE
12675: EQUAL
12676: IFTRUE 12680
12678: GO 12687
12680: POP
// hHackUnlimitedResources ; 2 :
12681: CALL 24891 0 0
12685: GO 12793
12687: LD_INT 2
12689: DOUBLE
12690: EQUAL
12691: IFTRUE 12695
12693: GO 12702
12695: POP
// hHackSetLevel10 ; 3 :
12696: CALL 25024 0 0
12700: GO 12793
12702: LD_INT 3
12704: DOUBLE
12705: EQUAL
12706: IFTRUE 12710
12708: GO 12717
12710: POP
// hHackSetLevel10YourUnits ; 4 :
12711: CALL 25109 0 0
12715: GO 12793
12717: LD_INT 4
12719: DOUBLE
12720: EQUAL
12721: IFTRUE 12725
12723: GO 12732
12725: POP
// hHackInvincible ; 5 :
12726: CALL 25557 0 0
12730: GO 12793
12732: LD_INT 5
12734: DOUBLE
12735: EQUAL
12736: IFTRUE 12740
12738: GO 12747
12740: POP
// hHackInvisible ; 6 :
12741: CALL 25668 0 0
12745: GO 12793
12747: LD_INT 6
12749: DOUBLE
12750: EQUAL
12751: IFTRUE 12755
12753: GO 12762
12755: POP
// hHackChangeYourSide ; 7 :
12756: CALL 25725 0 0
12760: GO 12793
12762: LD_INT 7
12764: DOUBLE
12765: EQUAL
12766: IFTRUE 12770
12768: GO 12777
12770: POP
// hHackChangeUnitSide ; 8 :
12771: CALL 25767 0 0
12775: GO 12793
12777: LD_INT 8
12779: DOUBLE
12780: EQUAL
12781: IFTRUE 12785
12783: GO 12792
12785: POP
// hHackFog ; end ;
12786: CALL 25868 0 0
12790: GO 12793
12792: POP
// end ; end ;
12793: LD_VAR 0 7
12797: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12798: GO 12800
12800: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12801: LD_STRING initStreamRollete();
12803: PPUSH
12804: CALL_OW 559
// InitStreamMode ;
12808: CALL 12820 0 0
// DefineStreamItems ( false ) ;
12812: LD_INT 0
12814: PPUSH
12815: CALL 13284 0 1
// end ;
12819: END
// function InitStreamMode ; begin
12820: LD_INT 0
12822: PPUSH
// streamModeActive := false ;
12823: LD_ADDR_EXP 39
12827: PUSH
12828: LD_INT 0
12830: ST_TO_ADDR
// normalCounter := 36 ;
12831: LD_ADDR_EXP 40
12835: PUSH
12836: LD_INT 36
12838: ST_TO_ADDR
// hardcoreCounter := 18 ;
12839: LD_ADDR_EXP 41
12843: PUSH
12844: LD_INT 18
12846: ST_TO_ADDR
// sRocket := false ;
12847: LD_ADDR_EXP 44
12851: PUSH
12852: LD_INT 0
12854: ST_TO_ADDR
// sSpeed := false ;
12855: LD_ADDR_EXP 43
12859: PUSH
12860: LD_INT 0
12862: ST_TO_ADDR
// sEngine := false ;
12863: LD_ADDR_EXP 45
12867: PUSH
12868: LD_INT 0
12870: ST_TO_ADDR
// sSpec := false ;
12871: LD_ADDR_EXP 42
12875: PUSH
12876: LD_INT 0
12878: ST_TO_ADDR
// sLevel := false ;
12879: LD_ADDR_EXP 46
12883: PUSH
12884: LD_INT 0
12886: ST_TO_ADDR
// sArmoury := false ;
12887: LD_ADDR_EXP 47
12891: PUSH
12892: LD_INT 0
12894: ST_TO_ADDR
// sRadar := false ;
12895: LD_ADDR_EXP 48
12899: PUSH
12900: LD_INT 0
12902: ST_TO_ADDR
// sBunker := false ;
12903: LD_ADDR_EXP 49
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
// sHack := false ;
12911: LD_ADDR_EXP 50
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// sFire := false ;
12919: LD_ADDR_EXP 51
12923: PUSH
12924: LD_INT 0
12926: ST_TO_ADDR
// sRefresh := false ;
12927: LD_ADDR_EXP 52
12931: PUSH
12932: LD_INT 0
12934: ST_TO_ADDR
// sExp := false ;
12935: LD_ADDR_EXP 53
12939: PUSH
12940: LD_INT 0
12942: ST_TO_ADDR
// sDepot := false ;
12943: LD_ADDR_EXP 54
12947: PUSH
12948: LD_INT 0
12950: ST_TO_ADDR
// sFlag := false ;
12951: LD_ADDR_EXP 55
12955: PUSH
12956: LD_INT 0
12958: ST_TO_ADDR
// sKamikadze := false ;
12959: LD_ADDR_EXP 63
12963: PUSH
12964: LD_INT 0
12966: ST_TO_ADDR
// sTroll := false ;
12967: LD_ADDR_EXP 64
12971: PUSH
12972: LD_INT 0
12974: ST_TO_ADDR
// sSlow := false ;
12975: LD_ADDR_EXP 65
12979: PUSH
12980: LD_INT 0
12982: ST_TO_ADDR
// sLack := false ;
12983: LD_ADDR_EXP 66
12987: PUSH
12988: LD_INT 0
12990: ST_TO_ADDR
// sTank := false ;
12991: LD_ADDR_EXP 68
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// sRemote := false ;
12999: LD_ADDR_EXP 69
13003: PUSH
13004: LD_INT 0
13006: ST_TO_ADDR
// sPowell := false ;
13007: LD_ADDR_EXP 70
13011: PUSH
13012: LD_INT 0
13014: ST_TO_ADDR
// sTeleport := false ;
13015: LD_ADDR_EXP 73
13019: PUSH
13020: LD_INT 0
13022: ST_TO_ADDR
// sOilTower := false ;
13023: LD_ADDR_EXP 75
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// sShovel := false ;
13031: LD_ADDR_EXP 76
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// sSheik := false ;
13039: LD_ADDR_EXP 77
13043: PUSH
13044: LD_INT 0
13046: ST_TO_ADDR
// sEarthquake := false ;
13047: LD_ADDR_EXP 79
13051: PUSH
13052: LD_INT 0
13054: ST_TO_ADDR
// sAI := false ;
13055: LD_ADDR_EXP 80
13059: PUSH
13060: LD_INT 0
13062: ST_TO_ADDR
// sCargo := false ;
13063: LD_ADDR_EXP 83
13067: PUSH
13068: LD_INT 0
13070: ST_TO_ADDR
// sDLaser := false ;
13071: LD_ADDR_EXP 84
13075: PUSH
13076: LD_INT 0
13078: ST_TO_ADDR
// sExchange := false ;
13079: LD_ADDR_EXP 85
13083: PUSH
13084: LD_INT 0
13086: ST_TO_ADDR
// sFac := false ;
13087: LD_ADDR_EXP 86
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// sPower := false ;
13095: LD_ADDR_EXP 87
13099: PUSH
13100: LD_INT 0
13102: ST_TO_ADDR
// sRandom := false ;
13103: LD_ADDR_EXP 88
13107: PUSH
13108: LD_INT 0
13110: ST_TO_ADDR
// sShield := false ;
13111: LD_ADDR_EXP 89
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// sTime := false ;
13119: LD_ADDR_EXP 90
13123: PUSH
13124: LD_INT 0
13126: ST_TO_ADDR
// sTools := false ;
13127: LD_ADDR_EXP 91
13131: PUSH
13132: LD_INT 0
13134: ST_TO_ADDR
// sSold := false ;
13135: LD_ADDR_EXP 56
13139: PUSH
13140: LD_INT 0
13142: ST_TO_ADDR
// sDiff := false ;
13143: LD_ADDR_EXP 57
13147: PUSH
13148: LD_INT 0
13150: ST_TO_ADDR
// sFog := false ;
13151: LD_ADDR_EXP 60
13155: PUSH
13156: LD_INT 0
13158: ST_TO_ADDR
// sReset := false ;
13159: LD_ADDR_EXP 61
13163: PUSH
13164: LD_INT 0
13166: ST_TO_ADDR
// sSun := false ;
13167: LD_ADDR_EXP 62
13171: PUSH
13172: LD_INT 0
13174: ST_TO_ADDR
// sTiger := false ;
13175: LD_ADDR_EXP 58
13179: PUSH
13180: LD_INT 0
13182: ST_TO_ADDR
// sBomb := false ;
13183: LD_ADDR_EXP 59
13187: PUSH
13188: LD_INT 0
13190: ST_TO_ADDR
// sWound := false ;
13191: LD_ADDR_EXP 67
13195: PUSH
13196: LD_INT 0
13198: ST_TO_ADDR
// sBetray := false ;
13199: LD_ADDR_EXP 71
13203: PUSH
13204: LD_INT 0
13206: ST_TO_ADDR
// sContamin := false ;
13207: LD_ADDR_EXP 72
13211: PUSH
13212: LD_INT 0
13214: ST_TO_ADDR
// sOil := false ;
13215: LD_ADDR_EXP 74
13219: PUSH
13220: LD_INT 0
13222: ST_TO_ADDR
// sStu := false ;
13223: LD_ADDR_EXP 78
13227: PUSH
13228: LD_INT 0
13230: ST_TO_ADDR
// sBazooka := false ;
13231: LD_ADDR_EXP 81
13235: PUSH
13236: LD_INT 0
13238: ST_TO_ADDR
// sMortar := false ;
13239: LD_ADDR_EXP 82
13243: PUSH
13244: LD_INT 0
13246: ST_TO_ADDR
// sRanger := false ;
13247: LD_ADDR_EXP 92
13251: PUSH
13252: LD_INT 0
13254: ST_TO_ADDR
// sComputer := false ;
13255: LD_ADDR_EXP 93
13259: PUSH
13260: LD_INT 0
13262: ST_TO_ADDR
// s30 := false ;
13263: LD_ADDR_EXP 94
13267: PUSH
13268: LD_INT 0
13270: ST_TO_ADDR
// s60 := false ;
13271: LD_ADDR_EXP 95
13275: PUSH
13276: LD_INT 0
13278: ST_TO_ADDR
// end ;
13279: LD_VAR 0 1
13283: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13284: LD_INT 0
13286: PPUSH
13287: PPUSH
13288: PPUSH
13289: PPUSH
13290: PPUSH
13291: PPUSH
13292: PPUSH
// result := [ ] ;
13293: LD_ADDR_VAR 0 2
13297: PUSH
13298: EMPTY
13299: ST_TO_ADDR
// if campaign_id = 1 then
13300: LD_OWVAR 69
13304: PUSH
13305: LD_INT 1
13307: EQUAL
13308: IFFALSE 16474
// begin case mission_number of 1 :
13310: LD_OWVAR 70
13314: PUSH
13315: LD_INT 1
13317: DOUBLE
13318: EQUAL
13319: IFTRUE 13323
13321: GO 13399
13323: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13324: LD_ADDR_VAR 0 2
13328: PUSH
13329: LD_INT 2
13331: PUSH
13332: LD_INT 4
13334: PUSH
13335: LD_INT 11
13337: PUSH
13338: LD_INT 12
13340: PUSH
13341: LD_INT 15
13343: PUSH
13344: LD_INT 16
13346: PUSH
13347: LD_INT 22
13349: PUSH
13350: LD_INT 23
13352: PUSH
13353: LD_INT 26
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 101
13369: PUSH
13370: LD_INT 102
13372: PUSH
13373: LD_INT 106
13375: PUSH
13376: LD_INT 116
13378: PUSH
13379: LD_INT 117
13381: PUSH
13382: LD_INT 118
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: ST_TO_ADDR
13397: GO 16472
13399: LD_INT 2
13401: DOUBLE
13402: EQUAL
13403: IFTRUE 13407
13405: GO 13491
13407: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13408: LD_ADDR_VAR 0 2
13412: PUSH
13413: LD_INT 2
13415: PUSH
13416: LD_INT 4
13418: PUSH
13419: LD_INT 11
13421: PUSH
13422: LD_INT 12
13424: PUSH
13425: LD_INT 15
13427: PUSH
13428: LD_INT 16
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_INT 23
13436: PUSH
13437: LD_INT 26
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 101
13453: PUSH
13454: LD_INT 102
13456: PUSH
13457: LD_INT 105
13459: PUSH
13460: LD_INT 106
13462: PUSH
13463: LD_INT 108
13465: PUSH
13466: LD_INT 116
13468: PUSH
13469: LD_INT 117
13471: PUSH
13472: LD_INT 118
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: ST_TO_ADDR
13489: GO 16472
13491: LD_INT 3
13493: DOUBLE
13494: EQUAL
13495: IFTRUE 13499
13497: GO 13587
13499: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13500: LD_ADDR_VAR 0 2
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: LD_INT 5
13513: PUSH
13514: LD_INT 11
13516: PUSH
13517: LD_INT 12
13519: PUSH
13520: LD_INT 15
13522: PUSH
13523: LD_INT 16
13525: PUSH
13526: LD_INT 22
13528: PUSH
13529: LD_INT 26
13531: PUSH
13532: LD_INT 36
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 101
13549: PUSH
13550: LD_INT 102
13552: PUSH
13553: LD_INT 105
13555: PUSH
13556: LD_INT 106
13558: PUSH
13559: LD_INT 108
13561: PUSH
13562: LD_INT 116
13564: PUSH
13565: LD_INT 117
13567: PUSH
13568: LD_INT 118
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: ST_TO_ADDR
13585: GO 16472
13587: LD_INT 4
13589: DOUBLE
13590: EQUAL
13591: IFTRUE 13595
13593: GO 13691
13595: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13596: LD_ADDR_VAR 0 2
13600: PUSH
13601: LD_INT 2
13603: PUSH
13604: LD_INT 4
13606: PUSH
13607: LD_INT 5
13609: PUSH
13610: LD_INT 8
13612: PUSH
13613: LD_INT 11
13615: PUSH
13616: LD_INT 12
13618: PUSH
13619: LD_INT 15
13621: PUSH
13622: LD_INT 16
13624: PUSH
13625: LD_INT 22
13627: PUSH
13628: LD_INT 23
13630: PUSH
13631: LD_INT 26
13633: PUSH
13634: LD_INT 36
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: PUSH
13651: LD_INT 101
13653: PUSH
13654: LD_INT 102
13656: PUSH
13657: LD_INT 105
13659: PUSH
13660: LD_INT 106
13662: PUSH
13663: LD_INT 108
13665: PUSH
13666: LD_INT 116
13668: PUSH
13669: LD_INT 117
13671: PUSH
13672: LD_INT 118
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: ST_TO_ADDR
13689: GO 16472
13691: LD_INT 5
13693: DOUBLE
13694: EQUAL
13695: IFTRUE 13699
13697: GO 13811
13699: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13700: LD_ADDR_VAR 0 2
13704: PUSH
13705: LD_INT 2
13707: PUSH
13708: LD_INT 4
13710: PUSH
13711: LD_INT 5
13713: PUSH
13714: LD_INT 6
13716: PUSH
13717: LD_INT 8
13719: PUSH
13720: LD_INT 11
13722: PUSH
13723: LD_INT 12
13725: PUSH
13726: LD_INT 15
13728: PUSH
13729: LD_INT 16
13731: PUSH
13732: LD_INT 22
13734: PUSH
13735: LD_INT 23
13737: PUSH
13738: LD_INT 25
13740: PUSH
13741: LD_INT 26
13743: PUSH
13744: LD_INT 36
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 101
13765: PUSH
13766: LD_INT 102
13768: PUSH
13769: LD_INT 105
13771: PUSH
13772: LD_INT 106
13774: PUSH
13775: LD_INT 108
13777: PUSH
13778: LD_INT 109
13780: PUSH
13781: LD_INT 112
13783: PUSH
13784: LD_INT 116
13786: PUSH
13787: LD_INT 117
13789: PUSH
13790: LD_INT 118
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: ST_TO_ADDR
13809: GO 16472
13811: LD_INT 6
13813: DOUBLE
13814: EQUAL
13815: IFTRUE 13819
13817: GO 13951
13819: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13820: LD_ADDR_VAR 0 2
13824: PUSH
13825: LD_INT 2
13827: PUSH
13828: LD_INT 4
13830: PUSH
13831: LD_INT 5
13833: PUSH
13834: LD_INT 6
13836: PUSH
13837: LD_INT 8
13839: PUSH
13840: LD_INT 11
13842: PUSH
13843: LD_INT 12
13845: PUSH
13846: LD_INT 15
13848: PUSH
13849: LD_INT 16
13851: PUSH
13852: LD_INT 20
13854: PUSH
13855: LD_INT 21
13857: PUSH
13858: LD_INT 22
13860: PUSH
13861: LD_INT 23
13863: PUSH
13864: LD_INT 25
13866: PUSH
13867: LD_INT 26
13869: PUSH
13870: LD_INT 30
13872: PUSH
13873: LD_INT 31
13875: PUSH
13876: LD_INT 32
13878: PUSH
13879: LD_INT 36
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 101
13905: PUSH
13906: LD_INT 102
13908: PUSH
13909: LD_INT 105
13911: PUSH
13912: LD_INT 106
13914: PUSH
13915: LD_INT 108
13917: PUSH
13918: LD_INT 109
13920: PUSH
13921: LD_INT 112
13923: PUSH
13924: LD_INT 116
13926: PUSH
13927: LD_INT 117
13929: PUSH
13930: LD_INT 118
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: ST_TO_ADDR
13949: GO 16472
13951: LD_INT 7
13953: DOUBLE
13954: EQUAL
13955: IFTRUE 13959
13957: GO 14071
13959: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13960: LD_ADDR_VAR 0 2
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: LD_INT 4
13970: PUSH
13971: LD_INT 5
13973: PUSH
13974: LD_INT 7
13976: PUSH
13977: LD_INT 11
13979: PUSH
13980: LD_INT 12
13982: PUSH
13983: LD_INT 15
13985: PUSH
13986: LD_INT 16
13988: PUSH
13989: LD_INT 20
13991: PUSH
13992: LD_INT 21
13994: PUSH
13995: LD_INT 22
13997: PUSH
13998: LD_INT 23
14000: PUSH
14001: LD_INT 25
14003: PUSH
14004: LD_INT 26
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 101
14025: PUSH
14026: LD_INT 102
14028: PUSH
14029: LD_INT 103
14031: PUSH
14032: LD_INT 105
14034: PUSH
14035: LD_INT 106
14037: PUSH
14038: LD_INT 108
14040: PUSH
14041: LD_INT 112
14043: PUSH
14044: LD_INT 116
14046: PUSH
14047: LD_INT 117
14049: PUSH
14050: LD_INT 118
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: ST_TO_ADDR
14069: GO 16472
14071: LD_INT 8
14073: DOUBLE
14074: EQUAL
14075: IFTRUE 14079
14077: GO 14219
14079: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14080: LD_ADDR_VAR 0 2
14084: PUSH
14085: LD_INT 2
14087: PUSH
14088: LD_INT 4
14090: PUSH
14091: LD_INT 5
14093: PUSH
14094: LD_INT 6
14096: PUSH
14097: LD_INT 7
14099: PUSH
14100: LD_INT 8
14102: PUSH
14103: LD_INT 11
14105: PUSH
14106: LD_INT 12
14108: PUSH
14109: LD_INT 15
14111: PUSH
14112: LD_INT 16
14114: PUSH
14115: LD_INT 20
14117: PUSH
14118: LD_INT 21
14120: PUSH
14121: LD_INT 22
14123: PUSH
14124: LD_INT 23
14126: PUSH
14127: LD_INT 25
14129: PUSH
14130: LD_INT 26
14132: PUSH
14133: LD_INT 30
14135: PUSH
14136: LD_INT 31
14138: PUSH
14139: LD_INT 32
14141: PUSH
14142: LD_INT 36
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 101
14169: PUSH
14170: LD_INT 102
14172: PUSH
14173: LD_INT 103
14175: PUSH
14176: LD_INT 105
14178: PUSH
14179: LD_INT 106
14181: PUSH
14182: LD_INT 108
14184: PUSH
14185: LD_INT 109
14187: PUSH
14188: LD_INT 112
14190: PUSH
14191: LD_INT 116
14193: PUSH
14194: LD_INT 117
14196: PUSH
14197: LD_INT 118
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: ST_TO_ADDR
14217: GO 16472
14219: LD_INT 9
14221: DOUBLE
14222: EQUAL
14223: IFTRUE 14227
14225: GO 14375
14227: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14228: LD_ADDR_VAR 0 2
14232: PUSH
14233: LD_INT 2
14235: PUSH
14236: LD_INT 4
14238: PUSH
14239: LD_INT 5
14241: PUSH
14242: LD_INT 6
14244: PUSH
14245: LD_INT 7
14247: PUSH
14248: LD_INT 8
14250: PUSH
14251: LD_INT 11
14253: PUSH
14254: LD_INT 12
14256: PUSH
14257: LD_INT 15
14259: PUSH
14260: LD_INT 16
14262: PUSH
14263: LD_INT 20
14265: PUSH
14266: LD_INT 21
14268: PUSH
14269: LD_INT 22
14271: PUSH
14272: LD_INT 23
14274: PUSH
14275: LD_INT 25
14277: PUSH
14278: LD_INT 26
14280: PUSH
14281: LD_INT 28
14283: PUSH
14284: LD_INT 30
14286: PUSH
14287: LD_INT 31
14289: PUSH
14290: LD_INT 32
14292: PUSH
14293: LD_INT 36
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 101
14321: PUSH
14322: LD_INT 102
14324: PUSH
14325: LD_INT 103
14327: PUSH
14328: LD_INT 105
14330: PUSH
14331: LD_INT 106
14333: PUSH
14334: LD_INT 108
14336: PUSH
14337: LD_INT 109
14339: PUSH
14340: LD_INT 112
14342: PUSH
14343: LD_INT 114
14345: PUSH
14346: LD_INT 116
14348: PUSH
14349: LD_INT 117
14351: PUSH
14352: LD_INT 118
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: ST_TO_ADDR
14373: GO 16472
14375: LD_INT 10
14377: DOUBLE
14378: EQUAL
14379: IFTRUE 14383
14381: GO 14579
14383: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14384: LD_ADDR_VAR 0 2
14388: PUSH
14389: LD_INT 2
14391: PUSH
14392: LD_INT 4
14394: PUSH
14395: LD_INT 5
14397: PUSH
14398: LD_INT 6
14400: PUSH
14401: LD_INT 7
14403: PUSH
14404: LD_INT 8
14406: PUSH
14407: LD_INT 9
14409: PUSH
14410: LD_INT 10
14412: PUSH
14413: LD_INT 11
14415: PUSH
14416: LD_INT 12
14418: PUSH
14419: LD_INT 13
14421: PUSH
14422: LD_INT 14
14424: PUSH
14425: LD_INT 15
14427: PUSH
14428: LD_INT 16
14430: PUSH
14431: LD_INT 17
14433: PUSH
14434: LD_INT 18
14436: PUSH
14437: LD_INT 19
14439: PUSH
14440: LD_INT 20
14442: PUSH
14443: LD_INT 21
14445: PUSH
14446: LD_INT 22
14448: PUSH
14449: LD_INT 23
14451: PUSH
14452: LD_INT 24
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 26
14460: PUSH
14461: LD_INT 28
14463: PUSH
14464: LD_INT 30
14466: PUSH
14467: LD_INT 31
14469: PUSH
14470: LD_INT 32
14472: PUSH
14473: LD_INT 36
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 101
14509: PUSH
14510: LD_INT 102
14512: PUSH
14513: LD_INT 103
14515: PUSH
14516: LD_INT 104
14518: PUSH
14519: LD_INT 105
14521: PUSH
14522: LD_INT 106
14524: PUSH
14525: LD_INT 107
14527: PUSH
14528: LD_INT 108
14530: PUSH
14531: LD_INT 109
14533: PUSH
14534: LD_INT 110
14536: PUSH
14537: LD_INT 111
14539: PUSH
14540: LD_INT 112
14542: PUSH
14543: LD_INT 114
14545: PUSH
14546: LD_INT 116
14548: PUSH
14549: LD_INT 117
14551: PUSH
14552: LD_INT 118
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: ST_TO_ADDR
14577: GO 16472
14579: LD_INT 11
14581: DOUBLE
14582: EQUAL
14583: IFTRUE 14587
14585: GO 14791
14587: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14588: LD_ADDR_VAR 0 2
14592: PUSH
14593: LD_INT 2
14595: PUSH
14596: LD_INT 3
14598: PUSH
14599: LD_INT 4
14601: PUSH
14602: LD_INT 5
14604: PUSH
14605: LD_INT 6
14607: PUSH
14608: LD_INT 7
14610: PUSH
14611: LD_INT 8
14613: PUSH
14614: LD_INT 9
14616: PUSH
14617: LD_INT 10
14619: PUSH
14620: LD_INT 11
14622: PUSH
14623: LD_INT 12
14625: PUSH
14626: LD_INT 13
14628: PUSH
14629: LD_INT 14
14631: PUSH
14632: LD_INT 15
14634: PUSH
14635: LD_INT 16
14637: PUSH
14638: LD_INT 17
14640: PUSH
14641: LD_INT 18
14643: PUSH
14644: LD_INT 19
14646: PUSH
14647: LD_INT 20
14649: PUSH
14650: LD_INT 21
14652: PUSH
14653: LD_INT 22
14655: PUSH
14656: LD_INT 23
14658: PUSH
14659: LD_INT 24
14661: PUSH
14662: LD_INT 25
14664: PUSH
14665: LD_INT 26
14667: PUSH
14668: LD_INT 28
14670: PUSH
14671: LD_INT 30
14673: PUSH
14674: LD_INT 31
14676: PUSH
14677: LD_INT 32
14679: PUSH
14680: LD_INT 34
14682: PUSH
14683: LD_INT 36
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 101
14721: PUSH
14722: LD_INT 102
14724: PUSH
14725: LD_INT 103
14727: PUSH
14728: LD_INT 104
14730: PUSH
14731: LD_INT 105
14733: PUSH
14734: LD_INT 106
14736: PUSH
14737: LD_INT 107
14739: PUSH
14740: LD_INT 108
14742: PUSH
14743: LD_INT 109
14745: PUSH
14746: LD_INT 110
14748: PUSH
14749: LD_INT 111
14751: PUSH
14752: LD_INT 112
14754: PUSH
14755: LD_INT 114
14757: PUSH
14758: LD_INT 116
14760: PUSH
14761: LD_INT 117
14763: PUSH
14764: LD_INT 118
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: ST_TO_ADDR
14789: GO 16472
14791: LD_INT 12
14793: DOUBLE
14794: EQUAL
14795: IFTRUE 14799
14797: GO 15019
14799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14800: LD_ADDR_VAR 0 2
14804: PUSH
14805: LD_INT 1
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: LD_INT 3
14813: PUSH
14814: LD_INT 4
14816: PUSH
14817: LD_INT 5
14819: PUSH
14820: LD_INT 6
14822: PUSH
14823: LD_INT 7
14825: PUSH
14826: LD_INT 8
14828: PUSH
14829: LD_INT 9
14831: PUSH
14832: LD_INT 10
14834: PUSH
14835: LD_INT 11
14837: PUSH
14838: LD_INT 12
14840: PUSH
14841: LD_INT 13
14843: PUSH
14844: LD_INT 14
14846: PUSH
14847: LD_INT 15
14849: PUSH
14850: LD_INT 16
14852: PUSH
14853: LD_INT 17
14855: PUSH
14856: LD_INT 18
14858: PUSH
14859: LD_INT 19
14861: PUSH
14862: LD_INT 20
14864: PUSH
14865: LD_INT 21
14867: PUSH
14868: LD_INT 22
14870: PUSH
14871: LD_INT 23
14873: PUSH
14874: LD_INT 24
14876: PUSH
14877: LD_INT 25
14879: PUSH
14880: LD_INT 26
14882: PUSH
14883: LD_INT 27
14885: PUSH
14886: LD_INT 28
14888: PUSH
14889: LD_INT 30
14891: PUSH
14892: LD_INT 31
14894: PUSH
14895: LD_INT 32
14897: PUSH
14898: LD_INT 33
14900: PUSH
14901: LD_INT 34
14903: PUSH
14904: LD_INT 36
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 101
14945: PUSH
14946: LD_INT 102
14948: PUSH
14949: LD_INT 103
14951: PUSH
14952: LD_INT 104
14954: PUSH
14955: LD_INT 105
14957: PUSH
14958: LD_INT 106
14960: PUSH
14961: LD_INT 107
14963: PUSH
14964: LD_INT 108
14966: PUSH
14967: LD_INT 109
14969: PUSH
14970: LD_INT 110
14972: PUSH
14973: LD_INT 111
14975: PUSH
14976: LD_INT 112
14978: PUSH
14979: LD_INT 113
14981: PUSH
14982: LD_INT 114
14984: PUSH
14985: LD_INT 116
14987: PUSH
14988: LD_INT 117
14990: PUSH
14991: LD_INT 118
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: ST_TO_ADDR
15017: GO 16472
15019: LD_INT 13
15021: DOUBLE
15022: EQUAL
15023: IFTRUE 15027
15025: GO 15235
15027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: LD_INT 1
15035: PUSH
15036: LD_INT 2
15038: PUSH
15039: LD_INT 3
15041: PUSH
15042: LD_INT 4
15044: PUSH
15045: LD_INT 5
15047: PUSH
15048: LD_INT 8
15050: PUSH
15051: LD_INT 9
15053: PUSH
15054: LD_INT 10
15056: PUSH
15057: LD_INT 11
15059: PUSH
15060: LD_INT 12
15062: PUSH
15063: LD_INT 14
15065: PUSH
15066: LD_INT 15
15068: PUSH
15069: LD_INT 16
15071: PUSH
15072: LD_INT 17
15074: PUSH
15075: LD_INT 18
15077: PUSH
15078: LD_INT 19
15080: PUSH
15081: LD_INT 20
15083: PUSH
15084: LD_INT 21
15086: PUSH
15087: LD_INT 22
15089: PUSH
15090: LD_INT 23
15092: PUSH
15093: LD_INT 24
15095: PUSH
15096: LD_INT 25
15098: PUSH
15099: LD_INT 26
15101: PUSH
15102: LD_INT 27
15104: PUSH
15105: LD_INT 28
15107: PUSH
15108: LD_INT 30
15110: PUSH
15111: LD_INT 31
15113: PUSH
15114: LD_INT 32
15116: PUSH
15117: LD_INT 33
15119: PUSH
15120: LD_INT 34
15122: PUSH
15123: LD_INT 36
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 101
15161: PUSH
15162: LD_INT 102
15164: PUSH
15165: LD_INT 103
15167: PUSH
15168: LD_INT 104
15170: PUSH
15171: LD_INT 105
15173: PUSH
15174: LD_INT 106
15176: PUSH
15177: LD_INT 107
15179: PUSH
15180: LD_INT 108
15182: PUSH
15183: LD_INT 109
15185: PUSH
15186: LD_INT 110
15188: PUSH
15189: LD_INT 111
15191: PUSH
15192: LD_INT 112
15194: PUSH
15195: LD_INT 113
15197: PUSH
15198: LD_INT 114
15200: PUSH
15201: LD_INT 116
15203: PUSH
15204: LD_INT 117
15206: PUSH
15207: LD_INT 118
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: ST_TO_ADDR
15233: GO 16472
15235: LD_INT 14
15237: DOUBLE
15238: EQUAL
15239: IFTRUE 15243
15241: GO 15467
15243: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15244: LD_ADDR_VAR 0 2
15248: PUSH
15249: LD_INT 1
15251: PUSH
15252: LD_INT 2
15254: PUSH
15255: LD_INT 3
15257: PUSH
15258: LD_INT 4
15260: PUSH
15261: LD_INT 5
15263: PUSH
15264: LD_INT 6
15266: PUSH
15267: LD_INT 7
15269: PUSH
15270: LD_INT 8
15272: PUSH
15273: LD_INT 9
15275: PUSH
15276: LD_INT 10
15278: PUSH
15279: LD_INT 11
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: LD_INT 13
15287: PUSH
15288: LD_INT 14
15290: PUSH
15291: LD_INT 15
15293: PUSH
15294: LD_INT 16
15296: PUSH
15297: LD_INT 17
15299: PUSH
15300: LD_INT 18
15302: PUSH
15303: LD_INT 19
15305: PUSH
15306: LD_INT 20
15308: PUSH
15309: LD_INT 21
15311: PUSH
15312: LD_INT 22
15314: PUSH
15315: LD_INT 23
15317: PUSH
15318: LD_INT 24
15320: PUSH
15321: LD_INT 25
15323: PUSH
15324: LD_INT 26
15326: PUSH
15327: LD_INT 27
15329: PUSH
15330: LD_INT 28
15332: PUSH
15333: LD_INT 29
15335: PUSH
15336: LD_INT 30
15338: PUSH
15339: LD_INT 31
15341: PUSH
15342: LD_INT 32
15344: PUSH
15345: LD_INT 33
15347: PUSH
15348: LD_INT 34
15350: PUSH
15351: LD_INT 36
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 101
15393: PUSH
15394: LD_INT 102
15396: PUSH
15397: LD_INT 103
15399: PUSH
15400: LD_INT 104
15402: PUSH
15403: LD_INT 105
15405: PUSH
15406: LD_INT 106
15408: PUSH
15409: LD_INT 107
15411: PUSH
15412: LD_INT 108
15414: PUSH
15415: LD_INT 109
15417: PUSH
15418: LD_INT 110
15420: PUSH
15421: LD_INT 111
15423: PUSH
15424: LD_INT 112
15426: PUSH
15427: LD_INT 113
15429: PUSH
15430: LD_INT 114
15432: PUSH
15433: LD_INT 116
15435: PUSH
15436: LD_INT 117
15438: PUSH
15439: LD_INT 118
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: ST_TO_ADDR
15465: GO 16472
15467: LD_INT 15
15469: DOUBLE
15470: EQUAL
15471: IFTRUE 15475
15473: GO 15699
15475: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15476: LD_ADDR_VAR 0 2
15480: PUSH
15481: LD_INT 1
15483: PUSH
15484: LD_INT 2
15486: PUSH
15487: LD_INT 3
15489: PUSH
15490: LD_INT 4
15492: PUSH
15493: LD_INT 5
15495: PUSH
15496: LD_INT 6
15498: PUSH
15499: LD_INT 7
15501: PUSH
15502: LD_INT 8
15504: PUSH
15505: LD_INT 9
15507: PUSH
15508: LD_INT 10
15510: PUSH
15511: LD_INT 11
15513: PUSH
15514: LD_INT 12
15516: PUSH
15517: LD_INT 13
15519: PUSH
15520: LD_INT 14
15522: PUSH
15523: LD_INT 15
15525: PUSH
15526: LD_INT 16
15528: PUSH
15529: LD_INT 17
15531: PUSH
15532: LD_INT 18
15534: PUSH
15535: LD_INT 19
15537: PUSH
15538: LD_INT 20
15540: PUSH
15541: LD_INT 21
15543: PUSH
15544: LD_INT 22
15546: PUSH
15547: LD_INT 23
15549: PUSH
15550: LD_INT 24
15552: PUSH
15553: LD_INT 25
15555: PUSH
15556: LD_INT 26
15558: PUSH
15559: LD_INT 27
15561: PUSH
15562: LD_INT 28
15564: PUSH
15565: LD_INT 29
15567: PUSH
15568: LD_INT 30
15570: PUSH
15571: LD_INT 31
15573: PUSH
15574: LD_INT 32
15576: PUSH
15577: LD_INT 33
15579: PUSH
15580: LD_INT 34
15582: PUSH
15583: LD_INT 36
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 101
15625: PUSH
15626: LD_INT 102
15628: PUSH
15629: LD_INT 103
15631: PUSH
15632: LD_INT 104
15634: PUSH
15635: LD_INT 105
15637: PUSH
15638: LD_INT 106
15640: PUSH
15641: LD_INT 107
15643: PUSH
15644: LD_INT 108
15646: PUSH
15647: LD_INT 109
15649: PUSH
15650: LD_INT 110
15652: PUSH
15653: LD_INT 111
15655: PUSH
15656: LD_INT 112
15658: PUSH
15659: LD_INT 113
15661: PUSH
15662: LD_INT 114
15664: PUSH
15665: LD_INT 116
15667: PUSH
15668: LD_INT 117
15670: PUSH
15671: LD_INT 118
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: ST_TO_ADDR
15697: GO 16472
15699: LD_INT 16
15701: DOUBLE
15702: EQUAL
15703: IFTRUE 15707
15705: GO 15843
15707: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15708: LD_ADDR_VAR 0 2
15712: PUSH
15713: LD_INT 2
15715: PUSH
15716: LD_INT 4
15718: PUSH
15719: LD_INT 5
15721: PUSH
15722: LD_INT 7
15724: PUSH
15725: LD_INT 11
15727: PUSH
15728: LD_INT 12
15730: PUSH
15731: LD_INT 15
15733: PUSH
15734: LD_INT 16
15736: PUSH
15737: LD_INT 20
15739: PUSH
15740: LD_INT 21
15742: PUSH
15743: LD_INT 22
15745: PUSH
15746: LD_INT 23
15748: PUSH
15749: LD_INT 25
15751: PUSH
15752: LD_INT 26
15754: PUSH
15755: LD_INT 30
15757: PUSH
15758: LD_INT 31
15760: PUSH
15761: LD_INT 32
15763: PUSH
15764: LD_INT 33
15766: PUSH
15767: LD_INT 34
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 101
15793: PUSH
15794: LD_INT 102
15796: PUSH
15797: LD_INT 103
15799: PUSH
15800: LD_INT 106
15802: PUSH
15803: LD_INT 108
15805: PUSH
15806: LD_INT 112
15808: PUSH
15809: LD_INT 113
15811: PUSH
15812: LD_INT 114
15814: PUSH
15815: LD_INT 116
15817: PUSH
15818: LD_INT 117
15820: PUSH
15821: LD_INT 118
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: ST_TO_ADDR
15841: GO 16472
15843: LD_INT 17
15845: DOUBLE
15846: EQUAL
15847: IFTRUE 15851
15849: GO 16075
15851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15852: LD_ADDR_VAR 0 2
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: LD_INT 2
15862: PUSH
15863: LD_INT 3
15865: PUSH
15866: LD_INT 4
15868: PUSH
15869: LD_INT 5
15871: PUSH
15872: LD_INT 6
15874: PUSH
15875: LD_INT 7
15877: PUSH
15878: LD_INT 8
15880: PUSH
15881: LD_INT 9
15883: PUSH
15884: LD_INT 10
15886: PUSH
15887: LD_INT 11
15889: PUSH
15890: LD_INT 12
15892: PUSH
15893: LD_INT 13
15895: PUSH
15896: LD_INT 14
15898: PUSH
15899: LD_INT 15
15901: PUSH
15902: LD_INT 16
15904: PUSH
15905: LD_INT 17
15907: PUSH
15908: LD_INT 18
15910: PUSH
15911: LD_INT 19
15913: PUSH
15914: LD_INT 20
15916: PUSH
15917: LD_INT 21
15919: PUSH
15920: LD_INT 22
15922: PUSH
15923: LD_INT 23
15925: PUSH
15926: LD_INT 24
15928: PUSH
15929: LD_INT 25
15931: PUSH
15932: LD_INT 26
15934: PUSH
15935: LD_INT 27
15937: PUSH
15938: LD_INT 28
15940: PUSH
15941: LD_INT 29
15943: PUSH
15944: LD_INT 30
15946: PUSH
15947: LD_INT 31
15949: PUSH
15950: LD_INT 32
15952: PUSH
15953: LD_INT 33
15955: PUSH
15956: LD_INT 34
15958: PUSH
15959: LD_INT 36
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 101
16001: PUSH
16002: LD_INT 102
16004: PUSH
16005: LD_INT 103
16007: PUSH
16008: LD_INT 104
16010: PUSH
16011: LD_INT 105
16013: PUSH
16014: LD_INT 106
16016: PUSH
16017: LD_INT 107
16019: PUSH
16020: LD_INT 108
16022: PUSH
16023: LD_INT 109
16025: PUSH
16026: LD_INT 110
16028: PUSH
16029: LD_INT 111
16031: PUSH
16032: LD_INT 112
16034: PUSH
16035: LD_INT 113
16037: PUSH
16038: LD_INT 114
16040: PUSH
16041: LD_INT 116
16043: PUSH
16044: LD_INT 117
16046: PUSH
16047: LD_INT 118
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: ST_TO_ADDR
16073: GO 16472
16075: LD_INT 18
16077: DOUBLE
16078: EQUAL
16079: IFTRUE 16083
16081: GO 16231
16083: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16084: LD_ADDR_VAR 0 2
16088: PUSH
16089: LD_INT 2
16091: PUSH
16092: LD_INT 4
16094: PUSH
16095: LD_INT 5
16097: PUSH
16098: LD_INT 7
16100: PUSH
16101: LD_INT 11
16103: PUSH
16104: LD_INT 12
16106: PUSH
16107: LD_INT 15
16109: PUSH
16110: LD_INT 16
16112: PUSH
16113: LD_INT 20
16115: PUSH
16116: LD_INT 21
16118: PUSH
16119: LD_INT 22
16121: PUSH
16122: LD_INT 23
16124: PUSH
16125: LD_INT 25
16127: PUSH
16128: LD_INT 26
16130: PUSH
16131: LD_INT 30
16133: PUSH
16134: LD_INT 31
16136: PUSH
16137: LD_INT 32
16139: PUSH
16140: LD_INT 33
16142: PUSH
16143: LD_INT 34
16145: PUSH
16146: LD_INT 35
16148: PUSH
16149: LD_INT 36
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 101
16177: PUSH
16178: LD_INT 102
16180: PUSH
16181: LD_INT 103
16183: PUSH
16184: LD_INT 106
16186: PUSH
16187: LD_INT 108
16189: PUSH
16190: LD_INT 112
16192: PUSH
16193: LD_INT 113
16195: PUSH
16196: LD_INT 114
16198: PUSH
16199: LD_INT 115
16201: PUSH
16202: LD_INT 116
16204: PUSH
16205: LD_INT 117
16207: PUSH
16208: LD_INT 118
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: ST_TO_ADDR
16229: GO 16472
16231: LD_INT 19
16233: DOUBLE
16234: EQUAL
16235: IFTRUE 16239
16237: GO 16471
16239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16240: LD_ADDR_VAR 0 2
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: LD_INT 2
16250: PUSH
16251: LD_INT 3
16253: PUSH
16254: LD_INT 4
16256: PUSH
16257: LD_INT 5
16259: PUSH
16260: LD_INT 6
16262: PUSH
16263: LD_INT 7
16265: PUSH
16266: LD_INT 8
16268: PUSH
16269: LD_INT 9
16271: PUSH
16272: LD_INT 10
16274: PUSH
16275: LD_INT 11
16277: PUSH
16278: LD_INT 12
16280: PUSH
16281: LD_INT 13
16283: PUSH
16284: LD_INT 14
16286: PUSH
16287: LD_INT 15
16289: PUSH
16290: LD_INT 16
16292: PUSH
16293: LD_INT 17
16295: PUSH
16296: LD_INT 18
16298: PUSH
16299: LD_INT 19
16301: PUSH
16302: LD_INT 20
16304: PUSH
16305: LD_INT 21
16307: PUSH
16308: LD_INT 22
16310: PUSH
16311: LD_INT 23
16313: PUSH
16314: LD_INT 24
16316: PUSH
16317: LD_INT 25
16319: PUSH
16320: LD_INT 26
16322: PUSH
16323: LD_INT 27
16325: PUSH
16326: LD_INT 28
16328: PUSH
16329: LD_INT 29
16331: PUSH
16332: LD_INT 30
16334: PUSH
16335: LD_INT 31
16337: PUSH
16338: LD_INT 32
16340: PUSH
16341: LD_INT 33
16343: PUSH
16344: LD_INT 34
16346: PUSH
16347: LD_INT 35
16349: PUSH
16350: LD_INT 36
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 101
16393: PUSH
16394: LD_INT 102
16396: PUSH
16397: LD_INT 103
16399: PUSH
16400: LD_INT 104
16402: PUSH
16403: LD_INT 105
16405: PUSH
16406: LD_INT 106
16408: PUSH
16409: LD_INT 107
16411: PUSH
16412: LD_INT 108
16414: PUSH
16415: LD_INT 109
16417: PUSH
16418: LD_INT 110
16420: PUSH
16421: LD_INT 111
16423: PUSH
16424: LD_INT 112
16426: PUSH
16427: LD_INT 113
16429: PUSH
16430: LD_INT 114
16432: PUSH
16433: LD_INT 115
16435: PUSH
16436: LD_INT 116
16438: PUSH
16439: LD_INT 117
16441: PUSH
16442: LD_INT 118
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: ST_TO_ADDR
16469: GO 16472
16471: POP
// end else
16472: GO 16703
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16474: LD_ADDR_VAR 0 2
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: LD_INT 3
16487: PUSH
16488: LD_INT 4
16490: PUSH
16491: LD_INT 5
16493: PUSH
16494: LD_INT 6
16496: PUSH
16497: LD_INT 7
16499: PUSH
16500: LD_INT 8
16502: PUSH
16503: LD_INT 9
16505: PUSH
16506: LD_INT 10
16508: PUSH
16509: LD_INT 11
16511: PUSH
16512: LD_INT 12
16514: PUSH
16515: LD_INT 13
16517: PUSH
16518: LD_INT 14
16520: PUSH
16521: LD_INT 15
16523: PUSH
16524: LD_INT 16
16526: PUSH
16527: LD_INT 17
16529: PUSH
16530: LD_INT 18
16532: PUSH
16533: LD_INT 19
16535: PUSH
16536: LD_INT 20
16538: PUSH
16539: LD_INT 21
16541: PUSH
16542: LD_INT 22
16544: PUSH
16545: LD_INT 23
16547: PUSH
16548: LD_INT 24
16550: PUSH
16551: LD_INT 25
16553: PUSH
16554: LD_INT 26
16556: PUSH
16557: LD_INT 27
16559: PUSH
16560: LD_INT 28
16562: PUSH
16563: LD_INT 29
16565: PUSH
16566: LD_INT 30
16568: PUSH
16569: LD_INT 31
16571: PUSH
16572: LD_INT 32
16574: PUSH
16575: LD_INT 33
16577: PUSH
16578: LD_INT 34
16580: PUSH
16581: LD_INT 35
16583: PUSH
16584: LD_INT 36
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 101
16627: PUSH
16628: LD_INT 102
16630: PUSH
16631: LD_INT 103
16633: PUSH
16634: LD_INT 104
16636: PUSH
16637: LD_INT 105
16639: PUSH
16640: LD_INT 106
16642: PUSH
16643: LD_INT 107
16645: PUSH
16646: LD_INT 108
16648: PUSH
16649: LD_INT 109
16651: PUSH
16652: LD_INT 110
16654: PUSH
16655: LD_INT 111
16657: PUSH
16658: LD_INT 112
16660: PUSH
16661: LD_INT 113
16663: PUSH
16664: LD_INT 114
16666: PUSH
16667: LD_INT 115
16669: PUSH
16670: LD_INT 116
16672: PUSH
16673: LD_INT 117
16675: PUSH
16676: LD_INT 118
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: ST_TO_ADDR
// if result then
16703: LD_VAR 0 2
16707: IFFALSE 17493
// begin normal :=  ;
16709: LD_ADDR_VAR 0 5
16713: PUSH
16714: LD_STRING 
16716: ST_TO_ADDR
// hardcore :=  ;
16717: LD_ADDR_VAR 0 6
16721: PUSH
16722: LD_STRING 
16724: ST_TO_ADDR
// active :=  ;
16725: LD_ADDR_VAR 0 7
16729: PUSH
16730: LD_STRING 
16732: ST_TO_ADDR
// for i = 1 to normalCounter do
16733: LD_ADDR_VAR 0 8
16737: PUSH
16738: DOUBLE
16739: LD_INT 1
16741: DEC
16742: ST_TO_ADDR
16743: LD_EXP 40
16747: PUSH
16748: FOR_TO
16749: IFFALSE 16850
// begin tmp := 0 ;
16751: LD_ADDR_VAR 0 3
16755: PUSH
16756: LD_STRING 0
16758: ST_TO_ADDR
// if result [ 1 ] then
16759: LD_VAR 0 2
16763: PUSH
16764: LD_INT 1
16766: ARRAY
16767: IFFALSE 16832
// if result [ 1 ] [ 1 ] = i then
16769: LD_VAR 0 2
16773: PUSH
16774: LD_INT 1
16776: ARRAY
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PUSH
16782: LD_VAR 0 8
16786: EQUAL
16787: IFFALSE 16832
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16789: LD_ADDR_VAR 0 2
16793: PUSH
16794: LD_VAR 0 2
16798: PPUSH
16799: LD_INT 1
16801: PPUSH
16802: LD_VAR 0 2
16806: PUSH
16807: LD_INT 1
16809: ARRAY
16810: PPUSH
16811: LD_INT 1
16813: PPUSH
16814: CALL_OW 3
16818: PPUSH
16819: CALL_OW 1
16823: ST_TO_ADDR
// tmp := 1 ;
16824: LD_ADDR_VAR 0 3
16828: PUSH
16829: LD_STRING 1
16831: ST_TO_ADDR
// end ; normal := normal & tmp ;
16832: LD_ADDR_VAR 0 5
16836: PUSH
16837: LD_VAR 0 5
16841: PUSH
16842: LD_VAR 0 3
16846: STR
16847: ST_TO_ADDR
// end ;
16848: GO 16748
16850: POP
16851: POP
// for i = 1 to hardcoreCounter do
16852: LD_ADDR_VAR 0 8
16856: PUSH
16857: DOUBLE
16858: LD_INT 1
16860: DEC
16861: ST_TO_ADDR
16862: LD_EXP 41
16866: PUSH
16867: FOR_TO
16868: IFFALSE 16973
// begin tmp := 0 ;
16870: LD_ADDR_VAR 0 3
16874: PUSH
16875: LD_STRING 0
16877: ST_TO_ADDR
// if result [ 2 ] then
16878: LD_VAR 0 2
16882: PUSH
16883: LD_INT 2
16885: ARRAY
16886: IFFALSE 16955
// if result [ 2 ] [ 1 ] = 100 + i then
16888: LD_VAR 0 2
16892: PUSH
16893: LD_INT 2
16895: ARRAY
16896: PUSH
16897: LD_INT 1
16899: ARRAY
16900: PUSH
16901: LD_INT 100
16903: PUSH
16904: LD_VAR 0 8
16908: PLUS
16909: EQUAL
16910: IFFALSE 16955
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16912: LD_ADDR_VAR 0 2
16916: PUSH
16917: LD_VAR 0 2
16921: PPUSH
16922: LD_INT 2
16924: PPUSH
16925: LD_VAR 0 2
16929: PUSH
16930: LD_INT 2
16932: ARRAY
16933: PPUSH
16934: LD_INT 1
16936: PPUSH
16937: CALL_OW 3
16941: PPUSH
16942: CALL_OW 1
16946: ST_TO_ADDR
// tmp := 1 ;
16947: LD_ADDR_VAR 0 3
16951: PUSH
16952: LD_STRING 1
16954: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16955: LD_ADDR_VAR 0 6
16959: PUSH
16960: LD_VAR 0 6
16964: PUSH
16965: LD_VAR 0 3
16969: STR
16970: ST_TO_ADDR
// end ;
16971: GO 16867
16973: POP
16974: POP
// if isGameLoad then
16975: LD_VAR 0 1
16979: IFFALSE 17454
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16981: LD_ADDR_VAR 0 4
16985: PUSH
16986: LD_EXP 44
16990: PUSH
16991: LD_EXP 43
16995: PUSH
16996: LD_EXP 45
17000: PUSH
17001: LD_EXP 42
17005: PUSH
17006: LD_EXP 46
17010: PUSH
17011: LD_EXP 47
17015: PUSH
17016: LD_EXP 48
17020: PUSH
17021: LD_EXP 49
17025: PUSH
17026: LD_EXP 50
17030: PUSH
17031: LD_EXP 51
17035: PUSH
17036: LD_EXP 52
17040: PUSH
17041: LD_EXP 53
17045: PUSH
17046: LD_EXP 54
17050: PUSH
17051: LD_EXP 55
17055: PUSH
17056: LD_EXP 63
17060: PUSH
17061: LD_EXP 64
17065: PUSH
17066: LD_EXP 65
17070: PUSH
17071: LD_EXP 66
17075: PUSH
17076: LD_EXP 68
17080: PUSH
17081: LD_EXP 69
17085: PUSH
17086: LD_EXP 70
17090: PUSH
17091: LD_EXP 73
17095: PUSH
17096: LD_EXP 75
17100: PUSH
17101: LD_EXP 76
17105: PUSH
17106: LD_EXP 77
17110: PUSH
17111: LD_EXP 79
17115: PUSH
17116: LD_EXP 80
17120: PUSH
17121: LD_EXP 83
17125: PUSH
17126: LD_EXP 84
17130: PUSH
17131: LD_EXP 85
17135: PUSH
17136: LD_EXP 86
17140: PUSH
17141: LD_EXP 87
17145: PUSH
17146: LD_EXP 88
17150: PUSH
17151: LD_EXP 89
17155: PUSH
17156: LD_EXP 90
17160: PUSH
17161: LD_EXP 91
17165: PUSH
17166: LD_EXP 56
17170: PUSH
17171: LD_EXP 57
17175: PUSH
17176: LD_EXP 60
17180: PUSH
17181: LD_EXP 61
17185: PUSH
17186: LD_EXP 62
17190: PUSH
17191: LD_EXP 58
17195: PUSH
17196: LD_EXP 59
17200: PUSH
17201: LD_EXP 67
17205: PUSH
17206: LD_EXP 71
17210: PUSH
17211: LD_EXP 72
17215: PUSH
17216: LD_EXP 74
17220: PUSH
17221: LD_EXP 78
17225: PUSH
17226: LD_EXP 81
17230: PUSH
17231: LD_EXP 82
17235: PUSH
17236: LD_EXP 92
17240: PUSH
17241: LD_EXP 93
17245: PUSH
17246: LD_EXP 94
17250: PUSH
17251: LD_EXP 95
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: ST_TO_ADDR
// tmp :=  ;
17312: LD_ADDR_VAR 0 3
17316: PUSH
17317: LD_STRING 
17319: ST_TO_ADDR
// for i = 1 to normalCounter do
17320: LD_ADDR_VAR 0 8
17324: PUSH
17325: DOUBLE
17326: LD_INT 1
17328: DEC
17329: ST_TO_ADDR
17330: LD_EXP 40
17334: PUSH
17335: FOR_TO
17336: IFFALSE 17372
// begin if flags [ i ] then
17338: LD_VAR 0 4
17342: PUSH
17343: LD_VAR 0 8
17347: ARRAY
17348: IFFALSE 17370
// tmp := tmp & i & ; ;
17350: LD_ADDR_VAR 0 3
17354: PUSH
17355: LD_VAR 0 3
17359: PUSH
17360: LD_VAR 0 8
17364: STR
17365: PUSH
17366: LD_STRING ;
17368: STR
17369: ST_TO_ADDR
// end ;
17370: GO 17335
17372: POP
17373: POP
// for i = 1 to hardcoreCounter do
17374: LD_ADDR_VAR 0 8
17378: PUSH
17379: DOUBLE
17380: LD_INT 1
17382: DEC
17383: ST_TO_ADDR
17384: LD_EXP 41
17388: PUSH
17389: FOR_TO
17390: IFFALSE 17436
// begin if flags [ normalCounter + i ] then
17392: LD_VAR 0 4
17396: PUSH
17397: LD_EXP 40
17401: PUSH
17402: LD_VAR 0 8
17406: PLUS
17407: ARRAY
17408: IFFALSE 17434
// tmp := tmp & ( 100 + i ) & ; ;
17410: LD_ADDR_VAR 0 3
17414: PUSH
17415: LD_VAR 0 3
17419: PUSH
17420: LD_INT 100
17422: PUSH
17423: LD_VAR 0 8
17427: PLUS
17428: STR
17429: PUSH
17430: LD_STRING ;
17432: STR
17433: ST_TO_ADDR
// end ;
17434: GO 17389
17436: POP
17437: POP
// if tmp then
17438: LD_VAR 0 3
17442: IFFALSE 17454
// active := tmp ;
17444: LD_ADDR_VAR 0 7
17448: PUSH
17449: LD_VAR 0 3
17453: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17454: LD_STRING getStreamItemsFromMission("
17456: PUSH
17457: LD_VAR 0 5
17461: STR
17462: PUSH
17463: LD_STRING ","
17465: STR
17466: PUSH
17467: LD_VAR 0 6
17471: STR
17472: PUSH
17473: LD_STRING ","
17475: STR
17476: PUSH
17477: LD_VAR 0 7
17481: STR
17482: PUSH
17483: LD_STRING ")
17485: STR
17486: PPUSH
17487: CALL_OW 559
// end else
17491: GO 17500
// ToLua ( getStreamItemsFromMission("","","") ) ;
17493: LD_STRING getStreamItemsFromMission("","","")
17495: PPUSH
17496: CALL_OW 559
// end ;
17500: LD_VAR 0 2
17504: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17505: LD_EXP 39
17509: PUSH
17510: LD_EXP 44
17514: AND
17515: IFFALSE 17639
17517: GO 17519
17519: DISABLE
17520: LD_INT 0
17522: PPUSH
17523: PPUSH
// begin enable ;
17524: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17525: LD_ADDR_VAR 0 2
17529: PUSH
17530: LD_INT 22
17532: PUSH
17533: LD_OWVAR 2
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: LD_INT 34
17547: PUSH
17548: LD_INT 7
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 34
17557: PUSH
17558: LD_INT 45
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 34
17567: PUSH
17568: LD_INT 28
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 34
17577: PUSH
17578: LD_INT 47
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 69
17600: ST_TO_ADDR
// if not tmp then
17601: LD_VAR 0 2
17605: NOT
17606: IFFALSE 17610
// exit ;
17608: GO 17639
// for i in tmp do
17610: LD_ADDR_VAR 0 1
17614: PUSH
17615: LD_VAR 0 2
17619: PUSH
17620: FOR_IN
17621: IFFALSE 17637
// begin SetLives ( i , 0 ) ;
17623: LD_VAR 0 1
17627: PPUSH
17628: LD_INT 0
17630: PPUSH
17631: CALL_OW 234
// end ;
17635: GO 17620
17637: POP
17638: POP
// end ;
17639: PPOPN 2
17641: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17642: LD_EXP 39
17646: PUSH
17647: LD_EXP 45
17651: AND
17652: IFFALSE 17736
17654: GO 17656
17656: DISABLE
17657: LD_INT 0
17659: PPUSH
17660: PPUSH
// begin enable ;
17661: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17662: LD_ADDR_VAR 0 2
17666: PUSH
17667: LD_INT 22
17669: PUSH
17670: LD_OWVAR 2
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 32
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PPUSH
17693: CALL_OW 69
17697: ST_TO_ADDR
// if not tmp then
17698: LD_VAR 0 2
17702: NOT
17703: IFFALSE 17707
// exit ;
17705: GO 17736
// for i in tmp do
17707: LD_ADDR_VAR 0 1
17711: PUSH
17712: LD_VAR 0 2
17716: PUSH
17717: FOR_IN
17718: IFFALSE 17734
// begin SetLives ( i , 0 ) ;
17720: LD_VAR 0 1
17724: PPUSH
17725: LD_INT 0
17727: PPUSH
17728: CALL_OW 234
// end ;
17732: GO 17717
17734: POP
17735: POP
// end ;
17736: PPOPN 2
17738: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17739: LD_EXP 39
17743: PUSH
17744: LD_EXP 42
17748: AND
17749: IFFALSE 17842
17751: GO 17753
17753: DISABLE
17754: LD_INT 0
17756: PPUSH
// begin enable ;
17757: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17758: LD_ADDR_VAR 0 1
17762: PUSH
17763: LD_INT 22
17765: PUSH
17766: LD_OWVAR 2
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 2
17777: PUSH
17778: LD_INT 25
17780: PUSH
17781: LD_INT 5
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 25
17790: PUSH
17791: LD_INT 9
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 25
17800: PUSH
17801: LD_INT 8
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PPUSH
17818: CALL_OW 69
17822: PUSH
17823: FOR_IN
17824: IFFALSE 17840
// begin SetClass ( i , 1 ) ;
17826: LD_VAR 0 1
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: CALL_OW 336
// end ;
17838: GO 17823
17840: POP
17841: POP
// end ;
17842: PPOPN 1
17844: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17845: LD_EXP 39
17849: PUSH
17850: LD_EXP 43
17854: AND
17855: PUSH
17856: LD_OWVAR 65
17860: PUSH
17861: LD_INT 7
17863: LESS
17864: AND
17865: IFFALSE 17879
17867: GO 17869
17869: DISABLE
// begin enable ;
17870: ENABLE
// game_speed := 7 ;
17871: LD_ADDR_OWVAR 65
17875: PUSH
17876: LD_INT 7
17878: ST_TO_ADDR
// end ;
17879: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17880: LD_EXP 39
17884: PUSH
17885: LD_EXP 46
17889: AND
17890: IFFALSE 18092
17892: GO 17894
17894: DISABLE
17895: LD_INT 0
17897: PPUSH
17898: PPUSH
17899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17900: LD_ADDR_VAR 0 3
17904: PUSH
17905: LD_INT 81
17907: PUSH
17908: LD_OWVAR 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 21
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PPUSH
17931: CALL_OW 69
17935: ST_TO_ADDR
// if not tmp then
17936: LD_VAR 0 3
17940: NOT
17941: IFFALSE 17945
// exit ;
17943: GO 18092
// if tmp > 5 then
17945: LD_VAR 0 3
17949: PUSH
17950: LD_INT 5
17952: GREATER
17953: IFFALSE 17965
// k := 5 else
17955: LD_ADDR_VAR 0 2
17959: PUSH
17960: LD_INT 5
17962: ST_TO_ADDR
17963: GO 17975
// k := tmp ;
17965: LD_ADDR_VAR 0 2
17969: PUSH
17970: LD_VAR 0 3
17974: ST_TO_ADDR
// for i := 1 to k do
17975: LD_ADDR_VAR 0 1
17979: PUSH
17980: DOUBLE
17981: LD_INT 1
17983: DEC
17984: ST_TO_ADDR
17985: LD_VAR 0 2
17989: PUSH
17990: FOR_TO
17991: IFFALSE 18090
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17993: LD_VAR 0 3
17997: PUSH
17998: LD_VAR 0 1
18002: ARRAY
18003: PPUSH
18004: LD_VAR 0 1
18008: PUSH
18009: LD_INT 4
18011: MOD
18012: PUSH
18013: LD_INT 1
18015: PLUS
18016: PPUSH
18017: CALL_OW 259
18021: PUSH
18022: LD_INT 10
18024: LESS
18025: IFFALSE 18088
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18027: LD_VAR 0 3
18031: PUSH
18032: LD_VAR 0 1
18036: ARRAY
18037: PPUSH
18038: LD_VAR 0 1
18042: PUSH
18043: LD_INT 4
18045: MOD
18046: PUSH
18047: LD_INT 1
18049: PLUS
18050: PPUSH
18051: LD_VAR 0 3
18055: PUSH
18056: LD_VAR 0 1
18060: ARRAY
18061: PPUSH
18062: LD_VAR 0 1
18066: PUSH
18067: LD_INT 4
18069: MOD
18070: PUSH
18071: LD_INT 1
18073: PLUS
18074: PPUSH
18075: CALL_OW 259
18079: PUSH
18080: LD_INT 1
18082: PLUS
18083: PPUSH
18084: CALL_OW 237
18088: GO 17990
18090: POP
18091: POP
// end ;
18092: PPOPN 3
18094: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18095: LD_EXP 39
18099: PUSH
18100: LD_EXP 47
18104: AND
18105: IFFALSE 18125
18107: GO 18109
18109: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18110: LD_INT 4
18112: PPUSH
18113: LD_OWVAR 2
18117: PPUSH
18118: LD_INT 0
18120: PPUSH
18121: CALL_OW 324
18125: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18126: LD_EXP 39
18130: PUSH
18131: LD_EXP 76
18135: AND
18136: IFFALSE 18156
18138: GO 18140
18140: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18141: LD_INT 19
18143: PPUSH
18144: LD_OWVAR 2
18148: PPUSH
18149: LD_INT 0
18151: PPUSH
18152: CALL_OW 324
18156: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18157: LD_EXP 39
18161: PUSH
18162: LD_EXP 48
18166: AND
18167: IFFALSE 18269
18169: GO 18171
18171: DISABLE
18172: LD_INT 0
18174: PPUSH
18175: PPUSH
// begin enable ;
18176: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18177: LD_ADDR_VAR 0 2
18181: PUSH
18182: LD_INT 22
18184: PUSH
18185: LD_OWVAR 2
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: LD_INT 34
18199: PUSH
18200: LD_INT 11
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 34
18209: PUSH
18210: LD_INT 30
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PPUSH
18226: CALL_OW 69
18230: ST_TO_ADDR
// if not tmp then
18231: LD_VAR 0 2
18235: NOT
18236: IFFALSE 18240
// exit ;
18238: GO 18269
// for i in tmp do
18240: LD_ADDR_VAR 0 1
18244: PUSH
18245: LD_VAR 0 2
18249: PUSH
18250: FOR_IN
18251: IFFALSE 18267
// begin SetLives ( i , 0 ) ;
18253: LD_VAR 0 1
18257: PPUSH
18258: LD_INT 0
18260: PPUSH
18261: CALL_OW 234
// end ;
18265: GO 18250
18267: POP
18268: POP
// end ;
18269: PPOPN 2
18271: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18272: LD_EXP 39
18276: PUSH
18277: LD_EXP 49
18281: AND
18282: IFFALSE 18302
18284: GO 18286
18286: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18287: LD_INT 32
18289: PPUSH
18290: LD_OWVAR 2
18294: PPUSH
18295: LD_INT 0
18297: PPUSH
18298: CALL_OW 324
18302: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18303: LD_EXP 39
18307: PUSH
18308: LD_EXP 50
18312: AND
18313: IFFALSE 18494
18315: GO 18317
18317: DISABLE
18318: LD_INT 0
18320: PPUSH
18321: PPUSH
18322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18323: LD_ADDR_VAR 0 2
18327: PUSH
18328: LD_INT 22
18330: PUSH
18331: LD_OWVAR 2
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 33
18342: PUSH
18343: LD_INT 3
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PPUSH
18354: CALL_OW 69
18358: ST_TO_ADDR
// if not tmp then
18359: LD_VAR 0 2
18363: NOT
18364: IFFALSE 18368
// exit ;
18366: GO 18494
// side := 0 ;
18368: LD_ADDR_VAR 0 3
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// for i := 1 to 8 do
18376: LD_ADDR_VAR 0 1
18380: PUSH
18381: DOUBLE
18382: LD_INT 1
18384: DEC
18385: ST_TO_ADDR
18386: LD_INT 8
18388: PUSH
18389: FOR_TO
18390: IFFALSE 18438
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18392: LD_OWVAR 2
18396: PUSH
18397: LD_VAR 0 1
18401: NONEQUAL
18402: PUSH
18403: LD_OWVAR 2
18407: PPUSH
18408: LD_VAR 0 1
18412: PPUSH
18413: CALL_OW 81
18417: PUSH
18418: LD_INT 2
18420: EQUAL
18421: AND
18422: IFFALSE 18436
// begin side := i ;
18424: LD_ADDR_VAR 0 3
18428: PUSH
18429: LD_VAR 0 1
18433: ST_TO_ADDR
// break ;
18434: GO 18438
// end ;
18436: GO 18389
18438: POP
18439: POP
// if not side then
18440: LD_VAR 0 3
18444: NOT
18445: IFFALSE 18449
// exit ;
18447: GO 18494
// for i := 1 to tmp do
18449: LD_ADDR_VAR 0 1
18453: PUSH
18454: DOUBLE
18455: LD_INT 1
18457: DEC
18458: ST_TO_ADDR
18459: LD_VAR 0 2
18463: PUSH
18464: FOR_TO
18465: IFFALSE 18492
// if Prob ( 60 ) then
18467: LD_INT 60
18469: PPUSH
18470: CALL_OW 13
18474: IFFALSE 18490
// SetSide ( i , side ) ;
18476: LD_VAR 0 1
18480: PPUSH
18481: LD_VAR 0 3
18485: PPUSH
18486: CALL_OW 235
18490: GO 18464
18492: POP
18493: POP
// end ;
18494: PPOPN 3
18496: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18497: LD_EXP 39
18501: PUSH
18502: LD_EXP 52
18506: AND
18507: IFFALSE 18626
18509: GO 18511
18511: DISABLE
18512: LD_INT 0
18514: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18515: LD_ADDR_VAR 0 1
18519: PUSH
18520: LD_INT 22
18522: PUSH
18523: LD_OWVAR 2
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 21
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: LD_INT 23
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: PUSH
18569: FOR_IN
18570: IFFALSE 18624
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 257
18581: PUSH
18582: LD_INT 1
18584: PUSH
18585: LD_INT 2
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 4
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: IN
18600: IFFALSE 18622
// SetClass ( un , rand ( 1 , 4 ) ) ;
18602: LD_VAR 0 1
18606: PPUSH
18607: LD_INT 1
18609: PPUSH
18610: LD_INT 4
18612: PPUSH
18613: CALL_OW 12
18617: PPUSH
18618: CALL_OW 336
18622: GO 18569
18624: POP
18625: POP
// end ;
18626: PPOPN 1
18628: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18629: LD_EXP 39
18633: PUSH
18634: LD_EXP 51
18638: AND
18639: IFFALSE 18718
18641: GO 18643
18643: DISABLE
18644: LD_INT 0
18646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18647: LD_ADDR_VAR 0 1
18651: PUSH
18652: LD_INT 22
18654: PUSH
18655: LD_OWVAR 2
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 21
18666: PUSH
18667: LD_INT 3
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: CALL_OW 69
18682: ST_TO_ADDR
// if not tmp then
18683: LD_VAR 0 1
18687: NOT
18688: IFFALSE 18692
// exit ;
18690: GO 18718
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18692: LD_VAR 0 1
18696: PUSH
18697: LD_INT 1
18699: PPUSH
18700: LD_VAR 0 1
18704: PPUSH
18705: CALL_OW 12
18709: ARRAY
18710: PPUSH
18711: LD_INT 100
18713: PPUSH
18714: CALL_OW 234
// end ;
18718: PPOPN 1
18720: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18721: LD_EXP 39
18725: PUSH
18726: LD_EXP 53
18730: AND
18731: IFFALSE 18829
18733: GO 18735
18735: DISABLE
18736: LD_INT 0
18738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18739: LD_ADDR_VAR 0 1
18743: PUSH
18744: LD_INT 22
18746: PUSH
18747: LD_OWVAR 2
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 21
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PPUSH
18770: CALL_OW 69
18774: ST_TO_ADDR
// if not tmp then
18775: LD_VAR 0 1
18779: NOT
18780: IFFALSE 18784
// exit ;
18782: GO 18829
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18784: LD_VAR 0 1
18788: PUSH
18789: LD_INT 1
18791: PPUSH
18792: LD_VAR 0 1
18796: PPUSH
18797: CALL_OW 12
18801: ARRAY
18802: PPUSH
18803: LD_INT 1
18805: PPUSH
18806: LD_INT 4
18808: PPUSH
18809: CALL_OW 12
18813: PPUSH
18814: LD_INT 3000
18816: PPUSH
18817: LD_INT 9000
18819: PPUSH
18820: CALL_OW 12
18824: PPUSH
18825: CALL_OW 492
// end ;
18829: PPOPN 1
18831: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18832: LD_EXP 39
18836: PUSH
18837: LD_EXP 54
18841: AND
18842: IFFALSE 18862
18844: GO 18846
18846: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18847: LD_INT 1
18849: PPUSH
18850: LD_OWVAR 2
18854: PPUSH
18855: LD_INT 0
18857: PPUSH
18858: CALL_OW 324
18862: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18863: LD_EXP 39
18867: PUSH
18868: LD_EXP 55
18872: AND
18873: IFFALSE 18956
18875: GO 18877
18877: DISABLE
18878: LD_INT 0
18880: PPUSH
18881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18882: LD_ADDR_VAR 0 2
18886: PUSH
18887: LD_INT 22
18889: PUSH
18890: LD_OWVAR 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 21
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PPUSH
18913: CALL_OW 69
18917: ST_TO_ADDR
// if not tmp then
18918: LD_VAR 0 2
18922: NOT
18923: IFFALSE 18927
// exit ;
18925: GO 18956
// for i in tmp do
18927: LD_ADDR_VAR 0 1
18931: PUSH
18932: LD_VAR 0 2
18936: PUSH
18937: FOR_IN
18938: IFFALSE 18954
// SetBLevel ( i , 10 ) ;
18940: LD_VAR 0 1
18944: PPUSH
18945: LD_INT 10
18947: PPUSH
18948: CALL_OW 241
18952: GO 18937
18954: POP
18955: POP
// end ;
18956: PPOPN 2
18958: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18959: LD_EXP 39
18963: PUSH
18964: LD_EXP 56
18968: AND
18969: IFFALSE 19080
18971: GO 18973
18973: DISABLE
18974: LD_INT 0
18976: PPUSH
18977: PPUSH
18978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18979: LD_ADDR_VAR 0 3
18983: PUSH
18984: LD_INT 22
18986: PUSH
18987: LD_OWVAR 2
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 25
18998: PUSH
18999: LD_INT 1
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PPUSH
19010: CALL_OW 69
19014: ST_TO_ADDR
// if not tmp then
19015: LD_VAR 0 3
19019: NOT
19020: IFFALSE 19024
// exit ;
19022: GO 19080
// un := tmp [ rand ( 1 , tmp ) ] ;
19024: LD_ADDR_VAR 0 2
19028: PUSH
19029: LD_VAR 0 3
19033: PUSH
19034: LD_INT 1
19036: PPUSH
19037: LD_VAR 0 3
19041: PPUSH
19042: CALL_OW 12
19046: ARRAY
19047: ST_TO_ADDR
// if Crawls ( un ) then
19048: LD_VAR 0 2
19052: PPUSH
19053: CALL_OW 318
19057: IFFALSE 19068
// ComWalk ( un ) ;
19059: LD_VAR 0 2
19063: PPUSH
19064: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19068: LD_VAR 0 2
19072: PPUSH
19073: LD_INT 5
19075: PPUSH
19076: CALL_OW 336
// end ;
19080: PPOPN 3
19082: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19083: LD_EXP 39
19087: PUSH
19088: LD_EXP 57
19092: AND
19093: PUSH
19094: LD_OWVAR 67
19098: PUSH
19099: LD_INT 4
19101: LESS
19102: AND
19103: IFFALSE 19122
19105: GO 19107
19107: DISABLE
// begin Difficulty := Difficulty + 1 ;
19108: LD_ADDR_OWVAR 67
19112: PUSH
19113: LD_OWVAR 67
19117: PUSH
19118: LD_INT 1
19120: PLUS
19121: ST_TO_ADDR
// end ;
19122: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19123: LD_EXP 39
19127: PUSH
19128: LD_EXP 58
19132: AND
19133: IFFALSE 19236
19135: GO 19137
19137: DISABLE
19138: LD_INT 0
19140: PPUSH
// begin for i := 1 to 5 do
19141: LD_ADDR_VAR 0 1
19145: PUSH
19146: DOUBLE
19147: LD_INT 1
19149: DEC
19150: ST_TO_ADDR
19151: LD_INT 5
19153: PUSH
19154: FOR_TO
19155: IFFALSE 19234
// begin uc_nation := nation_nature ;
19157: LD_ADDR_OWVAR 21
19161: PUSH
19162: LD_INT 0
19164: ST_TO_ADDR
// uc_side := 0 ;
19165: LD_ADDR_OWVAR 20
19169: PUSH
19170: LD_INT 0
19172: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19173: LD_ADDR_OWVAR 29
19177: PUSH
19178: LD_INT 12
19180: PUSH
19181: LD_INT 12
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: ST_TO_ADDR
// hc_agressivity := 20 ;
19188: LD_ADDR_OWVAR 35
19192: PUSH
19193: LD_INT 20
19195: ST_TO_ADDR
// hc_class := class_tiger ;
19196: LD_ADDR_OWVAR 28
19200: PUSH
19201: LD_INT 14
19203: ST_TO_ADDR
// hc_gallery :=  ;
19204: LD_ADDR_OWVAR 33
19208: PUSH
19209: LD_STRING 
19211: ST_TO_ADDR
// hc_name :=  ;
19212: LD_ADDR_OWVAR 26
19216: PUSH
19217: LD_STRING 
19219: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19220: CALL_OW 44
19224: PPUSH
19225: LD_INT 0
19227: PPUSH
19228: CALL_OW 51
// end ;
19232: GO 19154
19234: POP
19235: POP
// end ;
19236: PPOPN 1
19238: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19239: LD_EXP 39
19243: PUSH
19244: LD_EXP 59
19248: AND
19249: IFFALSE 19258
19251: GO 19253
19253: DISABLE
// StreamSibBomb ;
19254: CALL 19259 0 0
19258: END
// export function StreamSibBomb ; var i , x , y ; begin
19259: LD_INT 0
19261: PPUSH
19262: PPUSH
19263: PPUSH
19264: PPUSH
// result := false ;
19265: LD_ADDR_VAR 0 1
19269: PUSH
19270: LD_INT 0
19272: ST_TO_ADDR
// for i := 1 to 16 do
19273: LD_ADDR_VAR 0 2
19277: PUSH
19278: DOUBLE
19279: LD_INT 1
19281: DEC
19282: ST_TO_ADDR
19283: LD_INT 16
19285: PUSH
19286: FOR_TO
19287: IFFALSE 19486
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19289: LD_ADDR_VAR 0 3
19293: PUSH
19294: LD_INT 10
19296: PUSH
19297: LD_INT 20
19299: PUSH
19300: LD_INT 30
19302: PUSH
19303: LD_INT 40
19305: PUSH
19306: LD_INT 50
19308: PUSH
19309: LD_INT 60
19311: PUSH
19312: LD_INT 70
19314: PUSH
19315: LD_INT 80
19317: PUSH
19318: LD_INT 90
19320: PUSH
19321: LD_INT 100
19323: PUSH
19324: LD_INT 110
19326: PUSH
19327: LD_INT 120
19329: PUSH
19330: LD_INT 130
19332: PUSH
19333: LD_INT 140
19335: PUSH
19336: LD_INT 150
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 1
19358: PPUSH
19359: LD_INT 15
19361: PPUSH
19362: CALL_OW 12
19366: ARRAY
19367: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19368: LD_ADDR_VAR 0 4
19372: PUSH
19373: LD_INT 10
19375: PUSH
19376: LD_INT 20
19378: PUSH
19379: LD_INT 30
19381: PUSH
19382: LD_INT 40
19384: PUSH
19385: LD_INT 50
19387: PUSH
19388: LD_INT 60
19390: PUSH
19391: LD_INT 70
19393: PUSH
19394: LD_INT 80
19396: PUSH
19397: LD_INT 90
19399: PUSH
19400: LD_INT 100
19402: PUSH
19403: LD_INT 110
19405: PUSH
19406: LD_INT 120
19408: PUSH
19409: LD_INT 130
19411: PUSH
19412: LD_INT 140
19414: PUSH
19415: LD_INT 150
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PPUSH
19438: LD_INT 15
19440: PPUSH
19441: CALL_OW 12
19445: ARRAY
19446: ST_TO_ADDR
// if ValidHex ( x , y ) then
19447: LD_VAR 0 3
19451: PPUSH
19452: LD_VAR 0 4
19456: PPUSH
19457: CALL_OW 488
19461: IFFALSE 19484
// begin result := [ x , y ] ;
19463: LD_ADDR_VAR 0 1
19467: PUSH
19468: LD_VAR 0 3
19472: PUSH
19473: LD_VAR 0 4
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: ST_TO_ADDR
// break ;
19482: GO 19486
// end ; end ;
19484: GO 19286
19486: POP
19487: POP
// if result then
19488: LD_VAR 0 1
19492: IFFALSE 19552
// begin ToLua ( playSibBomb() ) ;
19494: LD_STRING playSibBomb()
19496: PPUSH
19497: CALL_OW 559
// wait ( 0 0$14 ) ;
19501: LD_INT 490
19503: PPUSH
19504: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19508: LD_VAR 0 1
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: LD_VAR 0 1
19521: PUSH
19522: LD_INT 2
19524: ARRAY
19525: PPUSH
19526: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19530: LD_VAR 0 1
19534: PUSH
19535: LD_INT 1
19537: ARRAY
19538: PPUSH
19539: LD_VAR 0 1
19543: PUSH
19544: LD_INT 2
19546: ARRAY
19547: PPUSH
19548: CALL_OW 429
// end ; end ;
19552: LD_VAR 0 1
19556: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19557: LD_EXP 39
19561: PUSH
19562: LD_EXP 61
19566: AND
19567: IFFALSE 19579
19569: GO 19571
19571: DISABLE
// YouLost (  ) ;
19572: LD_STRING 
19574: PPUSH
19575: CALL_OW 104
19579: END
// every 0 0$1 trigger StreamModeActive and sFog do
19580: LD_EXP 39
19584: PUSH
19585: LD_EXP 60
19589: AND
19590: IFFALSE 19604
19592: GO 19594
19594: DISABLE
// FogOff ( your_side ) ;
19595: LD_OWVAR 2
19599: PPUSH
19600: CALL_OW 344
19604: END
// every 0 0$1 trigger StreamModeActive and sSun do
19605: LD_EXP 39
19609: PUSH
19610: LD_EXP 62
19614: AND
19615: IFFALSE 19643
19617: GO 19619
19619: DISABLE
// begin solar_recharge_percent := 0 ;
19620: LD_ADDR_OWVAR 79
19624: PUSH
19625: LD_INT 0
19627: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19628: LD_INT 10500
19630: PPUSH
19631: CALL_OW 67
// solar_recharge_percent := 100 ;
19635: LD_ADDR_OWVAR 79
19639: PUSH
19640: LD_INT 100
19642: ST_TO_ADDR
// end ;
19643: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19644: LD_EXP 39
19648: PUSH
19649: LD_EXP 63
19653: AND
19654: IFFALSE 19893
19656: GO 19658
19658: DISABLE
19659: LD_INT 0
19661: PPUSH
19662: PPUSH
19663: PPUSH
// begin tmp := [ ] ;
19664: LD_ADDR_VAR 0 3
19668: PUSH
19669: EMPTY
19670: ST_TO_ADDR
// for i := 1 to 6 do
19671: LD_ADDR_VAR 0 1
19675: PUSH
19676: DOUBLE
19677: LD_INT 1
19679: DEC
19680: ST_TO_ADDR
19681: LD_INT 6
19683: PUSH
19684: FOR_TO
19685: IFFALSE 19790
// begin uc_nation := nation_nature ;
19687: LD_ADDR_OWVAR 21
19691: PUSH
19692: LD_INT 0
19694: ST_TO_ADDR
// uc_side := 0 ;
19695: LD_ADDR_OWVAR 20
19699: PUSH
19700: LD_INT 0
19702: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19703: LD_ADDR_OWVAR 29
19707: PUSH
19708: LD_INT 12
19710: PUSH
19711: LD_INT 12
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: ST_TO_ADDR
// hc_agressivity := 20 ;
19718: LD_ADDR_OWVAR 35
19722: PUSH
19723: LD_INT 20
19725: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19726: LD_ADDR_OWVAR 28
19730: PUSH
19731: LD_INT 17
19733: ST_TO_ADDR
// hc_gallery :=  ;
19734: LD_ADDR_OWVAR 33
19738: PUSH
19739: LD_STRING 
19741: ST_TO_ADDR
// hc_name :=  ;
19742: LD_ADDR_OWVAR 26
19746: PUSH
19747: LD_STRING 
19749: ST_TO_ADDR
// un := CreateHuman ;
19750: LD_ADDR_VAR 0 2
19754: PUSH
19755: CALL_OW 44
19759: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19760: LD_VAR 0 2
19764: PPUSH
19765: LD_INT 1
19767: PPUSH
19768: CALL_OW 51
// tmp := tmp ^ un ;
19772: LD_ADDR_VAR 0 3
19776: PUSH
19777: LD_VAR 0 3
19781: PUSH
19782: LD_VAR 0 2
19786: ADD
19787: ST_TO_ADDR
// end ;
19788: GO 19684
19790: POP
19791: POP
// repeat wait ( 0 0$1 ) ;
19792: LD_INT 35
19794: PPUSH
19795: CALL_OW 67
// for un in tmp do
19799: LD_ADDR_VAR 0 2
19803: PUSH
19804: LD_VAR 0 3
19808: PUSH
19809: FOR_IN
19810: IFFALSE 19884
// begin if IsDead ( un ) then
19812: LD_VAR 0 2
19816: PPUSH
19817: CALL_OW 301
19821: IFFALSE 19841
// begin tmp := tmp diff un ;
19823: LD_ADDR_VAR 0 3
19827: PUSH
19828: LD_VAR 0 3
19832: PUSH
19833: LD_VAR 0 2
19837: DIFF
19838: ST_TO_ADDR
// continue ;
19839: GO 19809
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19841: LD_VAR 0 2
19845: PPUSH
19846: LD_INT 3
19848: PUSH
19849: LD_INT 22
19851: PUSH
19852: LD_INT 0
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PPUSH
19863: CALL_OW 69
19867: PPUSH
19868: LD_VAR 0 2
19872: PPUSH
19873: CALL_OW 74
19877: PPUSH
19878: CALL_OW 115
// end ;
19882: GO 19809
19884: POP
19885: POP
// until not tmp ;
19886: LD_VAR 0 3
19890: NOT
19891: IFFALSE 19792
// end ;
19893: PPOPN 3
19895: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19896: LD_EXP 39
19900: PUSH
19901: LD_EXP 64
19905: AND
19906: IFFALSE 19960
19908: GO 19910
19910: DISABLE
// begin ToLua ( displayTroll(); ) ;
19911: LD_STRING displayTroll();
19913: PPUSH
19914: CALL_OW 559
// wait ( 3 3$00 ) ;
19918: LD_INT 6300
19920: PPUSH
19921: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19925: LD_STRING hideTroll();
19927: PPUSH
19928: CALL_OW 559
// wait ( 1 1$00 ) ;
19932: LD_INT 2100
19934: PPUSH
19935: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19939: LD_STRING displayTroll();
19941: PPUSH
19942: CALL_OW 559
// wait ( 1 1$00 ) ;
19946: LD_INT 2100
19948: PPUSH
19949: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19953: LD_STRING hideTroll();
19955: PPUSH
19956: CALL_OW 559
// end ;
19960: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19961: LD_EXP 39
19965: PUSH
19966: LD_EXP 65
19970: AND
19971: IFFALSE 20034
19973: GO 19975
19975: DISABLE
19976: LD_INT 0
19978: PPUSH
// begin p := 0 ;
19979: LD_ADDR_VAR 0 1
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// repeat game_speed := 1 ;
19987: LD_ADDR_OWVAR 65
19991: PUSH
19992: LD_INT 1
19994: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19995: LD_INT 35
19997: PPUSH
19998: CALL_OW 67
// p := p + 1 ;
20002: LD_ADDR_VAR 0 1
20006: PUSH
20007: LD_VAR 0 1
20011: PUSH
20012: LD_INT 1
20014: PLUS
20015: ST_TO_ADDR
// until p >= 60 ;
20016: LD_VAR 0 1
20020: PUSH
20021: LD_INT 60
20023: GREATEREQUAL
20024: IFFALSE 19987
// game_speed := 4 ;
20026: LD_ADDR_OWVAR 65
20030: PUSH
20031: LD_INT 4
20033: ST_TO_ADDR
// end ;
20034: PPOPN 1
20036: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20037: LD_EXP 39
20041: PUSH
20042: LD_EXP 66
20046: AND
20047: IFFALSE 20193
20049: GO 20051
20051: DISABLE
20052: LD_INT 0
20054: PPUSH
20055: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20056: LD_ADDR_VAR 0 1
20060: PUSH
20061: LD_INT 22
20063: PUSH
20064: LD_OWVAR 2
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 2
20075: PUSH
20076: LD_INT 30
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 30
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PPUSH
20105: CALL_OW 69
20109: ST_TO_ADDR
// if not depot then
20110: LD_VAR 0 1
20114: NOT
20115: IFFALSE 20119
// exit ;
20117: GO 20193
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20119: LD_ADDR_VAR 0 2
20123: PUSH
20124: LD_VAR 0 1
20128: PUSH
20129: LD_INT 1
20131: PPUSH
20132: LD_VAR 0 1
20136: PPUSH
20137: CALL_OW 12
20141: ARRAY
20142: PPUSH
20143: CALL_OW 274
20147: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20148: LD_VAR 0 2
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: LD_INT 0
20158: PPUSH
20159: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20163: LD_VAR 0 2
20167: PPUSH
20168: LD_INT 2
20170: PPUSH
20171: LD_INT 0
20173: PPUSH
20174: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20178: LD_VAR 0 2
20182: PPUSH
20183: LD_INT 3
20185: PPUSH
20186: LD_INT 0
20188: PPUSH
20189: CALL_OW 277
// end ;
20193: PPOPN 2
20195: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20196: LD_EXP 39
20200: PUSH
20201: LD_EXP 67
20205: AND
20206: IFFALSE 20303
20208: GO 20210
20210: DISABLE
20211: LD_INT 0
20213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20214: LD_ADDR_VAR 0 1
20218: PUSH
20219: LD_INT 22
20221: PUSH
20222: LD_OWVAR 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 21
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 3
20243: PUSH
20244: LD_INT 23
20246: PUSH
20247: LD_INT 0
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: ST_TO_ADDR
// if not tmp then
20268: LD_VAR 0 1
20272: NOT
20273: IFFALSE 20277
// exit ;
20275: GO 20303
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20277: LD_VAR 0 1
20281: PUSH
20282: LD_INT 1
20284: PPUSH
20285: LD_VAR 0 1
20289: PPUSH
20290: CALL_OW 12
20294: ARRAY
20295: PPUSH
20296: LD_INT 200
20298: PPUSH
20299: CALL_OW 234
// end ;
20303: PPOPN 1
20305: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20306: LD_EXP 39
20310: PUSH
20311: LD_EXP 68
20315: AND
20316: IFFALSE 20395
20318: GO 20320
20320: DISABLE
20321: LD_INT 0
20323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20324: LD_ADDR_VAR 0 1
20328: PUSH
20329: LD_INT 22
20331: PUSH
20332: LD_OWVAR 2
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 21
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PPUSH
20355: CALL_OW 69
20359: ST_TO_ADDR
// if not tmp then
20360: LD_VAR 0 1
20364: NOT
20365: IFFALSE 20369
// exit ;
20367: GO 20395
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20369: LD_VAR 0 1
20373: PUSH
20374: LD_INT 1
20376: PPUSH
20377: LD_VAR 0 1
20381: PPUSH
20382: CALL_OW 12
20386: ARRAY
20387: PPUSH
20388: LD_INT 60
20390: PPUSH
20391: CALL_OW 234
// end ;
20395: PPOPN 1
20397: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20398: LD_EXP 39
20402: PUSH
20403: LD_EXP 69
20407: AND
20408: IFFALSE 20507
20410: GO 20412
20412: DISABLE
20413: LD_INT 0
20415: PPUSH
20416: PPUSH
// begin enable ;
20417: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20418: LD_ADDR_VAR 0 1
20422: PUSH
20423: LD_INT 22
20425: PUSH
20426: LD_OWVAR 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 61
20437: PUSH
20438: EMPTY
20439: LIST
20440: PUSH
20441: LD_INT 33
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 69
20460: ST_TO_ADDR
// if not tmp then
20461: LD_VAR 0 1
20465: NOT
20466: IFFALSE 20470
// exit ;
20468: GO 20507
// for i in tmp do
20470: LD_ADDR_VAR 0 2
20474: PUSH
20475: LD_VAR 0 1
20479: PUSH
20480: FOR_IN
20481: IFFALSE 20505
// if IsControledBy ( i ) then
20483: LD_VAR 0 2
20487: PPUSH
20488: CALL_OW 312
20492: IFFALSE 20503
// ComUnlink ( i ) ;
20494: LD_VAR 0 2
20498: PPUSH
20499: CALL_OW 136
20503: GO 20480
20505: POP
20506: POP
// end ;
20507: PPOPN 2
20509: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20510: LD_EXP 39
20514: PUSH
20515: LD_EXP 70
20519: AND
20520: IFFALSE 20660
20522: GO 20524
20524: DISABLE
20525: LD_INT 0
20527: PPUSH
20528: PPUSH
// begin ToLua ( displayPowell(); ) ;
20529: LD_STRING displayPowell();
20531: PPUSH
20532: CALL_OW 559
// uc_side := 0 ;
20536: LD_ADDR_OWVAR 20
20540: PUSH
20541: LD_INT 0
20543: ST_TO_ADDR
// uc_nation := 2 ;
20544: LD_ADDR_OWVAR 21
20548: PUSH
20549: LD_INT 2
20551: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20552: LD_ADDR_OWVAR 37
20556: PUSH
20557: LD_INT 14
20559: ST_TO_ADDR
// vc_engine := engine_siberite ;
20560: LD_ADDR_OWVAR 39
20564: PUSH
20565: LD_INT 3
20567: ST_TO_ADDR
// vc_control := control_apeman ;
20568: LD_ADDR_OWVAR 38
20572: PUSH
20573: LD_INT 5
20575: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20576: LD_ADDR_OWVAR 40
20580: PUSH
20581: LD_INT 29
20583: ST_TO_ADDR
// un := CreateVehicle ;
20584: LD_ADDR_VAR 0 2
20588: PUSH
20589: CALL_OW 45
20593: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20594: LD_VAR 0 2
20598: PPUSH
20599: LD_INT 1
20601: PPUSH
20602: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20606: LD_INT 35
20608: PPUSH
20609: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20613: LD_VAR 0 2
20617: PPUSH
20618: LD_INT 22
20620: PUSH
20621: LD_OWVAR 2
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 69
20634: PPUSH
20635: LD_VAR 0 2
20639: PPUSH
20640: CALL_OW 74
20644: PPUSH
20645: CALL_OW 115
// until IsDead ( un ) ;
20649: LD_VAR 0 2
20653: PPUSH
20654: CALL_OW 301
20658: IFFALSE 20606
// end ;
20660: PPOPN 2
20662: END
// every 0 0$1 trigger StreamModeActive and sStu do
20663: LD_EXP 39
20667: PUSH
20668: LD_EXP 78
20672: AND
20673: IFFALSE 20689
20675: GO 20677
20677: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20678: LD_STRING displayStucuk();
20680: PPUSH
20681: CALL_OW 559
// ResetFog ;
20685: CALL_OW 335
// end ;
20689: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20690: LD_EXP 39
20694: PUSH
20695: LD_EXP 71
20699: AND
20700: IFFALSE 20841
20702: GO 20704
20704: DISABLE
20705: LD_INT 0
20707: PPUSH
20708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20709: LD_ADDR_VAR 0 2
20713: PUSH
20714: LD_INT 22
20716: PUSH
20717: LD_OWVAR 2
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 21
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PPUSH
20740: CALL_OW 69
20744: ST_TO_ADDR
// if not tmp then
20745: LD_VAR 0 2
20749: NOT
20750: IFFALSE 20754
// exit ;
20752: GO 20841
// un := tmp [ rand ( 1 , tmp ) ] ;
20754: LD_ADDR_VAR 0 1
20758: PUSH
20759: LD_VAR 0 2
20763: PUSH
20764: LD_INT 1
20766: PPUSH
20767: LD_VAR 0 2
20771: PPUSH
20772: CALL_OW 12
20776: ARRAY
20777: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20778: LD_VAR 0 1
20782: PPUSH
20783: LD_INT 0
20785: PPUSH
20786: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20790: LD_VAR 0 1
20794: PPUSH
20795: LD_OWVAR 3
20799: PUSH
20800: LD_VAR 0 1
20804: DIFF
20805: PPUSH
20806: LD_VAR 0 1
20810: PPUSH
20811: CALL_OW 74
20815: PPUSH
20816: CALL_OW 115
// wait ( 0 0$20 ) ;
20820: LD_INT 700
20822: PPUSH
20823: CALL_OW 67
// SetSide ( un , your_side ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: LD_OWVAR 2
20836: PPUSH
20837: CALL_OW 235
// end ;
20841: PPOPN 2
20843: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20844: LD_EXP 39
20848: PUSH
20849: LD_EXP 72
20853: AND
20854: IFFALSE 20960
20856: GO 20858
20858: DISABLE
20859: LD_INT 0
20861: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20862: LD_ADDR_VAR 0 1
20866: PUSH
20867: LD_INT 22
20869: PUSH
20870: LD_OWVAR 2
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: LD_INT 30
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 30
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 69
20915: ST_TO_ADDR
// if not depot then
20916: LD_VAR 0 1
20920: NOT
20921: IFFALSE 20925
// exit ;
20923: GO 20960
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20925: LD_VAR 0 1
20929: PUSH
20930: LD_INT 1
20932: ARRAY
20933: PPUSH
20934: CALL_OW 250
20938: PPUSH
20939: LD_VAR 0 1
20943: PUSH
20944: LD_INT 1
20946: ARRAY
20947: PPUSH
20948: CALL_OW 251
20952: PPUSH
20953: LD_INT 70
20955: PPUSH
20956: CALL_OW 495
// end ;
20960: PPOPN 1
20962: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20963: LD_EXP 39
20967: PUSH
20968: LD_EXP 73
20972: AND
20973: IFFALSE 21184
20975: GO 20977
20977: DISABLE
20978: LD_INT 0
20980: PPUSH
20981: PPUSH
20982: PPUSH
20983: PPUSH
20984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20985: LD_ADDR_VAR 0 5
20989: PUSH
20990: LD_INT 22
20992: PUSH
20993: LD_OWVAR 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 21
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PPUSH
21016: CALL_OW 69
21020: ST_TO_ADDR
// if not tmp then
21021: LD_VAR 0 5
21025: NOT
21026: IFFALSE 21030
// exit ;
21028: GO 21184
// for i in tmp do
21030: LD_ADDR_VAR 0 1
21034: PUSH
21035: LD_VAR 0 5
21039: PUSH
21040: FOR_IN
21041: IFFALSE 21182
// begin d := rand ( 0 , 5 ) ;
21043: LD_ADDR_VAR 0 4
21047: PUSH
21048: LD_INT 0
21050: PPUSH
21051: LD_INT 5
21053: PPUSH
21054: CALL_OW 12
21058: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21059: LD_ADDR_VAR 0 2
21063: PUSH
21064: LD_VAR 0 1
21068: PPUSH
21069: CALL_OW 250
21073: PPUSH
21074: LD_VAR 0 4
21078: PPUSH
21079: LD_INT 3
21081: PPUSH
21082: LD_INT 12
21084: PPUSH
21085: CALL_OW 12
21089: PPUSH
21090: CALL_OW 272
21094: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21095: LD_ADDR_VAR 0 3
21099: PUSH
21100: LD_VAR 0 1
21104: PPUSH
21105: CALL_OW 251
21109: PPUSH
21110: LD_VAR 0 4
21114: PPUSH
21115: LD_INT 3
21117: PPUSH
21118: LD_INT 12
21120: PPUSH
21121: CALL_OW 12
21125: PPUSH
21126: CALL_OW 273
21130: ST_TO_ADDR
// if ValidHex ( x , y ) then
21131: LD_VAR 0 2
21135: PPUSH
21136: LD_VAR 0 3
21140: PPUSH
21141: CALL_OW 488
21145: IFFALSE 21180
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21147: LD_VAR 0 1
21151: PPUSH
21152: LD_VAR 0 2
21156: PPUSH
21157: LD_VAR 0 3
21161: PPUSH
21162: LD_INT 3
21164: PPUSH
21165: LD_INT 6
21167: PPUSH
21168: CALL_OW 12
21172: PPUSH
21173: LD_INT 1
21175: PPUSH
21176: CALL_OW 483
// end ;
21180: GO 21040
21182: POP
21183: POP
// end ;
21184: PPOPN 5
21186: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21187: LD_EXP 39
21191: PUSH
21192: LD_EXP 74
21196: AND
21197: IFFALSE 21291
21199: GO 21201
21201: DISABLE
21202: LD_INT 0
21204: PPUSH
21205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21206: LD_ADDR_VAR 0 2
21210: PUSH
21211: LD_INT 22
21213: PUSH
21214: LD_OWVAR 2
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 32
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 21
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: LIST
21247: PPUSH
21248: CALL_OW 69
21252: ST_TO_ADDR
// if not tmp then
21253: LD_VAR 0 2
21257: NOT
21258: IFFALSE 21262
// exit ;
21260: GO 21291
// for i in tmp do
21262: LD_ADDR_VAR 0 1
21266: PUSH
21267: LD_VAR 0 2
21271: PUSH
21272: FOR_IN
21273: IFFALSE 21289
// SetFuel ( i , 0 ) ;
21275: LD_VAR 0 1
21279: PPUSH
21280: LD_INT 0
21282: PPUSH
21283: CALL_OW 240
21287: GO 21272
21289: POP
21290: POP
// end ;
21291: PPOPN 2
21293: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21294: LD_EXP 39
21298: PUSH
21299: LD_EXP 75
21303: AND
21304: IFFALSE 21370
21306: GO 21308
21308: DISABLE
21309: LD_INT 0
21311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_INT 22
21319: PUSH
21320: LD_OWVAR 2
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 30
21331: PUSH
21332: LD_INT 29
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PPUSH
21343: CALL_OW 69
21347: ST_TO_ADDR
// if not tmp then
21348: LD_VAR 0 1
21352: NOT
21353: IFFALSE 21357
// exit ;
21355: GO 21370
// DestroyUnit ( tmp [ 1 ] ) ;
21357: LD_VAR 0 1
21361: PUSH
21362: LD_INT 1
21364: ARRAY
21365: PPUSH
21366: CALL_OW 65
// end ;
21370: PPOPN 1
21372: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21373: LD_EXP 39
21377: PUSH
21378: LD_EXP 77
21382: AND
21383: IFFALSE 21512
21385: GO 21387
21387: DISABLE
21388: LD_INT 0
21390: PPUSH
// begin uc_side := 0 ;
21391: LD_ADDR_OWVAR 20
21395: PUSH
21396: LD_INT 0
21398: ST_TO_ADDR
// uc_nation := nation_arabian ;
21399: LD_ADDR_OWVAR 21
21403: PUSH
21404: LD_INT 2
21406: ST_TO_ADDR
// hc_gallery :=  ;
21407: LD_ADDR_OWVAR 33
21411: PUSH
21412: LD_STRING 
21414: ST_TO_ADDR
// hc_name :=  ;
21415: LD_ADDR_OWVAR 26
21419: PUSH
21420: LD_STRING 
21422: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21423: LD_INT 1
21425: PPUSH
21426: LD_INT 11
21428: PPUSH
21429: LD_INT 10
21431: PPUSH
21432: CALL_OW 380
// un := CreateHuman ;
21436: LD_ADDR_VAR 0 1
21440: PUSH
21441: CALL_OW 44
21445: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21446: LD_VAR 0 1
21450: PPUSH
21451: LD_INT 1
21453: PPUSH
21454: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21458: LD_INT 35
21460: PPUSH
21461: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21465: LD_VAR 0 1
21469: PPUSH
21470: LD_INT 22
21472: PUSH
21473: LD_OWVAR 2
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PPUSH
21482: CALL_OW 69
21486: PPUSH
21487: LD_VAR 0 1
21491: PPUSH
21492: CALL_OW 74
21496: PPUSH
21497: CALL_OW 115
// until IsDead ( un ) ;
21501: LD_VAR 0 1
21505: PPUSH
21506: CALL_OW 301
21510: IFFALSE 21458
// end ;
21512: PPOPN 1
21514: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21515: LD_EXP 39
21519: PUSH
21520: LD_EXP 79
21524: AND
21525: IFFALSE 21537
21527: GO 21529
21529: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21530: LD_STRING earthquake(getX(game), 0, 32)
21532: PPUSH
21533: CALL_OW 559
21537: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21538: LD_EXP 39
21542: PUSH
21543: LD_EXP 80
21547: AND
21548: IFFALSE 21639
21550: GO 21552
21552: DISABLE
21553: LD_INT 0
21555: PPUSH
// begin enable ;
21556: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21557: LD_ADDR_VAR 0 1
21561: PUSH
21562: LD_INT 22
21564: PUSH
21565: LD_OWVAR 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 21
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 33
21586: PUSH
21587: LD_INT 3
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: PPUSH
21599: CALL_OW 69
21603: ST_TO_ADDR
// if not tmp then
21604: LD_VAR 0 1
21608: NOT
21609: IFFALSE 21613
// exit ;
21611: GO 21639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21613: LD_VAR 0 1
21617: PUSH
21618: LD_INT 1
21620: PPUSH
21621: LD_VAR 0 1
21625: PPUSH
21626: CALL_OW 12
21630: ARRAY
21631: PPUSH
21632: LD_INT 1
21634: PPUSH
21635: CALL_OW 234
// end ;
21639: PPOPN 1
21641: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21642: LD_EXP 39
21646: PUSH
21647: LD_EXP 81
21651: AND
21652: IFFALSE 21793
21654: GO 21656
21656: DISABLE
21657: LD_INT 0
21659: PPUSH
21660: PPUSH
21661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21662: LD_ADDR_VAR 0 3
21666: PUSH
21667: LD_INT 22
21669: PUSH
21670: LD_OWVAR 2
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 25
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PPUSH
21693: CALL_OW 69
21697: ST_TO_ADDR
// if not tmp then
21698: LD_VAR 0 3
21702: NOT
21703: IFFALSE 21707
// exit ;
21705: GO 21793
// un := tmp [ rand ( 1 , tmp ) ] ;
21707: LD_ADDR_VAR 0 2
21711: PUSH
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 1
21719: PPUSH
21720: LD_VAR 0 3
21724: PPUSH
21725: CALL_OW 12
21729: ARRAY
21730: ST_TO_ADDR
// if Crawls ( un ) then
21731: LD_VAR 0 2
21735: PPUSH
21736: CALL_OW 318
21740: IFFALSE 21751
// ComWalk ( un ) ;
21742: LD_VAR 0 2
21746: PPUSH
21747: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21751: LD_VAR 0 2
21755: PPUSH
21756: LD_INT 9
21758: PPUSH
21759: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21763: LD_INT 28
21765: PPUSH
21766: LD_OWVAR 2
21770: PPUSH
21771: LD_INT 2
21773: PPUSH
21774: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21778: LD_INT 29
21780: PPUSH
21781: LD_OWVAR 2
21785: PPUSH
21786: LD_INT 2
21788: PPUSH
21789: CALL_OW 322
// end ;
21793: PPOPN 3
21795: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21796: LD_EXP 39
21800: PUSH
21801: LD_EXP 82
21805: AND
21806: IFFALSE 21917
21808: GO 21810
21810: DISABLE
21811: LD_INT 0
21813: PPUSH
21814: PPUSH
21815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21816: LD_ADDR_VAR 0 3
21820: PUSH
21821: LD_INT 22
21823: PUSH
21824: LD_OWVAR 2
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 25
21835: PUSH
21836: LD_INT 1
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PPUSH
21847: CALL_OW 69
21851: ST_TO_ADDR
// if not tmp then
21852: LD_VAR 0 3
21856: NOT
21857: IFFALSE 21861
// exit ;
21859: GO 21917
// un := tmp [ rand ( 1 , tmp ) ] ;
21861: LD_ADDR_VAR 0 2
21865: PUSH
21866: LD_VAR 0 3
21870: PUSH
21871: LD_INT 1
21873: PPUSH
21874: LD_VAR 0 3
21878: PPUSH
21879: CALL_OW 12
21883: ARRAY
21884: ST_TO_ADDR
// if Crawls ( un ) then
21885: LD_VAR 0 2
21889: PPUSH
21890: CALL_OW 318
21894: IFFALSE 21905
// ComWalk ( un ) ;
21896: LD_VAR 0 2
21900: PPUSH
21901: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21905: LD_VAR 0 2
21909: PPUSH
21910: LD_INT 8
21912: PPUSH
21913: CALL_OW 336
// end ;
21917: PPOPN 3
21919: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21920: LD_EXP 39
21924: PUSH
21925: LD_EXP 83
21929: AND
21930: IFFALSE 22074
21932: GO 21934
21934: DISABLE
21935: LD_INT 0
21937: PPUSH
21938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21939: LD_ADDR_VAR 0 2
21943: PUSH
21944: LD_INT 22
21946: PUSH
21947: LD_OWVAR 2
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 21
21958: PUSH
21959: LD_INT 2
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: LD_INT 34
21971: PUSH
21972: LD_INT 12
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 34
21981: PUSH
21982: LD_INT 51
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 34
21991: PUSH
21992: LD_INT 32
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: PPUSH
22010: CALL_OW 69
22014: ST_TO_ADDR
// if not tmp then
22015: LD_VAR 0 2
22019: NOT
22020: IFFALSE 22024
// exit ;
22022: GO 22074
// for i in tmp do
22024: LD_ADDR_VAR 0 1
22028: PUSH
22029: LD_VAR 0 2
22033: PUSH
22034: FOR_IN
22035: IFFALSE 22072
// if GetCargo ( i , mat_artifact ) = 0 then
22037: LD_VAR 0 1
22041: PPUSH
22042: LD_INT 4
22044: PPUSH
22045: CALL_OW 289
22049: PUSH
22050: LD_INT 0
22052: EQUAL
22053: IFFALSE 22070
// SetCargo ( i , mat_siberit , 100 ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 3
22062: PPUSH
22063: LD_INT 100
22065: PPUSH
22066: CALL_OW 290
22070: GO 22034
22072: POP
22073: POP
// end ;
22074: PPOPN 2
22076: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22077: LD_EXP 39
22081: PUSH
22082: LD_EXP 84
22086: AND
22087: IFFALSE 22270
22089: GO 22091
22091: DISABLE
22092: LD_INT 0
22094: PPUSH
22095: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22096: LD_ADDR_VAR 0 2
22100: PUSH
22101: LD_INT 22
22103: PUSH
22104: LD_OWVAR 2
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PPUSH
22113: CALL_OW 69
22117: ST_TO_ADDR
// if not tmp then
22118: LD_VAR 0 2
22122: NOT
22123: IFFALSE 22127
// exit ;
22125: GO 22270
// for i := 1 to 2 do
22127: LD_ADDR_VAR 0 1
22131: PUSH
22132: DOUBLE
22133: LD_INT 1
22135: DEC
22136: ST_TO_ADDR
22137: LD_INT 2
22139: PUSH
22140: FOR_TO
22141: IFFALSE 22268
// begin uc_side := your_side ;
22143: LD_ADDR_OWVAR 20
22147: PUSH
22148: LD_OWVAR 2
22152: ST_TO_ADDR
// uc_nation := nation_american ;
22153: LD_ADDR_OWVAR 21
22157: PUSH
22158: LD_INT 1
22160: ST_TO_ADDR
// vc_chassis := us_morphling ;
22161: LD_ADDR_OWVAR 37
22165: PUSH
22166: LD_INT 5
22168: ST_TO_ADDR
// vc_engine := engine_siberite ;
22169: LD_ADDR_OWVAR 39
22173: PUSH
22174: LD_INT 3
22176: ST_TO_ADDR
// vc_control := control_computer ;
22177: LD_ADDR_OWVAR 38
22181: PUSH
22182: LD_INT 3
22184: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22185: LD_ADDR_OWVAR 40
22189: PUSH
22190: LD_INT 10
22192: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22193: LD_VAR 0 2
22197: PUSH
22198: LD_INT 1
22200: ARRAY
22201: PPUSH
22202: CALL_OW 310
22206: NOT
22207: IFFALSE 22254
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22209: CALL_OW 45
22213: PPUSH
22214: LD_VAR 0 2
22218: PUSH
22219: LD_INT 1
22221: ARRAY
22222: PPUSH
22223: CALL_OW 250
22227: PPUSH
22228: LD_VAR 0 2
22232: PUSH
22233: LD_INT 1
22235: ARRAY
22236: PPUSH
22237: CALL_OW 251
22241: PPUSH
22242: LD_INT 12
22244: PPUSH
22245: LD_INT 1
22247: PPUSH
22248: CALL_OW 50
22252: GO 22266
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22254: CALL_OW 45
22258: PPUSH
22259: LD_INT 1
22261: PPUSH
22262: CALL_OW 51
// end ;
22266: GO 22140
22268: POP
22269: POP
// end ;
22270: PPOPN 2
22272: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22273: LD_EXP 39
22277: PUSH
22278: LD_EXP 85
22282: AND
22283: IFFALSE 22505
22285: GO 22287
22287: DISABLE
22288: LD_INT 0
22290: PPUSH
22291: PPUSH
22292: PPUSH
22293: PPUSH
22294: PPUSH
22295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22296: LD_ADDR_VAR 0 6
22300: PUSH
22301: LD_INT 22
22303: PUSH
22304: LD_OWVAR 2
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 21
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 3
22325: PUSH
22326: LD_INT 23
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: PPUSH
22345: CALL_OW 69
22349: ST_TO_ADDR
// if not tmp then
22350: LD_VAR 0 6
22354: NOT
22355: IFFALSE 22359
// exit ;
22357: GO 22505
// s1 := rand ( 1 , 4 ) ;
22359: LD_ADDR_VAR 0 2
22363: PUSH
22364: LD_INT 1
22366: PPUSH
22367: LD_INT 4
22369: PPUSH
22370: CALL_OW 12
22374: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22375: LD_ADDR_VAR 0 4
22379: PUSH
22380: LD_VAR 0 6
22384: PUSH
22385: LD_INT 1
22387: ARRAY
22388: PPUSH
22389: LD_VAR 0 2
22393: PPUSH
22394: CALL_OW 259
22398: ST_TO_ADDR
// if s1 = 1 then
22399: LD_VAR 0 2
22403: PUSH
22404: LD_INT 1
22406: EQUAL
22407: IFFALSE 22427
// s2 := rand ( 2 , 4 ) else
22409: LD_ADDR_VAR 0 3
22413: PUSH
22414: LD_INT 2
22416: PPUSH
22417: LD_INT 4
22419: PPUSH
22420: CALL_OW 12
22424: ST_TO_ADDR
22425: GO 22435
// s2 := 1 ;
22427: LD_ADDR_VAR 0 3
22431: PUSH
22432: LD_INT 1
22434: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22435: LD_ADDR_VAR 0 5
22439: PUSH
22440: LD_VAR 0 6
22444: PUSH
22445: LD_INT 1
22447: ARRAY
22448: PPUSH
22449: LD_VAR 0 3
22453: PPUSH
22454: CALL_OW 259
22458: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22459: LD_VAR 0 6
22463: PUSH
22464: LD_INT 1
22466: ARRAY
22467: PPUSH
22468: LD_VAR 0 2
22472: PPUSH
22473: LD_VAR 0 5
22477: PPUSH
22478: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22482: LD_VAR 0 6
22486: PUSH
22487: LD_INT 1
22489: ARRAY
22490: PPUSH
22491: LD_VAR 0 3
22495: PPUSH
22496: LD_VAR 0 4
22500: PPUSH
22501: CALL_OW 237
// end ;
22505: PPOPN 6
22507: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22508: LD_EXP 39
22512: PUSH
22513: LD_EXP 86
22517: AND
22518: IFFALSE 22597
22520: GO 22522
22522: DISABLE
22523: LD_INT 0
22525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22526: LD_ADDR_VAR 0 1
22530: PUSH
22531: LD_INT 22
22533: PUSH
22534: LD_OWVAR 2
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 30
22545: PUSH
22546: LD_INT 3
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PPUSH
22557: CALL_OW 69
22561: ST_TO_ADDR
// if not tmp then
22562: LD_VAR 0 1
22566: NOT
22567: IFFALSE 22571
// exit ;
22569: GO 22597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22571: LD_VAR 0 1
22575: PUSH
22576: LD_INT 1
22578: PPUSH
22579: LD_VAR 0 1
22583: PPUSH
22584: CALL_OW 12
22588: ARRAY
22589: PPUSH
22590: LD_INT 1
22592: PPUSH
22593: CALL_OW 234
// end ;
22597: PPOPN 1
22599: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22600: LD_EXP 39
22604: PUSH
22605: LD_EXP 87
22609: AND
22610: IFFALSE 22722
22612: GO 22614
22614: DISABLE
22615: LD_INT 0
22617: PPUSH
22618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22619: LD_ADDR_VAR 0 2
22623: PUSH
22624: LD_INT 22
22626: PUSH
22627: LD_OWVAR 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: LD_INT 30
22641: PUSH
22642: LD_INT 27
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 30
22651: PUSH
22652: LD_INT 26
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 30
22661: PUSH
22662: LD_INT 28
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: ST_TO_ADDR
// if not tmp then
22684: LD_VAR 0 2
22688: NOT
22689: IFFALSE 22693
// exit ;
22691: GO 22722
// for i in tmp do
22693: LD_ADDR_VAR 0 1
22697: PUSH
22698: LD_VAR 0 2
22702: PUSH
22703: FOR_IN
22704: IFFALSE 22720
// SetLives ( i , 1 ) ;
22706: LD_VAR 0 1
22710: PPUSH
22711: LD_INT 1
22713: PPUSH
22714: CALL_OW 234
22718: GO 22703
22720: POP
22721: POP
// end ;
22722: PPOPN 2
22724: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22725: LD_EXP 39
22729: PUSH
22730: LD_EXP 88
22734: AND
22735: IFFALSE 23022
22737: GO 22739
22739: DISABLE
22740: LD_INT 0
22742: PPUSH
22743: PPUSH
22744: PPUSH
// begin i := rand ( 1 , 7 ) ;
22745: LD_ADDR_VAR 0 1
22749: PUSH
22750: LD_INT 1
22752: PPUSH
22753: LD_INT 7
22755: PPUSH
22756: CALL_OW 12
22760: ST_TO_ADDR
// case i of 1 :
22761: LD_VAR 0 1
22765: PUSH
22766: LD_INT 1
22768: DOUBLE
22769: EQUAL
22770: IFTRUE 22774
22772: GO 22784
22774: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22775: LD_STRING earthquake(getX(game), 0, 32)
22777: PPUSH
22778: CALL_OW 559
22782: GO 23022
22784: LD_INT 2
22786: DOUBLE
22787: EQUAL
22788: IFTRUE 22792
22790: GO 22806
22792: POP
// begin ToLua ( displayStucuk(); ) ;
22793: LD_STRING displayStucuk();
22795: PPUSH
22796: CALL_OW 559
// ResetFog ;
22800: CALL_OW 335
// end ; 3 :
22804: GO 23022
22806: LD_INT 3
22808: DOUBLE
22809: EQUAL
22810: IFTRUE 22814
22812: GO 22918
22814: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22815: LD_ADDR_VAR 0 2
22819: PUSH
22820: LD_INT 22
22822: PUSH
22823: LD_OWVAR 2
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 25
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PPUSH
22846: CALL_OW 69
22850: ST_TO_ADDR
// if not tmp then
22851: LD_VAR 0 2
22855: NOT
22856: IFFALSE 22860
// exit ;
22858: GO 23022
// un := tmp [ rand ( 1 , tmp ) ] ;
22860: LD_ADDR_VAR 0 3
22864: PUSH
22865: LD_VAR 0 2
22869: PUSH
22870: LD_INT 1
22872: PPUSH
22873: LD_VAR 0 2
22877: PPUSH
22878: CALL_OW 12
22882: ARRAY
22883: ST_TO_ADDR
// if Crawls ( un ) then
22884: LD_VAR 0 3
22888: PPUSH
22889: CALL_OW 318
22893: IFFALSE 22904
// ComWalk ( un ) ;
22895: LD_VAR 0 3
22899: PPUSH
22900: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22904: LD_VAR 0 3
22908: PPUSH
22909: LD_INT 8
22911: PPUSH
22912: CALL_OW 336
// end ; 4 :
22916: GO 23022
22918: LD_INT 4
22920: DOUBLE
22921: EQUAL
22922: IFTRUE 22926
22924: GO 23000
22926: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22927: LD_ADDR_VAR 0 2
22931: PUSH
22932: LD_INT 22
22934: PUSH
22935: LD_OWVAR 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 30
22946: PUSH
22947: LD_INT 29
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PPUSH
22958: CALL_OW 69
22962: ST_TO_ADDR
// if not tmp then
22963: LD_VAR 0 2
22967: NOT
22968: IFFALSE 22972
// exit ;
22970: GO 23022
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22972: LD_VAR 0 2
22976: PUSH
22977: LD_INT 1
22979: ARRAY
22980: PPUSH
22981: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22985: LD_VAR 0 2
22989: PUSH
22990: LD_INT 1
22992: ARRAY
22993: PPUSH
22994: CALL_OW 65
// end ; 5 .. 7 :
22998: GO 23022
23000: LD_INT 5
23002: DOUBLE
23003: GREATEREQUAL
23004: IFFALSE 23012
23006: LD_INT 7
23008: DOUBLE
23009: LESSEQUAL
23010: IFTRUE 23014
23012: GO 23021
23014: POP
// StreamSibBomb ; end ;
23015: CALL 19259 0 0
23019: GO 23022
23021: POP
// end ;
23022: PPOPN 3
23024: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23025: LD_EXP 39
23029: PUSH
23030: LD_EXP 89
23034: AND
23035: IFFALSE 23191
23037: GO 23039
23039: DISABLE
23040: LD_INT 0
23042: PPUSH
23043: PPUSH
23044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23045: LD_ADDR_VAR 0 2
23049: PUSH
23050: LD_INT 81
23052: PUSH
23053: LD_OWVAR 2
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 2
23064: PUSH
23065: LD_INT 21
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 21
23077: PUSH
23078: LD_INT 2
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PPUSH
23094: CALL_OW 69
23098: ST_TO_ADDR
// if not tmp then
23099: LD_VAR 0 2
23103: NOT
23104: IFFALSE 23108
// exit ;
23106: GO 23191
// p := 0 ;
23108: LD_ADDR_VAR 0 3
23112: PUSH
23113: LD_INT 0
23115: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23116: LD_INT 35
23118: PPUSH
23119: CALL_OW 67
// p := p + 1 ;
23123: LD_ADDR_VAR 0 3
23127: PUSH
23128: LD_VAR 0 3
23132: PUSH
23133: LD_INT 1
23135: PLUS
23136: ST_TO_ADDR
// for i in tmp do
23137: LD_ADDR_VAR 0 1
23141: PUSH
23142: LD_VAR 0 2
23146: PUSH
23147: FOR_IN
23148: IFFALSE 23179
// if GetLives ( i ) < 1000 then
23150: LD_VAR 0 1
23154: PPUSH
23155: CALL_OW 256
23159: PUSH
23160: LD_INT 1000
23162: LESS
23163: IFFALSE 23177
// SetLives ( i , 1000 ) ;
23165: LD_VAR 0 1
23169: PPUSH
23170: LD_INT 1000
23172: PPUSH
23173: CALL_OW 234
23177: GO 23147
23179: POP
23180: POP
// until p > 20 ;
23181: LD_VAR 0 3
23185: PUSH
23186: LD_INT 20
23188: GREATER
23189: IFFALSE 23116
// end ;
23191: PPOPN 3
23193: END
// every 0 0$1 trigger StreamModeActive and sTime do
23194: LD_EXP 39
23198: PUSH
23199: LD_EXP 90
23203: AND
23204: IFFALSE 23239
23206: GO 23208
23208: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23209: LD_INT 28
23211: PPUSH
23212: LD_OWVAR 2
23216: PPUSH
23217: LD_INT 2
23219: PPUSH
23220: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23224: LD_INT 30
23226: PPUSH
23227: LD_OWVAR 2
23231: PPUSH
23232: LD_INT 2
23234: PPUSH
23235: CALL_OW 322
// end ;
23239: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23240: LD_EXP 39
23244: PUSH
23245: LD_EXP 91
23249: AND
23250: IFFALSE 23371
23252: GO 23254
23254: DISABLE
23255: LD_INT 0
23257: PPUSH
23258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23259: LD_ADDR_VAR 0 2
23263: PUSH
23264: LD_INT 22
23266: PUSH
23267: LD_OWVAR 2
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 21
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: LD_INT 23
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL_OW 69
23312: ST_TO_ADDR
// if not tmp then
23313: LD_VAR 0 2
23317: NOT
23318: IFFALSE 23322
// exit ;
23320: GO 23371
// for i in tmp do
23322: LD_ADDR_VAR 0 1
23326: PUSH
23327: LD_VAR 0 2
23331: PUSH
23332: FOR_IN
23333: IFFALSE 23369
// begin if Crawls ( i ) then
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL_OW 318
23344: IFFALSE 23355
// ComWalk ( i ) ;
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 138
// SetClass ( i , 2 ) ;
23355: LD_VAR 0 1
23359: PPUSH
23360: LD_INT 2
23362: PPUSH
23363: CALL_OW 336
// end ;
23367: GO 23332
23369: POP
23370: POP
// end ;
23371: PPOPN 2
23373: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23374: LD_EXP 39
23378: PUSH
23379: LD_EXP 92
23383: AND
23384: IFFALSE 23672
23386: GO 23388
23388: DISABLE
23389: LD_INT 0
23391: PPUSH
23392: PPUSH
23393: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23394: LD_OWVAR 2
23398: PPUSH
23399: LD_INT 9
23401: PPUSH
23402: LD_INT 1
23404: PPUSH
23405: LD_INT 1
23407: PPUSH
23408: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23412: LD_INT 9
23414: PPUSH
23415: LD_OWVAR 2
23419: PPUSH
23420: CALL_OW 343
// uc_side := 9 ;
23424: LD_ADDR_OWVAR 20
23428: PUSH
23429: LD_INT 9
23431: ST_TO_ADDR
// uc_nation := 2 ;
23432: LD_ADDR_OWVAR 21
23436: PUSH
23437: LD_INT 2
23439: ST_TO_ADDR
// hc_name := Dark Warrior ;
23440: LD_ADDR_OWVAR 26
23444: PUSH
23445: LD_STRING Dark Warrior
23447: ST_TO_ADDR
// hc_gallery :=  ;
23448: LD_ADDR_OWVAR 33
23452: PUSH
23453: LD_STRING 
23455: ST_TO_ADDR
// hc_noskilllimit := true ;
23456: LD_ADDR_OWVAR 76
23460: PUSH
23461: LD_INT 1
23463: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23464: LD_ADDR_OWVAR 31
23468: PUSH
23469: LD_INT 30
23471: PUSH
23472: LD_INT 30
23474: PUSH
23475: LD_INT 30
23477: PUSH
23478: LD_INT 30
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: ST_TO_ADDR
// un := CreateHuman ;
23487: LD_ADDR_VAR 0 3
23491: PUSH
23492: CALL_OW 44
23496: ST_TO_ADDR
// hc_noskilllimit := false ;
23497: LD_ADDR_OWVAR 76
23501: PUSH
23502: LD_INT 0
23504: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23505: LD_VAR 0 3
23509: PPUSH
23510: LD_INT 1
23512: PPUSH
23513: CALL_OW 51
// ToLua ( playRanger() ) ;
23517: LD_STRING playRanger()
23519: PPUSH
23520: CALL_OW 559
// p := 0 ;
23524: LD_ADDR_VAR 0 2
23528: PUSH
23529: LD_INT 0
23531: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23532: LD_INT 35
23534: PPUSH
23535: CALL_OW 67
// p := p + 1 ;
23539: LD_ADDR_VAR 0 2
23543: PUSH
23544: LD_VAR 0 2
23548: PUSH
23549: LD_INT 1
23551: PLUS
23552: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23553: LD_VAR 0 3
23557: PPUSH
23558: CALL_OW 256
23562: PUSH
23563: LD_INT 1000
23565: LESS
23566: IFFALSE 23580
// SetLives ( un , 1000 ) ;
23568: LD_VAR 0 3
23572: PPUSH
23573: LD_INT 1000
23575: PPUSH
23576: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23580: LD_VAR 0 3
23584: PPUSH
23585: LD_INT 81
23587: PUSH
23588: LD_OWVAR 2
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 91
23599: PUSH
23600: LD_VAR 0 3
23604: PUSH
23605: LD_INT 30
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PPUSH
23617: CALL_OW 69
23621: PPUSH
23622: LD_VAR 0 3
23626: PPUSH
23627: CALL_OW 74
23631: PPUSH
23632: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23636: LD_VAR 0 2
23640: PUSH
23641: LD_INT 80
23643: GREATER
23644: PUSH
23645: LD_VAR 0 3
23649: PPUSH
23650: CALL_OW 301
23654: OR
23655: IFFALSE 23532
// if un then
23657: LD_VAR 0 3
23661: IFFALSE 23672
// RemoveUnit ( un ) ;
23663: LD_VAR 0 3
23667: PPUSH
23668: CALL_OW 64
// end ;
23672: PPOPN 3
23674: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23675: LD_EXP 93
23679: IFFALSE 23795
23681: GO 23683
23683: DISABLE
23684: LD_INT 0
23686: PPUSH
23687: PPUSH
23688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: LD_INT 81
23696: PUSH
23697: LD_OWVAR 2
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 21
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PPUSH
23720: CALL_OW 69
23724: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23725: LD_STRING playComputer()
23727: PPUSH
23728: CALL_OW 559
// if not tmp then
23732: LD_VAR 0 2
23736: NOT
23737: IFFALSE 23741
// exit ;
23739: GO 23795
// for i in tmp do
23741: LD_ADDR_VAR 0 1
23745: PUSH
23746: LD_VAR 0 2
23750: PUSH
23751: FOR_IN
23752: IFFALSE 23793
// for j := 1 to 4 do
23754: LD_ADDR_VAR 0 3
23758: PUSH
23759: DOUBLE
23760: LD_INT 1
23762: DEC
23763: ST_TO_ADDR
23764: LD_INT 4
23766: PUSH
23767: FOR_TO
23768: IFFALSE 23789
// SetSkill ( i , j , 10 ) ;
23770: LD_VAR 0 1
23774: PPUSH
23775: LD_VAR 0 3
23779: PPUSH
23780: LD_INT 10
23782: PPUSH
23783: CALL_OW 237
23787: GO 23767
23789: POP
23790: POP
23791: GO 23751
23793: POP
23794: POP
// end ;
23795: PPOPN 3
23797: END
// every 0 0$1 trigger s30 do var i , tmp ;
23798: LD_EXP 94
23802: IFFALSE 23871
23804: GO 23806
23806: DISABLE
23807: LD_INT 0
23809: PPUSH
23810: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23811: LD_ADDR_VAR 0 2
23815: PUSH
23816: LD_INT 22
23818: PUSH
23819: LD_OWVAR 2
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PPUSH
23828: CALL_OW 69
23832: ST_TO_ADDR
// if not tmp then
23833: LD_VAR 0 2
23837: NOT
23838: IFFALSE 23842
// exit ;
23840: GO 23871
// for i in tmp do
23842: LD_ADDR_VAR 0 1
23846: PUSH
23847: LD_VAR 0 2
23851: PUSH
23852: FOR_IN
23853: IFFALSE 23869
// SetLives ( i , 300 ) ;
23855: LD_VAR 0 1
23859: PPUSH
23860: LD_INT 300
23862: PPUSH
23863: CALL_OW 234
23867: GO 23852
23869: POP
23870: POP
// end ;
23871: PPOPN 2
23873: END
// every 0 0$1 trigger s60 do var i , tmp ;
23874: LD_EXP 95
23878: IFFALSE 23947
23880: GO 23882
23882: DISABLE
23883: LD_INT 0
23885: PPUSH
23886: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23887: LD_ADDR_VAR 0 2
23891: PUSH
23892: LD_INT 22
23894: PUSH
23895: LD_OWVAR 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PPUSH
23904: CALL_OW 69
23908: ST_TO_ADDR
// if not tmp then
23909: LD_VAR 0 2
23913: NOT
23914: IFFALSE 23918
// exit ;
23916: GO 23947
// for i in tmp do
23918: LD_ADDR_VAR 0 1
23922: PUSH
23923: LD_VAR 0 2
23927: PUSH
23928: FOR_IN
23929: IFFALSE 23945
// SetLives ( i , 600 ) ;
23931: LD_VAR 0 1
23935: PPUSH
23936: LD_INT 600
23938: PPUSH
23939: CALL_OW 234
23943: GO 23928
23945: POP
23946: POP
// end ;
23947: PPOPN 2
23949: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23950: LD_INT 0
23952: PPUSH
// case cmd of 301 :
23953: LD_VAR 0 1
23957: PUSH
23958: LD_INT 301
23960: DOUBLE
23961: EQUAL
23962: IFTRUE 23966
23964: GO 23998
23966: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23967: LD_VAR 0 6
23971: PPUSH
23972: LD_VAR 0 7
23976: PPUSH
23977: LD_VAR 0 8
23981: PPUSH
23982: LD_VAR 0 4
23986: PPUSH
23987: LD_VAR 0 5
23991: PPUSH
23992: CALL 25199 0 5
23996: GO 24119
23998: LD_INT 302
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24043
24006: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24007: LD_VAR 0 6
24011: PPUSH
24012: LD_VAR 0 7
24016: PPUSH
24017: LD_VAR 0 8
24021: PPUSH
24022: LD_VAR 0 9
24026: PPUSH
24027: LD_VAR 0 4
24031: PPUSH
24032: LD_VAR 0 5
24036: PPUSH
24037: CALL 25290 0 6
24041: GO 24119
24043: LD_INT 303
24045: DOUBLE
24046: EQUAL
24047: IFTRUE 24051
24049: GO 24088
24051: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24052: LD_VAR 0 6
24056: PPUSH
24057: LD_VAR 0 7
24061: PPUSH
24062: LD_VAR 0 8
24066: PPUSH
24067: LD_VAR 0 9
24071: PPUSH
24072: LD_VAR 0 4
24076: PPUSH
24077: LD_VAR 0 5
24081: PPUSH
24082: CALL 24124 0 6
24086: GO 24119
24088: LD_INT 304
24090: DOUBLE
24091: EQUAL
24092: IFTRUE 24096
24094: GO 24118
24096: POP
// hHackTeleport ( unit , x , y ) ; end ;
24097: LD_VAR 0 2
24101: PPUSH
24102: LD_VAR 0 4
24106: PPUSH
24107: LD_VAR 0 5
24111: PPUSH
24112: CALL 25883 0 3
24116: GO 24119
24118: POP
// end ;
24119: LD_VAR 0 12
24123: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24124: LD_INT 0
24126: PPUSH
24127: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24128: LD_VAR 0 1
24132: PUSH
24133: LD_INT 1
24135: LESS
24136: PUSH
24137: LD_VAR 0 1
24141: PUSH
24142: LD_INT 3
24144: GREATER
24145: OR
24146: PUSH
24147: LD_VAR 0 5
24151: PPUSH
24152: LD_VAR 0 6
24156: PPUSH
24157: CALL_OW 428
24161: OR
24162: IFFALSE 24166
// exit ;
24164: GO 24886
// uc_side := your_side ;
24166: LD_ADDR_OWVAR 20
24170: PUSH
24171: LD_OWVAR 2
24175: ST_TO_ADDR
// uc_nation := nation ;
24176: LD_ADDR_OWVAR 21
24180: PUSH
24181: LD_VAR 0 1
24185: ST_TO_ADDR
// bc_level = 1 ;
24186: LD_ADDR_OWVAR 43
24190: PUSH
24191: LD_INT 1
24193: ST_TO_ADDR
// case btype of 1 :
24194: LD_VAR 0 2
24198: PUSH
24199: LD_INT 1
24201: DOUBLE
24202: EQUAL
24203: IFTRUE 24207
24205: GO 24218
24207: POP
// bc_type := b_depot ; 2 :
24208: LD_ADDR_OWVAR 42
24212: PUSH
24213: LD_INT 0
24215: ST_TO_ADDR
24216: GO 24830
24218: LD_INT 2
24220: DOUBLE
24221: EQUAL
24222: IFTRUE 24226
24224: GO 24237
24226: POP
// bc_type := b_warehouse ; 3 :
24227: LD_ADDR_OWVAR 42
24231: PUSH
24232: LD_INT 1
24234: ST_TO_ADDR
24235: GO 24830
24237: LD_INT 3
24239: DOUBLE
24240: EQUAL
24241: IFTRUE 24245
24243: GO 24256
24245: POP
// bc_type := b_lab ; 4 .. 9 :
24246: LD_ADDR_OWVAR 42
24250: PUSH
24251: LD_INT 6
24253: ST_TO_ADDR
24254: GO 24830
24256: LD_INT 4
24258: DOUBLE
24259: GREATEREQUAL
24260: IFFALSE 24268
24262: LD_INT 9
24264: DOUBLE
24265: LESSEQUAL
24266: IFTRUE 24270
24268: GO 24322
24270: POP
// begin bc_type := b_lab_half ;
24271: LD_ADDR_OWVAR 42
24275: PUSH
24276: LD_INT 7
24278: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24279: LD_ADDR_OWVAR 44
24283: PUSH
24284: LD_INT 10
24286: PUSH
24287: LD_INT 11
24289: PUSH
24290: LD_INT 12
24292: PUSH
24293: LD_INT 15
24295: PUSH
24296: LD_INT 14
24298: PUSH
24299: LD_INT 13
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: PUSH
24310: LD_VAR 0 2
24314: PUSH
24315: LD_INT 3
24317: MINUS
24318: ARRAY
24319: ST_TO_ADDR
// end ; 10 .. 13 :
24320: GO 24830
24322: LD_INT 10
24324: DOUBLE
24325: GREATEREQUAL
24326: IFFALSE 24334
24328: LD_INT 13
24330: DOUBLE
24331: LESSEQUAL
24332: IFTRUE 24336
24334: GO 24413
24336: POP
// begin bc_type := b_lab_full ;
24337: LD_ADDR_OWVAR 42
24341: PUSH
24342: LD_INT 8
24344: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24345: LD_ADDR_OWVAR 44
24349: PUSH
24350: LD_INT 10
24352: PUSH
24353: LD_INT 12
24355: PUSH
24356: LD_INT 14
24358: PUSH
24359: LD_INT 13
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: PUSH
24368: LD_VAR 0 2
24372: PUSH
24373: LD_INT 9
24375: MINUS
24376: ARRAY
24377: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24378: LD_ADDR_OWVAR 45
24382: PUSH
24383: LD_INT 11
24385: PUSH
24386: LD_INT 15
24388: PUSH
24389: LD_INT 12
24391: PUSH
24392: LD_INT 15
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: PUSH
24401: LD_VAR 0 2
24405: PUSH
24406: LD_INT 9
24408: MINUS
24409: ARRAY
24410: ST_TO_ADDR
// end ; 14 :
24411: GO 24830
24413: LD_INT 14
24415: DOUBLE
24416: EQUAL
24417: IFTRUE 24421
24419: GO 24432
24421: POP
// bc_type := b_workshop ; 15 :
24422: LD_ADDR_OWVAR 42
24426: PUSH
24427: LD_INT 2
24429: ST_TO_ADDR
24430: GO 24830
24432: LD_INT 15
24434: DOUBLE
24435: EQUAL
24436: IFTRUE 24440
24438: GO 24451
24440: POP
// bc_type := b_factory ; 16 :
24441: LD_ADDR_OWVAR 42
24445: PUSH
24446: LD_INT 3
24448: ST_TO_ADDR
24449: GO 24830
24451: LD_INT 16
24453: DOUBLE
24454: EQUAL
24455: IFTRUE 24459
24457: GO 24470
24459: POP
// bc_type := b_ext_gun ; 17 :
24460: LD_ADDR_OWVAR 42
24464: PUSH
24465: LD_INT 17
24467: ST_TO_ADDR
24468: GO 24830
24470: LD_INT 17
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24506
24478: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24479: LD_ADDR_OWVAR 42
24483: PUSH
24484: LD_INT 19
24486: PUSH
24487: LD_INT 23
24489: PUSH
24490: LD_INT 19
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: PUSH
24498: LD_VAR 0 1
24502: ARRAY
24503: ST_TO_ADDR
24504: GO 24830
24506: LD_INT 18
24508: DOUBLE
24509: EQUAL
24510: IFTRUE 24514
24512: GO 24525
24514: POP
// bc_type := b_ext_radar ; 19 :
24515: LD_ADDR_OWVAR 42
24519: PUSH
24520: LD_INT 20
24522: ST_TO_ADDR
24523: GO 24830
24525: LD_INT 19
24527: DOUBLE
24528: EQUAL
24529: IFTRUE 24533
24531: GO 24544
24533: POP
// bc_type := b_ext_radio ; 20 :
24534: LD_ADDR_OWVAR 42
24538: PUSH
24539: LD_INT 22
24541: ST_TO_ADDR
24542: GO 24830
24544: LD_INT 20
24546: DOUBLE
24547: EQUAL
24548: IFTRUE 24552
24550: GO 24563
24552: POP
// bc_type := b_ext_siberium ; 21 :
24553: LD_ADDR_OWVAR 42
24557: PUSH
24558: LD_INT 21
24560: ST_TO_ADDR
24561: GO 24830
24563: LD_INT 21
24565: DOUBLE
24566: EQUAL
24567: IFTRUE 24571
24569: GO 24582
24571: POP
// bc_type := b_ext_computer ; 22 :
24572: LD_ADDR_OWVAR 42
24576: PUSH
24577: LD_INT 24
24579: ST_TO_ADDR
24580: GO 24830
24582: LD_INT 22
24584: DOUBLE
24585: EQUAL
24586: IFTRUE 24590
24588: GO 24601
24590: POP
// bc_type := b_ext_track ; 23 :
24591: LD_ADDR_OWVAR 42
24595: PUSH
24596: LD_INT 16
24598: ST_TO_ADDR
24599: GO 24830
24601: LD_INT 23
24603: DOUBLE
24604: EQUAL
24605: IFTRUE 24609
24607: GO 24620
24609: POP
// bc_type := b_ext_laser ; 24 :
24610: LD_ADDR_OWVAR 42
24614: PUSH
24615: LD_INT 25
24617: ST_TO_ADDR
24618: GO 24830
24620: LD_INT 24
24622: DOUBLE
24623: EQUAL
24624: IFTRUE 24628
24626: GO 24639
24628: POP
// bc_type := b_control_tower ; 25 :
24629: LD_ADDR_OWVAR 42
24633: PUSH
24634: LD_INT 36
24636: ST_TO_ADDR
24637: GO 24830
24639: LD_INT 25
24641: DOUBLE
24642: EQUAL
24643: IFTRUE 24647
24645: GO 24658
24647: POP
// bc_type := b_breastwork ; 26 :
24648: LD_ADDR_OWVAR 42
24652: PUSH
24653: LD_INT 31
24655: ST_TO_ADDR
24656: GO 24830
24658: LD_INT 26
24660: DOUBLE
24661: EQUAL
24662: IFTRUE 24666
24664: GO 24677
24666: POP
// bc_type := b_bunker ; 27 :
24667: LD_ADDR_OWVAR 42
24671: PUSH
24672: LD_INT 32
24674: ST_TO_ADDR
24675: GO 24830
24677: LD_INT 27
24679: DOUBLE
24680: EQUAL
24681: IFTRUE 24685
24683: GO 24696
24685: POP
// bc_type := b_turret ; 28 :
24686: LD_ADDR_OWVAR 42
24690: PUSH
24691: LD_INT 33
24693: ST_TO_ADDR
24694: GO 24830
24696: LD_INT 28
24698: DOUBLE
24699: EQUAL
24700: IFTRUE 24704
24702: GO 24715
24704: POP
// bc_type := b_armoury ; 29 :
24705: LD_ADDR_OWVAR 42
24709: PUSH
24710: LD_INT 4
24712: ST_TO_ADDR
24713: GO 24830
24715: LD_INT 29
24717: DOUBLE
24718: EQUAL
24719: IFTRUE 24723
24721: GO 24734
24723: POP
// bc_type := b_barracks ; 30 :
24724: LD_ADDR_OWVAR 42
24728: PUSH
24729: LD_INT 5
24731: ST_TO_ADDR
24732: GO 24830
24734: LD_INT 30
24736: DOUBLE
24737: EQUAL
24738: IFTRUE 24742
24740: GO 24753
24742: POP
// bc_type := b_solar_power ; 31 :
24743: LD_ADDR_OWVAR 42
24747: PUSH
24748: LD_INT 27
24750: ST_TO_ADDR
24751: GO 24830
24753: LD_INT 31
24755: DOUBLE
24756: EQUAL
24757: IFTRUE 24761
24759: GO 24772
24761: POP
// bc_type := b_oil_power ; 32 :
24762: LD_ADDR_OWVAR 42
24766: PUSH
24767: LD_INT 26
24769: ST_TO_ADDR
24770: GO 24830
24772: LD_INT 32
24774: DOUBLE
24775: EQUAL
24776: IFTRUE 24780
24778: GO 24791
24780: POP
// bc_type := b_siberite_power ; 33 :
24781: LD_ADDR_OWVAR 42
24785: PUSH
24786: LD_INT 28
24788: ST_TO_ADDR
24789: GO 24830
24791: LD_INT 33
24793: DOUBLE
24794: EQUAL
24795: IFTRUE 24799
24797: GO 24810
24799: POP
// bc_type := b_oil_mine ; 34 :
24800: LD_ADDR_OWVAR 42
24804: PUSH
24805: LD_INT 29
24807: ST_TO_ADDR
24808: GO 24830
24810: LD_INT 34
24812: DOUBLE
24813: EQUAL
24814: IFTRUE 24818
24816: GO 24829
24818: POP
// bc_type := b_siberite_mine ; end ;
24819: LD_ADDR_OWVAR 42
24823: PUSH
24824: LD_INT 30
24826: ST_TO_ADDR
24827: GO 24830
24829: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24830: LD_ADDR_VAR 0 8
24834: PUSH
24835: LD_VAR 0 5
24839: PPUSH
24840: LD_VAR 0 6
24844: PPUSH
24845: LD_VAR 0 3
24849: PPUSH
24850: CALL_OW 47
24854: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24855: LD_OWVAR 42
24859: PUSH
24860: LD_INT 32
24862: PUSH
24863: LD_INT 33
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: IN
24870: IFFALSE 24886
// PlaceWeaponTurret ( b , weapon ) ;
24872: LD_VAR 0 8
24876: PPUSH
24877: LD_VAR 0 4
24881: PPUSH
24882: CALL_OW 431
// end ;
24886: LD_VAR 0 7
24890: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24891: LD_INT 0
24893: PPUSH
24894: PPUSH
24895: PPUSH
24896: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24897: LD_ADDR_VAR 0 4
24901: PUSH
24902: LD_INT 22
24904: PUSH
24905: LD_OWVAR 2
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 2
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 30
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PPUSH
24946: CALL_OW 69
24950: ST_TO_ADDR
// if not tmp then
24951: LD_VAR 0 4
24955: NOT
24956: IFFALSE 24960
// exit ;
24958: GO 25019
// for i in tmp do
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_VAR 0 4
24969: PUSH
24970: FOR_IN
24971: IFFALSE 25017
// for j = 1 to 3 do
24973: LD_ADDR_VAR 0 3
24977: PUSH
24978: DOUBLE
24979: LD_INT 1
24981: DEC
24982: ST_TO_ADDR
24983: LD_INT 3
24985: PUSH
24986: FOR_TO
24987: IFFALSE 25013
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24989: LD_VAR 0 2
24993: PPUSH
24994: CALL_OW 274
24998: PPUSH
24999: LD_VAR 0 3
25003: PPUSH
25004: LD_INT 99999
25006: PPUSH
25007: CALL_OW 277
25011: GO 24986
25013: POP
25014: POP
25015: GO 24970
25017: POP
25018: POP
// end ;
25019: LD_VAR 0 1
25023: RET
// export function hHackSetLevel10 ; var i , j ; begin
25024: LD_INT 0
25026: PPUSH
25027: PPUSH
25028: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25029: LD_ADDR_VAR 0 2
25033: PUSH
25034: LD_INT 21
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PPUSH
25044: CALL_OW 69
25048: PUSH
25049: FOR_IN
25050: IFFALSE 25102
// if IsSelected ( i ) then
25052: LD_VAR 0 2
25056: PPUSH
25057: CALL_OW 306
25061: IFFALSE 25100
// begin for j := 1 to 4 do
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: DOUBLE
25069: LD_INT 1
25071: DEC
25072: ST_TO_ADDR
25073: LD_INT 4
25075: PUSH
25076: FOR_TO
25077: IFFALSE 25098
// SetSkill ( i , j , 10 ) ;
25079: LD_VAR 0 2
25083: PPUSH
25084: LD_VAR 0 3
25088: PPUSH
25089: LD_INT 10
25091: PPUSH
25092: CALL_OW 237
25096: GO 25076
25098: POP
25099: POP
// end ;
25100: GO 25049
25102: POP
25103: POP
// end ;
25104: LD_VAR 0 1
25108: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25109: LD_INT 0
25111: PPUSH
25112: PPUSH
25113: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25114: LD_ADDR_VAR 0 2
25118: PUSH
25119: LD_INT 22
25121: PUSH
25122: LD_OWVAR 2
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 21
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PPUSH
25145: CALL_OW 69
25149: PUSH
25150: FOR_IN
25151: IFFALSE 25192
// begin for j := 1 to 4 do
25153: LD_ADDR_VAR 0 3
25157: PUSH
25158: DOUBLE
25159: LD_INT 1
25161: DEC
25162: ST_TO_ADDR
25163: LD_INT 4
25165: PUSH
25166: FOR_TO
25167: IFFALSE 25188
// SetSkill ( i , j , 10 ) ;
25169: LD_VAR 0 2
25173: PPUSH
25174: LD_VAR 0 3
25178: PPUSH
25179: LD_INT 10
25181: PPUSH
25182: CALL_OW 237
25186: GO 25166
25188: POP
25189: POP
// end ;
25190: GO 25150
25192: POP
25193: POP
// end ;
25194: LD_VAR 0 1
25198: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25199: LD_INT 0
25201: PPUSH
// uc_side := your_side ;
25202: LD_ADDR_OWVAR 20
25206: PUSH
25207: LD_OWVAR 2
25211: ST_TO_ADDR
// uc_nation := nation ;
25212: LD_ADDR_OWVAR 21
25216: PUSH
25217: LD_VAR 0 1
25221: ST_TO_ADDR
// InitHc ;
25222: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25226: LD_INT 0
25228: PPUSH
25229: LD_VAR 0 2
25233: PPUSH
25234: LD_VAR 0 3
25238: PPUSH
25239: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25243: LD_VAR 0 4
25247: PPUSH
25248: LD_VAR 0 5
25252: PPUSH
25253: CALL_OW 428
25257: PUSH
25258: LD_INT 0
25260: EQUAL
25261: IFFALSE 25285
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25263: CALL_OW 44
25267: PPUSH
25268: LD_VAR 0 4
25272: PPUSH
25273: LD_VAR 0 5
25277: PPUSH
25278: LD_INT 1
25280: PPUSH
25281: CALL_OW 48
// end ;
25285: LD_VAR 0 6
25289: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25290: LD_INT 0
25292: PPUSH
25293: PPUSH
// uc_side := your_side ;
25294: LD_ADDR_OWVAR 20
25298: PUSH
25299: LD_OWVAR 2
25303: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25304: LD_VAR 0 1
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: LD_INT 2
25314: PUSH
25315: LD_INT 3
25317: PUSH
25318: LD_INT 4
25320: PUSH
25321: LD_INT 5
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: IN
25331: IFFALSE 25343
// uc_nation := nation_american else
25333: LD_ADDR_OWVAR 21
25337: PUSH
25338: LD_INT 1
25340: ST_TO_ADDR
25341: GO 25386
// if chassis in [ 11 , 12 , 13 , 14 ] then
25343: LD_VAR 0 1
25347: PUSH
25348: LD_INT 11
25350: PUSH
25351: LD_INT 12
25353: PUSH
25354: LD_INT 13
25356: PUSH
25357: LD_INT 14
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: IN
25366: IFFALSE 25378
// uc_nation := nation_arabian else
25368: LD_ADDR_OWVAR 21
25372: PUSH
25373: LD_INT 2
25375: ST_TO_ADDR
25376: GO 25386
// uc_nation := nation_russian ;
25378: LD_ADDR_OWVAR 21
25382: PUSH
25383: LD_INT 3
25385: ST_TO_ADDR
// vc_chassis := chassis ;
25386: LD_ADDR_OWVAR 37
25390: PUSH
25391: LD_VAR 0 1
25395: ST_TO_ADDR
// vc_engine := engine ;
25396: LD_ADDR_OWVAR 39
25400: PUSH
25401: LD_VAR 0 2
25405: ST_TO_ADDR
// vc_control := control ;
25406: LD_ADDR_OWVAR 38
25410: PUSH
25411: LD_VAR 0 3
25415: ST_TO_ADDR
// vc_weapon := weapon ;
25416: LD_ADDR_OWVAR 40
25420: PUSH
25421: LD_VAR 0 4
25425: ST_TO_ADDR
// un := CreateVehicle ;
25426: LD_ADDR_VAR 0 8
25430: PUSH
25431: CALL_OW 45
25435: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25436: LD_VAR 0 8
25440: PPUSH
25441: LD_INT 0
25443: PPUSH
25444: LD_INT 5
25446: PPUSH
25447: CALL_OW 12
25451: PPUSH
25452: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25456: LD_VAR 0 8
25460: PPUSH
25461: LD_VAR 0 5
25465: PPUSH
25466: LD_VAR 0 6
25470: PPUSH
25471: LD_INT 1
25473: PPUSH
25474: CALL_OW 48
// end ;
25478: LD_VAR 0 7
25482: RET
// export hInvincible ; every 1 do
25483: GO 25485
25485: DISABLE
// hInvincible := [ ] ;
25486: LD_ADDR_EXP 96
25490: PUSH
25491: EMPTY
25492: ST_TO_ADDR
25493: END
// every 10 do var i ;
25494: GO 25496
25496: DISABLE
25497: LD_INT 0
25499: PPUSH
// begin enable ;
25500: ENABLE
// if not hInvincible then
25501: LD_EXP 96
25505: NOT
25506: IFFALSE 25510
// exit ;
25508: GO 25554
// for i in hInvincible do
25510: LD_ADDR_VAR 0 1
25514: PUSH
25515: LD_EXP 96
25519: PUSH
25520: FOR_IN
25521: IFFALSE 25552
// if GetLives ( i ) < 1000 then
25523: LD_VAR 0 1
25527: PPUSH
25528: CALL_OW 256
25532: PUSH
25533: LD_INT 1000
25535: LESS
25536: IFFALSE 25550
// SetLives ( i , 1000 ) ;
25538: LD_VAR 0 1
25542: PPUSH
25543: LD_INT 1000
25545: PPUSH
25546: CALL_OW 234
25550: GO 25520
25552: POP
25553: POP
// end ;
25554: PPOPN 1
25556: END
// export function hHackInvincible ; var i ; begin
25557: LD_INT 0
25559: PPUSH
25560: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25561: LD_ADDR_VAR 0 2
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 21
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: PPUSH
25594: CALL_OW 69
25598: PUSH
25599: FOR_IN
25600: IFFALSE 25661
// if IsSelected ( i ) then
25602: LD_VAR 0 2
25606: PPUSH
25607: CALL_OW 306
25611: IFFALSE 25659
// begin if i in hInvincible then
25613: LD_VAR 0 2
25617: PUSH
25618: LD_EXP 96
25622: IN
25623: IFFALSE 25643
// hInvincible := hInvincible diff i else
25625: LD_ADDR_EXP 96
25629: PUSH
25630: LD_EXP 96
25634: PUSH
25635: LD_VAR 0 2
25639: DIFF
25640: ST_TO_ADDR
25641: GO 25659
// hInvincible := hInvincible union i ;
25643: LD_ADDR_EXP 96
25647: PUSH
25648: LD_EXP 96
25652: PUSH
25653: LD_VAR 0 2
25657: UNION
25658: ST_TO_ADDR
// end ;
25659: GO 25599
25661: POP
25662: POP
// end ;
25663: LD_VAR 0 1
25667: RET
// export function hHackInvisible ; var i , j ; begin
25668: LD_INT 0
25670: PPUSH
25671: PPUSH
25672: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25673: LD_ADDR_VAR 0 2
25677: PUSH
25678: LD_INT 21
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PPUSH
25688: CALL_OW 69
25692: PUSH
25693: FOR_IN
25694: IFFALSE 25718
// if IsSelected ( i ) then
25696: LD_VAR 0 2
25700: PPUSH
25701: CALL_OW 306
25705: IFFALSE 25716
// ComForceInvisible ( i ) ;
25707: LD_VAR 0 2
25711: PPUSH
25712: CALL_OW 496
25716: GO 25693
25718: POP
25719: POP
// end ;
25720: LD_VAR 0 1
25724: RET
// export function hHackChangeYourSide ; begin
25725: LD_INT 0
25727: PPUSH
// if your_side = 8 then
25728: LD_OWVAR 2
25732: PUSH
25733: LD_INT 8
25735: EQUAL
25736: IFFALSE 25748
// your_side := 0 else
25738: LD_ADDR_OWVAR 2
25742: PUSH
25743: LD_INT 0
25745: ST_TO_ADDR
25746: GO 25762
// your_side := your_side + 1 ;
25748: LD_ADDR_OWVAR 2
25752: PUSH
25753: LD_OWVAR 2
25757: PUSH
25758: LD_INT 1
25760: PLUS
25761: ST_TO_ADDR
// end ;
25762: LD_VAR 0 1
25766: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25767: LD_INT 0
25769: PPUSH
25770: PPUSH
25771: PPUSH
// for i in all_units do
25772: LD_ADDR_VAR 0 2
25776: PUSH
25777: LD_OWVAR 3
25781: PUSH
25782: FOR_IN
25783: IFFALSE 25861
// if IsSelected ( i ) then
25785: LD_VAR 0 2
25789: PPUSH
25790: CALL_OW 306
25794: IFFALSE 25859
// begin j := GetSide ( i ) ;
25796: LD_ADDR_VAR 0 3
25800: PUSH
25801: LD_VAR 0 2
25805: PPUSH
25806: CALL_OW 255
25810: ST_TO_ADDR
// if j = 8 then
25811: LD_VAR 0 3
25815: PUSH
25816: LD_INT 8
25818: EQUAL
25819: IFFALSE 25831
// j := 0 else
25821: LD_ADDR_VAR 0 3
25825: PUSH
25826: LD_INT 0
25828: ST_TO_ADDR
25829: GO 25845
// j := j + 1 ;
25831: LD_ADDR_VAR 0 3
25835: PUSH
25836: LD_VAR 0 3
25840: PUSH
25841: LD_INT 1
25843: PLUS
25844: ST_TO_ADDR
// SetSide ( i , j ) ;
25845: LD_VAR 0 2
25849: PPUSH
25850: LD_VAR 0 3
25854: PPUSH
25855: CALL_OW 235
// end ;
25859: GO 25782
25861: POP
25862: POP
// end ;
25863: LD_VAR 0 1
25867: RET
// export function hHackFog ; begin
25868: LD_INT 0
25870: PPUSH
// FogOff ( true ) ;
25871: LD_INT 1
25873: PPUSH
25874: CALL_OW 344
// end ;
25878: LD_VAR 0 1
25882: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25883: LD_INT 0
25885: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25886: LD_VAR 0 1
25890: PPUSH
25891: LD_VAR 0 2
25895: PPUSH
25896: LD_VAR 0 3
25900: PPUSH
25901: LD_INT 1
25903: PPUSH
25904: LD_INT 1
25906: PPUSH
25907: CALL_OW 483
// CenterOnXY ( x , y ) ;
25911: LD_VAR 0 2
25915: PPUSH
25916: LD_VAR 0 3
25920: PPUSH
25921: CALL_OW 84
// end ;
25925: LD_VAR 0 4
25929: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25930: LD_INT 0
25932: PPUSH
25933: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25934: LD_VAR 0 1
25938: NOT
25939: PUSH
25940: LD_VAR 0 2
25944: PPUSH
25945: LD_VAR 0 3
25949: PPUSH
25950: CALL_OW 488
25954: NOT
25955: OR
25956: PUSH
25957: LD_VAR 0 1
25961: PPUSH
25962: CALL_OW 266
25966: PUSH
25967: LD_INT 3
25969: NONEQUAL
25970: PUSH
25971: LD_VAR 0 1
25975: PPUSH
25976: CALL_OW 247
25980: PUSH
25981: LD_INT 1
25983: EQUAL
25984: NOT
25985: AND
25986: OR
25987: IFFALSE 25991
// exit ;
25989: GO 26140
// if GetType ( factory ) = unit_human then
25991: LD_VAR 0 1
25995: PPUSH
25996: CALL_OW 247
26000: PUSH
26001: LD_INT 1
26003: EQUAL
26004: IFFALSE 26021
// factory := IsInUnit ( factory ) ;
26006: LD_ADDR_VAR 0 1
26010: PUSH
26011: LD_VAR 0 1
26015: PPUSH
26016: CALL_OW 310
26020: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26021: LD_VAR 0 1
26025: PPUSH
26026: CALL_OW 266
26030: PUSH
26031: LD_INT 3
26033: NONEQUAL
26034: IFFALSE 26038
// exit ;
26036: GO 26140
// if HexInfo ( x , y ) = factory then
26038: LD_VAR 0 2
26042: PPUSH
26043: LD_VAR 0 3
26047: PPUSH
26048: CALL_OW 428
26052: PUSH
26053: LD_VAR 0 1
26057: EQUAL
26058: IFFALSE 26085
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26060: LD_ADDR_EXP 97
26064: PUSH
26065: LD_EXP 97
26069: PPUSH
26070: LD_VAR 0 1
26074: PPUSH
26075: LD_INT 0
26077: PPUSH
26078: CALL_OW 1
26082: ST_TO_ADDR
26083: GO 26136
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26085: LD_ADDR_EXP 97
26089: PUSH
26090: LD_EXP 97
26094: PPUSH
26095: LD_VAR 0 1
26099: PPUSH
26100: LD_VAR 0 1
26104: PPUSH
26105: CALL_OW 255
26109: PUSH
26110: LD_VAR 0 1
26114: PUSH
26115: LD_VAR 0 2
26119: PUSH
26120: LD_VAR 0 3
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: PPUSH
26131: CALL_OW 1
26135: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26136: CALL 26145 0 0
// end ;
26140: LD_VAR 0 4
26144: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26145: LD_INT 0
26147: PPUSH
26148: PPUSH
26149: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26150: LD_STRING resetFactoryWaypoint();
26152: PPUSH
26153: CALL_OW 559
// if factoryWaypoints then
26157: LD_EXP 97
26161: IFFALSE 26287
// begin list := PrepareArray ( factoryWaypoints ) ;
26163: LD_ADDR_VAR 0 3
26167: PUSH
26168: LD_EXP 97
26172: PPUSH
26173: CALL 72719 0 1
26177: ST_TO_ADDR
// for i := 1 to list do
26178: LD_ADDR_VAR 0 2
26182: PUSH
26183: DOUBLE
26184: LD_INT 1
26186: DEC
26187: ST_TO_ADDR
26188: LD_VAR 0 3
26192: PUSH
26193: FOR_TO
26194: IFFALSE 26285
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26196: LD_STRING setFactoryWaypointXY(
26198: PUSH
26199: LD_VAR 0 3
26203: PUSH
26204: LD_VAR 0 2
26208: ARRAY
26209: PUSH
26210: LD_INT 1
26212: ARRAY
26213: STR
26214: PUSH
26215: LD_STRING ,
26217: STR
26218: PUSH
26219: LD_VAR 0 3
26223: PUSH
26224: LD_VAR 0 2
26228: ARRAY
26229: PUSH
26230: LD_INT 2
26232: ARRAY
26233: STR
26234: PUSH
26235: LD_STRING ,
26237: STR
26238: PUSH
26239: LD_VAR 0 3
26243: PUSH
26244: LD_VAR 0 2
26248: ARRAY
26249: PUSH
26250: LD_INT 3
26252: ARRAY
26253: STR
26254: PUSH
26255: LD_STRING ,
26257: STR
26258: PUSH
26259: LD_VAR 0 3
26263: PUSH
26264: LD_VAR 0 2
26268: ARRAY
26269: PUSH
26270: LD_INT 4
26272: ARRAY
26273: STR
26274: PUSH
26275: LD_STRING )
26277: STR
26278: PPUSH
26279: CALL_OW 559
26283: GO 26193
26285: POP
26286: POP
// end ; end ;
26287: LD_VAR 0 1
26291: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26292: LD_INT 0
26294: PPUSH
// if HexInfo ( x , y ) = warehouse then
26295: LD_VAR 0 2
26299: PPUSH
26300: LD_VAR 0 3
26304: PPUSH
26305: CALL_OW 428
26309: PUSH
26310: LD_VAR 0 1
26314: EQUAL
26315: IFFALSE 26342
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26317: LD_ADDR_EXP 98
26321: PUSH
26322: LD_EXP 98
26326: PPUSH
26327: LD_VAR 0 1
26331: PPUSH
26332: LD_INT 0
26334: PPUSH
26335: CALL_OW 1
26339: ST_TO_ADDR
26340: GO 26393
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26342: LD_ADDR_EXP 98
26346: PUSH
26347: LD_EXP 98
26351: PPUSH
26352: LD_VAR 0 1
26356: PPUSH
26357: LD_VAR 0 1
26361: PPUSH
26362: CALL_OW 255
26366: PUSH
26367: LD_VAR 0 1
26371: PUSH
26372: LD_VAR 0 2
26376: PUSH
26377: LD_VAR 0 3
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: PPUSH
26388: CALL_OW 1
26392: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26393: CALL 26402 0 0
// end ;
26397: LD_VAR 0 4
26401: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26402: LD_INT 0
26404: PPUSH
26405: PPUSH
26406: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26407: LD_STRING resetWarehouseGatheringPoints();
26409: PPUSH
26410: CALL_OW 559
// if warehouseGatheringPoints then
26414: LD_EXP 98
26418: IFFALSE 26544
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26420: LD_ADDR_VAR 0 3
26424: PUSH
26425: LD_EXP 98
26429: PPUSH
26430: CALL 72719 0 1
26434: ST_TO_ADDR
// for i := 1 to list do
26435: LD_ADDR_VAR 0 2
26439: PUSH
26440: DOUBLE
26441: LD_INT 1
26443: DEC
26444: ST_TO_ADDR
26445: LD_VAR 0 3
26449: PUSH
26450: FOR_TO
26451: IFFALSE 26542
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26453: LD_STRING setWarehouseGatheringPointXY(
26455: PUSH
26456: LD_VAR 0 3
26460: PUSH
26461: LD_VAR 0 2
26465: ARRAY
26466: PUSH
26467: LD_INT 1
26469: ARRAY
26470: STR
26471: PUSH
26472: LD_STRING ,
26474: STR
26475: PUSH
26476: LD_VAR 0 3
26480: PUSH
26481: LD_VAR 0 2
26485: ARRAY
26486: PUSH
26487: LD_INT 2
26489: ARRAY
26490: STR
26491: PUSH
26492: LD_STRING ,
26494: STR
26495: PUSH
26496: LD_VAR 0 3
26500: PUSH
26501: LD_VAR 0 2
26505: ARRAY
26506: PUSH
26507: LD_INT 3
26509: ARRAY
26510: STR
26511: PUSH
26512: LD_STRING ,
26514: STR
26515: PUSH
26516: LD_VAR 0 3
26520: PUSH
26521: LD_VAR 0 2
26525: ARRAY
26526: PUSH
26527: LD_INT 4
26529: ARRAY
26530: STR
26531: PUSH
26532: LD_STRING )
26534: STR
26535: PPUSH
26536: CALL_OW 559
26540: GO 26450
26542: POP
26543: POP
// end ; end ;
26544: LD_VAR 0 1
26548: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26549: LD_EXP 98
26553: IFFALSE 27240
26555: GO 26557
26557: DISABLE
26558: LD_INT 0
26560: PPUSH
26561: PPUSH
26562: PPUSH
26563: PPUSH
26564: PPUSH
26565: PPUSH
26566: PPUSH
26567: PPUSH
26568: PPUSH
// begin enable ;
26569: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26570: LD_ADDR_VAR 0 3
26574: PUSH
26575: LD_EXP 98
26579: PPUSH
26580: CALL 72719 0 1
26584: ST_TO_ADDR
// if not list then
26585: LD_VAR 0 3
26589: NOT
26590: IFFALSE 26594
// exit ;
26592: GO 27240
// for i := 1 to list do
26594: LD_ADDR_VAR 0 1
26598: PUSH
26599: DOUBLE
26600: LD_INT 1
26602: DEC
26603: ST_TO_ADDR
26604: LD_VAR 0 3
26608: PUSH
26609: FOR_TO
26610: IFFALSE 27238
// begin depot := list [ i ] [ 2 ] ;
26612: LD_ADDR_VAR 0 8
26616: PUSH
26617: LD_VAR 0 3
26621: PUSH
26622: LD_VAR 0 1
26626: ARRAY
26627: PUSH
26628: LD_INT 2
26630: ARRAY
26631: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26632: LD_ADDR_VAR 0 5
26636: PUSH
26637: LD_VAR 0 3
26641: PUSH
26642: LD_VAR 0 1
26646: ARRAY
26647: PUSH
26648: LD_INT 1
26650: ARRAY
26651: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26652: LD_VAR 0 8
26656: PPUSH
26657: CALL_OW 301
26661: PUSH
26662: LD_VAR 0 5
26666: PUSH
26667: LD_VAR 0 8
26671: PPUSH
26672: CALL_OW 255
26676: NONEQUAL
26677: OR
26678: IFFALSE 26707
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26680: LD_ADDR_EXP 98
26684: PUSH
26685: LD_EXP 98
26689: PPUSH
26690: LD_VAR 0 8
26694: PPUSH
26695: LD_INT 0
26697: PPUSH
26698: CALL_OW 1
26702: ST_TO_ADDR
// exit ;
26703: POP
26704: POP
26705: GO 27240
// end ; x := list [ i ] [ 3 ] ;
26707: LD_ADDR_VAR 0 6
26711: PUSH
26712: LD_VAR 0 3
26716: PUSH
26717: LD_VAR 0 1
26721: ARRAY
26722: PUSH
26723: LD_INT 3
26725: ARRAY
26726: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26727: LD_ADDR_VAR 0 7
26731: PUSH
26732: LD_VAR 0 3
26736: PUSH
26737: LD_VAR 0 1
26741: ARRAY
26742: PUSH
26743: LD_INT 4
26745: ARRAY
26746: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26747: LD_ADDR_VAR 0 9
26751: PUSH
26752: LD_VAR 0 6
26756: PPUSH
26757: LD_VAR 0 7
26761: PPUSH
26762: LD_INT 16
26764: PPUSH
26765: CALL 71303 0 3
26769: ST_TO_ADDR
// if not cratesNearbyPoint then
26770: LD_VAR 0 9
26774: NOT
26775: IFFALSE 26781
// exit ;
26777: POP
26778: POP
26779: GO 27240
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26781: LD_ADDR_VAR 0 4
26785: PUSH
26786: LD_INT 22
26788: PUSH
26789: LD_VAR 0 5
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 3
26800: PUSH
26801: LD_INT 60
26803: PUSH
26804: EMPTY
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 91
26813: PUSH
26814: LD_VAR 0 8
26818: PUSH
26819: LD_INT 6
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: LD_INT 25
26832: PUSH
26833: LD_INT 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 25
26842: PUSH
26843: LD_INT 16
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: PPUSH
26861: CALL_OW 69
26865: PUSH
26866: LD_VAR 0 8
26870: PPUSH
26871: CALL_OW 313
26875: PPUSH
26876: LD_INT 3
26878: PUSH
26879: LD_INT 60
26881: PUSH
26882: EMPTY
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 25
26894: PUSH
26895: LD_INT 2
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 25
26904: PUSH
26905: LD_INT 16
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PPUSH
26921: CALL_OW 72
26925: UNION
26926: ST_TO_ADDR
// if tmp then
26927: LD_VAR 0 4
26931: IFFALSE 27011
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26933: LD_ADDR_VAR 0 4
26937: PUSH
26938: LD_VAR 0 4
26942: PPUSH
26943: LD_INT 3
26945: PPUSH
26946: CALL 69270 0 2
26950: ST_TO_ADDR
// for j in tmp do
26951: LD_ADDR_VAR 0 2
26955: PUSH
26956: LD_VAR 0 4
26960: PUSH
26961: FOR_IN
26962: IFFALSE 27005
// begin if IsInUnit ( j ) then
26964: LD_VAR 0 2
26968: PPUSH
26969: CALL_OW 310
26973: IFFALSE 26984
// ComExit ( j ) ;
26975: LD_VAR 0 2
26979: PPUSH
26980: CALL 69353 0 1
// AddComCollect ( j , x , y ) ;
26984: LD_VAR 0 2
26988: PPUSH
26989: LD_VAR 0 6
26993: PPUSH
26994: LD_VAR 0 7
26998: PPUSH
26999: CALL_OW 177
// end ;
27003: GO 26961
27005: POP
27006: POP
// exit ;
27007: POP
27008: POP
27009: GO 27240
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27011: LD_ADDR_VAR 0 4
27015: PUSH
27016: LD_INT 22
27018: PUSH
27019: LD_VAR 0 5
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 91
27030: PUSH
27031: LD_VAR 0 8
27035: PUSH
27036: LD_INT 8
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: LD_INT 34
27049: PUSH
27050: LD_INT 12
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 34
27059: PUSH
27060: LD_INT 51
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 34
27069: PUSH
27070: LD_INT 32
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 34
27079: PUSH
27080: LD_EXP 22
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: PPUSH
27101: CALL_OW 69
27105: ST_TO_ADDR
// if tmp then
27106: LD_VAR 0 4
27110: IFFALSE 27236
// begin for j in tmp do
27112: LD_ADDR_VAR 0 2
27116: PUSH
27117: LD_VAR 0 4
27121: PUSH
27122: FOR_IN
27123: IFFALSE 27234
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27125: LD_VAR 0 2
27129: PPUSH
27130: CALL_OW 262
27134: PUSH
27135: LD_INT 3
27137: EQUAL
27138: PUSH
27139: LD_VAR 0 2
27143: PPUSH
27144: CALL_OW 261
27148: PUSH
27149: LD_INT 20
27151: GREATER
27152: OR
27153: PUSH
27154: LD_VAR 0 2
27158: PPUSH
27159: CALL_OW 314
27163: NOT
27164: AND
27165: PUSH
27166: LD_VAR 0 2
27170: PPUSH
27171: CALL_OW 263
27175: PUSH
27176: LD_INT 1
27178: NONEQUAL
27179: PUSH
27180: LD_VAR 0 2
27184: PPUSH
27185: CALL_OW 311
27189: OR
27190: AND
27191: IFFALSE 27232
// begin ComCollect ( j , x , y ) ;
27193: LD_VAR 0 2
27197: PPUSH
27198: LD_VAR 0 6
27202: PPUSH
27203: LD_VAR 0 7
27207: PPUSH
27208: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27212: LD_VAR 0 2
27216: PPUSH
27217: LD_VAR 0 8
27221: PPUSH
27222: CALL_OW 172
// exit ;
27226: POP
27227: POP
27228: POP
27229: POP
27230: GO 27240
// end ;
27232: GO 27122
27234: POP
27235: POP
// end ; end ;
27236: GO 26609
27238: POP
27239: POP
// end ; end_of_file
27240: PPOPN 9
27242: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27243: LD_INT 0
27245: PPUSH
27246: PPUSH
27247: PPUSH
27248: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27249: LD_VAR 0 1
27253: PPUSH
27254: CALL_OW 264
27258: PUSH
27259: LD_EXP 25
27263: EQUAL
27264: IFFALSE 27336
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27266: LD_INT 68
27268: PPUSH
27269: LD_VAR 0 1
27273: PPUSH
27274: CALL_OW 255
27278: PPUSH
27279: CALL_OW 321
27283: PUSH
27284: LD_INT 2
27286: EQUAL
27287: IFFALSE 27299
// eff := 70 else
27289: LD_ADDR_VAR 0 4
27293: PUSH
27294: LD_INT 70
27296: ST_TO_ADDR
27297: GO 27307
// eff := 30 ;
27299: LD_ADDR_VAR 0 4
27303: PUSH
27304: LD_INT 30
27306: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27307: LD_VAR 0 1
27311: PPUSH
27312: CALL_OW 250
27316: PPUSH
27317: LD_VAR 0 1
27321: PPUSH
27322: CALL_OW 251
27326: PPUSH
27327: LD_VAR 0 4
27331: PPUSH
27332: CALL_OW 495
// end ; end ;
27336: LD_VAR 0 2
27340: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27341: LD_INT 0
27343: PPUSH
// end ;
27344: LD_VAR 0 4
27348: RET
// export function SOS_Command ( cmd ) ; begin
27349: LD_INT 0
27351: PPUSH
// end ;
27352: LD_VAR 0 2
27356: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27357: LD_INT 0
27359: PPUSH
// end ;
27360: LD_VAR 0 6
27364: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27365: LD_INT 0
27367: PPUSH
27368: PPUSH
// if not vehicle or not factory then
27369: LD_VAR 0 1
27373: NOT
27374: PUSH
27375: LD_VAR 0 2
27379: NOT
27380: OR
27381: IFFALSE 27385
// exit ;
27383: GO 27616
// if factoryWaypoints >= factory then
27385: LD_EXP 97
27389: PUSH
27390: LD_VAR 0 2
27394: GREATEREQUAL
27395: IFFALSE 27616
// if factoryWaypoints [ factory ] then
27397: LD_EXP 97
27401: PUSH
27402: LD_VAR 0 2
27406: ARRAY
27407: IFFALSE 27616
// begin if GetControl ( vehicle ) = control_manual then
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 263
27418: PUSH
27419: LD_INT 1
27421: EQUAL
27422: IFFALSE 27503
// begin driver := IsDrivenBy ( vehicle ) ;
27424: LD_ADDR_VAR 0 4
27428: PUSH
27429: LD_VAR 0 1
27433: PPUSH
27434: CALL_OW 311
27438: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27439: LD_VAR 0 4
27443: PPUSH
27444: LD_EXP 97
27448: PUSH
27449: LD_VAR 0 2
27453: ARRAY
27454: PUSH
27455: LD_INT 3
27457: ARRAY
27458: PPUSH
27459: LD_EXP 97
27463: PUSH
27464: LD_VAR 0 2
27468: ARRAY
27469: PUSH
27470: LD_INT 4
27472: ARRAY
27473: PPUSH
27474: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27478: LD_VAR 0 4
27482: PPUSH
27483: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27487: LD_VAR 0 4
27491: PPUSH
27492: LD_VAR 0 2
27496: PPUSH
27497: CALL_OW 180
// end else
27501: GO 27616
// if GetControl ( vehicle ) = control_remote then
27503: LD_VAR 0 1
27507: PPUSH
27508: CALL_OW 263
27512: PUSH
27513: LD_INT 2
27515: EQUAL
27516: IFFALSE 27577
// begin wait ( 0 0$2 ) ;
27518: LD_INT 70
27520: PPUSH
27521: CALL_OW 67
// if Connect ( vehicle ) then
27525: LD_VAR 0 1
27529: PPUSH
27530: CALL 39664 0 1
27534: IFFALSE 27575
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27536: LD_VAR 0 1
27540: PPUSH
27541: LD_EXP 97
27545: PUSH
27546: LD_VAR 0 2
27550: ARRAY
27551: PUSH
27552: LD_INT 3
27554: ARRAY
27555: PPUSH
27556: LD_EXP 97
27560: PUSH
27561: LD_VAR 0 2
27565: ARRAY
27566: PUSH
27567: LD_INT 4
27569: ARRAY
27570: PPUSH
27571: CALL_OW 171
// end else
27575: GO 27616
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27577: LD_VAR 0 1
27581: PPUSH
27582: LD_EXP 97
27586: PUSH
27587: LD_VAR 0 2
27591: ARRAY
27592: PUSH
27593: LD_INT 3
27595: ARRAY
27596: PPUSH
27597: LD_EXP 97
27601: PUSH
27602: LD_VAR 0 2
27606: ARRAY
27607: PUSH
27608: LD_INT 4
27610: ARRAY
27611: PPUSH
27612: CALL_OW 171
// end ; end ;
27616: LD_VAR 0 3
27620: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27621: LD_INT 0
27623: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27624: LD_VAR 0 1
27628: PUSH
27629: LD_INT 250
27631: EQUAL
27632: PUSH
27633: LD_VAR 0 2
27637: PPUSH
27638: CALL_OW 264
27642: PUSH
27643: LD_EXP 28
27647: EQUAL
27648: AND
27649: IFFALSE 27670
// MinerPlaceMine ( unit , x , y ) ;
27651: LD_VAR 0 2
27655: PPUSH
27656: LD_VAR 0 4
27660: PPUSH
27661: LD_VAR 0 5
27665: PPUSH
27666: CALL 30069 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27670: LD_VAR 0 1
27674: PUSH
27675: LD_INT 251
27677: EQUAL
27678: PUSH
27679: LD_VAR 0 2
27683: PPUSH
27684: CALL_OW 264
27688: PUSH
27689: LD_EXP 28
27693: EQUAL
27694: AND
27695: IFFALSE 27716
// MinerDetonateMine ( unit , x , y ) ;
27697: LD_VAR 0 2
27701: PPUSH
27702: LD_VAR 0 4
27706: PPUSH
27707: LD_VAR 0 5
27711: PPUSH
27712: CALL 30346 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27716: LD_VAR 0 1
27720: PUSH
27721: LD_INT 252
27723: EQUAL
27724: PUSH
27725: LD_VAR 0 2
27729: PPUSH
27730: CALL_OW 264
27734: PUSH
27735: LD_EXP 28
27739: EQUAL
27740: AND
27741: IFFALSE 27762
// MinerCreateMinefield ( unit , x , y ) ;
27743: LD_VAR 0 2
27747: PPUSH
27748: LD_VAR 0 4
27752: PPUSH
27753: LD_VAR 0 5
27757: PPUSH
27758: CALL 30763 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27762: LD_VAR 0 1
27766: PUSH
27767: LD_INT 253
27769: EQUAL
27770: PUSH
27771: LD_VAR 0 2
27775: PPUSH
27776: CALL_OW 257
27780: PUSH
27781: LD_INT 5
27783: EQUAL
27784: AND
27785: IFFALSE 27806
// ComBinocular ( unit , x , y ) ;
27787: LD_VAR 0 2
27791: PPUSH
27792: LD_VAR 0 4
27796: PPUSH
27797: LD_VAR 0 5
27801: PPUSH
27802: CALL 31134 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27806: LD_VAR 0 1
27810: PUSH
27811: LD_INT 254
27813: EQUAL
27814: PUSH
27815: LD_VAR 0 2
27819: PPUSH
27820: CALL_OW 264
27824: PUSH
27825: LD_EXP 23
27829: EQUAL
27830: AND
27831: PUSH
27832: LD_VAR 0 3
27836: PPUSH
27837: CALL_OW 263
27841: PUSH
27842: LD_INT 3
27844: EQUAL
27845: AND
27846: IFFALSE 27862
// HackDestroyVehicle ( unit , selectedUnit ) ;
27848: LD_VAR 0 2
27852: PPUSH
27853: LD_VAR 0 3
27857: PPUSH
27858: CALL 29429 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27862: LD_VAR 0 1
27866: PUSH
27867: LD_INT 255
27869: EQUAL
27870: PUSH
27871: LD_VAR 0 2
27875: PPUSH
27876: CALL_OW 264
27880: PUSH
27881: LD_INT 14
27883: PUSH
27884: LD_INT 53
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: IN
27891: AND
27892: PUSH
27893: LD_VAR 0 4
27897: PPUSH
27898: LD_VAR 0 5
27902: PPUSH
27903: CALL_OW 488
27907: AND
27908: IFFALSE 27932
// CutTreeXYR ( unit , x , y , 12 ) ;
27910: LD_VAR 0 2
27914: PPUSH
27915: LD_VAR 0 4
27919: PPUSH
27920: LD_VAR 0 5
27924: PPUSH
27925: LD_INT 12
27927: PPUSH
27928: CALL 27995 0 4
// if cmd = 256 then
27932: LD_VAR 0 1
27936: PUSH
27937: LD_INT 256
27939: EQUAL
27940: IFFALSE 27961
// SetFactoryWaypoint ( unit , x , y ) ;
27942: LD_VAR 0 2
27946: PPUSH
27947: LD_VAR 0 4
27951: PPUSH
27952: LD_VAR 0 5
27956: PPUSH
27957: CALL 25930 0 3
// if cmd = 257 then
27961: LD_VAR 0 1
27965: PUSH
27966: LD_INT 257
27968: EQUAL
27969: IFFALSE 27990
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27971: LD_VAR 0 2
27975: PPUSH
27976: LD_VAR 0 4
27980: PPUSH
27981: LD_VAR 0 5
27985: PPUSH
27986: CALL 26292 0 3
// end ;
27990: LD_VAR 0 6
27994: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
27999: PPUSH
28000: PPUSH
28001: PPUSH
28002: PPUSH
28003: PPUSH
28004: PPUSH
28005: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28006: LD_VAR 0 1
28010: NOT
28011: PUSH
28012: LD_VAR 0 2
28016: PPUSH
28017: LD_VAR 0 3
28021: PPUSH
28022: CALL_OW 488
28026: NOT
28027: OR
28028: PUSH
28029: LD_VAR 0 4
28033: NOT
28034: OR
28035: IFFALSE 28039
// exit ;
28037: GO 28379
// list := [ ] ;
28039: LD_ADDR_VAR 0 13
28043: PUSH
28044: EMPTY
28045: ST_TO_ADDR
// if x - r < 0 then
28046: LD_VAR 0 2
28050: PUSH
28051: LD_VAR 0 4
28055: MINUS
28056: PUSH
28057: LD_INT 0
28059: LESS
28060: IFFALSE 28072
// min_x := 0 else
28062: LD_ADDR_VAR 0 7
28066: PUSH
28067: LD_INT 0
28069: ST_TO_ADDR
28070: GO 28088
// min_x := x - r ;
28072: LD_ADDR_VAR 0 7
28076: PUSH
28077: LD_VAR 0 2
28081: PUSH
28082: LD_VAR 0 4
28086: MINUS
28087: ST_TO_ADDR
// if y - r < 0 then
28088: LD_VAR 0 3
28092: PUSH
28093: LD_VAR 0 4
28097: MINUS
28098: PUSH
28099: LD_INT 0
28101: LESS
28102: IFFALSE 28114
// min_y := 0 else
28104: LD_ADDR_VAR 0 8
28108: PUSH
28109: LD_INT 0
28111: ST_TO_ADDR
28112: GO 28130
// min_y := y - r ;
28114: LD_ADDR_VAR 0 8
28118: PUSH
28119: LD_VAR 0 3
28123: PUSH
28124: LD_VAR 0 4
28128: MINUS
28129: ST_TO_ADDR
// max_x := x + r ;
28130: LD_ADDR_VAR 0 9
28134: PUSH
28135: LD_VAR 0 2
28139: PUSH
28140: LD_VAR 0 4
28144: PLUS
28145: ST_TO_ADDR
// max_y := y + r ;
28146: LD_ADDR_VAR 0 10
28150: PUSH
28151: LD_VAR 0 3
28155: PUSH
28156: LD_VAR 0 4
28160: PLUS
28161: ST_TO_ADDR
// for _x = min_x to max_x do
28162: LD_ADDR_VAR 0 11
28166: PUSH
28167: DOUBLE
28168: LD_VAR 0 7
28172: DEC
28173: ST_TO_ADDR
28174: LD_VAR 0 9
28178: PUSH
28179: FOR_TO
28180: IFFALSE 28297
// for _y = min_y to max_y do
28182: LD_ADDR_VAR 0 12
28186: PUSH
28187: DOUBLE
28188: LD_VAR 0 8
28192: DEC
28193: ST_TO_ADDR
28194: LD_VAR 0 10
28198: PUSH
28199: FOR_TO
28200: IFFALSE 28293
// begin if not ValidHex ( _x , _y ) then
28202: LD_VAR 0 11
28206: PPUSH
28207: LD_VAR 0 12
28211: PPUSH
28212: CALL_OW 488
28216: NOT
28217: IFFALSE 28221
// continue ;
28219: GO 28199
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28221: LD_VAR 0 11
28225: PPUSH
28226: LD_VAR 0 12
28230: PPUSH
28231: CALL_OW 351
28235: PUSH
28236: LD_VAR 0 11
28240: PPUSH
28241: LD_VAR 0 12
28245: PPUSH
28246: CALL_OW 554
28250: AND
28251: IFFALSE 28291
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28253: LD_ADDR_VAR 0 13
28257: PUSH
28258: LD_VAR 0 13
28262: PPUSH
28263: LD_VAR 0 13
28267: PUSH
28268: LD_INT 1
28270: PLUS
28271: PPUSH
28272: LD_VAR 0 11
28276: PUSH
28277: LD_VAR 0 12
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PPUSH
28286: CALL_OW 2
28290: ST_TO_ADDR
// end ;
28291: GO 28199
28293: POP
28294: POP
28295: GO 28179
28297: POP
28298: POP
// if not list then
28299: LD_VAR 0 13
28303: NOT
28304: IFFALSE 28308
// exit ;
28306: GO 28379
// for i in list do
28308: LD_ADDR_VAR 0 6
28312: PUSH
28313: LD_VAR 0 13
28317: PUSH
28318: FOR_IN
28319: IFFALSE 28377
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28321: LD_VAR 0 1
28325: PPUSH
28326: LD_STRING M
28328: PUSH
28329: LD_VAR 0 6
28333: PUSH
28334: LD_INT 1
28336: ARRAY
28337: PUSH
28338: LD_VAR 0 6
28342: PUSH
28343: LD_INT 2
28345: ARRAY
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: PUSH
28368: EMPTY
28369: LIST
28370: PPUSH
28371: CALL_OW 447
28375: GO 28318
28377: POP
28378: POP
// end ;
28379: LD_VAR 0 5
28383: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28384: LD_EXP 100
28388: NOT
28389: IFFALSE 28439
28391: GO 28393
28393: DISABLE
// begin initHack := true ;
28394: LD_ADDR_EXP 100
28398: PUSH
28399: LD_INT 1
28401: ST_TO_ADDR
// hackTanks := [ ] ;
28402: LD_ADDR_EXP 101
28406: PUSH
28407: EMPTY
28408: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28409: LD_ADDR_EXP 102
28413: PUSH
28414: EMPTY
28415: ST_TO_ADDR
// hackLimit := 3 ;
28416: LD_ADDR_EXP 103
28420: PUSH
28421: LD_INT 3
28423: ST_TO_ADDR
// hackDist := 12 ;
28424: LD_ADDR_EXP 104
28428: PUSH
28429: LD_INT 12
28431: ST_TO_ADDR
// hackCounter := [ ] ;
28432: LD_ADDR_EXP 105
28436: PUSH
28437: EMPTY
28438: ST_TO_ADDR
// end ;
28439: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28440: LD_EXP 100
28444: PUSH
28445: LD_INT 34
28447: PUSH
28448: LD_EXP 23
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PPUSH
28457: CALL_OW 69
28461: AND
28462: IFFALSE 28717
28464: GO 28466
28466: DISABLE
28467: LD_INT 0
28469: PPUSH
28470: PPUSH
// begin enable ;
28471: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28472: LD_ADDR_VAR 0 1
28476: PUSH
28477: LD_INT 34
28479: PUSH
28480: LD_EXP 23
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PPUSH
28489: CALL_OW 69
28493: PUSH
28494: FOR_IN
28495: IFFALSE 28715
// begin if not i in hackTanks then
28497: LD_VAR 0 1
28501: PUSH
28502: LD_EXP 101
28506: IN
28507: NOT
28508: IFFALSE 28591
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28510: LD_ADDR_EXP 101
28514: PUSH
28515: LD_EXP 101
28519: PPUSH
28520: LD_EXP 101
28524: PUSH
28525: LD_INT 1
28527: PLUS
28528: PPUSH
28529: LD_VAR 0 1
28533: PPUSH
28534: CALL_OW 1
28538: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28539: LD_ADDR_EXP 102
28543: PUSH
28544: LD_EXP 102
28548: PPUSH
28549: LD_EXP 102
28553: PUSH
28554: LD_INT 1
28556: PLUS
28557: PPUSH
28558: EMPTY
28559: PPUSH
28560: CALL_OW 1
28564: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28565: LD_ADDR_EXP 105
28569: PUSH
28570: LD_EXP 105
28574: PPUSH
28575: LD_EXP 105
28579: PUSH
28580: LD_INT 1
28582: PLUS
28583: PPUSH
28584: EMPTY
28585: PPUSH
28586: CALL_OW 1
28590: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 302
28600: NOT
28601: IFFALSE 28614
// begin HackUnlinkAll ( i ) ;
28603: LD_VAR 0 1
28607: PPUSH
28608: CALL 28720 0 1
// continue ;
28612: GO 28494
// end ; HackCheckCapturedStatus ( i ) ;
28614: LD_VAR 0 1
28618: PPUSH
28619: CALL 29163 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28623: LD_ADDR_VAR 0 2
28627: PUSH
28628: LD_INT 81
28630: PUSH
28631: LD_VAR 0 1
28635: PPUSH
28636: CALL_OW 255
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 33
28647: PUSH
28648: LD_INT 3
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 91
28657: PUSH
28658: LD_VAR 0 1
28662: PUSH
28663: LD_EXP 104
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 50
28675: PUSH
28676: EMPTY
28677: LIST
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: PPUSH
28685: CALL_OW 69
28689: ST_TO_ADDR
// if not tmp then
28690: LD_VAR 0 2
28694: NOT
28695: IFFALSE 28699
// continue ;
28697: GO 28494
// HackLink ( i , tmp ) ;
28699: LD_VAR 0 1
28703: PPUSH
28704: LD_VAR 0 2
28708: PPUSH
28709: CALL 28856 0 2
// end ;
28713: GO 28494
28715: POP
28716: POP
// end ;
28717: PPOPN 2
28719: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28720: LD_INT 0
28722: PPUSH
28723: PPUSH
28724: PPUSH
// if not hack in hackTanks then
28725: LD_VAR 0 1
28729: PUSH
28730: LD_EXP 101
28734: IN
28735: NOT
28736: IFFALSE 28740
// exit ;
28738: GO 28851
// index := GetElementIndex ( hackTanks , hack ) ;
28740: LD_ADDR_VAR 0 4
28744: PUSH
28745: LD_EXP 101
28749: PPUSH
28750: LD_VAR 0 1
28754: PPUSH
28755: CALL 36478 0 2
28759: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28760: LD_EXP 102
28764: PUSH
28765: LD_VAR 0 4
28769: ARRAY
28770: IFFALSE 28851
// begin for i in hackTanksCaptured [ index ] do
28772: LD_ADDR_VAR 0 3
28776: PUSH
28777: LD_EXP 102
28781: PUSH
28782: LD_VAR 0 4
28786: ARRAY
28787: PUSH
28788: FOR_IN
28789: IFFALSE 28815
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28791: LD_VAR 0 3
28795: PUSH
28796: LD_INT 1
28798: ARRAY
28799: PPUSH
28800: LD_VAR 0 3
28804: PUSH
28805: LD_INT 2
28807: ARRAY
28808: PPUSH
28809: CALL_OW 235
28813: GO 28788
28815: POP
28816: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28817: LD_ADDR_EXP 102
28821: PUSH
28822: LD_EXP 102
28826: PPUSH
28827: LD_VAR 0 4
28831: PPUSH
28832: EMPTY
28833: PPUSH
28834: CALL_OW 1
28838: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28839: LD_VAR 0 1
28843: PPUSH
28844: LD_INT 0
28846: PPUSH
28847: CALL_OW 505
// end ; end ;
28851: LD_VAR 0 2
28855: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28856: LD_INT 0
28858: PPUSH
28859: PPUSH
28860: PPUSH
// if not hack in hackTanks or not vehicles then
28861: LD_VAR 0 1
28865: PUSH
28866: LD_EXP 101
28870: IN
28871: NOT
28872: PUSH
28873: LD_VAR 0 2
28877: NOT
28878: OR
28879: IFFALSE 28883
// exit ;
28881: GO 29158
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28883: LD_ADDR_VAR 0 2
28887: PUSH
28888: LD_VAR 0 1
28892: PPUSH
28893: LD_VAR 0 2
28897: PPUSH
28898: LD_INT 1
28900: PPUSH
28901: LD_INT 1
28903: PPUSH
28904: CALL 37128 0 4
28908: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28909: LD_ADDR_VAR 0 5
28913: PUSH
28914: LD_EXP 101
28918: PPUSH
28919: LD_VAR 0 1
28923: PPUSH
28924: CALL 36478 0 2
28928: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28929: LD_EXP 102
28933: PUSH
28934: LD_VAR 0 5
28938: ARRAY
28939: PUSH
28940: LD_EXP 103
28944: LESS
28945: IFFALSE 29134
// begin for i := 1 to vehicles do
28947: LD_ADDR_VAR 0 4
28951: PUSH
28952: DOUBLE
28953: LD_INT 1
28955: DEC
28956: ST_TO_ADDR
28957: LD_VAR 0 2
28961: PUSH
28962: FOR_TO
28963: IFFALSE 29132
// begin if hackTanksCaptured [ index ] = hackLimit then
28965: LD_EXP 102
28969: PUSH
28970: LD_VAR 0 5
28974: ARRAY
28975: PUSH
28976: LD_EXP 103
28980: EQUAL
28981: IFFALSE 28985
// break ;
28983: GO 29132
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28985: LD_ADDR_EXP 105
28989: PUSH
28990: LD_EXP 105
28994: PPUSH
28995: LD_VAR 0 5
28999: PPUSH
29000: LD_EXP 105
29004: PUSH
29005: LD_VAR 0 5
29009: ARRAY
29010: PUSH
29011: LD_INT 1
29013: PLUS
29014: PPUSH
29015: CALL_OW 1
29019: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29020: LD_ADDR_EXP 102
29024: PUSH
29025: LD_EXP 102
29029: PPUSH
29030: LD_VAR 0 5
29034: PUSH
29035: LD_EXP 102
29039: PUSH
29040: LD_VAR 0 5
29044: ARRAY
29045: PUSH
29046: LD_INT 1
29048: PLUS
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PPUSH
29054: LD_VAR 0 2
29058: PUSH
29059: LD_VAR 0 4
29063: ARRAY
29064: PUSH
29065: LD_VAR 0 2
29069: PUSH
29070: LD_VAR 0 4
29074: ARRAY
29075: PPUSH
29076: CALL_OW 255
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL 36693 0 3
29089: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29090: LD_VAR 0 2
29094: PUSH
29095: LD_VAR 0 4
29099: ARRAY
29100: PPUSH
29101: LD_VAR 0 1
29105: PPUSH
29106: CALL_OW 255
29110: PPUSH
29111: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29115: LD_VAR 0 2
29119: PUSH
29120: LD_VAR 0 4
29124: ARRAY
29125: PPUSH
29126: CALL_OW 141
// end ;
29130: GO 28962
29132: POP
29133: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29134: LD_VAR 0 1
29138: PPUSH
29139: LD_EXP 102
29143: PUSH
29144: LD_VAR 0 5
29148: ARRAY
29149: PUSH
29150: LD_INT 0
29152: PLUS
29153: PPUSH
29154: CALL_OW 505
// end ;
29158: LD_VAR 0 3
29162: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29163: LD_INT 0
29165: PPUSH
29166: PPUSH
29167: PPUSH
29168: PPUSH
// if not hack in hackTanks then
29169: LD_VAR 0 1
29173: PUSH
29174: LD_EXP 101
29178: IN
29179: NOT
29180: IFFALSE 29184
// exit ;
29182: GO 29424
// index := GetElementIndex ( hackTanks , hack ) ;
29184: LD_ADDR_VAR 0 4
29188: PUSH
29189: LD_EXP 101
29193: PPUSH
29194: LD_VAR 0 1
29198: PPUSH
29199: CALL 36478 0 2
29203: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29204: LD_ADDR_VAR 0 3
29208: PUSH
29209: DOUBLE
29210: LD_EXP 102
29214: PUSH
29215: LD_VAR 0 4
29219: ARRAY
29220: INC
29221: ST_TO_ADDR
29222: LD_INT 1
29224: PUSH
29225: FOR_DOWNTO
29226: IFFALSE 29398
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29228: LD_ADDR_VAR 0 5
29232: PUSH
29233: LD_EXP 102
29237: PUSH
29238: LD_VAR 0 4
29242: ARRAY
29243: PUSH
29244: LD_VAR 0 3
29248: ARRAY
29249: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29250: LD_VAR 0 5
29254: PUSH
29255: LD_INT 1
29257: ARRAY
29258: PPUSH
29259: CALL_OW 302
29263: NOT
29264: PUSH
29265: LD_VAR 0 5
29269: PUSH
29270: LD_INT 1
29272: ARRAY
29273: PPUSH
29274: CALL_OW 255
29278: PUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 255
29288: NONEQUAL
29289: OR
29290: IFFALSE 29396
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29292: LD_VAR 0 5
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PPUSH
29301: CALL_OW 305
29305: PUSH
29306: LD_VAR 0 5
29310: PUSH
29311: LD_INT 1
29313: ARRAY
29314: PPUSH
29315: CALL_OW 255
29319: PUSH
29320: LD_VAR 0 1
29324: PPUSH
29325: CALL_OW 255
29329: EQUAL
29330: AND
29331: IFFALSE 29355
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29333: LD_VAR 0 5
29337: PUSH
29338: LD_INT 1
29340: ARRAY
29341: PPUSH
29342: LD_VAR 0 5
29346: PUSH
29347: LD_INT 2
29349: ARRAY
29350: PPUSH
29351: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29355: LD_ADDR_EXP 102
29359: PUSH
29360: LD_EXP 102
29364: PPUSH
29365: LD_VAR 0 4
29369: PPUSH
29370: LD_EXP 102
29374: PUSH
29375: LD_VAR 0 4
29379: ARRAY
29380: PPUSH
29381: LD_VAR 0 3
29385: PPUSH
29386: CALL_OW 3
29390: PPUSH
29391: CALL_OW 1
29395: ST_TO_ADDR
// end ; end ;
29396: GO 29225
29398: POP
29399: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29400: LD_VAR 0 1
29404: PPUSH
29405: LD_EXP 102
29409: PUSH
29410: LD_VAR 0 4
29414: ARRAY
29415: PUSH
29416: LD_INT 0
29418: PLUS
29419: PPUSH
29420: CALL_OW 505
// end ;
29424: LD_VAR 0 2
29428: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29429: LD_INT 0
29431: PPUSH
29432: PPUSH
29433: PPUSH
29434: PPUSH
// if not hack in hackTanks then
29435: LD_VAR 0 1
29439: PUSH
29440: LD_EXP 101
29444: IN
29445: NOT
29446: IFFALSE 29450
// exit ;
29448: GO 29535
// index := GetElementIndex ( hackTanks , hack ) ;
29450: LD_ADDR_VAR 0 5
29454: PUSH
29455: LD_EXP 101
29459: PPUSH
29460: LD_VAR 0 1
29464: PPUSH
29465: CALL 36478 0 2
29469: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29470: LD_ADDR_VAR 0 4
29474: PUSH
29475: DOUBLE
29476: LD_INT 1
29478: DEC
29479: ST_TO_ADDR
29480: LD_EXP 102
29484: PUSH
29485: LD_VAR 0 5
29489: ARRAY
29490: PUSH
29491: FOR_TO
29492: IFFALSE 29533
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29494: LD_EXP 102
29498: PUSH
29499: LD_VAR 0 5
29503: ARRAY
29504: PUSH
29505: LD_VAR 0 4
29509: ARRAY
29510: PUSH
29511: LD_INT 1
29513: ARRAY
29514: PUSH
29515: LD_VAR 0 2
29519: EQUAL
29520: IFFALSE 29531
// KillUnit ( vehicle ) ;
29522: LD_VAR 0 2
29526: PPUSH
29527: CALL_OW 66
29531: GO 29491
29533: POP
29534: POP
// end ;
29535: LD_VAR 0 3
29539: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29540: LD_EXP 106
29544: NOT
29545: IFFALSE 29580
29547: GO 29549
29549: DISABLE
// begin initMiner := true ;
29550: LD_ADDR_EXP 106
29554: PUSH
29555: LD_INT 1
29557: ST_TO_ADDR
// minersList := [ ] ;
29558: LD_ADDR_EXP 107
29562: PUSH
29563: EMPTY
29564: ST_TO_ADDR
// minerMinesList := [ ] ;
29565: LD_ADDR_EXP 108
29569: PUSH
29570: EMPTY
29571: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29572: LD_ADDR_EXP 109
29576: PUSH
29577: LD_INT 5
29579: ST_TO_ADDR
// end ;
29580: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29581: LD_EXP 106
29585: PUSH
29586: LD_INT 34
29588: PUSH
29589: LD_EXP 28
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PPUSH
29598: CALL_OW 69
29602: AND
29603: IFFALSE 30066
29605: GO 29607
29607: DISABLE
29608: LD_INT 0
29610: PPUSH
29611: PPUSH
29612: PPUSH
29613: PPUSH
// begin enable ;
29614: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29615: LD_ADDR_VAR 0 1
29619: PUSH
29620: LD_INT 34
29622: PUSH
29623: LD_EXP 28
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PPUSH
29632: CALL_OW 69
29636: PUSH
29637: FOR_IN
29638: IFFALSE 29710
// begin if not i in minersList then
29640: LD_VAR 0 1
29644: PUSH
29645: LD_EXP 107
29649: IN
29650: NOT
29651: IFFALSE 29708
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29653: LD_ADDR_EXP 107
29657: PUSH
29658: LD_EXP 107
29662: PPUSH
29663: LD_EXP 107
29667: PUSH
29668: LD_INT 1
29670: PLUS
29671: PPUSH
29672: LD_VAR 0 1
29676: PPUSH
29677: CALL_OW 1
29681: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29682: LD_ADDR_EXP 108
29686: PUSH
29687: LD_EXP 108
29691: PPUSH
29692: LD_EXP 108
29696: PUSH
29697: LD_INT 1
29699: PLUS
29700: PPUSH
29701: EMPTY
29702: PPUSH
29703: CALL_OW 1
29707: ST_TO_ADDR
// end end ;
29708: GO 29637
29710: POP
29711: POP
// for i := minerMinesList downto 1 do
29712: LD_ADDR_VAR 0 1
29716: PUSH
29717: DOUBLE
29718: LD_EXP 108
29722: INC
29723: ST_TO_ADDR
29724: LD_INT 1
29726: PUSH
29727: FOR_DOWNTO
29728: IFFALSE 30064
// begin if IsLive ( minersList [ i ] ) then
29730: LD_EXP 107
29734: PUSH
29735: LD_VAR 0 1
29739: ARRAY
29740: PPUSH
29741: CALL_OW 300
29745: IFFALSE 29773
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29747: LD_EXP 107
29751: PUSH
29752: LD_VAR 0 1
29756: ARRAY
29757: PPUSH
29758: LD_EXP 108
29762: PUSH
29763: LD_VAR 0 1
29767: ARRAY
29768: PPUSH
29769: CALL_OW 505
// if not minerMinesList [ i ] then
29773: LD_EXP 108
29777: PUSH
29778: LD_VAR 0 1
29782: ARRAY
29783: NOT
29784: IFFALSE 29788
// continue ;
29786: GO 29727
// for j := minerMinesList [ i ] downto 1 do
29788: LD_ADDR_VAR 0 2
29792: PUSH
29793: DOUBLE
29794: LD_EXP 108
29798: PUSH
29799: LD_VAR 0 1
29803: ARRAY
29804: INC
29805: ST_TO_ADDR
29806: LD_INT 1
29808: PUSH
29809: FOR_DOWNTO
29810: IFFALSE 30060
// begin side := GetSide ( minersList [ i ] ) ;
29812: LD_ADDR_VAR 0 3
29816: PUSH
29817: LD_EXP 107
29821: PUSH
29822: LD_VAR 0 1
29826: ARRAY
29827: PPUSH
29828: CALL_OW 255
29832: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29833: LD_ADDR_VAR 0 4
29837: PUSH
29838: LD_EXP 108
29842: PUSH
29843: LD_VAR 0 1
29847: ARRAY
29848: PUSH
29849: LD_VAR 0 2
29853: ARRAY
29854: PUSH
29855: LD_INT 1
29857: ARRAY
29858: PPUSH
29859: LD_EXP 108
29863: PUSH
29864: LD_VAR 0 1
29868: ARRAY
29869: PUSH
29870: LD_VAR 0 2
29874: ARRAY
29875: PUSH
29876: LD_INT 2
29878: ARRAY
29879: PPUSH
29880: CALL_OW 428
29884: ST_TO_ADDR
// if not tmp then
29885: LD_VAR 0 4
29889: NOT
29890: IFFALSE 29894
// continue ;
29892: GO 29809
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29894: LD_VAR 0 4
29898: PUSH
29899: LD_INT 81
29901: PUSH
29902: LD_VAR 0 3
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 69
29915: IN
29916: PUSH
29917: LD_EXP 108
29921: PUSH
29922: LD_VAR 0 1
29926: ARRAY
29927: PUSH
29928: LD_VAR 0 2
29932: ARRAY
29933: PUSH
29934: LD_INT 1
29936: ARRAY
29937: PPUSH
29938: LD_EXP 108
29942: PUSH
29943: LD_VAR 0 1
29947: ARRAY
29948: PUSH
29949: LD_VAR 0 2
29953: ARRAY
29954: PUSH
29955: LD_INT 2
29957: ARRAY
29958: PPUSH
29959: CALL_OW 458
29963: AND
29964: IFFALSE 30058
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29966: LD_EXP 108
29970: PUSH
29971: LD_VAR 0 1
29975: ARRAY
29976: PUSH
29977: LD_VAR 0 2
29981: ARRAY
29982: PUSH
29983: LD_INT 1
29985: ARRAY
29986: PPUSH
29987: LD_EXP 108
29991: PUSH
29992: LD_VAR 0 1
29996: ARRAY
29997: PUSH
29998: LD_VAR 0 2
30002: ARRAY
30003: PUSH
30004: LD_INT 2
30006: ARRAY
30007: PPUSH
30008: LD_VAR 0 3
30012: PPUSH
30013: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30017: LD_ADDR_EXP 108
30021: PUSH
30022: LD_EXP 108
30026: PPUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: LD_EXP 108
30036: PUSH
30037: LD_VAR 0 1
30041: ARRAY
30042: PPUSH
30043: LD_VAR 0 2
30047: PPUSH
30048: CALL_OW 3
30052: PPUSH
30053: CALL_OW 1
30057: ST_TO_ADDR
// end ; end ;
30058: GO 29809
30060: POP
30061: POP
// end ;
30062: GO 29727
30064: POP
30065: POP
// end ;
30066: PPOPN 4
30068: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30069: LD_INT 0
30071: PPUSH
30072: PPUSH
// result := false ;
30073: LD_ADDR_VAR 0 4
30077: PUSH
30078: LD_INT 0
30080: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30081: LD_VAR 0 1
30085: PPUSH
30086: CALL_OW 264
30090: PUSH
30091: LD_EXP 28
30095: EQUAL
30096: NOT
30097: IFFALSE 30101
// exit ;
30099: GO 30341
// index := GetElementIndex ( minersList , unit ) ;
30101: LD_ADDR_VAR 0 5
30105: PUSH
30106: LD_EXP 107
30110: PPUSH
30111: LD_VAR 0 1
30115: PPUSH
30116: CALL 36478 0 2
30120: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30121: LD_EXP 108
30125: PUSH
30126: LD_VAR 0 5
30130: ARRAY
30131: PUSH
30132: LD_EXP 109
30136: GREATEREQUAL
30137: IFFALSE 30141
// exit ;
30139: GO 30341
// ComMoveXY ( unit , x , y ) ;
30141: LD_VAR 0 1
30145: PPUSH
30146: LD_VAR 0 2
30150: PPUSH
30151: LD_VAR 0 3
30155: PPUSH
30156: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30160: LD_INT 35
30162: PPUSH
30163: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30167: LD_VAR 0 1
30171: PPUSH
30172: LD_VAR 0 2
30176: PPUSH
30177: LD_VAR 0 3
30181: PPUSH
30182: CALL 67764 0 3
30186: NOT
30187: PUSH
30188: LD_VAR 0 1
30192: PPUSH
30193: CALL_OW 314
30197: AND
30198: IFFALSE 30202
// exit ;
30200: GO 30341
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30202: LD_VAR 0 2
30206: PPUSH
30207: LD_VAR 0 3
30211: PPUSH
30212: CALL_OW 428
30216: PUSH
30217: LD_VAR 0 1
30221: EQUAL
30222: PUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL_OW 314
30232: NOT
30233: AND
30234: IFFALSE 30160
// PlaySoundXY ( x , y , PlantMine ) ;
30236: LD_VAR 0 2
30240: PPUSH
30241: LD_VAR 0 3
30245: PPUSH
30246: LD_STRING PlantMine
30248: PPUSH
30249: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30253: LD_VAR 0 2
30257: PPUSH
30258: LD_VAR 0 3
30262: PPUSH
30263: LD_VAR 0 1
30267: PPUSH
30268: CALL_OW 255
30272: PPUSH
30273: LD_INT 0
30275: PPUSH
30276: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30280: LD_ADDR_EXP 108
30284: PUSH
30285: LD_EXP 108
30289: PPUSH
30290: LD_VAR 0 5
30294: PUSH
30295: LD_EXP 108
30299: PUSH
30300: LD_VAR 0 5
30304: ARRAY
30305: PUSH
30306: LD_INT 1
30308: PLUS
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PPUSH
30314: LD_VAR 0 2
30318: PUSH
30319: LD_VAR 0 3
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PPUSH
30328: CALL 36693 0 3
30332: ST_TO_ADDR
// result := true ;
30333: LD_ADDR_VAR 0 4
30337: PUSH
30338: LD_INT 1
30340: ST_TO_ADDR
// end ;
30341: LD_VAR 0 4
30345: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30346: LD_INT 0
30348: PPUSH
30349: PPUSH
30350: PPUSH
// if not unit in minersList then
30351: LD_VAR 0 1
30355: PUSH
30356: LD_EXP 107
30360: IN
30361: NOT
30362: IFFALSE 30366
// exit ;
30364: GO 30758
// index := GetElementIndex ( minersList , unit ) ;
30366: LD_ADDR_VAR 0 6
30370: PUSH
30371: LD_EXP 107
30375: PPUSH
30376: LD_VAR 0 1
30380: PPUSH
30381: CALL 36478 0 2
30385: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30386: LD_ADDR_VAR 0 5
30390: PUSH
30391: DOUBLE
30392: LD_EXP 108
30396: PUSH
30397: LD_VAR 0 6
30401: ARRAY
30402: INC
30403: ST_TO_ADDR
30404: LD_INT 1
30406: PUSH
30407: FOR_DOWNTO
30408: IFFALSE 30569
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30410: LD_EXP 108
30414: PUSH
30415: LD_VAR 0 6
30419: ARRAY
30420: PUSH
30421: LD_VAR 0 5
30425: ARRAY
30426: PUSH
30427: LD_INT 1
30429: ARRAY
30430: PUSH
30431: LD_VAR 0 2
30435: EQUAL
30436: PUSH
30437: LD_EXP 108
30441: PUSH
30442: LD_VAR 0 6
30446: ARRAY
30447: PUSH
30448: LD_VAR 0 5
30452: ARRAY
30453: PUSH
30454: LD_INT 2
30456: ARRAY
30457: PUSH
30458: LD_VAR 0 3
30462: EQUAL
30463: AND
30464: IFFALSE 30567
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30466: LD_EXP 108
30470: PUSH
30471: LD_VAR 0 6
30475: ARRAY
30476: PUSH
30477: LD_VAR 0 5
30481: ARRAY
30482: PUSH
30483: LD_INT 1
30485: ARRAY
30486: PPUSH
30487: LD_EXP 108
30491: PUSH
30492: LD_VAR 0 6
30496: ARRAY
30497: PUSH
30498: LD_VAR 0 5
30502: ARRAY
30503: PUSH
30504: LD_INT 2
30506: ARRAY
30507: PPUSH
30508: LD_VAR 0 1
30512: PPUSH
30513: CALL_OW 255
30517: PPUSH
30518: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30522: LD_ADDR_EXP 108
30526: PUSH
30527: LD_EXP 108
30531: PPUSH
30532: LD_VAR 0 6
30536: PPUSH
30537: LD_EXP 108
30541: PUSH
30542: LD_VAR 0 6
30546: ARRAY
30547: PPUSH
30548: LD_VAR 0 5
30552: PPUSH
30553: CALL_OW 3
30557: PPUSH
30558: CALL_OW 1
30562: ST_TO_ADDR
// exit ;
30563: POP
30564: POP
30565: GO 30758
// end ; end ;
30567: GO 30407
30569: POP
30570: POP
// for i := minerMinesList [ index ] downto 1 do
30571: LD_ADDR_VAR 0 5
30575: PUSH
30576: DOUBLE
30577: LD_EXP 108
30581: PUSH
30582: LD_VAR 0 6
30586: ARRAY
30587: INC
30588: ST_TO_ADDR
30589: LD_INT 1
30591: PUSH
30592: FOR_DOWNTO
30593: IFFALSE 30756
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30595: LD_EXP 108
30599: PUSH
30600: LD_VAR 0 6
30604: ARRAY
30605: PUSH
30606: LD_VAR 0 5
30610: ARRAY
30611: PUSH
30612: LD_INT 1
30614: ARRAY
30615: PPUSH
30616: LD_EXP 108
30620: PUSH
30621: LD_VAR 0 6
30625: ARRAY
30626: PUSH
30627: LD_VAR 0 5
30631: ARRAY
30632: PUSH
30633: LD_INT 2
30635: ARRAY
30636: PPUSH
30637: LD_VAR 0 2
30641: PPUSH
30642: LD_VAR 0 3
30646: PPUSH
30647: CALL_OW 298
30651: PUSH
30652: LD_INT 6
30654: LESS
30655: IFFALSE 30754
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30657: LD_EXP 108
30661: PUSH
30662: LD_VAR 0 6
30666: ARRAY
30667: PUSH
30668: LD_VAR 0 5
30672: ARRAY
30673: PUSH
30674: LD_INT 1
30676: ARRAY
30677: PPUSH
30678: LD_EXP 108
30682: PUSH
30683: LD_VAR 0 6
30687: ARRAY
30688: PUSH
30689: LD_VAR 0 5
30693: ARRAY
30694: PUSH
30695: LD_INT 2
30697: ARRAY
30698: PPUSH
30699: LD_VAR 0 1
30703: PPUSH
30704: CALL_OW 255
30708: PPUSH
30709: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30713: LD_ADDR_EXP 108
30717: PUSH
30718: LD_EXP 108
30722: PPUSH
30723: LD_VAR 0 6
30727: PPUSH
30728: LD_EXP 108
30732: PUSH
30733: LD_VAR 0 6
30737: ARRAY
30738: PPUSH
30739: LD_VAR 0 5
30743: PPUSH
30744: CALL_OW 3
30748: PPUSH
30749: CALL_OW 1
30753: ST_TO_ADDR
// end ; end ;
30754: GO 30592
30756: POP
30757: POP
// end ;
30758: LD_VAR 0 4
30762: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30763: LD_INT 0
30765: PPUSH
30766: PPUSH
30767: PPUSH
30768: PPUSH
30769: PPUSH
30770: PPUSH
30771: PPUSH
30772: PPUSH
30773: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30774: LD_VAR 0 1
30778: PPUSH
30779: CALL_OW 264
30783: PUSH
30784: LD_EXP 28
30788: EQUAL
30789: NOT
30790: PUSH
30791: LD_VAR 0 1
30795: PUSH
30796: LD_EXP 107
30800: IN
30801: NOT
30802: OR
30803: IFFALSE 30807
// exit ;
30805: GO 31129
// index := GetElementIndex ( minersList , unit ) ;
30807: LD_ADDR_VAR 0 6
30811: PUSH
30812: LD_EXP 107
30816: PPUSH
30817: LD_VAR 0 1
30821: PPUSH
30822: CALL 36478 0 2
30826: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30827: LD_ADDR_VAR 0 8
30831: PUSH
30832: LD_EXP 109
30836: PUSH
30837: LD_EXP 108
30841: PUSH
30842: LD_VAR 0 6
30846: ARRAY
30847: MINUS
30848: ST_TO_ADDR
// if not minesFreeAmount then
30849: LD_VAR 0 8
30853: NOT
30854: IFFALSE 30858
// exit ;
30856: GO 31129
// tmp := [ ] ;
30858: LD_ADDR_VAR 0 7
30862: PUSH
30863: EMPTY
30864: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30865: LD_ADDR_VAR 0 5
30869: PUSH
30870: DOUBLE
30871: LD_INT 1
30873: DEC
30874: ST_TO_ADDR
30875: LD_VAR 0 8
30879: PUSH
30880: FOR_TO
30881: IFFALSE 31076
// begin _d := rand ( 0 , 5 ) ;
30883: LD_ADDR_VAR 0 11
30887: PUSH
30888: LD_INT 0
30890: PPUSH
30891: LD_INT 5
30893: PPUSH
30894: CALL_OW 12
30898: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30899: LD_ADDR_VAR 0 12
30903: PUSH
30904: LD_INT 2
30906: PPUSH
30907: LD_INT 6
30909: PPUSH
30910: CALL_OW 12
30914: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30915: LD_ADDR_VAR 0 9
30919: PUSH
30920: LD_VAR 0 2
30924: PPUSH
30925: LD_VAR 0 11
30929: PPUSH
30930: LD_VAR 0 12
30934: PPUSH
30935: CALL_OW 272
30939: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30940: LD_ADDR_VAR 0 10
30944: PUSH
30945: LD_VAR 0 3
30949: PPUSH
30950: LD_VAR 0 11
30954: PPUSH
30955: LD_VAR 0 12
30959: PPUSH
30960: CALL_OW 273
30964: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30965: LD_VAR 0 9
30969: PPUSH
30970: LD_VAR 0 10
30974: PPUSH
30975: CALL_OW 488
30979: PUSH
30980: LD_VAR 0 9
30984: PUSH
30985: LD_VAR 0 10
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_VAR 0 7
30998: IN
30999: NOT
31000: AND
31001: PUSH
31002: LD_VAR 0 9
31006: PPUSH
31007: LD_VAR 0 10
31011: PPUSH
31012: CALL_OW 458
31016: NOT
31017: AND
31018: IFFALSE 31060
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31020: LD_ADDR_VAR 0 7
31024: PUSH
31025: LD_VAR 0 7
31029: PPUSH
31030: LD_VAR 0 7
31034: PUSH
31035: LD_INT 1
31037: PLUS
31038: PPUSH
31039: LD_VAR 0 9
31043: PUSH
31044: LD_VAR 0 10
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PPUSH
31053: CALL_OW 1
31057: ST_TO_ADDR
31058: GO 31074
// i := i - 1 ;
31060: LD_ADDR_VAR 0 5
31064: PUSH
31065: LD_VAR 0 5
31069: PUSH
31070: LD_INT 1
31072: MINUS
31073: ST_TO_ADDR
// end ;
31074: GO 30880
31076: POP
31077: POP
// for i in tmp do
31078: LD_ADDR_VAR 0 5
31082: PUSH
31083: LD_VAR 0 7
31087: PUSH
31088: FOR_IN
31089: IFFALSE 31127
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31091: LD_VAR 0 1
31095: PPUSH
31096: LD_VAR 0 5
31100: PUSH
31101: LD_INT 1
31103: ARRAY
31104: PPUSH
31105: LD_VAR 0 5
31109: PUSH
31110: LD_INT 2
31112: ARRAY
31113: PPUSH
31114: CALL 30069 0 3
31118: NOT
31119: IFFALSE 31125
// exit ;
31121: POP
31122: POP
31123: GO 31129
31125: GO 31088
31127: POP
31128: POP
// end ;
31129: LD_VAR 0 4
31133: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31134: LD_INT 0
31136: PPUSH
31137: PPUSH
31138: PPUSH
31139: PPUSH
31140: PPUSH
31141: PPUSH
31142: PPUSH
// if not GetClass ( unit ) = class_sniper then
31143: LD_VAR 0 1
31147: PPUSH
31148: CALL_OW 257
31152: PUSH
31153: LD_INT 5
31155: EQUAL
31156: NOT
31157: IFFALSE 31161
// exit ;
31159: GO 31549
// dist := 8 ;
31161: LD_ADDR_VAR 0 5
31165: PUSH
31166: LD_INT 8
31168: ST_TO_ADDR
// viewRange := 12 ;
31169: LD_ADDR_VAR 0 7
31173: PUSH
31174: LD_INT 12
31176: ST_TO_ADDR
// side := GetSide ( unit ) ;
31177: LD_ADDR_VAR 0 6
31181: PUSH
31182: LD_VAR 0 1
31186: PPUSH
31187: CALL_OW 255
31191: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31192: LD_INT 61
31194: PPUSH
31195: LD_VAR 0 6
31199: PPUSH
31200: CALL_OW 321
31204: PUSH
31205: LD_INT 2
31207: EQUAL
31208: IFFALSE 31218
// viewRange := 16 ;
31210: LD_ADDR_VAR 0 7
31214: PUSH
31215: LD_INT 16
31217: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31218: LD_VAR 0 1
31222: PPUSH
31223: LD_VAR 0 2
31227: PPUSH
31228: LD_VAR 0 3
31232: PPUSH
31233: CALL_OW 297
31237: PUSH
31238: LD_VAR 0 5
31242: GREATER
31243: IFFALSE 31322
// begin ComMoveXY ( unit , x , y ) ;
31245: LD_VAR 0 1
31249: PPUSH
31250: LD_VAR 0 2
31254: PPUSH
31255: LD_VAR 0 3
31259: PPUSH
31260: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31264: LD_INT 35
31266: PPUSH
31267: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31271: LD_VAR 0 1
31275: PPUSH
31276: LD_VAR 0 2
31280: PPUSH
31281: LD_VAR 0 3
31285: PPUSH
31286: CALL 67764 0 3
31290: NOT
31291: IFFALSE 31295
// exit ;
31293: GO 31549
// until GetDistUnitXY ( unit , x , y ) < dist ;
31295: LD_VAR 0 1
31299: PPUSH
31300: LD_VAR 0 2
31304: PPUSH
31305: LD_VAR 0 3
31309: PPUSH
31310: CALL_OW 297
31314: PUSH
31315: LD_VAR 0 5
31319: LESS
31320: IFFALSE 31264
// end ; ComTurnXY ( unit , x , y ) ;
31322: LD_VAR 0 1
31326: PPUSH
31327: LD_VAR 0 2
31331: PPUSH
31332: LD_VAR 0 3
31336: PPUSH
31337: CALL_OW 118
// wait ( 5 ) ;
31341: LD_INT 5
31343: PPUSH
31344: CALL_OW 67
// _d := GetDir ( unit ) ;
31348: LD_ADDR_VAR 0 10
31352: PUSH
31353: LD_VAR 0 1
31357: PPUSH
31358: CALL_OW 254
31362: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31363: LD_ADDR_VAR 0 8
31367: PUSH
31368: LD_VAR 0 1
31372: PPUSH
31373: CALL_OW 250
31377: PPUSH
31378: LD_VAR 0 10
31382: PPUSH
31383: LD_VAR 0 5
31387: PPUSH
31388: CALL_OW 272
31392: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31393: LD_ADDR_VAR 0 9
31397: PUSH
31398: LD_VAR 0 1
31402: PPUSH
31403: CALL_OW 251
31407: PPUSH
31408: LD_VAR 0 10
31412: PPUSH
31413: LD_VAR 0 5
31417: PPUSH
31418: CALL_OW 273
31422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31423: LD_VAR 0 8
31427: PPUSH
31428: LD_VAR 0 9
31432: PPUSH
31433: CALL_OW 488
31437: NOT
31438: IFFALSE 31442
// exit ;
31440: GO 31549
// ComAnimCustom ( unit , 1 ) ;
31442: LD_VAR 0 1
31446: PPUSH
31447: LD_INT 1
31449: PPUSH
31450: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31454: LD_VAR 0 8
31458: PPUSH
31459: LD_VAR 0 9
31463: PPUSH
31464: LD_VAR 0 6
31468: PPUSH
31469: LD_VAR 0 7
31473: PPUSH
31474: CALL_OW 330
// repeat wait ( 1 ) ;
31478: LD_INT 1
31480: PPUSH
31481: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31485: LD_VAR 0 1
31489: PPUSH
31490: CALL_OW 316
31494: PUSH
31495: LD_VAR 0 1
31499: PPUSH
31500: CALL_OW 314
31504: OR
31505: PUSH
31506: LD_VAR 0 1
31510: PPUSH
31511: CALL_OW 302
31515: NOT
31516: OR
31517: PUSH
31518: LD_VAR 0 1
31522: PPUSH
31523: CALL_OW 301
31527: OR
31528: IFFALSE 31478
// RemoveSeeing ( _x , _y , side ) ;
31530: LD_VAR 0 8
31534: PPUSH
31535: LD_VAR 0 9
31539: PPUSH
31540: LD_VAR 0 6
31544: PPUSH
31545: CALL_OW 331
// end ; end_of_file
31549: LD_VAR 0 4
31553: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31554: LD_INT 0
31556: PPUSH
31557: PPUSH
// if exist_mode then
31558: LD_VAR 0 2
31562: IFFALSE 31587
// unit := CreateCharacter ( prefix & ident ) else
31564: LD_ADDR_VAR 0 5
31568: PUSH
31569: LD_VAR 0 3
31573: PUSH
31574: LD_VAR 0 1
31578: STR
31579: PPUSH
31580: CALL_OW 34
31584: ST_TO_ADDR
31585: GO 31602
// unit := NewCharacter ( ident ) ;
31587: LD_ADDR_VAR 0 5
31591: PUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 25
31601: ST_TO_ADDR
// result := unit ;
31602: LD_ADDR_VAR 0 4
31606: PUSH
31607: LD_VAR 0 5
31611: ST_TO_ADDR
// end ;
31612: LD_VAR 0 4
31616: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31617: LD_INT 0
31619: PPUSH
31620: PPUSH
// if not side or not nation then
31621: LD_VAR 0 1
31625: NOT
31626: PUSH
31627: LD_VAR 0 2
31631: NOT
31632: OR
31633: IFFALSE 31637
// exit ;
31635: GO 32405
// case nation of nation_american :
31637: LD_VAR 0 2
31641: PUSH
31642: LD_INT 1
31644: DOUBLE
31645: EQUAL
31646: IFTRUE 31650
31648: GO 31864
31650: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31651: LD_ADDR_VAR 0 4
31655: PUSH
31656: LD_INT 35
31658: PUSH
31659: LD_INT 45
31661: PUSH
31662: LD_INT 46
31664: PUSH
31665: LD_INT 47
31667: PUSH
31668: LD_INT 82
31670: PUSH
31671: LD_INT 83
31673: PUSH
31674: LD_INT 84
31676: PUSH
31677: LD_INT 85
31679: PUSH
31680: LD_INT 86
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: LD_INT 2
31688: PUSH
31689: LD_INT 6
31691: PUSH
31692: LD_INT 15
31694: PUSH
31695: LD_INT 16
31697: PUSH
31698: LD_INT 7
31700: PUSH
31701: LD_INT 12
31703: PUSH
31704: LD_INT 13
31706: PUSH
31707: LD_INT 10
31709: PUSH
31710: LD_INT 14
31712: PUSH
31713: LD_INT 20
31715: PUSH
31716: LD_INT 21
31718: PUSH
31719: LD_INT 22
31721: PUSH
31722: LD_INT 25
31724: PUSH
31725: LD_INT 32
31727: PUSH
31728: LD_INT 27
31730: PUSH
31731: LD_INT 36
31733: PUSH
31734: LD_INT 69
31736: PUSH
31737: LD_INT 39
31739: PUSH
31740: LD_INT 34
31742: PUSH
31743: LD_INT 40
31745: PUSH
31746: LD_INT 48
31748: PUSH
31749: LD_INT 49
31751: PUSH
31752: LD_INT 50
31754: PUSH
31755: LD_INT 51
31757: PUSH
31758: LD_INT 52
31760: PUSH
31761: LD_INT 53
31763: PUSH
31764: LD_INT 54
31766: PUSH
31767: LD_INT 55
31769: PUSH
31770: LD_INT 56
31772: PUSH
31773: LD_INT 57
31775: PUSH
31776: LD_INT 58
31778: PUSH
31779: LD_INT 59
31781: PUSH
31782: LD_INT 60
31784: PUSH
31785: LD_INT 61
31787: PUSH
31788: LD_INT 62
31790: PUSH
31791: LD_INT 80
31793: PUSH
31794: LD_INT 82
31796: PUSH
31797: LD_INT 83
31799: PUSH
31800: LD_INT 84
31802: PUSH
31803: LD_INT 85
31805: PUSH
31806: LD_INT 86
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: ST_TO_ADDR
31862: GO 32329
31864: LD_INT 2
31866: DOUBLE
31867: EQUAL
31868: IFTRUE 31872
31870: GO 32098
31872: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31873: LD_ADDR_VAR 0 4
31877: PUSH
31878: LD_INT 35
31880: PUSH
31881: LD_INT 45
31883: PUSH
31884: LD_INT 46
31886: PUSH
31887: LD_INT 47
31889: PUSH
31890: LD_INT 82
31892: PUSH
31893: LD_INT 83
31895: PUSH
31896: LD_INT 84
31898: PUSH
31899: LD_INT 85
31901: PUSH
31902: LD_INT 87
31904: PUSH
31905: LD_INT 70
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: LD_INT 11
31913: PUSH
31914: LD_INT 3
31916: PUSH
31917: LD_INT 4
31919: PUSH
31920: LD_INT 5
31922: PUSH
31923: LD_INT 6
31925: PUSH
31926: LD_INT 15
31928: PUSH
31929: LD_INT 18
31931: PUSH
31932: LD_INT 7
31934: PUSH
31935: LD_INT 17
31937: PUSH
31938: LD_INT 8
31940: PUSH
31941: LD_INT 20
31943: PUSH
31944: LD_INT 21
31946: PUSH
31947: LD_INT 22
31949: PUSH
31950: LD_INT 72
31952: PUSH
31953: LD_INT 26
31955: PUSH
31956: LD_INT 69
31958: PUSH
31959: LD_INT 39
31961: PUSH
31962: LD_INT 40
31964: PUSH
31965: LD_INT 41
31967: PUSH
31968: LD_INT 42
31970: PUSH
31971: LD_INT 43
31973: PUSH
31974: LD_INT 48
31976: PUSH
31977: LD_INT 49
31979: PUSH
31980: LD_INT 50
31982: PUSH
31983: LD_INT 51
31985: PUSH
31986: LD_INT 52
31988: PUSH
31989: LD_INT 53
31991: PUSH
31992: LD_INT 54
31994: PUSH
31995: LD_INT 55
31997: PUSH
31998: LD_INT 56
32000: PUSH
32001: LD_INT 60
32003: PUSH
32004: LD_INT 61
32006: PUSH
32007: LD_INT 62
32009: PUSH
32010: LD_INT 66
32012: PUSH
32013: LD_INT 67
32015: PUSH
32016: LD_INT 68
32018: PUSH
32019: LD_INT 81
32021: PUSH
32022: LD_INT 82
32024: PUSH
32025: LD_INT 83
32027: PUSH
32028: LD_INT 84
32030: PUSH
32031: LD_INT 85
32033: PUSH
32034: LD_INT 87
32036: PUSH
32037: LD_INT 88
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: ST_TO_ADDR
32096: GO 32329
32098: LD_INT 3
32100: DOUBLE
32101: EQUAL
32102: IFTRUE 32106
32104: GO 32328
32106: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32107: LD_ADDR_VAR 0 4
32111: PUSH
32112: LD_INT 46
32114: PUSH
32115: LD_INT 47
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: LD_INT 82
32126: PUSH
32127: LD_INT 83
32129: PUSH
32130: LD_INT 84
32132: PUSH
32133: LD_INT 85
32135: PUSH
32136: LD_INT 86
32138: PUSH
32139: LD_INT 11
32141: PUSH
32142: LD_INT 9
32144: PUSH
32145: LD_INT 20
32147: PUSH
32148: LD_INT 19
32150: PUSH
32151: LD_INT 21
32153: PUSH
32154: LD_INT 24
32156: PUSH
32157: LD_INT 22
32159: PUSH
32160: LD_INT 25
32162: PUSH
32163: LD_INT 28
32165: PUSH
32166: LD_INT 29
32168: PUSH
32169: LD_INT 30
32171: PUSH
32172: LD_INT 31
32174: PUSH
32175: LD_INT 37
32177: PUSH
32178: LD_INT 38
32180: PUSH
32181: LD_INT 32
32183: PUSH
32184: LD_INT 27
32186: PUSH
32187: LD_INT 33
32189: PUSH
32190: LD_INT 69
32192: PUSH
32193: LD_INT 39
32195: PUSH
32196: LD_INT 34
32198: PUSH
32199: LD_INT 40
32201: PUSH
32202: LD_INT 71
32204: PUSH
32205: LD_INT 23
32207: PUSH
32208: LD_INT 44
32210: PUSH
32211: LD_INT 48
32213: PUSH
32214: LD_INT 49
32216: PUSH
32217: LD_INT 50
32219: PUSH
32220: LD_INT 51
32222: PUSH
32223: LD_INT 52
32225: PUSH
32226: LD_INT 53
32228: PUSH
32229: LD_INT 54
32231: PUSH
32232: LD_INT 55
32234: PUSH
32235: LD_INT 56
32237: PUSH
32238: LD_INT 57
32240: PUSH
32241: LD_INT 58
32243: PUSH
32244: LD_INT 59
32246: PUSH
32247: LD_INT 63
32249: PUSH
32250: LD_INT 64
32252: PUSH
32253: LD_INT 65
32255: PUSH
32256: LD_INT 82
32258: PUSH
32259: LD_INT 83
32261: PUSH
32262: LD_INT 84
32264: PUSH
32265: LD_INT 85
32267: PUSH
32268: LD_INT 86
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: ST_TO_ADDR
32326: GO 32329
32328: POP
// if state > - 1 and state < 3 then
32329: LD_VAR 0 3
32333: PUSH
32334: LD_INT 1
32336: NEG
32337: GREATER
32338: PUSH
32339: LD_VAR 0 3
32343: PUSH
32344: LD_INT 3
32346: LESS
32347: AND
32348: IFFALSE 32405
// for i in result do
32350: LD_ADDR_VAR 0 5
32354: PUSH
32355: LD_VAR 0 4
32359: PUSH
32360: FOR_IN
32361: IFFALSE 32403
// if GetTech ( i , side ) <> state then
32363: LD_VAR 0 5
32367: PPUSH
32368: LD_VAR 0 1
32372: PPUSH
32373: CALL_OW 321
32377: PUSH
32378: LD_VAR 0 3
32382: NONEQUAL
32383: IFFALSE 32401
// result := result diff i ;
32385: LD_ADDR_VAR 0 4
32389: PUSH
32390: LD_VAR 0 4
32394: PUSH
32395: LD_VAR 0 5
32399: DIFF
32400: ST_TO_ADDR
32401: GO 32360
32403: POP
32404: POP
// end ;
32405: LD_VAR 0 4
32409: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32410: LD_INT 0
32412: PPUSH
32413: PPUSH
32414: PPUSH
// result := true ;
32415: LD_ADDR_VAR 0 3
32419: PUSH
32420: LD_INT 1
32422: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32423: LD_ADDR_VAR 0 5
32427: PUSH
32428: LD_VAR 0 2
32432: PPUSH
32433: CALL_OW 480
32437: ST_TO_ADDR
// if not tmp then
32438: LD_VAR 0 5
32442: NOT
32443: IFFALSE 32447
// exit ;
32445: GO 32496
// for i in tmp do
32447: LD_ADDR_VAR 0 4
32451: PUSH
32452: LD_VAR 0 5
32456: PUSH
32457: FOR_IN
32458: IFFALSE 32494
// if GetTech ( i , side ) <> state_researched then
32460: LD_VAR 0 4
32464: PPUSH
32465: LD_VAR 0 1
32469: PPUSH
32470: CALL_OW 321
32474: PUSH
32475: LD_INT 2
32477: NONEQUAL
32478: IFFALSE 32492
// begin result := false ;
32480: LD_ADDR_VAR 0 3
32484: PUSH
32485: LD_INT 0
32487: ST_TO_ADDR
// exit ;
32488: POP
32489: POP
32490: GO 32496
// end ;
32492: GO 32457
32494: POP
32495: POP
// end ;
32496: LD_VAR 0 3
32500: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32501: LD_INT 0
32503: PPUSH
32504: PPUSH
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
32509: PPUSH
32510: PPUSH
32511: PPUSH
32512: PPUSH
32513: PPUSH
32514: PPUSH
32515: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32516: LD_VAR 0 1
32520: NOT
32521: PUSH
32522: LD_VAR 0 1
32526: PPUSH
32527: CALL_OW 257
32531: PUSH
32532: LD_INT 9
32534: NONEQUAL
32535: OR
32536: IFFALSE 32540
// exit ;
32538: GO 33113
// side := GetSide ( unit ) ;
32540: LD_ADDR_VAR 0 9
32544: PUSH
32545: LD_VAR 0 1
32549: PPUSH
32550: CALL_OW 255
32554: ST_TO_ADDR
// tech_space := tech_spacanom ;
32555: LD_ADDR_VAR 0 12
32559: PUSH
32560: LD_INT 29
32562: ST_TO_ADDR
// tech_time := tech_taurad ;
32563: LD_ADDR_VAR 0 13
32567: PUSH
32568: LD_INT 28
32570: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32571: LD_ADDR_VAR 0 11
32575: PUSH
32576: LD_VAR 0 1
32580: PPUSH
32581: CALL_OW 310
32585: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32586: LD_VAR 0 11
32590: PPUSH
32591: CALL_OW 247
32595: PUSH
32596: LD_INT 2
32598: EQUAL
32599: IFFALSE 32603
// exit ;
32601: GO 33113
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32603: LD_ADDR_VAR 0 8
32607: PUSH
32608: LD_INT 81
32610: PUSH
32611: LD_VAR 0 9
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 3
32622: PUSH
32623: LD_INT 21
32625: PUSH
32626: LD_INT 3
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PPUSH
32641: CALL_OW 69
32645: ST_TO_ADDR
// if not tmp then
32646: LD_VAR 0 8
32650: NOT
32651: IFFALSE 32655
// exit ;
32653: GO 33113
// if in_unit then
32655: LD_VAR 0 11
32659: IFFALSE 32683
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32661: LD_ADDR_VAR 0 10
32665: PUSH
32666: LD_VAR 0 8
32670: PPUSH
32671: LD_VAR 0 11
32675: PPUSH
32676: CALL_OW 74
32680: ST_TO_ADDR
32681: GO 32703
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32683: LD_ADDR_VAR 0 10
32687: PUSH
32688: LD_VAR 0 8
32692: PPUSH
32693: LD_VAR 0 1
32697: PPUSH
32698: CALL_OW 74
32702: ST_TO_ADDR
// if not enemy then
32703: LD_VAR 0 10
32707: NOT
32708: IFFALSE 32712
// exit ;
32710: GO 33113
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32712: LD_VAR 0 11
32716: PUSH
32717: LD_VAR 0 11
32721: PPUSH
32722: LD_VAR 0 10
32726: PPUSH
32727: CALL_OW 296
32731: PUSH
32732: LD_INT 13
32734: GREATER
32735: AND
32736: PUSH
32737: LD_VAR 0 1
32741: PPUSH
32742: LD_VAR 0 10
32746: PPUSH
32747: CALL_OW 296
32751: PUSH
32752: LD_INT 12
32754: GREATER
32755: OR
32756: IFFALSE 32760
// exit ;
32758: GO 33113
// missile := [ 1 ] ;
32760: LD_ADDR_VAR 0 14
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: EMPTY
32769: LIST
32770: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32771: LD_VAR 0 9
32775: PPUSH
32776: LD_VAR 0 12
32780: PPUSH
32781: CALL_OW 325
32785: IFFALSE 32814
// missile := Replace ( missile , missile + 1 , 2 ) ;
32787: LD_ADDR_VAR 0 14
32791: PUSH
32792: LD_VAR 0 14
32796: PPUSH
32797: LD_VAR 0 14
32801: PUSH
32802: LD_INT 1
32804: PLUS
32805: PPUSH
32806: LD_INT 2
32808: PPUSH
32809: CALL_OW 1
32813: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32814: LD_VAR 0 9
32818: PPUSH
32819: LD_VAR 0 13
32823: PPUSH
32824: CALL_OW 325
32828: PUSH
32829: LD_VAR 0 10
32833: PPUSH
32834: CALL_OW 255
32838: PPUSH
32839: LD_VAR 0 13
32843: PPUSH
32844: CALL_OW 325
32848: NOT
32849: AND
32850: IFFALSE 32879
// missile := Replace ( missile , missile + 1 , 3 ) ;
32852: LD_ADDR_VAR 0 14
32856: PUSH
32857: LD_VAR 0 14
32861: PPUSH
32862: LD_VAR 0 14
32866: PUSH
32867: LD_INT 1
32869: PLUS
32870: PPUSH
32871: LD_INT 3
32873: PPUSH
32874: CALL_OW 1
32878: ST_TO_ADDR
// if missile < 2 then
32879: LD_VAR 0 14
32883: PUSH
32884: LD_INT 2
32886: LESS
32887: IFFALSE 32891
// exit ;
32889: GO 33113
// x := GetX ( enemy ) ;
32891: LD_ADDR_VAR 0 4
32895: PUSH
32896: LD_VAR 0 10
32900: PPUSH
32901: CALL_OW 250
32905: ST_TO_ADDR
// y := GetY ( enemy ) ;
32906: LD_ADDR_VAR 0 5
32910: PUSH
32911: LD_VAR 0 10
32915: PPUSH
32916: CALL_OW 251
32920: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32921: LD_ADDR_VAR 0 6
32925: PUSH
32926: LD_VAR 0 4
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PPUSH
32935: LD_INT 1
32937: PPUSH
32938: CALL_OW 12
32942: PLUS
32943: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32944: LD_ADDR_VAR 0 7
32948: PUSH
32949: LD_VAR 0 5
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PPUSH
32958: LD_INT 1
32960: PPUSH
32961: CALL_OW 12
32965: PLUS
32966: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32967: LD_VAR 0 6
32971: PPUSH
32972: LD_VAR 0 7
32976: PPUSH
32977: CALL_OW 488
32981: NOT
32982: IFFALSE 33004
// begin _x := x ;
32984: LD_ADDR_VAR 0 6
32988: PUSH
32989: LD_VAR 0 4
32993: ST_TO_ADDR
// _y := y ;
32994: LD_ADDR_VAR 0 7
32998: PUSH
32999: LD_VAR 0 5
33003: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: LD_INT 1
33011: PPUSH
33012: LD_VAR 0 14
33016: PPUSH
33017: CALL_OW 12
33021: ST_TO_ADDR
// case i of 1 :
33022: LD_VAR 0 3
33026: PUSH
33027: LD_INT 1
33029: DOUBLE
33030: EQUAL
33031: IFTRUE 33035
33033: GO 33052
33035: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33036: LD_VAR 0 1
33040: PPUSH
33041: LD_VAR 0 10
33045: PPUSH
33046: CALL_OW 115
33050: GO 33113
33052: LD_INT 2
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33082
33060: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33061: LD_VAR 0 1
33065: PPUSH
33066: LD_VAR 0 6
33070: PPUSH
33071: LD_VAR 0 7
33075: PPUSH
33076: CALL_OW 153
33080: GO 33113
33082: LD_INT 3
33084: DOUBLE
33085: EQUAL
33086: IFTRUE 33090
33088: GO 33112
33090: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33091: LD_VAR 0 1
33095: PPUSH
33096: LD_VAR 0 6
33100: PPUSH
33101: LD_VAR 0 7
33105: PPUSH
33106: CALL_OW 154
33110: GO 33113
33112: POP
// end ;
33113: LD_VAR 0 2
33117: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33118: LD_INT 0
33120: PPUSH
33121: PPUSH
33122: PPUSH
33123: PPUSH
33124: PPUSH
33125: PPUSH
// if not unit or not building then
33126: LD_VAR 0 1
33130: NOT
33131: PUSH
33132: LD_VAR 0 2
33136: NOT
33137: OR
33138: IFFALSE 33142
// exit ;
33140: GO 33300
// x := GetX ( building ) ;
33142: LD_ADDR_VAR 0 5
33146: PUSH
33147: LD_VAR 0 2
33151: PPUSH
33152: CALL_OW 250
33156: ST_TO_ADDR
// y := GetY ( building ) ;
33157: LD_ADDR_VAR 0 6
33161: PUSH
33162: LD_VAR 0 2
33166: PPUSH
33167: CALL_OW 251
33171: ST_TO_ADDR
// for i = 0 to 5 do
33172: LD_ADDR_VAR 0 4
33176: PUSH
33177: DOUBLE
33178: LD_INT 0
33180: DEC
33181: ST_TO_ADDR
33182: LD_INT 5
33184: PUSH
33185: FOR_TO
33186: IFFALSE 33298
// begin _x := ShiftX ( x , i , 3 ) ;
33188: LD_ADDR_VAR 0 7
33192: PUSH
33193: LD_VAR 0 5
33197: PPUSH
33198: LD_VAR 0 4
33202: PPUSH
33203: LD_INT 3
33205: PPUSH
33206: CALL_OW 272
33210: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33211: LD_ADDR_VAR 0 8
33215: PUSH
33216: LD_VAR 0 6
33220: PPUSH
33221: LD_VAR 0 4
33225: PPUSH
33226: LD_INT 3
33228: PPUSH
33229: CALL_OW 273
33233: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33234: LD_VAR 0 7
33238: PPUSH
33239: LD_VAR 0 8
33243: PPUSH
33244: CALL_OW 488
33248: NOT
33249: IFFALSE 33253
// continue ;
33251: GO 33185
// if HexInfo ( _x , _y ) = 0 then
33253: LD_VAR 0 7
33257: PPUSH
33258: LD_VAR 0 8
33262: PPUSH
33263: CALL_OW 428
33267: PUSH
33268: LD_INT 0
33270: EQUAL
33271: IFFALSE 33296
// begin ComMoveXY ( unit , _x , _y ) ;
33273: LD_VAR 0 1
33277: PPUSH
33278: LD_VAR 0 7
33282: PPUSH
33283: LD_VAR 0 8
33287: PPUSH
33288: CALL_OW 111
// exit ;
33292: POP
33293: POP
33294: GO 33300
// end ; end ;
33296: GO 33185
33298: POP
33299: POP
// end ;
33300: LD_VAR 0 3
33304: RET
// export function ScanBase ( side , base_area ) ; begin
33305: LD_INT 0
33307: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33308: LD_ADDR_VAR 0 3
33312: PUSH
33313: LD_VAR 0 2
33317: PPUSH
33318: LD_INT 81
33320: PUSH
33321: LD_VAR 0 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PPUSH
33330: CALL_OW 70
33334: ST_TO_ADDR
// end ;
33335: LD_VAR 0 3
33339: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33340: LD_INT 0
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
// result := false ;
33346: LD_ADDR_VAR 0 2
33350: PUSH
33351: LD_INT 0
33353: ST_TO_ADDR
// side := GetSide ( unit ) ;
33354: LD_ADDR_VAR 0 3
33358: PUSH
33359: LD_VAR 0 1
33363: PPUSH
33364: CALL_OW 255
33368: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33369: LD_ADDR_VAR 0 4
33373: PUSH
33374: LD_VAR 0 1
33378: PPUSH
33379: CALL_OW 248
33383: ST_TO_ADDR
// case nat of 1 :
33384: LD_VAR 0 4
33388: PUSH
33389: LD_INT 1
33391: DOUBLE
33392: EQUAL
33393: IFTRUE 33397
33395: GO 33408
33397: POP
// tech := tech_lassight ; 2 :
33398: LD_ADDR_VAR 0 5
33402: PUSH
33403: LD_INT 12
33405: ST_TO_ADDR
33406: GO 33447
33408: LD_INT 2
33410: DOUBLE
33411: EQUAL
33412: IFTRUE 33416
33414: GO 33427
33416: POP
// tech := tech_mortar ; 3 :
33417: LD_ADDR_VAR 0 5
33421: PUSH
33422: LD_INT 41
33424: ST_TO_ADDR
33425: GO 33447
33427: LD_INT 3
33429: DOUBLE
33430: EQUAL
33431: IFTRUE 33435
33433: GO 33446
33435: POP
// tech := tech_bazooka ; end ;
33436: LD_ADDR_VAR 0 5
33440: PUSH
33441: LD_INT 44
33443: ST_TO_ADDR
33444: GO 33447
33446: POP
// if Researched ( side , tech ) then
33447: LD_VAR 0 3
33451: PPUSH
33452: LD_VAR 0 5
33456: PPUSH
33457: CALL_OW 325
33461: IFFALSE 33488
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33463: LD_ADDR_VAR 0 2
33467: PUSH
33468: LD_INT 5
33470: PUSH
33471: LD_INT 8
33473: PUSH
33474: LD_INT 9
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: LIST
33481: PUSH
33482: LD_VAR 0 4
33486: ARRAY
33487: ST_TO_ADDR
// end ;
33488: LD_VAR 0 2
33492: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33493: LD_INT 0
33495: PPUSH
33496: PPUSH
33497: PPUSH
// if not mines then
33498: LD_VAR 0 2
33502: NOT
33503: IFFALSE 33507
// exit ;
33505: GO 33651
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33507: LD_ADDR_VAR 0 5
33511: PUSH
33512: LD_INT 81
33514: PUSH
33515: LD_VAR 0 1
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 3
33526: PUSH
33527: LD_INT 21
33529: PUSH
33530: LD_INT 3
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PPUSH
33545: CALL_OW 69
33549: ST_TO_ADDR
// for i in mines do
33550: LD_ADDR_VAR 0 4
33554: PUSH
33555: LD_VAR 0 2
33559: PUSH
33560: FOR_IN
33561: IFFALSE 33649
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33563: LD_VAR 0 4
33567: PUSH
33568: LD_INT 1
33570: ARRAY
33571: PPUSH
33572: LD_VAR 0 4
33576: PUSH
33577: LD_INT 2
33579: ARRAY
33580: PPUSH
33581: CALL_OW 458
33585: NOT
33586: IFFALSE 33590
// continue ;
33588: GO 33560
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33590: LD_VAR 0 4
33594: PUSH
33595: LD_INT 1
33597: ARRAY
33598: PPUSH
33599: LD_VAR 0 4
33603: PUSH
33604: LD_INT 2
33606: ARRAY
33607: PPUSH
33608: CALL_OW 428
33612: PUSH
33613: LD_VAR 0 5
33617: IN
33618: IFFALSE 33647
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33620: LD_VAR 0 4
33624: PUSH
33625: LD_INT 1
33627: ARRAY
33628: PPUSH
33629: LD_VAR 0 4
33633: PUSH
33634: LD_INT 2
33636: ARRAY
33637: PPUSH
33638: LD_VAR 0 1
33642: PPUSH
33643: CALL_OW 456
// end ;
33647: GO 33560
33649: POP
33650: POP
// end ;
33651: LD_VAR 0 3
33655: RET
// export function Count ( array ) ; var i ; begin
33656: LD_INT 0
33658: PPUSH
33659: PPUSH
// result := 0 ;
33660: LD_ADDR_VAR 0 2
33664: PUSH
33665: LD_INT 0
33667: ST_TO_ADDR
// for i in array do
33668: LD_ADDR_VAR 0 3
33672: PUSH
33673: LD_VAR 0 1
33677: PUSH
33678: FOR_IN
33679: IFFALSE 33703
// if i then
33681: LD_VAR 0 3
33685: IFFALSE 33701
// result := result + 1 ;
33687: LD_ADDR_VAR 0 2
33691: PUSH
33692: LD_VAR 0 2
33696: PUSH
33697: LD_INT 1
33699: PLUS
33700: ST_TO_ADDR
33701: GO 33678
33703: POP
33704: POP
// end ;
33705: LD_VAR 0 2
33709: RET
// export function IsEmpty ( building ) ; begin
33710: LD_INT 0
33712: PPUSH
// if not building then
33713: LD_VAR 0 1
33717: NOT
33718: IFFALSE 33722
// exit ;
33720: GO 33765
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33722: LD_ADDR_VAR 0 2
33726: PUSH
33727: LD_VAR 0 1
33731: PUSH
33732: LD_INT 22
33734: PUSH
33735: LD_VAR 0 1
33739: PPUSH
33740: CALL_OW 255
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 58
33751: PUSH
33752: EMPTY
33753: LIST
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PPUSH
33759: CALL_OW 69
33763: IN
33764: ST_TO_ADDR
// end ;
33765: LD_VAR 0 2
33769: RET
// export function IsNotFull ( building ) ; var places ; begin
33770: LD_INT 0
33772: PPUSH
33773: PPUSH
// if not building then
33774: LD_VAR 0 1
33778: NOT
33779: IFFALSE 33783
// exit ;
33781: GO 33954
// result := false ;
33783: LD_ADDR_VAR 0 2
33787: PUSH
33788: LD_INT 0
33790: ST_TO_ADDR
// places := 0 ;
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_INT 0
33798: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 266
33808: PUSH
33809: LD_INT 0
33811: DOUBLE
33812: EQUAL
33813: IFTRUE 33871
33815: LD_INT 1
33817: DOUBLE
33818: EQUAL
33819: IFTRUE 33871
33821: LD_INT 6
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33871
33827: LD_INT 7
33829: DOUBLE
33830: EQUAL
33831: IFTRUE 33871
33833: LD_INT 8
33835: DOUBLE
33836: EQUAL
33837: IFTRUE 33871
33839: LD_INT 4
33841: DOUBLE
33842: EQUAL
33843: IFTRUE 33871
33845: LD_INT 5
33847: DOUBLE
33848: EQUAL
33849: IFTRUE 33871
33851: LD_INT 2
33853: DOUBLE
33854: EQUAL
33855: IFTRUE 33871
33857: LD_INT 3
33859: DOUBLE
33860: EQUAL
33861: IFTRUE 33871
33863: LD_INT 35
33865: DOUBLE
33866: EQUAL
33867: IFTRUE 33871
33869: GO 33882
33871: POP
// places := 6 ; b_bunker , b_breastwork :
33872: LD_ADDR_VAR 0 3
33876: PUSH
33877: LD_INT 6
33879: ST_TO_ADDR
33880: GO 33927
33882: LD_INT 32
33884: DOUBLE
33885: EQUAL
33886: IFTRUE 33896
33888: LD_INT 31
33890: DOUBLE
33891: EQUAL
33892: IFTRUE 33896
33894: GO 33907
33896: POP
// places := 1 ; b_control_tower :
33897: LD_ADDR_VAR 0 3
33901: PUSH
33902: LD_INT 1
33904: ST_TO_ADDR
33905: GO 33927
33907: LD_INT 36
33909: DOUBLE
33910: EQUAL
33911: IFTRUE 33915
33913: GO 33926
33915: POP
// places := 3 ; end ;
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: LD_INT 3
33923: ST_TO_ADDR
33924: GO 33927
33926: POP
// if places then
33927: LD_VAR 0 3
33931: IFFALSE 33954
// result := UnitsInside ( building ) < places ;
33933: LD_ADDR_VAR 0 2
33937: PUSH
33938: LD_VAR 0 1
33942: PPUSH
33943: CALL_OW 313
33947: PUSH
33948: LD_VAR 0 3
33952: LESS
33953: ST_TO_ADDR
// end ;
33954: LD_VAR 0 2
33958: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33959: LD_INT 0
33961: PPUSH
33962: PPUSH
33963: PPUSH
33964: PPUSH
// tmp := [ ] ;
33965: LD_ADDR_VAR 0 3
33969: PUSH
33970: EMPTY
33971: ST_TO_ADDR
// list := [ ] ;
33972: LD_ADDR_VAR 0 5
33976: PUSH
33977: EMPTY
33978: ST_TO_ADDR
// for i = 16 to 25 do
33979: LD_ADDR_VAR 0 4
33983: PUSH
33984: DOUBLE
33985: LD_INT 16
33987: DEC
33988: ST_TO_ADDR
33989: LD_INT 25
33991: PUSH
33992: FOR_TO
33993: IFFALSE 34066
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33995: LD_ADDR_VAR 0 3
33999: PUSH
34000: LD_VAR 0 3
34004: PUSH
34005: LD_INT 22
34007: PUSH
34008: LD_VAR 0 1
34012: PPUSH
34013: CALL_OW 255
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 91
34024: PUSH
34025: LD_VAR 0 1
34029: PUSH
34030: LD_INT 6
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 30
34040: PUSH
34041: LD_VAR 0 4
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: PUSH
34055: EMPTY
34056: LIST
34057: PPUSH
34058: CALL_OW 69
34062: ADD
34063: ST_TO_ADDR
34064: GO 33992
34066: POP
34067: POP
// for i = 1 to tmp do
34068: LD_ADDR_VAR 0 4
34072: PUSH
34073: DOUBLE
34074: LD_INT 1
34076: DEC
34077: ST_TO_ADDR
34078: LD_VAR 0 3
34082: PUSH
34083: FOR_TO
34084: IFFALSE 34172
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34086: LD_ADDR_VAR 0 5
34090: PUSH
34091: LD_VAR 0 5
34095: PUSH
34096: LD_VAR 0 3
34100: PUSH
34101: LD_VAR 0 4
34105: ARRAY
34106: PPUSH
34107: CALL_OW 266
34111: PUSH
34112: LD_VAR 0 3
34116: PUSH
34117: LD_VAR 0 4
34121: ARRAY
34122: PPUSH
34123: CALL_OW 250
34127: PUSH
34128: LD_VAR 0 3
34132: PUSH
34133: LD_VAR 0 4
34137: ARRAY
34138: PPUSH
34139: CALL_OW 251
34143: PUSH
34144: LD_VAR 0 3
34148: PUSH
34149: LD_VAR 0 4
34153: ARRAY
34154: PPUSH
34155: CALL_OW 254
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: PUSH
34166: EMPTY
34167: LIST
34168: ADD
34169: ST_TO_ADDR
34170: GO 34083
34172: POP
34173: POP
// result := list ;
34174: LD_ADDR_VAR 0 2
34178: PUSH
34179: LD_VAR 0 5
34183: ST_TO_ADDR
// end ;
34184: LD_VAR 0 2
34188: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34189: LD_INT 0
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
// if not factory then
34198: LD_VAR 0 1
34202: NOT
34203: IFFALSE 34207
// exit ;
34205: GO 34800
// if control = control_apeman then
34207: LD_VAR 0 4
34211: PUSH
34212: LD_INT 5
34214: EQUAL
34215: IFFALSE 34324
// begin tmp := UnitsInside ( factory ) ;
34217: LD_ADDR_VAR 0 8
34221: PUSH
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 313
34231: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34232: LD_VAR 0 8
34236: PPUSH
34237: LD_INT 25
34239: PUSH
34240: LD_INT 12
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PPUSH
34247: CALL_OW 72
34251: NOT
34252: IFFALSE 34262
// control := control_manual ;
34254: LD_ADDR_VAR 0 4
34258: PUSH
34259: LD_INT 1
34261: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34262: LD_ADDR_VAR 0 8
34266: PUSH
34267: LD_VAR 0 1
34271: PPUSH
34272: CALL 33959 0 1
34276: ST_TO_ADDR
// if tmp then
34277: LD_VAR 0 8
34281: IFFALSE 34324
// begin for i in tmp do
34283: LD_ADDR_VAR 0 7
34287: PUSH
34288: LD_VAR 0 8
34292: PUSH
34293: FOR_IN
34294: IFFALSE 34322
// if i [ 1 ] = b_ext_radio then
34296: LD_VAR 0 7
34300: PUSH
34301: LD_INT 1
34303: ARRAY
34304: PUSH
34305: LD_INT 22
34307: EQUAL
34308: IFFALSE 34320
// begin control := control_remote ;
34310: LD_ADDR_VAR 0 4
34314: PUSH
34315: LD_INT 2
34317: ST_TO_ADDR
// break ;
34318: GO 34322
// end ;
34320: GO 34293
34322: POP
34323: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34324: LD_VAR 0 1
34328: PPUSH
34329: LD_VAR 0 2
34333: PPUSH
34334: LD_VAR 0 3
34338: PPUSH
34339: LD_VAR 0 4
34343: PPUSH
34344: LD_VAR 0 5
34348: PPUSH
34349: CALL_OW 448
34353: IFFALSE 34388
// begin result := [ chassis , engine , control , weapon ] ;
34355: LD_ADDR_VAR 0 6
34359: PUSH
34360: LD_VAR 0 2
34364: PUSH
34365: LD_VAR 0 3
34369: PUSH
34370: LD_VAR 0 4
34374: PUSH
34375: LD_VAR 0 5
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: ST_TO_ADDR
// exit ;
34386: GO 34800
// end ; _chassis := AvailableChassisList ( factory ) ;
34388: LD_ADDR_VAR 0 9
34392: PUSH
34393: LD_VAR 0 1
34397: PPUSH
34398: CALL_OW 475
34402: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34403: LD_ADDR_VAR 0 11
34407: PUSH
34408: LD_VAR 0 1
34412: PPUSH
34413: CALL_OW 476
34417: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34418: LD_ADDR_VAR 0 12
34422: PUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL_OW 477
34432: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34433: LD_ADDR_VAR 0 10
34437: PUSH
34438: LD_VAR 0 1
34442: PPUSH
34443: CALL_OW 478
34447: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34448: LD_VAR 0 9
34452: NOT
34453: PUSH
34454: LD_VAR 0 11
34458: NOT
34459: OR
34460: PUSH
34461: LD_VAR 0 12
34465: NOT
34466: OR
34467: PUSH
34468: LD_VAR 0 10
34472: NOT
34473: OR
34474: IFFALSE 34509
// begin result := [ chassis , engine , control , weapon ] ;
34476: LD_ADDR_VAR 0 6
34480: PUSH
34481: LD_VAR 0 2
34485: PUSH
34486: LD_VAR 0 3
34490: PUSH
34491: LD_VAR 0 4
34495: PUSH
34496: LD_VAR 0 5
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: ST_TO_ADDR
// exit ;
34507: GO 34800
// end ; if not chassis in _chassis then
34509: LD_VAR 0 2
34513: PUSH
34514: LD_VAR 0 9
34518: IN
34519: NOT
34520: IFFALSE 34546
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34522: LD_ADDR_VAR 0 2
34526: PUSH
34527: LD_VAR 0 9
34531: PUSH
34532: LD_INT 1
34534: PPUSH
34535: LD_VAR 0 9
34539: PPUSH
34540: CALL_OW 12
34544: ARRAY
34545: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34546: LD_VAR 0 2
34550: PPUSH
34551: LD_VAR 0 3
34555: PPUSH
34556: CALL 34805 0 2
34560: NOT
34561: IFFALSE 34620
// repeat engine := _engine [ 1 ] ;
34563: LD_ADDR_VAR 0 3
34567: PUSH
34568: LD_VAR 0 11
34572: PUSH
34573: LD_INT 1
34575: ARRAY
34576: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34577: LD_ADDR_VAR 0 11
34581: PUSH
34582: LD_VAR 0 11
34586: PPUSH
34587: LD_INT 1
34589: PPUSH
34590: CALL_OW 3
34594: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34595: LD_VAR 0 2
34599: PPUSH
34600: LD_VAR 0 3
34604: PPUSH
34605: CALL 34805 0 2
34609: PUSH
34610: LD_VAR 0 11
34614: PUSH
34615: EMPTY
34616: EQUAL
34617: OR
34618: IFFALSE 34563
// if not control in _control then
34620: LD_VAR 0 4
34624: PUSH
34625: LD_VAR 0 12
34629: IN
34630: NOT
34631: IFFALSE 34657
// control := _control [ rand ( 1 , _control ) ] ;
34633: LD_ADDR_VAR 0 4
34637: PUSH
34638: LD_VAR 0 12
34642: PUSH
34643: LD_INT 1
34645: PPUSH
34646: LD_VAR 0 12
34650: PPUSH
34651: CALL_OW 12
34655: ARRAY
34656: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34657: LD_VAR 0 2
34661: PPUSH
34662: LD_VAR 0 5
34666: PPUSH
34667: CALL 35025 0 2
34671: NOT
34672: IFFALSE 34731
// repeat weapon := _weapon [ 1 ] ;
34674: LD_ADDR_VAR 0 5
34678: PUSH
34679: LD_VAR 0 10
34683: PUSH
34684: LD_INT 1
34686: ARRAY
34687: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34688: LD_ADDR_VAR 0 10
34692: PUSH
34693: LD_VAR 0 10
34697: PPUSH
34698: LD_INT 1
34700: PPUSH
34701: CALL_OW 3
34705: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34706: LD_VAR 0 2
34710: PPUSH
34711: LD_VAR 0 5
34715: PPUSH
34716: CALL 35025 0 2
34720: PUSH
34721: LD_VAR 0 10
34725: PUSH
34726: EMPTY
34727: EQUAL
34728: OR
34729: IFFALSE 34674
// result := [ ] ;
34731: LD_ADDR_VAR 0 6
34735: PUSH
34736: EMPTY
34737: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34738: LD_VAR 0 1
34742: PPUSH
34743: LD_VAR 0 2
34747: PPUSH
34748: LD_VAR 0 3
34752: PPUSH
34753: LD_VAR 0 4
34757: PPUSH
34758: LD_VAR 0 5
34762: PPUSH
34763: CALL_OW 448
34767: IFFALSE 34800
// result := [ chassis , engine , control , weapon ] ;
34769: LD_ADDR_VAR 0 6
34773: PUSH
34774: LD_VAR 0 2
34778: PUSH
34779: LD_VAR 0 3
34783: PUSH
34784: LD_VAR 0 4
34788: PUSH
34789: LD_VAR 0 5
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: ST_TO_ADDR
// end ;
34800: LD_VAR 0 6
34804: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34805: LD_INT 0
34807: PPUSH
// if not chassis or not engine then
34808: LD_VAR 0 1
34812: NOT
34813: PUSH
34814: LD_VAR 0 2
34818: NOT
34819: OR
34820: IFFALSE 34824
// exit ;
34822: GO 35020
// case engine of engine_solar :
34824: LD_VAR 0 2
34828: PUSH
34829: LD_INT 2
34831: DOUBLE
34832: EQUAL
34833: IFTRUE 34837
34835: GO 34875
34837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 11
34845: PUSH
34846: LD_INT 12
34848: PUSH
34849: LD_INT 13
34851: PUSH
34852: LD_INT 14
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: LD_INT 3
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: ST_TO_ADDR
34873: GO 35004
34875: LD_INT 1
34877: DOUBLE
34878: EQUAL
34879: IFTRUE 34883
34881: GO 34945
34883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34884: LD_ADDR_VAR 0 3
34888: PUSH
34889: LD_INT 11
34891: PUSH
34892: LD_INT 12
34894: PUSH
34895: LD_INT 13
34897: PUSH
34898: LD_INT 14
34900: PUSH
34901: LD_INT 1
34903: PUSH
34904: LD_INT 2
34906: PUSH
34907: LD_INT 3
34909: PUSH
34910: LD_INT 4
34912: PUSH
34913: LD_INT 5
34915: PUSH
34916: LD_INT 21
34918: PUSH
34919: LD_INT 23
34921: PUSH
34922: LD_INT 22
34924: PUSH
34925: LD_INT 24
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: ST_TO_ADDR
34943: GO 35004
34945: LD_INT 3
34947: DOUBLE
34948: EQUAL
34949: IFTRUE 34953
34951: GO 35003
34953: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34954: LD_ADDR_VAR 0 3
34958: PUSH
34959: LD_INT 13
34961: PUSH
34962: LD_INT 14
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: LD_INT 3
34970: PUSH
34971: LD_INT 4
34973: PUSH
34974: LD_INT 5
34976: PUSH
34977: LD_INT 21
34979: PUSH
34980: LD_INT 22
34982: PUSH
34983: LD_INT 23
34985: PUSH
34986: LD_INT 24
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: ST_TO_ADDR
35001: GO 35004
35003: POP
// result := ( chassis in result ) ;
35004: LD_ADDR_VAR 0 3
35008: PUSH
35009: LD_VAR 0 1
35013: PUSH
35014: LD_VAR 0 3
35018: IN
35019: ST_TO_ADDR
// end ;
35020: LD_VAR 0 3
35024: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35025: LD_INT 0
35027: PPUSH
// if not chassis or not weapon then
35028: LD_VAR 0 1
35032: NOT
35033: PUSH
35034: LD_VAR 0 2
35038: NOT
35039: OR
35040: IFFALSE 35044
// exit ;
35042: GO 36106
// case weapon of us_machine_gun :
35044: LD_VAR 0 2
35048: PUSH
35049: LD_INT 2
35051: DOUBLE
35052: EQUAL
35053: IFTRUE 35057
35055: GO 35087
35057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35058: LD_ADDR_VAR 0 3
35062: PUSH
35063: LD_INT 1
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: LD_INT 3
35071: PUSH
35072: LD_INT 4
35074: PUSH
35075: LD_INT 5
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: ST_TO_ADDR
35085: GO 36090
35087: LD_INT 3
35089: DOUBLE
35090: EQUAL
35091: IFTRUE 35095
35093: GO 35125
35095: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35096: LD_ADDR_VAR 0 3
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: LD_INT 2
35106: PUSH
35107: LD_INT 3
35109: PUSH
35110: LD_INT 4
35112: PUSH
35113: LD_INT 5
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: ST_TO_ADDR
35123: GO 36090
35125: LD_INT 11
35127: DOUBLE
35128: EQUAL
35129: IFTRUE 35133
35131: GO 35163
35133: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35134: LD_ADDR_VAR 0 3
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: LD_INT 3
35147: PUSH
35148: LD_INT 4
35150: PUSH
35151: LD_INT 5
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: ST_TO_ADDR
35161: GO 36090
35163: LD_INT 4
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35171
35169: GO 35197
35171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35172: LD_ADDR_VAR 0 3
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: LD_INT 4
35185: PUSH
35186: LD_INT 5
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
35195: GO 36090
35197: LD_INT 5
35199: DOUBLE
35200: EQUAL
35201: IFTRUE 35205
35203: GO 35231
35205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35206: LD_ADDR_VAR 0 3
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 3
35216: PUSH
35217: LD_INT 4
35219: PUSH
35220: LD_INT 5
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: ST_TO_ADDR
35229: GO 36090
35231: LD_INT 9
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35239
35237: GO 35265
35239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35240: LD_ADDR_VAR 0 3
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: LD_INT 3
35250: PUSH
35251: LD_INT 4
35253: PUSH
35254: LD_INT 5
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: ST_TO_ADDR
35263: GO 36090
35265: LD_INT 7
35267: DOUBLE
35268: EQUAL
35269: IFTRUE 35273
35271: GO 35299
35273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35274: LD_ADDR_VAR 0 3
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 3
35284: PUSH
35285: LD_INT 4
35287: PUSH
35288: LD_INT 5
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: ST_TO_ADDR
35297: GO 36090
35299: LD_INT 12
35301: DOUBLE
35302: EQUAL
35303: IFTRUE 35307
35305: GO 35333
35307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35308: LD_ADDR_VAR 0 3
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 3
35318: PUSH
35319: LD_INT 4
35321: PUSH
35322: LD_INT 5
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: ST_TO_ADDR
35331: GO 36090
35333: LD_INT 13
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35341
35339: GO 35367
35341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35342: LD_ADDR_VAR 0 3
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: LD_INT 3
35352: PUSH
35353: LD_INT 4
35355: PUSH
35356: LD_INT 5
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: ST_TO_ADDR
35365: GO 36090
35367: LD_INT 14
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35375
35373: GO 35393
35375: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35376: LD_ADDR_VAR 0 3
35380: PUSH
35381: LD_INT 4
35383: PUSH
35384: LD_INT 5
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: ST_TO_ADDR
35391: GO 36090
35393: LD_INT 6
35395: DOUBLE
35396: EQUAL
35397: IFTRUE 35401
35399: GO 35419
35401: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35402: LD_ADDR_VAR 0 3
35406: PUSH
35407: LD_INT 4
35409: PUSH
35410: LD_INT 5
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: ST_TO_ADDR
35417: GO 36090
35419: LD_INT 10
35421: DOUBLE
35422: EQUAL
35423: IFTRUE 35427
35425: GO 35445
35427: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35428: LD_ADDR_VAR 0 3
35432: PUSH
35433: LD_INT 4
35435: PUSH
35436: LD_INT 5
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: ST_TO_ADDR
35443: GO 36090
35445: LD_INT 22
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35453
35451: GO 35479
35453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35454: LD_ADDR_VAR 0 3
35458: PUSH
35459: LD_INT 11
35461: PUSH
35462: LD_INT 12
35464: PUSH
35465: LD_INT 13
35467: PUSH
35468: LD_INT 14
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: ST_TO_ADDR
35477: GO 36090
35479: LD_INT 23
35481: DOUBLE
35482: EQUAL
35483: IFTRUE 35487
35485: GO 35513
35487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35488: LD_ADDR_VAR 0 3
35492: PUSH
35493: LD_INT 11
35495: PUSH
35496: LD_INT 12
35498: PUSH
35499: LD_INT 13
35501: PUSH
35502: LD_INT 14
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: ST_TO_ADDR
35511: GO 36090
35513: LD_INT 24
35515: DOUBLE
35516: EQUAL
35517: IFTRUE 35521
35519: GO 35547
35521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35522: LD_ADDR_VAR 0 3
35526: PUSH
35527: LD_INT 11
35529: PUSH
35530: LD_INT 12
35532: PUSH
35533: LD_INT 13
35535: PUSH
35536: LD_INT 14
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: ST_TO_ADDR
35545: GO 36090
35547: LD_INT 30
35549: DOUBLE
35550: EQUAL
35551: IFTRUE 35555
35553: GO 35581
35555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35556: LD_ADDR_VAR 0 3
35560: PUSH
35561: LD_INT 11
35563: PUSH
35564: LD_INT 12
35566: PUSH
35567: LD_INT 13
35569: PUSH
35570: LD_INT 14
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: ST_TO_ADDR
35579: GO 36090
35581: LD_INT 25
35583: DOUBLE
35584: EQUAL
35585: IFTRUE 35589
35587: GO 35607
35589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35590: LD_ADDR_VAR 0 3
35594: PUSH
35595: LD_INT 13
35597: PUSH
35598: LD_INT 14
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: ST_TO_ADDR
35605: GO 36090
35607: LD_INT 27
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35615
35613: GO 35633
35615: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35616: LD_ADDR_VAR 0 3
35620: PUSH
35621: LD_INT 13
35623: PUSH
35624: LD_INT 14
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: ST_TO_ADDR
35631: GO 36090
35633: LD_EXP 26
35637: DOUBLE
35638: EQUAL
35639: IFTRUE 35643
35641: GO 35669
35643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35644: LD_ADDR_VAR 0 3
35648: PUSH
35649: LD_INT 11
35651: PUSH
35652: LD_INT 12
35654: PUSH
35655: LD_INT 13
35657: PUSH
35658: LD_INT 14
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
35667: GO 36090
35669: LD_INT 28
35671: DOUBLE
35672: EQUAL
35673: IFTRUE 35677
35675: GO 35695
35677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35678: LD_ADDR_VAR 0 3
35682: PUSH
35683: LD_INT 13
35685: PUSH
35686: LD_INT 14
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: ST_TO_ADDR
35693: GO 36090
35695: LD_INT 29
35697: DOUBLE
35698: EQUAL
35699: IFTRUE 35703
35701: GO 35721
35703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35704: LD_ADDR_VAR 0 3
35708: PUSH
35709: LD_INT 13
35711: PUSH
35712: LD_INT 14
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: ST_TO_ADDR
35719: GO 36090
35721: LD_INT 31
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35729
35727: GO 35747
35729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35730: LD_ADDR_VAR 0 3
35734: PUSH
35735: LD_INT 13
35737: PUSH
35738: LD_INT 14
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: ST_TO_ADDR
35745: GO 36090
35747: LD_INT 26
35749: DOUBLE
35750: EQUAL
35751: IFTRUE 35755
35753: GO 35773
35755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35756: LD_ADDR_VAR 0 3
35760: PUSH
35761: LD_INT 13
35763: PUSH
35764: LD_INT 14
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: ST_TO_ADDR
35771: GO 36090
35773: LD_INT 42
35775: DOUBLE
35776: EQUAL
35777: IFTRUE 35781
35779: GO 35807
35781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35782: LD_ADDR_VAR 0 3
35786: PUSH
35787: LD_INT 21
35789: PUSH
35790: LD_INT 22
35792: PUSH
35793: LD_INT 23
35795: PUSH
35796: LD_INT 24
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: ST_TO_ADDR
35805: GO 36090
35807: LD_INT 43
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35815
35813: GO 35841
35815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35816: LD_ADDR_VAR 0 3
35820: PUSH
35821: LD_INT 21
35823: PUSH
35824: LD_INT 22
35826: PUSH
35827: LD_INT 23
35829: PUSH
35830: LD_INT 24
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: ST_TO_ADDR
35839: GO 36090
35841: LD_INT 44
35843: DOUBLE
35844: EQUAL
35845: IFTRUE 35849
35847: GO 35875
35849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35850: LD_ADDR_VAR 0 3
35854: PUSH
35855: LD_INT 21
35857: PUSH
35858: LD_INT 22
35860: PUSH
35861: LD_INT 23
35863: PUSH
35864: LD_INT 24
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
35873: GO 36090
35875: LD_INT 45
35877: DOUBLE
35878: EQUAL
35879: IFTRUE 35883
35881: GO 35909
35883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35884: LD_ADDR_VAR 0 3
35888: PUSH
35889: LD_INT 21
35891: PUSH
35892: LD_INT 22
35894: PUSH
35895: LD_INT 23
35897: PUSH
35898: LD_INT 24
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
35907: GO 36090
35909: LD_INT 49
35911: DOUBLE
35912: EQUAL
35913: IFTRUE 35917
35915: GO 35943
35917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35918: LD_ADDR_VAR 0 3
35922: PUSH
35923: LD_INT 21
35925: PUSH
35926: LD_INT 22
35928: PUSH
35929: LD_INT 23
35931: PUSH
35932: LD_INT 24
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
35941: GO 36090
35943: LD_INT 51
35945: DOUBLE
35946: EQUAL
35947: IFTRUE 35951
35949: GO 35977
35951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35952: LD_ADDR_VAR 0 3
35956: PUSH
35957: LD_INT 21
35959: PUSH
35960: LD_INT 22
35962: PUSH
35963: LD_INT 23
35965: PUSH
35966: LD_INT 24
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: ST_TO_ADDR
35975: GO 36090
35977: LD_INT 52
35979: DOUBLE
35980: EQUAL
35981: IFTRUE 35985
35983: GO 36011
35985: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35986: LD_ADDR_VAR 0 3
35990: PUSH
35991: LD_INT 21
35993: PUSH
35994: LD_INT 22
35996: PUSH
35997: LD_INT 23
35999: PUSH
36000: LD_INT 24
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: ST_TO_ADDR
36009: GO 36090
36011: LD_INT 53
36013: DOUBLE
36014: EQUAL
36015: IFTRUE 36019
36017: GO 36037
36019: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36020: LD_ADDR_VAR 0 3
36024: PUSH
36025: LD_INT 23
36027: PUSH
36028: LD_INT 24
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: ST_TO_ADDR
36035: GO 36090
36037: LD_INT 46
36039: DOUBLE
36040: EQUAL
36041: IFTRUE 36045
36043: GO 36063
36045: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_INT 23
36053: PUSH
36054: LD_INT 24
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: ST_TO_ADDR
36061: GO 36090
36063: LD_INT 47
36065: DOUBLE
36066: EQUAL
36067: IFTRUE 36071
36069: GO 36089
36071: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36072: LD_ADDR_VAR 0 3
36076: PUSH
36077: LD_INT 23
36079: PUSH
36080: LD_INT 24
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: ST_TO_ADDR
36087: GO 36090
36089: POP
// result := ( chassis in result ) ;
36090: LD_ADDR_VAR 0 3
36094: PUSH
36095: LD_VAR 0 1
36099: PUSH
36100: LD_VAR 0 3
36104: IN
36105: ST_TO_ADDR
// end ;
36106: LD_VAR 0 3
36110: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36111: LD_INT 0
36113: PPUSH
36114: PPUSH
36115: PPUSH
36116: PPUSH
36117: PPUSH
36118: PPUSH
36119: PPUSH
// result := array ;
36120: LD_ADDR_VAR 0 5
36124: PUSH
36125: LD_VAR 0 1
36129: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36130: LD_VAR 0 1
36134: NOT
36135: PUSH
36136: LD_VAR 0 2
36140: NOT
36141: OR
36142: PUSH
36143: LD_VAR 0 3
36147: NOT
36148: OR
36149: PUSH
36150: LD_VAR 0 2
36154: PUSH
36155: LD_VAR 0 1
36159: GREATER
36160: OR
36161: PUSH
36162: LD_VAR 0 3
36166: PUSH
36167: LD_VAR 0 1
36171: GREATER
36172: OR
36173: IFFALSE 36177
// exit ;
36175: GO 36473
// if direction then
36177: LD_VAR 0 4
36181: IFFALSE 36245
// begin d := 1 ;
36183: LD_ADDR_VAR 0 9
36187: PUSH
36188: LD_INT 1
36190: ST_TO_ADDR
// if i_from > i_to then
36191: LD_VAR 0 2
36195: PUSH
36196: LD_VAR 0 3
36200: GREATER
36201: IFFALSE 36227
// length := ( array - i_from ) + i_to else
36203: LD_ADDR_VAR 0 11
36207: PUSH
36208: LD_VAR 0 1
36212: PUSH
36213: LD_VAR 0 2
36217: MINUS
36218: PUSH
36219: LD_VAR 0 3
36223: PLUS
36224: ST_TO_ADDR
36225: GO 36243
// length := i_to - i_from ;
36227: LD_ADDR_VAR 0 11
36231: PUSH
36232: LD_VAR 0 3
36236: PUSH
36237: LD_VAR 0 2
36241: MINUS
36242: ST_TO_ADDR
// end else
36243: GO 36306
// begin d := - 1 ;
36245: LD_ADDR_VAR 0 9
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: ST_TO_ADDR
// if i_from > i_to then
36254: LD_VAR 0 2
36258: PUSH
36259: LD_VAR 0 3
36263: GREATER
36264: IFFALSE 36284
// length := i_from - i_to else
36266: LD_ADDR_VAR 0 11
36270: PUSH
36271: LD_VAR 0 2
36275: PUSH
36276: LD_VAR 0 3
36280: MINUS
36281: ST_TO_ADDR
36282: GO 36306
// length := ( array - i_to ) + i_from ;
36284: LD_ADDR_VAR 0 11
36288: PUSH
36289: LD_VAR 0 1
36293: PUSH
36294: LD_VAR 0 3
36298: MINUS
36299: PUSH
36300: LD_VAR 0 2
36304: PLUS
36305: ST_TO_ADDR
// end ; if not length then
36306: LD_VAR 0 11
36310: NOT
36311: IFFALSE 36315
// exit ;
36313: GO 36473
// tmp := array ;
36315: LD_ADDR_VAR 0 10
36319: PUSH
36320: LD_VAR 0 1
36324: ST_TO_ADDR
// for i = 1 to length do
36325: LD_ADDR_VAR 0 6
36329: PUSH
36330: DOUBLE
36331: LD_INT 1
36333: DEC
36334: ST_TO_ADDR
36335: LD_VAR 0 11
36339: PUSH
36340: FOR_TO
36341: IFFALSE 36461
// begin for j = 1 to array do
36343: LD_ADDR_VAR 0 7
36347: PUSH
36348: DOUBLE
36349: LD_INT 1
36351: DEC
36352: ST_TO_ADDR
36353: LD_VAR 0 1
36357: PUSH
36358: FOR_TO
36359: IFFALSE 36447
// begin k := j + d ;
36361: LD_ADDR_VAR 0 8
36365: PUSH
36366: LD_VAR 0 7
36370: PUSH
36371: LD_VAR 0 9
36375: PLUS
36376: ST_TO_ADDR
// if k > array then
36377: LD_VAR 0 8
36381: PUSH
36382: LD_VAR 0 1
36386: GREATER
36387: IFFALSE 36397
// k := 1 ;
36389: LD_ADDR_VAR 0 8
36393: PUSH
36394: LD_INT 1
36396: ST_TO_ADDR
// if not k then
36397: LD_VAR 0 8
36401: NOT
36402: IFFALSE 36414
// k := array ;
36404: LD_ADDR_VAR 0 8
36408: PUSH
36409: LD_VAR 0 1
36413: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36414: LD_ADDR_VAR 0 10
36418: PUSH
36419: LD_VAR 0 10
36423: PPUSH
36424: LD_VAR 0 8
36428: PPUSH
36429: LD_VAR 0 1
36433: PUSH
36434: LD_VAR 0 7
36438: ARRAY
36439: PPUSH
36440: CALL_OW 1
36444: ST_TO_ADDR
// end ;
36445: GO 36358
36447: POP
36448: POP
// array := tmp ;
36449: LD_ADDR_VAR 0 1
36453: PUSH
36454: LD_VAR 0 10
36458: ST_TO_ADDR
// end ;
36459: GO 36340
36461: POP
36462: POP
// result := array ;
36463: LD_ADDR_VAR 0 5
36467: PUSH
36468: LD_VAR 0 1
36472: ST_TO_ADDR
// end ;
36473: LD_VAR 0 5
36477: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36478: LD_INT 0
36480: PPUSH
36481: PPUSH
// result := 0 ;
36482: LD_ADDR_VAR 0 3
36486: PUSH
36487: LD_INT 0
36489: ST_TO_ADDR
// if not array or not value in array then
36490: LD_VAR 0 1
36494: NOT
36495: PUSH
36496: LD_VAR 0 2
36500: PUSH
36501: LD_VAR 0 1
36505: IN
36506: NOT
36507: OR
36508: IFFALSE 36512
// exit ;
36510: GO 36566
// for i = 1 to array do
36512: LD_ADDR_VAR 0 4
36516: PUSH
36517: DOUBLE
36518: LD_INT 1
36520: DEC
36521: ST_TO_ADDR
36522: LD_VAR 0 1
36526: PUSH
36527: FOR_TO
36528: IFFALSE 36564
// if value = array [ i ] then
36530: LD_VAR 0 2
36534: PUSH
36535: LD_VAR 0 1
36539: PUSH
36540: LD_VAR 0 4
36544: ARRAY
36545: EQUAL
36546: IFFALSE 36562
// begin result := i ;
36548: LD_ADDR_VAR 0 3
36552: PUSH
36553: LD_VAR 0 4
36557: ST_TO_ADDR
// exit ;
36558: POP
36559: POP
36560: GO 36566
// end ;
36562: GO 36527
36564: POP
36565: POP
// end ;
36566: LD_VAR 0 3
36570: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36571: LD_INT 0
36573: PPUSH
// vc_chassis := chassis ;
36574: LD_ADDR_OWVAR 37
36578: PUSH
36579: LD_VAR 0 1
36583: ST_TO_ADDR
// vc_engine := engine ;
36584: LD_ADDR_OWVAR 39
36588: PUSH
36589: LD_VAR 0 2
36593: ST_TO_ADDR
// vc_control := control ;
36594: LD_ADDR_OWVAR 38
36598: PUSH
36599: LD_VAR 0 3
36603: ST_TO_ADDR
// vc_weapon := weapon ;
36604: LD_ADDR_OWVAR 40
36608: PUSH
36609: LD_VAR 0 4
36613: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36614: LD_ADDR_OWVAR 41
36618: PUSH
36619: LD_VAR 0 5
36623: ST_TO_ADDR
// end ;
36624: LD_VAR 0 6
36628: RET
// export function WantPlant ( unit ) ; var task ; begin
36629: LD_INT 0
36631: PPUSH
36632: PPUSH
// result := false ;
36633: LD_ADDR_VAR 0 2
36637: PUSH
36638: LD_INT 0
36640: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36641: LD_ADDR_VAR 0 3
36645: PUSH
36646: LD_VAR 0 1
36650: PPUSH
36651: CALL_OW 437
36655: ST_TO_ADDR
// if task then
36656: LD_VAR 0 3
36660: IFFALSE 36688
// if task [ 1 ] [ 1 ] = p then
36662: LD_VAR 0 3
36666: PUSH
36667: LD_INT 1
36669: ARRAY
36670: PUSH
36671: LD_INT 1
36673: ARRAY
36674: PUSH
36675: LD_STRING p
36677: EQUAL
36678: IFFALSE 36688
// result := true ;
36680: LD_ADDR_VAR 0 2
36684: PUSH
36685: LD_INT 1
36687: ST_TO_ADDR
// end ;
36688: LD_VAR 0 2
36692: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36693: LD_INT 0
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
// if pos < 1 then
36699: LD_VAR 0 2
36703: PUSH
36704: LD_INT 1
36706: LESS
36707: IFFALSE 36711
// exit ;
36709: GO 37014
// if pos = 1 then
36711: LD_VAR 0 2
36715: PUSH
36716: LD_INT 1
36718: EQUAL
36719: IFFALSE 36752
// result := Replace ( arr , pos [ 1 ] , value ) else
36721: LD_ADDR_VAR 0 4
36725: PUSH
36726: LD_VAR 0 1
36730: PPUSH
36731: LD_VAR 0 2
36735: PUSH
36736: LD_INT 1
36738: ARRAY
36739: PPUSH
36740: LD_VAR 0 3
36744: PPUSH
36745: CALL_OW 1
36749: ST_TO_ADDR
36750: GO 37014
// begin tmp := arr ;
36752: LD_ADDR_VAR 0 6
36756: PUSH
36757: LD_VAR 0 1
36761: ST_TO_ADDR
// s_arr := [ tmp ] ;
36762: LD_ADDR_VAR 0 7
36766: PUSH
36767: LD_VAR 0 6
36771: PUSH
36772: EMPTY
36773: LIST
36774: ST_TO_ADDR
// for i = 1 to pos - 1 do
36775: LD_ADDR_VAR 0 5
36779: PUSH
36780: DOUBLE
36781: LD_INT 1
36783: DEC
36784: ST_TO_ADDR
36785: LD_VAR 0 2
36789: PUSH
36790: LD_INT 1
36792: MINUS
36793: PUSH
36794: FOR_TO
36795: IFFALSE 36840
// begin tmp := tmp [ pos [ i ] ] ;
36797: LD_ADDR_VAR 0 6
36801: PUSH
36802: LD_VAR 0 6
36806: PUSH
36807: LD_VAR 0 2
36811: PUSH
36812: LD_VAR 0 5
36816: ARRAY
36817: ARRAY
36818: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36819: LD_ADDR_VAR 0 7
36823: PUSH
36824: LD_VAR 0 7
36828: PUSH
36829: LD_VAR 0 6
36833: PUSH
36834: EMPTY
36835: LIST
36836: ADD
36837: ST_TO_ADDR
// end ;
36838: GO 36794
36840: POP
36841: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36842: LD_ADDR_VAR 0 6
36846: PUSH
36847: LD_VAR 0 6
36851: PPUSH
36852: LD_VAR 0 2
36856: PUSH
36857: LD_VAR 0 2
36861: ARRAY
36862: PPUSH
36863: LD_VAR 0 3
36867: PPUSH
36868: CALL_OW 1
36872: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36873: LD_ADDR_VAR 0 7
36877: PUSH
36878: LD_VAR 0 7
36882: PPUSH
36883: LD_VAR 0 7
36887: PPUSH
36888: LD_VAR 0 6
36892: PPUSH
36893: CALL_OW 1
36897: ST_TO_ADDR
// for i = s_arr downto 2 do
36898: LD_ADDR_VAR 0 5
36902: PUSH
36903: DOUBLE
36904: LD_VAR 0 7
36908: INC
36909: ST_TO_ADDR
36910: LD_INT 2
36912: PUSH
36913: FOR_DOWNTO
36914: IFFALSE 36998
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36916: LD_ADDR_VAR 0 6
36920: PUSH
36921: LD_VAR 0 7
36925: PUSH
36926: LD_VAR 0 5
36930: PUSH
36931: LD_INT 1
36933: MINUS
36934: ARRAY
36935: PPUSH
36936: LD_VAR 0 2
36940: PUSH
36941: LD_VAR 0 5
36945: PUSH
36946: LD_INT 1
36948: MINUS
36949: ARRAY
36950: PPUSH
36951: LD_VAR 0 7
36955: PUSH
36956: LD_VAR 0 5
36960: ARRAY
36961: PPUSH
36962: CALL_OW 1
36966: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36967: LD_ADDR_VAR 0 7
36971: PUSH
36972: LD_VAR 0 7
36976: PPUSH
36977: LD_VAR 0 5
36981: PUSH
36982: LD_INT 1
36984: MINUS
36985: PPUSH
36986: LD_VAR 0 6
36990: PPUSH
36991: CALL_OW 1
36995: ST_TO_ADDR
// end ;
36996: GO 36913
36998: POP
36999: POP
// result := s_arr [ 1 ] ;
37000: LD_ADDR_VAR 0 4
37004: PUSH
37005: LD_VAR 0 7
37009: PUSH
37010: LD_INT 1
37012: ARRAY
37013: ST_TO_ADDR
// end ; end ;
37014: LD_VAR 0 4
37018: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37019: LD_INT 0
37021: PPUSH
37022: PPUSH
// if not list then
37023: LD_VAR 0 1
37027: NOT
37028: IFFALSE 37032
// exit ;
37030: GO 37123
// i := list [ pos1 ] ;
37032: LD_ADDR_VAR 0 5
37036: PUSH
37037: LD_VAR 0 1
37041: PUSH
37042: LD_VAR 0 2
37046: ARRAY
37047: ST_TO_ADDR
// if not i then
37048: LD_VAR 0 5
37052: NOT
37053: IFFALSE 37057
// exit ;
37055: GO 37123
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37057: LD_ADDR_VAR 0 1
37061: PUSH
37062: LD_VAR 0 1
37066: PPUSH
37067: LD_VAR 0 2
37071: PPUSH
37072: LD_VAR 0 1
37076: PUSH
37077: LD_VAR 0 3
37081: ARRAY
37082: PPUSH
37083: CALL_OW 1
37087: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37088: LD_ADDR_VAR 0 1
37092: PUSH
37093: LD_VAR 0 1
37097: PPUSH
37098: LD_VAR 0 3
37102: PPUSH
37103: LD_VAR 0 5
37107: PPUSH
37108: CALL_OW 1
37112: ST_TO_ADDR
// result := list ;
37113: LD_ADDR_VAR 0 4
37117: PUSH
37118: LD_VAR 0 1
37122: ST_TO_ADDR
// end ;
37123: LD_VAR 0 4
37127: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37128: LD_INT 0
37130: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37131: LD_ADDR_VAR 0 5
37135: PUSH
37136: LD_VAR 0 1
37140: PPUSH
37141: CALL_OW 250
37145: PPUSH
37146: LD_VAR 0 1
37150: PPUSH
37151: CALL_OW 251
37155: PPUSH
37156: LD_VAR 0 2
37160: PPUSH
37161: LD_VAR 0 3
37165: PPUSH
37166: LD_VAR 0 4
37170: PPUSH
37171: CALL 37181 0 5
37175: ST_TO_ADDR
// end ;
37176: LD_VAR 0 5
37180: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37181: LD_INT 0
37183: PPUSH
37184: PPUSH
37185: PPUSH
37186: PPUSH
// if not list then
37187: LD_VAR 0 3
37191: NOT
37192: IFFALSE 37196
// exit ;
37194: GO 37584
// result := [ ] ;
37196: LD_ADDR_VAR 0 6
37200: PUSH
37201: EMPTY
37202: ST_TO_ADDR
// for i in list do
37203: LD_ADDR_VAR 0 7
37207: PUSH
37208: LD_VAR 0 3
37212: PUSH
37213: FOR_IN
37214: IFFALSE 37416
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37216: LD_ADDR_VAR 0 9
37220: PUSH
37221: LD_VAR 0 7
37225: PPUSH
37226: LD_VAR 0 1
37230: PPUSH
37231: LD_VAR 0 2
37235: PPUSH
37236: CALL_OW 297
37240: ST_TO_ADDR
// if not result then
37241: LD_VAR 0 6
37245: NOT
37246: IFFALSE 37272
// result := [ [ i , tmp ] ] else
37248: LD_ADDR_VAR 0 6
37252: PUSH
37253: LD_VAR 0 7
37257: PUSH
37258: LD_VAR 0 9
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: EMPTY
37268: LIST
37269: ST_TO_ADDR
37270: GO 37414
// begin if result [ result ] [ 2 ] < tmp then
37272: LD_VAR 0 6
37276: PUSH
37277: LD_VAR 0 6
37281: ARRAY
37282: PUSH
37283: LD_INT 2
37285: ARRAY
37286: PUSH
37287: LD_VAR 0 9
37291: LESS
37292: IFFALSE 37334
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37294: LD_ADDR_VAR 0 6
37298: PUSH
37299: LD_VAR 0 6
37303: PPUSH
37304: LD_VAR 0 6
37308: PUSH
37309: LD_INT 1
37311: PLUS
37312: PPUSH
37313: LD_VAR 0 7
37317: PUSH
37318: LD_VAR 0 9
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PPUSH
37327: CALL_OW 2
37331: ST_TO_ADDR
37332: GO 37414
// for j = 1 to result do
37334: LD_ADDR_VAR 0 8
37338: PUSH
37339: DOUBLE
37340: LD_INT 1
37342: DEC
37343: ST_TO_ADDR
37344: LD_VAR 0 6
37348: PUSH
37349: FOR_TO
37350: IFFALSE 37412
// begin if tmp < result [ j ] [ 2 ] then
37352: LD_VAR 0 9
37356: PUSH
37357: LD_VAR 0 6
37361: PUSH
37362: LD_VAR 0 8
37366: ARRAY
37367: PUSH
37368: LD_INT 2
37370: ARRAY
37371: LESS
37372: IFFALSE 37410
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37374: LD_ADDR_VAR 0 6
37378: PUSH
37379: LD_VAR 0 6
37383: PPUSH
37384: LD_VAR 0 8
37388: PPUSH
37389: LD_VAR 0 7
37393: PUSH
37394: LD_VAR 0 9
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PPUSH
37403: CALL_OW 2
37407: ST_TO_ADDR
// break ;
37408: GO 37412
// end ; end ;
37410: GO 37349
37412: POP
37413: POP
// end ; end ;
37414: GO 37213
37416: POP
37417: POP
// if result and not asc then
37418: LD_VAR 0 6
37422: PUSH
37423: LD_VAR 0 4
37427: NOT
37428: AND
37429: IFFALSE 37504
// begin tmp := result ;
37431: LD_ADDR_VAR 0 9
37435: PUSH
37436: LD_VAR 0 6
37440: ST_TO_ADDR
// for i = tmp downto 1 do
37441: LD_ADDR_VAR 0 7
37445: PUSH
37446: DOUBLE
37447: LD_VAR 0 9
37451: INC
37452: ST_TO_ADDR
37453: LD_INT 1
37455: PUSH
37456: FOR_DOWNTO
37457: IFFALSE 37502
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37459: LD_ADDR_VAR 0 6
37463: PUSH
37464: LD_VAR 0 6
37468: PPUSH
37469: LD_VAR 0 9
37473: PUSH
37474: LD_VAR 0 7
37478: MINUS
37479: PUSH
37480: LD_INT 1
37482: PLUS
37483: PPUSH
37484: LD_VAR 0 9
37488: PUSH
37489: LD_VAR 0 7
37493: ARRAY
37494: PPUSH
37495: CALL_OW 1
37499: ST_TO_ADDR
37500: GO 37456
37502: POP
37503: POP
// end ; tmp := [ ] ;
37504: LD_ADDR_VAR 0 9
37508: PUSH
37509: EMPTY
37510: ST_TO_ADDR
// if mode then
37511: LD_VAR 0 5
37515: IFFALSE 37584
// begin for i = 1 to result do
37517: LD_ADDR_VAR 0 7
37521: PUSH
37522: DOUBLE
37523: LD_INT 1
37525: DEC
37526: ST_TO_ADDR
37527: LD_VAR 0 6
37531: PUSH
37532: FOR_TO
37533: IFFALSE 37572
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37535: LD_ADDR_VAR 0 9
37539: PUSH
37540: LD_VAR 0 9
37544: PPUSH
37545: LD_VAR 0 7
37549: PPUSH
37550: LD_VAR 0 6
37554: PUSH
37555: LD_VAR 0 7
37559: ARRAY
37560: PUSH
37561: LD_INT 1
37563: ARRAY
37564: PPUSH
37565: CALL_OW 1
37569: ST_TO_ADDR
37570: GO 37532
37572: POP
37573: POP
// result := tmp ;
37574: LD_ADDR_VAR 0 6
37578: PUSH
37579: LD_VAR 0 9
37583: ST_TO_ADDR
// end ; end ;
37584: LD_VAR 0 6
37588: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37589: LD_INT 0
37591: PPUSH
37592: PPUSH
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37597: LD_ADDR_VAR 0 5
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: EMPTY
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: ST_TO_ADDR
// if not x or not y then
37619: LD_VAR 0 2
37623: NOT
37624: PUSH
37625: LD_VAR 0 3
37629: NOT
37630: OR
37631: IFFALSE 37635
// exit ;
37633: GO 39287
// if not range then
37635: LD_VAR 0 4
37639: NOT
37640: IFFALSE 37650
// range := 10 ;
37642: LD_ADDR_VAR 0 4
37646: PUSH
37647: LD_INT 10
37649: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37650: LD_ADDR_VAR 0 8
37654: PUSH
37655: LD_INT 81
37657: PUSH
37658: LD_VAR 0 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 92
37669: PUSH
37670: LD_VAR 0 2
37674: PUSH
37675: LD_VAR 0 3
37679: PUSH
37680: LD_VAR 0 4
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: LD_INT 21
37696: PUSH
37697: LD_INT 3
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: PPUSH
37713: CALL_OW 69
37717: ST_TO_ADDR
// if not tmp then
37718: LD_VAR 0 8
37722: NOT
37723: IFFALSE 37727
// exit ;
37725: GO 39287
// for i in tmp do
37727: LD_ADDR_VAR 0 6
37731: PUSH
37732: LD_VAR 0 8
37736: PUSH
37737: FOR_IN
37738: IFFALSE 39262
// begin points := [ 0 , 0 , 0 ] ;
37740: LD_ADDR_VAR 0 9
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// bpoints := 1 ;
37759: LD_ADDR_VAR 0 10
37763: PUSH
37764: LD_INT 1
37766: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37767: LD_VAR 0 6
37771: PPUSH
37772: CALL_OW 247
37776: PUSH
37777: LD_INT 1
37779: DOUBLE
37780: EQUAL
37781: IFTRUE 37785
37783: GO 38363
37785: POP
// begin if GetClass ( i ) = 1 then
37786: LD_VAR 0 6
37790: PPUSH
37791: CALL_OW 257
37795: PUSH
37796: LD_INT 1
37798: EQUAL
37799: IFFALSE 37820
// points := [ 10 , 5 , 3 ] ;
37801: LD_ADDR_VAR 0 9
37805: PUSH
37806: LD_INT 10
37808: PUSH
37809: LD_INT 5
37811: PUSH
37812: LD_INT 3
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37820: LD_VAR 0 6
37824: PPUSH
37825: CALL_OW 257
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: LD_INT 3
37835: PUSH
37836: LD_INT 4
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: IN
37844: IFFALSE 37865
// points := [ 3 , 2 , 1 ] ;
37846: LD_ADDR_VAR 0 9
37850: PUSH
37851: LD_INT 3
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37865: LD_VAR 0 6
37869: PPUSH
37870: CALL_OW 257
37874: PUSH
37875: LD_INT 5
37877: EQUAL
37878: IFFALSE 37899
// points := [ 130 , 5 , 2 ] ;
37880: LD_ADDR_VAR 0 9
37884: PUSH
37885: LD_INT 130
37887: PUSH
37888: LD_INT 5
37890: PUSH
37891: LD_INT 2
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37899: LD_VAR 0 6
37903: PPUSH
37904: CALL_OW 257
37908: PUSH
37909: LD_INT 8
37911: EQUAL
37912: IFFALSE 37933
// points := [ 35 , 35 , 30 ] ;
37914: LD_ADDR_VAR 0 9
37918: PUSH
37919: LD_INT 35
37921: PUSH
37922: LD_INT 35
37924: PUSH
37925: LD_INT 30
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37933: LD_VAR 0 6
37937: PPUSH
37938: CALL_OW 257
37942: PUSH
37943: LD_INT 9
37945: EQUAL
37946: IFFALSE 37967
// points := [ 20 , 55 , 40 ] ;
37948: LD_ADDR_VAR 0 9
37952: PUSH
37953: LD_INT 20
37955: PUSH
37956: LD_INT 55
37958: PUSH
37959: LD_INT 40
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37967: LD_VAR 0 6
37971: PPUSH
37972: CALL_OW 257
37976: PUSH
37977: LD_INT 12
37979: PUSH
37980: LD_INT 16
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: IN
37987: IFFALSE 38008
// points := [ 5 , 3 , 2 ] ;
37989: LD_ADDR_VAR 0 9
37993: PUSH
37994: LD_INT 5
37996: PUSH
37997: LD_INT 3
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: LIST
38007: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38008: LD_VAR 0 6
38012: PPUSH
38013: CALL_OW 257
38017: PUSH
38018: LD_INT 17
38020: EQUAL
38021: IFFALSE 38042
// points := [ 100 , 50 , 75 ] ;
38023: LD_ADDR_VAR 0 9
38027: PUSH
38028: LD_INT 100
38030: PUSH
38031: LD_INT 50
38033: PUSH
38034: LD_INT 75
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38042: LD_VAR 0 6
38046: PPUSH
38047: CALL_OW 257
38051: PUSH
38052: LD_INT 15
38054: EQUAL
38055: IFFALSE 38076
// points := [ 10 , 5 , 3 ] ;
38057: LD_ADDR_VAR 0 9
38061: PUSH
38062: LD_INT 10
38064: PUSH
38065: LD_INT 5
38067: PUSH
38068: LD_INT 3
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38076: LD_VAR 0 6
38080: PPUSH
38081: CALL_OW 257
38085: PUSH
38086: LD_INT 14
38088: EQUAL
38089: IFFALSE 38110
// points := [ 10 , 0 , 0 ] ;
38091: LD_ADDR_VAR 0 9
38095: PUSH
38096: LD_INT 10
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38110: LD_VAR 0 6
38114: PPUSH
38115: CALL_OW 257
38119: PUSH
38120: LD_INT 11
38122: EQUAL
38123: IFFALSE 38144
// points := [ 30 , 10 , 5 ] ;
38125: LD_ADDR_VAR 0 9
38129: PUSH
38130: LD_INT 30
38132: PUSH
38133: LD_INT 10
38135: PUSH
38136: LD_INT 5
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38144: LD_VAR 0 1
38148: PPUSH
38149: LD_INT 5
38151: PPUSH
38152: CALL_OW 321
38156: PUSH
38157: LD_INT 2
38159: EQUAL
38160: IFFALSE 38177
// bpoints := bpoints * 1.8 ;
38162: LD_ADDR_VAR 0 10
38166: PUSH
38167: LD_VAR 0 10
38171: PUSH
38172: LD_REAL  1.80000000000000E+0000
38175: MUL
38176: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38177: LD_VAR 0 6
38181: PPUSH
38182: CALL_OW 257
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: LD_INT 3
38195: PUSH
38196: LD_INT 4
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: IN
38205: PUSH
38206: LD_VAR 0 1
38210: PPUSH
38211: LD_INT 51
38213: PPUSH
38214: CALL_OW 321
38218: PUSH
38219: LD_INT 2
38221: EQUAL
38222: AND
38223: IFFALSE 38240
// bpoints := bpoints * 1.2 ;
38225: LD_ADDR_VAR 0 10
38229: PUSH
38230: LD_VAR 0 10
38234: PUSH
38235: LD_REAL  1.20000000000000E+0000
38238: MUL
38239: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38240: LD_VAR 0 6
38244: PPUSH
38245: CALL_OW 257
38249: PUSH
38250: LD_INT 5
38252: PUSH
38253: LD_INT 7
38255: PUSH
38256: LD_INT 9
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: IN
38264: PUSH
38265: LD_VAR 0 1
38269: PPUSH
38270: LD_INT 52
38272: PPUSH
38273: CALL_OW 321
38277: PUSH
38278: LD_INT 2
38280: EQUAL
38281: AND
38282: IFFALSE 38299
// bpoints := bpoints * 1.5 ;
38284: LD_ADDR_VAR 0 10
38288: PUSH
38289: LD_VAR 0 10
38293: PUSH
38294: LD_REAL  1.50000000000000E+0000
38297: MUL
38298: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38299: LD_VAR 0 1
38303: PPUSH
38304: LD_INT 66
38306: PPUSH
38307: CALL_OW 321
38311: PUSH
38312: LD_INT 2
38314: EQUAL
38315: IFFALSE 38332
// bpoints := bpoints * 1.1 ;
38317: LD_ADDR_VAR 0 10
38321: PUSH
38322: LD_VAR 0 10
38326: PUSH
38327: LD_REAL  1.10000000000000E+0000
38330: MUL
38331: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38332: LD_ADDR_VAR 0 10
38336: PUSH
38337: LD_VAR 0 10
38341: PUSH
38342: LD_VAR 0 6
38346: PPUSH
38347: LD_INT 1
38349: PPUSH
38350: CALL_OW 259
38354: PUSH
38355: LD_REAL  1.15000000000000E+0000
38358: MUL
38359: MUL
38360: ST_TO_ADDR
// end ; unit_vehicle :
38361: GO 39191
38363: LD_INT 2
38365: DOUBLE
38366: EQUAL
38367: IFTRUE 38371
38369: GO 39179
38371: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38372: LD_VAR 0 6
38376: PPUSH
38377: CALL_OW 264
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: LD_INT 42
38387: PUSH
38388: LD_INT 24
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: IN
38396: IFFALSE 38417
// points := [ 25 , 5 , 3 ] ;
38398: LD_ADDR_VAR 0 9
38402: PUSH
38403: LD_INT 25
38405: PUSH
38406: LD_INT 5
38408: PUSH
38409: LD_INT 3
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: LIST
38416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38417: LD_VAR 0 6
38421: PPUSH
38422: CALL_OW 264
38426: PUSH
38427: LD_INT 4
38429: PUSH
38430: LD_INT 43
38432: PUSH
38433: LD_INT 25
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: IN
38441: IFFALSE 38462
// points := [ 40 , 15 , 5 ] ;
38443: LD_ADDR_VAR 0 9
38447: PUSH
38448: LD_INT 40
38450: PUSH
38451: LD_INT 15
38453: PUSH
38454: LD_INT 5
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38462: LD_VAR 0 6
38466: PPUSH
38467: CALL_OW 264
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: LD_INT 23
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: IN
38482: IFFALSE 38503
// points := [ 7 , 25 , 8 ] ;
38484: LD_ADDR_VAR 0 9
38488: PUSH
38489: LD_INT 7
38491: PUSH
38492: LD_INT 25
38494: PUSH
38495: LD_INT 8
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38503: LD_VAR 0 6
38507: PPUSH
38508: CALL_OW 264
38512: PUSH
38513: LD_INT 5
38515: PUSH
38516: LD_INT 27
38518: PUSH
38519: LD_INT 44
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: IN
38527: IFFALSE 38548
// points := [ 14 , 50 , 16 ] ;
38529: LD_ADDR_VAR 0 9
38533: PUSH
38534: LD_INT 14
38536: PUSH
38537: LD_INT 50
38539: PUSH
38540: LD_INT 16
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38548: LD_VAR 0 6
38552: PPUSH
38553: CALL_OW 264
38557: PUSH
38558: LD_INT 6
38560: PUSH
38561: LD_INT 46
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: IN
38568: IFFALSE 38589
// points := [ 32 , 120 , 70 ] ;
38570: LD_ADDR_VAR 0 9
38574: PUSH
38575: LD_INT 32
38577: PUSH
38578: LD_INT 120
38580: PUSH
38581: LD_INT 70
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38589: LD_VAR 0 6
38593: PPUSH
38594: CALL_OW 264
38598: PUSH
38599: LD_INT 7
38601: PUSH
38602: LD_INT 28
38604: PUSH
38605: LD_INT 45
38607: PUSH
38608: LD_EXP 26
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: IN
38619: IFFALSE 38640
// points := [ 35 , 20 , 45 ] ;
38621: LD_ADDR_VAR 0 9
38625: PUSH
38626: LD_INT 35
38628: PUSH
38629: LD_INT 20
38631: PUSH
38632: LD_INT 45
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38640: LD_VAR 0 6
38644: PPUSH
38645: CALL_OW 264
38649: PUSH
38650: LD_INT 47
38652: PUSH
38653: EMPTY
38654: LIST
38655: IN
38656: IFFALSE 38677
// points := [ 67 , 45 , 75 ] ;
38658: LD_ADDR_VAR 0 9
38662: PUSH
38663: LD_INT 67
38665: PUSH
38666: LD_INT 45
38668: PUSH
38669: LD_INT 75
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38677: LD_VAR 0 6
38681: PPUSH
38682: CALL_OW 264
38686: PUSH
38687: LD_INT 26
38689: PUSH
38690: EMPTY
38691: LIST
38692: IN
38693: IFFALSE 38714
// points := [ 120 , 30 , 80 ] ;
38695: LD_ADDR_VAR 0 9
38699: PUSH
38700: LD_INT 120
38702: PUSH
38703: LD_INT 30
38705: PUSH
38706: LD_INT 80
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38714: LD_VAR 0 6
38718: PPUSH
38719: CALL_OW 264
38723: PUSH
38724: LD_INT 22
38726: PUSH
38727: EMPTY
38728: LIST
38729: IN
38730: IFFALSE 38751
// points := [ 40 , 1 , 1 ] ;
38732: LD_ADDR_VAR 0 9
38736: PUSH
38737: LD_INT 40
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38751: LD_VAR 0 6
38755: PPUSH
38756: CALL_OW 264
38760: PUSH
38761: LD_INT 29
38763: PUSH
38764: EMPTY
38765: LIST
38766: IN
38767: IFFALSE 38788
// points := [ 70 , 200 , 400 ] ;
38769: LD_ADDR_VAR 0 9
38773: PUSH
38774: LD_INT 70
38776: PUSH
38777: LD_INT 200
38779: PUSH
38780: LD_INT 400
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38788: LD_VAR 0 6
38792: PPUSH
38793: CALL_OW 264
38797: PUSH
38798: LD_INT 14
38800: PUSH
38801: LD_INT 53
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: IN
38808: IFFALSE 38829
// points := [ 40 , 10 , 20 ] ;
38810: LD_ADDR_VAR 0 9
38814: PUSH
38815: LD_INT 40
38817: PUSH
38818: LD_INT 10
38820: PUSH
38821: LD_INT 20
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38829: LD_VAR 0 6
38833: PPUSH
38834: CALL_OW 264
38838: PUSH
38839: LD_INT 9
38841: PUSH
38842: EMPTY
38843: LIST
38844: IN
38845: IFFALSE 38866
// points := [ 5 , 70 , 20 ] ;
38847: LD_ADDR_VAR 0 9
38851: PUSH
38852: LD_INT 5
38854: PUSH
38855: LD_INT 70
38857: PUSH
38858: LD_INT 20
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38866: LD_VAR 0 6
38870: PPUSH
38871: CALL_OW 264
38875: PUSH
38876: LD_INT 10
38878: PUSH
38879: EMPTY
38880: LIST
38881: IN
38882: IFFALSE 38903
// points := [ 35 , 110 , 70 ] ;
38884: LD_ADDR_VAR 0 9
38888: PUSH
38889: LD_INT 35
38891: PUSH
38892: LD_INT 110
38894: PUSH
38895: LD_INT 70
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: LIST
38902: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38903: LD_VAR 0 6
38907: PPUSH
38908: CALL_OW 265
38912: PUSH
38913: LD_INT 25
38915: EQUAL
38916: IFFALSE 38937
// points := [ 80 , 65 , 100 ] ;
38918: LD_ADDR_VAR 0 9
38922: PUSH
38923: LD_INT 80
38925: PUSH
38926: LD_INT 65
38928: PUSH
38929: LD_INT 100
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38937: LD_VAR 0 6
38941: PPUSH
38942: CALL_OW 263
38946: PUSH
38947: LD_INT 1
38949: EQUAL
38950: IFFALSE 38985
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38952: LD_ADDR_VAR 0 10
38956: PUSH
38957: LD_VAR 0 10
38961: PUSH
38962: LD_VAR 0 6
38966: PPUSH
38967: CALL_OW 311
38971: PPUSH
38972: LD_INT 3
38974: PPUSH
38975: CALL_OW 259
38979: PUSH
38980: LD_INT 4
38982: MUL
38983: MUL
38984: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38985: LD_VAR 0 6
38989: PPUSH
38990: CALL_OW 263
38994: PUSH
38995: LD_INT 2
38997: EQUAL
38998: IFFALSE 39049
// begin j := IsControledBy ( i ) ;
39000: LD_ADDR_VAR 0 7
39004: PUSH
39005: LD_VAR 0 6
39009: PPUSH
39010: CALL_OW 312
39014: ST_TO_ADDR
// if j then
39015: LD_VAR 0 7
39019: IFFALSE 39049
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39021: LD_ADDR_VAR 0 10
39025: PUSH
39026: LD_VAR 0 10
39030: PUSH
39031: LD_VAR 0 7
39035: PPUSH
39036: LD_INT 3
39038: PPUSH
39039: CALL_OW 259
39043: PUSH
39044: LD_INT 3
39046: MUL
39047: MUL
39048: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39049: LD_VAR 0 6
39053: PPUSH
39054: CALL_OW 264
39058: PUSH
39059: LD_INT 5
39061: PUSH
39062: LD_INT 6
39064: PUSH
39065: LD_INT 46
39067: PUSH
39068: LD_INT 44
39070: PUSH
39071: LD_INT 47
39073: PUSH
39074: LD_INT 45
39076: PUSH
39077: LD_INT 28
39079: PUSH
39080: LD_INT 7
39082: PUSH
39083: LD_INT 27
39085: PUSH
39086: LD_INT 29
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: IN
39101: PUSH
39102: LD_VAR 0 1
39106: PPUSH
39107: LD_INT 52
39109: PPUSH
39110: CALL_OW 321
39114: PUSH
39115: LD_INT 2
39117: EQUAL
39118: AND
39119: IFFALSE 39136
// bpoints := bpoints * 1.2 ;
39121: LD_ADDR_VAR 0 10
39125: PUSH
39126: LD_VAR 0 10
39130: PUSH
39131: LD_REAL  1.20000000000000E+0000
39134: MUL
39135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39136: LD_VAR 0 6
39140: PPUSH
39141: CALL_OW 264
39145: PUSH
39146: LD_INT 6
39148: PUSH
39149: LD_INT 46
39151: PUSH
39152: LD_INT 47
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: IN
39160: IFFALSE 39177
// bpoints := bpoints * 1.2 ;
39162: LD_ADDR_VAR 0 10
39166: PUSH
39167: LD_VAR 0 10
39171: PUSH
39172: LD_REAL  1.20000000000000E+0000
39175: MUL
39176: ST_TO_ADDR
// end ; unit_building :
39177: GO 39191
39179: LD_INT 3
39181: DOUBLE
39182: EQUAL
39183: IFTRUE 39187
39185: GO 39190
39187: POP
// ; end ;
39188: GO 39191
39190: POP
// for j = 1 to 3 do
39191: LD_ADDR_VAR 0 7
39195: PUSH
39196: DOUBLE
39197: LD_INT 1
39199: DEC
39200: ST_TO_ADDR
39201: LD_INT 3
39203: PUSH
39204: FOR_TO
39205: IFFALSE 39258
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39207: LD_ADDR_VAR 0 5
39211: PUSH
39212: LD_VAR 0 5
39216: PPUSH
39217: LD_VAR 0 7
39221: PPUSH
39222: LD_VAR 0 5
39226: PUSH
39227: LD_VAR 0 7
39231: ARRAY
39232: PUSH
39233: LD_VAR 0 9
39237: PUSH
39238: LD_VAR 0 7
39242: ARRAY
39243: PUSH
39244: LD_VAR 0 10
39248: MUL
39249: PLUS
39250: PPUSH
39251: CALL_OW 1
39255: ST_TO_ADDR
39256: GO 39204
39258: POP
39259: POP
// end ;
39260: GO 37737
39262: POP
39263: POP
// result := Replace ( result , 4 , tmp ) ;
39264: LD_ADDR_VAR 0 5
39268: PUSH
39269: LD_VAR 0 5
39273: PPUSH
39274: LD_INT 4
39276: PPUSH
39277: LD_VAR 0 8
39281: PPUSH
39282: CALL_OW 1
39286: ST_TO_ADDR
// end ;
39287: LD_VAR 0 5
39291: RET
// export function DangerAtRange ( unit , range ) ; begin
39292: LD_INT 0
39294: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39295: LD_ADDR_VAR 0 3
39299: PUSH
39300: LD_VAR 0 1
39304: PPUSH
39305: CALL_OW 255
39309: PPUSH
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 250
39319: PPUSH
39320: LD_VAR 0 1
39324: PPUSH
39325: CALL_OW 251
39329: PPUSH
39330: LD_VAR 0 2
39334: PPUSH
39335: CALL 37589 0 4
39339: ST_TO_ADDR
// end ;
39340: LD_VAR 0 3
39344: RET
// export function DangerInArea ( side , area ) ; begin
39345: LD_INT 0
39347: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39348: LD_ADDR_VAR 0 3
39352: PUSH
39353: LD_VAR 0 2
39357: PPUSH
39358: LD_INT 81
39360: PUSH
39361: LD_VAR 0 1
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PPUSH
39370: CALL_OW 70
39374: ST_TO_ADDR
// end ;
39375: LD_VAR 0 3
39379: RET
// export function IsExtension ( b ) ; begin
39380: LD_INT 0
39382: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39383: LD_ADDR_VAR 0 2
39387: PUSH
39388: LD_VAR 0 1
39392: PUSH
39393: LD_INT 23
39395: PUSH
39396: LD_INT 20
39398: PUSH
39399: LD_INT 22
39401: PUSH
39402: LD_INT 17
39404: PUSH
39405: LD_INT 24
39407: PUSH
39408: LD_INT 21
39410: PUSH
39411: LD_INT 19
39413: PUSH
39414: LD_INT 16
39416: PUSH
39417: LD_INT 25
39419: PUSH
39420: LD_INT 18
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: IN
39435: ST_TO_ADDR
// end ;
39436: LD_VAR 0 2
39440: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39441: LD_INT 0
39443: PPUSH
39444: PPUSH
39445: PPUSH
// result := [ ] ;
39446: LD_ADDR_VAR 0 4
39450: PUSH
39451: EMPTY
39452: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39453: LD_ADDR_VAR 0 5
39457: PUSH
39458: LD_VAR 0 2
39462: PPUSH
39463: LD_INT 21
39465: PUSH
39466: LD_INT 3
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PPUSH
39473: CALL_OW 70
39477: ST_TO_ADDR
// if not tmp then
39478: LD_VAR 0 5
39482: NOT
39483: IFFALSE 39487
// exit ;
39485: GO 39551
// if checkLink then
39487: LD_VAR 0 3
39491: IFFALSE 39541
// begin for i in tmp do
39493: LD_ADDR_VAR 0 6
39497: PUSH
39498: LD_VAR 0 5
39502: PUSH
39503: FOR_IN
39504: IFFALSE 39539
// if GetBase ( i ) <> base then
39506: LD_VAR 0 6
39510: PPUSH
39511: CALL_OW 274
39515: PUSH
39516: LD_VAR 0 1
39520: NONEQUAL
39521: IFFALSE 39537
// ComLinkToBase ( base , i ) ;
39523: LD_VAR 0 1
39527: PPUSH
39528: LD_VAR 0 6
39532: PPUSH
39533: CALL_OW 169
39537: GO 39503
39539: POP
39540: POP
// end ; result := tmp ;
39541: LD_ADDR_VAR 0 4
39545: PUSH
39546: LD_VAR 0 5
39550: ST_TO_ADDR
// end ;
39551: LD_VAR 0 4
39555: RET
// export function ComComplete ( units , b ) ; var i ; begin
39556: LD_INT 0
39558: PPUSH
39559: PPUSH
// if not units then
39560: LD_VAR 0 1
39564: NOT
39565: IFFALSE 39569
// exit ;
39567: GO 39659
// for i in units do
39569: LD_ADDR_VAR 0 4
39573: PUSH
39574: LD_VAR 0 1
39578: PUSH
39579: FOR_IN
39580: IFFALSE 39657
// if BuildingStatus ( b ) = bs_build then
39582: LD_VAR 0 2
39586: PPUSH
39587: CALL_OW 461
39591: PUSH
39592: LD_INT 1
39594: EQUAL
39595: IFFALSE 39655
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39597: LD_VAR 0 4
39601: PPUSH
39602: LD_STRING h
39604: PUSH
39605: LD_VAR 0 2
39609: PPUSH
39610: CALL_OW 250
39614: PUSH
39615: LD_VAR 0 2
39619: PPUSH
39620: CALL_OW 251
39624: PUSH
39625: LD_VAR 0 2
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: PUSH
39648: EMPTY
39649: LIST
39650: PPUSH
39651: CALL_OW 446
39655: GO 39579
39657: POP
39658: POP
// end ;
39659: LD_VAR 0 3
39663: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39664: LD_INT 0
39666: PPUSH
39667: PPUSH
39668: PPUSH
39669: PPUSH
39670: PPUSH
39671: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39672: LD_VAR 0 1
39676: NOT
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 263
39687: PUSH
39688: LD_INT 2
39690: NONEQUAL
39691: OR
39692: IFFALSE 39696
// exit ;
39694: GO 40012
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39696: LD_ADDR_VAR 0 6
39700: PUSH
39701: LD_INT 22
39703: PUSH
39704: LD_VAR 0 1
39708: PPUSH
39709: CALL_OW 255
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: LD_INT 30
39723: PUSH
39724: LD_INT 36
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 34
39733: PUSH
39734: LD_INT 31
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: LIST
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PPUSH
39750: CALL_OW 69
39754: ST_TO_ADDR
// if not tmp then
39755: LD_VAR 0 6
39759: NOT
39760: IFFALSE 39764
// exit ;
39762: GO 40012
// result := [ ] ;
39764: LD_ADDR_VAR 0 2
39768: PUSH
39769: EMPTY
39770: ST_TO_ADDR
// for i in tmp do
39771: LD_ADDR_VAR 0 3
39775: PUSH
39776: LD_VAR 0 6
39780: PUSH
39781: FOR_IN
39782: IFFALSE 39853
// begin t := UnitsInside ( i ) ;
39784: LD_ADDR_VAR 0 4
39788: PUSH
39789: LD_VAR 0 3
39793: PPUSH
39794: CALL_OW 313
39798: ST_TO_ADDR
// if t then
39799: LD_VAR 0 4
39803: IFFALSE 39851
// for j in t do
39805: LD_ADDR_VAR 0 7
39809: PUSH
39810: LD_VAR 0 4
39814: PUSH
39815: FOR_IN
39816: IFFALSE 39849
// result := Replace ( result , result + 1 , j ) ;
39818: LD_ADDR_VAR 0 2
39822: PUSH
39823: LD_VAR 0 2
39827: PPUSH
39828: LD_VAR 0 2
39832: PUSH
39833: LD_INT 1
39835: PLUS
39836: PPUSH
39837: LD_VAR 0 7
39841: PPUSH
39842: CALL_OW 1
39846: ST_TO_ADDR
39847: GO 39815
39849: POP
39850: POP
// end ;
39851: GO 39781
39853: POP
39854: POP
// if not result then
39855: LD_VAR 0 2
39859: NOT
39860: IFFALSE 39864
// exit ;
39862: GO 40012
// mech := result [ 1 ] ;
39864: LD_ADDR_VAR 0 5
39868: PUSH
39869: LD_VAR 0 2
39873: PUSH
39874: LD_INT 1
39876: ARRAY
39877: ST_TO_ADDR
// if result > 1 then
39878: LD_VAR 0 2
39882: PUSH
39883: LD_INT 1
39885: GREATER
39886: IFFALSE 39998
// begin for i = 2 to result do
39888: LD_ADDR_VAR 0 3
39892: PUSH
39893: DOUBLE
39894: LD_INT 2
39896: DEC
39897: ST_TO_ADDR
39898: LD_VAR 0 2
39902: PUSH
39903: FOR_TO
39904: IFFALSE 39996
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39906: LD_ADDR_VAR 0 4
39910: PUSH
39911: LD_VAR 0 2
39915: PUSH
39916: LD_VAR 0 3
39920: ARRAY
39921: PPUSH
39922: LD_INT 3
39924: PPUSH
39925: CALL_OW 259
39929: PUSH
39930: LD_VAR 0 2
39934: PUSH
39935: LD_VAR 0 3
39939: ARRAY
39940: PPUSH
39941: CALL_OW 432
39945: MINUS
39946: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39947: LD_VAR 0 4
39951: PUSH
39952: LD_VAR 0 5
39956: PPUSH
39957: LD_INT 3
39959: PPUSH
39960: CALL_OW 259
39964: PUSH
39965: LD_VAR 0 5
39969: PPUSH
39970: CALL_OW 432
39974: MINUS
39975: GREATEREQUAL
39976: IFFALSE 39994
// mech := result [ i ] ;
39978: LD_ADDR_VAR 0 5
39982: PUSH
39983: LD_VAR 0 2
39987: PUSH
39988: LD_VAR 0 3
39992: ARRAY
39993: ST_TO_ADDR
// end ;
39994: GO 39903
39996: POP
39997: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39998: LD_VAR 0 1
40002: PPUSH
40003: LD_VAR 0 5
40007: PPUSH
40008: CALL_OW 135
// end ;
40012: LD_VAR 0 2
40016: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40017: LD_INT 0
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
40025: PPUSH
40026: PPUSH
40027: PPUSH
40028: PPUSH
40029: PPUSH
40030: PPUSH
40031: PPUSH
// result := [ ] ;
40032: LD_ADDR_VAR 0 7
40036: PUSH
40037: EMPTY
40038: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40039: LD_VAR 0 1
40043: PPUSH
40044: CALL_OW 266
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: IN
40059: NOT
40060: IFFALSE 40064
// exit ;
40062: GO 41698
// if name then
40064: LD_VAR 0 3
40068: IFFALSE 40084
// SetBName ( base_dep , name ) ;
40070: LD_VAR 0 1
40074: PPUSH
40075: LD_VAR 0 3
40079: PPUSH
40080: CALL_OW 500
// base := GetBase ( base_dep ) ;
40084: LD_ADDR_VAR 0 15
40088: PUSH
40089: LD_VAR 0 1
40093: PPUSH
40094: CALL_OW 274
40098: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40099: LD_ADDR_VAR 0 16
40103: PUSH
40104: LD_VAR 0 1
40108: PPUSH
40109: CALL_OW 255
40113: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40114: LD_ADDR_VAR 0 17
40118: PUSH
40119: LD_VAR 0 1
40123: PPUSH
40124: CALL_OW 248
40128: ST_TO_ADDR
// if sources then
40129: LD_VAR 0 5
40133: IFFALSE 40180
// for i = 1 to 3 do
40135: LD_ADDR_VAR 0 8
40139: PUSH
40140: DOUBLE
40141: LD_INT 1
40143: DEC
40144: ST_TO_ADDR
40145: LD_INT 3
40147: PUSH
40148: FOR_TO
40149: IFFALSE 40178
// AddResourceType ( base , i , sources [ i ] ) ;
40151: LD_VAR 0 15
40155: PPUSH
40156: LD_VAR 0 8
40160: PPUSH
40161: LD_VAR 0 5
40165: PUSH
40166: LD_VAR 0 8
40170: ARRAY
40171: PPUSH
40172: CALL_OW 276
40176: GO 40148
40178: POP
40179: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40180: LD_ADDR_VAR 0 18
40184: PUSH
40185: LD_VAR 0 15
40189: PPUSH
40190: LD_VAR 0 2
40194: PPUSH
40195: LD_INT 1
40197: PPUSH
40198: CALL 39441 0 3
40202: ST_TO_ADDR
// InitHc ;
40203: CALL_OW 19
// InitUc ;
40207: CALL_OW 18
// uc_side := side ;
40211: LD_ADDR_OWVAR 20
40215: PUSH
40216: LD_VAR 0 16
40220: ST_TO_ADDR
// uc_nation := nation ;
40221: LD_ADDR_OWVAR 21
40225: PUSH
40226: LD_VAR 0 17
40230: ST_TO_ADDR
// if buildings then
40231: LD_VAR 0 18
40235: IFFALSE 41557
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40237: LD_ADDR_VAR 0 19
40241: PUSH
40242: LD_VAR 0 18
40246: PPUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 30
40252: PUSH
40253: LD_INT 29
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 30
40262: PUSH
40263: LD_INT 30
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: LIST
40274: PPUSH
40275: CALL_OW 72
40279: ST_TO_ADDR
// if tmp then
40280: LD_VAR 0 19
40284: IFFALSE 40332
// for i in tmp do
40286: LD_ADDR_VAR 0 8
40290: PUSH
40291: LD_VAR 0 19
40295: PUSH
40296: FOR_IN
40297: IFFALSE 40330
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40299: LD_VAR 0 8
40303: PPUSH
40304: CALL_OW 250
40308: PPUSH
40309: LD_VAR 0 8
40313: PPUSH
40314: CALL_OW 251
40318: PPUSH
40319: LD_VAR 0 16
40323: PPUSH
40324: CALL_OW 441
40328: GO 40296
40330: POP
40331: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40332: LD_VAR 0 18
40336: PPUSH
40337: LD_INT 2
40339: PUSH
40340: LD_INT 30
40342: PUSH
40343: LD_INT 32
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 30
40352: PUSH
40353: LD_INT 33
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: LIST
40364: PPUSH
40365: CALL_OW 72
40369: IFFALSE 40457
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40371: LD_ADDR_VAR 0 8
40375: PUSH
40376: LD_VAR 0 18
40380: PPUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 30
40386: PUSH
40387: LD_INT 32
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 30
40396: PUSH
40397: LD_INT 33
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: LIST
40408: PPUSH
40409: CALL_OW 72
40413: PUSH
40414: FOR_IN
40415: IFFALSE 40455
// begin if not GetBWeapon ( i ) then
40417: LD_VAR 0 8
40421: PPUSH
40422: CALL_OW 269
40426: NOT
40427: IFFALSE 40453
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40429: LD_VAR 0 8
40433: PPUSH
40434: LD_VAR 0 8
40438: PPUSH
40439: LD_VAR 0 2
40443: PPUSH
40444: CALL 41703 0 2
40448: PPUSH
40449: CALL_OW 431
// end ;
40453: GO 40414
40455: POP
40456: POP
// end ; for i = 1 to personel do
40457: LD_ADDR_VAR 0 8
40461: PUSH
40462: DOUBLE
40463: LD_INT 1
40465: DEC
40466: ST_TO_ADDR
40467: LD_VAR 0 6
40471: PUSH
40472: FOR_TO
40473: IFFALSE 41537
// begin if i > 4 then
40475: LD_VAR 0 8
40479: PUSH
40480: LD_INT 4
40482: GREATER
40483: IFFALSE 40487
// break ;
40485: GO 41537
// case i of 1 :
40487: LD_VAR 0 8
40491: PUSH
40492: LD_INT 1
40494: DOUBLE
40495: EQUAL
40496: IFTRUE 40500
40498: GO 40580
40500: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40501: LD_ADDR_VAR 0 12
40505: PUSH
40506: LD_VAR 0 18
40510: PPUSH
40511: LD_INT 22
40513: PUSH
40514: LD_VAR 0 16
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 58
40525: PUSH
40526: EMPTY
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: LD_INT 30
40534: PUSH
40535: LD_INT 32
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 30
40544: PUSH
40545: LD_INT 4
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 30
40554: PUSH
40555: LD_INT 5
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: PPUSH
40573: CALL_OW 72
40577: ST_TO_ADDR
40578: GO 40802
40580: LD_INT 2
40582: DOUBLE
40583: EQUAL
40584: IFTRUE 40588
40586: GO 40650
40588: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40589: LD_ADDR_VAR 0 12
40593: PUSH
40594: LD_VAR 0 18
40598: PPUSH
40599: LD_INT 22
40601: PUSH
40602: LD_VAR 0 16
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 30
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 30
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PPUSH
40643: CALL_OW 72
40647: ST_TO_ADDR
40648: GO 40802
40650: LD_INT 3
40652: DOUBLE
40653: EQUAL
40654: IFTRUE 40658
40656: GO 40720
40658: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40659: LD_ADDR_VAR 0 12
40663: PUSH
40664: LD_VAR 0 18
40668: PPUSH
40669: LD_INT 22
40671: PUSH
40672: LD_VAR 0 16
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: LD_INT 30
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 30
40696: PUSH
40697: LD_INT 3
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: LIST
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PPUSH
40713: CALL_OW 72
40717: ST_TO_ADDR
40718: GO 40802
40720: LD_INT 4
40722: DOUBLE
40723: EQUAL
40724: IFTRUE 40728
40726: GO 40801
40728: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40729: LD_ADDR_VAR 0 12
40733: PUSH
40734: LD_VAR 0 18
40738: PPUSH
40739: LD_INT 22
40741: PUSH
40742: LD_VAR 0 16
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: LD_INT 30
40756: PUSH
40757: LD_INT 6
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 30
40766: PUSH
40767: LD_INT 7
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 30
40776: PUSH
40777: LD_INT 8
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PPUSH
40794: CALL_OW 72
40798: ST_TO_ADDR
40799: GO 40802
40801: POP
// if i = 1 then
40802: LD_VAR 0 8
40806: PUSH
40807: LD_INT 1
40809: EQUAL
40810: IFFALSE 40921
// begin tmp := [ ] ;
40812: LD_ADDR_VAR 0 19
40816: PUSH
40817: EMPTY
40818: ST_TO_ADDR
// for j in f do
40819: LD_ADDR_VAR 0 9
40823: PUSH
40824: LD_VAR 0 12
40828: PUSH
40829: FOR_IN
40830: IFFALSE 40903
// if GetBType ( j ) = b_bunker then
40832: LD_VAR 0 9
40836: PPUSH
40837: CALL_OW 266
40841: PUSH
40842: LD_INT 32
40844: EQUAL
40845: IFFALSE 40872
// tmp := Insert ( tmp , 1 , j ) else
40847: LD_ADDR_VAR 0 19
40851: PUSH
40852: LD_VAR 0 19
40856: PPUSH
40857: LD_INT 1
40859: PPUSH
40860: LD_VAR 0 9
40864: PPUSH
40865: CALL_OW 2
40869: ST_TO_ADDR
40870: GO 40901
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40872: LD_ADDR_VAR 0 19
40876: PUSH
40877: LD_VAR 0 19
40881: PPUSH
40882: LD_VAR 0 19
40886: PUSH
40887: LD_INT 1
40889: PLUS
40890: PPUSH
40891: LD_VAR 0 9
40895: PPUSH
40896: CALL_OW 2
40900: ST_TO_ADDR
40901: GO 40829
40903: POP
40904: POP
// if tmp then
40905: LD_VAR 0 19
40909: IFFALSE 40921
// f := tmp ;
40911: LD_ADDR_VAR 0 12
40915: PUSH
40916: LD_VAR 0 19
40920: ST_TO_ADDR
// end ; x := personel [ i ] ;
40921: LD_ADDR_VAR 0 13
40925: PUSH
40926: LD_VAR 0 6
40930: PUSH
40931: LD_VAR 0 8
40935: ARRAY
40936: ST_TO_ADDR
// if x = - 1 then
40937: LD_VAR 0 13
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: EQUAL
40946: IFFALSE 41155
// begin for j in f do
40948: LD_ADDR_VAR 0 9
40952: PUSH
40953: LD_VAR 0 12
40957: PUSH
40958: FOR_IN
40959: IFFALSE 41151
// repeat InitHc ;
40961: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40965: LD_VAR 0 9
40969: PPUSH
40970: CALL_OW 266
40974: PUSH
40975: LD_INT 5
40977: EQUAL
40978: IFFALSE 41048
// begin if UnitsInside ( j ) < 3 then
40980: LD_VAR 0 9
40984: PPUSH
40985: CALL_OW 313
40989: PUSH
40990: LD_INT 3
40992: LESS
40993: IFFALSE 41029
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40995: LD_INT 0
40997: PPUSH
40998: LD_INT 5
41000: PUSH
41001: LD_INT 8
41003: PUSH
41004: LD_INT 9
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: PUSH
41012: LD_VAR 0 17
41016: ARRAY
41017: PPUSH
41018: LD_VAR 0 4
41022: PPUSH
41023: CALL_OW 380
41027: GO 41046
// PrepareHuman ( false , i , skill ) ;
41029: LD_INT 0
41031: PPUSH
41032: LD_VAR 0 8
41036: PPUSH
41037: LD_VAR 0 4
41041: PPUSH
41042: CALL_OW 380
// end else
41046: GO 41065
// PrepareHuman ( false , i , skill ) ;
41048: LD_INT 0
41050: PPUSH
41051: LD_VAR 0 8
41055: PPUSH
41056: LD_VAR 0 4
41060: PPUSH
41061: CALL_OW 380
// un := CreateHuman ;
41065: LD_ADDR_VAR 0 14
41069: PUSH
41070: CALL_OW 44
41074: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41075: LD_ADDR_VAR 0 7
41079: PUSH
41080: LD_VAR 0 7
41084: PPUSH
41085: LD_INT 1
41087: PPUSH
41088: LD_VAR 0 14
41092: PPUSH
41093: CALL_OW 2
41097: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41098: LD_VAR 0 14
41102: PPUSH
41103: LD_VAR 0 9
41107: PPUSH
41108: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41112: LD_VAR 0 9
41116: PPUSH
41117: CALL_OW 313
41121: PUSH
41122: LD_INT 6
41124: EQUAL
41125: PUSH
41126: LD_VAR 0 9
41130: PPUSH
41131: CALL_OW 266
41135: PUSH
41136: LD_INT 32
41138: PUSH
41139: LD_INT 31
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: IN
41146: OR
41147: IFFALSE 40961
41149: GO 40958
41151: POP
41152: POP
// end else
41153: GO 41535
// for j = 1 to x do
41155: LD_ADDR_VAR 0 9
41159: PUSH
41160: DOUBLE
41161: LD_INT 1
41163: DEC
41164: ST_TO_ADDR
41165: LD_VAR 0 13
41169: PUSH
41170: FOR_TO
41171: IFFALSE 41533
// begin InitHc ;
41173: CALL_OW 19
// if not f then
41177: LD_VAR 0 12
41181: NOT
41182: IFFALSE 41271
// begin PrepareHuman ( false , i , skill ) ;
41184: LD_INT 0
41186: PPUSH
41187: LD_VAR 0 8
41191: PPUSH
41192: LD_VAR 0 4
41196: PPUSH
41197: CALL_OW 380
// un := CreateHuman ;
41201: LD_ADDR_VAR 0 14
41205: PUSH
41206: CALL_OW 44
41210: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41211: LD_ADDR_VAR 0 7
41215: PUSH
41216: LD_VAR 0 7
41220: PPUSH
41221: LD_INT 1
41223: PPUSH
41224: LD_VAR 0 14
41228: PPUSH
41229: CALL_OW 2
41233: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41234: LD_VAR 0 14
41238: PPUSH
41239: LD_VAR 0 1
41243: PPUSH
41244: CALL_OW 250
41248: PPUSH
41249: LD_VAR 0 1
41253: PPUSH
41254: CALL_OW 251
41258: PPUSH
41259: LD_INT 10
41261: PPUSH
41262: LD_INT 0
41264: PPUSH
41265: CALL_OW 50
// continue ;
41269: GO 41170
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41271: LD_VAR 0 12
41275: PUSH
41276: LD_INT 1
41278: ARRAY
41279: PPUSH
41280: CALL_OW 313
41284: PUSH
41285: LD_VAR 0 12
41289: PUSH
41290: LD_INT 1
41292: ARRAY
41293: PPUSH
41294: CALL_OW 266
41298: PUSH
41299: LD_INT 32
41301: PUSH
41302: LD_INT 31
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: IN
41309: AND
41310: PUSH
41311: LD_VAR 0 12
41315: PUSH
41316: LD_INT 1
41318: ARRAY
41319: PPUSH
41320: CALL_OW 313
41324: PUSH
41325: LD_INT 6
41327: EQUAL
41328: OR
41329: IFFALSE 41349
// f := Delete ( f , 1 ) ;
41331: LD_ADDR_VAR 0 12
41335: PUSH
41336: LD_VAR 0 12
41340: PPUSH
41341: LD_INT 1
41343: PPUSH
41344: CALL_OW 3
41348: ST_TO_ADDR
// if not f then
41349: LD_VAR 0 12
41353: NOT
41354: IFFALSE 41372
// begin x := x + 2 ;
41356: LD_ADDR_VAR 0 13
41360: PUSH
41361: LD_VAR 0 13
41365: PUSH
41366: LD_INT 2
41368: PLUS
41369: ST_TO_ADDR
// continue ;
41370: GO 41170
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41372: LD_VAR 0 12
41376: PUSH
41377: LD_INT 1
41379: ARRAY
41380: PPUSH
41381: CALL_OW 266
41385: PUSH
41386: LD_INT 5
41388: EQUAL
41389: IFFALSE 41463
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41391: LD_VAR 0 12
41395: PUSH
41396: LD_INT 1
41398: ARRAY
41399: PPUSH
41400: CALL_OW 313
41404: PUSH
41405: LD_INT 3
41407: LESS
41408: IFFALSE 41444
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41410: LD_INT 0
41412: PPUSH
41413: LD_INT 5
41415: PUSH
41416: LD_INT 8
41418: PUSH
41419: LD_INT 9
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: LIST
41426: PUSH
41427: LD_VAR 0 17
41431: ARRAY
41432: PPUSH
41433: LD_VAR 0 4
41437: PPUSH
41438: CALL_OW 380
41442: GO 41461
// PrepareHuman ( false , i , skill ) ;
41444: LD_INT 0
41446: PPUSH
41447: LD_VAR 0 8
41451: PPUSH
41452: LD_VAR 0 4
41456: PPUSH
41457: CALL_OW 380
// end else
41461: GO 41480
// PrepareHuman ( false , i , skill ) ;
41463: LD_INT 0
41465: PPUSH
41466: LD_VAR 0 8
41470: PPUSH
41471: LD_VAR 0 4
41475: PPUSH
41476: CALL_OW 380
// un := CreateHuman ;
41480: LD_ADDR_VAR 0 14
41484: PUSH
41485: CALL_OW 44
41489: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41490: LD_ADDR_VAR 0 7
41494: PUSH
41495: LD_VAR 0 7
41499: PPUSH
41500: LD_INT 1
41502: PPUSH
41503: LD_VAR 0 14
41507: PPUSH
41508: CALL_OW 2
41512: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41513: LD_VAR 0 14
41517: PPUSH
41518: LD_VAR 0 12
41522: PUSH
41523: LD_INT 1
41525: ARRAY
41526: PPUSH
41527: CALL_OW 52
// end ;
41531: GO 41170
41533: POP
41534: POP
// end ;
41535: GO 40472
41537: POP
41538: POP
// result := result ^ buildings ;
41539: LD_ADDR_VAR 0 7
41543: PUSH
41544: LD_VAR 0 7
41548: PUSH
41549: LD_VAR 0 18
41553: ADD
41554: ST_TO_ADDR
// end else
41555: GO 41698
// begin for i = 1 to personel do
41557: LD_ADDR_VAR 0 8
41561: PUSH
41562: DOUBLE
41563: LD_INT 1
41565: DEC
41566: ST_TO_ADDR
41567: LD_VAR 0 6
41571: PUSH
41572: FOR_TO
41573: IFFALSE 41696
// begin if i > 4 then
41575: LD_VAR 0 8
41579: PUSH
41580: LD_INT 4
41582: GREATER
41583: IFFALSE 41587
// break ;
41585: GO 41696
// x := personel [ i ] ;
41587: LD_ADDR_VAR 0 13
41591: PUSH
41592: LD_VAR 0 6
41596: PUSH
41597: LD_VAR 0 8
41601: ARRAY
41602: ST_TO_ADDR
// if x = - 1 then
41603: LD_VAR 0 13
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: EQUAL
41612: IFFALSE 41616
// continue ;
41614: GO 41572
// PrepareHuman ( false , i , skill ) ;
41616: LD_INT 0
41618: PPUSH
41619: LD_VAR 0 8
41623: PPUSH
41624: LD_VAR 0 4
41628: PPUSH
41629: CALL_OW 380
// un := CreateHuman ;
41633: LD_ADDR_VAR 0 14
41637: PUSH
41638: CALL_OW 44
41642: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41643: LD_VAR 0 14
41647: PPUSH
41648: LD_VAR 0 1
41652: PPUSH
41653: CALL_OW 250
41657: PPUSH
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 251
41667: PPUSH
41668: LD_INT 10
41670: PPUSH
41671: LD_INT 0
41673: PPUSH
41674: CALL_OW 50
// result := result ^ un ;
41678: LD_ADDR_VAR 0 7
41682: PUSH
41683: LD_VAR 0 7
41687: PUSH
41688: LD_VAR 0 14
41692: ADD
41693: ST_TO_ADDR
// end ;
41694: GO 41572
41696: POP
41697: POP
// end ; end ;
41698: LD_VAR 0 7
41702: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41703: LD_INT 0
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
41714: PPUSH
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
// result := false ;
41721: LD_ADDR_VAR 0 3
41725: PUSH
41726: LD_INT 0
41728: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41729: LD_VAR 0 1
41733: NOT
41734: PUSH
41735: LD_VAR 0 1
41739: PPUSH
41740: CALL_OW 266
41744: PUSH
41745: LD_INT 32
41747: PUSH
41748: LD_INT 33
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: IN
41755: NOT
41756: OR
41757: IFFALSE 41761
// exit ;
41759: GO 42870
// nat := GetNation ( tower ) ;
41761: LD_ADDR_VAR 0 12
41765: PUSH
41766: LD_VAR 0 1
41770: PPUSH
41771: CALL_OW 248
41775: ST_TO_ADDR
// side := GetSide ( tower ) ;
41776: LD_ADDR_VAR 0 16
41780: PUSH
41781: LD_VAR 0 1
41785: PPUSH
41786: CALL_OW 255
41790: ST_TO_ADDR
// x := GetX ( tower ) ;
41791: LD_ADDR_VAR 0 10
41795: PUSH
41796: LD_VAR 0 1
41800: PPUSH
41801: CALL_OW 250
41805: ST_TO_ADDR
// y := GetY ( tower ) ;
41806: LD_ADDR_VAR 0 11
41810: PUSH
41811: LD_VAR 0 1
41815: PPUSH
41816: CALL_OW 251
41820: ST_TO_ADDR
// if not x or not y then
41821: LD_VAR 0 10
41825: NOT
41826: PUSH
41827: LD_VAR 0 11
41831: NOT
41832: OR
41833: IFFALSE 41837
// exit ;
41835: GO 42870
// weapon := 0 ;
41837: LD_ADDR_VAR 0 18
41841: PUSH
41842: LD_INT 0
41844: ST_TO_ADDR
// fac_list := [ ] ;
41845: LD_ADDR_VAR 0 17
41849: PUSH
41850: EMPTY
41851: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41852: LD_ADDR_VAR 0 6
41856: PUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: CALL_OW 274
41866: PPUSH
41867: LD_VAR 0 2
41871: PPUSH
41872: LD_INT 0
41874: PPUSH
41875: CALL 39441 0 3
41879: PPUSH
41880: LD_INT 30
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PPUSH
41890: CALL_OW 72
41894: ST_TO_ADDR
// if not factories then
41895: LD_VAR 0 6
41899: NOT
41900: IFFALSE 41904
// exit ;
41902: GO 42870
// for i in factories do
41904: LD_ADDR_VAR 0 8
41908: PUSH
41909: LD_VAR 0 6
41913: PUSH
41914: FOR_IN
41915: IFFALSE 41940
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41917: LD_ADDR_VAR 0 17
41921: PUSH
41922: LD_VAR 0 17
41926: PUSH
41927: LD_VAR 0 8
41931: PPUSH
41932: CALL_OW 478
41936: UNION
41937: ST_TO_ADDR
41938: GO 41914
41940: POP
41941: POP
// if not fac_list then
41942: LD_VAR 0 17
41946: NOT
41947: IFFALSE 41951
// exit ;
41949: GO 42870
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41951: LD_ADDR_VAR 0 5
41955: PUSH
41956: LD_INT 4
41958: PUSH
41959: LD_INT 5
41961: PUSH
41962: LD_INT 9
41964: PUSH
41965: LD_INT 10
41967: PUSH
41968: LD_INT 6
41970: PUSH
41971: LD_INT 7
41973: PUSH
41974: LD_INT 11
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 27
41988: PUSH
41989: LD_INT 28
41991: PUSH
41992: LD_INT 26
41994: PUSH
41995: LD_INT 30
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 43
42006: PUSH
42007: LD_INT 44
42009: PUSH
42010: LD_INT 46
42012: PUSH
42013: LD_INT 45
42015: PUSH
42016: LD_INT 47
42018: PUSH
42019: LD_INT 49
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: PUSH
42035: LD_VAR 0 12
42039: ARRAY
42040: ST_TO_ADDR
// list := list isect fac_list ;
42041: LD_ADDR_VAR 0 5
42045: PUSH
42046: LD_VAR 0 5
42050: PUSH
42051: LD_VAR 0 17
42055: ISECT
42056: ST_TO_ADDR
// if not list then
42057: LD_VAR 0 5
42061: NOT
42062: IFFALSE 42066
// exit ;
42064: GO 42870
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42066: LD_VAR 0 12
42070: PUSH
42071: LD_INT 3
42073: EQUAL
42074: PUSH
42075: LD_INT 49
42077: PUSH
42078: LD_VAR 0 5
42082: IN
42083: AND
42084: PUSH
42085: LD_INT 31
42087: PPUSH
42088: LD_VAR 0 16
42092: PPUSH
42093: CALL_OW 321
42097: PUSH
42098: LD_INT 2
42100: EQUAL
42101: AND
42102: IFFALSE 42162
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42104: LD_INT 22
42106: PUSH
42107: LD_VAR 0 16
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 35
42118: PUSH
42119: LD_INT 49
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 91
42128: PUSH
42129: LD_VAR 0 1
42133: PUSH
42134: LD_INT 10
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: LIST
42146: PPUSH
42147: CALL_OW 69
42151: NOT
42152: IFFALSE 42162
// weapon := ru_time_lapser ;
42154: LD_ADDR_VAR 0 18
42158: PUSH
42159: LD_INT 49
42161: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42162: LD_VAR 0 12
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: IN
42177: PUSH
42178: LD_INT 11
42180: PUSH
42181: LD_VAR 0 5
42185: IN
42186: PUSH
42187: LD_INT 30
42189: PUSH
42190: LD_VAR 0 5
42194: IN
42195: OR
42196: AND
42197: PUSH
42198: LD_INT 6
42200: PPUSH
42201: LD_VAR 0 16
42205: PPUSH
42206: CALL_OW 321
42210: PUSH
42211: LD_INT 2
42213: EQUAL
42214: AND
42215: IFFALSE 42380
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42217: LD_INT 22
42219: PUSH
42220: LD_VAR 0 16
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: PUSH
42232: LD_INT 35
42234: PUSH
42235: LD_INT 11
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 35
42244: PUSH
42245: LD_INT 30
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 91
42259: PUSH
42260: LD_VAR 0 1
42264: PUSH
42265: LD_INT 18
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: LIST
42277: PPUSH
42278: CALL_OW 69
42282: NOT
42283: PUSH
42284: LD_INT 22
42286: PUSH
42287: LD_VAR 0 16
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: LD_INT 30
42301: PUSH
42302: LD_INT 32
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 30
42311: PUSH
42312: LD_INT 33
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 91
42326: PUSH
42327: LD_VAR 0 1
42331: PUSH
42332: LD_INT 12
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: PPUSH
42348: CALL_OW 69
42352: PUSH
42353: LD_INT 2
42355: GREATER
42356: AND
42357: IFFALSE 42380
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42359: LD_ADDR_VAR 0 18
42363: PUSH
42364: LD_INT 11
42366: PUSH
42367: LD_INT 30
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_VAR 0 12
42378: ARRAY
42379: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42380: LD_VAR 0 18
42384: NOT
42385: PUSH
42386: LD_INT 40
42388: PPUSH
42389: LD_VAR 0 16
42393: PPUSH
42394: CALL_OW 321
42398: PUSH
42399: LD_INT 2
42401: EQUAL
42402: AND
42403: PUSH
42404: LD_INT 7
42406: PUSH
42407: LD_VAR 0 5
42411: IN
42412: PUSH
42413: LD_INT 28
42415: PUSH
42416: LD_VAR 0 5
42420: IN
42421: OR
42422: PUSH
42423: LD_INT 45
42425: PUSH
42426: LD_VAR 0 5
42430: IN
42431: OR
42432: AND
42433: IFFALSE 42687
// begin hex := GetHexInfo ( x , y ) ;
42435: LD_ADDR_VAR 0 4
42439: PUSH
42440: LD_VAR 0 10
42444: PPUSH
42445: LD_VAR 0 11
42449: PPUSH
42450: CALL_OW 546
42454: ST_TO_ADDR
// if hex [ 1 ] then
42455: LD_VAR 0 4
42459: PUSH
42460: LD_INT 1
42462: ARRAY
42463: IFFALSE 42467
// exit ;
42465: GO 42870
// height := hex [ 2 ] ;
42467: LD_ADDR_VAR 0 15
42471: PUSH
42472: LD_VAR 0 4
42476: PUSH
42477: LD_INT 2
42479: ARRAY
42480: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42481: LD_ADDR_VAR 0 14
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: LD_INT 3
42494: PUSH
42495: LD_INT 5
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: ST_TO_ADDR
// for i in tmp do
42504: LD_ADDR_VAR 0 8
42508: PUSH
42509: LD_VAR 0 14
42513: PUSH
42514: FOR_IN
42515: IFFALSE 42685
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42517: LD_ADDR_VAR 0 9
42521: PUSH
42522: LD_VAR 0 10
42526: PPUSH
42527: LD_VAR 0 8
42531: PPUSH
42532: LD_INT 5
42534: PPUSH
42535: CALL_OW 272
42539: PUSH
42540: LD_VAR 0 11
42544: PPUSH
42545: LD_VAR 0 8
42549: PPUSH
42550: LD_INT 5
42552: PPUSH
42553: CALL_OW 273
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42562: LD_VAR 0 9
42566: PUSH
42567: LD_INT 1
42569: ARRAY
42570: PPUSH
42571: LD_VAR 0 9
42575: PUSH
42576: LD_INT 2
42578: ARRAY
42579: PPUSH
42580: CALL_OW 488
42584: IFFALSE 42683
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42586: LD_ADDR_VAR 0 4
42590: PUSH
42591: LD_VAR 0 9
42595: PUSH
42596: LD_INT 1
42598: ARRAY
42599: PPUSH
42600: LD_VAR 0 9
42604: PUSH
42605: LD_INT 2
42607: ARRAY
42608: PPUSH
42609: CALL_OW 546
42613: ST_TO_ADDR
// if hex [ 1 ] then
42614: LD_VAR 0 4
42618: PUSH
42619: LD_INT 1
42621: ARRAY
42622: IFFALSE 42626
// continue ;
42624: GO 42514
// h := hex [ 2 ] ;
42626: LD_ADDR_VAR 0 13
42630: PUSH
42631: LD_VAR 0 4
42635: PUSH
42636: LD_INT 2
42638: ARRAY
42639: ST_TO_ADDR
// if h + 7 < height then
42640: LD_VAR 0 13
42644: PUSH
42645: LD_INT 7
42647: PLUS
42648: PUSH
42649: LD_VAR 0 15
42653: LESS
42654: IFFALSE 42683
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42656: LD_ADDR_VAR 0 18
42660: PUSH
42661: LD_INT 7
42663: PUSH
42664: LD_INT 28
42666: PUSH
42667: LD_INT 45
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: PUSH
42675: LD_VAR 0 12
42679: ARRAY
42680: ST_TO_ADDR
// break ;
42681: GO 42685
// end ; end ; end ;
42683: GO 42514
42685: POP
42686: POP
// end ; if not weapon then
42687: LD_VAR 0 18
42691: NOT
42692: IFFALSE 42752
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42694: LD_ADDR_VAR 0 5
42698: PUSH
42699: LD_VAR 0 5
42703: PUSH
42704: LD_INT 11
42706: PUSH
42707: LD_INT 30
42709: PUSH
42710: LD_INT 49
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: LIST
42717: DIFF
42718: ST_TO_ADDR
// if not list then
42719: LD_VAR 0 5
42723: NOT
42724: IFFALSE 42728
// exit ;
42726: GO 42870
// weapon := list [ rand ( 1 , list ) ] ;
42728: LD_ADDR_VAR 0 18
42732: PUSH
42733: LD_VAR 0 5
42737: PUSH
42738: LD_INT 1
42740: PPUSH
42741: LD_VAR 0 5
42745: PPUSH
42746: CALL_OW 12
42750: ARRAY
42751: ST_TO_ADDR
// end ; if weapon then
42752: LD_VAR 0 18
42756: IFFALSE 42870
// begin tmp := CostOfWeapon ( weapon ) ;
42758: LD_ADDR_VAR 0 14
42762: PUSH
42763: LD_VAR 0 18
42767: PPUSH
42768: CALL_OW 451
42772: ST_TO_ADDR
// j := GetBase ( tower ) ;
42773: LD_ADDR_VAR 0 9
42777: PUSH
42778: LD_VAR 0 1
42782: PPUSH
42783: CALL_OW 274
42787: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42788: LD_VAR 0 9
42792: PPUSH
42793: LD_INT 1
42795: PPUSH
42796: CALL_OW 275
42800: PUSH
42801: LD_VAR 0 14
42805: PUSH
42806: LD_INT 1
42808: ARRAY
42809: GREATEREQUAL
42810: PUSH
42811: LD_VAR 0 9
42815: PPUSH
42816: LD_INT 2
42818: PPUSH
42819: CALL_OW 275
42823: PUSH
42824: LD_VAR 0 14
42828: PUSH
42829: LD_INT 2
42831: ARRAY
42832: GREATEREQUAL
42833: AND
42834: PUSH
42835: LD_VAR 0 9
42839: PPUSH
42840: LD_INT 3
42842: PPUSH
42843: CALL_OW 275
42847: PUSH
42848: LD_VAR 0 14
42852: PUSH
42853: LD_INT 3
42855: ARRAY
42856: GREATEREQUAL
42857: AND
42858: IFFALSE 42870
// result := weapon ;
42860: LD_ADDR_VAR 0 3
42864: PUSH
42865: LD_VAR 0 18
42869: ST_TO_ADDR
// end ; end ;
42870: LD_VAR 0 3
42874: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42875: LD_INT 0
42877: PPUSH
42878: PPUSH
// result := true ;
42879: LD_ADDR_VAR 0 3
42883: PUSH
42884: LD_INT 1
42886: ST_TO_ADDR
// if array1 = array2 then
42887: LD_VAR 0 1
42891: PUSH
42892: LD_VAR 0 2
42896: EQUAL
42897: IFFALSE 42957
// begin for i = 1 to array1 do
42899: LD_ADDR_VAR 0 4
42903: PUSH
42904: DOUBLE
42905: LD_INT 1
42907: DEC
42908: ST_TO_ADDR
42909: LD_VAR 0 1
42913: PUSH
42914: FOR_TO
42915: IFFALSE 42953
// if array1 [ i ] <> array2 [ i ] then
42917: LD_VAR 0 1
42921: PUSH
42922: LD_VAR 0 4
42926: ARRAY
42927: PUSH
42928: LD_VAR 0 2
42932: PUSH
42933: LD_VAR 0 4
42937: ARRAY
42938: NONEQUAL
42939: IFFALSE 42951
// begin result := false ;
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_INT 0
42948: ST_TO_ADDR
// break ;
42949: GO 42953
// end ;
42951: GO 42914
42953: POP
42954: POP
// end else
42955: GO 42965
// result := false ;
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_INT 0
42964: ST_TO_ADDR
// end ;
42965: LD_VAR 0 3
42969: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42970: LD_INT 0
42972: PPUSH
42973: PPUSH
// if not array1 or not array2 then
42974: LD_VAR 0 1
42978: NOT
42979: PUSH
42980: LD_VAR 0 2
42984: NOT
42985: OR
42986: IFFALSE 42990
// exit ;
42988: GO 43054
// result := true ;
42990: LD_ADDR_VAR 0 3
42994: PUSH
42995: LD_INT 1
42997: ST_TO_ADDR
// for i = 1 to array1 do
42998: LD_ADDR_VAR 0 4
43002: PUSH
43003: DOUBLE
43004: LD_INT 1
43006: DEC
43007: ST_TO_ADDR
43008: LD_VAR 0 1
43012: PUSH
43013: FOR_TO
43014: IFFALSE 43052
// if array1 [ i ] <> array2 [ i ] then
43016: LD_VAR 0 1
43020: PUSH
43021: LD_VAR 0 4
43025: ARRAY
43026: PUSH
43027: LD_VAR 0 2
43031: PUSH
43032: LD_VAR 0 4
43036: ARRAY
43037: NONEQUAL
43038: IFFALSE 43050
// begin result := false ;
43040: LD_ADDR_VAR 0 3
43044: PUSH
43045: LD_INT 0
43047: ST_TO_ADDR
// break ;
43048: GO 43052
// end ;
43050: GO 43013
43052: POP
43053: POP
// end ;
43054: LD_VAR 0 3
43058: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43059: LD_INT 0
43061: PPUSH
43062: PPUSH
43063: PPUSH
// pom := GetBase ( fac ) ;
43064: LD_ADDR_VAR 0 5
43068: PUSH
43069: LD_VAR 0 1
43073: PPUSH
43074: CALL_OW 274
43078: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43079: LD_ADDR_VAR 0 4
43083: PUSH
43084: LD_VAR 0 2
43088: PUSH
43089: LD_INT 1
43091: ARRAY
43092: PPUSH
43093: LD_VAR 0 2
43097: PUSH
43098: LD_INT 2
43100: ARRAY
43101: PPUSH
43102: LD_VAR 0 2
43106: PUSH
43107: LD_INT 3
43109: ARRAY
43110: PPUSH
43111: LD_VAR 0 2
43115: PUSH
43116: LD_INT 4
43118: ARRAY
43119: PPUSH
43120: CALL_OW 449
43124: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_VAR 0 5
43134: PPUSH
43135: LD_INT 1
43137: PPUSH
43138: CALL_OW 275
43142: PUSH
43143: LD_VAR 0 4
43147: PUSH
43148: LD_INT 1
43150: ARRAY
43151: GREATEREQUAL
43152: PUSH
43153: LD_VAR 0 5
43157: PPUSH
43158: LD_INT 2
43160: PPUSH
43161: CALL_OW 275
43165: PUSH
43166: LD_VAR 0 4
43170: PUSH
43171: LD_INT 2
43173: ARRAY
43174: GREATEREQUAL
43175: AND
43176: PUSH
43177: LD_VAR 0 5
43181: PPUSH
43182: LD_INT 3
43184: PPUSH
43185: CALL_OW 275
43189: PUSH
43190: LD_VAR 0 4
43194: PUSH
43195: LD_INT 3
43197: ARRAY
43198: GREATEREQUAL
43199: AND
43200: ST_TO_ADDR
// end ;
43201: LD_VAR 0 3
43205: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43206: LD_INT 0
43208: PPUSH
43209: PPUSH
43210: PPUSH
43211: PPUSH
// pom := GetBase ( building ) ;
43212: LD_ADDR_VAR 0 3
43216: PUSH
43217: LD_VAR 0 1
43221: PPUSH
43222: CALL_OW 274
43226: ST_TO_ADDR
// if not pom then
43227: LD_VAR 0 3
43231: NOT
43232: IFFALSE 43236
// exit ;
43234: GO 43406
// btype := GetBType ( building ) ;
43236: LD_ADDR_VAR 0 5
43240: PUSH
43241: LD_VAR 0 1
43245: PPUSH
43246: CALL_OW 266
43250: ST_TO_ADDR
// if btype = b_armoury then
43251: LD_VAR 0 5
43255: PUSH
43256: LD_INT 4
43258: EQUAL
43259: IFFALSE 43269
// btype := b_barracks ;
43261: LD_ADDR_VAR 0 5
43265: PUSH
43266: LD_INT 5
43268: ST_TO_ADDR
// if btype = b_depot then
43269: LD_VAR 0 5
43273: PUSH
43274: LD_INT 0
43276: EQUAL
43277: IFFALSE 43287
// btype := b_warehouse ;
43279: LD_ADDR_VAR 0 5
43283: PUSH
43284: LD_INT 1
43286: ST_TO_ADDR
// if btype = b_workshop then
43287: LD_VAR 0 5
43291: PUSH
43292: LD_INT 2
43294: EQUAL
43295: IFFALSE 43305
// btype := b_factory ;
43297: LD_ADDR_VAR 0 5
43301: PUSH
43302: LD_INT 3
43304: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43305: LD_ADDR_VAR 0 4
43309: PUSH
43310: LD_VAR 0 5
43314: PPUSH
43315: LD_VAR 0 1
43319: PPUSH
43320: CALL_OW 248
43324: PPUSH
43325: CALL_OW 450
43329: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43330: LD_ADDR_VAR 0 2
43334: PUSH
43335: LD_VAR 0 3
43339: PPUSH
43340: LD_INT 1
43342: PPUSH
43343: CALL_OW 275
43347: PUSH
43348: LD_VAR 0 4
43352: PUSH
43353: LD_INT 1
43355: ARRAY
43356: GREATEREQUAL
43357: PUSH
43358: LD_VAR 0 3
43362: PPUSH
43363: LD_INT 2
43365: PPUSH
43366: CALL_OW 275
43370: PUSH
43371: LD_VAR 0 4
43375: PUSH
43376: LD_INT 2
43378: ARRAY
43379: GREATEREQUAL
43380: AND
43381: PUSH
43382: LD_VAR 0 3
43386: PPUSH
43387: LD_INT 3
43389: PPUSH
43390: CALL_OW 275
43394: PUSH
43395: LD_VAR 0 4
43399: PUSH
43400: LD_INT 3
43402: ARRAY
43403: GREATEREQUAL
43404: AND
43405: ST_TO_ADDR
// end ;
43406: LD_VAR 0 2
43410: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43411: LD_INT 0
43413: PPUSH
43414: PPUSH
43415: PPUSH
// pom := GetBase ( building ) ;
43416: LD_ADDR_VAR 0 4
43420: PUSH
43421: LD_VAR 0 1
43425: PPUSH
43426: CALL_OW 274
43430: ST_TO_ADDR
// if not pom then
43431: LD_VAR 0 4
43435: NOT
43436: IFFALSE 43440
// exit ;
43438: GO 43541
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43440: LD_ADDR_VAR 0 5
43444: PUSH
43445: LD_VAR 0 2
43449: PPUSH
43450: LD_VAR 0 1
43454: PPUSH
43455: CALL_OW 248
43459: PPUSH
43460: CALL_OW 450
43464: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43465: LD_ADDR_VAR 0 3
43469: PUSH
43470: LD_VAR 0 4
43474: PPUSH
43475: LD_INT 1
43477: PPUSH
43478: CALL_OW 275
43482: PUSH
43483: LD_VAR 0 5
43487: PUSH
43488: LD_INT 1
43490: ARRAY
43491: GREATEREQUAL
43492: PUSH
43493: LD_VAR 0 4
43497: PPUSH
43498: LD_INT 2
43500: PPUSH
43501: CALL_OW 275
43505: PUSH
43506: LD_VAR 0 5
43510: PUSH
43511: LD_INT 2
43513: ARRAY
43514: GREATEREQUAL
43515: AND
43516: PUSH
43517: LD_VAR 0 4
43521: PPUSH
43522: LD_INT 3
43524: PPUSH
43525: CALL_OW 275
43529: PUSH
43530: LD_VAR 0 5
43534: PUSH
43535: LD_INT 3
43537: ARRAY
43538: GREATEREQUAL
43539: AND
43540: ST_TO_ADDR
// end ;
43541: LD_VAR 0 3
43545: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43546: LD_INT 0
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
43556: PPUSH
43557: PPUSH
43558: PPUSH
// result := false ;
43559: LD_ADDR_VAR 0 8
43563: PUSH
43564: LD_INT 0
43566: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43567: LD_VAR 0 5
43571: NOT
43572: PUSH
43573: LD_VAR 0 1
43577: NOT
43578: OR
43579: PUSH
43580: LD_VAR 0 2
43584: NOT
43585: OR
43586: PUSH
43587: LD_VAR 0 3
43591: NOT
43592: OR
43593: IFFALSE 43597
// exit ;
43595: GO 44411
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43597: LD_ADDR_VAR 0 14
43601: PUSH
43602: LD_VAR 0 1
43606: PPUSH
43607: LD_VAR 0 2
43611: PPUSH
43612: LD_VAR 0 3
43616: PPUSH
43617: LD_VAR 0 4
43621: PPUSH
43622: LD_VAR 0 5
43626: PUSH
43627: LD_INT 1
43629: ARRAY
43630: PPUSH
43631: CALL_OW 248
43635: PPUSH
43636: LD_INT 0
43638: PPUSH
43639: CALL 45648 0 6
43643: ST_TO_ADDR
// if not hexes then
43644: LD_VAR 0 14
43648: NOT
43649: IFFALSE 43653
// exit ;
43651: GO 44411
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43653: LD_ADDR_VAR 0 17
43657: PUSH
43658: LD_VAR 0 5
43662: PPUSH
43663: LD_INT 22
43665: PUSH
43666: LD_VAR 0 13
43670: PPUSH
43671: CALL_OW 255
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 30
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 30
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: LIST
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PPUSH
43712: CALL_OW 72
43716: ST_TO_ADDR
// for i = 1 to hexes do
43717: LD_ADDR_VAR 0 9
43721: PUSH
43722: DOUBLE
43723: LD_INT 1
43725: DEC
43726: ST_TO_ADDR
43727: LD_VAR 0 14
43731: PUSH
43732: FOR_TO
43733: IFFALSE 44409
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43735: LD_ADDR_VAR 0 13
43739: PUSH
43740: LD_VAR 0 14
43744: PUSH
43745: LD_VAR 0 9
43749: ARRAY
43750: PUSH
43751: LD_INT 1
43753: ARRAY
43754: PPUSH
43755: LD_VAR 0 14
43759: PUSH
43760: LD_VAR 0 9
43764: ARRAY
43765: PUSH
43766: LD_INT 2
43768: ARRAY
43769: PPUSH
43770: CALL_OW 428
43774: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43775: LD_VAR 0 14
43779: PUSH
43780: LD_VAR 0 9
43784: ARRAY
43785: PUSH
43786: LD_INT 1
43788: ARRAY
43789: PPUSH
43790: LD_VAR 0 14
43794: PUSH
43795: LD_VAR 0 9
43799: ARRAY
43800: PUSH
43801: LD_INT 2
43803: ARRAY
43804: PPUSH
43805: CALL_OW 351
43809: PUSH
43810: LD_VAR 0 14
43814: PUSH
43815: LD_VAR 0 9
43819: ARRAY
43820: PUSH
43821: LD_INT 1
43823: ARRAY
43824: PPUSH
43825: LD_VAR 0 14
43829: PUSH
43830: LD_VAR 0 9
43834: ARRAY
43835: PUSH
43836: LD_INT 2
43838: ARRAY
43839: PPUSH
43840: CALL_OW 488
43844: NOT
43845: OR
43846: PUSH
43847: LD_VAR 0 13
43851: PPUSH
43852: CALL_OW 247
43856: PUSH
43857: LD_INT 3
43859: EQUAL
43860: OR
43861: IFFALSE 43867
// exit ;
43863: POP
43864: POP
43865: GO 44411
// if not tmp then
43867: LD_VAR 0 13
43871: NOT
43872: IFFALSE 43876
// continue ;
43874: GO 43732
// result := true ;
43876: LD_ADDR_VAR 0 8
43880: PUSH
43881: LD_INT 1
43883: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43884: LD_VAR 0 6
43888: PUSH
43889: LD_VAR 0 13
43893: PPUSH
43894: CALL_OW 247
43898: PUSH
43899: LD_INT 2
43901: EQUAL
43902: AND
43903: PUSH
43904: LD_VAR 0 13
43908: PPUSH
43909: CALL_OW 263
43913: PUSH
43914: LD_INT 1
43916: EQUAL
43917: AND
43918: IFFALSE 44082
// begin if IsDrivenBy ( tmp ) then
43920: LD_VAR 0 13
43924: PPUSH
43925: CALL_OW 311
43929: IFFALSE 43933
// continue ;
43931: GO 43732
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43933: LD_VAR 0 6
43937: PPUSH
43938: LD_INT 3
43940: PUSH
43941: LD_INT 60
43943: PUSH
43944: EMPTY
43945: LIST
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 3
43953: PUSH
43954: LD_INT 55
43956: PUSH
43957: EMPTY
43958: LIST
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PPUSH
43968: CALL_OW 72
43972: IFFALSE 44080
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43974: LD_ADDR_VAR 0 18
43978: PUSH
43979: LD_VAR 0 6
43983: PPUSH
43984: LD_INT 3
43986: PUSH
43987: LD_INT 60
43989: PUSH
43990: EMPTY
43991: LIST
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 3
43999: PUSH
44000: LD_INT 55
44002: PUSH
44003: EMPTY
44004: LIST
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PPUSH
44014: CALL_OW 72
44018: PUSH
44019: LD_INT 1
44021: ARRAY
44022: ST_TO_ADDR
// if IsInUnit ( driver ) then
44023: LD_VAR 0 18
44027: PPUSH
44028: CALL_OW 310
44032: IFFALSE 44043
// ComExit ( driver ) ;
44034: LD_VAR 0 18
44038: PPUSH
44039: CALL 69353 0 1
// AddComEnterUnit ( driver , tmp ) ;
44043: LD_VAR 0 18
44047: PPUSH
44048: LD_VAR 0 13
44052: PPUSH
44053: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44057: LD_VAR 0 18
44061: PPUSH
44062: LD_VAR 0 7
44066: PPUSH
44067: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44071: LD_VAR 0 18
44075: PPUSH
44076: CALL_OW 181
// end ; continue ;
44080: GO 43732
// end ; if not cleaners or not tmp in cleaners then
44082: LD_VAR 0 6
44086: NOT
44087: PUSH
44088: LD_VAR 0 13
44092: PUSH
44093: LD_VAR 0 6
44097: IN
44098: NOT
44099: OR
44100: IFFALSE 44407
// begin if dep then
44102: LD_VAR 0 17
44106: IFFALSE 44242
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44108: LD_ADDR_VAR 0 16
44112: PUSH
44113: LD_VAR 0 17
44117: PUSH
44118: LD_INT 1
44120: ARRAY
44121: PPUSH
44122: CALL_OW 250
44126: PPUSH
44127: LD_VAR 0 17
44131: PUSH
44132: LD_INT 1
44134: ARRAY
44135: PPUSH
44136: CALL_OW 254
44140: PPUSH
44141: LD_INT 5
44143: PPUSH
44144: CALL_OW 272
44148: PUSH
44149: LD_VAR 0 17
44153: PUSH
44154: LD_INT 1
44156: ARRAY
44157: PPUSH
44158: CALL_OW 251
44162: PPUSH
44163: LD_VAR 0 17
44167: PUSH
44168: LD_INT 1
44170: ARRAY
44171: PPUSH
44172: CALL_OW 254
44176: PPUSH
44177: LD_INT 5
44179: PPUSH
44180: CALL_OW 273
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44189: LD_VAR 0 16
44193: PUSH
44194: LD_INT 1
44196: ARRAY
44197: PPUSH
44198: LD_VAR 0 16
44202: PUSH
44203: LD_INT 2
44205: ARRAY
44206: PPUSH
44207: CALL_OW 488
44211: IFFALSE 44242
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44213: LD_VAR 0 13
44217: PPUSH
44218: LD_VAR 0 16
44222: PUSH
44223: LD_INT 1
44225: ARRAY
44226: PPUSH
44227: LD_VAR 0 16
44231: PUSH
44232: LD_INT 2
44234: ARRAY
44235: PPUSH
44236: CALL_OW 111
// continue ;
44240: GO 43732
// end ; end ; r := GetDir ( tmp ) ;
44242: LD_ADDR_VAR 0 15
44246: PUSH
44247: LD_VAR 0 13
44251: PPUSH
44252: CALL_OW 254
44256: ST_TO_ADDR
// if r = 5 then
44257: LD_VAR 0 15
44261: PUSH
44262: LD_INT 5
44264: EQUAL
44265: IFFALSE 44275
// r := 0 ;
44267: LD_ADDR_VAR 0 15
44271: PUSH
44272: LD_INT 0
44274: ST_TO_ADDR
// for j = r to 5 do
44275: LD_ADDR_VAR 0 10
44279: PUSH
44280: DOUBLE
44281: LD_VAR 0 15
44285: DEC
44286: ST_TO_ADDR
44287: LD_INT 5
44289: PUSH
44290: FOR_TO
44291: IFFALSE 44405
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44293: LD_ADDR_VAR 0 11
44297: PUSH
44298: LD_VAR 0 13
44302: PPUSH
44303: CALL_OW 250
44307: PPUSH
44308: LD_VAR 0 10
44312: PPUSH
44313: LD_INT 2
44315: PPUSH
44316: CALL_OW 272
44320: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44321: LD_ADDR_VAR 0 12
44325: PUSH
44326: LD_VAR 0 13
44330: PPUSH
44331: CALL_OW 251
44335: PPUSH
44336: LD_VAR 0 10
44340: PPUSH
44341: LD_INT 2
44343: PPUSH
44344: CALL_OW 273
44348: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44349: LD_VAR 0 11
44353: PPUSH
44354: LD_VAR 0 12
44358: PPUSH
44359: CALL_OW 488
44363: PUSH
44364: LD_VAR 0 11
44368: PPUSH
44369: LD_VAR 0 12
44373: PPUSH
44374: CALL_OW 428
44378: NOT
44379: AND
44380: IFFALSE 44403
// begin ComMoveXY ( tmp , _x , _y ) ;
44382: LD_VAR 0 13
44386: PPUSH
44387: LD_VAR 0 11
44391: PPUSH
44392: LD_VAR 0 12
44396: PPUSH
44397: CALL_OW 111
// break ;
44401: GO 44405
// end ; end ;
44403: GO 44290
44405: POP
44406: POP
// end ; end ;
44407: GO 43732
44409: POP
44410: POP
// end ;
44411: LD_VAR 0 8
44415: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44416: LD_INT 0
44418: PPUSH
// result := true ;
44419: LD_ADDR_VAR 0 3
44423: PUSH
44424: LD_INT 1
44426: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44427: LD_VAR 0 2
44431: PUSH
44432: LD_INT 24
44434: DOUBLE
44435: EQUAL
44436: IFTRUE 44446
44438: LD_INT 33
44440: DOUBLE
44441: EQUAL
44442: IFTRUE 44446
44444: GO 44471
44446: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44447: LD_ADDR_VAR 0 3
44451: PUSH
44452: LD_INT 32
44454: PPUSH
44455: LD_VAR 0 1
44459: PPUSH
44460: CALL_OW 321
44464: PUSH
44465: LD_INT 2
44467: EQUAL
44468: ST_TO_ADDR
44469: GO 44791
44471: LD_INT 20
44473: DOUBLE
44474: EQUAL
44475: IFTRUE 44479
44477: GO 44504
44479: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44480: LD_ADDR_VAR 0 3
44484: PUSH
44485: LD_INT 6
44487: PPUSH
44488: LD_VAR 0 1
44492: PPUSH
44493: CALL_OW 321
44497: PUSH
44498: LD_INT 2
44500: EQUAL
44501: ST_TO_ADDR
44502: GO 44791
44504: LD_INT 22
44506: DOUBLE
44507: EQUAL
44508: IFTRUE 44518
44510: LD_INT 36
44512: DOUBLE
44513: EQUAL
44514: IFTRUE 44518
44516: GO 44543
44518: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44519: LD_ADDR_VAR 0 3
44523: PUSH
44524: LD_INT 15
44526: PPUSH
44527: LD_VAR 0 1
44531: PPUSH
44532: CALL_OW 321
44536: PUSH
44537: LD_INT 2
44539: EQUAL
44540: ST_TO_ADDR
44541: GO 44791
44543: LD_INT 30
44545: DOUBLE
44546: EQUAL
44547: IFTRUE 44551
44549: GO 44576
44551: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44552: LD_ADDR_VAR 0 3
44556: PUSH
44557: LD_INT 20
44559: PPUSH
44560: LD_VAR 0 1
44564: PPUSH
44565: CALL_OW 321
44569: PUSH
44570: LD_INT 2
44572: EQUAL
44573: ST_TO_ADDR
44574: GO 44791
44576: LD_INT 28
44578: DOUBLE
44579: EQUAL
44580: IFTRUE 44590
44582: LD_INT 21
44584: DOUBLE
44585: EQUAL
44586: IFTRUE 44590
44588: GO 44615
44590: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44591: LD_ADDR_VAR 0 3
44595: PUSH
44596: LD_INT 21
44598: PPUSH
44599: LD_VAR 0 1
44603: PPUSH
44604: CALL_OW 321
44608: PUSH
44609: LD_INT 2
44611: EQUAL
44612: ST_TO_ADDR
44613: GO 44791
44615: LD_INT 16
44617: DOUBLE
44618: EQUAL
44619: IFTRUE 44623
44621: GO 44650
44623: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44624: LD_ADDR_VAR 0 3
44628: PUSH
44629: LD_EXP 34
44633: PPUSH
44634: LD_VAR 0 1
44638: PPUSH
44639: CALL_OW 321
44643: PUSH
44644: LD_INT 2
44646: EQUAL
44647: ST_TO_ADDR
44648: GO 44791
44650: LD_INT 19
44652: DOUBLE
44653: EQUAL
44654: IFTRUE 44664
44656: LD_INT 23
44658: DOUBLE
44659: EQUAL
44660: IFTRUE 44664
44662: GO 44691
44664: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44665: LD_ADDR_VAR 0 3
44669: PUSH
44670: LD_EXP 33
44674: PPUSH
44675: LD_VAR 0 1
44679: PPUSH
44680: CALL_OW 321
44684: PUSH
44685: LD_INT 2
44687: EQUAL
44688: ST_TO_ADDR
44689: GO 44791
44691: LD_INT 17
44693: DOUBLE
44694: EQUAL
44695: IFTRUE 44699
44697: GO 44724
44699: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44700: LD_ADDR_VAR 0 3
44704: PUSH
44705: LD_INT 39
44707: PPUSH
44708: LD_VAR 0 1
44712: PPUSH
44713: CALL_OW 321
44717: PUSH
44718: LD_INT 2
44720: EQUAL
44721: ST_TO_ADDR
44722: GO 44791
44724: LD_INT 18
44726: DOUBLE
44727: EQUAL
44728: IFTRUE 44732
44730: GO 44757
44732: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44733: LD_ADDR_VAR 0 3
44737: PUSH
44738: LD_INT 40
44740: PPUSH
44741: LD_VAR 0 1
44745: PPUSH
44746: CALL_OW 321
44750: PUSH
44751: LD_INT 2
44753: EQUAL
44754: ST_TO_ADDR
44755: GO 44791
44757: LD_INT 27
44759: DOUBLE
44760: EQUAL
44761: IFTRUE 44765
44763: GO 44790
44765: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44766: LD_ADDR_VAR 0 3
44770: PUSH
44771: LD_INT 35
44773: PPUSH
44774: LD_VAR 0 1
44778: PPUSH
44779: CALL_OW 321
44783: PUSH
44784: LD_INT 2
44786: EQUAL
44787: ST_TO_ADDR
44788: GO 44791
44790: POP
// end ;
44791: LD_VAR 0 3
44795: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44796: LD_INT 0
44798: PPUSH
44799: PPUSH
44800: PPUSH
44801: PPUSH
44802: PPUSH
44803: PPUSH
44804: PPUSH
44805: PPUSH
44806: PPUSH
44807: PPUSH
44808: PPUSH
// result := false ;
44809: LD_ADDR_VAR 0 6
44813: PUSH
44814: LD_INT 0
44816: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44817: LD_VAR 0 1
44821: NOT
44822: PUSH
44823: LD_VAR 0 1
44827: PPUSH
44828: CALL_OW 266
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: IN
44843: NOT
44844: OR
44845: PUSH
44846: LD_VAR 0 2
44850: NOT
44851: OR
44852: PUSH
44853: LD_VAR 0 5
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: LD_INT 4
44872: PUSH
44873: LD_INT 5
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: IN
44884: NOT
44885: OR
44886: PUSH
44887: LD_VAR 0 3
44891: PPUSH
44892: LD_VAR 0 4
44896: PPUSH
44897: CALL_OW 488
44901: NOT
44902: OR
44903: IFFALSE 44907
// exit ;
44905: GO 45643
// side := GetSide ( depot ) ;
44907: LD_ADDR_VAR 0 9
44911: PUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: CALL_OW 255
44921: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44922: LD_VAR 0 9
44926: PPUSH
44927: LD_VAR 0 2
44931: PPUSH
44932: CALL 44416 0 2
44936: NOT
44937: IFFALSE 44941
// exit ;
44939: GO 45643
// pom := GetBase ( depot ) ;
44941: LD_ADDR_VAR 0 10
44945: PUSH
44946: LD_VAR 0 1
44950: PPUSH
44951: CALL_OW 274
44955: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44956: LD_ADDR_VAR 0 11
44960: PUSH
44961: LD_VAR 0 2
44965: PPUSH
44966: LD_VAR 0 1
44970: PPUSH
44971: CALL_OW 248
44975: PPUSH
44976: CALL_OW 450
44980: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44981: LD_VAR 0 10
44985: PPUSH
44986: LD_INT 1
44988: PPUSH
44989: CALL_OW 275
44993: PUSH
44994: LD_VAR 0 11
44998: PUSH
44999: LD_INT 1
45001: ARRAY
45002: GREATEREQUAL
45003: PUSH
45004: LD_VAR 0 10
45008: PPUSH
45009: LD_INT 2
45011: PPUSH
45012: CALL_OW 275
45016: PUSH
45017: LD_VAR 0 11
45021: PUSH
45022: LD_INT 2
45024: ARRAY
45025: GREATEREQUAL
45026: AND
45027: PUSH
45028: LD_VAR 0 10
45032: PPUSH
45033: LD_INT 3
45035: PPUSH
45036: CALL_OW 275
45040: PUSH
45041: LD_VAR 0 11
45045: PUSH
45046: LD_INT 3
45048: ARRAY
45049: GREATEREQUAL
45050: AND
45051: NOT
45052: IFFALSE 45056
// exit ;
45054: GO 45643
// if GetBType ( depot ) = b_depot then
45056: LD_VAR 0 1
45060: PPUSH
45061: CALL_OW 266
45065: PUSH
45066: LD_INT 0
45068: EQUAL
45069: IFFALSE 45081
// dist := 28 else
45071: LD_ADDR_VAR 0 14
45075: PUSH
45076: LD_INT 28
45078: ST_TO_ADDR
45079: GO 45089
// dist := 36 ;
45081: LD_ADDR_VAR 0 14
45085: PUSH
45086: LD_INT 36
45088: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45089: LD_VAR 0 1
45093: PPUSH
45094: LD_VAR 0 3
45098: PPUSH
45099: LD_VAR 0 4
45103: PPUSH
45104: CALL_OW 297
45108: PUSH
45109: LD_VAR 0 14
45113: GREATER
45114: IFFALSE 45118
// exit ;
45116: GO 45643
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45118: LD_ADDR_VAR 0 12
45122: PUSH
45123: LD_VAR 0 2
45127: PPUSH
45128: LD_VAR 0 3
45132: PPUSH
45133: LD_VAR 0 4
45137: PPUSH
45138: LD_VAR 0 5
45142: PPUSH
45143: LD_VAR 0 1
45147: PPUSH
45148: CALL_OW 248
45152: PPUSH
45153: LD_INT 0
45155: PPUSH
45156: CALL 45648 0 6
45160: ST_TO_ADDR
// if not hexes then
45161: LD_VAR 0 12
45165: NOT
45166: IFFALSE 45170
// exit ;
45168: GO 45643
// hex := GetHexInfo ( x , y ) ;
45170: LD_ADDR_VAR 0 15
45174: PUSH
45175: LD_VAR 0 3
45179: PPUSH
45180: LD_VAR 0 4
45184: PPUSH
45185: CALL_OW 546
45189: ST_TO_ADDR
// if hex [ 1 ] then
45190: LD_VAR 0 15
45194: PUSH
45195: LD_INT 1
45197: ARRAY
45198: IFFALSE 45202
// exit ;
45200: GO 45643
// height := hex [ 2 ] ;
45202: LD_ADDR_VAR 0 13
45206: PUSH
45207: LD_VAR 0 15
45211: PUSH
45212: LD_INT 2
45214: ARRAY
45215: ST_TO_ADDR
// for i = 1 to hexes do
45216: LD_ADDR_VAR 0 7
45220: PUSH
45221: DOUBLE
45222: LD_INT 1
45224: DEC
45225: ST_TO_ADDR
45226: LD_VAR 0 12
45230: PUSH
45231: FOR_TO
45232: IFFALSE 45562
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45234: LD_VAR 0 12
45238: PUSH
45239: LD_VAR 0 7
45243: ARRAY
45244: PUSH
45245: LD_INT 1
45247: ARRAY
45248: PPUSH
45249: LD_VAR 0 12
45253: PUSH
45254: LD_VAR 0 7
45258: ARRAY
45259: PUSH
45260: LD_INT 2
45262: ARRAY
45263: PPUSH
45264: CALL_OW 488
45268: NOT
45269: PUSH
45270: LD_VAR 0 12
45274: PUSH
45275: LD_VAR 0 7
45279: ARRAY
45280: PUSH
45281: LD_INT 1
45283: ARRAY
45284: PPUSH
45285: LD_VAR 0 12
45289: PUSH
45290: LD_VAR 0 7
45294: ARRAY
45295: PUSH
45296: LD_INT 2
45298: ARRAY
45299: PPUSH
45300: CALL_OW 428
45304: PUSH
45305: LD_INT 0
45307: GREATER
45308: OR
45309: PUSH
45310: LD_VAR 0 12
45314: PUSH
45315: LD_VAR 0 7
45319: ARRAY
45320: PUSH
45321: LD_INT 1
45323: ARRAY
45324: PPUSH
45325: LD_VAR 0 12
45329: PUSH
45330: LD_VAR 0 7
45334: ARRAY
45335: PUSH
45336: LD_INT 2
45338: ARRAY
45339: PPUSH
45340: CALL_OW 351
45344: OR
45345: IFFALSE 45351
// exit ;
45347: POP
45348: POP
45349: GO 45643
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45351: LD_ADDR_VAR 0 8
45355: PUSH
45356: LD_VAR 0 12
45360: PUSH
45361: LD_VAR 0 7
45365: ARRAY
45366: PUSH
45367: LD_INT 1
45369: ARRAY
45370: PPUSH
45371: LD_VAR 0 12
45375: PUSH
45376: LD_VAR 0 7
45380: ARRAY
45381: PUSH
45382: LD_INT 2
45384: ARRAY
45385: PPUSH
45386: CALL_OW 546
45390: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45391: LD_VAR 0 8
45395: PUSH
45396: LD_INT 1
45398: ARRAY
45399: PUSH
45400: LD_VAR 0 8
45404: PUSH
45405: LD_INT 2
45407: ARRAY
45408: PUSH
45409: LD_VAR 0 13
45413: PUSH
45414: LD_INT 2
45416: PLUS
45417: GREATER
45418: OR
45419: PUSH
45420: LD_VAR 0 8
45424: PUSH
45425: LD_INT 2
45427: ARRAY
45428: PUSH
45429: LD_VAR 0 13
45433: PUSH
45434: LD_INT 2
45436: MINUS
45437: LESS
45438: OR
45439: PUSH
45440: LD_VAR 0 8
45444: PUSH
45445: LD_INT 3
45447: ARRAY
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 8
45454: PUSH
45455: LD_INT 9
45457: PUSH
45458: LD_INT 10
45460: PUSH
45461: LD_INT 11
45463: PUSH
45464: LD_INT 12
45466: PUSH
45467: LD_INT 13
45469: PUSH
45470: LD_INT 16
45472: PUSH
45473: LD_INT 17
45475: PUSH
45476: LD_INT 18
45478: PUSH
45479: LD_INT 19
45481: PUSH
45482: LD_INT 20
45484: PUSH
45485: LD_INT 21
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: IN
45503: NOT
45504: OR
45505: PUSH
45506: LD_VAR 0 8
45510: PUSH
45511: LD_INT 5
45513: ARRAY
45514: NOT
45515: OR
45516: PUSH
45517: LD_VAR 0 8
45521: PUSH
45522: LD_INT 6
45524: ARRAY
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 7
45534: PUSH
45535: LD_INT 9
45537: PUSH
45538: LD_INT 10
45540: PUSH
45541: LD_INT 11
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: IN
45552: NOT
45553: OR
45554: IFFALSE 45560
// exit ;
45556: POP
45557: POP
45558: GO 45643
// end ;
45560: GO 45231
45562: POP
45563: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45564: LD_VAR 0 9
45568: PPUSH
45569: LD_VAR 0 3
45573: PPUSH
45574: LD_VAR 0 4
45578: PPUSH
45579: LD_INT 20
45581: PPUSH
45582: CALL 37589 0 4
45586: PUSH
45587: LD_INT 4
45589: ARRAY
45590: IFFALSE 45594
// exit ;
45592: GO 45643
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45594: LD_VAR 0 2
45598: PUSH
45599: LD_INT 29
45601: PUSH
45602: LD_INT 30
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: IN
45609: PUSH
45610: LD_VAR 0 3
45614: PPUSH
45615: LD_VAR 0 4
45619: PPUSH
45620: LD_VAR 0 9
45624: PPUSH
45625: CALL_OW 440
45629: NOT
45630: AND
45631: IFFALSE 45635
// exit ;
45633: GO 45643
// result := true ;
45635: LD_ADDR_VAR 0 6
45639: PUSH
45640: LD_INT 1
45642: ST_TO_ADDR
// end ;
45643: LD_VAR 0 6
45647: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45648: LD_INT 0
45650: PPUSH
45651: PPUSH
45652: PPUSH
45653: PPUSH
45654: PPUSH
45655: PPUSH
45656: PPUSH
45657: PPUSH
45658: PPUSH
45659: PPUSH
45660: PPUSH
45661: PPUSH
45662: PPUSH
45663: PPUSH
45664: PPUSH
45665: PPUSH
45666: PPUSH
45667: PPUSH
45668: PPUSH
45669: PPUSH
45670: PPUSH
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
45675: PPUSH
45676: PPUSH
45677: PPUSH
45678: PPUSH
45679: PPUSH
45680: PPUSH
45681: PPUSH
45682: PPUSH
45683: PPUSH
45684: PPUSH
45685: PPUSH
45686: PPUSH
45687: PPUSH
45688: PPUSH
45689: PPUSH
45690: PPUSH
45691: PPUSH
45692: PPUSH
45693: PPUSH
45694: PPUSH
45695: PPUSH
45696: PPUSH
45697: PPUSH
45698: PPUSH
45699: PPUSH
45700: PPUSH
45701: PPUSH
45702: PPUSH
45703: PPUSH
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
// result = [ ] ;
45708: LD_ADDR_VAR 0 7
45712: PUSH
45713: EMPTY
45714: ST_TO_ADDR
// temp_list = [ ] ;
45715: LD_ADDR_VAR 0 9
45719: PUSH
45720: EMPTY
45721: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45722: LD_VAR 0 4
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: LD_INT 4
45741: PUSH
45742: LD_INT 5
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: IN
45753: NOT
45754: PUSH
45755: LD_VAR 0 1
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: IN
45770: PUSH
45771: LD_VAR 0 5
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: IN
45790: NOT
45791: AND
45792: OR
45793: IFFALSE 45797
// exit ;
45795: GO 64188
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45797: LD_VAR 0 1
45801: PUSH
45802: LD_INT 6
45804: PUSH
45805: LD_INT 7
45807: PUSH
45808: LD_INT 8
45810: PUSH
45811: LD_INT 13
45813: PUSH
45814: LD_INT 12
45816: PUSH
45817: LD_INT 15
45819: PUSH
45820: LD_INT 11
45822: PUSH
45823: LD_INT 14
45825: PUSH
45826: LD_INT 10
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: IN
45840: IFFALSE 45850
// btype = b_lab ;
45842: LD_ADDR_VAR 0 1
45846: PUSH
45847: LD_INT 6
45849: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45850: LD_VAR 0 6
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: LIST
45868: IN
45869: NOT
45870: PUSH
45871: LD_VAR 0 1
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: LD_INT 6
45890: PUSH
45891: LD_INT 36
45893: PUSH
45894: LD_INT 4
45896: PUSH
45897: LD_INT 5
45899: PUSH
45900: LD_INT 31
45902: PUSH
45903: LD_INT 32
45905: PUSH
45906: LD_INT 33
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: IN
45922: NOT
45923: PUSH
45924: LD_VAR 0 6
45928: PUSH
45929: LD_INT 1
45931: EQUAL
45932: AND
45933: OR
45934: PUSH
45935: LD_VAR 0 1
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: IN
45950: NOT
45951: PUSH
45952: LD_VAR 0 6
45956: PUSH
45957: LD_INT 2
45959: EQUAL
45960: AND
45961: OR
45962: IFFALSE 45972
// mode = 0 ;
45964: LD_ADDR_VAR 0 6
45968: PUSH
45969: LD_INT 0
45971: ST_TO_ADDR
// case mode of 0 :
45972: LD_VAR 0 6
45976: PUSH
45977: LD_INT 0
45979: DOUBLE
45980: EQUAL
45981: IFTRUE 45985
45983: GO 57438
45985: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45986: LD_ADDR_VAR 0 11
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 3
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 3
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46179: LD_ADDR_VAR 0 12
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 3
46336: NEG
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46375: LD_ADDR_VAR 0 13
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 3
46534: NEG
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 3
46546: NEG
46547: PUSH
46548: LD_INT 3
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46574: LD_ADDR_VAR 0 14
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 3
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 3
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46770: LD_ADDR_VAR 0 15
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46963: LD_ADDR_VAR 0 16
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: LD_INT 2
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 3
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 3
47120: PUSH
47121: LD_INT 3
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 3
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47156: LD_ADDR_VAR 0 17
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: LD_INT 2
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: NEG
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: NEG
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47386: LD_ADDR_VAR 0 18
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47616: LD_ADDR_VAR 0 19
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47846: LD_ADDR_VAR 0 20
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48076: LD_ADDR_VAR 0 21
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48306: LD_ADDR_VAR 0 22
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48536: LD_ADDR_VAR 0 23
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 2
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: LD_INT 3
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 3
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48816: LD_ADDR_VAR 0 24
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 3
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 3
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49092: LD_ADDR_VAR 0 25
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 3
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: LD_INT 3
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 3
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49366: LD_ADDR_VAR 0 26
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 3
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49642: LD_ADDR_VAR 0 27
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 3
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 3
49887: NEG
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49922: LD_ADDR_VAR 0 28
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 3
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 3
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 3
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50204: LD_ADDR_VAR 0 29
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: LD_INT 3
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 3
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 3
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50483: LD_ADDR_VAR 0 30
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 2
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 3
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 3
50726: NEG
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50761: LD_ADDR_VAR 0 31
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 3
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: NEG
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51039: LD_ADDR_VAR 0 32
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51317: LD_ADDR_VAR 0 33
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 3
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 3
51561: NEG
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51596: LD_ADDR_VAR 0 34
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: LD_INT 2
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 3
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51876: LD_ADDR_VAR 0 35
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51988: LD_ADDR_VAR 0 36
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52100: LD_ADDR_VAR 0 37
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52212: LD_ADDR_VAR 0 38
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52324: LD_ADDR_VAR 0 39
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52436: LD_ADDR_VAR 0 40
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52548: LD_ADDR_VAR 0 41
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 2
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 3
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 3
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 3
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: LD_INT 3
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 3
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 3
52822: NEG
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 3
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: NEG
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52898: LD_ADDR_VAR 0 42
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: LD_INT 3
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 3
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 3
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: LD_INT 3
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 3
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: NEG
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 3
53207: NEG
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53248: LD_ADDR_VAR 0 43
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 3
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 3
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 3
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 3
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 3
53544: NEG
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53596: LD_ADDR_VAR 0 44
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 3
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 3
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 3
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 3
53893: NEG
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53946: LD_ADDR_VAR 0 45
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: LD_INT 3
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 3
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: LD_INT 2
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 3
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: LD_INT 3
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 3
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: NEG
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 3
54255: NEG
54256: PUSH
54257: LD_INT 3
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54296: LD_ADDR_VAR 0 46
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 3
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 3
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 3
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 3
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 3
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 3
54592: NEG
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54644: LD_ADDR_VAR 0 47
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54795: LD_ADDR_VAR 0 48
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54942: LD_ADDR_VAR 0 49
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55086: LD_ADDR_VAR 0 50
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55230: LD_ADDR_VAR 0 51
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55377: LD_ADDR_VAR 0 52
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55528: LD_ADDR_VAR 0 53
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: NEG
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55758: LD_ADDR_VAR 0 54
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: LD_INT 2
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55988: LD_ADDR_VAR 0 55
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56218: LD_ADDR_VAR 0 56
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56448: LD_ADDR_VAR 0 57
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56678: LD_ADDR_VAR 0 58
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56908: LD_ADDR_VAR 0 59
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56996: LD_ADDR_VAR 0 60
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57084: LD_ADDR_VAR 0 61
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57172: LD_ADDR_VAR 0 62
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57260: LD_ADDR_VAR 0 63
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57348: LD_ADDR_VAR 0 64
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: ST_TO_ADDR
// end ; 1 :
57436: GO 63333
57438: LD_INT 1
57440: DOUBLE
57441: EQUAL
57442: IFTRUE 57446
57444: GO 60069
57446: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57447: LD_ADDR_VAR 0 11
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57491: LD_ADDR_VAR 0 12
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57532: LD_ADDR_VAR 0 13
57536: PUSH
57537: LD_INT 3
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: LIST
57571: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57572: LD_ADDR_VAR 0 14
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 3
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 3
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: LIST
57612: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57613: LD_ADDR_VAR 0 15
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: NEG
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57657: LD_ADDR_VAR 0 16
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 3
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: LIST
57702: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57703: LD_ADDR_VAR 0 17
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 3
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 3
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: LIST
57746: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57747: LD_ADDR_VAR 0 18
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: LIST
57787: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57788: LD_ADDR_VAR 0 19
57792: PUSH
57793: LD_INT 3
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: LD_INT 3
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57828: LD_ADDR_VAR 0 20
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: LIST
57868: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57869: LD_ADDR_VAR 0 21
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: NEG
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: NEG
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: LIST
57912: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57913: LD_ADDR_VAR 0 22
57917: PUSH
57918: LD_INT 2
57920: NEG
57921: PUSH
57922: LD_INT 3
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: LIST
57958: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57959: LD_ADDR_VAR 0 23
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 3
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 4
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58003: LD_ADDR_VAR 0 24
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 4
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58044: LD_ADDR_VAR 0 25
58048: PUSH
58049: LD_INT 3
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 4
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: PUSH
58072: LD_INT 4
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58084: LD_ADDR_VAR 0 26
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: LD_INT 4
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 3
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58125: LD_ADDR_VAR 0 27
58129: PUSH
58130: LD_INT 3
58132: NEG
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 4
58154: NEG
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: LIST
58168: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58169: LD_ADDR_VAR 0 28
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: LD_INT 3
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: LD_INT 4
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 4
58200: NEG
58201: PUSH
58202: LD_INT 3
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: LIST
58214: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58215: LD_ADDR_VAR 0 29
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 3
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 3
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 4
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 4
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 3
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: LD_INT 5
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 5
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 4
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 6
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 6
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: LD_INT 5
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58370: LD_ADDR_VAR 0 30
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 4
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 4
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 4
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 5
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 5
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 5
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 6
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 6
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58513: LD_ADDR_VAR 0 31
58517: PUSH
58518: LD_INT 3
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: LD_INT 3
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 4
58550: PUSH
58551: LD_INT 3
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 4
58560: PUSH
58561: LD_INT 4
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: LD_INT 4
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 5
58580: PUSH
58581: LD_INT 4
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 5
58590: PUSH
58591: LD_INT 5
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 4
58600: PUSH
58601: LD_INT 5
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 6
58610: PUSH
58611: LD_INT 5
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 6
58620: PUSH
58621: LD_INT 6
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 5
58630: PUSH
58631: LD_INT 6
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58652: LD_ADDR_VAR 0 32
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: LD_INT 3
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: LD_INT 3
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 4
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 4
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 5
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 5
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: LD_INT 6
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: LD_INT 6
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 5
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58795: LD_ADDR_VAR 0 33
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 3
58836: NEG
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 4
58847: NEG
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 4
58858: NEG
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 4
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 5
58881: NEG
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 5
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 5
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 6
58915: NEG
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 6
58926: NEG
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58950: LD_ADDR_VAR 0 34
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: NEG
58970: PUSH
58971: LD_INT 2
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 3
58981: NEG
58982: PUSH
58983: LD_INT 3
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: NEG
58994: PUSH
58995: LD_INT 4
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 4
59005: NEG
59006: PUSH
59007: LD_INT 3
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 4
59017: NEG
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 4
59029: NEG
59030: PUSH
59031: LD_INT 5
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 5
59041: NEG
59042: PUSH
59043: LD_INT 4
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 5
59053: NEG
59054: PUSH
59055: LD_INT 5
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 5
59065: NEG
59066: PUSH
59067: LD_INT 6
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 6
59077: NEG
59078: PUSH
59079: LD_INT 5
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 6
59089: NEG
59090: PUSH
59091: LD_INT 6
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59113: LD_ADDR_VAR 0 41
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 3
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59157: LD_ADDR_VAR 0 42
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 3
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: LIST
59197: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59198: LD_ADDR_VAR 0 43
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: LD_INT 3
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: LIST
59237: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59238: LD_ADDR_VAR 0 44
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: LIST
59278: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59279: LD_ADDR_VAR 0 45
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: LIST
59322: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59323: LD_ADDR_VAR 0 46
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 3
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59369: LD_ADDR_VAR 0 47
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59402: LD_ADDR_VAR 0 48
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59433: LD_ADDR_VAR 0 49
59437: PUSH
59438: LD_INT 3
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59462: LD_ADDR_VAR 0 50
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59491: LD_ADDR_VAR 0 51
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59522: LD_ADDR_VAR 0 52
59526: PUSH
59527: LD_INT 3
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59555: LD_ADDR_VAR 0 53
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 3
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59599: LD_ADDR_VAR 0 54
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 3
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: LIST
59639: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59640: LD_ADDR_VAR 0 55
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 3
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: LD_INT 3
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: LIST
59679: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59680: LD_ADDR_VAR 0 56
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: LIST
59720: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59721: LD_ADDR_VAR 0 57
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: NEG
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: LIST
59764: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59765: LD_ADDR_VAR 0 58
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: LD_INT 3
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 3
59796: NEG
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: LIST
59810: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59811: LD_ADDR_VAR 0 59
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59855: LD_ADDR_VAR 0 60
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 2
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59896: LD_ADDR_VAR 0 61
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59936: LD_ADDR_VAR 0 62
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 2
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59977: LD_ADDR_VAR 0 63
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60021: LD_ADDR_VAR 0 64
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: LD_INT 2
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: ST_TO_ADDR
// end ; 2 :
60067: GO 63333
60069: LD_INT 2
60071: DOUBLE
60072: EQUAL
60073: IFTRUE 60077
60075: GO 63332
60077: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60078: LD_ADDR_VAR 0 29
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 4
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 5
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 5
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 4
60126: PUSH
60127: LD_INT 1
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 3
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: PUSH
60158: LD_INT 2
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 5
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 3
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 4
60198: PUSH
60199: LD_INT 3
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 4
60208: PUSH
60209: LD_INT 4
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 3
60218: PUSH
60219: LD_INT 4
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 3
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 4
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: LD_INT 4
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 4
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: LD_INT 4
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 5
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 5
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 4
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: LD_INT 3
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: LD_INT 5
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: LD_INT 3
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: NEG
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: NEG
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 4
60417: NEG
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 4
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 4
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 4
60463: NEG
60464: PUSH
60465: LD_INT 4
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 4
60475: NEG
60476: PUSH
60477: LD_INT 5
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 3
60487: NEG
60488: PUSH
60489: LD_INT 4
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 3
60499: NEG
60500: PUSH
60501: LD_INT 3
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 4
60511: NEG
60512: PUSH
60513: LD_INT 3
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 5
60523: NEG
60524: PUSH
60525: LD_INT 4
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 5
60535: NEG
60536: PUSH
60537: LD_INT 5
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 3
60547: NEG
60548: PUSH
60549: LD_INT 5
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 5
60559: NEG
60560: PUSH
60561: LD_INT 3
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60616: LD_ADDR_VAR 0 30
60620: PUSH
60621: LD_INT 4
60623: PUSH
60624: LD_INT 4
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 4
60633: PUSH
60634: LD_INT 3
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 5
60643: PUSH
60644: LD_INT 4
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 5
60653: PUSH
60654: LD_INT 5
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 4
60663: PUSH
60664: LD_INT 5
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 3
60673: PUSH
60674: LD_INT 4
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 5
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 3
60703: PUSH
60704: LD_INT 5
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 3
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 4
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 4
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: LD_INT 3
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: LD_INT 4
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 4
60806: NEG
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 4
60817: NEG
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 3
60829: NEG
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 3
60840: NEG
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 4
60851: NEG
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 5
60862: NEG
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 5
60873: NEG
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 5
60885: NEG
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: NEG
60898: PUSH
60899: LD_INT 2
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: LD_INT 3
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: LD_INT 4
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: LD_INT 3
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: LD_INT 2
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 3
60956: NEG
60957: PUSH
60958: LD_INT 2
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 4
60968: NEG
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 4
60980: NEG
60981: PUSH
60982: LD_INT 4
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: NEG
60993: PUSH
60994: LD_INT 4
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 4
61004: NEG
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 4
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 5
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 4
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 3
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 3
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: LD_INT 4
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: LD_INT 5
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: LD_INT 3
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: LD_INT 5
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61163: LD_ADDR_VAR 0 31
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 4
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: LD_INT 3
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 4
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 5
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 5
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 4
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: PUSH
61243: LD_INT 5
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 3
61274: NEG
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 2
61286: NEG
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: NEG
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 4
61319: NEG
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 4
61330: NEG
61331: PUSH
61332: LD_INT 1
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 4
61342: NEG
61343: PUSH
61344: LD_INT 2
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 2
61354: NEG
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 4
61365: NEG
61366: PUSH
61367: LD_INT 4
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 4
61377: NEG
61378: PUSH
61379: LD_INT 5
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 3
61389: NEG
61390: PUSH
61391: LD_INT 4
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 3
61401: NEG
61402: PUSH
61403: LD_INT 3
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 4
61413: NEG
61414: PUSH
61415: LD_INT 3
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 5
61425: NEG
61426: PUSH
61427: LD_INT 4
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 5
61437: NEG
61438: PUSH
61439: LD_INT 5
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: NEG
61450: PUSH
61451: LD_INT 5
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 5
61461: NEG
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: LD_INT 3
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 4
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: NEG
61529: PUSH
61530: LD_INT 3
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: LD_INT 4
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: LD_INT 2
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: LD_INT 4
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 4
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 4
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 5
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 5
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 4
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 5
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61713: LD_ADDR_VAR 0 32
61717: PUSH
61718: LD_INT 4
61720: NEG
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 4
61731: NEG
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 4
61765: NEG
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 5
61776: NEG
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 5
61787: NEG
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 5
61799: NEG
61800: PUSH
61801: LD_INT 2
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 3
61811: NEG
61812: PUSH
61813: LD_INT 2
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 3
61822: NEG
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 3
61834: NEG
61835: PUSH
61836: LD_INT 4
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: LD_INT 3
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 2
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: NEG
61871: PUSH
61872: LD_INT 2
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 4
61882: NEG
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 4
61894: NEG
61895: PUSH
61896: LD_INT 4
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: LD_INT 4
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 4
61918: NEG
61919: PUSH
61920: LD_INT 2
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 4
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 5
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: LD_INT 4
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 3
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 3
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: LD_INT 4
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 5
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: LD_INT 3
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 2
62020: NEG
62021: PUSH
62022: LD_INT 5
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 3
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 3
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 4
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 4
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 2
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: PUSH
62105: LD_INT 2
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 4
62115: PUSH
62116: LD_INT 2
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 4
62125: PUSH
62126: LD_INT 4
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 4
62135: PUSH
62136: LD_INT 3
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 5
62145: PUSH
62146: LD_INT 4
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 5
62155: PUSH
62156: LD_INT 5
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 4
62165: PUSH
62166: LD_INT 5
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 4
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 3
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 5
62195: PUSH
62196: LD_INT 3
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 3
62205: PUSH
62206: LD_INT 5
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62260: LD_ADDR_VAR 0 33
62264: PUSH
62265: LD_INT 4
62267: NEG
62268: PUSH
62269: LD_INT 4
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 4
62279: NEG
62280: PUSH
62281: LD_INT 5
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: NEG
62292: PUSH
62293: LD_INT 4
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: LD_INT 3
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 4
62315: NEG
62316: PUSH
62317: LD_INT 3
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 5
62327: NEG
62328: PUSH
62329: LD_INT 4
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 5
62339: NEG
62340: PUSH
62341: LD_INT 5
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 3
62351: NEG
62352: PUSH
62353: LD_INT 5
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 5
62363: NEG
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 4
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: LD_INT 3
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 4
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: LD_INT 2
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: NEG
62466: PUSH
62467: LD_INT 4
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 4
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 4
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 5
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 5
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 4
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 3
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 3
62549: PUSH
62550: LD_INT 2
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 5
62560: PUSH
62561: LD_INT 2
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 3
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 4
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 4
62600: PUSH
62601: LD_INT 4
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 3
62610: PUSH
62611: LD_INT 4
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 4
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: LD_INT 4
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: LD_INT 4
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 3
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: LD_INT 4
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 5
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 5
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: LD_INT 4
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 5
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: LD_INT 3
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62798: LD_ADDR_VAR 0 34
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 4
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 5
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 1
62827: PUSH
62828: LD_INT 4
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: LD_INT 3
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 3
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: LD_INT 4
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 5
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 2
62884: PUSH
62885: LD_INT 3
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 2
62895: NEG
62896: PUSH
62897: LD_INT 5
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 3
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 4
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 4
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 3
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 2
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 4
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 4
63000: PUSH
63001: LD_INT 4
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 4
63010: PUSH
63011: LD_INT 3
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 5
63020: PUSH
63021: LD_INT 4
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 5
63030: PUSH
63031: LD_INT 5
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 4
63040: PUSH
63041: LD_INT 5
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 3
63050: PUSH
63051: LD_INT 4
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 3
63060: PUSH
63061: LD_INT 3
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 5
63070: PUSH
63071: LD_INT 3
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 3
63080: PUSH
63081: LD_INT 5
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 3
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: LD_INT 2
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: LD_INT 3
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: LD_INT 4
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: LD_INT 4
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 2
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: LD_INT 4
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 4
63183: NEG
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 4
63194: NEG
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: NEG
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 3
63217: NEG
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 4
63228: NEG
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 5
63239: NEG
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 5
63250: NEG
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 5
63262: NEG
63263: PUSH
63264: LD_INT 2
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 3
63274: NEG
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: ST_TO_ADDR
// end ; end ;
63330: GO 63333
63332: POP
// case btype of b_depot , b_warehouse :
63333: LD_VAR 0 1
63337: PUSH
63338: LD_INT 0
63340: DOUBLE
63341: EQUAL
63342: IFTRUE 63352
63344: LD_INT 1
63346: DOUBLE
63347: EQUAL
63348: IFTRUE 63352
63350: GO 63553
63352: POP
// case nation of nation_american :
63353: LD_VAR 0 5
63357: PUSH
63358: LD_INT 1
63360: DOUBLE
63361: EQUAL
63362: IFTRUE 63366
63364: GO 63422
63366: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63367: LD_ADDR_VAR 0 9
63371: PUSH
63372: LD_VAR 0 11
63376: PUSH
63377: LD_VAR 0 12
63381: PUSH
63382: LD_VAR 0 13
63386: PUSH
63387: LD_VAR 0 14
63391: PUSH
63392: LD_VAR 0 15
63396: PUSH
63397: LD_VAR 0 16
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: PUSH
63410: LD_VAR 0 4
63414: PUSH
63415: LD_INT 1
63417: PLUS
63418: ARRAY
63419: ST_TO_ADDR
63420: GO 63551
63422: LD_INT 2
63424: DOUBLE
63425: EQUAL
63426: IFTRUE 63430
63428: GO 63486
63430: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63431: LD_ADDR_VAR 0 9
63435: PUSH
63436: LD_VAR 0 17
63440: PUSH
63441: LD_VAR 0 18
63445: PUSH
63446: LD_VAR 0 19
63450: PUSH
63451: LD_VAR 0 20
63455: PUSH
63456: LD_VAR 0 21
63460: PUSH
63461: LD_VAR 0 22
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: PUSH
63474: LD_VAR 0 4
63478: PUSH
63479: LD_INT 1
63481: PLUS
63482: ARRAY
63483: ST_TO_ADDR
63484: GO 63551
63486: LD_INT 3
63488: DOUBLE
63489: EQUAL
63490: IFTRUE 63494
63492: GO 63550
63494: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63495: LD_ADDR_VAR 0 9
63499: PUSH
63500: LD_VAR 0 23
63504: PUSH
63505: LD_VAR 0 24
63509: PUSH
63510: LD_VAR 0 25
63514: PUSH
63515: LD_VAR 0 26
63519: PUSH
63520: LD_VAR 0 27
63524: PUSH
63525: LD_VAR 0 28
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: PUSH
63538: LD_VAR 0 4
63542: PUSH
63543: LD_INT 1
63545: PLUS
63546: ARRAY
63547: ST_TO_ADDR
63548: GO 63551
63550: POP
63551: GO 64106
63553: LD_INT 2
63555: DOUBLE
63556: EQUAL
63557: IFTRUE 63567
63559: LD_INT 3
63561: DOUBLE
63562: EQUAL
63563: IFTRUE 63567
63565: GO 63623
63567: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63568: LD_ADDR_VAR 0 9
63572: PUSH
63573: LD_VAR 0 29
63577: PUSH
63578: LD_VAR 0 30
63582: PUSH
63583: LD_VAR 0 31
63587: PUSH
63588: LD_VAR 0 32
63592: PUSH
63593: LD_VAR 0 33
63597: PUSH
63598: LD_VAR 0 34
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: PUSH
63611: LD_VAR 0 4
63615: PUSH
63616: LD_INT 1
63618: PLUS
63619: ARRAY
63620: ST_TO_ADDR
63621: GO 64106
63623: LD_INT 16
63625: DOUBLE
63626: EQUAL
63627: IFTRUE 63685
63629: LD_INT 17
63631: DOUBLE
63632: EQUAL
63633: IFTRUE 63685
63635: LD_INT 18
63637: DOUBLE
63638: EQUAL
63639: IFTRUE 63685
63641: LD_INT 19
63643: DOUBLE
63644: EQUAL
63645: IFTRUE 63685
63647: LD_INT 22
63649: DOUBLE
63650: EQUAL
63651: IFTRUE 63685
63653: LD_INT 20
63655: DOUBLE
63656: EQUAL
63657: IFTRUE 63685
63659: LD_INT 21
63661: DOUBLE
63662: EQUAL
63663: IFTRUE 63685
63665: LD_INT 23
63667: DOUBLE
63668: EQUAL
63669: IFTRUE 63685
63671: LD_INT 24
63673: DOUBLE
63674: EQUAL
63675: IFTRUE 63685
63677: LD_INT 25
63679: DOUBLE
63680: EQUAL
63681: IFTRUE 63685
63683: GO 63741
63685: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63686: LD_ADDR_VAR 0 9
63690: PUSH
63691: LD_VAR 0 35
63695: PUSH
63696: LD_VAR 0 36
63700: PUSH
63701: LD_VAR 0 37
63705: PUSH
63706: LD_VAR 0 38
63710: PUSH
63711: LD_VAR 0 39
63715: PUSH
63716: LD_VAR 0 40
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: PUSH
63729: LD_VAR 0 4
63733: PUSH
63734: LD_INT 1
63736: PLUS
63737: ARRAY
63738: ST_TO_ADDR
63739: GO 64106
63741: LD_INT 6
63743: DOUBLE
63744: EQUAL
63745: IFTRUE 63797
63747: LD_INT 7
63749: DOUBLE
63750: EQUAL
63751: IFTRUE 63797
63753: LD_INT 8
63755: DOUBLE
63756: EQUAL
63757: IFTRUE 63797
63759: LD_INT 13
63761: DOUBLE
63762: EQUAL
63763: IFTRUE 63797
63765: LD_INT 12
63767: DOUBLE
63768: EQUAL
63769: IFTRUE 63797
63771: LD_INT 15
63773: DOUBLE
63774: EQUAL
63775: IFTRUE 63797
63777: LD_INT 11
63779: DOUBLE
63780: EQUAL
63781: IFTRUE 63797
63783: LD_INT 14
63785: DOUBLE
63786: EQUAL
63787: IFTRUE 63797
63789: LD_INT 10
63791: DOUBLE
63792: EQUAL
63793: IFTRUE 63797
63795: GO 63853
63797: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63798: LD_ADDR_VAR 0 9
63802: PUSH
63803: LD_VAR 0 41
63807: PUSH
63808: LD_VAR 0 42
63812: PUSH
63813: LD_VAR 0 43
63817: PUSH
63818: LD_VAR 0 44
63822: PUSH
63823: LD_VAR 0 45
63827: PUSH
63828: LD_VAR 0 46
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: PUSH
63841: LD_VAR 0 4
63845: PUSH
63846: LD_INT 1
63848: PLUS
63849: ARRAY
63850: ST_TO_ADDR
63851: GO 64106
63853: LD_INT 36
63855: DOUBLE
63856: EQUAL
63857: IFTRUE 63861
63859: GO 63917
63861: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63862: LD_ADDR_VAR 0 9
63866: PUSH
63867: LD_VAR 0 47
63871: PUSH
63872: LD_VAR 0 48
63876: PUSH
63877: LD_VAR 0 49
63881: PUSH
63882: LD_VAR 0 50
63886: PUSH
63887: LD_VAR 0 51
63891: PUSH
63892: LD_VAR 0 52
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: PUSH
63905: LD_VAR 0 4
63909: PUSH
63910: LD_INT 1
63912: PLUS
63913: ARRAY
63914: ST_TO_ADDR
63915: GO 64106
63917: LD_INT 4
63919: DOUBLE
63920: EQUAL
63921: IFTRUE 63943
63923: LD_INT 5
63925: DOUBLE
63926: EQUAL
63927: IFTRUE 63943
63929: LD_INT 34
63931: DOUBLE
63932: EQUAL
63933: IFTRUE 63943
63935: LD_INT 37
63937: DOUBLE
63938: EQUAL
63939: IFTRUE 63943
63941: GO 63999
63943: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63944: LD_ADDR_VAR 0 9
63948: PUSH
63949: LD_VAR 0 53
63953: PUSH
63954: LD_VAR 0 54
63958: PUSH
63959: LD_VAR 0 55
63963: PUSH
63964: LD_VAR 0 56
63968: PUSH
63969: LD_VAR 0 57
63973: PUSH
63974: LD_VAR 0 58
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: PUSH
63987: LD_VAR 0 4
63991: PUSH
63992: LD_INT 1
63994: PLUS
63995: ARRAY
63996: ST_TO_ADDR
63997: GO 64106
63999: LD_INT 31
64001: DOUBLE
64002: EQUAL
64003: IFTRUE 64049
64005: LD_INT 32
64007: DOUBLE
64008: EQUAL
64009: IFTRUE 64049
64011: LD_INT 33
64013: DOUBLE
64014: EQUAL
64015: IFTRUE 64049
64017: LD_INT 27
64019: DOUBLE
64020: EQUAL
64021: IFTRUE 64049
64023: LD_INT 26
64025: DOUBLE
64026: EQUAL
64027: IFTRUE 64049
64029: LD_INT 28
64031: DOUBLE
64032: EQUAL
64033: IFTRUE 64049
64035: LD_INT 29
64037: DOUBLE
64038: EQUAL
64039: IFTRUE 64049
64041: LD_INT 30
64043: DOUBLE
64044: EQUAL
64045: IFTRUE 64049
64047: GO 64105
64049: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64050: LD_ADDR_VAR 0 9
64054: PUSH
64055: LD_VAR 0 59
64059: PUSH
64060: LD_VAR 0 60
64064: PUSH
64065: LD_VAR 0 61
64069: PUSH
64070: LD_VAR 0 62
64074: PUSH
64075: LD_VAR 0 63
64079: PUSH
64080: LD_VAR 0 64
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: PUSH
64093: LD_VAR 0 4
64097: PUSH
64098: LD_INT 1
64100: PLUS
64101: ARRAY
64102: ST_TO_ADDR
64103: GO 64106
64105: POP
// temp_list2 = [ ] ;
64106: LD_ADDR_VAR 0 10
64110: PUSH
64111: EMPTY
64112: ST_TO_ADDR
// for i in temp_list do
64113: LD_ADDR_VAR 0 8
64117: PUSH
64118: LD_VAR 0 9
64122: PUSH
64123: FOR_IN
64124: IFFALSE 64176
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64126: LD_ADDR_VAR 0 10
64130: PUSH
64131: LD_VAR 0 10
64135: PUSH
64136: LD_VAR 0 8
64140: PUSH
64141: LD_INT 1
64143: ARRAY
64144: PUSH
64145: LD_VAR 0 2
64149: PLUS
64150: PUSH
64151: LD_VAR 0 8
64155: PUSH
64156: LD_INT 2
64158: ARRAY
64159: PUSH
64160: LD_VAR 0 3
64164: PLUS
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: EMPTY
64171: LIST
64172: ADD
64173: ST_TO_ADDR
64174: GO 64123
64176: POP
64177: POP
// result = temp_list2 ;
64178: LD_ADDR_VAR 0 7
64182: PUSH
64183: LD_VAR 0 10
64187: ST_TO_ADDR
// end ;
64188: LD_VAR 0 7
64192: RET
// export function EnemyInRange ( unit , dist ) ; begin
64193: LD_INT 0
64195: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64196: LD_ADDR_VAR 0 3
64200: PUSH
64201: LD_VAR 0 1
64205: PPUSH
64206: CALL_OW 255
64210: PPUSH
64211: LD_VAR 0 1
64215: PPUSH
64216: CALL_OW 250
64220: PPUSH
64221: LD_VAR 0 1
64225: PPUSH
64226: CALL_OW 251
64230: PPUSH
64231: LD_VAR 0 2
64235: PPUSH
64236: CALL 37589 0 4
64240: PUSH
64241: LD_INT 4
64243: ARRAY
64244: ST_TO_ADDR
// end ;
64245: LD_VAR 0 3
64249: RET
// export function PlayerSeeMe ( unit ) ; begin
64250: LD_INT 0
64252: PPUSH
// result := See ( your_side , unit ) ;
64253: LD_ADDR_VAR 0 2
64257: PUSH
64258: LD_OWVAR 2
64262: PPUSH
64263: LD_VAR 0 1
64267: PPUSH
64268: CALL_OW 292
64272: ST_TO_ADDR
// end ;
64273: LD_VAR 0 2
64277: RET
// export function ReverseDir ( unit ) ; begin
64278: LD_INT 0
64280: PPUSH
// if not unit then
64281: LD_VAR 0 1
64285: NOT
64286: IFFALSE 64290
// exit ;
64288: GO 64313
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64290: LD_ADDR_VAR 0 2
64294: PUSH
64295: LD_VAR 0 1
64299: PPUSH
64300: CALL_OW 254
64304: PUSH
64305: LD_INT 3
64307: PLUS
64308: PUSH
64309: LD_INT 6
64311: MOD
64312: ST_TO_ADDR
// end ;
64313: LD_VAR 0 2
64317: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64318: LD_INT 0
64320: PPUSH
64321: PPUSH
64322: PPUSH
64323: PPUSH
64324: PPUSH
// if not hexes then
64325: LD_VAR 0 2
64329: NOT
64330: IFFALSE 64334
// exit ;
64332: GO 64482
// dist := 9999 ;
64334: LD_ADDR_VAR 0 5
64338: PUSH
64339: LD_INT 9999
64341: ST_TO_ADDR
// for i = 1 to hexes do
64342: LD_ADDR_VAR 0 4
64346: PUSH
64347: DOUBLE
64348: LD_INT 1
64350: DEC
64351: ST_TO_ADDR
64352: LD_VAR 0 2
64356: PUSH
64357: FOR_TO
64358: IFFALSE 64470
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64360: LD_VAR 0 1
64364: PPUSH
64365: LD_VAR 0 2
64369: PUSH
64370: LD_VAR 0 4
64374: ARRAY
64375: PUSH
64376: LD_INT 1
64378: ARRAY
64379: PPUSH
64380: LD_VAR 0 2
64384: PUSH
64385: LD_VAR 0 4
64389: ARRAY
64390: PUSH
64391: LD_INT 2
64393: ARRAY
64394: PPUSH
64395: CALL_OW 297
64399: PUSH
64400: LD_VAR 0 5
64404: LESS
64405: IFFALSE 64468
// begin hex := hexes [ i ] ;
64407: LD_ADDR_VAR 0 7
64411: PUSH
64412: LD_VAR 0 2
64416: PUSH
64417: LD_VAR 0 4
64421: ARRAY
64422: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64423: LD_ADDR_VAR 0 5
64427: PUSH
64428: LD_VAR 0 1
64432: PPUSH
64433: LD_VAR 0 2
64437: PUSH
64438: LD_VAR 0 4
64442: ARRAY
64443: PUSH
64444: LD_INT 1
64446: ARRAY
64447: PPUSH
64448: LD_VAR 0 2
64452: PUSH
64453: LD_VAR 0 4
64457: ARRAY
64458: PUSH
64459: LD_INT 2
64461: ARRAY
64462: PPUSH
64463: CALL_OW 297
64467: ST_TO_ADDR
// end ; end ;
64468: GO 64357
64470: POP
64471: POP
// result := hex ;
64472: LD_ADDR_VAR 0 3
64476: PUSH
64477: LD_VAR 0 7
64481: ST_TO_ADDR
// end ;
64482: LD_VAR 0 3
64486: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64487: LD_INT 0
64489: PPUSH
64490: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64491: LD_VAR 0 1
64495: NOT
64496: PUSH
64497: LD_VAR 0 1
64501: PUSH
64502: LD_INT 21
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 23
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PPUSH
64526: CALL_OW 69
64530: IN
64531: NOT
64532: OR
64533: IFFALSE 64537
// exit ;
64535: GO 64584
// for i = 1 to 3 do
64537: LD_ADDR_VAR 0 3
64541: PUSH
64542: DOUBLE
64543: LD_INT 1
64545: DEC
64546: ST_TO_ADDR
64547: LD_INT 3
64549: PUSH
64550: FOR_TO
64551: IFFALSE 64582
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64553: LD_VAR 0 1
64557: PPUSH
64558: CALL_OW 250
64562: PPUSH
64563: LD_VAR 0 1
64567: PPUSH
64568: CALL_OW 251
64572: PPUSH
64573: LD_INT 1
64575: PPUSH
64576: CALL_OW 453
64580: GO 64550
64582: POP
64583: POP
// end ;
64584: LD_VAR 0 2
64588: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64589: LD_INT 0
64591: PPUSH
64592: PPUSH
64593: PPUSH
64594: PPUSH
64595: PPUSH
64596: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64597: LD_VAR 0 1
64601: NOT
64602: PUSH
64603: LD_VAR 0 2
64607: NOT
64608: OR
64609: PUSH
64610: LD_VAR 0 1
64614: PPUSH
64615: CALL_OW 314
64619: OR
64620: IFFALSE 64624
// exit ;
64622: GO 65065
// x := GetX ( enemy_unit ) ;
64624: LD_ADDR_VAR 0 7
64628: PUSH
64629: LD_VAR 0 2
64633: PPUSH
64634: CALL_OW 250
64638: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64639: LD_ADDR_VAR 0 8
64643: PUSH
64644: LD_VAR 0 2
64648: PPUSH
64649: CALL_OW 251
64653: ST_TO_ADDR
// if not x or not y then
64654: LD_VAR 0 7
64658: NOT
64659: PUSH
64660: LD_VAR 0 8
64664: NOT
64665: OR
64666: IFFALSE 64670
// exit ;
64668: GO 65065
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64670: LD_ADDR_VAR 0 6
64674: PUSH
64675: LD_VAR 0 7
64679: PPUSH
64680: LD_INT 0
64682: PPUSH
64683: LD_INT 4
64685: PPUSH
64686: CALL_OW 272
64690: PUSH
64691: LD_VAR 0 8
64695: PPUSH
64696: LD_INT 0
64698: PPUSH
64699: LD_INT 4
64701: PPUSH
64702: CALL_OW 273
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_VAR 0 7
64715: PPUSH
64716: LD_INT 1
64718: PPUSH
64719: LD_INT 4
64721: PPUSH
64722: CALL_OW 272
64726: PUSH
64727: LD_VAR 0 8
64731: PPUSH
64732: LD_INT 1
64734: PPUSH
64735: LD_INT 4
64737: PPUSH
64738: CALL_OW 273
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_VAR 0 7
64751: PPUSH
64752: LD_INT 2
64754: PPUSH
64755: LD_INT 4
64757: PPUSH
64758: CALL_OW 272
64762: PUSH
64763: LD_VAR 0 8
64767: PPUSH
64768: LD_INT 2
64770: PPUSH
64771: LD_INT 4
64773: PPUSH
64774: CALL_OW 273
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_VAR 0 7
64787: PPUSH
64788: LD_INT 3
64790: PPUSH
64791: LD_INT 4
64793: PPUSH
64794: CALL_OW 272
64798: PUSH
64799: LD_VAR 0 8
64803: PPUSH
64804: LD_INT 3
64806: PPUSH
64807: LD_INT 4
64809: PPUSH
64810: CALL_OW 273
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_VAR 0 7
64823: PPUSH
64824: LD_INT 4
64826: PPUSH
64827: LD_INT 4
64829: PPUSH
64830: CALL_OW 272
64834: PUSH
64835: LD_VAR 0 8
64839: PPUSH
64840: LD_INT 4
64842: PPUSH
64843: LD_INT 4
64845: PPUSH
64846: CALL_OW 273
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_VAR 0 7
64859: PPUSH
64860: LD_INT 5
64862: PPUSH
64863: LD_INT 4
64865: PPUSH
64866: CALL_OW 272
64870: PUSH
64871: LD_VAR 0 8
64875: PPUSH
64876: LD_INT 5
64878: PPUSH
64879: LD_INT 4
64881: PPUSH
64882: CALL_OW 273
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: ST_TO_ADDR
// for i = tmp downto 1 do
64899: LD_ADDR_VAR 0 4
64903: PUSH
64904: DOUBLE
64905: LD_VAR 0 6
64909: INC
64910: ST_TO_ADDR
64911: LD_INT 1
64913: PUSH
64914: FOR_DOWNTO
64915: IFFALSE 65016
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64917: LD_VAR 0 6
64921: PUSH
64922: LD_VAR 0 4
64926: ARRAY
64927: PUSH
64928: LD_INT 1
64930: ARRAY
64931: PPUSH
64932: LD_VAR 0 6
64936: PUSH
64937: LD_VAR 0 4
64941: ARRAY
64942: PUSH
64943: LD_INT 2
64945: ARRAY
64946: PPUSH
64947: CALL_OW 488
64951: NOT
64952: PUSH
64953: LD_VAR 0 6
64957: PUSH
64958: LD_VAR 0 4
64962: ARRAY
64963: PUSH
64964: LD_INT 1
64966: ARRAY
64967: PPUSH
64968: LD_VAR 0 6
64972: PUSH
64973: LD_VAR 0 4
64977: ARRAY
64978: PUSH
64979: LD_INT 2
64981: ARRAY
64982: PPUSH
64983: CALL_OW 428
64987: PUSH
64988: LD_INT 0
64990: NONEQUAL
64991: OR
64992: IFFALSE 65014
// tmp := Delete ( tmp , i ) ;
64994: LD_ADDR_VAR 0 6
64998: PUSH
64999: LD_VAR 0 6
65003: PPUSH
65004: LD_VAR 0 4
65008: PPUSH
65009: CALL_OW 3
65013: ST_TO_ADDR
65014: GO 64914
65016: POP
65017: POP
// j := GetClosestHex ( unit , tmp ) ;
65018: LD_ADDR_VAR 0 5
65022: PUSH
65023: LD_VAR 0 1
65027: PPUSH
65028: LD_VAR 0 6
65032: PPUSH
65033: CALL 64318 0 2
65037: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65038: LD_VAR 0 1
65042: PPUSH
65043: LD_VAR 0 5
65047: PUSH
65048: LD_INT 1
65050: ARRAY
65051: PPUSH
65052: LD_VAR 0 5
65056: PUSH
65057: LD_INT 2
65059: ARRAY
65060: PPUSH
65061: CALL_OW 111
// end ;
65065: LD_VAR 0 3
65069: RET
// export function PrepareApemanSoldier ( ) ; begin
65070: LD_INT 0
65072: PPUSH
// uc_nation := 0 ;
65073: LD_ADDR_OWVAR 21
65077: PUSH
65078: LD_INT 0
65080: ST_TO_ADDR
// hc_sex := sex_male ;
65081: LD_ADDR_OWVAR 27
65085: PUSH
65086: LD_INT 1
65088: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65089: LD_ADDR_OWVAR 28
65093: PUSH
65094: LD_INT 15
65096: ST_TO_ADDR
// hc_gallery :=  ;
65097: LD_ADDR_OWVAR 33
65101: PUSH
65102: LD_STRING 
65104: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65105: LD_ADDR_OWVAR 31
65109: PUSH
65110: LD_INT 0
65112: PPUSH
65113: LD_INT 3
65115: PPUSH
65116: CALL_OW 12
65120: PUSH
65121: LD_INT 0
65123: PPUSH
65124: LD_INT 3
65126: PPUSH
65127: CALL_OW 12
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: LD_INT 0
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: ST_TO_ADDR
// end ;
65144: LD_VAR 0 1
65148: RET
// export function PrepareApemanEngineer ( ) ; begin
65149: LD_INT 0
65151: PPUSH
// uc_nation := 0 ;
65152: LD_ADDR_OWVAR 21
65156: PUSH
65157: LD_INT 0
65159: ST_TO_ADDR
// hc_sex := sex_male ;
65160: LD_ADDR_OWVAR 27
65164: PUSH
65165: LD_INT 1
65167: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65168: LD_ADDR_OWVAR 28
65172: PUSH
65173: LD_INT 16
65175: ST_TO_ADDR
// hc_gallery :=  ;
65176: LD_ADDR_OWVAR 33
65180: PUSH
65181: LD_STRING 
65183: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65184: LD_ADDR_OWVAR 31
65188: PUSH
65189: LD_INT 0
65191: PPUSH
65192: LD_INT 3
65194: PPUSH
65195: CALL_OW 12
65199: PUSH
65200: LD_INT 0
65202: PPUSH
65203: LD_INT 3
65205: PPUSH
65206: CALL_OW 12
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: ST_TO_ADDR
// end ;
65223: LD_VAR 0 1
65227: RET
// export function PrepareApeman ( agressivity ) ; begin
65228: LD_INT 0
65230: PPUSH
// uc_side := 0 ;
65231: LD_ADDR_OWVAR 20
65235: PUSH
65236: LD_INT 0
65238: ST_TO_ADDR
// uc_nation := 0 ;
65239: LD_ADDR_OWVAR 21
65243: PUSH
65244: LD_INT 0
65246: ST_TO_ADDR
// hc_sex := sex_male ;
65247: LD_ADDR_OWVAR 27
65251: PUSH
65252: LD_INT 1
65254: ST_TO_ADDR
// hc_class := class_apeman ;
65255: LD_ADDR_OWVAR 28
65259: PUSH
65260: LD_INT 12
65262: ST_TO_ADDR
// hc_gallery :=  ;
65263: LD_ADDR_OWVAR 33
65267: PUSH
65268: LD_STRING 
65270: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65271: LD_ADDR_OWVAR 35
65275: PUSH
65276: LD_VAR 0 1
65280: NEG
65281: PPUSH
65282: LD_VAR 0 1
65286: PPUSH
65287: CALL_OW 12
65291: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65292: LD_ADDR_OWVAR 31
65296: PUSH
65297: LD_INT 0
65299: PPUSH
65300: LD_INT 3
65302: PPUSH
65303: CALL_OW 12
65307: PUSH
65308: LD_INT 0
65310: PPUSH
65311: LD_INT 3
65313: PPUSH
65314: CALL_OW 12
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: ST_TO_ADDR
// end ;
65331: LD_VAR 0 2
65335: RET
// export function PrepareTiger ( agressivity ) ; begin
65336: LD_INT 0
65338: PPUSH
// uc_side := 0 ;
65339: LD_ADDR_OWVAR 20
65343: PUSH
65344: LD_INT 0
65346: ST_TO_ADDR
// uc_nation := 0 ;
65347: LD_ADDR_OWVAR 21
65351: PUSH
65352: LD_INT 0
65354: ST_TO_ADDR
// hc_class := class_tiger ;
65355: LD_ADDR_OWVAR 28
65359: PUSH
65360: LD_INT 14
65362: ST_TO_ADDR
// hc_gallery :=  ;
65363: LD_ADDR_OWVAR 33
65367: PUSH
65368: LD_STRING 
65370: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65371: LD_ADDR_OWVAR 35
65375: PUSH
65376: LD_VAR 0 1
65380: NEG
65381: PPUSH
65382: LD_VAR 0 1
65386: PPUSH
65387: CALL_OW 12
65391: ST_TO_ADDR
// end ;
65392: LD_VAR 0 2
65396: RET
// export function PrepareEnchidna ( ) ; begin
65397: LD_INT 0
65399: PPUSH
// uc_side := 0 ;
65400: LD_ADDR_OWVAR 20
65404: PUSH
65405: LD_INT 0
65407: ST_TO_ADDR
// uc_nation := 0 ;
65408: LD_ADDR_OWVAR 21
65412: PUSH
65413: LD_INT 0
65415: ST_TO_ADDR
// hc_class := class_baggie ;
65416: LD_ADDR_OWVAR 28
65420: PUSH
65421: LD_INT 13
65423: ST_TO_ADDR
// hc_gallery :=  ;
65424: LD_ADDR_OWVAR 33
65428: PUSH
65429: LD_STRING 
65431: ST_TO_ADDR
// end ;
65432: LD_VAR 0 1
65436: RET
// export function PrepareFrog ( ) ; begin
65437: LD_INT 0
65439: PPUSH
// uc_side := 0 ;
65440: LD_ADDR_OWVAR 20
65444: PUSH
65445: LD_INT 0
65447: ST_TO_ADDR
// uc_nation := 0 ;
65448: LD_ADDR_OWVAR 21
65452: PUSH
65453: LD_INT 0
65455: ST_TO_ADDR
// hc_class := class_frog ;
65456: LD_ADDR_OWVAR 28
65460: PUSH
65461: LD_INT 19
65463: ST_TO_ADDR
// hc_gallery :=  ;
65464: LD_ADDR_OWVAR 33
65468: PUSH
65469: LD_STRING 
65471: ST_TO_ADDR
// end ;
65472: LD_VAR 0 1
65476: RET
// export function PrepareFish ( ) ; begin
65477: LD_INT 0
65479: PPUSH
// uc_side := 0 ;
65480: LD_ADDR_OWVAR 20
65484: PUSH
65485: LD_INT 0
65487: ST_TO_ADDR
// uc_nation := 0 ;
65488: LD_ADDR_OWVAR 21
65492: PUSH
65493: LD_INT 0
65495: ST_TO_ADDR
// hc_class := class_fish ;
65496: LD_ADDR_OWVAR 28
65500: PUSH
65501: LD_INT 20
65503: ST_TO_ADDR
// hc_gallery :=  ;
65504: LD_ADDR_OWVAR 33
65508: PUSH
65509: LD_STRING 
65511: ST_TO_ADDR
// end ;
65512: LD_VAR 0 1
65516: RET
// export function PrepareBird ( ) ; begin
65517: LD_INT 0
65519: PPUSH
// uc_side := 0 ;
65520: LD_ADDR_OWVAR 20
65524: PUSH
65525: LD_INT 0
65527: ST_TO_ADDR
// uc_nation := 0 ;
65528: LD_ADDR_OWVAR 21
65532: PUSH
65533: LD_INT 0
65535: ST_TO_ADDR
// hc_class := class_phororhacos ;
65536: LD_ADDR_OWVAR 28
65540: PUSH
65541: LD_INT 18
65543: ST_TO_ADDR
// hc_gallery :=  ;
65544: LD_ADDR_OWVAR 33
65548: PUSH
65549: LD_STRING 
65551: ST_TO_ADDR
// end ;
65552: LD_VAR 0 1
65556: RET
// export function PrepareHorse ( ) ; begin
65557: LD_INT 0
65559: PPUSH
// uc_side := 0 ;
65560: LD_ADDR_OWVAR 20
65564: PUSH
65565: LD_INT 0
65567: ST_TO_ADDR
// uc_nation := 0 ;
65568: LD_ADDR_OWVAR 21
65572: PUSH
65573: LD_INT 0
65575: ST_TO_ADDR
// hc_class := class_horse ;
65576: LD_ADDR_OWVAR 28
65580: PUSH
65581: LD_INT 21
65583: ST_TO_ADDR
// hc_gallery :=  ;
65584: LD_ADDR_OWVAR 33
65588: PUSH
65589: LD_STRING 
65591: ST_TO_ADDR
// end ;
65592: LD_VAR 0 1
65596: RET
// export function PrepareMastodont ( ) ; begin
65597: LD_INT 0
65599: PPUSH
// uc_side := 0 ;
65600: LD_ADDR_OWVAR 20
65604: PUSH
65605: LD_INT 0
65607: ST_TO_ADDR
// uc_nation := 0 ;
65608: LD_ADDR_OWVAR 21
65612: PUSH
65613: LD_INT 0
65615: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65616: LD_ADDR_OWVAR 37
65620: PUSH
65621: LD_INT 31
65623: ST_TO_ADDR
// vc_control := control_rider ;
65624: LD_ADDR_OWVAR 38
65628: PUSH
65629: LD_INT 4
65631: ST_TO_ADDR
// end ;
65632: LD_VAR 0 1
65636: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65637: LD_INT 0
65639: PPUSH
65640: PPUSH
65641: PPUSH
// uc_side = 0 ;
65642: LD_ADDR_OWVAR 20
65646: PUSH
65647: LD_INT 0
65649: ST_TO_ADDR
// uc_nation = 0 ;
65650: LD_ADDR_OWVAR 21
65654: PUSH
65655: LD_INT 0
65657: ST_TO_ADDR
// InitHc_All ( ) ;
65658: CALL_OW 584
// InitVc ;
65662: CALL_OW 20
// if mastodonts then
65666: LD_VAR 0 6
65670: IFFALSE 65737
// for i = 1 to mastodonts do
65672: LD_ADDR_VAR 0 11
65676: PUSH
65677: DOUBLE
65678: LD_INT 1
65680: DEC
65681: ST_TO_ADDR
65682: LD_VAR 0 6
65686: PUSH
65687: FOR_TO
65688: IFFALSE 65735
// begin vc_chassis := 31 ;
65690: LD_ADDR_OWVAR 37
65694: PUSH
65695: LD_INT 31
65697: ST_TO_ADDR
// vc_control := control_rider ;
65698: LD_ADDR_OWVAR 38
65702: PUSH
65703: LD_INT 4
65705: ST_TO_ADDR
// animal := CreateVehicle ;
65706: LD_ADDR_VAR 0 12
65710: PUSH
65711: CALL_OW 45
65715: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65716: LD_VAR 0 12
65720: PPUSH
65721: LD_VAR 0 8
65725: PPUSH
65726: LD_INT 0
65728: PPUSH
65729: CALL 67872 0 3
// end ;
65733: GO 65687
65735: POP
65736: POP
// if horses then
65737: LD_VAR 0 5
65741: IFFALSE 65808
// for i = 1 to horses do
65743: LD_ADDR_VAR 0 11
65747: PUSH
65748: DOUBLE
65749: LD_INT 1
65751: DEC
65752: ST_TO_ADDR
65753: LD_VAR 0 5
65757: PUSH
65758: FOR_TO
65759: IFFALSE 65806
// begin hc_class := 21 ;
65761: LD_ADDR_OWVAR 28
65765: PUSH
65766: LD_INT 21
65768: ST_TO_ADDR
// hc_gallery :=  ;
65769: LD_ADDR_OWVAR 33
65773: PUSH
65774: LD_STRING 
65776: ST_TO_ADDR
// animal := CreateHuman ;
65777: LD_ADDR_VAR 0 12
65781: PUSH
65782: CALL_OW 44
65786: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65787: LD_VAR 0 12
65791: PPUSH
65792: LD_VAR 0 8
65796: PPUSH
65797: LD_INT 0
65799: PPUSH
65800: CALL 67872 0 3
// end ;
65804: GO 65758
65806: POP
65807: POP
// if birds then
65808: LD_VAR 0 1
65812: IFFALSE 65879
// for i = 1 to birds do
65814: LD_ADDR_VAR 0 11
65818: PUSH
65819: DOUBLE
65820: LD_INT 1
65822: DEC
65823: ST_TO_ADDR
65824: LD_VAR 0 1
65828: PUSH
65829: FOR_TO
65830: IFFALSE 65877
// begin hc_class = 18 ;
65832: LD_ADDR_OWVAR 28
65836: PUSH
65837: LD_INT 18
65839: ST_TO_ADDR
// hc_gallery =  ;
65840: LD_ADDR_OWVAR 33
65844: PUSH
65845: LD_STRING 
65847: ST_TO_ADDR
// animal := CreateHuman ;
65848: LD_ADDR_VAR 0 12
65852: PUSH
65853: CALL_OW 44
65857: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65858: LD_VAR 0 12
65862: PPUSH
65863: LD_VAR 0 8
65867: PPUSH
65868: LD_INT 0
65870: PPUSH
65871: CALL 67872 0 3
// end ;
65875: GO 65829
65877: POP
65878: POP
// if tigers then
65879: LD_VAR 0 2
65883: IFFALSE 65967
// for i = 1 to tigers do
65885: LD_ADDR_VAR 0 11
65889: PUSH
65890: DOUBLE
65891: LD_INT 1
65893: DEC
65894: ST_TO_ADDR
65895: LD_VAR 0 2
65899: PUSH
65900: FOR_TO
65901: IFFALSE 65965
// begin hc_class = class_tiger ;
65903: LD_ADDR_OWVAR 28
65907: PUSH
65908: LD_INT 14
65910: ST_TO_ADDR
// hc_gallery =  ;
65911: LD_ADDR_OWVAR 33
65915: PUSH
65916: LD_STRING 
65918: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65919: LD_ADDR_OWVAR 35
65923: PUSH
65924: LD_INT 7
65926: NEG
65927: PPUSH
65928: LD_INT 7
65930: PPUSH
65931: CALL_OW 12
65935: ST_TO_ADDR
// animal := CreateHuman ;
65936: LD_ADDR_VAR 0 12
65940: PUSH
65941: CALL_OW 44
65945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65946: LD_VAR 0 12
65950: PPUSH
65951: LD_VAR 0 8
65955: PPUSH
65956: LD_INT 0
65958: PPUSH
65959: CALL 67872 0 3
// end ;
65963: GO 65900
65965: POP
65966: POP
// if apemans then
65967: LD_VAR 0 3
65971: IFFALSE 66094
// for i = 1 to apemans do
65973: LD_ADDR_VAR 0 11
65977: PUSH
65978: DOUBLE
65979: LD_INT 1
65981: DEC
65982: ST_TO_ADDR
65983: LD_VAR 0 3
65987: PUSH
65988: FOR_TO
65989: IFFALSE 66092
// begin hc_class = class_apeman ;
65991: LD_ADDR_OWVAR 28
65995: PUSH
65996: LD_INT 12
65998: ST_TO_ADDR
// hc_gallery =  ;
65999: LD_ADDR_OWVAR 33
66003: PUSH
66004: LD_STRING 
66006: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66007: LD_ADDR_OWVAR 35
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PPUSH
66016: LD_INT 2
66018: PPUSH
66019: CALL_OW 12
66023: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66024: LD_ADDR_OWVAR 31
66028: PUSH
66029: LD_INT 1
66031: PPUSH
66032: LD_INT 3
66034: PPUSH
66035: CALL_OW 12
66039: PUSH
66040: LD_INT 1
66042: PPUSH
66043: LD_INT 3
66045: PPUSH
66046: CALL_OW 12
66050: PUSH
66051: LD_INT 0
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: ST_TO_ADDR
// animal := CreateHuman ;
66063: LD_ADDR_VAR 0 12
66067: PUSH
66068: CALL_OW 44
66072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66073: LD_VAR 0 12
66077: PPUSH
66078: LD_VAR 0 8
66082: PPUSH
66083: LD_INT 0
66085: PPUSH
66086: CALL 67872 0 3
// end ;
66090: GO 65988
66092: POP
66093: POP
// if enchidnas then
66094: LD_VAR 0 4
66098: IFFALSE 66165
// for i = 1 to enchidnas do
66100: LD_ADDR_VAR 0 11
66104: PUSH
66105: DOUBLE
66106: LD_INT 1
66108: DEC
66109: ST_TO_ADDR
66110: LD_VAR 0 4
66114: PUSH
66115: FOR_TO
66116: IFFALSE 66163
// begin hc_class = 13 ;
66118: LD_ADDR_OWVAR 28
66122: PUSH
66123: LD_INT 13
66125: ST_TO_ADDR
// hc_gallery =  ;
66126: LD_ADDR_OWVAR 33
66130: PUSH
66131: LD_STRING 
66133: ST_TO_ADDR
// animal := CreateHuman ;
66134: LD_ADDR_VAR 0 12
66138: PUSH
66139: CALL_OW 44
66143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66144: LD_VAR 0 12
66148: PPUSH
66149: LD_VAR 0 8
66153: PPUSH
66154: LD_INT 0
66156: PPUSH
66157: CALL 67872 0 3
// end ;
66161: GO 66115
66163: POP
66164: POP
// if fishes then
66165: LD_VAR 0 7
66169: IFFALSE 66236
// for i = 1 to fishes do
66171: LD_ADDR_VAR 0 11
66175: PUSH
66176: DOUBLE
66177: LD_INT 1
66179: DEC
66180: ST_TO_ADDR
66181: LD_VAR 0 7
66185: PUSH
66186: FOR_TO
66187: IFFALSE 66234
// begin hc_class = 20 ;
66189: LD_ADDR_OWVAR 28
66193: PUSH
66194: LD_INT 20
66196: ST_TO_ADDR
// hc_gallery =  ;
66197: LD_ADDR_OWVAR 33
66201: PUSH
66202: LD_STRING 
66204: ST_TO_ADDR
// animal := CreateHuman ;
66205: LD_ADDR_VAR 0 12
66209: PUSH
66210: CALL_OW 44
66214: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66215: LD_VAR 0 12
66219: PPUSH
66220: LD_VAR 0 9
66224: PPUSH
66225: LD_INT 0
66227: PPUSH
66228: CALL 67872 0 3
// end ;
66232: GO 66186
66234: POP
66235: POP
// end ;
66236: LD_VAR 0 10
66240: RET
// export function WantHeal ( sci , unit ) ; begin
66241: LD_INT 0
66243: PPUSH
// if GetTaskList ( sci ) > 0 then
66244: LD_VAR 0 1
66248: PPUSH
66249: CALL_OW 437
66253: PUSH
66254: LD_INT 0
66256: GREATER
66257: IFFALSE 66327
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66259: LD_VAR 0 1
66263: PPUSH
66264: CALL_OW 437
66268: PUSH
66269: LD_INT 1
66271: ARRAY
66272: PUSH
66273: LD_INT 1
66275: ARRAY
66276: PUSH
66277: LD_STRING l
66279: EQUAL
66280: PUSH
66281: LD_VAR 0 1
66285: PPUSH
66286: CALL_OW 437
66290: PUSH
66291: LD_INT 1
66293: ARRAY
66294: PUSH
66295: LD_INT 4
66297: ARRAY
66298: PUSH
66299: LD_VAR 0 2
66303: EQUAL
66304: AND
66305: IFFALSE 66317
// result := true else
66307: LD_ADDR_VAR 0 3
66311: PUSH
66312: LD_INT 1
66314: ST_TO_ADDR
66315: GO 66325
// result := false ;
66317: LD_ADDR_VAR 0 3
66321: PUSH
66322: LD_INT 0
66324: ST_TO_ADDR
// end else
66325: GO 66335
// result := false ;
66327: LD_ADDR_VAR 0 3
66331: PUSH
66332: LD_INT 0
66334: ST_TO_ADDR
// end ;
66335: LD_VAR 0 3
66339: RET
// export function HealTarget ( sci ) ; begin
66340: LD_INT 0
66342: PPUSH
// if not sci then
66343: LD_VAR 0 1
66347: NOT
66348: IFFALSE 66352
// exit ;
66350: GO 66417
// result := 0 ;
66352: LD_ADDR_VAR 0 2
66356: PUSH
66357: LD_INT 0
66359: ST_TO_ADDR
// if GetTaskList ( sci ) then
66360: LD_VAR 0 1
66364: PPUSH
66365: CALL_OW 437
66369: IFFALSE 66417
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66371: LD_VAR 0 1
66375: PPUSH
66376: CALL_OW 437
66380: PUSH
66381: LD_INT 1
66383: ARRAY
66384: PUSH
66385: LD_INT 1
66387: ARRAY
66388: PUSH
66389: LD_STRING l
66391: EQUAL
66392: IFFALSE 66417
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66394: LD_ADDR_VAR 0 2
66398: PUSH
66399: LD_VAR 0 1
66403: PPUSH
66404: CALL_OW 437
66408: PUSH
66409: LD_INT 1
66411: ARRAY
66412: PUSH
66413: LD_INT 4
66415: ARRAY
66416: ST_TO_ADDR
// end ;
66417: LD_VAR 0 2
66421: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66422: LD_INT 0
66424: PPUSH
66425: PPUSH
66426: PPUSH
66427: PPUSH
// if not base_units then
66428: LD_VAR 0 1
66432: NOT
66433: IFFALSE 66437
// exit ;
66435: GO 66524
// result := false ;
66437: LD_ADDR_VAR 0 2
66441: PUSH
66442: LD_INT 0
66444: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66445: LD_ADDR_VAR 0 5
66449: PUSH
66450: LD_VAR 0 1
66454: PPUSH
66455: LD_INT 21
66457: PUSH
66458: LD_INT 3
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PPUSH
66465: CALL_OW 72
66469: ST_TO_ADDR
// if not tmp then
66470: LD_VAR 0 5
66474: NOT
66475: IFFALSE 66479
// exit ;
66477: GO 66524
// for i in tmp do
66479: LD_ADDR_VAR 0 3
66483: PUSH
66484: LD_VAR 0 5
66488: PUSH
66489: FOR_IN
66490: IFFALSE 66522
// begin result := EnemyInRange ( i , 22 ) ;
66492: LD_ADDR_VAR 0 2
66496: PUSH
66497: LD_VAR 0 3
66501: PPUSH
66502: LD_INT 22
66504: PPUSH
66505: CALL 64193 0 2
66509: ST_TO_ADDR
// if result then
66510: LD_VAR 0 2
66514: IFFALSE 66520
// exit ;
66516: POP
66517: POP
66518: GO 66524
// end ;
66520: GO 66489
66522: POP
66523: POP
// end ;
66524: LD_VAR 0 2
66528: RET
// export function FilterByTag ( units , tag ) ; begin
66529: LD_INT 0
66531: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66532: LD_ADDR_VAR 0 3
66536: PUSH
66537: LD_VAR 0 1
66541: PPUSH
66542: LD_INT 120
66544: PUSH
66545: LD_VAR 0 2
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PPUSH
66554: CALL_OW 72
66558: ST_TO_ADDR
// end ;
66559: LD_VAR 0 3
66563: RET
// export function IsDriver ( un ) ; begin
66564: LD_INT 0
66566: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66567: LD_ADDR_VAR 0 2
66571: PUSH
66572: LD_VAR 0 1
66576: PUSH
66577: LD_INT 55
66579: PUSH
66580: EMPTY
66581: LIST
66582: PPUSH
66583: CALL_OW 69
66587: IN
66588: ST_TO_ADDR
// end ;
66589: LD_VAR 0 2
66593: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66594: LD_INT 0
66596: PPUSH
66597: PPUSH
// list := [ ] ;
66598: LD_ADDR_VAR 0 5
66602: PUSH
66603: EMPTY
66604: ST_TO_ADDR
// case d of 0 :
66605: LD_VAR 0 3
66609: PUSH
66610: LD_INT 0
66612: DOUBLE
66613: EQUAL
66614: IFTRUE 66618
66616: GO 66751
66618: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66619: LD_ADDR_VAR 0 5
66623: PUSH
66624: LD_VAR 0 1
66628: PUSH
66629: LD_INT 4
66631: MINUS
66632: PUSH
66633: LD_VAR 0 2
66637: PUSH
66638: LD_INT 4
66640: MINUS
66641: PUSH
66642: LD_INT 2
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: PUSH
66650: LD_VAR 0 1
66654: PUSH
66655: LD_INT 3
66657: MINUS
66658: PUSH
66659: LD_VAR 0 2
66663: PUSH
66664: LD_INT 1
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: LIST
66671: PUSH
66672: LD_VAR 0 1
66676: PUSH
66677: LD_INT 4
66679: PLUS
66680: PUSH
66681: LD_VAR 0 2
66685: PUSH
66686: LD_INT 4
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: LIST
66693: PUSH
66694: LD_VAR 0 1
66698: PUSH
66699: LD_INT 3
66701: PLUS
66702: PUSH
66703: LD_VAR 0 2
66707: PUSH
66708: LD_INT 3
66710: PLUS
66711: PUSH
66712: LD_INT 5
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: LIST
66719: PUSH
66720: LD_VAR 0 1
66724: PUSH
66725: LD_VAR 0 2
66729: PUSH
66730: LD_INT 4
66732: PLUS
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: LIST
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: ST_TO_ADDR
// end ; 1 :
66749: GO 67449
66751: LD_INT 1
66753: DOUBLE
66754: EQUAL
66755: IFTRUE 66759
66757: GO 66892
66759: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66760: LD_ADDR_VAR 0 5
66764: PUSH
66765: LD_VAR 0 1
66769: PUSH
66770: LD_VAR 0 2
66774: PUSH
66775: LD_INT 4
66777: MINUS
66778: PUSH
66779: LD_INT 3
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: LIST
66786: PUSH
66787: LD_VAR 0 1
66791: PUSH
66792: LD_INT 3
66794: MINUS
66795: PUSH
66796: LD_VAR 0 2
66800: PUSH
66801: LD_INT 3
66803: MINUS
66804: PUSH
66805: LD_INT 2
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: LIST
66812: PUSH
66813: LD_VAR 0 1
66817: PUSH
66818: LD_INT 4
66820: MINUS
66821: PUSH
66822: LD_VAR 0 2
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: LIST
66834: PUSH
66835: LD_VAR 0 1
66839: PUSH
66840: LD_VAR 0 2
66844: PUSH
66845: LD_INT 3
66847: PLUS
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: LIST
66856: PUSH
66857: LD_VAR 0 1
66861: PUSH
66862: LD_INT 4
66864: PLUS
66865: PUSH
66866: LD_VAR 0 2
66870: PUSH
66871: LD_INT 4
66873: PLUS
66874: PUSH
66875: LD_INT 5
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: LIST
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: ST_TO_ADDR
// end ; 2 :
66890: GO 67449
66892: LD_INT 2
66894: DOUBLE
66895: EQUAL
66896: IFTRUE 66900
66898: GO 67029
66900: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66901: LD_ADDR_VAR 0 5
66905: PUSH
66906: LD_VAR 0 1
66910: PUSH
66911: LD_VAR 0 2
66915: PUSH
66916: LD_INT 3
66918: MINUS
66919: PUSH
66920: LD_INT 3
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: LIST
66927: PUSH
66928: LD_VAR 0 1
66932: PUSH
66933: LD_INT 4
66935: PLUS
66936: PUSH
66937: LD_VAR 0 2
66941: PUSH
66942: LD_INT 4
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: LIST
66949: PUSH
66950: LD_VAR 0 1
66954: PUSH
66955: LD_VAR 0 2
66959: PUSH
66960: LD_INT 4
66962: PLUS
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: LIST
66971: PUSH
66972: LD_VAR 0 1
66976: PUSH
66977: LD_INT 3
66979: MINUS
66980: PUSH
66981: LD_VAR 0 2
66985: PUSH
66986: LD_INT 1
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: LIST
66993: PUSH
66994: LD_VAR 0 1
66998: PUSH
66999: LD_INT 4
67001: MINUS
67002: PUSH
67003: LD_VAR 0 2
67007: PUSH
67008: LD_INT 4
67010: MINUS
67011: PUSH
67012: LD_INT 2
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: ST_TO_ADDR
// end ; 3 :
67027: GO 67449
67029: LD_INT 3
67031: DOUBLE
67032: EQUAL
67033: IFTRUE 67037
67035: GO 67170
67037: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67038: LD_ADDR_VAR 0 5
67042: PUSH
67043: LD_VAR 0 1
67047: PUSH
67048: LD_INT 3
67050: PLUS
67051: PUSH
67052: LD_VAR 0 2
67056: PUSH
67057: LD_INT 4
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: LIST
67064: PUSH
67065: LD_VAR 0 1
67069: PUSH
67070: LD_INT 4
67072: PLUS
67073: PUSH
67074: LD_VAR 0 2
67078: PUSH
67079: LD_INT 4
67081: PLUS
67082: PUSH
67083: LD_INT 5
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: LIST
67090: PUSH
67091: LD_VAR 0 1
67095: PUSH
67096: LD_INT 4
67098: MINUS
67099: PUSH
67100: LD_VAR 0 2
67104: PUSH
67105: LD_INT 1
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: LIST
67112: PUSH
67113: LD_VAR 0 1
67117: PUSH
67118: LD_VAR 0 2
67122: PUSH
67123: LD_INT 4
67125: MINUS
67126: PUSH
67127: LD_INT 3
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: LIST
67134: PUSH
67135: LD_VAR 0 1
67139: PUSH
67140: LD_INT 3
67142: MINUS
67143: PUSH
67144: LD_VAR 0 2
67148: PUSH
67149: LD_INT 3
67151: MINUS
67152: PUSH
67153: LD_INT 2
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: LIST
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: ST_TO_ADDR
// end ; 4 :
67168: GO 67449
67170: LD_INT 4
67172: DOUBLE
67173: EQUAL
67174: IFTRUE 67178
67176: GO 67311
67178: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67179: LD_ADDR_VAR 0 5
67183: PUSH
67184: LD_VAR 0 1
67188: PUSH
67189: LD_VAR 0 2
67193: PUSH
67194: LD_INT 4
67196: PLUS
67197: PUSH
67198: LD_INT 0
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: LIST
67205: PUSH
67206: LD_VAR 0 1
67210: PUSH
67211: LD_INT 3
67213: PLUS
67214: PUSH
67215: LD_VAR 0 2
67219: PUSH
67220: LD_INT 3
67222: PLUS
67223: PUSH
67224: LD_INT 5
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: PUSH
67232: LD_VAR 0 1
67236: PUSH
67237: LD_INT 4
67239: PLUS
67240: PUSH
67241: LD_VAR 0 2
67245: PUSH
67246: LD_INT 4
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: LIST
67253: PUSH
67254: LD_VAR 0 1
67258: PUSH
67259: LD_VAR 0 2
67263: PUSH
67264: LD_INT 3
67266: MINUS
67267: PUSH
67268: LD_INT 3
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: LIST
67275: PUSH
67276: LD_VAR 0 1
67280: PUSH
67281: LD_INT 4
67283: MINUS
67284: PUSH
67285: LD_VAR 0 2
67289: PUSH
67290: LD_INT 4
67292: MINUS
67293: PUSH
67294: LD_INT 2
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: LIST
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: ST_TO_ADDR
// end ; 5 :
67309: GO 67449
67311: LD_INT 5
67313: DOUBLE
67314: EQUAL
67315: IFTRUE 67319
67317: GO 67448
67319: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67320: LD_ADDR_VAR 0 5
67324: PUSH
67325: LD_VAR 0 1
67329: PUSH
67330: LD_INT 4
67332: MINUS
67333: PUSH
67334: LD_VAR 0 2
67338: PUSH
67339: LD_INT 1
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: LIST
67346: PUSH
67347: LD_VAR 0 1
67351: PUSH
67352: LD_VAR 0 2
67356: PUSH
67357: LD_INT 4
67359: MINUS
67360: PUSH
67361: LD_INT 3
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: PUSH
67369: LD_VAR 0 1
67373: PUSH
67374: LD_INT 4
67376: PLUS
67377: PUSH
67378: LD_VAR 0 2
67382: PUSH
67383: LD_INT 4
67385: PLUS
67386: PUSH
67387: LD_INT 5
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: LIST
67394: PUSH
67395: LD_VAR 0 1
67399: PUSH
67400: LD_INT 3
67402: PLUS
67403: PUSH
67404: LD_VAR 0 2
67408: PUSH
67409: LD_INT 4
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: PUSH
67417: LD_VAR 0 1
67421: PUSH
67422: LD_VAR 0 2
67426: PUSH
67427: LD_INT 3
67429: PLUS
67430: PUSH
67431: LD_INT 0
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: LIST
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: ST_TO_ADDR
// end ; end ;
67446: GO 67449
67448: POP
// result := list ;
67449: LD_ADDR_VAR 0 4
67453: PUSH
67454: LD_VAR 0 5
67458: ST_TO_ADDR
// end ;
67459: LD_VAR 0 4
67463: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67464: LD_INT 0
67466: PPUSH
67467: PPUSH
67468: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67469: LD_VAR 0 1
67473: NOT
67474: PUSH
67475: LD_VAR 0 2
67479: PUSH
67480: LD_INT 1
67482: PUSH
67483: LD_INT 2
67485: PUSH
67486: LD_INT 3
67488: PUSH
67489: LD_INT 4
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: IN
67498: NOT
67499: OR
67500: IFFALSE 67504
// exit ;
67502: GO 67596
// tmp := [ ] ;
67504: LD_ADDR_VAR 0 5
67508: PUSH
67509: EMPTY
67510: ST_TO_ADDR
// for i in units do
67511: LD_ADDR_VAR 0 4
67515: PUSH
67516: LD_VAR 0 1
67520: PUSH
67521: FOR_IN
67522: IFFALSE 67565
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67524: LD_ADDR_VAR 0 5
67528: PUSH
67529: LD_VAR 0 5
67533: PPUSH
67534: LD_VAR 0 5
67538: PUSH
67539: LD_INT 1
67541: PLUS
67542: PPUSH
67543: LD_VAR 0 4
67547: PPUSH
67548: LD_VAR 0 2
67552: PPUSH
67553: CALL_OW 259
67557: PPUSH
67558: CALL_OW 2
67562: ST_TO_ADDR
67563: GO 67521
67565: POP
67566: POP
// if not tmp then
67567: LD_VAR 0 5
67571: NOT
67572: IFFALSE 67576
// exit ;
67574: GO 67596
// result := SortListByListDesc ( units , tmp ) ;
67576: LD_ADDR_VAR 0 3
67580: PUSH
67581: LD_VAR 0 1
67585: PPUSH
67586: LD_VAR 0 5
67590: PPUSH
67591: CALL_OW 77
67595: ST_TO_ADDR
// end ;
67596: LD_VAR 0 3
67600: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67601: LD_INT 0
67603: PPUSH
67604: PPUSH
67605: PPUSH
// result := false ;
67606: LD_ADDR_VAR 0 3
67610: PUSH
67611: LD_INT 0
67613: ST_TO_ADDR
// x := GetX ( building ) ;
67614: LD_ADDR_VAR 0 4
67618: PUSH
67619: LD_VAR 0 2
67623: PPUSH
67624: CALL_OW 250
67628: ST_TO_ADDR
// y := GetY ( building ) ;
67629: LD_ADDR_VAR 0 5
67633: PUSH
67634: LD_VAR 0 2
67638: PPUSH
67639: CALL_OW 251
67643: ST_TO_ADDR
// if not building or not x or not y then
67644: LD_VAR 0 2
67648: NOT
67649: PUSH
67650: LD_VAR 0 4
67654: NOT
67655: OR
67656: PUSH
67657: LD_VAR 0 5
67661: NOT
67662: OR
67663: IFFALSE 67667
// exit ;
67665: GO 67759
// if GetTaskList ( unit ) then
67667: LD_VAR 0 1
67671: PPUSH
67672: CALL_OW 437
67676: IFFALSE 67759
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67678: LD_STRING e
67680: PUSH
67681: LD_VAR 0 1
67685: PPUSH
67686: CALL_OW 437
67690: PUSH
67691: LD_INT 1
67693: ARRAY
67694: PUSH
67695: LD_INT 1
67697: ARRAY
67698: EQUAL
67699: PUSH
67700: LD_VAR 0 4
67704: PUSH
67705: LD_VAR 0 1
67709: PPUSH
67710: CALL_OW 437
67714: PUSH
67715: LD_INT 1
67717: ARRAY
67718: PUSH
67719: LD_INT 2
67721: ARRAY
67722: EQUAL
67723: AND
67724: PUSH
67725: LD_VAR 0 5
67729: PUSH
67730: LD_VAR 0 1
67734: PPUSH
67735: CALL_OW 437
67739: PUSH
67740: LD_INT 1
67742: ARRAY
67743: PUSH
67744: LD_INT 3
67746: ARRAY
67747: EQUAL
67748: AND
67749: IFFALSE 67759
// result := true end ;
67751: LD_ADDR_VAR 0 3
67755: PUSH
67756: LD_INT 1
67758: ST_TO_ADDR
// end ;
67759: LD_VAR 0 3
67763: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67764: LD_INT 0
67766: PPUSH
// result := false ;
67767: LD_ADDR_VAR 0 4
67771: PUSH
67772: LD_INT 0
67774: ST_TO_ADDR
// if GetTaskList ( unit ) then
67775: LD_VAR 0 1
67779: PPUSH
67780: CALL_OW 437
67784: IFFALSE 67867
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67786: LD_STRING M
67788: PUSH
67789: LD_VAR 0 1
67793: PPUSH
67794: CALL_OW 437
67798: PUSH
67799: LD_INT 1
67801: ARRAY
67802: PUSH
67803: LD_INT 1
67805: ARRAY
67806: EQUAL
67807: PUSH
67808: LD_VAR 0 2
67812: PUSH
67813: LD_VAR 0 1
67817: PPUSH
67818: CALL_OW 437
67822: PUSH
67823: LD_INT 1
67825: ARRAY
67826: PUSH
67827: LD_INT 2
67829: ARRAY
67830: EQUAL
67831: AND
67832: PUSH
67833: LD_VAR 0 3
67837: PUSH
67838: LD_VAR 0 1
67842: PPUSH
67843: CALL_OW 437
67847: PUSH
67848: LD_INT 1
67850: ARRAY
67851: PUSH
67852: LD_INT 3
67854: ARRAY
67855: EQUAL
67856: AND
67857: IFFALSE 67867
// result := true ;
67859: LD_ADDR_VAR 0 4
67863: PUSH
67864: LD_INT 1
67866: ST_TO_ADDR
// end ; end ;
67867: LD_VAR 0 4
67871: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67872: LD_INT 0
67874: PPUSH
67875: PPUSH
67876: PPUSH
67877: PPUSH
// if not unit or not area then
67878: LD_VAR 0 1
67882: NOT
67883: PUSH
67884: LD_VAR 0 2
67888: NOT
67889: OR
67890: IFFALSE 67894
// exit ;
67892: GO 68058
// tmp := AreaToList ( area , i ) ;
67894: LD_ADDR_VAR 0 6
67898: PUSH
67899: LD_VAR 0 2
67903: PPUSH
67904: LD_VAR 0 5
67908: PPUSH
67909: CALL_OW 517
67913: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67914: LD_ADDR_VAR 0 5
67918: PUSH
67919: DOUBLE
67920: LD_INT 1
67922: DEC
67923: ST_TO_ADDR
67924: LD_VAR 0 6
67928: PUSH
67929: LD_INT 1
67931: ARRAY
67932: PUSH
67933: FOR_TO
67934: IFFALSE 68056
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67936: LD_ADDR_VAR 0 7
67940: PUSH
67941: LD_VAR 0 6
67945: PUSH
67946: LD_INT 1
67948: ARRAY
67949: PUSH
67950: LD_VAR 0 5
67954: ARRAY
67955: PUSH
67956: LD_VAR 0 6
67960: PUSH
67961: LD_INT 2
67963: ARRAY
67964: PUSH
67965: LD_VAR 0 5
67969: ARRAY
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67975: LD_VAR 0 7
67979: PUSH
67980: LD_INT 1
67982: ARRAY
67983: PPUSH
67984: LD_VAR 0 7
67988: PUSH
67989: LD_INT 2
67991: ARRAY
67992: PPUSH
67993: CALL_OW 428
67997: PUSH
67998: LD_INT 0
68000: EQUAL
68001: IFFALSE 68054
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68003: LD_VAR 0 1
68007: PPUSH
68008: LD_VAR 0 7
68012: PUSH
68013: LD_INT 1
68015: ARRAY
68016: PPUSH
68017: LD_VAR 0 7
68021: PUSH
68022: LD_INT 2
68024: ARRAY
68025: PPUSH
68026: LD_VAR 0 3
68030: PPUSH
68031: CALL_OW 48
// result := IsPlaced ( unit ) ;
68035: LD_ADDR_VAR 0 4
68039: PUSH
68040: LD_VAR 0 1
68044: PPUSH
68045: CALL_OW 305
68049: ST_TO_ADDR
// exit ;
68050: POP
68051: POP
68052: GO 68058
// end ; end ;
68054: GO 67933
68056: POP
68057: POP
// end ;
68058: LD_VAR 0 4
68062: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68063: LD_INT 0
68065: PPUSH
68066: PPUSH
68067: PPUSH
// if not side or side > 8 then
68068: LD_VAR 0 1
68072: NOT
68073: PUSH
68074: LD_VAR 0 1
68078: PUSH
68079: LD_INT 8
68081: GREATER
68082: OR
68083: IFFALSE 68087
// exit ;
68085: GO 68274
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68087: LD_ADDR_VAR 0 4
68091: PUSH
68092: LD_INT 22
68094: PUSH
68095: LD_VAR 0 1
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 21
68106: PUSH
68107: LD_INT 3
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PPUSH
68118: CALL_OW 69
68122: ST_TO_ADDR
// if not tmp then
68123: LD_VAR 0 4
68127: NOT
68128: IFFALSE 68132
// exit ;
68130: GO 68274
// enable_addtolog := true ;
68132: LD_ADDR_OWVAR 81
68136: PUSH
68137: LD_INT 1
68139: ST_TO_ADDR
// AddToLog ( [ ) ;
68140: LD_STRING [
68142: PPUSH
68143: CALL_OW 561
// for i in tmp do
68147: LD_ADDR_VAR 0 3
68151: PUSH
68152: LD_VAR 0 4
68156: PUSH
68157: FOR_IN
68158: IFFALSE 68265
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68160: LD_STRING [
68162: PUSH
68163: LD_VAR 0 3
68167: PPUSH
68168: CALL_OW 266
68172: STR
68173: PUSH
68174: LD_STRING , 
68176: STR
68177: PUSH
68178: LD_VAR 0 3
68182: PPUSH
68183: CALL_OW 250
68187: STR
68188: PUSH
68189: LD_STRING , 
68191: STR
68192: PUSH
68193: LD_VAR 0 3
68197: PPUSH
68198: CALL_OW 251
68202: STR
68203: PUSH
68204: LD_STRING , 
68206: STR
68207: PUSH
68208: LD_VAR 0 3
68212: PPUSH
68213: CALL_OW 254
68217: STR
68218: PUSH
68219: LD_STRING , 
68221: STR
68222: PUSH
68223: LD_VAR 0 3
68227: PPUSH
68228: LD_INT 1
68230: PPUSH
68231: CALL_OW 268
68235: STR
68236: PUSH
68237: LD_STRING , 
68239: STR
68240: PUSH
68241: LD_VAR 0 3
68245: PPUSH
68246: LD_INT 2
68248: PPUSH
68249: CALL_OW 268
68253: STR
68254: PUSH
68255: LD_STRING ],
68257: STR
68258: PPUSH
68259: CALL_OW 561
// end ;
68263: GO 68157
68265: POP
68266: POP
// AddToLog ( ]; ) ;
68267: LD_STRING ];
68269: PPUSH
68270: CALL_OW 561
// end ;
68274: LD_VAR 0 2
68278: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68279: LD_INT 0
68281: PPUSH
68282: PPUSH
68283: PPUSH
68284: PPUSH
68285: PPUSH
// if not area or not rate or not max then
68286: LD_VAR 0 1
68290: NOT
68291: PUSH
68292: LD_VAR 0 2
68296: NOT
68297: OR
68298: PUSH
68299: LD_VAR 0 4
68303: NOT
68304: OR
68305: IFFALSE 68309
// exit ;
68307: GO 68498
// while 1 do
68309: LD_INT 1
68311: IFFALSE 68498
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68313: LD_ADDR_VAR 0 9
68317: PUSH
68318: LD_VAR 0 1
68322: PPUSH
68323: LD_INT 1
68325: PPUSH
68326: CALL_OW 287
68330: PUSH
68331: LD_INT 10
68333: MUL
68334: ST_TO_ADDR
// r := rate / 10 ;
68335: LD_ADDR_VAR 0 7
68339: PUSH
68340: LD_VAR 0 2
68344: PUSH
68345: LD_INT 10
68347: DIVREAL
68348: ST_TO_ADDR
// time := 1 1$00 ;
68349: LD_ADDR_VAR 0 8
68353: PUSH
68354: LD_INT 2100
68356: ST_TO_ADDR
// if amount < min then
68357: LD_VAR 0 9
68361: PUSH
68362: LD_VAR 0 3
68366: LESS
68367: IFFALSE 68385
// r := r * 2 else
68369: LD_ADDR_VAR 0 7
68373: PUSH
68374: LD_VAR 0 7
68378: PUSH
68379: LD_INT 2
68381: MUL
68382: ST_TO_ADDR
68383: GO 68411
// if amount > max then
68385: LD_VAR 0 9
68389: PUSH
68390: LD_VAR 0 4
68394: GREATER
68395: IFFALSE 68411
// r := r / 2 ;
68397: LD_ADDR_VAR 0 7
68401: PUSH
68402: LD_VAR 0 7
68406: PUSH
68407: LD_INT 2
68409: DIVREAL
68410: ST_TO_ADDR
// time := time / r ;
68411: LD_ADDR_VAR 0 8
68415: PUSH
68416: LD_VAR 0 8
68420: PUSH
68421: LD_VAR 0 7
68425: DIVREAL
68426: ST_TO_ADDR
// if time < 0 then
68427: LD_VAR 0 8
68431: PUSH
68432: LD_INT 0
68434: LESS
68435: IFFALSE 68452
// time := time * - 1 ;
68437: LD_ADDR_VAR 0 8
68441: PUSH
68442: LD_VAR 0 8
68446: PUSH
68447: LD_INT 1
68449: NEG
68450: MUL
68451: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68452: LD_VAR 0 8
68456: PUSH
68457: LD_INT 35
68459: PPUSH
68460: LD_INT 875
68462: PPUSH
68463: CALL_OW 12
68467: PLUS
68468: PPUSH
68469: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68473: LD_INT 1
68475: PPUSH
68476: LD_INT 5
68478: PPUSH
68479: CALL_OW 12
68483: PPUSH
68484: LD_VAR 0 1
68488: PPUSH
68489: LD_INT 1
68491: PPUSH
68492: CALL_OW 55
// end ;
68496: GO 68309
// end ;
68498: LD_VAR 0 5
68502: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68503: LD_INT 0
68505: PPUSH
68506: PPUSH
68507: PPUSH
68508: PPUSH
68509: PPUSH
68510: PPUSH
68511: PPUSH
68512: PPUSH
// if not turrets or not factories then
68513: LD_VAR 0 1
68517: NOT
68518: PUSH
68519: LD_VAR 0 2
68523: NOT
68524: OR
68525: IFFALSE 68529
// exit ;
68527: GO 68836
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68529: LD_ADDR_VAR 0 10
68533: PUSH
68534: LD_INT 5
68536: PUSH
68537: LD_INT 6
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 2
68546: PUSH
68547: LD_INT 4
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 3
68556: PUSH
68557: LD_INT 5
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 24
68571: PUSH
68572: LD_INT 25
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 23
68581: PUSH
68582: LD_INT 27
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 42
68595: PUSH
68596: LD_INT 43
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 44
68605: PUSH
68606: LD_INT 46
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 45
68615: PUSH
68616: LD_INT 47
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: LIST
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: LIST
68632: ST_TO_ADDR
// result := [ ] ;
68633: LD_ADDR_VAR 0 3
68637: PUSH
68638: EMPTY
68639: ST_TO_ADDR
// for i in turrets do
68640: LD_ADDR_VAR 0 4
68644: PUSH
68645: LD_VAR 0 1
68649: PUSH
68650: FOR_IN
68651: IFFALSE 68834
// begin nat := GetNation ( i ) ;
68653: LD_ADDR_VAR 0 7
68657: PUSH
68658: LD_VAR 0 4
68662: PPUSH
68663: CALL_OW 248
68667: ST_TO_ADDR
// weapon := 0 ;
68668: LD_ADDR_VAR 0 8
68672: PUSH
68673: LD_INT 0
68675: ST_TO_ADDR
// if not nat then
68676: LD_VAR 0 7
68680: NOT
68681: IFFALSE 68685
// continue ;
68683: GO 68650
// for j in list [ nat ] do
68685: LD_ADDR_VAR 0 5
68689: PUSH
68690: LD_VAR 0 10
68694: PUSH
68695: LD_VAR 0 7
68699: ARRAY
68700: PUSH
68701: FOR_IN
68702: IFFALSE 68743
// if GetBWeapon ( i ) = j [ 1 ] then
68704: LD_VAR 0 4
68708: PPUSH
68709: CALL_OW 269
68713: PUSH
68714: LD_VAR 0 5
68718: PUSH
68719: LD_INT 1
68721: ARRAY
68722: EQUAL
68723: IFFALSE 68741
// begin weapon := j [ 2 ] ;
68725: LD_ADDR_VAR 0 8
68729: PUSH
68730: LD_VAR 0 5
68734: PUSH
68735: LD_INT 2
68737: ARRAY
68738: ST_TO_ADDR
// break ;
68739: GO 68743
// end ;
68741: GO 68701
68743: POP
68744: POP
// if not weapon then
68745: LD_VAR 0 8
68749: NOT
68750: IFFALSE 68754
// continue ;
68752: GO 68650
// for k in factories do
68754: LD_ADDR_VAR 0 6
68758: PUSH
68759: LD_VAR 0 2
68763: PUSH
68764: FOR_IN
68765: IFFALSE 68830
// begin weapons := AvailableWeaponList ( k ) ;
68767: LD_ADDR_VAR 0 9
68771: PUSH
68772: LD_VAR 0 6
68776: PPUSH
68777: CALL_OW 478
68781: ST_TO_ADDR
// if not weapons then
68782: LD_VAR 0 9
68786: NOT
68787: IFFALSE 68791
// continue ;
68789: GO 68764
// if weapon in weapons then
68791: LD_VAR 0 8
68795: PUSH
68796: LD_VAR 0 9
68800: IN
68801: IFFALSE 68828
// begin result := [ i , weapon ] ;
68803: LD_ADDR_VAR 0 3
68807: PUSH
68808: LD_VAR 0 4
68812: PUSH
68813: LD_VAR 0 8
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: ST_TO_ADDR
// exit ;
68822: POP
68823: POP
68824: POP
68825: POP
68826: GO 68836
// end ; end ;
68828: GO 68764
68830: POP
68831: POP
// end ;
68832: GO 68650
68834: POP
68835: POP
// end ;
68836: LD_VAR 0 3
68840: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68841: LD_INT 0
68843: PPUSH
// if not side or side > 8 then
68844: LD_VAR 0 3
68848: NOT
68849: PUSH
68850: LD_VAR 0 3
68854: PUSH
68855: LD_INT 8
68857: GREATER
68858: OR
68859: IFFALSE 68863
// exit ;
68861: GO 68922
// if not range then
68863: LD_VAR 0 4
68867: NOT
68868: IFFALSE 68879
// range := - 12 ;
68870: LD_ADDR_VAR 0 4
68874: PUSH
68875: LD_INT 12
68877: NEG
68878: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68879: LD_VAR 0 1
68883: PPUSH
68884: LD_VAR 0 2
68888: PPUSH
68889: LD_VAR 0 3
68893: PPUSH
68894: LD_VAR 0 4
68898: PPUSH
68899: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68903: LD_VAR 0 1
68907: PPUSH
68908: LD_VAR 0 2
68912: PPUSH
68913: LD_VAR 0 3
68917: PPUSH
68918: CALL_OW 331
// end ;
68922: LD_VAR 0 5
68926: RET
// export function Video ( mode ) ; begin
68927: LD_INT 0
68929: PPUSH
// ingame_video = mode ;
68930: LD_ADDR_OWVAR 52
68934: PUSH
68935: LD_VAR 0 1
68939: ST_TO_ADDR
// interface_hidden = mode ;
68940: LD_ADDR_OWVAR 54
68944: PUSH
68945: LD_VAR 0 1
68949: ST_TO_ADDR
// end ;
68950: LD_VAR 0 2
68954: RET
// export function Join ( array , element ) ; begin
68955: LD_INT 0
68957: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68958: LD_ADDR_VAR 0 3
68962: PUSH
68963: LD_VAR 0 1
68967: PPUSH
68968: LD_VAR 0 1
68972: PUSH
68973: LD_INT 1
68975: PLUS
68976: PPUSH
68977: LD_VAR 0 2
68981: PPUSH
68982: CALL_OW 1
68986: ST_TO_ADDR
// end ;
68987: LD_VAR 0 3
68991: RET
// export function JoinUnion ( array , element ) ; begin
68992: LD_INT 0
68994: PPUSH
// result := array union element ;
68995: LD_ADDR_VAR 0 3
68999: PUSH
69000: LD_VAR 0 1
69004: PUSH
69005: LD_VAR 0 2
69009: UNION
69010: ST_TO_ADDR
// end ;
69011: LD_VAR 0 3
69015: RET
// export function GetBehemoths ( side ) ; begin
69016: LD_INT 0
69018: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69019: LD_ADDR_VAR 0 2
69023: PUSH
69024: LD_INT 22
69026: PUSH
69027: LD_VAR 0 1
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 31
69038: PUSH
69039: LD_INT 25
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PPUSH
69050: CALL_OW 69
69054: ST_TO_ADDR
// end ;
69055: LD_VAR 0 2
69059: RET
// export function Shuffle ( array ) ; var i , index ; begin
69060: LD_INT 0
69062: PPUSH
69063: PPUSH
69064: PPUSH
// result := [ ] ;
69065: LD_ADDR_VAR 0 2
69069: PUSH
69070: EMPTY
69071: ST_TO_ADDR
// if not array then
69072: LD_VAR 0 1
69076: NOT
69077: IFFALSE 69081
// exit ;
69079: GO 69180
// Randomize ;
69081: CALL_OW 10
// for i = array downto 1 do
69085: LD_ADDR_VAR 0 3
69089: PUSH
69090: DOUBLE
69091: LD_VAR 0 1
69095: INC
69096: ST_TO_ADDR
69097: LD_INT 1
69099: PUSH
69100: FOR_DOWNTO
69101: IFFALSE 69178
// begin index := rand ( 1 , array ) ;
69103: LD_ADDR_VAR 0 4
69107: PUSH
69108: LD_INT 1
69110: PPUSH
69111: LD_VAR 0 1
69115: PPUSH
69116: CALL_OW 12
69120: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69121: LD_ADDR_VAR 0 2
69125: PUSH
69126: LD_VAR 0 2
69130: PPUSH
69131: LD_VAR 0 2
69135: PUSH
69136: LD_INT 1
69138: PLUS
69139: PPUSH
69140: LD_VAR 0 1
69144: PUSH
69145: LD_VAR 0 4
69149: ARRAY
69150: PPUSH
69151: CALL_OW 2
69155: ST_TO_ADDR
// array := Delete ( array , index ) ;
69156: LD_ADDR_VAR 0 1
69160: PUSH
69161: LD_VAR 0 1
69165: PPUSH
69166: LD_VAR 0 4
69170: PPUSH
69171: CALL_OW 3
69175: ST_TO_ADDR
// end ;
69176: GO 69100
69178: POP
69179: POP
// end ;
69180: LD_VAR 0 2
69184: RET
// export function GetBaseMaterials ( base ) ; begin
69185: LD_INT 0
69187: PPUSH
// result := [ 0 , 0 , 0 ] ;
69188: LD_ADDR_VAR 0 2
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: LD_INT 0
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: LIST
69206: ST_TO_ADDR
// if not base then
69207: LD_VAR 0 1
69211: NOT
69212: IFFALSE 69216
// exit ;
69214: GO 69265
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69216: LD_ADDR_VAR 0 2
69220: PUSH
69221: LD_VAR 0 1
69225: PPUSH
69226: LD_INT 1
69228: PPUSH
69229: CALL_OW 275
69233: PUSH
69234: LD_VAR 0 1
69238: PPUSH
69239: LD_INT 2
69241: PPUSH
69242: CALL_OW 275
69246: PUSH
69247: LD_VAR 0 1
69251: PPUSH
69252: LD_INT 3
69254: PPUSH
69255: CALL_OW 275
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: LIST
69264: ST_TO_ADDR
// end ;
69265: LD_VAR 0 2
69269: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69270: LD_INT 0
69272: PPUSH
69273: PPUSH
// result := array ;
69274: LD_ADDR_VAR 0 3
69278: PUSH
69279: LD_VAR 0 1
69283: ST_TO_ADDR
// if size >= result then
69284: LD_VAR 0 2
69288: PUSH
69289: LD_VAR 0 3
69293: GREATEREQUAL
69294: IFFALSE 69298
// exit ;
69296: GO 69348
// if size then
69298: LD_VAR 0 2
69302: IFFALSE 69348
// for i := array downto size do
69304: LD_ADDR_VAR 0 4
69308: PUSH
69309: DOUBLE
69310: LD_VAR 0 1
69314: INC
69315: ST_TO_ADDR
69316: LD_VAR 0 2
69320: PUSH
69321: FOR_DOWNTO
69322: IFFALSE 69346
// result := Delete ( result , result ) ;
69324: LD_ADDR_VAR 0 3
69328: PUSH
69329: LD_VAR 0 3
69333: PPUSH
69334: LD_VAR 0 3
69338: PPUSH
69339: CALL_OW 3
69343: ST_TO_ADDR
69344: GO 69321
69346: POP
69347: POP
// end ;
69348: LD_VAR 0 3
69352: RET
// export function ComExit ( unit ) ; var tmp ; begin
69353: LD_INT 0
69355: PPUSH
69356: PPUSH
// if not IsInUnit ( unit ) then
69357: LD_VAR 0 1
69361: PPUSH
69362: CALL_OW 310
69366: NOT
69367: IFFALSE 69371
// exit ;
69369: GO 69431
// tmp := IsInUnit ( unit ) ;
69371: LD_ADDR_VAR 0 3
69375: PUSH
69376: LD_VAR 0 1
69380: PPUSH
69381: CALL_OW 310
69385: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69386: LD_VAR 0 3
69390: PPUSH
69391: CALL_OW 247
69395: PUSH
69396: LD_INT 2
69398: EQUAL
69399: IFFALSE 69412
// ComExitVehicle ( unit ) else
69401: LD_VAR 0 1
69405: PPUSH
69406: CALL_OW 121
69410: GO 69421
// ComExitBuilding ( unit ) ;
69412: LD_VAR 0 1
69416: PPUSH
69417: CALL_OW 122
// result := tmp ;
69421: LD_ADDR_VAR 0 2
69425: PUSH
69426: LD_VAR 0 3
69430: ST_TO_ADDR
// end ;
69431: LD_VAR 0 2
69435: RET
// export function ComExitAll ( units ) ; var i ; begin
69436: LD_INT 0
69438: PPUSH
69439: PPUSH
// if not units then
69440: LD_VAR 0 1
69444: NOT
69445: IFFALSE 69449
// exit ;
69447: GO 69475
// for i in units do
69449: LD_ADDR_VAR 0 3
69453: PUSH
69454: LD_VAR 0 1
69458: PUSH
69459: FOR_IN
69460: IFFALSE 69473
// ComExit ( i ) ;
69462: LD_VAR 0 3
69466: PPUSH
69467: CALL 69353 0 1
69471: GO 69459
69473: POP
69474: POP
// end ;
69475: LD_VAR 0 2
69479: RET
// export function ResetHc ; begin
69480: LD_INT 0
69482: PPUSH
// InitHc ;
69483: CALL_OW 19
// hc_importance := 0 ;
69487: LD_ADDR_OWVAR 32
69491: PUSH
69492: LD_INT 0
69494: ST_TO_ADDR
// end ;
69495: LD_VAR 0 1
69499: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69500: LD_INT 0
69502: PPUSH
69503: PPUSH
69504: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69505: LD_ADDR_VAR 0 6
69509: PUSH
69510: LD_VAR 0 1
69514: PUSH
69515: LD_VAR 0 3
69519: PLUS
69520: PUSH
69521: LD_INT 2
69523: DIV
69524: ST_TO_ADDR
// if _x < 0 then
69525: LD_VAR 0 6
69529: PUSH
69530: LD_INT 0
69532: LESS
69533: IFFALSE 69550
// _x := _x * - 1 ;
69535: LD_ADDR_VAR 0 6
69539: PUSH
69540: LD_VAR 0 6
69544: PUSH
69545: LD_INT 1
69547: NEG
69548: MUL
69549: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69550: LD_ADDR_VAR 0 7
69554: PUSH
69555: LD_VAR 0 2
69559: PUSH
69560: LD_VAR 0 4
69564: PLUS
69565: PUSH
69566: LD_INT 2
69568: DIV
69569: ST_TO_ADDR
// if _y < 0 then
69570: LD_VAR 0 7
69574: PUSH
69575: LD_INT 0
69577: LESS
69578: IFFALSE 69595
// _y := _y * - 1 ;
69580: LD_ADDR_VAR 0 7
69584: PUSH
69585: LD_VAR 0 7
69589: PUSH
69590: LD_INT 1
69592: NEG
69593: MUL
69594: ST_TO_ADDR
// result := [ _x , _y ] ;
69595: LD_ADDR_VAR 0 5
69599: PUSH
69600: LD_VAR 0 6
69604: PUSH
69605: LD_VAR 0 7
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: ST_TO_ADDR
// end ;
69614: LD_VAR 0 5
69618: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69619: LD_INT 0
69621: PPUSH
69622: PPUSH
69623: PPUSH
69624: PPUSH
// task := GetTaskList ( unit ) ;
69625: LD_ADDR_VAR 0 7
69629: PUSH
69630: LD_VAR 0 1
69634: PPUSH
69635: CALL_OW 437
69639: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69640: LD_VAR 0 7
69644: NOT
69645: PUSH
69646: LD_VAR 0 1
69650: PPUSH
69651: LD_VAR 0 2
69655: PPUSH
69656: CALL_OW 308
69660: NOT
69661: AND
69662: IFFALSE 69666
// exit ;
69664: GO 69784
// if IsInArea ( unit , area ) then
69666: LD_VAR 0 1
69670: PPUSH
69671: LD_VAR 0 2
69675: PPUSH
69676: CALL_OW 308
69680: IFFALSE 69698
// begin ComMoveToArea ( unit , goAway ) ;
69682: LD_VAR 0 1
69686: PPUSH
69687: LD_VAR 0 3
69691: PPUSH
69692: CALL_OW 113
// exit ;
69696: GO 69784
// end ; if task [ 1 ] [ 1 ] <> M then
69698: LD_VAR 0 7
69702: PUSH
69703: LD_INT 1
69705: ARRAY
69706: PUSH
69707: LD_INT 1
69709: ARRAY
69710: PUSH
69711: LD_STRING M
69713: NONEQUAL
69714: IFFALSE 69718
// exit ;
69716: GO 69784
// x := task [ 1 ] [ 2 ] ;
69718: LD_ADDR_VAR 0 5
69722: PUSH
69723: LD_VAR 0 7
69727: PUSH
69728: LD_INT 1
69730: ARRAY
69731: PUSH
69732: LD_INT 2
69734: ARRAY
69735: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69736: LD_ADDR_VAR 0 6
69740: PUSH
69741: LD_VAR 0 7
69745: PUSH
69746: LD_INT 1
69748: ARRAY
69749: PUSH
69750: LD_INT 3
69752: ARRAY
69753: ST_TO_ADDR
// if InArea ( x , y , area ) then
69754: LD_VAR 0 5
69758: PPUSH
69759: LD_VAR 0 6
69763: PPUSH
69764: LD_VAR 0 2
69768: PPUSH
69769: CALL_OW 309
69773: IFFALSE 69784
// ComStop ( unit ) ;
69775: LD_VAR 0 1
69779: PPUSH
69780: CALL_OW 141
// end ;
69784: LD_VAR 0 4
69788: RET
// export function Abs ( value ) ; begin
69789: LD_INT 0
69791: PPUSH
// result := value ;
69792: LD_ADDR_VAR 0 2
69796: PUSH
69797: LD_VAR 0 1
69801: ST_TO_ADDR
// if value < 0 then
69802: LD_VAR 0 1
69806: PUSH
69807: LD_INT 0
69809: LESS
69810: IFFALSE 69827
// result := value * - 1 ;
69812: LD_ADDR_VAR 0 2
69816: PUSH
69817: LD_VAR 0 1
69821: PUSH
69822: LD_INT 1
69824: NEG
69825: MUL
69826: ST_TO_ADDR
// end ;
69827: LD_VAR 0 2
69831: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69832: LD_INT 0
69834: PPUSH
69835: PPUSH
69836: PPUSH
69837: PPUSH
69838: PPUSH
69839: PPUSH
69840: PPUSH
69841: PPUSH
// if not unit or not building then
69842: LD_VAR 0 1
69846: NOT
69847: PUSH
69848: LD_VAR 0 2
69852: NOT
69853: OR
69854: IFFALSE 69858
// exit ;
69856: GO 70084
// x := GetX ( building ) ;
69858: LD_ADDR_VAR 0 4
69862: PUSH
69863: LD_VAR 0 2
69867: PPUSH
69868: CALL_OW 250
69872: ST_TO_ADDR
// y := GetY ( building ) ;
69873: LD_ADDR_VAR 0 6
69877: PUSH
69878: LD_VAR 0 2
69882: PPUSH
69883: CALL_OW 251
69887: ST_TO_ADDR
// d := GetDir ( building ) ;
69888: LD_ADDR_VAR 0 8
69892: PUSH
69893: LD_VAR 0 2
69897: PPUSH
69898: CALL_OW 254
69902: ST_TO_ADDR
// r := 4 ;
69903: LD_ADDR_VAR 0 9
69907: PUSH
69908: LD_INT 4
69910: ST_TO_ADDR
// for i := 1 to 5 do
69911: LD_ADDR_VAR 0 10
69915: PUSH
69916: DOUBLE
69917: LD_INT 1
69919: DEC
69920: ST_TO_ADDR
69921: LD_INT 5
69923: PUSH
69924: FOR_TO
69925: IFFALSE 70082
// begin _x := ShiftX ( x , d , r + i ) ;
69927: LD_ADDR_VAR 0 5
69931: PUSH
69932: LD_VAR 0 4
69936: PPUSH
69937: LD_VAR 0 8
69941: PPUSH
69942: LD_VAR 0 9
69946: PUSH
69947: LD_VAR 0 10
69951: PLUS
69952: PPUSH
69953: CALL_OW 272
69957: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69958: LD_ADDR_VAR 0 7
69962: PUSH
69963: LD_VAR 0 6
69967: PPUSH
69968: LD_VAR 0 8
69972: PPUSH
69973: LD_VAR 0 9
69977: PUSH
69978: LD_VAR 0 10
69982: PLUS
69983: PPUSH
69984: CALL_OW 273
69988: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69989: LD_VAR 0 5
69993: PPUSH
69994: LD_VAR 0 7
69998: PPUSH
69999: CALL_OW 488
70003: PUSH
70004: LD_VAR 0 5
70008: PPUSH
70009: LD_VAR 0 7
70013: PPUSH
70014: CALL_OW 428
70018: PPUSH
70019: CALL_OW 247
70023: PUSH
70024: LD_INT 3
70026: PUSH
70027: LD_INT 2
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: IN
70034: NOT
70035: AND
70036: IFFALSE 70080
// begin ComMoveXY ( unit , _x , _y ) ;
70038: LD_VAR 0 1
70042: PPUSH
70043: LD_VAR 0 5
70047: PPUSH
70048: LD_VAR 0 7
70052: PPUSH
70053: CALL_OW 111
// result := [ _x , _y ] ;
70057: LD_ADDR_VAR 0 3
70061: PUSH
70062: LD_VAR 0 5
70066: PUSH
70067: LD_VAR 0 7
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: ST_TO_ADDR
// exit ;
70076: POP
70077: POP
70078: GO 70084
// end ; end ;
70080: GO 69924
70082: POP
70083: POP
// end ;
70084: LD_VAR 0 3
70088: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70089: LD_INT 0
70091: PPUSH
70092: PPUSH
70093: PPUSH
// result := 0 ;
70094: LD_ADDR_VAR 0 3
70098: PUSH
70099: LD_INT 0
70101: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70102: LD_VAR 0 1
70106: PUSH
70107: LD_INT 0
70109: LESS
70110: PUSH
70111: LD_VAR 0 1
70115: PUSH
70116: LD_INT 8
70118: GREATER
70119: OR
70120: PUSH
70121: LD_VAR 0 2
70125: PUSH
70126: LD_INT 0
70128: LESS
70129: OR
70130: PUSH
70131: LD_VAR 0 2
70135: PUSH
70136: LD_INT 8
70138: GREATER
70139: OR
70140: IFFALSE 70144
// exit ;
70142: GO 70219
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70144: LD_ADDR_VAR 0 4
70148: PUSH
70149: LD_INT 22
70151: PUSH
70152: LD_VAR 0 2
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PPUSH
70161: CALL_OW 69
70165: PUSH
70166: FOR_IN
70167: IFFALSE 70217
// begin un := UnitShoot ( i ) ;
70169: LD_ADDR_VAR 0 5
70173: PUSH
70174: LD_VAR 0 4
70178: PPUSH
70179: CALL_OW 504
70183: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70184: LD_VAR 0 5
70188: PPUSH
70189: CALL_OW 255
70193: PUSH
70194: LD_VAR 0 1
70198: EQUAL
70199: IFFALSE 70215
// begin result := un ;
70201: LD_ADDR_VAR 0 3
70205: PUSH
70206: LD_VAR 0 5
70210: ST_TO_ADDR
// exit ;
70211: POP
70212: POP
70213: GO 70219
// end ; end ;
70215: GO 70166
70217: POP
70218: POP
// end ;
70219: LD_VAR 0 3
70223: RET
// export function GetCargoBay ( units ) ; begin
70224: LD_INT 0
70226: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70227: LD_ADDR_VAR 0 2
70231: PUSH
70232: LD_VAR 0 1
70236: PPUSH
70237: LD_INT 2
70239: PUSH
70240: LD_INT 34
70242: PUSH
70243: LD_INT 12
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 34
70252: PUSH
70253: LD_INT 51
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 34
70262: PUSH
70263: LD_INT 32
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 34
70272: PUSH
70273: LD_EXP 22
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: PPUSH
70289: CALL_OW 72
70293: ST_TO_ADDR
// end ;
70294: LD_VAR 0 2
70298: RET
// export function Negate ( value ) ; begin
70299: LD_INT 0
70301: PPUSH
// result := not value ;
70302: LD_ADDR_VAR 0 2
70306: PUSH
70307: LD_VAR 0 1
70311: NOT
70312: ST_TO_ADDR
// end ;
70313: LD_VAR 0 2
70317: RET
// export function Inc ( value ) ; begin
70318: LD_INT 0
70320: PPUSH
// result := value + 1 ;
70321: LD_ADDR_VAR 0 2
70325: PUSH
70326: LD_VAR 0 1
70330: PUSH
70331: LD_INT 1
70333: PLUS
70334: ST_TO_ADDR
// end ;
70335: LD_VAR 0 2
70339: RET
// export function Dec ( value ) ; begin
70340: LD_INT 0
70342: PPUSH
// result := value - 1 ;
70343: LD_ADDR_VAR 0 2
70347: PUSH
70348: LD_VAR 0 1
70352: PUSH
70353: LD_INT 1
70355: MINUS
70356: ST_TO_ADDR
// end ;
70357: LD_VAR 0 2
70361: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70362: LD_INT 0
70364: PPUSH
70365: PPUSH
70366: PPUSH
70367: PPUSH
70368: PPUSH
70369: PPUSH
70370: PPUSH
70371: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70372: LD_VAR 0 1
70376: PPUSH
70377: LD_VAR 0 2
70381: PPUSH
70382: CALL_OW 488
70386: NOT
70387: PUSH
70388: LD_VAR 0 3
70392: PPUSH
70393: LD_VAR 0 4
70397: PPUSH
70398: CALL_OW 488
70402: NOT
70403: OR
70404: IFFALSE 70417
// begin result := - 1 ;
70406: LD_ADDR_VAR 0 5
70410: PUSH
70411: LD_INT 1
70413: NEG
70414: ST_TO_ADDR
// exit ;
70415: GO 70652
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70417: LD_ADDR_VAR 0 12
70421: PUSH
70422: LD_VAR 0 1
70426: PPUSH
70427: LD_VAR 0 2
70431: PPUSH
70432: LD_VAR 0 3
70436: PPUSH
70437: LD_VAR 0 4
70441: PPUSH
70442: CALL 69500 0 4
70446: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70447: LD_ADDR_VAR 0 11
70451: PUSH
70452: LD_VAR 0 1
70456: PPUSH
70457: LD_VAR 0 2
70461: PPUSH
70462: LD_VAR 0 12
70466: PUSH
70467: LD_INT 1
70469: ARRAY
70470: PPUSH
70471: LD_VAR 0 12
70475: PUSH
70476: LD_INT 2
70478: ARRAY
70479: PPUSH
70480: CALL_OW 298
70484: ST_TO_ADDR
// distance := 9999 ;
70485: LD_ADDR_VAR 0 10
70489: PUSH
70490: LD_INT 9999
70492: ST_TO_ADDR
// for i := 0 to 5 do
70493: LD_ADDR_VAR 0 6
70497: PUSH
70498: DOUBLE
70499: LD_INT 0
70501: DEC
70502: ST_TO_ADDR
70503: LD_INT 5
70505: PUSH
70506: FOR_TO
70507: IFFALSE 70650
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70509: LD_ADDR_VAR 0 7
70513: PUSH
70514: LD_VAR 0 1
70518: PPUSH
70519: LD_VAR 0 6
70523: PPUSH
70524: LD_VAR 0 11
70528: PPUSH
70529: CALL_OW 272
70533: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70534: LD_ADDR_VAR 0 8
70538: PUSH
70539: LD_VAR 0 2
70543: PPUSH
70544: LD_VAR 0 6
70548: PPUSH
70549: LD_VAR 0 11
70553: PPUSH
70554: CALL_OW 273
70558: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70559: LD_VAR 0 7
70563: PPUSH
70564: LD_VAR 0 8
70568: PPUSH
70569: CALL_OW 488
70573: NOT
70574: IFFALSE 70578
// continue ;
70576: GO 70506
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70578: LD_ADDR_VAR 0 9
70582: PUSH
70583: LD_VAR 0 12
70587: PUSH
70588: LD_INT 1
70590: ARRAY
70591: PPUSH
70592: LD_VAR 0 12
70596: PUSH
70597: LD_INT 2
70599: ARRAY
70600: PPUSH
70601: LD_VAR 0 7
70605: PPUSH
70606: LD_VAR 0 8
70610: PPUSH
70611: CALL_OW 298
70615: ST_TO_ADDR
// if tmp < distance then
70616: LD_VAR 0 9
70620: PUSH
70621: LD_VAR 0 10
70625: LESS
70626: IFFALSE 70648
// begin result := i ;
70628: LD_ADDR_VAR 0 5
70632: PUSH
70633: LD_VAR 0 6
70637: ST_TO_ADDR
// distance := tmp ;
70638: LD_ADDR_VAR 0 10
70642: PUSH
70643: LD_VAR 0 9
70647: ST_TO_ADDR
// end ; end ;
70648: GO 70506
70650: POP
70651: POP
// end ;
70652: LD_VAR 0 5
70656: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70657: LD_INT 0
70659: PPUSH
70660: PPUSH
// if not driver or not IsInUnit ( driver ) then
70661: LD_VAR 0 1
70665: NOT
70666: PUSH
70667: LD_VAR 0 1
70671: PPUSH
70672: CALL_OW 310
70676: NOT
70677: OR
70678: IFFALSE 70682
// exit ;
70680: GO 70772
// vehicle := IsInUnit ( driver ) ;
70682: LD_ADDR_VAR 0 3
70686: PUSH
70687: LD_VAR 0 1
70691: PPUSH
70692: CALL_OW 310
70696: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70697: LD_VAR 0 1
70701: PPUSH
70702: LD_STRING \
70704: PUSH
70705: LD_INT 0
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: LD_INT 0
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: PUSH
70732: LD_STRING E
70734: PUSH
70735: LD_INT 0
70737: PUSH
70738: LD_INT 0
70740: PUSH
70741: LD_VAR 0 3
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: LD_INT 0
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PPUSH
70768: CALL_OW 446
// end ;
70772: LD_VAR 0 2
70776: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70777: LD_INT 0
70779: PPUSH
70780: PPUSH
// if not driver or not IsInUnit ( driver ) then
70781: LD_VAR 0 1
70785: NOT
70786: PUSH
70787: LD_VAR 0 1
70791: PPUSH
70792: CALL_OW 310
70796: NOT
70797: OR
70798: IFFALSE 70802
// exit ;
70800: GO 70892
// vehicle := IsInUnit ( driver ) ;
70802: LD_ADDR_VAR 0 3
70806: PUSH
70807: LD_VAR 0 1
70811: PPUSH
70812: CALL_OW 310
70816: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70817: LD_VAR 0 1
70821: PPUSH
70822: LD_STRING \
70824: PUSH
70825: LD_INT 0
70827: PUSH
70828: LD_INT 0
70830: PUSH
70831: LD_INT 0
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: LD_INT 0
70839: PUSH
70840: LD_INT 0
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: PUSH
70852: LD_STRING E
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: LD_VAR 0 3
70865: PUSH
70866: LD_INT 0
70868: PUSH
70869: LD_INT 0
70871: PUSH
70872: LD_INT 0
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PPUSH
70888: CALL_OW 447
// end ;
70892: LD_VAR 0 2
70896: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70897: LD_INT 0
70899: PPUSH
70900: PPUSH
70901: PPUSH
// tmp := [ ] ;
70902: LD_ADDR_VAR 0 5
70906: PUSH
70907: EMPTY
70908: ST_TO_ADDR
// for i in units do
70909: LD_ADDR_VAR 0 4
70913: PUSH
70914: LD_VAR 0 1
70918: PUSH
70919: FOR_IN
70920: IFFALSE 70958
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70922: LD_ADDR_VAR 0 5
70926: PUSH
70927: LD_VAR 0 5
70931: PPUSH
70932: LD_VAR 0 5
70936: PUSH
70937: LD_INT 1
70939: PLUS
70940: PPUSH
70941: LD_VAR 0 4
70945: PPUSH
70946: CALL_OW 256
70950: PPUSH
70951: CALL_OW 2
70955: ST_TO_ADDR
70956: GO 70919
70958: POP
70959: POP
// if not tmp then
70960: LD_VAR 0 5
70964: NOT
70965: IFFALSE 70969
// exit ;
70967: GO 71017
// if asc then
70969: LD_VAR 0 2
70973: IFFALSE 70997
// result := SortListByListAsc ( units , tmp ) else
70975: LD_ADDR_VAR 0 3
70979: PUSH
70980: LD_VAR 0 1
70984: PPUSH
70985: LD_VAR 0 5
70989: PPUSH
70990: CALL_OW 76
70994: ST_TO_ADDR
70995: GO 71017
// result := SortListByListDesc ( units , tmp ) ;
70997: LD_ADDR_VAR 0 3
71001: PUSH
71002: LD_VAR 0 1
71006: PPUSH
71007: LD_VAR 0 5
71011: PPUSH
71012: CALL_OW 77
71016: ST_TO_ADDR
// end ;
71017: LD_VAR 0 3
71021: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71022: LD_INT 0
71024: PPUSH
71025: PPUSH
// task := GetTaskList ( mech ) ;
71026: LD_ADDR_VAR 0 4
71030: PUSH
71031: LD_VAR 0 1
71035: PPUSH
71036: CALL_OW 437
71040: ST_TO_ADDR
// if not task then
71041: LD_VAR 0 4
71045: NOT
71046: IFFALSE 71050
// exit ;
71048: GO 71092
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71050: LD_ADDR_VAR 0 3
71054: PUSH
71055: LD_VAR 0 4
71059: PUSH
71060: LD_INT 1
71062: ARRAY
71063: PUSH
71064: LD_INT 1
71066: ARRAY
71067: PUSH
71068: LD_STRING r
71070: EQUAL
71071: PUSH
71072: LD_VAR 0 4
71076: PUSH
71077: LD_INT 1
71079: ARRAY
71080: PUSH
71081: LD_INT 4
71083: ARRAY
71084: PUSH
71085: LD_VAR 0 2
71089: EQUAL
71090: AND
71091: ST_TO_ADDR
// end ;
71092: LD_VAR 0 3
71096: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71097: LD_INT 0
71099: PPUSH
// SetDir ( unit , d ) ;
71100: LD_VAR 0 1
71104: PPUSH
71105: LD_VAR 0 4
71109: PPUSH
71110: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71114: LD_VAR 0 1
71118: PPUSH
71119: LD_VAR 0 2
71123: PPUSH
71124: LD_VAR 0 3
71128: PPUSH
71129: LD_VAR 0 5
71133: PPUSH
71134: CALL_OW 48
// end ;
71138: LD_VAR 0 6
71142: RET
// export function ToNaturalNumber ( number ) ; begin
71143: LD_INT 0
71145: PPUSH
// result := number div 1 ;
71146: LD_ADDR_VAR 0 2
71150: PUSH
71151: LD_VAR 0 1
71155: PUSH
71156: LD_INT 1
71158: DIV
71159: ST_TO_ADDR
// if number < 0 then
71160: LD_VAR 0 1
71164: PUSH
71165: LD_INT 0
71167: LESS
71168: IFFALSE 71178
// result := 0 ;
71170: LD_ADDR_VAR 0 2
71174: PUSH
71175: LD_INT 0
71177: ST_TO_ADDR
// end ;
71178: LD_VAR 0 2
71182: RET
// export function SortByClass ( units , class ) ; var un ; begin
71183: LD_INT 0
71185: PPUSH
71186: PPUSH
// if not units or not class then
71187: LD_VAR 0 1
71191: NOT
71192: PUSH
71193: LD_VAR 0 2
71197: NOT
71198: OR
71199: IFFALSE 71203
// exit ;
71201: GO 71298
// result := [ ] ;
71203: LD_ADDR_VAR 0 3
71207: PUSH
71208: EMPTY
71209: ST_TO_ADDR
// for un in units do
71210: LD_ADDR_VAR 0 4
71214: PUSH
71215: LD_VAR 0 1
71219: PUSH
71220: FOR_IN
71221: IFFALSE 71296
// if GetClass ( un ) = class then
71223: LD_VAR 0 4
71227: PPUSH
71228: CALL_OW 257
71232: PUSH
71233: LD_VAR 0 2
71237: EQUAL
71238: IFFALSE 71265
// result := Insert ( result , 1 , un ) else
71240: LD_ADDR_VAR 0 3
71244: PUSH
71245: LD_VAR 0 3
71249: PPUSH
71250: LD_INT 1
71252: PPUSH
71253: LD_VAR 0 4
71257: PPUSH
71258: CALL_OW 2
71262: ST_TO_ADDR
71263: GO 71294
// result := Replace ( result , result + 1 , un ) ;
71265: LD_ADDR_VAR 0 3
71269: PUSH
71270: LD_VAR 0 3
71274: PPUSH
71275: LD_VAR 0 3
71279: PUSH
71280: LD_INT 1
71282: PLUS
71283: PPUSH
71284: LD_VAR 0 4
71288: PPUSH
71289: CALL_OW 1
71293: ST_TO_ADDR
71294: GO 71220
71296: POP
71297: POP
// end ;
71298: LD_VAR 0 3
71302: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71303: LD_INT 0
71305: PPUSH
71306: PPUSH
71307: PPUSH
71308: PPUSH
71309: PPUSH
71310: PPUSH
71311: PPUSH
// result := [ ] ;
71312: LD_ADDR_VAR 0 4
71316: PUSH
71317: EMPTY
71318: ST_TO_ADDR
// if x - r < 0 then
71319: LD_VAR 0 1
71323: PUSH
71324: LD_VAR 0 3
71328: MINUS
71329: PUSH
71330: LD_INT 0
71332: LESS
71333: IFFALSE 71345
// min_x := 0 else
71335: LD_ADDR_VAR 0 8
71339: PUSH
71340: LD_INT 0
71342: ST_TO_ADDR
71343: GO 71361
// min_x := x - r ;
71345: LD_ADDR_VAR 0 8
71349: PUSH
71350: LD_VAR 0 1
71354: PUSH
71355: LD_VAR 0 3
71359: MINUS
71360: ST_TO_ADDR
// if y - r < 0 then
71361: LD_VAR 0 2
71365: PUSH
71366: LD_VAR 0 3
71370: MINUS
71371: PUSH
71372: LD_INT 0
71374: LESS
71375: IFFALSE 71387
// min_y := 0 else
71377: LD_ADDR_VAR 0 7
71381: PUSH
71382: LD_INT 0
71384: ST_TO_ADDR
71385: GO 71403
// min_y := y - r ;
71387: LD_ADDR_VAR 0 7
71391: PUSH
71392: LD_VAR 0 2
71396: PUSH
71397: LD_VAR 0 3
71401: MINUS
71402: ST_TO_ADDR
// max_x := x + r ;
71403: LD_ADDR_VAR 0 9
71407: PUSH
71408: LD_VAR 0 1
71412: PUSH
71413: LD_VAR 0 3
71417: PLUS
71418: ST_TO_ADDR
// max_y := y + r ;
71419: LD_ADDR_VAR 0 10
71423: PUSH
71424: LD_VAR 0 2
71428: PUSH
71429: LD_VAR 0 3
71433: PLUS
71434: ST_TO_ADDR
// for _x = min_x to max_x do
71435: LD_ADDR_VAR 0 5
71439: PUSH
71440: DOUBLE
71441: LD_VAR 0 8
71445: DEC
71446: ST_TO_ADDR
71447: LD_VAR 0 9
71451: PUSH
71452: FOR_TO
71453: IFFALSE 71554
// for _y = min_y to max_y do
71455: LD_ADDR_VAR 0 6
71459: PUSH
71460: DOUBLE
71461: LD_VAR 0 7
71465: DEC
71466: ST_TO_ADDR
71467: LD_VAR 0 10
71471: PUSH
71472: FOR_TO
71473: IFFALSE 71550
// begin if not ValidHex ( _x , _y ) then
71475: LD_VAR 0 5
71479: PPUSH
71480: LD_VAR 0 6
71484: PPUSH
71485: CALL_OW 488
71489: NOT
71490: IFFALSE 71494
// continue ;
71492: GO 71472
// if GetResourceTypeXY ( _x , _y ) then
71494: LD_VAR 0 5
71498: PPUSH
71499: LD_VAR 0 6
71503: PPUSH
71504: CALL_OW 283
71508: IFFALSE 71548
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71510: LD_ADDR_VAR 0 4
71514: PUSH
71515: LD_VAR 0 4
71519: PPUSH
71520: LD_VAR 0 4
71524: PUSH
71525: LD_INT 1
71527: PLUS
71528: PPUSH
71529: LD_VAR 0 5
71533: PUSH
71534: LD_VAR 0 6
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PPUSH
71543: CALL_OW 1
71547: ST_TO_ADDR
// end ;
71548: GO 71472
71550: POP
71551: POP
71552: GO 71452
71554: POP
71555: POP
// end ;
71556: LD_VAR 0 4
71560: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71561: LD_INT 0
71563: PPUSH
71564: PPUSH
71565: PPUSH
71566: PPUSH
71567: PPUSH
71568: PPUSH
71569: PPUSH
71570: PPUSH
// if not units then
71571: LD_VAR 0 1
71575: NOT
71576: IFFALSE 71580
// exit ;
71578: GO 72106
// result := UnitFilter ( units , [ f_ok ] ) ;
71580: LD_ADDR_VAR 0 3
71584: PUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: LD_INT 50
71592: PUSH
71593: EMPTY
71594: LIST
71595: PPUSH
71596: CALL_OW 72
71600: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71601: LD_ADDR_VAR 0 8
71605: PUSH
71606: LD_VAR 0 1
71610: PUSH
71611: LD_INT 1
71613: ARRAY
71614: PPUSH
71615: CALL_OW 255
71619: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71620: LD_ADDR_VAR 0 10
71624: PUSH
71625: LD_INT 29
71627: PUSH
71628: LD_EXP 25
71632: PUSH
71633: LD_INT 49
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: LIST
71640: ST_TO_ADDR
// if not result then
71641: LD_VAR 0 3
71645: NOT
71646: IFFALSE 71650
// exit ;
71648: GO 72106
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71650: LD_ADDR_VAR 0 5
71654: PUSH
71655: LD_INT 81
71657: PUSH
71658: LD_VAR 0 8
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PPUSH
71667: CALL_OW 69
71671: ST_TO_ADDR
// for i in result do
71672: LD_ADDR_VAR 0 4
71676: PUSH
71677: LD_VAR 0 3
71681: PUSH
71682: FOR_IN
71683: IFFALSE 72104
// begin tag := GetTag ( i ) + 1 ;
71685: LD_ADDR_VAR 0 9
71689: PUSH
71690: LD_VAR 0 4
71694: PPUSH
71695: CALL_OW 110
71699: PUSH
71700: LD_INT 1
71702: PLUS
71703: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71704: LD_ADDR_VAR 0 7
71708: PUSH
71709: LD_VAR 0 4
71713: PPUSH
71714: CALL_OW 250
71718: PPUSH
71719: LD_VAR 0 4
71723: PPUSH
71724: CALL_OW 251
71728: PPUSH
71729: LD_INT 6
71731: PPUSH
71732: CALL 71303 0 3
71736: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71737: LD_VAR 0 4
71741: PPUSH
71742: CALL_OW 247
71746: PUSH
71747: LD_INT 2
71749: EQUAL
71750: PUSH
71751: LD_VAR 0 7
71755: AND
71756: PUSH
71757: LD_VAR 0 4
71761: PPUSH
71762: CALL_OW 264
71766: PUSH
71767: LD_VAR 0 10
71771: IN
71772: NOT
71773: AND
71774: IFFALSE 71813
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71776: LD_VAR 0 4
71780: PPUSH
71781: LD_VAR 0 7
71785: PUSH
71786: LD_INT 1
71788: ARRAY
71789: PUSH
71790: LD_INT 1
71792: ARRAY
71793: PPUSH
71794: LD_VAR 0 7
71798: PUSH
71799: LD_INT 1
71801: ARRAY
71802: PUSH
71803: LD_INT 2
71805: ARRAY
71806: PPUSH
71807: CALL_OW 116
71811: GO 72102
// if path > tag then
71813: LD_VAR 0 2
71817: PUSH
71818: LD_VAR 0 9
71822: GREATER
71823: IFFALSE 72031
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71825: LD_ADDR_VAR 0 6
71829: PUSH
71830: LD_VAR 0 5
71834: PPUSH
71835: LD_INT 91
71837: PUSH
71838: LD_VAR 0 4
71842: PUSH
71843: LD_INT 8
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: LIST
71850: PPUSH
71851: CALL_OW 72
71855: ST_TO_ADDR
// if nearEnemy then
71856: LD_VAR 0 6
71860: IFFALSE 71929
// begin if GetWeapon ( i ) = ru_time_lapser then
71862: LD_VAR 0 4
71866: PPUSH
71867: CALL_OW 264
71871: PUSH
71872: LD_INT 49
71874: EQUAL
71875: IFFALSE 71903
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71877: LD_VAR 0 4
71881: PPUSH
71882: LD_VAR 0 6
71886: PPUSH
71887: LD_VAR 0 4
71891: PPUSH
71892: CALL_OW 74
71896: PPUSH
71897: CALL_OW 112
71901: GO 71927
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71903: LD_VAR 0 4
71907: PPUSH
71908: LD_VAR 0 6
71912: PPUSH
71913: LD_VAR 0 4
71917: PPUSH
71918: CALL_OW 74
71922: PPUSH
71923: CALL_OW 115
// end else
71927: GO 72029
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71929: LD_VAR 0 4
71933: PPUSH
71934: LD_VAR 0 2
71938: PUSH
71939: LD_VAR 0 9
71943: ARRAY
71944: PUSH
71945: LD_INT 1
71947: ARRAY
71948: PPUSH
71949: LD_VAR 0 2
71953: PUSH
71954: LD_VAR 0 9
71958: ARRAY
71959: PUSH
71960: LD_INT 2
71962: ARRAY
71963: PPUSH
71964: CALL_OW 297
71968: PUSH
71969: LD_INT 6
71971: GREATER
71972: IFFALSE 72015
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71974: LD_VAR 0 4
71978: PPUSH
71979: LD_VAR 0 2
71983: PUSH
71984: LD_VAR 0 9
71988: ARRAY
71989: PUSH
71990: LD_INT 1
71992: ARRAY
71993: PPUSH
71994: LD_VAR 0 2
71998: PUSH
71999: LD_VAR 0 9
72003: ARRAY
72004: PUSH
72005: LD_INT 2
72007: ARRAY
72008: PPUSH
72009: CALL_OW 114
72013: GO 72029
// SetTag ( i , tag ) ;
72015: LD_VAR 0 4
72019: PPUSH
72020: LD_VAR 0 9
72024: PPUSH
72025: CALL_OW 109
// end else
72029: GO 72102
// if enemy then
72031: LD_VAR 0 5
72035: IFFALSE 72102
// begin if GetWeapon ( i ) = ru_time_lapser then
72037: LD_VAR 0 4
72041: PPUSH
72042: CALL_OW 264
72046: PUSH
72047: LD_INT 49
72049: EQUAL
72050: IFFALSE 72078
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72052: LD_VAR 0 4
72056: PPUSH
72057: LD_VAR 0 5
72061: PPUSH
72062: LD_VAR 0 4
72066: PPUSH
72067: CALL_OW 74
72071: PPUSH
72072: CALL_OW 112
72076: GO 72102
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72078: LD_VAR 0 4
72082: PPUSH
72083: LD_VAR 0 5
72087: PPUSH
72088: LD_VAR 0 4
72092: PPUSH
72093: CALL_OW 74
72097: PPUSH
72098: CALL_OW 115
// end ; end ;
72102: GO 71682
72104: POP
72105: POP
// end ;
72106: LD_VAR 0 3
72110: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72111: LD_INT 0
72113: PPUSH
72114: PPUSH
72115: PPUSH
// if not unit or IsInUnit ( unit ) then
72116: LD_VAR 0 1
72120: NOT
72121: PUSH
72122: LD_VAR 0 1
72126: PPUSH
72127: CALL_OW 310
72131: OR
72132: IFFALSE 72136
// exit ;
72134: GO 72227
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72136: LD_ADDR_VAR 0 4
72140: PUSH
72141: LD_VAR 0 1
72145: PPUSH
72146: CALL_OW 250
72150: PPUSH
72151: LD_VAR 0 2
72155: PPUSH
72156: LD_INT 1
72158: PPUSH
72159: CALL_OW 272
72163: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72164: LD_ADDR_VAR 0 5
72168: PUSH
72169: LD_VAR 0 1
72173: PPUSH
72174: CALL_OW 251
72178: PPUSH
72179: LD_VAR 0 2
72183: PPUSH
72184: LD_INT 1
72186: PPUSH
72187: CALL_OW 273
72191: ST_TO_ADDR
// if ValidHex ( x , y ) then
72192: LD_VAR 0 4
72196: PPUSH
72197: LD_VAR 0 5
72201: PPUSH
72202: CALL_OW 488
72206: IFFALSE 72227
// ComTurnXY ( unit , x , y ) ;
72208: LD_VAR 0 1
72212: PPUSH
72213: LD_VAR 0 4
72217: PPUSH
72218: LD_VAR 0 5
72222: PPUSH
72223: CALL_OW 118
// end ;
72227: LD_VAR 0 3
72231: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72232: LD_INT 0
72234: PPUSH
72235: PPUSH
// result := false ;
72236: LD_ADDR_VAR 0 3
72240: PUSH
72241: LD_INT 0
72243: ST_TO_ADDR
// if not units then
72244: LD_VAR 0 2
72248: NOT
72249: IFFALSE 72253
// exit ;
72251: GO 72298
// for i in units do
72253: LD_ADDR_VAR 0 4
72257: PUSH
72258: LD_VAR 0 2
72262: PUSH
72263: FOR_IN
72264: IFFALSE 72296
// if See ( side , i ) then
72266: LD_VAR 0 1
72270: PPUSH
72271: LD_VAR 0 4
72275: PPUSH
72276: CALL_OW 292
72280: IFFALSE 72294
// begin result := true ;
72282: LD_ADDR_VAR 0 3
72286: PUSH
72287: LD_INT 1
72289: ST_TO_ADDR
// exit ;
72290: POP
72291: POP
72292: GO 72298
// end ;
72294: GO 72263
72296: POP
72297: POP
// end ;
72298: LD_VAR 0 3
72302: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72303: LD_INT 0
72305: PPUSH
72306: PPUSH
72307: PPUSH
72308: PPUSH
// if not unit or not points then
72309: LD_VAR 0 1
72313: NOT
72314: PUSH
72315: LD_VAR 0 2
72319: NOT
72320: OR
72321: IFFALSE 72325
// exit ;
72323: GO 72415
// dist := 99999 ;
72325: LD_ADDR_VAR 0 5
72329: PUSH
72330: LD_INT 99999
72332: ST_TO_ADDR
// for i in points do
72333: LD_ADDR_VAR 0 4
72337: PUSH
72338: LD_VAR 0 2
72342: PUSH
72343: FOR_IN
72344: IFFALSE 72413
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72346: LD_ADDR_VAR 0 6
72350: PUSH
72351: LD_VAR 0 1
72355: PPUSH
72356: LD_VAR 0 4
72360: PUSH
72361: LD_INT 1
72363: ARRAY
72364: PPUSH
72365: LD_VAR 0 4
72369: PUSH
72370: LD_INT 2
72372: ARRAY
72373: PPUSH
72374: CALL_OW 297
72378: ST_TO_ADDR
// if tmpDist < dist then
72379: LD_VAR 0 6
72383: PUSH
72384: LD_VAR 0 5
72388: LESS
72389: IFFALSE 72411
// begin result := i ;
72391: LD_ADDR_VAR 0 3
72395: PUSH
72396: LD_VAR 0 4
72400: ST_TO_ADDR
// dist := tmpDist ;
72401: LD_ADDR_VAR 0 5
72405: PUSH
72406: LD_VAR 0 6
72410: ST_TO_ADDR
// end ; end ;
72411: GO 72343
72413: POP
72414: POP
// end ;
72415: LD_VAR 0 3
72419: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72420: LD_INT 0
72422: PPUSH
// uc_side := side ;
72423: LD_ADDR_OWVAR 20
72427: PUSH
72428: LD_VAR 0 1
72432: ST_TO_ADDR
// uc_nation := 3 ;
72433: LD_ADDR_OWVAR 21
72437: PUSH
72438: LD_INT 3
72440: ST_TO_ADDR
// vc_chassis := 25 ;
72441: LD_ADDR_OWVAR 37
72445: PUSH
72446: LD_INT 25
72448: ST_TO_ADDR
// vc_engine := engine_siberite ;
72449: LD_ADDR_OWVAR 39
72453: PUSH
72454: LD_INT 3
72456: ST_TO_ADDR
// vc_control := control_computer ;
72457: LD_ADDR_OWVAR 38
72461: PUSH
72462: LD_INT 3
72464: ST_TO_ADDR
// vc_weapon := 59 ;
72465: LD_ADDR_OWVAR 40
72469: PUSH
72470: LD_INT 59
72472: ST_TO_ADDR
// result := CreateVehicle ;
72473: LD_ADDR_VAR 0 5
72477: PUSH
72478: CALL_OW 45
72482: ST_TO_ADDR
// SetDir ( result , d ) ;
72483: LD_VAR 0 5
72487: PPUSH
72488: LD_VAR 0 4
72492: PPUSH
72493: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72497: LD_VAR 0 5
72501: PPUSH
72502: LD_VAR 0 2
72506: PPUSH
72507: LD_VAR 0 3
72511: PPUSH
72512: LD_INT 0
72514: PPUSH
72515: CALL_OW 48
// end ;
72519: LD_VAR 0 5
72523: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72524: LD_INT 0
72526: PPUSH
72527: PPUSH
72528: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72529: LD_ADDR_VAR 0 2
72533: PUSH
72534: LD_INT 0
72536: PUSH
72537: LD_INT 0
72539: PUSH
72540: LD_INT 0
72542: PUSH
72543: LD_INT 0
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72552: LD_VAR 0 1
72556: NOT
72557: PUSH
72558: LD_VAR 0 1
72562: PPUSH
72563: CALL_OW 264
72567: PUSH
72568: LD_INT 12
72570: PUSH
72571: LD_INT 51
72573: PUSH
72574: LD_INT 32
72576: PUSH
72577: LD_EXP 22
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: IN
72588: NOT
72589: OR
72590: IFFALSE 72594
// exit ;
72592: GO 72692
// for i := 1 to 3 do
72594: LD_ADDR_VAR 0 3
72598: PUSH
72599: DOUBLE
72600: LD_INT 1
72602: DEC
72603: ST_TO_ADDR
72604: LD_INT 3
72606: PUSH
72607: FOR_TO
72608: IFFALSE 72690
// begin tmp := GetCargo ( cargo , i ) ;
72610: LD_ADDR_VAR 0 4
72614: PUSH
72615: LD_VAR 0 1
72619: PPUSH
72620: LD_VAR 0 3
72624: PPUSH
72625: CALL_OW 289
72629: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72630: LD_ADDR_VAR 0 2
72634: PUSH
72635: LD_VAR 0 2
72639: PPUSH
72640: LD_VAR 0 3
72644: PPUSH
72645: LD_VAR 0 4
72649: PPUSH
72650: CALL_OW 1
72654: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72655: LD_ADDR_VAR 0 2
72659: PUSH
72660: LD_VAR 0 2
72664: PPUSH
72665: LD_INT 4
72667: PPUSH
72668: LD_VAR 0 2
72672: PUSH
72673: LD_INT 4
72675: ARRAY
72676: PUSH
72677: LD_VAR 0 4
72681: PLUS
72682: PPUSH
72683: CALL_OW 1
72687: ST_TO_ADDR
// end ;
72688: GO 72607
72690: POP
72691: POP
// end ;
72692: LD_VAR 0 2
72696: RET
// export function Length ( array ) ; begin
72697: LD_INT 0
72699: PPUSH
// result := array + 0 ;
72700: LD_ADDR_VAR 0 2
72704: PUSH
72705: LD_VAR 0 1
72709: PUSH
72710: LD_INT 0
72712: PLUS
72713: ST_TO_ADDR
// end ;
72714: LD_VAR 0 2
72718: RET
// export function PrepareArray ( array ) ; begin
72719: LD_INT 0
72721: PPUSH
// result := array diff 0 ;
72722: LD_ADDR_VAR 0 2
72726: PUSH
72727: LD_VAR 0 1
72731: PUSH
72732: LD_INT 0
72734: DIFF
72735: ST_TO_ADDR
// if not result [ 1 ] then
72736: LD_VAR 0 2
72740: PUSH
72741: LD_INT 1
72743: ARRAY
72744: NOT
72745: IFFALSE 72765
// result := Delete ( result , 1 ) ;
72747: LD_ADDR_VAR 0 2
72751: PUSH
72752: LD_VAR 0 2
72756: PPUSH
72757: LD_INT 1
72759: PPUSH
72760: CALL_OW 3
72764: ST_TO_ADDR
// end ; end_of_file
72765: LD_VAR 0 2
72769: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72770: LD_VAR 0 1
72774: PUSH
72775: LD_INT 200
72777: DOUBLE
72778: GREATEREQUAL
72779: IFFALSE 72787
72781: LD_INT 299
72783: DOUBLE
72784: LESSEQUAL
72785: IFTRUE 72789
72787: GO 72821
72789: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72790: LD_VAR 0 1
72794: PPUSH
72795: LD_VAR 0 2
72799: PPUSH
72800: LD_VAR 0 3
72804: PPUSH
72805: LD_VAR 0 4
72809: PPUSH
72810: LD_VAR 0 5
72814: PPUSH
72815: CALL 27621 0 5
72819: GO 72898
72821: LD_INT 300
72823: DOUBLE
72824: GREATEREQUAL
72825: IFFALSE 72833
72827: LD_INT 399
72829: DOUBLE
72830: LESSEQUAL
72831: IFTRUE 72835
72833: GO 72897
72835: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72836: LD_VAR 0 1
72840: PPUSH
72841: LD_VAR 0 2
72845: PPUSH
72846: LD_VAR 0 3
72850: PPUSH
72851: LD_VAR 0 4
72855: PPUSH
72856: LD_VAR 0 5
72860: PPUSH
72861: LD_VAR 0 6
72865: PPUSH
72866: LD_VAR 0 7
72870: PPUSH
72871: LD_VAR 0 8
72875: PPUSH
72876: LD_VAR 0 9
72880: PPUSH
72881: LD_VAR 0 10
72885: PPUSH
72886: LD_VAR 0 11
72890: PPUSH
72891: CALL 23950 0 11
72895: GO 72898
72897: POP
// end ;
72898: PPOPN 11
72900: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72901: LD_VAR 0 1
72905: PPUSH
72906: LD_VAR 0 2
72910: PPUSH
72911: LD_VAR 0 3
72915: PPUSH
72916: LD_VAR 0 4
72920: PPUSH
72921: LD_VAR 0 5
72925: PPUSH
72926: CALL 27357 0 5
// end ; end_of_file
72930: PPOPN 5
72932: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72933: LD_VAR 0 1
72937: PPUSH
72938: LD_VAR 0 2
72942: PPUSH
72943: LD_VAR 0 3
72947: PPUSH
72948: LD_VAR 0 4
72952: PPUSH
72953: LD_VAR 0 5
72957: PPUSH
72958: LD_VAR 0 6
72962: PPUSH
72963: CALL 11643 0 6
// end ;
72967: PPOPN 6
72969: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72970: LD_INT 0
72972: PPUSH
// begin if not units then
72973: LD_VAR 0 1
72977: NOT
72978: IFFALSE 72982
// exit ;
72980: GO 72982
// end ;
72982: PPOPN 7
72984: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72985: CALL 11614 0 0
// end ;
72989: PPOPN 1
72991: END
