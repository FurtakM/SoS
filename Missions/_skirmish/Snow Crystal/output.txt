// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: IFFALSE 10654
// YouLost ( jota-lose ) ;
10647: LD_STRING jota-lose
10649: PPUSH
10650: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10654: LD_EXP 1
10658: PUSH
10659: LD_INT 2
10661: EQUAL
10662: PUSH
10663: LD_EXP 8
10667: PUSH
10668: LD_INT 0
10670: EQUAL
10671: AND
10672: IFFALSE 10987
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 255
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: LD_INT 11
10695: PPUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 70
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 10
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 30
10746: PUSH
10747: LD_INT 8
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: DIFF
10778: IN
10779: AND
10780: IFFALSE 10866
// begin ai_build := ai_build ^ GetBType ( un ) ;
10782: LD_ADDR_EXP 10
10786: PUSH
10787: LD_EXP 10
10791: PUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 266
10801: ADD
10802: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10803: LD_ADDR_EXP 10
10807: PUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 250
10822: ADD
10823: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10824: LD_ADDR_EXP 10
10828: PUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 251
10843: ADD
10844: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10845: LD_ADDR_EXP 10
10849: PUSH
10850: LD_EXP 10
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 254
10864: ADD
10865: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 255
10875: PUSH
10876: LD_INT 1
10878: EQUAL
10879: PUSH
10880: LD_VAR 0 1
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: IN
10900: AND
10901: IFFALSE 10987
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10903: LD_ADDR_EXP 11
10907: PUSH
10908: LD_EXP 11
10912: PUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 265
10922: ADD
10923: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10924: LD_ADDR_EXP 11
10928: PUSH
10929: LD_EXP 11
10933: PUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 262
10943: ADD
10944: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10945: LD_ADDR_EXP 11
10949: PUSH
10950: LD_EXP 11
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: CALL_OW 263
10964: ADD
10965: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10966: LD_ADDR_EXP 11
10970: PUSH
10971: LD_EXP 11
10975: PUSH
10976: LD_VAR 0 1
10980: PPUSH
10981: CALL_OW 264
10985: ADD
10986: ST_TO_ADDR
// end ; end ; end ;
10987: PPOPN 1
10989: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10990: LD_EXP 1
10994: PUSH
10995: LD_INT 1
10997: EQUAL
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PUSH
11028: LD_INT 0
11030: EQUAL
11031: AND
11032: IFFALSE 11044
11034: GO 11036
11036: DISABLE
// YouLost ( peo-lose ) ;
11037: LD_STRING peo-lose
11039: PPUSH
11040: CALL_OW 104
11044: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11045: LD_EXP 1
11049: PUSH
11050: LD_INT 2
11052: EQUAL
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: PUSH
11083: LD_INT 0
11085: EQUAL
11086: AND
11087: IFFALSE 11099
11089: GO 11091
11091: DISABLE
// YouLost ( peo-lose ) ;
11092: LD_STRING peo-lose
11094: PPUSH
11095: CALL_OW 104
11099: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
11100: LD_OWVAR 2
11104: PPUSH
11105: CALL 10510 0 1
11109: PUSH
11110: LD_EXP 5
11114: GREATEREQUAL
11115: IFFALSE 11201
11117: GO 11119
11119: DISABLE
11120: LD_INT 0
11122: PPUSH
// begin if GetSide ( jota_base ) = your_side then
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 255
11130: PUSH
11131: LD_OWVAR 2
11135: EQUAL
11136: IFFALSE 11179
// begin for i = 1 to 3 do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: DOUBLE
11144: LD_INT 1
11146: DEC
11147: ST_TO_ADDR
11148: LD_INT 3
11150: PUSH
11151: FOR_TO
11152: IFFALSE 11166
// AddMedal ( med , 1 ) ;
11154: LD_STRING med
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 101
11164: GO 11151
11166: POP
11167: POP
// GiveMedals ( MAIN ) ;
11168: LD_STRING MAIN
11170: PPUSH
11171: CALL_OW 102
// YouWin ;
11175: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: LD_OWVAR 2
11191: NONEQUAL
11192: IFFALSE 11201
// YouLost ( source ) ;
11194: LD_STRING source
11196: PPUSH
11197: CALL_OW 104
// end ; end_of_file
11201: PPOPN 1
11203: END
// every 2 2$05 + 0 0$11 do
11204: GO 11206
11206: DISABLE
// begin enable ;
11207: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11208: LD_INT 1
11210: PPUSH
11211: LD_INT 5
11213: PPUSH
11214: CALL_OW 12
11218: PPUSH
11219: LD_INT 7
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11229: LD_INT 350
11231: PPUSH
11232: LD_INT 1295
11234: PPUSH
11235: CALL_OW 12
11239: PPUSH
11240: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 5
11249: PPUSH
11250: CALL_OW 12
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 57
// end ;
11262: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11263: LD_EXP 1
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: PUSH
11272: LD_EXP 8
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: AND
11281: IFFALSE 11371
11283: GO 11285
11285: DISABLE
// begin enable ;
11286: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 7
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11308: LD_INT 350
11310: PPUSH
11311: LD_INT 1750
11313: PPUSH
11314: CALL_OW 12
11318: PPUSH
11319: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11323: LD_EXP 6
11327: PUSH
11328: LD_INT 73500
11330: PUSH
11331: LD_INT 63000
11333: PUSH
11334: LD_INT 52500
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_EXP 2
11346: ARRAY
11347: LESSEQUAL
11348: IFFALSE 11371
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 5
11355: PPUSH
11356: CALL_OW 12
11360: PPUSH
11361: LD_INT 12
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 55
// end ; end_of_file
11371: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: CALL 26001 0 3
// end ;
11391: PPOPN 3
11393: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL 26009 0 1
// end ; end_of_file
11403: PPOPN 1
11405: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11406: LD_INT 0
11408: PPUSH
// ar_miner := 81 ;
11409: LD_ADDR_EXP 28
11413: PUSH
11414: LD_INT 81
11416: ST_TO_ADDR
// ar_crane := 88 ;
11417: LD_ADDR_EXP 27
11421: PUSH
11422: LD_INT 88
11424: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11425: LD_ADDR_EXP 22
11429: PUSH
11430: LD_INT 89
11432: ST_TO_ADDR
// us_hack := 99 ;
11433: LD_ADDR_EXP 23
11437: PUSH
11438: LD_INT 99
11440: ST_TO_ADDR
// us_artillery := 97 ;
11441: LD_ADDR_EXP 24
11445: PUSH
11446: LD_INT 97
11448: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11449: LD_ADDR_EXP 25
11453: PUSH
11454: LD_INT 91
11456: ST_TO_ADDR
// ar_mortar := 92 ;
11457: LD_ADDR_EXP 26
11461: PUSH
11462: LD_INT 92
11464: ST_TO_ADDR
// ru_radar := 98 ;
11465: LD_ADDR_EXP 21
11469: PUSH
11470: LD_INT 98
11472: ST_TO_ADDR
// tech_Artillery := 80 ;
11473: LD_ADDR_EXP 29
11477: PUSH
11478: LD_INT 80
11480: ST_TO_ADDR
// tech_RadMat := 81 ;
11481: LD_ADDR_EXP 30
11485: PUSH
11486: LD_INT 81
11488: ST_TO_ADDR
// tech_BasicTools := 82 ;
11489: LD_ADDR_EXP 31
11493: PUSH
11494: LD_INT 82
11496: ST_TO_ADDR
// tech_Cargo := 83 ;
11497: LD_ADDR_EXP 32
11501: PUSH
11502: LD_INT 83
11504: ST_TO_ADDR
// tech_Track := 84 ;
11505: LD_ADDR_EXP 33
11509: PUSH
11510: LD_INT 84
11512: ST_TO_ADDR
// tech_Crane := 85 ;
11513: LD_ADDR_EXP 34
11517: PUSH
11518: LD_INT 85
11520: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11521: LD_ADDR_EXP 35
11525: PUSH
11526: LD_INT 86
11528: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11529: LD_ADDR_EXP 36
11533: PUSH
11534: LD_INT 87
11536: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11537: LD_ADDR_EXP 37
11541: PUSH
11542: LD_INT 88
11544: ST_TO_ADDR
// class_mastodont := 31 ;
11545: LD_ADDR_EXP 38
11549: PUSH
11550: LD_INT 31
11552: ST_TO_ADDR
// class_horse := 21 ;
11553: LD_ADDR_EXP 39
11557: PUSH
11558: LD_INT 21
11560: ST_TO_ADDR
// end ;
11561: LD_VAR 0 1
11565: RET
// every 1 do
11566: GO 11568
11568: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11569: CALL 11406 0 0
11573: END
// every 0 0$1 do
11574: GO 11576
11576: DISABLE
// begin enable ;
11577: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11578: LD_STRING updateTimer(
11580: PUSH
11581: LD_OWVAR 1
11585: STR
11586: PUSH
11587: LD_STRING );
11589: STR
11590: PPUSH
11591: CALL_OW 559
// end ;
11595: END
// on MapStart ( p ) do begin if streamModeActive then
11596: LD_EXP 40
11600: IFFALSE 11609
// DefineStreamItems ( true ) ;
11602: LD_INT 1
11604: PPUSH
11605: CALL 13257 0 1
// UpdateFactoryWaypoints ( ) ;
11609: CALL 26841 0 0
// end ;
11613: PPOPN 1
11615: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11616: LD_INT 0
11618: PPUSH
// if p2 = 100 then
11619: LD_VAR 0 2
11623: PUSH
11624: LD_INT 100
11626: EQUAL
11627: IFFALSE 12630
// begin if not StreamModeActive then
11629: LD_EXP 40
11633: NOT
11634: IFFALSE 11644
// StreamModeActive := true ;
11636: LD_ADDR_EXP 40
11640: PUSH
11641: LD_INT 1
11643: ST_TO_ADDR
// if p3 = 0 then
11644: LD_VAR 0 3
11648: PUSH
11649: LD_INT 0
11651: EQUAL
11652: IFFALSE 11658
// InitStreamMode ;
11654: CALL 12793 0 0
// if p3 = 1 then
11658: LD_VAR 0 3
11662: PUSH
11663: LD_INT 1
11665: EQUAL
11666: IFFALSE 11676
// sRocket := true ;
11668: LD_ADDR_EXP 45
11672: PUSH
11673: LD_INT 1
11675: ST_TO_ADDR
// if p3 = 2 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 2
11683: EQUAL
11684: IFFALSE 11694
// sSpeed := true ;
11686: LD_ADDR_EXP 44
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// if p3 = 3 then
11694: LD_VAR 0 3
11698: PUSH
11699: LD_INT 3
11701: EQUAL
11702: IFFALSE 11712
// sEngine := true ;
11704: LD_ADDR_EXP 46
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// if p3 = 4 then
11712: LD_VAR 0 3
11716: PUSH
11717: LD_INT 4
11719: EQUAL
11720: IFFALSE 11730
// sSpec := true ;
11722: LD_ADDR_EXP 43
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// if p3 = 5 then
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 5
11737: EQUAL
11738: IFFALSE 11748
// sLevel := true ;
11740: LD_ADDR_EXP 47
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
// if p3 = 6 then
11748: LD_VAR 0 3
11752: PUSH
11753: LD_INT 6
11755: EQUAL
11756: IFFALSE 11766
// sArmoury := true ;
11758: LD_ADDR_EXP 48
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// if p3 = 7 then
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 7
11773: EQUAL
11774: IFFALSE 11784
// sRadar := true ;
11776: LD_ADDR_EXP 49
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// if p3 = 8 then
11784: LD_VAR 0 3
11788: PUSH
11789: LD_INT 8
11791: EQUAL
11792: IFFALSE 11802
// sBunker := true ;
11794: LD_ADDR_EXP 50
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// if p3 = 9 then
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 9
11809: EQUAL
11810: IFFALSE 11820
// sHack := true ;
11812: LD_ADDR_EXP 51
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// if p3 = 10 then
11820: LD_VAR 0 3
11824: PUSH
11825: LD_INT 10
11827: EQUAL
11828: IFFALSE 11838
// sFire := true ;
11830: LD_ADDR_EXP 52
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// if p3 = 11 then
11838: LD_VAR 0 3
11842: PUSH
11843: LD_INT 11
11845: EQUAL
11846: IFFALSE 11856
// sRefresh := true ;
11848: LD_ADDR_EXP 53
11852: PUSH
11853: LD_INT 1
11855: ST_TO_ADDR
// if p3 = 12 then
11856: LD_VAR 0 3
11860: PUSH
11861: LD_INT 12
11863: EQUAL
11864: IFFALSE 11874
// sExp := true ;
11866: LD_ADDR_EXP 54
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if p3 = 13 then
11874: LD_VAR 0 3
11878: PUSH
11879: LD_INT 13
11881: EQUAL
11882: IFFALSE 11892
// sDepot := true ;
11884: LD_ADDR_EXP 55
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// if p3 = 14 then
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 14
11899: EQUAL
11900: IFFALSE 11910
// sFlag := true ;
11902: LD_ADDR_EXP 56
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// if p3 = 15 then
11910: LD_VAR 0 3
11914: PUSH
11915: LD_INT 15
11917: EQUAL
11918: IFFALSE 11928
// sKamikadze := true ;
11920: LD_ADDR_EXP 64
11924: PUSH
11925: LD_INT 1
11927: ST_TO_ADDR
// if p3 = 16 then
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 16
11935: EQUAL
11936: IFFALSE 11946
// sTroll := true ;
11938: LD_ADDR_EXP 65
11942: PUSH
11943: LD_INT 1
11945: ST_TO_ADDR
// if p3 = 17 then
11946: LD_VAR 0 3
11950: PUSH
11951: LD_INT 17
11953: EQUAL
11954: IFFALSE 11964
// sSlow := true ;
11956: LD_ADDR_EXP 66
11960: PUSH
11961: LD_INT 1
11963: ST_TO_ADDR
// if p3 = 18 then
11964: LD_VAR 0 3
11968: PUSH
11969: LD_INT 18
11971: EQUAL
11972: IFFALSE 11982
// sLack := true ;
11974: LD_ADDR_EXP 67
11978: PUSH
11979: LD_INT 1
11981: ST_TO_ADDR
// if p3 = 19 then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 19
11989: EQUAL
11990: IFFALSE 12000
// sTank := true ;
11992: LD_ADDR_EXP 69
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// if p3 = 20 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 20
12007: EQUAL
12008: IFFALSE 12018
// sRemote := true ;
12010: LD_ADDR_EXP 70
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// if p3 = 21 then
12018: LD_VAR 0 3
12022: PUSH
12023: LD_INT 21
12025: EQUAL
12026: IFFALSE 12036
// sPowell := true ;
12028: LD_ADDR_EXP 71
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// if p3 = 22 then
12036: LD_VAR 0 3
12040: PUSH
12041: LD_INT 22
12043: EQUAL
12044: IFFALSE 12054
// sTeleport := true ;
12046: LD_ADDR_EXP 74
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// if p3 = 23 then
12054: LD_VAR 0 3
12058: PUSH
12059: LD_INT 23
12061: EQUAL
12062: IFFALSE 12072
// sOilTower := true ;
12064: LD_ADDR_EXP 76
12068: PUSH
12069: LD_INT 1
12071: ST_TO_ADDR
// if p3 = 24 then
12072: LD_VAR 0 3
12076: PUSH
12077: LD_INT 24
12079: EQUAL
12080: IFFALSE 12090
// sShovel := true ;
12082: LD_ADDR_EXP 77
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// if p3 = 25 then
12090: LD_VAR 0 3
12094: PUSH
12095: LD_INT 25
12097: EQUAL
12098: IFFALSE 12108
// sSheik := true ;
12100: LD_ADDR_EXP 78
12104: PUSH
12105: LD_INT 1
12107: ST_TO_ADDR
// if p3 = 26 then
12108: LD_VAR 0 3
12112: PUSH
12113: LD_INT 26
12115: EQUAL
12116: IFFALSE 12126
// sEarthquake := true ;
12118: LD_ADDR_EXP 80
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// if p3 = 27 then
12126: LD_VAR 0 3
12130: PUSH
12131: LD_INT 27
12133: EQUAL
12134: IFFALSE 12144
// sAI := true ;
12136: LD_ADDR_EXP 81
12140: PUSH
12141: LD_INT 1
12143: ST_TO_ADDR
// if p3 = 28 then
12144: LD_VAR 0 3
12148: PUSH
12149: LD_INT 28
12151: EQUAL
12152: IFFALSE 12162
// sCargo := true ;
12154: LD_ADDR_EXP 84
12158: PUSH
12159: LD_INT 1
12161: ST_TO_ADDR
// if p3 = 29 then
12162: LD_VAR 0 3
12166: PUSH
12167: LD_INT 29
12169: EQUAL
12170: IFFALSE 12180
// sDLaser := true ;
12172: LD_ADDR_EXP 85
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// if p3 = 30 then
12180: LD_VAR 0 3
12184: PUSH
12185: LD_INT 30
12187: EQUAL
12188: IFFALSE 12198
// sExchange := true ;
12190: LD_ADDR_EXP 86
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// if p3 = 31 then
12198: LD_VAR 0 3
12202: PUSH
12203: LD_INT 31
12205: EQUAL
12206: IFFALSE 12216
// sFac := true ;
12208: LD_ADDR_EXP 87
12212: PUSH
12213: LD_INT 1
12215: ST_TO_ADDR
// if p3 = 32 then
12216: LD_VAR 0 3
12220: PUSH
12221: LD_INT 32
12223: EQUAL
12224: IFFALSE 12234
// sPower := true ;
12226: LD_ADDR_EXP 88
12230: PUSH
12231: LD_INT 1
12233: ST_TO_ADDR
// if p3 = 33 then
12234: LD_VAR 0 3
12238: PUSH
12239: LD_INT 33
12241: EQUAL
12242: IFFALSE 12252
// sRandom := true ;
12244: LD_ADDR_EXP 89
12248: PUSH
12249: LD_INT 1
12251: ST_TO_ADDR
// if p3 = 34 then
12252: LD_VAR 0 3
12256: PUSH
12257: LD_INT 34
12259: EQUAL
12260: IFFALSE 12270
// sShield := true ;
12262: LD_ADDR_EXP 90
12266: PUSH
12267: LD_INT 1
12269: ST_TO_ADDR
// if p3 = 35 then
12270: LD_VAR 0 3
12274: PUSH
12275: LD_INT 35
12277: EQUAL
12278: IFFALSE 12288
// sTime := true ;
12280: LD_ADDR_EXP 91
12284: PUSH
12285: LD_INT 1
12287: ST_TO_ADDR
// if p3 = 36 then
12288: LD_VAR 0 3
12292: PUSH
12293: LD_INT 36
12295: EQUAL
12296: IFFALSE 12306
// sTools := true ;
12298: LD_ADDR_EXP 92
12302: PUSH
12303: LD_INT 1
12305: ST_TO_ADDR
// if p3 = 101 then
12306: LD_VAR 0 3
12310: PUSH
12311: LD_INT 101
12313: EQUAL
12314: IFFALSE 12324
// sSold := true ;
12316: LD_ADDR_EXP 57
12320: PUSH
12321: LD_INT 1
12323: ST_TO_ADDR
// if p3 = 102 then
12324: LD_VAR 0 3
12328: PUSH
12329: LD_INT 102
12331: EQUAL
12332: IFFALSE 12342
// sDiff := true ;
12334: LD_ADDR_EXP 58
12338: PUSH
12339: LD_INT 1
12341: ST_TO_ADDR
// if p3 = 103 then
12342: LD_VAR 0 3
12346: PUSH
12347: LD_INT 103
12349: EQUAL
12350: IFFALSE 12360
// sFog := true ;
12352: LD_ADDR_EXP 61
12356: PUSH
12357: LD_INT 1
12359: ST_TO_ADDR
// if p3 = 104 then
12360: LD_VAR 0 3
12364: PUSH
12365: LD_INT 104
12367: EQUAL
12368: IFFALSE 12378
// sReset := true ;
12370: LD_ADDR_EXP 62
12374: PUSH
12375: LD_INT 1
12377: ST_TO_ADDR
// if p3 = 105 then
12378: LD_VAR 0 3
12382: PUSH
12383: LD_INT 105
12385: EQUAL
12386: IFFALSE 12396
// sSun := true ;
12388: LD_ADDR_EXP 63
12392: PUSH
12393: LD_INT 1
12395: ST_TO_ADDR
// if p3 = 106 then
12396: LD_VAR 0 3
12400: PUSH
12401: LD_INT 106
12403: EQUAL
12404: IFFALSE 12414
// sTiger := true ;
12406: LD_ADDR_EXP 59
12410: PUSH
12411: LD_INT 1
12413: ST_TO_ADDR
// if p3 = 107 then
12414: LD_VAR 0 3
12418: PUSH
12419: LD_INT 107
12421: EQUAL
12422: IFFALSE 12432
// sBomb := true ;
12424: LD_ADDR_EXP 60
12428: PUSH
12429: LD_INT 1
12431: ST_TO_ADDR
// if p3 = 108 then
12432: LD_VAR 0 3
12436: PUSH
12437: LD_INT 108
12439: EQUAL
12440: IFFALSE 12450
// sWound := true ;
12442: LD_ADDR_EXP 68
12446: PUSH
12447: LD_INT 1
12449: ST_TO_ADDR
// if p3 = 109 then
12450: LD_VAR 0 3
12454: PUSH
12455: LD_INT 109
12457: EQUAL
12458: IFFALSE 12468
// sBetray := true ;
12460: LD_ADDR_EXP 72
12464: PUSH
12465: LD_INT 1
12467: ST_TO_ADDR
// if p3 = 110 then
12468: LD_VAR 0 3
12472: PUSH
12473: LD_INT 110
12475: EQUAL
12476: IFFALSE 12486
// sContamin := true ;
12478: LD_ADDR_EXP 73
12482: PUSH
12483: LD_INT 1
12485: ST_TO_ADDR
// if p3 = 111 then
12486: LD_VAR 0 3
12490: PUSH
12491: LD_INT 111
12493: EQUAL
12494: IFFALSE 12504
// sOil := true ;
12496: LD_ADDR_EXP 75
12500: PUSH
12501: LD_INT 1
12503: ST_TO_ADDR
// if p3 = 112 then
12504: LD_VAR 0 3
12508: PUSH
12509: LD_INT 112
12511: EQUAL
12512: IFFALSE 12522
// sStu := true ;
12514: LD_ADDR_EXP 79
12518: PUSH
12519: LD_INT 1
12521: ST_TO_ADDR
// if p3 = 113 then
12522: LD_VAR 0 3
12526: PUSH
12527: LD_INT 113
12529: EQUAL
12530: IFFALSE 12540
// sBazooka := true ;
12532: LD_ADDR_EXP 82
12536: PUSH
12537: LD_INT 1
12539: ST_TO_ADDR
// if p3 = 114 then
12540: LD_VAR 0 3
12544: PUSH
12545: LD_INT 114
12547: EQUAL
12548: IFFALSE 12558
// sMortar := true ;
12550: LD_ADDR_EXP 83
12554: PUSH
12555: LD_INT 1
12557: ST_TO_ADDR
// if p3 = 115 then
12558: LD_VAR 0 3
12562: PUSH
12563: LD_INT 115
12565: EQUAL
12566: IFFALSE 12576
// sRanger := true ;
12568: LD_ADDR_EXP 93
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// if p3 = 116 then
12576: LD_VAR 0 3
12580: PUSH
12581: LD_INT 116
12583: EQUAL
12584: IFFALSE 12594
// sComputer := true ;
12586: LD_ADDR_EXP 94
12590: PUSH
12591: LD_INT 1
12593: ST_TO_ADDR
// if p3 = 117 then
12594: LD_VAR 0 3
12598: PUSH
12599: LD_INT 117
12601: EQUAL
12602: IFFALSE 12612
// s30 := true ;
12604: LD_ADDR_EXP 95
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// if p3 = 118 then
12612: LD_VAR 0 3
12616: PUSH
12617: LD_INT 118
12619: EQUAL
12620: IFFALSE 12630
// s60 := true ;
12622: LD_ADDR_EXP 96
12626: PUSH
12627: LD_INT 1
12629: ST_TO_ADDR
// end ; if p2 = 101 then
12630: LD_VAR 0 2
12634: PUSH
12635: LD_INT 101
12637: EQUAL
12638: IFFALSE 12766
// begin case p3 of 1 :
12640: LD_VAR 0 3
12644: PUSH
12645: LD_INT 1
12647: DOUBLE
12648: EQUAL
12649: IFTRUE 12653
12651: GO 12660
12653: POP
// hHackUnlimitedResources ; 2 :
12654: CALL 24864 0 0
12658: GO 12766
12660: LD_INT 2
12662: DOUBLE
12663: EQUAL
12664: IFTRUE 12668
12666: GO 12675
12668: POP
// hHackSetLevel10 ; 3 :
12669: CALL 24997 0 0
12673: GO 12766
12675: LD_INT 3
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12690
12683: POP
// hHackSetLevel10YourUnits ; 4 :
12684: CALL 25082 0 0
12688: GO 12766
12690: LD_INT 4
12692: DOUBLE
12693: EQUAL
12694: IFTRUE 12698
12696: GO 12705
12698: POP
// hHackInvincible ; 5 :
12699: CALL 25530 0 0
12703: GO 12766
12705: LD_INT 5
12707: DOUBLE
12708: EQUAL
12709: IFTRUE 12713
12711: GO 12720
12713: POP
// hHackInvisible ; 6 :
12714: CALL 25641 0 0
12718: GO 12766
12720: LD_INT 6
12722: DOUBLE
12723: EQUAL
12724: IFTRUE 12728
12726: GO 12735
12728: POP
// hHackChangeYourSide ; 7 :
12729: CALL 25698 0 0
12733: GO 12766
12735: LD_INT 7
12737: DOUBLE
12738: EQUAL
12739: IFTRUE 12743
12741: GO 12750
12743: POP
// hHackChangeUnitSide ; 8 :
12744: CALL 25740 0 0
12748: GO 12766
12750: LD_INT 8
12752: DOUBLE
12753: EQUAL
12754: IFTRUE 12758
12756: GO 12765
12758: POP
// hHackFog ; end ;
12759: CALL 25841 0 0
12763: GO 12766
12765: POP
// end ; end ;
12766: LD_VAR 0 7
12770: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12771: GO 12773
12773: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12774: LD_STRING initStreamRollete();
12776: PPUSH
12777: CALL_OW 559
// InitStreamMode ;
12781: CALL 12793 0 0
// DefineStreamItems ( false ) ;
12785: LD_INT 0
12787: PPUSH
12788: CALL 13257 0 1
// end ;
12792: END
// function InitStreamMode ; begin
12793: LD_INT 0
12795: PPUSH
// streamModeActive := false ;
12796: LD_ADDR_EXP 40
12800: PUSH
12801: LD_INT 0
12803: ST_TO_ADDR
// normalCounter := 36 ;
12804: LD_ADDR_EXP 41
12808: PUSH
12809: LD_INT 36
12811: ST_TO_ADDR
// hardcoreCounter := 18 ;
12812: LD_ADDR_EXP 42
12816: PUSH
12817: LD_INT 18
12819: ST_TO_ADDR
// sRocket := false ;
12820: LD_ADDR_EXP 45
12824: PUSH
12825: LD_INT 0
12827: ST_TO_ADDR
// sSpeed := false ;
12828: LD_ADDR_EXP 44
12832: PUSH
12833: LD_INT 0
12835: ST_TO_ADDR
// sEngine := false ;
12836: LD_ADDR_EXP 46
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// sSpec := false ;
12844: LD_ADDR_EXP 43
12848: PUSH
12849: LD_INT 0
12851: ST_TO_ADDR
// sLevel := false ;
12852: LD_ADDR_EXP 47
12856: PUSH
12857: LD_INT 0
12859: ST_TO_ADDR
// sArmoury := false ;
12860: LD_ADDR_EXP 48
12864: PUSH
12865: LD_INT 0
12867: ST_TO_ADDR
// sRadar := false ;
12868: LD_ADDR_EXP 49
12872: PUSH
12873: LD_INT 0
12875: ST_TO_ADDR
// sBunker := false ;
12876: LD_ADDR_EXP 50
12880: PUSH
12881: LD_INT 0
12883: ST_TO_ADDR
// sHack := false ;
12884: LD_ADDR_EXP 51
12888: PUSH
12889: LD_INT 0
12891: ST_TO_ADDR
// sFire := false ;
12892: LD_ADDR_EXP 52
12896: PUSH
12897: LD_INT 0
12899: ST_TO_ADDR
// sRefresh := false ;
12900: LD_ADDR_EXP 53
12904: PUSH
12905: LD_INT 0
12907: ST_TO_ADDR
// sExp := false ;
12908: LD_ADDR_EXP 54
12912: PUSH
12913: LD_INT 0
12915: ST_TO_ADDR
// sDepot := false ;
12916: LD_ADDR_EXP 55
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
// sFlag := false ;
12924: LD_ADDR_EXP 56
12928: PUSH
12929: LD_INT 0
12931: ST_TO_ADDR
// sKamikadze := false ;
12932: LD_ADDR_EXP 64
12936: PUSH
12937: LD_INT 0
12939: ST_TO_ADDR
// sTroll := false ;
12940: LD_ADDR_EXP 65
12944: PUSH
12945: LD_INT 0
12947: ST_TO_ADDR
// sSlow := false ;
12948: LD_ADDR_EXP 66
12952: PUSH
12953: LD_INT 0
12955: ST_TO_ADDR
// sLack := false ;
12956: LD_ADDR_EXP 67
12960: PUSH
12961: LD_INT 0
12963: ST_TO_ADDR
// sTank := false ;
12964: LD_ADDR_EXP 69
12968: PUSH
12969: LD_INT 0
12971: ST_TO_ADDR
// sRemote := false ;
12972: LD_ADDR_EXP 70
12976: PUSH
12977: LD_INT 0
12979: ST_TO_ADDR
// sPowell := false ;
12980: LD_ADDR_EXP 71
12984: PUSH
12985: LD_INT 0
12987: ST_TO_ADDR
// sTeleport := false ;
12988: LD_ADDR_EXP 74
12992: PUSH
12993: LD_INT 0
12995: ST_TO_ADDR
// sOilTower := false ;
12996: LD_ADDR_EXP 76
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// sShovel := false ;
13004: LD_ADDR_EXP 77
13008: PUSH
13009: LD_INT 0
13011: ST_TO_ADDR
// sSheik := false ;
13012: LD_ADDR_EXP 78
13016: PUSH
13017: LD_INT 0
13019: ST_TO_ADDR
// sEarthquake := false ;
13020: LD_ADDR_EXP 80
13024: PUSH
13025: LD_INT 0
13027: ST_TO_ADDR
// sAI := false ;
13028: LD_ADDR_EXP 81
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// sCargo := false ;
13036: LD_ADDR_EXP 84
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// sDLaser := false ;
13044: LD_ADDR_EXP 85
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// sExchange := false ;
13052: LD_ADDR_EXP 86
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// sFac := false ;
13060: LD_ADDR_EXP 87
13064: PUSH
13065: LD_INT 0
13067: ST_TO_ADDR
// sPower := false ;
13068: LD_ADDR_EXP 88
13072: PUSH
13073: LD_INT 0
13075: ST_TO_ADDR
// sRandom := false ;
13076: LD_ADDR_EXP 89
13080: PUSH
13081: LD_INT 0
13083: ST_TO_ADDR
// sShield := false ;
13084: LD_ADDR_EXP 90
13088: PUSH
13089: LD_INT 0
13091: ST_TO_ADDR
// sTime := false ;
13092: LD_ADDR_EXP 91
13096: PUSH
13097: LD_INT 0
13099: ST_TO_ADDR
// sTools := false ;
13100: LD_ADDR_EXP 92
13104: PUSH
13105: LD_INT 0
13107: ST_TO_ADDR
// sSold := false ;
13108: LD_ADDR_EXP 57
13112: PUSH
13113: LD_INT 0
13115: ST_TO_ADDR
// sDiff := false ;
13116: LD_ADDR_EXP 58
13120: PUSH
13121: LD_INT 0
13123: ST_TO_ADDR
// sFog := false ;
13124: LD_ADDR_EXP 61
13128: PUSH
13129: LD_INT 0
13131: ST_TO_ADDR
// sReset := false ;
13132: LD_ADDR_EXP 62
13136: PUSH
13137: LD_INT 0
13139: ST_TO_ADDR
// sSun := false ;
13140: LD_ADDR_EXP 63
13144: PUSH
13145: LD_INT 0
13147: ST_TO_ADDR
// sTiger := false ;
13148: LD_ADDR_EXP 59
13152: PUSH
13153: LD_INT 0
13155: ST_TO_ADDR
// sBomb := false ;
13156: LD_ADDR_EXP 60
13160: PUSH
13161: LD_INT 0
13163: ST_TO_ADDR
// sWound := false ;
13164: LD_ADDR_EXP 68
13168: PUSH
13169: LD_INT 0
13171: ST_TO_ADDR
// sBetray := false ;
13172: LD_ADDR_EXP 72
13176: PUSH
13177: LD_INT 0
13179: ST_TO_ADDR
// sContamin := false ;
13180: LD_ADDR_EXP 73
13184: PUSH
13185: LD_INT 0
13187: ST_TO_ADDR
// sOil := false ;
13188: LD_ADDR_EXP 75
13192: PUSH
13193: LD_INT 0
13195: ST_TO_ADDR
// sStu := false ;
13196: LD_ADDR_EXP 79
13200: PUSH
13201: LD_INT 0
13203: ST_TO_ADDR
// sBazooka := false ;
13204: LD_ADDR_EXP 82
13208: PUSH
13209: LD_INT 0
13211: ST_TO_ADDR
// sMortar := false ;
13212: LD_ADDR_EXP 83
13216: PUSH
13217: LD_INT 0
13219: ST_TO_ADDR
// sRanger := false ;
13220: LD_ADDR_EXP 93
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// sComputer := false ;
13228: LD_ADDR_EXP 94
13232: PUSH
13233: LD_INT 0
13235: ST_TO_ADDR
// s30 := false ;
13236: LD_ADDR_EXP 95
13240: PUSH
13241: LD_INT 0
13243: ST_TO_ADDR
// s60 := false ;
13244: LD_ADDR_EXP 96
13248: PUSH
13249: LD_INT 0
13251: ST_TO_ADDR
// end ;
13252: LD_VAR 0 1
13256: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
13264: PPUSH
13265: PPUSH
// result := [ ] ;
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: EMPTY
13272: ST_TO_ADDR
// if campaign_id = 1 then
13273: LD_OWVAR 69
13277: PUSH
13278: LD_INT 1
13280: EQUAL
13281: IFFALSE 16447
// begin case mission_number of 1 :
13283: LD_OWVAR 70
13287: PUSH
13288: LD_INT 1
13290: DOUBLE
13291: EQUAL
13292: IFTRUE 13296
13294: GO 13372
13296: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13297: LD_ADDR_VAR 0 2
13301: PUSH
13302: LD_INT 2
13304: PUSH
13305: LD_INT 4
13307: PUSH
13308: LD_INT 11
13310: PUSH
13311: LD_INT 12
13313: PUSH
13314: LD_INT 15
13316: PUSH
13317: LD_INT 16
13319: PUSH
13320: LD_INT 22
13322: PUSH
13323: LD_INT 23
13325: PUSH
13326: LD_INT 26
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 101
13342: PUSH
13343: LD_INT 102
13345: PUSH
13346: LD_INT 106
13348: PUSH
13349: LD_INT 116
13351: PUSH
13352: LD_INT 117
13354: PUSH
13355: LD_INT 118
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: ST_TO_ADDR
13370: GO 16445
13372: LD_INT 2
13374: DOUBLE
13375: EQUAL
13376: IFTRUE 13380
13378: GO 13464
13380: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13381: LD_ADDR_VAR 0 2
13385: PUSH
13386: LD_INT 2
13388: PUSH
13389: LD_INT 4
13391: PUSH
13392: LD_INT 11
13394: PUSH
13395: LD_INT 12
13397: PUSH
13398: LD_INT 15
13400: PUSH
13401: LD_INT 16
13403: PUSH
13404: LD_INT 22
13406: PUSH
13407: LD_INT 23
13409: PUSH
13410: LD_INT 26
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 101
13426: PUSH
13427: LD_INT 102
13429: PUSH
13430: LD_INT 105
13432: PUSH
13433: LD_INT 106
13435: PUSH
13436: LD_INT 108
13438: PUSH
13439: LD_INT 116
13441: PUSH
13442: LD_INT 117
13444: PUSH
13445: LD_INT 118
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: ST_TO_ADDR
13462: GO 16445
13464: LD_INT 3
13466: DOUBLE
13467: EQUAL
13468: IFTRUE 13472
13470: GO 13560
13472: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13473: LD_ADDR_VAR 0 2
13477: PUSH
13478: LD_INT 2
13480: PUSH
13481: LD_INT 4
13483: PUSH
13484: LD_INT 5
13486: PUSH
13487: LD_INT 11
13489: PUSH
13490: LD_INT 12
13492: PUSH
13493: LD_INT 15
13495: PUSH
13496: LD_INT 16
13498: PUSH
13499: LD_INT 22
13501: PUSH
13502: LD_INT 26
13504: PUSH
13505: LD_INT 36
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 101
13522: PUSH
13523: LD_INT 102
13525: PUSH
13526: LD_INT 105
13528: PUSH
13529: LD_INT 106
13531: PUSH
13532: LD_INT 108
13534: PUSH
13535: LD_INT 116
13537: PUSH
13538: LD_INT 117
13540: PUSH
13541: LD_INT 118
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: ST_TO_ADDR
13558: GO 16445
13560: LD_INT 4
13562: DOUBLE
13563: EQUAL
13564: IFTRUE 13568
13566: GO 13664
13568: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13569: LD_ADDR_VAR 0 2
13573: PUSH
13574: LD_INT 2
13576: PUSH
13577: LD_INT 4
13579: PUSH
13580: LD_INT 5
13582: PUSH
13583: LD_INT 8
13585: PUSH
13586: LD_INT 11
13588: PUSH
13589: LD_INT 12
13591: PUSH
13592: LD_INT 15
13594: PUSH
13595: LD_INT 16
13597: PUSH
13598: LD_INT 22
13600: PUSH
13601: LD_INT 23
13603: PUSH
13604: LD_INT 26
13606: PUSH
13607: LD_INT 36
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 101
13626: PUSH
13627: LD_INT 102
13629: PUSH
13630: LD_INT 105
13632: PUSH
13633: LD_INT 106
13635: PUSH
13636: LD_INT 108
13638: PUSH
13639: LD_INT 116
13641: PUSH
13642: LD_INT 117
13644: PUSH
13645: LD_INT 118
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: ST_TO_ADDR
13662: GO 16445
13664: LD_INT 5
13666: DOUBLE
13667: EQUAL
13668: IFTRUE 13672
13670: GO 13784
13672: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_INT 2
13680: PUSH
13681: LD_INT 4
13683: PUSH
13684: LD_INT 5
13686: PUSH
13687: LD_INT 6
13689: PUSH
13690: LD_INT 8
13692: PUSH
13693: LD_INT 11
13695: PUSH
13696: LD_INT 12
13698: PUSH
13699: LD_INT 15
13701: PUSH
13702: LD_INT 16
13704: PUSH
13705: LD_INT 22
13707: PUSH
13708: LD_INT 23
13710: PUSH
13711: LD_INT 25
13713: PUSH
13714: LD_INT 26
13716: PUSH
13717: LD_INT 36
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 101
13738: PUSH
13739: LD_INT 102
13741: PUSH
13742: LD_INT 105
13744: PUSH
13745: LD_INT 106
13747: PUSH
13748: LD_INT 108
13750: PUSH
13751: LD_INT 109
13753: PUSH
13754: LD_INT 112
13756: PUSH
13757: LD_INT 116
13759: PUSH
13760: LD_INT 117
13762: PUSH
13763: LD_INT 118
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: ST_TO_ADDR
13782: GO 16445
13784: LD_INT 6
13786: DOUBLE
13787: EQUAL
13788: IFTRUE 13792
13790: GO 13924
13792: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13793: LD_ADDR_VAR 0 2
13797: PUSH
13798: LD_INT 2
13800: PUSH
13801: LD_INT 4
13803: PUSH
13804: LD_INT 5
13806: PUSH
13807: LD_INT 6
13809: PUSH
13810: LD_INT 8
13812: PUSH
13813: LD_INT 11
13815: PUSH
13816: LD_INT 12
13818: PUSH
13819: LD_INT 15
13821: PUSH
13822: LD_INT 16
13824: PUSH
13825: LD_INT 20
13827: PUSH
13828: LD_INT 21
13830: PUSH
13831: LD_INT 22
13833: PUSH
13834: LD_INT 23
13836: PUSH
13837: LD_INT 25
13839: PUSH
13840: LD_INT 26
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 31
13848: PUSH
13849: LD_INT 32
13851: PUSH
13852: LD_INT 36
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 101
13878: PUSH
13879: LD_INT 102
13881: PUSH
13882: LD_INT 105
13884: PUSH
13885: LD_INT 106
13887: PUSH
13888: LD_INT 108
13890: PUSH
13891: LD_INT 109
13893: PUSH
13894: LD_INT 112
13896: PUSH
13897: LD_INT 116
13899: PUSH
13900: LD_INT 117
13902: PUSH
13903: LD_INT 118
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: ST_TO_ADDR
13922: GO 16445
13924: LD_INT 7
13926: DOUBLE
13927: EQUAL
13928: IFTRUE 13932
13930: GO 14044
13932: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13933: LD_ADDR_VAR 0 2
13937: PUSH
13938: LD_INT 2
13940: PUSH
13941: LD_INT 4
13943: PUSH
13944: LD_INT 5
13946: PUSH
13947: LD_INT 7
13949: PUSH
13950: LD_INT 11
13952: PUSH
13953: LD_INT 12
13955: PUSH
13956: LD_INT 15
13958: PUSH
13959: LD_INT 16
13961: PUSH
13962: LD_INT 20
13964: PUSH
13965: LD_INT 21
13967: PUSH
13968: LD_INT 22
13970: PUSH
13971: LD_INT 23
13973: PUSH
13974: LD_INT 25
13976: PUSH
13977: LD_INT 26
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 101
13998: PUSH
13999: LD_INT 102
14001: PUSH
14002: LD_INT 103
14004: PUSH
14005: LD_INT 105
14007: PUSH
14008: LD_INT 106
14010: PUSH
14011: LD_INT 108
14013: PUSH
14014: LD_INT 112
14016: PUSH
14017: LD_INT 116
14019: PUSH
14020: LD_INT 117
14022: PUSH
14023: LD_INT 118
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: ST_TO_ADDR
14042: GO 16445
14044: LD_INT 8
14046: DOUBLE
14047: EQUAL
14048: IFTRUE 14052
14050: GO 14192
14052: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14053: LD_ADDR_VAR 0 2
14057: PUSH
14058: LD_INT 2
14060: PUSH
14061: LD_INT 4
14063: PUSH
14064: LD_INT 5
14066: PUSH
14067: LD_INT 6
14069: PUSH
14070: LD_INT 7
14072: PUSH
14073: LD_INT 8
14075: PUSH
14076: LD_INT 11
14078: PUSH
14079: LD_INT 12
14081: PUSH
14082: LD_INT 15
14084: PUSH
14085: LD_INT 16
14087: PUSH
14088: LD_INT 20
14090: PUSH
14091: LD_INT 21
14093: PUSH
14094: LD_INT 22
14096: PUSH
14097: LD_INT 23
14099: PUSH
14100: LD_INT 25
14102: PUSH
14103: LD_INT 26
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 31
14111: PUSH
14112: LD_INT 32
14114: PUSH
14115: LD_INT 36
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 101
14142: PUSH
14143: LD_INT 102
14145: PUSH
14146: LD_INT 103
14148: PUSH
14149: LD_INT 105
14151: PUSH
14152: LD_INT 106
14154: PUSH
14155: LD_INT 108
14157: PUSH
14158: LD_INT 109
14160: PUSH
14161: LD_INT 112
14163: PUSH
14164: LD_INT 116
14166: PUSH
14167: LD_INT 117
14169: PUSH
14170: LD_INT 118
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: ST_TO_ADDR
14190: GO 16445
14192: LD_INT 9
14194: DOUBLE
14195: EQUAL
14196: IFTRUE 14200
14198: GO 14348
14200: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14201: LD_ADDR_VAR 0 2
14205: PUSH
14206: LD_INT 2
14208: PUSH
14209: LD_INT 4
14211: PUSH
14212: LD_INT 5
14214: PUSH
14215: LD_INT 6
14217: PUSH
14218: LD_INT 7
14220: PUSH
14221: LD_INT 8
14223: PUSH
14224: LD_INT 11
14226: PUSH
14227: LD_INT 12
14229: PUSH
14230: LD_INT 15
14232: PUSH
14233: LD_INT 16
14235: PUSH
14236: LD_INT 20
14238: PUSH
14239: LD_INT 21
14241: PUSH
14242: LD_INT 22
14244: PUSH
14245: LD_INT 23
14247: PUSH
14248: LD_INT 25
14250: PUSH
14251: LD_INT 26
14253: PUSH
14254: LD_INT 28
14256: PUSH
14257: LD_INT 30
14259: PUSH
14260: LD_INT 31
14262: PUSH
14263: LD_INT 32
14265: PUSH
14266: LD_INT 36
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 101
14294: PUSH
14295: LD_INT 102
14297: PUSH
14298: LD_INT 103
14300: PUSH
14301: LD_INT 105
14303: PUSH
14304: LD_INT 106
14306: PUSH
14307: LD_INT 108
14309: PUSH
14310: LD_INT 109
14312: PUSH
14313: LD_INT 112
14315: PUSH
14316: LD_INT 114
14318: PUSH
14319: LD_INT 116
14321: PUSH
14322: LD_INT 117
14324: PUSH
14325: LD_INT 118
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: ST_TO_ADDR
14346: GO 16445
14348: LD_INT 10
14350: DOUBLE
14351: EQUAL
14352: IFTRUE 14356
14354: GO 14552
14356: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14357: LD_ADDR_VAR 0 2
14361: PUSH
14362: LD_INT 2
14364: PUSH
14365: LD_INT 4
14367: PUSH
14368: LD_INT 5
14370: PUSH
14371: LD_INT 6
14373: PUSH
14374: LD_INT 7
14376: PUSH
14377: LD_INT 8
14379: PUSH
14380: LD_INT 9
14382: PUSH
14383: LD_INT 10
14385: PUSH
14386: LD_INT 11
14388: PUSH
14389: LD_INT 12
14391: PUSH
14392: LD_INT 13
14394: PUSH
14395: LD_INT 14
14397: PUSH
14398: LD_INT 15
14400: PUSH
14401: LD_INT 16
14403: PUSH
14404: LD_INT 17
14406: PUSH
14407: LD_INT 18
14409: PUSH
14410: LD_INT 19
14412: PUSH
14413: LD_INT 20
14415: PUSH
14416: LD_INT 21
14418: PUSH
14419: LD_INT 22
14421: PUSH
14422: LD_INT 23
14424: PUSH
14425: LD_INT 24
14427: PUSH
14428: LD_INT 25
14430: PUSH
14431: LD_INT 26
14433: PUSH
14434: LD_INT 28
14436: PUSH
14437: LD_INT 30
14439: PUSH
14440: LD_INT 31
14442: PUSH
14443: LD_INT 32
14445: PUSH
14446: LD_INT 36
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: PUSH
14480: LD_INT 101
14482: PUSH
14483: LD_INT 102
14485: PUSH
14486: LD_INT 103
14488: PUSH
14489: LD_INT 104
14491: PUSH
14492: LD_INT 105
14494: PUSH
14495: LD_INT 106
14497: PUSH
14498: LD_INT 107
14500: PUSH
14501: LD_INT 108
14503: PUSH
14504: LD_INT 109
14506: PUSH
14507: LD_INT 110
14509: PUSH
14510: LD_INT 111
14512: PUSH
14513: LD_INT 112
14515: PUSH
14516: LD_INT 114
14518: PUSH
14519: LD_INT 116
14521: PUSH
14522: LD_INT 117
14524: PUSH
14525: LD_INT 118
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: ST_TO_ADDR
14550: GO 16445
14552: LD_INT 11
14554: DOUBLE
14555: EQUAL
14556: IFTRUE 14560
14558: GO 14764
14560: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14561: LD_ADDR_VAR 0 2
14565: PUSH
14566: LD_INT 2
14568: PUSH
14569: LD_INT 3
14571: PUSH
14572: LD_INT 4
14574: PUSH
14575: LD_INT 5
14577: PUSH
14578: LD_INT 6
14580: PUSH
14581: LD_INT 7
14583: PUSH
14584: LD_INT 8
14586: PUSH
14587: LD_INT 9
14589: PUSH
14590: LD_INT 10
14592: PUSH
14593: LD_INT 11
14595: PUSH
14596: LD_INT 12
14598: PUSH
14599: LD_INT 13
14601: PUSH
14602: LD_INT 14
14604: PUSH
14605: LD_INT 15
14607: PUSH
14608: LD_INT 16
14610: PUSH
14611: LD_INT 17
14613: PUSH
14614: LD_INT 18
14616: PUSH
14617: LD_INT 19
14619: PUSH
14620: LD_INT 20
14622: PUSH
14623: LD_INT 21
14625: PUSH
14626: LD_INT 22
14628: PUSH
14629: LD_INT 23
14631: PUSH
14632: LD_INT 24
14634: PUSH
14635: LD_INT 25
14637: PUSH
14638: LD_INT 26
14640: PUSH
14641: LD_INT 28
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 31
14649: PUSH
14650: LD_INT 32
14652: PUSH
14653: LD_INT 34
14655: PUSH
14656: LD_INT 36
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 101
14694: PUSH
14695: LD_INT 102
14697: PUSH
14698: LD_INT 103
14700: PUSH
14701: LD_INT 104
14703: PUSH
14704: LD_INT 105
14706: PUSH
14707: LD_INT 106
14709: PUSH
14710: LD_INT 107
14712: PUSH
14713: LD_INT 108
14715: PUSH
14716: LD_INT 109
14718: PUSH
14719: LD_INT 110
14721: PUSH
14722: LD_INT 111
14724: PUSH
14725: LD_INT 112
14727: PUSH
14728: LD_INT 114
14730: PUSH
14731: LD_INT 116
14733: PUSH
14734: LD_INT 117
14736: PUSH
14737: LD_INT 118
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: ST_TO_ADDR
14762: GO 16445
14764: LD_INT 12
14766: DOUBLE
14767: EQUAL
14768: IFTRUE 14772
14770: GO 14992
14772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14773: LD_ADDR_VAR 0 2
14777: PUSH
14778: LD_INT 1
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: LD_INT 3
14786: PUSH
14787: LD_INT 4
14789: PUSH
14790: LD_INT 5
14792: PUSH
14793: LD_INT 6
14795: PUSH
14796: LD_INT 7
14798: PUSH
14799: LD_INT 8
14801: PUSH
14802: LD_INT 9
14804: PUSH
14805: LD_INT 10
14807: PUSH
14808: LD_INT 11
14810: PUSH
14811: LD_INT 12
14813: PUSH
14814: LD_INT 13
14816: PUSH
14817: LD_INT 14
14819: PUSH
14820: LD_INT 15
14822: PUSH
14823: LD_INT 16
14825: PUSH
14826: LD_INT 17
14828: PUSH
14829: LD_INT 18
14831: PUSH
14832: LD_INT 19
14834: PUSH
14835: LD_INT 20
14837: PUSH
14838: LD_INT 21
14840: PUSH
14841: LD_INT 22
14843: PUSH
14844: LD_INT 23
14846: PUSH
14847: LD_INT 24
14849: PUSH
14850: LD_INT 25
14852: PUSH
14853: LD_INT 26
14855: PUSH
14856: LD_INT 27
14858: PUSH
14859: LD_INT 28
14861: PUSH
14862: LD_INT 30
14864: PUSH
14865: LD_INT 31
14867: PUSH
14868: LD_INT 32
14870: PUSH
14871: LD_INT 33
14873: PUSH
14874: LD_INT 34
14876: PUSH
14877: LD_INT 36
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: PUSH
14916: LD_INT 101
14918: PUSH
14919: LD_INT 102
14921: PUSH
14922: LD_INT 103
14924: PUSH
14925: LD_INT 104
14927: PUSH
14928: LD_INT 105
14930: PUSH
14931: LD_INT 106
14933: PUSH
14934: LD_INT 107
14936: PUSH
14937: LD_INT 108
14939: PUSH
14940: LD_INT 109
14942: PUSH
14943: LD_INT 110
14945: PUSH
14946: LD_INT 111
14948: PUSH
14949: LD_INT 112
14951: PUSH
14952: LD_INT 113
14954: PUSH
14955: LD_INT 114
14957: PUSH
14958: LD_INT 116
14960: PUSH
14961: LD_INT 117
14963: PUSH
14964: LD_INT 118
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: ST_TO_ADDR
14990: GO 16445
14992: LD_INT 13
14994: DOUBLE
14995: EQUAL
14996: IFTRUE 15000
14998: GO 15208
15000: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15001: LD_ADDR_VAR 0 2
15005: PUSH
15006: LD_INT 1
15008: PUSH
15009: LD_INT 2
15011: PUSH
15012: LD_INT 3
15014: PUSH
15015: LD_INT 4
15017: PUSH
15018: LD_INT 5
15020: PUSH
15021: LD_INT 8
15023: PUSH
15024: LD_INT 9
15026: PUSH
15027: LD_INT 10
15029: PUSH
15030: LD_INT 11
15032: PUSH
15033: LD_INT 12
15035: PUSH
15036: LD_INT 14
15038: PUSH
15039: LD_INT 15
15041: PUSH
15042: LD_INT 16
15044: PUSH
15045: LD_INT 17
15047: PUSH
15048: LD_INT 18
15050: PUSH
15051: LD_INT 19
15053: PUSH
15054: LD_INT 20
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 22
15062: PUSH
15063: LD_INT 23
15065: PUSH
15066: LD_INT 24
15068: PUSH
15069: LD_INT 25
15071: PUSH
15072: LD_INT 26
15074: PUSH
15075: LD_INT 27
15077: PUSH
15078: LD_INT 28
15080: PUSH
15081: LD_INT 30
15083: PUSH
15084: LD_INT 31
15086: PUSH
15087: LD_INT 32
15089: PUSH
15090: LD_INT 33
15092: PUSH
15093: LD_INT 34
15095: PUSH
15096: LD_INT 36
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 101
15134: PUSH
15135: LD_INT 102
15137: PUSH
15138: LD_INT 103
15140: PUSH
15141: LD_INT 104
15143: PUSH
15144: LD_INT 105
15146: PUSH
15147: LD_INT 106
15149: PUSH
15150: LD_INT 107
15152: PUSH
15153: LD_INT 108
15155: PUSH
15156: LD_INT 109
15158: PUSH
15159: LD_INT 110
15161: PUSH
15162: LD_INT 111
15164: PUSH
15165: LD_INT 112
15167: PUSH
15168: LD_INT 113
15170: PUSH
15171: LD_INT 114
15173: PUSH
15174: LD_INT 116
15176: PUSH
15177: LD_INT 117
15179: PUSH
15180: LD_INT 118
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: ST_TO_ADDR
15206: GO 16445
15208: LD_INT 14
15210: DOUBLE
15211: EQUAL
15212: IFTRUE 15216
15214: GO 15440
15216: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15217: LD_ADDR_VAR 0 2
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: LD_INT 2
15227: PUSH
15228: LD_INT 3
15230: PUSH
15231: LD_INT 4
15233: PUSH
15234: LD_INT 5
15236: PUSH
15237: LD_INT 6
15239: PUSH
15240: LD_INT 7
15242: PUSH
15243: LD_INT 8
15245: PUSH
15246: LD_INT 9
15248: PUSH
15249: LD_INT 10
15251: PUSH
15252: LD_INT 11
15254: PUSH
15255: LD_INT 12
15257: PUSH
15258: LD_INT 13
15260: PUSH
15261: LD_INT 14
15263: PUSH
15264: LD_INT 15
15266: PUSH
15267: LD_INT 16
15269: PUSH
15270: LD_INT 17
15272: PUSH
15273: LD_INT 18
15275: PUSH
15276: LD_INT 19
15278: PUSH
15279: LD_INT 20
15281: PUSH
15282: LD_INT 21
15284: PUSH
15285: LD_INT 22
15287: PUSH
15288: LD_INT 23
15290: PUSH
15291: LD_INT 24
15293: PUSH
15294: LD_INT 25
15296: PUSH
15297: LD_INT 26
15299: PUSH
15300: LD_INT 27
15302: PUSH
15303: LD_INT 28
15305: PUSH
15306: LD_INT 29
15308: PUSH
15309: LD_INT 30
15311: PUSH
15312: LD_INT 31
15314: PUSH
15315: LD_INT 32
15317: PUSH
15318: LD_INT 33
15320: PUSH
15321: LD_INT 34
15323: PUSH
15324: LD_INT 36
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 101
15366: PUSH
15367: LD_INT 102
15369: PUSH
15370: LD_INT 103
15372: PUSH
15373: LD_INT 104
15375: PUSH
15376: LD_INT 105
15378: PUSH
15379: LD_INT 106
15381: PUSH
15382: LD_INT 107
15384: PUSH
15385: LD_INT 108
15387: PUSH
15388: LD_INT 109
15390: PUSH
15391: LD_INT 110
15393: PUSH
15394: LD_INT 111
15396: PUSH
15397: LD_INT 112
15399: PUSH
15400: LD_INT 113
15402: PUSH
15403: LD_INT 114
15405: PUSH
15406: LD_INT 116
15408: PUSH
15409: LD_INT 117
15411: PUSH
15412: LD_INT 118
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: ST_TO_ADDR
15438: GO 16445
15440: LD_INT 15
15442: DOUBLE
15443: EQUAL
15444: IFTRUE 15448
15446: GO 15672
15448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15449: LD_ADDR_VAR 0 2
15453: PUSH
15454: LD_INT 1
15456: PUSH
15457: LD_INT 2
15459: PUSH
15460: LD_INT 3
15462: PUSH
15463: LD_INT 4
15465: PUSH
15466: LD_INT 5
15468: PUSH
15469: LD_INT 6
15471: PUSH
15472: LD_INT 7
15474: PUSH
15475: LD_INT 8
15477: PUSH
15478: LD_INT 9
15480: PUSH
15481: LD_INT 10
15483: PUSH
15484: LD_INT 11
15486: PUSH
15487: LD_INT 12
15489: PUSH
15490: LD_INT 13
15492: PUSH
15493: LD_INT 14
15495: PUSH
15496: LD_INT 15
15498: PUSH
15499: LD_INT 16
15501: PUSH
15502: LD_INT 17
15504: PUSH
15505: LD_INT 18
15507: PUSH
15508: LD_INT 19
15510: PUSH
15511: LD_INT 20
15513: PUSH
15514: LD_INT 21
15516: PUSH
15517: LD_INT 22
15519: PUSH
15520: LD_INT 23
15522: PUSH
15523: LD_INT 24
15525: PUSH
15526: LD_INT 25
15528: PUSH
15529: LD_INT 26
15531: PUSH
15532: LD_INT 27
15534: PUSH
15535: LD_INT 28
15537: PUSH
15538: LD_INT 29
15540: PUSH
15541: LD_INT 30
15543: PUSH
15544: LD_INT 31
15546: PUSH
15547: LD_INT 32
15549: PUSH
15550: LD_INT 33
15552: PUSH
15553: LD_INT 34
15555: PUSH
15556: LD_INT 36
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 101
15598: PUSH
15599: LD_INT 102
15601: PUSH
15602: LD_INT 103
15604: PUSH
15605: LD_INT 104
15607: PUSH
15608: LD_INT 105
15610: PUSH
15611: LD_INT 106
15613: PUSH
15614: LD_INT 107
15616: PUSH
15617: LD_INT 108
15619: PUSH
15620: LD_INT 109
15622: PUSH
15623: LD_INT 110
15625: PUSH
15626: LD_INT 111
15628: PUSH
15629: LD_INT 112
15631: PUSH
15632: LD_INT 113
15634: PUSH
15635: LD_INT 114
15637: PUSH
15638: LD_INT 116
15640: PUSH
15641: LD_INT 117
15643: PUSH
15644: LD_INT 118
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: ST_TO_ADDR
15670: GO 16445
15672: LD_INT 16
15674: DOUBLE
15675: EQUAL
15676: IFTRUE 15680
15678: GO 15816
15680: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15681: LD_ADDR_VAR 0 2
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: LD_INT 4
15691: PUSH
15692: LD_INT 5
15694: PUSH
15695: LD_INT 7
15697: PUSH
15698: LD_INT 11
15700: PUSH
15701: LD_INT 12
15703: PUSH
15704: LD_INT 15
15706: PUSH
15707: LD_INT 16
15709: PUSH
15710: LD_INT 20
15712: PUSH
15713: LD_INT 21
15715: PUSH
15716: LD_INT 22
15718: PUSH
15719: LD_INT 23
15721: PUSH
15722: LD_INT 25
15724: PUSH
15725: LD_INT 26
15727: PUSH
15728: LD_INT 30
15730: PUSH
15731: LD_INT 31
15733: PUSH
15734: LD_INT 32
15736: PUSH
15737: LD_INT 33
15739: PUSH
15740: LD_INT 34
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: LD_INT 101
15766: PUSH
15767: LD_INT 102
15769: PUSH
15770: LD_INT 103
15772: PUSH
15773: LD_INT 106
15775: PUSH
15776: LD_INT 108
15778: PUSH
15779: LD_INT 112
15781: PUSH
15782: LD_INT 113
15784: PUSH
15785: LD_INT 114
15787: PUSH
15788: LD_INT 116
15790: PUSH
15791: LD_INT 117
15793: PUSH
15794: LD_INT 118
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: ST_TO_ADDR
15814: GO 16445
15816: LD_INT 17
15818: DOUBLE
15819: EQUAL
15820: IFTRUE 15824
15822: GO 16048
15824: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15825: LD_ADDR_VAR 0 2
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: LD_INT 2
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: LD_INT 4
15841: PUSH
15842: LD_INT 5
15844: PUSH
15845: LD_INT 6
15847: PUSH
15848: LD_INT 7
15850: PUSH
15851: LD_INT 8
15853: PUSH
15854: LD_INT 9
15856: PUSH
15857: LD_INT 10
15859: PUSH
15860: LD_INT 11
15862: PUSH
15863: LD_INT 12
15865: PUSH
15866: LD_INT 13
15868: PUSH
15869: LD_INT 14
15871: PUSH
15872: LD_INT 15
15874: PUSH
15875: LD_INT 16
15877: PUSH
15878: LD_INT 17
15880: PUSH
15881: LD_INT 18
15883: PUSH
15884: LD_INT 19
15886: PUSH
15887: LD_INT 20
15889: PUSH
15890: LD_INT 21
15892: PUSH
15893: LD_INT 22
15895: PUSH
15896: LD_INT 23
15898: PUSH
15899: LD_INT 24
15901: PUSH
15902: LD_INT 25
15904: PUSH
15905: LD_INT 26
15907: PUSH
15908: LD_INT 27
15910: PUSH
15911: LD_INT 28
15913: PUSH
15914: LD_INT 29
15916: PUSH
15917: LD_INT 30
15919: PUSH
15920: LD_INT 31
15922: PUSH
15923: LD_INT 32
15925: PUSH
15926: LD_INT 33
15928: PUSH
15929: LD_INT 34
15931: PUSH
15932: LD_INT 36
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 101
15974: PUSH
15975: LD_INT 102
15977: PUSH
15978: LD_INT 103
15980: PUSH
15981: LD_INT 104
15983: PUSH
15984: LD_INT 105
15986: PUSH
15987: LD_INT 106
15989: PUSH
15990: LD_INT 107
15992: PUSH
15993: LD_INT 108
15995: PUSH
15996: LD_INT 109
15998: PUSH
15999: LD_INT 110
16001: PUSH
16002: LD_INT 111
16004: PUSH
16005: LD_INT 112
16007: PUSH
16008: LD_INT 113
16010: PUSH
16011: LD_INT 114
16013: PUSH
16014: LD_INT 116
16016: PUSH
16017: LD_INT 117
16019: PUSH
16020: LD_INT 118
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: ST_TO_ADDR
16046: GO 16445
16048: LD_INT 18
16050: DOUBLE
16051: EQUAL
16052: IFTRUE 16056
16054: GO 16204
16056: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16057: LD_ADDR_VAR 0 2
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: LD_INT 4
16067: PUSH
16068: LD_INT 5
16070: PUSH
16071: LD_INT 7
16073: PUSH
16074: LD_INT 11
16076: PUSH
16077: LD_INT 12
16079: PUSH
16080: LD_INT 15
16082: PUSH
16083: LD_INT 16
16085: PUSH
16086: LD_INT 20
16088: PUSH
16089: LD_INT 21
16091: PUSH
16092: LD_INT 22
16094: PUSH
16095: LD_INT 23
16097: PUSH
16098: LD_INT 25
16100: PUSH
16101: LD_INT 26
16103: PUSH
16104: LD_INT 30
16106: PUSH
16107: LD_INT 31
16109: PUSH
16110: LD_INT 32
16112: PUSH
16113: LD_INT 33
16115: PUSH
16116: LD_INT 34
16118: PUSH
16119: LD_INT 35
16121: PUSH
16122: LD_INT 36
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 101
16150: PUSH
16151: LD_INT 102
16153: PUSH
16154: LD_INT 103
16156: PUSH
16157: LD_INT 106
16159: PUSH
16160: LD_INT 108
16162: PUSH
16163: LD_INT 112
16165: PUSH
16166: LD_INT 113
16168: PUSH
16169: LD_INT 114
16171: PUSH
16172: LD_INT 115
16174: PUSH
16175: LD_INT 116
16177: PUSH
16178: LD_INT 117
16180: PUSH
16181: LD_INT 118
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: ST_TO_ADDR
16202: GO 16445
16204: LD_INT 19
16206: DOUBLE
16207: EQUAL
16208: IFTRUE 16212
16210: GO 16444
16212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16213: LD_ADDR_VAR 0 2
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: LD_INT 3
16226: PUSH
16227: LD_INT 4
16229: PUSH
16230: LD_INT 5
16232: PUSH
16233: LD_INT 6
16235: PUSH
16236: LD_INT 7
16238: PUSH
16239: LD_INT 8
16241: PUSH
16242: LD_INT 9
16244: PUSH
16245: LD_INT 10
16247: PUSH
16248: LD_INT 11
16250: PUSH
16251: LD_INT 12
16253: PUSH
16254: LD_INT 13
16256: PUSH
16257: LD_INT 14
16259: PUSH
16260: LD_INT 15
16262: PUSH
16263: LD_INT 16
16265: PUSH
16266: LD_INT 17
16268: PUSH
16269: LD_INT 18
16271: PUSH
16272: LD_INT 19
16274: PUSH
16275: LD_INT 20
16277: PUSH
16278: LD_INT 21
16280: PUSH
16281: LD_INT 22
16283: PUSH
16284: LD_INT 23
16286: PUSH
16287: LD_INT 24
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 26
16295: PUSH
16296: LD_INT 27
16298: PUSH
16299: LD_INT 28
16301: PUSH
16302: LD_INT 29
16304: PUSH
16305: LD_INT 30
16307: PUSH
16308: LD_INT 31
16310: PUSH
16311: LD_INT 32
16313: PUSH
16314: LD_INT 33
16316: PUSH
16317: LD_INT 34
16319: PUSH
16320: LD_INT 35
16322: PUSH
16323: LD_INT 36
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 101
16366: PUSH
16367: LD_INT 102
16369: PUSH
16370: LD_INT 103
16372: PUSH
16373: LD_INT 104
16375: PUSH
16376: LD_INT 105
16378: PUSH
16379: LD_INT 106
16381: PUSH
16382: LD_INT 107
16384: PUSH
16385: LD_INT 108
16387: PUSH
16388: LD_INT 109
16390: PUSH
16391: LD_INT 110
16393: PUSH
16394: LD_INT 111
16396: PUSH
16397: LD_INT 112
16399: PUSH
16400: LD_INT 113
16402: PUSH
16403: LD_INT 114
16405: PUSH
16406: LD_INT 115
16408: PUSH
16409: LD_INT 116
16411: PUSH
16412: LD_INT 117
16414: PUSH
16415: LD_INT 118
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: ST_TO_ADDR
16442: GO 16445
16444: POP
// end else
16445: GO 16676
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16447: LD_ADDR_VAR 0 2
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: LD_INT 2
16457: PUSH
16458: LD_INT 3
16460: PUSH
16461: LD_INT 4
16463: PUSH
16464: LD_INT 5
16466: PUSH
16467: LD_INT 6
16469: PUSH
16470: LD_INT 7
16472: PUSH
16473: LD_INT 8
16475: PUSH
16476: LD_INT 9
16478: PUSH
16479: LD_INT 10
16481: PUSH
16482: LD_INT 11
16484: PUSH
16485: LD_INT 12
16487: PUSH
16488: LD_INT 13
16490: PUSH
16491: LD_INT 14
16493: PUSH
16494: LD_INT 15
16496: PUSH
16497: LD_INT 16
16499: PUSH
16500: LD_INT 17
16502: PUSH
16503: LD_INT 18
16505: PUSH
16506: LD_INT 19
16508: PUSH
16509: LD_INT 20
16511: PUSH
16512: LD_INT 21
16514: PUSH
16515: LD_INT 22
16517: PUSH
16518: LD_INT 23
16520: PUSH
16521: LD_INT 24
16523: PUSH
16524: LD_INT 25
16526: PUSH
16527: LD_INT 26
16529: PUSH
16530: LD_INT 27
16532: PUSH
16533: LD_INT 28
16535: PUSH
16536: LD_INT 29
16538: PUSH
16539: LD_INT 30
16541: PUSH
16542: LD_INT 31
16544: PUSH
16545: LD_INT 32
16547: PUSH
16548: LD_INT 33
16550: PUSH
16551: LD_INT 34
16553: PUSH
16554: LD_INT 35
16556: PUSH
16557: LD_INT 36
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 101
16600: PUSH
16601: LD_INT 102
16603: PUSH
16604: LD_INT 103
16606: PUSH
16607: LD_INT 104
16609: PUSH
16610: LD_INT 105
16612: PUSH
16613: LD_INT 106
16615: PUSH
16616: LD_INT 107
16618: PUSH
16619: LD_INT 108
16621: PUSH
16622: LD_INT 109
16624: PUSH
16625: LD_INT 110
16627: PUSH
16628: LD_INT 111
16630: PUSH
16631: LD_INT 112
16633: PUSH
16634: LD_INT 113
16636: PUSH
16637: LD_INT 114
16639: PUSH
16640: LD_INT 115
16642: PUSH
16643: LD_INT 116
16645: PUSH
16646: LD_INT 117
16648: PUSH
16649: LD_INT 118
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: ST_TO_ADDR
// if result then
16676: LD_VAR 0 2
16680: IFFALSE 17466
// begin normal :=  ;
16682: LD_ADDR_VAR 0 5
16686: PUSH
16687: LD_STRING 
16689: ST_TO_ADDR
// hardcore :=  ;
16690: LD_ADDR_VAR 0 6
16694: PUSH
16695: LD_STRING 
16697: ST_TO_ADDR
// active :=  ;
16698: LD_ADDR_VAR 0 7
16702: PUSH
16703: LD_STRING 
16705: ST_TO_ADDR
// for i = 1 to normalCounter do
16706: LD_ADDR_VAR 0 8
16710: PUSH
16711: DOUBLE
16712: LD_INT 1
16714: DEC
16715: ST_TO_ADDR
16716: LD_EXP 41
16720: PUSH
16721: FOR_TO
16722: IFFALSE 16823
// begin tmp := 0 ;
16724: LD_ADDR_VAR 0 3
16728: PUSH
16729: LD_STRING 0
16731: ST_TO_ADDR
// if result [ 1 ] then
16732: LD_VAR 0 2
16736: PUSH
16737: LD_INT 1
16739: ARRAY
16740: IFFALSE 16805
// if result [ 1 ] [ 1 ] = i then
16742: LD_VAR 0 2
16746: PUSH
16747: LD_INT 1
16749: ARRAY
16750: PUSH
16751: LD_INT 1
16753: ARRAY
16754: PUSH
16755: LD_VAR 0 8
16759: EQUAL
16760: IFFALSE 16805
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16762: LD_ADDR_VAR 0 2
16766: PUSH
16767: LD_VAR 0 2
16771: PPUSH
16772: LD_INT 1
16774: PPUSH
16775: LD_VAR 0 2
16779: PUSH
16780: LD_INT 1
16782: ARRAY
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: CALL_OW 3
16791: PPUSH
16792: CALL_OW 1
16796: ST_TO_ADDR
// tmp := 1 ;
16797: LD_ADDR_VAR 0 3
16801: PUSH
16802: LD_STRING 1
16804: ST_TO_ADDR
// end ; normal := normal & tmp ;
16805: LD_ADDR_VAR 0 5
16809: PUSH
16810: LD_VAR 0 5
16814: PUSH
16815: LD_VAR 0 3
16819: STR
16820: ST_TO_ADDR
// end ;
16821: GO 16721
16823: POP
16824: POP
// for i = 1 to hardcoreCounter do
16825: LD_ADDR_VAR 0 8
16829: PUSH
16830: DOUBLE
16831: LD_INT 1
16833: DEC
16834: ST_TO_ADDR
16835: LD_EXP 42
16839: PUSH
16840: FOR_TO
16841: IFFALSE 16946
// begin tmp := 0 ;
16843: LD_ADDR_VAR 0 3
16847: PUSH
16848: LD_STRING 0
16850: ST_TO_ADDR
// if result [ 2 ] then
16851: LD_VAR 0 2
16855: PUSH
16856: LD_INT 2
16858: ARRAY
16859: IFFALSE 16928
// if result [ 2 ] [ 1 ] = 100 + i then
16861: LD_VAR 0 2
16865: PUSH
16866: LD_INT 2
16868: ARRAY
16869: PUSH
16870: LD_INT 1
16872: ARRAY
16873: PUSH
16874: LD_INT 100
16876: PUSH
16877: LD_VAR 0 8
16881: PLUS
16882: EQUAL
16883: IFFALSE 16928
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16885: LD_ADDR_VAR 0 2
16889: PUSH
16890: LD_VAR 0 2
16894: PPUSH
16895: LD_INT 2
16897: PPUSH
16898: LD_VAR 0 2
16902: PUSH
16903: LD_INT 2
16905: ARRAY
16906: PPUSH
16907: LD_INT 1
16909: PPUSH
16910: CALL_OW 3
16914: PPUSH
16915: CALL_OW 1
16919: ST_TO_ADDR
// tmp := 1 ;
16920: LD_ADDR_VAR 0 3
16924: PUSH
16925: LD_STRING 1
16927: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16928: LD_ADDR_VAR 0 6
16932: PUSH
16933: LD_VAR 0 6
16937: PUSH
16938: LD_VAR 0 3
16942: STR
16943: ST_TO_ADDR
// end ;
16944: GO 16840
16946: POP
16947: POP
// if isGameLoad then
16948: LD_VAR 0 1
16952: IFFALSE 17427
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16954: LD_ADDR_VAR 0 4
16958: PUSH
16959: LD_EXP 45
16963: PUSH
16964: LD_EXP 44
16968: PUSH
16969: LD_EXP 46
16973: PUSH
16974: LD_EXP 43
16978: PUSH
16979: LD_EXP 47
16983: PUSH
16984: LD_EXP 48
16988: PUSH
16989: LD_EXP 49
16993: PUSH
16994: LD_EXP 50
16998: PUSH
16999: LD_EXP 51
17003: PUSH
17004: LD_EXP 52
17008: PUSH
17009: LD_EXP 53
17013: PUSH
17014: LD_EXP 54
17018: PUSH
17019: LD_EXP 55
17023: PUSH
17024: LD_EXP 56
17028: PUSH
17029: LD_EXP 64
17033: PUSH
17034: LD_EXP 65
17038: PUSH
17039: LD_EXP 66
17043: PUSH
17044: LD_EXP 67
17048: PUSH
17049: LD_EXP 69
17053: PUSH
17054: LD_EXP 70
17058: PUSH
17059: LD_EXP 71
17063: PUSH
17064: LD_EXP 74
17068: PUSH
17069: LD_EXP 76
17073: PUSH
17074: LD_EXP 77
17078: PUSH
17079: LD_EXP 78
17083: PUSH
17084: LD_EXP 80
17088: PUSH
17089: LD_EXP 81
17093: PUSH
17094: LD_EXP 84
17098: PUSH
17099: LD_EXP 85
17103: PUSH
17104: LD_EXP 86
17108: PUSH
17109: LD_EXP 87
17113: PUSH
17114: LD_EXP 88
17118: PUSH
17119: LD_EXP 89
17123: PUSH
17124: LD_EXP 90
17128: PUSH
17129: LD_EXP 91
17133: PUSH
17134: LD_EXP 92
17138: PUSH
17139: LD_EXP 57
17143: PUSH
17144: LD_EXP 58
17148: PUSH
17149: LD_EXP 61
17153: PUSH
17154: LD_EXP 62
17158: PUSH
17159: LD_EXP 63
17163: PUSH
17164: LD_EXP 59
17168: PUSH
17169: LD_EXP 60
17173: PUSH
17174: LD_EXP 68
17178: PUSH
17179: LD_EXP 72
17183: PUSH
17184: LD_EXP 73
17188: PUSH
17189: LD_EXP 75
17193: PUSH
17194: LD_EXP 79
17198: PUSH
17199: LD_EXP 82
17203: PUSH
17204: LD_EXP 83
17208: PUSH
17209: LD_EXP 93
17213: PUSH
17214: LD_EXP 94
17218: PUSH
17219: LD_EXP 95
17223: PUSH
17224: LD_EXP 96
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: ST_TO_ADDR
// tmp :=  ;
17285: LD_ADDR_VAR 0 3
17289: PUSH
17290: LD_STRING 
17292: ST_TO_ADDR
// for i = 1 to normalCounter do
17293: LD_ADDR_VAR 0 8
17297: PUSH
17298: DOUBLE
17299: LD_INT 1
17301: DEC
17302: ST_TO_ADDR
17303: LD_EXP 41
17307: PUSH
17308: FOR_TO
17309: IFFALSE 17345
// begin if flags [ i ] then
17311: LD_VAR 0 4
17315: PUSH
17316: LD_VAR 0 8
17320: ARRAY
17321: IFFALSE 17343
// tmp := tmp & i & ; ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_VAR 0 3
17332: PUSH
17333: LD_VAR 0 8
17337: STR
17338: PUSH
17339: LD_STRING ;
17341: STR
17342: ST_TO_ADDR
// end ;
17343: GO 17308
17345: POP
17346: POP
// for i = 1 to hardcoreCounter do
17347: LD_ADDR_VAR 0 8
17351: PUSH
17352: DOUBLE
17353: LD_INT 1
17355: DEC
17356: ST_TO_ADDR
17357: LD_EXP 42
17361: PUSH
17362: FOR_TO
17363: IFFALSE 17409
// begin if flags [ normalCounter + i ] then
17365: LD_VAR 0 4
17369: PUSH
17370: LD_EXP 41
17374: PUSH
17375: LD_VAR 0 8
17379: PLUS
17380: ARRAY
17381: IFFALSE 17407
// tmp := tmp & ( 100 + i ) & ; ;
17383: LD_ADDR_VAR 0 3
17387: PUSH
17388: LD_VAR 0 3
17392: PUSH
17393: LD_INT 100
17395: PUSH
17396: LD_VAR 0 8
17400: PLUS
17401: STR
17402: PUSH
17403: LD_STRING ;
17405: STR
17406: ST_TO_ADDR
// end ;
17407: GO 17362
17409: POP
17410: POP
// if tmp then
17411: LD_VAR 0 3
17415: IFFALSE 17427
// active := tmp ;
17417: LD_ADDR_VAR 0 7
17421: PUSH
17422: LD_VAR 0 3
17426: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17427: LD_STRING getStreamItemsFromMission("
17429: PUSH
17430: LD_VAR 0 5
17434: STR
17435: PUSH
17436: LD_STRING ","
17438: STR
17439: PUSH
17440: LD_VAR 0 6
17444: STR
17445: PUSH
17446: LD_STRING ","
17448: STR
17449: PUSH
17450: LD_VAR 0 7
17454: STR
17455: PUSH
17456: LD_STRING ")
17458: STR
17459: PPUSH
17460: CALL_OW 559
// end else
17464: GO 17473
// ToLua ( getStreamItemsFromMission("","","") ) ;
17466: LD_STRING getStreamItemsFromMission("","","")
17468: PPUSH
17469: CALL_OW 559
// end ;
17473: LD_VAR 0 2
17477: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17478: LD_EXP 40
17482: PUSH
17483: LD_EXP 45
17487: AND
17488: IFFALSE 17612
17490: GO 17492
17492: DISABLE
17493: LD_INT 0
17495: PPUSH
17496: PPUSH
// begin enable ;
17497: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17498: LD_ADDR_VAR 0 2
17502: PUSH
17503: LD_INT 22
17505: PUSH
17506: LD_OWVAR 2
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 2
17517: PUSH
17518: LD_INT 34
17520: PUSH
17521: LD_INT 7
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 34
17530: PUSH
17531: LD_INT 45
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 34
17540: PUSH
17541: LD_INT 28
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 34
17550: PUSH
17551: LD_INT 47
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PPUSH
17569: CALL_OW 69
17573: ST_TO_ADDR
// if not tmp then
17574: LD_VAR 0 2
17578: NOT
17579: IFFALSE 17583
// exit ;
17581: GO 17612
// for i in tmp do
17583: LD_ADDR_VAR 0 1
17587: PUSH
17588: LD_VAR 0 2
17592: PUSH
17593: FOR_IN
17594: IFFALSE 17610
// begin SetLives ( i , 0 ) ;
17596: LD_VAR 0 1
17600: PPUSH
17601: LD_INT 0
17603: PPUSH
17604: CALL_OW 234
// end ;
17608: GO 17593
17610: POP
17611: POP
// end ;
17612: PPOPN 2
17614: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17615: LD_EXP 40
17619: PUSH
17620: LD_EXP 46
17624: AND
17625: IFFALSE 17709
17627: GO 17629
17629: DISABLE
17630: LD_INT 0
17632: PPUSH
17633: PPUSH
// begin enable ;
17634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17635: LD_ADDR_VAR 0 2
17639: PUSH
17640: LD_INT 22
17642: PUSH
17643: LD_OWVAR 2
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 32
17654: PUSH
17655: LD_INT 3
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PPUSH
17666: CALL_OW 69
17670: ST_TO_ADDR
// if not tmp then
17671: LD_VAR 0 2
17675: NOT
17676: IFFALSE 17680
// exit ;
17678: GO 17709
// for i in tmp do
17680: LD_ADDR_VAR 0 1
17684: PUSH
17685: LD_VAR 0 2
17689: PUSH
17690: FOR_IN
17691: IFFALSE 17707
// begin SetLives ( i , 0 ) ;
17693: LD_VAR 0 1
17697: PPUSH
17698: LD_INT 0
17700: PPUSH
17701: CALL_OW 234
// end ;
17705: GO 17690
17707: POP
17708: POP
// end ;
17709: PPOPN 2
17711: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17712: LD_EXP 40
17716: PUSH
17717: LD_EXP 43
17721: AND
17722: IFFALSE 17815
17724: GO 17726
17726: DISABLE
17727: LD_INT 0
17729: PPUSH
// begin enable ;
17730: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17731: LD_ADDR_VAR 0 1
17735: PUSH
17736: LD_INT 22
17738: PUSH
17739: LD_OWVAR 2
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: LD_INT 25
17753: PUSH
17754: LD_INT 5
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 25
17763: PUSH
17764: LD_INT 9
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 25
17773: PUSH
17774: LD_INT 8
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PPUSH
17791: CALL_OW 69
17795: PUSH
17796: FOR_IN
17797: IFFALSE 17813
// begin SetClass ( i , 1 ) ;
17799: LD_VAR 0 1
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: CALL_OW 336
// end ;
17811: GO 17796
17813: POP
17814: POP
// end ;
17815: PPOPN 1
17817: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17818: LD_EXP 40
17822: PUSH
17823: LD_EXP 44
17827: AND
17828: PUSH
17829: LD_OWVAR 65
17833: PUSH
17834: LD_INT 7
17836: LESS
17837: AND
17838: IFFALSE 17852
17840: GO 17842
17842: DISABLE
// begin enable ;
17843: ENABLE
// game_speed := 7 ;
17844: LD_ADDR_OWVAR 65
17848: PUSH
17849: LD_INT 7
17851: ST_TO_ADDR
// end ;
17852: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17853: LD_EXP 40
17857: PUSH
17858: LD_EXP 47
17862: AND
17863: IFFALSE 18065
17865: GO 17867
17867: DISABLE
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
17872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17873: LD_ADDR_VAR 0 3
17877: PUSH
17878: LD_INT 81
17880: PUSH
17881: LD_OWVAR 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 21
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PPUSH
17904: CALL_OW 69
17908: ST_TO_ADDR
// if not tmp then
17909: LD_VAR 0 3
17913: NOT
17914: IFFALSE 17918
// exit ;
17916: GO 18065
// if tmp > 5 then
17918: LD_VAR 0 3
17922: PUSH
17923: LD_INT 5
17925: GREATER
17926: IFFALSE 17938
// k := 5 else
17928: LD_ADDR_VAR 0 2
17932: PUSH
17933: LD_INT 5
17935: ST_TO_ADDR
17936: GO 17948
// k := tmp ;
17938: LD_ADDR_VAR 0 2
17942: PUSH
17943: LD_VAR 0 3
17947: ST_TO_ADDR
// for i := 1 to k do
17948: LD_ADDR_VAR 0 1
17952: PUSH
17953: DOUBLE
17954: LD_INT 1
17956: DEC
17957: ST_TO_ADDR
17958: LD_VAR 0 2
17962: PUSH
17963: FOR_TO
17964: IFFALSE 18063
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17966: LD_VAR 0 3
17970: PUSH
17971: LD_VAR 0 1
17975: ARRAY
17976: PPUSH
17977: LD_VAR 0 1
17981: PUSH
17982: LD_INT 4
17984: MOD
17985: PUSH
17986: LD_INT 1
17988: PLUS
17989: PPUSH
17990: CALL_OW 259
17994: PUSH
17995: LD_INT 10
17997: LESS
17998: IFFALSE 18061
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18000: LD_VAR 0 3
18004: PUSH
18005: LD_VAR 0 1
18009: ARRAY
18010: PPUSH
18011: LD_VAR 0 1
18015: PUSH
18016: LD_INT 4
18018: MOD
18019: PUSH
18020: LD_INT 1
18022: PLUS
18023: PPUSH
18024: LD_VAR 0 3
18028: PUSH
18029: LD_VAR 0 1
18033: ARRAY
18034: PPUSH
18035: LD_VAR 0 1
18039: PUSH
18040: LD_INT 4
18042: MOD
18043: PUSH
18044: LD_INT 1
18046: PLUS
18047: PPUSH
18048: CALL_OW 259
18052: PUSH
18053: LD_INT 1
18055: PLUS
18056: PPUSH
18057: CALL_OW 237
18061: GO 17963
18063: POP
18064: POP
// end ;
18065: PPOPN 3
18067: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18068: LD_EXP 40
18072: PUSH
18073: LD_EXP 48
18077: AND
18078: IFFALSE 18098
18080: GO 18082
18082: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18083: LD_INT 4
18085: PPUSH
18086: LD_OWVAR 2
18090: PPUSH
18091: LD_INT 0
18093: PPUSH
18094: CALL_OW 324
18098: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18099: LD_EXP 40
18103: PUSH
18104: LD_EXP 77
18108: AND
18109: IFFALSE 18129
18111: GO 18113
18113: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18114: LD_INT 19
18116: PPUSH
18117: LD_OWVAR 2
18121: PPUSH
18122: LD_INT 0
18124: PPUSH
18125: CALL_OW 324
18129: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18130: LD_EXP 40
18134: PUSH
18135: LD_EXP 49
18139: AND
18140: IFFALSE 18242
18142: GO 18144
18144: DISABLE
18145: LD_INT 0
18147: PPUSH
18148: PPUSH
// begin enable ;
18149: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18150: LD_ADDR_VAR 0 2
18154: PUSH
18155: LD_INT 22
18157: PUSH
18158: LD_OWVAR 2
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 2
18169: PUSH
18170: LD_INT 34
18172: PUSH
18173: LD_INT 11
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 34
18182: PUSH
18183: LD_INT 30
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PPUSH
18199: CALL_OW 69
18203: ST_TO_ADDR
// if not tmp then
18204: LD_VAR 0 2
18208: NOT
18209: IFFALSE 18213
// exit ;
18211: GO 18242
// for i in tmp do
18213: LD_ADDR_VAR 0 1
18217: PUSH
18218: LD_VAR 0 2
18222: PUSH
18223: FOR_IN
18224: IFFALSE 18240
// begin SetLives ( i , 0 ) ;
18226: LD_VAR 0 1
18230: PPUSH
18231: LD_INT 0
18233: PPUSH
18234: CALL_OW 234
// end ;
18238: GO 18223
18240: POP
18241: POP
// end ;
18242: PPOPN 2
18244: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18245: LD_EXP 40
18249: PUSH
18250: LD_EXP 50
18254: AND
18255: IFFALSE 18275
18257: GO 18259
18259: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18260: LD_INT 32
18262: PPUSH
18263: LD_OWVAR 2
18267: PPUSH
18268: LD_INT 0
18270: PPUSH
18271: CALL_OW 324
18275: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18276: LD_EXP 40
18280: PUSH
18281: LD_EXP 51
18285: AND
18286: IFFALSE 18467
18288: GO 18290
18290: DISABLE
18291: LD_INT 0
18293: PPUSH
18294: PPUSH
18295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18296: LD_ADDR_VAR 0 2
18300: PUSH
18301: LD_INT 22
18303: PUSH
18304: LD_OWVAR 2
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 33
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PPUSH
18327: CALL_OW 69
18331: ST_TO_ADDR
// if not tmp then
18332: LD_VAR 0 2
18336: NOT
18337: IFFALSE 18341
// exit ;
18339: GO 18467
// side := 0 ;
18341: LD_ADDR_VAR 0 3
18345: PUSH
18346: LD_INT 0
18348: ST_TO_ADDR
// for i := 1 to 8 do
18349: LD_ADDR_VAR 0 1
18353: PUSH
18354: DOUBLE
18355: LD_INT 1
18357: DEC
18358: ST_TO_ADDR
18359: LD_INT 8
18361: PUSH
18362: FOR_TO
18363: IFFALSE 18411
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18365: LD_OWVAR 2
18369: PUSH
18370: LD_VAR 0 1
18374: NONEQUAL
18375: PUSH
18376: LD_OWVAR 2
18380: PPUSH
18381: LD_VAR 0 1
18385: PPUSH
18386: CALL_OW 81
18390: PUSH
18391: LD_INT 2
18393: EQUAL
18394: AND
18395: IFFALSE 18409
// begin side := i ;
18397: LD_ADDR_VAR 0 3
18401: PUSH
18402: LD_VAR 0 1
18406: ST_TO_ADDR
// break ;
18407: GO 18411
// end ;
18409: GO 18362
18411: POP
18412: POP
// if not side then
18413: LD_VAR 0 3
18417: NOT
18418: IFFALSE 18422
// exit ;
18420: GO 18467
// for i := 1 to tmp do
18422: LD_ADDR_VAR 0 1
18426: PUSH
18427: DOUBLE
18428: LD_INT 1
18430: DEC
18431: ST_TO_ADDR
18432: LD_VAR 0 2
18436: PUSH
18437: FOR_TO
18438: IFFALSE 18465
// if Prob ( 60 ) then
18440: LD_INT 60
18442: PPUSH
18443: CALL_OW 13
18447: IFFALSE 18463
// SetSide ( i , side ) ;
18449: LD_VAR 0 1
18453: PPUSH
18454: LD_VAR 0 3
18458: PPUSH
18459: CALL_OW 235
18463: GO 18437
18465: POP
18466: POP
// end ;
18467: PPOPN 3
18469: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18470: LD_EXP 40
18474: PUSH
18475: LD_EXP 53
18479: AND
18480: IFFALSE 18599
18482: GO 18484
18484: DISABLE
18485: LD_INT 0
18487: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18488: LD_ADDR_VAR 0 1
18492: PUSH
18493: LD_INT 22
18495: PUSH
18496: LD_OWVAR 2
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 21
18507: PUSH
18508: LD_INT 1
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 3
18517: PUSH
18518: LD_INT 23
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: LIST
18536: PPUSH
18537: CALL_OW 69
18541: PUSH
18542: FOR_IN
18543: IFFALSE 18597
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 257
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: LD_INT 3
18563: PUSH
18564: LD_INT 4
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: IN
18573: IFFALSE 18595
// SetClass ( un , rand ( 1 , 4 ) ) ;
18575: LD_VAR 0 1
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: LD_INT 4
18585: PPUSH
18586: CALL_OW 12
18590: PPUSH
18591: CALL_OW 336
18595: GO 18542
18597: POP
18598: POP
// end ;
18599: PPOPN 1
18601: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18602: LD_EXP 40
18606: PUSH
18607: LD_EXP 52
18611: AND
18612: IFFALSE 18691
18614: GO 18616
18616: DISABLE
18617: LD_INT 0
18619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18620: LD_ADDR_VAR 0 1
18624: PUSH
18625: LD_INT 22
18627: PUSH
18628: LD_OWVAR 2
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 21
18639: PUSH
18640: LD_INT 3
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PPUSH
18651: CALL_OW 69
18655: ST_TO_ADDR
// if not tmp then
18656: LD_VAR 0 1
18660: NOT
18661: IFFALSE 18665
// exit ;
18663: GO 18691
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18665: LD_VAR 0 1
18669: PUSH
18670: LD_INT 1
18672: PPUSH
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 12
18682: ARRAY
18683: PPUSH
18684: LD_INT 100
18686: PPUSH
18687: CALL_OW 234
// end ;
18691: PPOPN 1
18693: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18694: LD_EXP 40
18698: PUSH
18699: LD_EXP 54
18703: AND
18704: IFFALSE 18802
18706: GO 18708
18708: DISABLE
18709: LD_INT 0
18711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18712: LD_ADDR_VAR 0 1
18716: PUSH
18717: LD_INT 22
18719: PUSH
18720: LD_OWVAR 2
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 21
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PPUSH
18743: CALL_OW 69
18747: ST_TO_ADDR
// if not tmp then
18748: LD_VAR 0 1
18752: NOT
18753: IFFALSE 18757
// exit ;
18755: GO 18802
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18757: LD_VAR 0 1
18761: PUSH
18762: LD_INT 1
18764: PPUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 12
18774: ARRAY
18775: PPUSH
18776: LD_INT 1
18778: PPUSH
18779: LD_INT 4
18781: PPUSH
18782: CALL_OW 12
18786: PPUSH
18787: LD_INT 3000
18789: PPUSH
18790: LD_INT 9000
18792: PPUSH
18793: CALL_OW 12
18797: PPUSH
18798: CALL_OW 492
// end ;
18802: PPOPN 1
18804: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18805: LD_EXP 40
18809: PUSH
18810: LD_EXP 55
18814: AND
18815: IFFALSE 18835
18817: GO 18819
18819: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18820: LD_INT 1
18822: PPUSH
18823: LD_OWVAR 2
18827: PPUSH
18828: LD_INT 0
18830: PPUSH
18831: CALL_OW 324
18835: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18836: LD_EXP 40
18840: PUSH
18841: LD_EXP 56
18845: AND
18846: IFFALSE 18929
18848: GO 18850
18850: DISABLE
18851: LD_INT 0
18853: PPUSH
18854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18855: LD_ADDR_VAR 0 2
18859: PUSH
18860: LD_INT 22
18862: PUSH
18863: LD_OWVAR 2
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 21
18874: PUSH
18875: LD_INT 3
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PPUSH
18886: CALL_OW 69
18890: ST_TO_ADDR
// if not tmp then
18891: LD_VAR 0 2
18895: NOT
18896: IFFALSE 18900
// exit ;
18898: GO 18929
// for i in tmp do
18900: LD_ADDR_VAR 0 1
18904: PUSH
18905: LD_VAR 0 2
18909: PUSH
18910: FOR_IN
18911: IFFALSE 18927
// SetBLevel ( i , 10 ) ;
18913: LD_VAR 0 1
18917: PPUSH
18918: LD_INT 10
18920: PPUSH
18921: CALL_OW 241
18925: GO 18910
18927: POP
18928: POP
// end ;
18929: PPOPN 2
18931: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18932: LD_EXP 40
18936: PUSH
18937: LD_EXP 57
18941: AND
18942: IFFALSE 19053
18944: GO 18946
18946: DISABLE
18947: LD_INT 0
18949: PPUSH
18950: PPUSH
18951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18952: LD_ADDR_VAR 0 3
18956: PUSH
18957: LD_INT 22
18959: PUSH
18960: LD_OWVAR 2
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 25
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PPUSH
18983: CALL_OW 69
18987: ST_TO_ADDR
// if not tmp then
18988: LD_VAR 0 3
18992: NOT
18993: IFFALSE 18997
// exit ;
18995: GO 19053
// un := tmp [ rand ( 1 , tmp ) ] ;
18997: LD_ADDR_VAR 0 2
19001: PUSH
19002: LD_VAR 0 3
19006: PUSH
19007: LD_INT 1
19009: PPUSH
19010: LD_VAR 0 3
19014: PPUSH
19015: CALL_OW 12
19019: ARRAY
19020: ST_TO_ADDR
// if Crawls ( un ) then
19021: LD_VAR 0 2
19025: PPUSH
19026: CALL_OW 318
19030: IFFALSE 19041
// ComWalk ( un ) ;
19032: LD_VAR 0 2
19036: PPUSH
19037: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19041: LD_VAR 0 2
19045: PPUSH
19046: LD_INT 5
19048: PPUSH
19049: CALL_OW 336
// end ;
19053: PPOPN 3
19055: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19056: LD_EXP 40
19060: PUSH
19061: LD_EXP 58
19065: AND
19066: PUSH
19067: LD_OWVAR 67
19071: PUSH
19072: LD_INT 4
19074: LESS
19075: AND
19076: IFFALSE 19095
19078: GO 19080
19080: DISABLE
// begin Difficulty := Difficulty + 1 ;
19081: LD_ADDR_OWVAR 67
19085: PUSH
19086: LD_OWVAR 67
19090: PUSH
19091: LD_INT 1
19093: PLUS
19094: ST_TO_ADDR
// end ;
19095: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19096: LD_EXP 40
19100: PUSH
19101: LD_EXP 59
19105: AND
19106: IFFALSE 19209
19108: GO 19110
19110: DISABLE
19111: LD_INT 0
19113: PPUSH
// begin for i := 1 to 5 do
19114: LD_ADDR_VAR 0 1
19118: PUSH
19119: DOUBLE
19120: LD_INT 1
19122: DEC
19123: ST_TO_ADDR
19124: LD_INT 5
19126: PUSH
19127: FOR_TO
19128: IFFALSE 19207
// begin uc_nation := nation_nature ;
19130: LD_ADDR_OWVAR 21
19134: PUSH
19135: LD_INT 0
19137: ST_TO_ADDR
// uc_side := 0 ;
19138: LD_ADDR_OWVAR 20
19142: PUSH
19143: LD_INT 0
19145: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19146: LD_ADDR_OWVAR 29
19150: PUSH
19151: LD_INT 12
19153: PUSH
19154: LD_INT 12
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: ST_TO_ADDR
// hc_agressivity := 20 ;
19161: LD_ADDR_OWVAR 35
19165: PUSH
19166: LD_INT 20
19168: ST_TO_ADDR
// hc_class := class_tiger ;
19169: LD_ADDR_OWVAR 28
19173: PUSH
19174: LD_INT 14
19176: ST_TO_ADDR
// hc_gallery :=  ;
19177: LD_ADDR_OWVAR 33
19181: PUSH
19182: LD_STRING 
19184: ST_TO_ADDR
// hc_name :=  ;
19185: LD_ADDR_OWVAR 26
19189: PUSH
19190: LD_STRING 
19192: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19193: CALL_OW 44
19197: PPUSH
19198: LD_INT 0
19200: PPUSH
19201: CALL_OW 51
// end ;
19205: GO 19127
19207: POP
19208: POP
// end ;
19209: PPOPN 1
19211: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19212: LD_EXP 40
19216: PUSH
19217: LD_EXP 60
19221: AND
19222: IFFALSE 19231
19224: GO 19226
19226: DISABLE
// StreamSibBomb ;
19227: CALL 19232 0 0
19231: END
// export function StreamSibBomb ; var i , x , y ; begin
19232: LD_INT 0
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
// result := false ;
19238: LD_ADDR_VAR 0 1
19242: PUSH
19243: LD_INT 0
19245: ST_TO_ADDR
// for i := 1 to 16 do
19246: LD_ADDR_VAR 0 2
19250: PUSH
19251: DOUBLE
19252: LD_INT 1
19254: DEC
19255: ST_TO_ADDR
19256: LD_INT 16
19258: PUSH
19259: FOR_TO
19260: IFFALSE 19459
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19262: LD_ADDR_VAR 0 3
19266: PUSH
19267: LD_INT 10
19269: PUSH
19270: LD_INT 20
19272: PUSH
19273: LD_INT 30
19275: PUSH
19276: LD_INT 40
19278: PUSH
19279: LD_INT 50
19281: PUSH
19282: LD_INT 60
19284: PUSH
19285: LD_INT 70
19287: PUSH
19288: LD_INT 80
19290: PUSH
19291: LD_INT 90
19293: PUSH
19294: LD_INT 100
19296: PUSH
19297: LD_INT 110
19299: PUSH
19300: LD_INT 120
19302: PUSH
19303: LD_INT 130
19305: PUSH
19306: LD_INT 140
19308: PUSH
19309: LD_INT 150
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 1
19331: PPUSH
19332: LD_INT 15
19334: PPUSH
19335: CALL_OW 12
19339: ARRAY
19340: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19341: LD_ADDR_VAR 0 4
19345: PUSH
19346: LD_INT 10
19348: PUSH
19349: LD_INT 20
19351: PUSH
19352: LD_INT 30
19354: PUSH
19355: LD_INT 40
19357: PUSH
19358: LD_INT 50
19360: PUSH
19361: LD_INT 60
19363: PUSH
19364: LD_INT 70
19366: PUSH
19367: LD_INT 80
19369: PUSH
19370: LD_INT 90
19372: PUSH
19373: LD_INT 100
19375: PUSH
19376: LD_INT 110
19378: PUSH
19379: LD_INT 120
19381: PUSH
19382: LD_INT 130
19384: PUSH
19385: LD_INT 140
19387: PUSH
19388: LD_INT 150
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 1
19410: PPUSH
19411: LD_INT 15
19413: PPUSH
19414: CALL_OW 12
19418: ARRAY
19419: ST_TO_ADDR
// if ValidHex ( x , y ) then
19420: LD_VAR 0 3
19424: PPUSH
19425: LD_VAR 0 4
19429: PPUSH
19430: CALL_OW 488
19434: IFFALSE 19457
// begin result := [ x , y ] ;
19436: LD_ADDR_VAR 0 1
19440: PUSH
19441: LD_VAR 0 3
19445: PUSH
19446: LD_VAR 0 4
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: ST_TO_ADDR
// break ;
19455: GO 19459
// end ; end ;
19457: GO 19259
19459: POP
19460: POP
// if result then
19461: LD_VAR 0 1
19465: IFFALSE 19525
// begin ToLua ( playSibBomb() ) ;
19467: LD_STRING playSibBomb()
19469: PPUSH
19470: CALL_OW 559
// wait ( 0 0$14 ) ;
19474: LD_INT 490
19476: PPUSH
19477: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19481: LD_VAR 0 1
19485: PUSH
19486: LD_INT 1
19488: ARRAY
19489: PPUSH
19490: LD_VAR 0 1
19494: PUSH
19495: LD_INT 2
19497: ARRAY
19498: PPUSH
19499: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19503: LD_VAR 0 1
19507: PUSH
19508: LD_INT 1
19510: ARRAY
19511: PPUSH
19512: LD_VAR 0 1
19516: PUSH
19517: LD_INT 2
19519: ARRAY
19520: PPUSH
19521: CALL_OW 429
// end ; end ;
19525: LD_VAR 0 1
19529: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19530: LD_EXP 40
19534: PUSH
19535: LD_EXP 62
19539: AND
19540: IFFALSE 19552
19542: GO 19544
19544: DISABLE
// YouLost (  ) ;
19545: LD_STRING 
19547: PPUSH
19548: CALL_OW 104
19552: END
// every 0 0$1 trigger StreamModeActive and sFog do
19553: LD_EXP 40
19557: PUSH
19558: LD_EXP 61
19562: AND
19563: IFFALSE 19577
19565: GO 19567
19567: DISABLE
// FogOff ( your_side ) ;
19568: LD_OWVAR 2
19572: PPUSH
19573: CALL_OW 344
19577: END
// every 0 0$1 trigger StreamModeActive and sSun do
19578: LD_EXP 40
19582: PUSH
19583: LD_EXP 63
19587: AND
19588: IFFALSE 19616
19590: GO 19592
19592: DISABLE
// begin solar_recharge_percent := 0 ;
19593: LD_ADDR_OWVAR 79
19597: PUSH
19598: LD_INT 0
19600: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19601: LD_INT 10500
19603: PPUSH
19604: CALL_OW 67
// solar_recharge_percent := 100 ;
19608: LD_ADDR_OWVAR 79
19612: PUSH
19613: LD_INT 100
19615: ST_TO_ADDR
// end ;
19616: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19617: LD_EXP 40
19621: PUSH
19622: LD_EXP 64
19626: AND
19627: IFFALSE 19866
19629: GO 19631
19631: DISABLE
19632: LD_INT 0
19634: PPUSH
19635: PPUSH
19636: PPUSH
// begin tmp := [ ] ;
19637: LD_ADDR_VAR 0 3
19641: PUSH
19642: EMPTY
19643: ST_TO_ADDR
// for i := 1 to 6 do
19644: LD_ADDR_VAR 0 1
19648: PUSH
19649: DOUBLE
19650: LD_INT 1
19652: DEC
19653: ST_TO_ADDR
19654: LD_INT 6
19656: PUSH
19657: FOR_TO
19658: IFFALSE 19763
// begin uc_nation := nation_nature ;
19660: LD_ADDR_OWVAR 21
19664: PUSH
19665: LD_INT 0
19667: ST_TO_ADDR
// uc_side := 0 ;
19668: LD_ADDR_OWVAR 20
19672: PUSH
19673: LD_INT 0
19675: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19676: LD_ADDR_OWVAR 29
19680: PUSH
19681: LD_INT 12
19683: PUSH
19684: LD_INT 12
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: ST_TO_ADDR
// hc_agressivity := 20 ;
19691: LD_ADDR_OWVAR 35
19695: PUSH
19696: LD_INT 20
19698: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19699: LD_ADDR_OWVAR 28
19703: PUSH
19704: LD_INT 17
19706: ST_TO_ADDR
// hc_gallery :=  ;
19707: LD_ADDR_OWVAR 33
19711: PUSH
19712: LD_STRING 
19714: ST_TO_ADDR
// hc_name :=  ;
19715: LD_ADDR_OWVAR 26
19719: PUSH
19720: LD_STRING 
19722: ST_TO_ADDR
// un := CreateHuman ;
19723: LD_ADDR_VAR 0 2
19727: PUSH
19728: CALL_OW 44
19732: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19733: LD_VAR 0 2
19737: PPUSH
19738: LD_INT 1
19740: PPUSH
19741: CALL_OW 51
// tmp := tmp ^ un ;
19745: LD_ADDR_VAR 0 3
19749: PUSH
19750: LD_VAR 0 3
19754: PUSH
19755: LD_VAR 0 2
19759: ADD
19760: ST_TO_ADDR
// end ;
19761: GO 19657
19763: POP
19764: POP
// repeat wait ( 0 0$1 ) ;
19765: LD_INT 35
19767: PPUSH
19768: CALL_OW 67
// for un in tmp do
19772: LD_ADDR_VAR 0 2
19776: PUSH
19777: LD_VAR 0 3
19781: PUSH
19782: FOR_IN
19783: IFFALSE 19857
// begin if IsDead ( un ) then
19785: LD_VAR 0 2
19789: PPUSH
19790: CALL_OW 301
19794: IFFALSE 19814
// begin tmp := tmp diff un ;
19796: LD_ADDR_VAR 0 3
19800: PUSH
19801: LD_VAR 0 3
19805: PUSH
19806: LD_VAR 0 2
19810: DIFF
19811: ST_TO_ADDR
// continue ;
19812: GO 19782
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19814: LD_VAR 0 2
19818: PPUSH
19819: LD_INT 3
19821: PUSH
19822: LD_INT 22
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PPUSH
19836: CALL_OW 69
19840: PPUSH
19841: LD_VAR 0 2
19845: PPUSH
19846: CALL_OW 74
19850: PPUSH
19851: CALL_OW 115
// end ;
19855: GO 19782
19857: POP
19858: POP
// until not tmp ;
19859: LD_VAR 0 3
19863: NOT
19864: IFFALSE 19765
// end ;
19866: PPOPN 3
19868: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19869: LD_EXP 40
19873: PUSH
19874: LD_EXP 65
19878: AND
19879: IFFALSE 19933
19881: GO 19883
19883: DISABLE
// begin ToLua ( displayTroll(); ) ;
19884: LD_STRING displayTroll();
19886: PPUSH
19887: CALL_OW 559
// wait ( 3 3$00 ) ;
19891: LD_INT 6300
19893: PPUSH
19894: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19898: LD_STRING hideTroll();
19900: PPUSH
19901: CALL_OW 559
// wait ( 1 1$00 ) ;
19905: LD_INT 2100
19907: PPUSH
19908: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19912: LD_STRING displayTroll();
19914: PPUSH
19915: CALL_OW 559
// wait ( 1 1$00 ) ;
19919: LD_INT 2100
19921: PPUSH
19922: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19926: LD_STRING hideTroll();
19928: PPUSH
19929: CALL_OW 559
// end ;
19933: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19934: LD_EXP 40
19938: PUSH
19939: LD_EXP 66
19943: AND
19944: IFFALSE 20007
19946: GO 19948
19948: DISABLE
19949: LD_INT 0
19951: PPUSH
// begin p := 0 ;
19952: LD_ADDR_VAR 0 1
19956: PUSH
19957: LD_INT 0
19959: ST_TO_ADDR
// repeat game_speed := 1 ;
19960: LD_ADDR_OWVAR 65
19964: PUSH
19965: LD_INT 1
19967: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19968: LD_INT 35
19970: PPUSH
19971: CALL_OW 67
// p := p + 1 ;
19975: LD_ADDR_VAR 0 1
19979: PUSH
19980: LD_VAR 0 1
19984: PUSH
19985: LD_INT 1
19987: PLUS
19988: ST_TO_ADDR
// until p >= 60 ;
19989: LD_VAR 0 1
19993: PUSH
19994: LD_INT 60
19996: GREATEREQUAL
19997: IFFALSE 19960
// game_speed := 4 ;
19999: LD_ADDR_OWVAR 65
20003: PUSH
20004: LD_INT 4
20006: ST_TO_ADDR
// end ;
20007: PPOPN 1
20009: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20010: LD_EXP 40
20014: PUSH
20015: LD_EXP 67
20019: AND
20020: IFFALSE 20166
20022: GO 20024
20024: DISABLE
20025: LD_INT 0
20027: PPUSH
20028: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20029: LD_ADDR_VAR 0 1
20033: PUSH
20034: LD_INT 22
20036: PUSH
20037: LD_OWVAR 2
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 30
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 30
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: LIST
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PPUSH
20078: CALL_OW 69
20082: ST_TO_ADDR
// if not depot then
20083: LD_VAR 0 1
20087: NOT
20088: IFFALSE 20092
// exit ;
20090: GO 20166
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20092: LD_ADDR_VAR 0 2
20096: PUSH
20097: LD_VAR 0 1
20101: PUSH
20102: LD_INT 1
20104: PPUSH
20105: LD_VAR 0 1
20109: PPUSH
20110: CALL_OW 12
20114: ARRAY
20115: PPUSH
20116: CALL_OW 274
20120: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20121: LD_VAR 0 2
20125: PPUSH
20126: LD_INT 1
20128: PPUSH
20129: LD_INT 0
20131: PPUSH
20132: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20136: LD_VAR 0 2
20140: PPUSH
20141: LD_INT 2
20143: PPUSH
20144: LD_INT 0
20146: PPUSH
20147: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20151: LD_VAR 0 2
20155: PPUSH
20156: LD_INT 3
20158: PPUSH
20159: LD_INT 0
20161: PPUSH
20162: CALL_OW 277
// end ;
20166: PPOPN 2
20168: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20169: LD_EXP 40
20173: PUSH
20174: LD_EXP 68
20178: AND
20179: IFFALSE 20276
20181: GO 20183
20183: DISABLE
20184: LD_INT 0
20186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20187: LD_ADDR_VAR 0 1
20191: PUSH
20192: LD_INT 22
20194: PUSH
20195: LD_OWVAR 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 21
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 3
20216: PUSH
20217: LD_INT 23
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: PPUSH
20236: CALL_OW 69
20240: ST_TO_ADDR
// if not tmp then
20241: LD_VAR 0 1
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 20276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20250: LD_VAR 0 1
20254: PUSH
20255: LD_INT 1
20257: PPUSH
20258: LD_VAR 0 1
20262: PPUSH
20263: CALL_OW 12
20267: ARRAY
20268: PPUSH
20269: LD_INT 200
20271: PPUSH
20272: CALL_OW 234
// end ;
20276: PPOPN 1
20278: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20279: LD_EXP 40
20283: PUSH
20284: LD_EXP 69
20288: AND
20289: IFFALSE 20368
20291: GO 20293
20293: DISABLE
20294: LD_INT 0
20296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20297: LD_ADDR_VAR 0 1
20301: PUSH
20302: LD_INT 22
20304: PUSH
20305: LD_OWVAR 2
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 21
20316: PUSH
20317: LD_INT 2
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PPUSH
20328: CALL_OW 69
20332: ST_TO_ADDR
// if not tmp then
20333: LD_VAR 0 1
20337: NOT
20338: IFFALSE 20342
// exit ;
20340: GO 20368
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20342: LD_VAR 0 1
20346: PUSH
20347: LD_INT 1
20349: PPUSH
20350: LD_VAR 0 1
20354: PPUSH
20355: CALL_OW 12
20359: ARRAY
20360: PPUSH
20361: LD_INT 60
20363: PPUSH
20364: CALL_OW 234
// end ;
20368: PPOPN 1
20370: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20371: LD_EXP 40
20375: PUSH
20376: LD_EXP 70
20380: AND
20381: IFFALSE 20480
20383: GO 20385
20385: DISABLE
20386: LD_INT 0
20388: PPUSH
20389: PPUSH
// begin enable ;
20390: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20391: LD_ADDR_VAR 0 1
20395: PUSH
20396: LD_INT 22
20398: PUSH
20399: LD_OWVAR 2
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 61
20410: PUSH
20411: EMPTY
20412: LIST
20413: PUSH
20414: LD_INT 33
20416: PUSH
20417: LD_INT 2
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: PPUSH
20429: CALL_OW 69
20433: ST_TO_ADDR
// if not tmp then
20434: LD_VAR 0 1
20438: NOT
20439: IFFALSE 20443
// exit ;
20441: GO 20480
// for i in tmp do
20443: LD_ADDR_VAR 0 2
20447: PUSH
20448: LD_VAR 0 1
20452: PUSH
20453: FOR_IN
20454: IFFALSE 20478
// if IsControledBy ( i ) then
20456: LD_VAR 0 2
20460: PPUSH
20461: CALL_OW 312
20465: IFFALSE 20476
// ComUnlink ( i ) ;
20467: LD_VAR 0 2
20471: PPUSH
20472: CALL_OW 136
20476: GO 20453
20478: POP
20479: POP
// end ;
20480: PPOPN 2
20482: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20483: LD_EXP 40
20487: PUSH
20488: LD_EXP 71
20492: AND
20493: IFFALSE 20633
20495: GO 20497
20497: DISABLE
20498: LD_INT 0
20500: PPUSH
20501: PPUSH
// begin ToLua ( displayPowell(); ) ;
20502: LD_STRING displayPowell();
20504: PPUSH
20505: CALL_OW 559
// uc_side := 0 ;
20509: LD_ADDR_OWVAR 20
20513: PUSH
20514: LD_INT 0
20516: ST_TO_ADDR
// uc_nation := 2 ;
20517: LD_ADDR_OWVAR 21
20521: PUSH
20522: LD_INT 2
20524: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20525: LD_ADDR_OWVAR 37
20529: PUSH
20530: LD_INT 14
20532: ST_TO_ADDR
// vc_engine := engine_siberite ;
20533: LD_ADDR_OWVAR 39
20537: PUSH
20538: LD_INT 3
20540: ST_TO_ADDR
// vc_control := control_apeman ;
20541: LD_ADDR_OWVAR 38
20545: PUSH
20546: LD_INT 5
20548: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20549: LD_ADDR_OWVAR 40
20553: PUSH
20554: LD_INT 29
20556: ST_TO_ADDR
// un := CreateVehicle ;
20557: LD_ADDR_VAR 0 2
20561: PUSH
20562: CALL_OW 45
20566: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20579: LD_INT 35
20581: PPUSH
20582: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20586: LD_VAR 0 2
20590: PPUSH
20591: LD_INT 22
20593: PUSH
20594: LD_OWVAR 2
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PPUSH
20603: CALL_OW 69
20607: PPUSH
20608: LD_VAR 0 2
20612: PPUSH
20613: CALL_OW 74
20617: PPUSH
20618: CALL_OW 115
// until IsDead ( un ) ;
20622: LD_VAR 0 2
20626: PPUSH
20627: CALL_OW 301
20631: IFFALSE 20579
// end ;
20633: PPOPN 2
20635: END
// every 0 0$1 trigger StreamModeActive and sStu do
20636: LD_EXP 40
20640: PUSH
20641: LD_EXP 79
20645: AND
20646: IFFALSE 20662
20648: GO 20650
20650: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20651: LD_STRING displayStucuk();
20653: PPUSH
20654: CALL_OW 559
// ResetFog ;
20658: CALL_OW 335
// end ;
20662: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20663: LD_EXP 40
20667: PUSH
20668: LD_EXP 72
20672: AND
20673: IFFALSE 20814
20675: GO 20677
20677: DISABLE
20678: LD_INT 0
20680: PPUSH
20681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20682: LD_ADDR_VAR 0 2
20686: PUSH
20687: LD_INT 22
20689: PUSH
20690: LD_OWVAR 2
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 21
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PPUSH
20713: CALL_OW 69
20717: ST_TO_ADDR
// if not tmp then
20718: LD_VAR 0 2
20722: NOT
20723: IFFALSE 20727
// exit ;
20725: GO 20814
// un := tmp [ rand ( 1 , tmp ) ] ;
20727: LD_ADDR_VAR 0 1
20731: PUSH
20732: LD_VAR 0 2
20736: PUSH
20737: LD_INT 1
20739: PPUSH
20740: LD_VAR 0 2
20744: PPUSH
20745: CALL_OW 12
20749: ARRAY
20750: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20751: LD_VAR 0 1
20755: PPUSH
20756: LD_INT 0
20758: PPUSH
20759: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20763: LD_VAR 0 1
20767: PPUSH
20768: LD_OWVAR 3
20772: PUSH
20773: LD_VAR 0 1
20777: DIFF
20778: PPUSH
20779: LD_VAR 0 1
20783: PPUSH
20784: CALL_OW 74
20788: PPUSH
20789: CALL_OW 115
// wait ( 0 0$20 ) ;
20793: LD_INT 700
20795: PPUSH
20796: CALL_OW 67
// SetSide ( un , your_side ) ;
20800: LD_VAR 0 1
20804: PPUSH
20805: LD_OWVAR 2
20809: PPUSH
20810: CALL_OW 235
// end ;
20814: PPOPN 2
20816: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20817: LD_EXP 40
20821: PUSH
20822: LD_EXP 73
20826: AND
20827: IFFALSE 20933
20829: GO 20831
20831: DISABLE
20832: LD_INT 0
20834: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20835: LD_ADDR_VAR 0 1
20839: PUSH
20840: LD_INT 22
20842: PUSH
20843: LD_OWVAR 2
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 30
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PPUSH
20884: CALL_OW 69
20888: ST_TO_ADDR
// if not depot then
20889: LD_VAR 0 1
20893: NOT
20894: IFFALSE 20898
// exit ;
20896: GO 20933
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20898: LD_VAR 0 1
20902: PUSH
20903: LD_INT 1
20905: ARRAY
20906: PPUSH
20907: CALL_OW 250
20911: PPUSH
20912: LD_VAR 0 1
20916: PUSH
20917: LD_INT 1
20919: ARRAY
20920: PPUSH
20921: CALL_OW 251
20925: PPUSH
20926: LD_INT 70
20928: PPUSH
20929: CALL_OW 495
// end ;
20933: PPOPN 1
20935: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20936: LD_EXP 40
20940: PUSH
20941: LD_EXP 74
20945: AND
20946: IFFALSE 21157
20948: GO 20950
20950: DISABLE
20951: LD_INT 0
20953: PPUSH
20954: PPUSH
20955: PPUSH
20956: PPUSH
20957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20958: LD_ADDR_VAR 0 5
20962: PUSH
20963: LD_INT 22
20965: PUSH
20966: LD_OWVAR 2
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 21
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PPUSH
20989: CALL_OW 69
20993: ST_TO_ADDR
// if not tmp then
20994: LD_VAR 0 5
20998: NOT
20999: IFFALSE 21003
// exit ;
21001: GO 21157
// for i in tmp do
21003: LD_ADDR_VAR 0 1
21007: PUSH
21008: LD_VAR 0 5
21012: PUSH
21013: FOR_IN
21014: IFFALSE 21155
// begin d := rand ( 0 , 5 ) ;
21016: LD_ADDR_VAR 0 4
21020: PUSH
21021: LD_INT 0
21023: PPUSH
21024: LD_INT 5
21026: PPUSH
21027: CALL_OW 12
21031: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21032: LD_ADDR_VAR 0 2
21036: PUSH
21037: LD_VAR 0 1
21041: PPUSH
21042: CALL_OW 250
21046: PPUSH
21047: LD_VAR 0 4
21051: PPUSH
21052: LD_INT 3
21054: PPUSH
21055: LD_INT 12
21057: PPUSH
21058: CALL_OW 12
21062: PPUSH
21063: CALL_OW 272
21067: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21068: LD_ADDR_VAR 0 3
21072: PUSH
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 251
21082: PPUSH
21083: LD_VAR 0 4
21087: PPUSH
21088: LD_INT 3
21090: PPUSH
21091: LD_INT 12
21093: PPUSH
21094: CALL_OW 12
21098: PPUSH
21099: CALL_OW 273
21103: ST_TO_ADDR
// if ValidHex ( x , y ) then
21104: LD_VAR 0 2
21108: PPUSH
21109: LD_VAR 0 3
21113: PPUSH
21114: CALL_OW 488
21118: IFFALSE 21153
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21120: LD_VAR 0 1
21124: PPUSH
21125: LD_VAR 0 2
21129: PPUSH
21130: LD_VAR 0 3
21134: PPUSH
21135: LD_INT 3
21137: PPUSH
21138: LD_INT 6
21140: PPUSH
21141: CALL_OW 12
21145: PPUSH
21146: LD_INT 1
21148: PPUSH
21149: CALL_OW 483
// end ;
21153: GO 21013
21155: POP
21156: POP
// end ;
21157: PPOPN 5
21159: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21160: LD_EXP 40
21164: PUSH
21165: LD_EXP 75
21169: AND
21170: IFFALSE 21264
21172: GO 21174
21174: DISABLE
21175: LD_INT 0
21177: PPUSH
21178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21179: LD_ADDR_VAR 0 2
21183: PUSH
21184: LD_INT 22
21186: PUSH
21187: LD_OWVAR 2
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 32
21198: PUSH
21199: LD_INT 1
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 21
21208: PUSH
21209: LD_INT 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: PPUSH
21221: CALL_OW 69
21225: ST_TO_ADDR
// if not tmp then
21226: LD_VAR 0 2
21230: NOT
21231: IFFALSE 21235
// exit ;
21233: GO 21264
// for i in tmp do
21235: LD_ADDR_VAR 0 1
21239: PUSH
21240: LD_VAR 0 2
21244: PUSH
21245: FOR_IN
21246: IFFALSE 21262
// SetFuel ( i , 0 ) ;
21248: LD_VAR 0 1
21252: PPUSH
21253: LD_INT 0
21255: PPUSH
21256: CALL_OW 240
21260: GO 21245
21262: POP
21263: POP
// end ;
21264: PPOPN 2
21266: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21267: LD_EXP 40
21271: PUSH
21272: LD_EXP 76
21276: AND
21277: IFFALSE 21343
21279: GO 21281
21281: DISABLE
21282: LD_INT 0
21284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21285: LD_ADDR_VAR 0 1
21289: PUSH
21290: LD_INT 22
21292: PUSH
21293: LD_OWVAR 2
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 30
21304: PUSH
21305: LD_INT 29
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PPUSH
21316: CALL_OW 69
21320: ST_TO_ADDR
// if not tmp then
21321: LD_VAR 0 1
21325: NOT
21326: IFFALSE 21330
// exit ;
21328: GO 21343
// DestroyUnit ( tmp [ 1 ] ) ;
21330: LD_VAR 0 1
21334: PUSH
21335: LD_INT 1
21337: ARRAY
21338: PPUSH
21339: CALL_OW 65
// end ;
21343: PPOPN 1
21345: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21346: LD_EXP 40
21350: PUSH
21351: LD_EXP 78
21355: AND
21356: IFFALSE 21485
21358: GO 21360
21360: DISABLE
21361: LD_INT 0
21363: PPUSH
// begin uc_side := 0 ;
21364: LD_ADDR_OWVAR 20
21368: PUSH
21369: LD_INT 0
21371: ST_TO_ADDR
// uc_nation := nation_arabian ;
21372: LD_ADDR_OWVAR 21
21376: PUSH
21377: LD_INT 2
21379: ST_TO_ADDR
// hc_gallery :=  ;
21380: LD_ADDR_OWVAR 33
21384: PUSH
21385: LD_STRING 
21387: ST_TO_ADDR
// hc_name :=  ;
21388: LD_ADDR_OWVAR 26
21392: PUSH
21393: LD_STRING 
21395: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21396: LD_INT 1
21398: PPUSH
21399: LD_INT 11
21401: PPUSH
21402: LD_INT 10
21404: PPUSH
21405: CALL_OW 380
// un := CreateHuman ;
21409: LD_ADDR_VAR 0 1
21413: PUSH
21414: CALL_OW 44
21418: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21419: LD_VAR 0 1
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21431: LD_INT 35
21433: PPUSH
21434: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21438: LD_VAR 0 1
21442: PPUSH
21443: LD_INT 22
21445: PUSH
21446: LD_OWVAR 2
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PPUSH
21455: CALL_OW 69
21459: PPUSH
21460: LD_VAR 0 1
21464: PPUSH
21465: CALL_OW 74
21469: PPUSH
21470: CALL_OW 115
// until IsDead ( un ) ;
21474: LD_VAR 0 1
21478: PPUSH
21479: CALL_OW 301
21483: IFFALSE 21431
// end ;
21485: PPOPN 1
21487: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21488: LD_EXP 40
21492: PUSH
21493: LD_EXP 80
21497: AND
21498: IFFALSE 21510
21500: GO 21502
21502: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21503: LD_STRING earthquake(getX(game), 0, 32)
21505: PPUSH
21506: CALL_OW 559
21510: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21511: LD_EXP 40
21515: PUSH
21516: LD_EXP 81
21520: AND
21521: IFFALSE 21612
21523: GO 21525
21525: DISABLE
21526: LD_INT 0
21528: PPUSH
// begin enable ;
21529: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21530: LD_ADDR_VAR 0 1
21534: PUSH
21535: LD_INT 22
21537: PUSH
21538: LD_OWVAR 2
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 21
21549: PUSH
21550: LD_INT 2
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 33
21559: PUSH
21560: LD_INT 3
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: PPUSH
21572: CALL_OW 69
21576: ST_TO_ADDR
// if not tmp then
21577: LD_VAR 0 1
21581: NOT
21582: IFFALSE 21586
// exit ;
21584: GO 21612
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21586: LD_VAR 0 1
21590: PUSH
21591: LD_INT 1
21593: PPUSH
21594: LD_VAR 0 1
21598: PPUSH
21599: CALL_OW 12
21603: ARRAY
21604: PPUSH
21605: LD_INT 1
21607: PPUSH
21608: CALL_OW 234
// end ;
21612: PPOPN 1
21614: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21615: LD_EXP 40
21619: PUSH
21620: LD_EXP 82
21624: AND
21625: IFFALSE 21766
21627: GO 21629
21629: DISABLE
21630: LD_INT 0
21632: PPUSH
21633: PPUSH
21634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21635: LD_ADDR_VAR 0 3
21639: PUSH
21640: LD_INT 22
21642: PUSH
21643: LD_OWVAR 2
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 25
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PPUSH
21666: CALL_OW 69
21670: ST_TO_ADDR
// if not tmp then
21671: LD_VAR 0 3
21675: NOT
21676: IFFALSE 21680
// exit ;
21678: GO 21766
// un := tmp [ rand ( 1 , tmp ) ] ;
21680: LD_ADDR_VAR 0 2
21684: PUSH
21685: LD_VAR 0 3
21689: PUSH
21690: LD_INT 1
21692: PPUSH
21693: LD_VAR 0 3
21697: PPUSH
21698: CALL_OW 12
21702: ARRAY
21703: ST_TO_ADDR
// if Crawls ( un ) then
21704: LD_VAR 0 2
21708: PPUSH
21709: CALL_OW 318
21713: IFFALSE 21724
// ComWalk ( un ) ;
21715: LD_VAR 0 2
21719: PPUSH
21720: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21724: LD_VAR 0 2
21728: PPUSH
21729: LD_INT 9
21731: PPUSH
21732: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21736: LD_INT 28
21738: PPUSH
21739: LD_OWVAR 2
21743: PPUSH
21744: LD_INT 2
21746: PPUSH
21747: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21751: LD_INT 29
21753: PPUSH
21754: LD_OWVAR 2
21758: PPUSH
21759: LD_INT 2
21761: PPUSH
21762: CALL_OW 322
// end ;
21766: PPOPN 3
21768: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21769: LD_EXP 40
21773: PUSH
21774: LD_EXP 83
21778: AND
21779: IFFALSE 21890
21781: GO 21783
21783: DISABLE
21784: LD_INT 0
21786: PPUSH
21787: PPUSH
21788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21789: LD_ADDR_VAR 0 3
21793: PUSH
21794: LD_INT 22
21796: PUSH
21797: LD_OWVAR 2
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 25
21808: PUSH
21809: LD_INT 1
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PPUSH
21820: CALL_OW 69
21824: ST_TO_ADDR
// if not tmp then
21825: LD_VAR 0 3
21829: NOT
21830: IFFALSE 21834
// exit ;
21832: GO 21890
// un := tmp [ rand ( 1 , tmp ) ] ;
21834: LD_ADDR_VAR 0 2
21838: PUSH
21839: LD_VAR 0 3
21843: PUSH
21844: LD_INT 1
21846: PPUSH
21847: LD_VAR 0 3
21851: PPUSH
21852: CALL_OW 12
21856: ARRAY
21857: ST_TO_ADDR
// if Crawls ( un ) then
21858: LD_VAR 0 2
21862: PPUSH
21863: CALL_OW 318
21867: IFFALSE 21878
// ComWalk ( un ) ;
21869: LD_VAR 0 2
21873: PPUSH
21874: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21878: LD_VAR 0 2
21882: PPUSH
21883: LD_INT 8
21885: PPUSH
21886: CALL_OW 336
// end ;
21890: PPOPN 3
21892: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21893: LD_EXP 40
21897: PUSH
21898: LD_EXP 84
21902: AND
21903: IFFALSE 22047
21905: GO 21907
21907: DISABLE
21908: LD_INT 0
21910: PPUSH
21911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21912: LD_ADDR_VAR 0 2
21916: PUSH
21917: LD_INT 22
21919: PUSH
21920: LD_OWVAR 2
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 21
21931: PUSH
21932: LD_INT 2
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 2
21941: PUSH
21942: LD_INT 34
21944: PUSH
21945: LD_INT 12
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 34
21954: PUSH
21955: LD_INT 51
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 34
21964: PUSH
21965: LD_INT 32
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: PPUSH
21983: CALL_OW 69
21987: ST_TO_ADDR
// if not tmp then
21988: LD_VAR 0 2
21992: NOT
21993: IFFALSE 21997
// exit ;
21995: GO 22047
// for i in tmp do
21997: LD_ADDR_VAR 0 1
22001: PUSH
22002: LD_VAR 0 2
22006: PUSH
22007: FOR_IN
22008: IFFALSE 22045
// if GetCargo ( i , mat_artifact ) = 0 then
22010: LD_VAR 0 1
22014: PPUSH
22015: LD_INT 4
22017: PPUSH
22018: CALL_OW 289
22022: PUSH
22023: LD_INT 0
22025: EQUAL
22026: IFFALSE 22043
// SetCargo ( i , mat_siberit , 100 ) ;
22028: LD_VAR 0 1
22032: PPUSH
22033: LD_INT 3
22035: PPUSH
22036: LD_INT 100
22038: PPUSH
22039: CALL_OW 290
22043: GO 22007
22045: POP
22046: POP
// end ;
22047: PPOPN 2
22049: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22050: LD_EXP 40
22054: PUSH
22055: LD_EXP 85
22059: AND
22060: IFFALSE 22243
22062: GO 22064
22064: DISABLE
22065: LD_INT 0
22067: PPUSH
22068: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22069: LD_ADDR_VAR 0 2
22073: PUSH
22074: LD_INT 22
22076: PUSH
22077: LD_OWVAR 2
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PPUSH
22086: CALL_OW 69
22090: ST_TO_ADDR
// if not tmp then
22091: LD_VAR 0 2
22095: NOT
22096: IFFALSE 22100
// exit ;
22098: GO 22243
// for i := 1 to 2 do
22100: LD_ADDR_VAR 0 1
22104: PUSH
22105: DOUBLE
22106: LD_INT 1
22108: DEC
22109: ST_TO_ADDR
22110: LD_INT 2
22112: PUSH
22113: FOR_TO
22114: IFFALSE 22241
// begin uc_side := your_side ;
22116: LD_ADDR_OWVAR 20
22120: PUSH
22121: LD_OWVAR 2
22125: ST_TO_ADDR
// uc_nation := nation_american ;
22126: LD_ADDR_OWVAR 21
22130: PUSH
22131: LD_INT 1
22133: ST_TO_ADDR
// vc_chassis := us_morphling ;
22134: LD_ADDR_OWVAR 37
22138: PUSH
22139: LD_INT 5
22141: ST_TO_ADDR
// vc_engine := engine_siberite ;
22142: LD_ADDR_OWVAR 39
22146: PUSH
22147: LD_INT 3
22149: ST_TO_ADDR
// vc_control := control_computer ;
22150: LD_ADDR_OWVAR 38
22154: PUSH
22155: LD_INT 3
22157: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22158: LD_ADDR_OWVAR 40
22162: PUSH
22163: LD_INT 10
22165: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22166: LD_VAR 0 2
22170: PUSH
22171: LD_INT 1
22173: ARRAY
22174: PPUSH
22175: CALL_OW 310
22179: NOT
22180: IFFALSE 22227
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22182: CALL_OW 45
22186: PPUSH
22187: LD_VAR 0 2
22191: PUSH
22192: LD_INT 1
22194: ARRAY
22195: PPUSH
22196: CALL_OW 250
22200: PPUSH
22201: LD_VAR 0 2
22205: PUSH
22206: LD_INT 1
22208: ARRAY
22209: PPUSH
22210: CALL_OW 251
22214: PPUSH
22215: LD_INT 12
22217: PPUSH
22218: LD_INT 1
22220: PPUSH
22221: CALL_OW 50
22225: GO 22239
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22227: CALL_OW 45
22231: PPUSH
22232: LD_INT 1
22234: PPUSH
22235: CALL_OW 51
// end ;
22239: GO 22113
22241: POP
22242: POP
// end ;
22243: PPOPN 2
22245: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22246: LD_EXP 40
22250: PUSH
22251: LD_EXP 86
22255: AND
22256: IFFALSE 22478
22258: GO 22260
22260: DISABLE
22261: LD_INT 0
22263: PPUSH
22264: PPUSH
22265: PPUSH
22266: PPUSH
22267: PPUSH
22268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22269: LD_ADDR_VAR 0 6
22273: PUSH
22274: LD_INT 22
22276: PUSH
22277: LD_OWVAR 2
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 21
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: LD_INT 23
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: PPUSH
22318: CALL_OW 69
22322: ST_TO_ADDR
// if not tmp then
22323: LD_VAR 0 6
22327: NOT
22328: IFFALSE 22332
// exit ;
22330: GO 22478
// s1 := rand ( 1 , 4 ) ;
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_INT 1
22339: PPUSH
22340: LD_INT 4
22342: PPUSH
22343: CALL_OW 12
22347: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22348: LD_ADDR_VAR 0 4
22352: PUSH
22353: LD_VAR 0 6
22357: PUSH
22358: LD_INT 1
22360: ARRAY
22361: PPUSH
22362: LD_VAR 0 2
22366: PPUSH
22367: CALL_OW 259
22371: ST_TO_ADDR
// if s1 = 1 then
22372: LD_VAR 0 2
22376: PUSH
22377: LD_INT 1
22379: EQUAL
22380: IFFALSE 22400
// s2 := rand ( 2 , 4 ) else
22382: LD_ADDR_VAR 0 3
22386: PUSH
22387: LD_INT 2
22389: PPUSH
22390: LD_INT 4
22392: PPUSH
22393: CALL_OW 12
22397: ST_TO_ADDR
22398: GO 22408
// s2 := 1 ;
22400: LD_ADDR_VAR 0 3
22404: PUSH
22405: LD_INT 1
22407: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22408: LD_ADDR_VAR 0 5
22412: PUSH
22413: LD_VAR 0 6
22417: PUSH
22418: LD_INT 1
22420: ARRAY
22421: PPUSH
22422: LD_VAR 0 3
22426: PPUSH
22427: CALL_OW 259
22431: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22432: LD_VAR 0 6
22436: PUSH
22437: LD_INT 1
22439: ARRAY
22440: PPUSH
22441: LD_VAR 0 2
22445: PPUSH
22446: LD_VAR 0 5
22450: PPUSH
22451: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22455: LD_VAR 0 6
22459: PUSH
22460: LD_INT 1
22462: ARRAY
22463: PPUSH
22464: LD_VAR 0 3
22468: PPUSH
22469: LD_VAR 0 4
22473: PPUSH
22474: CALL_OW 237
// end ;
22478: PPOPN 6
22480: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22481: LD_EXP 40
22485: PUSH
22486: LD_EXP 87
22490: AND
22491: IFFALSE 22570
22493: GO 22495
22495: DISABLE
22496: LD_INT 0
22498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22499: LD_ADDR_VAR 0 1
22503: PUSH
22504: LD_INT 22
22506: PUSH
22507: LD_OWVAR 2
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 30
22518: PUSH
22519: LD_INT 3
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PPUSH
22530: CALL_OW 69
22534: ST_TO_ADDR
// if not tmp then
22535: LD_VAR 0 1
22539: NOT
22540: IFFALSE 22544
// exit ;
22542: GO 22570
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22544: LD_VAR 0 1
22548: PUSH
22549: LD_INT 1
22551: PPUSH
22552: LD_VAR 0 1
22556: PPUSH
22557: CALL_OW 12
22561: ARRAY
22562: PPUSH
22563: LD_INT 1
22565: PPUSH
22566: CALL_OW 234
// end ;
22570: PPOPN 1
22572: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22573: LD_EXP 40
22577: PUSH
22578: LD_EXP 88
22582: AND
22583: IFFALSE 22695
22585: GO 22587
22587: DISABLE
22588: LD_INT 0
22590: PPUSH
22591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22592: LD_ADDR_VAR 0 2
22596: PUSH
22597: LD_INT 22
22599: PUSH
22600: LD_OWVAR 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: LD_INT 30
22614: PUSH
22615: LD_INT 27
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 30
22624: PUSH
22625: LD_INT 26
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 30
22634: PUSH
22635: LD_INT 28
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PPUSH
22652: CALL_OW 69
22656: ST_TO_ADDR
// if not tmp then
22657: LD_VAR 0 2
22661: NOT
22662: IFFALSE 22666
// exit ;
22664: GO 22695
// for i in tmp do
22666: LD_ADDR_VAR 0 1
22670: PUSH
22671: LD_VAR 0 2
22675: PUSH
22676: FOR_IN
22677: IFFALSE 22693
// SetLives ( i , 1 ) ;
22679: LD_VAR 0 1
22683: PPUSH
22684: LD_INT 1
22686: PPUSH
22687: CALL_OW 234
22691: GO 22676
22693: POP
22694: POP
// end ;
22695: PPOPN 2
22697: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22698: LD_EXP 40
22702: PUSH
22703: LD_EXP 89
22707: AND
22708: IFFALSE 22995
22710: GO 22712
22712: DISABLE
22713: LD_INT 0
22715: PPUSH
22716: PPUSH
22717: PPUSH
// begin i := rand ( 1 , 7 ) ;
22718: LD_ADDR_VAR 0 1
22722: PUSH
22723: LD_INT 1
22725: PPUSH
22726: LD_INT 7
22728: PPUSH
22729: CALL_OW 12
22733: ST_TO_ADDR
// case i of 1 :
22734: LD_VAR 0 1
22738: PUSH
22739: LD_INT 1
22741: DOUBLE
22742: EQUAL
22743: IFTRUE 22747
22745: GO 22757
22747: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22748: LD_STRING earthquake(getX(game), 0, 32)
22750: PPUSH
22751: CALL_OW 559
22755: GO 22995
22757: LD_INT 2
22759: DOUBLE
22760: EQUAL
22761: IFTRUE 22765
22763: GO 22779
22765: POP
// begin ToLua ( displayStucuk(); ) ;
22766: LD_STRING displayStucuk();
22768: PPUSH
22769: CALL_OW 559
// ResetFog ;
22773: CALL_OW 335
// end ; 3 :
22777: GO 22995
22779: LD_INT 3
22781: DOUBLE
22782: EQUAL
22783: IFTRUE 22787
22785: GO 22891
22787: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22788: LD_ADDR_VAR 0 2
22792: PUSH
22793: LD_INT 22
22795: PUSH
22796: LD_OWVAR 2
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 25
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PPUSH
22819: CALL_OW 69
22823: ST_TO_ADDR
// if not tmp then
22824: LD_VAR 0 2
22828: NOT
22829: IFFALSE 22833
// exit ;
22831: GO 22995
// un := tmp [ rand ( 1 , tmp ) ] ;
22833: LD_ADDR_VAR 0 3
22837: PUSH
22838: LD_VAR 0 2
22842: PUSH
22843: LD_INT 1
22845: PPUSH
22846: LD_VAR 0 2
22850: PPUSH
22851: CALL_OW 12
22855: ARRAY
22856: ST_TO_ADDR
// if Crawls ( un ) then
22857: LD_VAR 0 3
22861: PPUSH
22862: CALL_OW 318
22866: IFFALSE 22877
// ComWalk ( un ) ;
22868: LD_VAR 0 3
22872: PPUSH
22873: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22877: LD_VAR 0 3
22881: PPUSH
22882: LD_INT 8
22884: PPUSH
22885: CALL_OW 336
// end ; 4 :
22889: GO 22995
22891: LD_INT 4
22893: DOUBLE
22894: EQUAL
22895: IFTRUE 22899
22897: GO 22973
22899: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22900: LD_ADDR_VAR 0 2
22904: PUSH
22905: LD_INT 22
22907: PUSH
22908: LD_OWVAR 2
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 30
22919: PUSH
22920: LD_INT 29
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PPUSH
22931: CALL_OW 69
22935: ST_TO_ADDR
// if not tmp then
22936: LD_VAR 0 2
22940: NOT
22941: IFFALSE 22945
// exit ;
22943: GO 22995
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22945: LD_VAR 0 2
22949: PUSH
22950: LD_INT 1
22952: ARRAY
22953: PPUSH
22954: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22958: LD_VAR 0 2
22962: PUSH
22963: LD_INT 1
22965: ARRAY
22966: PPUSH
22967: CALL_OW 65
// end ; 5 .. 7 :
22971: GO 22995
22973: LD_INT 5
22975: DOUBLE
22976: GREATEREQUAL
22977: IFFALSE 22985
22979: LD_INT 7
22981: DOUBLE
22982: LESSEQUAL
22983: IFTRUE 22987
22985: GO 22994
22987: POP
// StreamSibBomb ; end ;
22988: CALL 19232 0 0
22992: GO 22995
22994: POP
// end ;
22995: PPOPN 3
22997: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22998: LD_EXP 40
23002: PUSH
23003: LD_EXP 90
23007: AND
23008: IFFALSE 23164
23010: GO 23012
23012: DISABLE
23013: LD_INT 0
23015: PPUSH
23016: PPUSH
23017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23018: LD_ADDR_VAR 0 2
23022: PUSH
23023: LD_INT 81
23025: PUSH
23026: LD_OWVAR 2
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: PUSH
23038: LD_INT 21
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 21
23050: PUSH
23051: LD_INT 2
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PPUSH
23067: CALL_OW 69
23071: ST_TO_ADDR
// if not tmp then
23072: LD_VAR 0 2
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 23164
// p := 0 ;
23081: LD_ADDR_VAR 0 3
23085: PUSH
23086: LD_INT 0
23088: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23089: LD_INT 35
23091: PPUSH
23092: CALL_OW 67
// p := p + 1 ;
23096: LD_ADDR_VAR 0 3
23100: PUSH
23101: LD_VAR 0 3
23105: PUSH
23106: LD_INT 1
23108: PLUS
23109: ST_TO_ADDR
// for i in tmp do
23110: LD_ADDR_VAR 0 1
23114: PUSH
23115: LD_VAR 0 2
23119: PUSH
23120: FOR_IN
23121: IFFALSE 23152
// if GetLives ( i ) < 1000 then
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL_OW 256
23132: PUSH
23133: LD_INT 1000
23135: LESS
23136: IFFALSE 23150
// SetLives ( i , 1000 ) ;
23138: LD_VAR 0 1
23142: PPUSH
23143: LD_INT 1000
23145: PPUSH
23146: CALL_OW 234
23150: GO 23120
23152: POP
23153: POP
// until p > 20 ;
23154: LD_VAR 0 3
23158: PUSH
23159: LD_INT 20
23161: GREATER
23162: IFFALSE 23089
// end ;
23164: PPOPN 3
23166: END
// every 0 0$1 trigger StreamModeActive and sTime do
23167: LD_EXP 40
23171: PUSH
23172: LD_EXP 91
23176: AND
23177: IFFALSE 23212
23179: GO 23181
23181: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23182: LD_INT 28
23184: PPUSH
23185: LD_OWVAR 2
23189: PPUSH
23190: LD_INT 2
23192: PPUSH
23193: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23197: LD_INT 30
23199: PPUSH
23200: LD_OWVAR 2
23204: PPUSH
23205: LD_INT 2
23207: PPUSH
23208: CALL_OW 322
// end ;
23212: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23213: LD_EXP 40
23217: PUSH
23218: LD_EXP 92
23222: AND
23223: IFFALSE 23344
23225: GO 23227
23227: DISABLE
23228: LD_INT 0
23230: PPUSH
23231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23232: LD_ADDR_VAR 0 2
23236: PUSH
23237: LD_INT 22
23239: PUSH
23240: LD_OWVAR 2
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 21
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 3
23261: PUSH
23262: LD_INT 23
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: PPUSH
23281: CALL_OW 69
23285: ST_TO_ADDR
// if not tmp then
23286: LD_VAR 0 2
23290: NOT
23291: IFFALSE 23295
// exit ;
23293: GO 23344
// for i in tmp do
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: LD_VAR 0 2
23304: PUSH
23305: FOR_IN
23306: IFFALSE 23342
// begin if Crawls ( i ) then
23308: LD_VAR 0 1
23312: PPUSH
23313: CALL_OW 318
23317: IFFALSE 23328
// ComWalk ( i ) ;
23319: LD_VAR 0 1
23323: PPUSH
23324: CALL_OW 138
// SetClass ( i , 2 ) ;
23328: LD_VAR 0 1
23332: PPUSH
23333: LD_INT 2
23335: PPUSH
23336: CALL_OW 336
// end ;
23340: GO 23305
23342: POP
23343: POP
// end ;
23344: PPOPN 2
23346: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23347: LD_EXP 40
23351: PUSH
23352: LD_EXP 93
23356: AND
23357: IFFALSE 23645
23359: GO 23361
23361: DISABLE
23362: LD_INT 0
23364: PPUSH
23365: PPUSH
23366: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23367: LD_OWVAR 2
23371: PPUSH
23372: LD_INT 9
23374: PPUSH
23375: LD_INT 1
23377: PPUSH
23378: LD_INT 1
23380: PPUSH
23381: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23385: LD_INT 9
23387: PPUSH
23388: LD_OWVAR 2
23392: PPUSH
23393: CALL_OW 343
// uc_side := 9 ;
23397: LD_ADDR_OWVAR 20
23401: PUSH
23402: LD_INT 9
23404: ST_TO_ADDR
// uc_nation := 2 ;
23405: LD_ADDR_OWVAR 21
23409: PUSH
23410: LD_INT 2
23412: ST_TO_ADDR
// hc_name := Dark Warrior ;
23413: LD_ADDR_OWVAR 26
23417: PUSH
23418: LD_STRING Dark Warrior
23420: ST_TO_ADDR
// hc_gallery :=  ;
23421: LD_ADDR_OWVAR 33
23425: PUSH
23426: LD_STRING 
23428: ST_TO_ADDR
// hc_noskilllimit := true ;
23429: LD_ADDR_OWVAR 76
23433: PUSH
23434: LD_INT 1
23436: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23437: LD_ADDR_OWVAR 31
23441: PUSH
23442: LD_INT 30
23444: PUSH
23445: LD_INT 30
23447: PUSH
23448: LD_INT 30
23450: PUSH
23451: LD_INT 30
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: ST_TO_ADDR
// un := CreateHuman ;
23460: LD_ADDR_VAR 0 3
23464: PUSH
23465: CALL_OW 44
23469: ST_TO_ADDR
// hc_noskilllimit := false ;
23470: LD_ADDR_OWVAR 76
23474: PUSH
23475: LD_INT 0
23477: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23478: LD_VAR 0 3
23482: PPUSH
23483: LD_INT 1
23485: PPUSH
23486: CALL_OW 51
// ToLua ( playRanger() ) ;
23490: LD_STRING playRanger()
23492: PPUSH
23493: CALL_OW 559
// p := 0 ;
23497: LD_ADDR_VAR 0 2
23501: PUSH
23502: LD_INT 0
23504: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23505: LD_INT 35
23507: PPUSH
23508: CALL_OW 67
// p := p + 1 ;
23512: LD_ADDR_VAR 0 2
23516: PUSH
23517: LD_VAR 0 2
23521: PUSH
23522: LD_INT 1
23524: PLUS
23525: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23526: LD_VAR 0 3
23530: PPUSH
23531: CALL_OW 256
23535: PUSH
23536: LD_INT 1000
23538: LESS
23539: IFFALSE 23553
// SetLives ( un , 1000 ) ;
23541: LD_VAR 0 3
23545: PPUSH
23546: LD_INT 1000
23548: PPUSH
23549: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23553: LD_VAR 0 3
23557: PPUSH
23558: LD_INT 81
23560: PUSH
23561: LD_OWVAR 2
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 91
23572: PUSH
23573: LD_VAR 0 3
23577: PUSH
23578: LD_INT 30
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: LIST
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PPUSH
23590: CALL_OW 69
23594: PPUSH
23595: LD_VAR 0 3
23599: PPUSH
23600: CALL_OW 74
23604: PPUSH
23605: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23609: LD_VAR 0 2
23613: PUSH
23614: LD_INT 80
23616: GREATER
23617: PUSH
23618: LD_VAR 0 3
23622: PPUSH
23623: CALL_OW 301
23627: OR
23628: IFFALSE 23505
// if un then
23630: LD_VAR 0 3
23634: IFFALSE 23645
// RemoveUnit ( un ) ;
23636: LD_VAR 0 3
23640: PPUSH
23641: CALL_OW 64
// end ;
23645: PPOPN 3
23647: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23648: LD_EXP 94
23652: IFFALSE 23768
23654: GO 23656
23656: DISABLE
23657: LD_INT 0
23659: PPUSH
23660: PPUSH
23661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23662: LD_ADDR_VAR 0 2
23666: PUSH
23667: LD_INT 81
23669: PUSH
23670: LD_OWVAR 2
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 21
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PPUSH
23693: CALL_OW 69
23697: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23698: LD_STRING playComputer()
23700: PPUSH
23701: CALL_OW 559
// if not tmp then
23705: LD_VAR 0 2
23709: NOT
23710: IFFALSE 23714
// exit ;
23712: GO 23768
// for i in tmp do
23714: LD_ADDR_VAR 0 1
23718: PUSH
23719: LD_VAR 0 2
23723: PUSH
23724: FOR_IN
23725: IFFALSE 23766
// for j := 1 to 4 do
23727: LD_ADDR_VAR 0 3
23731: PUSH
23732: DOUBLE
23733: LD_INT 1
23735: DEC
23736: ST_TO_ADDR
23737: LD_INT 4
23739: PUSH
23740: FOR_TO
23741: IFFALSE 23762
// SetSkill ( i , j , 10 ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_VAR 0 3
23752: PPUSH
23753: LD_INT 10
23755: PPUSH
23756: CALL_OW 237
23760: GO 23740
23762: POP
23763: POP
23764: GO 23724
23766: POP
23767: POP
// end ;
23768: PPOPN 3
23770: END
// every 0 0$1 trigger s30 do var i , tmp ;
23771: LD_EXP 95
23775: IFFALSE 23844
23777: GO 23779
23779: DISABLE
23780: LD_INT 0
23782: PPUSH
23783: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23784: LD_ADDR_VAR 0 2
23788: PUSH
23789: LD_INT 22
23791: PUSH
23792: LD_OWVAR 2
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 69
23805: ST_TO_ADDR
// if not tmp then
23806: LD_VAR 0 2
23810: NOT
23811: IFFALSE 23815
// exit ;
23813: GO 23844
// for i in tmp do
23815: LD_ADDR_VAR 0 1
23819: PUSH
23820: LD_VAR 0 2
23824: PUSH
23825: FOR_IN
23826: IFFALSE 23842
// SetLives ( i , 300 ) ;
23828: LD_VAR 0 1
23832: PPUSH
23833: LD_INT 300
23835: PPUSH
23836: CALL_OW 234
23840: GO 23825
23842: POP
23843: POP
// end ;
23844: PPOPN 2
23846: END
// every 0 0$1 trigger s60 do var i , tmp ;
23847: LD_EXP 96
23851: IFFALSE 23920
23853: GO 23855
23855: DISABLE
23856: LD_INT 0
23858: PPUSH
23859: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23860: LD_ADDR_VAR 0 2
23864: PUSH
23865: LD_INT 22
23867: PUSH
23868: LD_OWVAR 2
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PPUSH
23877: CALL_OW 69
23881: ST_TO_ADDR
// if not tmp then
23882: LD_VAR 0 2
23886: NOT
23887: IFFALSE 23891
// exit ;
23889: GO 23920
// for i in tmp do
23891: LD_ADDR_VAR 0 1
23895: PUSH
23896: LD_VAR 0 2
23900: PUSH
23901: FOR_IN
23902: IFFALSE 23918
// SetLives ( i , 600 ) ;
23904: LD_VAR 0 1
23908: PPUSH
23909: LD_INT 600
23911: PPUSH
23912: CALL_OW 234
23916: GO 23901
23918: POP
23919: POP
// end ;
23920: PPOPN 2
23922: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23923: LD_INT 0
23925: PPUSH
// case cmd of 301 :
23926: LD_VAR 0 1
23930: PUSH
23931: LD_INT 301
23933: DOUBLE
23934: EQUAL
23935: IFTRUE 23939
23937: GO 23971
23939: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23940: LD_VAR 0 6
23944: PPUSH
23945: LD_VAR 0 7
23949: PPUSH
23950: LD_VAR 0 8
23954: PPUSH
23955: LD_VAR 0 4
23959: PPUSH
23960: LD_VAR 0 5
23964: PPUSH
23965: CALL 25172 0 5
23969: GO 24092
23971: LD_INT 302
23973: DOUBLE
23974: EQUAL
23975: IFTRUE 23979
23977: GO 24016
23979: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23980: LD_VAR 0 6
23984: PPUSH
23985: LD_VAR 0 7
23989: PPUSH
23990: LD_VAR 0 8
23994: PPUSH
23995: LD_VAR 0 9
23999: PPUSH
24000: LD_VAR 0 4
24004: PPUSH
24005: LD_VAR 0 5
24009: PPUSH
24010: CALL 25263 0 6
24014: GO 24092
24016: LD_INT 303
24018: DOUBLE
24019: EQUAL
24020: IFTRUE 24024
24022: GO 24061
24024: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24025: LD_VAR 0 6
24029: PPUSH
24030: LD_VAR 0 7
24034: PPUSH
24035: LD_VAR 0 8
24039: PPUSH
24040: LD_VAR 0 9
24044: PPUSH
24045: LD_VAR 0 4
24049: PPUSH
24050: LD_VAR 0 5
24054: PPUSH
24055: CALL 24097 0 6
24059: GO 24092
24061: LD_INT 304
24063: DOUBLE
24064: EQUAL
24065: IFTRUE 24069
24067: GO 24091
24069: POP
// hHackTeleport ( unit , x , y ) ; end ;
24070: LD_VAR 0 2
24074: PPUSH
24075: LD_VAR 0 4
24079: PPUSH
24080: LD_VAR 0 5
24084: PPUSH
24085: CALL 25856 0 3
24089: GO 24092
24091: POP
// end ;
24092: LD_VAR 0 12
24096: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24097: LD_INT 0
24099: PPUSH
24100: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24101: LD_VAR 0 1
24105: PUSH
24106: LD_INT 1
24108: LESS
24109: PUSH
24110: LD_VAR 0 1
24114: PUSH
24115: LD_INT 3
24117: GREATER
24118: OR
24119: PUSH
24120: LD_VAR 0 5
24124: PPUSH
24125: LD_VAR 0 6
24129: PPUSH
24130: CALL_OW 428
24134: OR
24135: IFFALSE 24139
// exit ;
24137: GO 24859
// uc_side := your_side ;
24139: LD_ADDR_OWVAR 20
24143: PUSH
24144: LD_OWVAR 2
24148: ST_TO_ADDR
// uc_nation := nation ;
24149: LD_ADDR_OWVAR 21
24153: PUSH
24154: LD_VAR 0 1
24158: ST_TO_ADDR
// bc_level = 1 ;
24159: LD_ADDR_OWVAR 43
24163: PUSH
24164: LD_INT 1
24166: ST_TO_ADDR
// case btype of 1 :
24167: LD_VAR 0 2
24171: PUSH
24172: LD_INT 1
24174: DOUBLE
24175: EQUAL
24176: IFTRUE 24180
24178: GO 24191
24180: POP
// bc_type := b_depot ; 2 :
24181: LD_ADDR_OWVAR 42
24185: PUSH
24186: LD_INT 0
24188: ST_TO_ADDR
24189: GO 24803
24191: LD_INT 2
24193: DOUBLE
24194: EQUAL
24195: IFTRUE 24199
24197: GO 24210
24199: POP
// bc_type := b_warehouse ; 3 :
24200: LD_ADDR_OWVAR 42
24204: PUSH
24205: LD_INT 1
24207: ST_TO_ADDR
24208: GO 24803
24210: LD_INT 3
24212: DOUBLE
24213: EQUAL
24214: IFTRUE 24218
24216: GO 24229
24218: POP
// bc_type := b_lab ; 4 .. 9 :
24219: LD_ADDR_OWVAR 42
24223: PUSH
24224: LD_INT 6
24226: ST_TO_ADDR
24227: GO 24803
24229: LD_INT 4
24231: DOUBLE
24232: GREATEREQUAL
24233: IFFALSE 24241
24235: LD_INT 9
24237: DOUBLE
24238: LESSEQUAL
24239: IFTRUE 24243
24241: GO 24295
24243: POP
// begin bc_type := b_lab_half ;
24244: LD_ADDR_OWVAR 42
24248: PUSH
24249: LD_INT 7
24251: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24252: LD_ADDR_OWVAR 44
24256: PUSH
24257: LD_INT 10
24259: PUSH
24260: LD_INT 11
24262: PUSH
24263: LD_INT 12
24265: PUSH
24266: LD_INT 15
24268: PUSH
24269: LD_INT 14
24271: PUSH
24272: LD_INT 13
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: PUSH
24283: LD_VAR 0 2
24287: PUSH
24288: LD_INT 3
24290: MINUS
24291: ARRAY
24292: ST_TO_ADDR
// end ; 10 .. 13 :
24293: GO 24803
24295: LD_INT 10
24297: DOUBLE
24298: GREATEREQUAL
24299: IFFALSE 24307
24301: LD_INT 13
24303: DOUBLE
24304: LESSEQUAL
24305: IFTRUE 24309
24307: GO 24386
24309: POP
// begin bc_type := b_lab_full ;
24310: LD_ADDR_OWVAR 42
24314: PUSH
24315: LD_INT 8
24317: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24318: LD_ADDR_OWVAR 44
24322: PUSH
24323: LD_INT 10
24325: PUSH
24326: LD_INT 12
24328: PUSH
24329: LD_INT 14
24331: PUSH
24332: LD_INT 13
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: PUSH
24341: LD_VAR 0 2
24345: PUSH
24346: LD_INT 9
24348: MINUS
24349: ARRAY
24350: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24351: LD_ADDR_OWVAR 45
24355: PUSH
24356: LD_INT 11
24358: PUSH
24359: LD_INT 15
24361: PUSH
24362: LD_INT 12
24364: PUSH
24365: LD_INT 15
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: PUSH
24374: LD_VAR 0 2
24378: PUSH
24379: LD_INT 9
24381: MINUS
24382: ARRAY
24383: ST_TO_ADDR
// end ; 14 :
24384: GO 24803
24386: LD_INT 14
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24405
24394: POP
// bc_type := b_workshop ; 15 :
24395: LD_ADDR_OWVAR 42
24399: PUSH
24400: LD_INT 2
24402: ST_TO_ADDR
24403: GO 24803
24405: LD_INT 15
24407: DOUBLE
24408: EQUAL
24409: IFTRUE 24413
24411: GO 24424
24413: POP
// bc_type := b_factory ; 16 :
24414: LD_ADDR_OWVAR 42
24418: PUSH
24419: LD_INT 3
24421: ST_TO_ADDR
24422: GO 24803
24424: LD_INT 16
24426: DOUBLE
24427: EQUAL
24428: IFTRUE 24432
24430: GO 24443
24432: POP
// bc_type := b_ext_gun ; 17 :
24433: LD_ADDR_OWVAR 42
24437: PUSH
24438: LD_INT 17
24440: ST_TO_ADDR
24441: GO 24803
24443: LD_INT 17
24445: DOUBLE
24446: EQUAL
24447: IFTRUE 24451
24449: GO 24479
24451: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24452: LD_ADDR_OWVAR 42
24456: PUSH
24457: LD_INT 19
24459: PUSH
24460: LD_INT 23
24462: PUSH
24463: LD_INT 19
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: PUSH
24471: LD_VAR 0 1
24475: ARRAY
24476: ST_TO_ADDR
24477: GO 24803
24479: LD_INT 18
24481: DOUBLE
24482: EQUAL
24483: IFTRUE 24487
24485: GO 24498
24487: POP
// bc_type := b_ext_radar ; 19 :
24488: LD_ADDR_OWVAR 42
24492: PUSH
24493: LD_INT 20
24495: ST_TO_ADDR
24496: GO 24803
24498: LD_INT 19
24500: DOUBLE
24501: EQUAL
24502: IFTRUE 24506
24504: GO 24517
24506: POP
// bc_type := b_ext_radio ; 20 :
24507: LD_ADDR_OWVAR 42
24511: PUSH
24512: LD_INT 22
24514: ST_TO_ADDR
24515: GO 24803
24517: LD_INT 20
24519: DOUBLE
24520: EQUAL
24521: IFTRUE 24525
24523: GO 24536
24525: POP
// bc_type := b_ext_siberium ; 21 :
24526: LD_ADDR_OWVAR 42
24530: PUSH
24531: LD_INT 21
24533: ST_TO_ADDR
24534: GO 24803
24536: LD_INT 21
24538: DOUBLE
24539: EQUAL
24540: IFTRUE 24544
24542: GO 24555
24544: POP
// bc_type := b_ext_computer ; 22 :
24545: LD_ADDR_OWVAR 42
24549: PUSH
24550: LD_INT 24
24552: ST_TO_ADDR
24553: GO 24803
24555: LD_INT 22
24557: DOUBLE
24558: EQUAL
24559: IFTRUE 24563
24561: GO 24574
24563: POP
// bc_type := b_ext_track ; 23 :
24564: LD_ADDR_OWVAR 42
24568: PUSH
24569: LD_INT 16
24571: ST_TO_ADDR
24572: GO 24803
24574: LD_INT 23
24576: DOUBLE
24577: EQUAL
24578: IFTRUE 24582
24580: GO 24593
24582: POP
// bc_type := b_ext_laser ; 24 :
24583: LD_ADDR_OWVAR 42
24587: PUSH
24588: LD_INT 25
24590: ST_TO_ADDR
24591: GO 24803
24593: LD_INT 24
24595: DOUBLE
24596: EQUAL
24597: IFTRUE 24601
24599: GO 24612
24601: POP
// bc_type := b_control_tower ; 25 :
24602: LD_ADDR_OWVAR 42
24606: PUSH
24607: LD_INT 36
24609: ST_TO_ADDR
24610: GO 24803
24612: LD_INT 25
24614: DOUBLE
24615: EQUAL
24616: IFTRUE 24620
24618: GO 24631
24620: POP
// bc_type := b_breastwork ; 26 :
24621: LD_ADDR_OWVAR 42
24625: PUSH
24626: LD_INT 31
24628: ST_TO_ADDR
24629: GO 24803
24631: LD_INT 26
24633: DOUBLE
24634: EQUAL
24635: IFTRUE 24639
24637: GO 24650
24639: POP
// bc_type := b_bunker ; 27 :
24640: LD_ADDR_OWVAR 42
24644: PUSH
24645: LD_INT 32
24647: ST_TO_ADDR
24648: GO 24803
24650: LD_INT 27
24652: DOUBLE
24653: EQUAL
24654: IFTRUE 24658
24656: GO 24669
24658: POP
// bc_type := b_turret ; 28 :
24659: LD_ADDR_OWVAR 42
24663: PUSH
24664: LD_INT 33
24666: ST_TO_ADDR
24667: GO 24803
24669: LD_INT 28
24671: DOUBLE
24672: EQUAL
24673: IFTRUE 24677
24675: GO 24688
24677: POP
// bc_type := b_armoury ; 29 :
24678: LD_ADDR_OWVAR 42
24682: PUSH
24683: LD_INT 4
24685: ST_TO_ADDR
24686: GO 24803
24688: LD_INT 29
24690: DOUBLE
24691: EQUAL
24692: IFTRUE 24696
24694: GO 24707
24696: POP
// bc_type := b_barracks ; 30 :
24697: LD_ADDR_OWVAR 42
24701: PUSH
24702: LD_INT 5
24704: ST_TO_ADDR
24705: GO 24803
24707: LD_INT 30
24709: DOUBLE
24710: EQUAL
24711: IFTRUE 24715
24713: GO 24726
24715: POP
// bc_type := b_solar_power ; 31 :
24716: LD_ADDR_OWVAR 42
24720: PUSH
24721: LD_INT 27
24723: ST_TO_ADDR
24724: GO 24803
24726: LD_INT 31
24728: DOUBLE
24729: EQUAL
24730: IFTRUE 24734
24732: GO 24745
24734: POP
// bc_type := b_oil_power ; 32 :
24735: LD_ADDR_OWVAR 42
24739: PUSH
24740: LD_INT 26
24742: ST_TO_ADDR
24743: GO 24803
24745: LD_INT 32
24747: DOUBLE
24748: EQUAL
24749: IFTRUE 24753
24751: GO 24764
24753: POP
// bc_type := b_siberite_power ; 33 :
24754: LD_ADDR_OWVAR 42
24758: PUSH
24759: LD_INT 28
24761: ST_TO_ADDR
24762: GO 24803
24764: LD_INT 33
24766: DOUBLE
24767: EQUAL
24768: IFTRUE 24772
24770: GO 24783
24772: POP
// bc_type := b_oil_mine ; 34 :
24773: LD_ADDR_OWVAR 42
24777: PUSH
24778: LD_INT 29
24780: ST_TO_ADDR
24781: GO 24803
24783: LD_INT 34
24785: DOUBLE
24786: EQUAL
24787: IFTRUE 24791
24789: GO 24802
24791: POP
// bc_type := b_siberite_mine ; end ;
24792: LD_ADDR_OWVAR 42
24796: PUSH
24797: LD_INT 30
24799: ST_TO_ADDR
24800: GO 24803
24802: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24803: LD_ADDR_VAR 0 8
24807: PUSH
24808: LD_VAR 0 5
24812: PPUSH
24813: LD_VAR 0 6
24817: PPUSH
24818: LD_VAR 0 3
24822: PPUSH
24823: CALL_OW 47
24827: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24828: LD_OWVAR 42
24832: PUSH
24833: LD_INT 32
24835: PUSH
24836: LD_INT 33
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: IN
24843: IFFALSE 24859
// PlaceWeaponTurret ( b , weapon ) ;
24845: LD_VAR 0 8
24849: PPUSH
24850: LD_VAR 0 4
24854: PPUSH
24855: CALL_OW 431
// end ;
24859: LD_VAR 0 7
24863: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24864: LD_INT 0
24866: PPUSH
24867: PPUSH
24868: PPUSH
24869: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24870: LD_ADDR_VAR 0 4
24874: PUSH
24875: LD_INT 22
24877: PUSH
24878: LD_OWVAR 2
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 2
24889: PUSH
24890: LD_INT 30
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 30
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PPUSH
24919: CALL_OW 69
24923: ST_TO_ADDR
// if not tmp then
24924: LD_VAR 0 4
24928: NOT
24929: IFFALSE 24933
// exit ;
24931: GO 24992
// for i in tmp do
24933: LD_ADDR_VAR 0 2
24937: PUSH
24938: LD_VAR 0 4
24942: PUSH
24943: FOR_IN
24944: IFFALSE 24990
// for j = 1 to 3 do
24946: LD_ADDR_VAR 0 3
24950: PUSH
24951: DOUBLE
24952: LD_INT 1
24954: DEC
24955: ST_TO_ADDR
24956: LD_INT 3
24958: PUSH
24959: FOR_TO
24960: IFFALSE 24986
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24962: LD_VAR 0 2
24966: PPUSH
24967: CALL_OW 274
24971: PPUSH
24972: LD_VAR 0 3
24976: PPUSH
24977: LD_INT 99999
24979: PPUSH
24980: CALL_OW 277
24984: GO 24959
24986: POP
24987: POP
24988: GO 24943
24990: POP
24991: POP
// end ;
24992: LD_VAR 0 1
24996: RET
// export function hHackSetLevel10 ; var i , j ; begin
24997: LD_INT 0
24999: PPUSH
25000: PPUSH
25001: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25002: LD_ADDR_VAR 0 2
25006: PUSH
25007: LD_INT 21
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PPUSH
25017: CALL_OW 69
25021: PUSH
25022: FOR_IN
25023: IFFALSE 25075
// if IsSelected ( i ) then
25025: LD_VAR 0 2
25029: PPUSH
25030: CALL_OW 306
25034: IFFALSE 25073
// begin for j := 1 to 4 do
25036: LD_ADDR_VAR 0 3
25040: PUSH
25041: DOUBLE
25042: LD_INT 1
25044: DEC
25045: ST_TO_ADDR
25046: LD_INT 4
25048: PUSH
25049: FOR_TO
25050: IFFALSE 25071
// SetSkill ( i , j , 10 ) ;
25052: LD_VAR 0 2
25056: PPUSH
25057: LD_VAR 0 3
25061: PPUSH
25062: LD_INT 10
25064: PPUSH
25065: CALL_OW 237
25069: GO 25049
25071: POP
25072: POP
// end ;
25073: GO 25022
25075: POP
25076: POP
// end ;
25077: LD_VAR 0 1
25081: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25082: LD_INT 0
25084: PPUSH
25085: PPUSH
25086: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25087: LD_ADDR_VAR 0 2
25091: PUSH
25092: LD_INT 22
25094: PUSH
25095: LD_OWVAR 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 21
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PPUSH
25118: CALL_OW 69
25122: PUSH
25123: FOR_IN
25124: IFFALSE 25165
// begin for j := 1 to 4 do
25126: LD_ADDR_VAR 0 3
25130: PUSH
25131: DOUBLE
25132: LD_INT 1
25134: DEC
25135: ST_TO_ADDR
25136: LD_INT 4
25138: PUSH
25139: FOR_TO
25140: IFFALSE 25161
// SetSkill ( i , j , 10 ) ;
25142: LD_VAR 0 2
25146: PPUSH
25147: LD_VAR 0 3
25151: PPUSH
25152: LD_INT 10
25154: PPUSH
25155: CALL_OW 237
25159: GO 25139
25161: POP
25162: POP
// end ;
25163: GO 25123
25165: POP
25166: POP
// end ;
25167: LD_VAR 0 1
25171: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25172: LD_INT 0
25174: PPUSH
// uc_side := your_side ;
25175: LD_ADDR_OWVAR 20
25179: PUSH
25180: LD_OWVAR 2
25184: ST_TO_ADDR
// uc_nation := nation ;
25185: LD_ADDR_OWVAR 21
25189: PUSH
25190: LD_VAR 0 1
25194: ST_TO_ADDR
// InitHc ;
25195: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25199: LD_INT 0
25201: PPUSH
25202: LD_VAR 0 2
25206: PPUSH
25207: LD_VAR 0 3
25211: PPUSH
25212: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25216: LD_VAR 0 4
25220: PPUSH
25221: LD_VAR 0 5
25225: PPUSH
25226: CALL_OW 428
25230: PUSH
25231: LD_INT 0
25233: EQUAL
25234: IFFALSE 25258
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25236: CALL_OW 44
25240: PPUSH
25241: LD_VAR 0 4
25245: PPUSH
25246: LD_VAR 0 5
25250: PPUSH
25251: LD_INT 1
25253: PPUSH
25254: CALL_OW 48
// end ;
25258: LD_VAR 0 6
25262: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25263: LD_INT 0
25265: PPUSH
25266: PPUSH
// uc_side := your_side ;
25267: LD_ADDR_OWVAR 20
25271: PUSH
25272: LD_OWVAR 2
25276: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25277: LD_VAR 0 1
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: LD_INT 2
25287: PUSH
25288: LD_INT 3
25290: PUSH
25291: LD_INT 4
25293: PUSH
25294: LD_INT 5
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: IN
25304: IFFALSE 25316
// uc_nation := nation_american else
25306: LD_ADDR_OWVAR 21
25310: PUSH
25311: LD_INT 1
25313: ST_TO_ADDR
25314: GO 25359
// if chassis in [ 11 , 12 , 13 , 14 ] then
25316: LD_VAR 0 1
25320: PUSH
25321: LD_INT 11
25323: PUSH
25324: LD_INT 12
25326: PUSH
25327: LD_INT 13
25329: PUSH
25330: LD_INT 14
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: IN
25339: IFFALSE 25351
// uc_nation := nation_arabian else
25341: LD_ADDR_OWVAR 21
25345: PUSH
25346: LD_INT 2
25348: ST_TO_ADDR
25349: GO 25359
// uc_nation := nation_russian ;
25351: LD_ADDR_OWVAR 21
25355: PUSH
25356: LD_INT 3
25358: ST_TO_ADDR
// vc_chassis := chassis ;
25359: LD_ADDR_OWVAR 37
25363: PUSH
25364: LD_VAR 0 1
25368: ST_TO_ADDR
// vc_engine := engine ;
25369: LD_ADDR_OWVAR 39
25373: PUSH
25374: LD_VAR 0 2
25378: ST_TO_ADDR
// vc_control := control ;
25379: LD_ADDR_OWVAR 38
25383: PUSH
25384: LD_VAR 0 3
25388: ST_TO_ADDR
// vc_weapon := weapon ;
25389: LD_ADDR_OWVAR 40
25393: PUSH
25394: LD_VAR 0 4
25398: ST_TO_ADDR
// un := CreateVehicle ;
25399: LD_ADDR_VAR 0 8
25403: PUSH
25404: CALL_OW 45
25408: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25409: LD_VAR 0 8
25413: PPUSH
25414: LD_INT 0
25416: PPUSH
25417: LD_INT 5
25419: PPUSH
25420: CALL_OW 12
25424: PPUSH
25425: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25429: LD_VAR 0 8
25433: PPUSH
25434: LD_VAR 0 5
25438: PPUSH
25439: LD_VAR 0 6
25443: PPUSH
25444: LD_INT 1
25446: PPUSH
25447: CALL_OW 48
// end ;
25451: LD_VAR 0 7
25455: RET
// export hInvincible ; every 1 do
25456: GO 25458
25458: DISABLE
// hInvincible := [ ] ;
25459: LD_ADDR_EXP 97
25463: PUSH
25464: EMPTY
25465: ST_TO_ADDR
25466: END
// every 10 do var i ;
25467: GO 25469
25469: DISABLE
25470: LD_INT 0
25472: PPUSH
// begin enable ;
25473: ENABLE
// if not hInvincible then
25474: LD_EXP 97
25478: NOT
25479: IFFALSE 25483
// exit ;
25481: GO 25527
// for i in hInvincible do
25483: LD_ADDR_VAR 0 1
25487: PUSH
25488: LD_EXP 97
25492: PUSH
25493: FOR_IN
25494: IFFALSE 25525
// if GetLives ( i ) < 1000 then
25496: LD_VAR 0 1
25500: PPUSH
25501: CALL_OW 256
25505: PUSH
25506: LD_INT 1000
25508: LESS
25509: IFFALSE 25523
// SetLives ( i , 1000 ) ;
25511: LD_VAR 0 1
25515: PPUSH
25516: LD_INT 1000
25518: PPUSH
25519: CALL_OW 234
25523: GO 25493
25525: POP
25526: POP
// end ;
25527: PPOPN 1
25529: END
// export function hHackInvincible ; var i ; begin
25530: LD_INT 0
25532: PPUSH
25533: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25534: LD_ADDR_VAR 0 2
25538: PUSH
25539: LD_INT 2
25541: PUSH
25542: LD_INT 21
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 21
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: PPUSH
25567: CALL_OW 69
25571: PUSH
25572: FOR_IN
25573: IFFALSE 25634
// if IsSelected ( i ) then
25575: LD_VAR 0 2
25579: PPUSH
25580: CALL_OW 306
25584: IFFALSE 25632
// begin if i in hInvincible then
25586: LD_VAR 0 2
25590: PUSH
25591: LD_EXP 97
25595: IN
25596: IFFALSE 25616
// hInvincible := hInvincible diff i else
25598: LD_ADDR_EXP 97
25602: PUSH
25603: LD_EXP 97
25607: PUSH
25608: LD_VAR 0 2
25612: DIFF
25613: ST_TO_ADDR
25614: GO 25632
// hInvincible := hInvincible union i ;
25616: LD_ADDR_EXP 97
25620: PUSH
25621: LD_EXP 97
25625: PUSH
25626: LD_VAR 0 2
25630: UNION
25631: ST_TO_ADDR
// end ;
25632: GO 25572
25634: POP
25635: POP
// end ;
25636: LD_VAR 0 1
25640: RET
// export function hHackInvisible ; var i , j ; begin
25641: LD_INT 0
25643: PPUSH
25644: PPUSH
25645: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25646: LD_ADDR_VAR 0 2
25650: PUSH
25651: LD_INT 21
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PPUSH
25661: CALL_OW 69
25665: PUSH
25666: FOR_IN
25667: IFFALSE 25691
// if IsSelected ( i ) then
25669: LD_VAR 0 2
25673: PPUSH
25674: CALL_OW 306
25678: IFFALSE 25689
// ComForceInvisible ( i ) ;
25680: LD_VAR 0 2
25684: PPUSH
25685: CALL_OW 496
25689: GO 25666
25691: POP
25692: POP
// end ;
25693: LD_VAR 0 1
25697: RET
// export function hHackChangeYourSide ; begin
25698: LD_INT 0
25700: PPUSH
// if your_side = 8 then
25701: LD_OWVAR 2
25705: PUSH
25706: LD_INT 8
25708: EQUAL
25709: IFFALSE 25721
// your_side := 0 else
25711: LD_ADDR_OWVAR 2
25715: PUSH
25716: LD_INT 0
25718: ST_TO_ADDR
25719: GO 25735
// your_side := your_side + 1 ;
25721: LD_ADDR_OWVAR 2
25725: PUSH
25726: LD_OWVAR 2
25730: PUSH
25731: LD_INT 1
25733: PLUS
25734: ST_TO_ADDR
// end ;
25735: LD_VAR 0 1
25739: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25740: LD_INT 0
25742: PPUSH
25743: PPUSH
25744: PPUSH
// for i in all_units do
25745: LD_ADDR_VAR 0 2
25749: PUSH
25750: LD_OWVAR 3
25754: PUSH
25755: FOR_IN
25756: IFFALSE 25834
// if IsSelected ( i ) then
25758: LD_VAR 0 2
25762: PPUSH
25763: CALL_OW 306
25767: IFFALSE 25832
// begin j := GetSide ( i ) ;
25769: LD_ADDR_VAR 0 3
25773: PUSH
25774: LD_VAR 0 2
25778: PPUSH
25779: CALL_OW 255
25783: ST_TO_ADDR
// if j = 8 then
25784: LD_VAR 0 3
25788: PUSH
25789: LD_INT 8
25791: EQUAL
25792: IFFALSE 25804
// j := 0 else
25794: LD_ADDR_VAR 0 3
25798: PUSH
25799: LD_INT 0
25801: ST_TO_ADDR
25802: GO 25818
// j := j + 1 ;
25804: LD_ADDR_VAR 0 3
25808: PUSH
25809: LD_VAR 0 3
25813: PUSH
25814: LD_INT 1
25816: PLUS
25817: ST_TO_ADDR
// SetSide ( i , j ) ;
25818: LD_VAR 0 2
25822: PPUSH
25823: LD_VAR 0 3
25827: PPUSH
25828: CALL_OW 235
// end ;
25832: GO 25755
25834: POP
25835: POP
// end ;
25836: LD_VAR 0 1
25840: RET
// export function hHackFog ; begin
25841: LD_INT 0
25843: PPUSH
// FogOff ( true ) ;
25844: LD_INT 1
25846: PPUSH
25847: CALL_OW 344
// end ;
25851: LD_VAR 0 1
25855: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25856: LD_INT 0
25858: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25859: LD_VAR 0 1
25863: PPUSH
25864: LD_VAR 0 2
25868: PPUSH
25869: LD_VAR 0 3
25873: PPUSH
25874: LD_INT 1
25876: PPUSH
25877: LD_INT 1
25879: PPUSH
25880: CALL_OW 483
// CenterOnXY ( x , y ) ;
25884: LD_VAR 0 2
25888: PPUSH
25889: LD_VAR 0 3
25893: PPUSH
25894: CALL_OW 84
// end ; end_of_file
25898: LD_VAR 0 4
25902: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25903: LD_INT 0
25905: PPUSH
25906: PPUSH
25907: PPUSH
25908: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25909: LD_VAR 0 1
25913: PPUSH
25914: CALL_OW 264
25918: PUSH
25919: LD_EXP 25
25923: EQUAL
25924: IFFALSE 25996
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25926: LD_INT 68
25928: PPUSH
25929: LD_VAR 0 1
25933: PPUSH
25934: CALL_OW 255
25938: PPUSH
25939: CALL_OW 321
25943: PUSH
25944: LD_INT 2
25946: EQUAL
25947: IFFALSE 25959
// eff := 70 else
25949: LD_ADDR_VAR 0 4
25953: PUSH
25954: LD_INT 70
25956: ST_TO_ADDR
25957: GO 25967
// eff := 30 ;
25959: LD_ADDR_VAR 0 4
25963: PUSH
25964: LD_INT 30
25966: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25967: LD_VAR 0 1
25971: PPUSH
25972: CALL_OW 250
25976: PPUSH
25977: LD_VAR 0 1
25981: PPUSH
25982: CALL_OW 251
25986: PPUSH
25987: LD_VAR 0 4
25991: PPUSH
25992: CALL_OW 495
// end ; end ;
25996: LD_VAR 0 2
26000: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26001: LD_INT 0
26003: PPUSH
// end ;
26004: LD_VAR 0 4
26008: RET
// export function SOS_Command ( cmd ) ; begin
26009: LD_INT 0
26011: PPUSH
// end ;
26012: LD_VAR 0 2
26016: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26017: LD_INT 0
26019: PPUSH
// end ;
26020: LD_VAR 0 6
26024: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26025: LD_INT 0
26027: PPUSH
26028: PPUSH
// if not vehicle or not factory then
26029: LD_VAR 0 1
26033: NOT
26034: PUSH
26035: LD_VAR 0 2
26039: NOT
26040: OR
26041: IFFALSE 26045
// exit ;
26043: GO 26276
// if factoryWaypoints >= factory then
26045: LD_EXP 98
26049: PUSH
26050: LD_VAR 0 2
26054: GREATEREQUAL
26055: IFFALSE 26276
// if factoryWaypoints [ factory ] then
26057: LD_EXP 98
26061: PUSH
26062: LD_VAR 0 2
26066: ARRAY
26067: IFFALSE 26276
// begin if GetControl ( vehicle ) = control_manual then
26069: LD_VAR 0 1
26073: PPUSH
26074: CALL_OW 263
26078: PUSH
26079: LD_INT 1
26081: EQUAL
26082: IFFALSE 26163
// begin driver := IsDrivenBy ( vehicle ) ;
26084: LD_ADDR_VAR 0 4
26088: PUSH
26089: LD_VAR 0 1
26093: PPUSH
26094: CALL_OW 311
26098: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
26099: LD_VAR 0 4
26103: PPUSH
26104: LD_EXP 98
26108: PUSH
26109: LD_VAR 0 2
26113: ARRAY
26114: PUSH
26115: LD_INT 1
26117: ARRAY
26118: PPUSH
26119: LD_EXP 98
26123: PUSH
26124: LD_VAR 0 2
26128: ARRAY
26129: PUSH
26130: LD_INT 2
26132: ARRAY
26133: PPUSH
26134: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26138: LD_VAR 0 4
26142: PPUSH
26143: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26147: LD_VAR 0 4
26151: PPUSH
26152: LD_VAR 0 2
26156: PPUSH
26157: CALL_OW 180
// end else
26161: GO 26276
// if GetControl ( vehicle ) = control_remote then
26163: LD_VAR 0 1
26167: PPUSH
26168: CALL_OW 263
26172: PUSH
26173: LD_INT 2
26175: EQUAL
26176: IFFALSE 26237
// begin wait ( 0 0$2 ) ;
26178: LD_INT 70
26180: PPUSH
26181: CALL_OW 67
// if Connect ( vehicle ) then
26185: LD_VAR 0 1
26189: PPUSH
26190: CALL 38500 0 1
26194: IFFALSE 26235
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
26196: LD_VAR 0 1
26200: PPUSH
26201: LD_EXP 98
26205: PUSH
26206: LD_VAR 0 2
26210: ARRAY
26211: PUSH
26212: LD_INT 1
26214: ARRAY
26215: PPUSH
26216: LD_EXP 98
26220: PUSH
26221: LD_VAR 0 2
26225: ARRAY
26226: PUSH
26227: LD_INT 2
26229: ARRAY
26230: PPUSH
26231: CALL_OW 171
// end else
26235: GO 26276
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
26237: LD_VAR 0 1
26241: PPUSH
26242: LD_EXP 98
26246: PUSH
26247: LD_VAR 0 2
26251: ARRAY
26252: PUSH
26253: LD_INT 1
26255: ARRAY
26256: PPUSH
26257: LD_EXP 98
26261: PUSH
26262: LD_VAR 0 2
26266: ARRAY
26267: PUSH
26268: LD_INT 2
26270: ARRAY
26271: PPUSH
26272: CALL_OW 171
// end ; end ;
26276: LD_VAR 0 3
26280: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26281: LD_INT 0
26283: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26284: LD_VAR 0 1
26288: PUSH
26289: LD_INT 250
26291: EQUAL
26292: PUSH
26293: LD_VAR 0 2
26297: PPUSH
26298: CALL_OW 264
26302: PUSH
26303: LD_EXP 28
26307: EQUAL
26308: AND
26309: IFFALSE 26330
// MinerPlaceMine ( unit , x , y ) ;
26311: LD_VAR 0 2
26315: PPUSH
26316: LD_VAR 0 4
26320: PPUSH
26321: LD_VAR 0 5
26325: PPUSH
26326: CALL 29058 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26330: LD_VAR 0 1
26334: PUSH
26335: LD_INT 251
26337: EQUAL
26338: PUSH
26339: LD_VAR 0 2
26343: PPUSH
26344: CALL_OW 264
26348: PUSH
26349: LD_EXP 28
26353: EQUAL
26354: AND
26355: IFFALSE 26376
// MinerDetonateMine ( unit , x , y ) ;
26357: LD_VAR 0 2
26361: PPUSH
26362: LD_VAR 0 4
26366: PPUSH
26367: LD_VAR 0 5
26371: PPUSH
26372: CALL 29335 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26376: LD_VAR 0 1
26380: PUSH
26381: LD_INT 252
26383: EQUAL
26384: PUSH
26385: LD_VAR 0 2
26389: PPUSH
26390: CALL_OW 264
26394: PUSH
26395: LD_EXP 28
26399: EQUAL
26400: AND
26401: IFFALSE 26422
// MinerCreateMinefield ( unit , x , y ) ;
26403: LD_VAR 0 2
26407: PPUSH
26408: LD_VAR 0 4
26412: PPUSH
26413: LD_VAR 0 5
26417: PPUSH
26418: CALL 29752 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26422: LD_VAR 0 1
26426: PUSH
26427: LD_INT 253
26429: EQUAL
26430: PUSH
26431: LD_VAR 0 2
26435: PPUSH
26436: CALL_OW 257
26440: PUSH
26441: LD_INT 5
26443: EQUAL
26444: AND
26445: IFFALSE 26466
// ComBinocular ( unit , x , y ) ;
26447: LD_VAR 0 2
26451: PPUSH
26452: LD_VAR 0 4
26456: PPUSH
26457: LD_VAR 0 5
26461: PPUSH
26462: CALL 30123 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26466: LD_VAR 0 1
26470: PUSH
26471: LD_INT 254
26473: EQUAL
26474: PUSH
26475: LD_VAR 0 2
26479: PPUSH
26480: CALL_OW 264
26484: PUSH
26485: LD_EXP 23
26489: EQUAL
26490: AND
26491: PUSH
26492: LD_VAR 0 3
26496: PPUSH
26497: CALL_OW 263
26501: PUSH
26502: LD_INT 3
26504: EQUAL
26505: AND
26506: IFFALSE 26522
// HackDestroyVehicle ( unit , selectedUnit ) ;
26508: LD_VAR 0 2
26512: PPUSH
26513: LD_VAR 0 3
26517: PPUSH
26518: CALL 28418 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26522: LD_VAR 0 1
26526: PUSH
26527: LD_INT 255
26529: EQUAL
26530: PUSH
26531: LD_VAR 0 2
26535: PPUSH
26536: CALL_OW 264
26540: PUSH
26541: LD_INT 14
26543: PUSH
26544: LD_INT 53
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: IN
26551: AND
26552: PUSH
26553: LD_VAR 0 4
26557: PPUSH
26558: LD_VAR 0 5
26562: PPUSH
26563: CALL_OW 488
26567: AND
26568: IFFALSE 26592
// CutTreeXYR ( unit , x , y , 12 ) ;
26570: LD_VAR 0 2
26574: PPUSH
26575: LD_VAR 0 4
26579: PPUSH
26580: LD_VAR 0 5
26584: PPUSH
26585: LD_INT 12
26587: PPUSH
26588: CALL 26984 0 4
// if cmd = 256 then
26592: LD_VAR 0 1
26596: PUSH
26597: LD_INT 256
26599: EQUAL
26600: IFFALSE 26621
// SetFactoryWaypoint ( unit , x , y ) ;
26602: LD_VAR 0 2
26606: PPUSH
26607: LD_VAR 0 4
26611: PPUSH
26612: LD_VAR 0 5
26616: PPUSH
26617: CALL 26626 0 3
// end ;
26621: LD_VAR 0 6
26625: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26626: LD_INT 0
26628: PPUSH
26629: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26630: LD_VAR 0 1
26634: NOT
26635: PUSH
26636: LD_VAR 0 2
26640: PPUSH
26641: LD_VAR 0 3
26645: PPUSH
26646: CALL_OW 488
26650: NOT
26651: OR
26652: PUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 266
26662: PUSH
26663: LD_INT 3
26665: NONEQUAL
26666: PUSH
26667: LD_VAR 0 1
26671: PPUSH
26672: CALL_OW 247
26676: PUSH
26677: LD_INT 1
26679: EQUAL
26680: NOT
26681: AND
26682: OR
26683: IFFALSE 26687
// exit ;
26685: GO 26836
// if GetType ( factory ) = unit_human then
26687: LD_VAR 0 1
26691: PPUSH
26692: CALL_OW 247
26696: PUSH
26697: LD_INT 1
26699: EQUAL
26700: IFFALSE 26717
// factory := IsInUnit ( factory ) ;
26702: LD_ADDR_VAR 0 1
26706: PUSH
26707: LD_VAR 0 1
26711: PPUSH
26712: CALL_OW 310
26716: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26717: LD_VAR 0 1
26721: PPUSH
26722: CALL_OW 266
26726: PUSH
26727: LD_INT 3
26729: NONEQUAL
26730: IFFALSE 26734
// exit ;
26732: GO 26836
// if HexInfo ( x , y ) = factory then
26734: LD_VAR 0 2
26738: PPUSH
26739: LD_VAR 0 3
26743: PPUSH
26744: CALL_OW 428
26748: PUSH
26749: LD_VAR 0 1
26753: EQUAL
26754: IFFALSE 26781
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26756: LD_ADDR_EXP 98
26760: PUSH
26761: LD_EXP 98
26765: PPUSH
26766: LD_VAR 0 1
26770: PPUSH
26771: LD_INT 0
26773: PPUSH
26774: CALL_OW 1
26778: ST_TO_ADDR
26779: GO 26832
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26781: LD_ADDR_EXP 98
26785: PUSH
26786: LD_EXP 98
26790: PPUSH
26791: LD_VAR 0 1
26795: PPUSH
26796: LD_VAR 0 1
26800: PPUSH
26801: CALL_OW 255
26805: PUSH
26806: LD_VAR 0 1
26810: PUSH
26811: LD_VAR 0 2
26815: PUSH
26816: LD_VAR 0 3
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: PPUSH
26827: CALL_OW 1
26831: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26832: CALL 26841 0 0
// end ;
26836: LD_VAR 0 4
26840: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26841: LD_INT 0
26843: PPUSH
26844: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26845: LD_STRING resetFactoryWaypoint();
26847: PPUSH
26848: CALL_OW 559
// if factoryWaypoints then
26852: LD_EXP 98
26856: IFFALSE 26979
// begin for i := 1 to factoryWaypoints do
26858: LD_ADDR_VAR 0 2
26862: PUSH
26863: DOUBLE
26864: LD_INT 1
26866: DEC
26867: ST_TO_ADDR
26868: LD_EXP 98
26872: PUSH
26873: FOR_TO
26874: IFFALSE 26977
// if factoryWaypoints [ i ] then
26876: LD_EXP 98
26880: PUSH
26881: LD_VAR 0 2
26885: ARRAY
26886: IFFALSE 26975
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26888: LD_STRING setFactoryWaypointXY(
26890: PUSH
26891: LD_EXP 98
26895: PUSH
26896: LD_VAR 0 2
26900: ARRAY
26901: PUSH
26902: LD_INT 1
26904: ARRAY
26905: STR
26906: PUSH
26907: LD_STRING ,
26909: STR
26910: PUSH
26911: LD_EXP 98
26915: PUSH
26916: LD_VAR 0 2
26920: ARRAY
26921: PUSH
26922: LD_INT 2
26924: ARRAY
26925: STR
26926: PUSH
26927: LD_STRING ,
26929: STR
26930: PUSH
26931: LD_EXP 98
26935: PUSH
26936: LD_VAR 0 2
26940: ARRAY
26941: PUSH
26942: LD_INT 3
26944: ARRAY
26945: STR
26946: PUSH
26947: LD_STRING ,
26949: STR
26950: PUSH
26951: LD_EXP 98
26955: PUSH
26956: LD_VAR 0 2
26960: ARRAY
26961: PUSH
26962: LD_INT 4
26964: ARRAY
26965: STR
26966: PUSH
26967: LD_STRING )
26969: STR
26970: PPUSH
26971: CALL_OW 559
26975: GO 26873
26977: POP
26978: POP
// end ; end ;
26979: LD_VAR 0 1
26983: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26984: LD_INT 0
26986: PPUSH
26987: PPUSH
26988: PPUSH
26989: PPUSH
26990: PPUSH
26991: PPUSH
26992: PPUSH
26993: PPUSH
26994: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26995: LD_VAR 0 1
26999: NOT
27000: PUSH
27001: LD_VAR 0 2
27005: PPUSH
27006: LD_VAR 0 3
27010: PPUSH
27011: CALL_OW 488
27015: NOT
27016: OR
27017: PUSH
27018: LD_VAR 0 4
27022: NOT
27023: OR
27024: IFFALSE 27028
// exit ;
27026: GO 27368
// list := [ ] ;
27028: LD_ADDR_VAR 0 13
27032: PUSH
27033: EMPTY
27034: ST_TO_ADDR
// if x - r < 0 then
27035: LD_VAR 0 2
27039: PUSH
27040: LD_VAR 0 4
27044: MINUS
27045: PUSH
27046: LD_INT 0
27048: LESS
27049: IFFALSE 27061
// min_x := 0 else
27051: LD_ADDR_VAR 0 7
27055: PUSH
27056: LD_INT 0
27058: ST_TO_ADDR
27059: GO 27077
// min_x := x - r ;
27061: LD_ADDR_VAR 0 7
27065: PUSH
27066: LD_VAR 0 2
27070: PUSH
27071: LD_VAR 0 4
27075: MINUS
27076: ST_TO_ADDR
// if y - r < 0 then
27077: LD_VAR 0 3
27081: PUSH
27082: LD_VAR 0 4
27086: MINUS
27087: PUSH
27088: LD_INT 0
27090: LESS
27091: IFFALSE 27103
// min_y := 0 else
27093: LD_ADDR_VAR 0 8
27097: PUSH
27098: LD_INT 0
27100: ST_TO_ADDR
27101: GO 27119
// min_y := y - r ;
27103: LD_ADDR_VAR 0 8
27107: PUSH
27108: LD_VAR 0 3
27112: PUSH
27113: LD_VAR 0 4
27117: MINUS
27118: ST_TO_ADDR
// max_x := x + r ;
27119: LD_ADDR_VAR 0 9
27123: PUSH
27124: LD_VAR 0 2
27128: PUSH
27129: LD_VAR 0 4
27133: PLUS
27134: ST_TO_ADDR
// max_y := y + r ;
27135: LD_ADDR_VAR 0 10
27139: PUSH
27140: LD_VAR 0 3
27144: PUSH
27145: LD_VAR 0 4
27149: PLUS
27150: ST_TO_ADDR
// for _x = min_x to max_x do
27151: LD_ADDR_VAR 0 11
27155: PUSH
27156: DOUBLE
27157: LD_VAR 0 7
27161: DEC
27162: ST_TO_ADDR
27163: LD_VAR 0 9
27167: PUSH
27168: FOR_TO
27169: IFFALSE 27286
// for _y = min_y to max_y do
27171: LD_ADDR_VAR 0 12
27175: PUSH
27176: DOUBLE
27177: LD_VAR 0 8
27181: DEC
27182: ST_TO_ADDR
27183: LD_VAR 0 10
27187: PUSH
27188: FOR_TO
27189: IFFALSE 27282
// begin if not ValidHex ( _x , _y ) then
27191: LD_VAR 0 11
27195: PPUSH
27196: LD_VAR 0 12
27200: PPUSH
27201: CALL_OW 488
27205: NOT
27206: IFFALSE 27210
// continue ;
27208: GO 27188
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27210: LD_VAR 0 11
27214: PPUSH
27215: LD_VAR 0 12
27219: PPUSH
27220: CALL_OW 351
27224: PUSH
27225: LD_VAR 0 11
27229: PPUSH
27230: LD_VAR 0 12
27234: PPUSH
27235: CALL_OW 554
27239: AND
27240: IFFALSE 27280
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27242: LD_ADDR_VAR 0 13
27246: PUSH
27247: LD_VAR 0 13
27251: PPUSH
27252: LD_VAR 0 13
27256: PUSH
27257: LD_INT 1
27259: PLUS
27260: PPUSH
27261: LD_VAR 0 11
27265: PUSH
27266: LD_VAR 0 12
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PPUSH
27275: CALL_OW 2
27279: ST_TO_ADDR
// end ;
27280: GO 27188
27282: POP
27283: POP
27284: GO 27168
27286: POP
27287: POP
// if not list then
27288: LD_VAR 0 13
27292: NOT
27293: IFFALSE 27297
// exit ;
27295: GO 27368
// for i in list do
27297: LD_ADDR_VAR 0 6
27301: PUSH
27302: LD_VAR 0 13
27306: PUSH
27307: FOR_IN
27308: IFFALSE 27366
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27310: LD_VAR 0 1
27314: PPUSH
27315: LD_STRING M
27317: PUSH
27318: LD_VAR 0 6
27322: PUSH
27323: LD_INT 1
27325: ARRAY
27326: PUSH
27327: LD_VAR 0 6
27331: PUSH
27332: LD_INT 2
27334: ARRAY
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: PPUSH
27360: CALL_OW 447
27364: GO 27307
27366: POP
27367: POP
// end ;
27368: LD_VAR 0 5
27372: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27373: LD_EXP 99
27377: NOT
27378: IFFALSE 27428
27380: GO 27382
27382: DISABLE
// begin initHack := true ;
27383: LD_ADDR_EXP 99
27387: PUSH
27388: LD_INT 1
27390: ST_TO_ADDR
// hackTanks := [ ] ;
27391: LD_ADDR_EXP 100
27395: PUSH
27396: EMPTY
27397: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27398: LD_ADDR_EXP 101
27402: PUSH
27403: EMPTY
27404: ST_TO_ADDR
// hackLimit := 3 ;
27405: LD_ADDR_EXP 102
27409: PUSH
27410: LD_INT 3
27412: ST_TO_ADDR
// hackDist := 12 ;
27413: LD_ADDR_EXP 103
27417: PUSH
27418: LD_INT 12
27420: ST_TO_ADDR
// hackCounter := [ ] ;
27421: LD_ADDR_EXP 104
27425: PUSH
27426: EMPTY
27427: ST_TO_ADDR
// end ;
27428: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27429: LD_EXP 99
27433: PUSH
27434: LD_INT 34
27436: PUSH
27437: LD_EXP 23
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PPUSH
27446: CALL_OW 69
27450: AND
27451: IFFALSE 27706
27453: GO 27455
27455: DISABLE
27456: LD_INT 0
27458: PPUSH
27459: PPUSH
// begin enable ;
27460: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27461: LD_ADDR_VAR 0 1
27465: PUSH
27466: LD_INT 34
27468: PUSH
27469: LD_EXP 23
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PPUSH
27478: CALL_OW 69
27482: PUSH
27483: FOR_IN
27484: IFFALSE 27704
// begin if not i in hackTanks then
27486: LD_VAR 0 1
27490: PUSH
27491: LD_EXP 100
27495: IN
27496: NOT
27497: IFFALSE 27580
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27499: LD_ADDR_EXP 100
27503: PUSH
27504: LD_EXP 100
27508: PPUSH
27509: LD_EXP 100
27513: PUSH
27514: LD_INT 1
27516: PLUS
27517: PPUSH
27518: LD_VAR 0 1
27522: PPUSH
27523: CALL_OW 1
27527: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27528: LD_ADDR_EXP 101
27532: PUSH
27533: LD_EXP 101
27537: PPUSH
27538: LD_EXP 101
27542: PUSH
27543: LD_INT 1
27545: PLUS
27546: PPUSH
27547: EMPTY
27548: PPUSH
27549: CALL_OW 1
27553: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27554: LD_ADDR_EXP 104
27558: PUSH
27559: LD_EXP 104
27563: PPUSH
27564: LD_EXP 104
27568: PUSH
27569: LD_INT 1
27571: PLUS
27572: PPUSH
27573: EMPTY
27574: PPUSH
27575: CALL_OW 1
27579: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27580: LD_VAR 0 1
27584: PPUSH
27585: CALL_OW 302
27589: NOT
27590: IFFALSE 27603
// begin HackUnlinkAll ( i ) ;
27592: LD_VAR 0 1
27596: PPUSH
27597: CALL 27709 0 1
// continue ;
27601: GO 27483
// end ; HackCheckCapturedStatus ( i ) ;
27603: LD_VAR 0 1
27607: PPUSH
27608: CALL 28152 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27612: LD_ADDR_VAR 0 2
27616: PUSH
27617: LD_INT 81
27619: PUSH
27620: LD_VAR 0 1
27624: PPUSH
27625: CALL_OW 255
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 33
27636: PUSH
27637: LD_INT 3
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 91
27646: PUSH
27647: LD_VAR 0 1
27651: PUSH
27652: LD_EXP 103
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 50
27664: PUSH
27665: EMPTY
27666: LIST
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: PPUSH
27674: CALL_OW 69
27678: ST_TO_ADDR
// if not tmp then
27679: LD_VAR 0 2
27683: NOT
27684: IFFALSE 27688
// continue ;
27686: GO 27483
// HackLink ( i , tmp ) ;
27688: LD_VAR 0 1
27692: PPUSH
27693: LD_VAR 0 2
27697: PPUSH
27698: CALL 27845 0 2
// end ;
27702: GO 27483
27704: POP
27705: POP
// end ;
27706: PPOPN 2
27708: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27709: LD_INT 0
27711: PPUSH
27712: PPUSH
27713: PPUSH
// if not hack in hackTanks then
27714: LD_VAR 0 1
27718: PUSH
27719: LD_EXP 100
27723: IN
27724: NOT
27725: IFFALSE 27729
// exit ;
27727: GO 27840
// index := GetElementIndex ( hackTanks , hack ) ;
27729: LD_ADDR_VAR 0 4
27733: PUSH
27734: LD_EXP 100
27738: PPUSH
27739: LD_VAR 0 1
27743: PPUSH
27744: CALL 35314 0 2
27748: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27749: LD_EXP 101
27753: PUSH
27754: LD_VAR 0 4
27758: ARRAY
27759: IFFALSE 27840
// begin for i in hackTanksCaptured [ index ] do
27761: LD_ADDR_VAR 0 3
27765: PUSH
27766: LD_EXP 101
27770: PUSH
27771: LD_VAR 0 4
27775: ARRAY
27776: PUSH
27777: FOR_IN
27778: IFFALSE 27804
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27780: LD_VAR 0 3
27784: PUSH
27785: LD_INT 1
27787: ARRAY
27788: PPUSH
27789: LD_VAR 0 3
27793: PUSH
27794: LD_INT 2
27796: ARRAY
27797: PPUSH
27798: CALL_OW 235
27802: GO 27777
27804: POP
27805: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27806: LD_ADDR_EXP 101
27810: PUSH
27811: LD_EXP 101
27815: PPUSH
27816: LD_VAR 0 4
27820: PPUSH
27821: EMPTY
27822: PPUSH
27823: CALL_OW 1
27827: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27828: LD_VAR 0 1
27832: PPUSH
27833: LD_INT 0
27835: PPUSH
27836: CALL_OW 505
// end ; end ;
27840: LD_VAR 0 2
27844: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27845: LD_INT 0
27847: PPUSH
27848: PPUSH
27849: PPUSH
// if not hack in hackTanks or not vehicles then
27850: LD_VAR 0 1
27854: PUSH
27855: LD_EXP 100
27859: IN
27860: NOT
27861: PUSH
27862: LD_VAR 0 2
27866: NOT
27867: OR
27868: IFFALSE 27872
// exit ;
27870: GO 28147
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27872: LD_ADDR_VAR 0 2
27876: PUSH
27877: LD_VAR 0 1
27881: PPUSH
27882: LD_VAR 0 2
27886: PPUSH
27887: LD_INT 1
27889: PPUSH
27890: LD_INT 1
27892: PPUSH
27893: CALL 35964 0 4
27897: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27898: LD_ADDR_VAR 0 5
27902: PUSH
27903: LD_EXP 100
27907: PPUSH
27908: LD_VAR 0 1
27912: PPUSH
27913: CALL 35314 0 2
27917: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27918: LD_EXP 101
27922: PUSH
27923: LD_VAR 0 5
27927: ARRAY
27928: PUSH
27929: LD_EXP 102
27933: LESS
27934: IFFALSE 28123
// begin for i := 1 to vehicles do
27936: LD_ADDR_VAR 0 4
27940: PUSH
27941: DOUBLE
27942: LD_INT 1
27944: DEC
27945: ST_TO_ADDR
27946: LD_VAR 0 2
27950: PUSH
27951: FOR_TO
27952: IFFALSE 28121
// begin if hackTanksCaptured [ index ] = hackLimit then
27954: LD_EXP 101
27958: PUSH
27959: LD_VAR 0 5
27963: ARRAY
27964: PUSH
27965: LD_EXP 102
27969: EQUAL
27970: IFFALSE 27974
// break ;
27972: GO 28121
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27974: LD_ADDR_EXP 104
27978: PUSH
27979: LD_EXP 104
27983: PPUSH
27984: LD_VAR 0 5
27988: PPUSH
27989: LD_EXP 104
27993: PUSH
27994: LD_VAR 0 5
27998: ARRAY
27999: PUSH
28000: LD_INT 1
28002: PLUS
28003: PPUSH
28004: CALL_OW 1
28008: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28009: LD_ADDR_EXP 101
28013: PUSH
28014: LD_EXP 101
28018: PPUSH
28019: LD_VAR 0 5
28023: PUSH
28024: LD_EXP 101
28028: PUSH
28029: LD_VAR 0 5
28033: ARRAY
28034: PUSH
28035: LD_INT 1
28037: PLUS
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PPUSH
28043: LD_VAR 0 2
28047: PUSH
28048: LD_VAR 0 4
28052: ARRAY
28053: PUSH
28054: LD_VAR 0 2
28058: PUSH
28059: LD_VAR 0 4
28063: ARRAY
28064: PPUSH
28065: CALL_OW 255
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PPUSH
28074: CALL 35529 0 3
28078: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28079: LD_VAR 0 2
28083: PUSH
28084: LD_VAR 0 4
28088: ARRAY
28089: PPUSH
28090: LD_VAR 0 1
28094: PPUSH
28095: CALL_OW 255
28099: PPUSH
28100: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28104: LD_VAR 0 2
28108: PUSH
28109: LD_VAR 0 4
28113: ARRAY
28114: PPUSH
28115: CALL_OW 141
// end ;
28119: GO 27951
28121: POP
28122: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28123: LD_VAR 0 1
28127: PPUSH
28128: LD_EXP 101
28132: PUSH
28133: LD_VAR 0 5
28137: ARRAY
28138: PUSH
28139: LD_INT 0
28141: PLUS
28142: PPUSH
28143: CALL_OW 505
// end ;
28147: LD_VAR 0 3
28151: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28152: LD_INT 0
28154: PPUSH
28155: PPUSH
28156: PPUSH
28157: PPUSH
// if not hack in hackTanks then
28158: LD_VAR 0 1
28162: PUSH
28163: LD_EXP 100
28167: IN
28168: NOT
28169: IFFALSE 28173
// exit ;
28171: GO 28413
// index := GetElementIndex ( hackTanks , hack ) ;
28173: LD_ADDR_VAR 0 4
28177: PUSH
28178: LD_EXP 100
28182: PPUSH
28183: LD_VAR 0 1
28187: PPUSH
28188: CALL 35314 0 2
28192: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: DOUBLE
28199: LD_EXP 101
28203: PUSH
28204: LD_VAR 0 4
28208: ARRAY
28209: INC
28210: ST_TO_ADDR
28211: LD_INT 1
28213: PUSH
28214: FOR_DOWNTO
28215: IFFALSE 28387
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28217: LD_ADDR_VAR 0 5
28221: PUSH
28222: LD_EXP 101
28226: PUSH
28227: LD_VAR 0 4
28231: ARRAY
28232: PUSH
28233: LD_VAR 0 3
28237: ARRAY
28238: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28239: LD_VAR 0 5
28243: PUSH
28244: LD_INT 1
28246: ARRAY
28247: PPUSH
28248: CALL_OW 302
28252: NOT
28253: PUSH
28254: LD_VAR 0 5
28258: PUSH
28259: LD_INT 1
28261: ARRAY
28262: PPUSH
28263: CALL_OW 255
28267: PUSH
28268: LD_VAR 0 1
28272: PPUSH
28273: CALL_OW 255
28277: NONEQUAL
28278: OR
28279: IFFALSE 28385
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28281: LD_VAR 0 5
28285: PUSH
28286: LD_INT 1
28288: ARRAY
28289: PPUSH
28290: CALL_OW 305
28294: PUSH
28295: LD_VAR 0 5
28299: PUSH
28300: LD_INT 1
28302: ARRAY
28303: PPUSH
28304: CALL_OW 255
28308: PUSH
28309: LD_VAR 0 1
28313: PPUSH
28314: CALL_OW 255
28318: EQUAL
28319: AND
28320: IFFALSE 28344
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28322: LD_VAR 0 5
28326: PUSH
28327: LD_INT 1
28329: ARRAY
28330: PPUSH
28331: LD_VAR 0 5
28335: PUSH
28336: LD_INT 2
28338: ARRAY
28339: PPUSH
28340: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28344: LD_ADDR_EXP 101
28348: PUSH
28349: LD_EXP 101
28353: PPUSH
28354: LD_VAR 0 4
28358: PPUSH
28359: LD_EXP 101
28363: PUSH
28364: LD_VAR 0 4
28368: ARRAY
28369: PPUSH
28370: LD_VAR 0 3
28374: PPUSH
28375: CALL_OW 3
28379: PPUSH
28380: CALL_OW 1
28384: ST_TO_ADDR
// end ; end ;
28385: GO 28214
28387: POP
28388: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28389: LD_VAR 0 1
28393: PPUSH
28394: LD_EXP 101
28398: PUSH
28399: LD_VAR 0 4
28403: ARRAY
28404: PUSH
28405: LD_INT 0
28407: PLUS
28408: PPUSH
28409: CALL_OW 505
// end ;
28413: LD_VAR 0 2
28417: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28418: LD_INT 0
28420: PPUSH
28421: PPUSH
28422: PPUSH
28423: PPUSH
// if not hack in hackTanks then
28424: LD_VAR 0 1
28428: PUSH
28429: LD_EXP 100
28433: IN
28434: NOT
28435: IFFALSE 28439
// exit ;
28437: GO 28524
// index := GetElementIndex ( hackTanks , hack ) ;
28439: LD_ADDR_VAR 0 5
28443: PUSH
28444: LD_EXP 100
28448: PPUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL 35314 0 2
28458: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28459: LD_ADDR_VAR 0 4
28463: PUSH
28464: DOUBLE
28465: LD_INT 1
28467: DEC
28468: ST_TO_ADDR
28469: LD_EXP 101
28473: PUSH
28474: LD_VAR 0 5
28478: ARRAY
28479: PUSH
28480: FOR_TO
28481: IFFALSE 28522
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28483: LD_EXP 101
28487: PUSH
28488: LD_VAR 0 5
28492: ARRAY
28493: PUSH
28494: LD_VAR 0 4
28498: ARRAY
28499: PUSH
28500: LD_INT 1
28502: ARRAY
28503: PUSH
28504: LD_VAR 0 2
28508: EQUAL
28509: IFFALSE 28520
// KillUnit ( vehicle ) ;
28511: LD_VAR 0 2
28515: PPUSH
28516: CALL_OW 66
28520: GO 28480
28522: POP
28523: POP
// end ;
28524: LD_VAR 0 3
28528: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28529: LD_EXP 105
28533: NOT
28534: IFFALSE 28569
28536: GO 28538
28538: DISABLE
// begin initMiner := true ;
28539: LD_ADDR_EXP 105
28543: PUSH
28544: LD_INT 1
28546: ST_TO_ADDR
// minersList := [ ] ;
28547: LD_ADDR_EXP 106
28551: PUSH
28552: EMPTY
28553: ST_TO_ADDR
// minerMinesList := [ ] ;
28554: LD_ADDR_EXP 107
28558: PUSH
28559: EMPTY
28560: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28561: LD_ADDR_EXP 108
28565: PUSH
28566: LD_INT 5
28568: ST_TO_ADDR
// end ;
28569: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28570: LD_EXP 105
28574: PUSH
28575: LD_INT 34
28577: PUSH
28578: LD_EXP 28
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PPUSH
28587: CALL_OW 69
28591: AND
28592: IFFALSE 29055
28594: GO 28596
28596: DISABLE
28597: LD_INT 0
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
// begin enable ;
28603: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28604: LD_ADDR_VAR 0 1
28608: PUSH
28609: LD_INT 34
28611: PUSH
28612: LD_EXP 28
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PPUSH
28621: CALL_OW 69
28625: PUSH
28626: FOR_IN
28627: IFFALSE 28699
// begin if not i in minersList then
28629: LD_VAR 0 1
28633: PUSH
28634: LD_EXP 106
28638: IN
28639: NOT
28640: IFFALSE 28697
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28642: LD_ADDR_EXP 106
28646: PUSH
28647: LD_EXP 106
28651: PPUSH
28652: LD_EXP 106
28656: PUSH
28657: LD_INT 1
28659: PLUS
28660: PPUSH
28661: LD_VAR 0 1
28665: PPUSH
28666: CALL_OW 1
28670: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28671: LD_ADDR_EXP 107
28675: PUSH
28676: LD_EXP 107
28680: PPUSH
28681: LD_EXP 107
28685: PUSH
28686: LD_INT 1
28688: PLUS
28689: PPUSH
28690: EMPTY
28691: PPUSH
28692: CALL_OW 1
28696: ST_TO_ADDR
// end end ;
28697: GO 28626
28699: POP
28700: POP
// for i := minerMinesList downto 1 do
28701: LD_ADDR_VAR 0 1
28705: PUSH
28706: DOUBLE
28707: LD_EXP 107
28711: INC
28712: ST_TO_ADDR
28713: LD_INT 1
28715: PUSH
28716: FOR_DOWNTO
28717: IFFALSE 29053
// begin if IsLive ( minersList [ i ] ) then
28719: LD_EXP 106
28723: PUSH
28724: LD_VAR 0 1
28728: ARRAY
28729: PPUSH
28730: CALL_OW 300
28734: IFFALSE 28762
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28736: LD_EXP 106
28740: PUSH
28741: LD_VAR 0 1
28745: ARRAY
28746: PPUSH
28747: LD_EXP 107
28751: PUSH
28752: LD_VAR 0 1
28756: ARRAY
28757: PPUSH
28758: CALL_OW 505
// if not minerMinesList [ i ] then
28762: LD_EXP 107
28766: PUSH
28767: LD_VAR 0 1
28771: ARRAY
28772: NOT
28773: IFFALSE 28777
// continue ;
28775: GO 28716
// for j := minerMinesList [ i ] downto 1 do
28777: LD_ADDR_VAR 0 2
28781: PUSH
28782: DOUBLE
28783: LD_EXP 107
28787: PUSH
28788: LD_VAR 0 1
28792: ARRAY
28793: INC
28794: ST_TO_ADDR
28795: LD_INT 1
28797: PUSH
28798: FOR_DOWNTO
28799: IFFALSE 29049
// begin side := GetSide ( minersList [ i ] ) ;
28801: LD_ADDR_VAR 0 3
28805: PUSH
28806: LD_EXP 106
28810: PUSH
28811: LD_VAR 0 1
28815: ARRAY
28816: PPUSH
28817: CALL_OW 255
28821: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28822: LD_ADDR_VAR 0 4
28826: PUSH
28827: LD_EXP 107
28831: PUSH
28832: LD_VAR 0 1
28836: ARRAY
28837: PUSH
28838: LD_VAR 0 2
28842: ARRAY
28843: PUSH
28844: LD_INT 1
28846: ARRAY
28847: PPUSH
28848: LD_EXP 107
28852: PUSH
28853: LD_VAR 0 1
28857: ARRAY
28858: PUSH
28859: LD_VAR 0 2
28863: ARRAY
28864: PUSH
28865: LD_INT 2
28867: ARRAY
28868: PPUSH
28869: CALL_OW 428
28873: ST_TO_ADDR
// if not tmp then
28874: LD_VAR 0 4
28878: NOT
28879: IFFALSE 28883
// continue ;
28881: GO 28798
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28883: LD_VAR 0 4
28887: PUSH
28888: LD_INT 81
28890: PUSH
28891: LD_VAR 0 3
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: IN
28905: PUSH
28906: LD_EXP 107
28910: PUSH
28911: LD_VAR 0 1
28915: ARRAY
28916: PUSH
28917: LD_VAR 0 2
28921: ARRAY
28922: PUSH
28923: LD_INT 1
28925: ARRAY
28926: PPUSH
28927: LD_EXP 107
28931: PUSH
28932: LD_VAR 0 1
28936: ARRAY
28937: PUSH
28938: LD_VAR 0 2
28942: ARRAY
28943: PUSH
28944: LD_INT 2
28946: ARRAY
28947: PPUSH
28948: CALL_OW 458
28952: AND
28953: IFFALSE 29047
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28955: LD_EXP 107
28959: PUSH
28960: LD_VAR 0 1
28964: ARRAY
28965: PUSH
28966: LD_VAR 0 2
28970: ARRAY
28971: PUSH
28972: LD_INT 1
28974: ARRAY
28975: PPUSH
28976: LD_EXP 107
28980: PUSH
28981: LD_VAR 0 1
28985: ARRAY
28986: PUSH
28987: LD_VAR 0 2
28991: ARRAY
28992: PUSH
28993: LD_INT 2
28995: ARRAY
28996: PPUSH
28997: LD_VAR 0 3
29001: PPUSH
29002: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29006: LD_ADDR_EXP 107
29010: PUSH
29011: LD_EXP 107
29015: PPUSH
29016: LD_VAR 0 1
29020: PPUSH
29021: LD_EXP 107
29025: PUSH
29026: LD_VAR 0 1
29030: ARRAY
29031: PPUSH
29032: LD_VAR 0 2
29036: PPUSH
29037: CALL_OW 3
29041: PPUSH
29042: CALL_OW 1
29046: ST_TO_ADDR
// end ; end ;
29047: GO 28798
29049: POP
29050: POP
// end ;
29051: GO 28716
29053: POP
29054: POP
// end ;
29055: PPOPN 4
29057: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29058: LD_INT 0
29060: PPUSH
29061: PPUSH
// result := false ;
29062: LD_ADDR_VAR 0 4
29066: PUSH
29067: LD_INT 0
29069: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29070: LD_VAR 0 1
29074: PPUSH
29075: CALL_OW 264
29079: PUSH
29080: LD_EXP 28
29084: EQUAL
29085: NOT
29086: IFFALSE 29090
// exit ;
29088: GO 29330
// index := GetElementIndex ( minersList , unit ) ;
29090: LD_ADDR_VAR 0 5
29094: PUSH
29095: LD_EXP 106
29099: PPUSH
29100: LD_VAR 0 1
29104: PPUSH
29105: CALL 35314 0 2
29109: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29110: LD_EXP 107
29114: PUSH
29115: LD_VAR 0 5
29119: ARRAY
29120: PUSH
29121: LD_EXP 108
29125: GREATEREQUAL
29126: IFFALSE 29130
// exit ;
29128: GO 29330
// ComMoveXY ( unit , x , y ) ;
29130: LD_VAR 0 1
29134: PPUSH
29135: LD_VAR 0 2
29139: PPUSH
29140: LD_VAR 0 3
29144: PPUSH
29145: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29149: LD_INT 35
29151: PPUSH
29152: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29156: LD_VAR 0 1
29160: PPUSH
29161: LD_VAR 0 2
29165: PPUSH
29166: LD_VAR 0 3
29170: PPUSH
29171: CALL 66086 0 3
29175: NOT
29176: PUSH
29177: LD_VAR 0 1
29181: PPUSH
29182: CALL_OW 314
29186: AND
29187: IFFALSE 29191
// exit ;
29189: GO 29330
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29191: LD_VAR 0 2
29195: PPUSH
29196: LD_VAR 0 3
29200: PPUSH
29201: CALL_OW 428
29205: PUSH
29206: LD_VAR 0 1
29210: EQUAL
29211: PUSH
29212: LD_VAR 0 1
29216: PPUSH
29217: CALL_OW 314
29221: NOT
29222: AND
29223: IFFALSE 29149
// PlaySoundXY ( x , y , PlantMine ) ;
29225: LD_VAR 0 2
29229: PPUSH
29230: LD_VAR 0 3
29234: PPUSH
29235: LD_STRING PlantMine
29237: PPUSH
29238: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29242: LD_VAR 0 2
29246: PPUSH
29247: LD_VAR 0 3
29251: PPUSH
29252: LD_VAR 0 1
29256: PPUSH
29257: CALL_OW 255
29261: PPUSH
29262: LD_INT 0
29264: PPUSH
29265: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29269: LD_ADDR_EXP 107
29273: PUSH
29274: LD_EXP 107
29278: PPUSH
29279: LD_VAR 0 5
29283: PUSH
29284: LD_EXP 107
29288: PUSH
29289: LD_VAR 0 5
29293: ARRAY
29294: PUSH
29295: LD_INT 1
29297: PLUS
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PPUSH
29303: LD_VAR 0 2
29307: PUSH
29308: LD_VAR 0 3
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PPUSH
29317: CALL 35529 0 3
29321: ST_TO_ADDR
// result := true ;
29322: LD_ADDR_VAR 0 4
29326: PUSH
29327: LD_INT 1
29329: ST_TO_ADDR
// end ;
29330: LD_VAR 0 4
29334: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29335: LD_INT 0
29337: PPUSH
29338: PPUSH
29339: PPUSH
// if not unit in minersList then
29340: LD_VAR 0 1
29344: PUSH
29345: LD_EXP 106
29349: IN
29350: NOT
29351: IFFALSE 29355
// exit ;
29353: GO 29747
// index := GetElementIndex ( minersList , unit ) ;
29355: LD_ADDR_VAR 0 6
29359: PUSH
29360: LD_EXP 106
29364: PPUSH
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL 35314 0 2
29374: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29375: LD_ADDR_VAR 0 5
29379: PUSH
29380: DOUBLE
29381: LD_EXP 107
29385: PUSH
29386: LD_VAR 0 6
29390: ARRAY
29391: INC
29392: ST_TO_ADDR
29393: LD_INT 1
29395: PUSH
29396: FOR_DOWNTO
29397: IFFALSE 29558
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29399: LD_EXP 107
29403: PUSH
29404: LD_VAR 0 6
29408: ARRAY
29409: PUSH
29410: LD_VAR 0 5
29414: ARRAY
29415: PUSH
29416: LD_INT 1
29418: ARRAY
29419: PUSH
29420: LD_VAR 0 2
29424: EQUAL
29425: PUSH
29426: LD_EXP 107
29430: PUSH
29431: LD_VAR 0 6
29435: ARRAY
29436: PUSH
29437: LD_VAR 0 5
29441: ARRAY
29442: PUSH
29443: LD_INT 2
29445: ARRAY
29446: PUSH
29447: LD_VAR 0 3
29451: EQUAL
29452: AND
29453: IFFALSE 29556
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29455: LD_EXP 107
29459: PUSH
29460: LD_VAR 0 6
29464: ARRAY
29465: PUSH
29466: LD_VAR 0 5
29470: ARRAY
29471: PUSH
29472: LD_INT 1
29474: ARRAY
29475: PPUSH
29476: LD_EXP 107
29480: PUSH
29481: LD_VAR 0 6
29485: ARRAY
29486: PUSH
29487: LD_VAR 0 5
29491: ARRAY
29492: PUSH
29493: LD_INT 2
29495: ARRAY
29496: PPUSH
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL_OW 255
29506: PPUSH
29507: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29511: LD_ADDR_EXP 107
29515: PUSH
29516: LD_EXP 107
29520: PPUSH
29521: LD_VAR 0 6
29525: PPUSH
29526: LD_EXP 107
29530: PUSH
29531: LD_VAR 0 6
29535: ARRAY
29536: PPUSH
29537: LD_VAR 0 5
29541: PPUSH
29542: CALL_OW 3
29546: PPUSH
29547: CALL_OW 1
29551: ST_TO_ADDR
// exit ;
29552: POP
29553: POP
29554: GO 29747
// end ; end ;
29556: GO 29396
29558: POP
29559: POP
// for i := minerMinesList [ index ] downto 1 do
29560: LD_ADDR_VAR 0 5
29564: PUSH
29565: DOUBLE
29566: LD_EXP 107
29570: PUSH
29571: LD_VAR 0 6
29575: ARRAY
29576: INC
29577: ST_TO_ADDR
29578: LD_INT 1
29580: PUSH
29581: FOR_DOWNTO
29582: IFFALSE 29745
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29584: LD_EXP 107
29588: PUSH
29589: LD_VAR 0 6
29593: ARRAY
29594: PUSH
29595: LD_VAR 0 5
29599: ARRAY
29600: PUSH
29601: LD_INT 1
29603: ARRAY
29604: PPUSH
29605: LD_EXP 107
29609: PUSH
29610: LD_VAR 0 6
29614: ARRAY
29615: PUSH
29616: LD_VAR 0 5
29620: ARRAY
29621: PUSH
29622: LD_INT 2
29624: ARRAY
29625: PPUSH
29626: LD_VAR 0 2
29630: PPUSH
29631: LD_VAR 0 3
29635: PPUSH
29636: CALL_OW 298
29640: PUSH
29641: LD_INT 6
29643: LESS
29644: IFFALSE 29743
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29646: LD_EXP 107
29650: PUSH
29651: LD_VAR 0 6
29655: ARRAY
29656: PUSH
29657: LD_VAR 0 5
29661: ARRAY
29662: PUSH
29663: LD_INT 1
29665: ARRAY
29666: PPUSH
29667: LD_EXP 107
29671: PUSH
29672: LD_VAR 0 6
29676: ARRAY
29677: PUSH
29678: LD_VAR 0 5
29682: ARRAY
29683: PUSH
29684: LD_INT 2
29686: ARRAY
29687: PPUSH
29688: LD_VAR 0 1
29692: PPUSH
29693: CALL_OW 255
29697: PPUSH
29698: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29702: LD_ADDR_EXP 107
29706: PUSH
29707: LD_EXP 107
29711: PPUSH
29712: LD_VAR 0 6
29716: PPUSH
29717: LD_EXP 107
29721: PUSH
29722: LD_VAR 0 6
29726: ARRAY
29727: PPUSH
29728: LD_VAR 0 5
29732: PPUSH
29733: CALL_OW 3
29737: PPUSH
29738: CALL_OW 1
29742: ST_TO_ADDR
// end ; end ;
29743: GO 29581
29745: POP
29746: POP
// end ;
29747: LD_VAR 0 4
29751: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29752: LD_INT 0
29754: PPUSH
29755: PPUSH
29756: PPUSH
29757: PPUSH
29758: PPUSH
29759: PPUSH
29760: PPUSH
29761: PPUSH
29762: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29763: LD_VAR 0 1
29767: PPUSH
29768: CALL_OW 264
29772: PUSH
29773: LD_EXP 28
29777: EQUAL
29778: NOT
29779: PUSH
29780: LD_VAR 0 1
29784: PUSH
29785: LD_EXP 106
29789: IN
29790: NOT
29791: OR
29792: IFFALSE 29796
// exit ;
29794: GO 30118
// index := GetElementIndex ( minersList , unit ) ;
29796: LD_ADDR_VAR 0 6
29800: PUSH
29801: LD_EXP 106
29805: PPUSH
29806: LD_VAR 0 1
29810: PPUSH
29811: CALL 35314 0 2
29815: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29816: LD_ADDR_VAR 0 8
29820: PUSH
29821: LD_EXP 108
29825: PUSH
29826: LD_EXP 107
29830: PUSH
29831: LD_VAR 0 6
29835: ARRAY
29836: MINUS
29837: ST_TO_ADDR
// if not minesFreeAmount then
29838: LD_VAR 0 8
29842: NOT
29843: IFFALSE 29847
// exit ;
29845: GO 30118
// tmp := [ ] ;
29847: LD_ADDR_VAR 0 7
29851: PUSH
29852: EMPTY
29853: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29854: LD_ADDR_VAR 0 5
29858: PUSH
29859: DOUBLE
29860: LD_INT 1
29862: DEC
29863: ST_TO_ADDR
29864: LD_VAR 0 8
29868: PUSH
29869: FOR_TO
29870: IFFALSE 30065
// begin _d := rand ( 0 , 5 ) ;
29872: LD_ADDR_VAR 0 11
29876: PUSH
29877: LD_INT 0
29879: PPUSH
29880: LD_INT 5
29882: PPUSH
29883: CALL_OW 12
29887: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29888: LD_ADDR_VAR 0 12
29892: PUSH
29893: LD_INT 2
29895: PPUSH
29896: LD_INT 6
29898: PPUSH
29899: CALL_OW 12
29903: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29904: LD_ADDR_VAR 0 9
29908: PUSH
29909: LD_VAR 0 2
29913: PPUSH
29914: LD_VAR 0 11
29918: PPUSH
29919: LD_VAR 0 12
29923: PPUSH
29924: CALL_OW 272
29928: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29929: LD_ADDR_VAR 0 10
29933: PUSH
29934: LD_VAR 0 3
29938: PPUSH
29939: LD_VAR 0 11
29943: PPUSH
29944: LD_VAR 0 12
29948: PPUSH
29949: CALL_OW 273
29953: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29954: LD_VAR 0 9
29958: PPUSH
29959: LD_VAR 0 10
29963: PPUSH
29964: CALL_OW 488
29968: PUSH
29969: LD_VAR 0 9
29973: PUSH
29974: LD_VAR 0 10
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_VAR 0 7
29987: IN
29988: NOT
29989: AND
29990: PUSH
29991: LD_VAR 0 9
29995: PPUSH
29996: LD_VAR 0 10
30000: PPUSH
30001: CALL_OW 458
30005: NOT
30006: AND
30007: IFFALSE 30049
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30009: LD_ADDR_VAR 0 7
30013: PUSH
30014: LD_VAR 0 7
30018: PPUSH
30019: LD_VAR 0 7
30023: PUSH
30024: LD_INT 1
30026: PLUS
30027: PPUSH
30028: LD_VAR 0 9
30032: PUSH
30033: LD_VAR 0 10
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PPUSH
30042: CALL_OW 1
30046: ST_TO_ADDR
30047: GO 30063
// i := i - 1 ;
30049: LD_ADDR_VAR 0 5
30053: PUSH
30054: LD_VAR 0 5
30058: PUSH
30059: LD_INT 1
30061: MINUS
30062: ST_TO_ADDR
// end ;
30063: GO 29869
30065: POP
30066: POP
// for i in tmp do
30067: LD_ADDR_VAR 0 5
30071: PUSH
30072: LD_VAR 0 7
30076: PUSH
30077: FOR_IN
30078: IFFALSE 30116
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30080: LD_VAR 0 1
30084: PPUSH
30085: LD_VAR 0 5
30089: PUSH
30090: LD_INT 1
30092: ARRAY
30093: PPUSH
30094: LD_VAR 0 5
30098: PUSH
30099: LD_INT 2
30101: ARRAY
30102: PPUSH
30103: CALL 29058 0 3
30107: NOT
30108: IFFALSE 30114
// exit ;
30110: POP
30111: POP
30112: GO 30118
30114: GO 30077
30116: POP
30117: POP
// end ;
30118: LD_VAR 0 4
30122: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30123: LD_INT 0
30125: PPUSH
30126: PPUSH
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
30131: PPUSH
// if not GetClass ( unit ) = class_sniper then
30132: LD_VAR 0 1
30136: PPUSH
30137: CALL_OW 257
30141: PUSH
30142: LD_INT 5
30144: EQUAL
30145: NOT
30146: IFFALSE 30150
// exit ;
30148: GO 30538
// dist := 8 ;
30150: LD_ADDR_VAR 0 5
30154: PUSH
30155: LD_INT 8
30157: ST_TO_ADDR
// viewRange := 12 ;
30158: LD_ADDR_VAR 0 7
30162: PUSH
30163: LD_INT 12
30165: ST_TO_ADDR
// side := GetSide ( unit ) ;
30166: LD_ADDR_VAR 0 6
30170: PUSH
30171: LD_VAR 0 1
30175: PPUSH
30176: CALL_OW 255
30180: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30181: LD_INT 61
30183: PPUSH
30184: LD_VAR 0 6
30188: PPUSH
30189: CALL_OW 321
30193: PUSH
30194: LD_INT 2
30196: EQUAL
30197: IFFALSE 30207
// viewRange := 16 ;
30199: LD_ADDR_VAR 0 7
30203: PUSH
30204: LD_INT 16
30206: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30207: LD_VAR 0 1
30211: PPUSH
30212: LD_VAR 0 2
30216: PPUSH
30217: LD_VAR 0 3
30221: PPUSH
30222: CALL_OW 297
30226: PUSH
30227: LD_VAR 0 5
30231: GREATER
30232: IFFALSE 30311
// begin ComMoveXY ( unit , x , y ) ;
30234: LD_VAR 0 1
30238: PPUSH
30239: LD_VAR 0 2
30243: PPUSH
30244: LD_VAR 0 3
30248: PPUSH
30249: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30253: LD_INT 35
30255: PPUSH
30256: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30260: LD_VAR 0 1
30264: PPUSH
30265: LD_VAR 0 2
30269: PPUSH
30270: LD_VAR 0 3
30274: PPUSH
30275: CALL 66086 0 3
30279: NOT
30280: IFFALSE 30284
// exit ;
30282: GO 30538
// until GetDistUnitXY ( unit , x , y ) < dist ;
30284: LD_VAR 0 1
30288: PPUSH
30289: LD_VAR 0 2
30293: PPUSH
30294: LD_VAR 0 3
30298: PPUSH
30299: CALL_OW 297
30303: PUSH
30304: LD_VAR 0 5
30308: LESS
30309: IFFALSE 30253
// end ; ComTurnXY ( unit , x , y ) ;
30311: LD_VAR 0 1
30315: PPUSH
30316: LD_VAR 0 2
30320: PPUSH
30321: LD_VAR 0 3
30325: PPUSH
30326: CALL_OW 118
// wait ( 5 ) ;
30330: LD_INT 5
30332: PPUSH
30333: CALL_OW 67
// _d := GetDir ( unit ) ;
30337: LD_ADDR_VAR 0 10
30341: PUSH
30342: LD_VAR 0 1
30346: PPUSH
30347: CALL_OW 254
30351: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30352: LD_ADDR_VAR 0 8
30356: PUSH
30357: LD_VAR 0 1
30361: PPUSH
30362: CALL_OW 250
30366: PPUSH
30367: LD_VAR 0 10
30371: PPUSH
30372: LD_VAR 0 5
30376: PPUSH
30377: CALL_OW 272
30381: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30382: LD_ADDR_VAR 0 9
30386: PUSH
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL_OW 251
30396: PPUSH
30397: LD_VAR 0 10
30401: PPUSH
30402: LD_VAR 0 5
30406: PPUSH
30407: CALL_OW 273
30411: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30412: LD_VAR 0 8
30416: PPUSH
30417: LD_VAR 0 9
30421: PPUSH
30422: CALL_OW 488
30426: NOT
30427: IFFALSE 30431
// exit ;
30429: GO 30538
// ComAnimCustom ( unit , 1 ) ;
30431: LD_VAR 0 1
30435: PPUSH
30436: LD_INT 1
30438: PPUSH
30439: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30443: LD_VAR 0 8
30447: PPUSH
30448: LD_VAR 0 9
30452: PPUSH
30453: LD_VAR 0 6
30457: PPUSH
30458: LD_VAR 0 7
30462: PPUSH
30463: CALL_OW 330
// repeat wait ( 1 ) ;
30467: LD_INT 1
30469: PPUSH
30470: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30474: LD_VAR 0 1
30478: PPUSH
30479: CALL_OW 316
30483: PUSH
30484: LD_VAR 0 1
30488: PPUSH
30489: CALL_OW 314
30493: OR
30494: PUSH
30495: LD_VAR 0 1
30499: PPUSH
30500: CALL_OW 302
30504: NOT
30505: OR
30506: PUSH
30507: LD_VAR 0 1
30511: PPUSH
30512: CALL_OW 301
30516: OR
30517: IFFALSE 30467
// RemoveSeeing ( _x , _y , side ) ;
30519: LD_VAR 0 8
30523: PPUSH
30524: LD_VAR 0 9
30528: PPUSH
30529: LD_VAR 0 6
30533: PPUSH
30534: CALL_OW 331
// end ; end_of_file
30538: LD_VAR 0 4
30542: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30543: LD_INT 0
30545: PPUSH
30546: PPUSH
// if exist_mode then
30547: LD_VAR 0 2
30551: IFFALSE 30576
// unit := CreateCharacter ( prefix & ident ) else
30553: LD_ADDR_VAR 0 5
30557: PUSH
30558: LD_VAR 0 3
30562: PUSH
30563: LD_VAR 0 1
30567: STR
30568: PPUSH
30569: CALL_OW 34
30573: ST_TO_ADDR
30574: GO 30591
// unit := NewCharacter ( ident ) ;
30576: LD_ADDR_VAR 0 5
30580: PUSH
30581: LD_VAR 0 1
30585: PPUSH
30586: CALL_OW 25
30590: ST_TO_ADDR
// result := unit ;
30591: LD_ADDR_VAR 0 4
30595: PUSH
30596: LD_VAR 0 5
30600: ST_TO_ADDR
// end ;
30601: LD_VAR 0 4
30605: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30606: LD_INT 0
30608: PPUSH
30609: PPUSH
// if not side or not nation then
30610: LD_VAR 0 1
30614: NOT
30615: PUSH
30616: LD_VAR 0 2
30620: NOT
30621: OR
30622: IFFALSE 30626
// exit ;
30624: GO 31394
// case nation of nation_american :
30626: LD_VAR 0 2
30630: PUSH
30631: LD_INT 1
30633: DOUBLE
30634: EQUAL
30635: IFTRUE 30639
30637: GO 30853
30639: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30640: LD_ADDR_VAR 0 4
30644: PUSH
30645: LD_INT 35
30647: PUSH
30648: LD_INT 45
30650: PUSH
30651: LD_INT 46
30653: PUSH
30654: LD_INT 47
30656: PUSH
30657: LD_INT 82
30659: PUSH
30660: LD_INT 83
30662: PUSH
30663: LD_INT 84
30665: PUSH
30666: LD_INT 85
30668: PUSH
30669: LD_INT 86
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 2
30677: PUSH
30678: LD_INT 6
30680: PUSH
30681: LD_INT 15
30683: PUSH
30684: LD_INT 16
30686: PUSH
30687: LD_INT 7
30689: PUSH
30690: LD_INT 12
30692: PUSH
30693: LD_INT 13
30695: PUSH
30696: LD_INT 10
30698: PUSH
30699: LD_INT 14
30701: PUSH
30702: LD_INT 20
30704: PUSH
30705: LD_INT 21
30707: PUSH
30708: LD_INT 22
30710: PUSH
30711: LD_INT 25
30713: PUSH
30714: LD_INT 32
30716: PUSH
30717: LD_INT 27
30719: PUSH
30720: LD_INT 36
30722: PUSH
30723: LD_INT 69
30725: PUSH
30726: LD_INT 39
30728: PUSH
30729: LD_INT 34
30731: PUSH
30732: LD_INT 40
30734: PUSH
30735: LD_INT 48
30737: PUSH
30738: LD_INT 49
30740: PUSH
30741: LD_INT 50
30743: PUSH
30744: LD_INT 51
30746: PUSH
30747: LD_INT 52
30749: PUSH
30750: LD_INT 53
30752: PUSH
30753: LD_INT 54
30755: PUSH
30756: LD_INT 55
30758: PUSH
30759: LD_INT 56
30761: PUSH
30762: LD_INT 57
30764: PUSH
30765: LD_INT 58
30767: PUSH
30768: LD_INT 59
30770: PUSH
30771: LD_INT 60
30773: PUSH
30774: LD_INT 61
30776: PUSH
30777: LD_INT 62
30779: PUSH
30780: LD_INT 80
30782: PUSH
30783: LD_INT 82
30785: PUSH
30786: LD_INT 83
30788: PUSH
30789: LD_INT 84
30791: PUSH
30792: LD_INT 85
30794: PUSH
30795: LD_INT 86
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: ST_TO_ADDR
30851: GO 31318
30853: LD_INT 2
30855: DOUBLE
30856: EQUAL
30857: IFTRUE 30861
30859: GO 31087
30861: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30862: LD_ADDR_VAR 0 4
30866: PUSH
30867: LD_INT 35
30869: PUSH
30870: LD_INT 45
30872: PUSH
30873: LD_INT 46
30875: PUSH
30876: LD_INT 47
30878: PUSH
30879: LD_INT 82
30881: PUSH
30882: LD_INT 83
30884: PUSH
30885: LD_INT 84
30887: PUSH
30888: LD_INT 85
30890: PUSH
30891: LD_INT 87
30893: PUSH
30894: LD_INT 70
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 11
30902: PUSH
30903: LD_INT 3
30905: PUSH
30906: LD_INT 4
30908: PUSH
30909: LD_INT 5
30911: PUSH
30912: LD_INT 6
30914: PUSH
30915: LD_INT 15
30917: PUSH
30918: LD_INT 18
30920: PUSH
30921: LD_INT 7
30923: PUSH
30924: LD_INT 17
30926: PUSH
30927: LD_INT 8
30929: PUSH
30930: LD_INT 20
30932: PUSH
30933: LD_INT 21
30935: PUSH
30936: LD_INT 22
30938: PUSH
30939: LD_INT 72
30941: PUSH
30942: LD_INT 26
30944: PUSH
30945: LD_INT 69
30947: PUSH
30948: LD_INT 39
30950: PUSH
30951: LD_INT 40
30953: PUSH
30954: LD_INT 41
30956: PUSH
30957: LD_INT 42
30959: PUSH
30960: LD_INT 43
30962: PUSH
30963: LD_INT 48
30965: PUSH
30966: LD_INT 49
30968: PUSH
30969: LD_INT 50
30971: PUSH
30972: LD_INT 51
30974: PUSH
30975: LD_INT 52
30977: PUSH
30978: LD_INT 53
30980: PUSH
30981: LD_INT 54
30983: PUSH
30984: LD_INT 55
30986: PUSH
30987: LD_INT 56
30989: PUSH
30990: LD_INT 60
30992: PUSH
30993: LD_INT 61
30995: PUSH
30996: LD_INT 62
30998: PUSH
30999: LD_INT 66
31001: PUSH
31002: LD_INT 67
31004: PUSH
31005: LD_INT 68
31007: PUSH
31008: LD_INT 81
31010: PUSH
31011: LD_INT 82
31013: PUSH
31014: LD_INT 83
31016: PUSH
31017: LD_INT 84
31019: PUSH
31020: LD_INT 85
31022: PUSH
31023: LD_INT 87
31025: PUSH
31026: LD_INT 88
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: ST_TO_ADDR
31085: GO 31318
31087: LD_INT 3
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31317
31095: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31096: LD_ADDR_VAR 0 4
31100: PUSH
31101: LD_INT 46
31103: PUSH
31104: LD_INT 47
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 2
31112: PUSH
31113: LD_INT 82
31115: PUSH
31116: LD_INT 83
31118: PUSH
31119: LD_INT 84
31121: PUSH
31122: LD_INT 85
31124: PUSH
31125: LD_INT 86
31127: PUSH
31128: LD_INT 11
31130: PUSH
31131: LD_INT 9
31133: PUSH
31134: LD_INT 20
31136: PUSH
31137: LD_INT 19
31139: PUSH
31140: LD_INT 21
31142: PUSH
31143: LD_INT 24
31145: PUSH
31146: LD_INT 22
31148: PUSH
31149: LD_INT 25
31151: PUSH
31152: LD_INT 28
31154: PUSH
31155: LD_INT 29
31157: PUSH
31158: LD_INT 30
31160: PUSH
31161: LD_INT 31
31163: PUSH
31164: LD_INT 37
31166: PUSH
31167: LD_INT 38
31169: PUSH
31170: LD_INT 32
31172: PUSH
31173: LD_INT 27
31175: PUSH
31176: LD_INT 33
31178: PUSH
31179: LD_INT 69
31181: PUSH
31182: LD_INT 39
31184: PUSH
31185: LD_INT 34
31187: PUSH
31188: LD_INT 40
31190: PUSH
31191: LD_INT 71
31193: PUSH
31194: LD_INT 23
31196: PUSH
31197: LD_INT 44
31199: PUSH
31200: LD_INT 48
31202: PUSH
31203: LD_INT 49
31205: PUSH
31206: LD_INT 50
31208: PUSH
31209: LD_INT 51
31211: PUSH
31212: LD_INT 52
31214: PUSH
31215: LD_INT 53
31217: PUSH
31218: LD_INT 54
31220: PUSH
31221: LD_INT 55
31223: PUSH
31224: LD_INT 56
31226: PUSH
31227: LD_INT 57
31229: PUSH
31230: LD_INT 58
31232: PUSH
31233: LD_INT 59
31235: PUSH
31236: LD_INT 63
31238: PUSH
31239: LD_INT 64
31241: PUSH
31242: LD_INT 65
31244: PUSH
31245: LD_INT 82
31247: PUSH
31248: LD_INT 83
31250: PUSH
31251: LD_INT 84
31253: PUSH
31254: LD_INT 85
31256: PUSH
31257: LD_INT 86
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: ST_TO_ADDR
31315: GO 31318
31317: POP
// if state > - 1 and state < 3 then
31318: LD_VAR 0 3
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: GREATER
31327: PUSH
31328: LD_VAR 0 3
31332: PUSH
31333: LD_INT 3
31335: LESS
31336: AND
31337: IFFALSE 31394
// for i in result do
31339: LD_ADDR_VAR 0 5
31343: PUSH
31344: LD_VAR 0 4
31348: PUSH
31349: FOR_IN
31350: IFFALSE 31392
// if GetTech ( i , side ) <> state then
31352: LD_VAR 0 5
31356: PPUSH
31357: LD_VAR 0 1
31361: PPUSH
31362: CALL_OW 321
31366: PUSH
31367: LD_VAR 0 3
31371: NONEQUAL
31372: IFFALSE 31390
// result := result diff i ;
31374: LD_ADDR_VAR 0 4
31378: PUSH
31379: LD_VAR 0 4
31383: PUSH
31384: LD_VAR 0 5
31388: DIFF
31389: ST_TO_ADDR
31390: GO 31349
31392: POP
31393: POP
// end ;
31394: LD_VAR 0 4
31398: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31399: LD_INT 0
31401: PPUSH
31402: PPUSH
31403: PPUSH
// result := true ;
31404: LD_ADDR_VAR 0 3
31408: PUSH
31409: LD_INT 1
31411: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31412: LD_ADDR_VAR 0 5
31416: PUSH
31417: LD_VAR 0 2
31421: PPUSH
31422: CALL_OW 480
31426: ST_TO_ADDR
// if not tmp then
31427: LD_VAR 0 5
31431: NOT
31432: IFFALSE 31436
// exit ;
31434: GO 31485
// for i in tmp do
31436: LD_ADDR_VAR 0 4
31440: PUSH
31441: LD_VAR 0 5
31445: PUSH
31446: FOR_IN
31447: IFFALSE 31483
// if GetTech ( i , side ) <> state_researched then
31449: LD_VAR 0 4
31453: PPUSH
31454: LD_VAR 0 1
31458: PPUSH
31459: CALL_OW 321
31463: PUSH
31464: LD_INT 2
31466: NONEQUAL
31467: IFFALSE 31481
// begin result := false ;
31469: LD_ADDR_VAR 0 3
31473: PUSH
31474: LD_INT 0
31476: ST_TO_ADDR
// exit ;
31477: POP
31478: POP
31479: GO 31485
// end ;
31481: GO 31446
31483: POP
31484: POP
// end ;
31485: LD_VAR 0 3
31489: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31490: LD_INT 0
31492: PPUSH
31493: PPUSH
31494: PPUSH
31495: PPUSH
31496: PPUSH
31497: PPUSH
31498: PPUSH
31499: PPUSH
31500: PPUSH
31501: PPUSH
31502: PPUSH
31503: PPUSH
31504: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31505: LD_VAR 0 1
31509: NOT
31510: PUSH
31511: LD_VAR 0 1
31515: PPUSH
31516: CALL_OW 257
31520: PUSH
31521: LD_INT 9
31523: NONEQUAL
31524: OR
31525: IFFALSE 31529
// exit ;
31527: GO 32102
// side := GetSide ( unit ) ;
31529: LD_ADDR_VAR 0 9
31533: PUSH
31534: LD_VAR 0 1
31538: PPUSH
31539: CALL_OW 255
31543: ST_TO_ADDR
// tech_space := tech_spacanom ;
31544: LD_ADDR_VAR 0 12
31548: PUSH
31549: LD_INT 29
31551: ST_TO_ADDR
// tech_time := tech_taurad ;
31552: LD_ADDR_VAR 0 13
31556: PUSH
31557: LD_INT 28
31559: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31560: LD_ADDR_VAR 0 11
31564: PUSH
31565: LD_VAR 0 1
31569: PPUSH
31570: CALL_OW 310
31574: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31575: LD_VAR 0 11
31579: PPUSH
31580: CALL_OW 247
31584: PUSH
31585: LD_INT 2
31587: EQUAL
31588: IFFALSE 31592
// exit ;
31590: GO 32102
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31592: LD_ADDR_VAR 0 8
31596: PUSH
31597: LD_INT 81
31599: PUSH
31600: LD_VAR 0 9
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 3
31611: PUSH
31612: LD_INT 21
31614: PUSH
31615: LD_INT 3
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PPUSH
31630: CALL_OW 69
31634: ST_TO_ADDR
// if not tmp then
31635: LD_VAR 0 8
31639: NOT
31640: IFFALSE 31644
// exit ;
31642: GO 32102
// if in_unit then
31644: LD_VAR 0 11
31648: IFFALSE 31672
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31650: LD_ADDR_VAR 0 10
31654: PUSH
31655: LD_VAR 0 8
31659: PPUSH
31660: LD_VAR 0 11
31664: PPUSH
31665: CALL_OW 74
31669: ST_TO_ADDR
31670: GO 31692
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31672: LD_ADDR_VAR 0 10
31676: PUSH
31677: LD_VAR 0 8
31681: PPUSH
31682: LD_VAR 0 1
31686: PPUSH
31687: CALL_OW 74
31691: ST_TO_ADDR
// if not enemy then
31692: LD_VAR 0 10
31696: NOT
31697: IFFALSE 31701
// exit ;
31699: GO 32102
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31701: LD_VAR 0 11
31705: PUSH
31706: LD_VAR 0 11
31710: PPUSH
31711: LD_VAR 0 10
31715: PPUSH
31716: CALL_OW 296
31720: PUSH
31721: LD_INT 13
31723: GREATER
31724: AND
31725: PUSH
31726: LD_VAR 0 1
31730: PPUSH
31731: LD_VAR 0 10
31735: PPUSH
31736: CALL_OW 296
31740: PUSH
31741: LD_INT 12
31743: GREATER
31744: OR
31745: IFFALSE 31749
// exit ;
31747: GO 32102
// missile := [ 1 ] ;
31749: LD_ADDR_VAR 0 14
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: EMPTY
31758: LIST
31759: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31760: LD_VAR 0 9
31764: PPUSH
31765: LD_VAR 0 12
31769: PPUSH
31770: CALL_OW 325
31774: IFFALSE 31803
// missile := Insert ( missile , missile + 1 , 2 ) ;
31776: LD_ADDR_VAR 0 14
31780: PUSH
31781: LD_VAR 0 14
31785: PPUSH
31786: LD_VAR 0 14
31790: PUSH
31791: LD_INT 1
31793: PLUS
31794: PPUSH
31795: LD_INT 2
31797: PPUSH
31798: CALL_OW 2
31802: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31803: LD_VAR 0 9
31807: PPUSH
31808: LD_VAR 0 13
31812: PPUSH
31813: CALL_OW 325
31817: PUSH
31818: LD_VAR 0 10
31822: PPUSH
31823: CALL_OW 255
31827: PPUSH
31828: LD_VAR 0 13
31832: PPUSH
31833: CALL_OW 325
31837: NOT
31838: AND
31839: IFFALSE 31868
// missile := Insert ( missile , missile + 1 , 3 ) ;
31841: LD_ADDR_VAR 0 14
31845: PUSH
31846: LD_VAR 0 14
31850: PPUSH
31851: LD_VAR 0 14
31855: PUSH
31856: LD_INT 1
31858: PLUS
31859: PPUSH
31860: LD_INT 3
31862: PPUSH
31863: CALL_OW 2
31867: ST_TO_ADDR
// if missile < 2 then
31868: LD_VAR 0 14
31872: PUSH
31873: LD_INT 2
31875: LESS
31876: IFFALSE 31880
// exit ;
31878: GO 32102
// x := GetX ( enemy ) ;
31880: LD_ADDR_VAR 0 4
31884: PUSH
31885: LD_VAR 0 10
31889: PPUSH
31890: CALL_OW 250
31894: ST_TO_ADDR
// y := GetY ( enemy ) ;
31895: LD_ADDR_VAR 0 5
31899: PUSH
31900: LD_VAR 0 10
31904: PPUSH
31905: CALL_OW 251
31909: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31910: LD_ADDR_VAR 0 6
31914: PUSH
31915: LD_VAR 0 4
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PPUSH
31924: LD_INT 1
31926: PPUSH
31927: CALL_OW 12
31931: PLUS
31932: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31933: LD_ADDR_VAR 0 7
31937: PUSH
31938: LD_VAR 0 5
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PPUSH
31947: LD_INT 1
31949: PPUSH
31950: CALL_OW 12
31954: PLUS
31955: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31956: LD_VAR 0 6
31960: PPUSH
31961: LD_VAR 0 7
31965: PPUSH
31966: CALL_OW 488
31970: NOT
31971: IFFALSE 31993
// begin _x := x ;
31973: LD_ADDR_VAR 0 6
31977: PUSH
31978: LD_VAR 0 4
31982: ST_TO_ADDR
// _y := y ;
31983: LD_ADDR_VAR 0 7
31987: PUSH
31988: LD_VAR 0 5
31992: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31993: LD_ADDR_VAR 0 3
31997: PUSH
31998: LD_INT 1
32000: PPUSH
32001: LD_VAR 0 14
32005: PPUSH
32006: CALL_OW 12
32010: ST_TO_ADDR
// case i of 1 :
32011: LD_VAR 0 3
32015: PUSH
32016: LD_INT 1
32018: DOUBLE
32019: EQUAL
32020: IFTRUE 32024
32022: GO 32041
32024: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32025: LD_VAR 0 1
32029: PPUSH
32030: LD_VAR 0 10
32034: PPUSH
32035: CALL_OW 115
32039: GO 32102
32041: LD_INT 2
32043: DOUBLE
32044: EQUAL
32045: IFTRUE 32049
32047: GO 32071
32049: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32050: LD_VAR 0 1
32054: PPUSH
32055: LD_VAR 0 6
32059: PPUSH
32060: LD_VAR 0 7
32064: PPUSH
32065: CALL_OW 153
32069: GO 32102
32071: LD_INT 3
32073: DOUBLE
32074: EQUAL
32075: IFTRUE 32079
32077: GO 32101
32079: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32080: LD_VAR 0 1
32084: PPUSH
32085: LD_VAR 0 6
32089: PPUSH
32090: LD_VAR 0 7
32094: PPUSH
32095: CALL_OW 154
32099: GO 32102
32101: POP
// end ;
32102: LD_VAR 0 2
32106: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32107: LD_INT 0
32109: PPUSH
32110: PPUSH
32111: PPUSH
32112: PPUSH
32113: PPUSH
32114: PPUSH
// if not unit or not building then
32115: LD_VAR 0 1
32119: NOT
32120: PUSH
32121: LD_VAR 0 2
32125: NOT
32126: OR
32127: IFFALSE 32131
// exit ;
32129: GO 32289
// x := GetX ( building ) ;
32131: LD_ADDR_VAR 0 5
32135: PUSH
32136: LD_VAR 0 2
32140: PPUSH
32141: CALL_OW 250
32145: ST_TO_ADDR
// y := GetY ( building ) ;
32146: LD_ADDR_VAR 0 6
32150: PUSH
32151: LD_VAR 0 2
32155: PPUSH
32156: CALL_OW 251
32160: ST_TO_ADDR
// for i = 0 to 5 do
32161: LD_ADDR_VAR 0 4
32165: PUSH
32166: DOUBLE
32167: LD_INT 0
32169: DEC
32170: ST_TO_ADDR
32171: LD_INT 5
32173: PUSH
32174: FOR_TO
32175: IFFALSE 32287
// begin _x := ShiftX ( x , i , 3 ) ;
32177: LD_ADDR_VAR 0 7
32181: PUSH
32182: LD_VAR 0 5
32186: PPUSH
32187: LD_VAR 0 4
32191: PPUSH
32192: LD_INT 3
32194: PPUSH
32195: CALL_OW 272
32199: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32200: LD_ADDR_VAR 0 8
32204: PUSH
32205: LD_VAR 0 6
32209: PPUSH
32210: LD_VAR 0 4
32214: PPUSH
32215: LD_INT 3
32217: PPUSH
32218: CALL_OW 273
32222: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32223: LD_VAR 0 7
32227: PPUSH
32228: LD_VAR 0 8
32232: PPUSH
32233: CALL_OW 488
32237: NOT
32238: IFFALSE 32242
// continue ;
32240: GO 32174
// if HexInfo ( _x , _y ) = 0 then
32242: LD_VAR 0 7
32246: PPUSH
32247: LD_VAR 0 8
32251: PPUSH
32252: CALL_OW 428
32256: PUSH
32257: LD_INT 0
32259: EQUAL
32260: IFFALSE 32285
// begin ComMoveXY ( unit , _x , _y ) ;
32262: LD_VAR 0 1
32266: PPUSH
32267: LD_VAR 0 7
32271: PPUSH
32272: LD_VAR 0 8
32276: PPUSH
32277: CALL_OW 111
// exit ;
32281: POP
32282: POP
32283: GO 32289
// end ; end ;
32285: GO 32174
32287: POP
32288: POP
// end ;
32289: LD_VAR 0 3
32293: RET
// export function ScanBase ( side , base_area ) ; begin
32294: LD_INT 0
32296: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32297: LD_ADDR_VAR 0 3
32301: PUSH
32302: LD_VAR 0 2
32306: PPUSH
32307: LD_INT 81
32309: PUSH
32310: LD_VAR 0 1
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PPUSH
32319: CALL_OW 70
32323: ST_TO_ADDR
// end ;
32324: LD_VAR 0 3
32328: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32329: LD_INT 0
32331: PPUSH
32332: PPUSH
32333: PPUSH
32334: PPUSH
// result := false ;
32335: LD_ADDR_VAR 0 2
32339: PUSH
32340: LD_INT 0
32342: ST_TO_ADDR
// side := GetSide ( unit ) ;
32343: LD_ADDR_VAR 0 3
32347: PUSH
32348: LD_VAR 0 1
32352: PPUSH
32353: CALL_OW 255
32357: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32358: LD_ADDR_VAR 0 4
32362: PUSH
32363: LD_VAR 0 1
32367: PPUSH
32368: CALL_OW 248
32372: ST_TO_ADDR
// case nat of 1 :
32373: LD_VAR 0 4
32377: PUSH
32378: LD_INT 1
32380: DOUBLE
32381: EQUAL
32382: IFTRUE 32386
32384: GO 32397
32386: POP
// tech := tech_lassight ; 2 :
32387: LD_ADDR_VAR 0 5
32391: PUSH
32392: LD_INT 12
32394: ST_TO_ADDR
32395: GO 32436
32397: LD_INT 2
32399: DOUBLE
32400: EQUAL
32401: IFTRUE 32405
32403: GO 32416
32405: POP
// tech := tech_mortar ; 3 :
32406: LD_ADDR_VAR 0 5
32410: PUSH
32411: LD_INT 41
32413: ST_TO_ADDR
32414: GO 32436
32416: LD_INT 3
32418: DOUBLE
32419: EQUAL
32420: IFTRUE 32424
32422: GO 32435
32424: POP
// tech := tech_bazooka ; end ;
32425: LD_ADDR_VAR 0 5
32429: PUSH
32430: LD_INT 44
32432: ST_TO_ADDR
32433: GO 32436
32435: POP
// if Researched ( side , tech ) then
32436: LD_VAR 0 3
32440: PPUSH
32441: LD_VAR 0 5
32445: PPUSH
32446: CALL_OW 325
32450: IFFALSE 32477
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32452: LD_ADDR_VAR 0 2
32456: PUSH
32457: LD_INT 5
32459: PUSH
32460: LD_INT 8
32462: PUSH
32463: LD_INT 9
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: PUSH
32471: LD_VAR 0 4
32475: ARRAY
32476: ST_TO_ADDR
// end ;
32477: LD_VAR 0 2
32481: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32482: LD_INT 0
32484: PPUSH
32485: PPUSH
32486: PPUSH
// if not mines then
32487: LD_VAR 0 2
32491: NOT
32492: IFFALSE 32496
// exit ;
32494: GO 32640
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32496: LD_ADDR_VAR 0 5
32500: PUSH
32501: LD_INT 81
32503: PUSH
32504: LD_VAR 0 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: LD_INT 21
32518: PUSH
32519: LD_INT 3
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PPUSH
32534: CALL_OW 69
32538: ST_TO_ADDR
// for i in mines do
32539: LD_ADDR_VAR 0 4
32543: PUSH
32544: LD_VAR 0 2
32548: PUSH
32549: FOR_IN
32550: IFFALSE 32638
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32552: LD_VAR 0 4
32556: PUSH
32557: LD_INT 1
32559: ARRAY
32560: PPUSH
32561: LD_VAR 0 4
32565: PUSH
32566: LD_INT 2
32568: ARRAY
32569: PPUSH
32570: CALL_OW 458
32574: NOT
32575: IFFALSE 32579
// continue ;
32577: GO 32549
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32579: LD_VAR 0 4
32583: PUSH
32584: LD_INT 1
32586: ARRAY
32587: PPUSH
32588: LD_VAR 0 4
32592: PUSH
32593: LD_INT 2
32595: ARRAY
32596: PPUSH
32597: CALL_OW 428
32601: PUSH
32602: LD_VAR 0 5
32606: IN
32607: IFFALSE 32636
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32609: LD_VAR 0 4
32613: PUSH
32614: LD_INT 1
32616: ARRAY
32617: PPUSH
32618: LD_VAR 0 4
32622: PUSH
32623: LD_INT 2
32625: ARRAY
32626: PPUSH
32627: LD_VAR 0 1
32631: PPUSH
32632: CALL_OW 456
// end ;
32636: GO 32549
32638: POP
32639: POP
// end ;
32640: LD_VAR 0 3
32644: RET
// export function Count ( array ) ; var i ; begin
32645: LD_INT 0
32647: PPUSH
32648: PPUSH
// result := 0 ;
32649: LD_ADDR_VAR 0 2
32653: PUSH
32654: LD_INT 0
32656: ST_TO_ADDR
// for i in array do
32657: LD_ADDR_VAR 0 3
32661: PUSH
32662: LD_VAR 0 1
32666: PUSH
32667: FOR_IN
32668: IFFALSE 32692
// if i then
32670: LD_VAR 0 3
32674: IFFALSE 32690
// result := result + 1 ;
32676: LD_ADDR_VAR 0 2
32680: PUSH
32681: LD_VAR 0 2
32685: PUSH
32686: LD_INT 1
32688: PLUS
32689: ST_TO_ADDR
32690: GO 32667
32692: POP
32693: POP
// end ;
32694: LD_VAR 0 2
32698: RET
// export function IsEmpty ( building ) ; begin
32699: LD_INT 0
32701: PPUSH
// if not building then
32702: LD_VAR 0 1
32706: NOT
32707: IFFALSE 32711
// exit ;
32709: GO 32754
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32711: LD_ADDR_VAR 0 2
32715: PUSH
32716: LD_VAR 0 1
32720: PUSH
32721: LD_INT 22
32723: PUSH
32724: LD_VAR 0 1
32728: PPUSH
32729: CALL_OW 255
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 58
32740: PUSH
32741: EMPTY
32742: LIST
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PPUSH
32748: CALL_OW 69
32752: IN
32753: ST_TO_ADDR
// end ;
32754: LD_VAR 0 2
32758: RET
// export function IsNotFull ( building ) ; begin
32759: LD_INT 0
32761: PPUSH
// if not building then
32762: LD_VAR 0 1
32766: NOT
32767: IFFALSE 32771
// exit ;
32769: GO 32790
// result := UnitsInside ( building ) < 6 ;
32771: LD_ADDR_VAR 0 2
32775: PUSH
32776: LD_VAR 0 1
32780: PPUSH
32781: CALL_OW 313
32785: PUSH
32786: LD_INT 6
32788: LESS
32789: ST_TO_ADDR
// end ;
32790: LD_VAR 0 2
32794: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32795: LD_INT 0
32797: PPUSH
32798: PPUSH
32799: PPUSH
32800: PPUSH
// tmp := [ ] ;
32801: LD_ADDR_VAR 0 3
32805: PUSH
32806: EMPTY
32807: ST_TO_ADDR
// list := [ ] ;
32808: LD_ADDR_VAR 0 5
32812: PUSH
32813: EMPTY
32814: ST_TO_ADDR
// for i = 16 to 25 do
32815: LD_ADDR_VAR 0 4
32819: PUSH
32820: DOUBLE
32821: LD_INT 16
32823: DEC
32824: ST_TO_ADDR
32825: LD_INT 25
32827: PUSH
32828: FOR_TO
32829: IFFALSE 32902
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32831: LD_ADDR_VAR 0 3
32835: PUSH
32836: LD_VAR 0 3
32840: PUSH
32841: LD_INT 22
32843: PUSH
32844: LD_VAR 0 1
32848: PPUSH
32849: CALL_OW 255
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 91
32860: PUSH
32861: LD_VAR 0 1
32865: PUSH
32866: LD_INT 6
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 30
32876: PUSH
32877: LD_VAR 0 4
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: PUSH
32891: EMPTY
32892: LIST
32893: PPUSH
32894: CALL_OW 69
32898: ADD
32899: ST_TO_ADDR
32900: GO 32828
32902: POP
32903: POP
// for i = 1 to tmp do
32904: LD_ADDR_VAR 0 4
32908: PUSH
32909: DOUBLE
32910: LD_INT 1
32912: DEC
32913: ST_TO_ADDR
32914: LD_VAR 0 3
32918: PUSH
32919: FOR_TO
32920: IFFALSE 33008
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32922: LD_ADDR_VAR 0 5
32926: PUSH
32927: LD_VAR 0 5
32931: PUSH
32932: LD_VAR 0 3
32936: PUSH
32937: LD_VAR 0 4
32941: ARRAY
32942: PPUSH
32943: CALL_OW 266
32947: PUSH
32948: LD_VAR 0 3
32952: PUSH
32953: LD_VAR 0 4
32957: ARRAY
32958: PPUSH
32959: CALL_OW 250
32963: PUSH
32964: LD_VAR 0 3
32968: PUSH
32969: LD_VAR 0 4
32973: ARRAY
32974: PPUSH
32975: CALL_OW 251
32979: PUSH
32980: LD_VAR 0 3
32984: PUSH
32985: LD_VAR 0 4
32989: ARRAY
32990: PPUSH
32991: CALL_OW 254
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: PUSH
33002: EMPTY
33003: LIST
33004: ADD
33005: ST_TO_ADDR
33006: GO 32919
33008: POP
33009: POP
// result := list ;
33010: LD_ADDR_VAR 0 2
33014: PUSH
33015: LD_VAR 0 5
33019: ST_TO_ADDR
// end ;
33020: LD_VAR 0 2
33024: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33025: LD_INT 0
33027: PPUSH
33028: PPUSH
33029: PPUSH
33030: PPUSH
33031: PPUSH
33032: PPUSH
33033: PPUSH
// if not factory then
33034: LD_VAR 0 1
33038: NOT
33039: IFFALSE 33043
// exit ;
33041: GO 33636
// if control = control_apeman then
33043: LD_VAR 0 4
33047: PUSH
33048: LD_INT 5
33050: EQUAL
33051: IFFALSE 33160
// begin tmp := UnitsInside ( factory ) ;
33053: LD_ADDR_VAR 0 8
33057: PUSH
33058: LD_VAR 0 1
33062: PPUSH
33063: CALL_OW 313
33067: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33068: LD_VAR 0 8
33072: PPUSH
33073: LD_INT 25
33075: PUSH
33076: LD_INT 12
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PPUSH
33083: CALL_OW 72
33087: NOT
33088: IFFALSE 33098
// control := control_manual ;
33090: LD_ADDR_VAR 0 4
33094: PUSH
33095: LD_INT 1
33097: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33098: LD_ADDR_VAR 0 8
33102: PUSH
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL 32795 0 1
33112: ST_TO_ADDR
// if tmp then
33113: LD_VAR 0 8
33117: IFFALSE 33160
// begin for i in tmp do
33119: LD_ADDR_VAR 0 7
33123: PUSH
33124: LD_VAR 0 8
33128: PUSH
33129: FOR_IN
33130: IFFALSE 33158
// if i [ 1 ] = b_ext_radio then
33132: LD_VAR 0 7
33136: PUSH
33137: LD_INT 1
33139: ARRAY
33140: PUSH
33141: LD_INT 22
33143: EQUAL
33144: IFFALSE 33156
// begin control := control_remote ;
33146: LD_ADDR_VAR 0 4
33150: PUSH
33151: LD_INT 2
33153: ST_TO_ADDR
// break ;
33154: GO 33158
// end ;
33156: GO 33129
33158: POP
33159: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33160: LD_VAR 0 1
33164: PPUSH
33165: LD_VAR 0 2
33169: PPUSH
33170: LD_VAR 0 3
33174: PPUSH
33175: LD_VAR 0 4
33179: PPUSH
33180: LD_VAR 0 5
33184: PPUSH
33185: CALL_OW 448
33189: IFFALSE 33224
// begin result := [ chassis , engine , control , weapon ] ;
33191: LD_ADDR_VAR 0 6
33195: PUSH
33196: LD_VAR 0 2
33200: PUSH
33201: LD_VAR 0 3
33205: PUSH
33206: LD_VAR 0 4
33210: PUSH
33211: LD_VAR 0 5
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: ST_TO_ADDR
// exit ;
33222: GO 33636
// end ; _chassis := AvailableChassisList ( factory ) ;
33224: LD_ADDR_VAR 0 9
33228: PUSH
33229: LD_VAR 0 1
33233: PPUSH
33234: CALL_OW 475
33238: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33239: LD_ADDR_VAR 0 11
33243: PUSH
33244: LD_VAR 0 1
33248: PPUSH
33249: CALL_OW 476
33253: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33254: LD_ADDR_VAR 0 12
33258: PUSH
33259: LD_VAR 0 1
33263: PPUSH
33264: CALL_OW 477
33268: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33269: LD_ADDR_VAR 0 10
33273: PUSH
33274: LD_VAR 0 1
33278: PPUSH
33279: CALL_OW 478
33283: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33284: LD_VAR 0 9
33288: NOT
33289: PUSH
33290: LD_VAR 0 11
33294: NOT
33295: OR
33296: PUSH
33297: LD_VAR 0 12
33301: NOT
33302: OR
33303: PUSH
33304: LD_VAR 0 10
33308: NOT
33309: OR
33310: IFFALSE 33345
// begin result := [ chassis , engine , control , weapon ] ;
33312: LD_ADDR_VAR 0 6
33316: PUSH
33317: LD_VAR 0 2
33321: PUSH
33322: LD_VAR 0 3
33326: PUSH
33327: LD_VAR 0 4
33331: PUSH
33332: LD_VAR 0 5
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: ST_TO_ADDR
// exit ;
33343: GO 33636
// end ; if not chassis in _chassis then
33345: LD_VAR 0 2
33349: PUSH
33350: LD_VAR 0 9
33354: IN
33355: NOT
33356: IFFALSE 33382
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33358: LD_ADDR_VAR 0 2
33362: PUSH
33363: LD_VAR 0 9
33367: PUSH
33368: LD_INT 1
33370: PPUSH
33371: LD_VAR 0 9
33375: PPUSH
33376: CALL_OW 12
33380: ARRAY
33381: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33382: LD_VAR 0 2
33386: PPUSH
33387: LD_VAR 0 3
33391: PPUSH
33392: CALL 33641 0 2
33396: NOT
33397: IFFALSE 33456
// repeat engine := _engine [ 1 ] ;
33399: LD_ADDR_VAR 0 3
33403: PUSH
33404: LD_VAR 0 11
33408: PUSH
33409: LD_INT 1
33411: ARRAY
33412: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33413: LD_ADDR_VAR 0 11
33417: PUSH
33418: LD_VAR 0 11
33422: PPUSH
33423: LD_INT 1
33425: PPUSH
33426: CALL_OW 3
33430: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33431: LD_VAR 0 2
33435: PPUSH
33436: LD_VAR 0 3
33440: PPUSH
33441: CALL 33641 0 2
33445: PUSH
33446: LD_VAR 0 11
33450: PUSH
33451: EMPTY
33452: EQUAL
33453: OR
33454: IFFALSE 33399
// if not control in _control then
33456: LD_VAR 0 4
33460: PUSH
33461: LD_VAR 0 12
33465: IN
33466: NOT
33467: IFFALSE 33493
// control := _control [ rand ( 1 , _control ) ] ;
33469: LD_ADDR_VAR 0 4
33473: PUSH
33474: LD_VAR 0 12
33478: PUSH
33479: LD_INT 1
33481: PPUSH
33482: LD_VAR 0 12
33486: PPUSH
33487: CALL_OW 12
33491: ARRAY
33492: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33493: LD_VAR 0 2
33497: PPUSH
33498: LD_VAR 0 5
33502: PPUSH
33503: CALL 33861 0 2
33507: NOT
33508: IFFALSE 33567
// repeat weapon := _weapon [ 1 ] ;
33510: LD_ADDR_VAR 0 5
33514: PUSH
33515: LD_VAR 0 10
33519: PUSH
33520: LD_INT 1
33522: ARRAY
33523: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33524: LD_ADDR_VAR 0 10
33528: PUSH
33529: LD_VAR 0 10
33533: PPUSH
33534: LD_INT 1
33536: PPUSH
33537: CALL_OW 3
33541: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33542: LD_VAR 0 2
33546: PPUSH
33547: LD_VAR 0 5
33551: PPUSH
33552: CALL 33861 0 2
33556: PUSH
33557: LD_VAR 0 10
33561: PUSH
33562: EMPTY
33563: EQUAL
33564: OR
33565: IFFALSE 33510
// result := [ ] ;
33567: LD_ADDR_VAR 0 6
33571: PUSH
33572: EMPTY
33573: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33574: LD_VAR 0 1
33578: PPUSH
33579: LD_VAR 0 2
33583: PPUSH
33584: LD_VAR 0 3
33588: PPUSH
33589: LD_VAR 0 4
33593: PPUSH
33594: LD_VAR 0 5
33598: PPUSH
33599: CALL_OW 448
33603: IFFALSE 33636
// result := [ chassis , engine , control , weapon ] ;
33605: LD_ADDR_VAR 0 6
33609: PUSH
33610: LD_VAR 0 2
33614: PUSH
33615: LD_VAR 0 3
33619: PUSH
33620: LD_VAR 0 4
33624: PUSH
33625: LD_VAR 0 5
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: ST_TO_ADDR
// end ;
33636: LD_VAR 0 6
33640: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33641: LD_INT 0
33643: PPUSH
// if not chassis or not engine then
33644: LD_VAR 0 1
33648: NOT
33649: PUSH
33650: LD_VAR 0 2
33654: NOT
33655: OR
33656: IFFALSE 33660
// exit ;
33658: GO 33856
// case engine of engine_solar :
33660: LD_VAR 0 2
33664: PUSH
33665: LD_INT 2
33667: DOUBLE
33668: EQUAL
33669: IFTRUE 33673
33671: GO 33711
33673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33674: LD_ADDR_VAR 0 3
33678: PUSH
33679: LD_INT 11
33681: PUSH
33682: LD_INT 12
33684: PUSH
33685: LD_INT 13
33687: PUSH
33688: LD_INT 14
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: ST_TO_ADDR
33709: GO 33840
33711: LD_INT 1
33713: DOUBLE
33714: EQUAL
33715: IFTRUE 33719
33717: GO 33781
33719: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33720: LD_ADDR_VAR 0 3
33724: PUSH
33725: LD_INT 11
33727: PUSH
33728: LD_INT 12
33730: PUSH
33731: LD_INT 13
33733: PUSH
33734: LD_INT 14
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: LD_INT 2
33742: PUSH
33743: LD_INT 3
33745: PUSH
33746: LD_INT 4
33748: PUSH
33749: LD_INT 5
33751: PUSH
33752: LD_INT 21
33754: PUSH
33755: LD_INT 23
33757: PUSH
33758: LD_INT 22
33760: PUSH
33761: LD_INT 24
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: ST_TO_ADDR
33779: GO 33840
33781: LD_INT 3
33783: DOUBLE
33784: EQUAL
33785: IFTRUE 33789
33787: GO 33839
33789: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33790: LD_ADDR_VAR 0 3
33794: PUSH
33795: LD_INT 13
33797: PUSH
33798: LD_INT 14
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 3
33806: PUSH
33807: LD_INT 4
33809: PUSH
33810: LD_INT 5
33812: PUSH
33813: LD_INT 21
33815: PUSH
33816: LD_INT 22
33818: PUSH
33819: LD_INT 23
33821: PUSH
33822: LD_INT 24
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: ST_TO_ADDR
33837: GO 33840
33839: POP
// result := ( chassis in result ) ;
33840: LD_ADDR_VAR 0 3
33844: PUSH
33845: LD_VAR 0 1
33849: PUSH
33850: LD_VAR 0 3
33854: IN
33855: ST_TO_ADDR
// end ;
33856: LD_VAR 0 3
33860: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33861: LD_INT 0
33863: PPUSH
// if not chassis or not weapon then
33864: LD_VAR 0 1
33868: NOT
33869: PUSH
33870: LD_VAR 0 2
33874: NOT
33875: OR
33876: IFFALSE 33880
// exit ;
33878: GO 34942
// case weapon of us_machine_gun :
33880: LD_VAR 0 2
33884: PUSH
33885: LD_INT 2
33887: DOUBLE
33888: EQUAL
33889: IFTRUE 33893
33891: GO 33923
33893: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33894: LD_ADDR_VAR 0 3
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: LD_INT 3
33907: PUSH
33908: LD_INT 4
33910: PUSH
33911: LD_INT 5
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: ST_TO_ADDR
33921: GO 34926
33923: LD_INT 3
33925: DOUBLE
33926: EQUAL
33927: IFTRUE 33931
33929: GO 33961
33931: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33932: LD_ADDR_VAR 0 3
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: LD_INT 3
33945: PUSH
33946: LD_INT 4
33948: PUSH
33949: LD_INT 5
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: ST_TO_ADDR
33959: GO 34926
33961: LD_INT 11
33963: DOUBLE
33964: EQUAL
33965: IFTRUE 33969
33967: GO 33999
33969: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33970: LD_ADDR_VAR 0 3
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: LD_INT 3
33983: PUSH
33984: LD_INT 4
33986: PUSH
33987: LD_INT 5
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: ST_TO_ADDR
33997: GO 34926
33999: LD_INT 4
34001: DOUBLE
34002: EQUAL
34003: IFTRUE 34007
34005: GO 34033
34007: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34008: LD_ADDR_VAR 0 3
34012: PUSH
34013: LD_INT 2
34015: PUSH
34016: LD_INT 3
34018: PUSH
34019: LD_INT 4
34021: PUSH
34022: LD_INT 5
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: ST_TO_ADDR
34031: GO 34926
34033: LD_INT 5
34035: DOUBLE
34036: EQUAL
34037: IFTRUE 34041
34039: GO 34067
34041: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34042: LD_ADDR_VAR 0 3
34046: PUSH
34047: LD_INT 2
34049: PUSH
34050: LD_INT 3
34052: PUSH
34053: LD_INT 4
34055: PUSH
34056: LD_INT 5
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: ST_TO_ADDR
34065: GO 34926
34067: LD_INT 9
34069: DOUBLE
34070: EQUAL
34071: IFTRUE 34075
34073: GO 34101
34075: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34076: LD_ADDR_VAR 0 3
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: LD_INT 3
34086: PUSH
34087: LD_INT 4
34089: PUSH
34090: LD_INT 5
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: ST_TO_ADDR
34099: GO 34926
34101: LD_INT 7
34103: DOUBLE
34104: EQUAL
34105: IFTRUE 34109
34107: GO 34135
34109: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34110: LD_ADDR_VAR 0 3
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: LD_INT 3
34120: PUSH
34121: LD_INT 4
34123: PUSH
34124: LD_INT 5
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: ST_TO_ADDR
34133: GO 34926
34135: LD_INT 12
34137: DOUBLE
34138: EQUAL
34139: IFTRUE 34143
34141: GO 34169
34143: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34144: LD_ADDR_VAR 0 3
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 3
34154: PUSH
34155: LD_INT 4
34157: PUSH
34158: LD_INT 5
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: ST_TO_ADDR
34167: GO 34926
34169: LD_INT 13
34171: DOUBLE
34172: EQUAL
34173: IFTRUE 34177
34175: GO 34203
34177: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34178: LD_ADDR_VAR 0 3
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: LD_INT 3
34188: PUSH
34189: LD_INT 4
34191: PUSH
34192: LD_INT 5
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: ST_TO_ADDR
34201: GO 34926
34203: LD_INT 14
34205: DOUBLE
34206: EQUAL
34207: IFTRUE 34211
34209: GO 34229
34211: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34212: LD_ADDR_VAR 0 3
34216: PUSH
34217: LD_INT 4
34219: PUSH
34220: LD_INT 5
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: ST_TO_ADDR
34227: GO 34926
34229: LD_INT 6
34231: DOUBLE
34232: EQUAL
34233: IFTRUE 34237
34235: GO 34255
34237: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34238: LD_ADDR_VAR 0 3
34242: PUSH
34243: LD_INT 4
34245: PUSH
34246: LD_INT 5
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: ST_TO_ADDR
34253: GO 34926
34255: LD_INT 10
34257: DOUBLE
34258: EQUAL
34259: IFTRUE 34263
34261: GO 34281
34263: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34264: LD_ADDR_VAR 0 3
34268: PUSH
34269: LD_INT 4
34271: PUSH
34272: LD_INT 5
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: ST_TO_ADDR
34279: GO 34926
34281: LD_INT 22
34283: DOUBLE
34284: EQUAL
34285: IFTRUE 34289
34287: GO 34315
34289: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34290: LD_ADDR_VAR 0 3
34294: PUSH
34295: LD_INT 11
34297: PUSH
34298: LD_INT 12
34300: PUSH
34301: LD_INT 13
34303: PUSH
34304: LD_INT 14
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: ST_TO_ADDR
34313: GO 34926
34315: LD_INT 23
34317: DOUBLE
34318: EQUAL
34319: IFTRUE 34323
34321: GO 34349
34323: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34324: LD_ADDR_VAR 0 3
34328: PUSH
34329: LD_INT 11
34331: PUSH
34332: LD_INT 12
34334: PUSH
34335: LD_INT 13
34337: PUSH
34338: LD_INT 14
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: ST_TO_ADDR
34347: GO 34926
34349: LD_INT 24
34351: DOUBLE
34352: EQUAL
34353: IFTRUE 34357
34355: GO 34383
34357: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34358: LD_ADDR_VAR 0 3
34362: PUSH
34363: LD_INT 11
34365: PUSH
34366: LD_INT 12
34368: PUSH
34369: LD_INT 13
34371: PUSH
34372: LD_INT 14
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: ST_TO_ADDR
34381: GO 34926
34383: LD_INT 30
34385: DOUBLE
34386: EQUAL
34387: IFTRUE 34391
34389: GO 34417
34391: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34392: LD_ADDR_VAR 0 3
34396: PUSH
34397: LD_INT 11
34399: PUSH
34400: LD_INT 12
34402: PUSH
34403: LD_INT 13
34405: PUSH
34406: LD_INT 14
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: ST_TO_ADDR
34415: GO 34926
34417: LD_INT 25
34419: DOUBLE
34420: EQUAL
34421: IFTRUE 34425
34423: GO 34443
34425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34426: LD_ADDR_VAR 0 3
34430: PUSH
34431: LD_INT 13
34433: PUSH
34434: LD_INT 14
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: ST_TO_ADDR
34441: GO 34926
34443: LD_INT 27
34445: DOUBLE
34446: EQUAL
34447: IFTRUE 34451
34449: GO 34469
34451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_INT 13
34459: PUSH
34460: LD_INT 14
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: ST_TO_ADDR
34467: GO 34926
34469: LD_EXP 26
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34479
34477: GO 34505
34479: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34480: LD_ADDR_VAR 0 3
34484: PUSH
34485: LD_INT 11
34487: PUSH
34488: LD_INT 12
34490: PUSH
34491: LD_INT 13
34493: PUSH
34494: LD_INT 14
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: ST_TO_ADDR
34503: GO 34926
34505: LD_INT 28
34507: DOUBLE
34508: EQUAL
34509: IFTRUE 34513
34511: GO 34531
34513: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34514: LD_ADDR_VAR 0 3
34518: PUSH
34519: LD_INT 13
34521: PUSH
34522: LD_INT 14
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: ST_TO_ADDR
34529: GO 34926
34531: LD_INT 29
34533: DOUBLE
34534: EQUAL
34535: IFTRUE 34539
34537: GO 34557
34539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34540: LD_ADDR_VAR 0 3
34544: PUSH
34545: LD_INT 13
34547: PUSH
34548: LD_INT 14
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: ST_TO_ADDR
34555: GO 34926
34557: LD_INT 31
34559: DOUBLE
34560: EQUAL
34561: IFTRUE 34565
34563: GO 34583
34565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34566: LD_ADDR_VAR 0 3
34570: PUSH
34571: LD_INT 13
34573: PUSH
34574: LD_INT 14
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: ST_TO_ADDR
34581: GO 34926
34583: LD_INT 26
34585: DOUBLE
34586: EQUAL
34587: IFTRUE 34591
34589: GO 34609
34591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34592: LD_ADDR_VAR 0 3
34596: PUSH
34597: LD_INT 13
34599: PUSH
34600: LD_INT 14
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: ST_TO_ADDR
34607: GO 34926
34609: LD_INT 42
34611: DOUBLE
34612: EQUAL
34613: IFTRUE 34617
34615: GO 34643
34617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34618: LD_ADDR_VAR 0 3
34622: PUSH
34623: LD_INT 21
34625: PUSH
34626: LD_INT 22
34628: PUSH
34629: LD_INT 23
34631: PUSH
34632: LD_INT 24
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: ST_TO_ADDR
34641: GO 34926
34643: LD_INT 43
34645: DOUBLE
34646: EQUAL
34647: IFTRUE 34651
34649: GO 34677
34651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34652: LD_ADDR_VAR 0 3
34656: PUSH
34657: LD_INT 21
34659: PUSH
34660: LD_INT 22
34662: PUSH
34663: LD_INT 23
34665: PUSH
34666: LD_INT 24
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: ST_TO_ADDR
34675: GO 34926
34677: LD_INT 44
34679: DOUBLE
34680: EQUAL
34681: IFTRUE 34685
34683: GO 34711
34685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34686: LD_ADDR_VAR 0 3
34690: PUSH
34691: LD_INT 21
34693: PUSH
34694: LD_INT 22
34696: PUSH
34697: LD_INT 23
34699: PUSH
34700: LD_INT 24
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: ST_TO_ADDR
34709: GO 34926
34711: LD_INT 45
34713: DOUBLE
34714: EQUAL
34715: IFTRUE 34719
34717: GO 34745
34719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34720: LD_ADDR_VAR 0 3
34724: PUSH
34725: LD_INT 21
34727: PUSH
34728: LD_INT 22
34730: PUSH
34731: LD_INT 23
34733: PUSH
34734: LD_INT 24
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: ST_TO_ADDR
34743: GO 34926
34745: LD_INT 49
34747: DOUBLE
34748: EQUAL
34749: IFTRUE 34753
34751: GO 34779
34753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_INT 21
34761: PUSH
34762: LD_INT 22
34764: PUSH
34765: LD_INT 23
34767: PUSH
34768: LD_INT 24
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: ST_TO_ADDR
34777: GO 34926
34779: LD_INT 51
34781: DOUBLE
34782: EQUAL
34783: IFTRUE 34787
34785: GO 34813
34787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34788: LD_ADDR_VAR 0 3
34792: PUSH
34793: LD_INT 21
34795: PUSH
34796: LD_INT 22
34798: PUSH
34799: LD_INT 23
34801: PUSH
34802: LD_INT 24
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: ST_TO_ADDR
34811: GO 34926
34813: LD_INT 52
34815: DOUBLE
34816: EQUAL
34817: IFTRUE 34821
34819: GO 34847
34821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34822: LD_ADDR_VAR 0 3
34826: PUSH
34827: LD_INT 21
34829: PUSH
34830: LD_INT 22
34832: PUSH
34833: LD_INT 23
34835: PUSH
34836: LD_INT 24
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: ST_TO_ADDR
34845: GO 34926
34847: LD_INT 53
34849: DOUBLE
34850: EQUAL
34851: IFTRUE 34855
34853: GO 34873
34855: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34856: LD_ADDR_VAR 0 3
34860: PUSH
34861: LD_INT 23
34863: PUSH
34864: LD_INT 24
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: ST_TO_ADDR
34871: GO 34926
34873: LD_INT 46
34875: DOUBLE
34876: EQUAL
34877: IFTRUE 34881
34879: GO 34899
34881: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34882: LD_ADDR_VAR 0 3
34886: PUSH
34887: LD_INT 23
34889: PUSH
34890: LD_INT 24
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: ST_TO_ADDR
34897: GO 34926
34899: LD_INT 47
34901: DOUBLE
34902: EQUAL
34903: IFTRUE 34907
34905: GO 34925
34907: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34908: LD_ADDR_VAR 0 3
34912: PUSH
34913: LD_INT 23
34915: PUSH
34916: LD_INT 24
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: ST_TO_ADDR
34923: GO 34926
34925: POP
// result := ( chassis in result ) ;
34926: LD_ADDR_VAR 0 3
34930: PUSH
34931: LD_VAR 0 1
34935: PUSH
34936: LD_VAR 0 3
34940: IN
34941: ST_TO_ADDR
// end ;
34942: LD_VAR 0 3
34946: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
// result := array ;
34956: LD_ADDR_VAR 0 5
34960: PUSH
34961: LD_VAR 0 1
34965: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34966: LD_VAR 0 1
34970: NOT
34971: PUSH
34972: LD_VAR 0 2
34976: NOT
34977: OR
34978: PUSH
34979: LD_VAR 0 3
34983: NOT
34984: OR
34985: PUSH
34986: LD_VAR 0 2
34990: PUSH
34991: LD_VAR 0 1
34995: GREATER
34996: OR
34997: PUSH
34998: LD_VAR 0 3
35002: PUSH
35003: LD_VAR 0 1
35007: GREATER
35008: OR
35009: IFFALSE 35013
// exit ;
35011: GO 35309
// if direction then
35013: LD_VAR 0 4
35017: IFFALSE 35081
// begin d := 1 ;
35019: LD_ADDR_VAR 0 9
35023: PUSH
35024: LD_INT 1
35026: ST_TO_ADDR
// if i_from > i_to then
35027: LD_VAR 0 2
35031: PUSH
35032: LD_VAR 0 3
35036: GREATER
35037: IFFALSE 35063
// length := ( array - i_from ) + i_to else
35039: LD_ADDR_VAR 0 11
35043: PUSH
35044: LD_VAR 0 1
35048: PUSH
35049: LD_VAR 0 2
35053: MINUS
35054: PUSH
35055: LD_VAR 0 3
35059: PLUS
35060: ST_TO_ADDR
35061: GO 35079
// length := i_to - i_from ;
35063: LD_ADDR_VAR 0 11
35067: PUSH
35068: LD_VAR 0 3
35072: PUSH
35073: LD_VAR 0 2
35077: MINUS
35078: ST_TO_ADDR
// end else
35079: GO 35142
// begin d := - 1 ;
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: ST_TO_ADDR
// if i_from > i_to then
35090: LD_VAR 0 2
35094: PUSH
35095: LD_VAR 0 3
35099: GREATER
35100: IFFALSE 35120
// length := i_from - i_to else
35102: LD_ADDR_VAR 0 11
35106: PUSH
35107: LD_VAR 0 2
35111: PUSH
35112: LD_VAR 0 3
35116: MINUS
35117: ST_TO_ADDR
35118: GO 35142
// length := ( array - i_to ) + i_from ;
35120: LD_ADDR_VAR 0 11
35124: PUSH
35125: LD_VAR 0 1
35129: PUSH
35130: LD_VAR 0 3
35134: MINUS
35135: PUSH
35136: LD_VAR 0 2
35140: PLUS
35141: ST_TO_ADDR
// end ; if not length then
35142: LD_VAR 0 11
35146: NOT
35147: IFFALSE 35151
// exit ;
35149: GO 35309
// tmp := array ;
35151: LD_ADDR_VAR 0 10
35155: PUSH
35156: LD_VAR 0 1
35160: ST_TO_ADDR
// for i = 1 to length do
35161: LD_ADDR_VAR 0 6
35165: PUSH
35166: DOUBLE
35167: LD_INT 1
35169: DEC
35170: ST_TO_ADDR
35171: LD_VAR 0 11
35175: PUSH
35176: FOR_TO
35177: IFFALSE 35297
// begin for j = 1 to array do
35179: LD_ADDR_VAR 0 7
35183: PUSH
35184: DOUBLE
35185: LD_INT 1
35187: DEC
35188: ST_TO_ADDR
35189: LD_VAR 0 1
35193: PUSH
35194: FOR_TO
35195: IFFALSE 35283
// begin k := j + d ;
35197: LD_ADDR_VAR 0 8
35201: PUSH
35202: LD_VAR 0 7
35206: PUSH
35207: LD_VAR 0 9
35211: PLUS
35212: ST_TO_ADDR
// if k > array then
35213: LD_VAR 0 8
35217: PUSH
35218: LD_VAR 0 1
35222: GREATER
35223: IFFALSE 35233
// k := 1 ;
35225: LD_ADDR_VAR 0 8
35229: PUSH
35230: LD_INT 1
35232: ST_TO_ADDR
// if not k then
35233: LD_VAR 0 8
35237: NOT
35238: IFFALSE 35250
// k := array ;
35240: LD_ADDR_VAR 0 8
35244: PUSH
35245: LD_VAR 0 1
35249: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35250: LD_ADDR_VAR 0 10
35254: PUSH
35255: LD_VAR 0 10
35259: PPUSH
35260: LD_VAR 0 8
35264: PPUSH
35265: LD_VAR 0 1
35269: PUSH
35270: LD_VAR 0 7
35274: ARRAY
35275: PPUSH
35276: CALL_OW 1
35280: ST_TO_ADDR
// end ;
35281: GO 35194
35283: POP
35284: POP
// array := tmp ;
35285: LD_ADDR_VAR 0 1
35289: PUSH
35290: LD_VAR 0 10
35294: ST_TO_ADDR
// end ;
35295: GO 35176
35297: POP
35298: POP
// result := array ;
35299: LD_ADDR_VAR 0 5
35303: PUSH
35304: LD_VAR 0 1
35308: ST_TO_ADDR
// end ;
35309: LD_VAR 0 5
35313: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35314: LD_INT 0
35316: PPUSH
35317: PPUSH
// result := 0 ;
35318: LD_ADDR_VAR 0 3
35322: PUSH
35323: LD_INT 0
35325: ST_TO_ADDR
// if not array or not value in array then
35326: LD_VAR 0 1
35330: NOT
35331: PUSH
35332: LD_VAR 0 2
35336: PUSH
35337: LD_VAR 0 1
35341: IN
35342: NOT
35343: OR
35344: IFFALSE 35348
// exit ;
35346: GO 35402
// for i = 1 to array do
35348: LD_ADDR_VAR 0 4
35352: PUSH
35353: DOUBLE
35354: LD_INT 1
35356: DEC
35357: ST_TO_ADDR
35358: LD_VAR 0 1
35362: PUSH
35363: FOR_TO
35364: IFFALSE 35400
// if value = array [ i ] then
35366: LD_VAR 0 2
35370: PUSH
35371: LD_VAR 0 1
35375: PUSH
35376: LD_VAR 0 4
35380: ARRAY
35381: EQUAL
35382: IFFALSE 35398
// begin result := i ;
35384: LD_ADDR_VAR 0 3
35388: PUSH
35389: LD_VAR 0 4
35393: ST_TO_ADDR
// exit ;
35394: POP
35395: POP
35396: GO 35402
// end ;
35398: GO 35363
35400: POP
35401: POP
// end ;
35402: LD_VAR 0 3
35406: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35407: LD_INT 0
35409: PPUSH
// vc_chassis := chassis ;
35410: LD_ADDR_OWVAR 37
35414: PUSH
35415: LD_VAR 0 1
35419: ST_TO_ADDR
// vc_engine := engine ;
35420: LD_ADDR_OWVAR 39
35424: PUSH
35425: LD_VAR 0 2
35429: ST_TO_ADDR
// vc_control := control ;
35430: LD_ADDR_OWVAR 38
35434: PUSH
35435: LD_VAR 0 3
35439: ST_TO_ADDR
// vc_weapon := weapon ;
35440: LD_ADDR_OWVAR 40
35444: PUSH
35445: LD_VAR 0 4
35449: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35450: LD_ADDR_OWVAR 41
35454: PUSH
35455: LD_VAR 0 5
35459: ST_TO_ADDR
// end ;
35460: LD_VAR 0 6
35464: RET
// export function WantPlant ( unit ) ; var task ; begin
35465: LD_INT 0
35467: PPUSH
35468: PPUSH
// result := false ;
35469: LD_ADDR_VAR 0 2
35473: PUSH
35474: LD_INT 0
35476: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35477: LD_ADDR_VAR 0 3
35481: PUSH
35482: LD_VAR 0 1
35486: PPUSH
35487: CALL_OW 437
35491: ST_TO_ADDR
// if task then
35492: LD_VAR 0 3
35496: IFFALSE 35524
// if task [ 1 ] [ 1 ] = p then
35498: LD_VAR 0 3
35502: PUSH
35503: LD_INT 1
35505: ARRAY
35506: PUSH
35507: LD_INT 1
35509: ARRAY
35510: PUSH
35511: LD_STRING p
35513: EQUAL
35514: IFFALSE 35524
// result := true ;
35516: LD_ADDR_VAR 0 2
35520: PUSH
35521: LD_INT 1
35523: ST_TO_ADDR
// end ;
35524: LD_VAR 0 2
35528: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35529: LD_INT 0
35531: PPUSH
35532: PPUSH
35533: PPUSH
35534: PPUSH
// if pos < 1 then
35535: LD_VAR 0 2
35539: PUSH
35540: LD_INT 1
35542: LESS
35543: IFFALSE 35547
// exit ;
35545: GO 35850
// if pos = 1 then
35547: LD_VAR 0 2
35551: PUSH
35552: LD_INT 1
35554: EQUAL
35555: IFFALSE 35588
// result := Replace ( arr , pos [ 1 ] , value ) else
35557: LD_ADDR_VAR 0 4
35561: PUSH
35562: LD_VAR 0 1
35566: PPUSH
35567: LD_VAR 0 2
35571: PUSH
35572: LD_INT 1
35574: ARRAY
35575: PPUSH
35576: LD_VAR 0 3
35580: PPUSH
35581: CALL_OW 1
35585: ST_TO_ADDR
35586: GO 35850
// begin tmp := arr ;
35588: LD_ADDR_VAR 0 6
35592: PUSH
35593: LD_VAR 0 1
35597: ST_TO_ADDR
// s_arr := [ tmp ] ;
35598: LD_ADDR_VAR 0 7
35602: PUSH
35603: LD_VAR 0 6
35607: PUSH
35608: EMPTY
35609: LIST
35610: ST_TO_ADDR
// for i = 1 to pos - 1 do
35611: LD_ADDR_VAR 0 5
35615: PUSH
35616: DOUBLE
35617: LD_INT 1
35619: DEC
35620: ST_TO_ADDR
35621: LD_VAR 0 2
35625: PUSH
35626: LD_INT 1
35628: MINUS
35629: PUSH
35630: FOR_TO
35631: IFFALSE 35676
// begin tmp := tmp [ pos [ i ] ] ;
35633: LD_ADDR_VAR 0 6
35637: PUSH
35638: LD_VAR 0 6
35642: PUSH
35643: LD_VAR 0 2
35647: PUSH
35648: LD_VAR 0 5
35652: ARRAY
35653: ARRAY
35654: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35655: LD_ADDR_VAR 0 7
35659: PUSH
35660: LD_VAR 0 7
35664: PUSH
35665: LD_VAR 0 6
35669: PUSH
35670: EMPTY
35671: LIST
35672: ADD
35673: ST_TO_ADDR
// end ;
35674: GO 35630
35676: POP
35677: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35678: LD_ADDR_VAR 0 6
35682: PUSH
35683: LD_VAR 0 6
35687: PPUSH
35688: LD_VAR 0 2
35692: PUSH
35693: LD_VAR 0 2
35697: ARRAY
35698: PPUSH
35699: LD_VAR 0 3
35703: PPUSH
35704: CALL_OW 1
35708: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35709: LD_ADDR_VAR 0 7
35713: PUSH
35714: LD_VAR 0 7
35718: PPUSH
35719: LD_VAR 0 7
35723: PPUSH
35724: LD_VAR 0 6
35728: PPUSH
35729: CALL_OW 1
35733: ST_TO_ADDR
// for i = s_arr downto 2 do
35734: LD_ADDR_VAR 0 5
35738: PUSH
35739: DOUBLE
35740: LD_VAR 0 7
35744: INC
35745: ST_TO_ADDR
35746: LD_INT 2
35748: PUSH
35749: FOR_DOWNTO
35750: IFFALSE 35834
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35752: LD_ADDR_VAR 0 6
35756: PUSH
35757: LD_VAR 0 7
35761: PUSH
35762: LD_VAR 0 5
35766: PUSH
35767: LD_INT 1
35769: MINUS
35770: ARRAY
35771: PPUSH
35772: LD_VAR 0 2
35776: PUSH
35777: LD_VAR 0 5
35781: PUSH
35782: LD_INT 1
35784: MINUS
35785: ARRAY
35786: PPUSH
35787: LD_VAR 0 7
35791: PUSH
35792: LD_VAR 0 5
35796: ARRAY
35797: PPUSH
35798: CALL_OW 1
35802: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35803: LD_ADDR_VAR 0 7
35807: PUSH
35808: LD_VAR 0 7
35812: PPUSH
35813: LD_VAR 0 5
35817: PUSH
35818: LD_INT 1
35820: MINUS
35821: PPUSH
35822: LD_VAR 0 6
35826: PPUSH
35827: CALL_OW 1
35831: ST_TO_ADDR
// end ;
35832: GO 35749
35834: POP
35835: POP
// result := s_arr [ 1 ] ;
35836: LD_ADDR_VAR 0 4
35840: PUSH
35841: LD_VAR 0 7
35845: PUSH
35846: LD_INT 1
35848: ARRAY
35849: ST_TO_ADDR
// end ; end ;
35850: LD_VAR 0 4
35854: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35855: LD_INT 0
35857: PPUSH
35858: PPUSH
// if not list then
35859: LD_VAR 0 1
35863: NOT
35864: IFFALSE 35868
// exit ;
35866: GO 35959
// i := list [ pos1 ] ;
35868: LD_ADDR_VAR 0 5
35872: PUSH
35873: LD_VAR 0 1
35877: PUSH
35878: LD_VAR 0 2
35882: ARRAY
35883: ST_TO_ADDR
// if not i then
35884: LD_VAR 0 5
35888: NOT
35889: IFFALSE 35893
// exit ;
35891: GO 35959
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35893: LD_ADDR_VAR 0 1
35897: PUSH
35898: LD_VAR 0 1
35902: PPUSH
35903: LD_VAR 0 2
35907: PPUSH
35908: LD_VAR 0 1
35912: PUSH
35913: LD_VAR 0 3
35917: ARRAY
35918: PPUSH
35919: CALL_OW 1
35923: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35924: LD_ADDR_VAR 0 1
35928: PUSH
35929: LD_VAR 0 1
35933: PPUSH
35934: LD_VAR 0 3
35938: PPUSH
35939: LD_VAR 0 5
35943: PPUSH
35944: CALL_OW 1
35948: ST_TO_ADDR
// result := list ;
35949: LD_ADDR_VAR 0 4
35953: PUSH
35954: LD_VAR 0 1
35958: ST_TO_ADDR
// end ;
35959: LD_VAR 0 4
35963: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35964: LD_INT 0
35966: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35967: LD_ADDR_VAR 0 5
35971: PUSH
35972: LD_VAR 0 1
35976: PPUSH
35977: CALL_OW 250
35981: PPUSH
35982: LD_VAR 0 1
35986: PPUSH
35987: CALL_OW 251
35991: PPUSH
35992: LD_VAR 0 2
35996: PPUSH
35997: LD_VAR 0 3
36001: PPUSH
36002: LD_VAR 0 4
36006: PPUSH
36007: CALL 36017 0 5
36011: ST_TO_ADDR
// end ;
36012: LD_VAR 0 5
36016: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36017: LD_INT 0
36019: PPUSH
36020: PPUSH
36021: PPUSH
36022: PPUSH
// if not list then
36023: LD_VAR 0 3
36027: NOT
36028: IFFALSE 36032
// exit ;
36030: GO 36420
// result := [ ] ;
36032: LD_ADDR_VAR 0 6
36036: PUSH
36037: EMPTY
36038: ST_TO_ADDR
// for i in list do
36039: LD_ADDR_VAR 0 7
36043: PUSH
36044: LD_VAR 0 3
36048: PUSH
36049: FOR_IN
36050: IFFALSE 36252
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36052: LD_ADDR_VAR 0 9
36056: PUSH
36057: LD_VAR 0 7
36061: PPUSH
36062: LD_VAR 0 1
36066: PPUSH
36067: LD_VAR 0 2
36071: PPUSH
36072: CALL_OW 297
36076: ST_TO_ADDR
// if not result then
36077: LD_VAR 0 6
36081: NOT
36082: IFFALSE 36108
// result := [ [ i , tmp ] ] else
36084: LD_ADDR_VAR 0 6
36088: PUSH
36089: LD_VAR 0 7
36093: PUSH
36094: LD_VAR 0 9
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: EMPTY
36104: LIST
36105: ST_TO_ADDR
36106: GO 36250
// begin if result [ result ] [ 2 ] < tmp then
36108: LD_VAR 0 6
36112: PUSH
36113: LD_VAR 0 6
36117: ARRAY
36118: PUSH
36119: LD_INT 2
36121: ARRAY
36122: PUSH
36123: LD_VAR 0 9
36127: LESS
36128: IFFALSE 36170
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36130: LD_ADDR_VAR 0 6
36134: PUSH
36135: LD_VAR 0 6
36139: PPUSH
36140: LD_VAR 0 6
36144: PUSH
36145: LD_INT 1
36147: PLUS
36148: PPUSH
36149: LD_VAR 0 7
36153: PUSH
36154: LD_VAR 0 9
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PPUSH
36163: CALL_OW 2
36167: ST_TO_ADDR
36168: GO 36250
// for j = 1 to result do
36170: LD_ADDR_VAR 0 8
36174: PUSH
36175: DOUBLE
36176: LD_INT 1
36178: DEC
36179: ST_TO_ADDR
36180: LD_VAR 0 6
36184: PUSH
36185: FOR_TO
36186: IFFALSE 36248
// begin if tmp < result [ j ] [ 2 ] then
36188: LD_VAR 0 9
36192: PUSH
36193: LD_VAR 0 6
36197: PUSH
36198: LD_VAR 0 8
36202: ARRAY
36203: PUSH
36204: LD_INT 2
36206: ARRAY
36207: LESS
36208: IFFALSE 36246
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36210: LD_ADDR_VAR 0 6
36214: PUSH
36215: LD_VAR 0 6
36219: PPUSH
36220: LD_VAR 0 8
36224: PPUSH
36225: LD_VAR 0 7
36229: PUSH
36230: LD_VAR 0 9
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PPUSH
36239: CALL_OW 2
36243: ST_TO_ADDR
// break ;
36244: GO 36248
// end ; end ;
36246: GO 36185
36248: POP
36249: POP
// end ; end ;
36250: GO 36049
36252: POP
36253: POP
// if result and not asc then
36254: LD_VAR 0 6
36258: PUSH
36259: LD_VAR 0 4
36263: NOT
36264: AND
36265: IFFALSE 36340
// begin tmp := result ;
36267: LD_ADDR_VAR 0 9
36271: PUSH
36272: LD_VAR 0 6
36276: ST_TO_ADDR
// for i = tmp downto 1 do
36277: LD_ADDR_VAR 0 7
36281: PUSH
36282: DOUBLE
36283: LD_VAR 0 9
36287: INC
36288: ST_TO_ADDR
36289: LD_INT 1
36291: PUSH
36292: FOR_DOWNTO
36293: IFFALSE 36338
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36295: LD_ADDR_VAR 0 6
36299: PUSH
36300: LD_VAR 0 6
36304: PPUSH
36305: LD_VAR 0 9
36309: PUSH
36310: LD_VAR 0 7
36314: MINUS
36315: PUSH
36316: LD_INT 1
36318: PLUS
36319: PPUSH
36320: LD_VAR 0 9
36324: PUSH
36325: LD_VAR 0 7
36329: ARRAY
36330: PPUSH
36331: CALL_OW 1
36335: ST_TO_ADDR
36336: GO 36292
36338: POP
36339: POP
// end ; tmp := [ ] ;
36340: LD_ADDR_VAR 0 9
36344: PUSH
36345: EMPTY
36346: ST_TO_ADDR
// if mode then
36347: LD_VAR 0 5
36351: IFFALSE 36420
// begin for i = 1 to result do
36353: LD_ADDR_VAR 0 7
36357: PUSH
36358: DOUBLE
36359: LD_INT 1
36361: DEC
36362: ST_TO_ADDR
36363: LD_VAR 0 6
36367: PUSH
36368: FOR_TO
36369: IFFALSE 36408
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36371: LD_ADDR_VAR 0 9
36375: PUSH
36376: LD_VAR 0 9
36380: PPUSH
36381: LD_VAR 0 7
36385: PPUSH
36386: LD_VAR 0 6
36390: PUSH
36391: LD_VAR 0 7
36395: ARRAY
36396: PUSH
36397: LD_INT 1
36399: ARRAY
36400: PPUSH
36401: CALL_OW 1
36405: ST_TO_ADDR
36406: GO 36368
36408: POP
36409: POP
// result := tmp ;
36410: LD_ADDR_VAR 0 6
36414: PUSH
36415: LD_VAR 0 9
36419: ST_TO_ADDR
// end ; end ;
36420: LD_VAR 0 6
36424: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36425: LD_INT 0
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36433: LD_ADDR_VAR 0 5
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: EMPTY
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
// if not x or not y then
36455: LD_VAR 0 2
36459: NOT
36460: PUSH
36461: LD_VAR 0 3
36465: NOT
36466: OR
36467: IFFALSE 36471
// exit ;
36469: GO 38123
// if not range then
36471: LD_VAR 0 4
36475: NOT
36476: IFFALSE 36486
// range := 10 ;
36478: LD_ADDR_VAR 0 4
36482: PUSH
36483: LD_INT 10
36485: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36486: LD_ADDR_VAR 0 8
36490: PUSH
36491: LD_INT 81
36493: PUSH
36494: LD_VAR 0 1
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 92
36505: PUSH
36506: LD_VAR 0 2
36510: PUSH
36511: LD_VAR 0 3
36515: PUSH
36516: LD_VAR 0 4
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 3
36529: PUSH
36530: LD_INT 21
36532: PUSH
36533: LD_INT 3
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: PPUSH
36549: CALL_OW 69
36553: ST_TO_ADDR
// if not tmp then
36554: LD_VAR 0 8
36558: NOT
36559: IFFALSE 36563
// exit ;
36561: GO 38123
// for i in tmp do
36563: LD_ADDR_VAR 0 6
36567: PUSH
36568: LD_VAR 0 8
36572: PUSH
36573: FOR_IN
36574: IFFALSE 38098
// begin points := [ 0 , 0 , 0 ] ;
36576: LD_ADDR_VAR 0 9
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: ST_TO_ADDR
// bpoints := 1 ;
36595: LD_ADDR_VAR 0 10
36599: PUSH
36600: LD_INT 1
36602: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36603: LD_VAR 0 6
36607: PPUSH
36608: CALL_OW 247
36612: PUSH
36613: LD_INT 1
36615: DOUBLE
36616: EQUAL
36617: IFTRUE 36621
36619: GO 37199
36621: POP
// begin if GetClass ( i ) = 1 then
36622: LD_VAR 0 6
36626: PPUSH
36627: CALL_OW 257
36631: PUSH
36632: LD_INT 1
36634: EQUAL
36635: IFFALSE 36656
// points := [ 10 , 5 , 3 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 10
36644: PUSH
36645: LD_INT 5
36647: PUSH
36648: LD_INT 3
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36656: LD_VAR 0 6
36660: PPUSH
36661: CALL_OW 257
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: LD_INT 3
36671: PUSH
36672: LD_INT 4
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: IN
36680: IFFALSE 36701
// points := [ 3 , 2 , 1 ] ;
36682: LD_ADDR_VAR 0 9
36686: PUSH
36687: LD_INT 3
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: LIST
36700: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36701: LD_VAR 0 6
36705: PPUSH
36706: CALL_OW 257
36710: PUSH
36711: LD_INT 5
36713: EQUAL
36714: IFFALSE 36735
// points := [ 130 , 5 , 2 ] ;
36716: LD_ADDR_VAR 0 9
36720: PUSH
36721: LD_INT 130
36723: PUSH
36724: LD_INT 5
36726: PUSH
36727: LD_INT 2
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36735: LD_VAR 0 6
36739: PPUSH
36740: CALL_OW 257
36744: PUSH
36745: LD_INT 8
36747: EQUAL
36748: IFFALSE 36769
// points := [ 35 , 35 , 30 ] ;
36750: LD_ADDR_VAR 0 9
36754: PUSH
36755: LD_INT 35
36757: PUSH
36758: LD_INT 35
36760: PUSH
36761: LD_INT 30
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36769: LD_VAR 0 6
36773: PPUSH
36774: CALL_OW 257
36778: PUSH
36779: LD_INT 9
36781: EQUAL
36782: IFFALSE 36803
// points := [ 20 , 55 , 40 ] ;
36784: LD_ADDR_VAR 0 9
36788: PUSH
36789: LD_INT 20
36791: PUSH
36792: LD_INT 55
36794: PUSH
36795: LD_INT 40
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: LIST
36802: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36803: LD_VAR 0 6
36807: PPUSH
36808: CALL_OW 257
36812: PUSH
36813: LD_INT 12
36815: PUSH
36816: LD_INT 16
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: IN
36823: IFFALSE 36844
// points := [ 5 , 3 , 2 ] ;
36825: LD_ADDR_VAR 0 9
36829: PUSH
36830: LD_INT 5
36832: PUSH
36833: LD_INT 3
36835: PUSH
36836: LD_INT 2
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36844: LD_VAR 0 6
36848: PPUSH
36849: CALL_OW 257
36853: PUSH
36854: LD_INT 17
36856: EQUAL
36857: IFFALSE 36878
// points := [ 100 , 50 , 75 ] ;
36859: LD_ADDR_VAR 0 9
36863: PUSH
36864: LD_INT 100
36866: PUSH
36867: LD_INT 50
36869: PUSH
36870: LD_INT 75
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36878: LD_VAR 0 6
36882: PPUSH
36883: CALL_OW 257
36887: PUSH
36888: LD_INT 15
36890: EQUAL
36891: IFFALSE 36912
// points := [ 10 , 5 , 3 ] ;
36893: LD_ADDR_VAR 0 9
36897: PUSH
36898: LD_INT 10
36900: PUSH
36901: LD_INT 5
36903: PUSH
36904: LD_INT 3
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: LIST
36911: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36912: LD_VAR 0 6
36916: PPUSH
36917: CALL_OW 257
36921: PUSH
36922: LD_INT 14
36924: EQUAL
36925: IFFALSE 36946
// points := [ 10 , 0 , 0 ] ;
36927: LD_ADDR_VAR 0 9
36931: PUSH
36932: LD_INT 10
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36946: LD_VAR 0 6
36950: PPUSH
36951: CALL_OW 257
36955: PUSH
36956: LD_INT 11
36958: EQUAL
36959: IFFALSE 36980
// points := [ 30 , 10 , 5 ] ;
36961: LD_ADDR_VAR 0 9
36965: PUSH
36966: LD_INT 30
36968: PUSH
36969: LD_INT 10
36971: PUSH
36972: LD_INT 5
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: LIST
36979: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36980: LD_VAR 0 1
36984: PPUSH
36985: LD_INT 5
36987: PPUSH
36988: CALL_OW 321
36992: PUSH
36993: LD_INT 2
36995: EQUAL
36996: IFFALSE 37013
// bpoints := bpoints * 1.8 ;
36998: LD_ADDR_VAR 0 10
37002: PUSH
37003: LD_VAR 0 10
37007: PUSH
37008: LD_REAL  1.80000000000000E+0000
37011: MUL
37012: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37013: LD_VAR 0 6
37017: PPUSH
37018: CALL_OW 257
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: LD_INT 3
37031: PUSH
37032: LD_INT 4
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: IN
37041: PUSH
37042: LD_VAR 0 1
37046: PPUSH
37047: LD_INT 51
37049: PPUSH
37050: CALL_OW 321
37054: PUSH
37055: LD_INT 2
37057: EQUAL
37058: AND
37059: IFFALSE 37076
// bpoints := bpoints * 1.2 ;
37061: LD_ADDR_VAR 0 10
37065: PUSH
37066: LD_VAR 0 10
37070: PUSH
37071: LD_REAL  1.20000000000000E+0000
37074: MUL
37075: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37076: LD_VAR 0 6
37080: PPUSH
37081: CALL_OW 257
37085: PUSH
37086: LD_INT 5
37088: PUSH
37089: LD_INT 7
37091: PUSH
37092: LD_INT 9
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: IN
37100: PUSH
37101: LD_VAR 0 1
37105: PPUSH
37106: LD_INT 52
37108: PPUSH
37109: CALL_OW 321
37113: PUSH
37114: LD_INT 2
37116: EQUAL
37117: AND
37118: IFFALSE 37135
// bpoints := bpoints * 1.5 ;
37120: LD_ADDR_VAR 0 10
37124: PUSH
37125: LD_VAR 0 10
37129: PUSH
37130: LD_REAL  1.50000000000000E+0000
37133: MUL
37134: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37135: LD_VAR 0 1
37139: PPUSH
37140: LD_INT 66
37142: PPUSH
37143: CALL_OW 321
37147: PUSH
37148: LD_INT 2
37150: EQUAL
37151: IFFALSE 37168
// bpoints := bpoints * 1.1 ;
37153: LD_ADDR_VAR 0 10
37157: PUSH
37158: LD_VAR 0 10
37162: PUSH
37163: LD_REAL  1.10000000000000E+0000
37166: MUL
37167: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37168: LD_ADDR_VAR 0 10
37172: PUSH
37173: LD_VAR 0 10
37177: PUSH
37178: LD_VAR 0 6
37182: PPUSH
37183: LD_INT 1
37185: PPUSH
37186: CALL_OW 259
37190: PUSH
37191: LD_REAL  1.15000000000000E+0000
37194: MUL
37195: MUL
37196: ST_TO_ADDR
// end ; unit_vehicle :
37197: GO 38027
37199: LD_INT 2
37201: DOUBLE
37202: EQUAL
37203: IFTRUE 37207
37205: GO 38015
37207: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37208: LD_VAR 0 6
37212: PPUSH
37213: CALL_OW 264
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: LD_INT 42
37223: PUSH
37224: LD_INT 24
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: IN
37232: IFFALSE 37253
// points := [ 25 , 5 , 3 ] ;
37234: LD_ADDR_VAR 0 9
37238: PUSH
37239: LD_INT 25
37241: PUSH
37242: LD_INT 5
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37253: LD_VAR 0 6
37257: PPUSH
37258: CALL_OW 264
37262: PUSH
37263: LD_INT 4
37265: PUSH
37266: LD_INT 43
37268: PUSH
37269: LD_INT 25
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: IN
37277: IFFALSE 37298
// points := [ 40 , 15 , 5 ] ;
37279: LD_ADDR_VAR 0 9
37283: PUSH
37284: LD_INT 40
37286: PUSH
37287: LD_INT 15
37289: PUSH
37290: LD_INT 5
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37298: LD_VAR 0 6
37302: PPUSH
37303: CALL_OW 264
37307: PUSH
37308: LD_INT 3
37310: PUSH
37311: LD_INT 23
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: IN
37318: IFFALSE 37339
// points := [ 7 , 25 , 8 ] ;
37320: LD_ADDR_VAR 0 9
37324: PUSH
37325: LD_INT 7
37327: PUSH
37328: LD_INT 25
37330: PUSH
37331: LD_INT 8
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: LIST
37338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37339: LD_VAR 0 6
37343: PPUSH
37344: CALL_OW 264
37348: PUSH
37349: LD_INT 5
37351: PUSH
37352: LD_INT 27
37354: PUSH
37355: LD_INT 44
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: IN
37363: IFFALSE 37384
// points := [ 14 , 50 , 16 ] ;
37365: LD_ADDR_VAR 0 9
37369: PUSH
37370: LD_INT 14
37372: PUSH
37373: LD_INT 50
37375: PUSH
37376: LD_INT 16
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37384: LD_VAR 0 6
37388: PPUSH
37389: CALL_OW 264
37393: PUSH
37394: LD_INT 6
37396: PUSH
37397: LD_INT 46
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: IN
37404: IFFALSE 37425
// points := [ 32 , 120 , 70 ] ;
37406: LD_ADDR_VAR 0 9
37410: PUSH
37411: LD_INT 32
37413: PUSH
37414: LD_INT 120
37416: PUSH
37417: LD_INT 70
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37425: LD_VAR 0 6
37429: PPUSH
37430: CALL_OW 264
37434: PUSH
37435: LD_INT 7
37437: PUSH
37438: LD_INT 28
37440: PUSH
37441: LD_INT 45
37443: PUSH
37444: LD_EXP 26
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: IN
37455: IFFALSE 37476
// points := [ 35 , 20 , 45 ] ;
37457: LD_ADDR_VAR 0 9
37461: PUSH
37462: LD_INT 35
37464: PUSH
37465: LD_INT 20
37467: PUSH
37468: LD_INT 45
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37476: LD_VAR 0 6
37480: PPUSH
37481: CALL_OW 264
37485: PUSH
37486: LD_INT 47
37488: PUSH
37489: EMPTY
37490: LIST
37491: IN
37492: IFFALSE 37513
// points := [ 67 , 45 , 75 ] ;
37494: LD_ADDR_VAR 0 9
37498: PUSH
37499: LD_INT 67
37501: PUSH
37502: LD_INT 45
37504: PUSH
37505: LD_INT 75
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37513: LD_VAR 0 6
37517: PPUSH
37518: CALL_OW 264
37522: PUSH
37523: LD_INT 26
37525: PUSH
37526: EMPTY
37527: LIST
37528: IN
37529: IFFALSE 37550
// points := [ 120 , 30 , 80 ] ;
37531: LD_ADDR_VAR 0 9
37535: PUSH
37536: LD_INT 120
37538: PUSH
37539: LD_INT 30
37541: PUSH
37542: LD_INT 80
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37550: LD_VAR 0 6
37554: PPUSH
37555: CALL_OW 264
37559: PUSH
37560: LD_INT 22
37562: PUSH
37563: EMPTY
37564: LIST
37565: IN
37566: IFFALSE 37587
// points := [ 40 , 1 , 1 ] ;
37568: LD_ADDR_VAR 0 9
37572: PUSH
37573: LD_INT 40
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37587: LD_VAR 0 6
37591: PPUSH
37592: CALL_OW 264
37596: PUSH
37597: LD_INT 29
37599: PUSH
37600: EMPTY
37601: LIST
37602: IN
37603: IFFALSE 37624
// points := [ 70 , 200 , 400 ] ;
37605: LD_ADDR_VAR 0 9
37609: PUSH
37610: LD_INT 70
37612: PUSH
37613: LD_INT 200
37615: PUSH
37616: LD_INT 400
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37624: LD_VAR 0 6
37628: PPUSH
37629: CALL_OW 264
37633: PUSH
37634: LD_INT 14
37636: PUSH
37637: LD_INT 53
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: IN
37644: IFFALSE 37665
// points := [ 40 , 10 , 20 ] ;
37646: LD_ADDR_VAR 0 9
37650: PUSH
37651: LD_INT 40
37653: PUSH
37654: LD_INT 10
37656: PUSH
37657: LD_INT 20
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37665: LD_VAR 0 6
37669: PPUSH
37670: CALL_OW 264
37674: PUSH
37675: LD_INT 9
37677: PUSH
37678: EMPTY
37679: LIST
37680: IN
37681: IFFALSE 37702
// points := [ 5 , 70 , 20 ] ;
37683: LD_ADDR_VAR 0 9
37687: PUSH
37688: LD_INT 5
37690: PUSH
37691: LD_INT 70
37693: PUSH
37694: LD_INT 20
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37702: LD_VAR 0 6
37706: PPUSH
37707: CALL_OW 264
37711: PUSH
37712: LD_INT 10
37714: PUSH
37715: EMPTY
37716: LIST
37717: IN
37718: IFFALSE 37739
// points := [ 35 , 110 , 70 ] ;
37720: LD_ADDR_VAR 0 9
37724: PUSH
37725: LD_INT 35
37727: PUSH
37728: LD_INT 110
37730: PUSH
37731: LD_INT 70
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37739: LD_VAR 0 6
37743: PPUSH
37744: CALL_OW 265
37748: PUSH
37749: LD_INT 25
37751: EQUAL
37752: IFFALSE 37773
// points := [ 80 , 65 , 100 ] ;
37754: LD_ADDR_VAR 0 9
37758: PUSH
37759: LD_INT 80
37761: PUSH
37762: LD_INT 65
37764: PUSH
37765: LD_INT 100
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: LIST
37772: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37773: LD_VAR 0 6
37777: PPUSH
37778: CALL_OW 263
37782: PUSH
37783: LD_INT 1
37785: EQUAL
37786: IFFALSE 37821
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37788: LD_ADDR_VAR 0 10
37792: PUSH
37793: LD_VAR 0 10
37797: PUSH
37798: LD_VAR 0 6
37802: PPUSH
37803: CALL_OW 311
37807: PPUSH
37808: LD_INT 3
37810: PPUSH
37811: CALL_OW 259
37815: PUSH
37816: LD_INT 4
37818: MUL
37819: MUL
37820: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37821: LD_VAR 0 6
37825: PPUSH
37826: CALL_OW 263
37830: PUSH
37831: LD_INT 2
37833: EQUAL
37834: IFFALSE 37885
// begin j := IsControledBy ( i ) ;
37836: LD_ADDR_VAR 0 7
37840: PUSH
37841: LD_VAR 0 6
37845: PPUSH
37846: CALL_OW 312
37850: ST_TO_ADDR
// if j then
37851: LD_VAR 0 7
37855: IFFALSE 37885
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37857: LD_ADDR_VAR 0 10
37861: PUSH
37862: LD_VAR 0 10
37866: PUSH
37867: LD_VAR 0 7
37871: PPUSH
37872: LD_INT 3
37874: PPUSH
37875: CALL_OW 259
37879: PUSH
37880: LD_INT 3
37882: MUL
37883: MUL
37884: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37885: LD_VAR 0 6
37889: PPUSH
37890: CALL_OW 264
37894: PUSH
37895: LD_INT 5
37897: PUSH
37898: LD_INT 6
37900: PUSH
37901: LD_INT 46
37903: PUSH
37904: LD_INT 44
37906: PUSH
37907: LD_INT 47
37909: PUSH
37910: LD_INT 45
37912: PUSH
37913: LD_INT 28
37915: PUSH
37916: LD_INT 7
37918: PUSH
37919: LD_INT 27
37921: PUSH
37922: LD_INT 29
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: IN
37937: PUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: LD_INT 52
37945: PPUSH
37946: CALL_OW 321
37950: PUSH
37951: LD_INT 2
37953: EQUAL
37954: AND
37955: IFFALSE 37972
// bpoints := bpoints * 1.2 ;
37957: LD_ADDR_VAR 0 10
37961: PUSH
37962: LD_VAR 0 10
37966: PUSH
37967: LD_REAL  1.20000000000000E+0000
37970: MUL
37971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37972: LD_VAR 0 6
37976: PPUSH
37977: CALL_OW 264
37981: PUSH
37982: LD_INT 6
37984: PUSH
37985: LD_INT 46
37987: PUSH
37988: LD_INT 47
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: IN
37996: IFFALSE 38013
// bpoints := bpoints * 1.2 ;
37998: LD_ADDR_VAR 0 10
38002: PUSH
38003: LD_VAR 0 10
38007: PUSH
38008: LD_REAL  1.20000000000000E+0000
38011: MUL
38012: ST_TO_ADDR
// end ; unit_building :
38013: GO 38027
38015: LD_INT 3
38017: DOUBLE
38018: EQUAL
38019: IFTRUE 38023
38021: GO 38026
38023: POP
// ; end ;
38024: GO 38027
38026: POP
// for j = 1 to 3 do
38027: LD_ADDR_VAR 0 7
38031: PUSH
38032: DOUBLE
38033: LD_INT 1
38035: DEC
38036: ST_TO_ADDR
38037: LD_INT 3
38039: PUSH
38040: FOR_TO
38041: IFFALSE 38094
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38043: LD_ADDR_VAR 0 5
38047: PUSH
38048: LD_VAR 0 5
38052: PPUSH
38053: LD_VAR 0 7
38057: PPUSH
38058: LD_VAR 0 5
38062: PUSH
38063: LD_VAR 0 7
38067: ARRAY
38068: PUSH
38069: LD_VAR 0 9
38073: PUSH
38074: LD_VAR 0 7
38078: ARRAY
38079: PUSH
38080: LD_VAR 0 10
38084: MUL
38085: PLUS
38086: PPUSH
38087: CALL_OW 1
38091: ST_TO_ADDR
38092: GO 38040
38094: POP
38095: POP
// end ;
38096: GO 36573
38098: POP
38099: POP
// result := Replace ( result , 4 , tmp ) ;
38100: LD_ADDR_VAR 0 5
38104: PUSH
38105: LD_VAR 0 5
38109: PPUSH
38110: LD_INT 4
38112: PPUSH
38113: LD_VAR 0 8
38117: PPUSH
38118: CALL_OW 1
38122: ST_TO_ADDR
// end ;
38123: LD_VAR 0 5
38127: RET
// export function DangerAtRange ( unit , range ) ; begin
38128: LD_INT 0
38130: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38131: LD_ADDR_VAR 0 3
38135: PUSH
38136: LD_VAR 0 1
38140: PPUSH
38141: CALL_OW 255
38145: PPUSH
38146: LD_VAR 0 1
38150: PPUSH
38151: CALL_OW 250
38155: PPUSH
38156: LD_VAR 0 1
38160: PPUSH
38161: CALL_OW 251
38165: PPUSH
38166: LD_VAR 0 2
38170: PPUSH
38171: CALL 36425 0 4
38175: ST_TO_ADDR
// end ;
38176: LD_VAR 0 3
38180: RET
// export function DangerInArea ( side , area ) ; begin
38181: LD_INT 0
38183: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38184: LD_ADDR_VAR 0 3
38188: PUSH
38189: LD_VAR 0 2
38193: PPUSH
38194: LD_INT 81
38196: PUSH
38197: LD_VAR 0 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PPUSH
38206: CALL_OW 70
38210: ST_TO_ADDR
// end ;
38211: LD_VAR 0 3
38215: RET
// export function IsExtension ( b ) ; begin
38216: LD_INT 0
38218: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38219: LD_ADDR_VAR 0 2
38223: PUSH
38224: LD_VAR 0 1
38228: PUSH
38229: LD_INT 23
38231: PUSH
38232: LD_INT 20
38234: PUSH
38235: LD_INT 22
38237: PUSH
38238: LD_INT 17
38240: PUSH
38241: LD_INT 24
38243: PUSH
38244: LD_INT 21
38246: PUSH
38247: LD_INT 19
38249: PUSH
38250: LD_INT 16
38252: PUSH
38253: LD_INT 25
38255: PUSH
38256: LD_INT 18
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: IN
38271: ST_TO_ADDR
// end ;
38272: LD_VAR 0 2
38276: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38277: LD_INT 0
38279: PPUSH
38280: PPUSH
38281: PPUSH
// result := [ ] ;
38282: LD_ADDR_VAR 0 4
38286: PUSH
38287: EMPTY
38288: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38289: LD_ADDR_VAR 0 5
38293: PUSH
38294: LD_VAR 0 2
38298: PPUSH
38299: LD_INT 21
38301: PUSH
38302: LD_INT 3
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PPUSH
38309: CALL_OW 70
38313: ST_TO_ADDR
// if not tmp then
38314: LD_VAR 0 5
38318: NOT
38319: IFFALSE 38323
// exit ;
38321: GO 38387
// if checkLink then
38323: LD_VAR 0 3
38327: IFFALSE 38377
// begin for i in tmp do
38329: LD_ADDR_VAR 0 6
38333: PUSH
38334: LD_VAR 0 5
38338: PUSH
38339: FOR_IN
38340: IFFALSE 38375
// if GetBase ( i ) <> base then
38342: LD_VAR 0 6
38346: PPUSH
38347: CALL_OW 274
38351: PUSH
38352: LD_VAR 0 1
38356: NONEQUAL
38357: IFFALSE 38373
// ComLinkToBase ( base , i ) ;
38359: LD_VAR 0 1
38363: PPUSH
38364: LD_VAR 0 6
38368: PPUSH
38369: CALL_OW 169
38373: GO 38339
38375: POP
38376: POP
// end ; result := tmp ;
38377: LD_ADDR_VAR 0 4
38381: PUSH
38382: LD_VAR 0 5
38386: ST_TO_ADDR
// end ;
38387: LD_VAR 0 4
38391: RET
// export function ComComplete ( units , b ) ; var i ; begin
38392: LD_INT 0
38394: PPUSH
38395: PPUSH
// if not units then
38396: LD_VAR 0 1
38400: NOT
38401: IFFALSE 38405
// exit ;
38403: GO 38495
// for i in units do
38405: LD_ADDR_VAR 0 4
38409: PUSH
38410: LD_VAR 0 1
38414: PUSH
38415: FOR_IN
38416: IFFALSE 38493
// if BuildingStatus ( b ) = bs_build then
38418: LD_VAR 0 2
38422: PPUSH
38423: CALL_OW 461
38427: PUSH
38428: LD_INT 1
38430: EQUAL
38431: IFFALSE 38491
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38433: LD_VAR 0 4
38437: PPUSH
38438: LD_STRING h
38440: PUSH
38441: LD_VAR 0 2
38445: PPUSH
38446: CALL_OW 250
38450: PUSH
38451: LD_VAR 0 2
38455: PPUSH
38456: CALL_OW 251
38460: PUSH
38461: LD_VAR 0 2
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: PUSH
38484: EMPTY
38485: LIST
38486: PPUSH
38487: CALL_OW 446
38491: GO 38415
38493: POP
38494: POP
// end ;
38495: LD_VAR 0 3
38499: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38500: LD_INT 0
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38508: LD_VAR 0 1
38512: NOT
38513: PUSH
38514: LD_VAR 0 1
38518: PPUSH
38519: CALL_OW 263
38523: PUSH
38524: LD_INT 2
38526: NONEQUAL
38527: OR
38528: IFFALSE 38532
// exit ;
38530: GO 38848
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38532: LD_ADDR_VAR 0 6
38536: PUSH
38537: LD_INT 22
38539: PUSH
38540: LD_VAR 0 1
38544: PPUSH
38545: CALL_OW 255
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: LD_INT 30
38559: PUSH
38560: LD_INT 36
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 34
38569: PUSH
38570: LD_INT 31
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PPUSH
38586: CALL_OW 69
38590: ST_TO_ADDR
// if not tmp then
38591: LD_VAR 0 6
38595: NOT
38596: IFFALSE 38600
// exit ;
38598: GO 38848
// result := [ ] ;
38600: LD_ADDR_VAR 0 2
38604: PUSH
38605: EMPTY
38606: ST_TO_ADDR
// for i in tmp do
38607: LD_ADDR_VAR 0 3
38611: PUSH
38612: LD_VAR 0 6
38616: PUSH
38617: FOR_IN
38618: IFFALSE 38689
// begin t := UnitsInside ( i ) ;
38620: LD_ADDR_VAR 0 4
38624: PUSH
38625: LD_VAR 0 3
38629: PPUSH
38630: CALL_OW 313
38634: ST_TO_ADDR
// if t then
38635: LD_VAR 0 4
38639: IFFALSE 38687
// for j in t do
38641: LD_ADDR_VAR 0 7
38645: PUSH
38646: LD_VAR 0 4
38650: PUSH
38651: FOR_IN
38652: IFFALSE 38685
// result := Replace ( result , result + 1 , j ) ;
38654: LD_ADDR_VAR 0 2
38658: PUSH
38659: LD_VAR 0 2
38663: PPUSH
38664: LD_VAR 0 2
38668: PUSH
38669: LD_INT 1
38671: PLUS
38672: PPUSH
38673: LD_VAR 0 7
38677: PPUSH
38678: CALL_OW 1
38682: ST_TO_ADDR
38683: GO 38651
38685: POP
38686: POP
// end ;
38687: GO 38617
38689: POP
38690: POP
// if not result then
38691: LD_VAR 0 2
38695: NOT
38696: IFFALSE 38700
// exit ;
38698: GO 38848
// mech := result [ 1 ] ;
38700: LD_ADDR_VAR 0 5
38704: PUSH
38705: LD_VAR 0 2
38709: PUSH
38710: LD_INT 1
38712: ARRAY
38713: ST_TO_ADDR
// if result > 1 then
38714: LD_VAR 0 2
38718: PUSH
38719: LD_INT 1
38721: GREATER
38722: IFFALSE 38834
// begin for i = 2 to result do
38724: LD_ADDR_VAR 0 3
38728: PUSH
38729: DOUBLE
38730: LD_INT 2
38732: DEC
38733: ST_TO_ADDR
38734: LD_VAR 0 2
38738: PUSH
38739: FOR_TO
38740: IFFALSE 38832
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38742: LD_ADDR_VAR 0 4
38746: PUSH
38747: LD_VAR 0 2
38751: PUSH
38752: LD_VAR 0 3
38756: ARRAY
38757: PPUSH
38758: LD_INT 3
38760: PPUSH
38761: CALL_OW 259
38765: PUSH
38766: LD_VAR 0 2
38770: PUSH
38771: LD_VAR 0 3
38775: ARRAY
38776: PPUSH
38777: CALL_OW 432
38781: MINUS
38782: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38783: LD_VAR 0 4
38787: PUSH
38788: LD_VAR 0 5
38792: PPUSH
38793: LD_INT 3
38795: PPUSH
38796: CALL_OW 259
38800: PUSH
38801: LD_VAR 0 5
38805: PPUSH
38806: CALL_OW 432
38810: MINUS
38811: GREATEREQUAL
38812: IFFALSE 38830
// mech := result [ i ] ;
38814: LD_ADDR_VAR 0 5
38818: PUSH
38819: LD_VAR 0 2
38823: PUSH
38824: LD_VAR 0 3
38828: ARRAY
38829: ST_TO_ADDR
// end ;
38830: GO 38739
38832: POP
38833: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38834: LD_VAR 0 1
38838: PPUSH
38839: LD_VAR 0 5
38843: PPUSH
38844: CALL_OW 135
// end ;
38848: LD_VAR 0 2
38852: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38853: LD_INT 0
38855: PPUSH
38856: PPUSH
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
// result := [ ] ;
38868: LD_ADDR_VAR 0 7
38872: PUSH
38873: EMPTY
38874: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38875: LD_VAR 0 1
38879: PPUSH
38880: CALL_OW 266
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: IN
38895: NOT
38896: IFFALSE 38900
// exit ;
38898: GO 40534
// if name then
38900: LD_VAR 0 3
38904: IFFALSE 38920
// SetBName ( base_dep , name ) ;
38906: LD_VAR 0 1
38910: PPUSH
38911: LD_VAR 0 3
38915: PPUSH
38916: CALL_OW 500
// base := GetBase ( base_dep ) ;
38920: LD_ADDR_VAR 0 15
38924: PUSH
38925: LD_VAR 0 1
38929: PPUSH
38930: CALL_OW 274
38934: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38935: LD_ADDR_VAR 0 16
38939: PUSH
38940: LD_VAR 0 1
38944: PPUSH
38945: CALL_OW 255
38949: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38950: LD_ADDR_VAR 0 17
38954: PUSH
38955: LD_VAR 0 1
38959: PPUSH
38960: CALL_OW 248
38964: ST_TO_ADDR
// if sources then
38965: LD_VAR 0 5
38969: IFFALSE 39016
// for i = 1 to 3 do
38971: LD_ADDR_VAR 0 8
38975: PUSH
38976: DOUBLE
38977: LD_INT 1
38979: DEC
38980: ST_TO_ADDR
38981: LD_INT 3
38983: PUSH
38984: FOR_TO
38985: IFFALSE 39014
// AddResourceType ( base , i , sources [ i ] ) ;
38987: LD_VAR 0 15
38991: PPUSH
38992: LD_VAR 0 8
38996: PPUSH
38997: LD_VAR 0 5
39001: PUSH
39002: LD_VAR 0 8
39006: ARRAY
39007: PPUSH
39008: CALL_OW 276
39012: GO 38984
39014: POP
39015: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39016: LD_ADDR_VAR 0 18
39020: PUSH
39021: LD_VAR 0 15
39025: PPUSH
39026: LD_VAR 0 2
39030: PPUSH
39031: LD_INT 1
39033: PPUSH
39034: CALL 38277 0 3
39038: ST_TO_ADDR
// InitHc ;
39039: CALL_OW 19
// InitUc ;
39043: CALL_OW 18
// uc_side := side ;
39047: LD_ADDR_OWVAR 20
39051: PUSH
39052: LD_VAR 0 16
39056: ST_TO_ADDR
// uc_nation := nation ;
39057: LD_ADDR_OWVAR 21
39061: PUSH
39062: LD_VAR 0 17
39066: ST_TO_ADDR
// if buildings then
39067: LD_VAR 0 18
39071: IFFALSE 40393
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39073: LD_ADDR_VAR 0 19
39077: PUSH
39078: LD_VAR 0 18
39082: PPUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 30
39088: PUSH
39089: LD_INT 29
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 30
39098: PUSH
39099: LD_INT 30
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: PPUSH
39111: CALL_OW 72
39115: ST_TO_ADDR
// if tmp then
39116: LD_VAR 0 19
39120: IFFALSE 39168
// for i in tmp do
39122: LD_ADDR_VAR 0 8
39126: PUSH
39127: LD_VAR 0 19
39131: PUSH
39132: FOR_IN
39133: IFFALSE 39166
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39135: LD_VAR 0 8
39139: PPUSH
39140: CALL_OW 250
39144: PPUSH
39145: LD_VAR 0 8
39149: PPUSH
39150: CALL_OW 251
39154: PPUSH
39155: LD_VAR 0 16
39159: PPUSH
39160: CALL_OW 441
39164: GO 39132
39166: POP
39167: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39168: LD_VAR 0 18
39172: PPUSH
39173: LD_INT 2
39175: PUSH
39176: LD_INT 30
39178: PUSH
39179: LD_INT 32
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 30
39188: PUSH
39189: LD_INT 33
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: PPUSH
39201: CALL_OW 72
39205: IFFALSE 39293
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39207: LD_ADDR_VAR 0 8
39211: PUSH
39212: LD_VAR 0 18
39216: PPUSH
39217: LD_INT 2
39219: PUSH
39220: LD_INT 30
39222: PUSH
39223: LD_INT 32
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 30
39232: PUSH
39233: LD_INT 33
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: LIST
39244: PPUSH
39245: CALL_OW 72
39249: PUSH
39250: FOR_IN
39251: IFFALSE 39291
// begin if not GetBWeapon ( i ) then
39253: LD_VAR 0 8
39257: PPUSH
39258: CALL_OW 269
39262: NOT
39263: IFFALSE 39289
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39265: LD_VAR 0 8
39269: PPUSH
39270: LD_VAR 0 8
39274: PPUSH
39275: LD_VAR 0 2
39279: PPUSH
39280: CALL 40539 0 2
39284: PPUSH
39285: CALL_OW 431
// end ;
39289: GO 39250
39291: POP
39292: POP
// end ; for i = 1 to personel do
39293: LD_ADDR_VAR 0 8
39297: PUSH
39298: DOUBLE
39299: LD_INT 1
39301: DEC
39302: ST_TO_ADDR
39303: LD_VAR 0 6
39307: PUSH
39308: FOR_TO
39309: IFFALSE 40373
// begin if i > 4 then
39311: LD_VAR 0 8
39315: PUSH
39316: LD_INT 4
39318: GREATER
39319: IFFALSE 39323
// break ;
39321: GO 40373
// case i of 1 :
39323: LD_VAR 0 8
39327: PUSH
39328: LD_INT 1
39330: DOUBLE
39331: EQUAL
39332: IFTRUE 39336
39334: GO 39416
39336: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39337: LD_ADDR_VAR 0 12
39341: PUSH
39342: LD_VAR 0 18
39346: PPUSH
39347: LD_INT 22
39349: PUSH
39350: LD_VAR 0 16
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 58
39361: PUSH
39362: EMPTY
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 30
39370: PUSH
39371: LD_INT 32
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 30
39380: PUSH
39381: LD_INT 4
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 30
39390: PUSH
39391: LD_INT 5
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: LIST
39408: PPUSH
39409: CALL_OW 72
39413: ST_TO_ADDR
39414: GO 39638
39416: LD_INT 2
39418: DOUBLE
39419: EQUAL
39420: IFTRUE 39424
39422: GO 39486
39424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39425: LD_ADDR_VAR 0 12
39429: PUSH
39430: LD_VAR 0 18
39434: PPUSH
39435: LD_INT 22
39437: PUSH
39438: LD_VAR 0 16
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: LD_INT 30
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 30
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PPUSH
39479: CALL_OW 72
39483: ST_TO_ADDR
39484: GO 39638
39486: LD_INT 3
39488: DOUBLE
39489: EQUAL
39490: IFTRUE 39494
39492: GO 39556
39494: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39495: LD_ADDR_VAR 0 12
39499: PUSH
39500: LD_VAR 0 18
39504: PPUSH
39505: LD_INT 22
39507: PUSH
39508: LD_VAR 0 16
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: LD_INT 30
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 30
39532: PUSH
39533: LD_INT 3
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PPUSH
39549: CALL_OW 72
39553: ST_TO_ADDR
39554: GO 39638
39556: LD_INT 4
39558: DOUBLE
39559: EQUAL
39560: IFTRUE 39564
39562: GO 39637
39564: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39565: LD_ADDR_VAR 0 12
39569: PUSH
39570: LD_VAR 0 18
39574: PPUSH
39575: LD_INT 22
39577: PUSH
39578: LD_VAR 0 16
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: LD_INT 30
39592: PUSH
39593: LD_INT 6
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 30
39602: PUSH
39603: LD_INT 7
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 30
39612: PUSH
39613: LD_INT 8
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PPUSH
39630: CALL_OW 72
39634: ST_TO_ADDR
39635: GO 39638
39637: POP
// if i = 1 then
39638: LD_VAR 0 8
39642: PUSH
39643: LD_INT 1
39645: EQUAL
39646: IFFALSE 39757
// begin tmp := [ ] ;
39648: LD_ADDR_VAR 0 19
39652: PUSH
39653: EMPTY
39654: ST_TO_ADDR
// for j in f do
39655: LD_ADDR_VAR 0 9
39659: PUSH
39660: LD_VAR 0 12
39664: PUSH
39665: FOR_IN
39666: IFFALSE 39739
// if GetBType ( j ) = b_bunker then
39668: LD_VAR 0 9
39672: PPUSH
39673: CALL_OW 266
39677: PUSH
39678: LD_INT 32
39680: EQUAL
39681: IFFALSE 39708
// tmp := Insert ( tmp , 1 , j ) else
39683: LD_ADDR_VAR 0 19
39687: PUSH
39688: LD_VAR 0 19
39692: PPUSH
39693: LD_INT 1
39695: PPUSH
39696: LD_VAR 0 9
39700: PPUSH
39701: CALL_OW 2
39705: ST_TO_ADDR
39706: GO 39737
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39708: LD_ADDR_VAR 0 19
39712: PUSH
39713: LD_VAR 0 19
39717: PPUSH
39718: LD_VAR 0 19
39722: PUSH
39723: LD_INT 1
39725: PLUS
39726: PPUSH
39727: LD_VAR 0 9
39731: PPUSH
39732: CALL_OW 2
39736: ST_TO_ADDR
39737: GO 39665
39739: POP
39740: POP
// if tmp then
39741: LD_VAR 0 19
39745: IFFALSE 39757
// f := tmp ;
39747: LD_ADDR_VAR 0 12
39751: PUSH
39752: LD_VAR 0 19
39756: ST_TO_ADDR
// end ; x := personel [ i ] ;
39757: LD_ADDR_VAR 0 13
39761: PUSH
39762: LD_VAR 0 6
39766: PUSH
39767: LD_VAR 0 8
39771: ARRAY
39772: ST_TO_ADDR
// if x = - 1 then
39773: LD_VAR 0 13
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: EQUAL
39782: IFFALSE 39991
// begin for j in f do
39784: LD_ADDR_VAR 0 9
39788: PUSH
39789: LD_VAR 0 12
39793: PUSH
39794: FOR_IN
39795: IFFALSE 39987
// repeat InitHc ;
39797: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39801: LD_VAR 0 9
39805: PPUSH
39806: CALL_OW 266
39810: PUSH
39811: LD_INT 5
39813: EQUAL
39814: IFFALSE 39884
// begin if UnitsInside ( j ) < 3 then
39816: LD_VAR 0 9
39820: PPUSH
39821: CALL_OW 313
39825: PUSH
39826: LD_INT 3
39828: LESS
39829: IFFALSE 39865
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39831: LD_INT 0
39833: PPUSH
39834: LD_INT 5
39836: PUSH
39837: LD_INT 8
39839: PUSH
39840: LD_INT 9
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: PUSH
39848: LD_VAR 0 17
39852: ARRAY
39853: PPUSH
39854: LD_VAR 0 4
39858: PPUSH
39859: CALL_OW 380
39863: GO 39882
// PrepareHuman ( false , i , skill ) ;
39865: LD_INT 0
39867: PPUSH
39868: LD_VAR 0 8
39872: PPUSH
39873: LD_VAR 0 4
39877: PPUSH
39878: CALL_OW 380
// end else
39882: GO 39901
// PrepareHuman ( false , i , skill ) ;
39884: LD_INT 0
39886: PPUSH
39887: LD_VAR 0 8
39891: PPUSH
39892: LD_VAR 0 4
39896: PPUSH
39897: CALL_OW 380
// un := CreateHuman ;
39901: LD_ADDR_VAR 0 14
39905: PUSH
39906: CALL_OW 44
39910: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39911: LD_ADDR_VAR 0 7
39915: PUSH
39916: LD_VAR 0 7
39920: PPUSH
39921: LD_INT 1
39923: PPUSH
39924: LD_VAR 0 14
39928: PPUSH
39929: CALL_OW 2
39933: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39934: LD_VAR 0 14
39938: PPUSH
39939: LD_VAR 0 9
39943: PPUSH
39944: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39948: LD_VAR 0 9
39952: PPUSH
39953: CALL_OW 313
39957: PUSH
39958: LD_INT 6
39960: EQUAL
39961: PUSH
39962: LD_VAR 0 9
39966: PPUSH
39967: CALL_OW 266
39971: PUSH
39972: LD_INT 32
39974: PUSH
39975: LD_INT 31
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: IN
39982: OR
39983: IFFALSE 39797
39985: GO 39794
39987: POP
39988: POP
// end else
39989: GO 40371
// for j = 1 to x do
39991: LD_ADDR_VAR 0 9
39995: PUSH
39996: DOUBLE
39997: LD_INT 1
39999: DEC
40000: ST_TO_ADDR
40001: LD_VAR 0 13
40005: PUSH
40006: FOR_TO
40007: IFFALSE 40369
// begin InitHc ;
40009: CALL_OW 19
// if not f then
40013: LD_VAR 0 12
40017: NOT
40018: IFFALSE 40107
// begin PrepareHuman ( false , i , skill ) ;
40020: LD_INT 0
40022: PPUSH
40023: LD_VAR 0 8
40027: PPUSH
40028: LD_VAR 0 4
40032: PPUSH
40033: CALL_OW 380
// un := CreateHuman ;
40037: LD_ADDR_VAR 0 14
40041: PUSH
40042: CALL_OW 44
40046: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40047: LD_ADDR_VAR 0 7
40051: PUSH
40052: LD_VAR 0 7
40056: PPUSH
40057: LD_INT 1
40059: PPUSH
40060: LD_VAR 0 14
40064: PPUSH
40065: CALL_OW 2
40069: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40070: LD_VAR 0 14
40074: PPUSH
40075: LD_VAR 0 1
40079: PPUSH
40080: CALL_OW 250
40084: PPUSH
40085: LD_VAR 0 1
40089: PPUSH
40090: CALL_OW 251
40094: PPUSH
40095: LD_INT 10
40097: PPUSH
40098: LD_INT 0
40100: PPUSH
40101: CALL_OW 50
// continue ;
40105: GO 40006
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40107: LD_VAR 0 12
40111: PUSH
40112: LD_INT 1
40114: ARRAY
40115: PPUSH
40116: CALL_OW 313
40120: PUSH
40121: LD_VAR 0 12
40125: PUSH
40126: LD_INT 1
40128: ARRAY
40129: PPUSH
40130: CALL_OW 266
40134: PUSH
40135: LD_INT 32
40137: PUSH
40138: LD_INT 31
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: IN
40145: AND
40146: PUSH
40147: LD_VAR 0 12
40151: PUSH
40152: LD_INT 1
40154: ARRAY
40155: PPUSH
40156: CALL_OW 313
40160: PUSH
40161: LD_INT 6
40163: EQUAL
40164: OR
40165: IFFALSE 40185
// f := Delete ( f , 1 ) ;
40167: LD_ADDR_VAR 0 12
40171: PUSH
40172: LD_VAR 0 12
40176: PPUSH
40177: LD_INT 1
40179: PPUSH
40180: CALL_OW 3
40184: ST_TO_ADDR
// if not f then
40185: LD_VAR 0 12
40189: NOT
40190: IFFALSE 40208
// begin x := x + 2 ;
40192: LD_ADDR_VAR 0 13
40196: PUSH
40197: LD_VAR 0 13
40201: PUSH
40202: LD_INT 2
40204: PLUS
40205: ST_TO_ADDR
// continue ;
40206: GO 40006
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40208: LD_VAR 0 12
40212: PUSH
40213: LD_INT 1
40215: ARRAY
40216: PPUSH
40217: CALL_OW 266
40221: PUSH
40222: LD_INT 5
40224: EQUAL
40225: IFFALSE 40299
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40227: LD_VAR 0 12
40231: PUSH
40232: LD_INT 1
40234: ARRAY
40235: PPUSH
40236: CALL_OW 313
40240: PUSH
40241: LD_INT 3
40243: LESS
40244: IFFALSE 40280
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40246: LD_INT 0
40248: PPUSH
40249: LD_INT 5
40251: PUSH
40252: LD_INT 8
40254: PUSH
40255: LD_INT 9
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: PUSH
40263: LD_VAR 0 17
40267: ARRAY
40268: PPUSH
40269: LD_VAR 0 4
40273: PPUSH
40274: CALL_OW 380
40278: GO 40297
// PrepareHuman ( false , i , skill ) ;
40280: LD_INT 0
40282: PPUSH
40283: LD_VAR 0 8
40287: PPUSH
40288: LD_VAR 0 4
40292: PPUSH
40293: CALL_OW 380
// end else
40297: GO 40316
// PrepareHuman ( false , i , skill ) ;
40299: LD_INT 0
40301: PPUSH
40302: LD_VAR 0 8
40306: PPUSH
40307: LD_VAR 0 4
40311: PPUSH
40312: CALL_OW 380
// un := CreateHuman ;
40316: LD_ADDR_VAR 0 14
40320: PUSH
40321: CALL_OW 44
40325: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40326: LD_ADDR_VAR 0 7
40330: PUSH
40331: LD_VAR 0 7
40335: PPUSH
40336: LD_INT 1
40338: PPUSH
40339: LD_VAR 0 14
40343: PPUSH
40344: CALL_OW 2
40348: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40349: LD_VAR 0 14
40353: PPUSH
40354: LD_VAR 0 12
40358: PUSH
40359: LD_INT 1
40361: ARRAY
40362: PPUSH
40363: CALL_OW 52
// end ;
40367: GO 40006
40369: POP
40370: POP
// end ;
40371: GO 39308
40373: POP
40374: POP
// result := result ^ buildings ;
40375: LD_ADDR_VAR 0 7
40379: PUSH
40380: LD_VAR 0 7
40384: PUSH
40385: LD_VAR 0 18
40389: ADD
40390: ST_TO_ADDR
// end else
40391: GO 40534
// begin for i = 1 to personel do
40393: LD_ADDR_VAR 0 8
40397: PUSH
40398: DOUBLE
40399: LD_INT 1
40401: DEC
40402: ST_TO_ADDR
40403: LD_VAR 0 6
40407: PUSH
40408: FOR_TO
40409: IFFALSE 40532
// begin if i > 4 then
40411: LD_VAR 0 8
40415: PUSH
40416: LD_INT 4
40418: GREATER
40419: IFFALSE 40423
// break ;
40421: GO 40532
// x := personel [ i ] ;
40423: LD_ADDR_VAR 0 13
40427: PUSH
40428: LD_VAR 0 6
40432: PUSH
40433: LD_VAR 0 8
40437: ARRAY
40438: ST_TO_ADDR
// if x = - 1 then
40439: LD_VAR 0 13
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: EQUAL
40448: IFFALSE 40452
// continue ;
40450: GO 40408
// PrepareHuman ( false , i , skill ) ;
40452: LD_INT 0
40454: PPUSH
40455: LD_VAR 0 8
40459: PPUSH
40460: LD_VAR 0 4
40464: PPUSH
40465: CALL_OW 380
// un := CreateHuman ;
40469: LD_ADDR_VAR 0 14
40473: PUSH
40474: CALL_OW 44
40478: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40479: LD_VAR 0 14
40483: PPUSH
40484: LD_VAR 0 1
40488: PPUSH
40489: CALL_OW 250
40493: PPUSH
40494: LD_VAR 0 1
40498: PPUSH
40499: CALL_OW 251
40503: PPUSH
40504: LD_INT 10
40506: PPUSH
40507: LD_INT 0
40509: PPUSH
40510: CALL_OW 50
// result := result ^ un ;
40514: LD_ADDR_VAR 0 7
40518: PUSH
40519: LD_VAR 0 7
40523: PUSH
40524: LD_VAR 0 14
40528: ADD
40529: ST_TO_ADDR
// end ;
40530: GO 40408
40532: POP
40533: POP
// end ; end ;
40534: LD_VAR 0 7
40538: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40539: LD_INT 0
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
// result := false ;
40557: LD_ADDR_VAR 0 3
40561: PUSH
40562: LD_INT 0
40564: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40565: LD_VAR 0 1
40569: NOT
40570: PUSH
40571: LD_VAR 0 1
40575: PPUSH
40576: CALL_OW 266
40580: PUSH
40581: LD_INT 32
40583: PUSH
40584: LD_INT 33
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: IN
40591: NOT
40592: OR
40593: IFFALSE 40597
// exit ;
40595: GO 41706
// nat := GetNation ( tower ) ;
40597: LD_ADDR_VAR 0 12
40601: PUSH
40602: LD_VAR 0 1
40606: PPUSH
40607: CALL_OW 248
40611: ST_TO_ADDR
// side := GetSide ( tower ) ;
40612: LD_ADDR_VAR 0 16
40616: PUSH
40617: LD_VAR 0 1
40621: PPUSH
40622: CALL_OW 255
40626: ST_TO_ADDR
// x := GetX ( tower ) ;
40627: LD_ADDR_VAR 0 10
40631: PUSH
40632: LD_VAR 0 1
40636: PPUSH
40637: CALL_OW 250
40641: ST_TO_ADDR
// y := GetY ( tower ) ;
40642: LD_ADDR_VAR 0 11
40646: PUSH
40647: LD_VAR 0 1
40651: PPUSH
40652: CALL_OW 251
40656: ST_TO_ADDR
// if not x or not y then
40657: LD_VAR 0 10
40661: NOT
40662: PUSH
40663: LD_VAR 0 11
40667: NOT
40668: OR
40669: IFFALSE 40673
// exit ;
40671: GO 41706
// weapon := 0 ;
40673: LD_ADDR_VAR 0 18
40677: PUSH
40678: LD_INT 0
40680: ST_TO_ADDR
// fac_list := [ ] ;
40681: LD_ADDR_VAR 0 17
40685: PUSH
40686: EMPTY
40687: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40688: LD_ADDR_VAR 0 6
40692: PUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: CALL_OW 274
40702: PPUSH
40703: LD_VAR 0 2
40707: PPUSH
40708: LD_INT 0
40710: PPUSH
40711: CALL 38277 0 3
40715: PPUSH
40716: LD_INT 30
40718: PUSH
40719: LD_INT 3
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PPUSH
40726: CALL_OW 72
40730: ST_TO_ADDR
// if not factories then
40731: LD_VAR 0 6
40735: NOT
40736: IFFALSE 40740
// exit ;
40738: GO 41706
// for i in factories do
40740: LD_ADDR_VAR 0 8
40744: PUSH
40745: LD_VAR 0 6
40749: PUSH
40750: FOR_IN
40751: IFFALSE 40776
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40753: LD_ADDR_VAR 0 17
40757: PUSH
40758: LD_VAR 0 17
40762: PUSH
40763: LD_VAR 0 8
40767: PPUSH
40768: CALL_OW 478
40772: UNION
40773: ST_TO_ADDR
40774: GO 40750
40776: POP
40777: POP
// if not fac_list then
40778: LD_VAR 0 17
40782: NOT
40783: IFFALSE 40787
// exit ;
40785: GO 41706
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40787: LD_ADDR_VAR 0 5
40791: PUSH
40792: LD_INT 4
40794: PUSH
40795: LD_INT 5
40797: PUSH
40798: LD_INT 9
40800: PUSH
40801: LD_INT 10
40803: PUSH
40804: LD_INT 6
40806: PUSH
40807: LD_INT 7
40809: PUSH
40810: LD_INT 11
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 27
40824: PUSH
40825: LD_INT 28
40827: PUSH
40828: LD_INT 26
40830: PUSH
40831: LD_INT 30
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 43
40842: PUSH
40843: LD_INT 44
40845: PUSH
40846: LD_INT 46
40848: PUSH
40849: LD_INT 45
40851: PUSH
40852: LD_INT 47
40854: PUSH
40855: LD_INT 49
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: PUSH
40871: LD_VAR 0 12
40875: ARRAY
40876: ST_TO_ADDR
// list := list isect fac_list ;
40877: LD_ADDR_VAR 0 5
40881: PUSH
40882: LD_VAR 0 5
40886: PUSH
40887: LD_VAR 0 17
40891: ISECT
40892: ST_TO_ADDR
// if not list then
40893: LD_VAR 0 5
40897: NOT
40898: IFFALSE 40902
// exit ;
40900: GO 41706
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40902: LD_VAR 0 12
40906: PUSH
40907: LD_INT 3
40909: EQUAL
40910: PUSH
40911: LD_INT 49
40913: PUSH
40914: LD_VAR 0 5
40918: IN
40919: AND
40920: PUSH
40921: LD_INT 31
40923: PPUSH
40924: LD_VAR 0 16
40928: PPUSH
40929: CALL_OW 321
40933: PUSH
40934: LD_INT 2
40936: EQUAL
40937: AND
40938: IFFALSE 40998
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40940: LD_INT 22
40942: PUSH
40943: LD_VAR 0 16
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 35
40954: PUSH
40955: LD_INT 49
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 91
40964: PUSH
40965: LD_VAR 0 1
40969: PUSH
40970: LD_INT 10
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: LIST
40982: PPUSH
40983: CALL_OW 69
40987: NOT
40988: IFFALSE 40998
// weapon := ru_time_lapser ;
40990: LD_ADDR_VAR 0 18
40994: PUSH
40995: LD_INT 49
40997: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40998: LD_VAR 0 12
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: IN
41013: PUSH
41014: LD_INT 11
41016: PUSH
41017: LD_VAR 0 5
41021: IN
41022: PUSH
41023: LD_INT 30
41025: PUSH
41026: LD_VAR 0 5
41030: IN
41031: OR
41032: AND
41033: PUSH
41034: LD_INT 6
41036: PPUSH
41037: LD_VAR 0 16
41041: PPUSH
41042: CALL_OW 321
41046: PUSH
41047: LD_INT 2
41049: EQUAL
41050: AND
41051: IFFALSE 41216
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41053: LD_INT 22
41055: PUSH
41056: LD_VAR 0 16
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: LD_INT 35
41070: PUSH
41071: LD_INT 11
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 35
41080: PUSH
41081: LD_INT 30
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 91
41095: PUSH
41096: LD_VAR 0 1
41100: PUSH
41101: LD_INT 18
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: PPUSH
41114: CALL_OW 69
41118: NOT
41119: PUSH
41120: LD_INT 22
41122: PUSH
41123: LD_VAR 0 16
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: LD_INT 30
41137: PUSH
41138: LD_INT 32
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 30
41147: PUSH
41148: LD_INT 33
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 91
41162: PUSH
41163: LD_VAR 0 1
41167: PUSH
41168: LD_INT 12
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: PUSH
41181: EMPTY
41182: LIST
41183: PPUSH
41184: CALL_OW 69
41188: PUSH
41189: LD_INT 2
41191: GREATER
41192: AND
41193: IFFALSE 41216
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41195: LD_ADDR_VAR 0 18
41199: PUSH
41200: LD_INT 11
41202: PUSH
41203: LD_INT 30
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_VAR 0 12
41214: ARRAY
41215: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41216: LD_VAR 0 18
41220: NOT
41221: PUSH
41222: LD_INT 40
41224: PPUSH
41225: LD_VAR 0 16
41229: PPUSH
41230: CALL_OW 321
41234: PUSH
41235: LD_INT 2
41237: EQUAL
41238: AND
41239: PUSH
41240: LD_INT 7
41242: PUSH
41243: LD_VAR 0 5
41247: IN
41248: PUSH
41249: LD_INT 28
41251: PUSH
41252: LD_VAR 0 5
41256: IN
41257: OR
41258: PUSH
41259: LD_INT 45
41261: PUSH
41262: LD_VAR 0 5
41266: IN
41267: OR
41268: AND
41269: IFFALSE 41523
// begin hex := GetHexInfo ( x , y ) ;
41271: LD_ADDR_VAR 0 4
41275: PUSH
41276: LD_VAR 0 10
41280: PPUSH
41281: LD_VAR 0 11
41285: PPUSH
41286: CALL_OW 546
41290: ST_TO_ADDR
// if hex [ 1 ] then
41291: LD_VAR 0 4
41295: PUSH
41296: LD_INT 1
41298: ARRAY
41299: IFFALSE 41303
// exit ;
41301: GO 41706
// height := hex [ 2 ] ;
41303: LD_ADDR_VAR 0 15
41307: PUSH
41308: LD_VAR 0 4
41312: PUSH
41313: LD_INT 2
41315: ARRAY
41316: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41317: LD_ADDR_VAR 0 14
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: LD_INT 3
41330: PUSH
41331: LD_INT 5
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: ST_TO_ADDR
// for i in tmp do
41340: LD_ADDR_VAR 0 8
41344: PUSH
41345: LD_VAR 0 14
41349: PUSH
41350: FOR_IN
41351: IFFALSE 41521
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41353: LD_ADDR_VAR 0 9
41357: PUSH
41358: LD_VAR 0 10
41362: PPUSH
41363: LD_VAR 0 8
41367: PPUSH
41368: LD_INT 5
41370: PPUSH
41371: CALL_OW 272
41375: PUSH
41376: LD_VAR 0 11
41380: PPUSH
41381: LD_VAR 0 8
41385: PPUSH
41386: LD_INT 5
41388: PPUSH
41389: CALL_OW 273
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41398: LD_VAR 0 9
41402: PUSH
41403: LD_INT 1
41405: ARRAY
41406: PPUSH
41407: LD_VAR 0 9
41411: PUSH
41412: LD_INT 2
41414: ARRAY
41415: PPUSH
41416: CALL_OW 488
41420: IFFALSE 41519
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41422: LD_ADDR_VAR 0 4
41426: PUSH
41427: LD_VAR 0 9
41431: PUSH
41432: LD_INT 1
41434: ARRAY
41435: PPUSH
41436: LD_VAR 0 9
41440: PUSH
41441: LD_INT 2
41443: ARRAY
41444: PPUSH
41445: CALL_OW 546
41449: ST_TO_ADDR
// if hex [ 1 ] then
41450: LD_VAR 0 4
41454: PUSH
41455: LD_INT 1
41457: ARRAY
41458: IFFALSE 41462
// continue ;
41460: GO 41350
// h := hex [ 2 ] ;
41462: LD_ADDR_VAR 0 13
41466: PUSH
41467: LD_VAR 0 4
41471: PUSH
41472: LD_INT 2
41474: ARRAY
41475: ST_TO_ADDR
// if h + 7 < height then
41476: LD_VAR 0 13
41480: PUSH
41481: LD_INT 7
41483: PLUS
41484: PUSH
41485: LD_VAR 0 15
41489: LESS
41490: IFFALSE 41519
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41492: LD_ADDR_VAR 0 18
41496: PUSH
41497: LD_INT 7
41499: PUSH
41500: LD_INT 28
41502: PUSH
41503: LD_INT 45
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: PUSH
41511: LD_VAR 0 12
41515: ARRAY
41516: ST_TO_ADDR
// break ;
41517: GO 41521
// end ; end ; end ;
41519: GO 41350
41521: POP
41522: POP
// end ; if not weapon then
41523: LD_VAR 0 18
41527: NOT
41528: IFFALSE 41588
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41530: LD_ADDR_VAR 0 5
41534: PUSH
41535: LD_VAR 0 5
41539: PUSH
41540: LD_INT 11
41542: PUSH
41543: LD_INT 30
41545: PUSH
41546: LD_INT 49
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: DIFF
41554: ST_TO_ADDR
// if not list then
41555: LD_VAR 0 5
41559: NOT
41560: IFFALSE 41564
// exit ;
41562: GO 41706
// weapon := list [ rand ( 1 , list ) ] ;
41564: LD_ADDR_VAR 0 18
41568: PUSH
41569: LD_VAR 0 5
41573: PUSH
41574: LD_INT 1
41576: PPUSH
41577: LD_VAR 0 5
41581: PPUSH
41582: CALL_OW 12
41586: ARRAY
41587: ST_TO_ADDR
// end ; if weapon then
41588: LD_VAR 0 18
41592: IFFALSE 41706
// begin tmp := CostOfWeapon ( weapon ) ;
41594: LD_ADDR_VAR 0 14
41598: PUSH
41599: LD_VAR 0 18
41603: PPUSH
41604: CALL_OW 451
41608: ST_TO_ADDR
// j := GetBase ( tower ) ;
41609: LD_ADDR_VAR 0 9
41613: PUSH
41614: LD_VAR 0 1
41618: PPUSH
41619: CALL_OW 274
41623: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41624: LD_VAR 0 9
41628: PPUSH
41629: LD_INT 1
41631: PPUSH
41632: CALL_OW 275
41636: PUSH
41637: LD_VAR 0 14
41641: PUSH
41642: LD_INT 1
41644: ARRAY
41645: GREATEREQUAL
41646: PUSH
41647: LD_VAR 0 9
41651: PPUSH
41652: LD_INT 2
41654: PPUSH
41655: CALL_OW 275
41659: PUSH
41660: LD_VAR 0 14
41664: PUSH
41665: LD_INT 2
41667: ARRAY
41668: GREATEREQUAL
41669: AND
41670: PUSH
41671: LD_VAR 0 9
41675: PPUSH
41676: LD_INT 3
41678: PPUSH
41679: CALL_OW 275
41683: PUSH
41684: LD_VAR 0 14
41688: PUSH
41689: LD_INT 3
41691: ARRAY
41692: GREATEREQUAL
41693: AND
41694: IFFALSE 41706
// result := weapon ;
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_VAR 0 18
41705: ST_TO_ADDR
// end ; end ;
41706: LD_VAR 0 3
41710: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41711: LD_INT 0
41713: PPUSH
41714: PPUSH
// result := true ;
41715: LD_ADDR_VAR 0 3
41719: PUSH
41720: LD_INT 1
41722: ST_TO_ADDR
// if array1 = array2 then
41723: LD_VAR 0 1
41727: PUSH
41728: LD_VAR 0 2
41732: EQUAL
41733: IFFALSE 41793
// begin for i = 1 to array1 do
41735: LD_ADDR_VAR 0 4
41739: PUSH
41740: DOUBLE
41741: LD_INT 1
41743: DEC
41744: ST_TO_ADDR
41745: LD_VAR 0 1
41749: PUSH
41750: FOR_TO
41751: IFFALSE 41789
// if array1 [ i ] <> array2 [ i ] then
41753: LD_VAR 0 1
41757: PUSH
41758: LD_VAR 0 4
41762: ARRAY
41763: PUSH
41764: LD_VAR 0 2
41768: PUSH
41769: LD_VAR 0 4
41773: ARRAY
41774: NONEQUAL
41775: IFFALSE 41787
// begin result := false ;
41777: LD_ADDR_VAR 0 3
41781: PUSH
41782: LD_INT 0
41784: ST_TO_ADDR
// break ;
41785: GO 41789
// end ;
41787: GO 41750
41789: POP
41790: POP
// end else
41791: GO 41801
// result := false ;
41793: LD_ADDR_VAR 0 3
41797: PUSH
41798: LD_INT 0
41800: ST_TO_ADDR
// end ;
41801: LD_VAR 0 3
41805: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41806: LD_INT 0
41808: PPUSH
41809: PPUSH
// if not array1 or not array2 then
41810: LD_VAR 0 1
41814: NOT
41815: PUSH
41816: LD_VAR 0 2
41820: NOT
41821: OR
41822: IFFALSE 41826
// exit ;
41824: GO 41890
// result := true ;
41826: LD_ADDR_VAR 0 3
41830: PUSH
41831: LD_INT 1
41833: ST_TO_ADDR
// for i = 1 to array1 do
41834: LD_ADDR_VAR 0 4
41838: PUSH
41839: DOUBLE
41840: LD_INT 1
41842: DEC
41843: ST_TO_ADDR
41844: LD_VAR 0 1
41848: PUSH
41849: FOR_TO
41850: IFFALSE 41888
// if array1 [ i ] <> array2 [ i ] then
41852: LD_VAR 0 1
41856: PUSH
41857: LD_VAR 0 4
41861: ARRAY
41862: PUSH
41863: LD_VAR 0 2
41867: PUSH
41868: LD_VAR 0 4
41872: ARRAY
41873: NONEQUAL
41874: IFFALSE 41886
// begin result := false ;
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_INT 0
41883: ST_TO_ADDR
// break ;
41884: GO 41888
// end ;
41886: GO 41849
41888: POP
41889: POP
// end ;
41890: LD_VAR 0 3
41894: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41895: LD_INT 0
41897: PPUSH
41898: PPUSH
41899: PPUSH
// pom := GetBase ( fac ) ;
41900: LD_ADDR_VAR 0 5
41904: PUSH
41905: LD_VAR 0 1
41909: PPUSH
41910: CALL_OW 274
41914: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41915: LD_ADDR_VAR 0 4
41919: PUSH
41920: LD_VAR 0 2
41924: PUSH
41925: LD_INT 1
41927: ARRAY
41928: PPUSH
41929: LD_VAR 0 2
41933: PUSH
41934: LD_INT 2
41936: ARRAY
41937: PPUSH
41938: LD_VAR 0 2
41942: PUSH
41943: LD_INT 3
41945: ARRAY
41946: PPUSH
41947: LD_VAR 0 2
41951: PUSH
41952: LD_INT 4
41954: ARRAY
41955: PPUSH
41956: CALL_OW 449
41960: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41961: LD_ADDR_VAR 0 3
41965: PUSH
41966: LD_VAR 0 5
41970: PPUSH
41971: LD_INT 1
41973: PPUSH
41974: CALL_OW 275
41978: PUSH
41979: LD_VAR 0 4
41983: PUSH
41984: LD_INT 1
41986: ARRAY
41987: GREATEREQUAL
41988: PUSH
41989: LD_VAR 0 5
41993: PPUSH
41994: LD_INT 2
41996: PPUSH
41997: CALL_OW 275
42001: PUSH
42002: LD_VAR 0 4
42006: PUSH
42007: LD_INT 2
42009: ARRAY
42010: GREATEREQUAL
42011: AND
42012: PUSH
42013: LD_VAR 0 5
42017: PPUSH
42018: LD_INT 3
42020: PPUSH
42021: CALL_OW 275
42025: PUSH
42026: LD_VAR 0 4
42030: PUSH
42031: LD_INT 3
42033: ARRAY
42034: GREATEREQUAL
42035: AND
42036: ST_TO_ADDR
// end ;
42037: LD_VAR 0 3
42041: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42042: LD_INT 0
42044: PPUSH
42045: PPUSH
42046: PPUSH
42047: PPUSH
// pom := GetBase ( building ) ;
42048: LD_ADDR_VAR 0 3
42052: PUSH
42053: LD_VAR 0 1
42057: PPUSH
42058: CALL_OW 274
42062: ST_TO_ADDR
// if not pom then
42063: LD_VAR 0 3
42067: NOT
42068: IFFALSE 42072
// exit ;
42070: GO 42242
// btype := GetBType ( building ) ;
42072: LD_ADDR_VAR 0 5
42076: PUSH
42077: LD_VAR 0 1
42081: PPUSH
42082: CALL_OW 266
42086: ST_TO_ADDR
// if btype = b_armoury then
42087: LD_VAR 0 5
42091: PUSH
42092: LD_INT 4
42094: EQUAL
42095: IFFALSE 42105
// btype := b_barracks ;
42097: LD_ADDR_VAR 0 5
42101: PUSH
42102: LD_INT 5
42104: ST_TO_ADDR
// if btype = b_depot then
42105: LD_VAR 0 5
42109: PUSH
42110: LD_INT 0
42112: EQUAL
42113: IFFALSE 42123
// btype := b_warehouse ;
42115: LD_ADDR_VAR 0 5
42119: PUSH
42120: LD_INT 1
42122: ST_TO_ADDR
// if btype = b_workshop then
42123: LD_VAR 0 5
42127: PUSH
42128: LD_INT 2
42130: EQUAL
42131: IFFALSE 42141
// btype := b_factory ;
42133: LD_ADDR_VAR 0 5
42137: PUSH
42138: LD_INT 3
42140: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42141: LD_ADDR_VAR 0 4
42145: PUSH
42146: LD_VAR 0 5
42150: PPUSH
42151: LD_VAR 0 1
42155: PPUSH
42156: CALL_OW 248
42160: PPUSH
42161: CALL_OW 450
42165: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42166: LD_ADDR_VAR 0 2
42170: PUSH
42171: LD_VAR 0 3
42175: PPUSH
42176: LD_INT 1
42178: PPUSH
42179: CALL_OW 275
42183: PUSH
42184: LD_VAR 0 4
42188: PUSH
42189: LD_INT 1
42191: ARRAY
42192: GREATEREQUAL
42193: PUSH
42194: LD_VAR 0 3
42198: PPUSH
42199: LD_INT 2
42201: PPUSH
42202: CALL_OW 275
42206: PUSH
42207: LD_VAR 0 4
42211: PUSH
42212: LD_INT 2
42214: ARRAY
42215: GREATEREQUAL
42216: AND
42217: PUSH
42218: LD_VAR 0 3
42222: PPUSH
42223: LD_INT 3
42225: PPUSH
42226: CALL_OW 275
42230: PUSH
42231: LD_VAR 0 4
42235: PUSH
42236: LD_INT 3
42238: ARRAY
42239: GREATEREQUAL
42240: AND
42241: ST_TO_ADDR
// end ;
42242: LD_VAR 0 2
42246: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42247: LD_INT 0
42249: PPUSH
42250: PPUSH
42251: PPUSH
// pom := GetBase ( building ) ;
42252: LD_ADDR_VAR 0 4
42256: PUSH
42257: LD_VAR 0 1
42261: PPUSH
42262: CALL_OW 274
42266: ST_TO_ADDR
// if not pom then
42267: LD_VAR 0 4
42271: NOT
42272: IFFALSE 42276
// exit ;
42274: GO 42377
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42276: LD_ADDR_VAR 0 5
42280: PUSH
42281: LD_VAR 0 2
42285: PPUSH
42286: LD_VAR 0 1
42290: PPUSH
42291: CALL_OW 248
42295: PPUSH
42296: CALL_OW 450
42300: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42301: LD_ADDR_VAR 0 3
42305: PUSH
42306: LD_VAR 0 4
42310: PPUSH
42311: LD_INT 1
42313: PPUSH
42314: CALL_OW 275
42318: PUSH
42319: LD_VAR 0 5
42323: PUSH
42324: LD_INT 1
42326: ARRAY
42327: GREATEREQUAL
42328: PUSH
42329: LD_VAR 0 4
42333: PPUSH
42334: LD_INT 2
42336: PPUSH
42337: CALL_OW 275
42341: PUSH
42342: LD_VAR 0 5
42346: PUSH
42347: LD_INT 2
42349: ARRAY
42350: GREATEREQUAL
42351: AND
42352: PUSH
42353: LD_VAR 0 4
42357: PPUSH
42358: LD_INT 3
42360: PPUSH
42361: CALL_OW 275
42365: PUSH
42366: LD_VAR 0 5
42370: PUSH
42371: LD_INT 3
42373: ARRAY
42374: GREATEREQUAL
42375: AND
42376: ST_TO_ADDR
// end ;
42377: LD_VAR 0 3
42381: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42382: LD_INT 0
42384: PPUSH
42385: PPUSH
42386: PPUSH
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
// result := false ;
42395: LD_ADDR_VAR 0 8
42399: PUSH
42400: LD_INT 0
42402: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42403: LD_VAR 0 5
42407: NOT
42408: PUSH
42409: LD_VAR 0 1
42413: NOT
42414: OR
42415: PUSH
42416: LD_VAR 0 2
42420: NOT
42421: OR
42422: PUSH
42423: LD_VAR 0 3
42427: NOT
42428: OR
42429: IFFALSE 42433
// exit ;
42431: GO 43247
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42433: LD_ADDR_VAR 0 14
42437: PUSH
42438: LD_VAR 0 1
42442: PPUSH
42443: LD_VAR 0 2
42447: PPUSH
42448: LD_VAR 0 3
42452: PPUSH
42453: LD_VAR 0 4
42457: PPUSH
42458: LD_VAR 0 5
42462: PUSH
42463: LD_INT 1
42465: ARRAY
42466: PPUSH
42467: CALL_OW 248
42471: PPUSH
42472: LD_INT 0
42474: PPUSH
42475: CALL 44484 0 6
42479: ST_TO_ADDR
// if not hexes then
42480: LD_VAR 0 14
42484: NOT
42485: IFFALSE 42489
// exit ;
42487: GO 43247
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42489: LD_ADDR_VAR 0 17
42493: PUSH
42494: LD_VAR 0 5
42498: PPUSH
42499: LD_INT 22
42501: PUSH
42502: LD_VAR 0 13
42506: PPUSH
42507: CALL_OW 255
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: LD_INT 30
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 30
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PPUSH
42548: CALL_OW 72
42552: ST_TO_ADDR
// for i = 1 to hexes do
42553: LD_ADDR_VAR 0 9
42557: PUSH
42558: DOUBLE
42559: LD_INT 1
42561: DEC
42562: ST_TO_ADDR
42563: LD_VAR 0 14
42567: PUSH
42568: FOR_TO
42569: IFFALSE 43245
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42571: LD_ADDR_VAR 0 13
42575: PUSH
42576: LD_VAR 0 14
42580: PUSH
42581: LD_VAR 0 9
42585: ARRAY
42586: PUSH
42587: LD_INT 1
42589: ARRAY
42590: PPUSH
42591: LD_VAR 0 14
42595: PUSH
42596: LD_VAR 0 9
42600: ARRAY
42601: PUSH
42602: LD_INT 2
42604: ARRAY
42605: PPUSH
42606: CALL_OW 428
42610: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42611: LD_VAR 0 14
42615: PUSH
42616: LD_VAR 0 9
42620: ARRAY
42621: PUSH
42622: LD_INT 1
42624: ARRAY
42625: PPUSH
42626: LD_VAR 0 14
42630: PUSH
42631: LD_VAR 0 9
42635: ARRAY
42636: PUSH
42637: LD_INT 2
42639: ARRAY
42640: PPUSH
42641: CALL_OW 351
42645: PUSH
42646: LD_VAR 0 14
42650: PUSH
42651: LD_VAR 0 9
42655: ARRAY
42656: PUSH
42657: LD_INT 1
42659: ARRAY
42660: PPUSH
42661: LD_VAR 0 14
42665: PUSH
42666: LD_VAR 0 9
42670: ARRAY
42671: PUSH
42672: LD_INT 2
42674: ARRAY
42675: PPUSH
42676: CALL_OW 488
42680: NOT
42681: OR
42682: PUSH
42683: LD_VAR 0 13
42687: PPUSH
42688: CALL_OW 247
42692: PUSH
42693: LD_INT 3
42695: EQUAL
42696: OR
42697: IFFALSE 42703
// exit ;
42699: POP
42700: POP
42701: GO 43247
// if not tmp then
42703: LD_VAR 0 13
42707: NOT
42708: IFFALSE 42712
// continue ;
42710: GO 42568
// result := true ;
42712: LD_ADDR_VAR 0 8
42716: PUSH
42717: LD_INT 1
42719: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42720: LD_VAR 0 6
42724: PUSH
42725: LD_VAR 0 13
42729: PPUSH
42730: CALL_OW 247
42734: PUSH
42735: LD_INT 2
42737: EQUAL
42738: AND
42739: PUSH
42740: LD_VAR 0 13
42744: PPUSH
42745: CALL_OW 263
42749: PUSH
42750: LD_INT 1
42752: EQUAL
42753: AND
42754: IFFALSE 42918
// begin if IsDrivenBy ( tmp ) then
42756: LD_VAR 0 13
42760: PPUSH
42761: CALL_OW 311
42765: IFFALSE 42769
// continue ;
42767: GO 42568
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42769: LD_VAR 0 6
42773: PPUSH
42774: LD_INT 3
42776: PUSH
42777: LD_INT 60
42779: PUSH
42780: EMPTY
42781: LIST
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 3
42789: PUSH
42790: LD_INT 55
42792: PUSH
42793: EMPTY
42794: LIST
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PPUSH
42804: CALL_OW 72
42808: IFFALSE 42916
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42810: LD_ADDR_VAR 0 18
42814: PUSH
42815: LD_VAR 0 6
42819: PPUSH
42820: LD_INT 3
42822: PUSH
42823: LD_INT 60
42825: PUSH
42826: EMPTY
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: LD_INT 55
42838: PUSH
42839: EMPTY
42840: LIST
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PPUSH
42850: CALL_OW 72
42854: PUSH
42855: LD_INT 1
42857: ARRAY
42858: ST_TO_ADDR
// if IsInUnit ( driver ) then
42859: LD_VAR 0 18
42863: PPUSH
42864: CALL_OW 310
42868: IFFALSE 42879
// ComExit ( driver ) ;
42870: LD_VAR 0 18
42874: PPUSH
42875: CALL 67668 0 1
// AddComEnterUnit ( driver , tmp ) ;
42879: LD_VAR 0 18
42883: PPUSH
42884: LD_VAR 0 13
42888: PPUSH
42889: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42893: LD_VAR 0 18
42897: PPUSH
42898: LD_VAR 0 7
42902: PPUSH
42903: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42907: LD_VAR 0 18
42911: PPUSH
42912: CALL_OW 181
// end ; continue ;
42916: GO 42568
// end ; if not cleaners or not tmp in cleaners then
42918: LD_VAR 0 6
42922: NOT
42923: PUSH
42924: LD_VAR 0 13
42928: PUSH
42929: LD_VAR 0 6
42933: IN
42934: NOT
42935: OR
42936: IFFALSE 43243
// begin if dep then
42938: LD_VAR 0 17
42942: IFFALSE 43078
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42944: LD_ADDR_VAR 0 16
42948: PUSH
42949: LD_VAR 0 17
42953: PUSH
42954: LD_INT 1
42956: ARRAY
42957: PPUSH
42958: CALL_OW 250
42962: PPUSH
42963: LD_VAR 0 17
42967: PUSH
42968: LD_INT 1
42970: ARRAY
42971: PPUSH
42972: CALL_OW 254
42976: PPUSH
42977: LD_INT 5
42979: PPUSH
42980: CALL_OW 272
42984: PUSH
42985: LD_VAR 0 17
42989: PUSH
42990: LD_INT 1
42992: ARRAY
42993: PPUSH
42994: CALL_OW 251
42998: PPUSH
42999: LD_VAR 0 17
43003: PUSH
43004: LD_INT 1
43006: ARRAY
43007: PPUSH
43008: CALL_OW 254
43012: PPUSH
43013: LD_INT 5
43015: PPUSH
43016: CALL_OW 273
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43025: LD_VAR 0 16
43029: PUSH
43030: LD_INT 1
43032: ARRAY
43033: PPUSH
43034: LD_VAR 0 16
43038: PUSH
43039: LD_INT 2
43041: ARRAY
43042: PPUSH
43043: CALL_OW 488
43047: IFFALSE 43078
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43049: LD_VAR 0 13
43053: PPUSH
43054: LD_VAR 0 16
43058: PUSH
43059: LD_INT 1
43061: ARRAY
43062: PPUSH
43063: LD_VAR 0 16
43067: PUSH
43068: LD_INT 2
43070: ARRAY
43071: PPUSH
43072: CALL_OW 111
// continue ;
43076: GO 42568
// end ; end ; r := GetDir ( tmp ) ;
43078: LD_ADDR_VAR 0 15
43082: PUSH
43083: LD_VAR 0 13
43087: PPUSH
43088: CALL_OW 254
43092: ST_TO_ADDR
// if r = 5 then
43093: LD_VAR 0 15
43097: PUSH
43098: LD_INT 5
43100: EQUAL
43101: IFFALSE 43111
// r := 0 ;
43103: LD_ADDR_VAR 0 15
43107: PUSH
43108: LD_INT 0
43110: ST_TO_ADDR
// for j = r to 5 do
43111: LD_ADDR_VAR 0 10
43115: PUSH
43116: DOUBLE
43117: LD_VAR 0 15
43121: DEC
43122: ST_TO_ADDR
43123: LD_INT 5
43125: PUSH
43126: FOR_TO
43127: IFFALSE 43241
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43129: LD_ADDR_VAR 0 11
43133: PUSH
43134: LD_VAR 0 13
43138: PPUSH
43139: CALL_OW 250
43143: PPUSH
43144: LD_VAR 0 10
43148: PPUSH
43149: LD_INT 2
43151: PPUSH
43152: CALL_OW 272
43156: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43157: LD_ADDR_VAR 0 12
43161: PUSH
43162: LD_VAR 0 13
43166: PPUSH
43167: CALL_OW 251
43171: PPUSH
43172: LD_VAR 0 10
43176: PPUSH
43177: LD_INT 2
43179: PPUSH
43180: CALL_OW 273
43184: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43185: LD_VAR 0 11
43189: PPUSH
43190: LD_VAR 0 12
43194: PPUSH
43195: CALL_OW 488
43199: PUSH
43200: LD_VAR 0 11
43204: PPUSH
43205: LD_VAR 0 12
43209: PPUSH
43210: CALL_OW 428
43214: NOT
43215: AND
43216: IFFALSE 43239
// begin ComMoveXY ( tmp , _x , _y ) ;
43218: LD_VAR 0 13
43222: PPUSH
43223: LD_VAR 0 11
43227: PPUSH
43228: LD_VAR 0 12
43232: PPUSH
43233: CALL_OW 111
// break ;
43237: GO 43241
// end ; end ;
43239: GO 43126
43241: POP
43242: POP
// end ; end ;
43243: GO 42568
43245: POP
43246: POP
// end ;
43247: LD_VAR 0 8
43251: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43252: LD_INT 0
43254: PPUSH
// result := true ;
43255: LD_ADDR_VAR 0 3
43259: PUSH
43260: LD_INT 1
43262: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43263: LD_VAR 0 2
43267: PUSH
43268: LD_INT 24
43270: DOUBLE
43271: EQUAL
43272: IFTRUE 43282
43274: LD_INT 33
43276: DOUBLE
43277: EQUAL
43278: IFTRUE 43282
43280: GO 43307
43282: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43283: LD_ADDR_VAR 0 3
43287: PUSH
43288: LD_INT 32
43290: PPUSH
43291: LD_VAR 0 1
43295: PPUSH
43296: CALL_OW 321
43300: PUSH
43301: LD_INT 2
43303: EQUAL
43304: ST_TO_ADDR
43305: GO 43627
43307: LD_INT 20
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43340
43315: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_INT 6
43323: PPUSH
43324: LD_VAR 0 1
43328: PPUSH
43329: CALL_OW 321
43333: PUSH
43334: LD_INT 2
43336: EQUAL
43337: ST_TO_ADDR
43338: GO 43627
43340: LD_INT 22
43342: DOUBLE
43343: EQUAL
43344: IFTRUE 43354
43346: LD_INT 36
43348: DOUBLE
43349: EQUAL
43350: IFTRUE 43354
43352: GO 43379
43354: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43355: LD_ADDR_VAR 0 3
43359: PUSH
43360: LD_INT 15
43362: PPUSH
43363: LD_VAR 0 1
43367: PPUSH
43368: CALL_OW 321
43372: PUSH
43373: LD_INT 2
43375: EQUAL
43376: ST_TO_ADDR
43377: GO 43627
43379: LD_INT 30
43381: DOUBLE
43382: EQUAL
43383: IFTRUE 43387
43385: GO 43412
43387: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43388: LD_ADDR_VAR 0 3
43392: PUSH
43393: LD_INT 20
43395: PPUSH
43396: LD_VAR 0 1
43400: PPUSH
43401: CALL_OW 321
43405: PUSH
43406: LD_INT 2
43408: EQUAL
43409: ST_TO_ADDR
43410: GO 43627
43412: LD_INT 28
43414: DOUBLE
43415: EQUAL
43416: IFTRUE 43426
43418: LD_INT 21
43420: DOUBLE
43421: EQUAL
43422: IFTRUE 43426
43424: GO 43451
43426: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43427: LD_ADDR_VAR 0 3
43431: PUSH
43432: LD_INT 21
43434: PPUSH
43435: LD_VAR 0 1
43439: PPUSH
43440: CALL_OW 321
43444: PUSH
43445: LD_INT 2
43447: EQUAL
43448: ST_TO_ADDR
43449: GO 43627
43451: LD_INT 16
43453: DOUBLE
43454: EQUAL
43455: IFTRUE 43459
43457: GO 43486
43459: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43460: LD_ADDR_VAR 0 3
43464: PUSH
43465: LD_EXP 33
43469: PPUSH
43470: LD_VAR 0 1
43474: PPUSH
43475: CALL_OW 321
43479: PUSH
43480: LD_INT 2
43482: EQUAL
43483: ST_TO_ADDR
43484: GO 43627
43486: LD_INT 19
43488: DOUBLE
43489: EQUAL
43490: IFTRUE 43500
43492: LD_INT 23
43494: DOUBLE
43495: EQUAL
43496: IFTRUE 43500
43498: GO 43527
43500: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43501: LD_ADDR_VAR 0 3
43505: PUSH
43506: LD_EXP 32
43510: PPUSH
43511: LD_VAR 0 1
43515: PPUSH
43516: CALL_OW 321
43520: PUSH
43521: LD_INT 2
43523: EQUAL
43524: ST_TO_ADDR
43525: GO 43627
43527: LD_INT 17
43529: DOUBLE
43530: EQUAL
43531: IFTRUE 43535
43533: GO 43560
43535: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43536: LD_ADDR_VAR 0 3
43540: PUSH
43541: LD_INT 39
43543: PPUSH
43544: LD_VAR 0 1
43548: PPUSH
43549: CALL_OW 321
43553: PUSH
43554: LD_INT 2
43556: EQUAL
43557: ST_TO_ADDR
43558: GO 43627
43560: LD_INT 18
43562: DOUBLE
43563: EQUAL
43564: IFTRUE 43568
43566: GO 43593
43568: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43569: LD_ADDR_VAR 0 3
43573: PUSH
43574: LD_INT 40
43576: PPUSH
43577: LD_VAR 0 1
43581: PPUSH
43582: CALL_OW 321
43586: PUSH
43587: LD_INT 2
43589: EQUAL
43590: ST_TO_ADDR
43591: GO 43627
43593: LD_INT 27
43595: DOUBLE
43596: EQUAL
43597: IFTRUE 43601
43599: GO 43626
43601: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43602: LD_ADDR_VAR 0 3
43606: PUSH
43607: LD_INT 35
43609: PPUSH
43610: LD_VAR 0 1
43614: PPUSH
43615: CALL_OW 321
43619: PUSH
43620: LD_INT 2
43622: EQUAL
43623: ST_TO_ADDR
43624: GO 43627
43626: POP
// end ;
43627: LD_VAR 0 3
43631: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43632: LD_INT 0
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
// result := false ;
43645: LD_ADDR_VAR 0 6
43649: PUSH
43650: LD_INT 0
43652: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43653: LD_VAR 0 1
43657: NOT
43658: PUSH
43659: LD_VAR 0 1
43663: PPUSH
43664: CALL_OW 266
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: IN
43679: NOT
43680: OR
43681: PUSH
43682: LD_VAR 0 2
43686: NOT
43687: OR
43688: PUSH
43689: LD_VAR 0 5
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 3
43705: PUSH
43706: LD_INT 4
43708: PUSH
43709: LD_INT 5
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: IN
43720: NOT
43721: OR
43722: PUSH
43723: LD_VAR 0 3
43727: PPUSH
43728: LD_VAR 0 4
43732: PPUSH
43733: CALL_OW 488
43737: NOT
43738: OR
43739: IFFALSE 43743
// exit ;
43741: GO 44479
// side := GetSide ( depot ) ;
43743: LD_ADDR_VAR 0 9
43747: PUSH
43748: LD_VAR 0 1
43752: PPUSH
43753: CALL_OW 255
43757: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43758: LD_VAR 0 9
43762: PPUSH
43763: LD_VAR 0 2
43767: PPUSH
43768: CALL 43252 0 2
43772: NOT
43773: IFFALSE 43777
// exit ;
43775: GO 44479
// pom := GetBase ( depot ) ;
43777: LD_ADDR_VAR 0 10
43781: PUSH
43782: LD_VAR 0 1
43786: PPUSH
43787: CALL_OW 274
43791: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43792: LD_ADDR_VAR 0 11
43796: PUSH
43797: LD_VAR 0 2
43801: PPUSH
43802: LD_VAR 0 1
43806: PPUSH
43807: CALL_OW 248
43811: PPUSH
43812: CALL_OW 450
43816: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43817: LD_VAR 0 10
43821: PPUSH
43822: LD_INT 1
43824: PPUSH
43825: CALL_OW 275
43829: PUSH
43830: LD_VAR 0 11
43834: PUSH
43835: LD_INT 1
43837: ARRAY
43838: GREATEREQUAL
43839: PUSH
43840: LD_VAR 0 10
43844: PPUSH
43845: LD_INT 2
43847: PPUSH
43848: CALL_OW 275
43852: PUSH
43853: LD_VAR 0 11
43857: PUSH
43858: LD_INT 2
43860: ARRAY
43861: GREATEREQUAL
43862: AND
43863: PUSH
43864: LD_VAR 0 10
43868: PPUSH
43869: LD_INT 3
43871: PPUSH
43872: CALL_OW 275
43876: PUSH
43877: LD_VAR 0 11
43881: PUSH
43882: LD_INT 3
43884: ARRAY
43885: GREATEREQUAL
43886: AND
43887: NOT
43888: IFFALSE 43892
// exit ;
43890: GO 44479
// if GetBType ( depot ) = b_depot then
43892: LD_VAR 0 1
43896: PPUSH
43897: CALL_OW 266
43901: PUSH
43902: LD_INT 0
43904: EQUAL
43905: IFFALSE 43917
// dist := 28 else
43907: LD_ADDR_VAR 0 14
43911: PUSH
43912: LD_INT 28
43914: ST_TO_ADDR
43915: GO 43925
// dist := 36 ;
43917: LD_ADDR_VAR 0 14
43921: PUSH
43922: LD_INT 36
43924: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43925: LD_VAR 0 1
43929: PPUSH
43930: LD_VAR 0 3
43934: PPUSH
43935: LD_VAR 0 4
43939: PPUSH
43940: CALL_OW 297
43944: PUSH
43945: LD_VAR 0 14
43949: GREATER
43950: IFFALSE 43954
// exit ;
43952: GO 44479
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43954: LD_ADDR_VAR 0 12
43958: PUSH
43959: LD_VAR 0 2
43963: PPUSH
43964: LD_VAR 0 3
43968: PPUSH
43969: LD_VAR 0 4
43973: PPUSH
43974: LD_VAR 0 5
43978: PPUSH
43979: LD_VAR 0 1
43983: PPUSH
43984: CALL_OW 248
43988: PPUSH
43989: LD_INT 0
43991: PPUSH
43992: CALL 44484 0 6
43996: ST_TO_ADDR
// if not hexes then
43997: LD_VAR 0 12
44001: NOT
44002: IFFALSE 44006
// exit ;
44004: GO 44479
// hex := GetHexInfo ( x , y ) ;
44006: LD_ADDR_VAR 0 15
44010: PUSH
44011: LD_VAR 0 3
44015: PPUSH
44016: LD_VAR 0 4
44020: PPUSH
44021: CALL_OW 546
44025: ST_TO_ADDR
// if hex [ 1 ] then
44026: LD_VAR 0 15
44030: PUSH
44031: LD_INT 1
44033: ARRAY
44034: IFFALSE 44038
// exit ;
44036: GO 44479
// height := hex [ 2 ] ;
44038: LD_ADDR_VAR 0 13
44042: PUSH
44043: LD_VAR 0 15
44047: PUSH
44048: LD_INT 2
44050: ARRAY
44051: ST_TO_ADDR
// for i = 1 to hexes do
44052: LD_ADDR_VAR 0 7
44056: PUSH
44057: DOUBLE
44058: LD_INT 1
44060: DEC
44061: ST_TO_ADDR
44062: LD_VAR 0 12
44066: PUSH
44067: FOR_TO
44068: IFFALSE 44398
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44070: LD_VAR 0 12
44074: PUSH
44075: LD_VAR 0 7
44079: ARRAY
44080: PUSH
44081: LD_INT 1
44083: ARRAY
44084: PPUSH
44085: LD_VAR 0 12
44089: PUSH
44090: LD_VAR 0 7
44094: ARRAY
44095: PUSH
44096: LD_INT 2
44098: ARRAY
44099: PPUSH
44100: CALL_OW 488
44104: NOT
44105: PUSH
44106: LD_VAR 0 12
44110: PUSH
44111: LD_VAR 0 7
44115: ARRAY
44116: PUSH
44117: LD_INT 1
44119: ARRAY
44120: PPUSH
44121: LD_VAR 0 12
44125: PUSH
44126: LD_VAR 0 7
44130: ARRAY
44131: PUSH
44132: LD_INT 2
44134: ARRAY
44135: PPUSH
44136: CALL_OW 428
44140: PUSH
44141: LD_INT 0
44143: GREATER
44144: OR
44145: PUSH
44146: LD_VAR 0 12
44150: PUSH
44151: LD_VAR 0 7
44155: ARRAY
44156: PUSH
44157: LD_INT 1
44159: ARRAY
44160: PPUSH
44161: LD_VAR 0 12
44165: PUSH
44166: LD_VAR 0 7
44170: ARRAY
44171: PUSH
44172: LD_INT 2
44174: ARRAY
44175: PPUSH
44176: CALL_OW 351
44180: OR
44181: IFFALSE 44187
// exit ;
44183: POP
44184: POP
44185: GO 44479
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44187: LD_ADDR_VAR 0 8
44191: PUSH
44192: LD_VAR 0 12
44196: PUSH
44197: LD_VAR 0 7
44201: ARRAY
44202: PUSH
44203: LD_INT 1
44205: ARRAY
44206: PPUSH
44207: LD_VAR 0 12
44211: PUSH
44212: LD_VAR 0 7
44216: ARRAY
44217: PUSH
44218: LD_INT 2
44220: ARRAY
44221: PPUSH
44222: CALL_OW 546
44226: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44227: LD_VAR 0 8
44231: PUSH
44232: LD_INT 1
44234: ARRAY
44235: PUSH
44236: LD_VAR 0 8
44240: PUSH
44241: LD_INT 2
44243: ARRAY
44244: PUSH
44245: LD_VAR 0 13
44249: PUSH
44250: LD_INT 2
44252: PLUS
44253: GREATER
44254: OR
44255: PUSH
44256: LD_VAR 0 8
44260: PUSH
44261: LD_INT 2
44263: ARRAY
44264: PUSH
44265: LD_VAR 0 13
44269: PUSH
44270: LD_INT 2
44272: MINUS
44273: LESS
44274: OR
44275: PUSH
44276: LD_VAR 0 8
44280: PUSH
44281: LD_INT 3
44283: ARRAY
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: LD_INT 8
44290: PUSH
44291: LD_INT 9
44293: PUSH
44294: LD_INT 10
44296: PUSH
44297: LD_INT 11
44299: PUSH
44300: LD_INT 12
44302: PUSH
44303: LD_INT 13
44305: PUSH
44306: LD_INT 16
44308: PUSH
44309: LD_INT 17
44311: PUSH
44312: LD_INT 18
44314: PUSH
44315: LD_INT 19
44317: PUSH
44318: LD_INT 20
44320: PUSH
44321: LD_INT 21
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: IN
44339: NOT
44340: OR
44341: PUSH
44342: LD_VAR 0 8
44346: PUSH
44347: LD_INT 5
44349: ARRAY
44350: NOT
44351: OR
44352: PUSH
44353: LD_VAR 0 8
44357: PUSH
44358: LD_INT 6
44360: ARRAY
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: LD_INT 7
44370: PUSH
44371: LD_INT 9
44373: PUSH
44374: LD_INT 10
44376: PUSH
44377: LD_INT 11
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: IN
44388: NOT
44389: OR
44390: IFFALSE 44396
// exit ;
44392: POP
44393: POP
44394: GO 44479
// end ;
44396: GO 44067
44398: POP
44399: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44400: LD_VAR 0 9
44404: PPUSH
44405: LD_VAR 0 3
44409: PPUSH
44410: LD_VAR 0 4
44414: PPUSH
44415: LD_INT 20
44417: PPUSH
44418: CALL 36425 0 4
44422: PUSH
44423: LD_INT 4
44425: ARRAY
44426: IFFALSE 44430
// exit ;
44428: GO 44479
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44430: LD_VAR 0 2
44434: PUSH
44435: LD_INT 29
44437: PUSH
44438: LD_INT 30
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: IN
44445: PUSH
44446: LD_VAR 0 3
44450: PPUSH
44451: LD_VAR 0 4
44455: PPUSH
44456: LD_VAR 0 9
44460: PPUSH
44461: CALL_OW 440
44465: NOT
44466: AND
44467: IFFALSE 44471
// exit ;
44469: GO 44479
// result := true ;
44471: LD_ADDR_VAR 0 6
44475: PUSH
44476: LD_INT 1
44478: ST_TO_ADDR
// end ;
44479: LD_VAR 0 6
44483: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44484: LD_INT 0
44486: PPUSH
44487: PPUSH
44488: PPUSH
44489: PPUSH
44490: PPUSH
44491: PPUSH
44492: PPUSH
44493: PPUSH
44494: PPUSH
44495: PPUSH
44496: PPUSH
44497: PPUSH
44498: PPUSH
44499: PPUSH
44500: PPUSH
44501: PPUSH
44502: PPUSH
44503: PPUSH
44504: PPUSH
44505: PPUSH
44506: PPUSH
44507: PPUSH
44508: PPUSH
44509: PPUSH
44510: PPUSH
44511: PPUSH
44512: PPUSH
44513: PPUSH
44514: PPUSH
44515: PPUSH
44516: PPUSH
44517: PPUSH
44518: PPUSH
44519: PPUSH
44520: PPUSH
44521: PPUSH
44522: PPUSH
44523: PPUSH
44524: PPUSH
44525: PPUSH
44526: PPUSH
44527: PPUSH
44528: PPUSH
44529: PPUSH
44530: PPUSH
44531: PPUSH
44532: PPUSH
44533: PPUSH
44534: PPUSH
44535: PPUSH
44536: PPUSH
44537: PPUSH
44538: PPUSH
44539: PPUSH
44540: PPUSH
44541: PPUSH
44542: PPUSH
44543: PPUSH
// result = [ ] ;
44544: LD_ADDR_VAR 0 7
44548: PUSH
44549: EMPTY
44550: ST_TO_ADDR
// temp_list = [ ] ;
44551: LD_ADDR_VAR 0 9
44555: PUSH
44556: EMPTY
44557: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44558: LD_VAR 0 4
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: LD_INT 4
44577: PUSH
44578: LD_INT 5
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: IN
44589: NOT
44590: PUSH
44591: LD_VAR 0 1
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: IN
44606: PUSH
44607: LD_VAR 0 5
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 2
44617: PUSH
44618: LD_INT 3
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: IN
44626: NOT
44627: AND
44628: OR
44629: IFFALSE 44633
// exit ;
44631: GO 63024
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44633: LD_VAR 0 1
44637: PUSH
44638: LD_INT 6
44640: PUSH
44641: LD_INT 7
44643: PUSH
44644: LD_INT 8
44646: PUSH
44647: LD_INT 13
44649: PUSH
44650: LD_INT 12
44652: PUSH
44653: LD_INT 15
44655: PUSH
44656: LD_INT 11
44658: PUSH
44659: LD_INT 14
44661: PUSH
44662: LD_INT 10
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: IN
44676: IFFALSE 44686
// btype = b_lab ;
44678: LD_ADDR_VAR 0 1
44682: PUSH
44683: LD_INT 6
44685: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44686: LD_VAR 0 6
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: IN
44705: NOT
44706: PUSH
44707: LD_VAR 0 1
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: LD_INT 3
44723: PUSH
44724: LD_INT 6
44726: PUSH
44727: LD_INT 36
44729: PUSH
44730: LD_INT 4
44732: PUSH
44733: LD_INT 5
44735: PUSH
44736: LD_INT 31
44738: PUSH
44739: LD_INT 32
44741: PUSH
44742: LD_INT 33
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: IN
44758: NOT
44759: PUSH
44760: LD_VAR 0 6
44764: PUSH
44765: LD_INT 1
44767: EQUAL
44768: AND
44769: OR
44770: PUSH
44771: LD_VAR 0 1
44775: PUSH
44776: LD_INT 2
44778: PUSH
44779: LD_INT 3
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: IN
44786: NOT
44787: PUSH
44788: LD_VAR 0 6
44792: PUSH
44793: LD_INT 2
44795: EQUAL
44796: AND
44797: OR
44798: IFFALSE 44808
// mode = 0 ;
44800: LD_ADDR_VAR 0 6
44804: PUSH
44805: LD_INT 0
44807: ST_TO_ADDR
// case mode of 0 :
44808: LD_VAR 0 6
44812: PUSH
44813: LD_INT 0
44815: DOUBLE
44816: EQUAL
44817: IFTRUE 44821
44819: GO 56274
44821: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44822: LD_ADDR_VAR 0 11
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45015: LD_ADDR_VAR 0 12
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 3
45172: NEG
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 3
45183: NEG
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45211: LD_ADDR_VAR 0 13
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: LD_INT 3
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: NEG
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 3
45382: NEG
45383: PUSH
45384: LD_INT 3
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45410: LD_ADDR_VAR 0 14
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 3
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 3
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45606: LD_ADDR_VAR 0 15
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 3
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45799: LD_ADDR_VAR 0 16
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: LD_INT 3
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 3
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45992: LD_ADDR_VAR 0 17
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46222: LD_ADDR_VAR 0 18
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46452: LD_ADDR_VAR 0 19
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46682: LD_ADDR_VAR 0 20
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46912: LD_ADDR_VAR 0 21
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47142: LD_ADDR_VAR 0 22
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47372: LD_ADDR_VAR 0 23
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: LD_INT 3
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 3
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47652: LD_ADDR_VAR 0 24
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 3
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47928: LD_ADDR_VAR 0 25
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: LD_INT 3
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48202: LD_ADDR_VAR 0 26
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 3
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48478: LD_ADDR_VAR 0 27
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48758: LD_ADDR_VAR 0 28
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: NEG
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: LD_INT 3
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 3
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 3
48993: NEG
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49040: LD_ADDR_VAR 0 29
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 3
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 3
49284: NEG
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49319: LD_ADDR_VAR 0 30
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 3
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 3
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49597: LD_ADDR_VAR 0 31
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: LD_INT 3
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 3
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: LD_INT 3
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49875: LD_ADDR_VAR 0 32
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 2
50041: NEG
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 3
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 3
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: LD_INT 3
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 3
50118: NEG
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50153: LD_ADDR_VAR 0 33
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: LD_INT 2
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 3
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 3
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50432: LD_ADDR_VAR 0 34
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 2
50588: NEG
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 3
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 3
50677: NEG
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50712: LD_ADDR_VAR 0 35
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50824: LD_ADDR_VAR 0 36
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: LD_INT 2
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50936: LD_ADDR_VAR 0 37
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51048: LD_ADDR_VAR 0 38
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51160: LD_ADDR_VAR 0 39
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51272: LD_ADDR_VAR 0 40
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51384: LD_ADDR_VAR 0 41
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 3
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: LD_INT 3
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: LD_INT 3
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 3
51658: NEG
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: LD_INT 3
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51734: LD_ADDR_VAR 0 42
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: LD_INT 3
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 3
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: LD_INT 3
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 3
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 3
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 3
52031: NEG
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 3
52043: NEG
52044: PUSH
52045: LD_INT 3
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52084: LD_ADDR_VAR 0 43
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: LD_INT 3
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 3
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 3
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 3
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 3
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52432: LD_ADDR_VAR 0 44
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 3
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 3
52675: PUSH
52676: LD_INT 3
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: LD_INT 3
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: NEG
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 3
52741: NEG
52742: PUSH
52743: LD_INT 3
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52782: LD_ADDR_VAR 0 45
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 2
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: LD_INT 3
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 3
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 3
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 3
53079: NEG
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: LD_INT 3
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53132: LD_ADDR_VAR 0 46
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 3
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53480: LD_ADDR_VAR 0 47
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53631: LD_ADDR_VAR 0 48
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53778: LD_ADDR_VAR 0 49
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53922: LD_ADDR_VAR 0 50
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54066: LD_ADDR_VAR 0 51
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54213: LD_ADDR_VAR 0 52
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: LD_INT 2
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54364: LD_ADDR_VAR 0 53
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54594: LD_ADDR_VAR 0 54
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54824: LD_ADDR_VAR 0 55
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55054: LD_ADDR_VAR 0 56
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55284: LD_ADDR_VAR 0 57
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55514: LD_ADDR_VAR 0 58
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55744: LD_ADDR_VAR 0 59
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55832: LD_ADDR_VAR 0 60
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55920: LD_ADDR_VAR 0 61
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56008: LD_ADDR_VAR 0 62
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56096: LD_ADDR_VAR 0 63
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56184: LD_ADDR_VAR 0 64
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// end ; 1 :
56272: GO 62169
56274: LD_INT 1
56276: DOUBLE
56277: EQUAL
56278: IFTRUE 56282
56280: GO 58905
56282: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56283: LD_ADDR_VAR 0 11
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 3
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 3
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56327: LD_ADDR_VAR 0 12
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56368: LD_ADDR_VAR 0 13
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: LIST
56407: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56408: LD_ADDR_VAR 0 14
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 3
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: LIST
56448: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56449: LD_ADDR_VAR 0 15
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56493: LD_ADDR_VAR 0 16
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: LD_INT 3
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 3
56512: NEG
56513: PUSH
56514: LD_INT 2
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 3
56524: NEG
56525: PUSH
56526: LD_INT 3
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: LIST
56538: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56539: LD_ADDR_VAR 0 17
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: LD_INT 3
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 3
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: LIST
56582: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56583: LD_ADDR_VAR 0 18
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 3
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56624: LD_ADDR_VAR 0 19
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: LD_INT 3
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56664: LD_ADDR_VAR 0 20
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 3
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: LIST
56704: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56705: LD_ADDR_VAR 0 21
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: NEG
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56749: LD_ADDR_VAR 0 22
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56795: LD_ADDR_VAR 0 23
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: LD_INT 4
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: LD_INT 3
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: LIST
56838: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56839: LD_ADDR_VAR 0 24
56843: PUSH
56844: LD_INT 3
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 4
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: LIST
56879: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56880: LD_ADDR_VAR 0 25
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 4
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 3
56907: PUSH
56908: LD_INT 4
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: LIST
56919: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56920: LD_ADDR_VAR 0 26
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 3
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 4
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: LIST
56960: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56961: LD_ADDR_VAR 0 27
56965: PUSH
56966: LD_INT 3
56968: NEG
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 3
56979: NEG
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 4
56990: NEG
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: LIST
57004: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57005: LD_ADDR_VAR 0 28
57009: PUSH
57010: LD_INT 3
57012: NEG
57013: PUSH
57014: LD_INT 3
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: LD_INT 4
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 4
57036: NEG
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57051: LD_ADDR_VAR 0 29
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: LD_INT 3
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 4
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 4
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 5
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 5
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 4
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 6
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 6
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 5
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57206: LD_ADDR_VAR 0 30
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 4
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 4
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 4
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 5
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 5
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 5
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 6
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 6
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57349: LD_ADDR_VAR 0 31
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: LD_INT 2
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 4
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 4
57396: PUSH
57397: LD_INT 4
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 3
57406: PUSH
57407: LD_INT 4
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 5
57416: PUSH
57417: LD_INT 4
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 5
57426: PUSH
57427: LD_INT 5
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 4
57436: PUSH
57437: LD_INT 5
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 6
57446: PUSH
57447: LD_INT 5
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 6
57456: PUSH
57457: LD_INT 6
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 5
57466: PUSH
57467: LD_INT 6
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57488: LD_ADDR_VAR 0 32
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 4
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 4
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 5
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: LD_INT 5
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 4
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 6
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 6
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 5
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57631: LD_ADDR_VAR 0 33
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 4
57683: NEG
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 4
57694: NEG
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 4
57706: NEG
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 5
57717: NEG
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 5
57728: NEG
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 5
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 6
57751: NEG
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 6
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57786: LD_ADDR_VAR 0 34
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: LD_INT 3
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: NEG
57806: PUSH
57807: LD_INT 2
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 3
57817: NEG
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 3
57829: NEG
57830: PUSH
57831: LD_INT 4
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 4
57841: NEG
57842: PUSH
57843: LD_INT 3
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 4
57853: NEG
57854: PUSH
57855: LD_INT 4
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 4
57865: NEG
57866: PUSH
57867: LD_INT 5
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 5
57877: NEG
57878: PUSH
57879: LD_INT 4
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 5
57889: NEG
57890: PUSH
57891: LD_INT 5
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 5
57901: NEG
57902: PUSH
57903: LD_INT 6
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 6
57913: NEG
57914: PUSH
57915: LD_INT 5
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 6
57925: NEG
57926: PUSH
57927: LD_INT 6
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57949: LD_ADDR_VAR 0 41
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57993: LD_ADDR_VAR 0 42
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58034: LD_ADDR_VAR 0 43
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 3
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: LIST
58073: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58074: LD_ADDR_VAR 0 44
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: LIST
58114: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58115: LD_ADDR_VAR 0 45
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: LIST
58158: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58159: LD_ADDR_VAR 0 46
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 3
58190: NEG
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58205: LD_ADDR_VAR 0 47
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: LD_INT 3
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: LD_INT 3
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58238: LD_ADDR_VAR 0 48
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58269: LD_ADDR_VAR 0 49
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58298: LD_ADDR_VAR 0 50
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58327: LD_ADDR_VAR 0 51
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58358: LD_ADDR_VAR 0 52
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: NEG
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58391: LD_ADDR_VAR 0 53
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58435: LD_ADDR_VAR 0 54
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 3
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: LIST
58475: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58476: LD_ADDR_VAR 0 55
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58516: LD_ADDR_VAR 0 56
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: LIST
58556: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58557: LD_ADDR_VAR 0 57
58561: PUSH
58562: LD_INT 2
58564: NEG
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: NEG
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: LIST
58600: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58601: LD_ADDR_VAR 0 58
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: LD_INT 3
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 3
58620: NEG
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: LD_INT 3
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58647: LD_ADDR_VAR 0 59
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: LIST
58690: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58691: LD_ADDR_VAR 0 60
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: LIST
58731: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58732: LD_ADDR_VAR 0 61
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58772: LD_ADDR_VAR 0 62
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58813: LD_ADDR_VAR 0 63
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: LIST
58856: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58857: LD_ADDR_VAR 0 64
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// end ; 2 :
58903: GO 62169
58905: LD_INT 2
58907: DOUBLE
58908: EQUAL
58909: IFTRUE 58913
58911: GO 62168
58913: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58914: LD_ADDR_VAR 0 29
58918: PUSH
58919: LD_INT 4
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 4
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 5
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 5
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 4
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 3
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 3
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: LD_INT 2
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 5
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: PUSH
59015: LD_INT 3
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 3
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 4
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 4
59044: PUSH
59045: LD_INT 4
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: LD_INT 4
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: LD_INT 3
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 4
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: LD_INT 4
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 4
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: LD_INT 4
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: LD_INT 5
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: LD_INT 5
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 4
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: LD_INT 5
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 3
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 3
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 4
59253: NEG
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 4
59264: NEG
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 4
59276: NEG
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 4
59299: NEG
59300: PUSH
59301: LD_INT 4
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 4
59311: NEG
59312: PUSH
59313: LD_INT 5
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 3
59323: NEG
59324: PUSH
59325: LD_INT 4
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: LD_INT 3
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 4
59347: NEG
59348: PUSH
59349: LD_INT 3
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 5
59359: NEG
59360: PUSH
59361: LD_INT 4
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 5
59371: NEG
59372: PUSH
59373: LD_INT 5
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: LD_INT 5
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 5
59395: NEG
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59452: LD_ADDR_VAR 0 30
59456: PUSH
59457: LD_INT 4
59459: PUSH
59460: LD_INT 4
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 4
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 5
59479: PUSH
59480: LD_INT 4
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 5
59489: PUSH
59490: LD_INT 5
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 4
59499: PUSH
59500: LD_INT 5
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: LD_INT 4
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 5
59529: PUSH
59530: LD_INT 3
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 3
59539: PUSH
59540: LD_INT 5
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 3
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: LD_INT 4
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 4
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 3
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: PUSH
59622: LD_INT 4
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 4
59653: NEG
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 3
59665: NEG
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 3
59676: NEG
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 4
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 5
59698: NEG
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 5
59709: NEG
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 5
59721: NEG
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: NEG
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 3
59756: NEG
59757: PUSH
59758: LD_INT 4
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 3
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 3
59792: NEG
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 4
59804: NEG
59805: PUSH
59806: LD_INT 3
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 4
59816: NEG
59817: PUSH
59818: LD_INT 4
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 4
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 4
59840: NEG
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: LD_INT 4
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 5
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 4
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 3
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: LD_INT 3
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 4
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 5
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 5
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59999: LD_ADDR_VAR 0 31
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 4
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 3
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 4
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: LD_INT 5
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: LD_INT 5
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: LD_INT 4
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: LD_INT 3
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 5
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: LD_INT 3
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 4
60155: NEG
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 4
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 4
60178: NEG
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: NEG
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 4
60201: NEG
60202: PUSH
60203: LD_INT 4
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 4
60213: NEG
60214: PUSH
60215: LD_INT 5
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: LD_INT 4
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: NEG
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 4
60249: NEG
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 5
60261: NEG
60262: PUSH
60263: LD_INT 4
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 5
60273: NEG
60274: PUSH
60275: LD_INT 5
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 3
60285: NEG
60286: PUSH
60287: LD_INT 5
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 5
60297: NEG
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: LD_INT 3
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: LD_INT 4
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 2
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: LD_INT 3
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: LD_INT 4
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 2
60388: PUSH
60389: LD_INT 2
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 4
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 4
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 5
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 5
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 4
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 5
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60549: LD_ADDR_VAR 0 32
60553: PUSH
60554: LD_INT 4
60556: NEG
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 4
60567: NEG
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 3
60590: NEG
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 4
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 5
60612: NEG
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 5
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 5
60635: NEG
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: NEG
60648: PUSH
60649: LD_INT 2
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 3
60670: NEG
60671: PUSH
60672: LD_INT 4
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: LD_INT 2
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 4
60718: NEG
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 4
60730: NEG
60731: PUSH
60732: LD_INT 4
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: LD_INT 4
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 4
60754: NEG
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 4
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: LD_INT 5
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 4
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: LD_INT 3
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 3
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: LD_INT 4
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 5
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: LD_INT 5
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 3
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 4
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 4
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 4
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 4
60961: PUSH
60962: LD_INT 4
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: LD_INT 3
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 5
60981: PUSH
60982: LD_INT 4
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 5
60991: PUSH
60992: LD_INT 5
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 4
61001: PUSH
61002: LD_INT 5
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 3
61011: PUSH
61012: LD_INT 4
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 3
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 5
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: LD_INT 5
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61096: LD_ADDR_VAR 0 33
61100: PUSH
61101: LD_INT 4
61103: NEG
61104: PUSH
61105: LD_INT 4
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 4
61115: NEG
61116: PUSH
61117: LD_INT 5
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: LD_INT 4
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 3
61139: NEG
61140: PUSH
61141: LD_INT 3
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 4
61151: NEG
61152: PUSH
61153: LD_INT 3
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 5
61163: NEG
61164: PUSH
61165: LD_INT 4
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 5
61175: NEG
61176: PUSH
61177: LD_INT 5
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 3
61187: NEG
61188: PUSH
61189: LD_INT 5
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 5
61199: NEG
61200: PUSH
61201: LD_INT 3
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 3
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 4
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: LD_INT 3
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: NEG
61267: PUSH
61268: LD_INT 3
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: LD_INT 4
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: LD_INT 2
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 2
61301: NEG
61302: PUSH
61303: LD_INT 4
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 4
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 4
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 5
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 5
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 4
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 3
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 3
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 5
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: LD_INT 3
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 4
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 4
61436: PUSH
61437: LD_INT 4
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 3
61446: PUSH
61447: LD_INT 4
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 2
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 4
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 2
61486: PUSH
61487: LD_INT 4
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 4
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 4
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: LD_INT 5
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: LD_INT 5
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 4
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 5
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61634: LD_ADDR_VAR 0 34
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: LD_INT 4
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: LD_INT 5
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 4
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: LD_INT 3
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: LD_INT 4
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: LD_INT 5
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: LD_INT 3
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: LD_INT 5
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 4
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 4
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 2
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 4
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 4
61836: PUSH
61837: LD_INT 4
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 4
61846: PUSH
61847: LD_INT 3
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 5
61856: PUSH
61857: LD_INT 4
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 5
61866: PUSH
61867: LD_INT 5
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 4
61876: PUSH
61877: LD_INT 5
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 3
61886: PUSH
61887: LD_INT 4
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 3
61896: PUSH
61897: LD_INT 3
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 5
61906: PUSH
61907: LD_INT 3
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: PUSH
61917: LD_INT 5
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: LD_INT 3
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 4
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 4
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 2
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: PUSH
61999: LD_INT 4
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: LD_INT 2
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 4
62019: NEG
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 4
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 3
62042: NEG
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 3
62053: NEG
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 4
62064: NEG
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 5
62075: NEG
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 5
62086: NEG
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 5
62098: NEG
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: LD_INT 2
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: ST_TO_ADDR
// end ; end ;
62166: GO 62169
62168: POP
// case btype of b_depot , b_warehouse :
62169: LD_VAR 0 1
62173: PUSH
62174: LD_INT 0
62176: DOUBLE
62177: EQUAL
62178: IFTRUE 62188
62180: LD_INT 1
62182: DOUBLE
62183: EQUAL
62184: IFTRUE 62188
62186: GO 62389
62188: POP
// case nation of nation_american :
62189: LD_VAR 0 5
62193: PUSH
62194: LD_INT 1
62196: DOUBLE
62197: EQUAL
62198: IFTRUE 62202
62200: GO 62258
62202: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62203: LD_ADDR_VAR 0 9
62207: PUSH
62208: LD_VAR 0 11
62212: PUSH
62213: LD_VAR 0 12
62217: PUSH
62218: LD_VAR 0 13
62222: PUSH
62223: LD_VAR 0 14
62227: PUSH
62228: LD_VAR 0 15
62232: PUSH
62233: LD_VAR 0 16
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: PUSH
62246: LD_VAR 0 4
62250: PUSH
62251: LD_INT 1
62253: PLUS
62254: ARRAY
62255: ST_TO_ADDR
62256: GO 62387
62258: LD_INT 2
62260: DOUBLE
62261: EQUAL
62262: IFTRUE 62266
62264: GO 62322
62266: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62267: LD_ADDR_VAR 0 9
62271: PUSH
62272: LD_VAR 0 17
62276: PUSH
62277: LD_VAR 0 18
62281: PUSH
62282: LD_VAR 0 19
62286: PUSH
62287: LD_VAR 0 20
62291: PUSH
62292: LD_VAR 0 21
62296: PUSH
62297: LD_VAR 0 22
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: PUSH
62310: LD_VAR 0 4
62314: PUSH
62315: LD_INT 1
62317: PLUS
62318: ARRAY
62319: ST_TO_ADDR
62320: GO 62387
62322: LD_INT 3
62324: DOUBLE
62325: EQUAL
62326: IFTRUE 62330
62328: GO 62386
62330: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62331: LD_ADDR_VAR 0 9
62335: PUSH
62336: LD_VAR 0 23
62340: PUSH
62341: LD_VAR 0 24
62345: PUSH
62346: LD_VAR 0 25
62350: PUSH
62351: LD_VAR 0 26
62355: PUSH
62356: LD_VAR 0 27
62360: PUSH
62361: LD_VAR 0 28
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: PUSH
62374: LD_VAR 0 4
62378: PUSH
62379: LD_INT 1
62381: PLUS
62382: ARRAY
62383: ST_TO_ADDR
62384: GO 62387
62386: POP
62387: GO 62942
62389: LD_INT 2
62391: DOUBLE
62392: EQUAL
62393: IFTRUE 62403
62395: LD_INT 3
62397: DOUBLE
62398: EQUAL
62399: IFTRUE 62403
62401: GO 62459
62403: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62404: LD_ADDR_VAR 0 9
62408: PUSH
62409: LD_VAR 0 29
62413: PUSH
62414: LD_VAR 0 30
62418: PUSH
62419: LD_VAR 0 31
62423: PUSH
62424: LD_VAR 0 32
62428: PUSH
62429: LD_VAR 0 33
62433: PUSH
62434: LD_VAR 0 34
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: PUSH
62447: LD_VAR 0 4
62451: PUSH
62452: LD_INT 1
62454: PLUS
62455: ARRAY
62456: ST_TO_ADDR
62457: GO 62942
62459: LD_INT 16
62461: DOUBLE
62462: EQUAL
62463: IFTRUE 62521
62465: LD_INT 17
62467: DOUBLE
62468: EQUAL
62469: IFTRUE 62521
62471: LD_INT 18
62473: DOUBLE
62474: EQUAL
62475: IFTRUE 62521
62477: LD_INT 19
62479: DOUBLE
62480: EQUAL
62481: IFTRUE 62521
62483: LD_INT 22
62485: DOUBLE
62486: EQUAL
62487: IFTRUE 62521
62489: LD_INT 20
62491: DOUBLE
62492: EQUAL
62493: IFTRUE 62521
62495: LD_INT 21
62497: DOUBLE
62498: EQUAL
62499: IFTRUE 62521
62501: LD_INT 23
62503: DOUBLE
62504: EQUAL
62505: IFTRUE 62521
62507: LD_INT 24
62509: DOUBLE
62510: EQUAL
62511: IFTRUE 62521
62513: LD_INT 25
62515: DOUBLE
62516: EQUAL
62517: IFTRUE 62521
62519: GO 62577
62521: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62522: LD_ADDR_VAR 0 9
62526: PUSH
62527: LD_VAR 0 35
62531: PUSH
62532: LD_VAR 0 36
62536: PUSH
62537: LD_VAR 0 37
62541: PUSH
62542: LD_VAR 0 38
62546: PUSH
62547: LD_VAR 0 39
62551: PUSH
62552: LD_VAR 0 40
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: PUSH
62565: LD_VAR 0 4
62569: PUSH
62570: LD_INT 1
62572: PLUS
62573: ARRAY
62574: ST_TO_ADDR
62575: GO 62942
62577: LD_INT 6
62579: DOUBLE
62580: EQUAL
62581: IFTRUE 62633
62583: LD_INT 7
62585: DOUBLE
62586: EQUAL
62587: IFTRUE 62633
62589: LD_INT 8
62591: DOUBLE
62592: EQUAL
62593: IFTRUE 62633
62595: LD_INT 13
62597: DOUBLE
62598: EQUAL
62599: IFTRUE 62633
62601: LD_INT 12
62603: DOUBLE
62604: EQUAL
62605: IFTRUE 62633
62607: LD_INT 15
62609: DOUBLE
62610: EQUAL
62611: IFTRUE 62633
62613: LD_INT 11
62615: DOUBLE
62616: EQUAL
62617: IFTRUE 62633
62619: LD_INT 14
62621: DOUBLE
62622: EQUAL
62623: IFTRUE 62633
62625: LD_INT 10
62627: DOUBLE
62628: EQUAL
62629: IFTRUE 62633
62631: GO 62689
62633: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62634: LD_ADDR_VAR 0 9
62638: PUSH
62639: LD_VAR 0 41
62643: PUSH
62644: LD_VAR 0 42
62648: PUSH
62649: LD_VAR 0 43
62653: PUSH
62654: LD_VAR 0 44
62658: PUSH
62659: LD_VAR 0 45
62663: PUSH
62664: LD_VAR 0 46
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: PUSH
62677: LD_VAR 0 4
62681: PUSH
62682: LD_INT 1
62684: PLUS
62685: ARRAY
62686: ST_TO_ADDR
62687: GO 62942
62689: LD_INT 36
62691: DOUBLE
62692: EQUAL
62693: IFTRUE 62697
62695: GO 62753
62697: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62698: LD_ADDR_VAR 0 9
62702: PUSH
62703: LD_VAR 0 47
62707: PUSH
62708: LD_VAR 0 48
62712: PUSH
62713: LD_VAR 0 49
62717: PUSH
62718: LD_VAR 0 50
62722: PUSH
62723: LD_VAR 0 51
62727: PUSH
62728: LD_VAR 0 52
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: PUSH
62741: LD_VAR 0 4
62745: PUSH
62746: LD_INT 1
62748: PLUS
62749: ARRAY
62750: ST_TO_ADDR
62751: GO 62942
62753: LD_INT 4
62755: DOUBLE
62756: EQUAL
62757: IFTRUE 62779
62759: LD_INT 5
62761: DOUBLE
62762: EQUAL
62763: IFTRUE 62779
62765: LD_INT 34
62767: DOUBLE
62768: EQUAL
62769: IFTRUE 62779
62771: LD_INT 37
62773: DOUBLE
62774: EQUAL
62775: IFTRUE 62779
62777: GO 62835
62779: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62780: LD_ADDR_VAR 0 9
62784: PUSH
62785: LD_VAR 0 53
62789: PUSH
62790: LD_VAR 0 54
62794: PUSH
62795: LD_VAR 0 55
62799: PUSH
62800: LD_VAR 0 56
62804: PUSH
62805: LD_VAR 0 57
62809: PUSH
62810: LD_VAR 0 58
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: PUSH
62823: LD_VAR 0 4
62827: PUSH
62828: LD_INT 1
62830: PLUS
62831: ARRAY
62832: ST_TO_ADDR
62833: GO 62942
62835: LD_INT 31
62837: DOUBLE
62838: EQUAL
62839: IFTRUE 62885
62841: LD_INT 32
62843: DOUBLE
62844: EQUAL
62845: IFTRUE 62885
62847: LD_INT 33
62849: DOUBLE
62850: EQUAL
62851: IFTRUE 62885
62853: LD_INT 27
62855: DOUBLE
62856: EQUAL
62857: IFTRUE 62885
62859: LD_INT 26
62861: DOUBLE
62862: EQUAL
62863: IFTRUE 62885
62865: LD_INT 28
62867: DOUBLE
62868: EQUAL
62869: IFTRUE 62885
62871: LD_INT 29
62873: DOUBLE
62874: EQUAL
62875: IFTRUE 62885
62877: LD_INT 30
62879: DOUBLE
62880: EQUAL
62881: IFTRUE 62885
62883: GO 62941
62885: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62886: LD_ADDR_VAR 0 9
62890: PUSH
62891: LD_VAR 0 59
62895: PUSH
62896: LD_VAR 0 60
62900: PUSH
62901: LD_VAR 0 61
62905: PUSH
62906: LD_VAR 0 62
62910: PUSH
62911: LD_VAR 0 63
62915: PUSH
62916: LD_VAR 0 64
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: PUSH
62929: LD_VAR 0 4
62933: PUSH
62934: LD_INT 1
62936: PLUS
62937: ARRAY
62938: ST_TO_ADDR
62939: GO 62942
62941: POP
// temp_list2 = [ ] ;
62942: LD_ADDR_VAR 0 10
62946: PUSH
62947: EMPTY
62948: ST_TO_ADDR
// for i in temp_list do
62949: LD_ADDR_VAR 0 8
62953: PUSH
62954: LD_VAR 0 9
62958: PUSH
62959: FOR_IN
62960: IFFALSE 63012
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62962: LD_ADDR_VAR 0 10
62966: PUSH
62967: LD_VAR 0 10
62971: PUSH
62972: LD_VAR 0 8
62976: PUSH
62977: LD_INT 1
62979: ARRAY
62980: PUSH
62981: LD_VAR 0 2
62985: PLUS
62986: PUSH
62987: LD_VAR 0 8
62991: PUSH
62992: LD_INT 2
62994: ARRAY
62995: PUSH
62996: LD_VAR 0 3
63000: PLUS
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: EMPTY
63007: LIST
63008: ADD
63009: ST_TO_ADDR
63010: GO 62959
63012: POP
63013: POP
// result = temp_list2 ;
63014: LD_ADDR_VAR 0 7
63018: PUSH
63019: LD_VAR 0 10
63023: ST_TO_ADDR
// end ;
63024: LD_VAR 0 7
63028: RET
// export function EnemyInRange ( unit , dist ) ; begin
63029: LD_INT 0
63031: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63032: LD_ADDR_VAR 0 3
63036: PUSH
63037: LD_VAR 0 1
63041: PPUSH
63042: CALL_OW 255
63046: PPUSH
63047: LD_VAR 0 1
63051: PPUSH
63052: CALL_OW 250
63056: PPUSH
63057: LD_VAR 0 1
63061: PPUSH
63062: CALL_OW 251
63066: PPUSH
63067: LD_VAR 0 2
63071: PPUSH
63072: CALL 36425 0 4
63076: PUSH
63077: LD_INT 4
63079: ARRAY
63080: ST_TO_ADDR
// end ;
63081: LD_VAR 0 3
63085: RET
// export function PlayerSeeMe ( unit ) ; begin
63086: LD_INT 0
63088: PPUSH
// result := See ( your_side , unit ) ;
63089: LD_ADDR_VAR 0 2
63093: PUSH
63094: LD_OWVAR 2
63098: PPUSH
63099: LD_VAR 0 1
63103: PPUSH
63104: CALL_OW 292
63108: ST_TO_ADDR
// end ;
63109: LD_VAR 0 2
63113: RET
// export function ReverseDir ( unit ) ; begin
63114: LD_INT 0
63116: PPUSH
// if not unit then
63117: LD_VAR 0 1
63121: NOT
63122: IFFALSE 63126
// exit ;
63124: GO 63149
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63126: LD_ADDR_VAR 0 2
63130: PUSH
63131: LD_VAR 0 1
63135: PPUSH
63136: CALL_OW 254
63140: PUSH
63141: LD_INT 3
63143: PLUS
63144: PUSH
63145: LD_INT 6
63147: MOD
63148: ST_TO_ADDR
// end ;
63149: LD_VAR 0 2
63153: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63154: LD_INT 0
63156: PPUSH
63157: PPUSH
63158: PPUSH
63159: PPUSH
63160: PPUSH
// if not hexes then
63161: LD_VAR 0 2
63165: NOT
63166: IFFALSE 63170
// exit ;
63168: GO 63318
// dist := 9999 ;
63170: LD_ADDR_VAR 0 5
63174: PUSH
63175: LD_INT 9999
63177: ST_TO_ADDR
// for i = 1 to hexes do
63178: LD_ADDR_VAR 0 4
63182: PUSH
63183: DOUBLE
63184: LD_INT 1
63186: DEC
63187: ST_TO_ADDR
63188: LD_VAR 0 2
63192: PUSH
63193: FOR_TO
63194: IFFALSE 63306
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63196: LD_VAR 0 1
63200: PPUSH
63201: LD_VAR 0 2
63205: PUSH
63206: LD_VAR 0 4
63210: ARRAY
63211: PUSH
63212: LD_INT 1
63214: ARRAY
63215: PPUSH
63216: LD_VAR 0 2
63220: PUSH
63221: LD_VAR 0 4
63225: ARRAY
63226: PUSH
63227: LD_INT 2
63229: ARRAY
63230: PPUSH
63231: CALL_OW 297
63235: PUSH
63236: LD_VAR 0 5
63240: LESS
63241: IFFALSE 63304
// begin hex := hexes [ i ] ;
63243: LD_ADDR_VAR 0 7
63247: PUSH
63248: LD_VAR 0 2
63252: PUSH
63253: LD_VAR 0 4
63257: ARRAY
63258: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63259: LD_ADDR_VAR 0 5
63263: PUSH
63264: LD_VAR 0 1
63268: PPUSH
63269: LD_VAR 0 2
63273: PUSH
63274: LD_VAR 0 4
63278: ARRAY
63279: PUSH
63280: LD_INT 1
63282: ARRAY
63283: PPUSH
63284: LD_VAR 0 2
63288: PUSH
63289: LD_VAR 0 4
63293: ARRAY
63294: PUSH
63295: LD_INT 2
63297: ARRAY
63298: PPUSH
63299: CALL_OW 297
63303: ST_TO_ADDR
// end ; end ;
63304: GO 63193
63306: POP
63307: POP
// result := hex ;
63308: LD_ADDR_VAR 0 3
63312: PUSH
63313: LD_VAR 0 7
63317: ST_TO_ADDR
// end ;
63318: LD_VAR 0 3
63322: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63323: LD_INT 0
63325: PPUSH
63326: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63327: LD_VAR 0 1
63331: NOT
63332: PUSH
63333: LD_VAR 0 1
63337: PUSH
63338: LD_INT 21
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 23
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PPUSH
63362: CALL_OW 69
63366: IN
63367: NOT
63368: OR
63369: IFFALSE 63373
// exit ;
63371: GO 63420
// for i = 1 to 3 do
63373: LD_ADDR_VAR 0 3
63377: PUSH
63378: DOUBLE
63379: LD_INT 1
63381: DEC
63382: ST_TO_ADDR
63383: LD_INT 3
63385: PUSH
63386: FOR_TO
63387: IFFALSE 63418
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63389: LD_VAR 0 1
63393: PPUSH
63394: CALL_OW 250
63398: PPUSH
63399: LD_VAR 0 1
63403: PPUSH
63404: CALL_OW 251
63408: PPUSH
63409: LD_INT 1
63411: PPUSH
63412: CALL_OW 453
63416: GO 63386
63418: POP
63419: POP
// end ;
63420: LD_VAR 0 2
63424: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63425: LD_INT 0
63427: PPUSH
63428: PPUSH
63429: PPUSH
63430: PPUSH
63431: PPUSH
63432: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63433: LD_VAR 0 1
63437: NOT
63438: PUSH
63439: LD_VAR 0 2
63443: NOT
63444: OR
63445: PUSH
63446: LD_VAR 0 1
63450: PPUSH
63451: CALL_OW 314
63455: OR
63456: IFFALSE 63460
// exit ;
63458: GO 63901
// x := GetX ( enemy_unit ) ;
63460: LD_ADDR_VAR 0 7
63464: PUSH
63465: LD_VAR 0 2
63469: PPUSH
63470: CALL_OW 250
63474: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63475: LD_ADDR_VAR 0 8
63479: PUSH
63480: LD_VAR 0 2
63484: PPUSH
63485: CALL_OW 251
63489: ST_TO_ADDR
// if not x or not y then
63490: LD_VAR 0 7
63494: NOT
63495: PUSH
63496: LD_VAR 0 8
63500: NOT
63501: OR
63502: IFFALSE 63506
// exit ;
63504: GO 63901
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63506: LD_ADDR_VAR 0 6
63510: PUSH
63511: LD_VAR 0 7
63515: PPUSH
63516: LD_INT 0
63518: PPUSH
63519: LD_INT 4
63521: PPUSH
63522: CALL_OW 272
63526: PUSH
63527: LD_VAR 0 8
63531: PPUSH
63532: LD_INT 0
63534: PPUSH
63535: LD_INT 4
63537: PPUSH
63538: CALL_OW 273
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_VAR 0 7
63551: PPUSH
63552: LD_INT 1
63554: PPUSH
63555: LD_INT 4
63557: PPUSH
63558: CALL_OW 272
63562: PUSH
63563: LD_VAR 0 8
63567: PPUSH
63568: LD_INT 1
63570: PPUSH
63571: LD_INT 4
63573: PPUSH
63574: CALL_OW 273
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_VAR 0 7
63587: PPUSH
63588: LD_INT 2
63590: PPUSH
63591: LD_INT 4
63593: PPUSH
63594: CALL_OW 272
63598: PUSH
63599: LD_VAR 0 8
63603: PPUSH
63604: LD_INT 2
63606: PPUSH
63607: LD_INT 4
63609: PPUSH
63610: CALL_OW 273
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_VAR 0 7
63623: PPUSH
63624: LD_INT 3
63626: PPUSH
63627: LD_INT 4
63629: PPUSH
63630: CALL_OW 272
63634: PUSH
63635: LD_VAR 0 8
63639: PPUSH
63640: LD_INT 3
63642: PPUSH
63643: LD_INT 4
63645: PPUSH
63646: CALL_OW 273
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_VAR 0 7
63659: PPUSH
63660: LD_INT 4
63662: PPUSH
63663: LD_INT 4
63665: PPUSH
63666: CALL_OW 272
63670: PUSH
63671: LD_VAR 0 8
63675: PPUSH
63676: LD_INT 4
63678: PPUSH
63679: LD_INT 4
63681: PPUSH
63682: CALL_OW 273
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_VAR 0 7
63695: PPUSH
63696: LD_INT 5
63698: PPUSH
63699: LD_INT 4
63701: PPUSH
63702: CALL_OW 272
63706: PUSH
63707: LD_VAR 0 8
63711: PPUSH
63712: LD_INT 5
63714: PPUSH
63715: LD_INT 4
63717: PPUSH
63718: CALL_OW 273
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: ST_TO_ADDR
// for i = tmp downto 1 do
63735: LD_ADDR_VAR 0 4
63739: PUSH
63740: DOUBLE
63741: LD_VAR 0 6
63745: INC
63746: ST_TO_ADDR
63747: LD_INT 1
63749: PUSH
63750: FOR_DOWNTO
63751: IFFALSE 63852
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63753: LD_VAR 0 6
63757: PUSH
63758: LD_VAR 0 4
63762: ARRAY
63763: PUSH
63764: LD_INT 1
63766: ARRAY
63767: PPUSH
63768: LD_VAR 0 6
63772: PUSH
63773: LD_VAR 0 4
63777: ARRAY
63778: PUSH
63779: LD_INT 2
63781: ARRAY
63782: PPUSH
63783: CALL_OW 488
63787: NOT
63788: PUSH
63789: LD_VAR 0 6
63793: PUSH
63794: LD_VAR 0 4
63798: ARRAY
63799: PUSH
63800: LD_INT 1
63802: ARRAY
63803: PPUSH
63804: LD_VAR 0 6
63808: PUSH
63809: LD_VAR 0 4
63813: ARRAY
63814: PUSH
63815: LD_INT 2
63817: ARRAY
63818: PPUSH
63819: CALL_OW 428
63823: PUSH
63824: LD_INT 0
63826: NONEQUAL
63827: OR
63828: IFFALSE 63850
// tmp := Delete ( tmp , i ) ;
63830: LD_ADDR_VAR 0 6
63834: PUSH
63835: LD_VAR 0 6
63839: PPUSH
63840: LD_VAR 0 4
63844: PPUSH
63845: CALL_OW 3
63849: ST_TO_ADDR
63850: GO 63750
63852: POP
63853: POP
// j := GetClosestHex ( unit , tmp ) ;
63854: LD_ADDR_VAR 0 5
63858: PUSH
63859: LD_VAR 0 1
63863: PPUSH
63864: LD_VAR 0 6
63868: PPUSH
63869: CALL 63154 0 2
63873: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63874: LD_VAR 0 1
63878: PPUSH
63879: LD_VAR 0 5
63883: PUSH
63884: LD_INT 1
63886: ARRAY
63887: PPUSH
63888: LD_VAR 0 5
63892: PUSH
63893: LD_INT 2
63895: ARRAY
63896: PPUSH
63897: CALL_OW 111
// end ;
63901: LD_VAR 0 3
63905: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63906: LD_INT 0
63908: PPUSH
63909: PPUSH
63910: PPUSH
// uc_side = 0 ;
63911: LD_ADDR_OWVAR 20
63915: PUSH
63916: LD_INT 0
63918: ST_TO_ADDR
// uc_nation = 0 ;
63919: LD_ADDR_OWVAR 21
63923: PUSH
63924: LD_INT 0
63926: ST_TO_ADDR
// InitHc_All ( ) ;
63927: CALL_OW 584
// InitVc ;
63931: CALL_OW 20
// if mastodonts then
63935: LD_VAR 0 6
63939: IFFALSE 64006
// for i = 1 to mastodonts do
63941: LD_ADDR_VAR 0 11
63945: PUSH
63946: DOUBLE
63947: LD_INT 1
63949: DEC
63950: ST_TO_ADDR
63951: LD_VAR 0 6
63955: PUSH
63956: FOR_TO
63957: IFFALSE 64004
// begin vc_chassis := 31 ;
63959: LD_ADDR_OWVAR 37
63963: PUSH
63964: LD_INT 31
63966: ST_TO_ADDR
// vc_control := control_rider ;
63967: LD_ADDR_OWVAR 38
63971: PUSH
63972: LD_INT 4
63974: ST_TO_ADDR
// animal := CreateVehicle ;
63975: LD_ADDR_VAR 0 12
63979: PUSH
63980: CALL_OW 45
63984: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63985: LD_VAR 0 12
63989: PPUSH
63990: LD_VAR 0 8
63994: PPUSH
63995: LD_INT 0
63997: PPUSH
63998: CALL 66194 0 3
// end ;
64002: GO 63956
64004: POP
64005: POP
// if horses then
64006: LD_VAR 0 5
64010: IFFALSE 64077
// for i = 1 to horses do
64012: LD_ADDR_VAR 0 11
64016: PUSH
64017: DOUBLE
64018: LD_INT 1
64020: DEC
64021: ST_TO_ADDR
64022: LD_VAR 0 5
64026: PUSH
64027: FOR_TO
64028: IFFALSE 64075
// begin hc_class := 21 ;
64030: LD_ADDR_OWVAR 28
64034: PUSH
64035: LD_INT 21
64037: ST_TO_ADDR
// hc_gallery :=  ;
64038: LD_ADDR_OWVAR 33
64042: PUSH
64043: LD_STRING 
64045: ST_TO_ADDR
// animal := CreateHuman ;
64046: LD_ADDR_VAR 0 12
64050: PUSH
64051: CALL_OW 44
64055: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64056: LD_VAR 0 12
64060: PPUSH
64061: LD_VAR 0 8
64065: PPUSH
64066: LD_INT 0
64068: PPUSH
64069: CALL 66194 0 3
// end ;
64073: GO 64027
64075: POP
64076: POP
// if birds then
64077: LD_VAR 0 1
64081: IFFALSE 64148
// for i = 1 to birds do
64083: LD_ADDR_VAR 0 11
64087: PUSH
64088: DOUBLE
64089: LD_INT 1
64091: DEC
64092: ST_TO_ADDR
64093: LD_VAR 0 1
64097: PUSH
64098: FOR_TO
64099: IFFALSE 64146
// begin hc_class = 18 ;
64101: LD_ADDR_OWVAR 28
64105: PUSH
64106: LD_INT 18
64108: ST_TO_ADDR
// hc_gallery =  ;
64109: LD_ADDR_OWVAR 33
64113: PUSH
64114: LD_STRING 
64116: ST_TO_ADDR
// animal := CreateHuman ;
64117: LD_ADDR_VAR 0 12
64121: PUSH
64122: CALL_OW 44
64126: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64127: LD_VAR 0 12
64131: PPUSH
64132: LD_VAR 0 8
64136: PPUSH
64137: LD_INT 0
64139: PPUSH
64140: CALL 66194 0 3
// end ;
64144: GO 64098
64146: POP
64147: POP
// if tigers then
64148: LD_VAR 0 2
64152: IFFALSE 64236
// for i = 1 to tigers do
64154: LD_ADDR_VAR 0 11
64158: PUSH
64159: DOUBLE
64160: LD_INT 1
64162: DEC
64163: ST_TO_ADDR
64164: LD_VAR 0 2
64168: PUSH
64169: FOR_TO
64170: IFFALSE 64234
// begin hc_class = class_tiger ;
64172: LD_ADDR_OWVAR 28
64176: PUSH
64177: LD_INT 14
64179: ST_TO_ADDR
// hc_gallery =  ;
64180: LD_ADDR_OWVAR 33
64184: PUSH
64185: LD_STRING 
64187: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64188: LD_ADDR_OWVAR 35
64192: PUSH
64193: LD_INT 7
64195: NEG
64196: PPUSH
64197: LD_INT 7
64199: PPUSH
64200: CALL_OW 12
64204: ST_TO_ADDR
// animal := CreateHuman ;
64205: LD_ADDR_VAR 0 12
64209: PUSH
64210: CALL_OW 44
64214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64215: LD_VAR 0 12
64219: PPUSH
64220: LD_VAR 0 8
64224: PPUSH
64225: LD_INT 0
64227: PPUSH
64228: CALL 66194 0 3
// end ;
64232: GO 64169
64234: POP
64235: POP
// if apemans then
64236: LD_VAR 0 3
64240: IFFALSE 64363
// for i = 1 to apemans do
64242: LD_ADDR_VAR 0 11
64246: PUSH
64247: DOUBLE
64248: LD_INT 1
64250: DEC
64251: ST_TO_ADDR
64252: LD_VAR 0 3
64256: PUSH
64257: FOR_TO
64258: IFFALSE 64361
// begin hc_class = class_apeman ;
64260: LD_ADDR_OWVAR 28
64264: PUSH
64265: LD_INT 12
64267: ST_TO_ADDR
// hc_gallery =  ;
64268: LD_ADDR_OWVAR 33
64272: PUSH
64273: LD_STRING 
64275: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64276: LD_ADDR_OWVAR 35
64280: PUSH
64281: LD_INT 2
64283: NEG
64284: PPUSH
64285: LD_INT 2
64287: PPUSH
64288: CALL_OW 12
64292: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64293: LD_ADDR_OWVAR 31
64297: PUSH
64298: LD_INT 1
64300: PPUSH
64301: LD_INT 3
64303: PPUSH
64304: CALL_OW 12
64308: PUSH
64309: LD_INT 1
64311: PPUSH
64312: LD_INT 3
64314: PPUSH
64315: CALL_OW 12
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: ST_TO_ADDR
// animal := CreateHuman ;
64332: LD_ADDR_VAR 0 12
64336: PUSH
64337: CALL_OW 44
64341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64342: LD_VAR 0 12
64346: PPUSH
64347: LD_VAR 0 8
64351: PPUSH
64352: LD_INT 0
64354: PPUSH
64355: CALL 66194 0 3
// end ;
64359: GO 64257
64361: POP
64362: POP
// if enchidnas then
64363: LD_VAR 0 4
64367: IFFALSE 64434
// for i = 1 to enchidnas do
64369: LD_ADDR_VAR 0 11
64373: PUSH
64374: DOUBLE
64375: LD_INT 1
64377: DEC
64378: ST_TO_ADDR
64379: LD_VAR 0 4
64383: PUSH
64384: FOR_TO
64385: IFFALSE 64432
// begin hc_class = 13 ;
64387: LD_ADDR_OWVAR 28
64391: PUSH
64392: LD_INT 13
64394: ST_TO_ADDR
// hc_gallery =  ;
64395: LD_ADDR_OWVAR 33
64399: PUSH
64400: LD_STRING 
64402: ST_TO_ADDR
// animal := CreateHuman ;
64403: LD_ADDR_VAR 0 12
64407: PUSH
64408: CALL_OW 44
64412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64413: LD_VAR 0 12
64417: PPUSH
64418: LD_VAR 0 8
64422: PPUSH
64423: LD_INT 0
64425: PPUSH
64426: CALL 66194 0 3
// end ;
64430: GO 64384
64432: POP
64433: POP
// if fishes then
64434: LD_VAR 0 7
64438: IFFALSE 64505
// for i = 1 to fishes do
64440: LD_ADDR_VAR 0 11
64444: PUSH
64445: DOUBLE
64446: LD_INT 1
64448: DEC
64449: ST_TO_ADDR
64450: LD_VAR 0 7
64454: PUSH
64455: FOR_TO
64456: IFFALSE 64503
// begin hc_class = 20 ;
64458: LD_ADDR_OWVAR 28
64462: PUSH
64463: LD_INT 20
64465: ST_TO_ADDR
// hc_gallery =  ;
64466: LD_ADDR_OWVAR 33
64470: PUSH
64471: LD_STRING 
64473: ST_TO_ADDR
// animal := CreateHuman ;
64474: LD_ADDR_VAR 0 12
64478: PUSH
64479: CALL_OW 44
64483: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64484: LD_VAR 0 12
64488: PPUSH
64489: LD_VAR 0 9
64493: PPUSH
64494: LD_INT 0
64496: PPUSH
64497: CALL 66194 0 3
// end ;
64501: GO 64455
64503: POP
64504: POP
// end ;
64505: LD_VAR 0 10
64509: RET
// export function WantHeal ( sci , unit ) ; begin
64510: LD_INT 0
64512: PPUSH
// if GetTaskList ( sci ) > 0 then
64513: LD_VAR 0 1
64517: PPUSH
64518: CALL_OW 437
64522: PUSH
64523: LD_INT 0
64525: GREATER
64526: IFFALSE 64596
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64528: LD_VAR 0 1
64532: PPUSH
64533: CALL_OW 437
64537: PUSH
64538: LD_INT 1
64540: ARRAY
64541: PUSH
64542: LD_INT 1
64544: ARRAY
64545: PUSH
64546: LD_STRING l
64548: EQUAL
64549: PUSH
64550: LD_VAR 0 1
64554: PPUSH
64555: CALL_OW 437
64559: PUSH
64560: LD_INT 1
64562: ARRAY
64563: PUSH
64564: LD_INT 4
64566: ARRAY
64567: PUSH
64568: LD_VAR 0 2
64572: EQUAL
64573: AND
64574: IFFALSE 64586
// result := true else
64576: LD_ADDR_VAR 0 3
64580: PUSH
64581: LD_INT 1
64583: ST_TO_ADDR
64584: GO 64594
// result := false ;
64586: LD_ADDR_VAR 0 3
64590: PUSH
64591: LD_INT 0
64593: ST_TO_ADDR
// end else
64594: GO 64604
// result := false ;
64596: LD_ADDR_VAR 0 3
64600: PUSH
64601: LD_INT 0
64603: ST_TO_ADDR
// end ;
64604: LD_VAR 0 3
64608: RET
// export function HealTarget ( sci ) ; begin
64609: LD_INT 0
64611: PPUSH
// if not sci then
64612: LD_VAR 0 1
64616: NOT
64617: IFFALSE 64621
// exit ;
64619: GO 64686
// result := 0 ;
64621: LD_ADDR_VAR 0 2
64625: PUSH
64626: LD_INT 0
64628: ST_TO_ADDR
// if GetTaskList ( sci ) then
64629: LD_VAR 0 1
64633: PPUSH
64634: CALL_OW 437
64638: IFFALSE 64686
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64640: LD_VAR 0 1
64644: PPUSH
64645: CALL_OW 437
64649: PUSH
64650: LD_INT 1
64652: ARRAY
64653: PUSH
64654: LD_INT 1
64656: ARRAY
64657: PUSH
64658: LD_STRING l
64660: EQUAL
64661: IFFALSE 64686
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64663: LD_ADDR_VAR 0 2
64667: PUSH
64668: LD_VAR 0 1
64672: PPUSH
64673: CALL_OW 437
64677: PUSH
64678: LD_INT 1
64680: ARRAY
64681: PUSH
64682: LD_INT 4
64684: ARRAY
64685: ST_TO_ADDR
// end ;
64686: LD_VAR 0 2
64690: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64691: LD_INT 0
64693: PPUSH
64694: PPUSH
64695: PPUSH
64696: PPUSH
// if not base_units then
64697: LD_VAR 0 1
64701: NOT
64702: IFFALSE 64706
// exit ;
64704: GO 64793
// result := false ;
64706: LD_ADDR_VAR 0 2
64710: PUSH
64711: LD_INT 0
64713: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64714: LD_ADDR_VAR 0 5
64718: PUSH
64719: LD_VAR 0 1
64723: PPUSH
64724: LD_INT 21
64726: PUSH
64727: LD_INT 3
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PPUSH
64734: CALL_OW 72
64738: ST_TO_ADDR
// if not tmp then
64739: LD_VAR 0 5
64743: NOT
64744: IFFALSE 64748
// exit ;
64746: GO 64793
// for i in tmp do
64748: LD_ADDR_VAR 0 3
64752: PUSH
64753: LD_VAR 0 5
64757: PUSH
64758: FOR_IN
64759: IFFALSE 64791
// begin result := EnemyInRange ( i , 22 ) ;
64761: LD_ADDR_VAR 0 2
64765: PUSH
64766: LD_VAR 0 3
64770: PPUSH
64771: LD_INT 22
64773: PPUSH
64774: CALL 63029 0 2
64778: ST_TO_ADDR
// if result then
64779: LD_VAR 0 2
64783: IFFALSE 64789
// exit ;
64785: POP
64786: POP
64787: GO 64793
// end ;
64789: GO 64758
64791: POP
64792: POP
// end ;
64793: LD_VAR 0 2
64797: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64798: LD_INT 0
64800: PPUSH
64801: PPUSH
// if not units then
64802: LD_VAR 0 1
64806: NOT
64807: IFFALSE 64811
// exit ;
64809: GO 64881
// result := [ ] ;
64811: LD_ADDR_VAR 0 3
64815: PUSH
64816: EMPTY
64817: ST_TO_ADDR
// for i in units do
64818: LD_ADDR_VAR 0 4
64822: PUSH
64823: LD_VAR 0 1
64827: PUSH
64828: FOR_IN
64829: IFFALSE 64879
// if GetTag ( i ) = tag then
64831: LD_VAR 0 4
64835: PPUSH
64836: CALL_OW 110
64840: PUSH
64841: LD_VAR 0 2
64845: EQUAL
64846: IFFALSE 64877
// result := Replace ( result , result + 1 , i ) ;
64848: LD_ADDR_VAR 0 3
64852: PUSH
64853: LD_VAR 0 3
64857: PPUSH
64858: LD_VAR 0 3
64862: PUSH
64863: LD_INT 1
64865: PLUS
64866: PPUSH
64867: LD_VAR 0 4
64871: PPUSH
64872: CALL_OW 1
64876: ST_TO_ADDR
64877: GO 64828
64879: POP
64880: POP
// end ;
64881: LD_VAR 0 3
64885: RET
// export function IsDriver ( un ) ; begin
64886: LD_INT 0
64888: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64889: LD_ADDR_VAR 0 2
64893: PUSH
64894: LD_VAR 0 1
64898: PUSH
64899: LD_INT 55
64901: PUSH
64902: EMPTY
64903: LIST
64904: PPUSH
64905: CALL_OW 69
64909: IN
64910: ST_TO_ADDR
// end ;
64911: LD_VAR 0 2
64915: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64916: LD_INT 0
64918: PPUSH
64919: PPUSH
// list := [ ] ;
64920: LD_ADDR_VAR 0 5
64924: PUSH
64925: EMPTY
64926: ST_TO_ADDR
// case d of 0 :
64927: LD_VAR 0 3
64931: PUSH
64932: LD_INT 0
64934: DOUBLE
64935: EQUAL
64936: IFTRUE 64940
64938: GO 65073
64940: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64941: LD_ADDR_VAR 0 5
64945: PUSH
64946: LD_VAR 0 1
64950: PUSH
64951: LD_INT 4
64953: MINUS
64954: PUSH
64955: LD_VAR 0 2
64959: PUSH
64960: LD_INT 4
64962: MINUS
64963: PUSH
64964: LD_INT 2
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: LIST
64971: PUSH
64972: LD_VAR 0 1
64976: PUSH
64977: LD_INT 3
64979: MINUS
64980: PUSH
64981: LD_VAR 0 2
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: LIST
64993: PUSH
64994: LD_VAR 0 1
64998: PUSH
64999: LD_INT 4
65001: PLUS
65002: PUSH
65003: LD_VAR 0 2
65007: PUSH
65008: LD_INT 4
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: PUSH
65016: LD_VAR 0 1
65020: PUSH
65021: LD_INT 3
65023: PLUS
65024: PUSH
65025: LD_VAR 0 2
65029: PUSH
65030: LD_INT 3
65032: PLUS
65033: PUSH
65034: LD_INT 5
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: PUSH
65042: LD_VAR 0 1
65046: PUSH
65047: LD_VAR 0 2
65051: PUSH
65052: LD_INT 4
65054: PLUS
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: ST_TO_ADDR
// end ; 1 :
65071: GO 65771
65073: LD_INT 1
65075: DOUBLE
65076: EQUAL
65077: IFTRUE 65081
65079: GO 65214
65081: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65082: LD_ADDR_VAR 0 5
65086: PUSH
65087: LD_VAR 0 1
65091: PUSH
65092: LD_VAR 0 2
65096: PUSH
65097: LD_INT 4
65099: MINUS
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: PUSH
65109: LD_VAR 0 1
65113: PUSH
65114: LD_INT 3
65116: MINUS
65117: PUSH
65118: LD_VAR 0 2
65122: PUSH
65123: LD_INT 3
65125: MINUS
65126: PUSH
65127: LD_INT 2
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: LIST
65134: PUSH
65135: LD_VAR 0 1
65139: PUSH
65140: LD_INT 4
65142: MINUS
65143: PUSH
65144: LD_VAR 0 2
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: PUSH
65157: LD_VAR 0 1
65161: PUSH
65162: LD_VAR 0 2
65166: PUSH
65167: LD_INT 3
65169: PLUS
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: PUSH
65179: LD_VAR 0 1
65183: PUSH
65184: LD_INT 4
65186: PLUS
65187: PUSH
65188: LD_VAR 0 2
65192: PUSH
65193: LD_INT 4
65195: PLUS
65196: PUSH
65197: LD_INT 5
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: ST_TO_ADDR
// end ; 2 :
65212: GO 65771
65214: LD_INT 2
65216: DOUBLE
65217: EQUAL
65218: IFTRUE 65222
65220: GO 65351
65222: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65223: LD_ADDR_VAR 0 5
65227: PUSH
65228: LD_VAR 0 1
65232: PUSH
65233: LD_VAR 0 2
65237: PUSH
65238: LD_INT 3
65240: MINUS
65241: PUSH
65242: LD_INT 3
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: PUSH
65250: LD_VAR 0 1
65254: PUSH
65255: LD_INT 4
65257: PLUS
65258: PUSH
65259: LD_VAR 0 2
65263: PUSH
65264: LD_INT 4
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_VAR 0 2
65281: PUSH
65282: LD_INT 4
65284: PLUS
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: PUSH
65294: LD_VAR 0 1
65298: PUSH
65299: LD_INT 3
65301: MINUS
65302: PUSH
65303: LD_VAR 0 2
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: LIST
65315: PUSH
65316: LD_VAR 0 1
65320: PUSH
65321: LD_INT 4
65323: MINUS
65324: PUSH
65325: LD_VAR 0 2
65329: PUSH
65330: LD_INT 4
65332: MINUS
65333: PUSH
65334: LD_INT 2
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: ST_TO_ADDR
// end ; 3 :
65349: GO 65771
65351: LD_INT 3
65353: DOUBLE
65354: EQUAL
65355: IFTRUE 65359
65357: GO 65492
65359: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65360: LD_ADDR_VAR 0 5
65364: PUSH
65365: LD_VAR 0 1
65369: PUSH
65370: LD_INT 3
65372: PLUS
65373: PUSH
65374: LD_VAR 0 2
65378: PUSH
65379: LD_INT 4
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: LIST
65386: PUSH
65387: LD_VAR 0 1
65391: PUSH
65392: LD_INT 4
65394: PLUS
65395: PUSH
65396: LD_VAR 0 2
65400: PUSH
65401: LD_INT 4
65403: PLUS
65404: PUSH
65405: LD_INT 5
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: LIST
65412: PUSH
65413: LD_VAR 0 1
65417: PUSH
65418: LD_INT 4
65420: MINUS
65421: PUSH
65422: LD_VAR 0 2
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: PUSH
65435: LD_VAR 0 1
65439: PUSH
65440: LD_VAR 0 2
65444: PUSH
65445: LD_INT 4
65447: MINUS
65448: PUSH
65449: LD_INT 3
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: PUSH
65457: LD_VAR 0 1
65461: PUSH
65462: LD_INT 3
65464: MINUS
65465: PUSH
65466: LD_VAR 0 2
65470: PUSH
65471: LD_INT 3
65473: MINUS
65474: PUSH
65475: LD_INT 2
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: LIST
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: ST_TO_ADDR
// end ; 4 :
65490: GO 65771
65492: LD_INT 4
65494: DOUBLE
65495: EQUAL
65496: IFTRUE 65500
65498: GO 65633
65500: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65501: LD_ADDR_VAR 0 5
65505: PUSH
65506: LD_VAR 0 1
65510: PUSH
65511: LD_VAR 0 2
65515: PUSH
65516: LD_INT 4
65518: PLUS
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: PUSH
65528: LD_VAR 0 1
65532: PUSH
65533: LD_INT 3
65535: PLUS
65536: PUSH
65537: LD_VAR 0 2
65541: PUSH
65542: LD_INT 3
65544: PLUS
65545: PUSH
65546: LD_INT 5
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: PUSH
65554: LD_VAR 0 1
65558: PUSH
65559: LD_INT 4
65561: PLUS
65562: PUSH
65563: LD_VAR 0 2
65567: PUSH
65568: LD_INT 4
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: LIST
65575: PUSH
65576: LD_VAR 0 1
65580: PUSH
65581: LD_VAR 0 2
65585: PUSH
65586: LD_INT 3
65588: MINUS
65589: PUSH
65590: LD_INT 3
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: PUSH
65598: LD_VAR 0 1
65602: PUSH
65603: LD_INT 4
65605: MINUS
65606: PUSH
65607: LD_VAR 0 2
65611: PUSH
65612: LD_INT 4
65614: MINUS
65615: PUSH
65616: LD_INT 2
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: LIST
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: ST_TO_ADDR
// end ; 5 :
65631: GO 65771
65633: LD_INT 5
65635: DOUBLE
65636: EQUAL
65637: IFTRUE 65641
65639: GO 65770
65641: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65642: LD_ADDR_VAR 0 5
65646: PUSH
65647: LD_VAR 0 1
65651: PUSH
65652: LD_INT 4
65654: MINUS
65655: PUSH
65656: LD_VAR 0 2
65660: PUSH
65661: LD_INT 1
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: LIST
65668: PUSH
65669: LD_VAR 0 1
65673: PUSH
65674: LD_VAR 0 2
65678: PUSH
65679: LD_INT 4
65681: MINUS
65682: PUSH
65683: LD_INT 3
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: PUSH
65691: LD_VAR 0 1
65695: PUSH
65696: LD_INT 4
65698: PLUS
65699: PUSH
65700: LD_VAR 0 2
65704: PUSH
65705: LD_INT 4
65707: PLUS
65708: PUSH
65709: LD_INT 5
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: PUSH
65717: LD_VAR 0 1
65721: PUSH
65722: LD_INT 3
65724: PLUS
65725: PUSH
65726: LD_VAR 0 2
65730: PUSH
65731: LD_INT 4
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: LIST
65738: PUSH
65739: LD_VAR 0 1
65743: PUSH
65744: LD_VAR 0 2
65748: PUSH
65749: LD_INT 3
65751: PLUS
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: LIST
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: ST_TO_ADDR
// end ; end ;
65768: GO 65771
65770: POP
// result := list ;
65771: LD_ADDR_VAR 0 4
65775: PUSH
65776: LD_VAR 0 5
65780: ST_TO_ADDR
// end ;
65781: LD_VAR 0 4
65785: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65786: LD_INT 0
65788: PPUSH
65789: PPUSH
65790: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65791: LD_VAR 0 1
65795: NOT
65796: PUSH
65797: LD_VAR 0 2
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: LD_INT 2
65807: PUSH
65808: LD_INT 3
65810: PUSH
65811: LD_INT 4
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: IN
65820: NOT
65821: OR
65822: IFFALSE 65826
// exit ;
65824: GO 65918
// tmp := [ ] ;
65826: LD_ADDR_VAR 0 5
65830: PUSH
65831: EMPTY
65832: ST_TO_ADDR
// for i in units do
65833: LD_ADDR_VAR 0 4
65837: PUSH
65838: LD_VAR 0 1
65842: PUSH
65843: FOR_IN
65844: IFFALSE 65887
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65846: LD_ADDR_VAR 0 5
65850: PUSH
65851: LD_VAR 0 5
65855: PPUSH
65856: LD_VAR 0 5
65860: PUSH
65861: LD_INT 1
65863: PLUS
65864: PPUSH
65865: LD_VAR 0 4
65869: PPUSH
65870: LD_VAR 0 2
65874: PPUSH
65875: CALL_OW 259
65879: PPUSH
65880: CALL_OW 2
65884: ST_TO_ADDR
65885: GO 65843
65887: POP
65888: POP
// if not tmp then
65889: LD_VAR 0 5
65893: NOT
65894: IFFALSE 65898
// exit ;
65896: GO 65918
// result := SortListByListDesc ( units , tmp ) ;
65898: LD_ADDR_VAR 0 3
65902: PUSH
65903: LD_VAR 0 1
65907: PPUSH
65908: LD_VAR 0 5
65912: PPUSH
65913: CALL_OW 77
65917: ST_TO_ADDR
// end ;
65918: LD_VAR 0 3
65922: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65923: LD_INT 0
65925: PPUSH
65926: PPUSH
65927: PPUSH
// result := false ;
65928: LD_ADDR_VAR 0 3
65932: PUSH
65933: LD_INT 0
65935: ST_TO_ADDR
// x := GetX ( building ) ;
65936: LD_ADDR_VAR 0 4
65940: PUSH
65941: LD_VAR 0 2
65945: PPUSH
65946: CALL_OW 250
65950: ST_TO_ADDR
// y := GetY ( building ) ;
65951: LD_ADDR_VAR 0 5
65955: PUSH
65956: LD_VAR 0 2
65960: PPUSH
65961: CALL_OW 251
65965: ST_TO_ADDR
// if not building or not x or not y then
65966: LD_VAR 0 2
65970: NOT
65971: PUSH
65972: LD_VAR 0 4
65976: NOT
65977: OR
65978: PUSH
65979: LD_VAR 0 5
65983: NOT
65984: OR
65985: IFFALSE 65989
// exit ;
65987: GO 66081
// if GetTaskList ( unit ) then
65989: LD_VAR 0 1
65993: PPUSH
65994: CALL_OW 437
65998: IFFALSE 66081
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66000: LD_STRING e
66002: PUSH
66003: LD_VAR 0 1
66007: PPUSH
66008: CALL_OW 437
66012: PUSH
66013: LD_INT 1
66015: ARRAY
66016: PUSH
66017: LD_INT 1
66019: ARRAY
66020: EQUAL
66021: PUSH
66022: LD_VAR 0 4
66026: PUSH
66027: LD_VAR 0 1
66031: PPUSH
66032: CALL_OW 437
66036: PUSH
66037: LD_INT 1
66039: ARRAY
66040: PUSH
66041: LD_INT 2
66043: ARRAY
66044: EQUAL
66045: AND
66046: PUSH
66047: LD_VAR 0 5
66051: PUSH
66052: LD_VAR 0 1
66056: PPUSH
66057: CALL_OW 437
66061: PUSH
66062: LD_INT 1
66064: ARRAY
66065: PUSH
66066: LD_INT 3
66068: ARRAY
66069: EQUAL
66070: AND
66071: IFFALSE 66081
// result := true end ;
66073: LD_ADDR_VAR 0 3
66077: PUSH
66078: LD_INT 1
66080: ST_TO_ADDR
// end ;
66081: LD_VAR 0 3
66085: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66086: LD_INT 0
66088: PPUSH
// result := false ;
66089: LD_ADDR_VAR 0 4
66093: PUSH
66094: LD_INT 0
66096: ST_TO_ADDR
// if GetTaskList ( unit ) then
66097: LD_VAR 0 1
66101: PPUSH
66102: CALL_OW 437
66106: IFFALSE 66189
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66108: LD_STRING M
66110: PUSH
66111: LD_VAR 0 1
66115: PPUSH
66116: CALL_OW 437
66120: PUSH
66121: LD_INT 1
66123: ARRAY
66124: PUSH
66125: LD_INT 1
66127: ARRAY
66128: EQUAL
66129: PUSH
66130: LD_VAR 0 2
66134: PUSH
66135: LD_VAR 0 1
66139: PPUSH
66140: CALL_OW 437
66144: PUSH
66145: LD_INT 1
66147: ARRAY
66148: PUSH
66149: LD_INT 2
66151: ARRAY
66152: EQUAL
66153: AND
66154: PUSH
66155: LD_VAR 0 3
66159: PUSH
66160: LD_VAR 0 1
66164: PPUSH
66165: CALL_OW 437
66169: PUSH
66170: LD_INT 1
66172: ARRAY
66173: PUSH
66174: LD_INT 3
66176: ARRAY
66177: EQUAL
66178: AND
66179: IFFALSE 66189
// result := true ;
66181: LD_ADDR_VAR 0 4
66185: PUSH
66186: LD_INT 1
66188: ST_TO_ADDR
// end ; end ;
66189: LD_VAR 0 4
66193: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66194: LD_INT 0
66196: PPUSH
66197: PPUSH
66198: PPUSH
66199: PPUSH
// if not unit or not area then
66200: LD_VAR 0 1
66204: NOT
66205: PUSH
66206: LD_VAR 0 2
66210: NOT
66211: OR
66212: IFFALSE 66216
// exit ;
66214: GO 66380
// tmp := AreaToList ( area , i ) ;
66216: LD_ADDR_VAR 0 6
66220: PUSH
66221: LD_VAR 0 2
66225: PPUSH
66226: LD_VAR 0 5
66230: PPUSH
66231: CALL_OW 517
66235: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66236: LD_ADDR_VAR 0 5
66240: PUSH
66241: DOUBLE
66242: LD_INT 1
66244: DEC
66245: ST_TO_ADDR
66246: LD_VAR 0 6
66250: PUSH
66251: LD_INT 1
66253: ARRAY
66254: PUSH
66255: FOR_TO
66256: IFFALSE 66378
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66258: LD_ADDR_VAR 0 7
66262: PUSH
66263: LD_VAR 0 6
66267: PUSH
66268: LD_INT 1
66270: ARRAY
66271: PUSH
66272: LD_VAR 0 5
66276: ARRAY
66277: PUSH
66278: LD_VAR 0 6
66282: PUSH
66283: LD_INT 2
66285: ARRAY
66286: PUSH
66287: LD_VAR 0 5
66291: ARRAY
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66297: LD_VAR 0 7
66301: PUSH
66302: LD_INT 1
66304: ARRAY
66305: PPUSH
66306: LD_VAR 0 7
66310: PUSH
66311: LD_INT 2
66313: ARRAY
66314: PPUSH
66315: CALL_OW 428
66319: PUSH
66320: LD_INT 0
66322: EQUAL
66323: IFFALSE 66376
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66325: LD_VAR 0 1
66329: PPUSH
66330: LD_VAR 0 7
66334: PUSH
66335: LD_INT 1
66337: ARRAY
66338: PPUSH
66339: LD_VAR 0 7
66343: PUSH
66344: LD_INT 2
66346: ARRAY
66347: PPUSH
66348: LD_VAR 0 3
66352: PPUSH
66353: CALL_OW 48
// result := IsPlaced ( unit ) ;
66357: LD_ADDR_VAR 0 4
66361: PUSH
66362: LD_VAR 0 1
66366: PPUSH
66367: CALL_OW 305
66371: ST_TO_ADDR
// exit ;
66372: POP
66373: POP
66374: GO 66380
// end ; end ;
66376: GO 66255
66378: POP
66379: POP
// end ;
66380: LD_VAR 0 4
66384: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66385: LD_INT 0
66387: PPUSH
66388: PPUSH
66389: PPUSH
// if not side or side > 8 then
66390: LD_VAR 0 1
66394: NOT
66395: PUSH
66396: LD_VAR 0 1
66400: PUSH
66401: LD_INT 8
66403: GREATER
66404: OR
66405: IFFALSE 66409
// exit ;
66407: GO 66596
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66409: LD_ADDR_VAR 0 4
66413: PUSH
66414: LD_INT 22
66416: PUSH
66417: LD_VAR 0 1
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 21
66428: PUSH
66429: LD_INT 3
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PPUSH
66440: CALL_OW 69
66444: ST_TO_ADDR
// if not tmp then
66445: LD_VAR 0 4
66449: NOT
66450: IFFALSE 66454
// exit ;
66452: GO 66596
// enable_addtolog := true ;
66454: LD_ADDR_OWVAR 81
66458: PUSH
66459: LD_INT 1
66461: ST_TO_ADDR
// AddToLog ( [ ) ;
66462: LD_STRING [
66464: PPUSH
66465: CALL_OW 561
// for i in tmp do
66469: LD_ADDR_VAR 0 3
66473: PUSH
66474: LD_VAR 0 4
66478: PUSH
66479: FOR_IN
66480: IFFALSE 66587
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66482: LD_STRING [
66484: PUSH
66485: LD_VAR 0 3
66489: PPUSH
66490: CALL_OW 266
66494: STR
66495: PUSH
66496: LD_STRING , 
66498: STR
66499: PUSH
66500: LD_VAR 0 3
66504: PPUSH
66505: CALL_OW 250
66509: STR
66510: PUSH
66511: LD_STRING , 
66513: STR
66514: PUSH
66515: LD_VAR 0 3
66519: PPUSH
66520: CALL_OW 251
66524: STR
66525: PUSH
66526: LD_STRING , 
66528: STR
66529: PUSH
66530: LD_VAR 0 3
66534: PPUSH
66535: CALL_OW 254
66539: STR
66540: PUSH
66541: LD_STRING , 
66543: STR
66544: PUSH
66545: LD_VAR 0 3
66549: PPUSH
66550: LD_INT 1
66552: PPUSH
66553: CALL_OW 268
66557: STR
66558: PUSH
66559: LD_STRING , 
66561: STR
66562: PUSH
66563: LD_VAR 0 3
66567: PPUSH
66568: LD_INT 2
66570: PPUSH
66571: CALL_OW 268
66575: STR
66576: PUSH
66577: LD_STRING ],
66579: STR
66580: PPUSH
66581: CALL_OW 561
// end ;
66585: GO 66479
66587: POP
66588: POP
// AddToLog ( ]; ) ;
66589: LD_STRING ];
66591: PPUSH
66592: CALL_OW 561
// end ;
66596: LD_VAR 0 2
66600: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66601: LD_INT 0
66603: PPUSH
66604: PPUSH
66605: PPUSH
66606: PPUSH
66607: PPUSH
// if not area or not rate or not max then
66608: LD_VAR 0 1
66612: NOT
66613: PUSH
66614: LD_VAR 0 2
66618: NOT
66619: OR
66620: PUSH
66621: LD_VAR 0 4
66625: NOT
66626: OR
66627: IFFALSE 66631
// exit ;
66629: GO 66823
// while 1 do
66631: LD_INT 1
66633: IFFALSE 66823
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66635: LD_ADDR_VAR 0 9
66639: PUSH
66640: LD_VAR 0 1
66644: PPUSH
66645: LD_INT 1
66647: PPUSH
66648: CALL_OW 287
66652: PUSH
66653: LD_INT 10
66655: MUL
66656: ST_TO_ADDR
// r := rate / 10 ;
66657: LD_ADDR_VAR 0 7
66661: PUSH
66662: LD_VAR 0 2
66666: PUSH
66667: LD_INT 10
66669: DIVREAL
66670: ST_TO_ADDR
// time := 1 1$00 ;
66671: LD_ADDR_VAR 0 8
66675: PUSH
66676: LD_INT 2100
66678: ST_TO_ADDR
// if amount < min then
66679: LD_VAR 0 9
66683: PUSH
66684: LD_VAR 0 3
66688: LESS
66689: IFFALSE 66707
// r := r * 2 else
66691: LD_ADDR_VAR 0 7
66695: PUSH
66696: LD_VAR 0 7
66700: PUSH
66701: LD_INT 2
66703: MUL
66704: ST_TO_ADDR
66705: GO 66733
// if amount > max then
66707: LD_VAR 0 9
66711: PUSH
66712: LD_VAR 0 4
66716: GREATER
66717: IFFALSE 66733
// r := r / 2 ;
66719: LD_ADDR_VAR 0 7
66723: PUSH
66724: LD_VAR 0 7
66728: PUSH
66729: LD_INT 2
66731: DIVREAL
66732: ST_TO_ADDR
// time := time / r ;
66733: LD_ADDR_VAR 0 8
66737: PUSH
66738: LD_VAR 0 8
66742: PUSH
66743: LD_VAR 0 7
66747: DIVREAL
66748: ST_TO_ADDR
// if time < 0 then
66749: LD_VAR 0 8
66753: PUSH
66754: LD_INT 0
66756: LESS
66757: IFFALSE 66774
// time := time * - 1 ;
66759: LD_ADDR_VAR 0 8
66763: PUSH
66764: LD_VAR 0 8
66768: PUSH
66769: LD_INT 1
66771: NEG
66772: MUL
66773: ST_TO_ADDR
// wait ( time ) ;
66774: LD_VAR 0 8
66778: PPUSH
66779: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66783: LD_INT 35
66785: PPUSH
66786: LD_INT 875
66788: PPUSH
66789: CALL_OW 12
66793: PPUSH
66794: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66798: LD_INT 1
66800: PPUSH
66801: LD_INT 5
66803: PPUSH
66804: CALL_OW 12
66808: PPUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: LD_INT 1
66816: PPUSH
66817: CALL_OW 55
// end ;
66821: GO 66631
// end ;
66823: LD_VAR 0 5
66827: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66828: LD_INT 0
66830: PPUSH
66831: PPUSH
66832: PPUSH
66833: PPUSH
66834: PPUSH
66835: PPUSH
66836: PPUSH
66837: PPUSH
// if not turrets or not factories then
66838: LD_VAR 0 1
66842: NOT
66843: PUSH
66844: LD_VAR 0 2
66848: NOT
66849: OR
66850: IFFALSE 66854
// exit ;
66852: GO 67161
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66854: LD_ADDR_VAR 0 10
66858: PUSH
66859: LD_INT 5
66861: PUSH
66862: LD_INT 6
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 2
66871: PUSH
66872: LD_INT 4
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: LD_INT 5
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 24
66896: PUSH
66897: LD_INT 25
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 23
66906: PUSH
66907: LD_INT 27
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 42
66920: PUSH
66921: LD_INT 43
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 44
66930: PUSH
66931: LD_INT 46
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 45
66940: PUSH
66941: LD_INT 47
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: LIST
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: LIST
66957: ST_TO_ADDR
// result := [ ] ;
66958: LD_ADDR_VAR 0 3
66962: PUSH
66963: EMPTY
66964: ST_TO_ADDR
// for i in turrets do
66965: LD_ADDR_VAR 0 4
66969: PUSH
66970: LD_VAR 0 1
66974: PUSH
66975: FOR_IN
66976: IFFALSE 67159
// begin nat := GetNation ( i ) ;
66978: LD_ADDR_VAR 0 7
66982: PUSH
66983: LD_VAR 0 4
66987: PPUSH
66988: CALL_OW 248
66992: ST_TO_ADDR
// weapon := 0 ;
66993: LD_ADDR_VAR 0 8
66997: PUSH
66998: LD_INT 0
67000: ST_TO_ADDR
// if not nat then
67001: LD_VAR 0 7
67005: NOT
67006: IFFALSE 67010
// continue ;
67008: GO 66975
// for j in list [ nat ] do
67010: LD_ADDR_VAR 0 5
67014: PUSH
67015: LD_VAR 0 10
67019: PUSH
67020: LD_VAR 0 7
67024: ARRAY
67025: PUSH
67026: FOR_IN
67027: IFFALSE 67068
// if GetBWeapon ( i ) = j [ 1 ] then
67029: LD_VAR 0 4
67033: PPUSH
67034: CALL_OW 269
67038: PUSH
67039: LD_VAR 0 5
67043: PUSH
67044: LD_INT 1
67046: ARRAY
67047: EQUAL
67048: IFFALSE 67066
// begin weapon := j [ 2 ] ;
67050: LD_ADDR_VAR 0 8
67054: PUSH
67055: LD_VAR 0 5
67059: PUSH
67060: LD_INT 2
67062: ARRAY
67063: ST_TO_ADDR
// break ;
67064: GO 67068
// end ;
67066: GO 67026
67068: POP
67069: POP
// if not weapon then
67070: LD_VAR 0 8
67074: NOT
67075: IFFALSE 67079
// continue ;
67077: GO 66975
// for k in factories do
67079: LD_ADDR_VAR 0 6
67083: PUSH
67084: LD_VAR 0 2
67088: PUSH
67089: FOR_IN
67090: IFFALSE 67155
// begin weapons := AvailableWeaponList ( k ) ;
67092: LD_ADDR_VAR 0 9
67096: PUSH
67097: LD_VAR 0 6
67101: PPUSH
67102: CALL_OW 478
67106: ST_TO_ADDR
// if not weapons then
67107: LD_VAR 0 9
67111: NOT
67112: IFFALSE 67116
// continue ;
67114: GO 67089
// if weapon in weapons then
67116: LD_VAR 0 8
67120: PUSH
67121: LD_VAR 0 9
67125: IN
67126: IFFALSE 67153
// begin result := [ i , weapon ] ;
67128: LD_ADDR_VAR 0 3
67132: PUSH
67133: LD_VAR 0 4
67137: PUSH
67138: LD_VAR 0 8
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: ST_TO_ADDR
// exit ;
67147: POP
67148: POP
67149: POP
67150: POP
67151: GO 67161
// end ; end ;
67153: GO 67089
67155: POP
67156: POP
// end ;
67157: GO 66975
67159: POP
67160: POP
// end ;
67161: LD_VAR 0 3
67165: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67166: LD_INT 0
67168: PPUSH
// if not side or side > 8 then
67169: LD_VAR 0 3
67173: NOT
67174: PUSH
67175: LD_VAR 0 3
67179: PUSH
67180: LD_INT 8
67182: GREATER
67183: OR
67184: IFFALSE 67188
// exit ;
67186: GO 67247
// if not range then
67188: LD_VAR 0 4
67192: NOT
67193: IFFALSE 67204
// range := - 12 ;
67195: LD_ADDR_VAR 0 4
67199: PUSH
67200: LD_INT 12
67202: NEG
67203: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67204: LD_VAR 0 1
67208: PPUSH
67209: LD_VAR 0 2
67213: PPUSH
67214: LD_VAR 0 3
67218: PPUSH
67219: LD_VAR 0 4
67223: PPUSH
67224: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67228: LD_VAR 0 1
67232: PPUSH
67233: LD_VAR 0 2
67237: PPUSH
67238: LD_VAR 0 3
67242: PPUSH
67243: CALL_OW 331
// end ;
67247: LD_VAR 0 5
67251: RET
// export function Video ( mode ) ; begin
67252: LD_INT 0
67254: PPUSH
// ingame_video = mode ;
67255: LD_ADDR_OWVAR 52
67259: PUSH
67260: LD_VAR 0 1
67264: ST_TO_ADDR
// interface_hidden = mode ;
67265: LD_ADDR_OWVAR 54
67269: PUSH
67270: LD_VAR 0 1
67274: ST_TO_ADDR
// end ;
67275: LD_VAR 0 2
67279: RET
// export function Join ( array , element ) ; begin
67280: LD_INT 0
67282: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67283: LD_ADDR_VAR 0 3
67287: PUSH
67288: LD_VAR 0 1
67292: PPUSH
67293: LD_VAR 0 1
67297: PUSH
67298: LD_INT 1
67300: PLUS
67301: PPUSH
67302: LD_VAR 0 2
67306: PPUSH
67307: CALL_OW 1
67311: ST_TO_ADDR
// end ;
67312: LD_VAR 0 3
67316: RET
// export function JoinUnion ( array , element ) ; begin
67317: LD_INT 0
67319: PPUSH
// result := array union element ;
67320: LD_ADDR_VAR 0 3
67324: PUSH
67325: LD_VAR 0 1
67329: PUSH
67330: LD_VAR 0 2
67334: UNION
67335: ST_TO_ADDR
// end ;
67336: LD_VAR 0 3
67340: RET
// export function GetBehemoths ( side ) ; begin
67341: LD_INT 0
67343: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67344: LD_ADDR_VAR 0 2
67348: PUSH
67349: LD_INT 22
67351: PUSH
67352: LD_VAR 0 1
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 31
67363: PUSH
67364: LD_INT 25
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PPUSH
67375: CALL_OW 69
67379: ST_TO_ADDR
// end ;
67380: LD_VAR 0 2
67384: RET
// export function Shuffle ( array ) ; var i , index ; begin
67385: LD_INT 0
67387: PPUSH
67388: PPUSH
67389: PPUSH
// result := [ ] ;
67390: LD_ADDR_VAR 0 2
67394: PUSH
67395: EMPTY
67396: ST_TO_ADDR
// if not array then
67397: LD_VAR 0 1
67401: NOT
67402: IFFALSE 67406
// exit ;
67404: GO 67505
// Randomize ;
67406: CALL_OW 10
// for i = array downto 1 do
67410: LD_ADDR_VAR 0 3
67414: PUSH
67415: DOUBLE
67416: LD_VAR 0 1
67420: INC
67421: ST_TO_ADDR
67422: LD_INT 1
67424: PUSH
67425: FOR_DOWNTO
67426: IFFALSE 67503
// begin index := rand ( 1 , array ) ;
67428: LD_ADDR_VAR 0 4
67432: PUSH
67433: LD_INT 1
67435: PPUSH
67436: LD_VAR 0 1
67440: PPUSH
67441: CALL_OW 12
67445: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67446: LD_ADDR_VAR 0 2
67450: PUSH
67451: LD_VAR 0 2
67455: PPUSH
67456: LD_VAR 0 2
67460: PUSH
67461: LD_INT 1
67463: PLUS
67464: PPUSH
67465: LD_VAR 0 1
67469: PUSH
67470: LD_VAR 0 4
67474: ARRAY
67475: PPUSH
67476: CALL_OW 2
67480: ST_TO_ADDR
// array := Delete ( array , index ) ;
67481: LD_ADDR_VAR 0 1
67485: PUSH
67486: LD_VAR 0 1
67490: PPUSH
67491: LD_VAR 0 4
67495: PPUSH
67496: CALL_OW 3
67500: ST_TO_ADDR
// end ;
67501: GO 67425
67503: POP
67504: POP
// end ;
67505: LD_VAR 0 2
67509: RET
// export function GetBaseMaterials ( base ) ; begin
67510: LD_INT 0
67512: PPUSH
// result := [ 0 , 0 , 0 ] ;
67513: LD_ADDR_VAR 0 2
67517: PUSH
67518: LD_INT 0
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: ST_TO_ADDR
// if not base then
67532: LD_VAR 0 1
67536: NOT
67537: IFFALSE 67541
// exit ;
67539: GO 67590
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67541: LD_ADDR_VAR 0 2
67545: PUSH
67546: LD_VAR 0 1
67550: PPUSH
67551: LD_INT 1
67553: PPUSH
67554: CALL_OW 275
67558: PUSH
67559: LD_VAR 0 1
67563: PPUSH
67564: LD_INT 2
67566: PPUSH
67567: CALL_OW 275
67571: PUSH
67572: LD_VAR 0 1
67576: PPUSH
67577: LD_INT 3
67579: PPUSH
67580: CALL_OW 275
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: LIST
67589: ST_TO_ADDR
// end ;
67590: LD_VAR 0 2
67594: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67595: LD_INT 0
67597: PPUSH
67598: PPUSH
// result := array ;
67599: LD_ADDR_VAR 0 3
67603: PUSH
67604: LD_VAR 0 1
67608: ST_TO_ADDR
// if size > 0 then
67609: LD_VAR 0 2
67613: PUSH
67614: LD_INT 0
67616: GREATER
67617: IFFALSE 67663
// for i := array downto size do
67619: LD_ADDR_VAR 0 4
67623: PUSH
67624: DOUBLE
67625: LD_VAR 0 1
67629: INC
67630: ST_TO_ADDR
67631: LD_VAR 0 2
67635: PUSH
67636: FOR_DOWNTO
67637: IFFALSE 67661
// result := Delete ( result , result ) ;
67639: LD_ADDR_VAR 0 3
67643: PUSH
67644: LD_VAR 0 3
67648: PPUSH
67649: LD_VAR 0 3
67653: PPUSH
67654: CALL_OW 3
67658: ST_TO_ADDR
67659: GO 67636
67661: POP
67662: POP
// end ;
67663: LD_VAR 0 3
67667: RET
// export function ComExit ( unit ) ; var tmp ; begin
67668: LD_INT 0
67670: PPUSH
67671: PPUSH
// if not IsInUnit ( unit ) then
67672: LD_VAR 0 1
67676: PPUSH
67677: CALL_OW 310
67681: NOT
67682: IFFALSE 67686
// exit ;
67684: GO 67746
// tmp := IsInUnit ( unit ) ;
67686: LD_ADDR_VAR 0 3
67690: PUSH
67691: LD_VAR 0 1
67695: PPUSH
67696: CALL_OW 310
67700: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67701: LD_VAR 0 3
67705: PPUSH
67706: CALL_OW 247
67710: PUSH
67711: LD_INT 2
67713: EQUAL
67714: IFFALSE 67727
// ComExitVehicle ( unit ) else
67716: LD_VAR 0 1
67720: PPUSH
67721: CALL_OW 121
67725: GO 67736
// ComExitBuilding ( unit ) ;
67727: LD_VAR 0 1
67731: PPUSH
67732: CALL_OW 122
// result := tmp ;
67736: LD_ADDR_VAR 0 2
67740: PUSH
67741: LD_VAR 0 3
67745: ST_TO_ADDR
// end ;
67746: LD_VAR 0 2
67750: RET
// export function ComExitAll ( units ) ; var i ; begin
67751: LD_INT 0
67753: PPUSH
67754: PPUSH
// if not units then
67755: LD_VAR 0 1
67759: NOT
67760: IFFALSE 67764
// exit ;
67762: GO 67790
// for i in units do
67764: LD_ADDR_VAR 0 3
67768: PUSH
67769: LD_VAR 0 1
67773: PUSH
67774: FOR_IN
67775: IFFALSE 67788
// ComExit ( i ) ;
67777: LD_VAR 0 3
67781: PPUSH
67782: CALL 67668 0 1
67786: GO 67774
67788: POP
67789: POP
// end ;
67790: LD_VAR 0 2
67794: RET
// export function ResetHc ; begin
67795: LD_INT 0
67797: PPUSH
// InitHc ;
67798: CALL_OW 19
// hc_importance := 0 ;
67802: LD_ADDR_OWVAR 32
67806: PUSH
67807: LD_INT 0
67809: ST_TO_ADDR
// end ;
67810: LD_VAR 0 1
67814: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67815: LD_INT 0
67817: PPUSH
67818: PPUSH
67819: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67820: LD_ADDR_VAR 0 6
67824: PUSH
67825: LD_VAR 0 1
67829: PUSH
67830: LD_VAR 0 3
67834: PLUS
67835: PUSH
67836: LD_INT 2
67838: DIV
67839: ST_TO_ADDR
// if _x < 0 then
67840: LD_VAR 0 6
67844: PUSH
67845: LD_INT 0
67847: LESS
67848: IFFALSE 67865
// _x := _x * - 1 ;
67850: LD_ADDR_VAR 0 6
67854: PUSH
67855: LD_VAR 0 6
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: MUL
67864: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67865: LD_ADDR_VAR 0 7
67869: PUSH
67870: LD_VAR 0 2
67874: PUSH
67875: LD_VAR 0 4
67879: PLUS
67880: PUSH
67881: LD_INT 2
67883: DIV
67884: ST_TO_ADDR
// if _y < 0 then
67885: LD_VAR 0 7
67889: PUSH
67890: LD_INT 0
67892: LESS
67893: IFFALSE 67910
// _y := _y * - 1 ;
67895: LD_ADDR_VAR 0 7
67899: PUSH
67900: LD_VAR 0 7
67904: PUSH
67905: LD_INT 1
67907: NEG
67908: MUL
67909: ST_TO_ADDR
// result := [ _x , _y ] ;
67910: LD_ADDR_VAR 0 5
67914: PUSH
67915: LD_VAR 0 6
67919: PUSH
67920: LD_VAR 0 7
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: ST_TO_ADDR
// end ;
67929: LD_VAR 0 5
67933: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67934: LD_INT 0
67936: PPUSH
67937: PPUSH
67938: PPUSH
67939: PPUSH
// task := GetTaskList ( unit ) ;
67940: LD_ADDR_VAR 0 7
67944: PUSH
67945: LD_VAR 0 1
67949: PPUSH
67950: CALL_OW 437
67954: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67955: LD_VAR 0 7
67959: NOT
67960: PUSH
67961: LD_VAR 0 1
67965: PPUSH
67966: LD_VAR 0 2
67970: PPUSH
67971: CALL_OW 308
67975: NOT
67976: AND
67977: IFFALSE 67981
// exit ;
67979: GO 68099
// if IsInArea ( unit , area ) then
67981: LD_VAR 0 1
67985: PPUSH
67986: LD_VAR 0 2
67990: PPUSH
67991: CALL_OW 308
67995: IFFALSE 68013
// begin ComMoveToArea ( unit , goAway ) ;
67997: LD_VAR 0 1
68001: PPUSH
68002: LD_VAR 0 3
68006: PPUSH
68007: CALL_OW 113
// exit ;
68011: GO 68099
// end ; if task [ 1 ] [ 1 ] <> M then
68013: LD_VAR 0 7
68017: PUSH
68018: LD_INT 1
68020: ARRAY
68021: PUSH
68022: LD_INT 1
68024: ARRAY
68025: PUSH
68026: LD_STRING M
68028: NONEQUAL
68029: IFFALSE 68033
// exit ;
68031: GO 68099
// x := task [ 1 ] [ 2 ] ;
68033: LD_ADDR_VAR 0 5
68037: PUSH
68038: LD_VAR 0 7
68042: PUSH
68043: LD_INT 1
68045: ARRAY
68046: PUSH
68047: LD_INT 2
68049: ARRAY
68050: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68051: LD_ADDR_VAR 0 6
68055: PUSH
68056: LD_VAR 0 7
68060: PUSH
68061: LD_INT 1
68063: ARRAY
68064: PUSH
68065: LD_INT 3
68067: ARRAY
68068: ST_TO_ADDR
// if InArea ( x , y , area ) then
68069: LD_VAR 0 5
68073: PPUSH
68074: LD_VAR 0 6
68078: PPUSH
68079: LD_VAR 0 2
68083: PPUSH
68084: CALL_OW 309
68088: IFFALSE 68099
// ComStop ( unit ) ;
68090: LD_VAR 0 1
68094: PPUSH
68095: CALL_OW 141
// end ;
68099: LD_VAR 0 4
68103: RET
// export function Abs ( value ) ; begin
68104: LD_INT 0
68106: PPUSH
// result := value ;
68107: LD_ADDR_VAR 0 2
68111: PUSH
68112: LD_VAR 0 1
68116: ST_TO_ADDR
// if value < 0 then
68117: LD_VAR 0 1
68121: PUSH
68122: LD_INT 0
68124: LESS
68125: IFFALSE 68142
// result := value * - 1 ;
68127: LD_ADDR_VAR 0 2
68131: PUSH
68132: LD_VAR 0 1
68136: PUSH
68137: LD_INT 1
68139: NEG
68140: MUL
68141: ST_TO_ADDR
// end ;
68142: LD_VAR 0 2
68146: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68147: LD_INT 0
68149: PPUSH
68150: PPUSH
68151: PPUSH
68152: PPUSH
68153: PPUSH
68154: PPUSH
68155: PPUSH
68156: PPUSH
// if not unit or not building then
68157: LD_VAR 0 1
68161: NOT
68162: PUSH
68163: LD_VAR 0 2
68167: NOT
68168: OR
68169: IFFALSE 68173
// exit ;
68171: GO 68399
// x := GetX ( building ) ;
68173: LD_ADDR_VAR 0 4
68177: PUSH
68178: LD_VAR 0 2
68182: PPUSH
68183: CALL_OW 250
68187: ST_TO_ADDR
// y := GetY ( building ) ;
68188: LD_ADDR_VAR 0 6
68192: PUSH
68193: LD_VAR 0 2
68197: PPUSH
68198: CALL_OW 251
68202: ST_TO_ADDR
// d := GetDir ( building ) ;
68203: LD_ADDR_VAR 0 8
68207: PUSH
68208: LD_VAR 0 2
68212: PPUSH
68213: CALL_OW 254
68217: ST_TO_ADDR
// r := 4 ;
68218: LD_ADDR_VAR 0 9
68222: PUSH
68223: LD_INT 4
68225: ST_TO_ADDR
// for i := 1 to 5 do
68226: LD_ADDR_VAR 0 10
68230: PUSH
68231: DOUBLE
68232: LD_INT 1
68234: DEC
68235: ST_TO_ADDR
68236: LD_INT 5
68238: PUSH
68239: FOR_TO
68240: IFFALSE 68397
// begin _x := ShiftX ( x , d , r + i ) ;
68242: LD_ADDR_VAR 0 5
68246: PUSH
68247: LD_VAR 0 4
68251: PPUSH
68252: LD_VAR 0 8
68256: PPUSH
68257: LD_VAR 0 9
68261: PUSH
68262: LD_VAR 0 10
68266: PLUS
68267: PPUSH
68268: CALL_OW 272
68272: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68273: LD_ADDR_VAR 0 7
68277: PUSH
68278: LD_VAR 0 6
68282: PPUSH
68283: LD_VAR 0 8
68287: PPUSH
68288: LD_VAR 0 9
68292: PUSH
68293: LD_VAR 0 10
68297: PLUS
68298: PPUSH
68299: CALL_OW 273
68303: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68304: LD_VAR 0 5
68308: PPUSH
68309: LD_VAR 0 7
68313: PPUSH
68314: CALL_OW 488
68318: PUSH
68319: LD_VAR 0 5
68323: PPUSH
68324: LD_VAR 0 7
68328: PPUSH
68329: CALL_OW 428
68333: PPUSH
68334: CALL_OW 247
68338: PUSH
68339: LD_INT 3
68341: PUSH
68342: LD_INT 2
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: IN
68349: NOT
68350: AND
68351: IFFALSE 68395
// begin ComMoveXY ( unit , _x , _y ) ;
68353: LD_VAR 0 1
68357: PPUSH
68358: LD_VAR 0 5
68362: PPUSH
68363: LD_VAR 0 7
68367: PPUSH
68368: CALL_OW 111
// result := [ _x , _y ] ;
68372: LD_ADDR_VAR 0 3
68376: PUSH
68377: LD_VAR 0 5
68381: PUSH
68382: LD_VAR 0 7
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: ST_TO_ADDR
// exit ;
68391: POP
68392: POP
68393: GO 68399
// end ; end ;
68395: GO 68239
68397: POP
68398: POP
// end ;
68399: LD_VAR 0 3
68403: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68404: LD_INT 0
68406: PPUSH
68407: PPUSH
68408: PPUSH
// result := 0 ;
68409: LD_ADDR_VAR 0 3
68413: PUSH
68414: LD_INT 0
68416: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68417: LD_VAR 0 1
68421: PUSH
68422: LD_INT 0
68424: LESS
68425: PUSH
68426: LD_VAR 0 1
68430: PUSH
68431: LD_INT 8
68433: GREATER
68434: OR
68435: PUSH
68436: LD_VAR 0 2
68440: PUSH
68441: LD_INT 0
68443: LESS
68444: OR
68445: PUSH
68446: LD_VAR 0 2
68450: PUSH
68451: LD_INT 8
68453: GREATER
68454: OR
68455: IFFALSE 68459
// exit ;
68457: GO 68534
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68459: LD_ADDR_VAR 0 4
68463: PUSH
68464: LD_INT 22
68466: PUSH
68467: LD_VAR 0 2
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PPUSH
68476: CALL_OW 69
68480: PUSH
68481: FOR_IN
68482: IFFALSE 68532
// begin un := UnitShoot ( i ) ;
68484: LD_ADDR_VAR 0 5
68488: PUSH
68489: LD_VAR 0 4
68493: PPUSH
68494: CALL_OW 504
68498: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68499: LD_VAR 0 5
68503: PPUSH
68504: CALL_OW 255
68508: PUSH
68509: LD_VAR 0 1
68513: EQUAL
68514: IFFALSE 68530
// begin result := un ;
68516: LD_ADDR_VAR 0 3
68520: PUSH
68521: LD_VAR 0 5
68525: ST_TO_ADDR
// exit ;
68526: POP
68527: POP
68528: GO 68534
// end ; end ;
68530: GO 68481
68532: POP
68533: POP
// end ;
68534: LD_VAR 0 3
68538: RET
// export function GetCargoBay ( units ) ; begin
68539: LD_INT 0
68541: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68542: LD_ADDR_VAR 0 2
68546: PUSH
68547: LD_VAR 0 1
68551: PPUSH
68552: LD_INT 2
68554: PUSH
68555: LD_INT 34
68557: PUSH
68558: LD_INT 12
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 34
68567: PUSH
68568: LD_INT 51
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 34
68577: PUSH
68578: LD_INT 32
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 34
68587: PUSH
68588: LD_EXP 22
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: PPUSH
68604: CALL_OW 72
68608: ST_TO_ADDR
// end ;
68609: LD_VAR 0 2
68613: RET
// export function Negate ( value ) ; begin
68614: LD_INT 0
68616: PPUSH
// result := not value ;
68617: LD_ADDR_VAR 0 2
68621: PUSH
68622: LD_VAR 0 1
68626: NOT
68627: ST_TO_ADDR
// end ;
68628: LD_VAR 0 2
68632: RET
// export function Inc ( value ) ; begin
68633: LD_INT 0
68635: PPUSH
// result := value + 1 ;
68636: LD_ADDR_VAR 0 2
68640: PUSH
68641: LD_VAR 0 1
68645: PUSH
68646: LD_INT 1
68648: PLUS
68649: ST_TO_ADDR
// end ;
68650: LD_VAR 0 2
68654: RET
// export function Dec ( value ) ; begin
68655: LD_INT 0
68657: PPUSH
// result := value - 1 ;
68658: LD_ADDR_VAR 0 2
68662: PUSH
68663: LD_VAR 0 1
68667: PUSH
68668: LD_INT 1
68670: MINUS
68671: ST_TO_ADDR
// end ;
68672: LD_VAR 0 2
68676: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68677: LD_INT 0
68679: PPUSH
68680: PPUSH
68681: PPUSH
68682: PPUSH
68683: PPUSH
68684: PPUSH
68685: PPUSH
68686: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68687: LD_VAR 0 1
68691: PPUSH
68692: LD_VAR 0 2
68696: PPUSH
68697: CALL_OW 488
68701: NOT
68702: PUSH
68703: LD_VAR 0 3
68707: PPUSH
68708: LD_VAR 0 4
68712: PPUSH
68713: CALL_OW 488
68717: NOT
68718: OR
68719: IFFALSE 68732
// begin result := - 1 ;
68721: LD_ADDR_VAR 0 5
68725: PUSH
68726: LD_INT 1
68728: NEG
68729: ST_TO_ADDR
// exit ;
68730: GO 68967
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68732: LD_ADDR_VAR 0 12
68736: PUSH
68737: LD_VAR 0 1
68741: PPUSH
68742: LD_VAR 0 2
68746: PPUSH
68747: LD_VAR 0 3
68751: PPUSH
68752: LD_VAR 0 4
68756: PPUSH
68757: CALL 67815 0 4
68761: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68762: LD_ADDR_VAR 0 11
68766: PUSH
68767: LD_VAR 0 1
68771: PPUSH
68772: LD_VAR 0 2
68776: PPUSH
68777: LD_VAR 0 12
68781: PUSH
68782: LD_INT 1
68784: ARRAY
68785: PPUSH
68786: LD_VAR 0 12
68790: PUSH
68791: LD_INT 2
68793: ARRAY
68794: PPUSH
68795: CALL_OW 298
68799: ST_TO_ADDR
// distance := 9999 ;
68800: LD_ADDR_VAR 0 10
68804: PUSH
68805: LD_INT 9999
68807: ST_TO_ADDR
// for i := 0 to 5 do
68808: LD_ADDR_VAR 0 6
68812: PUSH
68813: DOUBLE
68814: LD_INT 0
68816: DEC
68817: ST_TO_ADDR
68818: LD_INT 5
68820: PUSH
68821: FOR_TO
68822: IFFALSE 68965
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68824: LD_ADDR_VAR 0 7
68828: PUSH
68829: LD_VAR 0 1
68833: PPUSH
68834: LD_VAR 0 6
68838: PPUSH
68839: LD_VAR 0 11
68843: PPUSH
68844: CALL_OW 272
68848: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68849: LD_ADDR_VAR 0 8
68853: PUSH
68854: LD_VAR 0 2
68858: PPUSH
68859: LD_VAR 0 6
68863: PPUSH
68864: LD_VAR 0 11
68868: PPUSH
68869: CALL_OW 273
68873: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68874: LD_VAR 0 7
68878: PPUSH
68879: LD_VAR 0 8
68883: PPUSH
68884: CALL_OW 488
68888: NOT
68889: IFFALSE 68893
// continue ;
68891: GO 68821
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68893: LD_ADDR_VAR 0 9
68897: PUSH
68898: LD_VAR 0 12
68902: PUSH
68903: LD_INT 1
68905: ARRAY
68906: PPUSH
68907: LD_VAR 0 12
68911: PUSH
68912: LD_INT 2
68914: ARRAY
68915: PPUSH
68916: LD_VAR 0 7
68920: PPUSH
68921: LD_VAR 0 8
68925: PPUSH
68926: CALL_OW 298
68930: ST_TO_ADDR
// if tmp < distance then
68931: LD_VAR 0 9
68935: PUSH
68936: LD_VAR 0 10
68940: LESS
68941: IFFALSE 68963
// begin result := i ;
68943: LD_ADDR_VAR 0 5
68947: PUSH
68948: LD_VAR 0 6
68952: ST_TO_ADDR
// distance := tmp ;
68953: LD_ADDR_VAR 0 10
68957: PUSH
68958: LD_VAR 0 9
68962: ST_TO_ADDR
// end ; end ;
68963: GO 68821
68965: POP
68966: POP
// end ;
68967: LD_VAR 0 5
68971: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68972: LD_INT 0
68974: PPUSH
68975: PPUSH
// if not driver or not IsInUnit ( driver ) then
68976: LD_VAR 0 1
68980: NOT
68981: PUSH
68982: LD_VAR 0 1
68986: PPUSH
68987: CALL_OW 310
68991: NOT
68992: OR
68993: IFFALSE 68997
// exit ;
68995: GO 69087
// vehicle := IsInUnit ( driver ) ;
68997: LD_ADDR_VAR 0 3
69001: PUSH
69002: LD_VAR 0 1
69006: PPUSH
69007: CALL_OW 310
69011: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69012: LD_VAR 0 1
69016: PPUSH
69017: LD_STRING \
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: LD_INT 0
69025: PUSH
69026: LD_INT 0
69028: PUSH
69029: LD_INT 0
69031: PUSH
69032: LD_INT 0
69034: PUSH
69035: LD_INT 0
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: PUSH
69047: LD_STRING E
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: LD_VAR 0 3
69060: PUSH
69061: LD_INT 0
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: LD_INT 0
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PPUSH
69083: CALL_OW 446
// end ;
69087: LD_VAR 0 2
69091: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69092: LD_INT 0
69094: PPUSH
69095: PPUSH
// if not driver or not IsInUnit ( driver ) then
69096: LD_VAR 0 1
69100: NOT
69101: PUSH
69102: LD_VAR 0 1
69106: PPUSH
69107: CALL_OW 310
69111: NOT
69112: OR
69113: IFFALSE 69117
// exit ;
69115: GO 69207
// vehicle := IsInUnit ( driver ) ;
69117: LD_ADDR_VAR 0 3
69121: PUSH
69122: LD_VAR 0 1
69126: PPUSH
69127: CALL_OW 310
69131: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69132: LD_VAR 0 1
69136: PPUSH
69137: LD_STRING \
69139: PUSH
69140: LD_INT 0
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: LD_INT 0
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: LD_INT 0
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: PUSH
69167: LD_STRING E
69169: PUSH
69170: LD_INT 0
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: LD_VAR 0 3
69180: PUSH
69181: LD_INT 0
69183: PUSH
69184: LD_INT 0
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PPUSH
69203: CALL_OW 447
// end ;
69207: LD_VAR 0 2
69211: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69212: LD_INT 0
69214: PPUSH
69215: PPUSH
69216: PPUSH
// tmp := [ ] ;
69217: LD_ADDR_VAR 0 5
69221: PUSH
69222: EMPTY
69223: ST_TO_ADDR
// for i in units do
69224: LD_ADDR_VAR 0 4
69228: PUSH
69229: LD_VAR 0 1
69233: PUSH
69234: FOR_IN
69235: IFFALSE 69273
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69237: LD_ADDR_VAR 0 5
69241: PUSH
69242: LD_VAR 0 5
69246: PPUSH
69247: LD_VAR 0 5
69251: PUSH
69252: LD_INT 1
69254: PLUS
69255: PPUSH
69256: LD_VAR 0 4
69260: PPUSH
69261: CALL_OW 256
69265: PPUSH
69266: CALL_OW 2
69270: ST_TO_ADDR
69271: GO 69234
69273: POP
69274: POP
// if not tmp then
69275: LD_VAR 0 5
69279: NOT
69280: IFFALSE 69284
// exit ;
69282: GO 69332
// if asc then
69284: LD_VAR 0 2
69288: IFFALSE 69312
// result := SortListByListAsc ( units , tmp ) else
69290: LD_ADDR_VAR 0 3
69294: PUSH
69295: LD_VAR 0 1
69299: PPUSH
69300: LD_VAR 0 5
69304: PPUSH
69305: CALL_OW 76
69309: ST_TO_ADDR
69310: GO 69332
// result := SortListByListDesc ( units , tmp ) ;
69312: LD_ADDR_VAR 0 3
69316: PUSH
69317: LD_VAR 0 1
69321: PPUSH
69322: LD_VAR 0 5
69326: PPUSH
69327: CALL_OW 77
69331: ST_TO_ADDR
// end ;
69332: LD_VAR 0 3
69336: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69337: LD_INT 0
69339: PPUSH
69340: PPUSH
// task := GetTaskList ( mech ) ;
69341: LD_ADDR_VAR 0 4
69345: PUSH
69346: LD_VAR 0 1
69350: PPUSH
69351: CALL_OW 437
69355: ST_TO_ADDR
// if not task then
69356: LD_VAR 0 4
69360: NOT
69361: IFFALSE 69365
// exit ;
69363: GO 69407
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69365: LD_ADDR_VAR 0 3
69369: PUSH
69370: LD_VAR 0 4
69374: PUSH
69375: LD_INT 1
69377: ARRAY
69378: PUSH
69379: LD_INT 1
69381: ARRAY
69382: PUSH
69383: LD_STRING r
69385: EQUAL
69386: PUSH
69387: LD_VAR 0 4
69391: PUSH
69392: LD_INT 1
69394: ARRAY
69395: PUSH
69396: LD_INT 4
69398: ARRAY
69399: PUSH
69400: LD_VAR 0 2
69404: EQUAL
69405: AND
69406: ST_TO_ADDR
// end ;
69407: LD_VAR 0 3
69411: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69412: LD_INT 0
69414: PPUSH
// SetDir ( unit , d ) ;
69415: LD_VAR 0 1
69419: PPUSH
69420: LD_VAR 0 4
69424: PPUSH
69425: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69429: LD_VAR 0 1
69433: PPUSH
69434: LD_VAR 0 2
69438: PPUSH
69439: LD_VAR 0 3
69443: PPUSH
69444: LD_VAR 0 5
69448: PPUSH
69449: CALL_OW 48
// end ;
69453: LD_VAR 0 6
69457: RET
// export function ToNaturalNumber ( number ) ; begin
69458: LD_INT 0
69460: PPUSH
// result := number div 1 ;
69461: LD_ADDR_VAR 0 2
69465: PUSH
69466: LD_VAR 0 1
69470: PUSH
69471: LD_INT 1
69473: DIV
69474: ST_TO_ADDR
// if number < 0 then
69475: LD_VAR 0 1
69479: PUSH
69480: LD_INT 0
69482: LESS
69483: IFFALSE 69493
// result := 0 ;
69485: LD_ADDR_VAR 0 2
69489: PUSH
69490: LD_INT 0
69492: ST_TO_ADDR
// end ;
69493: LD_VAR 0 2
69497: RET
// export function SortByClass ( units , class ) ; var un ; begin
69498: LD_INT 0
69500: PPUSH
69501: PPUSH
// if not units or not class then
69502: LD_VAR 0 1
69506: NOT
69507: PUSH
69508: LD_VAR 0 2
69512: NOT
69513: OR
69514: IFFALSE 69518
// exit ;
69516: GO 69613
// result := [ ] ;
69518: LD_ADDR_VAR 0 3
69522: PUSH
69523: EMPTY
69524: ST_TO_ADDR
// for un in units do
69525: LD_ADDR_VAR 0 4
69529: PUSH
69530: LD_VAR 0 1
69534: PUSH
69535: FOR_IN
69536: IFFALSE 69611
// if GetClass ( un ) = class then
69538: LD_VAR 0 4
69542: PPUSH
69543: CALL_OW 257
69547: PUSH
69548: LD_VAR 0 2
69552: EQUAL
69553: IFFALSE 69580
// result := Insert ( result , 1 , un ) else
69555: LD_ADDR_VAR 0 3
69559: PUSH
69560: LD_VAR 0 3
69564: PPUSH
69565: LD_INT 1
69567: PPUSH
69568: LD_VAR 0 4
69572: PPUSH
69573: CALL_OW 2
69577: ST_TO_ADDR
69578: GO 69609
// result := Replace ( result , result + 1 , un ) ;
69580: LD_ADDR_VAR 0 3
69584: PUSH
69585: LD_VAR 0 3
69589: PPUSH
69590: LD_VAR 0 3
69594: PUSH
69595: LD_INT 1
69597: PLUS
69598: PPUSH
69599: LD_VAR 0 4
69603: PPUSH
69604: CALL_OW 1
69608: ST_TO_ADDR
69609: GO 69535
69611: POP
69612: POP
// end ;
69613: LD_VAR 0 3
69617: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69618: LD_INT 0
69620: PPUSH
69621: PPUSH
69622: PPUSH
69623: PPUSH
69624: PPUSH
69625: PPUSH
69626: PPUSH
// result := [ ] ;
69627: LD_ADDR_VAR 0 4
69631: PUSH
69632: EMPTY
69633: ST_TO_ADDR
// if x - r < 0 then
69634: LD_VAR 0 1
69638: PUSH
69639: LD_VAR 0 3
69643: MINUS
69644: PUSH
69645: LD_INT 0
69647: LESS
69648: IFFALSE 69660
// min_x := 0 else
69650: LD_ADDR_VAR 0 8
69654: PUSH
69655: LD_INT 0
69657: ST_TO_ADDR
69658: GO 69676
// min_x := x - r ;
69660: LD_ADDR_VAR 0 8
69664: PUSH
69665: LD_VAR 0 1
69669: PUSH
69670: LD_VAR 0 3
69674: MINUS
69675: ST_TO_ADDR
// if y - r < 0 then
69676: LD_VAR 0 2
69680: PUSH
69681: LD_VAR 0 3
69685: MINUS
69686: PUSH
69687: LD_INT 0
69689: LESS
69690: IFFALSE 69702
// min_y := 0 else
69692: LD_ADDR_VAR 0 7
69696: PUSH
69697: LD_INT 0
69699: ST_TO_ADDR
69700: GO 69718
// min_y := y - r ;
69702: LD_ADDR_VAR 0 7
69706: PUSH
69707: LD_VAR 0 2
69711: PUSH
69712: LD_VAR 0 3
69716: MINUS
69717: ST_TO_ADDR
// max_x := x + r ;
69718: LD_ADDR_VAR 0 9
69722: PUSH
69723: LD_VAR 0 1
69727: PUSH
69728: LD_VAR 0 3
69732: PLUS
69733: ST_TO_ADDR
// max_y := y + r ;
69734: LD_ADDR_VAR 0 10
69738: PUSH
69739: LD_VAR 0 2
69743: PUSH
69744: LD_VAR 0 3
69748: PLUS
69749: ST_TO_ADDR
// for _x = min_x to max_x do
69750: LD_ADDR_VAR 0 5
69754: PUSH
69755: DOUBLE
69756: LD_VAR 0 8
69760: DEC
69761: ST_TO_ADDR
69762: LD_VAR 0 9
69766: PUSH
69767: FOR_TO
69768: IFFALSE 69869
// for _y = min_y to max_y do
69770: LD_ADDR_VAR 0 6
69774: PUSH
69775: DOUBLE
69776: LD_VAR 0 7
69780: DEC
69781: ST_TO_ADDR
69782: LD_VAR 0 10
69786: PUSH
69787: FOR_TO
69788: IFFALSE 69865
// begin if not ValidHex ( _x , _y ) then
69790: LD_VAR 0 5
69794: PPUSH
69795: LD_VAR 0 6
69799: PPUSH
69800: CALL_OW 488
69804: NOT
69805: IFFALSE 69809
// continue ;
69807: GO 69787
// if GetResourceTypeXY ( _x , _y ) then
69809: LD_VAR 0 5
69813: PPUSH
69814: LD_VAR 0 6
69818: PPUSH
69819: CALL_OW 283
69823: IFFALSE 69863
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69825: LD_ADDR_VAR 0 4
69829: PUSH
69830: LD_VAR 0 4
69834: PPUSH
69835: LD_VAR 0 4
69839: PUSH
69840: LD_INT 1
69842: PLUS
69843: PPUSH
69844: LD_VAR 0 5
69848: PUSH
69849: LD_VAR 0 6
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PPUSH
69858: CALL_OW 1
69862: ST_TO_ADDR
// end ;
69863: GO 69787
69865: POP
69866: POP
69867: GO 69767
69869: POP
69870: POP
// end ;
69871: LD_VAR 0 4
69875: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69876: LD_INT 0
69878: PPUSH
69879: PPUSH
69880: PPUSH
69881: PPUSH
69882: PPUSH
69883: PPUSH
69884: PPUSH
69885: PPUSH
// if not units then
69886: LD_VAR 0 1
69890: NOT
69891: IFFALSE 69895
// exit ;
69893: GO 70320
// result := UnitFilter ( units , [ f_ok ] ) ;
69895: LD_ADDR_VAR 0 3
69899: PUSH
69900: LD_VAR 0 1
69904: PPUSH
69905: LD_INT 50
69907: PUSH
69908: EMPTY
69909: LIST
69910: PPUSH
69911: CALL_OW 72
69915: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69916: LD_ADDR_VAR 0 8
69920: PUSH
69921: LD_VAR 0 1
69925: PUSH
69926: LD_INT 1
69928: ARRAY
69929: PPUSH
69930: CALL_OW 255
69934: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69935: LD_ADDR_VAR 0 10
69939: PUSH
69940: LD_INT 29
69942: PUSH
69943: LD_EXP 25
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: ST_TO_ADDR
// if not result then
69952: LD_VAR 0 3
69956: NOT
69957: IFFALSE 69961
// exit ;
69959: GO 70320
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69961: LD_ADDR_VAR 0 5
69965: PUSH
69966: LD_INT 81
69968: PUSH
69969: LD_VAR 0 8
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PPUSH
69978: CALL_OW 69
69982: ST_TO_ADDR
// for i in result do
69983: LD_ADDR_VAR 0 4
69987: PUSH
69988: LD_VAR 0 3
69992: PUSH
69993: FOR_IN
69994: IFFALSE 70318
// begin tag := GetTag ( i ) + 1 ;
69996: LD_ADDR_VAR 0 9
70000: PUSH
70001: LD_VAR 0 4
70005: PPUSH
70006: CALL_OW 110
70010: PUSH
70011: LD_INT 1
70013: PLUS
70014: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70015: LD_ADDR_VAR 0 7
70019: PUSH
70020: LD_VAR 0 4
70024: PPUSH
70025: CALL_OW 250
70029: PPUSH
70030: LD_VAR 0 4
70034: PPUSH
70035: CALL_OW 251
70039: PPUSH
70040: LD_INT 6
70042: PPUSH
70043: CALL 69618 0 3
70047: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70048: LD_VAR 0 7
70052: PUSH
70053: LD_VAR 0 4
70057: PPUSH
70058: CALL_OW 264
70062: PUSH
70063: LD_VAR 0 10
70067: IN
70068: NOT
70069: AND
70070: IFFALSE 70109
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70072: LD_VAR 0 4
70076: PPUSH
70077: LD_VAR 0 7
70081: PUSH
70082: LD_INT 1
70084: ARRAY
70085: PUSH
70086: LD_INT 1
70088: ARRAY
70089: PPUSH
70090: LD_VAR 0 7
70094: PUSH
70095: LD_INT 1
70097: ARRAY
70098: PUSH
70099: LD_INT 2
70101: ARRAY
70102: PPUSH
70103: CALL_OW 116
70107: GO 70316
// if path > tag then
70109: LD_VAR 0 2
70113: PUSH
70114: LD_VAR 0 9
70118: GREATER
70119: IFFALSE 70286
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
70121: LD_ADDR_VAR 0 6
70125: PUSH
70126: LD_VAR 0 5
70130: PPUSH
70131: LD_INT 91
70133: PUSH
70134: LD_VAR 0 4
70138: PUSH
70139: LD_INT 12
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: LIST
70146: PPUSH
70147: CALL_OW 72
70151: ST_TO_ADDR
// if nearEnemy then
70152: LD_VAR 0 6
70156: IFFALSE 70184
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70158: LD_VAR 0 4
70162: PPUSH
70163: LD_VAR 0 6
70167: PPUSH
70168: LD_VAR 0 4
70172: PPUSH
70173: CALL_OW 74
70177: PPUSH
70178: CALL_OW 115
70182: GO 70284
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70184: LD_VAR 0 4
70188: PPUSH
70189: LD_VAR 0 2
70193: PUSH
70194: LD_VAR 0 9
70198: ARRAY
70199: PUSH
70200: LD_INT 1
70202: ARRAY
70203: PPUSH
70204: LD_VAR 0 2
70208: PUSH
70209: LD_VAR 0 9
70213: ARRAY
70214: PUSH
70215: LD_INT 2
70217: ARRAY
70218: PPUSH
70219: CALL_OW 297
70223: PUSH
70224: LD_INT 6
70226: GREATER
70227: IFFALSE 70270
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70229: LD_VAR 0 4
70233: PPUSH
70234: LD_VAR 0 2
70238: PUSH
70239: LD_VAR 0 9
70243: ARRAY
70244: PUSH
70245: LD_INT 1
70247: ARRAY
70248: PPUSH
70249: LD_VAR 0 2
70253: PUSH
70254: LD_VAR 0 9
70258: ARRAY
70259: PUSH
70260: LD_INT 2
70262: ARRAY
70263: PPUSH
70264: CALL_OW 114
70268: GO 70284
// SetTag ( i , tag ) ;
70270: LD_VAR 0 4
70274: PPUSH
70275: LD_VAR 0 9
70279: PPUSH
70280: CALL_OW 109
// end else
70284: GO 70316
// if enemy then
70286: LD_VAR 0 5
70290: IFFALSE 70316
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70292: LD_VAR 0 4
70296: PPUSH
70297: LD_VAR 0 5
70301: PPUSH
70302: LD_VAR 0 4
70306: PPUSH
70307: CALL_OW 74
70311: PPUSH
70312: CALL_OW 115
// end ;
70316: GO 69993
70318: POP
70319: POP
// end ;
70320: LD_VAR 0 3
70324: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70325: LD_INT 0
70327: PPUSH
70328: PPUSH
70329: PPUSH
// if not unit or IsInUnit ( unit ) then
70330: LD_VAR 0 1
70334: NOT
70335: PUSH
70336: LD_VAR 0 1
70340: PPUSH
70341: CALL_OW 310
70345: OR
70346: IFFALSE 70350
// exit ;
70348: GO 70441
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70350: LD_ADDR_VAR 0 4
70354: PUSH
70355: LD_VAR 0 1
70359: PPUSH
70360: CALL_OW 250
70364: PPUSH
70365: LD_VAR 0 2
70369: PPUSH
70370: LD_INT 1
70372: PPUSH
70373: CALL_OW 272
70377: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70378: LD_ADDR_VAR 0 5
70382: PUSH
70383: LD_VAR 0 1
70387: PPUSH
70388: CALL_OW 251
70392: PPUSH
70393: LD_VAR 0 2
70397: PPUSH
70398: LD_INT 1
70400: PPUSH
70401: CALL_OW 273
70405: ST_TO_ADDR
// if ValidHex ( x , y ) then
70406: LD_VAR 0 4
70410: PPUSH
70411: LD_VAR 0 5
70415: PPUSH
70416: CALL_OW 488
70420: IFFALSE 70441
// ComTurnXY ( unit , x , y ) ;
70422: LD_VAR 0 1
70426: PPUSH
70427: LD_VAR 0 4
70431: PPUSH
70432: LD_VAR 0 5
70436: PPUSH
70437: CALL_OW 118
// end ;
70441: LD_VAR 0 3
70445: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70446: LD_INT 0
70448: PPUSH
70449: PPUSH
// result := false ;
70450: LD_ADDR_VAR 0 3
70454: PUSH
70455: LD_INT 0
70457: ST_TO_ADDR
// if not units then
70458: LD_VAR 0 2
70462: NOT
70463: IFFALSE 70467
// exit ;
70465: GO 70512
// for i in units do
70467: LD_ADDR_VAR 0 4
70471: PUSH
70472: LD_VAR 0 2
70476: PUSH
70477: FOR_IN
70478: IFFALSE 70510
// if See ( side , i ) then
70480: LD_VAR 0 1
70484: PPUSH
70485: LD_VAR 0 4
70489: PPUSH
70490: CALL_OW 292
70494: IFFALSE 70508
// begin result := true ;
70496: LD_ADDR_VAR 0 3
70500: PUSH
70501: LD_INT 1
70503: ST_TO_ADDR
// exit ;
70504: POP
70505: POP
70506: GO 70512
// end ;
70508: GO 70477
70510: POP
70511: POP
// end ;
70512: LD_VAR 0 3
70516: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70517: LD_INT 0
70519: PPUSH
70520: PPUSH
70521: PPUSH
70522: PPUSH
// if not unit or not points then
70523: LD_VAR 0 1
70527: NOT
70528: PUSH
70529: LD_VAR 0 2
70533: NOT
70534: OR
70535: IFFALSE 70539
// exit ;
70537: GO 70629
// dist := 99999 ;
70539: LD_ADDR_VAR 0 5
70543: PUSH
70544: LD_INT 99999
70546: ST_TO_ADDR
// for i in points do
70547: LD_ADDR_VAR 0 4
70551: PUSH
70552: LD_VAR 0 2
70556: PUSH
70557: FOR_IN
70558: IFFALSE 70627
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70560: LD_ADDR_VAR 0 6
70564: PUSH
70565: LD_VAR 0 1
70569: PPUSH
70570: LD_VAR 0 4
70574: PUSH
70575: LD_INT 1
70577: ARRAY
70578: PPUSH
70579: LD_VAR 0 4
70583: PUSH
70584: LD_INT 2
70586: ARRAY
70587: PPUSH
70588: CALL_OW 297
70592: ST_TO_ADDR
// if tmpDist < dist then
70593: LD_VAR 0 6
70597: PUSH
70598: LD_VAR 0 5
70602: LESS
70603: IFFALSE 70625
// begin result := i ;
70605: LD_ADDR_VAR 0 3
70609: PUSH
70610: LD_VAR 0 4
70614: ST_TO_ADDR
// dist := tmpDist ;
70615: LD_ADDR_VAR 0 5
70619: PUSH
70620: LD_VAR 0 6
70624: ST_TO_ADDR
// end ; end ;
70625: GO 70557
70627: POP
70628: POP
// end ; end_of_file
70629: LD_VAR 0 3
70633: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70634: LD_VAR 0 1
70638: PUSH
70639: LD_INT 200
70641: DOUBLE
70642: GREATEREQUAL
70643: IFFALSE 70651
70645: LD_INT 299
70647: DOUBLE
70648: LESSEQUAL
70649: IFTRUE 70653
70651: GO 70685
70653: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70654: LD_VAR 0 1
70658: PPUSH
70659: LD_VAR 0 2
70663: PPUSH
70664: LD_VAR 0 3
70668: PPUSH
70669: LD_VAR 0 4
70673: PPUSH
70674: LD_VAR 0 5
70678: PPUSH
70679: CALL 26281 0 5
70683: GO 70762
70685: LD_INT 300
70687: DOUBLE
70688: GREATEREQUAL
70689: IFFALSE 70697
70691: LD_INT 399
70693: DOUBLE
70694: LESSEQUAL
70695: IFTRUE 70699
70697: GO 70761
70699: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70700: LD_VAR 0 1
70704: PPUSH
70705: LD_VAR 0 2
70709: PPUSH
70710: LD_VAR 0 3
70714: PPUSH
70715: LD_VAR 0 4
70719: PPUSH
70720: LD_VAR 0 5
70724: PPUSH
70725: LD_VAR 0 6
70729: PPUSH
70730: LD_VAR 0 7
70734: PPUSH
70735: LD_VAR 0 8
70739: PPUSH
70740: LD_VAR 0 9
70744: PPUSH
70745: LD_VAR 0 10
70749: PPUSH
70750: LD_VAR 0 11
70754: PPUSH
70755: CALL 23923 0 11
70759: GO 70762
70761: POP
// end ;
70762: PPOPN 11
70764: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70765: LD_VAR 0 1
70769: PPUSH
70770: LD_VAR 0 2
70774: PPUSH
70775: LD_VAR 0 3
70779: PPUSH
70780: LD_VAR 0 4
70784: PPUSH
70785: LD_VAR 0 5
70789: PPUSH
70790: CALL 26017 0 5
// end ; end_of_file
70794: PPOPN 5
70796: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70797: LD_VAR 0 1
70801: PPUSH
70802: LD_VAR 0 2
70806: PPUSH
70807: LD_VAR 0 3
70811: PPUSH
70812: LD_VAR 0 4
70816: PPUSH
70817: LD_VAR 0 5
70821: PPUSH
70822: LD_VAR 0 6
70826: PPUSH
70827: CALL 11616 0 6
// end ;
70831: PPOPN 6
70833: END
