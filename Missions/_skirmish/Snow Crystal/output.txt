// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// SetWeather ( 2 , 300 , 30 ) ;
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 300
  19: PPUSH
  20: LD_INT 30
  22: PPUSH
  23: CALL_OW 550
// GameType ;
  27: CALL 273 0 0
// PrepareAmerican ;
  31: CALL 706 0 0
// if game_type = 2 then
  35: LD_EXP 1
  39: PUSH
  40: LD_INT 2
  42: EQUAL
  43: IFFALSE 49
// PrepareRussian ;
  45: CALL 6893 0 0
// GameStarted ;
  49: CALL 523 0 0
// end ;
  53: END
// every 0 0$01 do var sib ;
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
// begin enable ;
  60: ENABLE
// sib := GetResourceType ( GetBase ( jota_base ) , mat_siberit ) ;
  61: LD_ADDR_VAR 0 1
  65: PUSH
  66: LD_INT 1
  68: PPUSH
  69: CALL_OW 274
  73: PPUSH
  74: LD_INT 3
  76: PPUSH
  77: CALL_OW 275
  81: ST_TO_ADDR
// Display_Strings := [ #tick , timer , #sib , sib , need_to_win ] ;
  82: LD_ADDR_OWVAR 47
  86: PUSH
  87: LD_STRING #tick
  89: PUSH
  90: LD_EXP 6
  94: PUSH
  95: LD_STRING #sib
  97: PUSH
  98: LD_VAR 0 1
 102: PUSH
 103: LD_EXP 5
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: LIST
 114: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 115: LD_ADDR_EXP 6
 119: PUSH
 120: LD_EXP 6
 124: PUSH
 125: LD_INT 35
 127: PLUS
 128: ST_TO_ADDR
// end ;
 129: PPOPN 1
 131: END
// every 1 do
 132: GO 134
 134: DISABLE
// begin while ( true ) do
 135: LD_INT 1
 137: IFFALSE 272
// begin music_nat := 1 ;
 139: LD_ADDR_OWVAR 71
 143: PUSH
 144: LD_INT 1
 146: ST_TO_ADDR
// music_class := 5 ;
 147: LD_ADDR_OWVAR 72
 151: PUSH
 152: LD_INT 5
 154: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 155: LD_INT 7350
 157: PPUSH
 158: LD_INT 10500
 160: PPUSH
 161: CALL_OW 12
 165: PPUSH
 166: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 170: LD_ADDR_OWVAR 71
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 1
 187: PPUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 12
 195: ARRAY
 196: ST_TO_ADDR
// music_class := 0 ;
 197: LD_ADDR_OWVAR 72
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 205: LD_INT 7350
 207: PPUSH
 208: LD_INT 10500
 210: PPUSH
 211: CALL_OW 12
 215: PPUSH
 216: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 220: LD_ADDR_OWVAR 71
 224: PUSH
 225: LD_INT 1
 227: PUSH
 228: LD_INT 3
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_INT 2
 240: PPUSH
 241: CALL_OW 12
 245: ARRAY
 246: ST_TO_ADDR
// music_class := 0 ;
 247: LD_ADDR_OWVAR 72
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 255: LD_INT 7350
 257: PPUSH
 258: LD_INT 10500
 260: PPUSH
 261: CALL_OW 12
 265: PPUSH
 266: CALL_OW 67
// end ;
 270: GO 135
// end ; end_of_file
 272: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 273: LD_INT 0
 275: PPUSH
// case Query ( GameTyp ) of 1 :
 276: LD_STRING GameTyp
 278: PPUSH
 279: CALL_OW 97
 283: PUSH
 284: LD_INT 1
 286: DOUBLE
 287: EQUAL
 288: IFTRUE 292
 290: GO 303
 292: POP
// game_type := 1 ; 2 :
 293: LD_ADDR_EXP 1
 297: PUSH
 298: LD_INT 1
 300: ST_TO_ADDR
 301: GO 342
 303: LD_INT 2
 305: DOUBLE
 306: EQUAL
 307: IFTRUE 311
 309: GO 322
 311: POP
// game_type := 2 ; 3 :
 312: LD_ADDR_EXP 1
 316: PUSH
 317: LD_INT 2
 319: ST_TO_ADDR
 320: GO 342
 322: LD_INT 3
 324: DOUBLE
 325: EQUAL
 326: IFTRUE 330
 328: GO 341
 330: POP
// game_type := 0 ; end ;
 331: LD_ADDR_EXP 1
 335: PUSH
 336: LD_INT 0
 338: ST_TO_ADDR
 339: GO 342
 341: POP
// case Query ( GameDiff ) of 1 :
 342: LD_STRING GameDiff
 344: PPUSH
 345: CALL_OW 97
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 369
 358: POP
// game_diff := 1 ; 2 :
 359: LD_ADDR_EXP 2
 363: PUSH
 364: LD_INT 1
 366: ST_TO_ADDR
 367: GO 408
 369: LD_INT 2
 371: DOUBLE
 372: EQUAL
 373: IFTRUE 377
 375: GO 388
 377: POP
// game_diff := 2 ; 3 :
 378: LD_ADDR_EXP 2
 382: PUSH
 383: LD_INT 2
 385: ST_TO_ADDR
 386: GO 408
 388: LD_INT 3
 390: DOUBLE
 391: EQUAL
 392: IFTRUE 396
 394: GO 407
 396: POP
// game_diff := 3 ; end ;
 397: LD_ADDR_EXP 2
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
 405: GO 408
 407: POP
// if game_type = 1 then
 408: LD_EXP 1
 412: PUSH
 413: LD_INT 1
 415: EQUAL
 416: IFFALSE 438
// case Query ( GameRulesAm ) of 1 :
 418: LD_STRING GameRulesAm
 420: PPUSH
 421: CALL_OW 97
 425: PUSH
 426: LD_INT 1
 428: DOUBLE
 429: EQUAL
 430: IFTRUE 434
 432: GO 437
 434: POP
// ; end ;
 435: GO 438
 437: POP
// if game_type = 2 then
 438: LD_EXP 1
 442: PUSH
 443: LD_INT 2
 445: EQUAL
 446: IFFALSE 468
// case Query ( GameRulesRu ) of 1 :
 448: LD_STRING GameRulesRu
 450: PPUSH
 451: CALL_OW 97
 455: PUSH
 456: LD_INT 1
 458: DOUBLE
 459: EQUAL
 460: IFTRUE 464
 462: GO 467
 464: POP
// ; end ;
 465: GO 468
 467: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 468: LD_ADDR_EXP 3
 472: PUSH
 473: LD_INT 6
 475: PUSH
 476: LD_INT 4
 478: PUSH
 479: LD_INT 2
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_EXP 2
 491: ARRAY
 492: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 493: LD_ADDR_EXP 4
 497: PUSH
 498: LD_INT 4
 500: PUSH
 501: LD_INT 5
 503: PUSH
 504: LD_INT 6
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: PUSH
 512: LD_EXP 2
 516: ARRAY
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 1
 522: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 523: LD_INT 0
 525: PPUSH
// if game_type = 1 then
 526: LD_EXP 1
 530: PUSH
 531: LD_INT 1
 533: EQUAL
 534: IFFALSE 603
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 536: LD_ADDR_EXP 5
 540: PUSH
 541: LD_INT 350
 543: PUSH
 544: LD_INT 375
 546: PUSH
 547: LD_INT 400
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_EXP 2
 559: ARRAY
 560: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 561: LD_ADDR_EXP 7
 565: PUSH
 566: LD_INT 95
 568: PUSH
 569: LD_INT 100
 571: PUSH
 572: LD_INT 105
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_EXP 2
 584: ARRAY
 585: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 586: LD_INT 84
 588: PPUSH
 589: LD_INT 45
 591: PPUSH
 592: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 596: LD_STRING GType1
 598: PPUSH
 599: CALL_OW 337
// end ; if game_type = 2 then
 603: LD_EXP 1
 607: PUSH
 608: LD_INT 2
 610: EQUAL
 611: IFFALSE 693
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 613: LD_ADDR_EXP 5
 617: PUSH
 618: LD_INT 300
 620: PUSH
 621: LD_INT 350
 623: PUSH
 624: LD_INT 400
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: PUSH
 632: LD_EXP 2
 636: ARRAY
 637: ST_TO_ADDR
// depot_captured := false ;
 638: LD_ADDR_EXP 8
 642: PUSH
 643: LD_INT 0
 645: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 646: LD_EXP 18
 650: PPUSH
 651: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 655: LD_STRING GType2
 657: PPUSH
 658: CALL_OW 337
// Wait ( 0 0$03 ) ;
 662: LD_INT 105
 664: PPUSH
 665: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 669: LD_EXP 19
 673: PPUSH
 674: LD_STRING D-gorky1
 676: PPUSH
 677: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 681: LD_EXP 18
 685: PPUSH
 686: LD_STRING D-rudow1
 688: PPUSH
 689: CALL_OW 88
// end ; timer := 0 0$00 ;
 693: LD_ADDR_EXP 6
 697: PUSH
 698: LD_INT 0
 700: ST_TO_ADDR
// end ; end_of_file
 701: LD_VAR 0 1
 705: RET
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 706: LD_INT 0
 708: PPUSH
 709: PPUSH
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
// SetBName ( jota_base , jota ) ;
 714: LD_INT 1
 716: PPUSH
 717: LD_STRING jota
 719: PPUSH
 720: CALL_OW 500
// if game_type = 1 then
 724: LD_EXP 1
 728: PUSH
 729: LD_INT 1
 731: EQUAL
 732: IFFALSE 1164
// begin list := [ west_bun1 , east_bun , am_gun ] ;
 734: LD_ADDR_VAR 0 5
 738: PUSH
 739: LD_INT 29
 741: PUSH
 742: LD_INT 35
 744: PUSH
 745: LD_INT 21
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: LIST
 752: ST_TO_ADDR
// if game_diff = 1 then
 753: LD_EXP 2
 757: PUSH
 758: LD_INT 1
 760: EQUAL
 761: IFFALSE 776
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 763: LD_INT 57
 765: PPUSH
 766: LD_INT 3
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: CALL_OW 322
// if game_diff = 2 then
 776: LD_EXP 2
 780: PUSH
 781: LD_INT 2
 783: EQUAL
 784: IFFALSE 799
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 786: LD_INT 58
 788: PPUSH
 789: LD_INT 3
 791: PPUSH
 792: LD_INT 2
 794: PPUSH
 795: CALL_OW 322
// if game_diff = 3 then
 799: LD_EXP 2
 803: PUSH
 804: LD_INT 3
 806: EQUAL
 807: IFFALSE 822
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 809: LD_INT 59
 811: PPUSH
 812: LD_INT 3
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: CALL_OW 322
// for i = 1 to list do
 822: LD_ADDR_VAR 0 2
 826: PUSH
 827: DOUBLE
 828: LD_INT 1
 830: DEC
 831: ST_TO_ADDR
 832: LD_VAR 0 5
 836: PUSH
 837: FOR_TO
 838: IFFALSE 857
// RemoveUnit ( list [ i ] ) ;
 840: LD_VAR 0 5
 844: PUSH
 845: LD_VAR 0 2
 849: ARRAY
 850: PPUSH
 851: CALL_OW 64
 855: GO 837
 857: POP
 858: POP
// ResetFog ;
 859: CALL_OW 335
// uc_side := 1 ;
 863: LD_ADDR_OWVAR 20
 867: PUSH
 868: LD_INT 1
 870: ST_TO_ADDR
// uc_nation := 1 ;
 871: LD_ADDR_OWVAR 21
 875: PUSH
 876: LD_INT 1
 878: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: DOUBLE
 885: LD_INT 1
 887: DEC
 888: ST_TO_ADDR
 889: LD_INT 4
 891: PUSH
 892: LD_EXP 2
 896: MINUS
 897: PUSH
 898: FOR_TO
 899: IFFALSE 936
// begin un := CreateHumanWithClass ( 1 , game_skill ) ;
 901: LD_ADDR_VAR 0 3
 905: PUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_EXP 3
 913: PPUSH
 914: CALL 9167 0 2
 918: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 919: LD_VAR 0 3
 923: PPUSH
 924: LD_INT 1
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL_OW 49
// end ;
 934: GO 898
 936: POP
 937: POP
// for i = 1 to 5 - ( game_diff ) do
 938: LD_ADDR_VAR 0 2
 942: PUSH
 943: DOUBLE
 944: LD_INT 1
 946: DEC
 947: ST_TO_ADDR
 948: LD_INT 5
 950: PUSH
 951: LD_EXP 2
 955: MINUS
 956: PUSH
 957: FOR_TO
 958: IFFALSE 995
// begin un := CreateHumanWithClass ( 2 , game_skill ) ;
 960: LD_ADDR_VAR 0 3
 964: PUSH
 965: LD_INT 2
 967: PPUSH
 968: LD_EXP 3
 972: PPUSH
 973: CALL 9167 0 2
 977: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 978: LD_VAR 0 3
 982: PPUSH
 983: LD_INT 1
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 49
// end ;
 993: GO 957
 995: POP
 996: POP
// for i = 1 to 5 - ( game_diff ) do
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: DOUBLE
1003: LD_INT 1
1005: DEC
1006: ST_TO_ADDR
1007: LD_INT 5
1009: PUSH
1010: LD_EXP 2
1014: MINUS
1015: PUSH
1016: FOR_TO
1017: IFFALSE 1054
// begin un := CreateHumanWithClass ( 3 , game_skill ) ;
1019: LD_ADDR_VAR 0 3
1023: PUSH
1024: LD_INT 3
1026: PPUSH
1027: LD_EXP 3
1031: PPUSH
1032: CALL 9167 0 2
1036: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1037: LD_VAR 0 3
1041: PPUSH
1042: LD_INT 1
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: CALL_OW 49
// end ;
1052: GO 1016
1054: POP
1055: POP
// for i = 1 to 5 - ( game_diff ) do
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: DOUBLE
1062: LD_INT 1
1064: DEC
1065: ST_TO_ADDR
1066: LD_INT 5
1068: PUSH
1069: LD_EXP 2
1073: MINUS
1074: PUSH
1075: FOR_TO
1076: IFFALSE 1113
// begin un := CreateHumanWithClass ( 4 , game_skill ) ;
1078: LD_ADDR_VAR 0 3
1082: PUSH
1083: LD_INT 4
1085: PPUSH
1086: LD_EXP 3
1090: PPUSH
1091: CALL 9167 0 2
1095: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1096: LD_VAR 0 3
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL_OW 49
// end ;
1111: GO 1075
1113: POP
1114: POP
// hc_importance := 100 ;
1115: LD_ADDR_OWVAR 32
1119: PUSH
1120: LD_INT 100
1122: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1123: LD_ADDR_EXP 9
1127: PUSH
1128: LD_INT 1
1130: PPUSH
1131: LD_EXP 3
1135: PPUSH
1136: CALL 9167 0 2
1140: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1141: LD_EXP 9
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_INT 0
1151: PPUSH
1152: CALL_OW 49
// hc_importance := 0 ;
1156: LD_ADDR_OWVAR 32
1160: PUSH
1161: LD_INT 0
1163: ST_TO_ADDR
// end ; if game_type = 2 then
1164: LD_EXP 1
1168: PUSH
1169: LD_INT 2
1171: EQUAL
1172: IFFALSE 2337
// begin uc_side := 1 ;
1174: LD_ADDR_OWVAR 20
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// uc_nation := 1 ;
1182: LD_ADDR_OWVAR 21
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1190: LD_INT 1
1192: PPUSH
1193: CALL_OW 274
1197: PPUSH
1198: LD_INT 1
1200: PPUSH
1201: LD_INT 1000
1203: PPUSH
1204: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1208: LD_INT 20
1210: PPUSH
1211: LD_INT 1
1213: PPUSH
1214: LD_INT 2
1216: PPUSH
1217: CALL_OW 322
// for i = 1 to 4 do
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: DOUBLE
1227: LD_INT 1
1229: DEC
1230: ST_TO_ADDR
1231: LD_INT 4
1233: PUSH
1234: FOR_TO
1235: IFFALSE 1294
// begin for p = 1 to 5 do
1237: LD_ADDR_VAR 0 6
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_INT 5
1249: PUSH
1250: FOR_TO
1251: IFFALSE 1290
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1253: LD_ADDR_VAR 0 3
1257: PUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: LD_EXP 4
1267: PPUSH
1268: CALL 9167 0 2
1272: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1273: LD_VAR 0 3
1277: PPUSH
1278: LD_INT 1
1280: PPUSH
1281: LD_INT 0
1283: PPUSH
1284: CALL_OW 49
// end ;
1288: GO 1250
1290: POP
1291: POP
// end ;
1292: GO 1234
1294: POP
1295: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1296: LD_ADDR_VAR 0 3
1300: PUSH
1301: LD_INT 5
1303: PPUSH
1304: LD_EXP 4
1308: PPUSH
1309: CALL 9167 0 2
1313: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1314: LD_VAR 0 3
1318: PPUSH
1319: LD_INT 2
1321: PPUSH
1322: LD_INT 0
1324: PPUSH
1325: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1329: LD_VAR 0 3
1333: PPUSH
1334: LD_INT 29
1336: PPUSH
1337: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1341: LD_ADDR_VAR 0 3
1345: PUSH
1346: LD_INT 5
1348: PPUSH
1349: LD_EXP 4
1353: PPUSH
1354: CALL 9167 0 2
1358: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1359: LD_VAR 0 3
1363: PPUSH
1364: LD_INT 4
1366: PPUSH
1367: LD_INT 0
1369: PPUSH
1370: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1374: LD_VAR 0 3
1378: PPUSH
1379: LD_INT 20
1381: PPUSH
1382: CALL_OW 120
// if game_diff > 1 then
1386: LD_EXP 2
1390: PUSH
1391: LD_INT 1
1393: GREATER
1394: IFFALSE 1538
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1396: LD_ADDR_VAR 0 3
1400: PUSH
1401: LD_INT 5
1403: PPUSH
1404: LD_EXP 4
1408: PPUSH
1409: CALL 9167 0 2
1413: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1414: LD_VAR 0 3
1418: PPUSH
1419: LD_INT 3
1421: PPUSH
1422: LD_INT 0
1424: PPUSH
1425: CALL_OW 49
// for i = 1 to 2 do
1429: LD_ADDR_VAR 0 2
1433: PUSH
1434: DOUBLE
1435: LD_INT 1
1437: DEC
1438: ST_TO_ADDR
1439: LD_INT 2
1441: PUSH
1442: FOR_TO
1443: IFFALSE 1536
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1445: LD_ADDR_VAR 0 3
1449: PUSH
1450: LD_INT 5
1452: PPUSH
1453: LD_EXP 4
1457: PPUSH
1458: CALL 9167 0 2
1462: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1463: LD_VAR 0 3
1467: PPUSH
1468: LD_INT 1
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1478: LD_VAR 0 3
1482: PPUSH
1483: LD_INT 22
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 30
1495: PUSH
1496: LD_INT 4
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PUSH
1503: LD_INT 24
1505: PUSH
1506: LD_INT 251
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: LIST
1517: PUSH
1518: EMPTY
1519: LIST
1520: PPUSH
1521: CALL_OW 69
1525: PUSH
1526: LD_INT 1
1528: ARRAY
1529: PPUSH
1530: CALL_OW 120
// end ;
1534: GO 1442
1536: POP
1537: POP
// end ; if game_diff > 1 then
1538: LD_EXP 2
1542: PUSH
1543: LD_INT 1
1545: GREATER
1546: IFFALSE 1584
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1548: LD_ADDR_VAR 0 3
1552: PUSH
1553: LD_INT 5
1555: PPUSH
1556: LD_EXP 4
1560: PPUSH
1561: CALL 9167 0 2
1565: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1566: LD_VAR 0 3
1570: PPUSH
1571: LD_INT 37
1573: PPUSH
1574: LD_INT 44
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: CALL_OW 48
// end ; if game_diff > 2 then
1584: LD_EXP 2
1588: PUSH
1589: LD_INT 2
1591: GREATER
1592: IFFALSE 1642
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1594: LD_ADDR_VAR 0 3
1598: PUSH
1599: LD_INT 5
1601: PPUSH
1602: LD_EXP 4
1606: PPUSH
1607: CALL 9167 0 2
1611: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1612: LD_VAR 0 3
1616: PPUSH
1617: LD_INT 106
1619: PPUSH
1620: LD_INT 45
1622: PPUSH
1623: LD_INT 0
1625: PPUSH
1626: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1630: LD_VAR 0 3
1634: PPUSH
1635: LD_INT 35
1637: PPUSH
1638: CALL_OW 120
// end ; if game_diff < 3 then
1642: LD_EXP 2
1646: PUSH
1647: LD_INT 3
1649: LESS
1650: IFFALSE 1659
// RemoveUnit ( east_bun ) ;
1652: LD_INT 35
1654: PPUSH
1655: CALL_OW 64
// if game_diff > 1 then
1659: LD_EXP 2
1663: PUSH
1664: LD_INT 1
1666: GREATER
1667: IFFALSE 1682
// SetTech ( tech_rocket , 1 , state_researched ) ;
1669: LD_INT 40
1671: PPUSH
1672: LD_INT 1
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: CALL_OW 322
// case game_diff of 1 :
1682: LD_EXP 2
1686: PUSH
1687: LD_INT 1
1689: DOUBLE
1690: EQUAL
1691: IFTRUE 1695
1693: GO 1769
1695: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1696: LD_ADDR_EXP 10
1700: PUSH
1701: LD_INT 26
1703: PUSH
1704: LD_INT 78
1706: PUSH
1707: LD_INT 52
1709: PUSH
1710: LD_INT 3
1712: PUSH
1713: LD_INT 26
1715: PUSH
1716: LD_INT 96
1718: PUSH
1719: LD_INT 58
1721: PUSH
1722: LD_INT 0
1724: PUSH
1725: LD_INT 32
1727: PUSH
1728: LD_INT 72
1730: PUSH
1731: LD_INT 34
1733: PUSH
1734: LD_INT 3
1736: PUSH
1737: LD_INT 32
1739: PUSH
1740: LD_INT 83
1742: PUSH
1743: LD_INT 54
1745: PUSH
1746: LD_INT 0
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: ST_TO_ADDR
// end ; 2 :
1767: GO 2046
1769: LD_INT 2
1771: DOUBLE
1772: EQUAL
1773: IFTRUE 1777
1775: GO 1899
1777: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1778: LD_ADDR_EXP 10
1782: PUSH
1783: LD_INT 18
1785: PUSH
1786: LD_INT 73
1788: PUSH
1789: LD_INT 42
1791: PUSH
1792: LD_INT 2
1794: PUSH
1795: LD_INT 26
1797: PUSH
1798: LD_INT 78
1800: PUSH
1801: LD_INT 52
1803: PUSH
1804: LD_INT 3
1806: PUSH
1807: LD_INT 26
1809: PUSH
1810: LD_INT 96
1812: PUSH
1813: LD_INT 58
1815: PUSH
1816: LD_INT 0
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 72
1824: PUSH
1825: LD_INT 34
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: LD_INT 32
1833: PUSH
1834: LD_INT 83
1836: PUSH
1837: LD_INT 54
1839: PUSH
1840: LD_INT 0
1842: PUSH
1843: LD_INT 32
1845: PUSH
1846: LD_INT 82
1848: PUSH
1849: LD_INT 38
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 26
1857: PUSH
1858: LD_INT 69
1860: PUSH
1861: LD_INT 39
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: ST_TO_ADDR
// end ; 3 :
1897: GO 2046
1899: LD_INT 3
1901: DOUBLE
1902: EQUAL
1903: IFTRUE 1907
1905: GO 2045
1907: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1908: LD_ADDR_EXP 10
1912: PUSH
1913: LD_INT 18
1915: PUSH
1916: LD_INT 73
1918: PUSH
1919: LD_INT 42
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 26
1927: PUSH
1928: LD_INT 78
1930: PUSH
1931: LD_INT 52
1933: PUSH
1934: LD_INT 3
1936: PUSH
1937: LD_INT 26
1939: PUSH
1940: LD_INT 96
1942: PUSH
1943: LD_INT 58
1945: PUSH
1946: LD_INT 0
1948: PUSH
1949: LD_INT 32
1951: PUSH
1952: LD_INT 72
1954: PUSH
1955: LD_INT 34
1957: PUSH
1958: LD_INT 3
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: LD_INT 83
1966: PUSH
1967: LD_INT 54
1969: PUSH
1970: LD_INT 0
1972: PUSH
1973: LD_INT 32
1975: PUSH
1976: LD_INT 82
1978: PUSH
1979: LD_INT 38
1981: PUSH
1982: LD_INT 2
1984: PUSH
1985: LD_INT 32
1987: PUSH
1988: LD_INT 103
1990: PUSH
1991: LD_INT 59
1993: PUSH
1994: LD_INT 3
1996: PUSH
1997: LD_INT 26
1999: PUSH
2000: LD_INT 69
2002: PUSH
2003: LD_INT 39
2005: PUSH
2006: LD_INT 3
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: ST_TO_ADDR
// end ; end ;
2043: GO 2046
2045: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2046: LD_ADDR_EXP 12
2050: PUSH
2051: LD_INT 48
2053: PUSH
2054: LD_INT 47
2056: PUSH
2057: LD_INT 49
2059: PUSH
2060: LD_INT 51
2062: PUSH
2063: LD_INT 69
2065: PUSH
2066: LD_INT 52
2068: PUSH
2069: LD_INT 39
2071: PUSH
2072: LD_INT 50
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: ST_TO_ADDR
// case game_diff of 1 :
2085: LD_EXP 2
2089: PUSH
2090: LD_INT 1
2092: DOUBLE
2093: EQUAL
2094: IFTRUE 2098
2096: GO 2172
2098: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2099: LD_ADDR_EXP 11
2103: PUSH
2104: LD_INT 3
2106: PUSH
2107: LD_INT 1
2109: PUSH
2110: LD_INT 1
2112: PUSH
2113: LD_INT 12
2115: PUSH
2116: LD_INT 4
2118: PUSH
2119: LD_INT 1
2121: PUSH
2122: LD_INT 1
2124: PUSH
2125: LD_INT 4
2127: PUSH
2128: LD_INT 4
2130: PUSH
2131: LD_INT 1
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: LD_INT 5
2139: PUSH
2140: LD_INT 4
2142: PUSH
2143: LD_INT 1
2145: PUSH
2146: LD_INT 1
2148: PUSH
2149: LD_INT 4
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: ST_TO_ADDR
// end ; 2 :
2170: GO 2337
2172: LD_INT 2
2174: DOUBLE
2175: EQUAL
2176: IFTRUE 2180
2178: GO 2254
2180: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2181: LD_ADDR_EXP 11
2185: PUSH
2186: LD_INT 3
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: LD_INT 1
2194: PUSH
2195: LD_INT 12
2197: PUSH
2198: LD_INT 4
2200: PUSH
2201: LD_INT 1
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: LD_INT 7
2209: PUSH
2210: LD_INT 4
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: LD_INT 1
2218: PUSH
2219: LD_INT 5
2221: PUSH
2222: LD_INT 4
2224: PUSH
2225: LD_INT 1
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 7
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: ST_TO_ADDR
// end ; 3 :
2252: GO 2337
2254: LD_INT 3
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2336
2262: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2263: LD_ADDR_EXP 11
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: LD_INT 1
2276: PUSH
2277: LD_INT 12
2279: PUSH
2280: LD_INT 4
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: LD_INT 1
2288: PUSH
2289: LD_INT 7
2291: PUSH
2292: LD_INT 4
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: LD_INT 7
2303: PUSH
2304: LD_INT 4
2306: PUSH
2307: LD_INT 1
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: LD_INT 7
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: ST_TO_ADDR
// end ; end ;
2334: GO 2337
2336: POP
// end ; end ;
2337: LD_VAR 0 1
2341: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2342: GO 2344
2344: DISABLE
// begin sold_ocp := [ ] ;
2345: LD_ADDR_EXP 13
2349: PUSH
2350: EMPTY
2351: ST_TO_ADDR
// tower_list := [ ] ;
2352: LD_ADDR_EXP 14
2356: PUSH
2357: EMPTY
2358: ST_TO_ADDR
// end ;
2359: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2360: LD_EXP 1
2364: PUSH
2365: LD_INT 2
2367: EQUAL
2368: PUSH
2369: LD_EXP 8
2373: PUSH
2374: LD_INT 0
2376: EQUAL
2377: AND
2378: IFFALSE 4055
2380: GO 2382
2382: DISABLE
2383: LD_INT 0
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
2396: PPUSH
2397: PPUSH
// begin enable ;
2398: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2399: LD_ADDR_VAR 0 3
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 25
2416: PUSH
2417: LD_INT 1
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: LD_INT 24
2426: PUSH
2427: LD_INT 650
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: LIST
2438: PUSH
2439: EMPTY
2440: LIST
2441: PPUSH
2442: CALL_OW 69
2446: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2447: LD_ADDR_VAR 0 6
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_INT 1
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 25
2464: PUSH
2465: LD_INT 2
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: LD_INT 24
2474: PUSH
2475: LD_INT 650
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: PPUSH
2490: CALL_OW 69
2494: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2495: LD_ADDR_VAR 0 7
2499: PUSH
2500: LD_INT 22
2502: PUSH
2503: LD_INT 1
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: LD_INT 25
2512: PUSH
2513: LD_INT 3
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 24
2522: PUSH
2523: LD_INT 650
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: PPUSH
2538: CALL_OW 69
2542: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_INT 1
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 25
2560: PUSH
2561: LD_INT 4
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: PUSH
2568: LD_INT 24
2570: PUSH
2571: LD_INT 650
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: PPUSH
2586: CALL_OW 69
2590: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2591: LD_ADDR_VAR 0 9
2595: PUSH
2596: LD_INT 22
2598: PUSH
2599: LD_INT 1
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 30
2608: PUSH
2609: LD_INT 32
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PUSH
2616: LD_INT 58
2618: PUSH
2619: EMPTY
2620: LIST
2621: PUSH
2622: LD_INT 24
2624: PUSH
2625: LD_INT 251
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: PPUSH
2638: CALL_OW 69
2642: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2643: LD_ADDR_VAR 0 10
2647: PUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 30
2660: PUSH
2661: LD_INT 32
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: LD_INT 2
2670: PUSH
2671: LD_INT 35
2673: PUSH
2674: LD_INT 7
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 35
2683: PUSH
2684: LD_INT 4
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 24
2698: PUSH
2699: LD_INT 251
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: PPUSH
2715: CALL_OW 69
2719: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2720: LD_ADDR_VAR 0 11
2724: PUSH
2725: LD_INT 22
2727: PUSH
2728: LD_INT 1
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 21
2737: PUSH
2738: LD_INT 1
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: LD_INT 3
2747: PUSH
2748: LD_INT 24
2750: PUSH
2751: LD_INT 650
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: LIST
2766: PUSH
2767: EMPTY
2768: LIST
2769: PPUSH
2770: CALL_OW 69
2774: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2775: LD_ADDR_VAR 0 12
2779: PUSH
2780: LD_INT 11
2782: PPUSH
2783: LD_INT 22
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 21
2795: PUSH
2796: LD_INT 3
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: LD_INT 24
2808: PUSH
2809: LD_INT 1000
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: PPUSH
2828: CALL_OW 70
2832: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2833: LD_ADDR_VAR 0 13
2837: PUSH
2838: LD_INT 22
2840: PUSH
2841: LD_INT 1
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: LD_INT 21
2850: PUSH
2851: LD_INT 2
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 24
2863: PUSH
2864: LD_INT 650
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: PPUSH
2883: CALL_OW 69
2887: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2888: LD_INT 1
2890: PPUSH
2891: CALL_OW 274
2895: PPUSH
2896: LD_INT 2
2898: PPUSH
2899: CALL_OW 275
2903: PUSH
2904: LD_INT 30
2906: LESSEQUAL
2907: IFFALSE 2927
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2909: LD_INT 1
2911: PPUSH
2912: CALL_OW 274
2916: PPUSH
2917: LD_INT 2
2919: PPUSH
2920: LD_INT 100
2922: PPUSH
2923: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
2927: LD_ADDR_VAR 0 5
2931: PUSH
2932: LD_VAR 0 3
2936: PUSH
2937: LD_EXP 13
2941: DIFF
2942: ST_TO_ADDR
// if sold > 0 then
2943: LD_VAR 0 3
2947: PUSH
2948: LD_INT 0
2950: GREATER
2951: IFFALSE 3073
// for i = 1 to sold_em do
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: DOUBLE
2959: LD_INT 1
2961: DEC
2962: ST_TO_ADDR
2963: LD_VAR 0 5
2967: PUSH
2968: FOR_TO
2969: IFFALSE 3071
// if empty_towers > 0 then
2971: LD_VAR 0 9
2975: PUSH
2976: LD_INT 0
2978: GREATER
2979: IFFALSE 3007
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
2981: LD_VAR 0 5
2985: PUSH
2986: LD_VAR 0 1
2990: ARRAY
2991: PPUSH
2992: LD_VAR 0 9
2996: PUSH
2997: LD_INT 1
2999: ARRAY
3000: PPUSH
3001: CALL_OW 120
3005: GO 3069
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3007: LD_VAR 0 5
3011: PUSH
3012: LD_VAR 0 1
3016: ARRAY
3017: PPUSH
3018: LD_INT 22
3020: PUSH
3021: LD_INT 1
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 30
3030: PUSH
3031: LD_INT 4
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: LD_INT 24
3040: PUSH
3041: LD_INT 251
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: LIST
3052: PUSH
3053: EMPTY
3054: LIST
3055: PPUSH
3056: CALL_OW 69
3060: PUSH
3061: LD_INT 1
3063: ARRAY
3064: PPUSH
3065: CALL_OW 120
3069: GO 2968
3071: POP
3072: POP
// if mechs > 0 then
3073: LD_VAR 0 7
3077: PUSH
3078: LD_INT 0
3080: GREATER
3081: IFFALSE 3159
// for i = 1 to mechs do
3083: LD_ADDR_VAR 0 1
3087: PUSH
3088: DOUBLE
3089: LD_INT 1
3091: DEC
3092: ST_TO_ADDR
3093: LD_VAR 0 7
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3157
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3101: LD_VAR 0 7
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 310
3116: NOT
3117: PUSH
3118: LD_VAR 0 7
3122: PUSH
3123: LD_VAR 0 1
3127: ARRAY
3128: PPUSH
3129: CALL_OW 314
3133: NOT
3134: AND
3135: IFFALSE 3155
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3137: LD_VAR 0 7
3141: PUSH
3142: LD_VAR 0 1
3146: ARRAY
3147: PPUSH
3148: LD_INT 14
3150: PPUSH
3151: CALL_OW 120
3155: GO 3098
3157: POP
3158: POP
// if sci > 0 then
3159: LD_VAR 0 8
3163: PUSH
3164: LD_INT 0
3166: GREATER
3167: IFFALSE 3237
// for i = 1 to sci do
3169: LD_ADDR_VAR 0 1
3173: PUSH
3174: DOUBLE
3175: LD_INT 1
3177: DEC
3178: ST_TO_ADDR
3179: LD_VAR 0 8
3183: PUSH
3184: FOR_TO
3185: IFFALSE 3235
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3187: LD_VAR 0 11
3191: PUSH
3192: LD_INT 0
3194: EQUAL
3195: PUSH
3196: LD_VAR 0 8
3200: PUSH
3201: LD_VAR 0 1
3205: ARRAY
3206: PPUSH
3207: CALL_OW 314
3211: NOT
3212: AND
3213: IFFALSE 3233
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3215: LD_VAR 0 8
3219: PUSH
3220: LD_VAR 0 1
3224: ARRAY
3225: PPUSH
3226: LD_INT 9
3228: PPUSH
3229: CALL_OW 120
3233: GO 3184
3235: POP
3236: POP
// if damage_build > 0 then
3237: LD_VAR 0 12
3241: PUSH
3242: LD_INT 0
3244: GREATER
3245: IFFALSE 3293
// for i = 1 to engs do
3247: LD_ADDR_VAR 0 1
3251: PUSH
3252: DOUBLE
3253: LD_INT 1
3255: DEC
3256: ST_TO_ADDR
3257: LD_VAR 0 6
3261: PUSH
3262: FOR_TO
3263: IFFALSE 3291
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3265: LD_VAR 0 6
3269: PUSH
3270: LD_VAR 0 1
3274: ARRAY
3275: PPUSH
3276: LD_VAR 0 12
3280: PUSH
3281: LD_INT 1
3283: ARRAY
3284: PPUSH
3285: CALL_OW 130
3289: GO 3262
3291: POP
3292: POP
// if ai_build > 0 then
3293: LD_EXP 10
3297: PUSH
3298: LD_INT 0
3300: GREATER
3301: IFFALSE 3394
// for i = 1 to engs do
3303: LD_ADDR_VAR 0 1
3307: PUSH
3308: DOUBLE
3309: LD_INT 1
3311: DEC
3312: ST_TO_ADDR
3313: LD_VAR 0 6
3317: PUSH
3318: FOR_TO
3319: IFFALSE 3392
// if not HasTask ( engs [ i ] ) then
3321: LD_VAR 0 6
3325: PUSH
3326: LD_VAR 0 1
3330: ARRAY
3331: PPUSH
3332: CALL_OW 314
3336: NOT
3337: IFFALSE 3390
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3339: LD_VAR 0 6
3343: PUSH
3344: LD_VAR 0 1
3348: ARRAY
3349: PPUSH
3350: LD_EXP 10
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PPUSH
3359: LD_EXP 10
3363: PUSH
3364: LD_INT 2
3366: ARRAY
3367: PPUSH
3368: LD_EXP 10
3372: PUSH
3373: LD_INT 3
3375: ARRAY
3376: PPUSH
3377: LD_EXP 10
3381: PUSH
3382: LD_INT 4
3384: ARRAY
3385: PPUSH
3386: CALL_OW 145
3390: GO 3318
3392: POP
3393: POP
// if damage_pep > 0 and sci > 0 then
3394: LD_VAR 0 11
3398: PUSH
3399: LD_INT 0
3401: GREATER
3402: PUSH
3403: LD_VAR 0 8
3407: PUSH
3408: LD_INT 0
3410: GREATER
3411: AND
3412: IFFALSE 3598
// begin for i = 1 to sci do
3414: LD_ADDR_VAR 0 1
3418: PUSH
3419: DOUBLE
3420: LD_INT 1
3422: DEC
3423: ST_TO_ADDR
3424: LD_VAR 0 8
3428: PUSH
3429: FOR_TO
3430: IFFALSE 3449
// ComExitBuilding ( sci [ i ] ) ;
3432: LD_VAR 0 8
3436: PUSH
3437: LD_VAR 0 1
3441: ARRAY
3442: PPUSH
3443: CALL_OW 122
3447: GO 3429
3449: POP
3450: POP
// for i = 1 to damage_pep do
3451: LD_ADDR_VAR 0 1
3455: PUSH
3456: DOUBLE
3457: LD_INT 1
3459: DEC
3460: ST_TO_ADDR
3461: LD_VAR 0 11
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3546
// begin if not IsInUnit ( damage_pep [ i ] ) then
3469: LD_VAR 0 11
3473: PUSH
3474: LD_VAR 0 1
3478: ARRAY
3479: PPUSH
3480: CALL_OW 310
3484: NOT
3485: IFFALSE 3502
// ComExitBuilding ( damage_pep [ i ] ) ;
3487: LD_VAR 0 11
3491: PUSH
3492: LD_VAR 0 1
3496: ARRAY
3497: PPUSH
3498: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3502: LD_VAR 0 11
3506: PUSH
3507: LD_VAR 0 1
3511: ARRAY
3512: PPUSH
3513: LD_INT 9
3515: PPUSH
3516: CALL_OW 308
3520: NOT
3521: IFFALSE 3544
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3523: LD_VAR 0 11
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: PPUSH
3534: LD_INT 96
3536: PPUSH
3537: LD_INT 52
3539: PPUSH
3540: CALL_OW 111
// end ;
3544: GO 3466
3546: POP
3547: POP
// if damage_pep = 0 then
3548: LD_VAR 0 11
3552: PUSH
3553: LD_INT 0
3555: EQUAL
3556: IFFALSE 3598
// for i = 1 to sci do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_VAR 0 8
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3596
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3576: LD_VAR 0 8
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: LD_INT 9
3589: PPUSH
3590: CALL_OW 120
3594: GO 3573
3596: POP
3597: POP
// end ; if ai_tech > 0 then
3598: LD_EXP 12
3602: PUSH
3603: LD_INT 0
3605: GREATER
3606: IFFALSE 3624
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3608: LD_INT 9
3610: PPUSH
3611: LD_EXP 12
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: CALL_OW 124
// if ai_vehs > 0 then
3624: LD_EXP 11
3628: PUSH
3629: LD_INT 0
3631: GREATER
3632: IFFALSE 3760
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3634: LD_INT 14
3636: PPUSH
3637: LD_EXP 11
3641: PUSH
3642: LD_INT 1
3644: ARRAY
3645: PPUSH
3646: LD_EXP 11
3650: PUSH
3651: LD_INT 2
3653: ARRAY
3654: PPUSH
3655: LD_EXP 11
3659: PUSH
3660: LD_INT 3
3662: ARRAY
3663: PPUSH
3664: LD_EXP 11
3668: PUSH
3669: LD_INT 4
3671: ARRAY
3672: PPUSH
3673: CALL_OW 448
3677: IFFALSE 3760
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3679: LD_INT 14
3681: PPUSH
3682: LD_EXP 11
3686: PUSH
3687: LD_INT 1
3689: ARRAY
3690: PPUSH
3691: LD_EXP 11
3695: PUSH
3696: LD_INT 2
3698: ARRAY
3699: PPUSH
3700: LD_EXP 11
3704: PUSH
3705: LD_INT 3
3707: ARRAY
3708: PPUSH
3709: LD_EXP 11
3713: PUSH
3714: LD_INT 4
3716: ARRAY
3717: PPUSH
3718: CALL_OW 125
// for i = 1 to 4 do
3722: LD_ADDR_VAR 0 1
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_INT 4
3734: PUSH
3735: FOR_TO
3736: IFFALSE 3758
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3738: LD_ADDR_EXP 11
3742: PUSH
3743: LD_EXP 11
3747: PPUSH
3748: LD_INT 1
3750: PPUSH
3751: CALL_OW 3
3755: ST_TO_ADDR
3756: GO 3735
3758: POP
3759: POP
// end ; if tower_list > 0 then
3760: LD_EXP 14
3764: PUSH
3765: LD_INT 0
3767: GREATER
3768: IFFALSE 3872
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3770: LD_INT 40
3772: PPUSH
3773: LD_INT 1
3775: PPUSH
3776: CALL_OW 321
3780: PUSH
3781: LD_INT 2
3783: EQUAL
3784: IFFALSE 3822
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3786: LD_EXP 14
3790: PUSH
3791: LD_INT 1
3793: ARRAY
3794: PPUSH
3795: LD_INT 7
3797: PPUSH
3798: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3802: LD_ADDR_EXP 14
3806: PUSH
3807: LD_EXP 14
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: CALL_OW 3
3819: ST_TO_ADDR
// end else
3820: GO 3872
// if GetTech ( tech_gatling , 1 ) = state_researched then
3822: LD_INT 69
3824: PPUSH
3825: LD_INT 1
3827: PPUSH
3828: CALL_OW 321
3832: PUSH
3833: LD_INT 2
3835: EQUAL
3836: IFFALSE 3872
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3838: LD_EXP 14
3842: PUSH
3843: LD_INT 1
3845: ARRAY
3846: PPUSH
3847: LD_INT 4
3849: PPUSH
3850: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3854: LD_ADDR_EXP 14
3858: PUSH
3859: LD_EXP 14
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: CALL_OW 3
3871: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3872: LD_VAR 0 13
3876: PUSH
3877: LD_INT 0
3879: GREATER
3880: IFFALSE 4055
// begin for i = 1 to damage_vehs do
3882: LD_ADDR_VAR 0 1
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_VAR 0 13
3896: PUSH
3897: FOR_TO
3898: IFFALSE 4053
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3900: LD_ADDR_VAR 0 2
3904: PUSH
3905: LD_VAR 0 13
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: CALL_OW 311
3920: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
3921: LD_VAR 0 13
3925: PUSH
3926: LD_VAR 0 1
3930: ARRAY
3931: PPUSH
3932: LD_INT 10
3934: PPUSH
3935: CALL_OW 308
3939: NOT
3940: IFFALSE 3956
// ComMoveToArea ( un , repair_area ) else
3942: LD_VAR 0 2
3946: PPUSH
3947: LD_INT 10
3949: PPUSH
3950: CALL_OW 113
3954: GO 4051
// begin if IsInUnit ( un ) then
3956: LD_VAR 0 2
3960: PPUSH
3961: CALL_OW 310
3965: IFFALSE 3976
// ComExitVehicle ( un ) ;
3967: LD_VAR 0 2
3971: PPUSH
3972: CALL_OW 121
// Wait ( 0 0$01 ) ;
3976: LD_INT 35
3978: PPUSH
3979: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
3983: LD_VAR 0 2
3987: PPUSH
3988: LD_VAR 0 13
3992: PUSH
3993: LD_VAR 0 1
3997: ARRAY
3998: PPUSH
3999: CALL_OW 129
// Wait ( 0 0$01 ) ;
4003: LD_INT 35
4005: PPUSH
4006: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4010: LD_VAR 0 13
4014: PUSH
4015: LD_VAR 0 1
4019: ARRAY
4020: PPUSH
4021: CALL_OW 256
4025: PUSH
4026: LD_INT 1000
4028: EQUAL
4029: IFFALSE 3983
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_VAR 0 13
4040: PUSH
4041: LD_VAR 0 1
4045: ARRAY
4046: PPUSH
4047: CALL_OW 120
// end ; end ;
4051: GO 3897
4053: POP
4054: POP
// end ; end ;
4055: PPOPN 13
4057: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4058: LD_EXP 1
4062: PUSH
4063: LD_INT 2
4065: EQUAL
4066: PUSH
4067: LD_EXP 8
4071: PUSH
4072: LD_INT 0
4074: EQUAL
4075: AND
4076: IFFALSE 4255
4078: GO 4080
4080: DISABLE
4081: LD_INT 0
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
// begin enable ;
4087: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4088: LD_ADDR_VAR 0 3
4092: PUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 1
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 21
4105: PUSH
4106: LD_INT 2
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 24
4115: PUSH
4116: LD_INT 650
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 34
4128: PUSH
4129: LD_INT 12
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: PUSH
4146: EMPTY
4147: LIST
4148: PPUSH
4149: CALL_OW 69
4153: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4154: LD_ADDR_VAR 0 4
4158: PUSH
4159: LD_INT 11
4161: PPUSH
4162: LD_INT 22
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PPUSH
4172: CALL_OW 70
4176: ST_TO_ADDR
// if filter > 0 then
4177: LD_VAR 0 3
4181: PUSH
4182: LD_INT 0
4184: GREATER
4185: IFFALSE 4255
// for i = 1 to filter do
4187: LD_ADDR_VAR 0 1
4191: PUSH
4192: DOUBLE
4193: LD_INT 1
4195: DEC
4196: ST_TO_ADDR
4197: LD_VAR 0 3
4201: PUSH
4202: FOR_TO
4203: IFFALSE 4253
// if enemy > 0 then
4205: LD_VAR 0 4
4209: PUSH
4210: LD_INT 0
4212: GREATER
4213: IFFALSE 4251
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4215: LD_VAR 0 3
4219: PUSH
4220: LD_VAR 0 1
4224: ARRAY
4225: PPUSH
4226: LD_VAR 0 4
4230: PPUSH
4231: LD_VAR 0 3
4235: PUSH
4236: LD_VAR 0 1
4240: ARRAY
4241: PPUSH
4242: CALL_OW 74
4246: PPUSH
4247: CALL_OW 115
4251: GO 4202
4253: POP
4254: POP
// end ;
4255: PPOPN 4
4257: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4258: LD_EXP 1
4262: PUSH
4263: LD_INT 2
4265: EQUAL
4266: PUSH
4267: LD_EXP 8
4271: PUSH
4272: LD_INT 0
4274: EQUAL
4275: AND
4276: IFFALSE 4723
4278: GO 4280
4280: DISABLE
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
4289: PPUSH
// begin enable ;
4290: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4291: LD_ADDR_VAR 0 5
4295: PUSH
4296: LD_INT 50
4298: PUSH
4299: EMPTY
4300: LIST
4301: PUSH
4302: LD_INT 22
4304: PUSH
4305: LD_INT 1
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 2
4314: PUSH
4315: LD_INT 25
4317: PUSH
4318: LD_INT 2
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 25
4327: PUSH
4328: LD_INT 16
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: LIST
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: PPUSH
4345: CALL_OW 69
4349: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4350: LD_ADDR_VAR 0 6
4354: PUSH
4355: LD_INT 22
4357: PUSH
4358: LD_INT 1
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 34
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: LD_INT 24
4377: PUSH
4378: LD_INT 650
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: PPUSH
4390: CALL_OW 69
4394: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4395: LD_ADDR_VAR 0 7
4399: PUSH
4400: LD_INT 22
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 2
4412: PUSH
4413: LD_INT 30
4415: PUSH
4416: LD_INT 0
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 30
4425: PUSH
4426: LD_INT 1
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 69
4446: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4447: LD_ADDR_VAR 0 4
4451: PUSH
4452: LD_INT 7
4454: PPUSH
4455: CALL_OW 435
4459: ST_TO_ADDR
// c = 1 ;
4460: LD_ADDR_VAR 0 2
4464: PUSH
4465: LD_INT 1
4467: ST_TO_ADDR
// if cargo > 0 then
4468: LD_VAR 0 6
4472: PUSH
4473: LD_INT 0
4475: GREATER
4476: IFFALSE 4723
// while c < skr do
4478: LD_VAR 0 2
4482: PUSH
4483: LD_VAR 0 4
4487: LESS
4488: IFFALSE 4723
// begin if cargo > 0 then
4490: LD_VAR 0 6
4494: PUSH
4495: LD_INT 0
4497: GREATER
4498: IFFALSE 4721
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4500: LD_VAR 0 6
4504: PUSH
4505: LD_INT 1
4507: ARRAY
4508: PPUSH
4509: CALL_OW 261
4513: PUSH
4514: LD_INT 40
4516: GREATER
4517: IFFALSE 4615
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_VAR 0 2
4528: ARRAY
4529: PPUSH
4530: LD_VAR 0 4
4534: PUSH
4535: LD_VAR 0 2
4539: PUSH
4540: LD_INT 1
4542: PLUS
4543: ARRAY
4544: PPUSH
4545: LD_INT 3
4547: PPUSH
4548: CALL 10330 0 3
4552: PUSH
4553: LD_INT 15
4555: GREATER
4556: PUSH
4557: LD_VAR 0 6
4561: PUSH
4562: LD_INT 1
4564: ARRAY
4565: PPUSH
4566: CALL_OW 314
4570: NOT
4571: AND
4572: IFFALSE 4613
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4574: LD_VAR 0 6
4578: PUSH
4579: LD_INT 1
4581: ARRAY
4582: PPUSH
4583: LD_VAR 0 4
4587: PUSH
4588: LD_VAR 0 2
4592: ARRAY
4593: PPUSH
4594: LD_VAR 0 4
4598: PUSH
4599: LD_VAR 0 2
4603: PUSH
4604: LD_INT 1
4606: PLUS
4607: ARRAY
4608: PPUSH
4609: CALL_OW 117
// end else
4613: GO 4707
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4615: LD_VAR 0 6
4619: PUSH
4620: LD_INT 1
4622: ARRAY
4623: PPUSH
4624: LD_VAR 0 7
4628: PUSH
4629: LD_INT 1
4631: ARRAY
4632: PPUSH
4633: CALL_OW 250
4637: PPUSH
4638: LD_VAR 0 7
4642: PUSH
4643: LD_INT 1
4645: ARRAY
4646: PPUSH
4647: CALL_OW 251
4651: PPUSH
4652: CALL_OW 111
// Wait ( 0 0$01 ) ;
4656: LD_INT 35
4658: PPUSH
4659: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4663: LD_VAR 0 6
4667: PUSH
4668: LD_INT 1
4670: ARRAY
4671: PPUSH
4672: LD_VAR 0 7
4676: PUSH
4677: LD_INT 1
4679: ARRAY
4680: PPUSH
4681: CALL_OW 296
4685: PUSH
4686: LD_INT 7
4688: LESS
4689: IFFALSE 4615
// SetFuel ( cargo [ 1 ] , 100 ) ;
4691: LD_VAR 0 6
4695: PUSH
4696: LD_INT 1
4698: ARRAY
4699: PPUSH
4700: LD_INT 100
4702: PPUSH
4703: CALL_OW 240
// end ; c = c + 2 ;
4707: LD_ADDR_VAR 0 2
4711: PUSH
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 2
4719: PLUS
4720: ST_TO_ADDR
// end ; end ;
4721: GO 4478
// end ;
4723: PPOPN 7
4725: END
// on EnterBuilding ( b , un ) do var i , filter ;
4726: LD_INT 0
4728: PPUSH
4729: PPUSH
// begin if game_type = 2 and depot_captured = false then
4730: LD_EXP 1
4734: PUSH
4735: LD_INT 2
4737: EQUAL
4738: PUSH
4739: LD_EXP 8
4743: PUSH
4744: LD_INT 0
4746: EQUAL
4747: AND
4748: IFFALSE 4802
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4750: LD_VAR 0 1
4754: PUSH
4755: LD_INT 22
4757: PUSH
4758: LD_INT 1
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 30
4767: PUSH
4768: LD_INT 32
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 69
4783: IN
4784: IFFALSE 4802
// sold_ocp := sold_ocp ^ un ;
4786: LD_ADDR_EXP 13
4790: PUSH
4791: LD_EXP 13
4795: PUSH
4796: LD_VAR 0 2
4800: ADD
4801: ST_TO_ADDR
// end ; end ;
4802: PPOPN 4
4804: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4805: LD_INT 0
4807: PPUSH
4808: PPUSH
// begin if un in sold_ocp then
4809: LD_VAR 0 2
4813: PUSH
4814: LD_EXP 13
4818: IN
4819: IFFALSE 4841
// sold_ocp := Delete ( sold_ocp , un ) ;
4821: LD_ADDR_EXP 13
4825: PUSH
4826: LD_EXP 13
4830: PPUSH
4831: LD_VAR 0 2
4835: PPUSH
4836: CALL_OW 3
4840: ST_TO_ADDR
// end ;
4841: PPOPN 4
4843: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4844: LD_INT 0
4846: PPUSH
4847: PPUSH
4848: PPUSH
// begin if game_type = 2 then
4849: LD_EXP 1
4853: PUSH
4854: LD_INT 2
4856: EQUAL
4857: IFFALSE 4904
// begin if GetSide ( lab ) = 1 then
4859: LD_VAR 0 2
4863: PPUSH
4864: CALL_OW 255
4868: PUSH
4869: LD_INT 1
4871: EQUAL
4872: IFFALSE 4904
// if tech in ai_tech then
4874: LD_VAR 0 1
4878: PUSH
4879: LD_EXP 12
4883: IN
4884: IFFALSE 4904
// ai_tech := Delete ( ai_tech , 1 ) ;
4886: LD_ADDR_EXP 12
4890: PUSH
4891: LD_EXP 12
4895: PPUSH
4896: LD_INT 1
4898: PPUSH
4899: CALL_OW 3
4903: ST_TO_ADDR
// end ; end ;
4904: PPOPN 5
4906: END
// on BuildingComplete ( b ) do var i , side , un ;
4907: LD_INT 0
4909: PPUSH
4910: PPUSH
4911: PPUSH
// begin if game_type = 2 and depot_captured = false then
4912: LD_EXP 1
4916: PUSH
4917: LD_INT 2
4919: EQUAL
4920: PUSH
4921: LD_EXP 8
4925: PUSH
4926: LD_INT 0
4928: EQUAL
4929: AND
4930: IFFALSE 5037
// begin if GetSide ( b ) = 1 then
4932: LD_VAR 0 1
4936: PPUSH
4937: CALL_OW 255
4941: PUSH
4942: LD_INT 1
4944: EQUAL
4945: IFFALSE 4985
// for i = 1 to 4 do
4947: LD_ADDR_VAR 0 2
4951: PUSH
4952: DOUBLE
4953: LD_INT 1
4955: DEC
4956: ST_TO_ADDR
4957: LD_INT 4
4959: PUSH
4960: FOR_TO
4961: IFFALSE 4983
// ai_build := Delete ( ai_build , 1 ) ;
4963: LD_ADDR_EXP 10
4967: PUSH
4968: LD_EXP 10
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: CALL_OW 3
4980: ST_TO_ADDR
4981: GO 4960
4983: POP
4984: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4985: LD_VAR 0 1
4989: PUSH
4990: LD_INT 22
4992: PUSH
4993: LD_INT 1
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PUSH
5000: LD_INT 30
5002: PUSH
5003: LD_INT 32
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PPUSH
5014: CALL_OW 69
5018: IN
5019: IFFALSE 5037
// tower_list := tower_list ^ b ;
5021: LD_ADDR_EXP 14
5025: PUSH
5026: LD_EXP 14
5030: PUSH
5031: LD_VAR 0 1
5035: ADD
5036: ST_TO_ADDR
// end ; end ;
5037: PPOPN 4
5039: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5040: LD_EXP 1
5044: PUSH
5045: LD_INT 1
5047: EQUAL
5048: IFFALSE 5246
5050: GO 5052
5052: DISABLE
// begin enable ;
5053: ENABLE
// if timer <= 20 20$00 then
5054: LD_EXP 6
5058: PUSH
5059: LD_INT 42000
5061: LESSEQUAL
5062: IFFALSE 5097
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5064: LD_ADDR_EXP 15
5068: PUSH
5069: LD_INT 5
5071: PUSH
5072: LD_INT 6
5074: PUSH
5075: LD_INT 7
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: PUSH
5083: LD_EXP 2
5087: ARRAY
5088: ST_TO_ADDR
// enemy_typ := 1 ;
5089: LD_ADDR_EXP 16
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5097: LD_EXP 6
5101: PUSH
5102: LD_INT 42000
5104: GREATER
5105: PUSH
5106: LD_EXP 6
5110: PUSH
5111: LD_INT 84000
5113: LESSEQUAL
5114: AND
5115: IFFALSE 5150
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5117: LD_ADDR_EXP 15
5121: PUSH
5122: LD_INT 6
5124: PUSH
5125: LD_INT 8
5127: PUSH
5128: LD_INT 9
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: LIST
5135: PUSH
5136: LD_EXP 2
5140: ARRAY
5141: ST_TO_ADDR
// enemy_typ := 2 ;
5142: LD_ADDR_EXP 16
5146: PUSH
5147: LD_INT 2
5149: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5150: LD_EXP 6
5154: PUSH
5155: LD_INT 84000
5157: GREATER
5158: PUSH
5159: LD_EXP 6
5163: PUSH
5164: LD_INT 126000
5166: LESSEQUAL
5167: AND
5168: IFFALSE 5203
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5170: LD_ADDR_EXP 15
5174: PUSH
5175: LD_INT 8
5177: PUSH
5178: LD_INT 9
5180: PUSH
5181: LD_INT 10
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: LIST
5188: PUSH
5189: LD_EXP 2
5193: ARRAY
5194: ST_TO_ADDR
// enemy_typ := 3 ;
5195: LD_ADDR_EXP 16
5199: PUSH
5200: LD_INT 3
5202: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5203: LD_EXP 6
5207: PUSH
5208: LD_INT 126000
5210: GREATER
5211: IFFALSE 5246
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5213: LD_ADDR_EXP 15
5217: PUSH
5218: LD_INT 10
5220: PUSH
5221: LD_INT 12
5223: PUSH
5224: LD_INT 14
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: PUSH
5232: LD_EXP 2
5236: ARRAY
5237: ST_TO_ADDR
// enemy_typ := 3 ;
5238: LD_ADDR_EXP 16
5242: PUSH
5243: LD_INT 3
5245: ST_TO_ADDR
// end ; end ;
5246: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5247: LD_EXP 6
5251: PUSH
5252: LD_INT 16800
5254: PUSH
5255: LD_INT 17850
5257: PUSH
5258: LD_INT 18900
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 2
5270: ARRAY
5271: GREATEREQUAL
5272: PUSH
5273: LD_EXP 1
5277: PUSH
5278: LD_INT 1
5280: EQUAL
5281: AND
5282: IFFALSE 5486
5284: GO 5286
5286: DISABLE
5287: LD_INT 0
5289: PPUSH
// begin uc_nation := 1 ;
5290: LD_ADDR_OWVAR 21
5294: PUSH
5295: LD_INT 1
5297: ST_TO_ADDR
// uc_side := 4 ;
5298: LD_ADDR_OWVAR 20
5302: PUSH
5303: LD_INT 4
5305: ST_TO_ADDR
// hc_sex := sex_male ;
5306: LD_ADDR_OWVAR 27
5310: PUSH
5311: LD_INT 1
5313: ST_TO_ADDR
// hc_class := 1 ;
5314: LD_ADDR_OWVAR 28
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// hc_gallery :=  ;
5322: LD_ADDR_OWVAR 33
5326: PUSH
5327: LD_STRING 
5329: ST_TO_ADDR
// hc_name :=  ;
5330: LD_ADDR_OWVAR 26
5334: PUSH
5335: LD_STRING 
5337: ST_TO_ADDR
// am_com2 := CreateHuman ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: CALL_OW 44
5347: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5348: LD_EXP 17
5352: PPUSH
5353: LD_STRING D-rus
5355: PPUSH
5356: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5360: LD_ADDR_VAR 0 1
5364: PUSH
5365: LD_INT 6
5367: PUSH
5368: LD_INT 5
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: ST_TO_ADDR
// while ( true ) do
5375: LD_INT 1
5377: IFFALSE 5486
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5379: LD_INT 13650
5381: PPUSH
5382: LD_INT 17920
5384: PPUSH
5385: CALL_OW 12
5389: PPUSH
5390: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5394: LD_INT 3
5396: PPUSH
5397: LD_EXP 15
5401: PPUSH
5402: LD_EXP 16
5406: PPUSH
5407: LD_VAR 0 1
5411: PPUSH
5412: CALL 7912 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5416: LD_EXP 6
5420: PUSH
5421: LD_INT 115500
5423: PUSH
5424: LD_INT 94500
5426: PUSH
5427: LD_INT 73500
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: GREATER
5441: IFFALSE 5484
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5443: LD_INT 1050
5445: PPUSH
5446: LD_INT 3150
5448: PPUSH
5449: CALL_OW 12
5453: PPUSH
5454: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5458: LD_INT 3
5460: PPUSH
5461: LD_EXP 15
5465: PUSH
5466: LD_INT 2
5468: DIVREAL
5469: PPUSH
5470: LD_EXP 16
5474: PPUSH
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL 7912 0 4
// end ; end ;
5484: GO 5375
// end ;
5486: PPOPN 1
5488: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5489: LD_INT 1
5491: PPUSH
5492: CALL_OW 274
5496: PPUSH
5497: LD_INT 3
5499: PPUSH
5500: CALL_OW 275
5504: PUSH
5505: LD_EXP 7
5509: EQUAL
5510: IFFALSE 5792
5512: GO 5514
5514: DISABLE
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5519: LD_EXP 17
5523: PPUSH
5524: LD_STRING D-help
5526: PPUSH
5527: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5531: LD_INT 7035
5533: PPUSH
5534: LD_INT 16065
5536: PPUSH
5537: CALL_OW 12
5541: PPUSH
5542: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5546: LD_INT 35
5548: PPUSH
5549: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5553: LD_INT 22
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PPUSH
5563: CALL_OW 69
5567: PUSH
5568: LD_INT 0
5570: EQUAL
5571: IFFALSE 5546
// uc_side := 1 ;
5573: LD_ADDR_OWVAR 20
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// uc_nation := 1 ;
5581: LD_ADDR_OWVAR 21
5585: PUSH
5586: LD_INT 1
5588: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5589: LD_ADDR_VAR 0 1
5593: PUSH
5594: DOUBLE
5595: LD_INT 1
5597: DEC
5598: ST_TO_ADDR
5599: LD_INT 3
5601: PUSH
5602: LD_EXP 2
5606: PLUS
5607: PUSH
5608: FOR_TO
5609: IFFALSE 5654
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5611: LD_ADDR_VAR 0 2
5615: PUSH
5616: LD_INT 1
5618: PPUSH
5619: LD_INT 4
5621: PPUSH
5622: CALL_OW 12
5626: PPUSH
5627: LD_EXP 3
5631: PPUSH
5632: CALL 9167 0 2
5636: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5637: LD_VAR 0 2
5641: PPUSH
5642: LD_INT 5
5644: PPUSH
5645: LD_INT 0
5647: PPUSH
5648: CALL_OW 49
// end ;
5652: GO 5608
5654: POP
5655: POP
// case game_diff of 1 :
5656: LD_EXP 2
5660: PUSH
5661: LD_INT 1
5663: DOUBLE
5664: EQUAL
5665: IFTRUE 5669
5667: GO 5696
5669: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5670: LD_INT 4
5672: PPUSH
5673: LD_INT 1
5675: PPUSH
5676: LD_INT 5
5678: PPUSH
5679: LD_INT 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: LD_EXP 3
5689: PPUSH
5690: CALL 9706 0 6
5694: GO 5767
5696: LD_INT 2
5698: DOUBLE
5699: EQUAL
5700: IFTRUE 5704
5702: GO 5731
5704: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5705: LD_INT 3
5707: PPUSH
5708: LD_INT 1
5710: PPUSH
5711: LD_INT 5
5713: PPUSH
5714: LD_INT 5
5716: PPUSH
5717: LD_INT 0
5719: PPUSH
5720: LD_EXP 3
5724: PPUSH
5725: CALL 9706 0 6
5729: GO 5767
5731: LD_INT 3
5733: DOUBLE
5734: EQUAL
5735: IFTRUE 5739
5737: GO 5766
5739: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5740: LD_INT 3
5742: PPUSH
5743: LD_INT 1
5745: PPUSH
5746: LD_INT 3
5748: PPUSH
5749: LD_INT 5
5751: PPUSH
5752: LD_INT 0
5754: PPUSH
5755: LD_EXP 3
5759: PPUSH
5760: CALL 9706 0 6
5764: GO 5767
5766: POP
// DialogueOn ;
5767: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5771: LD_INT 91
5773: PPUSH
5774: LD_INT 115
5776: PPUSH
5777: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5781: LD_INT 10
5783: PPUSH
5784: CALL_OW 67
// DialogueOff ;
5788: CALL_OW 7
// end ;
5792: PPOPN 2
5794: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5795: LD_INT 0
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
5802: PPUSH
5803: PPUSH
5804: PPUSH
// uc_side := side ;
5805: LD_ADDR_OWVAR 20
5809: PUSH
5810: LD_VAR 0 1
5814: ST_TO_ADDR
// uc_nation := nation_american ;
5815: LD_ADDR_OWVAR 21
5819: PUSH
5820: LD_INT 1
5822: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5823: LD_ADDR_VAR 0 10
5827: PUSH
5828: LD_INT 3
5830: PUSH
5831: LD_INT 4
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5838: LD_ADDR_VAR 0 11
5842: PUSH
5843: LD_INT 2
5845: PUSH
5846: LD_INT 4
5848: PUSH
5849: LD_INT 5
5851: PUSH
5852: LD_INT 6
5854: PUSH
5855: LD_INT 7
5857: PUSH
5858: LD_INT 97
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: ST_TO_ADDR
// case typ of 1 :
5869: LD_VAR 0 3
5873: PUSH
5874: LD_INT 1
5876: DOUBLE
5877: EQUAL
5878: IFTRUE 5882
5880: GO 6076
5882: POP
// begin for i = 1 to num do
5883: LD_ADDR_VAR 0 6
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 2
5897: PUSH
5898: FOR_TO
5899: IFFALSE 6072
// begin vc_chassis := chassis [ 1 ] ;
5901: LD_ADDR_OWVAR 37
5905: PUSH
5906: LD_VAR 0 10
5910: PUSH
5911: LD_INT 1
5913: ARRAY
5914: ST_TO_ADDR
// vc_engine := engine_combustion ;
5915: LD_ADDR_OWVAR 39
5919: PUSH
5920: LD_INT 1
5922: ST_TO_ADDR
// vc_control := control_manual ;
5923: LD_ADDR_OWVAR 38
5927: PUSH
5928: LD_INT 1
5930: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
5931: LD_ADDR_OWVAR 40
5935: PUSH
5936: LD_VAR 0 11
5940: PUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 3
5946: PPUSH
5947: CALL_OW 12
5951: ARRAY
5952: ST_TO_ADDR
// veh := CreateVehicle ;
5953: LD_ADDR_VAR 0 9
5957: PUSH
5958: CALL_OW 45
5962: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
5963: LD_ADDR_VAR 0 12
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 2
5973: PPUSH
5974: CALL_OW 12
5978: ST_TO_ADDR
// if f = 1 then
5979: LD_VAR 0 12
5983: PUSH
5984: LD_INT 1
5986: EQUAL
5987: IFFALSE 6003
// SetDir ( veh , 3 ) else
5989: LD_VAR 0 9
5993: PPUSH
5994: LD_INT 3
5996: PPUSH
5997: CALL_OW 233
6001: GO 6015
// SetDir ( veh , 1 ) ;
6003: LD_VAR 0 9
6007: PPUSH
6008: LD_INT 1
6010: PPUSH
6011: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6015: LD_VAR 0 9
6019: PPUSH
6020: LD_VAR 0 4
6024: PUSH
6025: LD_VAR 0 12
6029: ARRAY
6030: PPUSH
6031: LD_INT 0
6033: PPUSH
6034: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6038: LD_ADDR_VAR 0 7
6042: PUSH
6043: LD_INT 1
6045: PPUSH
6046: LD_EXP 4
6050: PPUSH
6051: CALL 9167 0 2
6055: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6056: LD_VAR 0 7
6060: PPUSH
6061: LD_VAR 0 9
6065: PPUSH
6066: CALL_OW 52
// end ;
6070: GO 5898
6072: POP
6073: POP
// end ; 2 :
6074: GO 6550
6076: LD_INT 2
6078: DOUBLE
6079: EQUAL
6080: IFTRUE 6084
6082: GO 6347
6084: POP
// begin for i = 1 to num do
6085: LD_ADDR_VAR 0 6
6089: PUSH
6090: DOUBLE
6091: LD_INT 1
6093: DEC
6094: ST_TO_ADDR
6095: LD_VAR 0 2
6099: PUSH
6100: FOR_TO
6101: IFFALSE 6282
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6103: LD_ADDR_OWVAR 37
6107: PUSH
6108: LD_VAR 0 10
6112: PUSH
6113: LD_INT 1
6115: PPUSH
6116: LD_INT 2
6118: PPUSH
6119: CALL_OW 12
6123: ARRAY
6124: ST_TO_ADDR
// vc_engine := engine_combustion ;
6125: LD_ADDR_OWVAR 39
6129: PUSH
6130: LD_INT 1
6132: ST_TO_ADDR
// vc_control := control_manual ;
6133: LD_ADDR_OWVAR 38
6137: PUSH
6138: LD_INT 1
6140: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6141: LD_ADDR_OWVAR 40
6145: PUSH
6146: LD_VAR 0 11
6150: PUSH
6151: LD_INT 1
6153: PPUSH
6154: LD_INT 3
6156: PPUSH
6157: CALL_OW 12
6161: ARRAY
6162: ST_TO_ADDR
// veh := CreateVehicle ;
6163: LD_ADDR_VAR 0 9
6167: PUSH
6168: CALL_OW 45
6172: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6173: LD_ADDR_VAR 0 12
6177: PUSH
6178: LD_INT 1
6180: PPUSH
6181: LD_INT 2
6183: PPUSH
6184: CALL_OW 12
6188: ST_TO_ADDR
// if f = 1 then
6189: LD_VAR 0 12
6193: PUSH
6194: LD_INT 1
6196: EQUAL
6197: IFFALSE 6213
// SetDir ( veh , 3 ) else
6199: LD_VAR 0 9
6203: PPUSH
6204: LD_INT 3
6206: PPUSH
6207: CALL_OW 233
6211: GO 6225
// SetDir ( veh , 1 ) ;
6213: LD_VAR 0 9
6217: PPUSH
6218: LD_INT 1
6220: PPUSH
6221: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6225: LD_VAR 0 9
6229: PPUSH
6230: LD_VAR 0 4
6234: PUSH
6235: LD_VAR 0 12
6239: ARRAY
6240: PPUSH
6241: LD_INT 0
6243: PPUSH
6244: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6248: LD_ADDR_VAR 0 7
6252: PUSH
6253: LD_INT 1
6255: PPUSH
6256: LD_EXP 4
6260: PPUSH
6261: CALL 9167 0 2
6265: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6266: LD_VAR 0 7
6270: PPUSH
6271: LD_VAR 0 9
6275: PPUSH
6276: CALL_OW 52
// end ;
6280: GO 6100
6282: POP
6283: POP
// for i = 1 to 3 do
6284: LD_ADDR_VAR 0 6
6288: PUSH
6289: DOUBLE
6290: LD_INT 1
6292: DEC
6293: ST_TO_ADDR
6294: LD_INT 3
6296: PUSH
6297: FOR_TO
6298: IFFALSE 6343
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6300: LD_ADDR_VAR 0 7
6304: PUSH
6305: LD_INT 5
6307: PPUSH
6308: LD_EXP 4
6312: PPUSH
6313: CALL 9167 0 2
6317: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6318: LD_VAR 0 7
6322: PPUSH
6323: LD_VAR 0 4
6327: PUSH
6328: LD_VAR 0 12
6332: ARRAY
6333: PPUSH
6334: LD_INT 0
6336: PPUSH
6337: CALL_OW 49
// end ;
6341: GO 6297
6343: POP
6344: POP
// end ; 3 :
6345: GO 6550
6347: LD_INT 3
6349: DOUBLE
6350: EQUAL
6351: IFTRUE 6355
6353: GO 6549
6355: POP
// begin for i = 1 to num do
6356: LD_ADDR_VAR 0 6
6360: PUSH
6361: DOUBLE
6362: LD_INT 1
6364: DEC
6365: ST_TO_ADDR
6366: LD_VAR 0 2
6370: PUSH
6371: FOR_TO
6372: IFFALSE 6545
// begin vc_chassis := chassis [ 2 ] ;
6374: LD_ADDR_OWVAR 37
6378: PUSH
6379: LD_VAR 0 10
6383: PUSH
6384: LD_INT 2
6386: ARRAY
6387: ST_TO_ADDR
// vc_engine := engine_combustion ;
6388: LD_ADDR_OWVAR 39
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// vc_control := control_manual ;
6396: LD_ADDR_OWVAR 38
6400: PUSH
6401: LD_INT 1
6403: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6404: LD_ADDR_OWVAR 40
6408: PUSH
6409: LD_VAR 0 11
6413: PUSH
6414: LD_INT 3
6416: PPUSH
6417: LD_INT 6
6419: PPUSH
6420: CALL_OW 12
6424: ARRAY
6425: ST_TO_ADDR
// veh := CreateVehicle ;
6426: LD_ADDR_VAR 0 9
6430: PUSH
6431: CALL_OW 45
6435: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6436: LD_ADDR_VAR 0 12
6440: PUSH
6441: LD_INT 1
6443: PPUSH
6444: LD_INT 2
6446: PPUSH
6447: CALL_OW 12
6451: ST_TO_ADDR
// if f = 1 then
6452: LD_VAR 0 12
6456: PUSH
6457: LD_INT 1
6459: EQUAL
6460: IFFALSE 6476
// SetDir ( veh , 3 ) else
6462: LD_VAR 0 9
6466: PPUSH
6467: LD_INT 3
6469: PPUSH
6470: CALL_OW 233
6474: GO 6488
// SetDir ( veh , 1 ) ;
6476: LD_VAR 0 9
6480: PPUSH
6481: LD_INT 1
6483: PPUSH
6484: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6488: LD_VAR 0 9
6492: PPUSH
6493: LD_VAR 0 4
6497: PUSH
6498: LD_VAR 0 12
6502: ARRAY
6503: PPUSH
6504: LD_INT 0
6506: PPUSH
6507: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6511: LD_ADDR_VAR 0 7
6515: PUSH
6516: LD_INT 1
6518: PPUSH
6519: LD_EXP 4
6523: PPUSH
6524: CALL 9167 0 2
6528: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6529: LD_VAR 0 7
6533: PPUSH
6534: LD_VAR 0 9
6538: PPUSH
6539: CALL_OW 52
// end ;
6543: GO 6371
6545: POP
6546: POP
// end ; end ;
6547: GO 6550
6549: POP
// end ;
6550: LD_VAR 0 5
6554: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6555: LD_EXP 1
6559: PUSH
6560: LD_INT 2
6562: EQUAL
6563: PUSH
6564: LD_EXP 8
6568: AND
6569: IFFALSE 6724
6571: GO 6573
6573: DISABLE
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
// begin enable ;
6579: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6580: LD_ADDR_VAR 0 1
6584: PUSH
6585: LD_INT 22
6587: PUSH
6588: LD_INT 1
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PPUSH
6595: CALL_OW 69
6599: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6600: LD_ADDR_VAR 0 2
6604: PUSH
6605: LD_INT 2
6607: PUSH
6608: LD_INT 22
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: LD_INT 22
6620: PUSH
6621: LD_INT 6
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PPUSH
6633: CALL_OW 69
6637: ST_TO_ADDR
// if filter > 0 then
6638: LD_VAR 0 1
6642: PUSH
6643: LD_INT 0
6645: GREATER
6646: IFFALSE 6724
// for i = 1 to filter do
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: DOUBLE
6654: LD_INT 1
6656: DEC
6657: ST_TO_ADDR
6658: LD_VAR 0 1
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6722
// if not HasTask ( filter [ i ] ) then
6666: LD_VAR 0 1
6670: PUSH
6671: LD_VAR 0 3
6675: ARRAY
6676: PPUSH
6677: CALL_OW 314
6681: NOT
6682: IFFALSE 6720
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6684: LD_VAR 0 1
6688: PUSH
6689: LD_VAR 0 3
6693: ARRAY
6694: PPUSH
6695: LD_VAR 0 2
6699: PPUSH
6700: LD_VAR 0 1
6704: PUSH
6705: LD_VAR 0 3
6709: ARRAY
6710: PPUSH
6711: CALL_OW 74
6715: PPUSH
6716: CALL_OW 115
6720: GO 6663
6722: POP
6723: POP
// end ;
6724: PPOPN 3
6726: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6727: LD_EXP 1
6731: PUSH
6732: LD_INT 2
6734: EQUAL
6735: IFFALSE 6890
6737: GO 6739
6739: DISABLE
6740: LD_INT 0
6742: PPUSH
6743: PPUSH
6744: PPUSH
// begin enable ;
6745: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6746: LD_ADDR_VAR 0 1
6750: PUSH
6751: LD_INT 22
6753: PUSH
6754: LD_INT 8
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PPUSH
6761: CALL_OW 69
6765: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: LD_INT 22
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 22
6786: PUSH
6787: LD_INT 6
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: LIST
6798: PPUSH
6799: CALL_OW 69
6803: ST_TO_ADDR
// if filter > 0 then
6804: LD_VAR 0 1
6808: PUSH
6809: LD_INT 0
6811: GREATER
6812: IFFALSE 6890
// for i = 1 to filter do
6814: LD_ADDR_VAR 0 3
6818: PUSH
6819: DOUBLE
6820: LD_INT 1
6822: DEC
6823: ST_TO_ADDR
6824: LD_VAR 0 1
6828: PUSH
6829: FOR_TO
6830: IFFALSE 6888
// if not HasTask ( filter [ i ] ) then
6832: LD_VAR 0 1
6836: PUSH
6837: LD_VAR 0 3
6841: ARRAY
6842: PPUSH
6843: CALL_OW 314
6847: NOT
6848: IFFALSE 6886
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6850: LD_VAR 0 1
6854: PUSH
6855: LD_VAR 0 3
6859: ARRAY
6860: PPUSH
6861: LD_VAR 0 2
6865: PPUSH
6866: LD_VAR 0 1
6870: PUSH
6871: LD_VAR 0 3
6875: ARRAY
6876: PPUSH
6877: CALL_OW 74
6881: PPUSH
6882: CALL_OW 115
6886: GO 6829
6888: POP
6889: POP
// end ; end_of_file
6890: PPOPN 3
6892: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6893: LD_INT 0
6895: PPUSH
6896: PPUSH
6897: PPUSH
6898: PPUSH
6899: PPUSH
// Your_Side := 3 ;
6900: LD_ADDR_OWVAR 2
6904: PUSH
6905: LD_INT 3
6907: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6908: LD_INT 3
6910: PPUSH
6911: LD_INT 3
6913: PPUSH
6914: CALL_OW 343
// ResetFog ;
6918: CALL_OW 335
// uc_side := 6 ;
6922: LD_ADDR_OWVAR 20
6926: PUSH
6927: LD_INT 6
6929: ST_TO_ADDR
// uc_nation := 3 ;
6930: LD_ADDR_OWVAR 21
6934: PUSH
6935: LD_INT 3
6937: ST_TO_ADDR
// hc_gallery := ru ;
6938: LD_ADDR_OWVAR 33
6942: PUSH
6943: LD_STRING ru
6945: ST_TO_ADDR
// hc_face_number := 1 ;
6946: LD_ADDR_OWVAR 34
6950: PUSH
6951: LD_INT 1
6953: ST_TO_ADDR
// hc_name := J. I. Gorki ;
6954: LD_ADDR_OWVAR 26
6958: PUSH
6959: LD_STRING J. I. Gorki
6961: ST_TO_ADDR
// hc_class := 3 ;
6962: LD_ADDR_OWVAR 28
6966: PUSH
6967: LD_INT 3
6969: ST_TO_ADDR
// hc_sex := sex_male ;
6970: LD_ADDR_OWVAR 27
6974: PUSH
6975: LD_INT 1
6977: ST_TO_ADDR
// gorki := CreateHuman ;
6978: LD_ADDR_EXP 19
6982: PUSH
6983: CALL_OW 44
6987: ST_TO_ADDR
// uc_side := 3 ;
6988: LD_ADDR_OWVAR 20
6992: PUSH
6993: LD_INT 3
6995: ST_TO_ADDR
// uc_nation := 3 ;
6996: LD_ADDR_OWVAR 21
7000: PUSH
7001: LD_INT 3
7003: ST_TO_ADDR
// hc_importance := 100 ;
7004: LD_ADDR_OWVAR 32
7008: PUSH
7009: LD_INT 100
7011: ST_TO_ADDR
// hc_name :=  ;
7012: LD_ADDR_OWVAR 26
7016: PUSH
7017: LD_STRING 
7019: ST_TO_ADDR
// hc_gallery :=  ;
7020: LD_ADDR_OWVAR 33
7024: PUSH
7025: LD_STRING 
7027: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7028: LD_INT 1
7030: PPUSH
7031: LD_INT 1
7033: PPUSH
7034: LD_EXP 3
7038: PUSH
7039: LD_INT 3
7041: PLUS
7042: PPUSH
7043: CALL_OW 380
// ru_dow := CreateHuman ;
7047: LD_ADDR_EXP 18
7051: PUSH
7052: CALL_OW 44
7056: ST_TO_ADDR
// hc_importance := 0 ;
7057: LD_ADDR_OWVAR 32
7061: PUSH
7062: LD_INT 0
7064: ST_TO_ADDR
// for i = 1 to 20 do
7065: LD_ADDR_VAR 0 3
7069: PUSH
7070: DOUBLE
7071: LD_INT 1
7073: DEC
7074: ST_TO_ADDR
7075: LD_INT 20
7077: PUSH
7078: FOR_TO
7079: IFFALSE 7125
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 4
7091: PPUSH
7092: CALL_OW 12
7096: PPUSH
7097: LD_EXP 3
7101: PPUSH
7102: CALL 9167 0 2
7106: ST_TO_ADDR
// filter := filter ^ un ;
7107: LD_ADDR_VAR 0 4
7111: PUSH
7112: LD_VAR 0 4
7116: PUSH
7117: LD_VAR 0 2
7121: ADD
7122: ST_TO_ADDR
// end ;
7123: GO 7078
7125: POP
7126: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7127: LD_ADDR_VAR 0 5
7131: PUSH
7132: LD_STRING text
7134: PPUSH
7135: LD_INT 9
7137: PUSH
7138: LD_INT 8
7140: PUSH
7141: LD_INT 7
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: PUSH
7149: LD_EXP 2
7153: ARRAY
7154: PPUSH
7155: LD_INT 9
7157: PUSH
7158: LD_INT 8
7160: PUSH
7161: LD_INT 7
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: PUSH
7169: LD_EXP 2
7173: ARRAY
7174: PPUSH
7175: LD_INT -5
7177: PUSH
7178: LD_EXP 18
7182: PUSH
7183: LD_INT -3
7185: PUSH
7186: LD_INT -2
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: PUSH
7195: LD_VAR 0 4
7199: ADD
7200: PPUSH
7201: LD_INT 1
7203: PUSH
7204: LD_INT 3
7206: PUSH
7207: LD_INT 2
7209: PUSH
7210: LD_INT 1
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 4
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 9
7229: PUSH
7230: LD_INT 0
7232: PUSH
7233: LD_INT 6
7235: PUSH
7236: LD_INT 4
7238: PUSH
7239: LD_INT 3
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: PUSH
7247: LD_EXP 2
7251: ARRAY
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: PPUSH
7265: CALL_OW 42
7269: ST_TO_ADDR
// team := team ^ ru_dow ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_VAR 0 5
7279: PUSH
7280: LD_EXP 18
7284: ADD
7285: ST_TO_ADDR
// for i = 1 to team do
7286: LD_ADDR_VAR 0 3
7290: PUSH
7291: DOUBLE
7292: LD_INT 1
7294: DEC
7295: ST_TO_ADDR
7296: LD_VAR 0 5
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7327
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7304: LD_VAR 0 5
7308: PUSH
7309: LD_VAR 0 3
7313: ARRAY
7314: PPUSH
7315: LD_INT 5
7317: PPUSH
7318: LD_INT 0
7320: PPUSH
7321: CALL_OW 49
7325: GO 7301
7327: POP
7328: POP
// end ;
7329: LD_VAR 0 1
7333: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7334: LD_INT 1
7336: PPUSH
7337: CALL_OW 255
7341: PUSH
7342: LD_INT 3
7344: EQUAL
7345: IFFALSE 7455
7347: GO 7349
7349: DISABLE
7350: LD_INT 0
7352: PPUSH
// begin depot_captured := true ;
7353: LD_ADDR_EXP 8
7357: PUSH
7358: LD_INT 1
7360: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7361: LD_STRING GType2b
7363: PPUSH
7364: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7368: LD_EXP 18
7372: PPUSH
7373: LD_STRING D-rudow2
7375: PPUSH
7376: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7380: LD_EXP 19
7384: PPUSH
7385: LD_STRING D-gorky2
7387: PPUSH
7388: CALL_OW 94
// while ( true ) do
7392: LD_INT 1
7394: IFFALSE 7455
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7396: LD_INT 13300
7398: PPUSH
7399: LD_INT 19985
7401: PPUSH
7402: CALL_OW 12
7406: PPUSH
7407: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7411: LD_ADDR_VAR 0 1
7415: PUSH
7416: LD_INT 6
7418: PUSH
7419: LD_INT 5
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7426: LD_INT 1
7428: PPUSH
7429: LD_EXP 15
7433: PPUSH
7434: LD_EXP 16
7438: PPUSH
7439: LD_INT 6
7441: PUSH
7442: LD_INT 5
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PPUSH
7449: CALL 5795 0 4
// end ;
7453: GO 7392
// end ;
7455: PPOPN 1
7457: END
// every 1 1$30 trigger game_type = 2 do
7458: LD_EXP 1
7462: PUSH
7463: LD_INT 2
7465: EQUAL
7466: IFFALSE 7611
7468: GO 7470
7470: DISABLE
// begin enable ;
7471: ENABLE
// if timer <= 45 45$00 then
7472: LD_EXP 6
7476: PUSH
7477: LD_INT 94500
7479: LESSEQUAL
7480: IFFALSE 7515
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7482: LD_ADDR_EXP 15
7486: PUSH
7487: LD_INT 5
7489: PUSH
7490: LD_INT 6
7492: PUSH
7493: LD_INT 7
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: PUSH
7501: LD_EXP 2
7505: ARRAY
7506: ST_TO_ADDR
// enemy_typ := 1 ;
7507: LD_ADDR_EXP 16
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7515: LD_EXP 6
7519: PUSH
7520: LD_INT 126000
7522: GREATER
7523: PUSH
7524: LD_EXP 6
7528: PUSH
7529: LD_INT 168000
7531: LESSEQUAL
7532: AND
7533: IFFALSE 7568
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7535: LD_ADDR_EXP 15
7539: PUSH
7540: LD_INT 6
7542: PUSH
7543: LD_INT 8
7545: PUSH
7546: LD_INT 9
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: LD_EXP 2
7558: ARRAY
7559: ST_TO_ADDR
// enemy_typ := 2 ;
7560: LD_ADDR_EXP 16
7564: PUSH
7565: LD_INT 2
7567: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7568: LD_EXP 6
7572: PUSH
7573: LD_INT 168000
7575: GREATER
7576: IFFALSE 7611
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7578: LD_ADDR_EXP 15
7582: PUSH
7583: LD_INT 8
7585: PUSH
7586: LD_INT 9
7588: PUSH
7589: LD_INT 10
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: LD_EXP 2
7601: ARRAY
7602: ST_TO_ADDR
// enemy_typ := 3 ;
7603: LD_ADDR_EXP 16
7607: PUSH
7608: LD_INT 3
7610: ST_TO_ADDR
// end ; end ;
7611: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7612: LD_EXP 1
7616: PUSH
7617: LD_INT 2
7619: EQUAL
7620: IFFALSE 7745
7622: GO 7624
7624: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7625: LD_INT 8
7627: PPUSH
7628: LD_EXP 15
7632: PPUSH
7633: LD_INT 1
7635: PPUSH
7636: LD_INT 6
7638: PPUSH
7639: CALL 9816 0 4
// Wait ( 20 20$00 ) ;
7643: LD_INT 42000
7645: PPUSH
7646: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7650: LD_INT 8
7652: PPUSH
7653: LD_EXP 15
7657: PPUSH
7658: LD_INT 2
7660: PPUSH
7661: LD_INT 6
7663: PPUSH
7664: CALL 9816 0 4
// Wait ( 4 4$00 ) ;
7668: LD_INT 8400
7670: PPUSH
7671: CALL_OW 67
// uc_side := 8 ;
7675: LD_ADDR_OWVAR 20
7679: PUSH
7680: LD_INT 8
7682: ST_TO_ADDR
// uc_nation := 2 ;
7683: LD_ADDR_OWVAR 21
7687: PUSH
7688: LD_INT 2
7690: ST_TO_ADDR
// hc_class := 1 ;
7691: LD_ADDR_OWVAR 28
7695: PUSH
7696: LD_INT 1
7698: ST_TO_ADDR
// hc_gallery := sandar ;
7699: LD_ADDR_OWVAR 33
7703: PUSH
7704: LD_STRING sandar
7706: ST_TO_ADDR
// hc_face_number := 4 ;
7707: LD_ADDR_OWVAR 34
7711: PUSH
7712: LD_INT 4
7714: ST_TO_ADDR
// hc_sex := sex_male ;
7715: LD_ADDR_OWVAR 27
7719: PUSH
7720: LD_INT 1
7722: ST_TO_ADDR
// farmer := CreateHuman ;
7723: LD_ADDR_EXP 20
7727: PUSH
7728: CALL_OW 44
7732: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7733: LD_EXP 20
7737: PPUSH
7738: LD_STRING D-farmer
7740: PPUSH
7741: CALL_OW 94
// end ;
7745: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7746: LD_EXP 1
7750: PUSH
7751: LD_INT 1
7753: EQUAL
7754: IFFALSE 7909
7756: GO 7758
7758: DISABLE
7759: LD_INT 0
7761: PPUSH
7762: PPUSH
7763: PPUSH
// begin enable ;
7764: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7765: LD_ADDR_VAR 0 1
7769: PUSH
7770: LD_INT 2
7772: PUSH
7773: LD_INT 22
7775: PUSH
7776: LD_INT 3
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 22
7785: PUSH
7786: LD_INT 6
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PPUSH
7798: CALL_OW 69
7802: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7803: LD_ADDR_VAR 0 2
7807: PUSH
7808: LD_INT 2
7810: PUSH
7811: LD_INT 22
7813: PUSH
7814: LD_INT 1
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 22
7823: PUSH
7824: LD_INT 2
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: PPUSH
7836: CALL_OW 69
7840: ST_TO_ADDR
// if filter > 0 then
7841: LD_VAR 0 1
7845: PUSH
7846: LD_INT 0
7848: GREATER
7849: IFFALSE 7909
// for i = 1 to filter do
7851: LD_ADDR_VAR 0 3
7855: PUSH
7856: DOUBLE
7857: LD_INT 1
7859: DEC
7860: ST_TO_ADDR
7861: LD_VAR 0 1
7865: PUSH
7866: FOR_TO
7867: IFFALSE 7907
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7869: LD_VAR 0 1
7873: PUSH
7874: LD_VAR 0 3
7878: ARRAY
7879: PPUSH
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 1
7889: PUSH
7890: LD_VAR 0 3
7894: ARRAY
7895: PPUSH
7896: CALL_OW 74
7900: PPUSH
7901: CALL_OW 115
7905: GO 7866
7907: POP
7908: POP
// end ;
7909: PPOPN 3
7911: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
7912: LD_INT 0
7914: PPUSH
7915: PPUSH
7916: PPUSH
7917: PPUSH
7918: PPUSH
7919: PPUSH
7920: PPUSH
7921: PPUSH
// Randomize ;
7922: CALL_OW 10
// uc_side := side ;
7926: LD_ADDR_OWVAR 20
7930: PUSH
7931: LD_VAR 0 1
7935: ST_TO_ADDR
// uc_nation := nation_russian ;
7936: LD_ADDR_OWVAR 21
7940: PUSH
7941: LD_INT 3
7943: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
7944: LD_ADDR_VAR 0 10
7948: PUSH
7949: LD_INT 22
7951: PUSH
7952: LD_INT 24
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
7959: LD_ADDR_VAR 0 11
7963: PUSH
7964: LD_INT 42
7966: PUSH
7967: LD_INT 43
7969: PUSH
7970: LD_INT 44
7972: PUSH
7973: LD_INT 46
7975: PUSH
7976: LD_INT 45
7978: PUSH
7979: LD_INT 47
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// case typ of 1 :
7990: LD_VAR 0 3
7994: PUSH
7995: LD_INT 1
7997: DOUBLE
7998: EQUAL
7999: IFTRUE 8003
8001: GO 8197
8003: POP
// begin for i = 1 to num do
8004: LD_ADDR_VAR 0 6
8008: PUSH
8009: DOUBLE
8010: LD_INT 1
8012: DEC
8013: ST_TO_ADDR
8014: LD_VAR 0 2
8018: PUSH
8019: FOR_TO
8020: IFFALSE 8193
// begin vc_chassis := chassis [ 1 ] ;
8022: LD_ADDR_OWVAR 37
8026: PUSH
8027: LD_VAR 0 10
8031: PUSH
8032: LD_INT 1
8034: ARRAY
8035: ST_TO_ADDR
// vc_engine := engine_combustion ;
8036: LD_ADDR_OWVAR 39
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// vc_control := control_manual ;
8044: LD_ADDR_OWVAR 38
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8052: LD_ADDR_OWVAR 40
8056: PUSH
8057: LD_VAR 0 11
8061: PUSH
8062: LD_INT 1
8064: PPUSH
8065: LD_INT 3
8067: PPUSH
8068: CALL_OW 12
8072: ARRAY
8073: ST_TO_ADDR
// veh := CreateVehicle ;
8074: LD_ADDR_VAR 0 9
8078: PUSH
8079: CALL_OW 45
8083: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8084: LD_ADDR_VAR 0 12
8088: PUSH
8089: LD_INT 1
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: CALL_OW 12
8099: ST_TO_ADDR
// if f = 1 then
8100: LD_VAR 0 12
8104: PUSH
8105: LD_INT 1
8107: EQUAL
8108: IFFALSE 8124
// SetDir ( veh , 3 ) else
8110: LD_VAR 0 9
8114: PPUSH
8115: LD_INT 3
8117: PPUSH
8118: CALL_OW 233
8122: GO 8136
// SetDir ( veh , 1 ) ;
8124: LD_VAR 0 9
8128: PPUSH
8129: LD_INT 1
8131: PPUSH
8132: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8136: LD_VAR 0 9
8140: PPUSH
8141: LD_VAR 0 4
8145: PUSH
8146: LD_VAR 0 12
8150: ARRAY
8151: PPUSH
8152: LD_INT 0
8154: PPUSH
8155: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8159: LD_ADDR_VAR 0 7
8163: PUSH
8164: LD_INT 1
8166: PPUSH
8167: LD_EXP 4
8171: PPUSH
8172: CALL 9167 0 2
8176: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8177: LD_VAR 0 7
8181: PPUSH
8182: LD_VAR 0 9
8186: PPUSH
8187: CALL_OW 52
// end ;
8191: GO 8019
8193: POP
8194: POP
// end ; 2 :
8195: GO 8739
8197: LD_INT 2
8199: DOUBLE
8200: EQUAL
8201: IFTRUE 8205
8203: GO 8502
8205: POP
// begin for i = 1 to num do
8206: LD_ADDR_VAR 0 6
8210: PUSH
8211: DOUBLE
8212: LD_INT 1
8214: DEC
8215: ST_TO_ADDR
8216: LD_VAR 0 2
8220: PUSH
8221: FOR_TO
8222: IFFALSE 8437
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8224: LD_ADDR_OWVAR 37
8228: PUSH
8229: LD_VAR 0 10
8233: PUSH
8234: LD_INT 1
8236: PPUSH
8237: LD_INT 2
8239: PPUSH
8240: CALL_OW 12
8244: ARRAY
8245: ST_TO_ADDR
// vc_engine := engine_combustion ;
8246: LD_ADDR_OWVAR 39
8250: PUSH
8251: LD_INT 1
8253: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8254: LD_ADDR_OWVAR 38
8258: PUSH
8259: LD_INT 1
8261: PUSH
8262: LD_INT 3
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 1
8271: PPUSH
8272: LD_INT 2
8274: PPUSH
8275: CALL_OW 12
8279: ARRAY
8280: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8281: LD_ADDR_OWVAR 40
8285: PUSH
8286: LD_VAR 0 11
8290: PUSH
8291: LD_INT 1
8293: PPUSH
8294: LD_INT 3
8296: PPUSH
8297: CALL_OW 12
8301: ARRAY
8302: ST_TO_ADDR
// veh := CreateVehicle ;
8303: LD_ADDR_VAR 0 9
8307: PUSH
8308: CALL_OW 45
8312: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8313: LD_ADDR_VAR 0 12
8317: PUSH
8318: LD_INT 1
8320: PPUSH
8321: LD_INT 2
8323: PPUSH
8324: CALL_OW 12
8328: ST_TO_ADDR
// if f = 1 then
8329: LD_VAR 0 12
8333: PUSH
8334: LD_INT 1
8336: EQUAL
8337: IFFALSE 8353
// SetDir ( veh , 3 ) else
8339: LD_VAR 0 9
8343: PPUSH
8344: LD_INT 3
8346: PPUSH
8347: CALL_OW 233
8351: GO 8365
// SetDir ( veh , 1 ) ;
8353: LD_VAR 0 9
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8365: LD_VAR 0 9
8369: PPUSH
8370: LD_VAR 0 4
8374: PUSH
8375: LD_VAR 0 12
8379: ARRAY
8380: PPUSH
8381: LD_INT 0
8383: PPUSH
8384: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8388: LD_VAR 0 9
8392: PPUSH
8393: CALL_OW 263
8397: PUSH
8398: LD_INT 1
8400: EQUAL
8401: IFFALSE 8435
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8403: LD_ADDR_VAR 0 7
8407: PUSH
8408: LD_INT 1
8410: PPUSH
8411: LD_EXP 4
8415: PPUSH
8416: CALL 9167 0 2
8420: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8421: LD_VAR 0 7
8425: PPUSH
8426: LD_VAR 0 9
8430: PPUSH
8431: CALL_OW 52
// end ; end ;
8435: GO 8221
8437: POP
8438: POP
// for i = 1 to 2 do
8439: LD_ADDR_VAR 0 6
8443: PUSH
8444: DOUBLE
8445: LD_INT 1
8447: DEC
8448: ST_TO_ADDR
8449: LD_INT 2
8451: PUSH
8452: FOR_TO
8453: IFFALSE 8498
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8455: LD_ADDR_VAR 0 7
8459: PUSH
8460: LD_INT 9
8462: PPUSH
8463: LD_EXP 4
8467: PPUSH
8468: CALL 9167 0 2
8472: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8473: LD_VAR 0 7
8477: PPUSH
8478: LD_VAR 0 4
8482: PUSH
8483: LD_VAR 0 12
8487: ARRAY
8488: PPUSH
8489: LD_INT 0
8491: PPUSH
8492: CALL_OW 49
// end ;
8496: GO 8452
8498: POP
8499: POP
// end ; 3 :
8500: GO 8739
8502: LD_INT 3
8504: DOUBLE
8505: EQUAL
8506: IFTRUE 8510
8508: GO 8738
8510: POP
// begin for i = 1 to num do
8511: LD_ADDR_VAR 0 6
8515: PUSH
8516: DOUBLE
8517: LD_INT 1
8519: DEC
8520: ST_TO_ADDR
8521: LD_VAR 0 2
8525: PUSH
8526: FOR_TO
8527: IFFALSE 8734
// begin vc_chassis := chassis [ 2 ] ;
8529: LD_ADDR_OWVAR 37
8533: PUSH
8534: LD_VAR 0 10
8538: PUSH
8539: LD_INT 2
8541: ARRAY
8542: ST_TO_ADDR
// vc_engine := engine_combustion ;
8543: LD_ADDR_OWVAR 39
8547: PUSH
8548: LD_INT 1
8550: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8551: LD_ADDR_OWVAR 38
8555: PUSH
8556: LD_INT 3
8558: PUSH
8559: LD_INT 1
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 1
8568: PPUSH
8569: LD_INT 2
8571: PPUSH
8572: CALL_OW 12
8576: ARRAY
8577: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8578: LD_ADDR_OWVAR 40
8582: PUSH
8583: LD_VAR 0 11
8587: PUSH
8588: LD_INT 3
8590: PPUSH
8591: LD_INT 6
8593: PPUSH
8594: CALL_OW 12
8598: ARRAY
8599: ST_TO_ADDR
// veh := CreateVehicle ;
8600: LD_ADDR_VAR 0 9
8604: PUSH
8605: CALL_OW 45
8609: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8610: LD_ADDR_VAR 0 12
8614: PUSH
8615: LD_INT 1
8617: PPUSH
8618: LD_INT 2
8620: PPUSH
8621: CALL_OW 12
8625: ST_TO_ADDR
// if f = 1 then
8626: LD_VAR 0 12
8630: PUSH
8631: LD_INT 1
8633: EQUAL
8634: IFFALSE 8650
// SetDir ( veh , 3 ) else
8636: LD_VAR 0 9
8640: PPUSH
8641: LD_INT 3
8643: PPUSH
8644: CALL_OW 233
8648: GO 8662
// SetDir ( veh , 1 ) ;
8650: LD_VAR 0 9
8654: PPUSH
8655: LD_INT 1
8657: PPUSH
8658: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8662: LD_VAR 0 9
8666: PPUSH
8667: LD_VAR 0 4
8671: PUSH
8672: LD_VAR 0 12
8676: ARRAY
8677: PPUSH
8678: LD_INT 0
8680: PPUSH
8681: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8685: LD_VAR 0 9
8689: PPUSH
8690: CALL_OW 263
8694: PUSH
8695: LD_INT 1
8697: EQUAL
8698: IFFALSE 8732
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8700: LD_ADDR_VAR 0 7
8704: PUSH
8705: LD_INT 1
8707: PPUSH
8708: LD_EXP 4
8712: PPUSH
8713: CALL 9167 0 2
8717: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8718: LD_VAR 0 7
8722: PPUSH
8723: LD_VAR 0 9
8727: PPUSH
8728: CALL_OW 52
// end ; end ;
8732: GO 8526
8734: POP
8735: POP
// end ; end ;
8736: GO 8739
8738: POP
// end ; end_of_file
8739: LD_VAR 0 5
8743: RET
// every 0 0$01 do
8744: GO 8746
8746: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8747: LD_INT 6
8749: PUSH
8750: LD_EXP 2
8754: PLUS
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: LD_INT 4
8761: PPUSH
8762: LD_INT 8
8764: PPUSH
8765: CALL 8770 0 4
8769: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8770: LD_INT 0
8772: PPUSH
8773: PPUSH
8774: PPUSH
8775: PPUSH
8776: PPUSH
// uc_nation = nation_nature ;
8777: LD_ADDR_OWVAR 21
8781: PUSH
8782: LD_INT 0
8784: ST_TO_ADDR
// uc_side = 0 ;
8785: LD_ADDR_OWVAR 20
8789: PUSH
8790: LD_INT 0
8792: ST_TO_ADDR
// l = 0 ;
8793: LD_ADDR_VAR 0 6
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8801: LD_ADDR_OWVAR 24
8805: PUSH
8806: LD_INT 0
8808: PPUSH
8809: LD_INT 5
8811: PPUSH
8812: CALL_OW 12
8816: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8817: LD_ADDR_OWVAR 35
8821: PUSH
8822: LD_INT 5
8824: NEG
8825: PPUSH
8826: LD_INT 5
8828: PPUSH
8829: CALL_OW 12
8833: ST_TO_ADDR
// hc_gallery =  ;
8834: LD_ADDR_OWVAR 33
8838: PUSH
8839: LD_STRING 
8841: ST_TO_ADDR
// hc_class = class_apeman ;
8842: LD_ADDR_OWVAR 28
8846: PUSH
8847: LD_INT 12
8849: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8850: LD_ADDR_OWVAR 29
8854: PUSH
8855: LD_INT 11
8857: PPUSH
8858: LD_INT 13
8860: PPUSH
8861: CALL_OW 12
8865: PUSH
8866: LD_INT 10
8868: PPUSH
8869: LD_INT 11
8871: PPUSH
8872: CALL_OW 12
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
// hc_sex = sex_male ;
8881: LD_ADDR_OWVAR 27
8885: PUSH
8886: LD_INT 1
8888: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8889: LD_ADDR_OWVAR 31
8893: PUSH
8894: LD_INT 0
8896: PPUSH
8897: LD_INT 2
8899: PPUSH
8900: CALL_OW 12
8904: PUSH
8905: LD_INT 0
8907: PUSH
8908: LD_INT 0
8910: PUSH
8911: LD_INT 0
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: ST_TO_ADDR
// apeman = CreateHuman ;
8920: LD_ADDR_VAR 0 7
8924: PUSH
8925: CALL_OW 44
8929: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8930: LD_VAR 0 7
8934: PPUSH
8935: LD_VAR 0 4
8939: PPUSH
8940: LD_INT 0
8942: PPUSH
8943: CALL_OW 49
// l = l + 1 ;
8947: LD_ADDR_VAR 0 6
8951: PUSH
8952: LD_VAR 0 6
8956: PUSH
8957: LD_INT 1
8959: PLUS
8960: ST_TO_ADDR
// end until l = num1 ;
8961: LD_VAR 0 6
8965: PUSH
8966: LD_VAR 0 1
8970: EQUAL
8971: IFFALSE 8801
// l = 0 ;
8973: LD_ADDR_VAR 0 6
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8981: LD_ADDR_OWVAR 35
8985: PUSH
8986: LD_INT 0
8988: PPUSH
8989: LD_INT 25
8991: PPUSH
8992: CALL_OW 12
8996: ST_TO_ADDR
// hc_class = class_tiger ;
8997: LD_ADDR_OWVAR 28
9001: PUSH
9002: LD_INT 14
9004: ST_TO_ADDR
// hc_sex = sex_male ;
9005: LD_ADDR_OWVAR 27
9009: PUSH
9010: LD_INT 1
9012: ST_TO_ADDR
// hc_gallery = sandnature ;
9013: LD_ADDR_OWVAR 33
9017: PUSH
9018: LD_STRING sandnature
9020: ST_TO_ADDR
// hc_face_number = 3 ;
9021: LD_ADDR_OWVAR 34
9025: PUSH
9026: LD_INT 3
9028: ST_TO_ADDR
// tiger = CreateHuman ;
9029: LD_ADDR_VAR 0 8
9033: PUSH
9034: CALL_OW 44
9038: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9039: LD_VAR 0 8
9043: PPUSH
9044: LD_VAR 0 4
9048: PPUSH
9049: LD_INT 0
9051: PPUSH
9052: CALL_OW 49
// l = l + 1 ;
9056: LD_ADDR_VAR 0 6
9060: PUSH
9061: LD_VAR 0 6
9065: PUSH
9066: LD_INT 1
9068: PLUS
9069: ST_TO_ADDR
// end until l = num2 ;
9070: LD_VAR 0 6
9074: PUSH
9075: LD_VAR 0 2
9079: EQUAL
9080: IFFALSE 8981
// l = 0 ;
9082: LD_ADDR_VAR 0 6
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9090: LD_ADDR_OWVAR 28
9094: PUSH
9095: LD_INT 18
9097: ST_TO_ADDR
// hc_gallery = sandnature ;
9098: LD_ADDR_OWVAR 33
9102: PUSH
9103: LD_STRING sandnature
9105: ST_TO_ADDR
// hc_face_number = 1 ;
9106: LD_ADDR_OWVAR 34
9110: PUSH
9111: LD_INT 1
9113: ST_TO_ADDR
// bird = CreateHuman ;
9114: LD_ADDR_VAR 0 9
9118: PUSH
9119: CALL_OW 44
9123: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9124: LD_VAR 0 9
9128: PPUSH
9129: LD_INT 0
9131: PPUSH
9132: CALL_OW 51
// l = l + 1 ;
9136: LD_ADDR_VAR 0 6
9140: PUSH
9141: LD_VAR 0 6
9145: PUSH
9146: LD_INT 1
9148: PLUS
9149: ST_TO_ADDR
// end until l = num3 ;
9150: LD_VAR 0 6
9154: PUSH
9155: LD_VAR 0 3
9159: EQUAL
9160: IFFALSE 9090
// end ;
9162: LD_VAR 0 5
9166: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9167: LD_INT 0
9169: PPUSH
9170: PPUSH
9171: PPUSH
9172: PPUSH
9173: PPUSH
9174: PPUSH
// hc_class := clas ;
9175: LD_ADDR_OWVAR 28
9179: PUSH
9180: LD_VAR 0 1
9184: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9185: LD_ADDR_VAR 0 4
9189: PUSH
9190: LD_VAR 0 2
9194: PUSH
9195: LD_INT 1
9197: NEG
9198: PPUSH
9199: LD_INT 1
9201: PPUSH
9202: CALL_OW 12
9206: PLUS
9207: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9208: LD_ADDR_VAR 0 5
9212: PUSH
9213: LD_VAR 0 2
9217: PUSH
9218: LD_INT 1
9220: NEG
9221: PPUSH
9222: LD_INT 1
9224: PPUSH
9225: CALL_OW 12
9229: PLUS
9230: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9231: LD_ADDR_VAR 0 6
9235: PUSH
9236: LD_VAR 0 2
9240: PUSH
9241: LD_INT 1
9243: NEG
9244: PPUSH
9245: LD_INT 1
9247: PPUSH
9248: CALL_OW 12
9252: PLUS
9253: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9254: LD_ADDR_VAR 0 7
9258: PUSH
9259: LD_VAR 0 2
9263: PUSH
9264: LD_INT 1
9266: NEG
9267: PPUSH
9268: LD_INT 1
9270: PPUSH
9271: CALL_OW 12
9275: PLUS
9276: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9277: LD_VAR 0 1
9281: PUSH
9282: LD_INT 1
9284: EQUAL
9285: PUSH
9286: LD_VAR 0 1
9290: PUSH
9291: LD_INT 9
9293: EQUAL
9294: OR
9295: PUSH
9296: LD_VAR 0 1
9300: PUSH
9301: LD_INT 5
9303: EQUAL
9304: OR
9305: PUSH
9306: LD_VAR 0 1
9310: PUSH
9311: LD_INT 8
9313: EQUAL
9314: OR
9315: IFFALSE 9340
// bonus := [ 2 , 0 , 0 , 0 ] ;
9317: LD_ADDR_VAR 0 8
9321: PUSH
9322: LD_INT 2
9324: PUSH
9325: LD_INT 0
9327: PUSH
9328: LD_INT 0
9330: PUSH
9331: LD_INT 0
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: ST_TO_ADDR
// if clas = 2 then
9340: LD_VAR 0 1
9344: PUSH
9345: LD_INT 2
9347: EQUAL
9348: IFFALSE 9373
// bonus := [ 0 , 2 , 0 , 0 ] ;
9350: LD_ADDR_VAR 0 8
9354: PUSH
9355: LD_INT 0
9357: PUSH
9358: LD_INT 2
9360: PUSH
9361: LD_INT 0
9363: PUSH
9364: LD_INT 0
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: ST_TO_ADDR
// if clas = 3 then
9373: LD_VAR 0 1
9377: PUSH
9378: LD_INT 3
9380: EQUAL
9381: IFFALSE 9406
// bonus := [ 0 , 0 , 2 , 0 ] ;
9383: LD_ADDR_VAR 0 8
9387: PUSH
9388: LD_INT 0
9390: PUSH
9391: LD_INT 0
9393: PUSH
9394: LD_INT 2
9396: PUSH
9397: LD_INT 0
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: ST_TO_ADDR
// if clas = 4 then
9406: LD_VAR 0 1
9410: PUSH
9411: LD_INT 4
9413: EQUAL
9414: IFFALSE 9439
// bonus := [ 0 , 0 , 0 , 2 ] ;
9416: LD_ADDR_VAR 0 8
9420: PUSH
9421: LD_INT 0
9423: PUSH
9424: LD_INT 0
9426: PUSH
9427: LD_INT 0
9429: PUSH
9430: LD_INT 2
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9439: LD_VAR 0 1
9443: PUSH
9444: LD_INT 4
9446: GREATER
9447: PUSH
9448: LD_VAR 0 1
9452: PUSH
9453: LD_INT 9
9455: NONEQUAL
9456: AND
9457: PUSH
9458: LD_VAR 0 1
9462: PUSH
9463: LD_INT 5
9465: NONEQUAL
9466: AND
9467: PUSH
9468: LD_VAR 0 1
9472: PUSH
9473: LD_INT 8
9475: NONEQUAL
9476: AND
9477: IFFALSE 9502
// bonus := [ 0 , 0 , 0 , 0 ] ;
9479: LD_ADDR_VAR 0 8
9483: PUSH
9484: LD_INT 0
9486: PUSH
9487: LD_INT 0
9489: PUSH
9490: LD_INT 0
9492: PUSH
9493: LD_INT 0
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9502: LD_ADDR_OWVAR 30
9506: PUSH
9507: LD_INT 0
9509: PPUSH
9510: LD_INT 2
9512: PPUSH
9513: CALL_OW 12
9517: PUSH
9518: LD_INT 0
9520: PPUSH
9521: LD_INT 2
9523: PPUSH
9524: CALL_OW 12
9528: PUSH
9529: LD_INT 0
9531: PPUSH
9532: LD_INT 2
9534: PPUSH
9535: CALL_OW 12
9539: PUSH
9540: LD_INT 0
9542: PPUSH
9543: LD_INT 2
9545: PPUSH
9546: CALL_OW 12
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9557: LD_ADDR_OWVAR 31
9561: PUSH
9562: LD_VAR 0 4
9566: PUSH
9567: LD_VAR 0 8
9571: PUSH
9572: LD_INT 1
9574: ARRAY
9575: PLUS
9576: PUSH
9577: LD_VAR 0 5
9581: PUSH
9582: LD_VAR 0 8
9586: PUSH
9587: LD_INT 2
9589: ARRAY
9590: PLUS
9591: PUSH
9592: LD_VAR 0 6
9596: PUSH
9597: LD_VAR 0 8
9601: PUSH
9602: LD_INT 3
9604: ARRAY
9605: PLUS
9606: PUSH
9607: LD_VAR 0 7
9611: PUSH
9612: LD_VAR 0 8
9616: PUSH
9617: LD_INT 4
9619: ARRAY
9620: PLUS
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9628: LD_ADDR_OWVAR 27
9632: PUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_INT 2
9638: PPUSH
9639: CALL_OW 12
9643: ST_TO_ADDR
// hc_gallery :=  ;
9644: LD_ADDR_OWVAR 33
9648: PUSH
9649: LD_STRING 
9651: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9652: LD_ADDR_OWVAR 29
9656: PUSH
9657: LD_INT 8
9659: PPUSH
9660: LD_INT 12
9662: PPUSH
9663: CALL_OW 12
9667: PUSH
9668: LD_INT 9
9670: PPUSH
9671: LD_INT 11
9673: PPUSH
9674: CALL_OW 12
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: ST_TO_ADDR
// hc_name :=  ;
9683: LD_ADDR_OWVAR 26
9687: PUSH
9688: LD_STRING 
9690: ST_TO_ADDR
// result := CreateHuman ;
9691: LD_ADDR_VAR 0 3
9695: PUSH
9696: CALL_OW 44
9700: ST_TO_ADDR
// end ;
9701: LD_VAR 0 3
9705: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9706: LD_INT 0
9708: PPUSH
9709: PPUSH
// vc_chassis := chassis ;
9710: LD_ADDR_OWVAR 37
9714: PUSH
9715: LD_VAR 0 1
9719: ST_TO_ADDR
// vc_engine := engine ;
9720: LD_ADDR_OWVAR 39
9724: PUSH
9725: LD_VAR 0 2
9729: ST_TO_ADDR
// vc_weapon := weapon ;
9730: LD_ADDR_OWVAR 40
9734: PUSH
9735: LD_VAR 0 3
9739: ST_TO_ADDR
// vc_control := control_manual ;
9740: LD_ADDR_OWVAR 38
9744: PUSH
9745: LD_INT 1
9747: ST_TO_ADDR
// veh := CreateVehicle ;
9748: LD_ADDR_VAR 0 8
9752: PUSH
9753: CALL_OW 45
9757: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9758: LD_VAR 0 8
9762: PPUSH
9763: LD_VAR 0 5
9767: PPUSH
9768: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9772: LD_VAR 0 8
9776: PPUSH
9777: LD_VAR 0 4
9781: PPUSH
9782: LD_INT 0
9784: PPUSH
9785: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9789: LD_INT 3
9791: PPUSH
9792: LD_VAR 0 6
9796: PPUSH
9797: CALL 9167 0 2
9801: PPUSH
9802: LD_VAR 0 8
9806: PPUSH
9807: CALL_OW 52
// end ;
9811: LD_VAR 0 7
9815: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9816: LD_INT 0
9818: PPUSH
9819: PPUSH
9820: PPUSH
9821: PPUSH
9822: PPUSH
9823: PPUSH
9824: PPUSH
// uc_side := side ;
9825: LD_ADDR_OWVAR 20
9829: PUSH
9830: LD_VAR 0 1
9834: ST_TO_ADDR
// uc_nation := nation_arabian ;
9835: LD_ADDR_OWVAR 21
9839: PUSH
9840: LD_INT 2
9842: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9843: LD_ADDR_VAR 0 10
9847: PUSH
9848: LD_INT 14
9850: PUSH
9851: EMPTY
9852: LIST
9853: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9854: LD_ADDR_VAR 0 11
9858: PUSH
9859: LD_INT 24
9861: PUSH
9862: LD_INT 25
9864: PUSH
9865: LD_INT 27
9867: PUSH
9868: LD_INT 28
9870: PUSH
9871: LD_INT 29
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: ST_TO_ADDR
// case typ of 1 :
9881: LD_VAR 0 3
9885: PUSH
9886: LD_INT 1
9888: DOUBLE
9889: EQUAL
9890: IFTRUE 9894
9892: GO 10066
9894: POP
// begin for i = 1 to num do
9895: LD_ADDR_VAR 0 6
9899: PUSH
9900: DOUBLE
9901: LD_INT 1
9903: DEC
9904: ST_TO_ADDR
9905: LD_VAR 0 2
9909: PUSH
9910: FOR_TO
9911: IFFALSE 10062
// begin vc_chassis := chassis [ 1 ] ;
9913: LD_ADDR_OWVAR 37
9917: PUSH
9918: LD_VAR 0 10
9922: PUSH
9923: LD_INT 1
9925: ARRAY
9926: ST_TO_ADDR
// vc_engine := engine_combustion ;
9927: LD_ADDR_OWVAR 39
9931: PUSH
9932: LD_INT 1
9934: ST_TO_ADDR
// vc_control := control_manual ;
9935: LD_ADDR_OWVAR 38
9939: PUSH
9940: LD_INT 1
9942: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
9943: LD_ADDR_OWVAR 40
9947: PUSH
9948: LD_VAR 0 11
9952: PUSH
9953: LD_INT 1
9955: PPUSH
9956: LD_INT 3
9958: PPUSH
9959: CALL_OW 12
9963: ARRAY
9964: ST_TO_ADDR
// veh := CreateVehicle ;
9965: LD_ADDR_VAR 0 9
9969: PUSH
9970: CALL_OW 45
9974: ST_TO_ADDR
// if area = north_spawn then
9975: LD_VAR 0 4
9979: PUSH
9980: LD_INT 6
9982: EQUAL
9983: IFFALSE 9999
// SetDir ( veh , 3 ) else
9985: LD_VAR 0 9
9989: PPUSH
9990: LD_INT 3
9992: PPUSH
9993: CALL_OW 233
9997: GO 10011
// SetDir ( veh , 1 ) ;
9999: LD_VAR 0 9
10003: PPUSH
10004: LD_INT 1
10006: PPUSH
10007: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10011: LD_VAR 0 9
10015: PPUSH
10016: LD_VAR 0 4
10020: PPUSH
10021: LD_INT 0
10023: PPUSH
10024: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10028: LD_ADDR_VAR 0 7
10032: PUSH
10033: LD_INT 1
10035: PPUSH
10036: LD_EXP 4
10040: PPUSH
10041: CALL 9167 0 2
10045: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10046: LD_VAR 0 7
10050: PPUSH
10051: LD_VAR 0 9
10055: PPUSH
10056: CALL_OW 52
// end ;
10060: GO 9910
10062: POP
10063: POP
// end ; 2 :
10064: GO 10325
10066: LD_INT 2
10068: DOUBLE
10069: EQUAL
10070: IFTRUE 10074
10072: GO 10324
10074: POP
// begin for i = 1 to num do
10075: LD_ADDR_VAR 0 6
10079: PUSH
10080: DOUBLE
10081: LD_INT 1
10083: DEC
10084: ST_TO_ADDR
10085: LD_VAR 0 2
10089: PUSH
10090: FOR_TO
10091: IFFALSE 10242
// begin vc_chassis := chassis [ 1 ] ;
10093: LD_ADDR_OWVAR 37
10097: PUSH
10098: LD_VAR 0 10
10102: PUSH
10103: LD_INT 1
10105: ARRAY
10106: ST_TO_ADDR
// vc_engine := engine_combustion ;
10107: LD_ADDR_OWVAR 39
10111: PUSH
10112: LD_INT 1
10114: ST_TO_ADDR
// vc_control := control_manual ;
10115: LD_ADDR_OWVAR 38
10119: PUSH
10120: LD_INT 1
10122: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10123: LD_ADDR_OWVAR 40
10127: PUSH
10128: LD_VAR 0 11
10132: PUSH
10133: LD_INT 3
10135: PPUSH
10136: LD_INT 5
10138: PPUSH
10139: CALL_OW 12
10143: ARRAY
10144: ST_TO_ADDR
// veh := CreateVehicle ;
10145: LD_ADDR_VAR 0 9
10149: PUSH
10150: CALL_OW 45
10154: ST_TO_ADDR
// if area = north_spawn then
10155: LD_VAR 0 4
10159: PUSH
10160: LD_INT 6
10162: EQUAL
10163: IFFALSE 10179
// SetDir ( veh , 3 ) else
10165: LD_VAR 0 9
10169: PPUSH
10170: LD_INT 3
10172: PPUSH
10173: CALL_OW 233
10177: GO 10191
// SetDir ( veh , 1 ) ;
10179: LD_VAR 0 9
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10191: LD_VAR 0 9
10195: PPUSH
10196: LD_VAR 0 4
10200: PPUSH
10201: LD_INT 0
10203: PPUSH
10204: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10208: LD_ADDR_VAR 0 7
10212: PUSH
10213: LD_INT 1
10215: PPUSH
10216: LD_EXP 4
10220: PPUSH
10221: CALL 9167 0 2
10225: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10226: LD_VAR 0 7
10230: PPUSH
10231: LD_VAR 0 9
10235: PPUSH
10236: CALL_OW 52
// end ;
10240: GO 10090
10242: POP
10243: POP
// for i = 1 to 4 do
10244: LD_ADDR_VAR 0 6
10248: PUSH
10249: DOUBLE
10250: LD_INT 1
10252: DEC
10253: ST_TO_ADDR
10254: LD_INT 4
10256: PUSH
10257: FOR_TO
10258: IFFALSE 10320
// begin uc_nation := 0 ;
10260: LD_ADDR_OWVAR 21
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// hc_class := 17 ;
10268: LD_ADDR_OWVAR 28
10272: PUSH
10273: LD_INT 17
10275: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10276: LD_ADDR_OWVAR 29
10280: PUSH
10281: LD_INT 11
10283: PUSH
10284: LD_INT 13
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: ST_TO_ADDR
// un := CreateHuman ;
10291: LD_ADDR_VAR 0 7
10295: PUSH
10296: CALL_OW 44
10300: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10301: LD_VAR 0 7
10305: PPUSH
10306: LD_VAR 0 4
10310: PPUSH
10311: LD_INT 0
10313: PPUSH
10314: CALL_OW 49
// end ;
10318: GO 10257
10320: POP
10321: POP
// end ; end ;
10322: GO 10325
10324: POP
// end ;
10325: LD_VAR 0 5
10329: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10330: LD_INT 0
10332: PPUSH
10333: PPUSH
10334: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10335: LD_ADDR_VAR 0 5
10339: PUSH
10340: LD_INT 22
10342: PUSH
10343: LD_VAR 0 3
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PPUSH
10352: CALL_OW 69
10356: PPUSH
10357: LD_VAR 0 1
10361: PPUSH
10362: LD_VAR 0 2
10366: PPUSH
10367: CALL_OW 73
10371: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10372: LD_ADDR_VAR 0 6
10376: PUSH
10377: LD_VAR 0 5
10381: PPUSH
10382: LD_VAR 0 1
10386: PPUSH
10387: LD_VAR 0 2
10391: PPUSH
10392: CALL_OW 297
10396: ST_TO_ADDR
// result := dist ;
10397: LD_ADDR_VAR 0 4
10401: PUSH
10402: LD_VAR 0 6
10406: ST_TO_ADDR
// end ; end_of_file
10407: LD_VAR 0 4
10411: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10412: LD_VAR 0 1
10416: PUSH
10417: LD_INT 1
10419: EQUAL
10420: IFFALSE 10429
// YouLost ( jota-lose ) ;
10422: LD_STRING jota-lose
10424: PPUSH
10425: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10429: LD_EXP 1
10433: PUSH
10434: LD_INT 2
10436: EQUAL
10437: PUSH
10438: LD_EXP 8
10442: PUSH
10443: LD_INT 0
10445: EQUAL
10446: AND
10447: IFFALSE 10762
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 255
10458: PUSH
10459: LD_INT 1
10461: EQUAL
10462: PUSH
10463: LD_VAR 0 1
10467: PUSH
10468: LD_INT 11
10470: PPUSH
10471: LD_INT 21
10473: PUSH
10474: LD_INT 3
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PPUSH
10481: CALL_OW 70
10485: PUSH
10486: LD_INT 2
10488: PUSH
10489: LD_INT 30
10491: PUSH
10492: LD_INT 6
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 30
10501: PUSH
10502: LD_INT 10
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 30
10511: PUSH
10512: LD_INT 7
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 30
10521: PUSH
10522: LD_INT 8
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: PUSH
10545: EMPTY
10546: LIST
10547: PPUSH
10548: CALL_OW 69
10552: DIFF
10553: IN
10554: AND
10555: IFFALSE 10641
// begin ai_build := ai_build ^ GetBType ( un ) ;
10557: LD_ADDR_EXP 10
10561: PUSH
10562: LD_EXP 10
10566: PUSH
10567: LD_VAR 0 1
10571: PPUSH
10572: CALL_OW 266
10576: ADD
10577: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10578: LD_ADDR_EXP 10
10582: PUSH
10583: LD_EXP 10
10587: PUSH
10588: LD_VAR 0 1
10592: PPUSH
10593: CALL_OW 250
10597: ADD
10598: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10599: LD_ADDR_EXP 10
10603: PUSH
10604: LD_EXP 10
10608: PUSH
10609: LD_VAR 0 1
10613: PPUSH
10614: CALL_OW 251
10618: ADD
10619: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10620: LD_ADDR_EXP 10
10624: PUSH
10625: LD_EXP 10
10629: PUSH
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 254
10639: ADD
10640: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10641: LD_VAR 0 1
10645: PPUSH
10646: CALL_OW 255
10650: PUSH
10651: LD_INT 1
10653: EQUAL
10654: PUSH
10655: LD_VAR 0 1
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 2
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: IN
10675: AND
10676: IFFALSE 10762
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10678: LD_ADDR_EXP 11
10682: PUSH
10683: LD_EXP 11
10687: PUSH
10688: LD_VAR 0 1
10692: PPUSH
10693: CALL_OW 265
10697: ADD
10698: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10699: LD_ADDR_EXP 11
10703: PUSH
10704: LD_EXP 11
10708: PUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 262
10718: ADD
10719: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10720: LD_ADDR_EXP 11
10724: PUSH
10725: LD_EXP 11
10729: PUSH
10730: LD_VAR 0 1
10734: PPUSH
10735: CALL_OW 263
10739: ADD
10740: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10741: LD_ADDR_EXP 11
10745: PUSH
10746: LD_EXP 11
10750: PUSH
10751: LD_VAR 0 1
10755: PPUSH
10756: CALL_OW 264
10760: ADD
10761: ST_TO_ADDR
// end ; end ; end ;
10762: PPOPN 1
10764: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10765: LD_EXP 1
10769: PUSH
10770: LD_INT 1
10772: EQUAL
10773: PUSH
10774: LD_INT 22
10776: PUSH
10777: LD_INT 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 21
10786: PUSH
10787: LD_INT 1
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PPUSH
10798: CALL_OW 69
10802: PUSH
10803: LD_INT 0
10805: EQUAL
10806: AND
10807: IFFALSE 10819
10809: GO 10811
10811: DISABLE
// YouLost ( peo-lose ) ;
10812: LD_STRING peo-lose
10814: PPUSH
10815: CALL_OW 104
10819: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10820: LD_EXP 1
10824: PUSH
10825: LD_INT 2
10827: EQUAL
10828: PUSH
10829: LD_INT 22
10831: PUSH
10832: LD_INT 3
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 21
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: PUSH
10858: LD_INT 0
10860: EQUAL
10861: AND
10862: IFFALSE 10874
10864: GO 10866
10866: DISABLE
// YouLost ( peo-lose ) ;
10867: LD_STRING peo-lose
10869: PPUSH
10870: CALL_OW 104
10874: END
// every 0 0$03 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = need_to_win do var i ;
10875: LD_INT 1
10877: PPUSH
10878: CALL_OW 274
10882: PPUSH
10883: LD_INT 3
10885: PPUSH
10886: CALL_OW 275
10890: PUSH
10891: LD_EXP 5
10895: EQUAL
10896: IFFALSE 10982
10898: GO 10900
10900: DISABLE
10901: LD_INT 0
10903: PPUSH
// begin if GetSide ( jota_base ) = your_side then
10904: LD_INT 1
10906: PPUSH
10907: CALL_OW 255
10911: PUSH
10912: LD_OWVAR 2
10916: EQUAL
10917: IFFALSE 10960
// begin for i = 1 to 3 do
10919: LD_ADDR_VAR 0 1
10923: PUSH
10924: DOUBLE
10925: LD_INT 1
10927: DEC
10928: ST_TO_ADDR
10929: LD_INT 3
10931: PUSH
10932: FOR_TO
10933: IFFALSE 10947
// AddMedal ( med , 1 ) ;
10935: LD_STRING med
10937: PPUSH
10938: LD_INT 1
10940: PPUSH
10941: CALL_OW 101
10945: GO 10932
10947: POP
10948: POP
// GiveMedals ( MAIN ) ;
10949: LD_STRING MAIN
10951: PPUSH
10952: CALL_OW 102
// YouWin ;
10956: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
10960: LD_INT 1
10962: PPUSH
10963: CALL_OW 255
10967: PUSH
10968: LD_OWVAR 2
10972: NONEQUAL
10973: IFFALSE 10982
// YouLost ( source ) ;
10975: LD_STRING source
10977: PPUSH
10978: CALL_OW 104
// end ; end_of_file
10982: PPOPN 1
10984: END
// every 2 2$05 + 0 0$11 do
10985: GO 10987
10987: DISABLE
// begin enable ;
10988: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10989: LD_INT 1
10991: PPUSH
10992: LD_INT 5
10994: PPUSH
10995: CALL_OW 12
10999: PPUSH
11000: LD_INT 7
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11010: LD_INT 350
11012: PPUSH
11013: LD_INT 1295
11015: PPUSH
11016: CALL_OW 12
11020: PPUSH
11021: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11025: LD_INT 1
11027: PPUSH
11028: LD_INT 5
11030: PPUSH
11031: CALL_OW 12
11035: PPUSH
11036: LD_INT 1
11038: PPUSH
11039: CALL_OW 57
// end ;
11043: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11044: LD_EXP 1
11048: PUSH
11049: LD_INT 2
11051: EQUAL
11052: PUSH
11053: LD_EXP 8
11057: PUSH
11058: LD_INT 0
11060: EQUAL
11061: AND
11062: IFFALSE 11152
11064: GO 11066
11066: DISABLE
// begin enable ;
11067: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11068: LD_INT 1
11070: PPUSH
11071: LD_INT 5
11073: PPUSH
11074: CALL_OW 12
11078: PPUSH
11079: LD_INT 7
11081: PPUSH
11082: LD_INT 1
11084: PPUSH
11085: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11089: LD_INT 350
11091: PPUSH
11092: LD_INT 1750
11094: PPUSH
11095: CALL_OW 12
11099: PPUSH
11100: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11104: LD_EXP 6
11108: PUSH
11109: LD_INT 73500
11111: PUSH
11112: LD_INT 63000
11114: PUSH
11115: LD_INT 52500
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: LD_EXP 2
11127: ARRAY
11128: LESSEQUAL
11129: IFFALSE 11152
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11131: LD_INT 1
11133: PPUSH
11134: LD_INT 5
11136: PPUSH
11137: CALL_OW 12
11141: PPUSH
11142: LD_INT 12
11144: PPUSH
11145: LD_INT 1
11147: PPUSH
11148: CALL_OW 55
// end ;
11152: END
