// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 1 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: IFFALSE 10654
// YouLost ( jota-lose ) ;
10647: LD_STRING jota-lose
10649: PPUSH
10650: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10654: LD_EXP 1
10658: PUSH
10659: LD_INT 2
10661: EQUAL
10662: PUSH
10663: LD_EXP 8
10667: PUSH
10668: LD_INT 0
10670: EQUAL
10671: AND
10672: IFFALSE 10987
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 255
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: LD_INT 11
10695: PPUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 70
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 10
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 30
10746: PUSH
10747: LD_INT 8
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: DIFF
10778: IN
10779: AND
10780: IFFALSE 10866
// begin ai_build := ai_build ^ GetBType ( un ) ;
10782: LD_ADDR_EXP 10
10786: PUSH
10787: LD_EXP 10
10791: PUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 266
10801: ADD
10802: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10803: LD_ADDR_EXP 10
10807: PUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 250
10822: ADD
10823: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10824: LD_ADDR_EXP 10
10828: PUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 251
10843: ADD
10844: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10845: LD_ADDR_EXP 10
10849: PUSH
10850: LD_EXP 10
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 254
10864: ADD
10865: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 255
10875: PUSH
10876: LD_INT 1
10878: EQUAL
10879: PUSH
10880: LD_VAR 0 1
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: IN
10900: AND
10901: IFFALSE 10987
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10903: LD_ADDR_EXP 11
10907: PUSH
10908: LD_EXP 11
10912: PUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 265
10922: ADD
10923: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10924: LD_ADDR_EXP 11
10928: PUSH
10929: LD_EXP 11
10933: PUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 262
10943: ADD
10944: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10945: LD_ADDR_EXP 11
10949: PUSH
10950: LD_EXP 11
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: CALL_OW 263
10964: ADD
10965: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10966: LD_ADDR_EXP 11
10970: PUSH
10971: LD_EXP 11
10975: PUSH
10976: LD_VAR 0 1
10980: PPUSH
10981: CALL_OW 264
10985: ADD
10986: ST_TO_ADDR
// end ; end ; end ;
10987: PPOPN 1
10989: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10990: LD_EXP 1
10994: PUSH
10995: LD_INT 1
10997: EQUAL
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PUSH
11028: LD_INT 0
11030: EQUAL
11031: AND
11032: IFFALSE 11044
11034: GO 11036
11036: DISABLE
// YouLost ( peo-lose ) ;
11037: LD_STRING peo-lose
11039: PPUSH
11040: CALL_OW 104
11044: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11045: LD_EXP 1
11049: PUSH
11050: LD_INT 2
11052: EQUAL
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: PUSH
11083: LD_INT 0
11085: EQUAL
11086: AND
11087: IFFALSE 11099
11089: GO 11091
11091: DISABLE
// YouLost ( peo-lose ) ;
11092: LD_STRING peo-lose
11094: PPUSH
11095: CALL_OW 104
11099: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
11100: LD_OWVAR 2
11104: PPUSH
11105: CALL 10510 0 1
11109: PUSH
11110: LD_EXP 5
11114: GREATEREQUAL
11115: IFFALSE 11201
11117: GO 11119
11119: DISABLE
11120: LD_INT 0
11122: PPUSH
// begin if GetSide ( jota_base ) = your_side then
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 255
11130: PUSH
11131: LD_OWVAR 2
11135: EQUAL
11136: IFFALSE 11179
// begin for i = 1 to 3 do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: DOUBLE
11144: LD_INT 1
11146: DEC
11147: ST_TO_ADDR
11148: LD_INT 3
11150: PUSH
11151: FOR_TO
11152: IFFALSE 11166
// AddMedal ( med , 1 ) ;
11154: LD_STRING med
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 101
11164: GO 11151
11166: POP
11167: POP
// GiveMedals ( MAIN ) ;
11168: LD_STRING MAIN
11170: PPUSH
11171: CALL_OW 102
// YouWin ;
11175: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: LD_OWVAR 2
11191: NONEQUAL
11192: IFFALSE 11201
// YouLost ( source ) ;
11194: LD_STRING source
11196: PPUSH
11197: CALL_OW 104
// end ; end_of_file
11201: PPOPN 1
11203: END
// every 2 2$05 + 0 0$11 do
11204: GO 11206
11206: DISABLE
// begin enable ;
11207: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11208: LD_INT 1
11210: PPUSH
11211: LD_INT 5
11213: PPUSH
11214: CALL_OW 12
11218: PPUSH
11219: LD_INT 7
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11229: LD_INT 350
11231: PPUSH
11232: LD_INT 1295
11234: PPUSH
11235: CALL_OW 12
11239: PPUSH
11240: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 5
11249: PPUSH
11250: CALL_OW 12
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 57
// end ;
11262: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11263: LD_EXP 1
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: PUSH
11272: LD_EXP 8
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: AND
11281: IFFALSE 11371
11283: GO 11285
11285: DISABLE
// begin enable ;
11286: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 7
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11308: LD_INT 350
11310: PPUSH
11311: LD_INT 1750
11313: PPUSH
11314: CALL_OW 12
11318: PPUSH
11319: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11323: LD_EXP 6
11327: PUSH
11328: LD_INT 73500
11330: PUSH
11331: LD_INT 63000
11333: PUSH
11334: LD_INT 52500
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_EXP 2
11346: ARRAY
11347: LESSEQUAL
11348: IFFALSE 11371
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 5
11355: PPUSH
11356: CALL_OW 12
11360: PPUSH
11361: LD_INT 12
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 55
// end ; end_of_file
11371: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: CALL 24298 0 3
// end ;
11391: PPOPN 3
11393: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL 24306 0 1
// end ; end_of_file
11403: PPOPN 1
11405: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11406: LD_INT 0
11408: PPUSH
// ar_crane := 88 ;
11409: LD_ADDR_EXP 27
11413: PUSH
11414: LD_INT 88
11416: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11417: LD_ADDR_EXP 22
11421: PUSH
11422: LD_INT 89
11424: ST_TO_ADDR
// us_hack := 99 ;
11425: LD_ADDR_EXP 23
11429: PUSH
11430: LD_INT 99
11432: ST_TO_ADDR
// us_artillery := 97 ;
11433: LD_ADDR_EXP 24
11437: PUSH
11438: LD_INT 97
11440: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11441: LD_ADDR_EXP 25
11445: PUSH
11446: LD_INT 91
11448: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11449: LD_ADDR_EXP 26
11453: PUSH
11454: LD_INT 92
11456: ST_TO_ADDR
// ru_radar := 98 ;
11457: LD_ADDR_EXP 21
11461: PUSH
11462: LD_INT 98
11464: ST_TO_ADDR
// tech_Artillery := 80 ;
11465: LD_ADDR_EXP 28
11469: PUSH
11470: LD_INT 80
11472: ST_TO_ADDR
// tech_RadMat := 81 ;
11473: LD_ADDR_EXP 29
11477: PUSH
11478: LD_INT 81
11480: ST_TO_ADDR
// tech_BasicTools := 82 ;
11481: LD_ADDR_EXP 30
11485: PUSH
11486: LD_INT 82
11488: ST_TO_ADDR
// tech_Cargo := 83 ;
11489: LD_ADDR_EXP 31
11493: PUSH
11494: LD_INT 83
11496: ST_TO_ADDR
// tech_Track := 84 ;
11497: LD_ADDR_EXP 32
11501: PUSH
11502: LD_INT 84
11504: ST_TO_ADDR
// tech_Crane := 85 ;
11505: LD_ADDR_EXP 33
11509: PUSH
11510: LD_INT 85
11512: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11513: LD_ADDR_EXP 34
11517: PUSH
11518: LD_INT 86
11520: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11521: LD_ADDR_EXP 35
11525: PUSH
11526: LD_INT 87
11528: ST_TO_ADDR
// end ;
11529: LD_VAR 0 1
11533: RET
// every 1 do
11534: GO 11536
11536: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11537: CALL 11406 0 0
11541: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11542: LD_VAR 0 2
11546: PUSH
11547: LD_INT 100
11549: EQUAL
11550: IFFALSE 12499
// begin if not StreamModeActive then
11552: LD_EXP 36
11556: NOT
11557: IFFALSE 11567
// StreamModeActive := true ;
11559: LD_ADDR_EXP 36
11563: PUSH
11564: LD_INT 1
11566: ST_TO_ADDR
// if p3 = 0 then
11567: LD_VAR 0 3
11571: PUSH
11572: LD_INT 0
11574: EQUAL
11575: IFFALSE 11581
// InitStreamMode ;
11577: CALL 12732 0 0
// if p3 = 1 then
11581: LD_VAR 0 3
11585: PUSH
11586: LD_INT 1
11588: EQUAL
11589: IFFALSE 11599
// sRocket := true ;
11591: LD_ADDR_EXP 41
11595: PUSH
11596: LD_INT 1
11598: ST_TO_ADDR
// if p3 = 2 then
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 2
11606: EQUAL
11607: IFFALSE 11617
// sSpeed := true ;
11609: LD_ADDR_EXP 40
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// if p3 = 3 then
11617: LD_VAR 0 3
11621: PUSH
11622: LD_INT 3
11624: EQUAL
11625: IFFALSE 11635
// sEngine := true ;
11627: LD_ADDR_EXP 42
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// if p3 = 4 then
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 4
11642: EQUAL
11643: IFFALSE 11653
// sSpec := true ;
11645: LD_ADDR_EXP 39
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// if p3 = 5 then
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 5
11660: EQUAL
11661: IFFALSE 11671
// sLevel := true ;
11663: LD_ADDR_EXP 43
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// if p3 = 6 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 6
11678: EQUAL
11679: IFFALSE 11689
// sArmoury := true ;
11681: LD_ADDR_EXP 44
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// if p3 = 7 then
11689: LD_VAR 0 3
11693: PUSH
11694: LD_INT 7
11696: EQUAL
11697: IFFALSE 11707
// sRadar := true ;
11699: LD_ADDR_EXP 45
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// if p3 = 8 then
11707: LD_VAR 0 3
11711: PUSH
11712: LD_INT 8
11714: EQUAL
11715: IFFALSE 11725
// sBunker := true ;
11717: LD_ADDR_EXP 46
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if p3 = 9 then
11725: LD_VAR 0 3
11729: PUSH
11730: LD_INT 9
11732: EQUAL
11733: IFFALSE 11743
// sHack := true ;
11735: LD_ADDR_EXP 47
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// if p3 = 10 then
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 10
11750: EQUAL
11751: IFFALSE 11761
// sFire := true ;
11753: LD_ADDR_EXP 48
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// if p3 = 11 then
11761: LD_VAR 0 3
11765: PUSH
11766: LD_INT 11
11768: EQUAL
11769: IFFALSE 11779
// sRefresh := true ;
11771: LD_ADDR_EXP 49
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if p3 = 12 then
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 12
11786: EQUAL
11787: IFFALSE 11797
// sExp := true ;
11789: LD_ADDR_EXP 50
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// if p3 = 13 then
11797: LD_VAR 0 3
11801: PUSH
11802: LD_INT 13
11804: EQUAL
11805: IFFALSE 11815
// sDepot := true ;
11807: LD_ADDR_EXP 51
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// if p3 = 14 then
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 14
11822: EQUAL
11823: IFFALSE 11833
// sFlag := true ;
11825: LD_ADDR_EXP 52
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// if p3 = 15 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 15
11840: EQUAL
11841: IFFALSE 11851
// sKamikadze := true ;
11843: LD_ADDR_EXP 60
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// if p3 = 16 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 16
11858: EQUAL
11859: IFFALSE 11869
// sTroll := true ;
11861: LD_ADDR_EXP 61
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// if p3 = 17 then
11869: LD_VAR 0 3
11873: PUSH
11874: LD_INT 17
11876: EQUAL
11877: IFFALSE 11887
// sSlow := true ;
11879: LD_ADDR_EXP 62
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// if p3 = 18 then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_INT 18
11894: EQUAL
11895: IFFALSE 11905
// sLack := true ;
11897: LD_ADDR_EXP 63
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// if p3 = 19 then
11905: LD_VAR 0 3
11909: PUSH
11910: LD_INT 19
11912: EQUAL
11913: IFFALSE 11923
// sTank := true ;
11915: LD_ADDR_EXP 65
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// if p3 = 20 then
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 20
11930: EQUAL
11931: IFFALSE 11941
// sRemote := true ;
11933: LD_ADDR_EXP 66
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if p3 = 21 then
11941: LD_VAR 0 3
11945: PUSH
11946: LD_INT 21
11948: EQUAL
11949: IFFALSE 11959
// sPowell := true ;
11951: LD_ADDR_EXP 67
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// if p3 = 22 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 22
11966: EQUAL
11967: IFFALSE 11977
// sTeleport := true ;
11969: LD_ADDR_EXP 70
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// if p3 = 23 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_INT 23
11984: EQUAL
11985: IFFALSE 11995
// sOilTower := true ;
11987: LD_ADDR_EXP 72
11991: PUSH
11992: LD_INT 1
11994: ST_TO_ADDR
// if p3 = 24 then
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 24
12002: EQUAL
12003: IFFALSE 12013
// sShovel := true ;
12005: LD_ADDR_EXP 73
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// if p3 = 25 then
12013: LD_VAR 0 3
12017: PUSH
12018: LD_INT 25
12020: EQUAL
12021: IFFALSE 12031
// sSheik := true ;
12023: LD_ADDR_EXP 74
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// if p3 = 26 then
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 26
12038: EQUAL
12039: IFFALSE 12049
// sEarthquake := true ;
12041: LD_ADDR_EXP 76
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// if p3 = 27 then
12049: LD_VAR 0 3
12053: PUSH
12054: LD_INT 27
12056: EQUAL
12057: IFFALSE 12067
// sAI := true ;
12059: LD_ADDR_EXP 77
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// if p3 = 28 then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_INT 28
12074: EQUAL
12075: IFFALSE 12085
// sCargo := true ;
12077: LD_ADDR_EXP 80
12081: PUSH
12082: LD_INT 1
12084: ST_TO_ADDR
// if p3 = 29 then
12085: LD_VAR 0 3
12089: PUSH
12090: LD_INT 29
12092: EQUAL
12093: IFFALSE 12103
// sDLaser := true ;
12095: LD_ADDR_EXP 81
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// if p3 = 30 then
12103: LD_VAR 0 3
12107: PUSH
12108: LD_INT 30
12110: EQUAL
12111: IFFALSE 12121
// sExchange := true ;
12113: LD_ADDR_EXP 82
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// if p3 = 31 then
12121: LD_VAR 0 3
12125: PUSH
12126: LD_INT 31
12128: EQUAL
12129: IFFALSE 12139
// sFac := true ;
12131: LD_ADDR_EXP 83
12135: PUSH
12136: LD_INT 1
12138: ST_TO_ADDR
// if p3 = 32 then
12139: LD_VAR 0 3
12143: PUSH
12144: LD_INT 32
12146: EQUAL
12147: IFFALSE 12157
// sPower := true ;
12149: LD_ADDR_EXP 84
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// if p3 = 33 then
12157: LD_VAR 0 3
12161: PUSH
12162: LD_INT 33
12164: EQUAL
12165: IFFALSE 12175
// sRandom := true ;
12167: LD_ADDR_EXP 85
12171: PUSH
12172: LD_INT 1
12174: ST_TO_ADDR
// if p3 = 34 then
12175: LD_VAR 0 3
12179: PUSH
12180: LD_INT 34
12182: EQUAL
12183: IFFALSE 12193
// sShield := true ;
12185: LD_ADDR_EXP 86
12189: PUSH
12190: LD_INT 1
12192: ST_TO_ADDR
// if p3 = 35 then
12193: LD_VAR 0 3
12197: PUSH
12198: LD_INT 35
12200: EQUAL
12201: IFFALSE 12211
// sTime := true ;
12203: LD_ADDR_EXP 87
12207: PUSH
12208: LD_INT 1
12210: ST_TO_ADDR
// if p3 = 36 then
12211: LD_VAR 0 3
12215: PUSH
12216: LD_INT 36
12218: EQUAL
12219: IFFALSE 12229
// sTools := true ;
12221: LD_ADDR_EXP 88
12225: PUSH
12226: LD_INT 1
12228: ST_TO_ADDR
// if p3 = 101 then
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 101
12236: EQUAL
12237: IFFALSE 12247
// sSold := true ;
12239: LD_ADDR_EXP 53
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// if p3 = 102 then
12247: LD_VAR 0 3
12251: PUSH
12252: LD_INT 102
12254: EQUAL
12255: IFFALSE 12265
// sDiff := true ;
12257: LD_ADDR_EXP 54
12261: PUSH
12262: LD_INT 1
12264: ST_TO_ADDR
// if p3 = 103 then
12265: LD_VAR 0 3
12269: PUSH
12270: LD_INT 103
12272: EQUAL
12273: IFFALSE 12283
// sFog := true ;
12275: LD_ADDR_EXP 57
12279: PUSH
12280: LD_INT 1
12282: ST_TO_ADDR
// if p3 = 104 then
12283: LD_VAR 0 3
12287: PUSH
12288: LD_INT 104
12290: EQUAL
12291: IFFALSE 12301
// sReset := true ;
12293: LD_ADDR_EXP 58
12297: PUSH
12298: LD_INT 1
12300: ST_TO_ADDR
// if p3 = 105 then
12301: LD_VAR 0 3
12305: PUSH
12306: LD_INT 105
12308: EQUAL
12309: IFFALSE 12319
// sSun := true ;
12311: LD_ADDR_EXP 59
12315: PUSH
12316: LD_INT 1
12318: ST_TO_ADDR
// if p3 = 106 then
12319: LD_VAR 0 3
12323: PUSH
12324: LD_INT 106
12326: EQUAL
12327: IFFALSE 12337
// sTiger := true ;
12329: LD_ADDR_EXP 55
12333: PUSH
12334: LD_INT 1
12336: ST_TO_ADDR
// if p3 = 107 then
12337: LD_VAR 0 3
12341: PUSH
12342: LD_INT 107
12344: EQUAL
12345: IFFALSE 12355
// sBomb := true ;
12347: LD_ADDR_EXP 56
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// if p3 = 108 then
12355: LD_VAR 0 3
12359: PUSH
12360: LD_INT 108
12362: EQUAL
12363: IFFALSE 12373
// sWound := true ;
12365: LD_ADDR_EXP 64
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// if p3 = 109 then
12373: LD_VAR 0 3
12377: PUSH
12378: LD_INT 109
12380: EQUAL
12381: IFFALSE 12391
// sBetray := true ;
12383: LD_ADDR_EXP 68
12387: PUSH
12388: LD_INT 1
12390: ST_TO_ADDR
// if p3 = 110 then
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 110
12398: EQUAL
12399: IFFALSE 12409
// sContamin := true ;
12401: LD_ADDR_EXP 69
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// if p3 = 111 then
12409: LD_VAR 0 3
12413: PUSH
12414: LD_INT 111
12416: EQUAL
12417: IFFALSE 12427
// sOil := true ;
12419: LD_ADDR_EXP 71
12423: PUSH
12424: LD_INT 1
12426: ST_TO_ADDR
// if p3 = 112 then
12427: LD_VAR 0 3
12431: PUSH
12432: LD_INT 112
12434: EQUAL
12435: IFFALSE 12445
// sStu := true ;
12437: LD_ADDR_EXP 75
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// if p3 = 113 then
12445: LD_VAR 0 3
12449: PUSH
12450: LD_INT 113
12452: EQUAL
12453: IFFALSE 12463
// sBazooka := true ;
12455: LD_ADDR_EXP 78
12459: PUSH
12460: LD_INT 1
12462: ST_TO_ADDR
// if p3 = 114 then
12463: LD_VAR 0 3
12467: PUSH
12468: LD_INT 114
12470: EQUAL
12471: IFFALSE 12481
// sMortar := true ;
12473: LD_ADDR_EXP 79
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// if p3 = 115 then
12481: LD_VAR 0 3
12485: PUSH
12486: LD_INT 115
12488: EQUAL
12489: IFFALSE 12499
// sRanger := true ;
12491: LD_ADDR_EXP 89
12495: PUSH
12496: LD_INT 1
12498: ST_TO_ADDR
// end ; if p2 = 101 then
12499: LD_VAR 0 2
12503: PUSH
12504: LD_INT 101
12506: EQUAL
12507: IFFALSE 12710
// begin case p3 of 1 :
12509: LD_VAR 0 3
12513: PUSH
12514: LD_INT 1
12516: DOUBLE
12517: EQUAL
12518: IFTRUE 12522
12520: GO 12529
12522: POP
// hHackUnlimitedResources ; 2 :
12523: CALL 22804 0 0
12527: GO 12710
12529: LD_INT 2
12531: DOUBLE
12532: EQUAL
12533: IFTRUE 12537
12535: GO 12544
12537: POP
// hHackSetLevel10 ; 3 :
12538: CALL 22937 0 0
12542: GO 12710
12544: LD_INT 3
12546: DOUBLE
12547: EQUAL
12548: IFTRUE 12552
12550: GO 12559
12552: POP
// hHackSetLevel10YourUnits ; 4 :
12553: CALL 23022 0 0
12557: GO 12710
12559: LD_INT 4
12561: DOUBLE
12562: EQUAL
12563: IFTRUE 12567
12565: GO 12589
12567: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
12568: LD_VAR 0 4
12572: PPUSH
12573: LD_VAR 0 5
12577: PPUSH
12578: LD_VAR 0 6
12582: PPUSH
12583: CALL 23112 0 3
12587: GO 12710
12589: LD_INT 5
12591: DOUBLE
12592: EQUAL
12593: IFTRUE 12597
12595: GO 12604
12597: POP
// hHackSpawnVehicle ; 6 :
12598: CALL 23173 0 0
12602: GO 12710
12604: LD_INT 6
12606: DOUBLE
12607: EQUAL
12608: IFTRUE 12612
12610: GO 12619
12612: POP
// hHackInvincible ; 7 :
12613: CALL 23719 0 0
12617: GO 12710
12619: LD_INT 7
12621: DOUBLE
12622: EQUAL
12623: IFTRUE 12627
12625: GO 12634
12627: POP
// hHackInvisible ; 8 :
12628: CALL 23830 0 0
12632: GO 12710
12634: LD_INT 8
12636: DOUBLE
12637: EQUAL
12638: IFTRUE 12642
12640: GO 12649
12642: POP
// hHackChangeYourSide ; 9 :
12643: CALL 23887 0 0
12647: GO 12710
12649: LD_INT 9
12651: DOUBLE
12652: EQUAL
12653: IFTRUE 12657
12655: GO 12664
12657: POP
// hHackChangeUnitSide ; 10 :
12658: CALL 23929 0 0
12662: GO 12710
12664: LD_INT 10
12666: DOUBLE
12667: EQUAL
12668: IFTRUE 12672
12670: GO 12679
12672: POP
// hHackFog ; 11 :
12673: CALL 24030 0 0
12677: GO 12710
12679: LD_INT 11
12681: DOUBLE
12682: EQUAL
12683: IFTRUE 12687
12685: GO 12694
12687: POP
// hHackApeman ; 12 :
12688: CALL 24045 0 0
12692: GO 12710
12694: LD_INT 12
12696: DOUBLE
12697: EQUAL
12698: IFTRUE 12702
12700: GO 12709
12702: POP
// hHackBoom ; end ;
12703: CALL 24130 0 0
12707: GO 12710
12709: POP
// end ; end ;
12710: PPOPN 6
12712: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12713: GO 12715
12715: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12716: LD_STRING initStreamRollete();
12718: PPUSH
12719: CALL_OW 559
// InitStreamMode ;
12723: CALL 12732 0 0
// DefineStreamItems ( ) ;
12727: CALL 13172 0 0
// end ;
12731: END
// function InitStreamMode ; begin
12732: LD_INT 0
12734: PPUSH
// streamModeActive := false ;
12735: LD_ADDR_EXP 36
12739: PUSH
12740: LD_INT 0
12742: ST_TO_ADDR
// normalCounter := 36 ;
12743: LD_ADDR_EXP 37
12747: PUSH
12748: LD_INT 36
12750: ST_TO_ADDR
// hardcoreCounter := 16 ;
12751: LD_ADDR_EXP 38
12755: PUSH
12756: LD_INT 16
12758: ST_TO_ADDR
// sRocket := false ;
12759: LD_ADDR_EXP 41
12763: PUSH
12764: LD_INT 0
12766: ST_TO_ADDR
// sSpeed := false ;
12767: LD_ADDR_EXP 40
12771: PUSH
12772: LD_INT 0
12774: ST_TO_ADDR
// sEngine := false ;
12775: LD_ADDR_EXP 42
12779: PUSH
12780: LD_INT 0
12782: ST_TO_ADDR
// sSpec := false ;
12783: LD_ADDR_EXP 39
12787: PUSH
12788: LD_INT 0
12790: ST_TO_ADDR
// sLevel := false ;
12791: LD_ADDR_EXP 43
12795: PUSH
12796: LD_INT 0
12798: ST_TO_ADDR
// sArmoury := false ;
12799: LD_ADDR_EXP 44
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// sRadar := false ;
12807: LD_ADDR_EXP 45
12811: PUSH
12812: LD_INT 0
12814: ST_TO_ADDR
// sBunker := false ;
12815: LD_ADDR_EXP 46
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// sHack := false ;
12823: LD_ADDR_EXP 47
12827: PUSH
12828: LD_INT 0
12830: ST_TO_ADDR
// sFire := false ;
12831: LD_ADDR_EXP 48
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// sRefresh := false ;
12839: LD_ADDR_EXP 49
12843: PUSH
12844: LD_INT 0
12846: ST_TO_ADDR
// sExp := false ;
12847: LD_ADDR_EXP 50
12851: PUSH
12852: LD_INT 0
12854: ST_TO_ADDR
// sDepot := false ;
12855: LD_ADDR_EXP 51
12859: PUSH
12860: LD_INT 0
12862: ST_TO_ADDR
// sFlag := false ;
12863: LD_ADDR_EXP 52
12867: PUSH
12868: LD_INT 0
12870: ST_TO_ADDR
// sKamikadze := false ;
12871: LD_ADDR_EXP 60
12875: PUSH
12876: LD_INT 0
12878: ST_TO_ADDR
// sTroll := false ;
12879: LD_ADDR_EXP 61
12883: PUSH
12884: LD_INT 0
12886: ST_TO_ADDR
// sSlow := false ;
12887: LD_ADDR_EXP 62
12891: PUSH
12892: LD_INT 0
12894: ST_TO_ADDR
// sLack := false ;
12895: LD_ADDR_EXP 63
12899: PUSH
12900: LD_INT 0
12902: ST_TO_ADDR
// sTank := false ;
12903: LD_ADDR_EXP 65
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
// sRemote := false ;
12911: LD_ADDR_EXP 66
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// sPowell := false ;
12919: LD_ADDR_EXP 67
12923: PUSH
12924: LD_INT 0
12926: ST_TO_ADDR
// sTeleport := false ;
12927: LD_ADDR_EXP 70
12931: PUSH
12932: LD_INT 0
12934: ST_TO_ADDR
// sOilTower := false ;
12935: LD_ADDR_EXP 72
12939: PUSH
12940: LD_INT 0
12942: ST_TO_ADDR
// sShovel := false ;
12943: LD_ADDR_EXP 73
12947: PUSH
12948: LD_INT 0
12950: ST_TO_ADDR
// sSheik := false ;
12951: LD_ADDR_EXP 74
12955: PUSH
12956: LD_INT 0
12958: ST_TO_ADDR
// sEarthquake := false ;
12959: LD_ADDR_EXP 76
12963: PUSH
12964: LD_INT 0
12966: ST_TO_ADDR
// sAI := false ;
12967: LD_ADDR_EXP 77
12971: PUSH
12972: LD_INT 0
12974: ST_TO_ADDR
// sCargo := false ;
12975: LD_ADDR_EXP 80
12979: PUSH
12980: LD_INT 0
12982: ST_TO_ADDR
// sDLaser := false ;
12983: LD_ADDR_EXP 81
12987: PUSH
12988: LD_INT 0
12990: ST_TO_ADDR
// sExchange := false ;
12991: LD_ADDR_EXP 82
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// sFac := false ;
12999: LD_ADDR_EXP 83
13003: PUSH
13004: LD_INT 0
13006: ST_TO_ADDR
// sPower := false ;
13007: LD_ADDR_EXP 84
13011: PUSH
13012: LD_INT 0
13014: ST_TO_ADDR
// sRandom := false ;
13015: LD_ADDR_EXP 85
13019: PUSH
13020: LD_INT 0
13022: ST_TO_ADDR
// sShield := false ;
13023: LD_ADDR_EXP 86
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// sTime := false ;
13031: LD_ADDR_EXP 87
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// sTools := false ;
13039: LD_ADDR_EXP 88
13043: PUSH
13044: LD_INT 0
13046: ST_TO_ADDR
// sSold := false ;
13047: LD_ADDR_EXP 53
13051: PUSH
13052: LD_INT 0
13054: ST_TO_ADDR
// sDiff := false ;
13055: LD_ADDR_EXP 54
13059: PUSH
13060: LD_INT 0
13062: ST_TO_ADDR
// sFog := false ;
13063: LD_ADDR_EXP 57
13067: PUSH
13068: LD_INT 0
13070: ST_TO_ADDR
// sReset := false ;
13071: LD_ADDR_EXP 58
13075: PUSH
13076: LD_INT 0
13078: ST_TO_ADDR
// sSun := false ;
13079: LD_ADDR_EXP 59
13083: PUSH
13084: LD_INT 0
13086: ST_TO_ADDR
// sTiger := false ;
13087: LD_ADDR_EXP 55
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// sBomb := false ;
13095: LD_ADDR_EXP 56
13099: PUSH
13100: LD_INT 0
13102: ST_TO_ADDR
// sWound := false ;
13103: LD_ADDR_EXP 64
13107: PUSH
13108: LD_INT 0
13110: ST_TO_ADDR
// sBetray := false ;
13111: LD_ADDR_EXP 68
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// sContamin := false ;
13119: LD_ADDR_EXP 69
13123: PUSH
13124: LD_INT 0
13126: ST_TO_ADDR
// sOil := false ;
13127: LD_ADDR_EXP 71
13131: PUSH
13132: LD_INT 0
13134: ST_TO_ADDR
// sStu := false ;
13135: LD_ADDR_EXP 75
13139: PUSH
13140: LD_INT 0
13142: ST_TO_ADDR
// sBazooka := false ;
13143: LD_ADDR_EXP 78
13147: PUSH
13148: LD_INT 0
13150: ST_TO_ADDR
// sMortar := false ;
13151: LD_ADDR_EXP 79
13155: PUSH
13156: LD_INT 0
13158: ST_TO_ADDR
// sRanger := false ;
13159: LD_ADDR_EXP 89
13163: PUSH
13164: LD_INT 0
13166: ST_TO_ADDR
// end ;
13167: LD_VAR 0 1
13171: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13172: LD_INT 0
13174: PPUSH
13175: PPUSH
13176: PPUSH
13177: PPUSH
13178: PPUSH
// result := [ ] ;
13179: LD_ADDR_VAR 0 1
13183: PUSH
13184: EMPTY
13185: ST_TO_ADDR
// if campaign_id = 1 then
13186: LD_OWVAR 69
13190: PUSH
13191: LD_INT 1
13193: EQUAL
13194: IFFALSE 16132
// begin case mission_number of 1 :
13196: LD_OWVAR 70
13200: PUSH
13201: LD_INT 1
13203: DOUBLE
13204: EQUAL
13205: IFTRUE 13209
13207: GO 13273
13209: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13210: LD_ADDR_VAR 0 1
13214: PUSH
13215: LD_INT 2
13217: PUSH
13218: LD_INT 4
13220: PUSH
13221: LD_INT 11
13223: PUSH
13224: LD_INT 12
13226: PUSH
13227: LD_INT 15
13229: PUSH
13230: LD_INT 16
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_INT 23
13238: PUSH
13239: LD_INT 26
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 101
13255: PUSH
13256: LD_INT 102
13258: PUSH
13259: LD_INT 106
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: ST_TO_ADDR
13271: GO 16130
13273: LD_INT 2
13275: DOUBLE
13276: EQUAL
13277: IFTRUE 13281
13279: GO 13353
13281: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13282: LD_ADDR_VAR 0 1
13286: PUSH
13287: LD_INT 2
13289: PUSH
13290: LD_INT 4
13292: PUSH
13293: LD_INT 11
13295: PUSH
13296: LD_INT 12
13298: PUSH
13299: LD_INT 15
13301: PUSH
13302: LD_INT 16
13304: PUSH
13305: LD_INT 22
13307: PUSH
13308: LD_INT 23
13310: PUSH
13311: LD_INT 26
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 101
13327: PUSH
13328: LD_INT 102
13330: PUSH
13331: LD_INT 105
13333: PUSH
13334: LD_INT 106
13336: PUSH
13337: LD_INT 108
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: ST_TO_ADDR
13351: GO 16130
13353: LD_INT 3
13355: DOUBLE
13356: EQUAL
13357: IFTRUE 13361
13359: GO 13437
13361: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13362: LD_ADDR_VAR 0 1
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 4
13372: PUSH
13373: LD_INT 5
13375: PUSH
13376: LD_INT 11
13378: PUSH
13379: LD_INT 12
13381: PUSH
13382: LD_INT 15
13384: PUSH
13385: LD_INT 16
13387: PUSH
13388: LD_INT 22
13390: PUSH
13391: LD_INT 26
13393: PUSH
13394: LD_INT 36
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 101
13411: PUSH
13412: LD_INT 102
13414: PUSH
13415: LD_INT 105
13417: PUSH
13418: LD_INT 106
13420: PUSH
13421: LD_INT 108
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: ST_TO_ADDR
13435: GO 16130
13437: LD_INT 4
13439: DOUBLE
13440: EQUAL
13441: IFTRUE 13445
13443: GO 13529
13445: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13446: LD_ADDR_VAR 0 1
13450: PUSH
13451: LD_INT 2
13453: PUSH
13454: LD_INT 4
13456: PUSH
13457: LD_INT 5
13459: PUSH
13460: LD_INT 8
13462: PUSH
13463: LD_INT 11
13465: PUSH
13466: LD_INT 12
13468: PUSH
13469: LD_INT 15
13471: PUSH
13472: LD_INT 16
13474: PUSH
13475: LD_INT 22
13477: PUSH
13478: LD_INT 23
13480: PUSH
13481: LD_INT 26
13483: PUSH
13484: LD_INT 36
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: PUSH
13501: LD_INT 101
13503: PUSH
13504: LD_INT 102
13506: PUSH
13507: LD_INT 105
13509: PUSH
13510: LD_INT 106
13512: PUSH
13513: LD_INT 108
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: ST_TO_ADDR
13527: GO 16130
13529: LD_INT 5
13531: DOUBLE
13532: EQUAL
13533: IFTRUE 13537
13535: GO 13637
13537: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13538: LD_ADDR_VAR 0 1
13542: PUSH
13543: LD_INT 2
13545: PUSH
13546: LD_INT 4
13548: PUSH
13549: LD_INT 5
13551: PUSH
13552: LD_INT 6
13554: PUSH
13555: LD_INT 8
13557: PUSH
13558: LD_INT 11
13560: PUSH
13561: LD_INT 12
13563: PUSH
13564: LD_INT 15
13566: PUSH
13567: LD_INT 16
13569: PUSH
13570: LD_INT 22
13572: PUSH
13573: LD_INT 23
13575: PUSH
13576: LD_INT 25
13578: PUSH
13579: LD_INT 26
13581: PUSH
13582: LD_INT 36
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 101
13603: PUSH
13604: LD_INT 102
13606: PUSH
13607: LD_INT 105
13609: PUSH
13610: LD_INT 106
13612: PUSH
13613: LD_INT 108
13615: PUSH
13616: LD_INT 109
13618: PUSH
13619: LD_INT 112
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: ST_TO_ADDR
13635: GO 16130
13637: LD_INT 6
13639: DOUBLE
13640: EQUAL
13641: IFTRUE 13645
13643: GO 13765
13645: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13646: LD_ADDR_VAR 0 1
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: LD_INT 4
13656: PUSH
13657: LD_INT 5
13659: PUSH
13660: LD_INT 6
13662: PUSH
13663: LD_INT 8
13665: PUSH
13666: LD_INT 11
13668: PUSH
13669: LD_INT 12
13671: PUSH
13672: LD_INT 15
13674: PUSH
13675: LD_INT 16
13677: PUSH
13678: LD_INT 20
13680: PUSH
13681: LD_INT 21
13683: PUSH
13684: LD_INT 22
13686: PUSH
13687: LD_INT 23
13689: PUSH
13690: LD_INT 25
13692: PUSH
13693: LD_INT 26
13695: PUSH
13696: LD_INT 30
13698: PUSH
13699: LD_INT 31
13701: PUSH
13702: LD_INT 32
13704: PUSH
13705: LD_INT 36
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 101
13731: PUSH
13732: LD_INT 102
13734: PUSH
13735: LD_INT 105
13737: PUSH
13738: LD_INT 106
13740: PUSH
13741: LD_INT 108
13743: PUSH
13744: LD_INT 109
13746: PUSH
13747: LD_INT 112
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: ST_TO_ADDR
13763: GO 16130
13765: LD_INT 7
13767: DOUBLE
13768: EQUAL
13769: IFTRUE 13773
13771: GO 13873
13773: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13774: LD_ADDR_VAR 0 1
13778: PUSH
13779: LD_INT 2
13781: PUSH
13782: LD_INT 4
13784: PUSH
13785: LD_INT 5
13787: PUSH
13788: LD_INT 7
13790: PUSH
13791: LD_INT 11
13793: PUSH
13794: LD_INT 12
13796: PUSH
13797: LD_INT 15
13799: PUSH
13800: LD_INT 16
13802: PUSH
13803: LD_INT 20
13805: PUSH
13806: LD_INT 21
13808: PUSH
13809: LD_INT 22
13811: PUSH
13812: LD_INT 23
13814: PUSH
13815: LD_INT 25
13817: PUSH
13818: LD_INT 26
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 101
13839: PUSH
13840: LD_INT 102
13842: PUSH
13843: LD_INT 103
13845: PUSH
13846: LD_INT 105
13848: PUSH
13849: LD_INT 106
13851: PUSH
13852: LD_INT 108
13854: PUSH
13855: LD_INT 112
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: ST_TO_ADDR
13871: GO 16130
13873: LD_INT 8
13875: DOUBLE
13876: EQUAL
13877: IFTRUE 13881
13879: GO 14009
13881: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13882: LD_ADDR_VAR 0 1
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: LD_INT 4
13892: PUSH
13893: LD_INT 5
13895: PUSH
13896: LD_INT 6
13898: PUSH
13899: LD_INT 7
13901: PUSH
13902: LD_INT 8
13904: PUSH
13905: LD_INT 11
13907: PUSH
13908: LD_INT 12
13910: PUSH
13911: LD_INT 15
13913: PUSH
13914: LD_INT 16
13916: PUSH
13917: LD_INT 20
13919: PUSH
13920: LD_INT 21
13922: PUSH
13923: LD_INT 22
13925: PUSH
13926: LD_INT 23
13928: PUSH
13929: LD_INT 25
13931: PUSH
13932: LD_INT 26
13934: PUSH
13935: LD_INT 30
13937: PUSH
13938: LD_INT 31
13940: PUSH
13941: LD_INT 32
13943: PUSH
13944: LD_INT 36
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 101
13971: PUSH
13972: LD_INT 102
13974: PUSH
13975: LD_INT 103
13977: PUSH
13978: LD_INT 105
13980: PUSH
13981: LD_INT 106
13983: PUSH
13984: LD_INT 108
13986: PUSH
13987: LD_INT 109
13989: PUSH
13990: LD_INT 112
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: ST_TO_ADDR
14007: GO 16130
14009: LD_INT 9
14011: DOUBLE
14012: EQUAL
14013: IFTRUE 14017
14015: GO 14153
14017: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14018: LD_ADDR_VAR 0 1
14022: PUSH
14023: LD_INT 2
14025: PUSH
14026: LD_INT 4
14028: PUSH
14029: LD_INT 5
14031: PUSH
14032: LD_INT 6
14034: PUSH
14035: LD_INT 7
14037: PUSH
14038: LD_INT 8
14040: PUSH
14041: LD_INT 11
14043: PUSH
14044: LD_INT 12
14046: PUSH
14047: LD_INT 15
14049: PUSH
14050: LD_INT 16
14052: PUSH
14053: LD_INT 20
14055: PUSH
14056: LD_INT 21
14058: PUSH
14059: LD_INT 22
14061: PUSH
14062: LD_INT 23
14064: PUSH
14065: LD_INT 25
14067: PUSH
14068: LD_INT 26
14070: PUSH
14071: LD_INT 28
14073: PUSH
14074: LD_INT 30
14076: PUSH
14077: LD_INT 31
14079: PUSH
14080: LD_INT 32
14082: PUSH
14083: LD_INT 36
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 101
14111: PUSH
14112: LD_INT 102
14114: PUSH
14115: LD_INT 103
14117: PUSH
14118: LD_INT 105
14120: PUSH
14121: LD_INT 106
14123: PUSH
14124: LD_INT 108
14126: PUSH
14127: LD_INT 109
14129: PUSH
14130: LD_INT 112
14132: PUSH
14133: LD_INT 114
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: ST_TO_ADDR
14151: GO 16130
14153: LD_INT 10
14155: DOUBLE
14156: EQUAL
14157: IFTRUE 14161
14159: GO 14345
14161: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14162: LD_ADDR_VAR 0 1
14166: PUSH
14167: LD_INT 2
14169: PUSH
14170: LD_INT 4
14172: PUSH
14173: LD_INT 5
14175: PUSH
14176: LD_INT 6
14178: PUSH
14179: LD_INT 7
14181: PUSH
14182: LD_INT 8
14184: PUSH
14185: LD_INT 9
14187: PUSH
14188: LD_INT 10
14190: PUSH
14191: LD_INT 11
14193: PUSH
14194: LD_INT 12
14196: PUSH
14197: LD_INT 13
14199: PUSH
14200: LD_INT 14
14202: PUSH
14203: LD_INT 15
14205: PUSH
14206: LD_INT 16
14208: PUSH
14209: LD_INT 17
14211: PUSH
14212: LD_INT 18
14214: PUSH
14215: LD_INT 19
14217: PUSH
14218: LD_INT 20
14220: PUSH
14221: LD_INT 21
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_INT 23
14229: PUSH
14230: LD_INT 24
14232: PUSH
14233: LD_INT 25
14235: PUSH
14236: LD_INT 26
14238: PUSH
14239: LD_INT 28
14241: PUSH
14242: LD_INT 30
14244: PUSH
14245: LD_INT 31
14247: PUSH
14248: LD_INT 32
14250: PUSH
14251: LD_INT 36
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 101
14287: PUSH
14288: LD_INT 102
14290: PUSH
14291: LD_INT 103
14293: PUSH
14294: LD_INT 104
14296: PUSH
14297: LD_INT 105
14299: PUSH
14300: LD_INT 106
14302: PUSH
14303: LD_INT 107
14305: PUSH
14306: LD_INT 108
14308: PUSH
14309: LD_INT 109
14311: PUSH
14312: LD_INT 110
14314: PUSH
14315: LD_INT 111
14317: PUSH
14318: LD_INT 112
14320: PUSH
14321: LD_INT 114
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: ST_TO_ADDR
14343: GO 16130
14345: LD_INT 11
14347: DOUBLE
14348: EQUAL
14349: IFTRUE 14353
14351: GO 14545
14353: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14354: LD_ADDR_VAR 0 1
14358: PUSH
14359: LD_INT 2
14361: PUSH
14362: LD_INT 3
14364: PUSH
14365: LD_INT 4
14367: PUSH
14368: LD_INT 5
14370: PUSH
14371: LD_INT 6
14373: PUSH
14374: LD_INT 7
14376: PUSH
14377: LD_INT 8
14379: PUSH
14380: LD_INT 9
14382: PUSH
14383: LD_INT 10
14385: PUSH
14386: LD_INT 11
14388: PUSH
14389: LD_INT 12
14391: PUSH
14392: LD_INT 13
14394: PUSH
14395: LD_INT 14
14397: PUSH
14398: LD_INT 15
14400: PUSH
14401: LD_INT 16
14403: PUSH
14404: LD_INT 17
14406: PUSH
14407: LD_INT 18
14409: PUSH
14410: LD_INT 19
14412: PUSH
14413: LD_INT 20
14415: PUSH
14416: LD_INT 21
14418: PUSH
14419: LD_INT 22
14421: PUSH
14422: LD_INT 23
14424: PUSH
14425: LD_INT 24
14427: PUSH
14428: LD_INT 25
14430: PUSH
14431: LD_INT 26
14433: PUSH
14434: LD_INT 28
14436: PUSH
14437: LD_INT 30
14439: PUSH
14440: LD_INT 31
14442: PUSH
14443: LD_INT 32
14445: PUSH
14446: LD_INT 34
14448: PUSH
14449: LD_INT 36
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 101
14487: PUSH
14488: LD_INT 102
14490: PUSH
14491: LD_INT 103
14493: PUSH
14494: LD_INT 104
14496: PUSH
14497: LD_INT 105
14499: PUSH
14500: LD_INT 106
14502: PUSH
14503: LD_INT 107
14505: PUSH
14506: LD_INT 108
14508: PUSH
14509: LD_INT 109
14511: PUSH
14512: LD_INT 110
14514: PUSH
14515: LD_INT 111
14517: PUSH
14518: LD_INT 112
14520: PUSH
14521: LD_INT 114
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: ST_TO_ADDR
14543: GO 16130
14545: LD_INT 12
14547: DOUBLE
14548: EQUAL
14549: IFTRUE 14553
14551: GO 14761
14553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14554: LD_ADDR_VAR 0 1
14558: PUSH
14559: LD_INT 1
14561: PUSH
14562: LD_INT 2
14564: PUSH
14565: LD_INT 3
14567: PUSH
14568: LD_INT 4
14570: PUSH
14571: LD_INT 5
14573: PUSH
14574: LD_INT 6
14576: PUSH
14577: LD_INT 7
14579: PUSH
14580: LD_INT 8
14582: PUSH
14583: LD_INT 9
14585: PUSH
14586: LD_INT 10
14588: PUSH
14589: LD_INT 11
14591: PUSH
14592: LD_INT 12
14594: PUSH
14595: LD_INT 13
14597: PUSH
14598: LD_INT 14
14600: PUSH
14601: LD_INT 15
14603: PUSH
14604: LD_INT 16
14606: PUSH
14607: LD_INT 17
14609: PUSH
14610: LD_INT 18
14612: PUSH
14613: LD_INT 19
14615: PUSH
14616: LD_INT 20
14618: PUSH
14619: LD_INT 21
14621: PUSH
14622: LD_INT 22
14624: PUSH
14625: LD_INT 23
14627: PUSH
14628: LD_INT 24
14630: PUSH
14631: LD_INT 25
14633: PUSH
14634: LD_INT 26
14636: PUSH
14637: LD_INT 27
14639: PUSH
14640: LD_INT 28
14642: PUSH
14643: LD_INT 30
14645: PUSH
14646: LD_INT 31
14648: PUSH
14649: LD_INT 32
14651: PUSH
14652: LD_INT 33
14654: PUSH
14655: LD_INT 34
14657: PUSH
14658: LD_INT 36
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 101
14699: PUSH
14700: LD_INT 102
14702: PUSH
14703: LD_INT 103
14705: PUSH
14706: LD_INT 104
14708: PUSH
14709: LD_INT 105
14711: PUSH
14712: LD_INT 106
14714: PUSH
14715: LD_INT 107
14717: PUSH
14718: LD_INT 108
14720: PUSH
14721: LD_INT 109
14723: PUSH
14724: LD_INT 110
14726: PUSH
14727: LD_INT 111
14729: PUSH
14730: LD_INT 112
14732: PUSH
14733: LD_INT 113
14735: PUSH
14736: LD_INT 114
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: ST_TO_ADDR
14759: GO 16130
14761: LD_INT 13
14763: DOUBLE
14764: EQUAL
14765: IFTRUE 14769
14767: GO 14965
14769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14770: LD_ADDR_VAR 0 1
14774: PUSH
14775: LD_INT 1
14777: PUSH
14778: LD_INT 2
14780: PUSH
14781: LD_INT 3
14783: PUSH
14784: LD_INT 4
14786: PUSH
14787: LD_INT 5
14789: PUSH
14790: LD_INT 8
14792: PUSH
14793: LD_INT 9
14795: PUSH
14796: LD_INT 10
14798: PUSH
14799: LD_INT 11
14801: PUSH
14802: LD_INT 12
14804: PUSH
14805: LD_INT 14
14807: PUSH
14808: LD_INT 15
14810: PUSH
14811: LD_INT 16
14813: PUSH
14814: LD_INT 17
14816: PUSH
14817: LD_INT 18
14819: PUSH
14820: LD_INT 19
14822: PUSH
14823: LD_INT 20
14825: PUSH
14826: LD_INT 21
14828: PUSH
14829: LD_INT 22
14831: PUSH
14832: LD_INT 23
14834: PUSH
14835: LD_INT 24
14837: PUSH
14838: LD_INT 25
14840: PUSH
14841: LD_INT 26
14843: PUSH
14844: LD_INT 27
14846: PUSH
14847: LD_INT 28
14849: PUSH
14850: LD_INT 30
14852: PUSH
14853: LD_INT 31
14855: PUSH
14856: LD_INT 32
14858: PUSH
14859: LD_INT 33
14861: PUSH
14862: LD_INT 34
14864: PUSH
14865: LD_INT 36
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 101
14903: PUSH
14904: LD_INT 102
14906: PUSH
14907: LD_INT 103
14909: PUSH
14910: LD_INT 104
14912: PUSH
14913: LD_INT 105
14915: PUSH
14916: LD_INT 106
14918: PUSH
14919: LD_INT 107
14921: PUSH
14922: LD_INT 108
14924: PUSH
14925: LD_INT 109
14927: PUSH
14928: LD_INT 110
14930: PUSH
14931: LD_INT 111
14933: PUSH
14934: LD_INT 112
14936: PUSH
14937: LD_INT 113
14939: PUSH
14940: LD_INT 114
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: ST_TO_ADDR
14963: GO 16130
14965: LD_INT 14
14967: DOUBLE
14968: EQUAL
14969: IFTRUE 14973
14971: GO 15185
14973: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14974: LD_ADDR_VAR 0 1
14978: PUSH
14979: LD_INT 1
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: LD_INT 3
14987: PUSH
14988: LD_INT 4
14990: PUSH
14991: LD_INT 5
14993: PUSH
14994: LD_INT 6
14996: PUSH
14997: LD_INT 7
14999: PUSH
15000: LD_INT 8
15002: PUSH
15003: LD_INT 9
15005: PUSH
15006: LD_INT 10
15008: PUSH
15009: LD_INT 11
15011: PUSH
15012: LD_INT 12
15014: PUSH
15015: LD_INT 13
15017: PUSH
15018: LD_INT 14
15020: PUSH
15021: LD_INT 15
15023: PUSH
15024: LD_INT 16
15026: PUSH
15027: LD_INT 17
15029: PUSH
15030: LD_INT 18
15032: PUSH
15033: LD_INT 19
15035: PUSH
15036: LD_INT 20
15038: PUSH
15039: LD_INT 21
15041: PUSH
15042: LD_INT 22
15044: PUSH
15045: LD_INT 23
15047: PUSH
15048: LD_INT 24
15050: PUSH
15051: LD_INT 25
15053: PUSH
15054: LD_INT 26
15056: PUSH
15057: LD_INT 27
15059: PUSH
15060: LD_INT 28
15062: PUSH
15063: LD_INT 29
15065: PUSH
15066: LD_INT 30
15068: PUSH
15069: LD_INT 31
15071: PUSH
15072: LD_INT 32
15074: PUSH
15075: LD_INT 33
15077: PUSH
15078: LD_INT 34
15080: PUSH
15081: LD_INT 36
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 101
15123: PUSH
15124: LD_INT 102
15126: PUSH
15127: LD_INT 103
15129: PUSH
15130: LD_INT 104
15132: PUSH
15133: LD_INT 105
15135: PUSH
15136: LD_INT 106
15138: PUSH
15139: LD_INT 107
15141: PUSH
15142: LD_INT 108
15144: PUSH
15145: LD_INT 109
15147: PUSH
15148: LD_INT 110
15150: PUSH
15151: LD_INT 111
15153: PUSH
15154: LD_INT 112
15156: PUSH
15157: LD_INT 113
15159: PUSH
15160: LD_INT 114
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: ST_TO_ADDR
15183: GO 16130
15185: LD_INT 15
15187: DOUBLE
15188: EQUAL
15189: IFTRUE 15193
15191: GO 15405
15193: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15194: LD_ADDR_VAR 0 1
15198: PUSH
15199: LD_INT 1
15201: PUSH
15202: LD_INT 2
15204: PUSH
15205: LD_INT 3
15207: PUSH
15208: LD_INT 4
15210: PUSH
15211: LD_INT 5
15213: PUSH
15214: LD_INT 6
15216: PUSH
15217: LD_INT 7
15219: PUSH
15220: LD_INT 8
15222: PUSH
15223: LD_INT 9
15225: PUSH
15226: LD_INT 10
15228: PUSH
15229: LD_INT 11
15231: PUSH
15232: LD_INT 12
15234: PUSH
15235: LD_INT 13
15237: PUSH
15238: LD_INT 14
15240: PUSH
15241: LD_INT 15
15243: PUSH
15244: LD_INT 16
15246: PUSH
15247: LD_INT 17
15249: PUSH
15250: LD_INT 18
15252: PUSH
15253: LD_INT 19
15255: PUSH
15256: LD_INT 20
15258: PUSH
15259: LD_INT 21
15261: PUSH
15262: LD_INT 22
15264: PUSH
15265: LD_INT 23
15267: PUSH
15268: LD_INT 24
15270: PUSH
15271: LD_INT 25
15273: PUSH
15274: LD_INT 26
15276: PUSH
15277: LD_INT 27
15279: PUSH
15280: LD_INT 28
15282: PUSH
15283: LD_INT 29
15285: PUSH
15286: LD_INT 30
15288: PUSH
15289: LD_INT 31
15291: PUSH
15292: LD_INT 32
15294: PUSH
15295: LD_INT 33
15297: PUSH
15298: LD_INT 34
15300: PUSH
15301: LD_INT 36
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 101
15343: PUSH
15344: LD_INT 102
15346: PUSH
15347: LD_INT 103
15349: PUSH
15350: LD_INT 104
15352: PUSH
15353: LD_INT 105
15355: PUSH
15356: LD_INT 106
15358: PUSH
15359: LD_INT 107
15361: PUSH
15362: LD_INT 108
15364: PUSH
15365: LD_INT 109
15367: PUSH
15368: LD_INT 110
15370: PUSH
15371: LD_INT 111
15373: PUSH
15374: LD_INT 112
15376: PUSH
15377: LD_INT 113
15379: PUSH
15380: LD_INT 114
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: ST_TO_ADDR
15403: GO 16130
15405: LD_INT 16
15407: DOUBLE
15408: EQUAL
15409: IFTRUE 15413
15411: GO 15537
15413: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15414: LD_ADDR_VAR 0 1
15418: PUSH
15419: LD_INT 2
15421: PUSH
15422: LD_INT 4
15424: PUSH
15425: LD_INT 5
15427: PUSH
15428: LD_INT 7
15430: PUSH
15431: LD_INT 11
15433: PUSH
15434: LD_INT 12
15436: PUSH
15437: LD_INT 15
15439: PUSH
15440: LD_INT 16
15442: PUSH
15443: LD_INT 20
15445: PUSH
15446: LD_INT 21
15448: PUSH
15449: LD_INT 22
15451: PUSH
15452: LD_INT 23
15454: PUSH
15455: LD_INT 25
15457: PUSH
15458: LD_INT 26
15460: PUSH
15461: LD_INT 30
15463: PUSH
15464: LD_INT 31
15466: PUSH
15467: LD_INT 32
15469: PUSH
15470: LD_INT 33
15472: PUSH
15473: LD_INT 34
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 101
15499: PUSH
15500: LD_INT 102
15502: PUSH
15503: LD_INT 103
15505: PUSH
15506: LD_INT 106
15508: PUSH
15509: LD_INT 108
15511: PUSH
15512: LD_INT 112
15514: PUSH
15515: LD_INT 113
15517: PUSH
15518: LD_INT 114
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: ST_TO_ADDR
15535: GO 16130
15537: LD_INT 17
15539: DOUBLE
15540: EQUAL
15541: IFTRUE 15545
15543: GO 15757
15545: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15546: LD_ADDR_VAR 0 1
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: LD_INT 3
15559: PUSH
15560: LD_INT 4
15562: PUSH
15563: LD_INT 5
15565: PUSH
15566: LD_INT 6
15568: PUSH
15569: LD_INT 7
15571: PUSH
15572: LD_INT 8
15574: PUSH
15575: LD_INT 9
15577: PUSH
15578: LD_INT 10
15580: PUSH
15581: LD_INT 11
15583: PUSH
15584: LD_INT 12
15586: PUSH
15587: LD_INT 13
15589: PUSH
15590: LD_INT 14
15592: PUSH
15593: LD_INT 15
15595: PUSH
15596: LD_INT 16
15598: PUSH
15599: LD_INT 17
15601: PUSH
15602: LD_INT 18
15604: PUSH
15605: LD_INT 19
15607: PUSH
15608: LD_INT 20
15610: PUSH
15611: LD_INT 21
15613: PUSH
15614: LD_INT 22
15616: PUSH
15617: LD_INT 23
15619: PUSH
15620: LD_INT 24
15622: PUSH
15623: LD_INT 25
15625: PUSH
15626: LD_INT 26
15628: PUSH
15629: LD_INT 27
15631: PUSH
15632: LD_INT 28
15634: PUSH
15635: LD_INT 29
15637: PUSH
15638: LD_INT 30
15640: PUSH
15641: LD_INT 31
15643: PUSH
15644: LD_INT 32
15646: PUSH
15647: LD_INT 33
15649: PUSH
15650: LD_INT 34
15652: PUSH
15653: LD_INT 36
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 101
15695: PUSH
15696: LD_INT 102
15698: PUSH
15699: LD_INT 103
15701: PUSH
15702: LD_INT 104
15704: PUSH
15705: LD_INT 105
15707: PUSH
15708: LD_INT 106
15710: PUSH
15711: LD_INT 107
15713: PUSH
15714: LD_INT 108
15716: PUSH
15717: LD_INT 109
15719: PUSH
15720: LD_INT 110
15722: PUSH
15723: LD_INT 111
15725: PUSH
15726: LD_INT 112
15728: PUSH
15729: LD_INT 113
15731: PUSH
15732: LD_INT 114
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: ST_TO_ADDR
15755: GO 16130
15757: LD_INT 18
15759: DOUBLE
15760: EQUAL
15761: IFTRUE 15765
15763: GO 15901
15765: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15766: LD_ADDR_VAR 0 1
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: LD_INT 4
15776: PUSH
15777: LD_INT 5
15779: PUSH
15780: LD_INT 7
15782: PUSH
15783: LD_INT 11
15785: PUSH
15786: LD_INT 12
15788: PUSH
15789: LD_INT 15
15791: PUSH
15792: LD_INT 16
15794: PUSH
15795: LD_INT 20
15797: PUSH
15798: LD_INT 21
15800: PUSH
15801: LD_INT 22
15803: PUSH
15804: LD_INT 23
15806: PUSH
15807: LD_INT 25
15809: PUSH
15810: LD_INT 26
15812: PUSH
15813: LD_INT 30
15815: PUSH
15816: LD_INT 31
15818: PUSH
15819: LD_INT 32
15821: PUSH
15822: LD_INT 33
15824: PUSH
15825: LD_INT 34
15827: PUSH
15828: LD_INT 35
15830: PUSH
15831: LD_INT 36
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 101
15859: PUSH
15860: LD_INT 102
15862: PUSH
15863: LD_INT 103
15865: PUSH
15866: LD_INT 106
15868: PUSH
15869: LD_INT 108
15871: PUSH
15872: LD_INT 112
15874: PUSH
15875: LD_INT 113
15877: PUSH
15878: LD_INT 114
15880: PUSH
15881: LD_INT 115
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: ST_TO_ADDR
15899: GO 16130
15901: LD_INT 19
15903: DOUBLE
15904: EQUAL
15905: IFTRUE 15909
15907: GO 16129
15909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15910: LD_ADDR_VAR 0 1
15914: PUSH
15915: LD_INT 1
15917: PUSH
15918: LD_INT 2
15920: PUSH
15921: LD_INT 3
15923: PUSH
15924: LD_INT 4
15926: PUSH
15927: LD_INT 5
15929: PUSH
15930: LD_INT 6
15932: PUSH
15933: LD_INT 7
15935: PUSH
15936: LD_INT 8
15938: PUSH
15939: LD_INT 9
15941: PUSH
15942: LD_INT 10
15944: PUSH
15945: LD_INT 11
15947: PUSH
15948: LD_INT 12
15950: PUSH
15951: LD_INT 13
15953: PUSH
15954: LD_INT 14
15956: PUSH
15957: LD_INT 15
15959: PUSH
15960: LD_INT 16
15962: PUSH
15963: LD_INT 17
15965: PUSH
15966: LD_INT 18
15968: PUSH
15969: LD_INT 19
15971: PUSH
15972: LD_INT 20
15974: PUSH
15975: LD_INT 21
15977: PUSH
15978: LD_INT 22
15980: PUSH
15981: LD_INT 23
15983: PUSH
15984: LD_INT 24
15986: PUSH
15987: LD_INT 25
15989: PUSH
15990: LD_INT 26
15992: PUSH
15993: LD_INT 27
15995: PUSH
15996: LD_INT 28
15998: PUSH
15999: LD_INT 29
16001: PUSH
16002: LD_INT 30
16004: PUSH
16005: LD_INT 31
16007: PUSH
16008: LD_INT 32
16010: PUSH
16011: LD_INT 33
16013: PUSH
16014: LD_INT 34
16016: PUSH
16017: LD_INT 35
16019: PUSH
16020: LD_INT 36
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 101
16063: PUSH
16064: LD_INT 102
16066: PUSH
16067: LD_INT 103
16069: PUSH
16070: LD_INT 104
16072: PUSH
16073: LD_INT 105
16075: PUSH
16076: LD_INT 106
16078: PUSH
16079: LD_INT 107
16081: PUSH
16082: LD_INT 108
16084: PUSH
16085: LD_INT 109
16087: PUSH
16088: LD_INT 110
16090: PUSH
16091: LD_INT 111
16093: PUSH
16094: LD_INT 112
16096: PUSH
16097: LD_INT 113
16099: PUSH
16100: LD_INT 114
16102: PUSH
16103: LD_INT 115
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: ST_TO_ADDR
16127: GO 16130
16129: POP
// end else
16130: GO 16349
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16132: LD_ADDR_VAR 0 1
16136: PUSH
16137: LD_INT 1
16139: PUSH
16140: LD_INT 2
16142: PUSH
16143: LD_INT 3
16145: PUSH
16146: LD_INT 4
16148: PUSH
16149: LD_INT 5
16151: PUSH
16152: LD_INT 6
16154: PUSH
16155: LD_INT 7
16157: PUSH
16158: LD_INT 8
16160: PUSH
16161: LD_INT 9
16163: PUSH
16164: LD_INT 10
16166: PUSH
16167: LD_INT 11
16169: PUSH
16170: LD_INT 12
16172: PUSH
16173: LD_INT 13
16175: PUSH
16176: LD_INT 14
16178: PUSH
16179: LD_INT 15
16181: PUSH
16182: LD_INT 16
16184: PUSH
16185: LD_INT 17
16187: PUSH
16188: LD_INT 18
16190: PUSH
16191: LD_INT 19
16193: PUSH
16194: LD_INT 20
16196: PUSH
16197: LD_INT 21
16199: PUSH
16200: LD_INT 22
16202: PUSH
16203: LD_INT 23
16205: PUSH
16206: LD_INT 24
16208: PUSH
16209: LD_INT 25
16211: PUSH
16212: LD_INT 26
16214: PUSH
16215: LD_INT 27
16217: PUSH
16218: LD_INT 28
16220: PUSH
16221: LD_INT 29
16223: PUSH
16224: LD_INT 30
16226: PUSH
16227: LD_INT 31
16229: PUSH
16230: LD_INT 32
16232: PUSH
16233: LD_INT 33
16235: PUSH
16236: LD_INT 34
16238: PUSH
16239: LD_INT 35
16241: PUSH
16242: LD_INT 36
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 101
16285: PUSH
16286: LD_INT 102
16288: PUSH
16289: LD_INT 103
16291: PUSH
16292: LD_INT 104
16294: PUSH
16295: LD_INT 105
16297: PUSH
16298: LD_INT 106
16300: PUSH
16301: LD_INT 107
16303: PUSH
16304: LD_INT 108
16306: PUSH
16307: LD_INT 109
16309: PUSH
16310: LD_INT 110
16312: PUSH
16313: LD_INT 111
16315: PUSH
16316: LD_INT 112
16318: PUSH
16319: LD_INT 113
16321: PUSH
16322: LD_INT 114
16324: PUSH
16325: LD_INT 115
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: ST_TO_ADDR
// if result then
16349: LD_VAR 0 1
16353: IFFALSE 16642
// begin normal :=  ;
16355: LD_ADDR_VAR 0 3
16359: PUSH
16360: LD_STRING 
16362: ST_TO_ADDR
// hardcore :=  ;
16363: LD_ADDR_VAR 0 4
16367: PUSH
16368: LD_STRING 
16370: ST_TO_ADDR
// for i = 1 to normalCounter do
16371: LD_ADDR_VAR 0 5
16375: PUSH
16376: DOUBLE
16377: LD_INT 1
16379: DEC
16380: ST_TO_ADDR
16381: LD_EXP 37
16385: PUSH
16386: FOR_TO
16387: IFFALSE 16488
// begin tmp := 0 ;
16389: LD_ADDR_VAR 0 2
16393: PUSH
16394: LD_STRING 0
16396: ST_TO_ADDR
// if result [ 1 ] then
16397: LD_VAR 0 1
16401: PUSH
16402: LD_INT 1
16404: ARRAY
16405: IFFALSE 16470
// if result [ 1 ] [ 1 ] = i then
16407: LD_VAR 0 1
16411: PUSH
16412: LD_INT 1
16414: ARRAY
16415: PUSH
16416: LD_INT 1
16418: ARRAY
16419: PUSH
16420: LD_VAR 0 5
16424: EQUAL
16425: IFFALSE 16470
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16427: LD_ADDR_VAR 0 1
16431: PUSH
16432: LD_VAR 0 1
16436: PPUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_VAR 0 1
16444: PUSH
16445: LD_INT 1
16447: ARRAY
16448: PPUSH
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 3
16456: PPUSH
16457: CALL_OW 1
16461: ST_TO_ADDR
// tmp := 1 ;
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_STRING 1
16469: ST_TO_ADDR
// end ; normal := normal & tmp ;
16470: LD_ADDR_VAR 0 3
16474: PUSH
16475: LD_VAR 0 3
16479: PUSH
16480: LD_VAR 0 2
16484: STR
16485: ST_TO_ADDR
// end ;
16486: GO 16386
16488: POP
16489: POP
// for i = 1 to hardcoreCounter do
16490: LD_ADDR_VAR 0 5
16494: PUSH
16495: DOUBLE
16496: LD_INT 1
16498: DEC
16499: ST_TO_ADDR
16500: LD_EXP 38
16504: PUSH
16505: FOR_TO
16506: IFFALSE 16611
// begin tmp := 0 ;
16508: LD_ADDR_VAR 0 2
16512: PUSH
16513: LD_STRING 0
16515: ST_TO_ADDR
// if result [ 2 ] then
16516: LD_VAR 0 1
16520: PUSH
16521: LD_INT 2
16523: ARRAY
16524: IFFALSE 16593
// if result [ 2 ] [ 1 ] = 100 + i then
16526: LD_VAR 0 1
16530: PUSH
16531: LD_INT 2
16533: ARRAY
16534: PUSH
16535: LD_INT 1
16537: ARRAY
16538: PUSH
16539: LD_INT 100
16541: PUSH
16542: LD_VAR 0 5
16546: PLUS
16547: EQUAL
16548: IFFALSE 16593
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16550: LD_ADDR_VAR 0 1
16554: PUSH
16555: LD_VAR 0 1
16559: PPUSH
16560: LD_INT 2
16562: PPUSH
16563: LD_VAR 0 1
16567: PUSH
16568: LD_INT 2
16570: ARRAY
16571: PPUSH
16572: LD_INT 1
16574: PPUSH
16575: CALL_OW 3
16579: PPUSH
16580: CALL_OW 1
16584: ST_TO_ADDR
// tmp := 1 ;
16585: LD_ADDR_VAR 0 2
16589: PUSH
16590: LD_STRING 1
16592: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16593: LD_ADDR_VAR 0 4
16597: PUSH
16598: LD_VAR 0 4
16602: PUSH
16603: LD_VAR 0 2
16607: STR
16608: ST_TO_ADDR
// end ;
16609: GO 16505
16611: POP
16612: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16613: LD_STRING getStreamItemsFromMission("
16615: PUSH
16616: LD_VAR 0 3
16620: STR
16621: PUSH
16622: LD_STRING ","
16624: STR
16625: PUSH
16626: LD_VAR 0 4
16630: STR
16631: PUSH
16632: LD_STRING ")
16634: STR
16635: PPUSH
16636: CALL_OW 559
// end else
16640: GO 16649
// ToLua ( getStreamItemsFromMission("","") ) ;
16642: LD_STRING getStreamItemsFromMission("","")
16644: PPUSH
16645: CALL_OW 559
// end ;
16649: LD_VAR 0 1
16653: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16654: LD_EXP 36
16658: PUSH
16659: LD_EXP 41
16663: AND
16664: IFFALSE 16788
16666: GO 16668
16668: DISABLE
16669: LD_INT 0
16671: PPUSH
16672: PPUSH
// begin enable ;
16673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16674: LD_ADDR_VAR 0 2
16678: PUSH
16679: LD_INT 22
16681: PUSH
16682: LD_OWVAR 2
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 2
16693: PUSH
16694: LD_INT 34
16696: PUSH
16697: LD_INT 7
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 34
16706: PUSH
16707: LD_INT 45
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 34
16716: PUSH
16717: LD_INT 28
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 34
16726: PUSH
16727: LD_INT 47
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 69
16749: ST_TO_ADDR
// if not tmp then
16750: LD_VAR 0 2
16754: NOT
16755: IFFALSE 16759
// exit ;
16757: GO 16788
// for i in tmp do
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_VAR 0 2
16768: PUSH
16769: FOR_IN
16770: IFFALSE 16786
// begin SetLives ( i , 0 ) ;
16772: LD_VAR 0 1
16776: PPUSH
16777: LD_INT 0
16779: PPUSH
16780: CALL_OW 234
// end ;
16784: GO 16769
16786: POP
16787: POP
// end ;
16788: PPOPN 2
16790: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16791: LD_EXP 36
16795: PUSH
16796: LD_EXP 42
16800: AND
16801: IFFALSE 16885
16803: GO 16805
16805: DISABLE
16806: LD_INT 0
16808: PPUSH
16809: PPUSH
// begin enable ;
16810: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16811: LD_ADDR_VAR 0 2
16815: PUSH
16816: LD_INT 22
16818: PUSH
16819: LD_OWVAR 2
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 32
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PPUSH
16842: CALL_OW 69
16846: ST_TO_ADDR
// if not tmp then
16847: LD_VAR 0 2
16851: NOT
16852: IFFALSE 16856
// exit ;
16854: GO 16885
// for i in tmp do
16856: LD_ADDR_VAR 0 1
16860: PUSH
16861: LD_VAR 0 2
16865: PUSH
16866: FOR_IN
16867: IFFALSE 16883
// begin SetLives ( i , 0 ) ;
16869: LD_VAR 0 1
16873: PPUSH
16874: LD_INT 0
16876: PPUSH
16877: CALL_OW 234
// end ;
16881: GO 16866
16883: POP
16884: POP
// end ;
16885: PPOPN 2
16887: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16888: LD_EXP 36
16892: PUSH
16893: LD_EXP 39
16897: AND
16898: IFFALSE 16991
16900: GO 16902
16902: DISABLE
16903: LD_INT 0
16905: PPUSH
// begin enable ;
16906: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16907: LD_ADDR_VAR 0 1
16911: PUSH
16912: LD_INT 22
16914: PUSH
16915: LD_OWVAR 2
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 2
16926: PUSH
16927: LD_INT 25
16929: PUSH
16930: LD_INT 5
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 25
16939: PUSH
16940: LD_INT 9
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 25
16949: PUSH
16950: LD_INT 8
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PPUSH
16967: CALL_OW 69
16971: PUSH
16972: FOR_IN
16973: IFFALSE 16989
// begin SetClass ( i , 1 ) ;
16975: LD_VAR 0 1
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: CALL_OW 336
// end ;
16987: GO 16972
16989: POP
16990: POP
// end ;
16991: PPOPN 1
16993: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16994: LD_EXP 36
16998: PUSH
16999: LD_EXP 40
17003: AND
17004: PUSH
17005: LD_OWVAR 65
17009: PUSH
17010: LD_INT 7
17012: LESS
17013: AND
17014: IFFALSE 17028
17016: GO 17018
17018: DISABLE
// begin enable ;
17019: ENABLE
// game_speed := 7 ;
17020: LD_ADDR_OWVAR 65
17024: PUSH
17025: LD_INT 7
17027: ST_TO_ADDR
// end ;
17028: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17029: LD_EXP 36
17033: PUSH
17034: LD_EXP 43
17038: AND
17039: IFFALSE 17241
17041: GO 17043
17043: DISABLE
17044: LD_INT 0
17046: PPUSH
17047: PPUSH
17048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17049: LD_ADDR_VAR 0 3
17053: PUSH
17054: LD_INT 81
17056: PUSH
17057: LD_OWVAR 2
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 21
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PPUSH
17080: CALL_OW 69
17084: ST_TO_ADDR
// if not tmp then
17085: LD_VAR 0 3
17089: NOT
17090: IFFALSE 17094
// exit ;
17092: GO 17241
// if tmp > 5 then
17094: LD_VAR 0 3
17098: PUSH
17099: LD_INT 5
17101: GREATER
17102: IFFALSE 17114
// k := 5 else
17104: LD_ADDR_VAR 0 2
17108: PUSH
17109: LD_INT 5
17111: ST_TO_ADDR
17112: GO 17124
// k := tmp ;
17114: LD_ADDR_VAR 0 2
17118: PUSH
17119: LD_VAR 0 3
17123: ST_TO_ADDR
// for i := 1 to k do
17124: LD_ADDR_VAR 0 1
17128: PUSH
17129: DOUBLE
17130: LD_INT 1
17132: DEC
17133: ST_TO_ADDR
17134: LD_VAR 0 2
17138: PUSH
17139: FOR_TO
17140: IFFALSE 17239
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17142: LD_VAR 0 3
17146: PUSH
17147: LD_VAR 0 1
17151: ARRAY
17152: PPUSH
17153: LD_VAR 0 1
17157: PUSH
17158: LD_INT 4
17160: MOD
17161: PUSH
17162: LD_INT 1
17164: PLUS
17165: PPUSH
17166: CALL_OW 259
17170: PUSH
17171: LD_INT 10
17173: LESS
17174: IFFALSE 17237
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17176: LD_VAR 0 3
17180: PUSH
17181: LD_VAR 0 1
17185: ARRAY
17186: PPUSH
17187: LD_VAR 0 1
17191: PUSH
17192: LD_INT 4
17194: MOD
17195: PUSH
17196: LD_INT 1
17198: PLUS
17199: PPUSH
17200: LD_VAR 0 3
17204: PUSH
17205: LD_VAR 0 1
17209: ARRAY
17210: PPUSH
17211: LD_VAR 0 1
17215: PUSH
17216: LD_INT 4
17218: MOD
17219: PUSH
17220: LD_INT 1
17222: PLUS
17223: PPUSH
17224: CALL_OW 259
17228: PUSH
17229: LD_INT 1
17231: PLUS
17232: PPUSH
17233: CALL_OW 237
17237: GO 17139
17239: POP
17240: POP
// end ;
17241: PPOPN 3
17243: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17244: LD_EXP 36
17248: PUSH
17249: LD_EXP 44
17253: AND
17254: IFFALSE 17274
17256: GO 17258
17258: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17259: LD_INT 4
17261: PPUSH
17262: LD_OWVAR 2
17266: PPUSH
17267: LD_INT 0
17269: PPUSH
17270: CALL_OW 324
17274: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17275: LD_EXP 36
17279: PUSH
17280: LD_EXP 73
17284: AND
17285: IFFALSE 17305
17287: GO 17289
17289: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17290: LD_INT 19
17292: PPUSH
17293: LD_OWVAR 2
17297: PPUSH
17298: LD_INT 0
17300: PPUSH
17301: CALL_OW 324
17305: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17306: LD_EXP 36
17310: PUSH
17311: LD_EXP 45
17315: AND
17316: IFFALSE 17418
17318: GO 17320
17320: DISABLE
17321: LD_INT 0
17323: PPUSH
17324: PPUSH
// begin enable ;
17325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17326: LD_ADDR_VAR 0 2
17330: PUSH
17331: LD_INT 22
17333: PUSH
17334: LD_OWVAR 2
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 2
17345: PUSH
17346: LD_INT 34
17348: PUSH
17349: LD_INT 11
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 34
17358: PUSH
17359: LD_INT 30
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PPUSH
17375: CALL_OW 69
17379: ST_TO_ADDR
// if not tmp then
17380: LD_VAR 0 2
17384: NOT
17385: IFFALSE 17389
// exit ;
17387: GO 17418
// for i in tmp do
17389: LD_ADDR_VAR 0 1
17393: PUSH
17394: LD_VAR 0 2
17398: PUSH
17399: FOR_IN
17400: IFFALSE 17416
// begin SetLives ( i , 0 ) ;
17402: LD_VAR 0 1
17406: PPUSH
17407: LD_INT 0
17409: PPUSH
17410: CALL_OW 234
// end ;
17414: GO 17399
17416: POP
17417: POP
// end ;
17418: PPOPN 2
17420: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17421: LD_EXP 36
17425: PUSH
17426: LD_EXP 46
17430: AND
17431: IFFALSE 17451
17433: GO 17435
17435: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17436: LD_INT 32
17438: PPUSH
17439: LD_OWVAR 2
17443: PPUSH
17444: LD_INT 0
17446: PPUSH
17447: CALL_OW 324
17451: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17452: LD_EXP 36
17456: PUSH
17457: LD_EXP 47
17461: AND
17462: IFFALSE 17643
17464: GO 17466
17466: DISABLE
17467: LD_INT 0
17469: PPUSH
17470: PPUSH
17471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17472: LD_ADDR_VAR 0 2
17476: PUSH
17477: LD_INT 22
17479: PUSH
17480: LD_OWVAR 2
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 33
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PPUSH
17503: CALL_OW 69
17507: ST_TO_ADDR
// if not tmp then
17508: LD_VAR 0 2
17512: NOT
17513: IFFALSE 17517
// exit ;
17515: GO 17643
// side := 0 ;
17517: LD_ADDR_VAR 0 3
17521: PUSH
17522: LD_INT 0
17524: ST_TO_ADDR
// for i := 1 to 8 do
17525: LD_ADDR_VAR 0 1
17529: PUSH
17530: DOUBLE
17531: LD_INT 1
17533: DEC
17534: ST_TO_ADDR
17535: LD_INT 8
17537: PUSH
17538: FOR_TO
17539: IFFALSE 17587
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17541: LD_OWVAR 2
17545: PUSH
17546: LD_VAR 0 1
17550: NONEQUAL
17551: PUSH
17552: LD_OWVAR 2
17556: PPUSH
17557: LD_VAR 0 1
17561: PPUSH
17562: CALL_OW 81
17566: PUSH
17567: LD_INT 2
17569: EQUAL
17570: AND
17571: IFFALSE 17585
// begin side := i ;
17573: LD_ADDR_VAR 0 3
17577: PUSH
17578: LD_VAR 0 1
17582: ST_TO_ADDR
// break ;
17583: GO 17587
// end ;
17585: GO 17538
17587: POP
17588: POP
// if not side then
17589: LD_VAR 0 3
17593: NOT
17594: IFFALSE 17598
// exit ;
17596: GO 17643
// for i := 1 to tmp do
17598: LD_ADDR_VAR 0 1
17602: PUSH
17603: DOUBLE
17604: LD_INT 1
17606: DEC
17607: ST_TO_ADDR
17608: LD_VAR 0 2
17612: PUSH
17613: FOR_TO
17614: IFFALSE 17641
// if Prob ( 60 ) then
17616: LD_INT 60
17618: PPUSH
17619: CALL_OW 13
17623: IFFALSE 17639
// SetSide ( i , side ) ;
17625: LD_VAR 0 1
17629: PPUSH
17630: LD_VAR 0 3
17634: PPUSH
17635: CALL_OW 235
17639: GO 17613
17641: POP
17642: POP
// end ;
17643: PPOPN 3
17645: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17646: LD_EXP 36
17650: PUSH
17651: LD_EXP 49
17655: AND
17656: IFFALSE 17775
17658: GO 17660
17660: DISABLE
17661: LD_INT 0
17663: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17664: LD_ADDR_VAR 0 1
17668: PUSH
17669: LD_INT 22
17671: PUSH
17672: LD_OWVAR 2
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 21
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 3
17693: PUSH
17694: LD_INT 23
17696: PUSH
17697: LD_INT 0
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: LIST
17712: PPUSH
17713: CALL_OW 69
17717: PUSH
17718: FOR_IN
17719: IFFALSE 17773
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17721: LD_VAR 0 1
17725: PPUSH
17726: CALL_OW 257
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: LD_INT 2
17736: PUSH
17737: LD_INT 3
17739: PUSH
17740: LD_INT 4
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: IN
17749: IFFALSE 17771
// SetClass ( un , rand ( 1 , 4 ) ) ;
17751: LD_VAR 0 1
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: LD_INT 4
17761: PPUSH
17762: CALL_OW 12
17766: PPUSH
17767: CALL_OW 336
17771: GO 17718
17773: POP
17774: POP
// end ;
17775: PPOPN 1
17777: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17778: LD_EXP 36
17782: PUSH
17783: LD_EXP 48
17787: AND
17788: IFFALSE 17867
17790: GO 17792
17792: DISABLE
17793: LD_INT 0
17795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17796: LD_ADDR_VAR 0 1
17800: PUSH
17801: LD_INT 22
17803: PUSH
17804: LD_OWVAR 2
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 21
17815: PUSH
17816: LD_INT 3
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PPUSH
17827: CALL_OW 69
17831: ST_TO_ADDR
// if not tmp then
17832: LD_VAR 0 1
17836: NOT
17837: IFFALSE 17841
// exit ;
17839: GO 17867
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17841: LD_VAR 0 1
17845: PUSH
17846: LD_INT 1
17848: PPUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 12
17858: ARRAY
17859: PPUSH
17860: LD_INT 100
17862: PPUSH
17863: CALL_OW 234
// end ;
17867: PPOPN 1
17869: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17870: LD_EXP 36
17874: PUSH
17875: LD_EXP 50
17879: AND
17880: IFFALSE 17978
17882: GO 17884
17884: DISABLE
17885: LD_INT 0
17887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17888: LD_ADDR_VAR 0 1
17892: PUSH
17893: LD_INT 22
17895: PUSH
17896: LD_OWVAR 2
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 21
17907: PUSH
17908: LD_INT 1
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PPUSH
17919: CALL_OW 69
17923: ST_TO_ADDR
// if not tmp then
17924: LD_VAR 0 1
17928: NOT
17929: IFFALSE 17933
// exit ;
17931: GO 17978
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17933: LD_VAR 0 1
17937: PUSH
17938: LD_INT 1
17940: PPUSH
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 12
17950: ARRAY
17951: PPUSH
17952: LD_INT 1
17954: PPUSH
17955: LD_INT 4
17957: PPUSH
17958: CALL_OW 12
17962: PPUSH
17963: LD_INT 3000
17965: PPUSH
17966: LD_INT 9000
17968: PPUSH
17969: CALL_OW 12
17973: PPUSH
17974: CALL_OW 492
// end ;
17978: PPOPN 1
17980: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17981: LD_EXP 36
17985: PUSH
17986: LD_EXP 51
17990: AND
17991: IFFALSE 18011
17993: GO 17995
17995: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17996: LD_INT 1
17998: PPUSH
17999: LD_OWVAR 2
18003: PPUSH
18004: LD_INT 0
18006: PPUSH
18007: CALL_OW 324
18011: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18012: LD_EXP 36
18016: PUSH
18017: LD_EXP 52
18021: AND
18022: IFFALSE 18105
18024: GO 18026
18026: DISABLE
18027: LD_INT 0
18029: PPUSH
18030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18031: LD_ADDR_VAR 0 2
18035: PUSH
18036: LD_INT 22
18038: PUSH
18039: LD_OWVAR 2
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 21
18050: PUSH
18051: LD_INT 3
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 69
18066: ST_TO_ADDR
// if not tmp then
18067: LD_VAR 0 2
18071: NOT
18072: IFFALSE 18076
// exit ;
18074: GO 18105
// for i in tmp do
18076: LD_ADDR_VAR 0 1
18080: PUSH
18081: LD_VAR 0 2
18085: PUSH
18086: FOR_IN
18087: IFFALSE 18103
// SetBLevel ( i , 10 ) ;
18089: LD_VAR 0 1
18093: PPUSH
18094: LD_INT 10
18096: PPUSH
18097: CALL_OW 241
18101: GO 18086
18103: POP
18104: POP
// end ;
18105: PPOPN 2
18107: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18108: LD_EXP 36
18112: PUSH
18113: LD_EXP 53
18117: AND
18118: IFFALSE 18229
18120: GO 18122
18122: DISABLE
18123: LD_INT 0
18125: PPUSH
18126: PPUSH
18127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18128: LD_ADDR_VAR 0 3
18132: PUSH
18133: LD_INT 22
18135: PUSH
18136: LD_OWVAR 2
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 25
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PPUSH
18159: CALL_OW 69
18163: ST_TO_ADDR
// if not tmp then
18164: LD_VAR 0 3
18168: NOT
18169: IFFALSE 18173
// exit ;
18171: GO 18229
// un := tmp [ rand ( 1 , tmp ) ] ;
18173: LD_ADDR_VAR 0 2
18177: PUSH
18178: LD_VAR 0 3
18182: PUSH
18183: LD_INT 1
18185: PPUSH
18186: LD_VAR 0 3
18190: PPUSH
18191: CALL_OW 12
18195: ARRAY
18196: ST_TO_ADDR
// if Crawls ( un ) then
18197: LD_VAR 0 2
18201: PPUSH
18202: CALL_OW 318
18206: IFFALSE 18217
// ComWalk ( un ) ;
18208: LD_VAR 0 2
18212: PPUSH
18213: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18217: LD_VAR 0 2
18221: PPUSH
18222: LD_INT 5
18224: PPUSH
18225: CALL_OW 336
// end ;
18229: PPOPN 3
18231: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18232: LD_EXP 36
18236: PUSH
18237: LD_EXP 54
18241: AND
18242: PUSH
18243: LD_OWVAR 67
18247: PUSH
18248: LD_INT 3
18250: LESS
18251: AND
18252: IFFALSE 18271
18254: GO 18256
18256: DISABLE
// Difficulty := Difficulty + 1 ;
18257: LD_ADDR_OWVAR 67
18261: PUSH
18262: LD_OWVAR 67
18266: PUSH
18267: LD_INT 1
18269: PLUS
18270: ST_TO_ADDR
18271: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18272: LD_EXP 36
18276: PUSH
18277: LD_EXP 55
18281: AND
18282: IFFALSE 18385
18284: GO 18286
18286: DISABLE
18287: LD_INT 0
18289: PPUSH
// begin for i := 1 to 5 do
18290: LD_ADDR_VAR 0 1
18294: PUSH
18295: DOUBLE
18296: LD_INT 1
18298: DEC
18299: ST_TO_ADDR
18300: LD_INT 5
18302: PUSH
18303: FOR_TO
18304: IFFALSE 18383
// begin uc_nation := nation_nature ;
18306: LD_ADDR_OWVAR 21
18310: PUSH
18311: LD_INT 0
18313: ST_TO_ADDR
// uc_side := 0 ;
18314: LD_ADDR_OWVAR 20
18318: PUSH
18319: LD_INT 0
18321: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18322: LD_ADDR_OWVAR 29
18326: PUSH
18327: LD_INT 12
18329: PUSH
18330: LD_INT 12
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: ST_TO_ADDR
// hc_agressivity := 20 ;
18337: LD_ADDR_OWVAR 35
18341: PUSH
18342: LD_INT 20
18344: ST_TO_ADDR
// hc_class := class_tiger ;
18345: LD_ADDR_OWVAR 28
18349: PUSH
18350: LD_INT 14
18352: ST_TO_ADDR
// hc_gallery :=  ;
18353: LD_ADDR_OWVAR 33
18357: PUSH
18358: LD_STRING 
18360: ST_TO_ADDR
// hc_name :=  ;
18361: LD_ADDR_OWVAR 26
18365: PUSH
18366: LD_STRING 
18368: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18369: CALL_OW 44
18373: PPUSH
18374: LD_INT 0
18376: PPUSH
18377: CALL_OW 51
// end ;
18381: GO 18303
18383: POP
18384: POP
// end ;
18385: PPOPN 1
18387: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18388: LD_EXP 36
18392: PUSH
18393: LD_EXP 56
18397: AND
18398: IFFALSE 18407
18400: GO 18402
18402: DISABLE
// StreamSibBomb ;
18403: CALL 18408 0 0
18407: END
// export function StreamSibBomb ; var i , x , y ; begin
18408: LD_INT 0
18410: PPUSH
18411: PPUSH
18412: PPUSH
18413: PPUSH
// result := false ;
18414: LD_ADDR_VAR 0 1
18418: PUSH
18419: LD_INT 0
18421: ST_TO_ADDR
// for i := 1 to 16 do
18422: LD_ADDR_VAR 0 2
18426: PUSH
18427: DOUBLE
18428: LD_INT 1
18430: DEC
18431: ST_TO_ADDR
18432: LD_INT 16
18434: PUSH
18435: FOR_TO
18436: IFFALSE 18635
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18438: LD_ADDR_VAR 0 3
18442: PUSH
18443: LD_INT 10
18445: PUSH
18446: LD_INT 20
18448: PUSH
18449: LD_INT 30
18451: PUSH
18452: LD_INT 40
18454: PUSH
18455: LD_INT 50
18457: PUSH
18458: LD_INT 60
18460: PUSH
18461: LD_INT 70
18463: PUSH
18464: LD_INT 80
18466: PUSH
18467: LD_INT 90
18469: PUSH
18470: LD_INT 100
18472: PUSH
18473: LD_INT 110
18475: PUSH
18476: LD_INT 120
18478: PUSH
18479: LD_INT 130
18481: PUSH
18482: LD_INT 140
18484: PUSH
18485: LD_INT 150
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: PPUSH
18508: LD_INT 15
18510: PPUSH
18511: CALL_OW 12
18515: ARRAY
18516: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18517: LD_ADDR_VAR 0 4
18521: PUSH
18522: LD_INT 10
18524: PUSH
18525: LD_INT 20
18527: PUSH
18528: LD_INT 30
18530: PUSH
18531: LD_INT 40
18533: PUSH
18534: LD_INT 50
18536: PUSH
18537: LD_INT 60
18539: PUSH
18540: LD_INT 70
18542: PUSH
18543: LD_INT 80
18545: PUSH
18546: LD_INT 90
18548: PUSH
18549: LD_INT 100
18551: PUSH
18552: LD_INT 110
18554: PUSH
18555: LD_INT 120
18557: PUSH
18558: LD_INT 130
18560: PUSH
18561: LD_INT 140
18563: PUSH
18564: LD_INT 150
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: PPUSH
18587: LD_INT 15
18589: PPUSH
18590: CALL_OW 12
18594: ARRAY
18595: ST_TO_ADDR
// if ValidHex ( x , y ) then
18596: LD_VAR 0 3
18600: PPUSH
18601: LD_VAR 0 4
18605: PPUSH
18606: CALL_OW 488
18610: IFFALSE 18633
// begin result := [ x , y ] ;
18612: LD_ADDR_VAR 0 1
18616: PUSH
18617: LD_VAR 0 3
18621: PUSH
18622: LD_VAR 0 4
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: ST_TO_ADDR
// break ;
18631: GO 18635
// end ; end ;
18633: GO 18435
18635: POP
18636: POP
// if result then
18637: LD_VAR 0 1
18641: IFFALSE 18701
// begin ToLua ( playSibBomb() ) ;
18643: LD_STRING playSibBomb()
18645: PPUSH
18646: CALL_OW 559
// wait ( 0 0$14 ) ;
18650: LD_INT 490
18652: PPUSH
18653: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18657: LD_VAR 0 1
18661: PUSH
18662: LD_INT 1
18664: ARRAY
18665: PPUSH
18666: LD_VAR 0 1
18670: PUSH
18671: LD_INT 2
18673: ARRAY
18674: PPUSH
18675: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18679: LD_VAR 0 1
18683: PUSH
18684: LD_INT 1
18686: ARRAY
18687: PPUSH
18688: LD_VAR 0 1
18692: PUSH
18693: LD_INT 2
18695: ARRAY
18696: PPUSH
18697: CALL_OW 429
// end ; end ;
18701: LD_VAR 0 1
18705: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18706: LD_EXP 36
18710: PUSH
18711: LD_EXP 58
18715: AND
18716: IFFALSE 18728
18718: GO 18720
18720: DISABLE
// YouLost (  ) ;
18721: LD_STRING 
18723: PPUSH
18724: CALL_OW 104
18728: END
// every 0 0$1 trigger StreamModeActive and sFog do
18729: LD_EXP 36
18733: PUSH
18734: LD_EXP 57
18738: AND
18739: IFFALSE 18753
18741: GO 18743
18743: DISABLE
// FogOff ( your_side ) ;
18744: LD_OWVAR 2
18748: PPUSH
18749: CALL_OW 344
18753: END
// every 0 0$1 trigger StreamModeActive and sSun do
18754: LD_EXP 36
18758: PUSH
18759: LD_EXP 59
18763: AND
18764: IFFALSE 18792
18766: GO 18768
18768: DISABLE
// begin solar_recharge_percent := 0 ;
18769: LD_ADDR_OWVAR 79
18773: PUSH
18774: LD_INT 0
18776: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18777: LD_INT 10500
18779: PPUSH
18780: CALL_OW 67
// solar_recharge_percent := 100 ;
18784: LD_ADDR_OWVAR 79
18788: PUSH
18789: LD_INT 100
18791: ST_TO_ADDR
// end ;
18792: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18793: LD_EXP 36
18797: PUSH
18798: LD_EXP 60
18802: AND
18803: IFFALSE 19042
18805: GO 18807
18807: DISABLE
18808: LD_INT 0
18810: PPUSH
18811: PPUSH
18812: PPUSH
// begin tmp := [ ] ;
18813: LD_ADDR_VAR 0 3
18817: PUSH
18818: EMPTY
18819: ST_TO_ADDR
// for i := 1 to 6 do
18820: LD_ADDR_VAR 0 1
18824: PUSH
18825: DOUBLE
18826: LD_INT 1
18828: DEC
18829: ST_TO_ADDR
18830: LD_INT 6
18832: PUSH
18833: FOR_TO
18834: IFFALSE 18939
// begin uc_nation := nation_nature ;
18836: LD_ADDR_OWVAR 21
18840: PUSH
18841: LD_INT 0
18843: ST_TO_ADDR
// uc_side := 0 ;
18844: LD_ADDR_OWVAR 20
18848: PUSH
18849: LD_INT 0
18851: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18852: LD_ADDR_OWVAR 29
18856: PUSH
18857: LD_INT 12
18859: PUSH
18860: LD_INT 12
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: ST_TO_ADDR
// hc_agressivity := 20 ;
18867: LD_ADDR_OWVAR 35
18871: PUSH
18872: LD_INT 20
18874: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18875: LD_ADDR_OWVAR 28
18879: PUSH
18880: LD_INT 17
18882: ST_TO_ADDR
// hc_gallery :=  ;
18883: LD_ADDR_OWVAR 33
18887: PUSH
18888: LD_STRING 
18890: ST_TO_ADDR
// hc_name :=  ;
18891: LD_ADDR_OWVAR 26
18895: PUSH
18896: LD_STRING 
18898: ST_TO_ADDR
// un := CreateHuman ;
18899: LD_ADDR_VAR 0 2
18903: PUSH
18904: CALL_OW 44
18908: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18909: LD_VAR 0 2
18913: PPUSH
18914: LD_INT 1
18916: PPUSH
18917: CALL_OW 51
// tmp := tmp ^ un ;
18921: LD_ADDR_VAR 0 3
18925: PUSH
18926: LD_VAR 0 3
18930: PUSH
18931: LD_VAR 0 2
18935: ADD
18936: ST_TO_ADDR
// end ;
18937: GO 18833
18939: POP
18940: POP
// repeat wait ( 0 0$1 ) ;
18941: LD_INT 35
18943: PPUSH
18944: CALL_OW 67
// for un in tmp do
18948: LD_ADDR_VAR 0 2
18952: PUSH
18953: LD_VAR 0 3
18957: PUSH
18958: FOR_IN
18959: IFFALSE 19033
// begin if IsDead ( un ) then
18961: LD_VAR 0 2
18965: PPUSH
18966: CALL_OW 301
18970: IFFALSE 18990
// begin tmp := tmp diff un ;
18972: LD_ADDR_VAR 0 3
18976: PUSH
18977: LD_VAR 0 3
18981: PUSH
18982: LD_VAR 0 2
18986: DIFF
18987: ST_TO_ADDR
// continue ;
18988: GO 18958
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18990: LD_VAR 0 2
18994: PPUSH
18995: LD_INT 3
18997: PUSH
18998: LD_INT 22
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 69
19016: PPUSH
19017: LD_VAR 0 2
19021: PPUSH
19022: CALL_OW 74
19026: PPUSH
19027: CALL_OW 115
// end ;
19031: GO 18958
19033: POP
19034: POP
// until not tmp ;
19035: LD_VAR 0 3
19039: NOT
19040: IFFALSE 18941
// end ;
19042: PPOPN 3
19044: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19045: LD_EXP 36
19049: PUSH
19050: LD_EXP 61
19054: AND
19055: IFFALSE 19109
19057: GO 19059
19059: DISABLE
// begin ToLua ( displayTroll(); ) ;
19060: LD_STRING displayTroll();
19062: PPUSH
19063: CALL_OW 559
// wait ( 3 3$00 ) ;
19067: LD_INT 6300
19069: PPUSH
19070: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19074: LD_STRING hideTroll();
19076: PPUSH
19077: CALL_OW 559
// wait ( 1 1$00 ) ;
19081: LD_INT 2100
19083: PPUSH
19084: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19088: LD_STRING displayTroll();
19090: PPUSH
19091: CALL_OW 559
// wait ( 1 1$00 ) ;
19095: LD_INT 2100
19097: PPUSH
19098: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19102: LD_STRING hideTroll();
19104: PPUSH
19105: CALL_OW 559
// end ;
19109: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19110: LD_EXP 36
19114: PUSH
19115: LD_EXP 62
19119: AND
19120: IFFALSE 19183
19122: GO 19124
19124: DISABLE
19125: LD_INT 0
19127: PPUSH
// begin p := 0 ;
19128: LD_ADDR_VAR 0 1
19132: PUSH
19133: LD_INT 0
19135: ST_TO_ADDR
// repeat game_speed := 1 ;
19136: LD_ADDR_OWVAR 65
19140: PUSH
19141: LD_INT 1
19143: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19144: LD_INT 35
19146: PPUSH
19147: CALL_OW 67
// p := p + 1 ;
19151: LD_ADDR_VAR 0 1
19155: PUSH
19156: LD_VAR 0 1
19160: PUSH
19161: LD_INT 1
19163: PLUS
19164: ST_TO_ADDR
// until p >= 60 ;
19165: LD_VAR 0 1
19169: PUSH
19170: LD_INT 60
19172: GREATEREQUAL
19173: IFFALSE 19136
// game_speed := 4 ;
19175: LD_ADDR_OWVAR 65
19179: PUSH
19180: LD_INT 4
19182: ST_TO_ADDR
// end ;
19183: PPOPN 1
19185: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19186: LD_EXP 36
19190: PUSH
19191: LD_EXP 63
19195: AND
19196: IFFALSE 19342
19198: GO 19200
19200: DISABLE
19201: LD_INT 0
19203: PPUSH
19204: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19205: LD_ADDR_VAR 0 1
19209: PUSH
19210: LD_INT 22
19212: PUSH
19213: LD_OWVAR 2
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: LD_INT 30
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 30
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: LIST
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PPUSH
19254: CALL_OW 69
19258: ST_TO_ADDR
// if not depot then
19259: LD_VAR 0 1
19263: NOT
19264: IFFALSE 19268
// exit ;
19266: GO 19342
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19268: LD_ADDR_VAR 0 2
19272: PUSH
19273: LD_VAR 0 1
19277: PUSH
19278: LD_INT 1
19280: PPUSH
19281: LD_VAR 0 1
19285: PPUSH
19286: CALL_OW 12
19290: ARRAY
19291: PPUSH
19292: CALL_OW 274
19296: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19297: LD_VAR 0 2
19301: PPUSH
19302: LD_INT 1
19304: PPUSH
19305: LD_INT 0
19307: PPUSH
19308: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19312: LD_VAR 0 2
19316: PPUSH
19317: LD_INT 2
19319: PPUSH
19320: LD_INT 0
19322: PPUSH
19323: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19327: LD_VAR 0 2
19331: PPUSH
19332: LD_INT 3
19334: PPUSH
19335: LD_INT 0
19337: PPUSH
19338: CALL_OW 277
// end ;
19342: PPOPN 2
19344: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19345: LD_EXP 36
19349: PUSH
19350: LD_EXP 64
19354: AND
19355: IFFALSE 19452
19357: GO 19359
19359: DISABLE
19360: LD_INT 0
19362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19363: LD_ADDR_VAR 0 1
19367: PUSH
19368: LD_INT 22
19370: PUSH
19371: LD_OWVAR 2
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 21
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 3
19392: PUSH
19393: LD_INT 23
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: ST_TO_ADDR
// if not tmp then
19417: LD_VAR 0 1
19421: NOT
19422: IFFALSE 19426
// exit ;
19424: GO 19452
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19426: LD_VAR 0 1
19430: PUSH
19431: LD_INT 1
19433: PPUSH
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL_OW 12
19443: ARRAY
19444: PPUSH
19445: LD_INT 200
19447: PPUSH
19448: CALL_OW 234
// end ;
19452: PPOPN 1
19454: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19455: LD_EXP 36
19459: PUSH
19460: LD_EXP 65
19464: AND
19465: IFFALSE 19544
19467: GO 19469
19469: DISABLE
19470: LD_INT 0
19472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19473: LD_ADDR_VAR 0 1
19477: PUSH
19478: LD_INT 22
19480: PUSH
19481: LD_OWVAR 2
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 21
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: ST_TO_ADDR
// if not tmp then
19509: LD_VAR 0 1
19513: NOT
19514: IFFALSE 19518
// exit ;
19516: GO 19544
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19518: LD_VAR 0 1
19522: PUSH
19523: LD_INT 1
19525: PPUSH
19526: LD_VAR 0 1
19530: PPUSH
19531: CALL_OW 12
19535: ARRAY
19536: PPUSH
19537: LD_INT 60
19539: PPUSH
19540: CALL_OW 234
// end ;
19544: PPOPN 1
19546: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19547: LD_EXP 36
19551: PUSH
19552: LD_EXP 66
19556: AND
19557: IFFALSE 19656
19559: GO 19561
19561: DISABLE
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
// begin enable ;
19566: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19567: LD_ADDR_VAR 0 1
19571: PUSH
19572: LD_INT 22
19574: PUSH
19575: LD_OWVAR 2
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 61
19586: PUSH
19587: EMPTY
19588: LIST
19589: PUSH
19590: LD_INT 33
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: PPUSH
19605: CALL_OW 69
19609: ST_TO_ADDR
// if not tmp then
19610: LD_VAR 0 1
19614: NOT
19615: IFFALSE 19619
// exit ;
19617: GO 19656
// for i in tmp do
19619: LD_ADDR_VAR 0 2
19623: PUSH
19624: LD_VAR 0 1
19628: PUSH
19629: FOR_IN
19630: IFFALSE 19654
// if IsControledBy ( i ) then
19632: LD_VAR 0 2
19636: PPUSH
19637: CALL_OW 312
19641: IFFALSE 19652
// ComUnlink ( i ) ;
19643: LD_VAR 0 2
19647: PPUSH
19648: CALL_OW 136
19652: GO 19629
19654: POP
19655: POP
// end ;
19656: PPOPN 2
19658: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19659: LD_EXP 36
19663: PUSH
19664: LD_EXP 67
19668: AND
19669: IFFALSE 19809
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
19677: PPUSH
// begin ToLua ( displayPowell(); ) ;
19678: LD_STRING displayPowell();
19680: PPUSH
19681: CALL_OW 559
// uc_side := 0 ;
19685: LD_ADDR_OWVAR 20
19689: PUSH
19690: LD_INT 0
19692: ST_TO_ADDR
// uc_nation := 2 ;
19693: LD_ADDR_OWVAR 21
19697: PUSH
19698: LD_INT 2
19700: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19701: LD_ADDR_OWVAR 37
19705: PUSH
19706: LD_INT 14
19708: ST_TO_ADDR
// vc_engine := engine_siberite ;
19709: LD_ADDR_OWVAR 39
19713: PUSH
19714: LD_INT 3
19716: ST_TO_ADDR
// vc_control := control_apeman ;
19717: LD_ADDR_OWVAR 38
19721: PUSH
19722: LD_INT 5
19724: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19725: LD_ADDR_OWVAR 40
19729: PUSH
19730: LD_INT 29
19732: ST_TO_ADDR
// un := CreateVehicle ;
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: CALL_OW 45
19742: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19743: LD_VAR 0 2
19747: PPUSH
19748: LD_INT 1
19750: PPUSH
19751: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19755: LD_INT 35
19757: PPUSH
19758: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19762: LD_VAR 0 2
19766: PPUSH
19767: LD_INT 22
19769: PUSH
19770: LD_OWVAR 2
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PPUSH
19779: CALL_OW 69
19783: PPUSH
19784: LD_VAR 0 2
19788: PPUSH
19789: CALL_OW 74
19793: PPUSH
19794: CALL_OW 115
// until IsDead ( un ) ;
19798: LD_VAR 0 2
19802: PPUSH
19803: CALL_OW 301
19807: IFFALSE 19755
// end ;
19809: PPOPN 2
19811: END
// every 0 0$1 trigger StreamModeActive and sStu do
19812: LD_EXP 36
19816: PUSH
19817: LD_EXP 75
19821: AND
19822: IFFALSE 19838
19824: GO 19826
19826: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19827: LD_STRING displayStucuk();
19829: PPUSH
19830: CALL_OW 559
// ResetFog ;
19834: CALL_OW 335
// end ;
19838: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19839: LD_EXP 36
19843: PUSH
19844: LD_EXP 68
19848: AND
19849: IFFALSE 19990
19851: GO 19853
19853: DISABLE
19854: LD_INT 0
19856: PPUSH
19857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19858: LD_ADDR_VAR 0 2
19862: PUSH
19863: LD_INT 22
19865: PUSH
19866: LD_OWVAR 2
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 21
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PPUSH
19889: CALL_OW 69
19893: ST_TO_ADDR
// if not tmp then
19894: LD_VAR 0 2
19898: NOT
19899: IFFALSE 19903
// exit ;
19901: GO 19990
// un := tmp [ rand ( 1 , tmp ) ] ;
19903: LD_ADDR_VAR 0 1
19907: PUSH
19908: LD_VAR 0 2
19912: PUSH
19913: LD_INT 1
19915: PPUSH
19916: LD_VAR 0 2
19920: PPUSH
19921: CALL_OW 12
19925: ARRAY
19926: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19927: LD_VAR 0 1
19931: PPUSH
19932: LD_INT 0
19934: PPUSH
19935: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19939: LD_VAR 0 1
19943: PPUSH
19944: LD_OWVAR 3
19948: PUSH
19949: LD_VAR 0 1
19953: DIFF
19954: PPUSH
19955: LD_VAR 0 1
19959: PPUSH
19960: CALL_OW 74
19964: PPUSH
19965: CALL_OW 115
// wait ( 0 0$20 ) ;
19969: LD_INT 700
19971: PPUSH
19972: CALL_OW 67
// SetSide ( un , your_side ) ;
19976: LD_VAR 0 1
19980: PPUSH
19981: LD_OWVAR 2
19985: PPUSH
19986: CALL_OW 235
// end ;
19990: PPOPN 2
19992: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19993: LD_EXP 36
19997: PUSH
19998: LD_EXP 69
20002: AND
20003: IFFALSE 20109
20005: GO 20007
20007: DISABLE
20008: LD_INT 0
20010: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20011: LD_ADDR_VAR 0 1
20015: PUSH
20016: LD_INT 22
20018: PUSH
20019: LD_OWVAR 2
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: LD_INT 30
20033: PUSH
20034: LD_INT 0
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 30
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: LIST
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PPUSH
20060: CALL_OW 69
20064: ST_TO_ADDR
// if not depot then
20065: LD_VAR 0 1
20069: NOT
20070: IFFALSE 20074
// exit ;
20072: GO 20109
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20074: LD_VAR 0 1
20078: PUSH
20079: LD_INT 1
20081: ARRAY
20082: PPUSH
20083: CALL_OW 250
20087: PPUSH
20088: LD_VAR 0 1
20092: PUSH
20093: LD_INT 1
20095: ARRAY
20096: PPUSH
20097: CALL_OW 251
20101: PPUSH
20102: LD_INT 70
20104: PPUSH
20105: CALL_OW 495
// end ;
20109: PPOPN 1
20111: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20112: LD_EXP 36
20116: PUSH
20117: LD_EXP 70
20121: AND
20122: IFFALSE 20333
20124: GO 20126
20126: DISABLE
20127: LD_INT 0
20129: PPUSH
20130: PPUSH
20131: PPUSH
20132: PPUSH
20133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20134: LD_ADDR_VAR 0 5
20138: PUSH
20139: LD_INT 22
20141: PUSH
20142: LD_OWVAR 2
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 21
20153: PUSH
20154: LD_INT 1
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PPUSH
20165: CALL_OW 69
20169: ST_TO_ADDR
// if not tmp then
20170: LD_VAR 0 5
20174: NOT
20175: IFFALSE 20179
// exit ;
20177: GO 20333
// for i in tmp do
20179: LD_ADDR_VAR 0 1
20183: PUSH
20184: LD_VAR 0 5
20188: PUSH
20189: FOR_IN
20190: IFFALSE 20331
// begin d := rand ( 0 , 5 ) ;
20192: LD_ADDR_VAR 0 4
20196: PUSH
20197: LD_INT 0
20199: PPUSH
20200: LD_INT 5
20202: PPUSH
20203: CALL_OW 12
20207: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20208: LD_ADDR_VAR 0 2
20212: PUSH
20213: LD_VAR 0 1
20217: PPUSH
20218: CALL_OW 250
20222: PPUSH
20223: LD_VAR 0 4
20227: PPUSH
20228: LD_INT 3
20230: PPUSH
20231: LD_INT 12
20233: PPUSH
20234: CALL_OW 12
20238: PPUSH
20239: CALL_OW 272
20243: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20244: LD_ADDR_VAR 0 3
20248: PUSH
20249: LD_VAR 0 1
20253: PPUSH
20254: CALL_OW 251
20258: PPUSH
20259: LD_VAR 0 4
20263: PPUSH
20264: LD_INT 3
20266: PPUSH
20267: LD_INT 12
20269: PPUSH
20270: CALL_OW 12
20274: PPUSH
20275: CALL_OW 273
20279: ST_TO_ADDR
// if ValidHex ( x , y ) then
20280: LD_VAR 0 2
20284: PPUSH
20285: LD_VAR 0 3
20289: PPUSH
20290: CALL_OW 488
20294: IFFALSE 20329
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20296: LD_VAR 0 1
20300: PPUSH
20301: LD_VAR 0 2
20305: PPUSH
20306: LD_VAR 0 3
20310: PPUSH
20311: LD_INT 3
20313: PPUSH
20314: LD_INT 6
20316: PPUSH
20317: CALL_OW 12
20321: PPUSH
20322: LD_INT 1
20324: PPUSH
20325: CALL_OW 483
// end ;
20329: GO 20189
20331: POP
20332: POP
// end ;
20333: PPOPN 5
20335: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20336: LD_EXP 36
20340: PUSH
20341: LD_EXP 71
20345: AND
20346: IFFALSE 20440
20348: GO 20350
20350: DISABLE
20351: LD_INT 0
20353: PPUSH
20354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20355: LD_ADDR_VAR 0 2
20359: PUSH
20360: LD_INT 22
20362: PUSH
20363: LD_OWVAR 2
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 32
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 21
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: LIST
20396: PPUSH
20397: CALL_OW 69
20401: ST_TO_ADDR
// if not tmp then
20402: LD_VAR 0 2
20406: NOT
20407: IFFALSE 20411
// exit ;
20409: GO 20440
// for i in tmp do
20411: LD_ADDR_VAR 0 1
20415: PUSH
20416: LD_VAR 0 2
20420: PUSH
20421: FOR_IN
20422: IFFALSE 20438
// SetFuel ( i , 0 ) ;
20424: LD_VAR 0 1
20428: PPUSH
20429: LD_INT 0
20431: PPUSH
20432: CALL_OW 240
20436: GO 20421
20438: POP
20439: POP
// end ;
20440: PPOPN 2
20442: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20443: LD_EXP 36
20447: PUSH
20448: LD_EXP 72
20452: AND
20453: IFFALSE 20519
20455: GO 20457
20457: DISABLE
20458: LD_INT 0
20460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20461: LD_ADDR_VAR 0 1
20465: PUSH
20466: LD_INT 22
20468: PUSH
20469: LD_OWVAR 2
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 30
20480: PUSH
20481: LD_INT 29
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PPUSH
20492: CALL_OW 69
20496: ST_TO_ADDR
// if not tmp then
20497: LD_VAR 0 1
20501: NOT
20502: IFFALSE 20506
// exit ;
20504: GO 20519
// DestroyUnit ( tmp [ 1 ] ) ;
20506: LD_VAR 0 1
20510: PUSH
20511: LD_INT 1
20513: ARRAY
20514: PPUSH
20515: CALL_OW 65
// end ;
20519: PPOPN 1
20521: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20522: LD_EXP 36
20526: PUSH
20527: LD_EXP 74
20531: AND
20532: IFFALSE 20661
20534: GO 20536
20536: DISABLE
20537: LD_INT 0
20539: PPUSH
// begin uc_side := 0 ;
20540: LD_ADDR_OWVAR 20
20544: PUSH
20545: LD_INT 0
20547: ST_TO_ADDR
// uc_nation := nation_arabian ;
20548: LD_ADDR_OWVAR 21
20552: PUSH
20553: LD_INT 2
20555: ST_TO_ADDR
// hc_gallery :=  ;
20556: LD_ADDR_OWVAR 33
20560: PUSH
20561: LD_STRING 
20563: ST_TO_ADDR
// hc_name :=  ;
20564: LD_ADDR_OWVAR 26
20568: PUSH
20569: LD_STRING 
20571: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20572: LD_INT 1
20574: PPUSH
20575: LD_INT 11
20577: PPUSH
20578: LD_INT 10
20580: PPUSH
20581: CALL_OW 380
// un := CreateHuman ;
20585: LD_ADDR_VAR 0 1
20589: PUSH
20590: CALL_OW 44
20594: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20595: LD_VAR 0 1
20599: PPUSH
20600: LD_INT 1
20602: PPUSH
20603: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20607: LD_INT 35
20609: PPUSH
20610: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20614: LD_VAR 0 1
20618: PPUSH
20619: LD_INT 22
20621: PUSH
20622: LD_OWVAR 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PPUSH
20631: CALL_OW 69
20635: PPUSH
20636: LD_VAR 0 1
20640: PPUSH
20641: CALL_OW 74
20645: PPUSH
20646: CALL_OW 115
// until IsDead ( un ) ;
20650: LD_VAR 0 1
20654: PPUSH
20655: CALL_OW 301
20659: IFFALSE 20607
// end ;
20661: PPOPN 1
20663: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20664: LD_EXP 36
20668: PUSH
20669: LD_EXP 76
20673: AND
20674: IFFALSE 20686
20676: GO 20678
20678: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20679: LD_STRING earthquake(getX(game), 0, 32)
20681: PPUSH
20682: CALL_OW 559
20686: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20687: LD_EXP 36
20691: PUSH
20692: LD_EXP 77
20696: AND
20697: IFFALSE 20788
20699: GO 20701
20701: DISABLE
20702: LD_INT 0
20704: PPUSH
// begin enable ;
20705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20706: LD_ADDR_VAR 0 1
20710: PUSH
20711: LD_INT 22
20713: PUSH
20714: LD_OWVAR 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 21
20725: PUSH
20726: LD_INT 2
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 33
20735: PUSH
20736: LD_INT 3
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: PPUSH
20748: CALL_OW 69
20752: ST_TO_ADDR
// if not tmp then
20753: LD_VAR 0 1
20757: NOT
20758: IFFALSE 20762
// exit ;
20760: GO 20788
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20762: LD_VAR 0 1
20766: PUSH
20767: LD_INT 1
20769: PPUSH
20770: LD_VAR 0 1
20774: PPUSH
20775: CALL_OW 12
20779: ARRAY
20780: PPUSH
20781: LD_INT 1
20783: PPUSH
20784: CALL_OW 234
// end ;
20788: PPOPN 1
20790: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20791: LD_EXP 36
20795: PUSH
20796: LD_EXP 78
20800: AND
20801: IFFALSE 20942
20803: GO 20805
20805: DISABLE
20806: LD_INT 0
20808: PPUSH
20809: PPUSH
20810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20811: LD_ADDR_VAR 0 3
20815: PUSH
20816: LD_INT 22
20818: PUSH
20819: LD_OWVAR 2
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 25
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PPUSH
20842: CALL_OW 69
20846: ST_TO_ADDR
// if not tmp then
20847: LD_VAR 0 3
20851: NOT
20852: IFFALSE 20856
// exit ;
20854: GO 20942
// un := tmp [ rand ( 1 , tmp ) ] ;
20856: LD_ADDR_VAR 0 2
20860: PUSH
20861: LD_VAR 0 3
20865: PUSH
20866: LD_INT 1
20868: PPUSH
20869: LD_VAR 0 3
20873: PPUSH
20874: CALL_OW 12
20878: ARRAY
20879: ST_TO_ADDR
// if Crawls ( un ) then
20880: LD_VAR 0 2
20884: PPUSH
20885: CALL_OW 318
20889: IFFALSE 20900
// ComWalk ( un ) ;
20891: LD_VAR 0 2
20895: PPUSH
20896: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20900: LD_VAR 0 2
20904: PPUSH
20905: LD_INT 9
20907: PPUSH
20908: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20912: LD_INT 28
20914: PPUSH
20915: LD_OWVAR 2
20919: PPUSH
20920: LD_INT 2
20922: PPUSH
20923: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20927: LD_INT 29
20929: PPUSH
20930: LD_OWVAR 2
20934: PPUSH
20935: LD_INT 2
20937: PPUSH
20938: CALL_OW 322
// end ;
20942: PPOPN 3
20944: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20945: LD_EXP 36
20949: PUSH
20950: LD_EXP 79
20954: AND
20955: IFFALSE 21066
20957: GO 20959
20959: DISABLE
20960: LD_INT 0
20962: PPUSH
20963: PPUSH
20964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20965: LD_ADDR_VAR 0 3
20969: PUSH
20970: LD_INT 22
20972: PUSH
20973: LD_OWVAR 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 25
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PPUSH
20996: CALL_OW 69
21000: ST_TO_ADDR
// if not tmp then
21001: LD_VAR 0 3
21005: NOT
21006: IFFALSE 21010
// exit ;
21008: GO 21066
// un := tmp [ rand ( 1 , tmp ) ] ;
21010: LD_ADDR_VAR 0 2
21014: PUSH
21015: LD_VAR 0 3
21019: PUSH
21020: LD_INT 1
21022: PPUSH
21023: LD_VAR 0 3
21027: PPUSH
21028: CALL_OW 12
21032: ARRAY
21033: ST_TO_ADDR
// if Crawls ( un ) then
21034: LD_VAR 0 2
21038: PPUSH
21039: CALL_OW 318
21043: IFFALSE 21054
// ComWalk ( un ) ;
21045: LD_VAR 0 2
21049: PPUSH
21050: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21054: LD_VAR 0 2
21058: PPUSH
21059: LD_INT 8
21061: PPUSH
21062: CALL_OW 336
// end ;
21066: PPOPN 3
21068: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21069: LD_EXP 36
21073: PUSH
21074: LD_EXP 80
21078: AND
21079: IFFALSE 21223
21081: GO 21083
21083: DISABLE
21084: LD_INT 0
21086: PPUSH
21087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21088: LD_ADDR_VAR 0 2
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_OWVAR 2
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 21
21107: PUSH
21108: LD_INT 2
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 34
21120: PUSH
21121: LD_INT 12
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 34
21130: PUSH
21131: LD_INT 51
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 34
21140: PUSH
21141: LD_INT 32
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: LIST
21158: PPUSH
21159: CALL_OW 69
21163: ST_TO_ADDR
// if not tmp then
21164: LD_VAR 0 2
21168: NOT
21169: IFFALSE 21173
// exit ;
21171: GO 21223
// for i in tmp do
21173: LD_ADDR_VAR 0 1
21177: PUSH
21178: LD_VAR 0 2
21182: PUSH
21183: FOR_IN
21184: IFFALSE 21221
// if GetCargo ( i , mat_artifact ) = 0 then
21186: LD_VAR 0 1
21190: PPUSH
21191: LD_INT 4
21193: PPUSH
21194: CALL_OW 289
21198: PUSH
21199: LD_INT 0
21201: EQUAL
21202: IFFALSE 21219
// SetCargo ( i , mat_siberit , 100 ) ;
21204: LD_VAR 0 1
21208: PPUSH
21209: LD_INT 3
21211: PPUSH
21212: LD_INT 100
21214: PPUSH
21215: CALL_OW 290
21219: GO 21183
21221: POP
21222: POP
// end ;
21223: PPOPN 2
21225: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21226: LD_EXP 36
21230: PUSH
21231: LD_EXP 81
21235: AND
21236: IFFALSE 21419
21238: GO 21240
21240: DISABLE
21241: LD_INT 0
21243: PPUSH
21244: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 22
21252: PUSH
21253: LD_OWVAR 2
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PPUSH
21262: CALL_OW 69
21266: ST_TO_ADDR
// if not tmp then
21267: LD_VAR 0 2
21271: NOT
21272: IFFALSE 21276
// exit ;
21274: GO 21419
// for i := 1 to 2 do
21276: LD_ADDR_VAR 0 1
21280: PUSH
21281: DOUBLE
21282: LD_INT 1
21284: DEC
21285: ST_TO_ADDR
21286: LD_INT 2
21288: PUSH
21289: FOR_TO
21290: IFFALSE 21417
// begin uc_side := your_side ;
21292: LD_ADDR_OWVAR 20
21296: PUSH
21297: LD_OWVAR 2
21301: ST_TO_ADDR
// uc_nation := nation_american ;
21302: LD_ADDR_OWVAR 21
21306: PUSH
21307: LD_INT 1
21309: ST_TO_ADDR
// vc_chassis := us_morphling ;
21310: LD_ADDR_OWVAR 37
21314: PUSH
21315: LD_INT 5
21317: ST_TO_ADDR
// vc_engine := engine_siberite ;
21318: LD_ADDR_OWVAR 39
21322: PUSH
21323: LD_INT 3
21325: ST_TO_ADDR
// vc_control := control_computer ;
21326: LD_ADDR_OWVAR 38
21330: PUSH
21331: LD_INT 3
21333: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21334: LD_ADDR_OWVAR 40
21338: PUSH
21339: LD_INT 10
21341: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21342: LD_VAR 0 2
21346: PUSH
21347: LD_INT 1
21349: ARRAY
21350: PPUSH
21351: CALL_OW 310
21355: NOT
21356: IFFALSE 21403
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21358: CALL_OW 45
21362: PPUSH
21363: LD_VAR 0 2
21367: PUSH
21368: LD_INT 1
21370: ARRAY
21371: PPUSH
21372: CALL_OW 250
21376: PPUSH
21377: LD_VAR 0 2
21381: PUSH
21382: LD_INT 1
21384: ARRAY
21385: PPUSH
21386: CALL_OW 251
21390: PPUSH
21391: LD_INT 12
21393: PPUSH
21394: LD_INT 1
21396: PPUSH
21397: CALL_OW 50
21401: GO 21415
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21403: CALL_OW 45
21407: PPUSH
21408: LD_INT 1
21410: PPUSH
21411: CALL_OW 51
// end ;
21415: GO 21289
21417: POP
21418: POP
// end ;
21419: PPOPN 2
21421: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21422: LD_EXP 36
21426: PUSH
21427: LD_EXP 82
21431: AND
21432: IFFALSE 21654
21434: GO 21436
21436: DISABLE
21437: LD_INT 0
21439: PPUSH
21440: PPUSH
21441: PPUSH
21442: PPUSH
21443: PPUSH
21444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21445: LD_ADDR_VAR 0 6
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_OWVAR 2
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 21
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 3
21474: PUSH
21475: LD_INT 23
21477: PUSH
21478: LD_INT 0
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: PPUSH
21494: CALL_OW 69
21498: ST_TO_ADDR
// if not tmp then
21499: LD_VAR 0 6
21503: NOT
21504: IFFALSE 21508
// exit ;
21506: GO 21654
// s1 := rand ( 1 , 4 ) ;
21508: LD_ADDR_VAR 0 2
21512: PUSH
21513: LD_INT 1
21515: PPUSH
21516: LD_INT 4
21518: PPUSH
21519: CALL_OW 12
21523: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21524: LD_ADDR_VAR 0 4
21528: PUSH
21529: LD_VAR 0 6
21533: PUSH
21534: LD_INT 1
21536: ARRAY
21537: PPUSH
21538: LD_VAR 0 2
21542: PPUSH
21543: CALL_OW 259
21547: ST_TO_ADDR
// if s1 = 1 then
21548: LD_VAR 0 2
21552: PUSH
21553: LD_INT 1
21555: EQUAL
21556: IFFALSE 21576
// s2 := rand ( 2 , 4 ) else
21558: LD_ADDR_VAR 0 3
21562: PUSH
21563: LD_INT 2
21565: PPUSH
21566: LD_INT 4
21568: PPUSH
21569: CALL_OW 12
21573: ST_TO_ADDR
21574: GO 21584
// s2 := 1 ;
21576: LD_ADDR_VAR 0 3
21580: PUSH
21581: LD_INT 1
21583: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21584: LD_ADDR_VAR 0 5
21588: PUSH
21589: LD_VAR 0 6
21593: PUSH
21594: LD_INT 1
21596: ARRAY
21597: PPUSH
21598: LD_VAR 0 3
21602: PPUSH
21603: CALL_OW 259
21607: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21608: LD_VAR 0 6
21612: PUSH
21613: LD_INT 1
21615: ARRAY
21616: PPUSH
21617: LD_VAR 0 2
21621: PPUSH
21622: LD_VAR 0 5
21626: PPUSH
21627: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21631: LD_VAR 0 6
21635: PUSH
21636: LD_INT 1
21638: ARRAY
21639: PPUSH
21640: LD_VAR 0 3
21644: PPUSH
21645: LD_VAR 0 4
21649: PPUSH
21650: CALL_OW 237
// end ;
21654: PPOPN 6
21656: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21657: LD_EXP 36
21661: PUSH
21662: LD_EXP 83
21666: AND
21667: IFFALSE 21746
21669: GO 21671
21671: DISABLE
21672: LD_INT 0
21674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21675: LD_ADDR_VAR 0 1
21679: PUSH
21680: LD_INT 22
21682: PUSH
21683: LD_OWVAR 2
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 30
21694: PUSH
21695: LD_INT 3
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 69
21710: ST_TO_ADDR
// if not tmp then
21711: LD_VAR 0 1
21715: NOT
21716: IFFALSE 21720
// exit ;
21718: GO 21746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21720: LD_VAR 0 1
21724: PUSH
21725: LD_INT 1
21727: PPUSH
21728: LD_VAR 0 1
21732: PPUSH
21733: CALL_OW 12
21737: ARRAY
21738: PPUSH
21739: LD_INT 1
21741: PPUSH
21742: CALL_OW 234
// end ;
21746: PPOPN 1
21748: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21749: LD_EXP 36
21753: PUSH
21754: LD_EXP 84
21758: AND
21759: IFFALSE 21871
21761: GO 21763
21763: DISABLE
21764: LD_INT 0
21766: PPUSH
21767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21768: LD_ADDR_VAR 0 2
21772: PUSH
21773: LD_INT 22
21775: PUSH
21776: LD_OWVAR 2
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 30
21790: PUSH
21791: LD_INT 27
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 30
21800: PUSH
21801: LD_INT 26
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 30
21810: PUSH
21811: LD_INT 28
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PPUSH
21828: CALL_OW 69
21832: ST_TO_ADDR
// if not tmp then
21833: LD_VAR 0 2
21837: NOT
21838: IFFALSE 21842
// exit ;
21840: GO 21871
// for i in tmp do
21842: LD_ADDR_VAR 0 1
21846: PUSH
21847: LD_VAR 0 2
21851: PUSH
21852: FOR_IN
21853: IFFALSE 21869
// SetLives ( i , 1 ) ;
21855: LD_VAR 0 1
21859: PPUSH
21860: LD_INT 1
21862: PPUSH
21863: CALL_OW 234
21867: GO 21852
21869: POP
21870: POP
// end ;
21871: PPOPN 2
21873: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21874: LD_EXP 36
21878: PUSH
21879: LD_EXP 85
21883: AND
21884: IFFALSE 22158
21886: GO 21888
21888: DISABLE
21889: LD_INT 0
21891: PPUSH
21892: PPUSH
21893: PPUSH
// begin i := rand ( 1 , 7 ) ;
21894: LD_ADDR_VAR 0 1
21898: PUSH
21899: LD_INT 1
21901: PPUSH
21902: LD_INT 7
21904: PPUSH
21905: CALL_OW 12
21909: ST_TO_ADDR
// case i of 1 :
21910: LD_VAR 0 1
21914: PUSH
21915: LD_INT 1
21917: DOUBLE
21918: EQUAL
21919: IFTRUE 21923
21921: GO 21933
21923: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21924: LD_STRING earthquake(getX(game), 0, 32)
21926: PPUSH
21927: CALL_OW 559
21931: GO 22158
21933: LD_INT 2
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 21955
21941: POP
// begin ToLua ( displayStucuk(); ) ;
21942: LD_STRING displayStucuk();
21944: PPUSH
21945: CALL_OW 559
// ResetFog ;
21949: CALL_OW 335
// end ; 3 :
21953: GO 22158
21955: LD_INT 3
21957: DOUBLE
21958: EQUAL
21959: IFTRUE 21963
21961: GO 22067
21963: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21964: LD_ADDR_VAR 0 2
21968: PUSH
21969: LD_INT 22
21971: PUSH
21972: LD_OWVAR 2
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 25
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PPUSH
21995: CALL_OW 69
21999: ST_TO_ADDR
// if not tmp then
22000: LD_VAR 0 2
22004: NOT
22005: IFFALSE 22009
// exit ;
22007: GO 22158
// un := tmp [ rand ( 1 , tmp ) ] ;
22009: LD_ADDR_VAR 0 3
22013: PUSH
22014: LD_VAR 0 2
22018: PUSH
22019: LD_INT 1
22021: PPUSH
22022: LD_VAR 0 2
22026: PPUSH
22027: CALL_OW 12
22031: ARRAY
22032: ST_TO_ADDR
// if Crawls ( un ) then
22033: LD_VAR 0 3
22037: PPUSH
22038: CALL_OW 318
22042: IFFALSE 22053
// ComWalk ( un ) ;
22044: LD_VAR 0 3
22048: PPUSH
22049: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22053: LD_VAR 0 3
22057: PPUSH
22058: LD_INT 8
22060: PPUSH
22061: CALL_OW 336
// end ; 4 :
22065: GO 22158
22067: LD_INT 4
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22136
22075: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 22
22083: PUSH
22084: LD_OWVAR 2
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 30
22095: PUSH
22096: LD_INT 29
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PPUSH
22107: CALL_OW 69
22111: ST_TO_ADDR
// if not tmp then
22112: LD_VAR 0 2
22116: NOT
22117: IFFALSE 22121
// exit ;
22119: GO 22158
// DestroyUnit ( tmp [ 1 ] ) ;
22121: LD_VAR 0 2
22125: PUSH
22126: LD_INT 1
22128: ARRAY
22129: PPUSH
22130: CALL_OW 65
// end ; 5 .. 7 :
22134: GO 22158
22136: LD_INT 5
22138: DOUBLE
22139: GREATEREQUAL
22140: IFFALSE 22148
22142: LD_INT 7
22144: DOUBLE
22145: LESSEQUAL
22146: IFTRUE 22150
22148: GO 22157
22150: POP
// StreamSibBomb ; end ;
22151: CALL 18408 0 0
22155: GO 22158
22157: POP
// end ;
22158: PPOPN 3
22160: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22161: LD_EXP 36
22165: PUSH
22166: LD_EXP 86
22170: AND
22171: IFFALSE 22327
22173: GO 22175
22175: DISABLE
22176: LD_INT 0
22178: PPUSH
22179: PPUSH
22180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22181: LD_ADDR_VAR 0 2
22185: PUSH
22186: LD_INT 81
22188: PUSH
22189: LD_OWVAR 2
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: LD_INT 21
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 21
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: LIST
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PPUSH
22230: CALL_OW 69
22234: ST_TO_ADDR
// if not tmp then
22235: LD_VAR 0 2
22239: NOT
22240: IFFALSE 22244
// exit ;
22242: GO 22327
// p := 0 ;
22244: LD_ADDR_VAR 0 3
22248: PUSH
22249: LD_INT 0
22251: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22252: LD_INT 35
22254: PPUSH
22255: CALL_OW 67
// p := p + 1 ;
22259: LD_ADDR_VAR 0 3
22263: PUSH
22264: LD_VAR 0 3
22268: PUSH
22269: LD_INT 1
22271: PLUS
22272: ST_TO_ADDR
// for i in tmp do
22273: LD_ADDR_VAR 0 1
22277: PUSH
22278: LD_VAR 0 2
22282: PUSH
22283: FOR_IN
22284: IFFALSE 22315
// if GetLives ( i ) < 1000 then
22286: LD_VAR 0 1
22290: PPUSH
22291: CALL_OW 256
22295: PUSH
22296: LD_INT 1000
22298: LESS
22299: IFFALSE 22313
// SetLives ( i , 1000 ) ;
22301: LD_VAR 0 1
22305: PPUSH
22306: LD_INT 1000
22308: PPUSH
22309: CALL_OW 234
22313: GO 22283
22315: POP
22316: POP
// until p > 20 ;
22317: LD_VAR 0 3
22321: PUSH
22322: LD_INT 20
22324: GREATER
22325: IFFALSE 22252
// end ;
22327: PPOPN 3
22329: END
// every 0 0$1 trigger StreamModeActive and sTime do
22330: LD_EXP 36
22334: PUSH
22335: LD_EXP 87
22339: AND
22340: IFFALSE 22375
22342: GO 22344
22344: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22345: LD_INT 28
22347: PPUSH
22348: LD_OWVAR 2
22352: PPUSH
22353: LD_INT 2
22355: PPUSH
22356: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22360: LD_INT 30
22362: PPUSH
22363: LD_OWVAR 2
22367: PPUSH
22368: LD_INT 2
22370: PPUSH
22371: CALL_OW 322
// end ;
22375: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22376: LD_EXP 36
22380: PUSH
22381: LD_EXP 88
22385: AND
22386: IFFALSE 22507
22388: GO 22390
22390: DISABLE
22391: LD_INT 0
22393: PPUSH
22394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22395: LD_ADDR_VAR 0 2
22399: PUSH
22400: LD_INT 22
22402: PUSH
22403: LD_OWVAR 2
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 21
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 3
22424: PUSH
22425: LD_INT 23
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: PPUSH
22444: CALL_OW 69
22448: ST_TO_ADDR
// if not tmp then
22449: LD_VAR 0 2
22453: NOT
22454: IFFALSE 22458
// exit ;
22456: GO 22507
// for i in tmp do
22458: LD_ADDR_VAR 0 1
22462: PUSH
22463: LD_VAR 0 2
22467: PUSH
22468: FOR_IN
22469: IFFALSE 22505
// begin if Crawls ( i ) then
22471: LD_VAR 0 1
22475: PPUSH
22476: CALL_OW 318
22480: IFFALSE 22491
// ComWalk ( i ) ;
22482: LD_VAR 0 1
22486: PPUSH
22487: CALL_OW 138
// SetClass ( i , 2 ) ;
22491: LD_VAR 0 1
22495: PPUSH
22496: LD_INT 2
22498: PPUSH
22499: CALL_OW 336
// end ;
22503: GO 22468
22505: POP
22506: POP
// end ;
22507: PPOPN 2
22509: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22510: LD_EXP 36
22514: PUSH
22515: LD_EXP 89
22519: AND
22520: IFFALSE 22801
22522: GO 22524
22524: DISABLE
22525: LD_INT 0
22527: PPUSH
22528: PPUSH
22529: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22530: LD_OWVAR 2
22534: PPUSH
22535: LD_INT 9
22537: PPUSH
22538: LD_INT 1
22540: PPUSH
22541: LD_INT 1
22543: PPUSH
22544: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22548: LD_INT 9
22550: PPUSH
22551: LD_OWVAR 2
22555: PPUSH
22556: CALL_OW 343
// uc_side := 9 ;
22560: LD_ADDR_OWVAR 20
22564: PUSH
22565: LD_INT 9
22567: ST_TO_ADDR
// uc_nation := 2 ;
22568: LD_ADDR_OWVAR 21
22572: PUSH
22573: LD_INT 2
22575: ST_TO_ADDR
// hc_name := Dark Warrior ;
22576: LD_ADDR_OWVAR 26
22580: PUSH
22581: LD_STRING Dark Warrior
22583: ST_TO_ADDR
// hc_gallery :=  ;
22584: LD_ADDR_OWVAR 33
22588: PUSH
22589: LD_STRING 
22591: ST_TO_ADDR
// hc_noskilllimit := true ;
22592: LD_ADDR_OWVAR 76
22596: PUSH
22597: LD_INT 1
22599: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22600: LD_ADDR_OWVAR 31
22604: PUSH
22605: LD_INT 30
22607: PUSH
22608: LD_INT 30
22610: PUSH
22611: LD_INT 30
22613: PUSH
22614: LD_INT 30
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: ST_TO_ADDR
// un := CreateHuman ;
22623: LD_ADDR_VAR 0 3
22627: PUSH
22628: CALL_OW 44
22632: ST_TO_ADDR
// hc_noskilllimit := false ;
22633: LD_ADDR_OWVAR 76
22637: PUSH
22638: LD_INT 0
22640: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22641: LD_VAR 0 3
22645: PPUSH
22646: LD_INT 1
22648: PPUSH
22649: CALL_OW 51
// p := 0 ;
22653: LD_ADDR_VAR 0 2
22657: PUSH
22658: LD_INT 0
22660: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22661: LD_INT 35
22663: PPUSH
22664: CALL_OW 67
// p := p + 1 ;
22668: LD_ADDR_VAR 0 2
22672: PUSH
22673: LD_VAR 0 2
22677: PUSH
22678: LD_INT 1
22680: PLUS
22681: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22682: LD_VAR 0 3
22686: PPUSH
22687: CALL_OW 256
22691: PUSH
22692: LD_INT 1000
22694: LESS
22695: IFFALSE 22709
// SetLives ( un , 1000 ) ;
22697: LD_VAR 0 3
22701: PPUSH
22702: LD_INT 1000
22704: PPUSH
22705: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22709: LD_VAR 0 3
22713: PPUSH
22714: LD_INT 81
22716: PUSH
22717: LD_OWVAR 2
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 91
22728: PUSH
22729: LD_VAR 0 3
22733: PUSH
22734: LD_INT 30
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PPUSH
22746: CALL_OW 69
22750: PPUSH
22751: LD_VAR 0 3
22755: PPUSH
22756: CALL_OW 74
22760: PPUSH
22761: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22765: LD_VAR 0 2
22769: PUSH
22770: LD_INT 60
22772: GREATER
22773: PUSH
22774: LD_VAR 0 3
22778: PPUSH
22779: CALL_OW 301
22783: OR
22784: IFFALSE 22661
// if un then
22786: LD_VAR 0 3
22790: IFFALSE 22801
// RemoveUnit ( un ) ;
22792: LD_VAR 0 3
22796: PPUSH
22797: CALL_OW 64
// end ;
22801: PPOPN 3
22803: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22804: LD_INT 0
22806: PPUSH
22807: PPUSH
22808: PPUSH
22809: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22810: LD_ADDR_VAR 0 4
22814: PUSH
22815: LD_INT 22
22817: PUSH
22818: LD_OWVAR 2
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 30
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 30
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: LIST
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PPUSH
22859: CALL_OW 69
22863: ST_TO_ADDR
// if not tmp then
22864: LD_VAR 0 4
22868: NOT
22869: IFFALSE 22873
// exit ;
22871: GO 22932
// for i in tmp do
22873: LD_ADDR_VAR 0 2
22877: PUSH
22878: LD_VAR 0 4
22882: PUSH
22883: FOR_IN
22884: IFFALSE 22930
// for j = 1 to 3 do
22886: LD_ADDR_VAR 0 3
22890: PUSH
22891: DOUBLE
22892: LD_INT 1
22894: DEC
22895: ST_TO_ADDR
22896: LD_INT 3
22898: PUSH
22899: FOR_TO
22900: IFFALSE 22926
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22902: LD_VAR 0 2
22906: PPUSH
22907: CALL_OW 274
22911: PPUSH
22912: LD_VAR 0 3
22916: PPUSH
22917: LD_INT 99999
22919: PPUSH
22920: CALL_OW 277
22924: GO 22899
22926: POP
22927: POP
22928: GO 22883
22930: POP
22931: POP
// end ;
22932: LD_VAR 0 1
22936: RET
// export function hHackSetLevel10 ; var i , j ; begin
22937: LD_INT 0
22939: PPUSH
22940: PPUSH
22941: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22942: LD_ADDR_VAR 0 2
22946: PUSH
22947: LD_INT 21
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PPUSH
22957: CALL_OW 69
22961: PUSH
22962: FOR_IN
22963: IFFALSE 23015
// if IsSelected ( i ) then
22965: LD_VAR 0 2
22969: PPUSH
22970: CALL_OW 306
22974: IFFALSE 23013
// begin for j := 1 to 4 do
22976: LD_ADDR_VAR 0 3
22980: PUSH
22981: DOUBLE
22982: LD_INT 1
22984: DEC
22985: ST_TO_ADDR
22986: LD_INT 4
22988: PUSH
22989: FOR_TO
22990: IFFALSE 23011
// SetSkill ( i , j , 10 ) ;
22992: LD_VAR 0 2
22996: PPUSH
22997: LD_VAR 0 3
23001: PPUSH
23002: LD_INT 10
23004: PPUSH
23005: CALL_OW 237
23009: GO 22989
23011: POP
23012: POP
// end ;
23013: GO 22962
23015: POP
23016: POP
// end ;
23017: LD_VAR 0 1
23021: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23022: LD_INT 0
23024: PPUSH
23025: PPUSH
23026: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23027: LD_ADDR_VAR 0 2
23031: PUSH
23032: LD_INT 22
23034: PUSH
23035: LD_OWVAR 2
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 21
23046: PUSH
23047: LD_INT 1
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PPUSH
23058: CALL_OW 69
23062: PUSH
23063: FOR_IN
23064: IFFALSE 23105
// begin for j := 1 to 4 do
23066: LD_ADDR_VAR 0 3
23070: PUSH
23071: DOUBLE
23072: LD_INT 1
23074: DEC
23075: ST_TO_ADDR
23076: LD_INT 4
23078: PUSH
23079: FOR_TO
23080: IFFALSE 23101
// SetSkill ( i , j , 10 ) ;
23082: LD_VAR 0 2
23086: PPUSH
23087: LD_VAR 0 3
23091: PPUSH
23092: LD_INT 10
23094: PPUSH
23095: CALL_OW 237
23099: GO 23079
23101: POP
23102: POP
// end ;
23103: GO 23063
23105: POP
23106: POP
// end ;
23107: LD_VAR 0 1
23111: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
23112: LD_INT 0
23114: PPUSH
// uc_side := your_side ;
23115: LD_ADDR_OWVAR 20
23119: PUSH
23120: LD_OWVAR 2
23124: ST_TO_ADDR
// uc_nation := nation ;
23125: LD_ADDR_OWVAR 21
23129: PUSH
23130: LD_VAR 0 1
23134: ST_TO_ADDR
// InitHc ;
23135: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23139: LD_INT 0
23141: PPUSH
23142: LD_VAR 0 2
23146: PPUSH
23147: LD_VAR 0 3
23151: PPUSH
23152: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
23156: CALL_OW 44
23160: PPUSH
23161: LD_INT 1
23163: PPUSH
23164: CALL_OW 51
// end ;
23168: LD_VAR 0 4
23172: RET
// export function hHackSpawnVehicle ; begin
23173: LD_INT 0
23175: PPUSH
// uc_side := your_side ;
23176: LD_ADDR_OWVAR 20
23180: PUSH
23181: LD_OWVAR 2
23185: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
23186: LD_ADDR_OWVAR 21
23190: PUSH
23191: LD_INT 1
23193: PPUSH
23194: LD_INT 3
23196: PPUSH
23197: CALL_OW 12
23201: ST_TO_ADDR
// InitVc ;
23202: CALL_OW 20
// case uc_nation of 1 :
23206: LD_OWVAR 21
23210: PUSH
23211: LD_INT 1
23213: DOUBLE
23214: EQUAL
23215: IFTRUE 23219
23217: GO 23363
23219: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
23220: LD_ADDR_OWVAR 37
23224: PUSH
23225: LD_INT 1
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: LD_INT 3
23233: PUSH
23234: LD_INT 4
23236: PUSH
23237: LD_INT 5
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: PPUSH
23250: LD_INT 5
23252: PPUSH
23253: CALL_OW 12
23257: ARRAY
23258: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
23259: LD_ADDR_OWVAR 39
23263: PUSH
23264: LD_INT 1
23266: PPUSH
23267: LD_INT 3
23269: PPUSH
23270: CALL_OW 12
23274: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
23275: LD_ADDR_OWVAR 38
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: LD_INT 2
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: PPUSH
23297: LD_INT 3
23299: PPUSH
23300: CALL_OW 12
23304: ARRAY
23305: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
23306: LD_ADDR_OWVAR 40
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: LD_INT 4
23316: PUSH
23317: LD_INT 5
23319: PUSH
23320: LD_INT 3
23322: PUSH
23323: LD_INT 7
23325: PUSH
23326: LD_INT 8
23328: PUSH
23329: LD_INT 9
23331: PUSH
23332: LD_INT 10
23334: PUSH
23335: LD_INT 6
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: PPUSH
23352: LD_INT 9
23354: PPUSH
23355: CALL_OW 12
23359: ARRAY
23360: ST_TO_ADDR
// end ; 2 :
23361: GO 23628
23363: LD_INT 2
23365: DOUBLE
23366: EQUAL
23367: IFTRUE 23371
23369: GO 23495
23371: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
23372: LD_ADDR_OWVAR 37
23376: PUSH
23377: LD_INT 11
23379: PUSH
23380: LD_INT 12
23382: PUSH
23383: LD_INT 13
23385: PUSH
23386: LD_INT 14
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 1
23397: PPUSH
23398: LD_INT 4
23400: PPUSH
23401: CALL_OW 12
23405: ARRAY
23406: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
23407: LD_ADDR_OWVAR 39
23411: PUSH
23412: LD_INT 1
23414: PPUSH
23415: LD_INT 3
23417: PPUSH
23418: CALL_OW 12
23422: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
23423: LD_ADDR_OWVAR 38
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 5
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: PPUSH
23445: LD_INT 3
23447: PPUSH
23448: CALL_OW 12
23452: ARRAY
23453: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
23454: LD_ADDR_OWVAR 40
23458: PUSH
23459: LD_INT 24
23461: PUSH
23462: LD_INT 26
23464: PUSH
23465: LD_INT 27
23467: PUSH
23468: LD_INT 28
23470: PUSH
23471: LD_INT 29
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: PPUSH
23484: LD_INT 5
23486: PPUSH
23487: CALL_OW 12
23491: ARRAY
23492: ST_TO_ADDR
// end ; 3 :
23493: GO 23628
23495: LD_INT 3
23497: DOUBLE
23498: EQUAL
23499: IFTRUE 23503
23501: GO 23627
23503: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
23504: LD_ADDR_OWVAR 37
23508: PUSH
23509: LD_INT 21
23511: PUSH
23512: LD_INT 23
23514: PUSH
23515: LD_INT 22
23517: PUSH
23518: LD_INT 24
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: PPUSH
23530: LD_INT 4
23532: PPUSH
23533: CALL_OW 12
23537: ARRAY
23538: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
23539: LD_ADDR_OWVAR 39
23543: PUSH
23544: LD_INT 1
23546: PPUSH
23547: LD_INT 3
23549: PPUSH
23550: CALL_OW 12
23554: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
23555: LD_ADDR_OWVAR 38
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: LD_INT 3
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 1
23572: PPUSH
23573: LD_INT 2
23575: PPUSH
23576: CALL_OW 12
23580: ARRAY
23581: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
23582: LD_ADDR_OWVAR 40
23586: PUSH
23587: LD_INT 42
23589: PUSH
23590: LD_INT 43
23592: PUSH
23593: LD_INT 44
23595: PUSH
23596: LD_INT 46
23598: PUSH
23599: LD_INT 48
23601: PUSH
23602: LD_INT 47
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 1
23615: PPUSH
23616: LD_INT 6
23618: PPUSH
23619: CALL_OW 12
23623: ARRAY
23624: ST_TO_ADDR
// end ; end ;
23625: GO 23628
23627: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23628: CALL_OW 45
23632: PPUSH
23633: LD_INT 1
23635: PPUSH
23636: CALL_OW 51
// end ;
23640: LD_VAR 0 1
23644: RET
// export hInvincible ; every 1 do
23645: GO 23647
23647: DISABLE
// hInvincible := [ ] ;
23648: LD_ADDR_EXP 90
23652: PUSH
23653: EMPTY
23654: ST_TO_ADDR
23655: END
// every 10 do var i ;
23656: GO 23658
23658: DISABLE
23659: LD_INT 0
23661: PPUSH
// begin enable ;
23662: ENABLE
// if not hInvincible then
23663: LD_EXP 90
23667: NOT
23668: IFFALSE 23672
// exit ;
23670: GO 23716
// for i in hInvincible do
23672: LD_ADDR_VAR 0 1
23676: PUSH
23677: LD_EXP 90
23681: PUSH
23682: FOR_IN
23683: IFFALSE 23714
// if GetLives ( i ) < 1000 then
23685: LD_VAR 0 1
23689: PPUSH
23690: CALL_OW 256
23694: PUSH
23695: LD_INT 1000
23697: LESS
23698: IFFALSE 23712
// SetLives ( i , 1000 ) ;
23700: LD_VAR 0 1
23704: PPUSH
23705: LD_INT 1000
23707: PPUSH
23708: CALL_OW 234
23712: GO 23682
23714: POP
23715: POP
// end ;
23716: PPOPN 1
23718: END
// export function hHackInvincible ; var i ; begin
23719: LD_INT 0
23721: PPUSH
23722: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23723: LD_ADDR_VAR 0 2
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: LD_INT 21
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 21
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: PPUSH
23756: CALL_OW 69
23760: PUSH
23761: FOR_IN
23762: IFFALSE 23823
// if IsSelected ( i ) then
23764: LD_VAR 0 2
23768: PPUSH
23769: CALL_OW 306
23773: IFFALSE 23821
// begin if i in hInvincible then
23775: LD_VAR 0 2
23779: PUSH
23780: LD_EXP 90
23784: IN
23785: IFFALSE 23805
// hInvincible := hInvincible diff i else
23787: LD_ADDR_EXP 90
23791: PUSH
23792: LD_EXP 90
23796: PUSH
23797: LD_VAR 0 2
23801: DIFF
23802: ST_TO_ADDR
23803: GO 23821
// hInvincible := hInvincible union i ;
23805: LD_ADDR_EXP 90
23809: PUSH
23810: LD_EXP 90
23814: PUSH
23815: LD_VAR 0 2
23819: UNION
23820: ST_TO_ADDR
// end ;
23821: GO 23761
23823: POP
23824: POP
// end ;
23825: LD_VAR 0 1
23829: RET
// export function hHackInvisible ; var i , j ; begin
23830: LD_INT 0
23832: PPUSH
23833: PPUSH
23834: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23835: LD_ADDR_VAR 0 2
23839: PUSH
23840: LD_INT 21
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PPUSH
23850: CALL_OW 69
23854: PUSH
23855: FOR_IN
23856: IFFALSE 23880
// if IsSelected ( i ) then
23858: LD_VAR 0 2
23862: PPUSH
23863: CALL_OW 306
23867: IFFALSE 23878
// ComForceInvisible ( i ) ;
23869: LD_VAR 0 2
23873: PPUSH
23874: CALL_OW 496
23878: GO 23855
23880: POP
23881: POP
// end ;
23882: LD_VAR 0 1
23886: RET
// export function hHackChangeYourSide ; begin
23887: LD_INT 0
23889: PPUSH
// if your_side = 8 then
23890: LD_OWVAR 2
23894: PUSH
23895: LD_INT 8
23897: EQUAL
23898: IFFALSE 23910
// your_side := 0 else
23900: LD_ADDR_OWVAR 2
23904: PUSH
23905: LD_INT 0
23907: ST_TO_ADDR
23908: GO 23924
// your_side := your_side + 1 ;
23910: LD_ADDR_OWVAR 2
23914: PUSH
23915: LD_OWVAR 2
23919: PUSH
23920: LD_INT 1
23922: PLUS
23923: ST_TO_ADDR
// end ;
23924: LD_VAR 0 1
23928: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23929: LD_INT 0
23931: PPUSH
23932: PPUSH
23933: PPUSH
// for i in all_units do
23934: LD_ADDR_VAR 0 2
23938: PUSH
23939: LD_OWVAR 3
23943: PUSH
23944: FOR_IN
23945: IFFALSE 24023
// if IsSelected ( i ) then
23947: LD_VAR 0 2
23951: PPUSH
23952: CALL_OW 306
23956: IFFALSE 24021
// begin j := GetSide ( i ) ;
23958: LD_ADDR_VAR 0 3
23962: PUSH
23963: LD_VAR 0 2
23967: PPUSH
23968: CALL_OW 255
23972: ST_TO_ADDR
// if j = 8 then
23973: LD_VAR 0 3
23977: PUSH
23978: LD_INT 8
23980: EQUAL
23981: IFFALSE 23993
// j := 0 else
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_INT 0
23990: ST_TO_ADDR
23991: GO 24007
// j := j + 1 ;
23993: LD_ADDR_VAR 0 3
23997: PUSH
23998: LD_VAR 0 3
24002: PUSH
24003: LD_INT 1
24005: PLUS
24006: ST_TO_ADDR
// SetSide ( i , j ) ;
24007: LD_VAR 0 2
24011: PPUSH
24012: LD_VAR 0 3
24016: PPUSH
24017: CALL_OW 235
// end ;
24021: GO 23944
24023: POP
24024: POP
// end ;
24025: LD_VAR 0 1
24029: RET
// export function hHackFog ; begin
24030: LD_INT 0
24032: PPUSH
// FogOff ( true ) ;
24033: LD_INT 1
24035: PPUSH
24036: CALL_OW 344
// end ;
24040: LD_VAR 0 1
24044: RET
// export function hHackApeman ; begin
24045: LD_INT 0
24047: PPUSH
// uc_side := your_side ;
24048: LD_ADDR_OWVAR 20
24052: PUSH
24053: LD_OWVAR 2
24057: ST_TO_ADDR
// uc_nation := 0 ;
24058: LD_ADDR_OWVAR 21
24062: PUSH
24063: LD_INT 0
24065: ST_TO_ADDR
// hc_name :=  ;
24066: LD_ADDR_OWVAR 26
24070: PUSH
24071: LD_STRING 
24073: ST_TO_ADDR
// hc_gallery :=  ;
24074: LD_ADDR_OWVAR 33
24078: PUSH
24079: LD_STRING 
24081: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
24082: LD_ADDR_OWVAR 31
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: ST_TO_ADDR
// hc_class := class_apeman ;
24105: LD_ADDR_OWVAR 28
24109: PUSH
24110: LD_INT 12
24112: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
24113: CALL_OW 44
24117: PPUSH
24118: LD_INT 1
24120: PPUSH
24121: CALL_OW 51
// end ;
24125: LD_VAR 0 1
24129: RET
// export function hHackBoom ; begin
24130: LD_INT 0
24132: PPUSH
// uc_side := your_side ;
24133: LD_ADDR_OWVAR 20
24137: PUSH
24138: LD_OWVAR 2
24142: ST_TO_ADDR
// uc_nation := 1 ;
24143: LD_ADDR_OWVAR 21
24147: PUSH
24148: LD_INT 1
24150: ST_TO_ADDR
// vc_chassis := us_morphling ;
24151: LD_ADDR_OWVAR 37
24155: PUSH
24156: LD_INT 5
24158: ST_TO_ADDR
// vc_engine := engine_siberite ;
24159: LD_ADDR_OWVAR 39
24163: PUSH
24164: LD_INT 3
24166: ST_TO_ADDR
// vc_control := control_computer ;
24167: LD_ADDR_OWVAR 38
24171: PUSH
24172: LD_INT 3
24174: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
24175: LD_ADDR_OWVAR 40
24179: PUSH
24180: LD_INT 8
24182: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24183: CALL_OW 45
24187: PPUSH
24188: LD_INT 1
24190: PPUSH
24191: CALL_OW 51
// end ; end_of_file
24195: LD_VAR 0 1
24199: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24200: LD_INT 0
24202: PPUSH
24203: PPUSH
24204: PPUSH
24205: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL_OW 264
24215: PUSH
24216: LD_EXP 25
24220: EQUAL
24221: IFFALSE 24293
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24223: LD_INT 68
24225: PPUSH
24226: LD_VAR 0 1
24230: PPUSH
24231: CALL_OW 255
24235: PPUSH
24236: CALL_OW 321
24240: PUSH
24241: LD_INT 2
24243: EQUAL
24244: IFFALSE 24256
// eff := 70 else
24246: LD_ADDR_VAR 0 4
24250: PUSH
24251: LD_INT 70
24253: ST_TO_ADDR
24254: GO 24264
// eff := 30 ;
24256: LD_ADDR_VAR 0 4
24260: PUSH
24261: LD_INT 30
24263: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24264: LD_VAR 0 1
24268: PPUSH
24269: CALL_OW 250
24273: PPUSH
24274: LD_VAR 0 1
24278: PPUSH
24279: CALL_OW 251
24283: PPUSH
24284: LD_VAR 0 4
24288: PPUSH
24289: CALL_OW 495
// end ; end ;
24293: LD_VAR 0 2
24297: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24298: LD_INT 0
24300: PPUSH
// end ;
24301: LD_VAR 0 4
24305: RET
// export function SOS_Command ( cmd ) ; begin
24306: LD_INT 0
24308: PPUSH
// end ;
24309: LD_VAR 0 2
24313: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24314: LD_VAR 0 1
24318: PUSH
24319: LD_INT 254
24321: EQUAL
24322: PUSH
24323: LD_VAR 0 2
24327: PPUSH
24328: CALL_OW 264
24332: PUSH
24333: LD_EXP 23
24337: EQUAL
24338: AND
24339: PUSH
24340: LD_VAR 0 3
24344: PPUSH
24345: CALL_OW 263
24349: PUSH
24350: LD_INT 3
24352: EQUAL
24353: AND
24354: IFFALSE 24370
// HackDestroyVehicle ( unit , selectedUnit ) ;
24356: LD_VAR 0 2
24360: PPUSH
24361: LD_VAR 0 3
24365: PPUSH
24366: CALL 25877 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24370: LD_VAR 0 1
24374: PUSH
24375: LD_INT 255
24377: EQUAL
24378: PUSH
24379: LD_VAR 0 2
24383: PPUSH
24384: CALL_OW 264
24388: PUSH
24389: LD_INT 14
24391: PUSH
24392: LD_INT 53
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: IN
24399: AND
24400: PUSH
24401: LD_VAR 0 4
24405: PPUSH
24406: LD_VAR 0 5
24410: PPUSH
24411: CALL_OW 488
24415: AND
24416: IFFALSE 24440
// CutTreeXYR ( unit , x , y , 12 ) ;
24418: LD_VAR 0 2
24422: PPUSH
24423: LD_VAR 0 4
24427: PPUSH
24428: LD_VAR 0 5
24432: PPUSH
24433: LD_INT 12
24435: PPUSH
24436: CALL 24443 0 4
// end ;
24440: PPOPN 5
24442: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24443: LD_INT 0
24445: PPUSH
24446: PPUSH
24447: PPUSH
24448: PPUSH
24449: PPUSH
24450: PPUSH
24451: PPUSH
24452: PPUSH
24453: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24454: LD_VAR 0 1
24458: NOT
24459: PUSH
24460: LD_VAR 0 2
24464: PPUSH
24465: LD_VAR 0 3
24469: PPUSH
24470: CALL_OW 488
24474: NOT
24475: OR
24476: PUSH
24477: LD_VAR 0 4
24481: NOT
24482: OR
24483: IFFALSE 24487
// exit ;
24485: GO 24827
// list := [ ] ;
24487: LD_ADDR_VAR 0 13
24491: PUSH
24492: EMPTY
24493: ST_TO_ADDR
// if x - r < 0 then
24494: LD_VAR 0 2
24498: PUSH
24499: LD_VAR 0 4
24503: MINUS
24504: PUSH
24505: LD_INT 0
24507: LESS
24508: IFFALSE 24520
// min_x := 0 else
24510: LD_ADDR_VAR 0 7
24514: PUSH
24515: LD_INT 0
24517: ST_TO_ADDR
24518: GO 24536
// min_x := x - r ;
24520: LD_ADDR_VAR 0 7
24524: PUSH
24525: LD_VAR 0 2
24529: PUSH
24530: LD_VAR 0 4
24534: MINUS
24535: ST_TO_ADDR
// if y - r < 0 then
24536: LD_VAR 0 3
24540: PUSH
24541: LD_VAR 0 4
24545: MINUS
24546: PUSH
24547: LD_INT 0
24549: LESS
24550: IFFALSE 24562
// min_y := 0 else
24552: LD_ADDR_VAR 0 8
24556: PUSH
24557: LD_INT 0
24559: ST_TO_ADDR
24560: GO 24578
// min_y := y - r ;
24562: LD_ADDR_VAR 0 8
24566: PUSH
24567: LD_VAR 0 3
24571: PUSH
24572: LD_VAR 0 4
24576: MINUS
24577: ST_TO_ADDR
// max_x := x + r ;
24578: LD_ADDR_VAR 0 9
24582: PUSH
24583: LD_VAR 0 2
24587: PUSH
24588: LD_VAR 0 4
24592: PLUS
24593: ST_TO_ADDR
// max_y := y + r ;
24594: LD_ADDR_VAR 0 10
24598: PUSH
24599: LD_VAR 0 3
24603: PUSH
24604: LD_VAR 0 4
24608: PLUS
24609: ST_TO_ADDR
// for _x = min_x to max_x do
24610: LD_ADDR_VAR 0 11
24614: PUSH
24615: DOUBLE
24616: LD_VAR 0 7
24620: DEC
24621: ST_TO_ADDR
24622: LD_VAR 0 9
24626: PUSH
24627: FOR_TO
24628: IFFALSE 24745
// for _y = min_y to max_y do
24630: LD_ADDR_VAR 0 12
24634: PUSH
24635: DOUBLE
24636: LD_VAR 0 8
24640: DEC
24641: ST_TO_ADDR
24642: LD_VAR 0 10
24646: PUSH
24647: FOR_TO
24648: IFFALSE 24741
// begin if not ValidHex ( _x , _y ) then
24650: LD_VAR 0 11
24654: PPUSH
24655: LD_VAR 0 12
24659: PPUSH
24660: CALL_OW 488
24664: NOT
24665: IFFALSE 24669
// continue ;
24667: GO 24647
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24669: LD_VAR 0 11
24673: PPUSH
24674: LD_VAR 0 12
24678: PPUSH
24679: CALL_OW 351
24683: PUSH
24684: LD_VAR 0 11
24688: PPUSH
24689: LD_VAR 0 12
24693: PPUSH
24694: CALL_OW 554
24698: AND
24699: IFFALSE 24739
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24701: LD_ADDR_VAR 0 13
24705: PUSH
24706: LD_VAR 0 13
24710: PPUSH
24711: LD_VAR 0 13
24715: PUSH
24716: LD_INT 1
24718: PLUS
24719: PPUSH
24720: LD_VAR 0 11
24724: PUSH
24725: LD_VAR 0 12
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PPUSH
24734: CALL_OW 2
24738: ST_TO_ADDR
// end ;
24739: GO 24647
24741: POP
24742: POP
24743: GO 24627
24745: POP
24746: POP
// if not list then
24747: LD_VAR 0 13
24751: NOT
24752: IFFALSE 24756
// exit ;
24754: GO 24827
// for i in list do
24756: LD_ADDR_VAR 0 6
24760: PUSH
24761: LD_VAR 0 13
24765: PUSH
24766: FOR_IN
24767: IFFALSE 24825
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24769: LD_VAR 0 1
24773: PPUSH
24774: LD_STRING M
24776: PUSH
24777: LD_VAR 0 6
24781: PUSH
24782: LD_INT 1
24784: ARRAY
24785: PUSH
24786: LD_VAR 0 6
24790: PUSH
24791: LD_INT 2
24793: ARRAY
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: EMPTY
24817: LIST
24818: PPUSH
24819: CALL_OW 447
24823: GO 24766
24825: POP
24826: POP
// end ;
24827: LD_VAR 0 5
24831: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24832: LD_EXP 91
24836: NOT
24837: IFFALSE 24887
24839: GO 24841
24841: DISABLE
// begin initHack := true ;
24842: LD_ADDR_EXP 91
24846: PUSH
24847: LD_INT 1
24849: ST_TO_ADDR
// hackTanks := [ ] ;
24850: LD_ADDR_EXP 92
24854: PUSH
24855: EMPTY
24856: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24857: LD_ADDR_EXP 93
24861: PUSH
24862: EMPTY
24863: ST_TO_ADDR
// hackLimit := 3 ;
24864: LD_ADDR_EXP 94
24868: PUSH
24869: LD_INT 3
24871: ST_TO_ADDR
// hackDist := 12 ;
24872: LD_ADDR_EXP 95
24876: PUSH
24877: LD_INT 12
24879: ST_TO_ADDR
// hackCounter := [ ] ;
24880: LD_ADDR_EXP 96
24884: PUSH
24885: EMPTY
24886: ST_TO_ADDR
// end ;
24887: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24888: LD_EXP 91
24892: PUSH
24893: LD_INT 34
24895: PUSH
24896: LD_EXP 23
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PPUSH
24905: CALL_OW 69
24909: AND
24910: IFFALSE 25165
24912: GO 24914
24914: DISABLE
24915: LD_INT 0
24917: PPUSH
24918: PPUSH
// begin enable ;
24919: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24920: LD_ADDR_VAR 0 1
24924: PUSH
24925: LD_INT 34
24927: PUSH
24928: LD_EXP 23
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PPUSH
24937: CALL_OW 69
24941: PUSH
24942: FOR_IN
24943: IFFALSE 25163
// begin if not i in hackTanks then
24945: LD_VAR 0 1
24949: PUSH
24950: LD_EXP 92
24954: IN
24955: NOT
24956: IFFALSE 25039
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24958: LD_ADDR_EXP 92
24962: PUSH
24963: LD_EXP 92
24967: PPUSH
24968: LD_EXP 92
24972: PUSH
24973: LD_INT 1
24975: PLUS
24976: PPUSH
24977: LD_VAR 0 1
24981: PPUSH
24982: CALL_OW 1
24986: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24987: LD_ADDR_EXP 93
24991: PUSH
24992: LD_EXP 93
24996: PPUSH
24997: LD_EXP 93
25001: PUSH
25002: LD_INT 1
25004: PLUS
25005: PPUSH
25006: EMPTY
25007: PPUSH
25008: CALL_OW 1
25012: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25013: LD_ADDR_EXP 96
25017: PUSH
25018: LD_EXP 96
25022: PPUSH
25023: LD_EXP 96
25027: PUSH
25028: LD_INT 1
25030: PLUS
25031: PPUSH
25032: EMPTY
25033: PPUSH
25034: CALL_OW 1
25038: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25039: LD_VAR 0 1
25043: PPUSH
25044: CALL_OW 302
25048: NOT
25049: IFFALSE 25062
// begin HackUnlinkAll ( i ) ;
25051: LD_VAR 0 1
25055: PPUSH
25056: CALL 25168 0 1
// continue ;
25060: GO 24942
// end ; HackCheckCapturedStatus ( i ) ;
25062: LD_VAR 0 1
25066: PPUSH
25067: CALL 25611 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25071: LD_ADDR_VAR 0 2
25075: PUSH
25076: LD_INT 81
25078: PUSH
25079: LD_VAR 0 1
25083: PPUSH
25084: CALL_OW 255
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 33
25095: PUSH
25096: LD_INT 3
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 91
25105: PUSH
25106: LD_VAR 0 1
25110: PUSH
25111: LD_EXP 95
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 50
25123: PUSH
25124: EMPTY
25125: LIST
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: PPUSH
25133: CALL_OW 69
25137: ST_TO_ADDR
// if not tmp then
25138: LD_VAR 0 2
25142: NOT
25143: IFFALSE 25147
// continue ;
25145: GO 24942
// HackLink ( i , tmp ) ;
25147: LD_VAR 0 1
25151: PPUSH
25152: LD_VAR 0 2
25156: PPUSH
25157: CALL 25304 0 2
// end ;
25161: GO 24942
25163: POP
25164: POP
// end ;
25165: PPOPN 2
25167: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25168: LD_INT 0
25170: PPUSH
25171: PPUSH
25172: PPUSH
// if not hack in hackTanks then
25173: LD_VAR 0 1
25177: PUSH
25178: LD_EXP 92
25182: IN
25183: NOT
25184: IFFALSE 25188
// exit ;
25186: GO 25299
// index := GetElementIndex ( hackTanks , hack ) ;
25188: LD_ADDR_VAR 0 4
25192: PUSH
25193: LD_EXP 92
25197: PPUSH
25198: LD_VAR 0 1
25202: PPUSH
25203: CALL 30719 0 2
25207: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25208: LD_EXP 93
25212: PUSH
25213: LD_VAR 0 4
25217: ARRAY
25218: IFFALSE 25299
// begin for i in hackTanksCaptured [ index ] do
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_EXP 93
25229: PUSH
25230: LD_VAR 0 4
25234: ARRAY
25235: PUSH
25236: FOR_IN
25237: IFFALSE 25263
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25239: LD_VAR 0 3
25243: PUSH
25244: LD_INT 1
25246: ARRAY
25247: PPUSH
25248: LD_VAR 0 3
25252: PUSH
25253: LD_INT 2
25255: ARRAY
25256: PPUSH
25257: CALL_OW 235
25261: GO 25236
25263: POP
25264: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25265: LD_ADDR_EXP 93
25269: PUSH
25270: LD_EXP 93
25274: PPUSH
25275: LD_VAR 0 4
25279: PPUSH
25280: EMPTY
25281: PPUSH
25282: CALL_OW 1
25286: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25287: LD_VAR 0 1
25291: PPUSH
25292: LD_INT 0
25294: PPUSH
25295: CALL_OW 505
// end ; end ;
25299: LD_VAR 0 2
25303: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25304: LD_INT 0
25306: PPUSH
25307: PPUSH
25308: PPUSH
// if not hack in hackTanks or not vehicles then
25309: LD_VAR 0 1
25313: PUSH
25314: LD_EXP 92
25318: IN
25319: NOT
25320: PUSH
25321: LD_VAR 0 2
25325: NOT
25326: OR
25327: IFFALSE 25331
// exit ;
25329: GO 25606
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25331: LD_ADDR_VAR 0 2
25335: PUSH
25336: LD_VAR 0 1
25340: PPUSH
25341: LD_VAR 0 2
25345: PPUSH
25346: LD_INT 1
25348: PPUSH
25349: LD_INT 1
25351: PPUSH
25352: CALL 31369 0 4
25356: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25357: LD_ADDR_VAR 0 5
25361: PUSH
25362: LD_EXP 92
25366: PPUSH
25367: LD_VAR 0 1
25371: PPUSH
25372: CALL 30719 0 2
25376: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25377: LD_EXP 93
25381: PUSH
25382: LD_VAR 0 5
25386: ARRAY
25387: PUSH
25388: LD_EXP 94
25392: LESS
25393: IFFALSE 25582
// begin for i := 1 to vehicles do
25395: LD_ADDR_VAR 0 4
25399: PUSH
25400: DOUBLE
25401: LD_INT 1
25403: DEC
25404: ST_TO_ADDR
25405: LD_VAR 0 2
25409: PUSH
25410: FOR_TO
25411: IFFALSE 25580
// begin if hackTanksCaptured [ index ] = hackLimit then
25413: LD_EXP 93
25417: PUSH
25418: LD_VAR 0 5
25422: ARRAY
25423: PUSH
25424: LD_EXP 94
25428: EQUAL
25429: IFFALSE 25433
// break ;
25431: GO 25580
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25433: LD_ADDR_EXP 96
25437: PUSH
25438: LD_EXP 96
25442: PPUSH
25443: LD_VAR 0 5
25447: PPUSH
25448: LD_EXP 96
25452: PUSH
25453: LD_VAR 0 5
25457: ARRAY
25458: PUSH
25459: LD_INT 1
25461: PLUS
25462: PPUSH
25463: CALL_OW 1
25467: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25468: LD_ADDR_EXP 93
25472: PUSH
25473: LD_EXP 93
25477: PPUSH
25478: LD_VAR 0 5
25482: PUSH
25483: LD_EXP 93
25487: PUSH
25488: LD_VAR 0 5
25492: ARRAY
25493: PUSH
25494: LD_INT 1
25496: PLUS
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PPUSH
25502: LD_VAR 0 2
25506: PUSH
25507: LD_VAR 0 4
25511: ARRAY
25512: PUSH
25513: LD_VAR 0 2
25517: PUSH
25518: LD_VAR 0 4
25522: ARRAY
25523: PPUSH
25524: CALL_OW 255
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PPUSH
25533: CALL 30934 0 3
25537: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25538: LD_VAR 0 2
25542: PUSH
25543: LD_VAR 0 4
25547: ARRAY
25548: PPUSH
25549: LD_VAR 0 1
25553: PPUSH
25554: CALL_OW 255
25558: PPUSH
25559: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25563: LD_VAR 0 2
25567: PUSH
25568: LD_VAR 0 4
25572: ARRAY
25573: PPUSH
25574: CALL_OW 141
// end ;
25578: GO 25410
25580: POP
25581: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25582: LD_VAR 0 1
25586: PPUSH
25587: LD_EXP 93
25591: PUSH
25592: LD_VAR 0 5
25596: ARRAY
25597: PUSH
25598: LD_INT 0
25600: PLUS
25601: PPUSH
25602: CALL_OW 505
// end ;
25606: LD_VAR 0 3
25610: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25611: LD_INT 0
25613: PPUSH
25614: PPUSH
25615: PPUSH
25616: PPUSH
// if not hack in hackTanks then
25617: LD_VAR 0 1
25621: PUSH
25622: LD_EXP 92
25626: IN
25627: NOT
25628: IFFALSE 25632
// exit ;
25630: GO 25872
// index := GetElementIndex ( hackTanks , hack ) ;
25632: LD_ADDR_VAR 0 4
25636: PUSH
25637: LD_EXP 92
25641: PPUSH
25642: LD_VAR 0 1
25646: PPUSH
25647: CALL 30719 0 2
25651: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25652: LD_ADDR_VAR 0 3
25656: PUSH
25657: DOUBLE
25658: LD_EXP 93
25662: PUSH
25663: LD_VAR 0 4
25667: ARRAY
25668: INC
25669: ST_TO_ADDR
25670: LD_INT 1
25672: PUSH
25673: FOR_DOWNTO
25674: IFFALSE 25846
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25676: LD_ADDR_VAR 0 5
25680: PUSH
25681: LD_EXP 93
25685: PUSH
25686: LD_VAR 0 4
25690: ARRAY
25691: PUSH
25692: LD_VAR 0 3
25696: ARRAY
25697: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25698: LD_VAR 0 5
25702: PUSH
25703: LD_INT 1
25705: ARRAY
25706: PPUSH
25707: CALL_OW 302
25711: NOT
25712: PUSH
25713: LD_VAR 0 5
25717: PUSH
25718: LD_INT 1
25720: ARRAY
25721: PPUSH
25722: CALL_OW 255
25726: PUSH
25727: LD_VAR 0 1
25731: PPUSH
25732: CALL_OW 255
25736: NONEQUAL
25737: OR
25738: IFFALSE 25844
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25740: LD_VAR 0 5
25744: PUSH
25745: LD_INT 1
25747: ARRAY
25748: PPUSH
25749: CALL_OW 305
25753: PUSH
25754: LD_VAR 0 5
25758: PUSH
25759: LD_INT 1
25761: ARRAY
25762: PPUSH
25763: CALL_OW 255
25767: PUSH
25768: LD_VAR 0 1
25772: PPUSH
25773: CALL_OW 255
25777: EQUAL
25778: AND
25779: IFFALSE 25803
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25781: LD_VAR 0 5
25785: PUSH
25786: LD_INT 1
25788: ARRAY
25789: PPUSH
25790: LD_VAR 0 5
25794: PUSH
25795: LD_INT 2
25797: ARRAY
25798: PPUSH
25799: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25803: LD_ADDR_EXP 93
25807: PUSH
25808: LD_EXP 93
25812: PPUSH
25813: LD_VAR 0 4
25817: PPUSH
25818: LD_EXP 93
25822: PUSH
25823: LD_VAR 0 4
25827: ARRAY
25828: PPUSH
25829: LD_VAR 0 3
25833: PPUSH
25834: CALL_OW 3
25838: PPUSH
25839: CALL_OW 1
25843: ST_TO_ADDR
// end ; end ;
25844: GO 25673
25846: POP
25847: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25848: LD_VAR 0 1
25852: PPUSH
25853: LD_EXP 93
25857: PUSH
25858: LD_VAR 0 4
25862: ARRAY
25863: PUSH
25864: LD_INT 0
25866: PLUS
25867: PPUSH
25868: CALL_OW 505
// end ;
25872: LD_VAR 0 2
25876: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25877: LD_INT 0
25879: PPUSH
25880: PPUSH
25881: PPUSH
25882: PPUSH
// if not hack in hackTanks then
25883: LD_VAR 0 1
25887: PUSH
25888: LD_EXP 92
25892: IN
25893: NOT
25894: IFFALSE 25898
// exit ;
25896: GO 25983
// index := GetElementIndex ( hackTanks , hack ) ;
25898: LD_ADDR_VAR 0 5
25902: PUSH
25903: LD_EXP 92
25907: PPUSH
25908: LD_VAR 0 1
25912: PPUSH
25913: CALL 30719 0 2
25917: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25918: LD_ADDR_VAR 0 4
25922: PUSH
25923: DOUBLE
25924: LD_INT 1
25926: DEC
25927: ST_TO_ADDR
25928: LD_EXP 93
25932: PUSH
25933: LD_VAR 0 5
25937: ARRAY
25938: PUSH
25939: FOR_TO
25940: IFFALSE 25981
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25942: LD_EXP 93
25946: PUSH
25947: LD_VAR 0 5
25951: ARRAY
25952: PUSH
25953: LD_VAR 0 4
25957: ARRAY
25958: PUSH
25959: LD_INT 1
25961: ARRAY
25962: PUSH
25963: LD_VAR 0 2
25967: EQUAL
25968: IFFALSE 25979
// KillUnit ( vehicle ) ;
25970: LD_VAR 0 2
25974: PPUSH
25975: CALL_OW 66
25979: GO 25939
25981: POP
25982: POP
// end ; end_of_file
25983: LD_VAR 0 3
25987: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25988: LD_INT 0
25990: PPUSH
25991: PPUSH
// if exist_mode then
25992: LD_VAR 0 2
25996: IFFALSE 26021
// unit := CreateCharacter ( prefix & ident ) else
25998: LD_ADDR_VAR 0 5
26002: PUSH
26003: LD_VAR 0 3
26007: PUSH
26008: LD_VAR 0 1
26012: STR
26013: PPUSH
26014: CALL_OW 34
26018: ST_TO_ADDR
26019: GO 26036
// unit := NewCharacter ( ident ) ;
26021: LD_ADDR_VAR 0 5
26025: PUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 25
26035: ST_TO_ADDR
// result := unit ;
26036: LD_ADDR_VAR 0 4
26040: PUSH
26041: LD_VAR 0 5
26045: ST_TO_ADDR
// end ;
26046: LD_VAR 0 4
26050: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26051: LD_INT 0
26053: PPUSH
26054: PPUSH
// if not side or not nation then
26055: LD_VAR 0 1
26059: NOT
26060: PUSH
26061: LD_VAR 0 2
26065: NOT
26066: OR
26067: IFFALSE 26071
// exit ;
26069: GO 26835
// case nation of nation_american :
26071: LD_VAR 0 2
26075: PUSH
26076: LD_INT 1
26078: DOUBLE
26079: EQUAL
26080: IFTRUE 26084
26082: GO 26298
26084: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26085: LD_ADDR_VAR 0 4
26089: PUSH
26090: LD_INT 35
26092: PUSH
26093: LD_INT 45
26095: PUSH
26096: LD_INT 46
26098: PUSH
26099: LD_INT 47
26101: PUSH
26102: LD_INT 82
26104: PUSH
26105: LD_INT 83
26107: PUSH
26108: LD_INT 84
26110: PUSH
26111: LD_INT 85
26113: PUSH
26114: LD_INT 86
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: LD_INT 2
26122: PUSH
26123: LD_INT 6
26125: PUSH
26126: LD_INT 15
26128: PUSH
26129: LD_INT 16
26131: PUSH
26132: LD_INT 7
26134: PUSH
26135: LD_INT 12
26137: PUSH
26138: LD_INT 13
26140: PUSH
26141: LD_INT 10
26143: PUSH
26144: LD_INT 14
26146: PUSH
26147: LD_INT 20
26149: PUSH
26150: LD_INT 21
26152: PUSH
26153: LD_INT 22
26155: PUSH
26156: LD_INT 25
26158: PUSH
26159: LD_INT 32
26161: PUSH
26162: LD_INT 27
26164: PUSH
26165: LD_INT 36
26167: PUSH
26168: LD_INT 69
26170: PUSH
26171: LD_INT 39
26173: PUSH
26174: LD_INT 34
26176: PUSH
26177: LD_INT 40
26179: PUSH
26180: LD_INT 48
26182: PUSH
26183: LD_INT 49
26185: PUSH
26186: LD_INT 50
26188: PUSH
26189: LD_INT 51
26191: PUSH
26192: LD_INT 52
26194: PUSH
26195: LD_INT 53
26197: PUSH
26198: LD_INT 54
26200: PUSH
26201: LD_INT 55
26203: PUSH
26204: LD_INT 56
26206: PUSH
26207: LD_INT 57
26209: PUSH
26210: LD_INT 58
26212: PUSH
26213: LD_INT 59
26215: PUSH
26216: LD_INT 60
26218: PUSH
26219: LD_INT 61
26221: PUSH
26222: LD_INT 62
26224: PUSH
26225: LD_INT 80
26227: PUSH
26228: LD_INT 82
26230: PUSH
26231: LD_INT 83
26233: PUSH
26234: LD_INT 84
26236: PUSH
26237: LD_INT 85
26239: PUSH
26240: LD_INT 86
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: ST_TO_ADDR
26296: GO 26759
26298: LD_INT 2
26300: DOUBLE
26301: EQUAL
26302: IFTRUE 26306
26304: GO 26528
26306: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
26307: LD_ADDR_VAR 0 4
26311: PUSH
26312: LD_INT 35
26314: PUSH
26315: LD_INT 45
26317: PUSH
26318: LD_INT 46
26320: PUSH
26321: LD_INT 47
26323: PUSH
26324: LD_INT 82
26326: PUSH
26327: LD_INT 83
26329: PUSH
26330: LD_INT 84
26332: PUSH
26333: LD_INT 85
26335: PUSH
26336: LD_INT 87
26338: PUSH
26339: LD_INT 70
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: LD_INT 11
26347: PUSH
26348: LD_INT 3
26350: PUSH
26351: LD_INT 4
26353: PUSH
26354: LD_INT 5
26356: PUSH
26357: LD_INT 6
26359: PUSH
26360: LD_INT 15
26362: PUSH
26363: LD_INT 18
26365: PUSH
26366: LD_INT 7
26368: PUSH
26369: LD_INT 17
26371: PUSH
26372: LD_INT 8
26374: PUSH
26375: LD_INT 20
26377: PUSH
26378: LD_INT 21
26380: PUSH
26381: LD_INT 22
26383: PUSH
26384: LD_INT 72
26386: PUSH
26387: LD_INT 26
26389: PUSH
26390: LD_INT 69
26392: PUSH
26393: LD_INT 39
26395: PUSH
26396: LD_INT 40
26398: PUSH
26399: LD_INT 41
26401: PUSH
26402: LD_INT 42
26404: PUSH
26405: LD_INT 43
26407: PUSH
26408: LD_INT 48
26410: PUSH
26411: LD_INT 49
26413: PUSH
26414: LD_INT 50
26416: PUSH
26417: LD_INT 51
26419: PUSH
26420: LD_INT 52
26422: PUSH
26423: LD_INT 53
26425: PUSH
26426: LD_INT 54
26428: PUSH
26429: LD_INT 55
26431: PUSH
26432: LD_INT 56
26434: PUSH
26435: LD_INT 60
26437: PUSH
26438: LD_INT 61
26440: PUSH
26441: LD_INT 62
26443: PUSH
26444: LD_INT 66
26446: PUSH
26447: LD_INT 67
26449: PUSH
26450: LD_INT 68
26452: PUSH
26453: LD_INT 81
26455: PUSH
26456: LD_INT 82
26458: PUSH
26459: LD_INT 83
26461: PUSH
26462: LD_INT 84
26464: PUSH
26465: LD_INT 85
26467: PUSH
26468: LD_INT 87
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: ST_TO_ADDR
26526: GO 26759
26528: LD_INT 3
26530: DOUBLE
26531: EQUAL
26532: IFTRUE 26536
26534: GO 26758
26536: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26537: LD_ADDR_VAR 0 4
26541: PUSH
26542: LD_INT 46
26544: PUSH
26545: LD_INT 47
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: LD_INT 82
26556: PUSH
26557: LD_INT 83
26559: PUSH
26560: LD_INT 84
26562: PUSH
26563: LD_INT 85
26565: PUSH
26566: LD_INT 86
26568: PUSH
26569: LD_INT 11
26571: PUSH
26572: LD_INT 9
26574: PUSH
26575: LD_INT 20
26577: PUSH
26578: LD_INT 19
26580: PUSH
26581: LD_INT 21
26583: PUSH
26584: LD_INT 24
26586: PUSH
26587: LD_INT 22
26589: PUSH
26590: LD_INT 25
26592: PUSH
26593: LD_INT 28
26595: PUSH
26596: LD_INT 29
26598: PUSH
26599: LD_INT 30
26601: PUSH
26602: LD_INT 31
26604: PUSH
26605: LD_INT 37
26607: PUSH
26608: LD_INT 38
26610: PUSH
26611: LD_INT 32
26613: PUSH
26614: LD_INT 27
26616: PUSH
26617: LD_INT 33
26619: PUSH
26620: LD_INT 69
26622: PUSH
26623: LD_INT 39
26625: PUSH
26626: LD_INT 34
26628: PUSH
26629: LD_INT 40
26631: PUSH
26632: LD_INT 71
26634: PUSH
26635: LD_INT 23
26637: PUSH
26638: LD_INT 44
26640: PUSH
26641: LD_INT 48
26643: PUSH
26644: LD_INT 49
26646: PUSH
26647: LD_INT 50
26649: PUSH
26650: LD_INT 51
26652: PUSH
26653: LD_INT 52
26655: PUSH
26656: LD_INT 53
26658: PUSH
26659: LD_INT 54
26661: PUSH
26662: LD_INT 55
26664: PUSH
26665: LD_INT 56
26667: PUSH
26668: LD_INT 57
26670: PUSH
26671: LD_INT 58
26673: PUSH
26674: LD_INT 59
26676: PUSH
26677: LD_INT 63
26679: PUSH
26680: LD_INT 64
26682: PUSH
26683: LD_INT 65
26685: PUSH
26686: LD_INT 82
26688: PUSH
26689: LD_INT 83
26691: PUSH
26692: LD_INT 84
26694: PUSH
26695: LD_INT 85
26697: PUSH
26698: LD_INT 86
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: ST_TO_ADDR
26756: GO 26759
26758: POP
// if state > - 1 and state < 3 then
26759: LD_VAR 0 3
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: GREATER
26768: PUSH
26769: LD_VAR 0 3
26773: PUSH
26774: LD_INT 3
26776: LESS
26777: AND
26778: IFFALSE 26835
// for i in result do
26780: LD_ADDR_VAR 0 5
26784: PUSH
26785: LD_VAR 0 4
26789: PUSH
26790: FOR_IN
26791: IFFALSE 26833
// if GetTech ( i , side ) <> state then
26793: LD_VAR 0 5
26797: PPUSH
26798: LD_VAR 0 1
26802: PPUSH
26803: CALL_OW 321
26807: PUSH
26808: LD_VAR 0 3
26812: NONEQUAL
26813: IFFALSE 26831
// result := result diff i ;
26815: LD_ADDR_VAR 0 4
26819: PUSH
26820: LD_VAR 0 4
26824: PUSH
26825: LD_VAR 0 5
26829: DIFF
26830: ST_TO_ADDR
26831: GO 26790
26833: POP
26834: POP
// end ;
26835: LD_VAR 0 4
26839: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26840: LD_INT 0
26842: PPUSH
26843: PPUSH
26844: PPUSH
// result := true ;
26845: LD_ADDR_VAR 0 3
26849: PUSH
26850: LD_INT 1
26852: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26853: LD_ADDR_VAR 0 5
26857: PUSH
26858: LD_VAR 0 2
26862: PPUSH
26863: CALL_OW 480
26867: ST_TO_ADDR
// if not tmp then
26868: LD_VAR 0 5
26872: NOT
26873: IFFALSE 26877
// exit ;
26875: GO 26926
// for i in tmp do
26877: LD_ADDR_VAR 0 4
26881: PUSH
26882: LD_VAR 0 5
26886: PUSH
26887: FOR_IN
26888: IFFALSE 26924
// if GetTech ( i , side ) <> state_researched then
26890: LD_VAR 0 4
26894: PPUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL_OW 321
26904: PUSH
26905: LD_INT 2
26907: NONEQUAL
26908: IFFALSE 26922
// begin result := false ;
26910: LD_ADDR_VAR 0 3
26914: PUSH
26915: LD_INT 0
26917: ST_TO_ADDR
// exit ;
26918: POP
26919: POP
26920: GO 26926
// end ;
26922: GO 26887
26924: POP
26925: POP
// end ;
26926: LD_VAR 0 3
26930: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26931: LD_INT 0
26933: PPUSH
26934: PPUSH
26935: PPUSH
26936: PPUSH
26937: PPUSH
26938: PPUSH
26939: PPUSH
26940: PPUSH
26941: PPUSH
26942: PPUSH
26943: PPUSH
26944: PPUSH
26945: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26946: LD_VAR 0 1
26950: NOT
26951: PUSH
26952: LD_VAR 0 1
26956: PPUSH
26957: CALL_OW 257
26961: PUSH
26962: LD_INT 9
26964: NONEQUAL
26965: OR
26966: IFFALSE 26970
// exit ;
26968: GO 27543
// side := GetSide ( unit ) ;
26970: LD_ADDR_VAR 0 9
26974: PUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: CALL_OW 255
26984: ST_TO_ADDR
// tech_space := tech_spacanom ;
26985: LD_ADDR_VAR 0 12
26989: PUSH
26990: LD_INT 29
26992: ST_TO_ADDR
// tech_time := tech_taurad ;
26993: LD_ADDR_VAR 0 13
26997: PUSH
26998: LD_INT 28
27000: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27001: LD_ADDR_VAR 0 11
27005: PUSH
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL_OW 310
27015: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27016: LD_VAR 0 11
27020: PPUSH
27021: CALL_OW 247
27025: PUSH
27026: LD_INT 2
27028: EQUAL
27029: IFFALSE 27033
// exit ;
27031: GO 27543
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27033: LD_ADDR_VAR 0 8
27037: PUSH
27038: LD_INT 81
27040: PUSH
27041: LD_VAR 0 9
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 3
27052: PUSH
27053: LD_INT 21
27055: PUSH
27056: LD_INT 3
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PPUSH
27071: CALL_OW 69
27075: ST_TO_ADDR
// if not tmp then
27076: LD_VAR 0 8
27080: NOT
27081: IFFALSE 27085
// exit ;
27083: GO 27543
// if in_unit then
27085: LD_VAR 0 11
27089: IFFALSE 27113
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27091: LD_ADDR_VAR 0 10
27095: PUSH
27096: LD_VAR 0 8
27100: PPUSH
27101: LD_VAR 0 11
27105: PPUSH
27106: CALL_OW 74
27110: ST_TO_ADDR
27111: GO 27133
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27113: LD_ADDR_VAR 0 10
27117: PUSH
27118: LD_VAR 0 8
27122: PPUSH
27123: LD_VAR 0 1
27127: PPUSH
27128: CALL_OW 74
27132: ST_TO_ADDR
// if not enemy then
27133: LD_VAR 0 10
27137: NOT
27138: IFFALSE 27142
// exit ;
27140: GO 27543
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27142: LD_VAR 0 11
27146: PUSH
27147: LD_VAR 0 11
27151: PPUSH
27152: LD_VAR 0 10
27156: PPUSH
27157: CALL_OW 296
27161: PUSH
27162: LD_INT 13
27164: GREATER
27165: AND
27166: PUSH
27167: LD_VAR 0 1
27171: PPUSH
27172: LD_VAR 0 10
27176: PPUSH
27177: CALL_OW 296
27181: PUSH
27182: LD_INT 12
27184: GREATER
27185: OR
27186: IFFALSE 27190
// exit ;
27188: GO 27543
// missile := [ 1 ] ;
27190: LD_ADDR_VAR 0 14
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27201: LD_VAR 0 9
27205: PPUSH
27206: LD_VAR 0 12
27210: PPUSH
27211: CALL_OW 325
27215: IFFALSE 27244
// missile := Insert ( missile , missile + 1 , 2 ) ;
27217: LD_ADDR_VAR 0 14
27221: PUSH
27222: LD_VAR 0 14
27226: PPUSH
27227: LD_VAR 0 14
27231: PUSH
27232: LD_INT 1
27234: PLUS
27235: PPUSH
27236: LD_INT 2
27238: PPUSH
27239: CALL_OW 2
27243: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27244: LD_VAR 0 9
27248: PPUSH
27249: LD_VAR 0 13
27253: PPUSH
27254: CALL_OW 325
27258: PUSH
27259: LD_VAR 0 10
27263: PPUSH
27264: CALL_OW 255
27268: PPUSH
27269: LD_VAR 0 13
27273: PPUSH
27274: CALL_OW 325
27278: NOT
27279: AND
27280: IFFALSE 27309
// missile := Insert ( missile , missile + 1 , 3 ) ;
27282: LD_ADDR_VAR 0 14
27286: PUSH
27287: LD_VAR 0 14
27291: PPUSH
27292: LD_VAR 0 14
27296: PUSH
27297: LD_INT 1
27299: PLUS
27300: PPUSH
27301: LD_INT 3
27303: PPUSH
27304: CALL_OW 2
27308: ST_TO_ADDR
// if missile < 2 then
27309: LD_VAR 0 14
27313: PUSH
27314: LD_INT 2
27316: LESS
27317: IFFALSE 27321
// exit ;
27319: GO 27543
// x := GetX ( enemy ) ;
27321: LD_ADDR_VAR 0 4
27325: PUSH
27326: LD_VAR 0 10
27330: PPUSH
27331: CALL_OW 250
27335: ST_TO_ADDR
// y := GetY ( enemy ) ;
27336: LD_ADDR_VAR 0 5
27340: PUSH
27341: LD_VAR 0 10
27345: PPUSH
27346: CALL_OW 251
27350: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27351: LD_ADDR_VAR 0 6
27355: PUSH
27356: LD_VAR 0 4
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PPUSH
27365: LD_INT 1
27367: PPUSH
27368: CALL_OW 12
27372: PLUS
27373: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27374: LD_ADDR_VAR 0 7
27378: PUSH
27379: LD_VAR 0 5
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PPUSH
27388: LD_INT 1
27390: PPUSH
27391: CALL_OW 12
27395: PLUS
27396: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27397: LD_VAR 0 6
27401: PPUSH
27402: LD_VAR 0 7
27406: PPUSH
27407: CALL_OW 488
27411: NOT
27412: IFFALSE 27434
// begin _x := x ;
27414: LD_ADDR_VAR 0 6
27418: PUSH
27419: LD_VAR 0 4
27423: ST_TO_ADDR
// _y := y ;
27424: LD_ADDR_VAR 0 7
27428: PUSH
27429: LD_VAR 0 5
27433: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: LD_INT 1
27441: PPUSH
27442: LD_VAR 0 14
27446: PPUSH
27447: CALL_OW 12
27451: ST_TO_ADDR
// case i of 1 :
27452: LD_VAR 0 3
27456: PUSH
27457: LD_INT 1
27459: DOUBLE
27460: EQUAL
27461: IFTRUE 27465
27463: GO 27482
27465: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27466: LD_VAR 0 1
27470: PPUSH
27471: LD_VAR 0 10
27475: PPUSH
27476: CALL_OW 115
27480: GO 27543
27482: LD_INT 2
27484: DOUBLE
27485: EQUAL
27486: IFTRUE 27490
27488: GO 27512
27490: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27491: LD_VAR 0 1
27495: PPUSH
27496: LD_VAR 0 6
27500: PPUSH
27501: LD_VAR 0 7
27505: PPUSH
27506: CALL_OW 153
27510: GO 27543
27512: LD_INT 3
27514: DOUBLE
27515: EQUAL
27516: IFTRUE 27520
27518: GO 27542
27520: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27521: LD_VAR 0 1
27525: PPUSH
27526: LD_VAR 0 6
27530: PPUSH
27531: LD_VAR 0 7
27535: PPUSH
27536: CALL_OW 154
27540: GO 27543
27542: POP
// end ;
27543: LD_VAR 0 2
27547: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27548: LD_INT 0
27550: PPUSH
27551: PPUSH
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
// if not unit or not building then
27556: LD_VAR 0 1
27560: NOT
27561: PUSH
27562: LD_VAR 0 2
27566: NOT
27567: OR
27568: IFFALSE 27572
// exit ;
27570: GO 27730
// x := GetX ( building ) ;
27572: LD_ADDR_VAR 0 5
27576: PUSH
27577: LD_VAR 0 2
27581: PPUSH
27582: CALL_OW 250
27586: ST_TO_ADDR
// y := GetY ( building ) ;
27587: LD_ADDR_VAR 0 6
27591: PUSH
27592: LD_VAR 0 2
27596: PPUSH
27597: CALL_OW 251
27601: ST_TO_ADDR
// for i = 0 to 5 do
27602: LD_ADDR_VAR 0 4
27606: PUSH
27607: DOUBLE
27608: LD_INT 0
27610: DEC
27611: ST_TO_ADDR
27612: LD_INT 5
27614: PUSH
27615: FOR_TO
27616: IFFALSE 27728
// begin _x := ShiftX ( x , i , 3 ) ;
27618: LD_ADDR_VAR 0 7
27622: PUSH
27623: LD_VAR 0 5
27627: PPUSH
27628: LD_VAR 0 4
27632: PPUSH
27633: LD_INT 3
27635: PPUSH
27636: CALL_OW 272
27640: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27641: LD_ADDR_VAR 0 8
27645: PUSH
27646: LD_VAR 0 6
27650: PPUSH
27651: LD_VAR 0 4
27655: PPUSH
27656: LD_INT 3
27658: PPUSH
27659: CALL_OW 273
27663: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27664: LD_VAR 0 7
27668: PPUSH
27669: LD_VAR 0 8
27673: PPUSH
27674: CALL_OW 488
27678: NOT
27679: IFFALSE 27683
// continue ;
27681: GO 27615
// if HexInfo ( _x , _y ) = 0 then
27683: LD_VAR 0 7
27687: PPUSH
27688: LD_VAR 0 8
27692: PPUSH
27693: CALL_OW 428
27697: PUSH
27698: LD_INT 0
27700: EQUAL
27701: IFFALSE 27726
// begin ComMoveXY ( unit , _x , _y ) ;
27703: LD_VAR 0 1
27707: PPUSH
27708: LD_VAR 0 7
27712: PPUSH
27713: LD_VAR 0 8
27717: PPUSH
27718: CALL_OW 111
// exit ;
27722: POP
27723: POP
27724: GO 27730
// end ; end ;
27726: GO 27615
27728: POP
27729: POP
// end ;
27730: LD_VAR 0 3
27734: RET
// export function ScanBase ( side , base_area ) ; begin
27735: LD_INT 0
27737: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27738: LD_ADDR_VAR 0 3
27742: PUSH
27743: LD_VAR 0 2
27747: PPUSH
27748: LD_INT 81
27750: PUSH
27751: LD_VAR 0 1
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PPUSH
27760: CALL_OW 70
27764: ST_TO_ADDR
// end ;
27765: LD_VAR 0 3
27769: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27770: LD_INT 0
27772: PPUSH
27773: PPUSH
27774: PPUSH
27775: PPUSH
// result := false ;
27776: LD_ADDR_VAR 0 2
27780: PUSH
27781: LD_INT 0
27783: ST_TO_ADDR
// side := GetSide ( unit ) ;
27784: LD_ADDR_VAR 0 3
27788: PUSH
27789: LD_VAR 0 1
27793: PPUSH
27794: CALL_OW 255
27798: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27799: LD_ADDR_VAR 0 4
27803: PUSH
27804: LD_VAR 0 1
27808: PPUSH
27809: CALL_OW 248
27813: ST_TO_ADDR
// case nat of 1 :
27814: LD_VAR 0 4
27818: PUSH
27819: LD_INT 1
27821: DOUBLE
27822: EQUAL
27823: IFTRUE 27827
27825: GO 27838
27827: POP
// tech := tech_lassight ; 2 :
27828: LD_ADDR_VAR 0 5
27832: PUSH
27833: LD_INT 12
27835: ST_TO_ADDR
27836: GO 27877
27838: LD_INT 2
27840: DOUBLE
27841: EQUAL
27842: IFTRUE 27846
27844: GO 27857
27846: POP
// tech := tech_mortar ; 3 :
27847: LD_ADDR_VAR 0 5
27851: PUSH
27852: LD_INT 41
27854: ST_TO_ADDR
27855: GO 27877
27857: LD_INT 3
27859: DOUBLE
27860: EQUAL
27861: IFTRUE 27865
27863: GO 27876
27865: POP
// tech := tech_bazooka ; end ;
27866: LD_ADDR_VAR 0 5
27870: PUSH
27871: LD_INT 44
27873: ST_TO_ADDR
27874: GO 27877
27876: POP
// if Researched ( side , tech ) then
27877: LD_VAR 0 3
27881: PPUSH
27882: LD_VAR 0 5
27886: PPUSH
27887: CALL_OW 325
27891: IFFALSE 27918
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27893: LD_ADDR_VAR 0 2
27897: PUSH
27898: LD_INT 5
27900: PUSH
27901: LD_INT 8
27903: PUSH
27904: LD_INT 9
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: LD_VAR 0 4
27916: ARRAY
27917: ST_TO_ADDR
// end ;
27918: LD_VAR 0 2
27922: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27923: LD_INT 0
27925: PPUSH
27926: PPUSH
27927: PPUSH
// if not mines then
27928: LD_VAR 0 2
27932: NOT
27933: IFFALSE 27937
// exit ;
27935: GO 28081
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27937: LD_ADDR_VAR 0 5
27941: PUSH
27942: LD_INT 81
27944: PUSH
27945: LD_VAR 0 1
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 3
27956: PUSH
27957: LD_INT 21
27959: PUSH
27960: LD_INT 3
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PPUSH
27975: CALL_OW 69
27979: ST_TO_ADDR
// for i in mines do
27980: LD_ADDR_VAR 0 4
27984: PUSH
27985: LD_VAR 0 2
27989: PUSH
27990: FOR_IN
27991: IFFALSE 28079
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27993: LD_VAR 0 4
27997: PUSH
27998: LD_INT 1
28000: ARRAY
28001: PPUSH
28002: LD_VAR 0 4
28006: PUSH
28007: LD_INT 2
28009: ARRAY
28010: PPUSH
28011: CALL_OW 458
28015: NOT
28016: IFFALSE 28020
// continue ;
28018: GO 27990
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28020: LD_VAR 0 4
28024: PUSH
28025: LD_INT 1
28027: ARRAY
28028: PPUSH
28029: LD_VAR 0 4
28033: PUSH
28034: LD_INT 2
28036: ARRAY
28037: PPUSH
28038: CALL_OW 428
28042: PUSH
28043: LD_VAR 0 5
28047: IN
28048: IFFALSE 28077
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28050: LD_VAR 0 4
28054: PUSH
28055: LD_INT 1
28057: ARRAY
28058: PPUSH
28059: LD_VAR 0 4
28063: PUSH
28064: LD_INT 2
28066: ARRAY
28067: PPUSH
28068: LD_VAR 0 1
28072: PPUSH
28073: CALL_OW 456
// end ;
28077: GO 27990
28079: POP
28080: POP
// end ;
28081: LD_VAR 0 3
28085: RET
// export function Count ( array ) ; var i ; begin
28086: LD_INT 0
28088: PPUSH
28089: PPUSH
// result := 0 ;
28090: LD_ADDR_VAR 0 2
28094: PUSH
28095: LD_INT 0
28097: ST_TO_ADDR
// for i in array do
28098: LD_ADDR_VAR 0 3
28102: PUSH
28103: LD_VAR 0 1
28107: PUSH
28108: FOR_IN
28109: IFFALSE 28133
// if i then
28111: LD_VAR 0 3
28115: IFFALSE 28131
// result := result + 1 ;
28117: LD_ADDR_VAR 0 2
28121: PUSH
28122: LD_VAR 0 2
28126: PUSH
28127: LD_INT 1
28129: PLUS
28130: ST_TO_ADDR
28131: GO 28108
28133: POP
28134: POP
// end ;
28135: LD_VAR 0 2
28139: RET
// export function IsEmpty ( building ) ; begin
28140: LD_INT 0
28142: PPUSH
// if not building then
28143: LD_VAR 0 1
28147: NOT
28148: IFFALSE 28152
// exit ;
28150: GO 28195
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28152: LD_ADDR_VAR 0 2
28156: PUSH
28157: LD_VAR 0 1
28161: PUSH
28162: LD_INT 22
28164: PUSH
28165: LD_VAR 0 1
28169: PPUSH
28170: CALL_OW 255
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 58
28181: PUSH
28182: EMPTY
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PPUSH
28189: CALL_OW 69
28193: IN
28194: ST_TO_ADDR
// end ;
28195: LD_VAR 0 2
28199: RET
// export function IsNotFull ( building ) ; begin
28200: LD_INT 0
28202: PPUSH
// if not building then
28203: LD_VAR 0 1
28207: NOT
28208: IFFALSE 28212
// exit ;
28210: GO 28231
// result := UnitsInside ( building ) < 6 ;
28212: LD_ADDR_VAR 0 2
28216: PUSH
28217: LD_VAR 0 1
28221: PPUSH
28222: CALL_OW 313
28226: PUSH
28227: LD_INT 6
28229: LESS
28230: ST_TO_ADDR
// end ;
28231: LD_VAR 0 2
28235: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28236: LD_INT 0
28238: PPUSH
28239: PPUSH
28240: PPUSH
28241: PPUSH
// tmp := [ ] ;
28242: LD_ADDR_VAR 0 3
28246: PUSH
28247: EMPTY
28248: ST_TO_ADDR
// list := [ ] ;
28249: LD_ADDR_VAR 0 5
28253: PUSH
28254: EMPTY
28255: ST_TO_ADDR
// for i = 16 to 25 do
28256: LD_ADDR_VAR 0 4
28260: PUSH
28261: DOUBLE
28262: LD_INT 16
28264: DEC
28265: ST_TO_ADDR
28266: LD_INT 25
28268: PUSH
28269: FOR_TO
28270: IFFALSE 28343
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28272: LD_ADDR_VAR 0 3
28276: PUSH
28277: LD_VAR 0 3
28281: PUSH
28282: LD_INT 22
28284: PUSH
28285: LD_VAR 0 1
28289: PPUSH
28290: CALL_OW 255
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 91
28301: PUSH
28302: LD_VAR 0 1
28306: PUSH
28307: LD_INT 6
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 30
28317: PUSH
28318: LD_VAR 0 4
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: LIST
28331: PUSH
28332: EMPTY
28333: LIST
28334: PPUSH
28335: CALL_OW 69
28339: ADD
28340: ST_TO_ADDR
28341: GO 28269
28343: POP
28344: POP
// for i = 1 to tmp do
28345: LD_ADDR_VAR 0 4
28349: PUSH
28350: DOUBLE
28351: LD_INT 1
28353: DEC
28354: ST_TO_ADDR
28355: LD_VAR 0 3
28359: PUSH
28360: FOR_TO
28361: IFFALSE 28449
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28363: LD_ADDR_VAR 0 5
28367: PUSH
28368: LD_VAR 0 5
28372: PUSH
28373: LD_VAR 0 3
28377: PUSH
28378: LD_VAR 0 4
28382: ARRAY
28383: PPUSH
28384: CALL_OW 266
28388: PUSH
28389: LD_VAR 0 3
28393: PUSH
28394: LD_VAR 0 4
28398: ARRAY
28399: PPUSH
28400: CALL_OW 250
28404: PUSH
28405: LD_VAR 0 3
28409: PUSH
28410: LD_VAR 0 4
28414: ARRAY
28415: PPUSH
28416: CALL_OW 251
28420: PUSH
28421: LD_VAR 0 3
28425: PUSH
28426: LD_VAR 0 4
28430: ARRAY
28431: PPUSH
28432: CALL_OW 254
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: ADD
28446: ST_TO_ADDR
28447: GO 28360
28449: POP
28450: POP
// result := list ;
28451: LD_ADDR_VAR 0 2
28455: PUSH
28456: LD_VAR 0 5
28460: ST_TO_ADDR
// end ;
28461: LD_VAR 0 2
28465: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28466: LD_INT 0
28468: PPUSH
28469: PPUSH
28470: PPUSH
28471: PPUSH
28472: PPUSH
28473: PPUSH
28474: PPUSH
// if not factory then
28475: LD_VAR 0 1
28479: NOT
28480: IFFALSE 28484
// exit ;
28482: GO 29077
// if control = control_apeman then
28484: LD_VAR 0 4
28488: PUSH
28489: LD_INT 5
28491: EQUAL
28492: IFFALSE 28601
// begin tmp := UnitsInside ( factory ) ;
28494: LD_ADDR_VAR 0 8
28498: PUSH
28499: LD_VAR 0 1
28503: PPUSH
28504: CALL_OW 313
28508: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28509: LD_VAR 0 8
28513: PPUSH
28514: LD_INT 25
28516: PUSH
28517: LD_INT 12
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PPUSH
28524: CALL_OW 72
28528: NOT
28529: IFFALSE 28539
// control := control_manual ;
28531: LD_ADDR_VAR 0 4
28535: PUSH
28536: LD_INT 1
28538: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28539: LD_ADDR_VAR 0 8
28543: PUSH
28544: LD_VAR 0 1
28548: PPUSH
28549: CALL 28236 0 1
28553: ST_TO_ADDR
// if tmp then
28554: LD_VAR 0 8
28558: IFFALSE 28601
// begin for i in tmp do
28560: LD_ADDR_VAR 0 7
28564: PUSH
28565: LD_VAR 0 8
28569: PUSH
28570: FOR_IN
28571: IFFALSE 28599
// if i [ 1 ] = b_ext_radio then
28573: LD_VAR 0 7
28577: PUSH
28578: LD_INT 1
28580: ARRAY
28581: PUSH
28582: LD_INT 22
28584: EQUAL
28585: IFFALSE 28597
// begin control := control_remote ;
28587: LD_ADDR_VAR 0 4
28591: PUSH
28592: LD_INT 2
28594: ST_TO_ADDR
// break ;
28595: GO 28599
// end ;
28597: GO 28570
28599: POP
28600: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28601: LD_VAR 0 1
28605: PPUSH
28606: LD_VAR 0 2
28610: PPUSH
28611: LD_VAR 0 3
28615: PPUSH
28616: LD_VAR 0 4
28620: PPUSH
28621: LD_VAR 0 5
28625: PPUSH
28626: CALL_OW 448
28630: IFFALSE 28665
// begin result := [ chassis , engine , control , weapon ] ;
28632: LD_ADDR_VAR 0 6
28636: PUSH
28637: LD_VAR 0 2
28641: PUSH
28642: LD_VAR 0 3
28646: PUSH
28647: LD_VAR 0 4
28651: PUSH
28652: LD_VAR 0 5
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: ST_TO_ADDR
// exit ;
28663: GO 29077
// end ; _chassis := AvailableChassisList ( factory ) ;
28665: LD_ADDR_VAR 0 9
28669: PUSH
28670: LD_VAR 0 1
28674: PPUSH
28675: CALL_OW 475
28679: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28680: LD_ADDR_VAR 0 11
28684: PUSH
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 476
28694: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28695: LD_ADDR_VAR 0 12
28699: PUSH
28700: LD_VAR 0 1
28704: PPUSH
28705: CALL_OW 477
28709: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28710: LD_ADDR_VAR 0 10
28714: PUSH
28715: LD_VAR 0 1
28719: PPUSH
28720: CALL_OW 478
28724: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28725: LD_VAR 0 9
28729: NOT
28730: PUSH
28731: LD_VAR 0 11
28735: NOT
28736: OR
28737: PUSH
28738: LD_VAR 0 12
28742: NOT
28743: OR
28744: PUSH
28745: LD_VAR 0 10
28749: NOT
28750: OR
28751: IFFALSE 28786
// begin result := [ chassis , engine , control , weapon ] ;
28753: LD_ADDR_VAR 0 6
28757: PUSH
28758: LD_VAR 0 2
28762: PUSH
28763: LD_VAR 0 3
28767: PUSH
28768: LD_VAR 0 4
28772: PUSH
28773: LD_VAR 0 5
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: ST_TO_ADDR
// exit ;
28784: GO 29077
// end ; if not chassis in _chassis then
28786: LD_VAR 0 2
28790: PUSH
28791: LD_VAR 0 9
28795: IN
28796: NOT
28797: IFFALSE 28823
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28799: LD_ADDR_VAR 0 2
28803: PUSH
28804: LD_VAR 0 9
28808: PUSH
28809: LD_INT 1
28811: PPUSH
28812: LD_VAR 0 9
28816: PPUSH
28817: CALL_OW 12
28821: ARRAY
28822: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28823: LD_VAR 0 2
28827: PPUSH
28828: LD_VAR 0 3
28832: PPUSH
28833: CALL 29082 0 2
28837: NOT
28838: IFFALSE 28897
// repeat engine := _engine [ 1 ] ;
28840: LD_ADDR_VAR 0 3
28844: PUSH
28845: LD_VAR 0 11
28849: PUSH
28850: LD_INT 1
28852: ARRAY
28853: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28854: LD_ADDR_VAR 0 11
28858: PUSH
28859: LD_VAR 0 11
28863: PPUSH
28864: LD_INT 1
28866: PPUSH
28867: CALL_OW 3
28871: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28872: LD_VAR 0 2
28876: PPUSH
28877: LD_VAR 0 3
28881: PPUSH
28882: CALL 29082 0 2
28886: PUSH
28887: LD_VAR 0 11
28891: PUSH
28892: EMPTY
28893: EQUAL
28894: OR
28895: IFFALSE 28840
// if not control in _control then
28897: LD_VAR 0 4
28901: PUSH
28902: LD_VAR 0 12
28906: IN
28907: NOT
28908: IFFALSE 28934
// control := _control [ rand ( 1 , _control ) ] ;
28910: LD_ADDR_VAR 0 4
28914: PUSH
28915: LD_VAR 0 12
28919: PUSH
28920: LD_INT 1
28922: PPUSH
28923: LD_VAR 0 12
28927: PPUSH
28928: CALL_OW 12
28932: ARRAY
28933: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28934: LD_VAR 0 2
28938: PPUSH
28939: LD_VAR 0 5
28943: PPUSH
28944: CALL 29302 0 2
28948: NOT
28949: IFFALSE 29008
// repeat weapon := _weapon [ 1 ] ;
28951: LD_ADDR_VAR 0 5
28955: PUSH
28956: LD_VAR 0 10
28960: PUSH
28961: LD_INT 1
28963: ARRAY
28964: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28965: LD_ADDR_VAR 0 10
28969: PUSH
28970: LD_VAR 0 10
28974: PPUSH
28975: LD_INT 1
28977: PPUSH
28978: CALL_OW 3
28982: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28983: LD_VAR 0 2
28987: PPUSH
28988: LD_VAR 0 5
28992: PPUSH
28993: CALL 29302 0 2
28997: PUSH
28998: LD_VAR 0 10
29002: PUSH
29003: EMPTY
29004: EQUAL
29005: OR
29006: IFFALSE 28951
// result := [ ] ;
29008: LD_ADDR_VAR 0 6
29012: PUSH
29013: EMPTY
29014: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29015: LD_VAR 0 1
29019: PPUSH
29020: LD_VAR 0 2
29024: PPUSH
29025: LD_VAR 0 3
29029: PPUSH
29030: LD_VAR 0 4
29034: PPUSH
29035: LD_VAR 0 5
29039: PPUSH
29040: CALL_OW 448
29044: IFFALSE 29077
// result := [ chassis , engine , control , weapon ] ;
29046: LD_ADDR_VAR 0 6
29050: PUSH
29051: LD_VAR 0 2
29055: PUSH
29056: LD_VAR 0 3
29060: PUSH
29061: LD_VAR 0 4
29065: PUSH
29066: LD_VAR 0 5
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// end ;
29077: LD_VAR 0 6
29081: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29082: LD_INT 0
29084: PPUSH
// if not chassis or not engine then
29085: LD_VAR 0 1
29089: NOT
29090: PUSH
29091: LD_VAR 0 2
29095: NOT
29096: OR
29097: IFFALSE 29101
// exit ;
29099: GO 29297
// case engine of engine_solar :
29101: LD_VAR 0 2
29105: PUSH
29106: LD_INT 2
29108: DOUBLE
29109: EQUAL
29110: IFTRUE 29114
29112: GO 29152
29114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29115: LD_ADDR_VAR 0 3
29119: PUSH
29120: LD_INT 11
29122: PUSH
29123: LD_INT 12
29125: PUSH
29126: LD_INT 13
29128: PUSH
29129: LD_INT 14
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: LD_INT 2
29137: PUSH
29138: LD_INT 3
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: ST_TO_ADDR
29150: GO 29281
29152: LD_INT 1
29154: DOUBLE
29155: EQUAL
29156: IFTRUE 29160
29158: GO 29222
29160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29161: LD_ADDR_VAR 0 3
29165: PUSH
29166: LD_INT 11
29168: PUSH
29169: LD_INT 12
29171: PUSH
29172: LD_INT 13
29174: PUSH
29175: LD_INT 14
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 2
29183: PUSH
29184: LD_INT 3
29186: PUSH
29187: LD_INT 4
29189: PUSH
29190: LD_INT 5
29192: PUSH
29193: LD_INT 21
29195: PUSH
29196: LD_INT 23
29198: PUSH
29199: LD_INT 22
29201: PUSH
29202: LD_INT 24
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
29220: GO 29281
29222: LD_INT 3
29224: DOUBLE
29225: EQUAL
29226: IFTRUE 29230
29228: GO 29280
29230: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29231: LD_ADDR_VAR 0 3
29235: PUSH
29236: LD_INT 13
29238: PUSH
29239: LD_INT 14
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: LD_INT 3
29247: PUSH
29248: LD_INT 4
29250: PUSH
29251: LD_INT 5
29253: PUSH
29254: LD_INT 21
29256: PUSH
29257: LD_INT 22
29259: PUSH
29260: LD_INT 23
29262: PUSH
29263: LD_INT 24
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: ST_TO_ADDR
29278: GO 29281
29280: POP
// result := ( chassis in result ) ;
29281: LD_ADDR_VAR 0 3
29285: PUSH
29286: LD_VAR 0 1
29290: PUSH
29291: LD_VAR 0 3
29295: IN
29296: ST_TO_ADDR
// end ;
29297: LD_VAR 0 3
29301: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29302: LD_INT 0
29304: PPUSH
// if not chassis or not weapon then
29305: LD_VAR 0 1
29309: NOT
29310: PUSH
29311: LD_VAR 0 2
29315: NOT
29316: OR
29317: IFFALSE 29321
// exit ;
29319: GO 30347
// case weapon of us_machine_gun :
29321: LD_VAR 0 2
29325: PUSH
29326: LD_INT 2
29328: DOUBLE
29329: EQUAL
29330: IFTRUE 29334
29332: GO 29364
29334: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29335: LD_ADDR_VAR 0 3
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: LD_INT 2
29345: PUSH
29346: LD_INT 3
29348: PUSH
29349: LD_INT 4
29351: PUSH
29352: LD_INT 5
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: ST_TO_ADDR
29362: GO 30331
29364: LD_INT 3
29366: DOUBLE
29367: EQUAL
29368: IFTRUE 29372
29370: GO 29402
29372: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29373: LD_ADDR_VAR 0 3
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: LD_INT 2
29383: PUSH
29384: LD_INT 3
29386: PUSH
29387: LD_INT 4
29389: PUSH
29390: LD_INT 5
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: ST_TO_ADDR
29400: GO 30331
29402: LD_INT 11
29404: DOUBLE
29405: EQUAL
29406: IFTRUE 29410
29408: GO 29440
29410: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29411: LD_ADDR_VAR 0 3
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: LD_INT 4
29427: PUSH
29428: LD_INT 5
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: ST_TO_ADDR
29438: GO 30331
29440: LD_INT 4
29442: DOUBLE
29443: EQUAL
29444: IFTRUE 29448
29446: GO 29474
29448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29449: LD_ADDR_VAR 0 3
29453: PUSH
29454: LD_INT 2
29456: PUSH
29457: LD_INT 3
29459: PUSH
29460: LD_INT 4
29462: PUSH
29463: LD_INT 5
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: ST_TO_ADDR
29472: GO 30331
29474: LD_INT 5
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29508
29482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29483: LD_ADDR_VAR 0 3
29487: PUSH
29488: LD_INT 2
29490: PUSH
29491: LD_INT 3
29493: PUSH
29494: LD_INT 4
29496: PUSH
29497: LD_INT 5
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: ST_TO_ADDR
29506: GO 30331
29508: LD_INT 9
29510: DOUBLE
29511: EQUAL
29512: IFTRUE 29516
29514: GO 29542
29516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29517: LD_ADDR_VAR 0 3
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: LD_INT 3
29527: PUSH
29528: LD_INT 4
29530: PUSH
29531: LD_INT 5
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: ST_TO_ADDR
29540: GO 30331
29542: LD_INT 7
29544: DOUBLE
29545: EQUAL
29546: IFTRUE 29550
29548: GO 29576
29550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29551: LD_ADDR_VAR 0 3
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: LD_INT 3
29561: PUSH
29562: LD_INT 4
29564: PUSH
29565: LD_INT 5
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: ST_TO_ADDR
29574: GO 30331
29576: LD_INT 12
29578: DOUBLE
29579: EQUAL
29580: IFTRUE 29584
29582: GO 29610
29584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29585: LD_ADDR_VAR 0 3
29589: PUSH
29590: LD_INT 2
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: LD_INT 4
29598: PUSH
29599: LD_INT 5
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: ST_TO_ADDR
29608: GO 30331
29610: LD_INT 13
29612: DOUBLE
29613: EQUAL
29614: IFTRUE 29618
29616: GO 29644
29618: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29619: LD_ADDR_VAR 0 3
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: LD_INT 3
29629: PUSH
29630: LD_INT 4
29632: PUSH
29633: LD_INT 5
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: ST_TO_ADDR
29642: GO 30331
29644: LD_INT 14
29646: DOUBLE
29647: EQUAL
29648: IFTRUE 29652
29650: GO 29670
29652: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29653: LD_ADDR_VAR 0 3
29657: PUSH
29658: LD_INT 4
29660: PUSH
29661: LD_INT 5
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: ST_TO_ADDR
29668: GO 30331
29670: LD_INT 6
29672: DOUBLE
29673: EQUAL
29674: IFTRUE 29678
29676: GO 29696
29678: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29679: LD_ADDR_VAR 0 3
29683: PUSH
29684: LD_INT 4
29686: PUSH
29687: LD_INT 5
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: ST_TO_ADDR
29694: GO 30331
29696: LD_INT 10
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29722
29704: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29705: LD_ADDR_VAR 0 3
29709: PUSH
29710: LD_INT 4
29712: PUSH
29713: LD_INT 5
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: ST_TO_ADDR
29720: GO 30331
29722: LD_INT 22
29724: DOUBLE
29725: EQUAL
29726: IFTRUE 29730
29728: GO 29756
29730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29731: LD_ADDR_VAR 0 3
29735: PUSH
29736: LD_INT 11
29738: PUSH
29739: LD_INT 12
29741: PUSH
29742: LD_INT 13
29744: PUSH
29745: LD_INT 14
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: ST_TO_ADDR
29754: GO 30331
29756: LD_INT 23
29758: DOUBLE
29759: EQUAL
29760: IFTRUE 29764
29762: GO 29790
29764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29765: LD_ADDR_VAR 0 3
29769: PUSH
29770: LD_INT 11
29772: PUSH
29773: LD_INT 12
29775: PUSH
29776: LD_INT 13
29778: PUSH
29779: LD_INT 14
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: ST_TO_ADDR
29788: GO 30331
29790: LD_INT 24
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29824
29798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29799: LD_ADDR_VAR 0 3
29803: PUSH
29804: LD_INT 11
29806: PUSH
29807: LD_INT 12
29809: PUSH
29810: LD_INT 13
29812: PUSH
29813: LD_INT 14
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: ST_TO_ADDR
29822: GO 30331
29824: LD_INT 30
29826: DOUBLE
29827: EQUAL
29828: IFTRUE 29832
29830: GO 29858
29832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29833: LD_ADDR_VAR 0 3
29837: PUSH
29838: LD_INT 11
29840: PUSH
29841: LD_INT 12
29843: PUSH
29844: LD_INT 13
29846: PUSH
29847: LD_INT 14
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: ST_TO_ADDR
29856: GO 30331
29858: LD_INT 25
29860: DOUBLE
29861: EQUAL
29862: IFTRUE 29866
29864: GO 29884
29866: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29867: LD_ADDR_VAR 0 3
29871: PUSH
29872: LD_INT 13
29874: PUSH
29875: LD_INT 14
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: ST_TO_ADDR
29882: GO 30331
29884: LD_INT 27
29886: DOUBLE
29887: EQUAL
29888: IFTRUE 29892
29890: GO 29910
29892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29893: LD_ADDR_VAR 0 3
29897: PUSH
29898: LD_INT 13
29900: PUSH
29901: LD_INT 14
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: ST_TO_ADDR
29908: GO 30331
29910: LD_INT 28
29912: DOUBLE
29913: EQUAL
29914: IFTRUE 29918
29916: GO 29936
29918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29919: LD_ADDR_VAR 0 3
29923: PUSH
29924: LD_INT 13
29926: PUSH
29927: LD_INT 14
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: ST_TO_ADDR
29934: GO 30331
29936: LD_INT 29
29938: DOUBLE
29939: EQUAL
29940: IFTRUE 29944
29942: GO 29962
29944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29945: LD_ADDR_VAR 0 3
29949: PUSH
29950: LD_INT 13
29952: PUSH
29953: LD_INT 14
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: ST_TO_ADDR
29960: GO 30331
29962: LD_INT 31
29964: DOUBLE
29965: EQUAL
29966: IFTRUE 29970
29968: GO 29988
29970: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29971: LD_ADDR_VAR 0 3
29975: PUSH
29976: LD_INT 13
29978: PUSH
29979: LD_INT 14
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: ST_TO_ADDR
29986: GO 30331
29988: LD_INT 26
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 29996
29994: GO 30014
29996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29997: LD_ADDR_VAR 0 3
30001: PUSH
30002: LD_INT 13
30004: PUSH
30005: LD_INT 14
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: ST_TO_ADDR
30012: GO 30331
30014: LD_INT 42
30016: DOUBLE
30017: EQUAL
30018: IFTRUE 30022
30020: GO 30048
30022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: LD_INT 21
30030: PUSH
30031: LD_INT 22
30033: PUSH
30034: LD_INT 23
30036: PUSH
30037: LD_INT 24
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
30046: GO 30331
30048: LD_INT 43
30050: DOUBLE
30051: EQUAL
30052: IFTRUE 30056
30054: GO 30082
30056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30057: LD_ADDR_VAR 0 3
30061: PUSH
30062: LD_INT 21
30064: PUSH
30065: LD_INT 22
30067: PUSH
30068: LD_INT 23
30070: PUSH
30071: LD_INT 24
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: ST_TO_ADDR
30080: GO 30331
30082: LD_INT 44
30084: DOUBLE
30085: EQUAL
30086: IFTRUE 30090
30088: GO 30116
30090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30091: LD_ADDR_VAR 0 3
30095: PUSH
30096: LD_INT 21
30098: PUSH
30099: LD_INT 22
30101: PUSH
30102: LD_INT 23
30104: PUSH
30105: LD_INT 24
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: ST_TO_ADDR
30114: GO 30331
30116: LD_INT 45
30118: DOUBLE
30119: EQUAL
30120: IFTRUE 30124
30122: GO 30150
30124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30125: LD_ADDR_VAR 0 3
30129: PUSH
30130: LD_INT 21
30132: PUSH
30133: LD_INT 22
30135: PUSH
30136: LD_INT 23
30138: PUSH
30139: LD_INT 24
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: ST_TO_ADDR
30148: GO 30331
30150: LD_INT 49
30152: DOUBLE
30153: EQUAL
30154: IFTRUE 30158
30156: GO 30184
30158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30159: LD_ADDR_VAR 0 3
30163: PUSH
30164: LD_INT 21
30166: PUSH
30167: LD_INT 22
30169: PUSH
30170: LD_INT 23
30172: PUSH
30173: LD_INT 24
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: ST_TO_ADDR
30182: GO 30331
30184: LD_INT 51
30186: DOUBLE
30187: EQUAL
30188: IFTRUE 30192
30190: GO 30218
30192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30193: LD_ADDR_VAR 0 3
30197: PUSH
30198: LD_INT 21
30200: PUSH
30201: LD_INT 22
30203: PUSH
30204: LD_INT 23
30206: PUSH
30207: LD_INT 24
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: ST_TO_ADDR
30216: GO 30331
30218: LD_INT 52
30220: DOUBLE
30221: EQUAL
30222: IFTRUE 30226
30224: GO 30252
30226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30227: LD_ADDR_VAR 0 3
30231: PUSH
30232: LD_INT 21
30234: PUSH
30235: LD_INT 22
30237: PUSH
30238: LD_INT 23
30240: PUSH
30241: LD_INT 24
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: ST_TO_ADDR
30250: GO 30331
30252: LD_INT 53
30254: DOUBLE
30255: EQUAL
30256: IFTRUE 30260
30258: GO 30278
30260: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30261: LD_ADDR_VAR 0 3
30265: PUSH
30266: LD_INT 23
30268: PUSH
30269: LD_INT 24
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: ST_TO_ADDR
30276: GO 30331
30278: LD_INT 46
30280: DOUBLE
30281: EQUAL
30282: IFTRUE 30286
30284: GO 30304
30286: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30287: LD_ADDR_VAR 0 3
30291: PUSH
30292: LD_INT 23
30294: PUSH
30295: LD_INT 24
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: ST_TO_ADDR
30302: GO 30331
30304: LD_INT 47
30306: DOUBLE
30307: EQUAL
30308: IFTRUE 30312
30310: GO 30330
30312: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30313: LD_ADDR_VAR 0 3
30317: PUSH
30318: LD_INT 23
30320: PUSH
30321: LD_INT 24
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: ST_TO_ADDR
30328: GO 30331
30330: POP
// result := ( chassis in result ) ;
30331: LD_ADDR_VAR 0 3
30335: PUSH
30336: LD_VAR 0 1
30340: PUSH
30341: LD_VAR 0 3
30345: IN
30346: ST_TO_ADDR
// end ;
30347: LD_VAR 0 3
30351: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30352: LD_INT 0
30354: PPUSH
30355: PPUSH
30356: PPUSH
30357: PPUSH
30358: PPUSH
30359: PPUSH
30360: PPUSH
// result := array ;
30361: LD_ADDR_VAR 0 5
30365: PUSH
30366: LD_VAR 0 1
30370: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30371: LD_VAR 0 1
30375: NOT
30376: PUSH
30377: LD_VAR 0 2
30381: NOT
30382: OR
30383: PUSH
30384: LD_VAR 0 3
30388: NOT
30389: OR
30390: PUSH
30391: LD_VAR 0 2
30395: PUSH
30396: LD_VAR 0 1
30400: GREATER
30401: OR
30402: PUSH
30403: LD_VAR 0 3
30407: PUSH
30408: LD_VAR 0 1
30412: GREATER
30413: OR
30414: IFFALSE 30418
// exit ;
30416: GO 30714
// if direction then
30418: LD_VAR 0 4
30422: IFFALSE 30486
// begin d := 1 ;
30424: LD_ADDR_VAR 0 9
30428: PUSH
30429: LD_INT 1
30431: ST_TO_ADDR
// if i_from > i_to then
30432: LD_VAR 0 2
30436: PUSH
30437: LD_VAR 0 3
30441: GREATER
30442: IFFALSE 30468
// length := ( array - i_from ) + i_to else
30444: LD_ADDR_VAR 0 11
30448: PUSH
30449: LD_VAR 0 1
30453: PUSH
30454: LD_VAR 0 2
30458: MINUS
30459: PUSH
30460: LD_VAR 0 3
30464: PLUS
30465: ST_TO_ADDR
30466: GO 30484
// length := i_to - i_from ;
30468: LD_ADDR_VAR 0 11
30472: PUSH
30473: LD_VAR 0 3
30477: PUSH
30478: LD_VAR 0 2
30482: MINUS
30483: ST_TO_ADDR
// end else
30484: GO 30547
// begin d := - 1 ;
30486: LD_ADDR_VAR 0 9
30490: PUSH
30491: LD_INT 1
30493: NEG
30494: ST_TO_ADDR
// if i_from > i_to then
30495: LD_VAR 0 2
30499: PUSH
30500: LD_VAR 0 3
30504: GREATER
30505: IFFALSE 30525
// length := i_from - i_to else
30507: LD_ADDR_VAR 0 11
30511: PUSH
30512: LD_VAR 0 2
30516: PUSH
30517: LD_VAR 0 3
30521: MINUS
30522: ST_TO_ADDR
30523: GO 30547
// length := ( array - i_to ) + i_from ;
30525: LD_ADDR_VAR 0 11
30529: PUSH
30530: LD_VAR 0 1
30534: PUSH
30535: LD_VAR 0 3
30539: MINUS
30540: PUSH
30541: LD_VAR 0 2
30545: PLUS
30546: ST_TO_ADDR
// end ; if not length then
30547: LD_VAR 0 11
30551: NOT
30552: IFFALSE 30556
// exit ;
30554: GO 30714
// tmp := array ;
30556: LD_ADDR_VAR 0 10
30560: PUSH
30561: LD_VAR 0 1
30565: ST_TO_ADDR
// for i = 1 to length do
30566: LD_ADDR_VAR 0 6
30570: PUSH
30571: DOUBLE
30572: LD_INT 1
30574: DEC
30575: ST_TO_ADDR
30576: LD_VAR 0 11
30580: PUSH
30581: FOR_TO
30582: IFFALSE 30702
// begin for j = 1 to array do
30584: LD_ADDR_VAR 0 7
30588: PUSH
30589: DOUBLE
30590: LD_INT 1
30592: DEC
30593: ST_TO_ADDR
30594: LD_VAR 0 1
30598: PUSH
30599: FOR_TO
30600: IFFALSE 30688
// begin k := j + d ;
30602: LD_ADDR_VAR 0 8
30606: PUSH
30607: LD_VAR 0 7
30611: PUSH
30612: LD_VAR 0 9
30616: PLUS
30617: ST_TO_ADDR
// if k > array then
30618: LD_VAR 0 8
30622: PUSH
30623: LD_VAR 0 1
30627: GREATER
30628: IFFALSE 30638
// k := 1 ;
30630: LD_ADDR_VAR 0 8
30634: PUSH
30635: LD_INT 1
30637: ST_TO_ADDR
// if not k then
30638: LD_VAR 0 8
30642: NOT
30643: IFFALSE 30655
// k := array ;
30645: LD_ADDR_VAR 0 8
30649: PUSH
30650: LD_VAR 0 1
30654: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30655: LD_ADDR_VAR 0 10
30659: PUSH
30660: LD_VAR 0 10
30664: PPUSH
30665: LD_VAR 0 8
30669: PPUSH
30670: LD_VAR 0 1
30674: PUSH
30675: LD_VAR 0 7
30679: ARRAY
30680: PPUSH
30681: CALL_OW 1
30685: ST_TO_ADDR
// end ;
30686: GO 30599
30688: POP
30689: POP
// array := tmp ;
30690: LD_ADDR_VAR 0 1
30694: PUSH
30695: LD_VAR 0 10
30699: ST_TO_ADDR
// end ;
30700: GO 30581
30702: POP
30703: POP
// result := array ;
30704: LD_ADDR_VAR 0 5
30708: PUSH
30709: LD_VAR 0 1
30713: ST_TO_ADDR
// end ;
30714: LD_VAR 0 5
30718: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30719: LD_INT 0
30721: PPUSH
30722: PPUSH
// result := 0 ;
30723: LD_ADDR_VAR 0 3
30727: PUSH
30728: LD_INT 0
30730: ST_TO_ADDR
// if not array or not value in array then
30731: LD_VAR 0 1
30735: NOT
30736: PUSH
30737: LD_VAR 0 2
30741: PUSH
30742: LD_VAR 0 1
30746: IN
30747: NOT
30748: OR
30749: IFFALSE 30753
// exit ;
30751: GO 30807
// for i = 1 to array do
30753: LD_ADDR_VAR 0 4
30757: PUSH
30758: DOUBLE
30759: LD_INT 1
30761: DEC
30762: ST_TO_ADDR
30763: LD_VAR 0 1
30767: PUSH
30768: FOR_TO
30769: IFFALSE 30805
// if value = array [ i ] then
30771: LD_VAR 0 2
30775: PUSH
30776: LD_VAR 0 1
30780: PUSH
30781: LD_VAR 0 4
30785: ARRAY
30786: EQUAL
30787: IFFALSE 30803
// begin result := i ;
30789: LD_ADDR_VAR 0 3
30793: PUSH
30794: LD_VAR 0 4
30798: ST_TO_ADDR
// exit ;
30799: POP
30800: POP
30801: GO 30807
// end ;
30803: GO 30768
30805: POP
30806: POP
// end ;
30807: LD_VAR 0 3
30811: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30812: LD_INT 0
30814: PPUSH
// vc_chassis := chassis ;
30815: LD_ADDR_OWVAR 37
30819: PUSH
30820: LD_VAR 0 1
30824: ST_TO_ADDR
// vc_engine := engine ;
30825: LD_ADDR_OWVAR 39
30829: PUSH
30830: LD_VAR 0 2
30834: ST_TO_ADDR
// vc_control := control ;
30835: LD_ADDR_OWVAR 38
30839: PUSH
30840: LD_VAR 0 3
30844: ST_TO_ADDR
// vc_weapon := weapon ;
30845: LD_ADDR_OWVAR 40
30849: PUSH
30850: LD_VAR 0 4
30854: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30855: LD_ADDR_OWVAR 41
30859: PUSH
30860: LD_VAR 0 5
30864: ST_TO_ADDR
// end ;
30865: LD_VAR 0 6
30869: RET
// export function WantPlant ( unit ) ; var task ; begin
30870: LD_INT 0
30872: PPUSH
30873: PPUSH
// result := false ;
30874: LD_ADDR_VAR 0 2
30878: PUSH
30879: LD_INT 0
30881: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: LD_VAR 0 1
30891: PPUSH
30892: CALL_OW 437
30896: ST_TO_ADDR
// if task then
30897: LD_VAR 0 3
30901: IFFALSE 30929
// if task [ 1 ] [ 1 ] = p then
30903: LD_VAR 0 3
30907: PUSH
30908: LD_INT 1
30910: ARRAY
30911: PUSH
30912: LD_INT 1
30914: ARRAY
30915: PUSH
30916: LD_STRING p
30918: EQUAL
30919: IFFALSE 30929
// result := true ;
30921: LD_ADDR_VAR 0 2
30925: PUSH
30926: LD_INT 1
30928: ST_TO_ADDR
// end ;
30929: LD_VAR 0 2
30933: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30934: LD_INT 0
30936: PPUSH
30937: PPUSH
30938: PPUSH
30939: PPUSH
// if pos < 1 then
30940: LD_VAR 0 2
30944: PUSH
30945: LD_INT 1
30947: LESS
30948: IFFALSE 30952
// exit ;
30950: GO 31255
// if pos = 1 then
30952: LD_VAR 0 2
30956: PUSH
30957: LD_INT 1
30959: EQUAL
30960: IFFALSE 30993
// result := Replace ( arr , pos [ 1 ] , value ) else
30962: LD_ADDR_VAR 0 4
30966: PUSH
30967: LD_VAR 0 1
30971: PPUSH
30972: LD_VAR 0 2
30976: PUSH
30977: LD_INT 1
30979: ARRAY
30980: PPUSH
30981: LD_VAR 0 3
30985: PPUSH
30986: CALL_OW 1
30990: ST_TO_ADDR
30991: GO 31255
// begin tmp := arr ;
30993: LD_ADDR_VAR 0 6
30997: PUSH
30998: LD_VAR 0 1
31002: ST_TO_ADDR
// s_arr := [ tmp ] ;
31003: LD_ADDR_VAR 0 7
31007: PUSH
31008: LD_VAR 0 6
31012: PUSH
31013: EMPTY
31014: LIST
31015: ST_TO_ADDR
// for i = 1 to pos - 1 do
31016: LD_ADDR_VAR 0 5
31020: PUSH
31021: DOUBLE
31022: LD_INT 1
31024: DEC
31025: ST_TO_ADDR
31026: LD_VAR 0 2
31030: PUSH
31031: LD_INT 1
31033: MINUS
31034: PUSH
31035: FOR_TO
31036: IFFALSE 31081
// begin tmp := tmp [ pos [ i ] ] ;
31038: LD_ADDR_VAR 0 6
31042: PUSH
31043: LD_VAR 0 6
31047: PUSH
31048: LD_VAR 0 2
31052: PUSH
31053: LD_VAR 0 5
31057: ARRAY
31058: ARRAY
31059: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31060: LD_ADDR_VAR 0 7
31064: PUSH
31065: LD_VAR 0 7
31069: PUSH
31070: LD_VAR 0 6
31074: PUSH
31075: EMPTY
31076: LIST
31077: ADD
31078: ST_TO_ADDR
// end ;
31079: GO 31035
31081: POP
31082: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31083: LD_ADDR_VAR 0 6
31087: PUSH
31088: LD_VAR 0 6
31092: PPUSH
31093: LD_VAR 0 2
31097: PUSH
31098: LD_VAR 0 2
31102: ARRAY
31103: PPUSH
31104: LD_VAR 0 3
31108: PPUSH
31109: CALL_OW 1
31113: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31114: LD_ADDR_VAR 0 7
31118: PUSH
31119: LD_VAR 0 7
31123: PPUSH
31124: LD_VAR 0 7
31128: PPUSH
31129: LD_VAR 0 6
31133: PPUSH
31134: CALL_OW 1
31138: ST_TO_ADDR
// for i = s_arr downto 2 do
31139: LD_ADDR_VAR 0 5
31143: PUSH
31144: DOUBLE
31145: LD_VAR 0 7
31149: INC
31150: ST_TO_ADDR
31151: LD_INT 2
31153: PUSH
31154: FOR_DOWNTO
31155: IFFALSE 31239
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31157: LD_ADDR_VAR 0 6
31161: PUSH
31162: LD_VAR 0 7
31166: PUSH
31167: LD_VAR 0 5
31171: PUSH
31172: LD_INT 1
31174: MINUS
31175: ARRAY
31176: PPUSH
31177: LD_VAR 0 2
31181: PUSH
31182: LD_VAR 0 5
31186: PUSH
31187: LD_INT 1
31189: MINUS
31190: ARRAY
31191: PPUSH
31192: LD_VAR 0 7
31196: PUSH
31197: LD_VAR 0 5
31201: ARRAY
31202: PPUSH
31203: CALL_OW 1
31207: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31208: LD_ADDR_VAR 0 7
31212: PUSH
31213: LD_VAR 0 7
31217: PPUSH
31218: LD_VAR 0 5
31222: PUSH
31223: LD_INT 1
31225: MINUS
31226: PPUSH
31227: LD_VAR 0 6
31231: PPUSH
31232: CALL_OW 1
31236: ST_TO_ADDR
// end ;
31237: GO 31154
31239: POP
31240: POP
// result := s_arr [ 1 ] ;
31241: LD_ADDR_VAR 0 4
31245: PUSH
31246: LD_VAR 0 7
31250: PUSH
31251: LD_INT 1
31253: ARRAY
31254: ST_TO_ADDR
// end ; end ;
31255: LD_VAR 0 4
31259: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31260: LD_INT 0
31262: PPUSH
31263: PPUSH
// if not list then
31264: LD_VAR 0 1
31268: NOT
31269: IFFALSE 31273
// exit ;
31271: GO 31364
// i := list [ pos1 ] ;
31273: LD_ADDR_VAR 0 5
31277: PUSH
31278: LD_VAR 0 1
31282: PUSH
31283: LD_VAR 0 2
31287: ARRAY
31288: ST_TO_ADDR
// if not i then
31289: LD_VAR 0 5
31293: NOT
31294: IFFALSE 31298
// exit ;
31296: GO 31364
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31298: LD_ADDR_VAR 0 1
31302: PUSH
31303: LD_VAR 0 1
31307: PPUSH
31308: LD_VAR 0 2
31312: PPUSH
31313: LD_VAR 0 1
31317: PUSH
31318: LD_VAR 0 3
31322: ARRAY
31323: PPUSH
31324: CALL_OW 1
31328: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31329: LD_ADDR_VAR 0 1
31333: PUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: LD_VAR 0 3
31343: PPUSH
31344: LD_VAR 0 5
31348: PPUSH
31349: CALL_OW 1
31353: ST_TO_ADDR
// result := list ;
31354: LD_ADDR_VAR 0 4
31358: PUSH
31359: LD_VAR 0 1
31363: ST_TO_ADDR
// end ;
31364: LD_VAR 0 4
31368: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31369: LD_INT 0
31371: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31372: LD_ADDR_VAR 0 5
31376: PUSH
31377: LD_VAR 0 1
31381: PPUSH
31382: CALL_OW 250
31386: PPUSH
31387: LD_VAR 0 1
31391: PPUSH
31392: CALL_OW 251
31396: PPUSH
31397: LD_VAR 0 2
31401: PPUSH
31402: LD_VAR 0 3
31406: PPUSH
31407: LD_VAR 0 4
31411: PPUSH
31412: CALL 31422 0 5
31416: ST_TO_ADDR
// end ;
31417: LD_VAR 0 5
31421: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31422: LD_INT 0
31424: PPUSH
31425: PPUSH
31426: PPUSH
31427: PPUSH
// if not list then
31428: LD_VAR 0 3
31432: NOT
31433: IFFALSE 31437
// exit ;
31435: GO 31825
// result := [ ] ;
31437: LD_ADDR_VAR 0 6
31441: PUSH
31442: EMPTY
31443: ST_TO_ADDR
// for i in list do
31444: LD_ADDR_VAR 0 7
31448: PUSH
31449: LD_VAR 0 3
31453: PUSH
31454: FOR_IN
31455: IFFALSE 31657
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31457: LD_ADDR_VAR 0 9
31461: PUSH
31462: LD_VAR 0 7
31466: PPUSH
31467: LD_VAR 0 1
31471: PPUSH
31472: LD_VAR 0 2
31476: PPUSH
31477: CALL_OW 297
31481: ST_TO_ADDR
// if not result then
31482: LD_VAR 0 6
31486: NOT
31487: IFFALSE 31513
// result := [ [ i , tmp ] ] else
31489: LD_ADDR_VAR 0 6
31493: PUSH
31494: LD_VAR 0 7
31498: PUSH
31499: LD_VAR 0 9
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: EMPTY
31509: LIST
31510: ST_TO_ADDR
31511: GO 31655
// begin if result [ result ] [ 2 ] < tmp then
31513: LD_VAR 0 6
31517: PUSH
31518: LD_VAR 0 6
31522: ARRAY
31523: PUSH
31524: LD_INT 2
31526: ARRAY
31527: PUSH
31528: LD_VAR 0 9
31532: LESS
31533: IFFALSE 31575
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31535: LD_ADDR_VAR 0 6
31539: PUSH
31540: LD_VAR 0 6
31544: PPUSH
31545: LD_VAR 0 6
31549: PUSH
31550: LD_INT 1
31552: PLUS
31553: PPUSH
31554: LD_VAR 0 7
31558: PUSH
31559: LD_VAR 0 9
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PPUSH
31568: CALL_OW 2
31572: ST_TO_ADDR
31573: GO 31655
// for j = 1 to result do
31575: LD_ADDR_VAR 0 8
31579: PUSH
31580: DOUBLE
31581: LD_INT 1
31583: DEC
31584: ST_TO_ADDR
31585: LD_VAR 0 6
31589: PUSH
31590: FOR_TO
31591: IFFALSE 31653
// begin if tmp < result [ j ] [ 2 ] then
31593: LD_VAR 0 9
31597: PUSH
31598: LD_VAR 0 6
31602: PUSH
31603: LD_VAR 0 8
31607: ARRAY
31608: PUSH
31609: LD_INT 2
31611: ARRAY
31612: LESS
31613: IFFALSE 31651
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31615: LD_ADDR_VAR 0 6
31619: PUSH
31620: LD_VAR 0 6
31624: PPUSH
31625: LD_VAR 0 8
31629: PPUSH
31630: LD_VAR 0 7
31634: PUSH
31635: LD_VAR 0 9
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PPUSH
31644: CALL_OW 2
31648: ST_TO_ADDR
// break ;
31649: GO 31653
// end ; end ;
31651: GO 31590
31653: POP
31654: POP
// end ; end ;
31655: GO 31454
31657: POP
31658: POP
// if result and not asc then
31659: LD_VAR 0 6
31663: PUSH
31664: LD_VAR 0 4
31668: NOT
31669: AND
31670: IFFALSE 31745
// begin tmp := result ;
31672: LD_ADDR_VAR 0 9
31676: PUSH
31677: LD_VAR 0 6
31681: ST_TO_ADDR
// for i = tmp downto 1 do
31682: LD_ADDR_VAR 0 7
31686: PUSH
31687: DOUBLE
31688: LD_VAR 0 9
31692: INC
31693: ST_TO_ADDR
31694: LD_INT 1
31696: PUSH
31697: FOR_DOWNTO
31698: IFFALSE 31743
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31700: LD_ADDR_VAR 0 6
31704: PUSH
31705: LD_VAR 0 6
31709: PPUSH
31710: LD_VAR 0 9
31714: PUSH
31715: LD_VAR 0 7
31719: MINUS
31720: PUSH
31721: LD_INT 1
31723: PLUS
31724: PPUSH
31725: LD_VAR 0 9
31729: PUSH
31730: LD_VAR 0 7
31734: ARRAY
31735: PPUSH
31736: CALL_OW 1
31740: ST_TO_ADDR
31741: GO 31697
31743: POP
31744: POP
// end ; tmp := [ ] ;
31745: LD_ADDR_VAR 0 9
31749: PUSH
31750: EMPTY
31751: ST_TO_ADDR
// if mode then
31752: LD_VAR 0 5
31756: IFFALSE 31825
// begin for i = 1 to result do
31758: LD_ADDR_VAR 0 7
31762: PUSH
31763: DOUBLE
31764: LD_INT 1
31766: DEC
31767: ST_TO_ADDR
31768: LD_VAR 0 6
31772: PUSH
31773: FOR_TO
31774: IFFALSE 31813
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31776: LD_ADDR_VAR 0 9
31780: PUSH
31781: LD_VAR 0 9
31785: PPUSH
31786: LD_VAR 0 7
31790: PPUSH
31791: LD_VAR 0 6
31795: PUSH
31796: LD_VAR 0 7
31800: ARRAY
31801: PUSH
31802: LD_INT 1
31804: ARRAY
31805: PPUSH
31806: CALL_OW 1
31810: ST_TO_ADDR
31811: GO 31773
31813: POP
31814: POP
// result := tmp ;
31815: LD_ADDR_VAR 0 6
31819: PUSH
31820: LD_VAR 0 9
31824: ST_TO_ADDR
// end ; end ;
31825: LD_VAR 0 6
31829: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31830: LD_INT 0
31832: PPUSH
31833: PPUSH
31834: PPUSH
31835: PPUSH
31836: PPUSH
31837: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31838: LD_ADDR_VAR 0 5
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: EMPTY
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: ST_TO_ADDR
// if not x or not y then
31860: LD_VAR 0 2
31864: NOT
31865: PUSH
31866: LD_VAR 0 3
31870: NOT
31871: OR
31872: IFFALSE 31876
// exit ;
31874: GO 33522
// if not range then
31876: LD_VAR 0 4
31880: NOT
31881: IFFALSE 31891
// range := 10 ;
31883: LD_ADDR_VAR 0 4
31887: PUSH
31888: LD_INT 10
31890: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31891: LD_ADDR_VAR 0 8
31895: PUSH
31896: LD_INT 81
31898: PUSH
31899: LD_VAR 0 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 92
31910: PUSH
31911: LD_VAR 0 2
31915: PUSH
31916: LD_VAR 0 3
31920: PUSH
31921: LD_VAR 0 4
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: LD_INT 21
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: LIST
31953: PPUSH
31954: CALL_OW 69
31958: ST_TO_ADDR
// if not tmp then
31959: LD_VAR 0 8
31963: NOT
31964: IFFALSE 31968
// exit ;
31966: GO 33522
// for i in tmp do
31968: LD_ADDR_VAR 0 6
31972: PUSH
31973: LD_VAR 0 8
31977: PUSH
31978: FOR_IN
31979: IFFALSE 33497
// begin points := [ 0 , 0 , 0 ] ;
31981: LD_ADDR_VAR 0 9
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: ST_TO_ADDR
// bpoints := 1 ;
32000: LD_ADDR_VAR 0 10
32004: PUSH
32005: LD_INT 1
32007: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32008: LD_VAR 0 6
32012: PPUSH
32013: CALL_OW 247
32017: PUSH
32018: LD_INT 1
32020: DOUBLE
32021: EQUAL
32022: IFTRUE 32026
32024: GO 32604
32026: POP
// begin if GetClass ( i ) = 1 then
32027: LD_VAR 0 6
32031: PPUSH
32032: CALL_OW 257
32036: PUSH
32037: LD_INT 1
32039: EQUAL
32040: IFFALSE 32061
// points := [ 10 , 5 , 3 ] ;
32042: LD_ADDR_VAR 0 9
32046: PUSH
32047: LD_INT 10
32049: PUSH
32050: LD_INT 5
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: LIST
32060: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32061: LD_VAR 0 6
32065: PPUSH
32066: CALL_OW 257
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: LD_INT 3
32076: PUSH
32077: LD_INT 4
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: IN
32085: IFFALSE 32106
// points := [ 3 , 2 , 1 ] ;
32087: LD_ADDR_VAR 0 9
32091: PUSH
32092: LD_INT 3
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32106: LD_VAR 0 6
32110: PPUSH
32111: CALL_OW 257
32115: PUSH
32116: LD_INT 5
32118: EQUAL
32119: IFFALSE 32140
// points := [ 130 , 5 , 2 ] ;
32121: LD_ADDR_VAR 0 9
32125: PUSH
32126: LD_INT 130
32128: PUSH
32129: LD_INT 5
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: LIST
32139: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32140: LD_VAR 0 6
32144: PPUSH
32145: CALL_OW 257
32149: PUSH
32150: LD_INT 8
32152: EQUAL
32153: IFFALSE 32174
// points := [ 35 , 35 , 30 ] ;
32155: LD_ADDR_VAR 0 9
32159: PUSH
32160: LD_INT 35
32162: PUSH
32163: LD_INT 35
32165: PUSH
32166: LD_INT 30
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32174: LD_VAR 0 6
32178: PPUSH
32179: CALL_OW 257
32183: PUSH
32184: LD_INT 9
32186: EQUAL
32187: IFFALSE 32208
// points := [ 20 , 55 , 40 ] ;
32189: LD_ADDR_VAR 0 9
32193: PUSH
32194: LD_INT 20
32196: PUSH
32197: LD_INT 55
32199: PUSH
32200: LD_INT 40
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32208: LD_VAR 0 6
32212: PPUSH
32213: CALL_OW 257
32217: PUSH
32218: LD_INT 12
32220: PUSH
32221: LD_INT 16
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: IN
32228: IFFALSE 32249
// points := [ 5 , 3 , 2 ] ;
32230: LD_ADDR_VAR 0 9
32234: PUSH
32235: LD_INT 5
32237: PUSH
32238: LD_INT 3
32240: PUSH
32241: LD_INT 2
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: LIST
32248: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32249: LD_VAR 0 6
32253: PPUSH
32254: CALL_OW 257
32258: PUSH
32259: LD_INT 17
32261: EQUAL
32262: IFFALSE 32283
// points := [ 100 , 50 , 75 ] ;
32264: LD_ADDR_VAR 0 9
32268: PUSH
32269: LD_INT 100
32271: PUSH
32272: LD_INT 50
32274: PUSH
32275: LD_INT 75
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32283: LD_VAR 0 6
32287: PPUSH
32288: CALL_OW 257
32292: PUSH
32293: LD_INT 15
32295: EQUAL
32296: IFFALSE 32317
// points := [ 10 , 5 , 3 ] ;
32298: LD_ADDR_VAR 0 9
32302: PUSH
32303: LD_INT 10
32305: PUSH
32306: LD_INT 5
32308: PUSH
32309: LD_INT 3
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32317: LD_VAR 0 6
32321: PPUSH
32322: CALL_OW 257
32326: PUSH
32327: LD_INT 14
32329: EQUAL
32330: IFFALSE 32351
// points := [ 10 , 0 , 0 ] ;
32332: LD_ADDR_VAR 0 9
32336: PUSH
32337: LD_INT 10
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32351: LD_VAR 0 6
32355: PPUSH
32356: CALL_OW 257
32360: PUSH
32361: LD_INT 11
32363: EQUAL
32364: IFFALSE 32385
// points := [ 30 , 10 , 5 ] ;
32366: LD_ADDR_VAR 0 9
32370: PUSH
32371: LD_INT 30
32373: PUSH
32374: LD_INT 10
32376: PUSH
32377: LD_INT 5
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: LIST
32384: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32385: LD_VAR 0 1
32389: PPUSH
32390: LD_INT 5
32392: PPUSH
32393: CALL_OW 321
32397: PUSH
32398: LD_INT 2
32400: EQUAL
32401: IFFALSE 32418
// bpoints := bpoints * 1.8 ;
32403: LD_ADDR_VAR 0 10
32407: PUSH
32408: LD_VAR 0 10
32412: PUSH
32413: LD_REAL  1.80000000000000E+0000
32416: MUL
32417: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32418: LD_VAR 0 6
32422: PPUSH
32423: CALL_OW 257
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: LD_INT 3
32436: PUSH
32437: LD_INT 4
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: IN
32446: PUSH
32447: LD_VAR 0 1
32451: PPUSH
32452: LD_INT 51
32454: PPUSH
32455: CALL_OW 321
32459: PUSH
32460: LD_INT 2
32462: EQUAL
32463: AND
32464: IFFALSE 32481
// bpoints := bpoints * 1.2 ;
32466: LD_ADDR_VAR 0 10
32470: PUSH
32471: LD_VAR 0 10
32475: PUSH
32476: LD_REAL  1.20000000000000E+0000
32479: MUL
32480: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32481: LD_VAR 0 6
32485: PPUSH
32486: CALL_OW 257
32490: PUSH
32491: LD_INT 5
32493: PUSH
32494: LD_INT 7
32496: PUSH
32497: LD_INT 9
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: IN
32505: PUSH
32506: LD_VAR 0 1
32510: PPUSH
32511: LD_INT 52
32513: PPUSH
32514: CALL_OW 321
32518: PUSH
32519: LD_INT 2
32521: EQUAL
32522: AND
32523: IFFALSE 32540
// bpoints := bpoints * 1.5 ;
32525: LD_ADDR_VAR 0 10
32529: PUSH
32530: LD_VAR 0 10
32534: PUSH
32535: LD_REAL  1.50000000000000E+0000
32538: MUL
32539: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32540: LD_VAR 0 1
32544: PPUSH
32545: LD_INT 66
32547: PPUSH
32548: CALL_OW 321
32552: PUSH
32553: LD_INT 2
32555: EQUAL
32556: IFFALSE 32573
// bpoints := bpoints * 1.1 ;
32558: LD_ADDR_VAR 0 10
32562: PUSH
32563: LD_VAR 0 10
32567: PUSH
32568: LD_REAL  1.10000000000000E+0000
32571: MUL
32572: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32573: LD_ADDR_VAR 0 10
32577: PUSH
32578: LD_VAR 0 10
32582: PUSH
32583: LD_VAR 0 6
32587: PPUSH
32588: LD_INT 1
32590: PPUSH
32591: CALL_OW 259
32595: PUSH
32596: LD_REAL  1.15000000000000E+0000
32599: MUL
32600: MUL
32601: ST_TO_ADDR
// end ; unit_vehicle :
32602: GO 33426
32604: LD_INT 2
32606: DOUBLE
32607: EQUAL
32608: IFTRUE 32612
32610: GO 33414
32612: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32613: LD_VAR 0 6
32617: PPUSH
32618: CALL_OW 264
32622: PUSH
32623: LD_INT 2
32625: PUSH
32626: LD_INT 42
32628: PUSH
32629: LD_INT 24
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: IN
32637: IFFALSE 32658
// points := [ 25 , 5 , 3 ] ;
32639: LD_ADDR_VAR 0 9
32643: PUSH
32644: LD_INT 25
32646: PUSH
32647: LD_INT 5
32649: PUSH
32650: LD_INT 3
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32658: LD_VAR 0 6
32662: PPUSH
32663: CALL_OW 264
32667: PUSH
32668: LD_INT 4
32670: PUSH
32671: LD_INT 43
32673: PUSH
32674: LD_INT 25
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: LIST
32681: IN
32682: IFFALSE 32703
// points := [ 40 , 15 , 5 ] ;
32684: LD_ADDR_VAR 0 9
32688: PUSH
32689: LD_INT 40
32691: PUSH
32692: LD_INT 15
32694: PUSH
32695: LD_INT 5
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: LIST
32702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32703: LD_VAR 0 6
32707: PPUSH
32708: CALL_OW 264
32712: PUSH
32713: LD_INT 3
32715: PUSH
32716: LD_INT 23
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: IN
32723: IFFALSE 32744
// points := [ 7 , 25 , 8 ] ;
32725: LD_ADDR_VAR 0 9
32729: PUSH
32730: LD_INT 7
32732: PUSH
32733: LD_INT 25
32735: PUSH
32736: LD_INT 8
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: LIST
32743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32744: LD_VAR 0 6
32748: PPUSH
32749: CALL_OW 264
32753: PUSH
32754: LD_INT 5
32756: PUSH
32757: LD_INT 27
32759: PUSH
32760: LD_INT 44
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: IN
32768: IFFALSE 32789
// points := [ 14 , 50 , 16 ] ;
32770: LD_ADDR_VAR 0 9
32774: PUSH
32775: LD_INT 14
32777: PUSH
32778: LD_INT 50
32780: PUSH
32781: LD_INT 16
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32789: LD_VAR 0 6
32793: PPUSH
32794: CALL_OW 264
32798: PUSH
32799: LD_INT 6
32801: PUSH
32802: LD_INT 46
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: IN
32809: IFFALSE 32830
// points := [ 32 , 120 , 70 ] ;
32811: LD_ADDR_VAR 0 9
32815: PUSH
32816: LD_INT 32
32818: PUSH
32819: LD_INT 120
32821: PUSH
32822: LD_INT 70
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
32830: LD_VAR 0 6
32834: PPUSH
32835: CALL_OW 264
32839: PUSH
32840: LD_INT 7
32842: PUSH
32843: LD_INT 28
32845: PUSH
32846: LD_INT 45
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: IN
32854: IFFALSE 32875
// points := [ 35 , 20 , 45 ] ;
32856: LD_ADDR_VAR 0 9
32860: PUSH
32861: LD_INT 35
32863: PUSH
32864: LD_INT 20
32866: PUSH
32867: LD_INT 45
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32875: LD_VAR 0 6
32879: PPUSH
32880: CALL_OW 264
32884: PUSH
32885: LD_INT 47
32887: PUSH
32888: EMPTY
32889: LIST
32890: IN
32891: IFFALSE 32912
// points := [ 67 , 45 , 75 ] ;
32893: LD_ADDR_VAR 0 9
32897: PUSH
32898: LD_INT 67
32900: PUSH
32901: LD_INT 45
32903: PUSH
32904: LD_INT 75
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32912: LD_VAR 0 6
32916: PPUSH
32917: CALL_OW 264
32921: PUSH
32922: LD_INT 26
32924: PUSH
32925: EMPTY
32926: LIST
32927: IN
32928: IFFALSE 32949
// points := [ 120 , 30 , 80 ] ;
32930: LD_ADDR_VAR 0 9
32934: PUSH
32935: LD_INT 120
32937: PUSH
32938: LD_INT 30
32940: PUSH
32941: LD_INT 80
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: LIST
32948: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32949: LD_VAR 0 6
32953: PPUSH
32954: CALL_OW 264
32958: PUSH
32959: LD_INT 22
32961: PUSH
32962: EMPTY
32963: LIST
32964: IN
32965: IFFALSE 32986
// points := [ 40 , 1 , 1 ] ;
32967: LD_ADDR_VAR 0 9
32971: PUSH
32972: LD_INT 40
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: LIST
32985: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32986: LD_VAR 0 6
32990: PPUSH
32991: CALL_OW 264
32995: PUSH
32996: LD_INT 29
32998: PUSH
32999: EMPTY
33000: LIST
33001: IN
33002: IFFALSE 33023
// points := [ 70 , 200 , 400 ] ;
33004: LD_ADDR_VAR 0 9
33008: PUSH
33009: LD_INT 70
33011: PUSH
33012: LD_INT 200
33014: PUSH
33015: LD_INT 400
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: LIST
33022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33023: LD_VAR 0 6
33027: PPUSH
33028: CALL_OW 264
33032: PUSH
33033: LD_INT 14
33035: PUSH
33036: LD_INT 53
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: IN
33043: IFFALSE 33064
// points := [ 40 , 10 , 20 ] ;
33045: LD_ADDR_VAR 0 9
33049: PUSH
33050: LD_INT 40
33052: PUSH
33053: LD_INT 10
33055: PUSH
33056: LD_INT 20
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33064: LD_VAR 0 6
33068: PPUSH
33069: CALL_OW 264
33073: PUSH
33074: LD_INT 9
33076: PUSH
33077: EMPTY
33078: LIST
33079: IN
33080: IFFALSE 33101
// points := [ 5 , 70 , 20 ] ;
33082: LD_ADDR_VAR 0 9
33086: PUSH
33087: LD_INT 5
33089: PUSH
33090: LD_INT 70
33092: PUSH
33093: LD_INT 20
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33101: LD_VAR 0 6
33105: PPUSH
33106: CALL_OW 264
33110: PUSH
33111: LD_INT 10
33113: PUSH
33114: EMPTY
33115: LIST
33116: IN
33117: IFFALSE 33138
// points := [ 35 , 110 , 70 ] ;
33119: LD_ADDR_VAR 0 9
33123: PUSH
33124: LD_INT 35
33126: PUSH
33127: LD_INT 110
33129: PUSH
33130: LD_INT 70
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33138: LD_VAR 0 6
33142: PPUSH
33143: CALL_OW 265
33147: PUSH
33148: LD_INT 25
33150: EQUAL
33151: IFFALSE 33172
// points := [ 80 , 65 , 100 ] ;
33153: LD_ADDR_VAR 0 9
33157: PUSH
33158: LD_INT 80
33160: PUSH
33161: LD_INT 65
33163: PUSH
33164: LD_INT 100
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33172: LD_VAR 0 6
33176: PPUSH
33177: CALL_OW 263
33181: PUSH
33182: LD_INT 1
33184: EQUAL
33185: IFFALSE 33220
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33187: LD_ADDR_VAR 0 10
33191: PUSH
33192: LD_VAR 0 10
33196: PUSH
33197: LD_VAR 0 6
33201: PPUSH
33202: CALL_OW 311
33206: PPUSH
33207: LD_INT 3
33209: PPUSH
33210: CALL_OW 259
33214: PUSH
33215: LD_INT 4
33217: MUL
33218: MUL
33219: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33220: LD_VAR 0 6
33224: PPUSH
33225: CALL_OW 263
33229: PUSH
33230: LD_INT 2
33232: EQUAL
33233: IFFALSE 33284
// begin j := IsControledBy ( i ) ;
33235: LD_ADDR_VAR 0 7
33239: PUSH
33240: LD_VAR 0 6
33244: PPUSH
33245: CALL_OW 312
33249: ST_TO_ADDR
// if j then
33250: LD_VAR 0 7
33254: IFFALSE 33284
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33256: LD_ADDR_VAR 0 10
33260: PUSH
33261: LD_VAR 0 10
33265: PUSH
33266: LD_VAR 0 7
33270: PPUSH
33271: LD_INT 3
33273: PPUSH
33274: CALL_OW 259
33278: PUSH
33279: LD_INT 3
33281: MUL
33282: MUL
33283: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33284: LD_VAR 0 6
33288: PPUSH
33289: CALL_OW 264
33293: PUSH
33294: LD_INT 5
33296: PUSH
33297: LD_INT 6
33299: PUSH
33300: LD_INT 46
33302: PUSH
33303: LD_INT 44
33305: PUSH
33306: LD_INT 47
33308: PUSH
33309: LD_INT 45
33311: PUSH
33312: LD_INT 28
33314: PUSH
33315: LD_INT 7
33317: PUSH
33318: LD_INT 27
33320: PUSH
33321: LD_INT 29
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: IN
33336: PUSH
33337: LD_VAR 0 1
33341: PPUSH
33342: LD_INT 52
33344: PPUSH
33345: CALL_OW 321
33349: PUSH
33350: LD_INT 2
33352: EQUAL
33353: AND
33354: IFFALSE 33371
// bpoints := bpoints * 1.2 ;
33356: LD_ADDR_VAR 0 10
33360: PUSH
33361: LD_VAR 0 10
33365: PUSH
33366: LD_REAL  1.20000000000000E+0000
33369: MUL
33370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33371: LD_VAR 0 6
33375: PPUSH
33376: CALL_OW 264
33380: PUSH
33381: LD_INT 6
33383: PUSH
33384: LD_INT 46
33386: PUSH
33387: LD_INT 47
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: IN
33395: IFFALSE 33412
// bpoints := bpoints * 1.2 ;
33397: LD_ADDR_VAR 0 10
33401: PUSH
33402: LD_VAR 0 10
33406: PUSH
33407: LD_REAL  1.20000000000000E+0000
33410: MUL
33411: ST_TO_ADDR
// end ; unit_building :
33412: GO 33426
33414: LD_INT 3
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33422
33420: GO 33425
33422: POP
// ; end ;
33423: GO 33426
33425: POP
// for j = 1 to 3 do
33426: LD_ADDR_VAR 0 7
33430: PUSH
33431: DOUBLE
33432: LD_INT 1
33434: DEC
33435: ST_TO_ADDR
33436: LD_INT 3
33438: PUSH
33439: FOR_TO
33440: IFFALSE 33493
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33442: LD_ADDR_VAR 0 5
33446: PUSH
33447: LD_VAR 0 5
33451: PPUSH
33452: LD_VAR 0 7
33456: PPUSH
33457: LD_VAR 0 5
33461: PUSH
33462: LD_VAR 0 7
33466: ARRAY
33467: PUSH
33468: LD_VAR 0 9
33472: PUSH
33473: LD_VAR 0 7
33477: ARRAY
33478: PUSH
33479: LD_VAR 0 10
33483: MUL
33484: PLUS
33485: PPUSH
33486: CALL_OW 1
33490: ST_TO_ADDR
33491: GO 33439
33493: POP
33494: POP
// end ;
33495: GO 31978
33497: POP
33498: POP
// result := Replace ( result , 4 , tmp ) ;
33499: LD_ADDR_VAR 0 5
33503: PUSH
33504: LD_VAR 0 5
33508: PPUSH
33509: LD_INT 4
33511: PPUSH
33512: LD_VAR 0 8
33516: PPUSH
33517: CALL_OW 1
33521: ST_TO_ADDR
// end ;
33522: LD_VAR 0 5
33526: RET
// export function DangerAtRange ( unit , range ) ; begin
33527: LD_INT 0
33529: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33530: LD_ADDR_VAR 0 3
33534: PUSH
33535: LD_VAR 0 1
33539: PPUSH
33540: CALL_OW 255
33544: PPUSH
33545: LD_VAR 0 1
33549: PPUSH
33550: CALL_OW 250
33554: PPUSH
33555: LD_VAR 0 1
33559: PPUSH
33560: CALL_OW 251
33564: PPUSH
33565: LD_VAR 0 2
33569: PPUSH
33570: CALL 31830 0 4
33574: ST_TO_ADDR
// end ;
33575: LD_VAR 0 3
33579: RET
// export function DangerInArea ( side , area ) ; begin
33580: LD_INT 0
33582: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33583: LD_ADDR_VAR 0 3
33587: PUSH
33588: LD_VAR 0 2
33592: PPUSH
33593: LD_INT 81
33595: PUSH
33596: LD_VAR 0 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PPUSH
33605: CALL_OW 70
33609: ST_TO_ADDR
// end ;
33610: LD_VAR 0 3
33614: RET
// export function IsExtension ( b ) ; begin
33615: LD_INT 0
33617: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33618: LD_ADDR_VAR 0 2
33622: PUSH
33623: LD_VAR 0 1
33627: PUSH
33628: LD_INT 23
33630: PUSH
33631: LD_INT 20
33633: PUSH
33634: LD_INT 22
33636: PUSH
33637: LD_INT 17
33639: PUSH
33640: LD_INT 24
33642: PUSH
33643: LD_INT 21
33645: PUSH
33646: LD_INT 19
33648: PUSH
33649: LD_INT 16
33651: PUSH
33652: LD_INT 25
33654: PUSH
33655: LD_INT 18
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: IN
33670: ST_TO_ADDR
// end ;
33671: LD_VAR 0 2
33675: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
33676: LD_INT 0
33678: PPUSH
33679: PPUSH
33680: PPUSH
// result := [ ] ;
33681: LD_ADDR_VAR 0 3
33685: PUSH
33686: EMPTY
33687: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33688: LD_ADDR_VAR 0 4
33692: PUSH
33693: LD_VAR 0 2
33697: PPUSH
33698: LD_INT 21
33700: PUSH
33701: LD_INT 3
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PPUSH
33708: CALL_OW 70
33712: ST_TO_ADDR
// if not tmp then
33713: LD_VAR 0 4
33717: NOT
33718: IFFALSE 33722
// exit ;
33720: GO 33780
// for i in tmp do
33722: LD_ADDR_VAR 0 5
33726: PUSH
33727: LD_VAR 0 4
33731: PUSH
33732: FOR_IN
33733: IFFALSE 33768
// if GetBase ( i ) <> base then
33735: LD_VAR 0 5
33739: PPUSH
33740: CALL_OW 274
33744: PUSH
33745: LD_VAR 0 1
33749: NONEQUAL
33750: IFFALSE 33766
// ComLinkToBase ( base , i ) ;
33752: LD_VAR 0 1
33756: PPUSH
33757: LD_VAR 0 5
33761: PPUSH
33762: CALL_OW 169
33766: GO 33732
33768: POP
33769: POP
// result := tmp ;
33770: LD_ADDR_VAR 0 3
33774: PUSH
33775: LD_VAR 0 4
33779: ST_TO_ADDR
// end ;
33780: LD_VAR 0 3
33784: RET
// export function ComComplete ( unit , b ) ; var i ; begin
33785: LD_INT 0
33787: PPUSH
33788: PPUSH
// if BuildingStatus ( b ) = bs_build then
33789: LD_VAR 0 2
33793: PPUSH
33794: CALL_OW 461
33798: PUSH
33799: LD_INT 1
33801: EQUAL
33802: IFFALSE 33862
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33804: LD_VAR 0 1
33808: PPUSH
33809: LD_STRING h
33811: PUSH
33812: LD_VAR 0 2
33816: PPUSH
33817: CALL_OW 250
33821: PUSH
33822: LD_VAR 0 2
33826: PPUSH
33827: CALL_OW 251
33831: PUSH
33832: LD_VAR 0 2
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: PUSH
33855: EMPTY
33856: LIST
33857: PPUSH
33858: CALL_OW 446
// end ;
33862: LD_VAR 0 3
33866: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33867: LD_INT 0
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
33875: LD_VAR 0 1
33879: NOT
33880: PUSH
33881: LD_VAR 0 1
33885: PPUSH
33886: CALL_OW 263
33890: PUSH
33891: LD_INT 2
33893: EQUAL
33894: NOT
33895: OR
33896: IFFALSE 33900
// exit ;
33898: GO 34216
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33900: LD_ADDR_VAR 0 6
33904: PUSH
33905: LD_INT 22
33907: PUSH
33908: LD_VAR 0 1
33912: PPUSH
33913: CALL_OW 255
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 2
33924: PUSH
33925: LD_INT 30
33927: PUSH
33928: LD_INT 36
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 34
33937: PUSH
33938: LD_INT 31
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PPUSH
33954: CALL_OW 69
33958: ST_TO_ADDR
// if not tmp then
33959: LD_VAR 0 6
33963: NOT
33964: IFFALSE 33968
// exit ;
33966: GO 34216
// result := [ ] ;
33968: LD_ADDR_VAR 0 2
33972: PUSH
33973: EMPTY
33974: ST_TO_ADDR
// for i in tmp do
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: LD_VAR 0 6
33984: PUSH
33985: FOR_IN
33986: IFFALSE 34057
// begin t := UnitsInside ( i ) ;
33988: LD_ADDR_VAR 0 4
33992: PUSH
33993: LD_VAR 0 3
33997: PPUSH
33998: CALL_OW 313
34002: ST_TO_ADDR
// if t then
34003: LD_VAR 0 4
34007: IFFALSE 34055
// for j in t do
34009: LD_ADDR_VAR 0 7
34013: PUSH
34014: LD_VAR 0 4
34018: PUSH
34019: FOR_IN
34020: IFFALSE 34053
// result := Insert ( result , result + 1 , j ) ;
34022: LD_ADDR_VAR 0 2
34026: PUSH
34027: LD_VAR 0 2
34031: PPUSH
34032: LD_VAR 0 2
34036: PUSH
34037: LD_INT 1
34039: PLUS
34040: PPUSH
34041: LD_VAR 0 7
34045: PPUSH
34046: CALL_OW 2
34050: ST_TO_ADDR
34051: GO 34019
34053: POP
34054: POP
// end ;
34055: GO 33985
34057: POP
34058: POP
// if not result then
34059: LD_VAR 0 2
34063: NOT
34064: IFFALSE 34068
// exit ;
34066: GO 34216
// mech := result [ 1 ] ;
34068: LD_ADDR_VAR 0 5
34072: PUSH
34073: LD_VAR 0 2
34077: PUSH
34078: LD_INT 1
34080: ARRAY
34081: ST_TO_ADDR
// if result > 1 then
34082: LD_VAR 0 2
34086: PUSH
34087: LD_INT 1
34089: GREATER
34090: IFFALSE 34202
// for i = 2 to result do
34092: LD_ADDR_VAR 0 3
34096: PUSH
34097: DOUBLE
34098: LD_INT 2
34100: DEC
34101: ST_TO_ADDR
34102: LD_VAR 0 2
34106: PUSH
34107: FOR_TO
34108: IFFALSE 34200
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34110: LD_ADDR_VAR 0 4
34114: PUSH
34115: LD_VAR 0 2
34119: PUSH
34120: LD_VAR 0 3
34124: ARRAY
34125: PPUSH
34126: LD_INT 3
34128: PPUSH
34129: CALL_OW 259
34133: PUSH
34134: LD_VAR 0 2
34138: PUSH
34139: LD_VAR 0 3
34143: ARRAY
34144: PPUSH
34145: CALL_OW 432
34149: MINUS
34150: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34151: LD_VAR 0 4
34155: PUSH
34156: LD_VAR 0 5
34160: PPUSH
34161: LD_INT 3
34163: PPUSH
34164: CALL_OW 259
34168: PUSH
34169: LD_VAR 0 5
34173: PPUSH
34174: CALL_OW 432
34178: MINUS
34179: GREATEREQUAL
34180: IFFALSE 34198
// mech := result [ i ] ;
34182: LD_ADDR_VAR 0 5
34186: PUSH
34187: LD_VAR 0 2
34191: PUSH
34192: LD_VAR 0 3
34196: ARRAY
34197: ST_TO_ADDR
// end ;
34198: GO 34107
34200: POP
34201: POP
// ComLinkTo ( vehicle , mech ) ;
34202: LD_VAR 0 1
34206: PPUSH
34207: LD_VAR 0 5
34211: PPUSH
34212: CALL_OW 135
// end ;
34216: LD_VAR 0 2
34220: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34221: LD_INT 0
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
34235: PPUSH
// result := [ ] ;
34236: LD_ADDR_VAR 0 7
34240: PUSH
34241: EMPTY
34242: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34243: LD_VAR 0 1
34247: PPUSH
34248: CALL_OW 266
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: IN
34263: NOT
34264: IFFALSE 34268
// exit ;
34266: GO 35899
// if name then
34268: LD_VAR 0 3
34272: IFFALSE 34288
// SetBName ( base_dep , name ) ;
34274: LD_VAR 0 1
34278: PPUSH
34279: LD_VAR 0 3
34283: PPUSH
34284: CALL_OW 500
// base := GetBase ( base_dep ) ;
34288: LD_ADDR_VAR 0 15
34292: PUSH
34293: LD_VAR 0 1
34297: PPUSH
34298: CALL_OW 274
34302: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34303: LD_ADDR_VAR 0 16
34307: PUSH
34308: LD_VAR 0 1
34312: PPUSH
34313: CALL_OW 255
34317: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34318: LD_ADDR_VAR 0 17
34322: PUSH
34323: LD_VAR 0 1
34327: PPUSH
34328: CALL_OW 248
34332: ST_TO_ADDR
// if sources then
34333: LD_VAR 0 5
34337: IFFALSE 34384
// for i = 1 to 3 do
34339: LD_ADDR_VAR 0 8
34343: PUSH
34344: DOUBLE
34345: LD_INT 1
34347: DEC
34348: ST_TO_ADDR
34349: LD_INT 3
34351: PUSH
34352: FOR_TO
34353: IFFALSE 34382
// AddResourceType ( base , i , sources [ i ] ) ;
34355: LD_VAR 0 15
34359: PPUSH
34360: LD_VAR 0 8
34364: PPUSH
34365: LD_VAR 0 5
34369: PUSH
34370: LD_VAR 0 8
34374: ARRAY
34375: PPUSH
34376: CALL_OW 276
34380: GO 34352
34382: POP
34383: POP
// buildings := GetBaseBuildings ( base , area ) ;
34384: LD_ADDR_VAR 0 18
34388: PUSH
34389: LD_VAR 0 15
34393: PPUSH
34394: LD_VAR 0 2
34398: PPUSH
34399: CALL 33676 0 2
34403: ST_TO_ADDR
// InitHc ;
34404: CALL_OW 19
// InitUc ;
34408: CALL_OW 18
// uc_side := side ;
34412: LD_ADDR_OWVAR 20
34416: PUSH
34417: LD_VAR 0 16
34421: ST_TO_ADDR
// uc_nation := nation ;
34422: LD_ADDR_OWVAR 21
34426: PUSH
34427: LD_VAR 0 17
34431: ST_TO_ADDR
// if buildings then
34432: LD_VAR 0 18
34436: IFFALSE 35758
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34438: LD_ADDR_VAR 0 19
34442: PUSH
34443: LD_VAR 0 18
34447: PPUSH
34448: LD_INT 2
34450: PUSH
34451: LD_INT 30
34453: PUSH
34454: LD_INT 29
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 30
34463: PUSH
34464: LD_INT 30
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: LIST
34475: PPUSH
34476: CALL_OW 72
34480: ST_TO_ADDR
// if tmp then
34481: LD_VAR 0 19
34485: IFFALSE 34533
// for i in tmp do
34487: LD_ADDR_VAR 0 8
34491: PUSH
34492: LD_VAR 0 19
34496: PUSH
34497: FOR_IN
34498: IFFALSE 34531
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34500: LD_VAR 0 8
34504: PPUSH
34505: CALL_OW 250
34509: PPUSH
34510: LD_VAR 0 8
34514: PPUSH
34515: CALL_OW 251
34519: PPUSH
34520: LD_VAR 0 16
34524: PPUSH
34525: CALL_OW 441
34529: GO 34497
34531: POP
34532: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34533: LD_VAR 0 18
34537: PPUSH
34538: LD_INT 2
34540: PUSH
34541: LD_INT 30
34543: PUSH
34544: LD_INT 32
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 30
34553: PUSH
34554: LD_INT 33
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: PPUSH
34566: CALL_OW 72
34570: IFFALSE 34658
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34572: LD_ADDR_VAR 0 8
34576: PUSH
34577: LD_VAR 0 18
34581: PPUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 30
34587: PUSH
34588: LD_INT 32
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 30
34597: PUSH
34598: LD_INT 33
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: LIST
34609: PPUSH
34610: CALL_OW 72
34614: PUSH
34615: FOR_IN
34616: IFFALSE 34656
// begin if not GetBWeapon ( i ) then
34618: LD_VAR 0 8
34622: PPUSH
34623: CALL_OW 269
34627: NOT
34628: IFFALSE 34654
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34630: LD_VAR 0 8
34634: PPUSH
34635: LD_VAR 0 8
34639: PPUSH
34640: LD_VAR 0 2
34644: PPUSH
34645: CALL 35904 0 2
34649: PPUSH
34650: CALL_OW 431
// end ;
34654: GO 34615
34656: POP
34657: POP
// end ; for i = 1 to personel do
34658: LD_ADDR_VAR 0 8
34662: PUSH
34663: DOUBLE
34664: LD_INT 1
34666: DEC
34667: ST_TO_ADDR
34668: LD_VAR 0 6
34672: PUSH
34673: FOR_TO
34674: IFFALSE 35738
// begin if i > 4 then
34676: LD_VAR 0 8
34680: PUSH
34681: LD_INT 4
34683: GREATER
34684: IFFALSE 34688
// break ;
34686: GO 35738
// case i of 1 :
34688: LD_VAR 0 8
34692: PUSH
34693: LD_INT 1
34695: DOUBLE
34696: EQUAL
34697: IFTRUE 34701
34699: GO 34781
34701: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34702: LD_ADDR_VAR 0 12
34706: PUSH
34707: LD_VAR 0 18
34711: PPUSH
34712: LD_INT 22
34714: PUSH
34715: LD_VAR 0 16
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 58
34726: PUSH
34727: EMPTY
34728: LIST
34729: PUSH
34730: LD_INT 2
34732: PUSH
34733: LD_INT 30
34735: PUSH
34736: LD_INT 32
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 30
34745: PUSH
34746: LD_INT 4
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 30
34755: PUSH
34756: LD_INT 5
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: PPUSH
34774: CALL_OW 72
34778: ST_TO_ADDR
34779: GO 35003
34781: LD_INT 2
34783: DOUBLE
34784: EQUAL
34785: IFTRUE 34789
34787: GO 34851
34789: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34790: LD_ADDR_VAR 0 12
34794: PUSH
34795: LD_VAR 0 18
34799: PPUSH
34800: LD_INT 22
34802: PUSH
34803: LD_VAR 0 16
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: LD_INT 30
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 30
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: LIST
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PPUSH
34844: CALL_OW 72
34848: ST_TO_ADDR
34849: GO 35003
34851: LD_INT 3
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 34921
34859: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34860: LD_ADDR_VAR 0 12
34864: PUSH
34865: LD_VAR 0 18
34869: PPUSH
34870: LD_INT 22
34872: PUSH
34873: LD_VAR 0 16
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: LD_INT 30
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 30
34897: PUSH
34898: LD_INT 3
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PPUSH
34914: CALL_OW 72
34918: ST_TO_ADDR
34919: GO 35003
34921: LD_INT 4
34923: DOUBLE
34924: EQUAL
34925: IFTRUE 34929
34927: GO 35002
34929: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34930: LD_ADDR_VAR 0 12
34934: PUSH
34935: LD_VAR 0 18
34939: PPUSH
34940: LD_INT 22
34942: PUSH
34943: LD_VAR 0 16
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: LD_INT 30
34957: PUSH
34958: LD_INT 6
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 30
34967: PUSH
34968: LD_INT 7
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 30
34977: PUSH
34978: LD_INT 8
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PPUSH
34995: CALL_OW 72
34999: ST_TO_ADDR
35000: GO 35003
35002: POP
// if i = 1 then
35003: LD_VAR 0 8
35007: PUSH
35008: LD_INT 1
35010: EQUAL
35011: IFFALSE 35122
// begin tmp := [ ] ;
35013: LD_ADDR_VAR 0 19
35017: PUSH
35018: EMPTY
35019: ST_TO_ADDR
// for j in f do
35020: LD_ADDR_VAR 0 9
35024: PUSH
35025: LD_VAR 0 12
35029: PUSH
35030: FOR_IN
35031: IFFALSE 35104
// if GetBType ( j ) = b_bunker then
35033: LD_VAR 0 9
35037: PPUSH
35038: CALL_OW 266
35042: PUSH
35043: LD_INT 32
35045: EQUAL
35046: IFFALSE 35073
// tmp := Insert ( tmp , 1 , j ) else
35048: LD_ADDR_VAR 0 19
35052: PUSH
35053: LD_VAR 0 19
35057: PPUSH
35058: LD_INT 1
35060: PPUSH
35061: LD_VAR 0 9
35065: PPUSH
35066: CALL_OW 2
35070: ST_TO_ADDR
35071: GO 35102
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35073: LD_ADDR_VAR 0 19
35077: PUSH
35078: LD_VAR 0 19
35082: PPUSH
35083: LD_VAR 0 19
35087: PUSH
35088: LD_INT 1
35090: PLUS
35091: PPUSH
35092: LD_VAR 0 9
35096: PPUSH
35097: CALL_OW 2
35101: ST_TO_ADDR
35102: GO 35030
35104: POP
35105: POP
// if tmp then
35106: LD_VAR 0 19
35110: IFFALSE 35122
// f := tmp ;
35112: LD_ADDR_VAR 0 12
35116: PUSH
35117: LD_VAR 0 19
35121: ST_TO_ADDR
// end ; x := personel [ i ] ;
35122: LD_ADDR_VAR 0 13
35126: PUSH
35127: LD_VAR 0 6
35131: PUSH
35132: LD_VAR 0 8
35136: ARRAY
35137: ST_TO_ADDR
// if x = - 1 then
35138: LD_VAR 0 13
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: EQUAL
35147: IFFALSE 35356
// begin for j in f do
35149: LD_ADDR_VAR 0 9
35153: PUSH
35154: LD_VAR 0 12
35158: PUSH
35159: FOR_IN
35160: IFFALSE 35352
// repeat InitHc ;
35162: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35166: LD_VAR 0 9
35170: PPUSH
35171: CALL_OW 266
35175: PUSH
35176: LD_INT 5
35178: EQUAL
35179: IFFALSE 35249
// begin if UnitsInside ( j ) < 3 then
35181: LD_VAR 0 9
35185: PPUSH
35186: CALL_OW 313
35190: PUSH
35191: LD_INT 3
35193: LESS
35194: IFFALSE 35230
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35196: LD_INT 0
35198: PPUSH
35199: LD_INT 5
35201: PUSH
35202: LD_INT 8
35204: PUSH
35205: LD_INT 9
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: PUSH
35213: LD_VAR 0 17
35217: ARRAY
35218: PPUSH
35219: LD_VAR 0 4
35223: PPUSH
35224: CALL_OW 380
35228: GO 35247
// PrepareHuman ( false , i , skill ) ;
35230: LD_INT 0
35232: PPUSH
35233: LD_VAR 0 8
35237: PPUSH
35238: LD_VAR 0 4
35242: PPUSH
35243: CALL_OW 380
// end else
35247: GO 35266
// PrepareHuman ( false , i , skill ) ;
35249: LD_INT 0
35251: PPUSH
35252: LD_VAR 0 8
35256: PPUSH
35257: LD_VAR 0 4
35261: PPUSH
35262: CALL_OW 380
// un := CreateHuman ;
35266: LD_ADDR_VAR 0 14
35270: PUSH
35271: CALL_OW 44
35275: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35276: LD_ADDR_VAR 0 7
35280: PUSH
35281: LD_VAR 0 7
35285: PPUSH
35286: LD_INT 1
35288: PPUSH
35289: LD_VAR 0 14
35293: PPUSH
35294: CALL_OW 2
35298: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35299: LD_VAR 0 14
35303: PPUSH
35304: LD_VAR 0 9
35308: PPUSH
35309: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35313: LD_VAR 0 9
35317: PPUSH
35318: CALL_OW 313
35322: PUSH
35323: LD_INT 6
35325: EQUAL
35326: PUSH
35327: LD_VAR 0 9
35331: PPUSH
35332: CALL_OW 266
35336: PUSH
35337: LD_INT 32
35339: PUSH
35340: LD_INT 31
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: IN
35347: OR
35348: IFFALSE 35162
35350: GO 35159
35352: POP
35353: POP
// end else
35354: GO 35736
// for j = 1 to x do
35356: LD_ADDR_VAR 0 9
35360: PUSH
35361: DOUBLE
35362: LD_INT 1
35364: DEC
35365: ST_TO_ADDR
35366: LD_VAR 0 13
35370: PUSH
35371: FOR_TO
35372: IFFALSE 35734
// begin InitHc ;
35374: CALL_OW 19
// if not f then
35378: LD_VAR 0 12
35382: NOT
35383: IFFALSE 35472
// begin PrepareHuman ( false , i , skill ) ;
35385: LD_INT 0
35387: PPUSH
35388: LD_VAR 0 8
35392: PPUSH
35393: LD_VAR 0 4
35397: PPUSH
35398: CALL_OW 380
// un := CreateHuman ;
35402: LD_ADDR_VAR 0 14
35406: PUSH
35407: CALL_OW 44
35411: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35412: LD_ADDR_VAR 0 7
35416: PUSH
35417: LD_VAR 0 7
35421: PPUSH
35422: LD_INT 1
35424: PPUSH
35425: LD_VAR 0 14
35429: PPUSH
35430: CALL_OW 2
35434: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35435: LD_VAR 0 14
35439: PPUSH
35440: LD_VAR 0 1
35444: PPUSH
35445: CALL_OW 250
35449: PPUSH
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 251
35459: PPUSH
35460: LD_INT 10
35462: PPUSH
35463: LD_INT 0
35465: PPUSH
35466: CALL_OW 50
// continue ;
35470: GO 35371
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35472: LD_VAR 0 12
35476: PUSH
35477: LD_INT 1
35479: ARRAY
35480: PPUSH
35481: CALL_OW 313
35485: PUSH
35486: LD_VAR 0 12
35490: PUSH
35491: LD_INT 1
35493: ARRAY
35494: PPUSH
35495: CALL_OW 266
35499: PUSH
35500: LD_INT 32
35502: PUSH
35503: LD_INT 31
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: IN
35510: AND
35511: PUSH
35512: LD_VAR 0 12
35516: PUSH
35517: LD_INT 1
35519: ARRAY
35520: PPUSH
35521: CALL_OW 313
35525: PUSH
35526: LD_INT 6
35528: EQUAL
35529: OR
35530: IFFALSE 35550
// f := Delete ( f , 1 ) ;
35532: LD_ADDR_VAR 0 12
35536: PUSH
35537: LD_VAR 0 12
35541: PPUSH
35542: LD_INT 1
35544: PPUSH
35545: CALL_OW 3
35549: ST_TO_ADDR
// if not f then
35550: LD_VAR 0 12
35554: NOT
35555: IFFALSE 35573
// begin x := x + 2 ;
35557: LD_ADDR_VAR 0 13
35561: PUSH
35562: LD_VAR 0 13
35566: PUSH
35567: LD_INT 2
35569: PLUS
35570: ST_TO_ADDR
// continue ;
35571: GO 35371
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35573: LD_VAR 0 12
35577: PUSH
35578: LD_INT 1
35580: ARRAY
35581: PPUSH
35582: CALL_OW 266
35586: PUSH
35587: LD_INT 5
35589: EQUAL
35590: IFFALSE 35664
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35592: LD_VAR 0 12
35596: PUSH
35597: LD_INT 1
35599: ARRAY
35600: PPUSH
35601: CALL_OW 313
35605: PUSH
35606: LD_INT 3
35608: LESS
35609: IFFALSE 35645
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35611: LD_INT 0
35613: PPUSH
35614: LD_INT 5
35616: PUSH
35617: LD_INT 8
35619: PUSH
35620: LD_INT 9
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: PUSH
35628: LD_VAR 0 17
35632: ARRAY
35633: PPUSH
35634: LD_VAR 0 4
35638: PPUSH
35639: CALL_OW 380
35643: GO 35662
// PrepareHuman ( false , i , skill ) ;
35645: LD_INT 0
35647: PPUSH
35648: LD_VAR 0 8
35652: PPUSH
35653: LD_VAR 0 4
35657: PPUSH
35658: CALL_OW 380
// end else
35662: GO 35681
// PrepareHuman ( false , i , skill ) ;
35664: LD_INT 0
35666: PPUSH
35667: LD_VAR 0 8
35671: PPUSH
35672: LD_VAR 0 4
35676: PPUSH
35677: CALL_OW 380
// un := CreateHuman ;
35681: LD_ADDR_VAR 0 14
35685: PUSH
35686: CALL_OW 44
35690: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35691: LD_ADDR_VAR 0 7
35695: PUSH
35696: LD_VAR 0 7
35700: PPUSH
35701: LD_INT 1
35703: PPUSH
35704: LD_VAR 0 14
35708: PPUSH
35709: CALL_OW 2
35713: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35714: LD_VAR 0 14
35718: PPUSH
35719: LD_VAR 0 12
35723: PUSH
35724: LD_INT 1
35726: ARRAY
35727: PPUSH
35728: CALL_OW 52
// end ;
35732: GO 35371
35734: POP
35735: POP
// end ;
35736: GO 34673
35738: POP
35739: POP
// result := result ^ buildings ;
35740: LD_ADDR_VAR 0 7
35744: PUSH
35745: LD_VAR 0 7
35749: PUSH
35750: LD_VAR 0 18
35754: ADD
35755: ST_TO_ADDR
// end else
35756: GO 35899
// begin for i = 1 to personel do
35758: LD_ADDR_VAR 0 8
35762: PUSH
35763: DOUBLE
35764: LD_INT 1
35766: DEC
35767: ST_TO_ADDR
35768: LD_VAR 0 6
35772: PUSH
35773: FOR_TO
35774: IFFALSE 35897
// begin if i > 4 then
35776: LD_VAR 0 8
35780: PUSH
35781: LD_INT 4
35783: GREATER
35784: IFFALSE 35788
// break ;
35786: GO 35897
// x := personel [ i ] ;
35788: LD_ADDR_VAR 0 13
35792: PUSH
35793: LD_VAR 0 6
35797: PUSH
35798: LD_VAR 0 8
35802: ARRAY
35803: ST_TO_ADDR
// if x = - 1 then
35804: LD_VAR 0 13
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: EQUAL
35813: IFFALSE 35817
// continue ;
35815: GO 35773
// PrepareHuman ( false , i , skill ) ;
35817: LD_INT 0
35819: PPUSH
35820: LD_VAR 0 8
35824: PPUSH
35825: LD_VAR 0 4
35829: PPUSH
35830: CALL_OW 380
// un := CreateHuman ;
35834: LD_ADDR_VAR 0 14
35838: PUSH
35839: CALL_OW 44
35843: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35844: LD_VAR 0 14
35848: PPUSH
35849: LD_VAR 0 1
35853: PPUSH
35854: CALL_OW 250
35858: PPUSH
35859: LD_VAR 0 1
35863: PPUSH
35864: CALL_OW 251
35868: PPUSH
35869: LD_INT 10
35871: PPUSH
35872: LD_INT 0
35874: PPUSH
35875: CALL_OW 50
// result := result ^ un ;
35879: LD_ADDR_VAR 0 7
35883: PUSH
35884: LD_VAR 0 7
35888: PUSH
35889: LD_VAR 0 14
35893: ADD
35894: ST_TO_ADDR
// end ;
35895: GO 35773
35897: POP
35898: POP
// end ; end ;
35899: LD_VAR 0 7
35903: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35904: LD_INT 0
35906: PPUSH
35907: PPUSH
35908: PPUSH
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
35917: PPUSH
35918: PPUSH
35919: PPUSH
35920: PPUSH
35921: PPUSH
// result := false ;
35922: LD_ADDR_VAR 0 3
35926: PUSH
35927: LD_INT 0
35929: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35930: LD_VAR 0 1
35934: NOT
35935: PUSH
35936: LD_VAR 0 1
35940: PPUSH
35941: CALL_OW 266
35945: PUSH
35946: LD_INT 32
35948: PUSH
35949: LD_INT 33
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: IN
35956: NOT
35957: OR
35958: IFFALSE 35962
// exit ;
35960: GO 37098
// nat := GetNation ( tower ) ;
35962: LD_ADDR_VAR 0 12
35966: PUSH
35967: LD_VAR 0 1
35971: PPUSH
35972: CALL_OW 248
35976: ST_TO_ADDR
// side := GetSide ( tower ) ;
35977: LD_ADDR_VAR 0 16
35981: PUSH
35982: LD_VAR 0 1
35986: PPUSH
35987: CALL_OW 255
35991: ST_TO_ADDR
// x := GetX ( tower ) ;
35992: LD_ADDR_VAR 0 10
35996: PUSH
35997: LD_VAR 0 1
36001: PPUSH
36002: CALL_OW 250
36006: ST_TO_ADDR
// y := GetY ( tower ) ;
36007: LD_ADDR_VAR 0 11
36011: PUSH
36012: LD_VAR 0 1
36016: PPUSH
36017: CALL_OW 251
36021: ST_TO_ADDR
// if not x or not y then
36022: LD_VAR 0 10
36026: NOT
36027: PUSH
36028: LD_VAR 0 11
36032: NOT
36033: OR
36034: IFFALSE 36038
// exit ;
36036: GO 37098
// weapon := 0 ;
36038: LD_ADDR_VAR 0 18
36042: PUSH
36043: LD_INT 0
36045: ST_TO_ADDR
// fac_list := [ ] ;
36046: LD_ADDR_VAR 0 17
36050: PUSH
36051: EMPTY
36052: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
36053: LD_ADDR_VAR 0 6
36057: PUSH
36058: LD_VAR 0 1
36062: PPUSH
36063: CALL_OW 274
36067: PPUSH
36068: LD_VAR 0 2
36072: PPUSH
36073: CALL 33676 0 2
36077: PPUSH
36078: LD_INT 30
36080: PUSH
36081: LD_INT 3
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PPUSH
36088: CALL_OW 72
36092: ST_TO_ADDR
// if not factories then
36093: LD_VAR 0 6
36097: NOT
36098: IFFALSE 36102
// exit ;
36100: GO 37098
// for i in factories do
36102: LD_ADDR_VAR 0 8
36106: PUSH
36107: LD_VAR 0 6
36111: PUSH
36112: FOR_IN
36113: IFFALSE 36138
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36115: LD_ADDR_VAR 0 17
36119: PUSH
36120: LD_VAR 0 17
36124: PUSH
36125: LD_VAR 0 8
36129: PPUSH
36130: CALL_OW 478
36134: UNION
36135: ST_TO_ADDR
36136: GO 36112
36138: POP
36139: POP
// if not fac_list then
36140: LD_VAR 0 17
36144: NOT
36145: IFFALSE 36149
// exit ;
36147: GO 37098
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36149: LD_ADDR_VAR 0 5
36153: PUSH
36154: LD_INT 4
36156: PUSH
36157: LD_INT 5
36159: PUSH
36160: LD_INT 9
36162: PUSH
36163: LD_INT 10
36165: PUSH
36166: LD_INT 6
36168: PUSH
36169: LD_INT 7
36171: PUSH
36172: LD_INT 11
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 27
36186: PUSH
36187: LD_INT 28
36189: PUSH
36190: LD_INT 26
36192: PUSH
36193: LD_INT 30
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 43
36204: PUSH
36205: LD_INT 44
36207: PUSH
36208: LD_INT 46
36210: PUSH
36211: LD_INT 45
36213: PUSH
36214: LD_INT 47
36216: PUSH
36217: LD_INT 49
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: PUSH
36233: LD_VAR 0 12
36237: ARRAY
36238: ST_TO_ADDR
// for i in list do
36239: LD_ADDR_VAR 0 8
36243: PUSH
36244: LD_VAR 0 5
36248: PUSH
36249: FOR_IN
36250: IFFALSE 36283
// if not i in fac_list then
36252: LD_VAR 0 8
36256: PUSH
36257: LD_VAR 0 17
36261: IN
36262: NOT
36263: IFFALSE 36281
// list := list diff i ;
36265: LD_ADDR_VAR 0 5
36269: PUSH
36270: LD_VAR 0 5
36274: PUSH
36275: LD_VAR 0 8
36279: DIFF
36280: ST_TO_ADDR
36281: GO 36249
36283: POP
36284: POP
// if not list then
36285: LD_VAR 0 5
36289: NOT
36290: IFFALSE 36294
// exit ;
36292: GO 37098
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36294: LD_VAR 0 12
36298: PUSH
36299: LD_INT 3
36301: EQUAL
36302: PUSH
36303: LD_INT 49
36305: PUSH
36306: LD_VAR 0 5
36310: IN
36311: AND
36312: PUSH
36313: LD_INT 31
36315: PPUSH
36316: LD_VAR 0 16
36320: PPUSH
36321: CALL_OW 321
36325: PUSH
36326: LD_INT 2
36328: EQUAL
36329: AND
36330: IFFALSE 36390
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36332: LD_INT 22
36334: PUSH
36335: LD_VAR 0 16
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 35
36346: PUSH
36347: LD_INT 49
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 91
36356: PUSH
36357: LD_VAR 0 1
36361: PUSH
36362: LD_INT 10
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: PPUSH
36375: CALL_OW 69
36379: NOT
36380: IFFALSE 36390
// weapon := ru_time_lapser ;
36382: LD_ADDR_VAR 0 18
36386: PUSH
36387: LD_INT 49
36389: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36390: LD_VAR 0 12
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: IN
36405: PUSH
36406: LD_INT 11
36408: PUSH
36409: LD_VAR 0 5
36413: IN
36414: PUSH
36415: LD_INT 30
36417: PUSH
36418: LD_VAR 0 5
36422: IN
36423: OR
36424: AND
36425: PUSH
36426: LD_INT 6
36428: PPUSH
36429: LD_VAR 0 16
36433: PPUSH
36434: CALL_OW 321
36438: PUSH
36439: LD_INT 2
36441: EQUAL
36442: AND
36443: IFFALSE 36608
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36445: LD_INT 22
36447: PUSH
36448: LD_VAR 0 16
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 2
36459: PUSH
36460: LD_INT 35
36462: PUSH
36463: LD_INT 11
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 35
36472: PUSH
36473: LD_INT 30
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 91
36487: PUSH
36488: LD_VAR 0 1
36492: PUSH
36493: LD_INT 18
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: LIST
36505: PPUSH
36506: CALL_OW 69
36510: NOT
36511: PUSH
36512: LD_INT 22
36514: PUSH
36515: LD_VAR 0 16
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 2
36526: PUSH
36527: LD_INT 30
36529: PUSH
36530: LD_INT 32
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 30
36539: PUSH
36540: LD_INT 33
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 91
36554: PUSH
36555: LD_VAR 0 1
36559: PUSH
36560: LD_INT 12
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: LIST
36572: PUSH
36573: EMPTY
36574: LIST
36575: PPUSH
36576: CALL_OW 69
36580: PUSH
36581: LD_INT 2
36583: GREATER
36584: AND
36585: IFFALSE 36608
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36587: LD_ADDR_VAR 0 18
36591: PUSH
36592: LD_INT 11
36594: PUSH
36595: LD_INT 30
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_VAR 0 12
36606: ARRAY
36607: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36608: LD_VAR 0 18
36612: NOT
36613: PUSH
36614: LD_INT 40
36616: PPUSH
36617: LD_VAR 0 16
36621: PPUSH
36622: CALL_OW 321
36626: PUSH
36627: LD_INT 2
36629: EQUAL
36630: AND
36631: PUSH
36632: LD_INT 7
36634: PUSH
36635: LD_VAR 0 5
36639: IN
36640: PUSH
36641: LD_INT 28
36643: PUSH
36644: LD_VAR 0 5
36648: IN
36649: OR
36650: PUSH
36651: LD_INT 45
36653: PUSH
36654: LD_VAR 0 5
36658: IN
36659: OR
36660: AND
36661: IFFALSE 36915
// begin hex := GetHexInfo ( x , y ) ;
36663: LD_ADDR_VAR 0 4
36667: PUSH
36668: LD_VAR 0 10
36672: PPUSH
36673: LD_VAR 0 11
36677: PPUSH
36678: CALL_OW 546
36682: ST_TO_ADDR
// if hex [ 1 ] then
36683: LD_VAR 0 4
36687: PUSH
36688: LD_INT 1
36690: ARRAY
36691: IFFALSE 36695
// exit ;
36693: GO 37098
// height := hex [ 2 ] ;
36695: LD_ADDR_VAR 0 15
36699: PUSH
36700: LD_VAR 0 4
36704: PUSH
36705: LD_INT 2
36707: ARRAY
36708: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36709: LD_ADDR_VAR 0 14
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 2
36719: PUSH
36720: LD_INT 3
36722: PUSH
36723: LD_INT 5
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
// for i in tmp do
36732: LD_ADDR_VAR 0 8
36736: PUSH
36737: LD_VAR 0 14
36741: PUSH
36742: FOR_IN
36743: IFFALSE 36913
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36745: LD_ADDR_VAR 0 9
36749: PUSH
36750: LD_VAR 0 10
36754: PPUSH
36755: LD_VAR 0 8
36759: PPUSH
36760: LD_INT 5
36762: PPUSH
36763: CALL_OW 272
36767: PUSH
36768: LD_VAR 0 11
36772: PPUSH
36773: LD_VAR 0 8
36777: PPUSH
36778: LD_INT 5
36780: PPUSH
36781: CALL_OW 273
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36790: LD_VAR 0 9
36794: PUSH
36795: LD_INT 1
36797: ARRAY
36798: PPUSH
36799: LD_VAR 0 9
36803: PUSH
36804: LD_INT 2
36806: ARRAY
36807: PPUSH
36808: CALL_OW 488
36812: IFFALSE 36911
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36814: LD_ADDR_VAR 0 4
36818: PUSH
36819: LD_VAR 0 9
36823: PUSH
36824: LD_INT 1
36826: ARRAY
36827: PPUSH
36828: LD_VAR 0 9
36832: PUSH
36833: LD_INT 2
36835: ARRAY
36836: PPUSH
36837: CALL_OW 546
36841: ST_TO_ADDR
// if hex [ 1 ] then
36842: LD_VAR 0 4
36846: PUSH
36847: LD_INT 1
36849: ARRAY
36850: IFFALSE 36854
// continue ;
36852: GO 36742
// h := hex [ 2 ] ;
36854: LD_ADDR_VAR 0 13
36858: PUSH
36859: LD_VAR 0 4
36863: PUSH
36864: LD_INT 2
36866: ARRAY
36867: ST_TO_ADDR
// if h + 7 < height then
36868: LD_VAR 0 13
36872: PUSH
36873: LD_INT 7
36875: PLUS
36876: PUSH
36877: LD_VAR 0 15
36881: LESS
36882: IFFALSE 36911
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36884: LD_ADDR_VAR 0 18
36888: PUSH
36889: LD_INT 7
36891: PUSH
36892: LD_INT 28
36894: PUSH
36895: LD_INT 45
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: PUSH
36903: LD_VAR 0 12
36907: ARRAY
36908: ST_TO_ADDR
// break ;
36909: GO 36913
// end ; end ; end ;
36911: GO 36742
36913: POP
36914: POP
// end ; if not weapon then
36915: LD_VAR 0 18
36919: NOT
36920: IFFALSE 36980
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36922: LD_ADDR_VAR 0 5
36926: PUSH
36927: LD_VAR 0 5
36931: PUSH
36932: LD_INT 11
36934: PUSH
36935: LD_INT 30
36937: PUSH
36938: LD_INT 49
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: DIFF
36946: ST_TO_ADDR
// if not list then
36947: LD_VAR 0 5
36951: NOT
36952: IFFALSE 36956
// exit ;
36954: GO 37098
// weapon := list [ rand ( 1 , list ) ] ;
36956: LD_ADDR_VAR 0 18
36960: PUSH
36961: LD_VAR 0 5
36965: PUSH
36966: LD_INT 1
36968: PPUSH
36969: LD_VAR 0 5
36973: PPUSH
36974: CALL_OW 12
36978: ARRAY
36979: ST_TO_ADDR
// end ; if weapon then
36980: LD_VAR 0 18
36984: IFFALSE 37098
// begin tmp := CostOfWeapon ( weapon ) ;
36986: LD_ADDR_VAR 0 14
36990: PUSH
36991: LD_VAR 0 18
36995: PPUSH
36996: CALL_OW 451
37000: ST_TO_ADDR
// j := GetBase ( tower ) ;
37001: LD_ADDR_VAR 0 9
37005: PUSH
37006: LD_VAR 0 1
37010: PPUSH
37011: CALL_OW 274
37015: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37016: LD_VAR 0 9
37020: PPUSH
37021: LD_INT 1
37023: PPUSH
37024: CALL_OW 275
37028: PUSH
37029: LD_VAR 0 14
37033: PUSH
37034: LD_INT 1
37036: ARRAY
37037: GREATEREQUAL
37038: PUSH
37039: LD_VAR 0 9
37043: PPUSH
37044: LD_INT 2
37046: PPUSH
37047: CALL_OW 275
37051: PUSH
37052: LD_VAR 0 14
37056: PUSH
37057: LD_INT 2
37059: ARRAY
37060: GREATEREQUAL
37061: AND
37062: PUSH
37063: LD_VAR 0 9
37067: PPUSH
37068: LD_INT 3
37070: PPUSH
37071: CALL_OW 275
37075: PUSH
37076: LD_VAR 0 14
37080: PUSH
37081: LD_INT 3
37083: ARRAY
37084: GREATEREQUAL
37085: AND
37086: IFFALSE 37098
// result := weapon ;
37088: LD_ADDR_VAR 0 3
37092: PUSH
37093: LD_VAR 0 18
37097: ST_TO_ADDR
// end ; end ;
37098: LD_VAR 0 3
37102: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37103: LD_INT 0
37105: PPUSH
37106: PPUSH
// result := true ;
37107: LD_ADDR_VAR 0 3
37111: PUSH
37112: LD_INT 1
37114: ST_TO_ADDR
// if array1 = array2 then
37115: LD_VAR 0 1
37119: PUSH
37120: LD_VAR 0 2
37124: EQUAL
37125: IFFALSE 37185
// begin for i = 1 to array1 do
37127: LD_ADDR_VAR 0 4
37131: PUSH
37132: DOUBLE
37133: LD_INT 1
37135: DEC
37136: ST_TO_ADDR
37137: LD_VAR 0 1
37141: PUSH
37142: FOR_TO
37143: IFFALSE 37181
// if array1 [ i ] <> array2 [ i ] then
37145: LD_VAR 0 1
37149: PUSH
37150: LD_VAR 0 4
37154: ARRAY
37155: PUSH
37156: LD_VAR 0 2
37160: PUSH
37161: LD_VAR 0 4
37165: ARRAY
37166: NONEQUAL
37167: IFFALSE 37179
// begin result := false ;
37169: LD_ADDR_VAR 0 3
37173: PUSH
37174: LD_INT 0
37176: ST_TO_ADDR
// break ;
37177: GO 37181
// end ;
37179: GO 37142
37181: POP
37182: POP
// end else
37183: GO 37193
// result := false ;
37185: LD_ADDR_VAR 0 3
37189: PUSH
37190: LD_INT 0
37192: ST_TO_ADDR
// end ;
37193: LD_VAR 0 3
37197: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37198: LD_INT 0
37200: PPUSH
37201: PPUSH
37202: PPUSH
// pom := GetBase ( fac ) ;
37203: LD_ADDR_VAR 0 5
37207: PUSH
37208: LD_VAR 0 1
37212: PPUSH
37213: CALL_OW 274
37217: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37218: LD_ADDR_VAR 0 4
37222: PUSH
37223: LD_VAR 0 2
37227: PUSH
37228: LD_INT 1
37230: ARRAY
37231: PPUSH
37232: LD_VAR 0 2
37236: PUSH
37237: LD_INT 2
37239: ARRAY
37240: PPUSH
37241: LD_VAR 0 2
37245: PUSH
37246: LD_INT 3
37248: ARRAY
37249: PPUSH
37250: LD_VAR 0 2
37254: PUSH
37255: LD_INT 4
37257: ARRAY
37258: PPUSH
37259: CALL_OW 449
37263: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37264: LD_ADDR_VAR 0 3
37268: PUSH
37269: LD_VAR 0 5
37273: PPUSH
37274: LD_INT 1
37276: PPUSH
37277: CALL_OW 275
37281: PUSH
37282: LD_VAR 0 4
37286: PUSH
37287: LD_INT 1
37289: ARRAY
37290: GREATEREQUAL
37291: PUSH
37292: LD_VAR 0 5
37296: PPUSH
37297: LD_INT 2
37299: PPUSH
37300: CALL_OW 275
37304: PUSH
37305: LD_VAR 0 4
37309: PUSH
37310: LD_INT 2
37312: ARRAY
37313: GREATEREQUAL
37314: AND
37315: PUSH
37316: LD_VAR 0 5
37320: PPUSH
37321: LD_INT 3
37323: PPUSH
37324: CALL_OW 275
37328: PUSH
37329: LD_VAR 0 4
37333: PUSH
37334: LD_INT 3
37336: ARRAY
37337: GREATEREQUAL
37338: AND
37339: ST_TO_ADDR
// end ;
37340: LD_VAR 0 3
37344: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37345: LD_INT 0
37347: PPUSH
37348: PPUSH
37349: PPUSH
37350: PPUSH
// pom := GetBase ( building ) ;
37351: LD_ADDR_VAR 0 3
37355: PUSH
37356: LD_VAR 0 1
37360: PPUSH
37361: CALL_OW 274
37365: ST_TO_ADDR
// if not pom then
37366: LD_VAR 0 3
37370: NOT
37371: IFFALSE 37375
// exit ;
37373: GO 37545
// btype := GetBType ( building ) ;
37375: LD_ADDR_VAR 0 5
37379: PUSH
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 266
37389: ST_TO_ADDR
// if btype = b_armoury then
37390: LD_VAR 0 5
37394: PUSH
37395: LD_INT 4
37397: EQUAL
37398: IFFALSE 37408
// btype := b_barracks ;
37400: LD_ADDR_VAR 0 5
37404: PUSH
37405: LD_INT 5
37407: ST_TO_ADDR
// if btype = b_depot then
37408: LD_VAR 0 5
37412: PUSH
37413: LD_INT 0
37415: EQUAL
37416: IFFALSE 37426
// btype := b_warehouse ;
37418: LD_ADDR_VAR 0 5
37422: PUSH
37423: LD_INT 1
37425: ST_TO_ADDR
// if btype = b_workshop then
37426: LD_VAR 0 5
37430: PUSH
37431: LD_INT 2
37433: EQUAL
37434: IFFALSE 37444
// btype := b_factory ;
37436: LD_ADDR_VAR 0 5
37440: PUSH
37441: LD_INT 3
37443: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37444: LD_ADDR_VAR 0 4
37448: PUSH
37449: LD_VAR 0 5
37453: PPUSH
37454: LD_VAR 0 1
37458: PPUSH
37459: CALL_OW 248
37463: PPUSH
37464: CALL_OW 450
37468: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37469: LD_ADDR_VAR 0 2
37473: PUSH
37474: LD_VAR 0 3
37478: PPUSH
37479: LD_INT 1
37481: PPUSH
37482: CALL_OW 275
37486: PUSH
37487: LD_VAR 0 4
37491: PUSH
37492: LD_INT 1
37494: ARRAY
37495: GREATEREQUAL
37496: PUSH
37497: LD_VAR 0 3
37501: PPUSH
37502: LD_INT 2
37504: PPUSH
37505: CALL_OW 275
37509: PUSH
37510: LD_VAR 0 4
37514: PUSH
37515: LD_INT 2
37517: ARRAY
37518: GREATEREQUAL
37519: AND
37520: PUSH
37521: LD_VAR 0 3
37525: PPUSH
37526: LD_INT 3
37528: PPUSH
37529: CALL_OW 275
37533: PUSH
37534: LD_VAR 0 4
37538: PUSH
37539: LD_INT 3
37541: ARRAY
37542: GREATEREQUAL
37543: AND
37544: ST_TO_ADDR
// end ;
37545: LD_VAR 0 2
37549: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37550: LD_INT 0
37552: PPUSH
37553: PPUSH
37554: PPUSH
// pom := GetBase ( building ) ;
37555: LD_ADDR_VAR 0 4
37559: PUSH
37560: LD_VAR 0 1
37564: PPUSH
37565: CALL_OW 274
37569: ST_TO_ADDR
// if not pom then
37570: LD_VAR 0 4
37574: NOT
37575: IFFALSE 37579
// exit ;
37577: GO 37680
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37579: LD_ADDR_VAR 0 5
37583: PUSH
37584: LD_VAR 0 2
37588: PPUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 248
37598: PPUSH
37599: CALL_OW 450
37603: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37604: LD_ADDR_VAR 0 3
37608: PUSH
37609: LD_VAR 0 4
37613: PPUSH
37614: LD_INT 1
37616: PPUSH
37617: CALL_OW 275
37621: PUSH
37622: LD_VAR 0 5
37626: PUSH
37627: LD_INT 1
37629: ARRAY
37630: GREATEREQUAL
37631: PUSH
37632: LD_VAR 0 4
37636: PPUSH
37637: LD_INT 2
37639: PPUSH
37640: CALL_OW 275
37644: PUSH
37645: LD_VAR 0 5
37649: PUSH
37650: LD_INT 2
37652: ARRAY
37653: GREATEREQUAL
37654: AND
37655: PUSH
37656: LD_VAR 0 4
37660: PPUSH
37661: LD_INT 3
37663: PPUSH
37664: CALL_OW 275
37668: PUSH
37669: LD_VAR 0 5
37673: PUSH
37674: LD_INT 3
37676: ARRAY
37677: GREATEREQUAL
37678: AND
37679: ST_TO_ADDR
// end ;
37680: LD_VAR 0 3
37684: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
37685: LD_INT 0
37687: PPUSH
37688: PPUSH
37689: PPUSH
37690: PPUSH
37691: PPUSH
37692: PPUSH
37693: PPUSH
37694: PPUSH
37695: PPUSH
37696: PPUSH
// result := false ;
37697: LD_ADDR_VAR 0 6
37701: PUSH
37702: LD_INT 0
37704: ST_TO_ADDR
// if not base or not btype or not x or not y then
37705: LD_VAR 0 1
37709: NOT
37710: PUSH
37711: LD_VAR 0 2
37715: NOT
37716: OR
37717: PUSH
37718: LD_VAR 0 3
37722: NOT
37723: OR
37724: PUSH
37725: LD_VAR 0 4
37729: NOT
37730: OR
37731: IFFALSE 37735
// exit ;
37733: GO 38344
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
37735: LD_ADDR_VAR 0 12
37739: PUSH
37740: LD_VAR 0 2
37744: PPUSH
37745: LD_VAR 0 3
37749: PPUSH
37750: LD_VAR 0 4
37754: PPUSH
37755: LD_VAR 0 5
37759: PPUSH
37760: LD_VAR 0 1
37764: PUSH
37765: LD_INT 1
37767: ARRAY
37768: PPUSH
37769: CALL_OW 248
37773: PPUSH
37774: LD_INT 0
37776: PPUSH
37777: CALL 39181 0 6
37781: ST_TO_ADDR
// if not hexes then
37782: LD_VAR 0 12
37786: NOT
37787: IFFALSE 37791
// exit ;
37789: GO 38344
// for i = 1 to hexes do
37791: LD_ADDR_VAR 0 7
37795: PUSH
37796: DOUBLE
37797: LD_INT 1
37799: DEC
37800: ST_TO_ADDR
37801: LD_VAR 0 12
37805: PUSH
37806: FOR_TO
37807: IFFALSE 38342
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37809: LD_ADDR_VAR 0 11
37813: PUSH
37814: LD_VAR 0 12
37818: PUSH
37819: LD_VAR 0 7
37823: ARRAY
37824: PUSH
37825: LD_INT 1
37827: ARRAY
37828: PPUSH
37829: LD_VAR 0 12
37833: PUSH
37834: LD_VAR 0 7
37838: ARRAY
37839: PUSH
37840: LD_INT 2
37842: ARRAY
37843: PPUSH
37844: CALL_OW 428
37848: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37849: LD_VAR 0 12
37853: PUSH
37854: LD_VAR 0 7
37858: ARRAY
37859: PUSH
37860: LD_INT 1
37862: ARRAY
37863: PPUSH
37864: LD_VAR 0 12
37868: PUSH
37869: LD_VAR 0 7
37873: ARRAY
37874: PUSH
37875: LD_INT 2
37877: ARRAY
37878: PPUSH
37879: CALL_OW 351
37883: PUSH
37884: LD_VAR 0 12
37888: PUSH
37889: LD_VAR 0 7
37893: ARRAY
37894: PUSH
37895: LD_INT 1
37897: ARRAY
37898: PPUSH
37899: LD_VAR 0 12
37903: PUSH
37904: LD_VAR 0 7
37908: ARRAY
37909: PUSH
37910: LD_INT 2
37912: ARRAY
37913: PPUSH
37914: CALL_OW 488
37918: NOT
37919: OR
37920: PUSH
37921: LD_VAR 0 11
37925: PPUSH
37926: CALL_OW 247
37930: PUSH
37931: LD_INT 3
37933: EQUAL
37934: OR
37935: IFFALSE 37941
// exit ;
37937: POP
37938: POP
37939: GO 38344
// if not tmp or not tmp in base then
37941: LD_VAR 0 11
37945: NOT
37946: PUSH
37947: LD_VAR 0 11
37951: PUSH
37952: LD_VAR 0 1
37956: IN
37957: NOT
37958: OR
37959: IFFALSE 37963
// continue ;
37961: GO 37806
// result := true ;
37963: LD_ADDR_VAR 0 6
37967: PUSH
37968: LD_INT 1
37970: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37971: LD_ADDR_VAR 0 15
37975: PUSH
37976: LD_VAR 0 1
37980: PPUSH
37981: LD_INT 22
37983: PUSH
37984: LD_VAR 0 11
37988: PPUSH
37989: CALL_OW 255
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: LD_INT 30
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 30
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PPUSH
38030: CALL_OW 72
38034: ST_TO_ADDR
// if dep then
38035: LD_VAR 0 15
38039: IFFALSE 38175
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38041: LD_ADDR_VAR 0 14
38045: PUSH
38046: LD_VAR 0 15
38050: PUSH
38051: LD_INT 1
38053: ARRAY
38054: PPUSH
38055: CALL_OW 250
38059: PPUSH
38060: LD_VAR 0 15
38064: PUSH
38065: LD_INT 1
38067: ARRAY
38068: PPUSH
38069: CALL_OW 254
38073: PPUSH
38074: LD_INT 5
38076: PPUSH
38077: CALL_OW 272
38081: PUSH
38082: LD_VAR 0 15
38086: PUSH
38087: LD_INT 1
38089: ARRAY
38090: PPUSH
38091: CALL_OW 251
38095: PPUSH
38096: LD_VAR 0 15
38100: PUSH
38101: LD_INT 1
38103: ARRAY
38104: PPUSH
38105: CALL_OW 254
38109: PPUSH
38110: LD_INT 5
38112: PPUSH
38113: CALL_OW 273
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38122: LD_VAR 0 14
38126: PUSH
38127: LD_INT 1
38129: ARRAY
38130: PPUSH
38131: LD_VAR 0 14
38135: PUSH
38136: LD_INT 2
38138: ARRAY
38139: PPUSH
38140: CALL_OW 488
38144: IFFALSE 38175
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38146: LD_VAR 0 11
38150: PPUSH
38151: LD_VAR 0 14
38155: PUSH
38156: LD_INT 1
38158: ARRAY
38159: PPUSH
38160: LD_VAR 0 14
38164: PUSH
38165: LD_INT 2
38167: ARRAY
38168: PPUSH
38169: CALL_OW 111
// continue ;
38173: GO 37806
// end ; end ; r := GetDir ( tmp ) ;
38175: LD_ADDR_VAR 0 13
38179: PUSH
38180: LD_VAR 0 11
38184: PPUSH
38185: CALL_OW 254
38189: ST_TO_ADDR
// if r = 5 then
38190: LD_VAR 0 13
38194: PUSH
38195: LD_INT 5
38197: EQUAL
38198: IFFALSE 38208
// r := 0 ;
38200: LD_ADDR_VAR 0 13
38204: PUSH
38205: LD_INT 0
38207: ST_TO_ADDR
// for j = r to 5 do
38208: LD_ADDR_VAR 0 8
38212: PUSH
38213: DOUBLE
38214: LD_VAR 0 13
38218: DEC
38219: ST_TO_ADDR
38220: LD_INT 5
38222: PUSH
38223: FOR_TO
38224: IFFALSE 38338
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38226: LD_ADDR_VAR 0 9
38230: PUSH
38231: LD_VAR 0 11
38235: PPUSH
38236: CALL_OW 250
38240: PPUSH
38241: LD_VAR 0 8
38245: PPUSH
38246: LD_INT 2
38248: PPUSH
38249: CALL_OW 272
38253: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38254: LD_ADDR_VAR 0 10
38258: PUSH
38259: LD_VAR 0 11
38263: PPUSH
38264: CALL_OW 251
38268: PPUSH
38269: LD_VAR 0 8
38273: PPUSH
38274: LD_INT 2
38276: PPUSH
38277: CALL_OW 273
38281: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38282: LD_VAR 0 9
38286: PPUSH
38287: LD_VAR 0 10
38291: PPUSH
38292: CALL_OW 488
38296: PUSH
38297: LD_VAR 0 9
38301: PPUSH
38302: LD_VAR 0 10
38306: PPUSH
38307: CALL_OW 428
38311: NOT
38312: AND
38313: IFFALSE 38336
// begin ComMoveXY ( tmp , _x , _y ) ;
38315: LD_VAR 0 11
38319: PPUSH
38320: LD_VAR 0 9
38324: PPUSH
38325: LD_VAR 0 10
38329: PPUSH
38330: CALL_OW 111
// break ;
38334: GO 38338
// end ; end ;
38336: GO 38223
38338: POP
38339: POP
// end ;
38340: GO 37806
38342: POP
38343: POP
// end ;
38344: LD_VAR 0 6
38348: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
38349: LD_INT 0
38351: PPUSH
38352: PPUSH
38353: PPUSH
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
38360: PPUSH
// result := false ;
38361: LD_ADDR_VAR 0 6
38365: PUSH
38366: LD_INT 0
38368: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38369: LD_VAR 0 1
38373: NOT
38374: PUSH
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL_OW 266
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: IN
38395: NOT
38396: OR
38397: PUSH
38398: LD_VAR 0 2
38402: NOT
38403: OR
38404: PUSH
38405: LD_VAR 0 5
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: LD_INT 3
38421: PUSH
38422: LD_INT 4
38424: PUSH
38425: LD_INT 5
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: IN
38436: NOT
38437: OR
38438: PUSH
38439: LD_VAR 0 3
38443: PPUSH
38444: LD_VAR 0 4
38448: PPUSH
38449: CALL_OW 488
38453: NOT
38454: OR
38455: IFFALSE 38459
// exit ;
38457: GO 39176
// pom := GetBase ( depot ) ;
38459: LD_ADDR_VAR 0 10
38463: PUSH
38464: LD_VAR 0 1
38468: PPUSH
38469: CALL_OW 274
38473: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38474: LD_ADDR_VAR 0 11
38478: PUSH
38479: LD_VAR 0 2
38483: PPUSH
38484: LD_VAR 0 1
38488: PPUSH
38489: CALL_OW 248
38493: PPUSH
38494: CALL_OW 450
38498: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38499: LD_VAR 0 10
38503: PPUSH
38504: LD_INT 1
38506: PPUSH
38507: CALL_OW 275
38511: PUSH
38512: LD_VAR 0 11
38516: PUSH
38517: LD_INT 1
38519: ARRAY
38520: GREATEREQUAL
38521: PUSH
38522: LD_VAR 0 10
38526: PPUSH
38527: LD_INT 2
38529: PPUSH
38530: CALL_OW 275
38534: PUSH
38535: LD_VAR 0 11
38539: PUSH
38540: LD_INT 2
38542: ARRAY
38543: GREATEREQUAL
38544: AND
38545: PUSH
38546: LD_VAR 0 10
38550: PPUSH
38551: LD_INT 3
38553: PPUSH
38554: CALL_OW 275
38558: PUSH
38559: LD_VAR 0 11
38563: PUSH
38564: LD_INT 3
38566: ARRAY
38567: GREATEREQUAL
38568: AND
38569: NOT
38570: IFFALSE 38574
// exit ;
38572: GO 39176
// if GetBType ( depot ) = b_depot then
38574: LD_VAR 0 1
38578: PPUSH
38579: CALL_OW 266
38583: PUSH
38584: LD_INT 0
38586: EQUAL
38587: IFFALSE 38599
// dist := 28 else
38589: LD_ADDR_VAR 0 14
38593: PUSH
38594: LD_INT 28
38596: ST_TO_ADDR
38597: GO 38607
// dist := 36 ;
38599: LD_ADDR_VAR 0 14
38603: PUSH
38604: LD_INT 36
38606: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38607: LD_VAR 0 1
38611: PPUSH
38612: LD_VAR 0 3
38616: PPUSH
38617: LD_VAR 0 4
38621: PPUSH
38622: CALL_OW 297
38626: PUSH
38627: LD_VAR 0 14
38631: GREATER
38632: IFFALSE 38636
// exit ;
38634: GO 39176
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38636: LD_ADDR_VAR 0 12
38640: PUSH
38641: LD_VAR 0 2
38645: PPUSH
38646: LD_VAR 0 3
38650: PPUSH
38651: LD_VAR 0 4
38655: PPUSH
38656: LD_VAR 0 5
38660: PPUSH
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL_OW 248
38670: PPUSH
38671: LD_INT 0
38673: PPUSH
38674: CALL 39181 0 6
38678: ST_TO_ADDR
// if not hexes then
38679: LD_VAR 0 12
38683: NOT
38684: IFFALSE 38688
// exit ;
38686: GO 39176
// hex := GetHexInfo ( x , y ) ;
38688: LD_ADDR_VAR 0 15
38692: PUSH
38693: LD_VAR 0 3
38697: PPUSH
38698: LD_VAR 0 4
38702: PPUSH
38703: CALL_OW 546
38707: ST_TO_ADDR
// if hex [ 1 ] then
38708: LD_VAR 0 15
38712: PUSH
38713: LD_INT 1
38715: ARRAY
38716: IFFALSE 38720
// exit ;
38718: GO 39176
// height := hex [ 2 ] ;
38720: LD_ADDR_VAR 0 13
38724: PUSH
38725: LD_VAR 0 15
38729: PUSH
38730: LD_INT 2
38732: ARRAY
38733: ST_TO_ADDR
// for i = 1 to hexes do
38734: LD_ADDR_VAR 0 7
38738: PUSH
38739: DOUBLE
38740: LD_INT 1
38742: DEC
38743: ST_TO_ADDR
38744: LD_VAR 0 12
38748: PUSH
38749: FOR_TO
38750: IFFALSE 39080
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38752: LD_VAR 0 12
38756: PUSH
38757: LD_VAR 0 7
38761: ARRAY
38762: PUSH
38763: LD_INT 1
38765: ARRAY
38766: PPUSH
38767: LD_VAR 0 12
38771: PUSH
38772: LD_VAR 0 7
38776: ARRAY
38777: PUSH
38778: LD_INT 2
38780: ARRAY
38781: PPUSH
38782: CALL_OW 488
38786: NOT
38787: PUSH
38788: LD_VAR 0 12
38792: PUSH
38793: LD_VAR 0 7
38797: ARRAY
38798: PUSH
38799: LD_INT 1
38801: ARRAY
38802: PPUSH
38803: LD_VAR 0 12
38807: PUSH
38808: LD_VAR 0 7
38812: ARRAY
38813: PUSH
38814: LD_INT 2
38816: ARRAY
38817: PPUSH
38818: CALL_OW 428
38822: PUSH
38823: LD_INT 0
38825: GREATER
38826: OR
38827: PUSH
38828: LD_VAR 0 12
38832: PUSH
38833: LD_VAR 0 7
38837: ARRAY
38838: PUSH
38839: LD_INT 1
38841: ARRAY
38842: PPUSH
38843: LD_VAR 0 12
38847: PUSH
38848: LD_VAR 0 7
38852: ARRAY
38853: PUSH
38854: LD_INT 2
38856: ARRAY
38857: PPUSH
38858: CALL_OW 351
38862: OR
38863: IFFALSE 38869
// exit ;
38865: POP
38866: POP
38867: GO 39176
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38869: LD_ADDR_VAR 0 8
38873: PUSH
38874: LD_VAR 0 12
38878: PUSH
38879: LD_VAR 0 7
38883: ARRAY
38884: PUSH
38885: LD_INT 1
38887: ARRAY
38888: PPUSH
38889: LD_VAR 0 12
38893: PUSH
38894: LD_VAR 0 7
38898: ARRAY
38899: PUSH
38900: LD_INT 2
38902: ARRAY
38903: PPUSH
38904: CALL_OW 546
38908: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38909: LD_VAR 0 8
38913: PUSH
38914: LD_INT 1
38916: ARRAY
38917: PUSH
38918: LD_VAR 0 8
38922: PUSH
38923: LD_INT 2
38925: ARRAY
38926: PUSH
38927: LD_VAR 0 13
38931: PUSH
38932: LD_INT 2
38934: PLUS
38935: GREATER
38936: OR
38937: PUSH
38938: LD_VAR 0 8
38942: PUSH
38943: LD_INT 2
38945: ARRAY
38946: PUSH
38947: LD_VAR 0 13
38951: PUSH
38952: LD_INT 2
38954: MINUS
38955: LESS
38956: OR
38957: PUSH
38958: LD_VAR 0 8
38962: PUSH
38963: LD_INT 3
38965: ARRAY
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: LD_INT 8
38972: PUSH
38973: LD_INT 9
38975: PUSH
38976: LD_INT 10
38978: PUSH
38979: LD_INT 11
38981: PUSH
38982: LD_INT 12
38984: PUSH
38985: LD_INT 13
38987: PUSH
38988: LD_INT 16
38990: PUSH
38991: LD_INT 17
38993: PUSH
38994: LD_INT 18
38996: PUSH
38997: LD_INT 19
38999: PUSH
39000: LD_INT 20
39002: PUSH
39003: LD_INT 21
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: IN
39021: NOT
39022: OR
39023: PUSH
39024: LD_VAR 0 8
39028: PUSH
39029: LD_INT 5
39031: ARRAY
39032: NOT
39033: OR
39034: PUSH
39035: LD_VAR 0 8
39039: PUSH
39040: LD_INT 6
39042: ARRAY
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: LD_INT 7
39052: PUSH
39053: LD_INT 9
39055: PUSH
39056: LD_INT 10
39058: PUSH
39059: LD_INT 11
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: IN
39070: NOT
39071: OR
39072: IFFALSE 39078
// exit ;
39074: POP
39075: POP
39076: GO 39176
// end ;
39078: GO 38749
39080: POP
39081: POP
// side := GetSide ( depot ) ;
39082: LD_ADDR_VAR 0 9
39086: PUSH
39087: LD_VAR 0 1
39091: PPUSH
39092: CALL_OW 255
39096: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39097: LD_VAR 0 9
39101: PPUSH
39102: LD_VAR 0 3
39106: PPUSH
39107: LD_VAR 0 4
39111: PPUSH
39112: LD_INT 20
39114: PPUSH
39115: CALL 31830 0 4
39119: PUSH
39120: LD_INT 4
39122: ARRAY
39123: IFFALSE 39127
// exit ;
39125: GO 39176
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39127: LD_VAR 0 2
39131: PUSH
39132: LD_INT 29
39134: PUSH
39135: LD_INT 30
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: IN
39142: PUSH
39143: LD_VAR 0 3
39147: PPUSH
39148: LD_VAR 0 4
39152: PPUSH
39153: LD_VAR 0 9
39157: PPUSH
39158: CALL_OW 440
39162: NOT
39163: AND
39164: IFFALSE 39168
// exit ;
39166: GO 39176
// result := true ;
39168: LD_ADDR_VAR 0 6
39172: PUSH
39173: LD_INT 1
39175: ST_TO_ADDR
// end ;
39176: LD_VAR 0 6
39180: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
39181: LD_INT 0
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
39203: PPUSH
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
39208: PPUSH
39209: PPUSH
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
39216: PPUSH
39217: PPUSH
39218: PPUSH
39219: PPUSH
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
39228: PPUSH
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
39233: PPUSH
39234: PPUSH
39235: PPUSH
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
39240: PPUSH
// result = [ ] ;
39241: LD_ADDR_VAR 0 7
39245: PUSH
39246: EMPTY
39247: ST_TO_ADDR
// temp_list = [ ] ;
39248: LD_ADDR_VAR 0 9
39252: PUSH
39253: EMPTY
39254: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39255: LD_VAR 0 4
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 3
39271: PUSH
39272: LD_INT 4
39274: PUSH
39275: LD_INT 5
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: IN
39286: NOT
39287: PUSH
39288: LD_VAR 0 1
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: IN
39303: PUSH
39304: LD_VAR 0 5
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: IN
39323: NOT
39324: AND
39325: OR
39326: IFFALSE 39330
// exit ;
39328: GO 57721
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39330: LD_VAR 0 1
39334: PUSH
39335: LD_INT 6
39337: PUSH
39338: LD_INT 7
39340: PUSH
39341: LD_INT 8
39343: PUSH
39344: LD_INT 13
39346: PUSH
39347: LD_INT 12
39349: PUSH
39350: LD_INT 15
39352: PUSH
39353: LD_INT 11
39355: PUSH
39356: LD_INT 14
39358: PUSH
39359: LD_INT 10
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: IN
39373: IFFALSE 39383
// btype = b_lab ;
39375: LD_ADDR_VAR 0 1
39379: PUSH
39380: LD_INT 6
39382: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39383: LD_VAR 0 6
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: LIST
39401: IN
39402: NOT
39403: PUSH
39404: LD_VAR 0 1
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 2
39417: PUSH
39418: LD_INT 3
39420: PUSH
39421: LD_INT 6
39423: PUSH
39424: LD_INT 36
39426: PUSH
39427: LD_INT 4
39429: PUSH
39430: LD_INT 5
39432: PUSH
39433: LD_INT 31
39435: PUSH
39436: LD_INT 32
39438: PUSH
39439: LD_INT 33
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: IN
39455: NOT
39456: PUSH
39457: LD_VAR 0 6
39461: PUSH
39462: LD_INT 1
39464: EQUAL
39465: AND
39466: OR
39467: PUSH
39468: LD_VAR 0 1
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: IN
39483: NOT
39484: PUSH
39485: LD_VAR 0 6
39489: PUSH
39490: LD_INT 2
39492: EQUAL
39493: AND
39494: OR
39495: IFFALSE 39505
// mode = 0 ;
39497: LD_ADDR_VAR 0 6
39501: PUSH
39502: LD_INT 0
39504: ST_TO_ADDR
// case mode of 0 :
39505: LD_VAR 0 6
39509: PUSH
39510: LD_INT 0
39512: DOUBLE
39513: EQUAL
39514: IFTRUE 39518
39516: GO 50971
39518: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39519: LD_ADDR_VAR 0 11
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: LD_INT 3
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 3
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39712: LD_ADDR_VAR 0 12
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: NEG
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 3
39869: NEG
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 3
39880: NEG
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39908: LD_ADDR_VAR 0 13
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: LD_INT 2
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: NEG
40056: PUSH
40057: LD_INT 3
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 3
40067: NEG
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 3
40079: NEG
40080: PUSH
40081: LD_INT 3
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40107: LD_ADDR_VAR 0 14
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 2
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 3
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 3
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40303: LD_ADDR_VAR 0 15
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40496: LD_ADDR_VAR 0 16
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 2
40619: NEG
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: NEG
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 3
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 3
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40689: LD_ADDR_VAR 0 17
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 2
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40919: LD_ADDR_VAR 0 18
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 2
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: LD_INT 2
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41149: LD_ADDR_VAR 0 19
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 2
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: LD_INT 2
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41379: LD_ADDR_VAR 0 20
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41609: LD_ADDR_VAR 0 21
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: LD_INT 2
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 2
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 2
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: NEG
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: LD_INT 2
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41839: LD_ADDR_VAR 0 22
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 2
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42069: LD_ADDR_VAR 0 23
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 2
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: NEG
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: LD_INT 2
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: LD_INT 3
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: LD_INT 3
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42349: LD_ADDR_VAR 0 24
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: LD_INT 2
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42625: LD_ADDR_VAR 0 25
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 3
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: LD_INT 3
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 3
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42899: LD_ADDR_VAR 0 26
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 2
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: NEG
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: LD_INT 2
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43175: LD_ADDR_VAR 0 27
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 3
43408: NEG
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 3
43420: NEG
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43455: LD_ADDR_VAR 0 28
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 2
43666: NEG
43667: PUSH
43668: LD_INT 3
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 3
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 3
43690: NEG
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 3
43702: NEG
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43737: LD_ADDR_VAR 0 29
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: LD_INT 2
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: LD_INT 3
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 3
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 3
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 3
43981: NEG
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44016: LD_ADDR_VAR 0 30
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: LD_INT 3
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 3
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44294: LD_ADDR_VAR 0 31
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 2
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: LD_INT 3
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 3
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 3
44537: NEG
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44572: LD_ADDR_VAR 0 32
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 3
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 3
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44850: LD_ADDR_VAR 0 33
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 2
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: LD_INT 3
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 3
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 3
45094: NEG
45095: PUSH
45096: LD_INT 2
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45129: LD_ADDR_VAR 0 34
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: LD_INT 2
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 3
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: LD_INT 3
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 3
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45409: LD_ADDR_VAR 0 35
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45521: LD_ADDR_VAR 0 36
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45633: LD_ADDR_VAR 0 37
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45745: LD_ADDR_VAR 0 38
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45857: LD_ADDR_VAR 0 39
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45969: LD_ADDR_VAR 0 40
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46081: LD_ADDR_VAR 0 41
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: NEG
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: LD_INT 3
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 3
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 3
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: LD_INT 3
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 3
46355: NEG
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 3
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 3
46378: NEG
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 3
46390: NEG
46391: PUSH
46392: LD_INT 3
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46431: LD_ADDR_VAR 0 42
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: LD_INT 3
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: LD_INT 3
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 3
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: LD_INT 3
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: LD_INT 3
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 3
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 3
46728: NEG
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 3
46740: NEG
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46781: LD_ADDR_VAR 0 43
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: LD_INT 3
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 3
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 3
47077: NEG
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47129: LD_ADDR_VAR 0 44
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: LD_INT 3
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 3
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 3
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 3
47372: PUSH
47373: LD_INT 3
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 3
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 3
47403: NEG
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: NEG
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: LD_INT 3
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47479: LD_ADDR_VAR 0 45
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 3
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: LD_INT 3
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 3
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 3
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 3
47776: NEG
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 3
47788: NEG
47789: PUSH
47790: LD_INT 3
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47829: LD_ADDR_VAR 0 46
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 3
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 3
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 3
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 3
48125: NEG
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48177: LD_ADDR_VAR 0 47
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48328: LD_ADDR_VAR 0 48
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48475: LD_ADDR_VAR 0 49
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48619: LD_ADDR_VAR 0 50
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48763: LD_ADDR_VAR 0 51
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48910: LD_ADDR_VAR 0 52
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49061: LD_ADDR_VAR 0 53
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49291: LD_ADDR_VAR 0 54
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49521: LD_ADDR_VAR 0 55
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49751: LD_ADDR_VAR 0 56
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49981: LD_ADDR_VAR 0 57
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50211: LD_ADDR_VAR 0 58
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50441: LD_ADDR_VAR 0 59
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50529: LD_ADDR_VAR 0 60
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50617: LD_ADDR_VAR 0 61
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50705: LD_ADDR_VAR 0 62
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50793: LD_ADDR_VAR 0 63
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50881: LD_ADDR_VAR 0 64
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: ST_TO_ADDR
// end ; 1 :
50969: GO 56866
50971: LD_INT 1
50973: DOUBLE
50974: EQUAL
50975: IFTRUE 50979
50977: GO 53602
50979: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50980: LD_ADDR_VAR 0 11
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 3
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 3
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: LIST
51023: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51024: LD_ADDR_VAR 0 12
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 3
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51065: LD_ADDR_VAR 0 13
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51105: LD_ADDR_VAR 0 14
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 3
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 3
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51146: LD_ADDR_VAR 0 15
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 3
51175: NEG
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: LIST
51189: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51190: LD_ADDR_VAR 0 16
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: LD_INT 3
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: NEG
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: LD_INT 3
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51236: LD_ADDR_VAR 0 17
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51280: LD_ADDR_VAR 0 18
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51321: LD_ADDR_VAR 0 19
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: LD_INT 3
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: LIST
51360: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51361: LD_ADDR_VAR 0 20
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: LIST
51401: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51402: LD_ADDR_VAR 0 21
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: LIST
51445: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51446: LD_ADDR_VAR 0 22
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 3
51465: NEG
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: LIST
51491: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51492: LD_ADDR_VAR 0 23
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 4
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 3
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51536: LD_ADDR_VAR 0 24
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 4
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51577: LD_ADDR_VAR 0 25
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 4
51594: PUSH
51595: LD_INT 3
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: PUSH
51605: LD_INT 4
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: LIST
51616: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51617: LD_ADDR_VAR 0 26
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 4
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51658: LD_ADDR_VAR 0 27
51662: PUSH
51663: LD_INT 3
51665: NEG
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 4
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51702: LD_ADDR_VAR 0 28
51706: PUSH
51707: LD_INT 3
51709: NEG
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 3
51721: NEG
51722: PUSH
51723: LD_INT 4
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 4
51733: NEG
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51748: LD_ADDR_VAR 0 29
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 4
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 4
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 3
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 5
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 5
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 4
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 6
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 6
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 5
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51903: LD_ADDR_VAR 0 30
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 3
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 3
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 4
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 4
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 4
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 5
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 5
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 5
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 6
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 6
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52046: LD_ADDR_VAR 0 31
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 3
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 4
52083: PUSH
52084: LD_INT 3
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 4
52093: PUSH
52094: LD_INT 4
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: LD_INT 4
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 5
52113: PUSH
52114: LD_INT 4
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 5
52123: PUSH
52124: LD_INT 5
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 4
52133: PUSH
52134: LD_INT 5
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 6
52143: PUSH
52144: LD_INT 5
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 6
52153: PUSH
52154: LD_INT 6
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 5
52163: PUSH
52164: LD_INT 6
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52185: LD_ADDR_VAR 0 32
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 4
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 4
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 3
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 5
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 5
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 4
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: LD_INT 6
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 6
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: LD_INT 5
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52328: LD_ADDR_VAR 0 33
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: NEG
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 4
52380: NEG
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 4
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 4
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 5
52414: NEG
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 5
52425: NEG
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 5
52437: NEG
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 6
52448: NEG
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 6
52459: NEG
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52483: LD_ADDR_VAR 0 34
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: LD_INT 3
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: LD_INT 4
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 4
52538: NEG
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 4
52550: NEG
52551: PUSH
52552: LD_INT 4
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 4
52562: NEG
52563: PUSH
52564: LD_INT 5
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 5
52574: NEG
52575: PUSH
52576: LD_INT 4
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 5
52586: NEG
52587: PUSH
52588: LD_INT 5
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 5
52598: NEG
52599: PUSH
52600: LD_INT 6
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 6
52610: NEG
52611: PUSH
52612: LD_INT 5
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 6
52622: NEG
52623: PUSH
52624: LD_INT 6
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52646: LD_ADDR_VAR 0 41
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 3
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: LIST
52689: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52690: LD_ADDR_VAR 0 42
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: LIST
52730: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52731: LD_ADDR_VAR 0 43
52735: PUSH
52736: LD_INT 2
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 3
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: LD_INT 3
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: LIST
52770: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52771: LD_ADDR_VAR 0 44
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52812: LD_ADDR_VAR 0 45
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 3
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: LIST
52855: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52856: LD_ADDR_VAR 0 46
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 3
52887: NEG
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52902: LD_ADDR_VAR 0 47
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: LD_INT 3
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 3
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52935: LD_ADDR_VAR 0 48
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52966: LD_ADDR_VAR 0 49
52970: PUSH
52971: LD_INT 3
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 3
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52995: LD_ADDR_VAR 0 50
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: LD_INT 3
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53024: LD_ADDR_VAR 0 51
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53055: LD_ADDR_VAR 0 52
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53088: LD_ADDR_VAR 0 53
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 3
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53132: LD_ADDR_VAR 0 54
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53173: LD_ADDR_VAR 0 55
53177: PUSH
53178: LD_INT 3
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 3
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53213: LD_ADDR_VAR 0 56
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53254: LD_ADDR_VAR 0 57
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: NEG
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53298: LD_ADDR_VAR 0 58
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: NEG
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: LIST
53343: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53344: LD_ADDR_VAR 0 59
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: LIST
53387: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53388: LD_ADDR_VAR 0 60
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53429: LD_ADDR_VAR 0 61
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: LIST
53468: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53469: LD_ADDR_VAR 0 62
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53510: LD_ADDR_VAR 0 63
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53554: LD_ADDR_VAR 0 64
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: ST_TO_ADDR
// end ; 2 :
53600: GO 56866
53602: LD_INT 2
53604: DOUBLE
53605: EQUAL
53606: IFTRUE 53610
53608: GO 56865
53610: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53611: LD_ADDR_VAR 0 29
53615: PUSH
53616: LD_INT 4
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 4
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 5
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 5
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 4
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 5
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 4
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 4
53741: PUSH
53742: LD_INT 4
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: LD_INT 4
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: LD_INT 3
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 4
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 4
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 4
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 3
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 4
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 5
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 5
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 4
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 5
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: LD_INT 3
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 3
53894: NEG
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 4
53950: NEG
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 4
53961: NEG
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 4
53973: NEG
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 4
53996: NEG
53997: PUSH
53998: LD_INT 4
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 4
54008: NEG
54009: PUSH
54010: LD_INT 5
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: LD_INT 4
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 3
54032: NEG
54033: PUSH
54034: LD_INT 3
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 4
54044: NEG
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 5
54056: NEG
54057: PUSH
54058: LD_INT 4
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 5
54068: NEG
54069: PUSH
54070: LD_INT 5
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 3
54080: NEG
54081: PUSH
54082: LD_INT 5
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 5
54092: NEG
54093: PUSH
54094: LD_INT 3
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54149: LD_ADDR_VAR 0 30
54153: PUSH
54154: LD_INT 4
54156: PUSH
54157: LD_INT 4
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 4
54166: PUSH
54167: LD_INT 3
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 5
54176: PUSH
54177: LD_INT 4
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 5
54186: PUSH
54187: LD_INT 5
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 4
54196: PUSH
54197: LD_INT 5
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 3
54206: PUSH
54207: LD_INT 4
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: LD_INT 3
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 5
54226: PUSH
54227: LD_INT 3
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: LD_INT 5
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 3
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 4
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 4
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 3
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: LD_INT 4
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 4
54339: NEG
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 4
54350: NEG
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 3
54362: NEG
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 4
54384: NEG
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 5
54395: NEG
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 5
54406: NEG
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 5
54418: NEG
54419: PUSH
54420: LD_INT 2
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 3
54430: NEG
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: NEG
54442: PUSH
54443: LD_INT 3
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 3
54453: NEG
54454: PUSH
54455: LD_INT 4
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: LD_INT 3
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 3
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 4
54501: NEG
54502: PUSH
54503: LD_INT 3
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 4
54513: NEG
54514: PUSH
54515: LD_INT 4
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 4
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 4
54537: NEG
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 4
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 5
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 3
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 3
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 4
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 5
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: LD_INT 3
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: LD_INT 5
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54696: LD_ADDR_VAR 0 31
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 4
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 3
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 4
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 5
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 5
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 4
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 3
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 5
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: LD_INT 3
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 4
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 4
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 4
54875: NEG
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 4
54898: NEG
54899: PUSH
54900: LD_INT 4
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 4
54910: NEG
54911: PUSH
54912: LD_INT 5
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 3
54922: NEG
54923: PUSH
54924: LD_INT 4
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 3
54934: NEG
54935: PUSH
54936: LD_INT 3
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 4
54946: NEG
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 5
54958: NEG
54959: PUSH
54960: LD_INT 4
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 5
54970: NEG
54971: PUSH
54972: LD_INT 5
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: LD_INT 5
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 5
54994: NEG
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 3
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: LD_INT 4
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 3
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 4
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: LD_INT 4
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 4
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 4
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 5
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 5
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 4
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 5
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55246: LD_ADDR_VAR 0 32
55250: PUSH
55251: LD_INT 4
55253: NEG
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 4
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: NEG
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 3
55287: NEG
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 4
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 5
55309: NEG
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 5
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 5
55332: NEG
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 3
55367: NEG
55368: PUSH
55369: LD_INT 4
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: LD_INT 3
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 4
55415: NEG
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 4
55427: NEG
55428: PUSH
55429: LD_INT 4
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: LD_INT 4
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 4
55451: NEG
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 4
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 5
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 4
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 3
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 3
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 4
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 5
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 3
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: LD_INT 5
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 4
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 4
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 3
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 4
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 4
55658: PUSH
55659: LD_INT 4
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 4
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 5
55678: PUSH
55679: LD_INT 4
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 5
55688: PUSH
55689: LD_INT 5
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 4
55698: PUSH
55699: LD_INT 5
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: LD_INT 4
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 3
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 5
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 3
55738: PUSH
55739: LD_INT 5
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55793: LD_ADDR_VAR 0 33
55797: PUSH
55798: LD_INT 4
55800: NEG
55801: PUSH
55802: LD_INT 4
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 4
55812: NEG
55813: PUSH
55814: LD_INT 5
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 3
55824: NEG
55825: PUSH
55826: LD_INT 4
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 3
55836: NEG
55837: PUSH
55838: LD_INT 3
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 4
55848: NEG
55849: PUSH
55850: LD_INT 3
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 5
55860: NEG
55861: PUSH
55862: LD_INT 4
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 5
55872: NEG
55873: PUSH
55874: LD_INT 5
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: LD_INT 5
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 5
55896: NEG
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 4
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 3
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 4
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: LD_INT 4
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 4
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 4
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 5
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 5
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 4
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 5
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 3
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 4
56123: PUSH
56124: LD_INT 3
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 4
56133: PUSH
56134: LD_INT 4
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: LD_INT 4
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 4
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: LD_INT 4
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 4
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 5
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 5
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 4
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 5
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56331: LD_ADDR_VAR 0 34
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 4
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 5
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 4
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 3
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 3
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 4
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 5
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 3
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 5
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 3
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 4
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 4
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 4
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 4
56533: PUSH
56534: LD_INT 4
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 4
56543: PUSH
56544: LD_INT 3
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 5
56553: PUSH
56554: LD_INT 4
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 5
56563: PUSH
56564: LD_INT 5
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 4
56573: PUSH
56574: LD_INT 5
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: LD_INT 4
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 5
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: LD_INT 5
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 2
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 4
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 4
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 4
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 4
56716: NEG
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 4
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 4
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 5
56772: NEG
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 5
56783: NEG
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 5
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: NEG
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: ST_TO_ADDR
// end ; end ;
56863: GO 56866
56865: POP
// case btype of b_depot , b_warehouse :
56866: LD_VAR 0 1
56870: PUSH
56871: LD_INT 0
56873: DOUBLE
56874: EQUAL
56875: IFTRUE 56885
56877: LD_INT 1
56879: DOUBLE
56880: EQUAL
56881: IFTRUE 56885
56883: GO 57086
56885: POP
// case nation of nation_american :
56886: LD_VAR 0 5
56890: PUSH
56891: LD_INT 1
56893: DOUBLE
56894: EQUAL
56895: IFTRUE 56899
56897: GO 56955
56899: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
56900: LD_ADDR_VAR 0 9
56904: PUSH
56905: LD_VAR 0 11
56909: PUSH
56910: LD_VAR 0 12
56914: PUSH
56915: LD_VAR 0 13
56919: PUSH
56920: LD_VAR 0 14
56924: PUSH
56925: LD_VAR 0 15
56929: PUSH
56930: LD_VAR 0 16
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: PUSH
56943: LD_VAR 0 4
56947: PUSH
56948: LD_INT 1
56950: PLUS
56951: ARRAY
56952: ST_TO_ADDR
56953: GO 57084
56955: LD_INT 2
56957: DOUBLE
56958: EQUAL
56959: IFTRUE 56963
56961: GO 57019
56963: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
56964: LD_ADDR_VAR 0 9
56968: PUSH
56969: LD_VAR 0 17
56973: PUSH
56974: LD_VAR 0 18
56978: PUSH
56979: LD_VAR 0 19
56983: PUSH
56984: LD_VAR 0 20
56988: PUSH
56989: LD_VAR 0 21
56993: PUSH
56994: LD_VAR 0 22
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: PUSH
57007: LD_VAR 0 4
57011: PUSH
57012: LD_INT 1
57014: PLUS
57015: ARRAY
57016: ST_TO_ADDR
57017: GO 57084
57019: LD_INT 3
57021: DOUBLE
57022: EQUAL
57023: IFTRUE 57027
57025: GO 57083
57027: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57028: LD_ADDR_VAR 0 9
57032: PUSH
57033: LD_VAR 0 23
57037: PUSH
57038: LD_VAR 0 24
57042: PUSH
57043: LD_VAR 0 25
57047: PUSH
57048: LD_VAR 0 26
57052: PUSH
57053: LD_VAR 0 27
57057: PUSH
57058: LD_VAR 0 28
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: PUSH
57071: LD_VAR 0 4
57075: PUSH
57076: LD_INT 1
57078: PLUS
57079: ARRAY
57080: ST_TO_ADDR
57081: GO 57084
57083: POP
57084: GO 57639
57086: LD_INT 2
57088: DOUBLE
57089: EQUAL
57090: IFTRUE 57100
57092: LD_INT 3
57094: DOUBLE
57095: EQUAL
57096: IFTRUE 57100
57098: GO 57156
57100: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57101: LD_ADDR_VAR 0 9
57105: PUSH
57106: LD_VAR 0 29
57110: PUSH
57111: LD_VAR 0 30
57115: PUSH
57116: LD_VAR 0 31
57120: PUSH
57121: LD_VAR 0 32
57125: PUSH
57126: LD_VAR 0 33
57130: PUSH
57131: LD_VAR 0 34
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: PUSH
57144: LD_VAR 0 4
57148: PUSH
57149: LD_INT 1
57151: PLUS
57152: ARRAY
57153: ST_TO_ADDR
57154: GO 57639
57156: LD_INT 16
57158: DOUBLE
57159: EQUAL
57160: IFTRUE 57218
57162: LD_INT 17
57164: DOUBLE
57165: EQUAL
57166: IFTRUE 57218
57168: LD_INT 18
57170: DOUBLE
57171: EQUAL
57172: IFTRUE 57218
57174: LD_INT 19
57176: DOUBLE
57177: EQUAL
57178: IFTRUE 57218
57180: LD_INT 22
57182: DOUBLE
57183: EQUAL
57184: IFTRUE 57218
57186: LD_INT 20
57188: DOUBLE
57189: EQUAL
57190: IFTRUE 57218
57192: LD_INT 21
57194: DOUBLE
57195: EQUAL
57196: IFTRUE 57218
57198: LD_INT 23
57200: DOUBLE
57201: EQUAL
57202: IFTRUE 57218
57204: LD_INT 24
57206: DOUBLE
57207: EQUAL
57208: IFTRUE 57218
57210: LD_INT 25
57212: DOUBLE
57213: EQUAL
57214: IFTRUE 57218
57216: GO 57274
57218: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57219: LD_ADDR_VAR 0 9
57223: PUSH
57224: LD_VAR 0 35
57228: PUSH
57229: LD_VAR 0 36
57233: PUSH
57234: LD_VAR 0 37
57238: PUSH
57239: LD_VAR 0 38
57243: PUSH
57244: LD_VAR 0 39
57248: PUSH
57249: LD_VAR 0 40
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: PUSH
57262: LD_VAR 0 4
57266: PUSH
57267: LD_INT 1
57269: PLUS
57270: ARRAY
57271: ST_TO_ADDR
57272: GO 57639
57274: LD_INT 6
57276: DOUBLE
57277: EQUAL
57278: IFTRUE 57330
57280: LD_INT 7
57282: DOUBLE
57283: EQUAL
57284: IFTRUE 57330
57286: LD_INT 8
57288: DOUBLE
57289: EQUAL
57290: IFTRUE 57330
57292: LD_INT 13
57294: DOUBLE
57295: EQUAL
57296: IFTRUE 57330
57298: LD_INT 12
57300: DOUBLE
57301: EQUAL
57302: IFTRUE 57330
57304: LD_INT 15
57306: DOUBLE
57307: EQUAL
57308: IFTRUE 57330
57310: LD_INT 11
57312: DOUBLE
57313: EQUAL
57314: IFTRUE 57330
57316: LD_INT 14
57318: DOUBLE
57319: EQUAL
57320: IFTRUE 57330
57322: LD_INT 10
57324: DOUBLE
57325: EQUAL
57326: IFTRUE 57330
57328: GO 57386
57330: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
57331: LD_ADDR_VAR 0 9
57335: PUSH
57336: LD_VAR 0 41
57340: PUSH
57341: LD_VAR 0 42
57345: PUSH
57346: LD_VAR 0 43
57350: PUSH
57351: LD_VAR 0 44
57355: PUSH
57356: LD_VAR 0 45
57360: PUSH
57361: LD_VAR 0 46
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: PUSH
57374: LD_VAR 0 4
57378: PUSH
57379: LD_INT 1
57381: PLUS
57382: ARRAY
57383: ST_TO_ADDR
57384: GO 57639
57386: LD_INT 36
57388: DOUBLE
57389: EQUAL
57390: IFTRUE 57394
57392: GO 57450
57394: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57395: LD_ADDR_VAR 0 9
57399: PUSH
57400: LD_VAR 0 47
57404: PUSH
57405: LD_VAR 0 48
57409: PUSH
57410: LD_VAR 0 49
57414: PUSH
57415: LD_VAR 0 50
57419: PUSH
57420: LD_VAR 0 51
57424: PUSH
57425: LD_VAR 0 52
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: PUSH
57438: LD_VAR 0 4
57442: PUSH
57443: LD_INT 1
57445: PLUS
57446: ARRAY
57447: ST_TO_ADDR
57448: GO 57639
57450: LD_INT 4
57452: DOUBLE
57453: EQUAL
57454: IFTRUE 57476
57456: LD_INT 5
57458: DOUBLE
57459: EQUAL
57460: IFTRUE 57476
57462: LD_INT 34
57464: DOUBLE
57465: EQUAL
57466: IFTRUE 57476
57468: LD_INT 37
57470: DOUBLE
57471: EQUAL
57472: IFTRUE 57476
57474: GO 57532
57476: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57477: LD_ADDR_VAR 0 9
57481: PUSH
57482: LD_VAR 0 53
57486: PUSH
57487: LD_VAR 0 54
57491: PUSH
57492: LD_VAR 0 55
57496: PUSH
57497: LD_VAR 0 56
57501: PUSH
57502: LD_VAR 0 57
57506: PUSH
57507: LD_VAR 0 58
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: PUSH
57520: LD_VAR 0 4
57524: PUSH
57525: LD_INT 1
57527: PLUS
57528: ARRAY
57529: ST_TO_ADDR
57530: GO 57639
57532: LD_INT 31
57534: DOUBLE
57535: EQUAL
57536: IFTRUE 57582
57538: LD_INT 32
57540: DOUBLE
57541: EQUAL
57542: IFTRUE 57582
57544: LD_INT 33
57546: DOUBLE
57547: EQUAL
57548: IFTRUE 57582
57550: LD_INT 27
57552: DOUBLE
57553: EQUAL
57554: IFTRUE 57582
57556: LD_INT 26
57558: DOUBLE
57559: EQUAL
57560: IFTRUE 57582
57562: LD_INT 28
57564: DOUBLE
57565: EQUAL
57566: IFTRUE 57582
57568: LD_INT 29
57570: DOUBLE
57571: EQUAL
57572: IFTRUE 57582
57574: LD_INT 30
57576: DOUBLE
57577: EQUAL
57578: IFTRUE 57582
57580: GO 57638
57582: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
57583: LD_ADDR_VAR 0 9
57587: PUSH
57588: LD_VAR 0 59
57592: PUSH
57593: LD_VAR 0 60
57597: PUSH
57598: LD_VAR 0 61
57602: PUSH
57603: LD_VAR 0 62
57607: PUSH
57608: LD_VAR 0 63
57612: PUSH
57613: LD_VAR 0 64
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: PUSH
57626: LD_VAR 0 4
57630: PUSH
57631: LD_INT 1
57633: PLUS
57634: ARRAY
57635: ST_TO_ADDR
57636: GO 57639
57638: POP
// temp_list2 = [ ] ;
57639: LD_ADDR_VAR 0 10
57643: PUSH
57644: EMPTY
57645: ST_TO_ADDR
// for i in temp_list do
57646: LD_ADDR_VAR 0 8
57650: PUSH
57651: LD_VAR 0 9
57655: PUSH
57656: FOR_IN
57657: IFFALSE 57709
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57659: LD_ADDR_VAR 0 10
57663: PUSH
57664: LD_VAR 0 10
57668: PUSH
57669: LD_VAR 0 8
57673: PUSH
57674: LD_INT 1
57676: ARRAY
57677: PUSH
57678: LD_VAR 0 2
57682: PLUS
57683: PUSH
57684: LD_VAR 0 8
57688: PUSH
57689: LD_INT 2
57691: ARRAY
57692: PUSH
57693: LD_VAR 0 3
57697: PLUS
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: EMPTY
57704: LIST
57705: ADD
57706: ST_TO_ADDR
57707: GO 57656
57709: POP
57710: POP
// result = temp_list2 ;
57711: LD_ADDR_VAR 0 7
57715: PUSH
57716: LD_VAR 0 10
57720: ST_TO_ADDR
// end ;
57721: LD_VAR 0 7
57725: RET
// export function EnemyInRange ( unit , dist ) ; begin
57726: LD_INT 0
57728: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57729: LD_ADDR_VAR 0 3
57733: PUSH
57734: LD_VAR 0 1
57738: PPUSH
57739: CALL_OW 255
57743: PPUSH
57744: LD_VAR 0 1
57748: PPUSH
57749: CALL_OW 250
57753: PPUSH
57754: LD_VAR 0 1
57758: PPUSH
57759: CALL_OW 251
57763: PPUSH
57764: LD_VAR 0 2
57768: PPUSH
57769: CALL 31830 0 4
57773: PUSH
57774: LD_INT 4
57776: ARRAY
57777: ST_TO_ADDR
// end ;
57778: LD_VAR 0 3
57782: RET
// export function PlayerSeeMe ( unit ) ; begin
57783: LD_INT 0
57785: PPUSH
// result := See ( your_side , unit ) ;
57786: LD_ADDR_VAR 0 2
57790: PUSH
57791: LD_OWVAR 2
57795: PPUSH
57796: LD_VAR 0 1
57800: PPUSH
57801: CALL_OW 292
57805: ST_TO_ADDR
// end ;
57806: LD_VAR 0 2
57810: RET
// export function ReverseDir ( unit ) ; begin
57811: LD_INT 0
57813: PPUSH
// if not unit then
57814: LD_VAR 0 1
57818: NOT
57819: IFFALSE 57823
// exit ;
57821: GO 57846
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57823: LD_ADDR_VAR 0 2
57827: PUSH
57828: LD_VAR 0 1
57832: PPUSH
57833: CALL_OW 254
57837: PUSH
57838: LD_INT 3
57840: PLUS
57841: PUSH
57842: LD_INT 6
57844: MOD
57845: ST_TO_ADDR
// end ;
57846: LD_VAR 0 2
57850: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57851: LD_INT 0
57853: PPUSH
57854: PPUSH
57855: PPUSH
57856: PPUSH
57857: PPUSH
// if not hexes then
57858: LD_VAR 0 2
57862: NOT
57863: IFFALSE 57867
// exit ;
57865: GO 58015
// dist := 9999 ;
57867: LD_ADDR_VAR 0 5
57871: PUSH
57872: LD_INT 9999
57874: ST_TO_ADDR
// for i = 1 to hexes do
57875: LD_ADDR_VAR 0 4
57879: PUSH
57880: DOUBLE
57881: LD_INT 1
57883: DEC
57884: ST_TO_ADDR
57885: LD_VAR 0 2
57889: PUSH
57890: FOR_TO
57891: IFFALSE 58003
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57893: LD_VAR 0 1
57897: PPUSH
57898: LD_VAR 0 2
57902: PUSH
57903: LD_VAR 0 4
57907: ARRAY
57908: PUSH
57909: LD_INT 1
57911: ARRAY
57912: PPUSH
57913: LD_VAR 0 2
57917: PUSH
57918: LD_VAR 0 4
57922: ARRAY
57923: PUSH
57924: LD_INT 2
57926: ARRAY
57927: PPUSH
57928: CALL_OW 297
57932: PUSH
57933: LD_VAR 0 5
57937: LESS
57938: IFFALSE 58001
// begin hex := hexes [ i ] ;
57940: LD_ADDR_VAR 0 7
57944: PUSH
57945: LD_VAR 0 2
57949: PUSH
57950: LD_VAR 0 4
57954: ARRAY
57955: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57956: LD_ADDR_VAR 0 5
57960: PUSH
57961: LD_VAR 0 1
57965: PPUSH
57966: LD_VAR 0 2
57970: PUSH
57971: LD_VAR 0 4
57975: ARRAY
57976: PUSH
57977: LD_INT 1
57979: ARRAY
57980: PPUSH
57981: LD_VAR 0 2
57985: PUSH
57986: LD_VAR 0 4
57990: ARRAY
57991: PUSH
57992: LD_INT 2
57994: ARRAY
57995: PPUSH
57996: CALL_OW 297
58000: ST_TO_ADDR
// end ; end ;
58001: GO 57890
58003: POP
58004: POP
// result := hex ;
58005: LD_ADDR_VAR 0 3
58009: PUSH
58010: LD_VAR 0 7
58014: ST_TO_ADDR
// end ;
58015: LD_VAR 0 3
58019: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58020: LD_INT 0
58022: PPUSH
58023: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58024: LD_VAR 0 1
58028: NOT
58029: PUSH
58030: LD_VAR 0 1
58034: PUSH
58035: LD_INT 21
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 23
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PPUSH
58059: CALL_OW 69
58063: IN
58064: NOT
58065: OR
58066: IFFALSE 58070
// exit ;
58068: GO 58117
// for i = 1 to 3 do
58070: LD_ADDR_VAR 0 3
58074: PUSH
58075: DOUBLE
58076: LD_INT 1
58078: DEC
58079: ST_TO_ADDR
58080: LD_INT 3
58082: PUSH
58083: FOR_TO
58084: IFFALSE 58115
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58086: LD_VAR 0 1
58090: PPUSH
58091: CALL_OW 250
58095: PPUSH
58096: LD_VAR 0 1
58100: PPUSH
58101: CALL_OW 251
58105: PPUSH
58106: LD_INT 1
58108: PPUSH
58109: CALL_OW 453
58113: GO 58083
58115: POP
58116: POP
// end ;
58117: LD_VAR 0 2
58121: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58122: LD_INT 0
58124: PPUSH
58125: PPUSH
58126: PPUSH
58127: PPUSH
58128: PPUSH
58129: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58130: LD_VAR 0 1
58134: NOT
58135: PUSH
58136: LD_VAR 0 2
58140: NOT
58141: OR
58142: PUSH
58143: LD_VAR 0 1
58147: PPUSH
58148: CALL_OW 314
58152: OR
58153: IFFALSE 58157
// exit ;
58155: GO 58598
// x := GetX ( enemy_unit ) ;
58157: LD_ADDR_VAR 0 7
58161: PUSH
58162: LD_VAR 0 2
58166: PPUSH
58167: CALL_OW 250
58171: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58172: LD_ADDR_VAR 0 8
58176: PUSH
58177: LD_VAR 0 2
58181: PPUSH
58182: CALL_OW 251
58186: ST_TO_ADDR
// if not x or not y then
58187: LD_VAR 0 7
58191: NOT
58192: PUSH
58193: LD_VAR 0 8
58197: NOT
58198: OR
58199: IFFALSE 58203
// exit ;
58201: GO 58598
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58203: LD_ADDR_VAR 0 6
58207: PUSH
58208: LD_VAR 0 7
58212: PPUSH
58213: LD_INT 0
58215: PPUSH
58216: LD_INT 4
58218: PPUSH
58219: CALL_OW 272
58223: PUSH
58224: LD_VAR 0 8
58228: PPUSH
58229: LD_INT 0
58231: PPUSH
58232: LD_INT 4
58234: PPUSH
58235: CALL_OW 273
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_VAR 0 7
58248: PPUSH
58249: LD_INT 1
58251: PPUSH
58252: LD_INT 4
58254: PPUSH
58255: CALL_OW 272
58259: PUSH
58260: LD_VAR 0 8
58264: PPUSH
58265: LD_INT 1
58267: PPUSH
58268: LD_INT 4
58270: PPUSH
58271: CALL_OW 273
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_VAR 0 7
58284: PPUSH
58285: LD_INT 2
58287: PPUSH
58288: LD_INT 4
58290: PPUSH
58291: CALL_OW 272
58295: PUSH
58296: LD_VAR 0 8
58300: PPUSH
58301: LD_INT 2
58303: PPUSH
58304: LD_INT 4
58306: PPUSH
58307: CALL_OW 273
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_VAR 0 7
58320: PPUSH
58321: LD_INT 3
58323: PPUSH
58324: LD_INT 4
58326: PPUSH
58327: CALL_OW 272
58331: PUSH
58332: LD_VAR 0 8
58336: PPUSH
58337: LD_INT 3
58339: PPUSH
58340: LD_INT 4
58342: PPUSH
58343: CALL_OW 273
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_VAR 0 7
58356: PPUSH
58357: LD_INT 4
58359: PPUSH
58360: LD_INT 4
58362: PPUSH
58363: CALL_OW 272
58367: PUSH
58368: LD_VAR 0 8
58372: PPUSH
58373: LD_INT 4
58375: PPUSH
58376: LD_INT 4
58378: PPUSH
58379: CALL_OW 273
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_VAR 0 7
58392: PPUSH
58393: LD_INT 5
58395: PPUSH
58396: LD_INT 4
58398: PPUSH
58399: CALL_OW 272
58403: PUSH
58404: LD_VAR 0 8
58408: PPUSH
58409: LD_INT 5
58411: PPUSH
58412: LD_INT 4
58414: PPUSH
58415: CALL_OW 273
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: ST_TO_ADDR
// for i = tmp downto 1 do
58432: LD_ADDR_VAR 0 4
58436: PUSH
58437: DOUBLE
58438: LD_VAR 0 6
58442: INC
58443: ST_TO_ADDR
58444: LD_INT 1
58446: PUSH
58447: FOR_DOWNTO
58448: IFFALSE 58549
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58450: LD_VAR 0 6
58454: PUSH
58455: LD_VAR 0 4
58459: ARRAY
58460: PUSH
58461: LD_INT 1
58463: ARRAY
58464: PPUSH
58465: LD_VAR 0 6
58469: PUSH
58470: LD_VAR 0 4
58474: ARRAY
58475: PUSH
58476: LD_INT 2
58478: ARRAY
58479: PPUSH
58480: CALL_OW 488
58484: NOT
58485: PUSH
58486: LD_VAR 0 6
58490: PUSH
58491: LD_VAR 0 4
58495: ARRAY
58496: PUSH
58497: LD_INT 1
58499: ARRAY
58500: PPUSH
58501: LD_VAR 0 6
58505: PUSH
58506: LD_VAR 0 4
58510: ARRAY
58511: PUSH
58512: LD_INT 2
58514: ARRAY
58515: PPUSH
58516: CALL_OW 428
58520: PUSH
58521: LD_INT 0
58523: NONEQUAL
58524: OR
58525: IFFALSE 58547
// tmp := Delete ( tmp , i ) ;
58527: LD_ADDR_VAR 0 6
58531: PUSH
58532: LD_VAR 0 6
58536: PPUSH
58537: LD_VAR 0 4
58541: PPUSH
58542: CALL_OW 3
58546: ST_TO_ADDR
58547: GO 58447
58549: POP
58550: POP
// j := GetClosestHex ( unit , tmp ) ;
58551: LD_ADDR_VAR 0 5
58555: PUSH
58556: LD_VAR 0 1
58560: PPUSH
58561: LD_VAR 0 6
58565: PPUSH
58566: CALL 57851 0 2
58570: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58571: LD_VAR 0 1
58575: PPUSH
58576: LD_VAR 0 5
58580: PUSH
58581: LD_INT 1
58583: ARRAY
58584: PPUSH
58585: LD_VAR 0 5
58589: PUSH
58590: LD_INT 2
58592: ARRAY
58593: PPUSH
58594: CALL_OW 111
// end ;
58598: LD_VAR 0 3
58602: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58603: LD_INT 0
58605: PPUSH
58606: PPUSH
58607: PPUSH
// uc_side = 0 ;
58608: LD_ADDR_OWVAR 20
58612: PUSH
58613: LD_INT 0
58615: ST_TO_ADDR
// uc_nation = 0 ;
58616: LD_ADDR_OWVAR 21
58620: PUSH
58621: LD_INT 0
58623: ST_TO_ADDR
// InitHc ;
58624: CALL_OW 19
// InitVc ;
58628: CALL_OW 20
// if mastodonts then
58632: LD_VAR 0 6
58636: IFFALSE 58703
// for i = 1 to mastodonts do
58638: LD_ADDR_VAR 0 11
58642: PUSH
58643: DOUBLE
58644: LD_INT 1
58646: DEC
58647: ST_TO_ADDR
58648: LD_VAR 0 6
58652: PUSH
58653: FOR_TO
58654: IFFALSE 58701
// begin vc_chassis := 31 ;
58656: LD_ADDR_OWVAR 37
58660: PUSH
58661: LD_INT 31
58663: ST_TO_ADDR
// vc_control := control_rider ;
58664: LD_ADDR_OWVAR 38
58668: PUSH
58669: LD_INT 4
58671: ST_TO_ADDR
// animal := CreateVehicle ;
58672: LD_ADDR_VAR 0 12
58676: PUSH
58677: CALL_OW 45
58681: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58682: LD_VAR 0 12
58686: PPUSH
58687: LD_VAR 0 8
58691: PPUSH
58692: LD_INT 0
58694: PPUSH
58695: CALL 60772 0 3
// end ;
58699: GO 58653
58701: POP
58702: POP
// if horses then
58703: LD_VAR 0 5
58707: IFFALSE 58774
// for i = 1 to horses do
58709: LD_ADDR_VAR 0 11
58713: PUSH
58714: DOUBLE
58715: LD_INT 1
58717: DEC
58718: ST_TO_ADDR
58719: LD_VAR 0 5
58723: PUSH
58724: FOR_TO
58725: IFFALSE 58772
// begin hc_class := 21 ;
58727: LD_ADDR_OWVAR 28
58731: PUSH
58732: LD_INT 21
58734: ST_TO_ADDR
// hc_gallery :=  ;
58735: LD_ADDR_OWVAR 33
58739: PUSH
58740: LD_STRING 
58742: ST_TO_ADDR
// animal := CreateHuman ;
58743: LD_ADDR_VAR 0 12
58747: PUSH
58748: CALL_OW 44
58752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58753: LD_VAR 0 12
58757: PPUSH
58758: LD_VAR 0 8
58762: PPUSH
58763: LD_INT 0
58765: PPUSH
58766: CALL 60772 0 3
// end ;
58770: GO 58724
58772: POP
58773: POP
// if birds then
58774: LD_VAR 0 1
58778: IFFALSE 58845
// for i = 1 to birds do
58780: LD_ADDR_VAR 0 11
58784: PUSH
58785: DOUBLE
58786: LD_INT 1
58788: DEC
58789: ST_TO_ADDR
58790: LD_VAR 0 1
58794: PUSH
58795: FOR_TO
58796: IFFALSE 58843
// begin hc_class = 18 ;
58798: LD_ADDR_OWVAR 28
58802: PUSH
58803: LD_INT 18
58805: ST_TO_ADDR
// hc_gallery =  ;
58806: LD_ADDR_OWVAR 33
58810: PUSH
58811: LD_STRING 
58813: ST_TO_ADDR
// animal := CreateHuman ;
58814: LD_ADDR_VAR 0 12
58818: PUSH
58819: CALL_OW 44
58823: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58824: LD_VAR 0 12
58828: PPUSH
58829: LD_VAR 0 8
58833: PPUSH
58834: LD_INT 0
58836: PPUSH
58837: CALL 60772 0 3
// end ;
58841: GO 58795
58843: POP
58844: POP
// if tigers then
58845: LD_VAR 0 2
58849: IFFALSE 58933
// for i = 1 to tigers do
58851: LD_ADDR_VAR 0 11
58855: PUSH
58856: DOUBLE
58857: LD_INT 1
58859: DEC
58860: ST_TO_ADDR
58861: LD_VAR 0 2
58865: PUSH
58866: FOR_TO
58867: IFFALSE 58931
// begin hc_class = class_tiger ;
58869: LD_ADDR_OWVAR 28
58873: PUSH
58874: LD_INT 14
58876: ST_TO_ADDR
// hc_gallery =  ;
58877: LD_ADDR_OWVAR 33
58881: PUSH
58882: LD_STRING 
58884: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58885: LD_ADDR_OWVAR 35
58889: PUSH
58890: LD_INT 7
58892: NEG
58893: PPUSH
58894: LD_INT 7
58896: PPUSH
58897: CALL_OW 12
58901: ST_TO_ADDR
// animal := CreateHuman ;
58902: LD_ADDR_VAR 0 12
58906: PUSH
58907: CALL_OW 44
58911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58912: LD_VAR 0 12
58916: PPUSH
58917: LD_VAR 0 8
58921: PPUSH
58922: LD_INT 0
58924: PPUSH
58925: CALL 60772 0 3
// end ;
58929: GO 58866
58931: POP
58932: POP
// if apemans then
58933: LD_VAR 0 3
58937: IFFALSE 59060
// for i = 1 to apemans do
58939: LD_ADDR_VAR 0 11
58943: PUSH
58944: DOUBLE
58945: LD_INT 1
58947: DEC
58948: ST_TO_ADDR
58949: LD_VAR 0 3
58953: PUSH
58954: FOR_TO
58955: IFFALSE 59058
// begin hc_class = class_apeman ;
58957: LD_ADDR_OWVAR 28
58961: PUSH
58962: LD_INT 12
58964: ST_TO_ADDR
// hc_gallery =  ;
58965: LD_ADDR_OWVAR 33
58969: PUSH
58970: LD_STRING 
58972: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
58973: LD_ADDR_OWVAR 35
58977: PUSH
58978: LD_INT 5
58980: NEG
58981: PPUSH
58982: LD_INT 5
58984: PPUSH
58985: CALL_OW 12
58989: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58990: LD_ADDR_OWVAR 31
58994: PUSH
58995: LD_INT 1
58997: PPUSH
58998: LD_INT 3
59000: PPUSH
59001: CALL_OW 12
59005: PUSH
59006: LD_INT 1
59008: PPUSH
59009: LD_INT 3
59011: PPUSH
59012: CALL_OW 12
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: ST_TO_ADDR
// animal := CreateHuman ;
59029: LD_ADDR_VAR 0 12
59033: PUSH
59034: CALL_OW 44
59038: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59039: LD_VAR 0 12
59043: PPUSH
59044: LD_VAR 0 8
59048: PPUSH
59049: LD_INT 0
59051: PPUSH
59052: CALL 60772 0 3
// end ;
59056: GO 58954
59058: POP
59059: POP
// if enchidnas then
59060: LD_VAR 0 4
59064: IFFALSE 59131
// for i = 1 to enchidnas do
59066: LD_ADDR_VAR 0 11
59070: PUSH
59071: DOUBLE
59072: LD_INT 1
59074: DEC
59075: ST_TO_ADDR
59076: LD_VAR 0 4
59080: PUSH
59081: FOR_TO
59082: IFFALSE 59129
// begin hc_class = 13 ;
59084: LD_ADDR_OWVAR 28
59088: PUSH
59089: LD_INT 13
59091: ST_TO_ADDR
// hc_gallery =  ;
59092: LD_ADDR_OWVAR 33
59096: PUSH
59097: LD_STRING 
59099: ST_TO_ADDR
// animal := CreateHuman ;
59100: LD_ADDR_VAR 0 12
59104: PUSH
59105: CALL_OW 44
59109: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59110: LD_VAR 0 12
59114: PPUSH
59115: LD_VAR 0 8
59119: PPUSH
59120: LD_INT 0
59122: PPUSH
59123: CALL 60772 0 3
// end ;
59127: GO 59081
59129: POP
59130: POP
// if fishes then
59131: LD_VAR 0 7
59135: IFFALSE 59202
// for i = 1 to fishes do
59137: LD_ADDR_VAR 0 11
59141: PUSH
59142: DOUBLE
59143: LD_INT 1
59145: DEC
59146: ST_TO_ADDR
59147: LD_VAR 0 7
59151: PUSH
59152: FOR_TO
59153: IFFALSE 59200
// begin hc_class = 20 ;
59155: LD_ADDR_OWVAR 28
59159: PUSH
59160: LD_INT 20
59162: ST_TO_ADDR
// hc_gallery =  ;
59163: LD_ADDR_OWVAR 33
59167: PUSH
59168: LD_STRING 
59170: ST_TO_ADDR
// animal := CreateHuman ;
59171: LD_ADDR_VAR 0 12
59175: PUSH
59176: CALL_OW 44
59180: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59181: LD_VAR 0 12
59185: PPUSH
59186: LD_VAR 0 9
59190: PPUSH
59191: LD_INT 0
59193: PPUSH
59194: CALL 60772 0 3
// end ;
59198: GO 59152
59200: POP
59201: POP
// end ;
59202: LD_VAR 0 10
59206: RET
// export function WantHeal ( sci , unit ) ; begin
59207: LD_INT 0
59209: PPUSH
// if GetTaskList ( sci ) > 0 then
59210: LD_VAR 0 1
59214: PPUSH
59215: CALL_OW 437
59219: PUSH
59220: LD_INT 0
59222: GREATER
59223: IFFALSE 59293
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59225: LD_VAR 0 1
59229: PPUSH
59230: CALL_OW 437
59234: PUSH
59235: LD_INT 1
59237: ARRAY
59238: PUSH
59239: LD_INT 1
59241: ARRAY
59242: PUSH
59243: LD_STRING l
59245: EQUAL
59246: PUSH
59247: LD_VAR 0 1
59251: PPUSH
59252: CALL_OW 437
59256: PUSH
59257: LD_INT 1
59259: ARRAY
59260: PUSH
59261: LD_INT 4
59263: ARRAY
59264: PUSH
59265: LD_VAR 0 2
59269: EQUAL
59270: AND
59271: IFFALSE 59283
// result := true else
59273: LD_ADDR_VAR 0 3
59277: PUSH
59278: LD_INT 1
59280: ST_TO_ADDR
59281: GO 59291
// result := false ;
59283: LD_ADDR_VAR 0 3
59287: PUSH
59288: LD_INT 0
59290: ST_TO_ADDR
// end else
59291: GO 59301
// result := false ;
59293: LD_ADDR_VAR 0 3
59297: PUSH
59298: LD_INT 0
59300: ST_TO_ADDR
// end ;
59301: LD_VAR 0 3
59305: RET
// export function HealTarget ( sci ) ; begin
59306: LD_INT 0
59308: PPUSH
// if not sci then
59309: LD_VAR 0 1
59313: NOT
59314: IFFALSE 59318
// exit ;
59316: GO 59383
// result := 0 ;
59318: LD_ADDR_VAR 0 2
59322: PUSH
59323: LD_INT 0
59325: ST_TO_ADDR
// if GetTaskList ( sci ) then
59326: LD_VAR 0 1
59330: PPUSH
59331: CALL_OW 437
59335: IFFALSE 59383
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59337: LD_VAR 0 1
59341: PPUSH
59342: CALL_OW 437
59346: PUSH
59347: LD_INT 1
59349: ARRAY
59350: PUSH
59351: LD_INT 1
59353: ARRAY
59354: PUSH
59355: LD_STRING l
59357: EQUAL
59358: IFFALSE 59383
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59360: LD_ADDR_VAR 0 2
59364: PUSH
59365: LD_VAR 0 1
59369: PPUSH
59370: CALL_OW 437
59374: PUSH
59375: LD_INT 1
59377: ARRAY
59378: PUSH
59379: LD_INT 4
59381: ARRAY
59382: ST_TO_ADDR
// end ;
59383: LD_VAR 0 2
59387: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59388: LD_INT 0
59390: PPUSH
59391: PPUSH
59392: PPUSH
59393: PPUSH
// if not base_units then
59394: LD_VAR 0 1
59398: NOT
59399: IFFALSE 59403
// exit ;
59401: GO 59490
// result := false ;
59403: LD_ADDR_VAR 0 2
59407: PUSH
59408: LD_INT 0
59410: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59411: LD_ADDR_VAR 0 5
59415: PUSH
59416: LD_VAR 0 1
59420: PPUSH
59421: LD_INT 21
59423: PUSH
59424: LD_INT 3
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PPUSH
59431: CALL_OW 72
59435: ST_TO_ADDR
// if not tmp then
59436: LD_VAR 0 5
59440: NOT
59441: IFFALSE 59445
// exit ;
59443: GO 59490
// for i in tmp do
59445: LD_ADDR_VAR 0 3
59449: PUSH
59450: LD_VAR 0 5
59454: PUSH
59455: FOR_IN
59456: IFFALSE 59488
// begin result := EnemyInRange ( i , 22 ) ;
59458: LD_ADDR_VAR 0 2
59462: PUSH
59463: LD_VAR 0 3
59467: PPUSH
59468: LD_INT 22
59470: PPUSH
59471: CALL 57726 0 2
59475: ST_TO_ADDR
// if result then
59476: LD_VAR 0 2
59480: IFFALSE 59486
// exit ;
59482: POP
59483: POP
59484: GO 59490
// end ;
59486: GO 59455
59488: POP
59489: POP
// end ;
59490: LD_VAR 0 2
59494: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59495: LD_INT 0
59497: PPUSH
59498: PPUSH
// if not units then
59499: LD_VAR 0 1
59503: NOT
59504: IFFALSE 59508
// exit ;
59506: GO 59578
// result := [ ] ;
59508: LD_ADDR_VAR 0 3
59512: PUSH
59513: EMPTY
59514: ST_TO_ADDR
// for i in units do
59515: LD_ADDR_VAR 0 4
59519: PUSH
59520: LD_VAR 0 1
59524: PUSH
59525: FOR_IN
59526: IFFALSE 59576
// if GetTag ( i ) = tag then
59528: LD_VAR 0 4
59532: PPUSH
59533: CALL_OW 110
59537: PUSH
59538: LD_VAR 0 2
59542: EQUAL
59543: IFFALSE 59574
// result := Insert ( result , result + 1 , i ) ;
59545: LD_ADDR_VAR 0 3
59549: PUSH
59550: LD_VAR 0 3
59554: PPUSH
59555: LD_VAR 0 3
59559: PUSH
59560: LD_INT 1
59562: PLUS
59563: PPUSH
59564: LD_VAR 0 4
59568: PPUSH
59569: CALL_OW 2
59573: ST_TO_ADDR
59574: GO 59525
59576: POP
59577: POP
// end ;
59578: LD_VAR 0 3
59582: RET
// export function IsDriver ( un ) ; begin
59583: LD_INT 0
59585: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59586: LD_ADDR_VAR 0 2
59590: PUSH
59591: LD_VAR 0 1
59595: PUSH
59596: LD_INT 55
59598: PUSH
59599: EMPTY
59600: LIST
59601: PPUSH
59602: CALL_OW 69
59606: IN
59607: ST_TO_ADDR
// end ;
59608: LD_VAR 0 2
59612: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59613: LD_INT 0
59615: PPUSH
59616: PPUSH
// list := [ ] ;
59617: LD_ADDR_VAR 0 5
59621: PUSH
59622: EMPTY
59623: ST_TO_ADDR
// case d of 0 :
59624: LD_VAR 0 3
59628: PUSH
59629: LD_INT 0
59631: DOUBLE
59632: EQUAL
59633: IFTRUE 59637
59635: GO 59770
59637: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59638: LD_ADDR_VAR 0 5
59642: PUSH
59643: LD_VAR 0 1
59647: PUSH
59648: LD_INT 4
59650: MINUS
59651: PUSH
59652: LD_VAR 0 2
59656: PUSH
59657: LD_INT 4
59659: MINUS
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: LIST
59668: PUSH
59669: LD_VAR 0 1
59673: PUSH
59674: LD_INT 3
59676: MINUS
59677: PUSH
59678: LD_VAR 0 2
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: LIST
59690: PUSH
59691: LD_VAR 0 1
59695: PUSH
59696: LD_INT 4
59698: PLUS
59699: PUSH
59700: LD_VAR 0 2
59704: PUSH
59705: LD_INT 4
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: PUSH
59713: LD_VAR 0 1
59717: PUSH
59718: LD_INT 3
59720: PLUS
59721: PUSH
59722: LD_VAR 0 2
59726: PUSH
59727: LD_INT 3
59729: PLUS
59730: PUSH
59731: LD_INT 5
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: LIST
59738: PUSH
59739: LD_VAR 0 1
59743: PUSH
59744: LD_VAR 0 2
59748: PUSH
59749: LD_INT 4
59751: PLUS
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: ST_TO_ADDR
// end ; 1 :
59768: GO 60468
59770: LD_INT 1
59772: DOUBLE
59773: EQUAL
59774: IFTRUE 59778
59776: GO 59911
59778: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59779: LD_ADDR_VAR 0 5
59783: PUSH
59784: LD_VAR 0 1
59788: PUSH
59789: LD_VAR 0 2
59793: PUSH
59794: LD_INT 4
59796: MINUS
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: PUSH
59806: LD_VAR 0 1
59810: PUSH
59811: LD_INT 3
59813: MINUS
59814: PUSH
59815: LD_VAR 0 2
59819: PUSH
59820: LD_INT 3
59822: MINUS
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: PUSH
59832: LD_VAR 0 1
59836: PUSH
59837: LD_INT 4
59839: MINUS
59840: PUSH
59841: LD_VAR 0 2
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: PUSH
59854: LD_VAR 0 1
59858: PUSH
59859: LD_VAR 0 2
59863: PUSH
59864: LD_INT 3
59866: PLUS
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: PUSH
59876: LD_VAR 0 1
59880: PUSH
59881: LD_INT 4
59883: PLUS
59884: PUSH
59885: LD_VAR 0 2
59889: PUSH
59890: LD_INT 4
59892: PLUS
59893: PUSH
59894: LD_INT 5
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: LIST
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: ST_TO_ADDR
// end ; 2 :
59909: GO 60468
59911: LD_INT 2
59913: DOUBLE
59914: EQUAL
59915: IFTRUE 59919
59917: GO 60048
59919: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59920: LD_ADDR_VAR 0 5
59924: PUSH
59925: LD_VAR 0 1
59929: PUSH
59930: LD_VAR 0 2
59934: PUSH
59935: LD_INT 3
59937: MINUS
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: PUSH
59947: LD_VAR 0 1
59951: PUSH
59952: LD_INT 4
59954: PLUS
59955: PUSH
59956: LD_VAR 0 2
59960: PUSH
59961: LD_INT 4
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: LIST
59968: PUSH
59969: LD_VAR 0 1
59973: PUSH
59974: LD_VAR 0 2
59978: PUSH
59979: LD_INT 4
59981: PLUS
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: LIST
59990: PUSH
59991: LD_VAR 0 1
59995: PUSH
59996: LD_INT 3
59998: MINUS
59999: PUSH
60000: LD_VAR 0 2
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: LIST
60012: PUSH
60013: LD_VAR 0 1
60017: PUSH
60018: LD_INT 4
60020: MINUS
60021: PUSH
60022: LD_VAR 0 2
60026: PUSH
60027: LD_INT 4
60029: MINUS
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: ST_TO_ADDR
// end ; 3 :
60046: GO 60468
60048: LD_INT 3
60050: DOUBLE
60051: EQUAL
60052: IFTRUE 60056
60054: GO 60189
60056: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60057: LD_ADDR_VAR 0 5
60061: PUSH
60062: LD_VAR 0 1
60066: PUSH
60067: LD_INT 3
60069: PLUS
60070: PUSH
60071: LD_VAR 0 2
60075: PUSH
60076: LD_INT 4
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: PUSH
60084: LD_VAR 0 1
60088: PUSH
60089: LD_INT 4
60091: PLUS
60092: PUSH
60093: LD_VAR 0 2
60097: PUSH
60098: LD_INT 4
60100: PLUS
60101: PUSH
60102: LD_INT 5
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: LIST
60109: PUSH
60110: LD_VAR 0 1
60114: PUSH
60115: LD_INT 4
60117: MINUS
60118: PUSH
60119: LD_VAR 0 2
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: LIST
60131: PUSH
60132: LD_VAR 0 1
60136: PUSH
60137: LD_VAR 0 2
60141: PUSH
60142: LD_INT 4
60144: MINUS
60145: PUSH
60146: LD_INT 3
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: PUSH
60154: LD_VAR 0 1
60158: PUSH
60159: LD_INT 3
60161: MINUS
60162: PUSH
60163: LD_VAR 0 2
60167: PUSH
60168: LD_INT 3
60170: MINUS
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: ST_TO_ADDR
// end ; 4 :
60187: GO 60468
60189: LD_INT 4
60191: DOUBLE
60192: EQUAL
60193: IFTRUE 60197
60195: GO 60330
60197: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60198: LD_ADDR_VAR 0 5
60202: PUSH
60203: LD_VAR 0 1
60207: PUSH
60208: LD_VAR 0 2
60212: PUSH
60213: LD_INT 4
60215: PLUS
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: LIST
60224: PUSH
60225: LD_VAR 0 1
60229: PUSH
60230: LD_INT 3
60232: PLUS
60233: PUSH
60234: LD_VAR 0 2
60238: PUSH
60239: LD_INT 3
60241: PLUS
60242: PUSH
60243: LD_INT 5
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: PUSH
60251: LD_VAR 0 1
60255: PUSH
60256: LD_INT 4
60258: PLUS
60259: PUSH
60260: LD_VAR 0 2
60264: PUSH
60265: LD_INT 4
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: PUSH
60273: LD_VAR 0 1
60277: PUSH
60278: LD_VAR 0 2
60282: PUSH
60283: LD_INT 3
60285: MINUS
60286: PUSH
60287: LD_INT 3
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: LIST
60294: PUSH
60295: LD_VAR 0 1
60299: PUSH
60300: LD_INT 4
60302: MINUS
60303: PUSH
60304: LD_VAR 0 2
60308: PUSH
60309: LD_INT 4
60311: MINUS
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: ST_TO_ADDR
// end ; 5 :
60328: GO 60468
60330: LD_INT 5
60332: DOUBLE
60333: EQUAL
60334: IFTRUE 60338
60336: GO 60467
60338: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60339: LD_ADDR_VAR 0 5
60343: PUSH
60344: LD_VAR 0 1
60348: PUSH
60349: LD_INT 4
60351: MINUS
60352: PUSH
60353: LD_VAR 0 2
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: PUSH
60366: LD_VAR 0 1
60370: PUSH
60371: LD_VAR 0 2
60375: PUSH
60376: LD_INT 4
60378: MINUS
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: PUSH
60388: LD_VAR 0 1
60392: PUSH
60393: LD_INT 4
60395: PLUS
60396: PUSH
60397: LD_VAR 0 2
60401: PUSH
60402: LD_INT 4
60404: PLUS
60405: PUSH
60406: LD_INT 5
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: LIST
60413: PUSH
60414: LD_VAR 0 1
60418: PUSH
60419: LD_INT 3
60421: PLUS
60422: PUSH
60423: LD_VAR 0 2
60427: PUSH
60428: LD_INT 4
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: PUSH
60436: LD_VAR 0 1
60440: PUSH
60441: LD_VAR 0 2
60445: PUSH
60446: LD_INT 3
60448: PLUS
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: LIST
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: ST_TO_ADDR
// end ; end ;
60465: GO 60468
60467: POP
// result := list ;
60468: LD_ADDR_VAR 0 4
60472: PUSH
60473: LD_VAR 0 5
60477: ST_TO_ADDR
// end ;
60478: LD_VAR 0 4
60482: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60483: LD_INT 0
60485: PPUSH
60486: PPUSH
60487: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60488: LD_VAR 0 1
60492: NOT
60493: PUSH
60494: LD_VAR 0 2
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: LD_INT 3
60507: PUSH
60508: LD_INT 4
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: IN
60517: NOT
60518: OR
60519: IFFALSE 60523
// exit ;
60521: GO 60615
// tmp := [ ] ;
60523: LD_ADDR_VAR 0 5
60527: PUSH
60528: EMPTY
60529: ST_TO_ADDR
// for i in units do
60530: LD_ADDR_VAR 0 4
60534: PUSH
60535: LD_VAR 0 1
60539: PUSH
60540: FOR_IN
60541: IFFALSE 60584
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60543: LD_ADDR_VAR 0 5
60547: PUSH
60548: LD_VAR 0 5
60552: PPUSH
60553: LD_VAR 0 5
60557: PUSH
60558: LD_INT 1
60560: PLUS
60561: PPUSH
60562: LD_VAR 0 4
60566: PPUSH
60567: LD_VAR 0 2
60571: PPUSH
60572: CALL_OW 259
60576: PPUSH
60577: CALL_OW 2
60581: ST_TO_ADDR
60582: GO 60540
60584: POP
60585: POP
// if not tmp then
60586: LD_VAR 0 5
60590: NOT
60591: IFFALSE 60595
// exit ;
60593: GO 60615
// result := SortListByListDesc ( units , tmp ) ;
60595: LD_ADDR_VAR 0 3
60599: PUSH
60600: LD_VAR 0 1
60604: PPUSH
60605: LD_VAR 0 5
60609: PPUSH
60610: CALL_OW 77
60614: ST_TO_ADDR
// end ;
60615: LD_VAR 0 3
60619: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60620: LD_INT 0
60622: PPUSH
60623: PPUSH
60624: PPUSH
// x := GetX ( building ) ;
60625: LD_ADDR_VAR 0 4
60629: PUSH
60630: LD_VAR 0 2
60634: PPUSH
60635: CALL_OW 250
60639: ST_TO_ADDR
// y := GetY ( building ) ;
60640: LD_ADDR_VAR 0 5
60644: PUSH
60645: LD_VAR 0 2
60649: PPUSH
60650: CALL_OW 251
60654: ST_TO_ADDR
// if GetTaskList ( unit ) then
60655: LD_VAR 0 1
60659: PPUSH
60660: CALL_OW 437
60664: IFFALSE 60759
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60666: LD_STRING e
60668: PUSH
60669: LD_VAR 0 1
60673: PPUSH
60674: CALL_OW 437
60678: PUSH
60679: LD_INT 1
60681: ARRAY
60682: PUSH
60683: LD_INT 1
60685: ARRAY
60686: EQUAL
60687: PUSH
60688: LD_VAR 0 4
60692: PUSH
60693: LD_VAR 0 1
60697: PPUSH
60698: CALL_OW 437
60702: PUSH
60703: LD_INT 1
60705: ARRAY
60706: PUSH
60707: LD_INT 2
60709: ARRAY
60710: EQUAL
60711: AND
60712: PUSH
60713: LD_VAR 0 5
60717: PUSH
60718: LD_VAR 0 1
60722: PPUSH
60723: CALL_OW 437
60727: PUSH
60728: LD_INT 1
60730: ARRAY
60731: PUSH
60732: LD_INT 3
60734: ARRAY
60735: EQUAL
60736: AND
60737: IFFALSE 60749
// result := true else
60739: LD_ADDR_VAR 0 3
60743: PUSH
60744: LD_INT 1
60746: ST_TO_ADDR
60747: GO 60757
// result := false ;
60749: LD_ADDR_VAR 0 3
60753: PUSH
60754: LD_INT 0
60756: ST_TO_ADDR
// end else
60757: GO 60767
// result := false ;
60759: LD_ADDR_VAR 0 3
60763: PUSH
60764: LD_INT 0
60766: ST_TO_ADDR
// end ;
60767: LD_VAR 0 3
60771: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60772: LD_INT 0
60774: PPUSH
60775: PPUSH
60776: PPUSH
60777: PPUSH
// if not unit or not area then
60778: LD_VAR 0 1
60782: NOT
60783: PUSH
60784: LD_VAR 0 2
60788: NOT
60789: OR
60790: IFFALSE 60794
// exit ;
60792: GO 60958
// tmp := AreaToList ( area , i ) ;
60794: LD_ADDR_VAR 0 6
60798: PUSH
60799: LD_VAR 0 2
60803: PPUSH
60804: LD_VAR 0 5
60808: PPUSH
60809: CALL_OW 517
60813: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60814: LD_ADDR_VAR 0 5
60818: PUSH
60819: DOUBLE
60820: LD_INT 1
60822: DEC
60823: ST_TO_ADDR
60824: LD_VAR 0 6
60828: PUSH
60829: LD_INT 1
60831: ARRAY
60832: PUSH
60833: FOR_TO
60834: IFFALSE 60956
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60836: LD_ADDR_VAR 0 7
60840: PUSH
60841: LD_VAR 0 6
60845: PUSH
60846: LD_INT 1
60848: ARRAY
60849: PUSH
60850: LD_VAR 0 5
60854: ARRAY
60855: PUSH
60856: LD_VAR 0 6
60860: PUSH
60861: LD_INT 2
60863: ARRAY
60864: PUSH
60865: LD_VAR 0 5
60869: ARRAY
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60875: LD_VAR 0 7
60879: PUSH
60880: LD_INT 1
60882: ARRAY
60883: PPUSH
60884: LD_VAR 0 7
60888: PUSH
60889: LD_INT 2
60891: ARRAY
60892: PPUSH
60893: CALL_OW 428
60897: PUSH
60898: LD_INT 0
60900: EQUAL
60901: IFFALSE 60954
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60903: LD_VAR 0 1
60907: PPUSH
60908: LD_VAR 0 7
60912: PUSH
60913: LD_INT 1
60915: ARRAY
60916: PPUSH
60917: LD_VAR 0 7
60921: PUSH
60922: LD_INT 2
60924: ARRAY
60925: PPUSH
60926: LD_VAR 0 3
60930: PPUSH
60931: CALL_OW 48
// result := IsPlaced ( unit ) ;
60935: LD_ADDR_VAR 0 4
60939: PUSH
60940: LD_VAR 0 1
60944: PPUSH
60945: CALL_OW 305
60949: ST_TO_ADDR
// exit ;
60950: POP
60951: POP
60952: GO 60958
// end ; end ;
60954: GO 60833
60956: POP
60957: POP
// end ;
60958: LD_VAR 0 4
60962: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60963: LD_INT 0
60965: PPUSH
60966: PPUSH
60967: PPUSH
// if not side or side > 8 then
60968: LD_VAR 0 1
60972: NOT
60973: PUSH
60974: LD_VAR 0 1
60978: PUSH
60979: LD_INT 8
60981: GREATER
60982: OR
60983: IFFALSE 60987
// exit ;
60985: GO 61174
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60987: LD_ADDR_VAR 0 4
60991: PUSH
60992: LD_INT 22
60994: PUSH
60995: LD_VAR 0 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 21
61006: PUSH
61007: LD_INT 3
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PPUSH
61018: CALL_OW 69
61022: ST_TO_ADDR
// if not tmp then
61023: LD_VAR 0 4
61027: NOT
61028: IFFALSE 61032
// exit ;
61030: GO 61174
// enable_addtolog := true ;
61032: LD_ADDR_OWVAR 81
61036: PUSH
61037: LD_INT 1
61039: ST_TO_ADDR
// AddToLog ( [ ) ;
61040: LD_STRING [
61042: PPUSH
61043: CALL_OW 561
// for i in tmp do
61047: LD_ADDR_VAR 0 3
61051: PUSH
61052: LD_VAR 0 4
61056: PUSH
61057: FOR_IN
61058: IFFALSE 61165
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61060: LD_STRING [
61062: PUSH
61063: LD_VAR 0 3
61067: PPUSH
61068: CALL_OW 266
61072: STR
61073: PUSH
61074: LD_STRING , 
61076: STR
61077: PUSH
61078: LD_VAR 0 3
61082: PPUSH
61083: CALL_OW 250
61087: STR
61088: PUSH
61089: LD_STRING , 
61091: STR
61092: PUSH
61093: LD_VAR 0 3
61097: PPUSH
61098: CALL_OW 251
61102: STR
61103: PUSH
61104: LD_STRING , 
61106: STR
61107: PUSH
61108: LD_VAR 0 3
61112: PPUSH
61113: CALL_OW 254
61117: STR
61118: PUSH
61119: LD_STRING , 
61121: STR
61122: PUSH
61123: LD_VAR 0 3
61127: PPUSH
61128: LD_INT 1
61130: PPUSH
61131: CALL_OW 268
61135: STR
61136: PUSH
61137: LD_STRING , 
61139: STR
61140: PUSH
61141: LD_VAR 0 3
61145: PPUSH
61146: LD_INT 2
61148: PPUSH
61149: CALL_OW 268
61153: STR
61154: PUSH
61155: LD_STRING ],
61157: STR
61158: PPUSH
61159: CALL_OW 561
// end ;
61163: GO 61057
61165: POP
61166: POP
// AddToLog ( ]; ) ;
61167: LD_STRING ];
61169: PPUSH
61170: CALL_OW 561
// end ;
61174: LD_VAR 0 2
61178: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61179: LD_INT 0
61181: PPUSH
61182: PPUSH
61183: PPUSH
61184: PPUSH
61185: PPUSH
// if not area or not rate or not max then
61186: LD_VAR 0 1
61190: NOT
61191: PUSH
61192: LD_VAR 0 2
61196: NOT
61197: OR
61198: PUSH
61199: LD_VAR 0 4
61203: NOT
61204: OR
61205: IFFALSE 61209
// exit ;
61207: GO 61401
// while 1 do
61209: LD_INT 1
61211: IFFALSE 61401
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61213: LD_ADDR_VAR 0 9
61217: PUSH
61218: LD_VAR 0 1
61222: PPUSH
61223: LD_INT 1
61225: PPUSH
61226: CALL_OW 287
61230: PUSH
61231: LD_INT 10
61233: MUL
61234: ST_TO_ADDR
// r := rate / 10 ;
61235: LD_ADDR_VAR 0 7
61239: PUSH
61240: LD_VAR 0 2
61244: PUSH
61245: LD_INT 10
61247: DIVREAL
61248: ST_TO_ADDR
// time := 1 1$00 ;
61249: LD_ADDR_VAR 0 8
61253: PUSH
61254: LD_INT 2100
61256: ST_TO_ADDR
// if amount < min then
61257: LD_VAR 0 9
61261: PUSH
61262: LD_VAR 0 3
61266: LESS
61267: IFFALSE 61285
// r := r * 2 else
61269: LD_ADDR_VAR 0 7
61273: PUSH
61274: LD_VAR 0 7
61278: PUSH
61279: LD_INT 2
61281: MUL
61282: ST_TO_ADDR
61283: GO 61311
// if amount > max then
61285: LD_VAR 0 9
61289: PUSH
61290: LD_VAR 0 4
61294: GREATER
61295: IFFALSE 61311
// r := r / 2 ;
61297: LD_ADDR_VAR 0 7
61301: PUSH
61302: LD_VAR 0 7
61306: PUSH
61307: LD_INT 2
61309: DIVREAL
61310: ST_TO_ADDR
// time := time / r ;
61311: LD_ADDR_VAR 0 8
61315: PUSH
61316: LD_VAR 0 8
61320: PUSH
61321: LD_VAR 0 7
61325: DIVREAL
61326: ST_TO_ADDR
// if time < 0 then
61327: LD_VAR 0 8
61331: PUSH
61332: LD_INT 0
61334: LESS
61335: IFFALSE 61352
// time := time * - 1 ;
61337: LD_ADDR_VAR 0 8
61341: PUSH
61342: LD_VAR 0 8
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: MUL
61351: ST_TO_ADDR
// wait ( time ) ;
61352: LD_VAR 0 8
61356: PPUSH
61357: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61361: LD_INT 35
61363: PPUSH
61364: LD_INT 875
61366: PPUSH
61367: CALL_OW 12
61371: PPUSH
61372: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61376: LD_INT 1
61378: PPUSH
61379: LD_INT 5
61381: PPUSH
61382: CALL_OW 12
61386: PPUSH
61387: LD_VAR 0 1
61391: PPUSH
61392: LD_INT 1
61394: PPUSH
61395: CALL_OW 55
// end ;
61399: GO 61209
// end ;
61401: LD_VAR 0 5
61405: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61406: LD_INT 0
61408: PPUSH
61409: PPUSH
61410: PPUSH
61411: PPUSH
61412: PPUSH
61413: PPUSH
61414: PPUSH
61415: PPUSH
// if not turrets or not factories then
61416: LD_VAR 0 1
61420: NOT
61421: PUSH
61422: LD_VAR 0 2
61426: NOT
61427: OR
61428: IFFALSE 61432
// exit ;
61430: GO 61739
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61432: LD_ADDR_VAR 0 10
61436: PUSH
61437: LD_INT 5
61439: PUSH
61440: LD_INT 6
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: PUSH
61450: LD_INT 4
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: LD_INT 5
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 24
61474: PUSH
61475: LD_INT 25
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 23
61484: PUSH
61485: LD_INT 27
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 42
61498: PUSH
61499: LD_INT 43
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 44
61508: PUSH
61509: LD_INT 46
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 45
61518: PUSH
61519: LD_INT 47
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: ST_TO_ADDR
// result := [ ] ;
61536: LD_ADDR_VAR 0 3
61540: PUSH
61541: EMPTY
61542: ST_TO_ADDR
// for i in turrets do
61543: LD_ADDR_VAR 0 4
61547: PUSH
61548: LD_VAR 0 1
61552: PUSH
61553: FOR_IN
61554: IFFALSE 61737
// begin nat := GetNation ( i ) ;
61556: LD_ADDR_VAR 0 7
61560: PUSH
61561: LD_VAR 0 4
61565: PPUSH
61566: CALL_OW 248
61570: ST_TO_ADDR
// weapon := 0 ;
61571: LD_ADDR_VAR 0 8
61575: PUSH
61576: LD_INT 0
61578: ST_TO_ADDR
// if not nat then
61579: LD_VAR 0 7
61583: NOT
61584: IFFALSE 61588
// continue ;
61586: GO 61553
// for j in list [ nat ] do
61588: LD_ADDR_VAR 0 5
61592: PUSH
61593: LD_VAR 0 10
61597: PUSH
61598: LD_VAR 0 7
61602: ARRAY
61603: PUSH
61604: FOR_IN
61605: IFFALSE 61646
// if GetBWeapon ( i ) = j [ 1 ] then
61607: LD_VAR 0 4
61611: PPUSH
61612: CALL_OW 269
61616: PUSH
61617: LD_VAR 0 5
61621: PUSH
61622: LD_INT 1
61624: ARRAY
61625: EQUAL
61626: IFFALSE 61644
// begin weapon := j [ 2 ] ;
61628: LD_ADDR_VAR 0 8
61632: PUSH
61633: LD_VAR 0 5
61637: PUSH
61638: LD_INT 2
61640: ARRAY
61641: ST_TO_ADDR
// break ;
61642: GO 61646
// end ;
61644: GO 61604
61646: POP
61647: POP
// if not weapon then
61648: LD_VAR 0 8
61652: NOT
61653: IFFALSE 61657
// continue ;
61655: GO 61553
// for k in factories do
61657: LD_ADDR_VAR 0 6
61661: PUSH
61662: LD_VAR 0 2
61666: PUSH
61667: FOR_IN
61668: IFFALSE 61733
// begin weapons := AvailableWeaponList ( k ) ;
61670: LD_ADDR_VAR 0 9
61674: PUSH
61675: LD_VAR 0 6
61679: PPUSH
61680: CALL_OW 478
61684: ST_TO_ADDR
// if not weapons then
61685: LD_VAR 0 9
61689: NOT
61690: IFFALSE 61694
// continue ;
61692: GO 61667
// if weapon in weapons then
61694: LD_VAR 0 8
61698: PUSH
61699: LD_VAR 0 9
61703: IN
61704: IFFALSE 61731
// begin result := [ i , weapon ] ;
61706: LD_ADDR_VAR 0 3
61710: PUSH
61711: LD_VAR 0 4
61715: PUSH
61716: LD_VAR 0 8
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: ST_TO_ADDR
// exit ;
61725: POP
61726: POP
61727: POP
61728: POP
61729: GO 61739
// end ; end ;
61731: GO 61667
61733: POP
61734: POP
// end ;
61735: GO 61553
61737: POP
61738: POP
// end ;
61739: LD_VAR 0 3
61743: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61744: LD_INT 0
61746: PPUSH
// if not side or side > 8 then
61747: LD_VAR 0 3
61751: NOT
61752: PUSH
61753: LD_VAR 0 3
61757: PUSH
61758: LD_INT 8
61760: GREATER
61761: OR
61762: IFFALSE 61766
// exit ;
61764: GO 61825
// if not range then
61766: LD_VAR 0 4
61770: NOT
61771: IFFALSE 61782
// range := - 12 ;
61773: LD_ADDR_VAR 0 4
61777: PUSH
61778: LD_INT 12
61780: NEG
61781: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61782: LD_VAR 0 1
61786: PPUSH
61787: LD_VAR 0 2
61791: PPUSH
61792: LD_VAR 0 3
61796: PPUSH
61797: LD_VAR 0 4
61801: PPUSH
61802: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61806: LD_VAR 0 1
61810: PPUSH
61811: LD_VAR 0 2
61815: PPUSH
61816: LD_VAR 0 3
61820: PPUSH
61821: CALL_OW 331
// end ;
61825: LD_VAR 0 5
61829: RET
// export function Video ( mode ) ; begin
61830: LD_INT 0
61832: PPUSH
// ingame_video = mode ;
61833: LD_ADDR_OWVAR 52
61837: PUSH
61838: LD_VAR 0 1
61842: ST_TO_ADDR
// interface_hidden = mode ;
61843: LD_ADDR_OWVAR 54
61847: PUSH
61848: LD_VAR 0 1
61852: ST_TO_ADDR
// end ;
61853: LD_VAR 0 2
61857: RET
// export function Join ( array , element ) ; begin
61858: LD_INT 0
61860: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61861: LD_ADDR_VAR 0 3
61865: PUSH
61866: LD_VAR 0 1
61870: PPUSH
61871: LD_VAR 0 1
61875: PUSH
61876: LD_INT 1
61878: PLUS
61879: PPUSH
61880: LD_VAR 0 2
61884: PPUSH
61885: CALL_OW 1
61889: ST_TO_ADDR
// end ;
61890: LD_VAR 0 3
61894: RET
// export function JoinUnion ( array , element ) ; begin
61895: LD_INT 0
61897: PPUSH
// result := array union element ;
61898: LD_ADDR_VAR 0 3
61902: PUSH
61903: LD_VAR 0 1
61907: PUSH
61908: LD_VAR 0 2
61912: UNION
61913: ST_TO_ADDR
// end ;
61914: LD_VAR 0 3
61918: RET
// export function GetBehemoths ( side ) ; begin
61919: LD_INT 0
61921: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61922: LD_ADDR_VAR 0 2
61926: PUSH
61927: LD_INT 22
61929: PUSH
61930: LD_VAR 0 1
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 31
61941: PUSH
61942: LD_INT 25
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PPUSH
61953: CALL_OW 69
61957: ST_TO_ADDR
// end ;
61958: LD_VAR 0 2
61962: RET
// export function Shuffle ( array ) ; var i , index ; begin
61963: LD_INT 0
61965: PPUSH
61966: PPUSH
61967: PPUSH
// result := [ ] ;
61968: LD_ADDR_VAR 0 2
61972: PUSH
61973: EMPTY
61974: ST_TO_ADDR
// if not array then
61975: LD_VAR 0 1
61979: NOT
61980: IFFALSE 61984
// exit ;
61982: GO 62083
// Randomize ;
61984: CALL_OW 10
// for i = array downto 1 do
61988: LD_ADDR_VAR 0 3
61992: PUSH
61993: DOUBLE
61994: LD_VAR 0 1
61998: INC
61999: ST_TO_ADDR
62000: LD_INT 1
62002: PUSH
62003: FOR_DOWNTO
62004: IFFALSE 62081
// begin index := rand ( 1 , array ) ;
62006: LD_ADDR_VAR 0 4
62010: PUSH
62011: LD_INT 1
62013: PPUSH
62014: LD_VAR 0 1
62018: PPUSH
62019: CALL_OW 12
62023: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62024: LD_ADDR_VAR 0 2
62028: PUSH
62029: LD_VAR 0 2
62033: PPUSH
62034: LD_VAR 0 2
62038: PUSH
62039: LD_INT 1
62041: PLUS
62042: PPUSH
62043: LD_VAR 0 1
62047: PUSH
62048: LD_VAR 0 4
62052: ARRAY
62053: PPUSH
62054: CALL_OW 2
62058: ST_TO_ADDR
// array := Delete ( array , index ) ;
62059: LD_ADDR_VAR 0 1
62063: PUSH
62064: LD_VAR 0 1
62068: PPUSH
62069: LD_VAR 0 4
62073: PPUSH
62074: CALL_OW 3
62078: ST_TO_ADDR
// end ;
62079: GO 62003
62081: POP
62082: POP
// end ;
62083: LD_VAR 0 2
62087: RET
// export function GetBaseMaterials ( base ) ; begin
62088: LD_INT 0
62090: PPUSH
// result := [ 0 , 0 , 0 ] ;
62091: LD_ADDR_VAR 0 2
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: LIST
62109: ST_TO_ADDR
// if not base then
62110: LD_VAR 0 1
62114: NOT
62115: IFFALSE 62119
// exit ;
62117: GO 62168
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62119: LD_ADDR_VAR 0 2
62123: PUSH
62124: LD_VAR 0 1
62128: PPUSH
62129: LD_INT 1
62131: PPUSH
62132: CALL_OW 275
62136: PUSH
62137: LD_VAR 0 1
62141: PPUSH
62142: LD_INT 2
62144: PPUSH
62145: CALL_OW 275
62149: PUSH
62150: LD_VAR 0 1
62154: PPUSH
62155: LD_INT 3
62157: PPUSH
62158: CALL_OW 275
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: ST_TO_ADDR
// end ;
62168: LD_VAR 0 2
62172: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62173: LD_INT 0
62175: PPUSH
62176: PPUSH
// result := array ;
62177: LD_ADDR_VAR 0 3
62181: PUSH
62182: LD_VAR 0 1
62186: ST_TO_ADDR
// if size > 0 then
62187: LD_VAR 0 2
62191: PUSH
62192: LD_INT 0
62194: GREATER
62195: IFFALSE 62241
// for i := array downto size do
62197: LD_ADDR_VAR 0 4
62201: PUSH
62202: DOUBLE
62203: LD_VAR 0 1
62207: INC
62208: ST_TO_ADDR
62209: LD_VAR 0 2
62213: PUSH
62214: FOR_DOWNTO
62215: IFFALSE 62239
// result := Delete ( result , result ) ;
62217: LD_ADDR_VAR 0 3
62221: PUSH
62222: LD_VAR 0 3
62226: PPUSH
62227: LD_VAR 0 3
62231: PPUSH
62232: CALL_OW 3
62236: ST_TO_ADDR
62237: GO 62214
62239: POP
62240: POP
// end ;
62241: LD_VAR 0 3
62245: RET
// export function ComExit ( unit ) ; var tmp ; begin
62246: LD_INT 0
62248: PPUSH
62249: PPUSH
// if not IsInUnit ( unit ) then
62250: LD_VAR 0 1
62254: PPUSH
62255: CALL_OW 310
62259: NOT
62260: IFFALSE 62264
// exit ;
62262: GO 62324
// tmp := IsInUnit ( unit ) ;
62264: LD_ADDR_VAR 0 3
62268: PUSH
62269: LD_VAR 0 1
62273: PPUSH
62274: CALL_OW 310
62278: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62279: LD_VAR 0 3
62283: PPUSH
62284: CALL_OW 247
62288: PUSH
62289: LD_INT 2
62291: EQUAL
62292: IFFALSE 62305
// ComExitVehicle ( unit ) else
62294: LD_VAR 0 1
62298: PPUSH
62299: CALL_OW 121
62303: GO 62314
// ComExitBuilding ( unit ) ;
62305: LD_VAR 0 1
62309: PPUSH
62310: CALL_OW 122
// result := tmp ;
62314: LD_ADDR_VAR 0 2
62318: PUSH
62319: LD_VAR 0 3
62323: ST_TO_ADDR
// end ;
62324: LD_VAR 0 2
62328: RET
// export function ResetHc ; begin
62329: LD_INT 0
62331: PPUSH
// InitHc ;
62332: CALL_OW 19
// hc_importance := 0 ;
62336: LD_ADDR_OWVAR 32
62340: PUSH
62341: LD_INT 0
62343: ST_TO_ADDR
// end ;
62344: LD_VAR 0 1
62348: RET
